V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['3_forward']
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/5u/c5uvwwgld7p6ouyz6bagdlnbfnoack6puripugudahm5jqhil62f.py
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [batch_norm, x], Original ATen: [aten._native_batch_norm_legit_no_training, aten.elu]
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   batch_norm => add_1, mul_1, mul_2, sub
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   x => expm1, gt, mul_3, mul_5, where
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%primals_1, %unsqueeze_1), kwargs = {})
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub, %unsqueeze_3), kwargs = {})
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_2 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_1, %unsqueeze_5), kwargs = {})
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_1 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_2, %unsqueeze_7), kwargs = {})
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %gt : [num_users=1] = call_function[target=torch.ops.aten.gt.Scalar](args = (%add_1, 0), kwargs = {})
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_3 : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_1, 1.0), kwargs = {})
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %expm1 : [num_users=1] = call_function[target=torch.ops.aten.expm1.default](args = (%mul_3,), kwargs = {})
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_5 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%expm1, 1.0), kwargs = {})
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %where : [num_users=2] = call_function[target=torch.ops.aten.where.self](args = (%gt, %mul_3, %mul_5), kwargs = {})
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused__native_batch_norm_legit_no_training_elu_0 = async_compile.triton('triton_poi_fused__native_batch_norm_legit_no_training_elu_0', '''
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 256}, 
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__native_batch_norm_legit_no_training_elu_0', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused__native_batch_norm_legit_no_training_elu_0(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, XBLOCK : tl.constexpr):
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 256
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 16) % 4)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x3), xmask)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (x1), xmask, eviction_policy='evict_last')
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.load(in_ptr2 + (x1), xmask, eviction_policy='evict_last')
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tl.load(in_ptr3 + (x1), xmask, eviction_policy='evict_last')
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tl.load(in_ptr4 + (x1), xmask, eviction_policy='evict_last')
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 - tmp1
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = 0.0001
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp3 + tmp4
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = libdevice.sqrt(tmp5)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tl.full([1], 1, tl.int32)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp7 / tmp6
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = 1.0
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp8 * tmp9
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp2 * tmp10
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp11 * tmp12
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp13 + tmp14
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = 0.0
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp15 > tmp16
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tmp15 * tmp9
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = libdevice.expm1(tmp18)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp19 * tmp9
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tl.where(tmp17, tmp18, tmp20)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x3), tmp21, xmask)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/wf/cwf3lj3jgqfghc3yij4myge7cxrpggghoo5dii7clzbq5ccvadj4.py
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [batch_norm_1, x_2], Original ATen: [aten.clone, aten._native_batch_norm_legit_no_training, aten.elu]
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   batch_norm_1 => add_3, clone, mul_7, mul_8, sub_1
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   x_2 => expm1_1, gt_1, mul_11, mul_9, where_1
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clone : [num_users=2] = call_function[target=torch.ops.aten.clone.default](args = (%slice_4,), kwargs = {memory_format: torch.contiguous_format})
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_1 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%clone, %unsqueeze_9), kwargs = {})
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_7 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_1, %unsqueeze_11), kwargs = {})
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_8 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_7, %unsqueeze_13), kwargs = {})
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_3 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_8, %unsqueeze_15), kwargs = {})
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %gt_1 : [num_users=1] = call_function[target=torch.ops.aten.gt.Scalar](args = (%add_3, 0), kwargs = {})
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_9 : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_3, 1.0), kwargs = {})
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %expm1_1 : [num_users=1] = call_function[target=torch.ops.aten.expm1.default](args = (%mul_9,), kwargs = {})
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_11 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%expm1_1, 1.0), kwargs = {})
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %where_1 : [num_users=2] = call_function[target=torch.ops.aten.where.self](args = (%gt_1, %mul_9, %mul_11), kwargs = {})
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused__native_batch_norm_legit_no_training_clone_elu_1 = async_compile.triton('triton_poi_fused__native_batch_norm_legit_no_training_clone_elu_1', '''
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 32}, 
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'in_ptr5': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__native_batch_norm_legit_no_training_clone_elu_1', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused__native_batch_norm_legit_no_training_clone_elu_1(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 32
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex // 8
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x4 = (xindex % 8)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 4) % 2)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (16 + x4 + 24*x2), xmask)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (4 + x1), xmask, eviction_policy='evict_last')
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.load(in_ptr2 + (x1), xmask, eviction_policy='evict_last')
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tl.load(in_ptr3 + (x1), xmask, eviction_policy='evict_last')
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tl.load(in_ptr4 + (x1), xmask, eviction_policy='evict_last')
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tl.load(in_ptr5 + (x1), xmask, eviction_policy='evict_last')
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 + tmp1
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp2 - tmp3
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = 0.0001
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tmp5 + tmp6
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = libdevice.sqrt(tmp7)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tl.full([1], 1, tl.int32)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp9 / tmp8
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = 1.0
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tmp10 * tmp11
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp4 * tmp12
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp13 * tmp14
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp15 + tmp16
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = 0.0
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tmp17 > tmp18
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp17 * tmp11
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = libdevice.expm1(tmp20)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tmp21 * tmp11
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tl.where(tmp19, tmp20, tmp22)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x3), tmp2, xmask)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x3), tmp23, xmask)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/q7/cq76wbmwuzoqvpcuig7mt5cauavdgisoaivwg5yhucyocrjvzifn.py
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [x_3, add], Original ATen: [aten.convolution, aten.add]
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add => add_4
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   x_3 => convolution_1
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convolution_1 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%where_1, %primals_12, %primals_13, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_4 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_1, %slice_2), kwargs = {})
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_add_convolution_2 = async_compile.triton('triton_poi_fused_add_convolution_2', '''
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64}, 
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_2', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_add_convolution_2(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 64
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 4) % 4)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex // 16
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x4 = (xindex % 16)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_out_ptr0 + (x3), xmask)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr0 + (x1), xmask, eviction_policy='evict_last')
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.load(in_ptr1 + (x4 + 24*x2), xmask)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.load(in_ptr2 + (x1), xmask, eviction_policy='evict_last')
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 + tmp1
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp3 + tmp4
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tmp2 + tmp5
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x3), tmp6, xmask)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13 = args
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_2, (4, ), (1, ))
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_3, (4, ), (1, ))
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_4, (4, ), (1, ))
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_5, (4, ), (1, ))
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_6, (6, 4, 3, 3), (36, 9, 3, 1))
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_7, (6, ), (1, ))
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_8, (2, ), (1, ))
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_9, (2, ), (1, ))
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_10, (2, ), (1, ))
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_11, (2, ), (1, ))
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_12, (4, 2, 3, 3), (18, 9, 3, 1))
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_13, (4, ), (1, ))
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((4, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = buf0; del buf0  # reuse
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [batch_norm, x], Original ATen: [aten._native_batch_norm_legit_no_training, aten.elu]
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__native_batch_norm_legit_no_training_elu_0.run(buf1, primals_1, primals_2, primals_3, primals_4, primals_5, 256, grid=grid(256), stream=stream0)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [x_cat], Original ATen: [aten.convolution]
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = extern_kernels.convolution(buf1, primals_6, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf2, (4, 6, 2, 2), (24, 4, 2, 1))
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = empty_strided_cuda((4, 2, 2, 2), (8, 4, 2, 1), torch.float32)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf4 = empty_strided_cuda((4, 2, 2, 2), (8, 4, 2, 1), torch.float32)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf5 = buf4; del buf4  # reuse
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [batch_norm_1, x_2], Original ATen: [aten.clone, aten._native_batch_norm_legit_no_training, aten.elu]
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__native_batch_norm_legit_no_training_clone_elu_1.run(buf5, buf2, primals_7, primals_8, primals_9, primals_10, primals_11, buf3, 32, grid=grid(32), stream=stream0)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [x_3], Original ATen: [aten.convolution]
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf6 = extern_kernels.convolution(buf5, primals_12, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf6, (4, 4, 2, 2), (16, 4, 2, 1))
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf7 = buf6; del buf6  # reuse
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [x_3, add], Original ATen: [aten.convolution, aten.add]
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_add_convolution_2.run(buf7, primals_13, buf2, primals_7, 64, grid=grid(64), stream=stream0)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf2
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_13
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_7
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf7, primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_8, primals_9, primals_10, primals_11, primals_12, buf1, buf3, buf5, )
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_2 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_3 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_4 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_5 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_6 = rand_strided((6, 4, 3, 3), (36, 9, 3, 1), device='cuda:0', dtype=torch.float32)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_7 = rand_strided((6, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_8 = rand_strided((2, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_9 = rand_strided((2, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_10 = rand_strided((2, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_11 = rand_strided((2, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_12 = rand_strided((4, 2, 3, 3), (18, 9, 3, 1), device='cuda:0', dtype=torch.float32)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_13 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13])
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0204 13:27:14.842000 1233567 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:27:14.847000 1233567 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: /tmp/torchinductor_sahanp/jh/cjhj4awl7ze2pf7xdkp5i3wyujtsvkebjesqtymkqrvnpar2qfej.py
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['3_forward']
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/5u/c5uvwwgld7p6ouyz6bagdlnbfnoack6puripugudahm5jqhil62f.py
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [batch_norm, x], Original ATen: [aten._native_batch_norm_legit_no_training, aten.elu]
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   batch_norm => add_1, mul_1, mul_2, sub
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   x => expm1, gt, mul_3, mul_5, where
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%primals_1, %unsqueeze_1), kwargs = {})
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub, %unsqueeze_3), kwargs = {})
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_2 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_1, %unsqueeze_5), kwargs = {})
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_1 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_2, %unsqueeze_7), kwargs = {})
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %gt : [num_users=1] = call_function[target=torch.ops.aten.gt.Scalar](args = (%add_1, 0), kwargs = {})
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_3 : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_1, 1.0), kwargs = {})
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %expm1 : [num_users=1] = call_function[target=torch.ops.aten.expm1.default](args = (%mul_3,), kwargs = {})
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_5 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%expm1, 1.0), kwargs = {})
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %where : [num_users=2] = call_function[target=torch.ops.aten.where.self](args = (%gt, %mul_3, %mul_5), kwargs = {})
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused__native_batch_norm_legit_no_training_elu_0 = async_compile.triton('triton_poi_fused__native_batch_norm_legit_no_training_elu_0', '''
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 256}, 
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__native_batch_norm_legit_no_training_elu_0', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused__native_batch_norm_legit_no_training_elu_0(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, XBLOCK : tl.constexpr):
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 256
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 16) % 4)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x3), xmask)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (x1), xmask, eviction_policy='evict_last')
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.load(in_ptr2 + (x1), xmask, eviction_policy='evict_last')
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tl.load(in_ptr3 + (x1), xmask, eviction_policy='evict_last')
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tl.load(in_ptr4 + (x1), xmask, eviction_policy='evict_last')
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 - tmp1
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = 0.0001
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp3 + tmp4
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = libdevice.sqrt(tmp5)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tl.full([1], 1, tl.int32)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp7 / tmp6
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = 1.0
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp8 * tmp9
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp2 * tmp10
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp11 * tmp12
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp13 + tmp14
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = 0.0
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp15 > tmp16
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tmp15 * tmp9
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = libdevice.expm1(tmp18)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp19 * tmp9
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tl.where(tmp17, tmp18, tmp20)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x3), tmp21, xmask)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/wf/cwf3lj3jgqfghc3yij4myge7cxrpggghoo5dii7clzbq5ccvadj4.py
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [batch_norm_1, x_2], Original ATen: [aten.clone, aten._native_batch_norm_legit_no_training, aten.elu]
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   batch_norm_1 => add_3, clone, mul_7, mul_8, sub_1
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   x_2 => expm1_1, gt_1, mul_11, mul_9, where_1
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clone : [num_users=2] = call_function[target=torch.ops.aten.clone.default](args = (%slice_4,), kwargs = {memory_format: torch.contiguous_format})
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_1 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%clone, %unsqueeze_9), kwargs = {})
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_7 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_1, %unsqueeze_11), kwargs = {})
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_8 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_7, %unsqueeze_13), kwargs = {})
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_3 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_8, %unsqueeze_15), kwargs = {})
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %gt_1 : [num_users=1] = call_function[target=torch.ops.aten.gt.Scalar](args = (%add_3, 0), kwargs = {})
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_9 : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_3, 1.0), kwargs = {})
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %expm1_1 : [num_users=1] = call_function[target=torch.ops.aten.expm1.default](args = (%mul_9,), kwargs = {})
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_11 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%expm1_1, 1.0), kwargs = {})
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %where_1 : [num_users=2] = call_function[target=torch.ops.aten.where.self](args = (%gt_1, %mul_9, %mul_11), kwargs = {})
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused__native_batch_norm_legit_no_training_clone_elu_1 = async_compile.triton('triton_poi_fused__native_batch_norm_legit_no_training_clone_elu_1', '''
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 32}, 
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'in_ptr5': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__native_batch_norm_legit_no_training_clone_elu_1', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused__native_batch_norm_legit_no_training_clone_elu_1(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 32
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex // 8
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x4 = (xindex % 8)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 4) % 2)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (16 + x4 + 24*x2), xmask)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (4 + x1), xmask, eviction_policy='evict_last')
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.load(in_ptr2 + (x1), xmask, eviction_policy='evict_last')
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tl.load(in_ptr3 + (x1), xmask, eviction_policy='evict_last')
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tl.load(in_ptr4 + (x1), xmask, eviction_policy='evict_last')
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tl.load(in_ptr5 + (x1), xmask, eviction_policy='evict_last')
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 + tmp1
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp2 - tmp3
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = 0.0001
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tmp5 + tmp6
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = libdevice.sqrt(tmp7)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tl.full([1], 1, tl.int32)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp9 / tmp8
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = 1.0
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tmp10 * tmp11
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp4 * tmp12
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp13 * tmp14
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp15 + tmp16
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = 0.0
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tmp17 > tmp18
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp17 * tmp11
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = libdevice.expm1(tmp20)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tmp21 * tmp11
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tl.where(tmp19, tmp20, tmp22)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x3), tmp2, xmask)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x3), tmp23, xmask)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/q7/cq76wbmwuzoqvpcuig7mt5cauavdgisoaivwg5yhucyocrjvzifn.py
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [x_3, add], Original ATen: [aten.convolution, aten.add]
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add => add_4
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   x_3 => convolution_1
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convolution_1 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%where_1, %primals_12, %primals_13, [1, 1], [1, 1], [1, 1], False, [0, 0], 1), kwargs = {})
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_4 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convolution_1, %slice_2), kwargs = {})
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_add_convolution_2 = async_compile.triton('triton_poi_fused_add_convolution_2', '''
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64}, 
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_2', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_add_convolution_2(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 64
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 4) % 4)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex // 16
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x4 = (xindex % 16)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_out_ptr0 + (x3), xmask)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr0 + (x1), xmask, eviction_policy='evict_last')
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.load(in_ptr1 + (x4 + 24*x2), xmask)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.load(in_ptr2 + (x1), xmask, eviction_policy='evict_last')
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 + tmp1
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp3 + tmp4
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tmp2 + tmp5
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x3), tmp6, xmask)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13 = args
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_2, (4, ), (1, ))
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_3, (4, ), (1, ))
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_4, (4, ), (1, ))
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_5, (4, ), (1, ))
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_6, (6, 4, 3, 3), (36, 9, 3, 1))
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_7, (6, ), (1, ))
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_8, (2, ), (1, ))
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_9, (2, ), (1, ))
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_10, (2, ), (1, ))
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_11, (2, ), (1, ))
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_12, (4, 2, 3, 3), (18, 9, 3, 1))
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_13, (4, ), (1, ))
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((4, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = buf0; del buf0  # reuse
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [batch_norm, x], Original ATen: [aten._native_batch_norm_legit_no_training, aten.elu]
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__native_batch_norm_legit_no_training_elu_0.run(buf1, primals_1, primals_2, primals_3, primals_4, primals_5, 256, grid=grid(256), stream=stream0)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [x_cat], Original ATen: [aten.convolution]
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = extern_kernels.convolution(buf1, primals_6, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf2, (4, 6, 2, 2), (24, 4, 2, 1))
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = empty_strided_cuda((4, 2, 2, 2), (8, 4, 2, 1), torch.float32)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf4 = empty_strided_cuda((4, 2, 2, 2), (8, 4, 2, 1), torch.float32)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf5 = buf4; del buf4  # reuse
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [batch_norm_1, x_2], Original ATen: [aten.clone, aten._native_batch_norm_legit_no_training, aten.elu]
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__native_batch_norm_legit_no_training_clone_elu_1.run(buf5, buf2, primals_7, primals_8, primals_9, primals_10, primals_11, buf3, 32, grid=grid(32), stream=stream0)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [x_3], Original ATen: [aten.convolution]
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf6 = extern_kernels.convolution(buf5, primals_12, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf6, (4, 4, 2, 2), (16, 4, 2, 1))
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf7 = buf6; del buf6  # reuse
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [x_3, add], Original ATen: [aten.convolution, aten.add]
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_add_convolution_2.run(buf7, primals_13, buf2, primals_7, 64, grid=grid(64), stream=stream0)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf2
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_13
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_7
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf7, primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_8, primals_9, primals_10, primals_11, primals_12, buf1, buf3, buf5, )
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_2 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_3 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_4 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_5 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_6 = rand_strided((6, 4, 3, 3), (36, 9, 3, 1), device='cuda:0', dtype=torch.float32)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_7 = rand_strided((6, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_8 = rand_strided((2, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_9 = rand_strided((2, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_10 = rand_strided((2, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_11 = rand_strided((2, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_12 = rand_strided((4, 2, 3, 3), (18, 9, 3, 1), device='cuda:0', dtype=torch.float32)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_13 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13])
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0205 18:17:22.056000 3798088 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:17:22.061000 3798088 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: inductor_cache/44/c44dlzee23wzq46sfpbzfojy7h65agzgqo4eok7xco6h7hx3ou22.py
