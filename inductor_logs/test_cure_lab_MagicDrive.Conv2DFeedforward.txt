V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['7_forward']
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/44/c44b2khzwhi6oxai5kkfz35jwxtmtfhxemeaosdjxmslk5s45ztd.py
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [input_1], Original ATen: [aten.convolution]
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   input_1 => convolution
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convolution : [num_users=2] = call_function[target=torch.ops.aten.convolution.default](args = (%permute, %primals_2, %primals_3, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), kwargs = {})
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_convolution_0 = async_compile.triton('triton_poi_fused_convolution_0', '''
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'y': 16, 'x': 4}, tile_hint=TileHint.SQUARE,
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'ynumel': 'i32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_convolution_0', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_convolution_0(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     ynumel = 16
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 4
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     yoffset = tl.program_id(1) * YBLOCK
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     ymask = yindex < ynumel
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = (xindex % 2)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex // 2
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     y0 = (yindex % 4)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     y1 = yindex // 4
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x5 = xindex
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     y4 = yindex
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (y0 + 4*x3 + 8*x2 + 16*y1), xmask & ymask, eviction_policy='evict_last')
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x5 + 4*y4), tmp0, xmask & ymask)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/6u/c6urwqakos5ruryqdmp4ty5ijfa4t4xr333vwqhxim6jpjgcc4gi.py
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [input_1], Original ATen: [aten.convolution]
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   input_1 => convolution
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convolution : [num_users=2] = call_function[target=torch.ops.aten.convolution.default](args = (%permute, %primals_2, %primals_3, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), kwargs = {})
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_convolution_1 = async_compile.triton('triton_poi_fused_convolution_1', '''
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64}, 
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_convolution_1', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_convolution_1(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 64
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 4) % 4)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_out_ptr0 + (x3), xmask)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr0 + (x1), xmask, eviction_policy='evict_last')
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 + tmp1
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x3), tmp2, xmask)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/df/cdfneni356p5hbzdkvb5yynb2wktl35zhs2p4pvnoysevmups7ne.py
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [input_2, input_3], Original ATen: [aten.convolution, aten.gelu]
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   input_2 => convolution_1
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   input_3 => add, erf, mul, mul_1, mul_2
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convolution_1 : [num_users=3] = call_function[target=torch.ops.aten.convolution.default](args = (%convolution, %primals_4, %primals_5, [1, 1], [1, 1], [1, 1], False, [0, 0], 4), kwargs = {})
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_1, 0.5), kwargs = {})
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_1, 0.7071067811865476), kwargs = {})
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %erf : [num_users=1] = call_function[target=torch.ops.aten.erf.default](args = (%mul_1,), kwargs = {})
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%erf, 1), kwargs = {})
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_2 : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul, %add), kwargs = {})
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_convolution_gelu_2 = async_compile.triton('triton_poi_fused_convolution_gelu_2', '''
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64}, 
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_convolution_gelu_2', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_convolution_gelu_2(in_out_ptr0, in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 64
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 4) % 4)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_out_ptr0 + (x3), xmask)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr0 + (x1), xmask, eviction_policy='evict_last')
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 + tmp1
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = 0.5
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp2 * tmp3
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = 0.7071067811865476
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tmp2 * tmp5
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = libdevice.erf(tmp6)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = 1.0
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp7 + tmp8
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp4 * tmp9
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x3), tmp2, xmask)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x3), tmp10, xmask)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/27/c27dwaxknqjy5elf5jynvipqe5iw7cnfuudurf4m75lu5tf7wquk.py
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [flatten], Original ATen: [aten.clone]
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   flatten => clone_1
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clone_1 : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%permute_1,), kwargs = {memory_format: torch.contiguous_format})
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_clone_3 = async_compile.triton('triton_poi_fused_clone_3', '''
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'y': 8, 'x': 8}, tile_hint=TileHint.DEFAULT,
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'ynumel': 'i32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_3', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_clone_3(in_ptr0, in_ptr1, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     ynumel = 8
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 8
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     yoffset = tl.program_id(1) * YBLOCK
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     ymask = yindex < ynumel
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = (xindex % 4)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex // 4
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     y0 = (yindex % 2)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     y1 = yindex // 2
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x5 = xindex
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     y4 = yindex
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (y0 + 2*x3 + 4*x2 + 16*y1), xmask & ymask)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (x2), xmask, eviction_policy='evict_last')
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 + tmp1
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x5 + 8*y4), tmp2, xmask & ymask)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7 = args
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_1, (4, 4, 4), (16, 4, 1))
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_2, (4, 4, 1, 1), (4, 1, 1, 1))
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_3, (4, ), (1, ))
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_4, (4, 1, 3, 3), (9, 9, 3, 1))
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_5, (4, ), (1, ))
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_6, (4, 4, 1, 1), (4, 1, 1, 1))
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_7, (4, ), (1, ))
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((4, 4, 2, 2), (16, 4, 2, 1), torch.float32)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [input_1], Original ATen: [aten.convolution]
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_convolution_0.run(primals_1, buf0, 16, 4, grid=grid(16, 4), stream=stream0)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [input_1], Original ATen: [aten.convolution]
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = extern_kernels.convolution(buf0, primals_2, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf1, (4, 4, 2, 2), (16, 4, 2, 1))
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = buf1; del buf1  # reuse
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [input_1], Original ATen: [aten.convolution]
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_convolution_1.run(buf2, primals_3, 64, grid=grid(64), stream=stream0)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_3
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [input_2], Original ATen: [aten.convolution]
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = extern_kernels.convolution(buf2, primals_4, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=4, bias=None)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf3, (4, 4, 2, 2), (16, 4, 2, 1))
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf4 = buf3; del buf3  # reuse
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf5 = buf0; del buf0  # reuse
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [input_2, input_3], Original ATen: [aten.convolution, aten.gelu]
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_convolution_gelu_2.run(buf4, primals_5, buf5, 64, grid=grid(64), stream=stream0)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_5
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [input_4], Original ATen: [aten.convolution]
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf6 = extern_kernels.convolution(buf5, primals_6, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf6, (4, 4, 2, 2), (16, 4, 2, 1))
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf7 = empty_strided_cuda((4, 2, 2, 4), (16, 8, 4, 1), torch.float32)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [flatten], Original ATen: [aten.clone]
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_clone_3.run(buf6, primals_7, buf7, 8, 8, grid=grid(8, 8), stream=stream0)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf6
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_7
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (reinterpret_tensor(buf7, (4, 4, 4), (16, 4, 1), 0), primals_2, primals_4, primals_6, reinterpret_tensor(primals_1, (4, 4, 2, 2), (16, 1, 4, 8), 0), buf2, buf4, buf5, )
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1 = rand_strided((4, 4, 4), (16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_2 = rand_strided((4, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_3 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_4 = rand_strided((4, 1, 3, 3), (9, 9, 3, 1), device='cuda:0', dtype=torch.float32)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_5 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_6 = rand_strided((4, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_7 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7])
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0204 15:50:14.072000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:14.076000 2114025 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: /tmp/torchinductor_sahanp/66/c66pusnkkpzcs4azqpnnl234nm3e2dj7xt4rjuufh2a45yuflj27.py
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['7_forward']
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/44/c44b2khzwhi6oxai5kkfz35jwxtmtfhxemeaosdjxmslk5s45ztd.py
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [input_1], Original ATen: [aten.convolution]
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   input_1 => convolution
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convolution : [num_users=2] = call_function[target=torch.ops.aten.convolution.default](args = (%permute, %primals_2, %primals_3, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), kwargs = {})
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_convolution_0 = async_compile.triton('triton_poi_fused_convolution_0', '''
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'y': 16, 'x': 4}, tile_hint=TileHint.SQUARE,
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'ynumel': 'i32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_convolution_0', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_convolution_0(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     ynumel = 16
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 4
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     yoffset = tl.program_id(1) * YBLOCK
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     ymask = yindex < ynumel
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = (xindex % 2)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex // 2
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     y0 = (yindex % 4)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     y1 = yindex // 4
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x5 = xindex
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     y4 = yindex
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (y0 + 4*x3 + 8*x2 + 16*y1), xmask & ymask, eviction_policy='evict_last')
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x5 + 4*y4), tmp0, xmask & ymask)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/6u/c6urwqakos5ruryqdmp4ty5ijfa4t4xr333vwqhxim6jpjgcc4gi.py
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [input_1], Original ATen: [aten.convolution]
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   input_1 => convolution
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convolution : [num_users=2] = call_function[target=torch.ops.aten.convolution.default](args = (%permute, %primals_2, %primals_3, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), kwargs = {})
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_convolution_1 = async_compile.triton('triton_poi_fused_convolution_1', '''
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64}, 
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_convolution_1', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_convolution_1(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 64
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 4) % 4)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_out_ptr0 + (x3), xmask)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr0 + (x1), xmask, eviction_policy='evict_last')
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 + tmp1
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x3), tmp2, xmask)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/df/cdfneni356p5hbzdkvb5yynb2wktl35zhs2p4pvnoysevmups7ne.py
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [input_2, input_3], Original ATen: [aten.convolution, aten.gelu]
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   input_2 => convolution_1
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   input_3 => add, erf, mul, mul_1, mul_2
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convolution_1 : [num_users=3] = call_function[target=torch.ops.aten.convolution.default](args = (%convolution, %primals_4, %primals_5, [1, 1], [1, 1], [1, 1], False, [0, 0], 4), kwargs = {})
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_1, 0.5), kwargs = {})
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_1, 0.7071067811865476), kwargs = {})
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %erf : [num_users=1] = call_function[target=torch.ops.aten.erf.default](args = (%mul_1,), kwargs = {})
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%erf, 1), kwargs = {})
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_2 : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul, %add), kwargs = {})
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_convolution_gelu_2 = async_compile.triton('triton_poi_fused_convolution_gelu_2', '''
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64}, 
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_convolution_gelu_2', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_convolution_gelu_2(in_out_ptr0, in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 64
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 4) % 4)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_out_ptr0 + (x3), xmask)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr0 + (x1), xmask, eviction_policy='evict_last')
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 + tmp1
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = 0.5
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp2 * tmp3
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = 0.7071067811865476
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tmp2 * tmp5
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = libdevice.erf(tmp6)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = 1.0
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp7 + tmp8
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp4 * tmp9
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x3), tmp2, xmask)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x3), tmp10, xmask)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/27/c27dwaxknqjy5elf5jynvipqe5iw7cnfuudurf4m75lu5tf7wquk.py
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [flatten], Original ATen: [aten.clone]
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   flatten => clone_1
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clone_1 : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%permute_1,), kwargs = {memory_format: torch.contiguous_format})
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_clone_3 = async_compile.triton('triton_poi_fused_clone_3', '''
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'y': 8, 'x': 8}, tile_hint=TileHint.DEFAULT,
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'ynumel': 'i32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_3', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_clone_3(in_ptr0, in_ptr1, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     ynumel = 8
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 8
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     yoffset = tl.program_id(1) * YBLOCK
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     ymask = yindex < ynumel
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = (xindex % 4)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex // 4
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     y0 = (yindex % 2)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     y1 = yindex // 2
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x5 = xindex
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     y4 = yindex
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (y0 + 2*x3 + 4*x2 + 16*y1), xmask & ymask)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (x2), xmask, eviction_policy='evict_last')
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 + tmp1
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x5 + 8*y4), tmp2, xmask & ymask)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7 = args
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_1, (4, 4, 4), (16, 4, 1))
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_2, (4, 4, 1, 1), (4, 1, 1, 1))
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_3, (4, ), (1, ))
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_4, (4, 1, 3, 3), (9, 9, 3, 1))
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_5, (4, ), (1, ))
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_6, (4, 4, 1, 1), (4, 1, 1, 1))
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_7, (4, ), (1, ))
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((4, 4, 2, 2), (16, 4, 2, 1), torch.float32)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [input_1], Original ATen: [aten.convolution]
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_convolution_0.run(primals_1, buf0, 16, 4, grid=grid(16, 4), stream=stream0)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [input_1], Original ATen: [aten.convolution]
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = extern_kernels.convolution(buf0, primals_2, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf1, (4, 4, 2, 2), (16, 4, 2, 1))
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = buf1; del buf1  # reuse
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [input_1], Original ATen: [aten.convolution]
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_convolution_1.run(buf2, primals_3, 64, grid=grid(64), stream=stream0)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_3
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [input_2], Original ATen: [aten.convolution]
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = extern_kernels.convolution(buf2, primals_4, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=4, bias=None)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf3, (4, 4, 2, 2), (16, 4, 2, 1))
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf4 = buf3; del buf3  # reuse
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf5 = buf0; del buf0  # reuse
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [input_2, input_3], Original ATen: [aten.convolution, aten.gelu]
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_convolution_gelu_2.run(buf4, primals_5, buf5, 64, grid=grid(64), stream=stream0)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_5
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [input_4], Original ATen: [aten.convolution]
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf6 = extern_kernels.convolution(buf5, primals_6, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf6, (4, 4, 2, 2), (16, 4, 2, 1))
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf7 = empty_strided_cuda((4, 2, 2, 4), (16, 8, 4, 1), torch.float32)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [flatten], Original ATen: [aten.clone]
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_clone_3.run(buf6, primals_7, buf7, 8, 8, grid=grid(8, 8), stream=stream0)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf6
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_7
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (reinterpret_tensor(buf7, (4, 4, 4), (16, 4, 1), 0), primals_2, primals_4, primals_6, reinterpret_tensor(primals_1, (4, 4, 2, 2), (16, 1, 4, 8), 0), buf2, buf4, buf5, )
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1 = rand_strided((4, 4, 4), (16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_2 = rand_strided((4, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_3 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_4 = rand_strided((4, 1, 3, 3), (9, 9, 3, 1), device='cuda:0', dtype=torch.float32)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_5 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_6 = rand_strided((4, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_7 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7])
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0205 20:39:41.703000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:41.708000 3650527 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: inductor_cache/oo/cooycdltxedqrzjfwwzkwmxmn52ms6smwpbfl3mqed6ardtu3zwb.py
