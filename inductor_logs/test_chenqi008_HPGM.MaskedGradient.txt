V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['2_inference']
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [output_x, pow_1, output_y, pow_2, add, add_1, inputs_grad, output_x_1, pow_3, output_y_1, pow_4, add_2, add_3, targets_grad, grad_loss], Original ATen: [aten.constant_pad_nd, aten.pow, aten.add, aten.sqrt, aten.sub, aten.abs, aten.mean]
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add => add
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add_1 => add_1
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add_2 => add_2
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add_3 => add_3
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   grad_loss => abs_1, mean, sub
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   inputs_grad => sqrt
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   output_x => constant_pad_nd
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   output_x_1 => constant_pad_nd_2
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   output_y => constant_pad_nd_1
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   output_y_1 => constant_pad_nd_3
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pow_1 => pow_1
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pow_2 => pow_2
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pow_3 => pow_3
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pow_4 => pow_4
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   targets_grad => sqrt_1
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %constant_pad_nd : [num_users=1] = call_function[target=torch.ops.aten.constant_pad_nd.default](args = (%convolution, [1, 1, 0, 0], 0.0), kwargs = {})
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_1 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%constant_pad_nd, 2), kwargs = {})
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %constant_pad_nd_1 : [num_users=1] = call_function[target=torch.ops.aten.constant_pad_nd.default](args = (%convolution_1, [0, 0, 1, 1], 0.0), kwargs = {})
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_2 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%constant_pad_nd_1, 2), kwargs = {})
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%pow_1, %pow_2), kwargs = {})
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_1 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add, 0.0001), kwargs = {})
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sqrt : [num_users=2] = call_function[target=torch.ops.aten.sqrt.default](args = (%add_1,), kwargs = {})
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %constant_pad_nd_2 : [num_users=1] = call_function[target=torch.ops.aten.constant_pad_nd.default](args = (%convolution_2, [1, 1, 0, 0], 0.0), kwargs = {})
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_3 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%constant_pad_nd_2, 2), kwargs = {})
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %constant_pad_nd_3 : [num_users=1] = call_function[target=torch.ops.aten.constant_pad_nd.default](args = (%convolution_3, [0, 0, 1, 1], 0.0), kwargs = {})
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_4 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%constant_pad_nd_3, 2), kwargs = {})
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_2 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%pow_3, %pow_4), kwargs = {})
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_3 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_2, 0.0001), kwargs = {})
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sqrt_1 : [num_users=2] = call_function[target=torch.ops.aten.sqrt.default](args = (%add_3,), kwargs = {})
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%sqrt, %sqrt_1), kwargs = {})
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %abs_1 : [num_users=1] = call_function[target=torch.ops.aten.abs.default](args = (%sub,), kwargs = {})
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean : [num_users=1] = call_function[target=torch.ops.aten.mean.default](args = (%abs_1,), kwargs = {})
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_red_fused_abs_add_constant_pad_nd_mean_pow_sqrt_sub_0 = async_compile.triton('triton_red_fused_abs_add_constant_pad_nd_mean_pow_sqrt_sub_0', '''
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.reduction(
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64, 'r': 8192},
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'out_ptr2': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 8), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_abs_add_constant_pad_nd_mean_pow_sqrt_sub_0', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_red_fused_abs_add_constant_pad_nd_mean_pow_sqrt_sub_0(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, out_ptr1, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 36
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 8192
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rbase = tl.arange(0, RBLOCK)[None, :]
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = xindex
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     _tmp28 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     for roffset in range(0, rnumel, RBLOCK):
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         rindex = roffset + rbase
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         rmask = rindex < rnumel
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         r1 = (rindex % 64)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         r5 = rindex // 64
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         r2 = ((rindex // 64) % 64)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         r3 = rindex // 4096
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         r6 = (rindex % 4096)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         r4 = rindex
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp0 = (-1) + r1
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp1 = tl.full([1, 1], 0, tl.int64)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp2 = tmp0 >= tmp1
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp3 = tl.full([1, 1], 62, tl.int64)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp4 = tmp0 < tmp3
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp5 = tmp2 & tmp4
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp6 = tl.load(in_ptr0 + ((-1) + r1 + 62*r5 + 7936*x0), rmask & tmp5 & xmask, eviction_policy='evict_first', other=0.0)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp7 = tmp6 * tmp6
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp8 = (-1) + r2
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp9 = tmp8 >= tmp1
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp10 = tmp8 < tmp3
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp11 = tmp9 & tmp10
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp12 = tl.load(in_ptr1 + ((-64) + r6 + 3968*r3 + 7936*x0), rmask & tmp11 & xmask, eviction_policy='evict_first', other=0.0)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp13 = tmp12 * tmp12
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp14 = tmp7 + tmp13
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp15 = 0.0001
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp16 = tmp14 + tmp15
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp17 = libdevice.sqrt(tmp16)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp18 = tl.load(in_ptr2 + ((-1) + r1 + 62*r5 + 7936*x0), rmask & tmp5 & xmask, eviction_policy='evict_first', other=0.0)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp19 = tmp18 * tmp18
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp20 = tl.load(in_ptr3 + ((-64) + r6 + 3968*r3 + 7936*x0), rmask & tmp11 & xmask, eviction_policy='evict_first', other=0.0)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp21 = tmp20 * tmp20
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp22 = tmp19 + tmp21
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp23 = tmp22 + tmp15
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp24 = libdevice.sqrt(tmp23)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp25 = tmp17 - tmp24
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp26 = tl_math.abs(tmp25)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp29 = _tmp28 + tmp27
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         _tmp28 = tl.where(rmask & xmask, tmp29, _tmp28)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tl.store(out_ptr0 + (r4 + 8192*x0), tmp17, rmask & xmask)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tl.store(out_ptr1 + (r4 + 8192*x0), tmp24, rmask & xmask)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tl.sum(_tmp28, 1)[:, None]
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr2 + (x0), tmp28, xmask)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/uc/cucn32d4c7kkwqvvd6i3qol2lr5qh5e33bvtsgy376u46tm6cbn3.py
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [grad_loss, loss], Original ATen: [aten.sub, aten.abs, aten.mean, aten.mul]
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   grad_loss => abs_1, mean, sub
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   loss => mul
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%sqrt, %sqrt_1), kwargs = {})
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %abs_1 : [num_users=1] = call_function[target=torch.ops.aten.abs.default](args = (%sub,), kwargs = {})
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean : [num_users=1] = call_function[target=torch.ops.aten.mean.default](args = (%abs_1,), kwargs = {})
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mean, 1), kwargs = {})
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused_abs_mean_mul_sub_1 = async_compile.triton('triton_per_fused_abs_mean_mul_sub_1', '''
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 1, 'r': 64},
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {'xnumel': 1}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1), 'tt.equal_to': (2,)}, 'cls': 'AttrsDescriptor'})]},
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_abs_mean_mul_sub_1', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused_abs_mean_mul_sub_1(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 1
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 36
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 64
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[None, :]
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = rindex < rnumel
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r0 = rindex
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r0), rmask, other=0.0)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.where(rmask, tmp1, 0)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.sum(tmp3, 1)[:, None]
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = 294912.0
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tmp4 / tmp5
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = 1.0
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp6 * tmp7
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp8, None)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1, arg1_1, arg2_1, arg3_1 = args
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg0_1, (18, 6, 1, 3), (18, 3, 3, 1))
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg1_1, (4, 18, 64, 64), (73728, 4096, 64, 1))
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg2_1, (18, 6, 3, 1), (18, 3, 1, 1))
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg3_1, (4, 18, 64, 64), (73728, 4096, 64, 1))
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [inputs_grad_x], Original ATen: [aten.convolution]
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = extern_kernels.convolution(arg1_1, arg0_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=3, bias=None)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf0, (4, 18, 64, 62), (71424, 3968, 62, 1))
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [inputs_grad_y], Original ATen: [aten.convolution]
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = extern_kernels.convolution(arg1_1, arg2_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=3, bias=None)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf1, (4, 18, 62, 64), (71424, 3968, 64, 1))
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg1_1
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [targets_grad_x], Original ATen: [aten.convolution]
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = extern_kernels.convolution(arg3_1, arg0_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=3, bias=None)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf3, (4, 18, 64, 62), (71424, 3968, 62, 1))
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg0_1
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [targets_grad_y], Original ATen: [aten.convolution]
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf4 = extern_kernels.convolution(arg3_1, arg2_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=3, bias=None)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf4, (4, 18, 62, 64), (71424, 3968, 64, 1))
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg2_1
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg3_1
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = empty_strided_cuda((4, 18, 64, 64), (73728, 4096, 64, 1), torch.float32)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf5 = empty_strided_cuda((4, 18, 64, 64), (73728, 4096, 64, 1), torch.float32)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf6 = empty_strided_cuda((36, ), (1, ), torch.float32)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [output_x, pow_1, output_y, pow_2, add, add_1, inputs_grad, output_x_1, pow_3, output_y_1, pow_4, add_2, add_3, targets_grad, grad_loss], Original ATen: [aten.constant_pad_nd, aten.pow, aten.add, aten.sqrt, aten.sub, aten.abs, aten.mean]
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_red_fused_abs_add_constant_pad_nd_mean_pow_sqrt_sub_0.run(buf0, buf1, buf3, buf4, buf2, buf5, buf6, 36, 8192, grid=grid(36), stream=stream0)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf0
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf1
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf3
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf4
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf7 = empty_strided_cuda((), (), torch.float32)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf8 = buf7; del buf7  # reuse
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [grad_loss, loss], Original ATen: [aten.sub, aten.abs, aten.mean, aten.mul]
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused_abs_mean_mul_sub_1.run(buf8, buf6, 1, 36, grid=grid(1), stream=stream0)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf6
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf8, buf2, buf5, )
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1 = rand_strided((18, 6, 1, 3), (18, 3, 3, 1), device='cuda:0', dtype=torch.float32)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg1_1 = rand_strided((4, 18, 64, 64), (73728, 4096, 64, 1), device='cuda:0', dtype=torch.float32)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg2_1 = rand_strided((18, 6, 3, 1), (18, 3, 1, 1), device='cuda:0', dtype=torch.float32)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg3_1 = rand_strided((4, 18, 64, 64), (73728, 4096, 64, 1), device='cuda:0', dtype=torch.float32)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([arg0_1, arg1_1, arg2_1, arg3_1])
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0204 15:24:31.769000 1534223 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:24:31.774000 1534223 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: /tmp/torchinductor_sahanp/5w/c5w4ax3u5mimunslvoqrnxzozw6sklanv24lc2gpdagaa4j6aawp.py
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['2_inference']
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/s7/cs73tj7opnvajveqslod4prsioordwfnojxgwwaxn27l66gflwag.py
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [output_x, pow_1, output_y, pow_2, add, add_1, inputs_grad, output_x_1, pow_3, output_y_1, pow_4, add_2, add_3, targets_grad, grad_loss], Original ATen: [aten.constant_pad_nd, aten.pow, aten.add, aten.sqrt, aten.sub, aten.abs, aten.mean]
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add => add
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add_1 => add_1
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add_2 => add_2
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add_3 => add_3
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   grad_loss => abs_1, mean, sub
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   inputs_grad => sqrt
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   output_x => constant_pad_nd
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   output_x_1 => constant_pad_nd_2
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   output_y => constant_pad_nd_1
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   output_y_1 => constant_pad_nd_3
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pow_1 => pow_1
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pow_2 => pow_2
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pow_3 => pow_3
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pow_4 => pow_4
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   targets_grad => sqrt_1
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %constant_pad_nd : [num_users=1] = call_function[target=torch.ops.aten.constant_pad_nd.default](args = (%convolution, [1, 1, 0, 0], 0.0), kwargs = {})
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_1 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%constant_pad_nd, 2), kwargs = {})
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %constant_pad_nd_1 : [num_users=1] = call_function[target=torch.ops.aten.constant_pad_nd.default](args = (%convolution_1, [0, 0, 1, 1], 0.0), kwargs = {})
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_2 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%constant_pad_nd_1, 2), kwargs = {})
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%pow_1, %pow_2), kwargs = {})
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_1 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add, 0.0001), kwargs = {})
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sqrt : [num_users=2] = call_function[target=torch.ops.aten.sqrt.default](args = (%add_1,), kwargs = {})
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %constant_pad_nd_2 : [num_users=1] = call_function[target=torch.ops.aten.constant_pad_nd.default](args = (%convolution_2, [1, 1, 0, 0], 0.0), kwargs = {})
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_3 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%constant_pad_nd_2, 2), kwargs = {})
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %constant_pad_nd_3 : [num_users=1] = call_function[target=torch.ops.aten.constant_pad_nd.default](args = (%convolution_3, [0, 0, 1, 1], 0.0), kwargs = {})
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_4 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%constant_pad_nd_3, 2), kwargs = {})
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_2 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%pow_3, %pow_4), kwargs = {})
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_3 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_2, 0.0001), kwargs = {})
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sqrt_1 : [num_users=2] = call_function[target=torch.ops.aten.sqrt.default](args = (%add_3,), kwargs = {})
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%sqrt, %sqrt_1), kwargs = {})
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %abs_1 : [num_users=1] = call_function[target=torch.ops.aten.abs.default](args = (%sub,), kwargs = {})
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean : [num_users=1] = call_function[target=torch.ops.aten.mean.default](args = (%abs_1,), kwargs = {})
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_red_fused_abs_add_constant_pad_nd_mean_pow_sqrt_sub_0 = async_compile.triton('triton_red_fused_abs_add_constant_pad_nd_mean_pow_sqrt_sub_0', '''
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.reduction(
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64, 'r': 8192},
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'out_ptr2': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 8), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_abs_add_constant_pad_nd_mean_pow_sqrt_sub_0', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_red_fused_abs_add_constant_pad_nd_mean_pow_sqrt_sub_0(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, out_ptr1, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 36
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 8192
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rbase = tl.arange(0, RBLOCK)[None, :]
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = xindex
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     _tmp28 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     for roffset in range(0, rnumel, RBLOCK):
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         rindex = roffset + rbase
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         rmask = rindex < rnumel
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         r1 = (rindex % 64)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         r5 = rindex // 64
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         r2 = ((rindex // 64) % 64)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         r3 = rindex // 4096
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         r6 = (rindex % 4096)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         r4 = rindex
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp0 = (-1) + r1
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp1 = tl.full([1, 1], 0, tl.int64)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp2 = tmp0 >= tmp1
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp3 = tl.full([1, 1], 62, tl.int64)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp4 = tmp0 < tmp3
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp5 = tmp2 & tmp4
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp6 = tl.load(in_ptr0 + ((-1) + r1 + 62*r5 + 7936*x0), rmask & tmp5 & xmask, eviction_policy='evict_first', other=0.0)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp7 = tmp6 * tmp6
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp8 = (-1) + r2
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp9 = tmp8 >= tmp1
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp10 = tmp8 < tmp3
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp11 = tmp9 & tmp10
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp12 = tl.load(in_ptr1 + ((-64) + r6 + 3968*r3 + 7936*x0), rmask & tmp11 & xmask, eviction_policy='evict_first', other=0.0)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp13 = tmp12 * tmp12
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp14 = tmp7 + tmp13
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp15 = 0.0001
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp16 = tmp14 + tmp15
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp17 = libdevice.sqrt(tmp16)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp18 = tl.load(in_ptr2 + ((-1) + r1 + 62*r5 + 7936*x0), rmask & tmp5 & xmask, eviction_policy='evict_first', other=0.0)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp19 = tmp18 * tmp18
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp20 = tl.load(in_ptr3 + ((-64) + r6 + 3968*r3 + 7936*x0), rmask & tmp11 & xmask, eviction_policy='evict_first', other=0.0)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp21 = tmp20 * tmp20
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp22 = tmp19 + tmp21
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp23 = tmp22 + tmp15
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp24 = libdevice.sqrt(tmp23)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp25 = tmp17 - tmp24
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp26 = tl_math.abs(tmp25)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp27 = tl.broadcast_to(tmp26, [XBLOCK, RBLOCK])
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tmp29 = _tmp28 + tmp27
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         _tmp28 = tl.where(rmask & xmask, tmp29, _tmp28)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tl.store(out_ptr0 + (r4 + 8192*x0), tmp17, rmask & xmask)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         tl.store(out_ptr1 + (r4 + 8192*x0), tmp24, rmask & xmask)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tl.sum(_tmp28, 1)[:, None]
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr2 + (x0), tmp28, xmask)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/uc/cucn32d4c7kkwqvvd6i3qol2lr5qh5e33bvtsgy376u46tm6cbn3.py
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [grad_loss, loss], Original ATen: [aten.sub, aten.abs, aten.mean, aten.mul]
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   grad_loss => abs_1, mean, sub
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   loss => mul
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%sqrt, %sqrt_1), kwargs = {})
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %abs_1 : [num_users=1] = call_function[target=torch.ops.aten.abs.default](args = (%sub,), kwargs = {})
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean : [num_users=1] = call_function[target=torch.ops.aten.mean.default](args = (%abs_1,), kwargs = {})
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mean, 1), kwargs = {})
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused_abs_mean_mul_sub_1 = async_compile.triton('triton_per_fused_abs_mean_mul_sub_1', '''
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 1, 'r': 64},
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {'xnumel': 1}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1), 'tt.equal_to': (2,)}, 'cls': 'AttrsDescriptor'})]},
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_abs_mean_mul_sub_1', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused_abs_mean_mul_sub_1(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 1
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 36
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 64
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[None, :]
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = rindex < rnumel
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r0 = rindex
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r0), rmask, other=0.0)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.where(rmask, tmp1, 0)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.sum(tmp3, 1)[:, None]
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = 294912.0
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tmp4 / tmp5
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = 1.0
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp6 * tmp7
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp8, None)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1, arg1_1, arg2_1, arg3_1 = args
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg0_1, (18, 6, 1, 3), (18, 3, 3, 1))
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg1_1, (4, 18, 64, 64), (73728, 4096, 64, 1))
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg2_1, (18, 6, 3, 1), (18, 3, 1, 1))
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg3_1, (4, 18, 64, 64), (73728, 4096, 64, 1))
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [inputs_grad_x], Original ATen: [aten.convolution]
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = extern_kernels.convolution(arg1_1, arg0_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=3, bias=None)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf0, (4, 18, 64, 62), (71424, 3968, 62, 1))
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [inputs_grad_y], Original ATen: [aten.convolution]
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = extern_kernels.convolution(arg1_1, arg2_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=3, bias=None)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf1, (4, 18, 62, 64), (71424, 3968, 64, 1))
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg1_1
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [targets_grad_x], Original ATen: [aten.convolution]
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = extern_kernels.convolution(arg3_1, arg0_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=3, bias=None)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf3, (4, 18, 64, 62), (71424, 3968, 62, 1))
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg0_1
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [targets_grad_y], Original ATen: [aten.convolution]
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf4 = extern_kernels.convolution(arg3_1, arg2_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=3, bias=None)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf4, (4, 18, 62, 64), (71424, 3968, 64, 1))
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg2_1
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg3_1
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = empty_strided_cuda((4, 18, 64, 64), (73728, 4096, 64, 1), torch.float32)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf5 = empty_strided_cuda((4, 18, 64, 64), (73728, 4096, 64, 1), torch.float32)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf6 = empty_strided_cuda((36, ), (1, ), torch.float32)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [output_x, pow_1, output_y, pow_2, add, add_1, inputs_grad, output_x_1, pow_3, output_y_1, pow_4, add_2, add_3, targets_grad, grad_loss], Original ATen: [aten.constant_pad_nd, aten.pow, aten.add, aten.sqrt, aten.sub, aten.abs, aten.mean]
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_red_fused_abs_add_constant_pad_nd_mean_pow_sqrt_sub_0.run(buf0, buf1, buf3, buf4, buf2, buf5, buf6, 36, 8192, grid=grid(36), stream=stream0)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf0
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf1
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf3
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf4
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf7 = empty_strided_cuda((), (), torch.float32)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf8 = buf7; del buf7  # reuse
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [grad_loss, loss], Original ATen: [aten.sub, aten.abs, aten.mean, aten.mul]
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused_abs_mean_mul_sub_1.run(buf8, buf6, 1, 36, grid=grid(1), stream=stream0)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf6
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf8, buf2, buf5, )
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1 = rand_strided((18, 6, 1, 3), (18, 3, 3, 1), device='cuda:0', dtype=torch.float32)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg1_1 = rand_strided((4, 18, 64, 64), (73728, 4096, 64, 1), device='cuda:0', dtype=torch.float32)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg2_1 = rand_strided((18, 6, 3, 1), (18, 3, 1, 1), device='cuda:0', dtype=torch.float32)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg3_1 = rand_strided((4, 18, 64, 64), (73728, 4096, 64, 1), device='cuda:0', dtype=torch.float32)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([arg0_1, arg1_1, arg2_1, arg3_1])
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0205 20:14:17.410000 3000270 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:14:17.415000 3000270 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: inductor_cache/tn/ctnqvf4dtmnse2gs55c73fwweordr37j3ccunqnessoh2xsustzt.py
