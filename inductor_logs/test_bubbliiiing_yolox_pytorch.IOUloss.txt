V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['6_inference']
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/os/cosyuktozoku3m3aqelpfbvwgiifd673zthm7uckr364fjhg3ypa.py
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [area_p, area_g, add_2, truediv_2, add, truediv_3, add_1, br, truediv, sub, truediv_1, sub_1, tl, sub_2, prod_3, lt, type_1, en, area_i, area_u, add_3, iou, pow_1, loss], Original ATen: [aten.prod, aten.add, aten.div, aten.minimum, aten.sub, aten.maximum, aten.lt, aten._to_copy, aten.mul, aten.pow, aten.rsub]
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add => add
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add_1 => add_1
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add_2 => add_2
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add_3 => add_3
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   area_g => prod_1
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   area_i => mul
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   area_p => prod
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   area_u => sub_3
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   br => minimum
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   en => prod_2
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   iou => div_4
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   loss => sub_4
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   lt => lt
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pow_1 => pow_1
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   prod_3 => prod_3
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub => sub
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub_1 => sub_1
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub_2 => sub_2
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   tl => maximum
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   truediv => div
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   truediv_1 => div_1
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   truediv_2 => div_2
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   truediv_3 => div_3
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   type_1 => convert_element_type
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %prod : [num_users=1] = call_function[target=torch.ops.aten.prod.dim_int](args = (%slice_18, 1), kwargs = {})
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %prod_1 : [num_users=1] = call_function[target=torch.ops.aten.prod.dim_int](args = (%slice_20, 1), kwargs = {})
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_2 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%prod, %prod_1), kwargs = {})
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %div_2 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%slice_12, 2), kwargs = {})
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%slice_10, %div_2), kwargs = {})
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %div_3 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%slice_16, 2), kwargs = {})
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_1 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%slice_14, %div_3), kwargs = {})
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %minimum : [num_users=2] = call_function[target=torch.ops.aten.minimum.default](args = (%add, %add_1), kwargs = {})
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %div : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%slice_4, 2), kwargs = {})
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%slice_2, %div), kwargs = {})
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %div_1 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%slice_8, 2), kwargs = {})
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_1 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%slice_6, %div_1), kwargs = {})
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %maximum : [num_users=2] = call_function[target=torch.ops.aten.maximum.default](args = (%sub, %sub_1), kwargs = {})
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_2 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%minimum, %maximum), kwargs = {})
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %prod_3 : [num_users=1] = call_function[target=torch.ops.aten.prod.dim_int](args = (%sub_2, 1), kwargs = {})
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %lt : [num_users=1] = call_function[target=torch.ops.aten.lt.Tensor](args = (%maximum, %minimum), kwargs = {})
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convert_element_type : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%lt, torch.float32), kwargs = {})
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %prod_2 : [num_users=1] = call_function[target=torch.ops.aten.prod.dim_int](args = (%convert_element_type, 1), kwargs = {})
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%prod_3, %prod_2), kwargs = {})
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_3 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_2, %mul), kwargs = {})
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_3 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%sub_3, 1e-16), kwargs = {})
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %div_4 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%mul, %add_3), kwargs = {})
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_1 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%div_4, 2), kwargs = {})
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_4 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (1, %pow_1), kwargs = {})
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused__to_copy_add_div_lt_maximum_minimum_mul_pow_prod_rsub_sub_0 = async_compile.triton('triton_poi_fused__to_copy_add_div_lt_maximum_minimum_mul_pow_prod_rsub_sub_0', '''
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64}, 
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__to_copy_add_div_lt_maximum_minimum_mul_pow_prod_rsub_sub_0', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused__to_copy_add_div_lt_maximum_minimum_mul_pow_prod_rsub_sub_0(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 64
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = xindex
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (4*x0), xmask, eviction_policy='evict_last')
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr0 + (2 + 4*x0), xmask, eviction_policy='evict_last')
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tl.load(in_ptr1 + (4*x0), xmask, eviction_policy='evict_last')
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tl.load(in_ptr1 + (2 + 4*x0), xmask, eviction_policy='evict_last')
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tl.load(in_ptr0 + (1 + 4*x0), xmask, eviction_policy='evict_last')
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tl.load(in_ptr0 + (3 + 4*x0), xmask, eviction_policy='evict_last')
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tl.load(in_ptr1 + (1 + 4*x0), xmask, eviction_policy='evict_last')
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tl.load(in_ptr1 + (3 + 4*x0), xmask, eviction_policy='evict_last')
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = 0.5
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp1 * tmp2
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp0 + tmp3
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tmp6 * tmp2
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp5 + tmp7
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = triton_helpers.minimum(tmp4, tmp8)
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp0 - tmp3
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp5 - tmp7
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = triton_helpers.maximum(tmp10, tmp11)
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp9 - tmp12
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tmp15 * tmp2
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp14 + tmp16
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp19 * tmp2
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tmp18 + tmp20
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = triton_helpers.minimum(tmp17, tmp21)
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tmp14 - tmp16
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tmp18 - tmp20
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = triton_helpers.maximum(tmp23, tmp24)
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tmp22 - tmp25
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tmp13 * tmp26
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tmp12 < tmp9
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = tmp28.to(tl.float32)
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = tmp25 < tmp22
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = tmp30.to(tl.float32)
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = tmp29 * tmp31
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp33 = tmp27 * tmp32
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp34 = tmp1 * tmp15
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp35 = tmp6 * tmp19
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp36 = tmp34 + tmp35
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp37 = tmp36 - tmp33
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp38 = 1e-16
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp39 = tmp37 + tmp38
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp40 = tmp33 / tmp39
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp41 = tmp40 * tmp40
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp42 = 1.0
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp43 = tmp42 - tmp41
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x0), tmp43, xmask)
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1, arg1_1 = args
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg0_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg1_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((64, ), (1, ), torch.float32)
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = buf0; del buf0  # reuse
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [area_p, area_g, add_2, truediv_2, add, truediv_3, add_1, br, truediv, sub, truediv_1, sub_1, tl, sub_2, prod_3, lt, type_1, en, area_i, area_u, add_3, iou, pow_1, loss], Original ATen: [aten.prod, aten.add, aten.div, aten.minimum, aten.sub, aten.maximum, aten.lt, aten._to_copy, aten.mul, aten.pow, aten.rsub]
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__to_copy_add_div_lt_maximum_minimum_mul_pow_prod_rsub_sub_0.run(buf1, arg0_1, arg1_1, 64, grid=grid(64), stream=stream0)
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg0_1
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg1_1
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf1, )
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg1_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([arg0_1, arg1_1])
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0204 15:16:43.059000 1341112 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:16:43.062000 1341112 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: /tmp/torchinductor_sahanp/jv/cjvhv7dak4pqhsquvuwqsranzmlroikwyyxeu4hpquf35cotc77w.py
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['6_inference']
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/os/cosyuktozoku3m3aqelpfbvwgiifd673zthm7uckr364fjhg3ypa.py
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [area_p, area_g, add_2, truediv_2, add, truediv_3, add_1, br, truediv, sub, truediv_1, sub_1, tl, sub_2, prod_3, lt, type_1, en, area_i, area_u, add_3, iou, pow_1, loss], Original ATen: [aten.prod, aten.add, aten.div, aten.minimum, aten.sub, aten.maximum, aten.lt, aten._to_copy, aten.mul, aten.pow, aten.rsub]
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add => add
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add_1 => add_1
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add_2 => add_2
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add_3 => add_3
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   area_g => prod_1
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   area_i => mul
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   area_p => prod
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   area_u => sub_3
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   br => minimum
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   en => prod_2
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   iou => div_4
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   loss => sub_4
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   lt => lt
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pow_1 => pow_1
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   prod_3 => prod_3
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub => sub
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub_1 => sub_1
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub_2 => sub_2
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   tl => maximum
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   truediv => div
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   truediv_1 => div_1
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   truediv_2 => div_2
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   truediv_3 => div_3
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   type_1 => convert_element_type
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %prod : [num_users=1] = call_function[target=torch.ops.aten.prod.dim_int](args = (%slice_18, 1), kwargs = {})
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %prod_1 : [num_users=1] = call_function[target=torch.ops.aten.prod.dim_int](args = (%slice_20, 1), kwargs = {})
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_2 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%prod, %prod_1), kwargs = {})
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %div_2 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%slice_12, 2), kwargs = {})
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%slice_10, %div_2), kwargs = {})
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %div_3 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%slice_16, 2), kwargs = {})
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_1 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%slice_14, %div_3), kwargs = {})
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %minimum : [num_users=2] = call_function[target=torch.ops.aten.minimum.default](args = (%add, %add_1), kwargs = {})
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %div : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%slice_4, 2), kwargs = {})
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%slice_2, %div), kwargs = {})
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %div_1 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%slice_8, 2), kwargs = {})
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_1 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%slice_6, %div_1), kwargs = {})
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %maximum : [num_users=2] = call_function[target=torch.ops.aten.maximum.default](args = (%sub, %sub_1), kwargs = {})
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_2 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%minimum, %maximum), kwargs = {})
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %prod_3 : [num_users=1] = call_function[target=torch.ops.aten.prod.dim_int](args = (%sub_2, 1), kwargs = {})
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %lt : [num_users=1] = call_function[target=torch.ops.aten.lt.Tensor](args = (%maximum, %minimum), kwargs = {})
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convert_element_type : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%lt, torch.float32), kwargs = {})
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %prod_2 : [num_users=1] = call_function[target=torch.ops.aten.prod.dim_int](args = (%convert_element_type, 1), kwargs = {})
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%prod_3, %prod_2), kwargs = {})
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_3 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_2, %mul), kwargs = {})
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_3 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%sub_3, 1e-16), kwargs = {})
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %div_4 : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%mul, %add_3), kwargs = {})
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_1 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%div_4, 2), kwargs = {})
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_4 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (1, %pow_1), kwargs = {})
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused__to_copy_add_div_lt_maximum_minimum_mul_pow_prod_rsub_sub_0 = async_compile.triton('triton_poi_fused__to_copy_add_div_lt_maximum_minimum_mul_pow_prod_rsub_sub_0', '''
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64}, 
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__to_copy_add_div_lt_maximum_minimum_mul_pow_prod_rsub_sub_0', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused__to_copy_add_div_lt_maximum_minimum_mul_pow_prod_rsub_sub_0(in_out_ptr0, in_ptr0, in_ptr1, xnumel, XBLOCK : tl.constexpr):
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 64
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = xindex
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (4*x0), xmask, eviction_policy='evict_last')
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr0 + (2 + 4*x0), xmask, eviction_policy='evict_last')
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tl.load(in_ptr1 + (4*x0), xmask, eviction_policy='evict_last')
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tl.load(in_ptr1 + (2 + 4*x0), xmask, eviction_policy='evict_last')
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tl.load(in_ptr0 + (1 + 4*x0), xmask, eviction_policy='evict_last')
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tl.load(in_ptr0 + (3 + 4*x0), xmask, eviction_policy='evict_last')
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tl.load(in_ptr1 + (1 + 4*x0), xmask, eviction_policy='evict_last')
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tl.load(in_ptr1 + (3 + 4*x0), xmask, eviction_policy='evict_last')
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = 0.5
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp1 * tmp2
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp0 + tmp3
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tmp6 * tmp2
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp5 + tmp7
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = triton_helpers.minimum(tmp4, tmp8)
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp0 - tmp3
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp5 - tmp7
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = triton_helpers.maximum(tmp10, tmp11)
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp9 - tmp12
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tmp15 * tmp2
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp14 + tmp16
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp19 * tmp2
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tmp18 + tmp20
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = triton_helpers.minimum(tmp17, tmp21)
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tmp14 - tmp16
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tmp18 - tmp20
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = triton_helpers.maximum(tmp23, tmp24)
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tmp22 - tmp25
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tmp13 * tmp26
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tmp12 < tmp9
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = tmp28.to(tl.float32)
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = tmp25 < tmp22
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = tmp30.to(tl.float32)
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = tmp29 * tmp31
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp33 = tmp27 * tmp32
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp34 = tmp1 * tmp15
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp35 = tmp6 * tmp19
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp36 = tmp34 + tmp35
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp37 = tmp36 - tmp33
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp38 = 1e-16
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp39 = tmp37 + tmp38
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp40 = tmp33 / tmp39
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp41 = tmp40 * tmp40
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp42 = 1.0
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp43 = tmp42 - tmp41
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x0), tmp43, xmask)
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1, arg1_1 = args
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg0_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg1_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((64, ), (1, ), torch.float32)
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = buf0; del buf0  # reuse
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [area_p, area_g, add_2, truediv_2, add, truediv_3, add_1, br, truediv, sub, truediv_1, sub_1, tl, sub_2, prod_3, lt, type_1, en, area_i, area_u, add_3, iou, pow_1, loss], Original ATen: [aten.prod, aten.add, aten.div, aten.minimum, aten.sub, aten.maximum, aten.lt, aten._to_copy, aten.mul, aten.pow, aten.rsub]
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__to_copy_add_div_lt_maximum_minimum_mul_pow_prod_rsub_sub_0.run(buf1, arg0_1, arg1_1, 64, grid=grid(64), stream=stream0)
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg0_1
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg1_1
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf1, )
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg1_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([arg0_1, arg1_1])
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0205 20:06:16.692000 2664461 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:06:16.695000 2664461 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: inductor_cache/lb/clbgq63rwfqafyfk3jeuiyzgpv6ahvbqmgvrt4rexkncd6oxfeba.py
