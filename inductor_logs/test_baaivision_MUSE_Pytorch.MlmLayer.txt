V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['61_forward']
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/6r/c6r4cztfkx6tbcglpmgp5w3vnnmkrfdkkogiog35qvkzmppnr3w5.py
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [mlm_hidden_1, mlm_hidden_2], Original ATen: [aten.gelu, aten.native_layer_norm]
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mlm_hidden_1 => add, erf, mul, mul_1, mul_2
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mlm_hidden_2 => var_mean
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_1, 0.5), kwargs = {})
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_1, 0.7071067811865476), kwargs = {})
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %erf : [num_users=1] = call_function[target=torch.ops.aten.erf.default](args = (%mul_1,), kwargs = {})
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%erf, 1), kwargs = {})
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_2 : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul, %add), kwargs = {})
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %var_mean : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%mul_2, [3]), kwargs = {correction: 0, keepdim: True})
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_gelu_native_layer_norm_0 = async_compile.triton('triton_poi_fused_gelu_native_layer_norm_0', '''
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64}, 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_native_layer_norm_0', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_gelu_native_layer_norm_0(in_ptr0, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 64
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = xindex
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (4*x0), xmask, eviction_policy='evict_last')
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tl.load(in_ptr0 + (1 + 4*x0), xmask, eviction_policy='evict_last')
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tl.load(in_ptr0 + (2 + 4*x0), xmask, eviction_policy='evict_last')
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tl.load(in_ptr0 + (3 + 4*x0), xmask, eviction_policy='evict_last')
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = 0.5
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 * tmp1
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = 0.7071067811865476
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp0 * tmp3
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = libdevice.erf(tmp4)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = 1.0
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tmp5 + tmp6
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp2 * tmp7
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp9 * tmp1
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp9 * tmp3
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = libdevice.erf(tmp11)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp12 + tmp6
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tmp10 * tmp13
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp8 + tmp14
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp16 * tmp1
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tmp16 * tmp3
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = libdevice.erf(tmp18)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp19 + tmp6
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tmp17 * tmp20
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tmp15 + tmp21
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tmp23 * tmp1
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = tmp23 * tmp3
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = libdevice.erf(tmp25)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tmp26 + tmp6
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tmp24 * tmp27
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = tmp22 + tmp28
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = 4.0
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = tmp29 / tmp30
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = tmp8 - tmp31
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp33 = tmp32 * tmp32
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp34 = tmp14 - tmp31
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp35 = tmp34 * tmp34
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp36 = tmp33 + tmp35
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp37 = tmp21 - tmp31
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp38 = tmp37 * tmp37
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp39 = tmp36 + tmp38
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp40 = tmp28 - tmp31
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp41 = tmp40 * tmp40
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp42 = tmp39 + tmp41
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp43 = tmp42 / tmp30
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x0), tmp31, xmask)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr1 + (x0), tmp43, xmask)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/wb/cwbbs65cgcivaylesc6e23t64dptddb7nowdkst6yogtf5smm2dd.py
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [mlm_hidden_1, mlm_hidden_2], Original ATen: [aten.gelu, aten.native_layer_norm]
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mlm_hidden_1 => add, erf, mul, mul_1, mul_2
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mlm_hidden_2 => add_1, add_2, mul_3, mul_4, rsqrt, sub
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_1, 0.5), kwargs = {})
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_1, 0.7071067811865476), kwargs = {})
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %erf : [num_users=1] = call_function[target=torch.ops.aten.erf.default](args = (%mul_1,), kwargs = {})
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%erf, 1), kwargs = {})
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_2 : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul, %add), kwargs = {})
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_1 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem, 1e-05), kwargs = {})
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %rsqrt : [num_users=1] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_1,), kwargs = {})
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%mul_2, %getitem_1), kwargs = {})
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_3 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub, %rsqrt), kwargs = {})
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_4 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_3, %primals_4), kwargs = {})
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_2 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_4, %primals_5), kwargs = {})
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_gelu_native_layer_norm_1 = async_compile.triton('triton_poi_fused_gelu_native_layer_norm_1', '''
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 256}, 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_native_layer_norm_1', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_gelu_native_layer_norm_1(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 256
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = xindex // 4
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 4)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x2), xmask)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tl.load(in_ptr1 + (x1), xmask, eviction_policy='evict_last')
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tl.load(in_ptr2 + (x1), xmask, eviction_policy='evict_last')
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = 0.5
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 * tmp1
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = 0.7071067811865476
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp0 * tmp3
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = libdevice.erf(tmp4)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = 1.0
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tmp5 + tmp6
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp2 * tmp7
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp8 - tmp9
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = 1e-05
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp11 + tmp12
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = libdevice.rsqrt(tmp13)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp10 * tmp14
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp15 * tmp16
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tmp17 + tmp18
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x2), tmp19, xmask)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/y2/cy23tbssbm3ygh5cxkifeswbane4usokmvzb7ycjuuok26qcsksx.py
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [logits], Original ATen: [aten.clone]
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   logits => clone
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clone : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%expand_1,), kwargs = {memory_format: torch.contiguous_format})
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_clone_2 = async_compile.triton('triton_poi_fused_clone_2', '''
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 256}, 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_2', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_clone_2(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 256
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 16)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 16) % 4)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex // 64
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x0 + 16*x2 + 64*x1), xmask)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x3), tmp0, xmask)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/zk/czkniy3ly6rsox4mjqw3gd7cfp72ntk5sjlfoeuvh657s2wxuv5o.py
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [logits_1], Original ATen: [aten.add]
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   logits_1 => add_3
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_3 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_4, %primals_7), kwargs = {})
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_add_3 = async_compile.triton('triton_poi_fused_add_3', '''
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 256}, 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_3', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_add_3(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 256
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 4)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_out_ptr0 + (x2), xmask)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr0 + (x0), xmask, eviction_policy='evict_last')
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 + tmp1
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x2), tmp2, xmask)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7 = args
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_1, (4, 4), (4, 1))
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_2, (4, ), (1, ))
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_3, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_4, (4, ), (1, ))
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_5, (4, ), (1, ))
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_6, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_7, (1, 1, 4), (4, 4, 1))
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((64, 4), (4, 1), torch.float32)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mlm_hidden], Original ATen: [aten.addmm]
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         extern_kernels.addmm(primals_2, reinterpret_tensor(primals_3, (64, 4), (4, 1), 0), reinterpret_tensor(primals_1, (4, 4), (1, 4), 0), alpha=1, beta=1, out=buf0)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_1
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_2
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = empty_strided_cuda((4, 4, 4, 1), (16, 4, 1, 64), torch.float32)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = empty_strided_cuda((4, 4, 4, 1), (16, 4, 1, 64), torch.float32)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mlm_hidden_1, mlm_hidden_2], Original ATen: [aten.gelu, aten.native_layer_norm]
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_gelu_native_layer_norm_0.run(buf0, buf1, buf2, 64, grid=grid(64), stream=stream0)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = empty_strided_cuda((4, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mlm_hidden_1, mlm_hidden_2], Original ATen: [aten.gelu, aten.native_layer_norm]
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_gelu_native_layer_norm_1.run(buf0, buf1, buf2, primals_4, primals_5, buf3, 256, grid=grid(256), stream=stream0)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf1
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf2
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_5
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf4 = empty_strided_cuda((4, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [logits], Original ATen: [aten.clone]
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_clone_2.run(primals_6, buf4, 256, grid=grid(256), stream=stream0)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_6
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf5 = empty_strided_cuda((16, 4, 4), (16, 4, 1), torch.float32)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [logits], Original ATen: [aten.bmm]
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         extern_kernels.bmm(reinterpret_tensor(buf3, (16, 4, 4), (16, 4, 1), 0), reinterpret_tensor(buf4, (16, 4, 4), (16, 4, 1), 0), out=buf5)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf3
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf6 = reinterpret_tensor(buf5, (4, 4, 4, 4), (64, 16, 4, 1), 0); del buf5  # reuse
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [logits_1], Original ATen: [aten.add]
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_add_3.run(buf6, primals_7, 256, grid=grid(256), stream=stream0)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_7
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf6, primals_4, reinterpret_tensor(primals_3, (64, 4), (4, 1), 0), buf0, reinterpret_tensor(buf4, (16, 4, 4), (16, 1, 4), 0), )
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1 = rand_strided((4, 4), (4, 1), device='cuda:0', dtype=torch.float32)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_2 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_3 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_4 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_5 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_6 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_7 = rand_strided((1, 1, 4), (4, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7])
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0204 15:06:06.097000 1067683 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:06:06.103000 1067683 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: /tmp/torchinductor_sahanp/k4/ck4hzegicsxnwyjneooghs4q5nfwubdqjuwtyqnyg7apszicf2z4.py
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['61_forward']
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/6r/c6r4cztfkx6tbcglpmgp5w3vnnmkrfdkkogiog35qvkzmppnr3w5.py
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [mlm_hidden_1, mlm_hidden_2], Original ATen: [aten.gelu, aten.native_layer_norm]
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mlm_hidden_1 => add, erf, mul, mul_1, mul_2
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mlm_hidden_2 => var_mean
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_1, 0.5), kwargs = {})
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_1, 0.7071067811865476), kwargs = {})
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %erf : [num_users=1] = call_function[target=torch.ops.aten.erf.default](args = (%mul_1,), kwargs = {})
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%erf, 1), kwargs = {})
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_2 : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul, %add), kwargs = {})
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %var_mean : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%mul_2, [3]), kwargs = {correction: 0, keepdim: True})
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_gelu_native_layer_norm_0 = async_compile.triton('triton_poi_fused_gelu_native_layer_norm_0', '''
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64}, 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_native_layer_norm_0', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_gelu_native_layer_norm_0(in_ptr0, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 64
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = xindex
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (4*x0), xmask, eviction_policy='evict_last')
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tl.load(in_ptr0 + (1 + 4*x0), xmask, eviction_policy='evict_last')
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tl.load(in_ptr0 + (2 + 4*x0), xmask, eviction_policy='evict_last')
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tl.load(in_ptr0 + (3 + 4*x0), xmask, eviction_policy='evict_last')
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = 0.5
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 * tmp1
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = 0.7071067811865476
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp0 * tmp3
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = libdevice.erf(tmp4)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = 1.0
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tmp5 + tmp6
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp2 * tmp7
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp9 * tmp1
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp9 * tmp3
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = libdevice.erf(tmp11)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp12 + tmp6
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tmp10 * tmp13
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp8 + tmp14
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp16 * tmp1
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tmp16 * tmp3
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = libdevice.erf(tmp18)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp19 + tmp6
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tmp17 * tmp20
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tmp15 + tmp21
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tmp23 * tmp1
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = tmp23 * tmp3
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = libdevice.erf(tmp25)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tmp26 + tmp6
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tmp24 * tmp27
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = tmp22 + tmp28
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = 4.0
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = tmp29 / tmp30
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = tmp8 - tmp31
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp33 = tmp32 * tmp32
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp34 = tmp14 - tmp31
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp35 = tmp34 * tmp34
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp36 = tmp33 + tmp35
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp37 = tmp21 - tmp31
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp38 = tmp37 * tmp37
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp39 = tmp36 + tmp38
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp40 = tmp28 - tmp31
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp41 = tmp40 * tmp40
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp42 = tmp39 + tmp41
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp43 = tmp42 / tmp30
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x0), tmp31, xmask)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr1 + (x0), tmp43, xmask)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/wb/cwbbs65cgcivaylesc6e23t64dptddb7nowdkst6yogtf5smm2dd.py
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [mlm_hidden_1, mlm_hidden_2], Original ATen: [aten.gelu, aten.native_layer_norm]
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mlm_hidden_1 => add, erf, mul, mul_1, mul_2
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mlm_hidden_2 => add_1, add_2, mul_3, mul_4, rsqrt, sub
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_1, 0.5), kwargs = {})
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_1, 0.7071067811865476), kwargs = {})
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %erf : [num_users=1] = call_function[target=torch.ops.aten.erf.default](args = (%mul_1,), kwargs = {})
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%erf, 1), kwargs = {})
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_2 : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul, %add), kwargs = {})
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_1 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem, 1e-05), kwargs = {})
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %rsqrt : [num_users=1] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_1,), kwargs = {})
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%mul_2, %getitem_1), kwargs = {})
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_3 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub, %rsqrt), kwargs = {})
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_4 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_3, %primals_4), kwargs = {})
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_2 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_4, %primals_5), kwargs = {})
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_gelu_native_layer_norm_1 = async_compile.triton('triton_poi_fused_gelu_native_layer_norm_1', '''
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 256}, 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_gelu_native_layer_norm_1', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_gelu_native_layer_norm_1(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 256
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = xindex // 4
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 4)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x2), xmask)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tl.load(in_ptr1 + (x1), xmask, eviction_policy='evict_last')
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tl.load(in_ptr2 + (x1), xmask, eviction_policy='evict_last')
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = 0.5
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 * tmp1
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = 0.7071067811865476
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp0 * tmp3
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = libdevice.erf(tmp4)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = 1.0
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tmp5 + tmp6
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp2 * tmp7
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp8 - tmp9
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = 1e-05
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp11 + tmp12
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = libdevice.rsqrt(tmp13)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp10 * tmp14
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp15 * tmp16
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tmp17 + tmp18
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x2), tmp19, xmask)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/y2/cy23tbssbm3ygh5cxkifeswbane4usokmvzb7ycjuuok26qcsksx.py
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [logits], Original ATen: [aten.clone]
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   logits => clone
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clone : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%expand_1,), kwargs = {memory_format: torch.contiguous_format})
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_clone_2 = async_compile.triton('triton_poi_fused_clone_2', '''
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 256}, 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_2', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_clone_2(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 256
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 16)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 16) % 4)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex // 64
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x0 + 16*x2 + 64*x1), xmask)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x3), tmp0, xmask)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/zk/czkniy3ly6rsox4mjqw3gd7cfp72ntk5sjlfoeuvh657s2wxuv5o.py
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [logits_1], Original ATen: [aten.add]
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   logits_1 => add_3
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_3 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_4, %primals_7), kwargs = {})
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_add_3 = async_compile.triton('triton_poi_fused_add_3', '''
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 256}, 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_3', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_add_3(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 256
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 4)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_out_ptr0 + (x2), xmask)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr0 + (x0), xmask, eviction_policy='evict_last')
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 + tmp1
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x2), tmp2, xmask)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7 = args
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_1, (4, 4), (4, 1))
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_2, (4, ), (1, ))
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_3, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_4, (4, ), (1, ))
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_5, (4, ), (1, ))
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_6, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_7, (1, 1, 4), (4, 4, 1))
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((64, 4), (4, 1), torch.float32)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mlm_hidden], Original ATen: [aten.addmm]
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         extern_kernels.addmm(primals_2, reinterpret_tensor(primals_3, (64, 4), (4, 1), 0), reinterpret_tensor(primals_1, (4, 4), (1, 4), 0), alpha=1, beta=1, out=buf0)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_1
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_2
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = empty_strided_cuda((4, 4, 4, 1), (16, 4, 1, 64), torch.float32)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = empty_strided_cuda((4, 4, 4, 1), (16, 4, 1, 64), torch.float32)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mlm_hidden_1, mlm_hidden_2], Original ATen: [aten.gelu, aten.native_layer_norm]
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_gelu_native_layer_norm_0.run(buf0, buf1, buf2, 64, grid=grid(64), stream=stream0)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = empty_strided_cuda((4, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mlm_hidden_1, mlm_hidden_2], Original ATen: [aten.gelu, aten.native_layer_norm]
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_gelu_native_layer_norm_1.run(buf0, buf1, buf2, primals_4, primals_5, buf3, 256, grid=grid(256), stream=stream0)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf1
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf2
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_5
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf4 = empty_strided_cuda((4, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [logits], Original ATen: [aten.clone]
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_clone_2.run(primals_6, buf4, 256, grid=grid(256), stream=stream0)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_6
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf5 = empty_strided_cuda((16, 4, 4), (16, 4, 1), torch.float32)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [logits], Original ATen: [aten.bmm]
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         extern_kernels.bmm(reinterpret_tensor(buf3, (16, 4, 4), (16, 4, 1), 0), reinterpret_tensor(buf4, (16, 4, 4), (16, 4, 1), 0), out=buf5)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf3
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf6 = reinterpret_tensor(buf5, (4, 4, 4, 4), (64, 16, 4, 1), 0); del buf5  # reuse
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [logits_1], Original ATen: [aten.add]
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_add_3.run(buf6, primals_7, 256, grid=grid(256), stream=stream0)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_7
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf6, primals_4, reinterpret_tensor(primals_3, (64, 4), (4, 1), 0), buf0, reinterpret_tensor(buf4, (16, 4, 4), (16, 1, 4), 0), )
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1 = rand_strided((4, 4), (4, 1), device='cuda:0', dtype=torch.float32)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_2 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_3 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_4 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_5 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_6 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_7 = rand_strided((1, 1, 4), (4, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7])
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0205 19:55:27.481000 2376585 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:55:27.487000 2376585 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: inductor_cache/h6/ch63rg6ngrsk2yqodwe5btda4zotoh6cc5yw7ysnob6juxyi5tgw.py
