V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['8_inference']
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/he/chef3sa75bhone2wx5yd62767bhw7zncjqxifhel6ebobbu6h7bi.py
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [a, b], Original ATen: [aten.stack]
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   a => cat
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   b => cat_1
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %cat : [num_users=1] = call_function[target=torch.ops.aten.cat.default](args = ([%cos, %cos_1], 1), kwargs = {})
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %cat_1 : [num_users=1] = call_function[target=torch.ops.aten.cat.default](args = ([%cos_2, %cos_3], 1), kwargs = {})
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_stack_0 = async_compile.triton('triton_poi_fused_stack_0', '''
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 32}, 
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_stack_0', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_stack_0(in_ptr0, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 24
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 8)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = xindex // 8
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = x0
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.full([1], 0, tl.int64)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 >= tmp1
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.full([1], 4, tl.int64)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp0 < tmp3
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tl.load(in_ptr0 + (12 + 8*x1 + (x0)), tmp4 & xmask, eviction_policy='evict_last', other=0.0)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tl.load(in_ptr0 + (4 + 8*x1 + (x0)), tmp4 & xmask, eviction_policy='evict_last', other=0.0)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = -tmp6
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp5 + tmp7
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tl.load(in_ptr0 + (8 + 8*x1 + (x0)), tmp4 & xmask, eviction_policy='evict_last', other=0.0)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tl.load(in_ptr0 + (8*x1 + (x0)), tmp4 & xmask, eviction_policy='evict_last', other=0.0)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = -tmp10
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tmp9 + tmp11
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = libdevice.atan2(tmp8, tmp12)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = 1.5707963
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = libdevice.fmod(tmp13, tmp14)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tl_math.abs(tmp15)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tl_math.cos(tmp16)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tl.full(tmp17.shape, 0.0, tmp17.dtype)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tl.where(tmp4, tmp17, tmp18)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp0 >= tmp3
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tl.full([1], 8, tl.int64)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tmp0 < tmp21
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tl.load(in_ptr0 + (12 + 8*x1 + ((-4) + x0)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tl.load(in_ptr0 + (4 + 8*x1 + ((-4) + x0)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = -tmp24
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tmp23 + tmp25
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tl.load(in_ptr0 + (8 + 8*x1 + ((-4) + x0)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tl.load(in_ptr0 + (8*x1 + ((-4) + x0)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = -tmp28
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = tmp27 + tmp29
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = libdevice.atan2(tmp26, tmp30)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = 1.5707963
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp33 = libdevice.fmod(tmp31, tmp32)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp34 = tl_math.abs(tmp33)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp35 = tmp34 - tmp32
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp36 = tl_math.cos(tmp35)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp37 = tl.full(tmp36.shape, 0.0, tmp36.dtype)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp38 = tl.where(tmp20, tmp36, tmp37)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp39 = tl.where(tmp4, tmp19, tmp38)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp40 = tmp16 + tmp14
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp41 = tl_math.cos(tmp40)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp42 = tl.full(tmp41.shape, 0.0, tmp41.dtype)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp43 = tl.where(tmp4, tmp41, tmp42)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp44 = tl_math.cos(tmp34)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp45 = tl.full(tmp44.shape, 0.0, tmp44.dtype)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp46 = tl.where(tmp20, tmp44, tmp45)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp47 = tl.where(tmp4, tmp43, tmp46)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x2), tmp39, xmask)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr1 + (x2), tmp47, xmask)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/ew/cewezklqzwshr46q4lohjfq44koawz56xvnmzlc77w7yu6wvk4a5.py
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [R_tensor], Original ATen: [aten.cat]
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   R_tensor => cat_2
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %cat_2 : [num_users=1] = call_function[target=torch.ops.aten.cat.default](args = ([%unsqueeze, %unsqueeze_1], 1), kwargs = {})
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_cat_1 = async_compile.triton('triton_poi_fused_cat_1', '''
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64}, 
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_cat_1', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_cat_1(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 48
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 8) % 2)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 8)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex // 16
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = x1
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.full([1], 0, tl.int64)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 >= tmp1
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.full([1], 1, tl.int64)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp0 < tmp3
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tl.load(in_ptr0 + (x0 + 8*x2), tmp4 & xmask, eviction_policy='evict_last', other=0.0)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tmp0 >= tmp3
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tl.full([1], 2, tl.int64)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp0 < tmp7
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tl.load(in_ptr1 + (x0 + 8*x2), tmp6 & xmask, eviction_policy='evict_last', other=0.0)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tl.where(tmp4, tmp5, tmp9)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x3), tmp10, xmask)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/su/csu54hsq4of3xkmzf5bgj4v2dip2ww5ghltqtdsvlb2dyl3jt3ou.py
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [rot_points], Original ATen: [aten.clone]
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   rot_points => clone
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clone : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%expand_1,), kwargs = {memory_format: torch.contiguous_format})
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_clone_2 = async_compile.triton('triton_poi_fused_clone_2', '''
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 128}, 
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_2', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_clone_2(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 96
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 4)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 4) % 4)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = ((xindex // 16) % 2)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x4 = xindex
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x0 + 4*x2 + 8*x1), xmask, eviction_policy='evict_last')
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x4), tmp0, xmask)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/tq/ctqofpgot63hd423cqcmc6xi6dey7kvzymuew6gb5l6eoupkgn4k.py
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [sub_1, sub_2, areas, min_2], Original ATen: [aten.sub, aten.mul, aten.min]
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   areas => mul
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   min_2 => min_2
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub_1 => sub_1
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub_2 => sub_2
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_1 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%select_2, %select_3), kwargs = {})
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_2 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%select_4, %select_5), kwargs = {})
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_1, %sub_2), kwargs = {})
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %min_2 : [num_users=1] = call_function[target=torch.ops.aten.min.default](args = (%mul,), kwargs = {})
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused_min_mul_sub_3 = async_compile.triton('triton_per_fused_min_mul_sub_3', '''
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 1, 'r': 16},
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {'xnumel': 1}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1), 'tt.equal_to': (2,)}, 'cls': 'AttrsDescriptor'})]},
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_min_mul_sub_3', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused_min_mul_sub_3(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 1
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 12
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 16
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[None, :]
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = rindex < rnumel
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r0 = (rindex % 4)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r1 = rindex // 4
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r0 + 16*r1), rmask, other=0.0)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr0 + (4 + r0 + 16*r1), rmask, other=0.0)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tl.load(in_ptr0 + (8 + r0 + 16*r1), rmask, other=0.0)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tl.load(in_ptr0 + (12 + r0 + 16*r1), rmask, other=0.0)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = triton_helpers.maximum(tmp0, tmp1)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = triton_helpers.minimum(tmp0, tmp1)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp2 - tmp3
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = triton_helpers.maximum(tmp5, tmp6)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = triton_helpers.minimum(tmp5, tmp6)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp7 - tmp8
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp4 * tmp9
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tl.where(rmask, tmp11, float("inf"))
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = triton_helpers.min2(tmp13, 1)[:, None]
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp14, None)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1, = args
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg0_1, (4, 2, 4), (8, 4, 1))
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((3, 8), (8, 1), torch.float32)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = empty_strided_cuda((3, 8), (8, 1), torch.float32)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [a, b], Original ATen: [aten.stack]
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_stack_0.run(arg0_1, buf0, buf1, 24, grid=grid(24), stream=stream0)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = empty_strided_cuda((3, 2, 2, 4), (16, 8, 4, 1), torch.float32)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [R_tensor], Original ATen: [aten.cat]
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_cat_1.run(buf0, buf1, buf2, 48, grid=grid(48), stream=stream0)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf0
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf1
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = empty_strided_cuda((3, 2, 4, 4), (32, 16, 4, 1), torch.float32)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [rot_points], Original ATen: [aten.clone]
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_clone_2.run(arg0_1, buf3, 96, grid=grid(96), stream=stream0)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg0_1
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf4 = empty_strided_cuda((6, 2, 4), (8, 4, 1), torch.float32)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [rot_points], Original ATen: [aten.bmm]
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         extern_kernels.bmm(reinterpret_tensor(buf2, (6, 2, 4), (8, 4, 1), 0), reinterpret_tensor(buf3, (6, 4, 4), (16, 4, 1), 0), out=buf4)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf2
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf3
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf5 = empty_strided_cuda((), (), torch.float32)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [sub_1, sub_2, areas, min_2], Original ATen: [aten.sub, aten.mul, aten.min]
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused_min_mul_sub_3.run(buf4, buf5, 1, 12, grid=grid(1), stream=stream0)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf4
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf5, )
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1 = rand_strided((4, 2, 4), (8, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([arg0_1])
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0204 16:43:15.161000 3315892 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:43:15.166000 3315892 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: /tmp/torchinductor_sahanp/jh/cjhmg5uxg4reldk3j4qx7iargbhut2r6c3p6anif7ssf7qlfiivq.py
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['8_inference']
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/he/chef3sa75bhone2wx5yd62767bhw7zncjqxifhel6ebobbu6h7bi.py
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [a, b], Original ATen: [aten.stack]
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   a => cat
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   b => cat_1
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %cat : [num_users=1] = call_function[target=torch.ops.aten.cat.default](args = ([%cos, %cos_1], 1), kwargs = {})
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %cat_1 : [num_users=1] = call_function[target=torch.ops.aten.cat.default](args = ([%cos_2, %cos_3], 1), kwargs = {})
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_stack_0 = async_compile.triton('triton_poi_fused_stack_0', '''
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 32}, 
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_stack_0', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_stack_0(in_ptr0, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 24
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 8)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = xindex // 8
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = x0
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.full([1], 0, tl.int64)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 >= tmp1
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.full([1], 4, tl.int64)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp0 < tmp3
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tl.load(in_ptr0 + (12 + 8*x1 + (x0)), tmp4 & xmask, eviction_policy='evict_last', other=0.0)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tl.load(in_ptr0 + (4 + 8*x1 + (x0)), tmp4 & xmask, eviction_policy='evict_last', other=0.0)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = -tmp6
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp5 + tmp7
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tl.load(in_ptr0 + (8 + 8*x1 + (x0)), tmp4 & xmask, eviction_policy='evict_last', other=0.0)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tl.load(in_ptr0 + (8*x1 + (x0)), tmp4 & xmask, eviction_policy='evict_last', other=0.0)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = -tmp10
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tmp9 + tmp11
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = libdevice.atan2(tmp8, tmp12)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = 1.5707963
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = libdevice.fmod(tmp13, tmp14)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tl_math.abs(tmp15)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tl_math.cos(tmp16)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tl.full(tmp17.shape, 0.0, tmp17.dtype)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tl.where(tmp4, tmp17, tmp18)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp0 >= tmp3
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tl.full([1], 8, tl.int64)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tmp0 < tmp21
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tl.load(in_ptr0 + (12 + 8*x1 + ((-4) + x0)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tl.load(in_ptr0 + (4 + 8*x1 + ((-4) + x0)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = -tmp24
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tmp23 + tmp25
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tl.load(in_ptr0 + (8 + 8*x1 + ((-4) + x0)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tl.load(in_ptr0 + (8*x1 + ((-4) + x0)), tmp20 & xmask, eviction_policy='evict_last', other=0.0)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = -tmp28
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = tmp27 + tmp29
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = libdevice.atan2(tmp26, tmp30)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = 1.5707963
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp33 = libdevice.fmod(tmp31, tmp32)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp34 = tl_math.abs(tmp33)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp35 = tmp34 - tmp32
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp36 = tl_math.cos(tmp35)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp37 = tl.full(tmp36.shape, 0.0, tmp36.dtype)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp38 = tl.where(tmp20, tmp36, tmp37)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp39 = tl.where(tmp4, tmp19, tmp38)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp40 = tmp16 + tmp14
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp41 = tl_math.cos(tmp40)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp42 = tl.full(tmp41.shape, 0.0, tmp41.dtype)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp43 = tl.where(tmp4, tmp41, tmp42)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp44 = tl_math.cos(tmp34)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp45 = tl.full(tmp44.shape, 0.0, tmp44.dtype)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp46 = tl.where(tmp20, tmp44, tmp45)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp47 = tl.where(tmp4, tmp43, tmp46)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x2), tmp39, xmask)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr1 + (x2), tmp47, xmask)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/ew/cewezklqzwshr46q4lohjfq44koawz56xvnmzlc77w7yu6wvk4a5.py
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [R_tensor], Original ATen: [aten.cat]
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   R_tensor => cat_2
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %cat_2 : [num_users=1] = call_function[target=torch.ops.aten.cat.default](args = ([%unsqueeze, %unsqueeze_1], 1), kwargs = {})
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_cat_1 = async_compile.triton('triton_poi_fused_cat_1', '''
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64}, 
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_cat_1', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_cat_1(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 48
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 8) % 2)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 8)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex // 16
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = x1
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.full([1], 0, tl.int64)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 >= tmp1
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.full([1], 1, tl.int64)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp0 < tmp3
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tl.load(in_ptr0 + (x0 + 8*x2), tmp4 & xmask, eviction_policy='evict_last', other=0.0)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tmp0 >= tmp3
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tl.full([1], 2, tl.int64)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp0 < tmp7
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tl.load(in_ptr1 + (x0 + 8*x2), tmp6 & xmask, eviction_policy='evict_last', other=0.0)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tl.where(tmp4, tmp5, tmp9)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x3), tmp10, xmask)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/su/csu54hsq4of3xkmzf5bgj4v2dip2ww5ghltqtdsvlb2dyl3jt3ou.py
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [rot_points], Original ATen: [aten.clone]
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   rot_points => clone
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clone : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%expand_1,), kwargs = {memory_format: torch.contiguous_format})
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_clone_2 = async_compile.triton('triton_poi_fused_clone_2', '''
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 128}, 
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_2', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_clone_2(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 96
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 4)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 4) % 4)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = ((xindex // 16) % 2)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x4 = xindex
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x0 + 4*x2 + 8*x1), xmask, eviction_policy='evict_last')
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x4), tmp0, xmask)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/tq/ctqofpgot63hd423cqcmc6xi6dey7kvzymuew6gb5l6eoupkgn4k.py
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [sub_1, sub_2, areas, min_2], Original ATen: [aten.sub, aten.mul, aten.min]
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   areas => mul
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   min_2 => min_2
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub_1 => sub_1
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub_2 => sub_2
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_1 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%select_2, %select_3), kwargs = {})
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_2 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%select_4, %select_5), kwargs = {})
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_1, %sub_2), kwargs = {})
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %min_2 : [num_users=1] = call_function[target=torch.ops.aten.min.default](args = (%mul,), kwargs = {})
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused_min_mul_sub_3 = async_compile.triton('triton_per_fused_min_mul_sub_3', '''
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 1, 'r': 16},
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {'xnumel': 1}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1), 'tt.equal_to': (2,)}, 'cls': 'AttrsDescriptor'})]},
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_min_mul_sub_3', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused_min_mul_sub_3(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 1
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 12
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 16
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[None, :]
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = rindex < rnumel
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r0 = (rindex % 4)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r1 = rindex // 4
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r0 + 16*r1), rmask, other=0.0)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr0 + (4 + r0 + 16*r1), rmask, other=0.0)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tl.load(in_ptr0 + (8 + r0 + 16*r1), rmask, other=0.0)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tl.load(in_ptr0 + (12 + r0 + 16*r1), rmask, other=0.0)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = triton_helpers.maximum(tmp0, tmp1)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = triton_helpers.minimum(tmp0, tmp1)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp2 - tmp3
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = triton_helpers.maximum(tmp5, tmp6)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = triton_helpers.minimum(tmp5, tmp6)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp7 - tmp8
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp4 * tmp9
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tl.where(rmask, tmp11, float("inf"))
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = triton_helpers.min2(tmp13, 1)[:, None]
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp14, None)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1, = args
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg0_1, (4, 2, 4), (8, 4, 1))
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((3, 8), (8, 1), torch.float32)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = empty_strided_cuda((3, 8), (8, 1), torch.float32)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [a, b], Original ATen: [aten.stack]
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_stack_0.run(arg0_1, buf0, buf1, 24, grid=grid(24), stream=stream0)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = empty_strided_cuda((3, 2, 2, 4), (16, 8, 4, 1), torch.float32)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [R_tensor], Original ATen: [aten.cat]
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_cat_1.run(buf0, buf1, buf2, 48, grid=grid(48), stream=stream0)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf0
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf1
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = empty_strided_cuda((3, 2, 4, 4), (32, 16, 4, 1), torch.float32)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [rot_points], Original ATen: [aten.clone]
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_clone_2.run(arg0_1, buf3, 96, grid=grid(96), stream=stream0)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg0_1
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf4 = empty_strided_cuda((6, 2, 4), (8, 4, 1), torch.float32)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [rot_points], Original ATen: [aten.bmm]
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         extern_kernels.bmm(reinterpret_tensor(buf2, (6, 2, 4), (8, 4, 1), 0), reinterpret_tensor(buf3, (6, 4, 4), (16, 4, 1), 0), out=buf4)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf2
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf3
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf5 = empty_strided_cuda((), (), torch.float32)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [sub_1, sub_2, areas, min_2], Original ATen: [aten.sub, aten.mul, aten.min]
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused_min_mul_sub_3.run(buf4, buf5, 1, 12, grid=grid(1), stream=stream0)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf4
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf5, )
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1 = rand_strided((4, 2, 4), (8, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([arg0_1])
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0205 21:31:51.456000 784486 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:31:51.462000 784486 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: inductor_cache/ee/ceelre5spgmeageod5imyr3fkzzz7xqqqpuzv7vc7xpjlfaoudn2.py
