V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['9_inference']
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/6c/c6ce6bywiq5ylqlstl3uhgdhqr63p42ezr43boot7xdksssgzams.py
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [out_prob, sub_1, pow_2, mul_2, add_1, log_1, neg_1, pos_cost_class, getitem, pow_1, mul, sub, add, log, neg, neg_cost_class, getitem_1, cost_class, mul_4], Original ATen: [aten.sigmoid, aten.rsub, aten.pow, aten.mul, aten.add, aten.log, aten.neg, aten.index, aten.sub]
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add => add
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add_1 => add_1
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   cost_class => sub_2
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   getitem => index
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   getitem_1 => index_1
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   log => log
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   log_1 => log_1
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul => mul
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_2 => mul_2
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_4 => mul_4
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   neg => neg
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   neg_1 => neg_1
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   neg_cost_class => mul_1
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   out_prob => sigmoid
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pos_cost_class => mul_3
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pow_1 => pow_1
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pow_2 => pow_2
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub => sub
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub_1 => sub_1
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sigmoid : [num_users=4] = call_function[target=torch.ops.aten.sigmoid.default](args = (%arg0_1,), kwargs = {})
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_1 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (1, %sigmoid), kwargs = {})
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_2 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sub_1, 2.0), kwargs = {})
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_2 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%pow_2, 0.25), kwargs = {})
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_1 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%sigmoid, 1e-08), kwargs = {})
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %log_1 : [num_users=1] = call_function[target=torch.ops.aten.log.default](args = (%add_1,), kwargs = {})
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %neg_1 : [num_users=1] = call_function[target=torch.ops.aten.neg.default](args = (%log_1,), kwargs = {})
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_3 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_2, %neg_1), kwargs = {})
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %index : [num_users=1] = call_function[target=torch.ops.aten.index.Tensor](args = (%mul_3, [None, %arg1_1]), kwargs = {})
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_1 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sigmoid, 2.0), kwargs = {})
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%pow_1, 0.75), kwargs = {})
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (1, %sigmoid), kwargs = {})
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%sub, 1e-08), kwargs = {})
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %log : [num_users=1] = call_function[target=torch.ops.aten.log.default](args = (%add,), kwargs = {})
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %neg : [num_users=1] = call_function[target=torch.ops.aten.neg.default](args = (%log,), kwargs = {})
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul, %neg), kwargs = {})
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %index_1 : [num_users=1] = call_function[target=torch.ops.aten.index.Tensor](args = (%mul_1, [None, %arg1_1]), kwargs = {})
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_2 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%index, %index_1), kwargs = {})
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_4 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_2, 1.0), kwargs = {})
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_add_index_log_mul_neg_pow_rsub_sigmoid_sub_0 = async_compile.triton('triton_poi_fused_add_index_log_mul_neg_pow_rsub_sigmoid_sub_0', '''
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 256}, 
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*i64', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_index_log_mul_neg_pow_rsub_sigmoid_sub_0', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_add_index_log_mul_neg_pow_rsub_sigmoid_sub_0(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 256
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 16) % 4)
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 16)
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex // 64
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x1), xmask, eviction_policy='evict_last')
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.full([XBLOCK], 4, tl.int32)
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 + tmp1
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp0 < 0
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.where(tmp3, tmp2, tmp0)
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.device_assert(((0 <= tmp4) & (tmp4 < 4)) | ~(xmask), "index out of bounds: 0 <= tmp4 < 4")
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tl.load(in_ptr1 + (x0 + 16*tmp4 + 64*x2), xmask)
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tl.sigmoid(tmp6)
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = 1.0
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp8 - tmp7
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp9 * tmp9
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = 0.25
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tmp10 * tmp11
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = 1e-08
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tmp7 + tmp13
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tl_math.log(tmp14)
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = -tmp15
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp12 * tmp16
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tmp7 * tmp7
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = 0.75
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp18 * tmp19
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tmp9 + tmp13
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tl_math.log(tmp21)
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = -tmp22
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tmp20 * tmp23
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = tmp17 - tmp24
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tmp25 * tmp8
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x3), tmp26, xmask)
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1, arg1_1 = args
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg0_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg1_1, (4, ), (1, ))
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((4, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [out_prob, sub_1, pow_2, mul_2, add_1, log_1, neg_1, pos_cost_class, getitem, pow_1, mul, sub, add, log, neg, neg_cost_class, getitem_1, cost_class, mul_4], Original ATen: [aten.sigmoid, aten.rsub, aten.pow, aten.mul, aten.add, aten.log, aten.neg, aten.index, aten.sub]
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_add_index_log_mul_neg_pow_rsub_sigmoid_sub_0.run(arg1_1, arg0_1, buf0, 256, grid=grid(256), stream=stream0)
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg0_1
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg1_1
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf0, )
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg1_1 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.int64)
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([arg0_1, arg1_1])
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0204 13:08:05.987000 553328 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:08:05.989000 553328 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: /tmp/torchinductor_sahanp/dy/cdyyjrq2twvolnzwodgwv43me2zgai4gtv7lphv6piy2767hkpvk.py
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['9_inference']
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/6c/c6ce6bywiq5ylqlstl3uhgdhqr63p42ezr43boot7xdksssgzams.py
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [out_prob, sub_1, pow_2, mul_2, add_1, log_1, neg_1, pos_cost_class, getitem, pow_1, mul, sub, add, log, neg, neg_cost_class, getitem_1, cost_class, mul_4], Original ATen: [aten.sigmoid, aten.rsub, aten.pow, aten.mul, aten.add, aten.log, aten.neg, aten.index, aten.sub]
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add => add
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add_1 => add_1
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   cost_class => sub_2
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   getitem => index
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   getitem_1 => index_1
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   log => log
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   log_1 => log_1
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul => mul
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_2 => mul_2
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_4 => mul_4
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   neg => neg
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   neg_1 => neg_1
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   neg_cost_class => mul_1
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   out_prob => sigmoid
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pos_cost_class => mul_3
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pow_1 => pow_1
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pow_2 => pow_2
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub => sub
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub_1 => sub_1
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sigmoid : [num_users=4] = call_function[target=torch.ops.aten.sigmoid.default](args = (%arg0_1,), kwargs = {})
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_1 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (1, %sigmoid), kwargs = {})
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_2 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sub_1, 2.0), kwargs = {})
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_2 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%pow_2, 0.25), kwargs = {})
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_1 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%sigmoid, 1e-08), kwargs = {})
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %log_1 : [num_users=1] = call_function[target=torch.ops.aten.log.default](args = (%add_1,), kwargs = {})
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %neg_1 : [num_users=1] = call_function[target=torch.ops.aten.neg.default](args = (%log_1,), kwargs = {})
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_3 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_2, %neg_1), kwargs = {})
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %index : [num_users=1] = call_function[target=torch.ops.aten.index.Tensor](args = (%mul_3, [None, %arg1_1]), kwargs = {})
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_1 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sigmoid, 2.0), kwargs = {})
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%pow_1, 0.75), kwargs = {})
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (1, %sigmoid), kwargs = {})
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%sub, 1e-08), kwargs = {})
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %log : [num_users=1] = call_function[target=torch.ops.aten.log.default](args = (%add,), kwargs = {})
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %neg : [num_users=1] = call_function[target=torch.ops.aten.neg.default](args = (%log,), kwargs = {})
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul, %neg), kwargs = {})
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %index_1 : [num_users=1] = call_function[target=torch.ops.aten.index.Tensor](args = (%mul_1, [None, %arg1_1]), kwargs = {})
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_2 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%index, %index_1), kwargs = {})
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_4 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_2, 1.0), kwargs = {})
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_add_index_log_mul_neg_pow_rsub_sigmoid_sub_0 = async_compile.triton('triton_poi_fused_add_index_log_mul_neg_pow_rsub_sigmoid_sub_0', '''
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 256}, 
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*i64', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_index_log_mul_neg_pow_rsub_sigmoid_sub_0', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_add_index_log_mul_neg_pow_rsub_sigmoid_sub_0(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 256
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 16) % 4)
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 16)
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex // 64
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x1), xmask, eviction_policy='evict_last')
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.full([XBLOCK], 4, tl.int32)
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 + tmp1
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp0 < 0
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.where(tmp3, tmp2, tmp0)
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.device_assert(((0 <= tmp4) & (tmp4 < 4)) | ~(xmask), "index out of bounds: 0 <= tmp4 < 4")
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tl.load(in_ptr1 + (x0 + 16*tmp4 + 64*x2), xmask)
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tl.sigmoid(tmp6)
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = 1.0
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp8 - tmp7
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp9 * tmp9
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = 0.25
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tmp10 * tmp11
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = 1e-08
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tmp7 + tmp13
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tl_math.log(tmp14)
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = -tmp15
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp12 * tmp16
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tmp7 * tmp7
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = 0.75
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp18 * tmp19
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tmp9 + tmp13
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tl_math.log(tmp21)
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = -tmp22
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tmp20 * tmp23
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = tmp17 - tmp24
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tmp25 * tmp8
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x3), tmp26, xmask)
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1, arg1_1 = args
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg0_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg1_1, (4, ), (1, ))
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((4, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [out_prob, sub_1, pow_2, mul_2, add_1, log_1, neg_1, pos_cost_class, getitem, pow_1, mul, sub, add, log, neg, neg_cost_class, getitem_1, cost_class, mul_4], Original ATen: [aten.sigmoid, aten.rsub, aten.pow, aten.mul, aten.add, aten.log, aten.neg, aten.index, aten.sub]
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_add_index_log_mul_neg_pow_rsub_sigmoid_sub_0.run(arg1_1, arg0_1, buf0, 256, grid=grid(256), stream=stream0)
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg0_1
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg1_1
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf0, )
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg1_1 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.int64)
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([arg0_1, arg1_1])
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0205 17:58:21.391000 3298897 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:58:21.394000 3298897 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: inductor_cache/6z/c6zal5nmtbs75zwlkzgidt4oktf7xdu4mr5axtqwd4ntedredjgi.py
