V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['5_forward']
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/tm/ctm6rk7ukw223jlzkjpuftubn7djc4ct3nopehvp4wolnjnhkxmw.py
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [input_2], Original ATen: [aten.native_layer_norm]
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   input_2 => var_mean
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %var_mean : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_1, [3]), kwargs = {correction: 0, keepdim: True})
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused_native_layer_norm_0 = async_compile.triton('triton_per_fused_native_layer_norm_0', '''
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64, 'r': 8},
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_layer_norm_0', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 4, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused_native_layer_norm_0(in_ptr0, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 64
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 8
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 8
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[None, :]
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r1 = rindex
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = xindex
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r1 + 8*x0), xmask, other=0.0)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.where(xmask, tmp1, 0)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tl.where(xmask, tmp4, 0)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tl.sum(tmp6, 1)[:, None]
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tl.full([XBLOCK, 1], 8, tl.int32)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp8.to(tl.float32)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp7 / tmp9
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp1 - tmp10
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tmp11 * tmp11
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tl.where(xmask, tmp13, 0)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tl.sum(tmp15, 1)[:, None]
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x0), tmp10, xmask)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr1 + (x0), tmp16, xmask)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/xs/cxspdzx2g6qsktjlmj5we3kx2qeqtheqt77l6jyms75o4gmtuiuy.py
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [x_1], Original ATen: [aten.log, aten.neg, aten.add]
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   x_1 => add_2, log, neg
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %log : [num_users=1] = call_function[target=torch.ops.aten.log.default](args = (%exponential,), kwargs = {})
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %neg : [num_users=1] = call_function[target=torch.ops.aten.neg.default](args = (%log,), kwargs = {})
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_2 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_2, %neg), kwargs = {})
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_tensor : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_2, 1), kwargs = {})
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_add_log_neg_1 = async_compile.triton('triton_poi_fused_add_log_neg_1', '''
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 512}, 
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_log_neg_1', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_add_log_neg_1(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, XBLOCK : tl.constexpr):
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 512
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x4 = xindex
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 64)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 64) % 2)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex // 128
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x4), xmask)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (8*x1 + 16*x2 + 16*((x0 + 64*x1) // 128) + (x0 // 8)), xmask, eviction_policy='evict_last')
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.load(in_ptr2 + (8*x1 + 16*x2 + 16*((x0 + 64*x1) // 128) + (x0 // 8)), xmask, eviction_policy='evict_last')
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tl.load(in_ptr3 + ((x4 % 8)), xmask, eviction_policy='evict_last')
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tl.load(in_ptr4 + ((x4 % 8)), xmask, eviction_policy='evict_last')
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tl.load(in_out_ptr0 + (x4), xmask)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 - tmp1
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = 8.0
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp3 / tmp4
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = 1e-05
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tmp5 + tmp6
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = libdevice.rsqrt(tmp7)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp2 * tmp8
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp9 * tmp10
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp11 + tmp12
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tl.full([1], 0, tl.int32)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = triton_helpers.maximum(tmp14, tmp13)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tl_math.log(tmp16)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = -tmp17
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tmp15 + tmp18
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = 1.0
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tmp19 * tmp20
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x4), tmp21, xmask)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/dh/cdhpq5vhgxzavqxtaqoq7he5gm5xbippcqfknpyowh6ghzo6gl6c.py
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [x_1], Original ATen: [aten._softmax]
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   x_1 => div_1, exp, sum_1
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %amax_default : [num_users=1] = call_function[target=torch.ops.aten.amax.default](args = (%mul_tensor, [1], True), kwargs = {})
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_tensor : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%mul_tensor, %amax_default), kwargs = {})
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %div_tensor : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%sub_tensor, 1), kwargs = {})
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %exp : [num_users=2] = call_function[target=torch.ops.aten.exp.default](args = (%div_tensor,), kwargs = {})
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sum_1 : [num_users=1] = call_function[target=torch.ops.aten.sum.dim_IntList](args = (%exp, [1], True), kwargs = {})
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %div_1 : [num_users=3] = call_function[target=torch.ops.aten.div.Tensor](args = (%exp, %sum_1), kwargs = {})
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused__softmax_2 = async_compile.triton('triton_poi_fused__softmax_2', '''
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 512}, 
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__softmax_2', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused__softmax_2(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 512
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 64)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex // 128
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x3), xmask)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr0 + (x0 + 128*x2), xmask, eviction_policy='evict_last')
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tl.load(in_ptr0 + (64 + x0 + 128*x2), xmask, eviction_policy='evict_last')
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = triton_helpers.maximum(tmp1, tmp2)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp0 - tmp3
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = 1.0
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tmp4 * tmp5
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tl_math.exp(tmp6)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp1 - tmp3
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp8 * tmp5
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tl_math.exp(tmp9)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp2 - tmp3
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tmp11 * tmp5
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tl_math.exp(tmp12)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tmp10 + tmp13
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp7 / tmp14
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x3), tmp15, xmask)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1, primals_2, primals_3, primals_4, primals_5 = args
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_2, (8, 4), (4, 1))
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_3, (8, ), (1, ))
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_4, (8, ), (1, ))
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_5, (8, ), (1, ))
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((64, 8), (8, 1), torch.float32)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [input_1], Original ATen: [aten.addmm]
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         extern_kernels.addmm(primals_3, reinterpret_tensor(primals_1, (64, 4), (4, 1), 0), reinterpret_tensor(primals_2, (4, 8), (1, 4), 0), alpha=1, beta=1, out=buf0)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_2
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_3
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = empty_strided_cuda((4, 4, 4, 1), (16, 4, 1, 64), torch.float32)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = empty_strided_cuda((4, 4, 4, 1), (16, 4, 1, 64), torch.float32)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [input_2], Original ATen: [aten.native_layer_norm]
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused_native_layer_norm_0.run(buf0, buf1, buf2, 64, 8, grid=grid(64), stream=stream0)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf4 = empty_strided_cuda((4, 2, 64), (128, 64, 1), torch.float32)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [x_1], Original ATen: [aten.exponential]
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf5 = torch.ops.aten.exponential.default(buf4)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf6 = buf5
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf5
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf7 = buf6; del buf6  # reuse
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [x_1], Original ATen: [aten.log, aten.neg, aten.add]
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_add_log_neg_1.run(buf7, buf0, buf1, buf2, primals_4, primals_5, 512, grid=grid(512), stream=stream0)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf1
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf2
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf8 = buf4; del buf4  # reuse
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [x_1], Original ATen: [aten._softmax]
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__softmax_2.run(buf7, buf8, 512, grid=grid(512), stream=stream0)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf7
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (reinterpret_tensor(buf8, (4, 64), (128, 1), 0), reinterpret_tensor(buf8, (4, 64), (128, 1), 64), buf8, primals_4, primals_5, reinterpret_tensor(primals_1, (64, 4), (4, 1), 0), buf0, buf8, )
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_2 = rand_strided((8, 4), (4, 1), device='cuda:0', dtype=torch.float32)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_3 = rand_strided((8, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_4 = rand_strided((8, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_5 = rand_strided((8, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([primals_1, primals_2, primals_3, primals_4, primals_5])
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0204 14:15:22.914000 3516815 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:15:22.919000 3516815 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: /tmp/torchinductor_sahanp/nh/cnhyskq37fhhad3365w3xy4no4bhrkf5fbkjskcmlbsoc36nqzvb.py
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['5_forward']
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/tm/ctm6rk7ukw223jlzkjpuftubn7djc4ct3nopehvp4wolnjnhkxmw.py
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [input_2], Original ATen: [aten.native_layer_norm]
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   input_2 => var_mean
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %var_mean : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view_1, [3]), kwargs = {correction: 0, keepdim: True})
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused_native_layer_norm_0 = async_compile.triton('triton_per_fused_native_layer_norm_0', '''
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64, 'r': 8},
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_layer_norm_0', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 4, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused_native_layer_norm_0(in_ptr0, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 64
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 8
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 8
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[None, :]
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r1 = rindex
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = xindex
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r1 + 8*x0), xmask, other=0.0)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.where(xmask, tmp1, 0)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tl.where(xmask, tmp4, 0)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tl.sum(tmp6, 1)[:, None]
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tl.full([XBLOCK, 1], 8, tl.int32)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp8.to(tl.float32)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp7 / tmp9
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp1 - tmp10
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tmp11 * tmp11
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tl.where(xmask, tmp13, 0)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tl.sum(tmp15, 1)[:, None]
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x0), tmp10, xmask)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr1 + (x0), tmp16, xmask)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/xs/cxspdzx2g6qsktjlmj5we3kx2qeqtheqt77l6jyms75o4gmtuiuy.py
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [x_1], Original ATen: [aten.log, aten.neg, aten.add]
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   x_1 => add_2, log, neg
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %log : [num_users=1] = call_function[target=torch.ops.aten.log.default](args = (%exponential,), kwargs = {})
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %neg : [num_users=1] = call_function[target=torch.ops.aten.neg.default](args = (%log,), kwargs = {})
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_2 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%view_2, %neg), kwargs = {})
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_tensor : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_2, 1), kwargs = {})
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_add_log_neg_1 = async_compile.triton('triton_poi_fused_add_log_neg_1', '''
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 512}, 
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_log_neg_1', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_add_log_neg_1(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, XBLOCK : tl.constexpr):
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 512
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x4 = xindex
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 64)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 64) % 2)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex // 128
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x4), xmask)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (8*x1 + 16*x2 + 16*((x0 + 64*x1) // 128) + (x0 // 8)), xmask, eviction_policy='evict_last')
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.load(in_ptr2 + (8*x1 + 16*x2 + 16*((x0 + 64*x1) // 128) + (x0 // 8)), xmask, eviction_policy='evict_last')
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tl.load(in_ptr3 + ((x4 % 8)), xmask, eviction_policy='evict_last')
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tl.load(in_ptr4 + ((x4 % 8)), xmask, eviction_policy='evict_last')
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tl.load(in_out_ptr0 + (x4), xmask)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 - tmp1
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = 8.0
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp3 / tmp4
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = 1e-05
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tmp5 + tmp6
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = libdevice.rsqrt(tmp7)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp2 * tmp8
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp9 * tmp10
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp11 + tmp12
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tl.full([1], 0, tl.int32)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = triton_helpers.maximum(tmp14, tmp13)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tl_math.log(tmp16)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = -tmp17
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tmp15 + tmp18
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = 1.0
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tmp19 * tmp20
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x4), tmp21, xmask)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/dh/cdhpq5vhgxzavqxtaqoq7he5gm5xbippcqfknpyowh6ghzo6gl6c.py
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [x_1], Original ATen: [aten._softmax]
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   x_1 => div_1, exp, sum_1
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %amax_default : [num_users=1] = call_function[target=torch.ops.aten.amax.default](args = (%mul_tensor, [1], True), kwargs = {})
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_tensor : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%mul_tensor, %amax_default), kwargs = {})
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %div_tensor : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%sub_tensor, 1), kwargs = {})
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %exp : [num_users=2] = call_function[target=torch.ops.aten.exp.default](args = (%div_tensor,), kwargs = {})
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sum_1 : [num_users=1] = call_function[target=torch.ops.aten.sum.dim_IntList](args = (%exp, [1], True), kwargs = {})
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %div_1 : [num_users=3] = call_function[target=torch.ops.aten.div.Tensor](args = (%exp, %sum_1), kwargs = {})
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused__softmax_2 = async_compile.triton('triton_poi_fused__softmax_2', '''
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 512}, 
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__softmax_2', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused__softmax_2(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 512
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 64)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex // 128
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x3), xmask)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr0 + (x0 + 128*x2), xmask, eviction_policy='evict_last')
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tl.load(in_ptr0 + (64 + x0 + 128*x2), xmask, eviction_policy='evict_last')
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = triton_helpers.maximum(tmp1, tmp2)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp0 - tmp3
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = 1.0
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tmp4 * tmp5
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tl_math.exp(tmp6)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp1 - tmp3
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp8 * tmp5
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tl_math.exp(tmp9)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp2 - tmp3
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tmp11 * tmp5
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tl_math.exp(tmp12)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tmp10 + tmp13
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp7 / tmp14
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x3), tmp15, xmask)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1, primals_2, primals_3, primals_4, primals_5 = args
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_2, (8, 4), (4, 1))
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_3, (8, ), (1, ))
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_4, (8, ), (1, ))
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_5, (8, ), (1, ))
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((64, 8), (8, 1), torch.float32)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [input_1], Original ATen: [aten.addmm]
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         extern_kernels.addmm(primals_3, reinterpret_tensor(primals_1, (64, 4), (4, 1), 0), reinterpret_tensor(primals_2, (4, 8), (1, 4), 0), alpha=1, beta=1, out=buf0)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_2
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_3
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = empty_strided_cuda((4, 4, 4, 1), (16, 4, 1, 64), torch.float32)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = empty_strided_cuda((4, 4, 4, 1), (16, 4, 1, 64), torch.float32)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [input_2], Original ATen: [aten.native_layer_norm]
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused_native_layer_norm_0.run(buf0, buf1, buf2, 64, 8, grid=grid(64), stream=stream0)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf4 = empty_strided_cuda((4, 2, 64), (128, 64, 1), torch.float32)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [x_1], Original ATen: [aten.exponential]
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf5 = torch.ops.aten.exponential.default(buf4)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf6 = buf5
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf5
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf7 = buf6; del buf6  # reuse
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [x_1], Original ATen: [aten.log, aten.neg, aten.add]
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_add_log_neg_1.run(buf7, buf0, buf1, buf2, primals_4, primals_5, 512, grid=grid(512), stream=stream0)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf1
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf2
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf8 = buf4; del buf4  # reuse
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [x_1], Original ATen: [aten._softmax]
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__softmax_2.run(buf7, buf8, 512, grid=grid(512), stream=stream0)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf7
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (reinterpret_tensor(buf8, (4, 64), (128, 1), 0), reinterpret_tensor(buf8, (4, 64), (128, 1), 64), buf8, primals_4, primals_5, reinterpret_tensor(primals_1, (64, 4), (4, 1), 0), buf0, buf8, )
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_2 = rand_strided((8, 4), (4, 1), device='cuda:0', dtype=torch.float32)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_3 = rand_strided((8, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_4 = rand_strided((8, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_5 = rand_strided((8, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([primals_1, primals_2, primals_3, primals_4, primals_5])
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0205 19:04:36.237000 992379 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:04:36.242000 992379 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: inductor_cache/gd/cgdvcr34pt7bs5x44fkwe3vhgb4274oi3cw2mktpmouegnf6czxl.py
