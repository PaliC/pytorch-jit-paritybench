V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['0_inference']
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [std, pow_1, add, sqrt, pow_2, add_1, sqrt_1, prod], Original ATen: [aten.std, aten.pow, aten.add, aten.sqrt, aten.prod]
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add => add
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add_1 => add_1
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pow_1 => pow_1
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pow_2 => pow_2
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   prod => prod
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sqrt => sqrt_1
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sqrt_1 => sqrt_2
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   std => sqrt, var
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %var : [num_users=1] = call_function[target=torch.ops.aten.var.correction](args = (%arg0_1, [0]), kwargs = {correction: 1.0, keepdim: True})
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sqrt : [num_users=2] = call_function[target=torch.ops.aten.sqrt.default](args = (%var,), kwargs = {})
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_1 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sqrt, 2), kwargs = {})
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%pow_1, %arg1_1), kwargs = {})
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sqrt_1 : [num_users=1] = call_function[target=torch.ops.aten.sqrt.default](args = (%add,), kwargs = {})
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_2 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sqrt, 2), kwargs = {})
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_1 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%pow_2, %arg1_1), kwargs = {})
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sqrt_2 : [num_users=1] = call_function[target=torch.ops.aten.sqrt.default](args = (%add_1,), kwargs = {})
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %prod : [num_users=1] = call_function[target=torch.ops.aten.prod.default](args = (%sqrt_2,), kwargs = {})
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused_add_pow_prod_sqrt_std_0 = async_compile.triton('triton_per_fused_add_pow_prod_sqrt_std_0', '''
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 1, 'r': 64},
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {'xnumel': 1}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 5), 'tt.equal_to': (4,)}, 'cls': 'AttrsDescriptor'})]},
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_pow_prod_sqrt_std_0', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 1, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused_add_pow_prod_sqrt_std_0(in_ptr0, in_ptr1, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 1
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 64
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 64
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[None, :]
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r0 = rindex
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r0), None)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr0 + (64 + r0), None)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.load(in_ptr0 + (128 + r0), None)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tl.load(in_ptr0 + (192 + r0), None)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tl.load(in_ptr1 + (0))
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = tl.broadcast_to(tmp24, [XBLOCK, RBLOCK])
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 + tmp1
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp2 + tmp3
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tmp4 + tmp5
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = 4.0
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp6 / tmp7
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp0 - tmp8
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp9 * tmp9
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp1 - tmp8
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tmp11 * tmp11
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp10 + tmp12
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tmp3 - tmp8
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp14 * tmp14
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tmp13 + tmp15
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp5 - tmp8
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tmp17 * tmp17
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tmp16 + tmp18
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = 3.0
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tmp19 / tmp20
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = libdevice.sqrt(tmp21)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tmp22 * tmp22
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tmp23 + tmp25
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = libdevice.sqrt(tmp26)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tl.broadcast_to(tmp27, [XBLOCK, RBLOCK])
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = triton_helpers.prod(tmp28, 1)[:, None]
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (tl.broadcast_to(r0, [XBLOCK, RBLOCK])), tmp27, None)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr1 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp30, None)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/kq/ckqxolgv363javfdqkplzcfshetxldfdv7ej72xnwsecpxuf6ntb.py
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [mean, sub, std, pow_1, add, sqrt, z_], Original ATen: [aten.mean, aten.sub, aten.std, aten.pow, aten.add, aten.sqrt, aten.div]
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add => add
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mean => mean
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pow_1 => pow_1
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sqrt => sqrt_1
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   std => sqrt, var
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub => sub
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   z_ => div
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean : [num_users=1] = call_function[target=torch.ops.aten.mean.dim](args = (%arg0_1, [0], True), kwargs = {})
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%arg0_1, %mean), kwargs = {})
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %var : [num_users=1] = call_function[target=torch.ops.aten.var.correction](args = (%arg0_1, [0]), kwargs = {correction: 1.0, keepdim: True})
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sqrt : [num_users=2] = call_function[target=torch.ops.aten.sqrt.default](args = (%var,), kwargs = {})
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_1 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sqrt, 2), kwargs = {})
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%pow_1, %arg1_1), kwargs = {})
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sqrt_1 : [num_users=1] = call_function[target=torch.ops.aten.sqrt.default](args = (%add,), kwargs = {})
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %div : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%sub, %sqrt_1), kwargs = {})
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_add_div_mean_pow_sqrt_std_sub_1 = async_compile.triton('triton_poi_fused_add_div_mean_pow_sqrt_std_sub_1', '''
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 256}, 
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_div_mean_pow_sqrt_std_sub_1', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_add_div_mean_pow_sqrt_std_sub_1(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 256
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 64)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x2), xmask)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr0 + (x0), xmask, eviction_policy='evict_last')
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tl.load(in_ptr0 + (64 + x0), xmask, eviction_policy='evict_last')
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.load(in_ptr0 + (128 + x0), xmask, eviction_policy='evict_last')
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tl.load(in_ptr0 + (192 + x0), xmask, eviction_policy='evict_last')
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tl.load(in_ptr1 + (x0), xmask, eviction_policy='evict_last')
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp1 + tmp2
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp3 + tmp4
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tmp5 + tmp6
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = 4.0
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp7 / tmp8
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp0 - tmp9
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tmp10 / tmp11
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x2), tmp12, xmask)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/ak/cakeclka7w5l4ptstfrt6pwub6ixtogqwk343lrt55ah2yklbd5c.py
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [truediv_1, log, log_det], Original ATen: [aten.reciprocal, aten.mul, aten.log, aten.repeat]
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   log => log
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   log_det => repeat
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   truediv_1 => mul, reciprocal
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %reciprocal : [num_users=1] = call_function[target=torch.ops.aten.reciprocal.default](args = (%prod,), kwargs = {})
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%reciprocal, 1), kwargs = {})
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %log : [num_users=1] = call_function[target=torch.ops.aten.log.default](args = (%mul,), kwargs = {})
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %repeat : [num_users=1] = call_function[target=torch.ops.aten.repeat.default](args = (%log, [4]), kwargs = {})
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_log_mul_reciprocal_repeat_2 = async_compile.triton('triton_poi_fused_log_mul_reciprocal_repeat_2', '''
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 4}, 
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_log_mul_reciprocal_repeat_2', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_log_mul_reciprocal_repeat_2(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 4
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = xindex
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (0))
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.broadcast_to(tmp0, [XBLOCK])
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tl.full([1], 1, tl.int32)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp2 / tmp1
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = 1.0
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp3 * tmp4
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tl_math.log(tmp5)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x0), tmp6, xmask)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1, arg1_1 = args
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg0_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg1_1, (), ())
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((1, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = empty_strided_cuda((), (), torch.float32)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [std, pow_1, add, sqrt, pow_2, add_1, sqrt_1, prod], Original ATen: [aten.std, aten.pow, aten.add, aten.sqrt, aten.prod]
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused_add_pow_prod_sqrt_std_0.run(arg0_1, arg1_1, buf0, buf2, 1, 64, grid=grid(1), stream=stream0)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg1_1
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = empty_strided_cuda((4, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mean, sub, std, pow_1, add, sqrt, z_], Original ATen: [aten.mean, aten.sub, aten.std, aten.pow, aten.add, aten.sqrt, aten.div]
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_add_div_mean_pow_sqrt_std_sub_1.run(arg0_1, buf0, buf1, 256, grid=grid(256), stream=stream0)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg0_1
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf0
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = empty_strided_cuda((4, ), (1, ), torch.float32)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [truediv_1, log, log_det], Original ATen: [aten.reciprocal, aten.mul, aten.log, aten.repeat]
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_log_mul_reciprocal_repeat_2.run(buf2, buf3, 4, grid=grid(4), stream=stream0)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf2
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf1, buf3, )
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg1_1 = rand_strided((), (), device='cuda:0', dtype=torch.float32)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([arg0_1, arg1_1])
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0204 14:21:07.008000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:07.013000 3831937 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: /tmp/torchinductor_sahanp/n2/cn267nntdjrodkg6kxljsysaj2b3ua5myybuhoznrywbxgpxdrnn.py
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['0_inference']
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [std, pow_1, add, sqrt, pow_2, add_1, sqrt_1, prod], Original ATen: [aten.std, aten.pow, aten.add, aten.sqrt, aten.prod]
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add => add
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add_1 => add_1
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pow_1 => pow_1
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pow_2 => pow_2
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   prod => prod
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sqrt => sqrt_1
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sqrt_1 => sqrt_2
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   std => sqrt, var
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %var : [num_users=1] = call_function[target=torch.ops.aten.var.correction](args = (%arg0_1, [0]), kwargs = {correction: 1.0, keepdim: True})
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sqrt : [num_users=2] = call_function[target=torch.ops.aten.sqrt.default](args = (%var,), kwargs = {})
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_1 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sqrt, 2), kwargs = {})
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%pow_1, %arg1_1), kwargs = {})
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sqrt_1 : [num_users=1] = call_function[target=torch.ops.aten.sqrt.default](args = (%add,), kwargs = {})
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_2 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sqrt, 2), kwargs = {})
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_1 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%pow_2, %arg1_1), kwargs = {})
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sqrt_2 : [num_users=1] = call_function[target=torch.ops.aten.sqrt.default](args = (%add_1,), kwargs = {})
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %prod : [num_users=1] = call_function[target=torch.ops.aten.prod.default](args = (%sqrt_2,), kwargs = {})
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused_add_pow_prod_sqrt_std_0 = async_compile.triton('triton_per_fused_add_pow_prod_sqrt_std_0', '''
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 1, 'r': 64},
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {'xnumel': 1}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 5), 'tt.equal_to': (4,)}, 'cls': 'AttrsDescriptor'})]},
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_pow_prod_sqrt_std_0', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 1, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused_add_pow_prod_sqrt_std_0(in_ptr0, in_ptr1, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 1
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 64
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 64
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[None, :]
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r0 = rindex
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r0), None)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr0 + (64 + r0), None)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.load(in_ptr0 + (128 + r0), None)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tl.load(in_ptr0 + (192 + r0), None)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tl.load(in_ptr1 + (0))
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = tl.broadcast_to(tmp24, [XBLOCK, RBLOCK])
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 + tmp1
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp2 + tmp3
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tmp4 + tmp5
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = 4.0
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp6 / tmp7
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp0 - tmp8
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp9 * tmp9
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp1 - tmp8
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tmp11 * tmp11
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp10 + tmp12
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tmp3 - tmp8
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp14 * tmp14
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tmp13 + tmp15
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp5 - tmp8
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tmp17 * tmp17
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tmp16 + tmp18
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = 3.0
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tmp19 / tmp20
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = libdevice.sqrt(tmp21)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tmp22 * tmp22
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tmp23 + tmp25
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = libdevice.sqrt(tmp26)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tl.broadcast_to(tmp27, [XBLOCK, RBLOCK])
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = triton_helpers.prod(tmp28, 1)[:, None]
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (tl.broadcast_to(r0, [XBLOCK, RBLOCK])), tmp27, None)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr1 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp30, None)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/kq/ckqxolgv363javfdqkplzcfshetxldfdv7ej72xnwsecpxuf6ntb.py
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [mean, sub, std, pow_1, add, sqrt, z_], Original ATen: [aten.mean, aten.sub, aten.std, aten.pow, aten.add, aten.sqrt, aten.div]
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add => add
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mean => mean
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pow_1 => pow_1
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sqrt => sqrt_1
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   std => sqrt, var
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub => sub
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   z_ => div
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean : [num_users=1] = call_function[target=torch.ops.aten.mean.dim](args = (%arg0_1, [0], True), kwargs = {})
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%arg0_1, %mean), kwargs = {})
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %var : [num_users=1] = call_function[target=torch.ops.aten.var.correction](args = (%arg0_1, [0]), kwargs = {correction: 1.0, keepdim: True})
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sqrt : [num_users=2] = call_function[target=torch.ops.aten.sqrt.default](args = (%var,), kwargs = {})
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_1 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sqrt, 2), kwargs = {})
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%pow_1, %arg1_1), kwargs = {})
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sqrt_1 : [num_users=1] = call_function[target=torch.ops.aten.sqrt.default](args = (%add,), kwargs = {})
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %div : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%sub, %sqrt_1), kwargs = {})
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_add_div_mean_pow_sqrt_std_sub_1 = async_compile.triton('triton_poi_fused_add_div_mean_pow_sqrt_std_sub_1', '''
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 256}, 
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_div_mean_pow_sqrt_std_sub_1', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_add_div_mean_pow_sqrt_std_sub_1(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 256
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 64)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x2), xmask)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr0 + (x0), xmask, eviction_policy='evict_last')
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tl.load(in_ptr0 + (64 + x0), xmask, eviction_policy='evict_last')
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.load(in_ptr0 + (128 + x0), xmask, eviction_policy='evict_last')
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tl.load(in_ptr0 + (192 + x0), xmask, eviction_policy='evict_last')
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tl.load(in_ptr1 + (x0), xmask, eviction_policy='evict_last')
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp1 + tmp2
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp3 + tmp4
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tmp5 + tmp6
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = 4.0
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp7 / tmp8
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp0 - tmp9
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tmp10 / tmp11
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x2), tmp12, xmask)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/ak/cakeclka7w5l4ptstfrt6pwub6ixtogqwk343lrt55ah2yklbd5c.py
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [truediv_1, log, log_det], Original ATen: [aten.reciprocal, aten.mul, aten.log, aten.repeat]
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   log => log
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   log_det => repeat
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   truediv_1 => mul, reciprocal
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %reciprocal : [num_users=1] = call_function[target=torch.ops.aten.reciprocal.default](args = (%prod,), kwargs = {})
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%reciprocal, 1), kwargs = {})
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %log : [num_users=1] = call_function[target=torch.ops.aten.log.default](args = (%mul,), kwargs = {})
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %repeat : [num_users=1] = call_function[target=torch.ops.aten.repeat.default](args = (%log, [4]), kwargs = {})
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_log_mul_reciprocal_repeat_2 = async_compile.triton('triton_poi_fused_log_mul_reciprocal_repeat_2', '''
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 4}, 
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_log_mul_reciprocal_repeat_2', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_log_mul_reciprocal_repeat_2(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 4
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = xindex
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (0))
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.broadcast_to(tmp0, [XBLOCK])
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tl.full([1], 1, tl.int32)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp2 / tmp1
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = 1.0
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp3 * tmp4
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tl_math.log(tmp5)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x0), tmp6, xmask)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1, arg1_1 = args
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg0_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg1_1, (), ())
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((1, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = empty_strided_cuda((), (), torch.float32)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [std, pow_1, add, sqrt, pow_2, add_1, sqrt_1, prod], Original ATen: [aten.std, aten.pow, aten.add, aten.sqrt, aten.prod]
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused_add_pow_prod_sqrt_std_0.run(arg0_1, arg1_1, buf0, buf2, 1, 64, grid=grid(1), stream=stream0)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg1_1
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = empty_strided_cuda((4, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mean, sub, std, pow_1, add, sqrt, z_], Original ATen: [aten.mean, aten.sub, aten.std, aten.pow, aten.add, aten.sqrt, aten.div]
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_add_div_mean_pow_sqrt_std_sub_1.run(arg0_1, buf0, buf1, 256, grid=grid(256), stream=stream0)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg0_1
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf0
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = empty_strided_cuda((4, ), (1, ), torch.float32)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [truediv_1, log, log_det], Original ATen: [aten.reciprocal, aten.mul, aten.log, aten.repeat]
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_log_mul_reciprocal_repeat_2.run(buf2, buf3, 4, grid=grid(4), stream=stream0)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf2
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf1, buf3, )
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg1_1 = rand_strided((), (), device='cuda:0', dtype=torch.float32)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([arg0_1, arg1_1])
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0205 19:10:04.282000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:04.287000 1129093 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: inductor_cache/s2/cs24ix57kotdn5jknwp6aczcbqoq466j3zj6plo34hbgnmosy6il.py
