V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['2_forward']
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/z4/cz42irpnm5aw7r3lk3lbtqaqsmarpa5vdjijducdb3hmcj7dpscg.py
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [pad], Original ATen: [aten.copy]
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pad => copy
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %copy : [num_users=1] = call_function[target=torch.ops.aten.copy.default](args = (%slice_1, %slice_2), kwargs = {})
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %slice_scatter_default : [num_users=2] = call_function[target=torch.ops.aten.slice_scatter.default](args = (%empty, %copy, 2, 1, 5), kwargs = {})
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %slice_scatter_default_1 : [num_users=2] = call_function[target=torch.ops.aten.slice_scatter.default](args = (%slice_scatter_default, %slice_7, 2, 0, 1), kwargs = {})
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %slice_scatter_default_2 : [num_users=2] = call_function[target=torch.ops.aten.slice_scatter.default](args = (%slice_scatter_default_1, %slice_12, 2, 5, 6), kwargs = {})
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_copy_0 = async_compile.triton('triton_poi_fused_copy_0', '''
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'y': 32, 'x': 4}, tile_hint=TileHint.SQUARE,
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'ynumel': 'i32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_copy_0', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_copy_0(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     ynumel = 24
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 4
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     yoffset = tl.program_id(1) * YBLOCK
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     ymask = yindex < ynumel
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     y0 = (yindex % 6)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     y1 = yindex // 6
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = y0
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.full([1, 1], 5, tl.int64)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 >= tmp1
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.broadcast_to((-4) + y0, [XBLOCK, YBLOCK])
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.full([1, 1], 1, tl.int64)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp3 < tmp4
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tmp5 & tmp2
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tl.broadcast_to(y0, [XBLOCK, YBLOCK])
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tl.full([1, 1], 1, tl.int64)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp7 >= tmp8
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tl.full([1, 1], 5, tl.int64)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp7 < tmp10
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tmp9 & tmp11
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp12 & tmp6
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tl.load(in_ptr0 + ((-4) + x2 + 4*y0 + 16*y1), tmp13 & xmask & ymask, eviction_policy='evict_last', other=0.0)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = float("nan")
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tl.where(tmp12, tmp14, tmp15)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tl.full(tmp16.shape, 0.0, tmp16.dtype)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tl.where(tmp6, tmp16, tmp17)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tmp3 >= tmp4
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tl.full([1, 1], 5, tl.int64)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tmp3 < tmp20
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tmp19 & tmp21
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tmp22 & tmp2
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tl.load(in_ptr0 + ((-20) + x2 + 4*y0 + 16*y1), tmp23 & xmask & ymask, eviction_policy='evict_last', other=0.0)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = float("nan")
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tl.where(tmp22, tmp24, tmp25)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tl.where(tmp5, tmp18, tmp26)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tl.full(tmp27.shape, 0.0, tmp27.dtype)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = tl.where(tmp2, tmp27, tmp28)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = tl.full([1, 1], 1, tl.int64)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = tmp0 < tmp30
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = tl.broadcast_to(4 + y0, [XBLOCK, YBLOCK])
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp33 = tl.full([1, 1], 1, tl.int64)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp34 = tmp32 >= tmp33
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp35 = tl.full([1, 1], 5, tl.int64)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp36 = tmp32 < tmp35
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp37 = tmp34 & tmp36
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp38 = tmp37 & tmp31
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp39 = tl.load(in_ptr0 + (12 + x2 + 4*y0 + 16*y1), tmp38 & xmask & ymask, eviction_policy='evict_last', other=0.0)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp40 = float("nan")
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp41 = tl.where(tmp37, tmp39, tmp40)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp42 = tl.full(tmp41.shape, 0.0, tmp41.dtype)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp43 = tl.where(tmp31, tmp41, tmp42)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp44 = tmp0 >= tmp30
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp45 = tmp0 < tmp1
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp46 = tmp44 & tmp45
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp47 = tl.load(in_ptr0 + ((-4) + x2 + 4*y0 + 16*y1), tmp46 & xmask & ymask, eviction_policy='evict_last', other=0.0)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp48 = float("nan")
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp49 = tl.where(tmp46, tmp47, tmp48)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp50 = tl.where(tmp31, tmp43, tmp49)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp51 = tl.where(tmp2, tmp29, tmp50)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (y0 + 6*x2 + 24*y1), tmp51, xmask & ymask)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/3r/c3r4oaqy35e2xf3jewk2ghetdxkv6e6sy62wb7ao244esovmbaik.py
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [x_1], Original ATen: [aten.add]
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   x_1 => add
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%permute_1, %slice_15), kwargs = {})
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_add_1 = async_compile.triton('triton_poi_fused_add_1', '''
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64}, 
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_1', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_add_1(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 64
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 4)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 4) % 4)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_out_ptr0 + (x3), xmask)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr0 + (x1 + 4*x0), xmask, eviction_policy='evict_last')
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 + tmp1
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x3), tmp2, xmask)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1, primals_2, primals_3 = args
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_1, (4, 4, 4), (16, 4, 1))
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_2, (4, 4, 3), (12, 3, 1))
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_3, (1, 5000, 4), (20000, 4, 1))
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = empty_strided_cuda((4, 4, 6), (24, 6, 1), torch.float32)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [pad], Original ATen: [aten.copy]
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_copy_0.run(primals_1, buf1, 24, 4, grid=grid(24, 4), stream=stream0)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_1
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [conv1d], Original ATen: [aten.convolution]
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = extern_kernels.convolution(buf1, primals_2, stride=(1,), padding=(0,), dilation=(1,), transposed=False, output_padding=(0,), groups=1, bias=None)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf2, (4, 4, 4), (16, 4, 1))
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = reinterpret_tensor(buf2, (4, 4, 4), (16, 1, 4), 0); del buf2  # reuse
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [x_1], Original ATen: [aten.add]
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_add_1.run(buf3, primals_3, 64, grid=grid(64), stream=stream0)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_3
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf3, primals_2, buf1, )
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1 = rand_strided((4, 4, 4), (16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_2 = rand_strided((4, 4, 3), (12, 3, 1), device='cuda:0', dtype=torch.float32)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_3 = rand_strided((1, 5000, 4), (20000, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([primals_1, primals_2, primals_3])
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0204 15:49:51.461000 2106393 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:49:51.464000 2106393 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: /tmp/torchinductor_sahanp/l4/cl43mposounkrzf4a73isf4gmf7cwwyj7y3oynaroqxfxzdgc3cy.py
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['2_forward']
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/z4/cz42irpnm5aw7r3lk3lbtqaqsmarpa5vdjijducdb3hmcj7dpscg.py
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [pad], Original ATen: [aten.copy]
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pad => copy
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %copy : [num_users=1] = call_function[target=torch.ops.aten.copy.default](args = (%slice_1, %slice_2), kwargs = {})
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %slice_scatter_default : [num_users=2] = call_function[target=torch.ops.aten.slice_scatter.default](args = (%empty, %copy, 2, 1, 5), kwargs = {})
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %slice_scatter_default_1 : [num_users=2] = call_function[target=torch.ops.aten.slice_scatter.default](args = (%slice_scatter_default, %slice_7, 2, 0, 1), kwargs = {})
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %slice_scatter_default_2 : [num_users=2] = call_function[target=torch.ops.aten.slice_scatter.default](args = (%slice_scatter_default_1, %slice_12, 2, 5, 6), kwargs = {})
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_copy_0 = async_compile.triton('triton_poi_fused_copy_0', '''
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'y': 32, 'x': 4}, tile_hint=TileHint.SQUARE,
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'ynumel': 'i32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_copy_0', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_copy_0(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     ynumel = 24
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 4
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     yoffset = tl.program_id(1) * YBLOCK
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     ymask = yindex < ynumel
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     y0 = (yindex % 6)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     y1 = yindex // 6
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = y0
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.full([1, 1], 5, tl.int64)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 >= tmp1
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.broadcast_to((-4) + y0, [XBLOCK, YBLOCK])
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.full([1, 1], 1, tl.int64)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp3 < tmp4
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tmp5 & tmp2
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tl.broadcast_to(y0, [XBLOCK, YBLOCK])
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tl.full([1, 1], 1, tl.int64)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp7 >= tmp8
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tl.full([1, 1], 5, tl.int64)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp7 < tmp10
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tmp9 & tmp11
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp12 & tmp6
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tl.load(in_ptr0 + ((-4) + x2 + 4*y0 + 16*y1), tmp13 & xmask & ymask, eviction_policy='evict_last', other=0.0)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = float("nan")
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tl.where(tmp12, tmp14, tmp15)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tl.full(tmp16.shape, 0.0, tmp16.dtype)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tl.where(tmp6, tmp16, tmp17)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tmp3 >= tmp4
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tl.full([1, 1], 5, tl.int64)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tmp3 < tmp20
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tmp19 & tmp21
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tmp22 & tmp2
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tl.load(in_ptr0 + ((-20) + x2 + 4*y0 + 16*y1), tmp23 & xmask & ymask, eviction_policy='evict_last', other=0.0)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = float("nan")
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tl.where(tmp22, tmp24, tmp25)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tl.where(tmp5, tmp18, tmp26)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tl.full(tmp27.shape, 0.0, tmp27.dtype)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = tl.where(tmp2, tmp27, tmp28)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = tl.full([1, 1], 1, tl.int64)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = tmp0 < tmp30
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = tl.broadcast_to(4 + y0, [XBLOCK, YBLOCK])
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp33 = tl.full([1, 1], 1, tl.int64)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp34 = tmp32 >= tmp33
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp35 = tl.full([1, 1], 5, tl.int64)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp36 = tmp32 < tmp35
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp37 = tmp34 & tmp36
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp38 = tmp37 & tmp31
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp39 = tl.load(in_ptr0 + (12 + x2 + 4*y0 + 16*y1), tmp38 & xmask & ymask, eviction_policy='evict_last', other=0.0)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp40 = float("nan")
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp41 = tl.where(tmp37, tmp39, tmp40)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp42 = tl.full(tmp41.shape, 0.0, tmp41.dtype)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp43 = tl.where(tmp31, tmp41, tmp42)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp44 = tmp0 >= tmp30
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp45 = tmp0 < tmp1
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp46 = tmp44 & tmp45
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp47 = tl.load(in_ptr0 + ((-4) + x2 + 4*y0 + 16*y1), tmp46 & xmask & ymask, eviction_policy='evict_last', other=0.0)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp48 = float("nan")
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp49 = tl.where(tmp46, tmp47, tmp48)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp50 = tl.where(tmp31, tmp43, tmp49)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp51 = tl.where(tmp2, tmp29, tmp50)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (y0 + 6*x2 + 24*y1), tmp51, xmask & ymask)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/3r/c3r4oaqy35e2xf3jewk2ghetdxkv6e6sy62wb7ao244esovmbaik.py
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [x_1], Original ATen: [aten.add]
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   x_1 => add
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%permute_1, %slice_15), kwargs = {})
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_add_1 = async_compile.triton('triton_poi_fused_add_1', '''
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64}, 
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_1', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_add_1(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 64
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 4)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 4) % 4)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_out_ptr0 + (x3), xmask)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr0 + (x1 + 4*x0), xmask, eviction_policy='evict_last')
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 + tmp1
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x3), tmp2, xmask)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1, primals_2, primals_3 = args
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_1, (4, 4, 4), (16, 4, 1))
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_2, (4, 4, 3), (12, 3, 1))
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_3, (1, 5000, 4), (20000, 4, 1))
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = empty_strided_cuda((4, 4, 6), (24, 6, 1), torch.float32)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [pad], Original ATen: [aten.copy]
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_copy_0.run(primals_1, buf1, 24, 4, grid=grid(24, 4), stream=stream0)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_1
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [conv1d], Original ATen: [aten.convolution]
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = extern_kernels.convolution(buf1, primals_2, stride=(1,), padding=(0,), dilation=(1,), transposed=False, output_padding=(0,), groups=1, bias=None)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf2, (4, 4, 4), (16, 4, 1))
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = reinterpret_tensor(buf2, (4, 4, 4), (16, 1, 4), 0); del buf2  # reuse
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [x_1], Original ATen: [aten.add]
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_add_1.run(buf3, primals_3, 64, grid=grid(64), stream=stream0)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_3
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf3, primals_2, buf1, )
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1 = rand_strided((4, 4, 4), (16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_2 = rand_strided((4, 4, 3), (12, 3, 1), device='cuda:0', dtype=torch.float32)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_3 = rand_strided((1, 5000, 4), (20000, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([primals_1, primals_2, primals_3])
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0205 20:39:23.009000 3639260 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:23.013000 3639260 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: inductor_cache/yp/cypwfddko2ycwhjm3vmdhffteqjx2fuvcxglq5dbabpqvylg2v4s.py
