V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['4_forward']
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/m3/cm3lb7skmofnucx5rcnhcpb27el4yvdmrmv3yjdc7hq6udjkz76i.py
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [batch_norm, softplus, tanh, x1], Original ATen: [aten._native_batch_norm_legit_no_training, aten.softplus, aten.tanh, aten.mul]
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   batch_norm => add_1, mul_1, mul_2, sub
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   softplus => exp, gt, log1p, where
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   tanh => tanh
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   x1 => mul_3
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%convolution, %unsqueeze_1), kwargs = {})
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub, %unsqueeze_3), kwargs = {})
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_2 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_1, %unsqueeze_5), kwargs = {})
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_1 : [num_users=4] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_2, %unsqueeze_7), kwargs = {})
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %exp : [num_users=1] = call_function[target=torch.ops.aten.exp.default](args = (%add_1,), kwargs = {})
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %log1p : [num_users=1] = call_function[target=torch.ops.aten.log1p.default](args = (%exp,), kwargs = {})
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %gt : [num_users=1] = call_function[target=torch.ops.aten.gt.Scalar](args = (%add_1, 20), kwargs = {})
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %where : [num_users=1] = call_function[target=torch.ops.aten.where.self](args = (%gt, %add_1, %log1p), kwargs = {})
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %tanh : [num_users=1] = call_function[target=torch.ops.aten.tanh.default](args = (%where,), kwargs = {})
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_3 : [num_users=3] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_1, %tanh), kwargs = {})
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused__native_batch_norm_legit_no_training_mul_softplus_tanh_0 = async_compile.triton('triton_poi_fused__native_batch_norm_legit_no_training_mul_softplus_tanh_0', '''
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 256}, 
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__native_batch_norm_legit_no_training_mul_softplus_tanh_0', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused__native_batch_norm_legit_no_training_mul_softplus_tanh_0(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, XBLOCK : tl.constexpr):
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 256
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 16) % 4)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x3), xmask)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (x1), xmask, eviction_policy='evict_last')
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.load(in_ptr2 + (x1), xmask, eviction_policy='evict_last')
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tl.load(in_ptr3 + (x1), xmask, eviction_policy='evict_last')
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tl.load(in_ptr4 + (x1), xmask, eviction_policy='evict_last')
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 - tmp1
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = 1e-05
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp3 + tmp4
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = libdevice.sqrt(tmp5)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tl.full([1], 1, tl.int32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp7 / tmp6
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = 1.0
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp8 * tmp9
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp2 * tmp10
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp11 * tmp12
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp13 + tmp14
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = 20.0
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp15 > tmp16
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tl_math.exp(tmp15)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = libdevice.log1p(tmp18)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tl.where(tmp17, tmp15, tmp19)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = libdevice.tanh(tmp20)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tmp15 * tmp21
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x3), tmp22, xmask)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/7w/c7wopbfg2xw4dv7hq52tbjvjhtih3v3n7u2pfho4osnpmxhql5od.py
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [batch_norm_2], Original ATen: [aten._native_batch_norm_legit_no_training]
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   batch_norm_2 => add_5, mul_10, mul_9, sub_2
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_2 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%convolution_2, %unsqueeze_17), kwargs = {})
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_9 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_2, %unsqueeze_19), kwargs = {})
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_10 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_9, %unsqueeze_21), kwargs = {})
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_5 : [num_users=4] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_10, %unsqueeze_23), kwargs = {})
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused__native_batch_norm_legit_no_training_1 = async_compile.triton('triton_poi_fused__native_batch_norm_legit_no_training_1', '''
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 256}, 
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__native_batch_norm_legit_no_training_1', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused__native_batch_norm_legit_no_training_1(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 256
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 16) % 4)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x3), xmask)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (x1), xmask, eviction_policy='evict_last')
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.load(in_ptr2 + (x1), xmask, eviction_policy='evict_last')
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tl.load(in_ptr3 + (x1), xmask, eviction_policy='evict_last')
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tl.load(in_ptr4 + (x1), xmask, eviction_policy='evict_last')
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 - tmp1
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = 1e-05
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp3 + tmp4
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = libdevice.sqrt(tmp5)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tl.full([1], 1, tl.int32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp7 / tmp6
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = 1.0
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp8 * tmp9
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp2 * tmp10
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp11 * tmp12
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp13 + tmp14
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x3), tmp15, xmask)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/in/cinih3v5hzg6vkizxkmejd4kcrquqimnib5aqtriv3oooegsugl2.py
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [cat, batch_norm_3, softplus_3, tanh_3, mul_3], Original ATen: [aten.cat, aten._native_batch_norm_legit_no_training, aten.softplus, aten.tanh, aten.mul]
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   batch_norm_3 => add_7, mul_13, mul_14, sub_3
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   cat => cat
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_3 => mul_15
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   softplus_3 => exp_3, gt_3, log1p_3, where_3
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   tanh_3 => tanh_3
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %cat : [num_users=2] = call_function[target=torch.ops.aten.cat.default](args = ([%mul_11, %convolution_3], 1), kwargs = {})
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_3 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%cat, %unsqueeze_25), kwargs = {})
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_13 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_3, %unsqueeze_27), kwargs = {})
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_14 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_13, %unsqueeze_29), kwargs = {})
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_7 : [num_users=4] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_14, %unsqueeze_31), kwargs = {})
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %exp_3 : [num_users=1] = call_function[target=torch.ops.aten.exp.default](args = (%add_7,), kwargs = {})
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %log1p_3 : [num_users=1] = call_function[target=torch.ops.aten.log1p.default](args = (%exp_3,), kwargs = {})
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %gt_3 : [num_users=1] = call_function[target=torch.ops.aten.gt.Scalar](args = (%add_7, 20), kwargs = {})
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %where_3 : [num_users=1] = call_function[target=torch.ops.aten.where.self](args = (%gt_3, %add_7, %log1p_3), kwargs = {})
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %tanh_3 : [num_users=1] = call_function[target=torch.ops.aten.tanh.default](args = (%where_3,), kwargs = {})
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_15 : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_7, %tanh_3), kwargs = {})
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused__native_batch_norm_legit_no_training_cat_mul_softplus_tanh_2 = async_compile.triton('triton_poi_fused__native_batch_norm_legit_no_training_cat_mul_softplus_tanh_2', '''
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 512}, 
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'in_ptr5': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__native_batch_norm_legit_no_training_cat_mul_softplus_tanh_2', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused__native_batch_norm_legit_no_training_cat_mul_softplus_tanh_2(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 512
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 16) % 8)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 16)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex // 128
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tl.load(in_ptr2 + (x1), xmask, eviction_policy='evict_last')
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tl.load(in_ptr3 + (x1), xmask, eviction_policy='evict_last')
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = tl.load(in_ptr4 + (x1), xmask, eviction_policy='evict_last')
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp33 = tl.load(in_ptr5 + (x1), xmask, eviction_policy='evict_last')
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = x1
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.full([1], 0, tl.int64)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 >= tmp1
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.full([1], 4, tl.int64)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp0 < tmp3
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tl.load(in_ptr0 + (x0 + 16*(x1) + 64*x2), tmp4 & xmask, other=0.0)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = 20.0
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tmp5 > tmp6
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tl_math.exp(tmp5)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = libdevice.log1p(tmp8)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tl.where(tmp7, tmp5, tmp9)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = libdevice.tanh(tmp10)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tmp5 * tmp11
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tl.full(tmp12.shape, 0.0, tmp12.dtype)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tl.where(tmp4, tmp12, tmp13)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp0 >= tmp3
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tl.full([1], 8, tl.int64)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp0 < tmp16
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tl.load(in_ptr1 + (x0 + 16*((-4) + x1) + 64*x2), tmp15 & xmask, other=0.0)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tl.where(tmp4, tmp14, tmp18)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tmp19 - tmp20
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = 1e-05
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tmp22 + tmp23
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = libdevice.sqrt(tmp24)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tl.full([1], 1, tl.int32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tmp26 / tmp25
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = 1.0
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = tmp27 * tmp28
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = tmp21 * tmp29
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = tmp30 * tmp31
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp34 = tmp32 + tmp33
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp35 = 20.0
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp36 = tmp34 > tmp35
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp37 = tl_math.exp(tmp34)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp38 = libdevice.log1p(tmp37)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp39 = tl.where(tmp36, tmp34, tmp38)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp40 = libdevice.tanh(tmp39)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp41 = tmp34 * tmp40
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x3), tmp19, xmask)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x3), tmp41, xmask)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13, primals_14, primals_15, primals_16, primals_17, primals_18, primals_19, primals_20, primals_21, primals_22, primals_23, primals_24, primals_25, primals_26 = args
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_1, (4, 4, 1, 1), (4, 1, 1, 1))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_2, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_3, (4, ), (1, ))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_4, (4, ), (1, ))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_5, (4, ), (1, ))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_6, (4, ), (1, ))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_7, (4, 4, 1, 1), (4, 1, 1, 1))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_8, (4, ), (1, ))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_9, (4, ), (1, ))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_10, (4, ), (1, ))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_11, (4, ), (1, ))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_12, (4, 4, 3, 3), (36, 9, 3, 1))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_13, (4, ), (1, ))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_14, (4, ), (1, ))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_15, (4, ), (1, ))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_16, (4, ), (1, ))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_17, (4, 4, 1, 1), (4, 1, 1, 1))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_18, (8, ), (1, ))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_19, (8, ), (1, ))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_20, (8, ), (1, ))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_21, (8, ), (1, ))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_22, (4, 8, 1, 1), (8, 1, 1, 1))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_23, (4, ), (1, ))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_24, (4, ), (1, ))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_25, (4, ), (1, ))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_26, (4, ), (1, ))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [conv2d], Original ATen: [aten.convolution]
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = extern_kernels.convolution(primals_2, primals_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf0, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = empty_strided_cuda((4, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = buf1; del buf1  # reuse
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [batch_norm, softplus, tanh, x1], Original ATen: [aten._native_batch_norm_legit_no_training, aten.softplus, aten.tanh, aten.mul]
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__native_batch_norm_legit_no_training_mul_softplus_tanh_0.run(buf2, buf0, primals_3, primals_4, primals_5, primals_6, 256, grid=grid(256), stream=stream0)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [conv2d_1], Original ATen: [aten.convolution]
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = extern_kernels.convolution(buf2, primals_7, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf3, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf4 = empty_strided_cuda((4, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf5 = buf4; del buf4  # reuse
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [batch_norm_1, softplus_1, tanh_1, mul_1], Original ATen: [aten._native_batch_norm_legit_no_training, aten.softplus, aten.tanh, aten.mul]
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__native_batch_norm_legit_no_training_mul_softplus_tanh_0.run(buf5, buf3, primals_8, primals_9, primals_10, primals_11, 256, grid=grid(256), stream=stream0)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [conv2d_2], Original ATen: [aten.convolution]
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf6 = extern_kernels.convolution(buf5, primals_12, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf6, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf7 = empty_strided_cuda((4, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [batch_norm_2], Original ATen: [aten._native_batch_norm_legit_no_training]
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__native_batch_norm_legit_no_training_1.run(buf6, primals_13, primals_14, primals_15, primals_16, buf7, 256, grid=grid(256), stream=stream0)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [y2], Original ATen: [aten.convolution]
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf8 = extern_kernels.convolution(buf2, primals_17, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf8, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf9 = empty_strided_cuda((4, 8, 4, 4), (128, 16, 4, 1), torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf10 = empty_strided_cuda((4, 8, 4, 4), (128, 16, 4, 1), torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf11 = buf10; del buf10  # reuse
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [cat, batch_norm_3, softplus_3, tanh_3, mul_3], Original ATen: [aten.cat, aten._native_batch_norm_legit_no_training, aten.softplus, aten.tanh, aten.mul]
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__native_batch_norm_legit_no_training_cat_mul_softplus_tanh_2.run(buf11, buf7, buf8, primals_18, primals_19, primals_20, primals_21, buf9, 512, grid=grid(512), stream=stream0)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf7
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [conv2d_4], Original ATen: [aten.convolution]
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf12 = extern_kernels.convolution(buf11, primals_22, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf12, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf13 = buf8; del buf8  # reuse
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf14 = buf13; del buf13  # reuse
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [batch_norm_4, softplus_4, tanh_4, mul_4], Original ATen: [aten._native_batch_norm_legit_no_training, aten.softplus, aten.tanh, aten.mul]
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__native_batch_norm_legit_no_training_mul_softplus_tanh_0.run(buf14, buf12, primals_23, primals_24, primals_25, primals_26, 256, grid=grid(256), stream=stream0)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf14, primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13, primals_14, primals_15, primals_16, primals_17, primals_18, primals_19, primals_20, primals_21, primals_22, primals_23, primals_24, primals_25, primals_26, buf0, buf2, buf3, buf5, buf6, buf9, buf11, buf12, )
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1 = rand_strided((4, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_2 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_3 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_4 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_5 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_6 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_7 = rand_strided((4, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_8 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_9 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_10 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_11 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_12 = rand_strided((4, 4, 3, 3), (36, 9, 3, 1), device='cuda:0', dtype=torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_13 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_14 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_15 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_16 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_17 = rand_strided((4, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_18 = rand_strided((8, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_19 = rand_strided((8, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_20 = rand_strided((8, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_21 = rand_strided((8, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_22 = rand_strided((4, 8, 1, 1), (8, 1, 1, 1), device='cuda:0', dtype=torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_23 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_24 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_25 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_26 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13, primals_14, primals_15, primals_16, primals_17, primals_18, primals_19, primals_20, primals_21, primals_22, primals_23, primals_24, primals_25, primals_26])
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0204 14:30:52.548000 4149776 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:30:52.554000 4149776 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: /tmp/torchinductor_sahanp/l4/cl4wnjajrz2o6tnbtzohhflklqgiwf7ftnbx3xmgop4ewo43qfwn.py
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['4_forward']
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/m3/cm3lb7skmofnucx5rcnhcpb27el4yvdmrmv3yjdc7hq6udjkz76i.py
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [batch_norm, softplus, tanh, x1], Original ATen: [aten._native_batch_norm_legit_no_training, aten.softplus, aten.tanh, aten.mul]
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   batch_norm => add_1, mul_1, mul_2, sub
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   softplus => exp, gt, log1p, where
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   tanh => tanh
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   x1 => mul_3
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%convolution, %unsqueeze_1), kwargs = {})
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub, %unsqueeze_3), kwargs = {})
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_2 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_1, %unsqueeze_5), kwargs = {})
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_1 : [num_users=4] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_2, %unsqueeze_7), kwargs = {})
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %exp : [num_users=1] = call_function[target=torch.ops.aten.exp.default](args = (%add_1,), kwargs = {})
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %log1p : [num_users=1] = call_function[target=torch.ops.aten.log1p.default](args = (%exp,), kwargs = {})
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %gt : [num_users=1] = call_function[target=torch.ops.aten.gt.Scalar](args = (%add_1, 20), kwargs = {})
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %where : [num_users=1] = call_function[target=torch.ops.aten.where.self](args = (%gt, %add_1, %log1p), kwargs = {})
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %tanh : [num_users=1] = call_function[target=torch.ops.aten.tanh.default](args = (%where,), kwargs = {})
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_3 : [num_users=3] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_1, %tanh), kwargs = {})
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused__native_batch_norm_legit_no_training_mul_softplus_tanh_0 = async_compile.triton('triton_poi_fused__native_batch_norm_legit_no_training_mul_softplus_tanh_0', '''
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 256}, 
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__native_batch_norm_legit_no_training_mul_softplus_tanh_0', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused__native_batch_norm_legit_no_training_mul_softplus_tanh_0(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, XBLOCK : tl.constexpr):
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 256
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 16) % 4)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x3), xmask)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (x1), xmask, eviction_policy='evict_last')
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.load(in_ptr2 + (x1), xmask, eviction_policy='evict_last')
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tl.load(in_ptr3 + (x1), xmask, eviction_policy='evict_last')
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tl.load(in_ptr4 + (x1), xmask, eviction_policy='evict_last')
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 - tmp1
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = 1e-05
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp3 + tmp4
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = libdevice.sqrt(tmp5)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tl.full([1], 1, tl.int32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp7 / tmp6
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = 1.0
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp8 * tmp9
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp2 * tmp10
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp11 * tmp12
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp13 + tmp14
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = 20.0
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp15 > tmp16
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tl_math.exp(tmp15)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = libdevice.log1p(tmp18)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tl.where(tmp17, tmp15, tmp19)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = libdevice.tanh(tmp20)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tmp15 * tmp21
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x3), tmp22, xmask)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/7w/c7wopbfg2xw4dv7hq52tbjvjhtih3v3n7u2pfho4osnpmxhql5od.py
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [batch_norm_2], Original ATen: [aten._native_batch_norm_legit_no_training]
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   batch_norm_2 => add_5, mul_10, mul_9, sub_2
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_2 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%convolution_2, %unsqueeze_17), kwargs = {})
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_9 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_2, %unsqueeze_19), kwargs = {})
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_10 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_9, %unsqueeze_21), kwargs = {})
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_5 : [num_users=4] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_10, %unsqueeze_23), kwargs = {})
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused__native_batch_norm_legit_no_training_1 = async_compile.triton('triton_poi_fused__native_batch_norm_legit_no_training_1', '''
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 256}, 
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__native_batch_norm_legit_no_training_1', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused__native_batch_norm_legit_no_training_1(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 256
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 16) % 4)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x3), xmask)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (x1), xmask, eviction_policy='evict_last')
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.load(in_ptr2 + (x1), xmask, eviction_policy='evict_last')
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tl.load(in_ptr3 + (x1), xmask, eviction_policy='evict_last')
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tl.load(in_ptr4 + (x1), xmask, eviction_policy='evict_last')
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 - tmp1
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = 1e-05
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp3 + tmp4
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = libdevice.sqrt(tmp5)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tl.full([1], 1, tl.int32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp7 / tmp6
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = 1.0
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp8 * tmp9
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp2 * tmp10
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp11 * tmp12
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp13 + tmp14
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x3), tmp15, xmask)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/in/cinih3v5hzg6vkizxkmejd4kcrquqimnib5aqtriv3oooegsugl2.py
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [cat, batch_norm_3, softplus_3, tanh_3, mul_3], Original ATen: [aten.cat, aten._native_batch_norm_legit_no_training, aten.softplus, aten.tanh, aten.mul]
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   batch_norm_3 => add_7, mul_13, mul_14, sub_3
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   cat => cat
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_3 => mul_15
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   softplus_3 => exp_3, gt_3, log1p_3, where_3
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   tanh_3 => tanh_3
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %cat : [num_users=2] = call_function[target=torch.ops.aten.cat.default](args = ([%mul_11, %convolution_3], 1), kwargs = {})
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_3 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%cat, %unsqueeze_25), kwargs = {})
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_13 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_3, %unsqueeze_27), kwargs = {})
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_14 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_13, %unsqueeze_29), kwargs = {})
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_7 : [num_users=4] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_14, %unsqueeze_31), kwargs = {})
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %exp_3 : [num_users=1] = call_function[target=torch.ops.aten.exp.default](args = (%add_7,), kwargs = {})
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %log1p_3 : [num_users=1] = call_function[target=torch.ops.aten.log1p.default](args = (%exp_3,), kwargs = {})
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %gt_3 : [num_users=1] = call_function[target=torch.ops.aten.gt.Scalar](args = (%add_7, 20), kwargs = {})
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %where_3 : [num_users=1] = call_function[target=torch.ops.aten.where.self](args = (%gt_3, %add_7, %log1p_3), kwargs = {})
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %tanh_3 : [num_users=1] = call_function[target=torch.ops.aten.tanh.default](args = (%where_3,), kwargs = {})
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_15 : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_7, %tanh_3), kwargs = {})
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused__native_batch_norm_legit_no_training_cat_mul_softplus_tanh_2 = async_compile.triton('triton_poi_fused__native_batch_norm_legit_no_training_cat_mul_softplus_tanh_2', '''
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 512}, 
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'in_ptr5': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__native_batch_norm_legit_no_training_cat_mul_softplus_tanh_2', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused__native_batch_norm_legit_no_training_cat_mul_softplus_tanh_2(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 512
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 16) % 8)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 16)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex // 128
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tl.load(in_ptr2 + (x1), xmask, eviction_policy='evict_last')
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tl.load(in_ptr3 + (x1), xmask, eviction_policy='evict_last')
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = tl.load(in_ptr4 + (x1), xmask, eviction_policy='evict_last')
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp33 = tl.load(in_ptr5 + (x1), xmask, eviction_policy='evict_last')
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = x1
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.full([1], 0, tl.int64)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 >= tmp1
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.full([1], 4, tl.int64)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp0 < tmp3
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tl.load(in_ptr0 + (x0 + 16*(x1) + 64*x2), tmp4 & xmask, other=0.0)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = 20.0
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tmp5 > tmp6
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tl_math.exp(tmp5)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = libdevice.log1p(tmp8)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tl.where(tmp7, tmp5, tmp9)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = libdevice.tanh(tmp10)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tmp5 * tmp11
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tl.full(tmp12.shape, 0.0, tmp12.dtype)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tl.where(tmp4, tmp12, tmp13)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp0 >= tmp3
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tl.full([1], 8, tl.int64)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp0 < tmp16
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tl.load(in_ptr1 + (x0 + 16*((-4) + x1) + 64*x2), tmp15 & xmask, other=0.0)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tl.where(tmp4, tmp14, tmp18)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tmp19 - tmp20
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = 1e-05
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tmp22 + tmp23
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = libdevice.sqrt(tmp24)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tl.full([1], 1, tl.int32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tmp26 / tmp25
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = 1.0
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = tmp27 * tmp28
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = tmp21 * tmp29
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = tmp30 * tmp31
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp34 = tmp32 + tmp33
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp35 = 20.0
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp36 = tmp34 > tmp35
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp37 = tl_math.exp(tmp34)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp38 = libdevice.log1p(tmp37)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp39 = tl.where(tmp36, tmp34, tmp38)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp40 = libdevice.tanh(tmp39)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp41 = tmp34 * tmp40
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x3), tmp19, xmask)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x3), tmp41, xmask)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13, primals_14, primals_15, primals_16, primals_17, primals_18, primals_19, primals_20, primals_21, primals_22, primals_23, primals_24, primals_25, primals_26 = args
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_1, (4, 4, 1, 1), (4, 1, 1, 1))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_2, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_3, (4, ), (1, ))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_4, (4, ), (1, ))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_5, (4, ), (1, ))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_6, (4, ), (1, ))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_7, (4, 4, 1, 1), (4, 1, 1, 1))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_8, (4, ), (1, ))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_9, (4, ), (1, ))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_10, (4, ), (1, ))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_11, (4, ), (1, ))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_12, (4, 4, 3, 3), (36, 9, 3, 1))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_13, (4, ), (1, ))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_14, (4, ), (1, ))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_15, (4, ), (1, ))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_16, (4, ), (1, ))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_17, (4, 4, 1, 1), (4, 1, 1, 1))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_18, (8, ), (1, ))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_19, (8, ), (1, ))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_20, (8, ), (1, ))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_21, (8, ), (1, ))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_22, (4, 8, 1, 1), (8, 1, 1, 1))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_23, (4, ), (1, ))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_24, (4, ), (1, ))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_25, (4, ), (1, ))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_26, (4, ), (1, ))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [conv2d], Original ATen: [aten.convolution]
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = extern_kernels.convolution(primals_2, primals_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf0, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = empty_strided_cuda((4, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = buf1; del buf1  # reuse
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [batch_norm, softplus, tanh, x1], Original ATen: [aten._native_batch_norm_legit_no_training, aten.softplus, aten.tanh, aten.mul]
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__native_batch_norm_legit_no_training_mul_softplus_tanh_0.run(buf2, buf0, primals_3, primals_4, primals_5, primals_6, 256, grid=grid(256), stream=stream0)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [conv2d_1], Original ATen: [aten.convolution]
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = extern_kernels.convolution(buf2, primals_7, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf3, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf4 = empty_strided_cuda((4, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf5 = buf4; del buf4  # reuse
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [batch_norm_1, softplus_1, tanh_1, mul_1], Original ATen: [aten._native_batch_norm_legit_no_training, aten.softplus, aten.tanh, aten.mul]
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__native_batch_norm_legit_no_training_mul_softplus_tanh_0.run(buf5, buf3, primals_8, primals_9, primals_10, primals_11, 256, grid=grid(256), stream=stream0)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [conv2d_2], Original ATen: [aten.convolution]
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf6 = extern_kernels.convolution(buf5, primals_12, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf6, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf7 = empty_strided_cuda((4, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [batch_norm_2], Original ATen: [aten._native_batch_norm_legit_no_training]
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__native_batch_norm_legit_no_training_1.run(buf6, primals_13, primals_14, primals_15, primals_16, buf7, 256, grid=grid(256), stream=stream0)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [y2], Original ATen: [aten.convolution]
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf8 = extern_kernels.convolution(buf2, primals_17, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf8, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf9 = empty_strided_cuda((4, 8, 4, 4), (128, 16, 4, 1), torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf10 = empty_strided_cuda((4, 8, 4, 4), (128, 16, 4, 1), torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf11 = buf10; del buf10  # reuse
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [cat, batch_norm_3, softplus_3, tanh_3, mul_3], Original ATen: [aten.cat, aten._native_batch_norm_legit_no_training, aten.softplus, aten.tanh, aten.mul]
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__native_batch_norm_legit_no_training_cat_mul_softplus_tanh_2.run(buf11, buf7, buf8, primals_18, primals_19, primals_20, primals_21, buf9, 512, grid=grid(512), stream=stream0)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf7
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [conv2d_4], Original ATen: [aten.convolution]
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf12 = extern_kernels.convolution(buf11, primals_22, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf12, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf13 = buf8; del buf8  # reuse
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf14 = buf13; del buf13  # reuse
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [batch_norm_4, softplus_4, tanh_4, mul_4], Original ATen: [aten._native_batch_norm_legit_no_training, aten.softplus, aten.tanh, aten.mul]
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__native_batch_norm_legit_no_training_mul_softplus_tanh_0.run(buf14, buf12, primals_23, primals_24, primals_25, primals_26, 256, grid=grid(256), stream=stream0)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf14, primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13, primals_14, primals_15, primals_16, primals_17, primals_18, primals_19, primals_20, primals_21, primals_22, primals_23, primals_24, primals_25, primals_26, buf0, buf2, buf3, buf5, buf6, buf9, buf11, buf12, )
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1 = rand_strided((4, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_2 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_3 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_4 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_5 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_6 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_7 = rand_strided((4, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_8 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_9 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_10 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_11 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_12 = rand_strided((4, 4, 3, 3), (36, 9, 3, 1), device='cuda:0', dtype=torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_13 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_14 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_15 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_16 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_17 = rand_strided((4, 4, 1, 1), (4, 1, 1, 1), device='cuda:0', dtype=torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_18 = rand_strided((8, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_19 = rand_strided((8, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_20 = rand_strided((8, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_21 = rand_strided((8, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_22 = rand_strided((4, 8, 1, 1), (8, 1, 1, 1), device='cuda:0', dtype=torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_23 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_24 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_25 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_26 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13, primals_14, primals_15, primals_16, primals_17, primals_18, primals_19, primals_20, primals_21, primals_22, primals_23, primals_24, primals_25, primals_26])
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0205 19:19:40.873000 1371167 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:19:40.882000 1371167 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: inductor_cache/45/c45soohko3g3tefihcbhaz5emxs3hzl5y3fs24nqxsxmbytwwskk.py
