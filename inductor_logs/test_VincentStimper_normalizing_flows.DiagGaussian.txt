V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['7_forward']
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/t7/ct77jvlu7n62uvqb5mtr35ghtc6h634klswijhn4nrgw25ybzmou.py
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [exp, mul, z], Original ATen: [aten.exp, aten.mul, aten.add]
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   exp => exp
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul => mul
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   z => add
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %exp : [num_users=1] = call_function[target=torch.ops.aten.exp.default](args = (%primals_2,), kwargs = {})
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%exp, %randn), kwargs = {})
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%primals_1, %mul), kwargs = {})
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_add_exp_mul_0 = async_compile.triton('triton_poi_fused_add_exp_mul_0', '''
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 4}, 
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_exp_mul_0', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_add_exp_mul_0(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 4
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = xindex
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x0), xmask)
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (x0), xmask)
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.load(in_ptr2 + (x0), xmask)
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tl_math.exp(tmp1)
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp2 * tmp3
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp0 + tmp4
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x0), tmp5, xmask)
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/hf/chfbx37mn3kce5aybannls6n4zq2rcmehogrz55gy3jfa7peanwx.py
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [wrapped_mul, wrapped_log, wrapped_mul_1, pow_1, mul_1, add_1, sum_1, log_p], Original ATen: [aten.lift_fresh, aten.mul, aten.log, aten.pow, aten.add, aten.sum, aten.sub]
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add_1 => add_1
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   log_p => sub
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_1 => mul_3
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pow_1 => pow_1
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sum_1 => sum_1
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   wrapped_log => full_default_1
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   wrapped_mul => full_default, mul_1
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   wrapped_mul_1 => mul_2
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %full_default : [num_users=1] = call_function[target=torch.ops.aten.full.default](args = ([], -0.5), kwargs = {dtype: torch.float64, layout: torch.strided, device: cpu, pin_memory: False})
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%full_default, %primals_3), kwargs = {})
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %full_default_1 : [num_users=1] = call_function[target=torch.ops.aten.full.default](args = ([], 1.8378770664093453), kwargs = {dtype: torch.float64, layout: torch.strided, device: cpu, pin_memory: False})
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_2 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_1, %full_default_1), kwargs = {})
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_1 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%randn, 2), kwargs = {})
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_3 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%pow_1, 0.5), kwargs = {})
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_1 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%primals_2, %mul_3), kwargs = {})
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sum_1 : [num_users=1] = call_function[target=torch.ops.aten.sum.dim_IntList](args = (%add_1, [1]), kwargs = {})
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%mul_2, %sum_1), kwargs = {})
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_add_lift_fresh_log_mul_pow_sub_sum_1 = async_compile.triton('triton_poi_fused_add_lift_fresh_log_mul_pow_sub_sum_1', '''
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 1}, 
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': 'i64', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {'xnumel': 1}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (1, 2, 3), 'tt.equal_to': (4,)}, 'cls': 'AttrsDescriptor'})]},
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_lift_fresh_log_mul_pow_sub_sum_1', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 9, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_add_lift_fresh_log_mul_pow_sub_sum_1(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 1
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = tl.full([XBLOCK], True, tl.int1)
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = in_ptr0
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tl.load(in_ptr1 + (0))
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tl.broadcast_to(tmp7, [XBLOCK])
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tl.load(in_ptr2 + (0))
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tl.broadcast_to(tmp9, [XBLOCK])
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tl.load(in_ptr1 + (1))
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tl.broadcast_to(tmp15, [XBLOCK])
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tl.load(in_ptr2 + (1))
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tl.broadcast_to(tmp17, [XBLOCK])
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tl.load(in_ptr1 + (2))
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tl.broadcast_to(tmp23, [XBLOCK])
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = tl.load(in_ptr2 + (2))
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tl.broadcast_to(tmp25, [XBLOCK])
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = tl.load(in_ptr1 + (3))
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = tl.broadcast_to(tmp31, [XBLOCK])
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp33 = tl.load(in_ptr2 + (3))
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp34 = tl.broadcast_to(tmp33, [XBLOCK])
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tmp0.to(tl.float64)
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tl.full([1], -0.5, tl.float64)
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp2 * tmp1
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.full([1], 1.8378770664093453, tl.float64)
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp3 * tmp4
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tmp5.to(tl.float32)
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp10 * tmp10
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = 0.5
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp11 * tmp12
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tmp8 + tmp13
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tmp18 * tmp18
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp19 * tmp12
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tmp16 + tmp20
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tmp14 + tmp21
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tmp26 * tmp26
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tmp27 * tmp12
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = tmp24 + tmp28
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = tmp22 + tmp29
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp35 = tmp34 * tmp34
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp36 = tmp35 * tmp12
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp37 = tmp32 + tmp36
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp38 = tmp30 + tmp37
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp39 = tmp6 - tmp38
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp39, None)
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1, primals_2, primals_3 = args
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_1, (1, 4), (4, 1))
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_2, (1, 4), (4, 1))
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_3, (), ())
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [eps], Original ATen: [aten.randn]
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = torch.ops.aten.randn.default([1, 4], dtype=torch.float32, device=device(type='cuda', index=0), pin_memory=False)
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = buf0
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf0
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = empty_strided_cuda((1, 4), (4, 1), torch.float32)
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [exp, mul, z], Original ATen: [aten.exp, aten.mul, aten.add]
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_add_exp_mul_0.run(primals_1, primals_2, buf1, buf2, 4, grid=grid(4), stream=stream0)
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_1
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = empty_strided_cuda((1, ), (1, ), torch.float32)
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [wrapped_mul, wrapped_log, wrapped_mul_1, pow_1, mul_1, add_1, sum_1, log_p], Original ATen: [aten.lift_fresh, aten.mul, aten.log, aten.pow, aten.add, aten.sum, aten.sub]
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_add_lift_fresh_log_mul_pow_sub_sum_1.run(primals_3.item(), primals_2, buf1, buf3, 1, grid=grid(1), stream=stream0)
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_3
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf2, buf3, primals_2, buf1, )
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1 = rand_strided((1, 4), (4, 1), device='cuda:0', dtype=torch.float32)
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_2 = rand_strided((1, 4), (4, 1), device='cuda:0', dtype=torch.float32)
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_3 = rand_strided((), (), device='cpu', dtype=torch.int64)
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([primals_1, primals_2, primals_3])
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0204 14:21:09.011000 3831937 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:21:09.015000 3831937 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: /tmp/torchinductor_sahanp/7z/c7zexwkefpcgvdwzrbppsuikhwp7ea7uwgfdc7b3anlsyrcjxzpa.py
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['7_forward']
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/t7/ct77jvlu7n62uvqb5mtr35ghtc6h634klswijhn4nrgw25ybzmou.py
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [exp, mul, z], Original ATen: [aten.exp, aten.mul, aten.add]
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   exp => exp
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul => mul
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   z => add
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %exp : [num_users=1] = call_function[target=torch.ops.aten.exp.default](args = (%primals_2,), kwargs = {})
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%exp, %randn), kwargs = {})
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%primals_1, %mul), kwargs = {})
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_add_exp_mul_0 = async_compile.triton('triton_poi_fused_add_exp_mul_0', '''
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 4}, 
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_exp_mul_0', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_add_exp_mul_0(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 4
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = xindex
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x0), xmask)
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (x0), xmask)
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.load(in_ptr2 + (x0), xmask)
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tl_math.exp(tmp1)
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp2 * tmp3
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp0 + tmp4
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x0), tmp5, xmask)
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/hf/chfbx37mn3kce5aybannls6n4zq2rcmehogrz55gy3jfa7peanwx.py
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [wrapped_mul, wrapped_log, wrapped_mul_1, pow_1, mul_1, add_1, sum_1, log_p], Original ATen: [aten.lift_fresh, aten.mul, aten.log, aten.pow, aten.add, aten.sum, aten.sub]
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add_1 => add_1
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   log_p => sub
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_1 => mul_3
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pow_1 => pow_1
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sum_1 => sum_1
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   wrapped_log => full_default_1
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   wrapped_mul => full_default, mul_1
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   wrapped_mul_1 => mul_2
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %full_default : [num_users=1] = call_function[target=torch.ops.aten.full.default](args = ([], -0.5), kwargs = {dtype: torch.float64, layout: torch.strided, device: cpu, pin_memory: False})
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%full_default, %primals_3), kwargs = {})
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %full_default_1 : [num_users=1] = call_function[target=torch.ops.aten.full.default](args = ([], 1.8378770664093453), kwargs = {dtype: torch.float64, layout: torch.strided, device: cpu, pin_memory: False})
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_2 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_1, %full_default_1), kwargs = {})
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_1 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%randn, 2), kwargs = {})
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_3 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%pow_1, 0.5), kwargs = {})
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_1 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%primals_2, %mul_3), kwargs = {})
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sum_1 : [num_users=1] = call_function[target=torch.ops.aten.sum.dim_IntList](args = (%add_1, [1]), kwargs = {})
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%mul_2, %sum_1), kwargs = {})
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_add_lift_fresh_log_mul_pow_sub_sum_1 = async_compile.triton('triton_poi_fused_add_lift_fresh_log_mul_pow_sub_sum_1', '''
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 1}, 
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': 'i64', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {'xnumel': 1}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (1, 2, 3), 'tt.equal_to': (4,)}, 'cls': 'AttrsDescriptor'})]},
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_lift_fresh_log_mul_pow_sub_sum_1', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 9, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_add_lift_fresh_log_mul_pow_sub_sum_1(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 1
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = tl.full([XBLOCK], True, tl.int1)
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = in_ptr0
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tl.load(in_ptr1 + (0))
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tl.broadcast_to(tmp7, [XBLOCK])
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tl.load(in_ptr2 + (0))
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tl.broadcast_to(tmp9, [XBLOCK])
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tl.load(in_ptr1 + (1))
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tl.broadcast_to(tmp15, [XBLOCK])
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tl.load(in_ptr2 + (1))
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tl.broadcast_to(tmp17, [XBLOCK])
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tl.load(in_ptr1 + (2))
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tl.broadcast_to(tmp23, [XBLOCK])
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = tl.load(in_ptr2 + (2))
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tl.broadcast_to(tmp25, [XBLOCK])
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = tl.load(in_ptr1 + (3))
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = tl.broadcast_to(tmp31, [XBLOCK])
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp33 = tl.load(in_ptr2 + (3))
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp34 = tl.broadcast_to(tmp33, [XBLOCK])
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tmp0.to(tl.float64)
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tl.full([1], -0.5, tl.float64)
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp2 * tmp1
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.full([1], 1.8378770664093453, tl.float64)
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp3 * tmp4
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tmp5.to(tl.float32)
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp10 * tmp10
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = 0.5
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp11 * tmp12
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tmp8 + tmp13
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tmp18 * tmp18
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp19 * tmp12
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tmp16 + tmp20
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tmp14 + tmp21
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tmp26 * tmp26
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tmp27 * tmp12
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = tmp24 + tmp28
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = tmp22 + tmp29
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp35 = tmp34 * tmp34
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp36 = tmp35 * tmp12
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp37 = tmp32 + tmp36
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp38 = tmp30 + tmp37
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp39 = tmp6 - tmp38
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp39, None)
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1, primals_2, primals_3 = args
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_1, (1, 4), (4, 1))
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_2, (1, 4), (4, 1))
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_3, (), ())
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [eps], Original ATen: [aten.randn]
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = torch.ops.aten.randn.default([1, 4], dtype=torch.float32, device=device(type='cuda', index=0), pin_memory=False)
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = buf0
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf0
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = empty_strided_cuda((1, 4), (4, 1), torch.float32)
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [exp, mul, z], Original ATen: [aten.exp, aten.mul, aten.add]
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_add_exp_mul_0.run(primals_1, primals_2, buf1, buf2, 4, grid=grid(4), stream=stream0)
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_1
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = empty_strided_cuda((1, ), (1, ), torch.float32)
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [wrapped_mul, wrapped_log, wrapped_mul_1, pow_1, mul_1, add_1, sum_1, log_p], Original ATen: [aten.lift_fresh, aten.mul, aten.log, aten.pow, aten.add, aten.sum, aten.sub]
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_add_lift_fresh_log_mul_pow_sub_sum_1.run(primals_3.item(), primals_2, buf1, buf3, 1, grid=grid(1), stream=stream0)
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_3
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf2, buf3, primals_2, buf1, )
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1 = rand_strided((1, 4), (4, 1), device='cuda:0', dtype=torch.float32)
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_2 = rand_strided((1, 4), (4, 1), device='cuda:0', dtype=torch.float32)
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_3 = rand_strided((), (), device='cpu', dtype=torch.int64)
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([primals_1, primals_2, primals_3])
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0205 19:10:06.329000 1129093 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:10:06.332000 1129093 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: inductor_cache/sq/csqpbt7a4lp6k7fpvlwfe7yso5vv4j3dpyr2qjqviv32ecmzzjhn.py
