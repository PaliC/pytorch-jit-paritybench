V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['59_forward']
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/2r/c2rbkqrb4kvvv2ve5bsw2b3dlosx463pjt4eiwguv3k5xvkkpfgb.py
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [cdist], Original ATen: [aten._euclidean_dist]
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   cdist => cat
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %cat : [num_users=1] = call_function[target=torch.ops.aten.cat.default](args = ([%mul, %sum_1, %full_default], -1), kwargs = {})
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused__euclidean_dist_0 = async_compile.triton('triton_poi_fused__euclidean_dist_0', '''
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 512}, 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__euclidean_dist_0', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused__euclidean_dist_0(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 384
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 6)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = xindex // 6
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = x0
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.full([1], 0, tl.int64)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 >= tmp1
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.full([1], 4, tl.int64)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp0 < tmp3
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tl.load(in_ptr0 + (16*(x0) + 64*(x1 // 16) + ((x1 % 16))), tmp4 & xmask, eviction_policy='evict_last', other=0.0)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = -2.0
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tmp5 * tmp6
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tl.full(tmp7.shape, 0.0, tmp7.dtype)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tl.where(tmp4, tmp7, tmp8)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp0 >= tmp3
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tl.full([1], 5, tl.int64)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tmp0 < tmp11
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp10 & tmp12
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tl.load(in_ptr0 + (64*(x1 // 16) + ((x1 % 16))), tmp13 & xmask, eviction_policy='evict_last', other=0.0)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp14 * tmp14
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tl.load(in_ptr0 + (16 + 64*(x1 // 16) + ((x1 % 16))), tmp13 & xmask, eviction_policy='evict_last', other=0.0)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp16 * tmp16
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tmp15 + tmp17
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tl.load(in_ptr0 + (32 + 64*(x1 // 16) + ((x1 % 16))), tmp13 & xmask, eviction_policy='evict_last', other=0.0)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp19 * tmp19
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tmp18 + tmp20
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tl.load(in_ptr0 + (48 + 64*(x1 // 16) + ((x1 % 16))), tmp13 & xmask, eviction_policy='evict_last', other=0.0)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tmp22 * tmp22
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tmp21 + tmp23
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = tl.full(tmp24.shape, 0.0, tmp24.dtype)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tl.where(tmp13, tmp24, tmp25)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tmp0 >= tmp11
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tl.full([1], 6, tl.int64)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = tmp0 < tmp28
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = 1.0
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = tl.full(tmp30.shape, 0.0, tmp30.dtype)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = tl.where(tmp27, tmp30, tmp31)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp33 = tl.where(tmp13, tmp26, tmp32)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp34 = tl.where(tmp4, tmp9, tmp33)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x2), tmp34, xmask)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/uk/cukzm3ty466tsx6tvim2vhy5du5pvmaxdrtreh7vl3fjuaogmnfw.py
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [cdist], Original ATen: [aten._euclidean_dist]
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   cdist => cat_1
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %cat_1 : [num_users=1] = call_function[target=torch.ops.aten.cat.default](args = ([%primals_2, %full_default_1, %sum_2], -1), kwargs = {})
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused__euclidean_dist_1 = async_compile.triton('triton_poi_fused__euclidean_dist_1', '''
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 32}, 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__euclidean_dist_1', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused__euclidean_dist_1(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 24
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 6)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = xindex // 6
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = x0
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.full([1], 0, tl.int64)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 >= tmp1
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.full([1], 4, tl.int64)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp0 < tmp3
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tl.load(in_ptr0 + (4*x1 + (x0)), tmp4 & xmask, eviction_policy='evict_last', other=0.0)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tmp0 >= tmp3
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tl.full([1], 5, tl.int64)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp0 < tmp7
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp6 & tmp8
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = 1.0
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tl.full(tmp10.shape, 0.0, tmp10.dtype)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tl.where(tmp9, tmp10, tmp11)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp0 >= tmp7
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tl.full([1], 6, tl.int64)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp0 < tmp14
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tl.load(in_ptr0 + (4*x1), tmp13 & xmask, eviction_policy='evict_last', other=0.0)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp16 * tmp16
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tl.load(in_ptr0 + (1 + 4*x1), tmp13 & xmask, eviction_policy='evict_last', other=0.0)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tmp18 * tmp18
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp17 + tmp19
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tl.load(in_ptr0 + (2 + 4*x1), tmp13 & xmask, eviction_policy='evict_last', other=0.0)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tmp21 * tmp21
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tmp20 + tmp22
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tl.load(in_ptr0 + (3 + 4*x1), tmp13 & xmask, eviction_policy='evict_last', other=0.0)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = tmp24 * tmp24
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tmp23 + tmp25
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tl.full(tmp26.shape, 0.0, tmp26.dtype)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tl.where(tmp13, tmp26, tmp27)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = tl.where(tmp9, tmp12, tmp28)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = tl.where(tmp4, tmp5, tmp29)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x2), tmp30, xmask)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/g7/cg7crnlor3u23dwyualwy5tgz5jh46p5hlb7gajkoqplsxu3o2el.py
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [cdist, min_encoding_indices], Original ATen: [aten._euclidean_dist, aten.argmin]
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   cdist => clamp_min, sqrt
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   min_encoding_indices => argmin
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_min : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%mm, 0), kwargs = {})
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sqrt : [num_users=1] = call_function[target=torch.ops.aten.sqrt.default](args = (%clamp_min,), kwargs = {})
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %argmin : [num_users=2] = call_function[target=torch.ops.aten.argmin.default](args = (%sqrt, 1), kwargs = {})
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused__euclidean_dist_argmin_2 = async_compile.triton('triton_poi_fused__euclidean_dist_argmin_2', '''
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64}, 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*i64', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__euclidean_dist_argmin_2', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused__euclidean_dist_argmin_2(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 64
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = xindex
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (4*x0), xmask, eviction_policy='evict_last')
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.load(in_ptr0 + (1 + 4*x0), xmask, eviction_policy='evict_last')
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tl.load(in_ptr0 + (2 + 4*x0), xmask, eviction_policy='evict_last')
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp39 = tl.load(in_ptr0 + (3 + 4*x0), xmask, eviction_policy='evict_last')
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = 0.0
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = triton_helpers.maximum(tmp0, tmp1)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = libdevice.sqrt(tmp2)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = triton_helpers.maximum(tmp4, tmp1)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = libdevice.sqrt(tmp5)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tmp3 < tmp6
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp3 == tmp6
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp3 != tmp3
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp6 != tmp6
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp9 > tmp10
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tmp7 | tmp11
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp9 & tmp10
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tmp8 | tmp13
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tl.full([1], 0, tl.int64)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tl.full([1], 1, tl.int64)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp15 < tmp16
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tmp14 & tmp17
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tmp12 | tmp18
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tl.where(tmp19, tmp3, tmp6)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tl.where(tmp19, tmp15, tmp16)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = triton_helpers.maximum(tmp22, tmp1)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = libdevice.sqrt(tmp23)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = tmp20 < tmp24
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tmp20 == tmp24
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tmp20 != tmp20
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tmp24 != tmp24
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = tmp27 > tmp28
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = tmp25 | tmp29
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = tmp27 & tmp28
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = tmp26 | tmp31
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp33 = tl.full([1], 2, tl.int64)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp34 = tmp21 < tmp33
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp35 = tmp32 & tmp34
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp36 = tmp30 | tmp35
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp37 = tl.where(tmp36, tmp20, tmp24)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp38 = tl.where(tmp36, tmp21, tmp33)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp40 = triton_helpers.maximum(tmp39, tmp1)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp41 = libdevice.sqrt(tmp40)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp42 = tmp37 < tmp41
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp43 = tmp37 == tmp41
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp44 = tmp37 != tmp37
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp45 = tmp41 != tmp41
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp46 = tmp44 > tmp45
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp47 = tmp42 | tmp46
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp48 = tmp44 & tmp45
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp49 = tmp43 | tmp48
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp50 = tl.full([1], 3, tl.int64)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp51 = tmp38 < tmp50
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp52 = tmp49 & tmp51
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp53 = tmp47 | tmp52
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp54 = tl.where(tmp53, tmp37, tmp41)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp55 = tl.where(tmp53, tmp38, tmp50)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x0), tmp55, xmask)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/s5/cs5up6j5ahbm2jdprfcjxlwh5lrppcxtgo5ioycgxk44vzq43hte.py
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [z, sub, pow_1, mean, mul, loss, z_q_2], Original ATen: [aten.clone, aten.sub, aten.pow, aten.mean, aten.mul, aten.add]
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   loss => add
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mean => mean
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul => mul_1
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pow_1 => pow_3
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub => sub
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   z => clone
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   z_q_2 => clone_1
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clone : [num_users=3] = call_function[target=torch.ops.aten.clone.default](args = (%permute,), kwargs = {memory_format: torch.contiguous_format})
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=3] = call_function[target=torch.ops.aten.sub.Tensor](args = (%view_4, %clone), kwargs = {})
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_3 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sub, 2), kwargs = {})
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean : [num_users=2] = call_function[target=torch.ops.aten.mean.default](args = (%pow_3,), kwargs = {})
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mean, 4), kwargs = {})
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mean, %mul_1), kwargs = {})
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clone_1 : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%permute_2,), kwargs = {memory_format: torch.contiguous_format})
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused_add_clone_mean_mul_pow_sub_3 = async_compile.triton('triton_per_fused_add_clone_mean_mul_pow_sub_3', '''
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 1, 'r': 256},
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*i64', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {'xnumel': 1}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 6), 'tt.equal_to': (5,)}, 'cls': 'AttrsDescriptor'})]},
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_clone_mean_mul_pow_sub_3', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused_add_clone_mean_mul_pow_sub_3(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 1
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     XBLOCK: tl.constexpr = 1
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 256
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 256
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = tl.full([1], xoffset, tl.int32)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = tl.full([RBLOCK], True, tl.int1)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[:]
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = tl.full([RBLOCK], True, tl.int1)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r0 = (rindex % 16)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r2 = rindex // 64
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r1 = ((rindex // 16) % 4)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r3 = rindex
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r0 + 16*r2), None, eviction_policy='evict_last')
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tl.load(in_ptr2 + (r3), None)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.full([RBLOCK], 4, tl.int32)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 + tmp1
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp0 < 0
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.where(tmp3, tmp2, tmp0)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.device_assert((0 <= tmp4) & (tmp4 < 4), "index out of bounds: 0 <= tmp4 < 4")
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tl.load(in_ptr1 + (r1 + 4*tmp4), None, eviction_policy='evict_last')
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp6 - tmp7
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp8 * tmp8
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp7 + tmp8
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = 256.0
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp12 / tmp14
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = 4.0
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp15 * tmp16
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tmp15 + tmp17
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (tl.broadcast_to(r3, [RBLOCK])), tmp13, None)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (tl.full([1], 0, tl.int32)), tmp18, None)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [z, sub], Original ATen: [aten.clone, aten.sub, aten.pow, aten.mul]
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub => sub
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   z => clone
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clone : [num_users=3] = call_function[target=torch.ops.aten.clone.default](args = (%permute,), kwargs = {memory_format: torch.contiguous_format})
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=3] = call_function[target=torch.ops.aten.sub.Tensor](args = (%view_4, %clone), kwargs = {})
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_5 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sub, 1.0), kwargs = {})
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_3 : [num_users=1] = call_function[target=torch.ops.aten.mul.Scalar](args = (%pow_5, 2.0), kwargs = {})
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_clone_mul_pow_sub_4 = async_compile.triton('triton_poi_fused_clone_mul_pow_sub_4', '''
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'y': 64, 'x': 4}, tile_hint=TileHint.DEFAULT,
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*i64', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'out_ptr0': '*fp32', 'ynumel': 'i32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_mul_pow_sub_4', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_clone_mul_pow_sub_4(in_ptr0, in_ptr1, in_ptr2, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     ynumel = 64
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 4
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     yoffset = tl.program_id(1) * YBLOCK
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     ymask = yindex < ynumel
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     y3 = yindex
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     y0 = (yindex % 16)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     y1 = yindex // 16
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (y3), ymask, eviction_policy='evict_last')
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tl.load(in_ptr2 + (y0 + 16*x2 + 64*y1), xmask & ymask, eviction_policy='evict_last')
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.full([XBLOCK, YBLOCK], 4, tl.int32)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 + tmp1
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp0 < 0
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.where(tmp3, tmp2, tmp0)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.device_assert(((0 <= tmp4) & (tmp4 < 4)) | ~(ymask), "index out of bounds: 0 <= tmp4 < 4")
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tl.load(in_ptr1 + (x2 + 4*tmp4), xmask & ymask)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp6 - tmp7
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = 2.0
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp8 * tmp9
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x2 + 4*y3), tmp10, xmask & ymask)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1, primals_2 = args
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_2, (4, 4), (4, 1))
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((64, 6), (6, 1), torch.float32)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [cdist], Original ATen: [aten._euclidean_dist]
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__euclidean_dist_0.run(primals_1, buf0, 384, grid=grid(384), stream=stream0)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = empty_strided_cuda((4, 6), (6, 1), torch.float32)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [cdist], Original ATen: [aten._euclidean_dist]
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__euclidean_dist_1.run(primals_2, buf1, 24, grid=grid(24), stream=stream0)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = empty_strided_cuda((64, 4), (4, 1), torch.float32)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [cdist], Original ATen: [aten._euclidean_dist]
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         extern_kernels.mm(buf0, reinterpret_tensor(buf1, (6, 4), (1, 6), 0), out=buf2)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf0
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf1
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = empty_strided_cuda((64, ), (1, ), torch.int64)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [cdist, min_encoding_indices], Original ATen: [aten._euclidean_dist, aten.argmin]
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__euclidean_dist_argmin_2.run(buf2, buf3, 64, grid=grid(64), stream=stream0)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf4 = empty_strided_cuda((), (), torch.float32)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf5 = reinterpret_tensor(buf2, (4, 4, 4, 4), (64, 16, 4, 1), 0); del buf2  # reuse
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf7 = buf4; del buf4  # reuse
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [z, sub, pow_1, mean, mul, loss, z_q_2], Original ATen: [aten.clone, aten.sub, aten.pow, aten.mean, aten.mul, aten.add]
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused_add_clone_mean_mul_pow_sub_3.run(buf7, buf3, primals_2, primals_1, buf5, 1, 256, grid=grid(1), stream=stream0)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf6 = empty_strided_cuda((4, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [z, sub], Original ATen: [aten.clone, aten.sub, aten.pow, aten.mul]
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_clone_mul_pow_sub_4.run(buf3, primals_2, primals_1, buf6, 64, 4, grid=grid(64, 4), stream=stream0)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_1
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_2
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf5, buf7, buf3, buf3, buf6, )
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_2 = rand_strided((4, 4), (4, 1), device='cuda:0', dtype=torch.float32)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([primals_1, primals_2])
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0204 15:50:40.725000 2114025 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:50:40.734000 2114025 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: /tmp/torchinductor_sahanp/eu/ceucihff575ppms4nmrkg22zyordvk5uyduoieg4inv4atdkz3ye.py
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['59_forward']
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/2r/c2rbkqrb4kvvv2ve5bsw2b3dlosx463pjt4eiwguv3k5xvkkpfgb.py
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [cdist], Original ATen: [aten._euclidean_dist]
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   cdist => cat
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %cat : [num_users=1] = call_function[target=torch.ops.aten.cat.default](args = ([%mul, %sum_1, %full_default], -1), kwargs = {})
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused__euclidean_dist_0 = async_compile.triton('triton_poi_fused__euclidean_dist_0', '''
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 512}, 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__euclidean_dist_0', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused__euclidean_dist_0(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 384
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 6)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = xindex // 6
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = x0
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.full([1], 0, tl.int64)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 >= tmp1
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.full([1], 4, tl.int64)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp0 < tmp3
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tl.load(in_ptr0 + (16*(x0) + 64*(x1 // 16) + ((x1 % 16))), tmp4 & xmask, eviction_policy='evict_last', other=0.0)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = -2.0
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tmp5 * tmp6
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tl.full(tmp7.shape, 0.0, tmp7.dtype)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tl.where(tmp4, tmp7, tmp8)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp0 >= tmp3
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tl.full([1], 5, tl.int64)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tmp0 < tmp11
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp10 & tmp12
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tl.load(in_ptr0 + (64*(x1 // 16) + ((x1 % 16))), tmp13 & xmask, eviction_policy='evict_last', other=0.0)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp14 * tmp14
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tl.load(in_ptr0 + (16 + 64*(x1 // 16) + ((x1 % 16))), tmp13 & xmask, eviction_policy='evict_last', other=0.0)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp16 * tmp16
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tmp15 + tmp17
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tl.load(in_ptr0 + (32 + 64*(x1 // 16) + ((x1 % 16))), tmp13 & xmask, eviction_policy='evict_last', other=0.0)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp19 * tmp19
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tmp18 + tmp20
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tl.load(in_ptr0 + (48 + 64*(x1 // 16) + ((x1 % 16))), tmp13 & xmask, eviction_policy='evict_last', other=0.0)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tmp22 * tmp22
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tmp21 + tmp23
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = tl.full(tmp24.shape, 0.0, tmp24.dtype)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tl.where(tmp13, tmp24, tmp25)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tmp0 >= tmp11
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tl.full([1], 6, tl.int64)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = tmp0 < tmp28
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = 1.0
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = tl.full(tmp30.shape, 0.0, tmp30.dtype)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = tl.where(tmp27, tmp30, tmp31)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp33 = tl.where(tmp13, tmp26, tmp32)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp34 = tl.where(tmp4, tmp9, tmp33)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x2), tmp34, xmask)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/uk/cukzm3ty466tsx6tvim2vhy5du5pvmaxdrtreh7vl3fjuaogmnfw.py
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [cdist], Original ATen: [aten._euclidean_dist]
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   cdist => cat_1
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %cat_1 : [num_users=1] = call_function[target=torch.ops.aten.cat.default](args = ([%primals_2, %full_default_1, %sum_2], -1), kwargs = {})
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused__euclidean_dist_1 = async_compile.triton('triton_poi_fused__euclidean_dist_1', '''
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 32}, 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__euclidean_dist_1', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused__euclidean_dist_1(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 24
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 6)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = xindex // 6
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = x0
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.full([1], 0, tl.int64)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 >= tmp1
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.full([1], 4, tl.int64)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp0 < tmp3
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tl.load(in_ptr0 + (4*x1 + (x0)), tmp4 & xmask, eviction_policy='evict_last', other=0.0)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tmp0 >= tmp3
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tl.full([1], 5, tl.int64)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp0 < tmp7
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp6 & tmp8
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = 1.0
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tl.full(tmp10.shape, 0.0, tmp10.dtype)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tl.where(tmp9, tmp10, tmp11)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp0 >= tmp7
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tl.full([1], 6, tl.int64)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp0 < tmp14
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tl.load(in_ptr0 + (4*x1), tmp13 & xmask, eviction_policy='evict_last', other=0.0)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp16 * tmp16
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tl.load(in_ptr0 + (1 + 4*x1), tmp13 & xmask, eviction_policy='evict_last', other=0.0)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tmp18 * tmp18
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp17 + tmp19
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tl.load(in_ptr0 + (2 + 4*x1), tmp13 & xmask, eviction_policy='evict_last', other=0.0)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tmp21 * tmp21
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tmp20 + tmp22
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tl.load(in_ptr0 + (3 + 4*x1), tmp13 & xmask, eviction_policy='evict_last', other=0.0)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = tmp24 * tmp24
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tmp23 + tmp25
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tl.full(tmp26.shape, 0.0, tmp26.dtype)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tl.where(tmp13, tmp26, tmp27)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = tl.where(tmp9, tmp12, tmp28)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = tl.where(tmp4, tmp5, tmp29)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x2), tmp30, xmask)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/g7/cg7crnlor3u23dwyualwy5tgz5jh46p5hlb7gajkoqplsxu3o2el.py
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [cdist, min_encoding_indices], Original ATen: [aten._euclidean_dist, aten.argmin]
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   cdist => clamp_min, sqrt
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   min_encoding_indices => argmin
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_min : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%mm, 0), kwargs = {})
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sqrt : [num_users=1] = call_function[target=torch.ops.aten.sqrt.default](args = (%clamp_min,), kwargs = {})
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %argmin : [num_users=2] = call_function[target=torch.ops.aten.argmin.default](args = (%sqrt, 1), kwargs = {})
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused__euclidean_dist_argmin_2 = async_compile.triton('triton_poi_fused__euclidean_dist_argmin_2', '''
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64}, 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*i64', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__euclidean_dist_argmin_2', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused__euclidean_dist_argmin_2(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 64
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = xindex
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (4*x0), xmask, eviction_policy='evict_last')
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.load(in_ptr0 + (1 + 4*x0), xmask, eviction_policy='evict_last')
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tl.load(in_ptr0 + (2 + 4*x0), xmask, eviction_policy='evict_last')
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp39 = tl.load(in_ptr0 + (3 + 4*x0), xmask, eviction_policy='evict_last')
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = 0.0
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = triton_helpers.maximum(tmp0, tmp1)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = libdevice.sqrt(tmp2)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = triton_helpers.maximum(tmp4, tmp1)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = libdevice.sqrt(tmp5)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tmp3 < tmp6
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp3 == tmp6
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp3 != tmp3
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp6 != tmp6
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp9 > tmp10
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tmp7 | tmp11
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp9 & tmp10
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tmp8 | tmp13
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tl.full([1], 0, tl.int64)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tl.full([1], 1, tl.int64)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp15 < tmp16
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tmp14 & tmp17
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tmp12 | tmp18
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tl.where(tmp19, tmp3, tmp6)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tl.where(tmp19, tmp15, tmp16)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = triton_helpers.maximum(tmp22, tmp1)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = libdevice.sqrt(tmp23)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = tmp20 < tmp24
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tmp20 == tmp24
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tmp20 != tmp20
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tmp24 != tmp24
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = tmp27 > tmp28
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = tmp25 | tmp29
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = tmp27 & tmp28
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = tmp26 | tmp31
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp33 = tl.full([1], 2, tl.int64)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp34 = tmp21 < tmp33
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp35 = tmp32 & tmp34
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp36 = tmp30 | tmp35
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp37 = tl.where(tmp36, tmp20, tmp24)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp38 = tl.where(tmp36, tmp21, tmp33)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp40 = triton_helpers.maximum(tmp39, tmp1)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp41 = libdevice.sqrt(tmp40)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp42 = tmp37 < tmp41
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp43 = tmp37 == tmp41
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp44 = tmp37 != tmp37
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp45 = tmp41 != tmp41
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp46 = tmp44 > tmp45
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp47 = tmp42 | tmp46
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp48 = tmp44 & tmp45
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp49 = tmp43 | tmp48
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp50 = tl.full([1], 3, tl.int64)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp51 = tmp38 < tmp50
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp52 = tmp49 & tmp51
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp53 = tmp47 | tmp52
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp54 = tl.where(tmp53, tmp37, tmp41)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp55 = tl.where(tmp53, tmp38, tmp50)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x0), tmp55, xmask)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/s5/cs5up6j5ahbm2jdprfcjxlwh5lrppcxtgo5ioycgxk44vzq43hte.py
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [z, sub, pow_1, mean, mul, loss, z_q_2], Original ATen: [aten.clone, aten.sub, aten.pow, aten.mean, aten.mul, aten.add]
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   loss => add
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mean => mean
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul => mul_1
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pow_1 => pow_3
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub => sub
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   z => clone
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   z_q_2 => clone_1
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clone : [num_users=3] = call_function[target=torch.ops.aten.clone.default](args = (%permute,), kwargs = {memory_format: torch.contiguous_format})
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=3] = call_function[target=torch.ops.aten.sub.Tensor](args = (%view_4, %clone), kwargs = {})
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_3 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sub, 2), kwargs = {})
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean : [num_users=2] = call_function[target=torch.ops.aten.mean.default](args = (%pow_3,), kwargs = {})
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mean, 4), kwargs = {})
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mean, %mul_1), kwargs = {})
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clone_1 : [num_users=1] = call_function[target=torch.ops.aten.clone.default](args = (%permute_2,), kwargs = {memory_format: torch.contiguous_format})
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused_add_clone_mean_mul_pow_sub_3 = async_compile.triton('triton_per_fused_add_clone_mean_mul_pow_sub_3', '''
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 1, 'r': 256},
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*i64', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {'xnumel': 1}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 6), 'tt.equal_to': (5,)}, 'cls': 'AttrsDescriptor'})]},
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_clone_mean_mul_pow_sub_3', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused_add_clone_mean_mul_pow_sub_3(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 1
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     XBLOCK: tl.constexpr = 1
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 256
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 256
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = tl.full([1], xoffset, tl.int32)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = tl.full([RBLOCK], True, tl.int1)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[:]
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = tl.full([RBLOCK], True, tl.int1)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r0 = (rindex % 16)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r2 = rindex // 64
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r1 = ((rindex // 16) % 4)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r3 = rindex
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r0 + 16*r2), None, eviction_policy='evict_last')
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tl.load(in_ptr2 + (r3), None)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.full([RBLOCK], 4, tl.int32)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 + tmp1
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp0 < 0
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.where(tmp3, tmp2, tmp0)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.device_assert((0 <= tmp4) & (tmp4 < 4), "index out of bounds: 0 <= tmp4 < 4")
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tl.load(in_ptr1 + (r1 + 4*tmp4), None, eviction_policy='evict_last')
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp6 - tmp7
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp8 * tmp8
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp7 + tmp8
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = 256.0
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp12 / tmp14
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = 4.0
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp15 * tmp16
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tmp15 + tmp17
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (tl.broadcast_to(r3, [RBLOCK])), tmp13, None)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (tl.full([1], 0, tl.int32)), tmp18, None)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [z, sub], Original ATen: [aten.clone, aten.sub, aten.pow, aten.mul]
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub => sub
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   z => clone
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clone : [num_users=3] = call_function[target=torch.ops.aten.clone.default](args = (%permute,), kwargs = {memory_format: torch.contiguous_format})
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=3] = call_function[target=torch.ops.aten.sub.Tensor](args = (%view_4, %clone), kwargs = {})
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_5 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sub, 1.0), kwargs = {})
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_3 : [num_users=1] = call_function[target=torch.ops.aten.mul.Scalar](args = (%pow_5, 2.0), kwargs = {})
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_clone_mul_pow_sub_4 = async_compile.triton('triton_poi_fused_clone_mul_pow_sub_4', '''
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'y': 64, 'x': 4}, tile_hint=TileHint.DEFAULT,
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*i64', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'out_ptr0': '*fp32', 'ynumel': 'i32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_clone_mul_pow_sub_4', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_clone_mul_pow_sub_4(in_ptr0, in_ptr1, in_ptr2, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     ynumel = 64
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 4
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     yoffset = tl.program_id(1) * YBLOCK
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     ymask = yindex < ynumel
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     y3 = yindex
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     y0 = (yindex % 16)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     y1 = yindex // 16
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (y3), ymask, eviction_policy='evict_last')
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tl.load(in_ptr2 + (y0 + 16*x2 + 64*y1), xmask & ymask, eviction_policy='evict_last')
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.full([XBLOCK, YBLOCK], 4, tl.int32)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 + tmp1
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp0 < 0
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.where(tmp3, tmp2, tmp0)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.device_assert(((0 <= tmp4) & (tmp4 < 4)) | ~(ymask), "index out of bounds: 0 <= tmp4 < 4")
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tl.load(in_ptr1 + (x2 + 4*tmp4), xmask & ymask)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp6 - tmp7
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = 2.0
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp8 * tmp9
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x2 + 4*y3), tmp10, xmask & ymask)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1, primals_2 = args
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_2, (4, 4), (4, 1))
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((64, 6), (6, 1), torch.float32)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [cdist], Original ATen: [aten._euclidean_dist]
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__euclidean_dist_0.run(primals_1, buf0, 384, grid=grid(384), stream=stream0)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = empty_strided_cuda((4, 6), (6, 1), torch.float32)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [cdist], Original ATen: [aten._euclidean_dist]
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__euclidean_dist_1.run(primals_2, buf1, 24, grid=grid(24), stream=stream0)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = empty_strided_cuda((64, 4), (4, 1), torch.float32)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [cdist], Original ATen: [aten._euclidean_dist]
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         extern_kernels.mm(buf0, reinterpret_tensor(buf1, (6, 4), (1, 6), 0), out=buf2)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf0
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf1
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = empty_strided_cuda((64, ), (1, ), torch.int64)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [cdist, min_encoding_indices], Original ATen: [aten._euclidean_dist, aten.argmin]
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__euclidean_dist_argmin_2.run(buf2, buf3, 64, grid=grid(64), stream=stream0)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf4 = empty_strided_cuda((), (), torch.float32)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf5 = reinterpret_tensor(buf2, (4, 4, 4, 4), (64, 16, 4, 1), 0); del buf2  # reuse
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf7 = buf4; del buf4  # reuse
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [z, sub, pow_1, mean, mul, loss, z_q_2], Original ATen: [aten.clone, aten.sub, aten.pow, aten.mean, aten.mul, aten.add]
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused_add_clone_mean_mul_pow_sub_3.run(buf7, buf3, primals_2, primals_1, buf5, 1, 256, grid=grid(1), stream=stream0)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf6 = empty_strided_cuda((4, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [z, sub], Original ATen: [aten.clone, aten.sub, aten.pow, aten.mul]
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_clone_mul_pow_sub_4.run(buf3, primals_2, primals_1, buf6, 64, 4, grid=grid(64, 4), stream=stream0)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_1
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_2
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf5, buf7, buf3, buf3, buf6, )
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_2 = rand_strided((4, 4), (4, 1), device='cuda:0', dtype=torch.float32)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([primals_1, primals_2])
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0205 20:39:58.982000 3650527 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:39:58.990000 3650527 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: inductor_cache/ch/cchz6x7qzmd2r3ypyhyehhobe2quxdllr4u6x2x6b4s4ajaagk36.py
