V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['0_forward']
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [out, out_2, mul, out_4], Original ATen: [aten._native_batch_norm_legit_no_training, aten._native_batch_norm_legit, aten.mul, aten.add]
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul => mul_4
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   out => add_1, mul_1, mul_2, sub
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   out_2 => add_2, rsqrt, var_mean
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   out_4 => add_3
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%primals_1, %unsqueeze_1), kwargs = {})
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub, %unsqueeze_3), kwargs = {})
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_2 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_1, %unsqueeze_5), kwargs = {})
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_1 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_2, %unsqueeze_7), kwargs = {})
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %var_mean : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view, [0, 2]), kwargs = {correction: 0, keepdim: True})
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_2 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem, 1e-05), kwargs = {})
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %rsqrt : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_2,), kwargs = {})
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_4 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%primals_6, %view_1), kwargs = {})
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_3 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_4, %primals_7), kwargs = {})
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused__native_batch_norm_legit__native_batch_norm_legit_no_training_add_mul_0 = async_compile.triton('triton_per_fused__native_batch_norm_legit__native_batch_norm_legit_no_training_add_mul_0', '''
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 4, 'r': 64},
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_out_ptr1': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'in_ptr5': '*fp32', 'in_ptr6': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused__native_batch_norm_legit__native_batch_norm_legit_no_training_add_mul_0', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused__native_batch_norm_legit__native_batch_norm_legit_no_training_add_mul_0(in_out_ptr0, in_out_ptr1, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 4
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 64
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 64
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[None, :]
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r3 = rindex
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = xindex
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r2 = rindex // 16
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r3 + 64*x0), xmask, other=0.0)
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (r2), None, eviction_policy='evict_last')
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.load(in_ptr2 + (r2), None, eviction_policy='evict_last')
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tl.load(in_ptr3 + (r2), None, eviction_policy='evict_last')
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tl.load(in_ptr4 + (r2), None, eviction_policy='evict_last')
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp36 = tl.load(in_ptr5 + (0))
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp37 = tl.broadcast_to(tmp36, [XBLOCK, RBLOCK])
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp41 = tl.load(in_ptr6 + (0))
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp42 = tl.broadcast_to(tmp41, [XBLOCK, RBLOCK])
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 - tmp1
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = 1e-05
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp3 + tmp4
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = libdevice.sqrt(tmp5)
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tl.full([1, 1], 1, tl.int32)
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp7 / tmp6
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = 1.0
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp8 * tmp9
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp2 * tmp10
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp11 * tmp12
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp13 + tmp14
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tl.broadcast_to(tmp15, [XBLOCK, RBLOCK])
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tl.where(xmask, tmp16, 0)
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tl.broadcast_to(tmp16, [XBLOCK, RBLOCK])
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tl.where(xmask, tmp19, 0)
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tl.sum(tmp21, 1)[:, None]
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tl.full([XBLOCK, 1], 64, tl.int32)
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tmp23.to(tl.float32)
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = tmp22 / tmp24
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tmp16 - tmp25
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tmp26 * tmp26
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tl.broadcast_to(tmp27, [XBLOCK, RBLOCK])
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = tl.where(xmask, tmp28, 0)
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = tl.sum(tmp30, 1)[:, None]
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = 64.0
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp33 = tmp31 / tmp32
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp34 = tmp33 + tmp4
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp35 = libdevice.rsqrt(tmp34)
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp38 = tmp15 - tmp25
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp39 = tmp38 * tmp35
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp40 = tmp37 * tmp39
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp43 = tmp40 + tmp42
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x0), tmp35, xmask)
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr1 + (r3 + 64*x0), tmp43, xmask)
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x0), tmp25, xmask)
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7 = args
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_2, (4, ), (1, ))
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_3, (4, ), (1, ))
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_4, (4, ), (1, ))
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_5, (4, ), (1, ))
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_6, (1, 1, 1), (1, 1, 1))
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_7, (1, 1, 1), (1, 1, 1))
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((4, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = empty_strided_cuda((1, 4, 1), (4, 1, 1), torch.float32)
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = empty_strided_cuda((1, 4, 1), (4, 1, 4), torch.float32)
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf4 = reinterpret_tensor(buf2, (1, 4, 1), (4, 1, 1), 0); del buf2  # reuse
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf5 = reinterpret_tensor(buf0, (4, 1, 64), (64, 64, 1), 0); del buf0  # reuse
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [out, out_2, mul, out_4], Original ATen: [aten._native_batch_norm_legit_no_training, aten._native_batch_norm_legit, aten.mul, aten.add]
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused__native_batch_norm_legit__native_batch_norm_legit_no_training_add_mul_0.run(buf4, buf5, primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7, buf1, 4, 64, grid=grid(4), stream=stream0)
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_7
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (reinterpret_tensor(buf5, (4, 4, 4, 4), (64, 16, 4, 1), 0), primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, buf1, buf4, )
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_2 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_3 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_4 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_5 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_6 = rand_strided((1, 1, 1), (1, 1, 1), device='cuda:0', dtype=torch.float32)
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_7 = rand_strided((1, 1, 1), (1, 1, 1), device='cuda:0', dtype=torch.float32)
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7])
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0204 14:16:59.229000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:16:59.233000 3666363 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: /tmp/torchinductor_sahanp/5h/c5hzuxhnj5foveqxfmwxhwazxfdgjlxzwcmia7tkw76isybqmp5v.py
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['0_forward']
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/rc/crczwlgufcmqf57apiwje4worozkxodb463qvtt3c4sjbwremd5y.py
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [out, out_2, mul, out_4], Original ATen: [aten._native_batch_norm_legit_no_training, aten._native_batch_norm_legit, aten.mul, aten.add]
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul => mul_4
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   out => add_1, mul_1, mul_2, sub
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   out_2 => add_2, rsqrt, var_mean
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   out_4 => add_3
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%primals_1, %unsqueeze_1), kwargs = {})
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub, %unsqueeze_3), kwargs = {})
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_2 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_1, %unsqueeze_5), kwargs = {})
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_1 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_2, %unsqueeze_7), kwargs = {})
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %var_mean : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view, [0, 2]), kwargs = {correction: 0, keepdim: True})
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_2 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem, 1e-05), kwargs = {})
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %rsqrt : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add_2,), kwargs = {})
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_4 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%primals_6, %view_1), kwargs = {})
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_3 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_4, %primals_7), kwargs = {})
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused__native_batch_norm_legit__native_batch_norm_legit_no_training_add_mul_0 = async_compile.triton('triton_per_fused__native_batch_norm_legit__native_batch_norm_legit_no_training_add_mul_0', '''
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 4, 'r': 64},
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_out_ptr1': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'in_ptr5': '*fp32', 'in_ptr6': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused__native_batch_norm_legit__native_batch_norm_legit_no_training_add_mul_0', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 7, 'num_reduction': 4, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused__native_batch_norm_legit__native_batch_norm_legit_no_training_add_mul_0(in_out_ptr0, in_out_ptr1, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 4
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 64
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 64
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[None, :]
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r3 = rindex
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = xindex
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r2 = rindex // 16
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r3 + 64*x0), xmask, other=0.0)
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (r2), None, eviction_policy='evict_last')
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.load(in_ptr2 + (r2), None, eviction_policy='evict_last')
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tl.load(in_ptr3 + (r2), None, eviction_policy='evict_last')
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tl.load(in_ptr4 + (r2), None, eviction_policy='evict_last')
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp36 = tl.load(in_ptr5 + (0))
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp37 = tl.broadcast_to(tmp36, [XBLOCK, RBLOCK])
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp41 = tl.load(in_ptr6 + (0))
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp42 = tl.broadcast_to(tmp41, [XBLOCK, RBLOCK])
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 - tmp1
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = 1e-05
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp3 + tmp4
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = libdevice.sqrt(tmp5)
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tl.full([1, 1], 1, tl.int32)
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp7 / tmp6
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = 1.0
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp8 * tmp9
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp2 * tmp10
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp11 * tmp12
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp13 + tmp14
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tl.broadcast_to(tmp15, [XBLOCK, RBLOCK])
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tl.where(xmask, tmp16, 0)
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tl.broadcast_to(tmp16, [XBLOCK, RBLOCK])
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tl.where(xmask, tmp19, 0)
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tl.sum(tmp21, 1)[:, None]
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tl.full([XBLOCK, 1], 64, tl.int32)
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tmp23.to(tl.float32)
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = tmp22 / tmp24
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tmp16 - tmp25
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tmp26 * tmp26
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tl.broadcast_to(tmp27, [XBLOCK, RBLOCK])
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = tl.where(xmask, tmp28, 0)
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = tl.sum(tmp30, 1)[:, None]
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = 64.0
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp33 = tmp31 / tmp32
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp34 = tmp33 + tmp4
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp35 = libdevice.rsqrt(tmp34)
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp38 = tmp15 - tmp25
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp39 = tmp38 * tmp35
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp40 = tmp37 * tmp39
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp43 = tmp40 + tmp42
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x0), tmp35, xmask)
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr1 + (r3 + 64*x0), tmp43, xmask)
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x0), tmp25, xmask)
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7 = args
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_2, (4, ), (1, ))
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_3, (4, ), (1, ))
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_4, (4, ), (1, ))
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_5, (4, ), (1, ))
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_6, (1, 1, 1), (1, 1, 1))
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_7, (1, 1, 1), (1, 1, 1))
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((4, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = empty_strided_cuda((1, 4, 1), (4, 1, 1), torch.float32)
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = empty_strided_cuda((1, 4, 1), (4, 1, 4), torch.float32)
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf4 = reinterpret_tensor(buf2, (1, 4, 1), (4, 1, 1), 0); del buf2  # reuse
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf5 = reinterpret_tensor(buf0, (4, 1, 64), (64, 64, 1), 0); del buf0  # reuse
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [out, out_2, mul, out_4], Original ATen: [aten._native_batch_norm_legit_no_training, aten._native_batch_norm_legit, aten.mul, aten.add]
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused__native_batch_norm_legit__native_batch_norm_legit_no_training_add_mul_0.run(buf4, buf5, primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7, buf1, 4, 64, grid=grid(4), stream=stream0)
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_7
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (reinterpret_tensor(buf5, (4, 4, 4, 4), (64, 16, 4, 1), 0), primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, buf1, buf4, )
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_2 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_3 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_4 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_5 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_6 = rand_strided((1, 1, 1), (1, 1, 1), device='cuda:0', dtype=torch.float32)
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_7 = rand_strided((1, 1, 1), (1, 1, 1), device='cuda:0', dtype=torch.float32)
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7])
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0205 19:06:02.317000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:02.321000 1034241 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: inductor_cache/h2/ch2lniy5qiolmjlh52tqz26k72rqbx7ybwtlrlzboatpyvykqg5l.py
