V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['5_inference']
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [min_1, max_1, mask_1], Original ATen: [aten.min, aten.max, aten._to_copy]
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mask_1 => convert_element_type
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   max_1 => max_1
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   min_1 => min_1
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %min_1 : [num_users=1] = call_function[target=torch.ops.aten.min.dim](args = (%view, 1, True), kwargs = {})
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %max_1 : [num_users=1] = call_function[target=torch.ops.aten.max.dim](args = (%view, 1, True), kwargs = {})
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convert_element_type : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%view_1, torch.float32), kwargs = {})
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused__to_copy_max_min_0 = async_compile.triton('triton_per_fused__to_copy_max_min_0', '''
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64, 'r': 64},
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.DEFAULT,
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused__to_copy_max_min_0', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused__to_copy_max_min_0(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 64
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 36
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 64
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[None, :]
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = rindex < rnumel
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r2 = rindex
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 16)
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = xindex // 16
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = (-1) + (x0 // 4) + (((r2 // 3) % 3))
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.full([1, 1], 0, tl.int64)
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 >= tmp1
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.full([1, 1], 4, tl.int64)
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp0 < tmp3
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = (-1) + ((r2 % 3)) + ((x0 % 4))
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tmp5 >= tmp1
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tmp5 < tmp3
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp2 & tmp4
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp8 & tmp6
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp9 & tmp7
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tl.load(in_ptr0 + ((-5) + x0 + 4*(((r2 // 3) % 3)) + 16*(r2 // 9) + 64*x1 + ((r2 % 3))), rmask & tmp10 & xmask, other=0.0)
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tl.where(rmask & xmask, tmp12, float("inf"))
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = triton_helpers.min2(tmp14, 1)[:, None]
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tl.where(rmask & xmask, tmp12, float("-inf"))
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = triton_helpers.max2(tmp17, 1)[:, None]
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tmp18 - tmp15
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = 4.0
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tmp19 > tmp20
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tmp21.to(tl.float32)
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x3), tmp22, xmask)
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1, = args
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg0_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = empty_strided_cuda((4, 1, 16), (16, 64, 1), torch.float32)
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf4 = reinterpret_tensor(buf2, (4, 1, 4, 4), (16, 16, 4, 1), 0); del buf2  # reuse
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [min_1, max_1, mask_1], Original ATen: [aten.min, aten.max, aten._to_copy]
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused__to_copy_max_min_0.run(buf4, arg0_1, 64, 36, grid=grid(64), stream=stream0)
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg0_1
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf4, )
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([arg0_1])
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0204 12:45:21.635000 4112891 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 12:45:21.636000 4112891 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: /tmp/torchinductor_sahanp/t6/ct66tyajagsbds2dncouiuimbdezdlw426wmiyiwajzuiuds7ygq.py
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['5_inference']
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/gd/cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [min_1, max_1, mask_1], Original ATen: [aten.min, aten.max, aten._to_copy]
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mask_1 => convert_element_type
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   max_1 => max_1
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   min_1 => min_1
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %min_1 : [num_users=1] = call_function[target=torch.ops.aten.min.dim](args = (%view, 1, True), kwargs = {})
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %max_1 : [num_users=1] = call_function[target=torch.ops.aten.max.dim](args = (%view, 1, True), kwargs = {})
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convert_element_type : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%view_1, torch.float32), kwargs = {})
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused__to_copy_max_min_0 = async_compile.triton('triton_per_fused__to_copy_max_min_0', '''
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64, 'r': 64},
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.DEFAULT,
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused__to_copy_max_min_0', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused__to_copy_max_min_0(in_out_ptr0, in_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 64
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 36
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 64
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[None, :]
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = rindex < rnumel
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r2 = rindex
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 16)
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = xindex // 16
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = (-1) + (x0 // 4) + (((r2 // 3) % 3))
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.full([1, 1], 0, tl.int64)
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 >= tmp1
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.full([1, 1], 4, tl.int64)
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp0 < tmp3
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = (-1) + ((r2 % 3)) + ((x0 % 4))
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tmp5 >= tmp1
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tmp5 < tmp3
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp2 & tmp4
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp8 & tmp6
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp9 & tmp7
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tl.load(in_ptr0 + ((-5) + x0 + 4*(((r2 // 3) % 3)) + 16*(r2 // 9) + 64*x1 + ((r2 % 3))), rmask & tmp10 & xmask, other=0.0)
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tl.where(rmask & xmask, tmp12, float("inf"))
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = triton_helpers.min2(tmp14, 1)[:, None]
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tl.where(rmask & xmask, tmp12, float("-inf"))
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = triton_helpers.max2(tmp17, 1)[:, None]
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tmp18 - tmp15
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = 4.0
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tmp19 > tmp20
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tmp21.to(tl.float32)
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x3), tmp22, xmask)
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1, = args
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg0_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = empty_strided_cuda((4, 1, 16), (16, 64, 1), torch.float32)
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf4 = reinterpret_tensor(buf2, (4, 1, 4, 4), (16, 16, 4, 1), 0); del buf2  # reuse
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [min_1, max_1, mask_1], Original ATen: [aten.min, aten.max, aten._to_copy]
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused__to_copy_max_min_0.run(buf4, arg0_1, 64, 36, grid=grid(64), stream=stream0)
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg0_1
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf4, )
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([arg0_1])
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0205 17:35:32.785000 2597288 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:35:32.786000 2597288 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: inductor_cache/nc/cncix34uf64b5bk7zb3n7yk3kw3nzdhnoy6pphbcqe4zfoefppta.py
