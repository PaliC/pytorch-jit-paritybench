V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['17_inference']
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/4f/c4ftlljvkwiqrmyxjj2ykkn5y2byqqgudgebafubimfuvtjhdwsm.py
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [prob, sub_2, pos_weight, mul_2, clamp, abs_1, neg, exp, add, log, sub, clamp_1, mul, pos_log_sig, mul_3, sub_3, neg_weight, mul_4, neg_1, clamp_2, abs_2, neg_2, exp_1, add_2, log_1, sub_1, clamp_3, mul_1, neg_log_sig, mul_5, add_4, loss, mul_6, sub_4, mul_7, avg_weight, mean, loss_1, mean_1], Original ATen: [aten.sigmoid, aten.rsub, aten.pow, aten.mul, aten.clamp, aten.abs, aten.neg, aten.exp, aten.add, aten.log, aten.sub, aten.mean, aten.div]
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   abs_1 => abs_1
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   abs_2 => abs_2
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add => add
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add_2 => add_2
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add_4 => add_4
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   avg_weight => add_5
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   clamp => clamp_max
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   clamp_1 => clamp_max_1, clamp_min
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   clamp_2 => clamp_max_2
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   clamp_3 => clamp_max_3, clamp_min_1
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   exp => exp
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   exp_1 => exp_1
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   log => log
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   log_1 => log_1
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   loss => neg_3
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   loss_1 => div
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mean => mean
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mean_1 => mean_1
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul => mul
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_1 => mul_1
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_2 => mul_2
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_3 => mul_3
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_4 => mul_4
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_5 => mul_5
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_6 => mul_6
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_7 => mul_7
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   neg => neg
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   neg_1 => neg_1
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   neg_2 => neg_2
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   neg_log_sig => add_3
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   neg_weight => pow_2
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pos_log_sig => add_1
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pos_weight => pow_1
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   prob => sigmoid
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub => sub
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub_1 => sub_1
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub_2 => sub_2
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub_3 => sub_3
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub_4 => sub_4
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sigmoid : [num_users=2] = call_function[target=torch.ops.aten.sigmoid.default](args = (%arg0_1,), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_2 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (1, %sigmoid), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_1 : [num_users=2] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sub_2, 2), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_2 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%arg1_1, %pow_1), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_max : [num_users=1] = call_function[target=torch.ops.aten.clamp_max.default](args = (%arg0_1, 0), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %abs_1 : [num_users=1] = call_function[target=torch.ops.aten.abs.default](args = (%arg0_1,), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %neg : [num_users=1] = call_function[target=torch.ops.aten.neg.default](args = (%abs_1,), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %exp : [num_users=1] = call_function[target=torch.ops.aten.exp.default](args = (%neg,), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%exp, 1), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %log : [num_users=1] = call_function[target=torch.ops.aten.log.default](args = (%add,), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%clamp_max, %log), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_min : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%arg0_1, 0), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_max_1 : [num_users=1] = call_function[target=torch.ops.aten.clamp_max.default](args = (%clamp_min, 0), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%clamp_max_1, 0.5), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_1 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%sub, %mul), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_3 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_2, %add_1), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_3 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (1, %arg1_1), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_2 : [num_users=2] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sigmoid, 2), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_4 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_3, %pow_2), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %neg_1 : [num_users=1] = call_function[target=torch.ops.aten.neg.default](args = (%arg0_1,), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_max_2 : [num_users=1] = call_function[target=torch.ops.aten.clamp_max.default](args = (%neg_1, 0), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %abs_2 : [num_users=1] = call_function[target=torch.ops.aten.abs.default](args = (%arg0_1,), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %neg_2 : [num_users=1] = call_function[target=torch.ops.aten.neg.default](args = (%abs_2,), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %exp_1 : [num_users=1] = call_function[target=torch.ops.aten.exp.default](args = (%neg_2,), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_2 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%exp_1, 1), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %log_1 : [num_users=1] = call_function[target=torch.ops.aten.log.default](args = (%add_2,), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_1 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%clamp_max_2, %log_1), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_min_1 : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%arg0_1, 0), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_max_3 : [num_users=1] = call_function[target=torch.ops.aten.clamp_max.default](args = (%clamp_min_1, 0), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%clamp_max_3, 0.5), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_3 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%sub_1, %mul_1), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_5 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_4, %add_3), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_4 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_3, %mul_5), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %neg_3 : [num_users=1] = call_function[target=torch.ops.aten.neg.default](args = (%add_4,), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_6 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%arg1_1, %pow_1), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_4 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (1, %arg1_1), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_7 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_4, %pow_2), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_5 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_6, %mul_7), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean : [num_users=1] = call_function[target=torch.ops.aten.mean.default](args = (%add_5,), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %div : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%neg_3, %mean), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean_1 : [num_users=1] = call_function[target=torch.ops.aten.mean.default](args = (%div,), kwargs = {})
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused_abs_add_clamp_div_exp_log_mean_mul_neg_pow_rsub_sigmoid_sub_0 = async_compile.triton('triton_per_fused_abs_add_clamp_div_exp_log_mean_mul_neg_pow_rsub_sigmoid_sub_0', '''
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 1, 'r': 256},
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {'xnumel': 1}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 4), 'tt.equal_to': (3,)}, 'cls': 'AttrsDescriptor'})]},
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_abs_add_clamp_div_exp_log_mean_mul_neg_pow_rsub_sigmoid_sub_0', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': True, 'num_load': 2, 'num_reduction': 2, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused_abs_add_clamp_div_exp_log_mean_mul_neg_pow_rsub_sigmoid_sub_0(in_out_ptr0, in_ptr0, in_ptr1, xnumel, rnumel):
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 1
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     XBLOCK: tl.constexpr = 1
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 256
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 256
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = tl.full([1], xoffset, tl.int32)
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = tl.full([RBLOCK], True, tl.int1)
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[:]
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = tl.full([RBLOCK], True, tl.int1)
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r0 = rindex
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r0), None)
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (r0), None)
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tl.sigmoid(tmp1)
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = 1.0
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp3 - tmp2
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp4 * tmp4
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tmp0 * tmp5
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = 0.0
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = triton_helpers.minimum(tmp1, tmp7)
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tl_math.abs(tmp1)
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = -tmp9
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tl_math.exp(tmp10)
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tmp11 + tmp3
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tl_math.log(tmp12)
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tmp8 - tmp13
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = triton_helpers.maximum(tmp1, tmp7)
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = triton_helpers.minimum(tmp15, tmp7)
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = 0.5
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tmp16 * tmp17
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tmp14 + tmp18
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp6 * tmp19
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tmp3 - tmp0
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tmp2 * tmp2
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tmp21 * tmp22
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = -tmp1
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = triton_helpers.minimum(tmp24, tmp7)
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tmp25 - tmp13
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tmp26 + tmp18
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tmp23 * tmp27
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = tmp20 + tmp28
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = -tmp29
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = tmp6 + tmp23
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = tl.broadcast_to(tmp31, [RBLOCK])
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp34 = triton_helpers.promote_to_tensor(tl.sum(tmp32, 0))
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp35 = 256.0
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp36 = tmp34 / tmp35
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp37 = tmp30 / tmp36
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp38 = tl.broadcast_to(tmp37, [RBLOCK])
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp40 = triton_helpers.promote_to_tensor(tl.sum(tmp38, 0))
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp41 = tmp40 / tmp35
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (tl.full([1], 0, tl.int32)), tmp41, None)
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1, arg1_1 = args
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg0_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg1_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = empty_strided_cuda((), (), torch.float32)
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = buf1; del buf1  # reuse
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = buf2; del buf2  # reuse
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [prob, sub_2, pos_weight, mul_2, clamp, abs_1, neg, exp, add, log, sub, clamp_1, mul, pos_log_sig, mul_3, sub_3, neg_weight, mul_4, neg_1, clamp_2, abs_2, neg_2, exp_1, add_2, log_1, sub_1, clamp_3, mul_1, neg_log_sig, mul_5, add_4, loss, mul_6, sub_4, mul_7, avg_weight, mean, loss_1, mean_1], Original ATen: [aten.sigmoid, aten.rsub, aten.pow, aten.mul, aten.clamp, aten.abs, aten.neg, aten.exp, aten.add, aten.log, aten.sub, aten.mean, aten.div]
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused_abs_add_clamp_div_exp_log_mean_mul_neg_pow_rsub_sigmoid_sub_0.run(buf3, arg1_1, arg0_1, 1, 256, grid=grid(1), stream=stream0)
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg0_1
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg1_1
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf3, )
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg1_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([arg0_1, arg1_1])
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0204 13:04:58.903000 455415 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:04:58.907000 455415 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: /tmp/torchinductor_sahanp/si/csiy47mkwkad65wqkix2dz2mpmnrukfznx4unphqcqpds2h62abo.py
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['17_inference']
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/4f/c4ftlljvkwiqrmyxjj2ykkn5y2byqqgudgebafubimfuvtjhdwsm.py
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [prob, sub_2, pos_weight, mul_2, clamp, abs_1, neg, exp, add, log, sub, clamp_1, mul, pos_log_sig, mul_3, sub_3, neg_weight, mul_4, neg_1, clamp_2, abs_2, neg_2, exp_1, add_2, log_1, sub_1, clamp_3, mul_1, neg_log_sig, mul_5, add_4, loss, mul_6, sub_4, mul_7, avg_weight, mean, loss_1, mean_1], Original ATen: [aten.sigmoid, aten.rsub, aten.pow, aten.mul, aten.clamp, aten.abs, aten.neg, aten.exp, aten.add, aten.log, aten.sub, aten.mean, aten.div]
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   abs_1 => abs_1
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   abs_2 => abs_2
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add => add
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add_2 => add_2
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add_4 => add_4
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   avg_weight => add_5
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   clamp => clamp_max
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   clamp_1 => clamp_max_1, clamp_min
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   clamp_2 => clamp_max_2
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   clamp_3 => clamp_max_3, clamp_min_1
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   exp => exp
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   exp_1 => exp_1
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   log => log
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   log_1 => log_1
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   loss => neg_3
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   loss_1 => div
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mean => mean
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mean_1 => mean_1
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul => mul
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_1 => mul_1
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_2 => mul_2
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_3 => mul_3
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_4 => mul_4
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_5 => mul_5
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_6 => mul_6
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_7 => mul_7
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   neg => neg
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   neg_1 => neg_1
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   neg_2 => neg_2
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   neg_log_sig => add_3
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   neg_weight => pow_2
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pos_log_sig => add_1
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   pos_weight => pow_1
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   prob => sigmoid
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub => sub
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub_1 => sub_1
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub_2 => sub_2
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub_3 => sub_3
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub_4 => sub_4
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sigmoid : [num_users=2] = call_function[target=torch.ops.aten.sigmoid.default](args = (%arg0_1,), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_2 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (1, %sigmoid), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_1 : [num_users=2] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sub_2, 2), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_2 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%arg1_1, %pow_1), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_max : [num_users=1] = call_function[target=torch.ops.aten.clamp_max.default](args = (%arg0_1, 0), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %abs_1 : [num_users=1] = call_function[target=torch.ops.aten.abs.default](args = (%arg0_1,), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %neg : [num_users=1] = call_function[target=torch.ops.aten.neg.default](args = (%abs_1,), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %exp : [num_users=1] = call_function[target=torch.ops.aten.exp.default](args = (%neg,), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%exp, 1), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %log : [num_users=1] = call_function[target=torch.ops.aten.log.default](args = (%add,), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%clamp_max, %log), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_min : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%arg0_1, 0), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_max_1 : [num_users=1] = call_function[target=torch.ops.aten.clamp_max.default](args = (%clamp_min, 0), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%clamp_max_1, 0.5), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_1 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%sub, %mul), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_3 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_2, %add_1), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_3 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (1, %arg1_1), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_2 : [num_users=2] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sigmoid, 2), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_4 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_3, %pow_2), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %neg_1 : [num_users=1] = call_function[target=torch.ops.aten.neg.default](args = (%arg0_1,), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_max_2 : [num_users=1] = call_function[target=torch.ops.aten.clamp_max.default](args = (%neg_1, 0), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %abs_2 : [num_users=1] = call_function[target=torch.ops.aten.abs.default](args = (%arg0_1,), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %neg_2 : [num_users=1] = call_function[target=torch.ops.aten.neg.default](args = (%abs_2,), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %exp_1 : [num_users=1] = call_function[target=torch.ops.aten.exp.default](args = (%neg_2,), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_2 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%exp_1, 1), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %log_1 : [num_users=1] = call_function[target=torch.ops.aten.log.default](args = (%add_2,), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_1 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%clamp_max_2, %log_1), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_min_1 : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%arg0_1, 0), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_max_3 : [num_users=1] = call_function[target=torch.ops.aten.clamp_max.default](args = (%clamp_min_1, 0), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%clamp_max_3, 0.5), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_3 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%sub_1, %mul_1), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_5 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%mul_4, %add_3), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_4 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_3, %mul_5), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %neg_3 : [num_users=1] = call_function[target=torch.ops.aten.neg.default](args = (%add_4,), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_6 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%arg1_1, %pow_1), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_4 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (1, %arg1_1), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_7 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_4, %pow_2), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_5 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_6, %mul_7), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean : [num_users=1] = call_function[target=torch.ops.aten.mean.default](args = (%add_5,), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %div : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%neg_3, %mean), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean_1 : [num_users=1] = call_function[target=torch.ops.aten.mean.default](args = (%div,), kwargs = {})
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused_abs_add_clamp_div_exp_log_mean_mul_neg_pow_rsub_sigmoid_sub_0 = async_compile.triton('triton_per_fused_abs_add_clamp_div_exp_log_mean_mul_neg_pow_rsub_sigmoid_sub_0', '''
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 1, 'r': 256},
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {'xnumel': 1}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 4), 'tt.equal_to': (3,)}, 'cls': 'AttrsDescriptor'})]},
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_abs_add_clamp_div_exp_log_mean_mul_neg_pow_rsub_sigmoid_sub_0', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': True, 'num_load': 2, 'num_reduction': 2, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused_abs_add_clamp_div_exp_log_mean_mul_neg_pow_rsub_sigmoid_sub_0(in_out_ptr0, in_ptr0, in_ptr1, xnumel, rnumel):
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 1
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     XBLOCK: tl.constexpr = 1
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 256
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 256
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = tl.full([1], xoffset, tl.int32)
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = tl.full([RBLOCK], True, tl.int1)
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[:]
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = tl.full([RBLOCK], True, tl.int1)
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r0 = rindex
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r0), None)
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (r0), None)
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tl.sigmoid(tmp1)
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = 1.0
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp3 - tmp2
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp4 * tmp4
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tmp0 * tmp5
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = 0.0
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = triton_helpers.minimum(tmp1, tmp7)
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tl_math.abs(tmp1)
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = -tmp9
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tl_math.exp(tmp10)
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tmp11 + tmp3
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tl_math.log(tmp12)
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tmp8 - tmp13
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = triton_helpers.maximum(tmp1, tmp7)
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = triton_helpers.minimum(tmp15, tmp7)
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = 0.5
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tmp16 * tmp17
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tmp14 + tmp18
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp6 * tmp19
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tmp3 - tmp0
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tmp2 * tmp2
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tmp21 * tmp22
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = -tmp1
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = triton_helpers.minimum(tmp24, tmp7)
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tmp25 - tmp13
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tmp26 + tmp18
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tmp23 * tmp27
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = tmp20 + tmp28
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = -tmp29
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = tmp6 + tmp23
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = tl.broadcast_to(tmp31, [RBLOCK])
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp34 = triton_helpers.promote_to_tensor(tl.sum(tmp32, 0))
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp35 = 256.0
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp36 = tmp34 / tmp35
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp37 = tmp30 / tmp36
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp38 = tl.broadcast_to(tmp37, [RBLOCK])
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp40 = triton_helpers.promote_to_tensor(tl.sum(tmp38, 0))
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp41 = tmp40 / tmp35
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (tl.full([1], 0, tl.int32)), tmp41, None)
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1, arg1_1 = args
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg0_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg1_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = empty_strided_cuda((), (), torch.float32)
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = buf1; del buf1  # reuse
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = buf2; del buf2  # reuse
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [prob, sub_2, pos_weight, mul_2, clamp, abs_1, neg, exp, add, log, sub, clamp_1, mul, pos_log_sig, mul_3, sub_3, neg_weight, mul_4, neg_1, clamp_2, abs_2, neg_2, exp_1, add_2, log_1, sub_1, clamp_3, mul_1, neg_log_sig, mul_5, add_4, loss, mul_6, sub_4, mul_7, avg_weight, mean, loss_1, mean_1], Original ATen: [aten.sigmoid, aten.rsub, aten.pow, aten.mul, aten.clamp, aten.abs, aten.neg, aten.exp, aten.add, aten.log, aten.sub, aten.mean, aten.div]
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused_abs_add_clamp_div_exp_log_mean_mul_neg_pow_rsub_sigmoid_sub_0.run(buf3, arg1_1, arg0_1, 1, 256, grid=grid(1), stream=stream0)
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg0_1
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg1_1
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf3, )
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg1_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([arg0_1, arg1_1])
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0205 17:55:17.136000 3157503 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 17:55:17.140000 3157503 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: inductor_cache/r4/cr4fdotgbyb2ugxban547hstlzqtjwmptnb5zjqhfeudptaicebx.py
