V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['32_forward']
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [input_2, sigmoid, input_3, weight, mul_1], Original ATen: [aten.repeat, aten._native_batch_norm_legit, aten.sigmoid, aten.mul, aten.exp]
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   input_2 => add, repeat, repeat_1, rsqrt, var_mean
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   input_3 => mul_2
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_1 => mul_3
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sigmoid => sigmoid
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   weight => exp
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %repeat : [num_users=2] = call_function[target=torch.ops.aten.repeat.default](args = (%primals_3, [4]), kwargs = {})
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %repeat_1 : [num_users=2] = call_function[target=torch.ops.aten.repeat.default](args = (%primals_4, [4]), kwargs = {})
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %var_mean : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view, [0, 2, 3]), kwargs = {correction: 0, keepdim: True})
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem, 1e-05), kwargs = {})
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %rsqrt : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add,), kwargs = {})
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sigmoid : [num_users=1] = call_function[target=torch.ops.aten.sigmoid.default](args = (%view_1,), kwargs = {})
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_2 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sigmoid, 12.0), kwargs = {})
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %exp : [num_users=3] = call_function[target=torch.ops.aten.exp.default](args = (%mul_2,), kwargs = {})
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_3 : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%primals_2, %exp), kwargs = {})
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused__native_batch_norm_legit_exp_mul_repeat_sigmoid_0 = async_compile.triton('triton_per_fused__native_batch_norm_legit_exp_mul_repeat_sigmoid_0', '''
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 16, 'r': 16},
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'out_ptr2': '*fp32', 'out_ptr3': '*fp32', 'out_ptr4': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused__native_batch_norm_legit_exp_mul_repeat_sigmoid_0', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 4, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused__native_batch_norm_legit_exp_mul_repeat_sigmoid_0(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, xnumel, rnumel, XBLOCK : tl.constexpr):
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 16
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 16
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 16
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[None, :]
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = xindex
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r1 = rindex
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + ((x0 % 4)), xmask, eviction_policy='evict_last')
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + ((x0 % 4)), xmask, eviction_policy='evict_last')
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tl.load(in_ptr2 + (r1 + 16*x0), xmask, other=0.0)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = tl.load(in_ptr3 + (r1 + 16*x0), xmask, other=0.0)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tl.where(xmask, tmp3, 0)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tl.where(xmask, tmp6, 0)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tl.sum(tmp8, 1)[:, None]
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tl.full([XBLOCK, 1], 16, tl.int32)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp10.to(tl.float32)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tmp9 / tmp11
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp3 - tmp12
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tmp13 * tmp13
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tl.broadcast_to(tmp14, [XBLOCK, RBLOCK])
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tl.where(xmask, tmp15, 0)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tl.sum(tmp17, 1)[:, None]
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = 16.0
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp18 / tmp19
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = 1e-05
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tmp20 + tmp21
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = libdevice.rsqrt(tmp22)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tmp2 - tmp12
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = tmp24 * tmp23
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tmp25 * tmp0
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tmp26 + tmp1
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tl.sigmoid(tmp27)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = 12.0
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = tmp28 * tmp29
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = tl_math.exp(tmp30)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp33 = tmp32 * tmp31
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x0), tmp0, xmask)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr1 + (x0), tmp1, xmask)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x0), tmp23, xmask)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr3 + (r1 + 16*x0), tmp31, xmask)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr4 + (r1 + 16*x0), tmp33, xmask)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr2 + (x0), tmp12, xmask)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/hu/chuqta4pwag2sed3mevuh7cp562a3myjskaclwmmtmn4ighmgjye.py
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [avg_pool2d, avg_pool2d_1, frac], Original ATen: [aten.avg_pool2d, aten.div]
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   avg_pool2d => avg_pool2d
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   avg_pool2d_1 => avg_pool2d_1
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   frac => div
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %avg_pool2d : [num_users=2] = call_function[target=torch.ops.aten.avg_pool2d.default](args = (%mul_3, [3, 3], [2, 2], [1, 1]), kwargs = {})
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %avg_pool2d_1 : [num_users=2] = call_function[target=torch.ops.aten.avg_pool2d.default](args = (%exp, [3, 3], [2, 2], [1, 1]), kwargs = {})
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %div : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%avg_pool2d, %avg_pool2d_1), kwargs = {})
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_avg_pool2d_div_1 = async_compile.triton('triton_poi_fused_avg_pool2d_div_1', '''
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64}, 
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'out_ptr2': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_avg_pool2d_div_1', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 18, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_avg_pool2d_div_1(in_ptr0, in_ptr1, out_ptr0, out_ptr1, out_ptr2, xnumel, XBLOCK : tl.constexpr):
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 64
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 2) % 2)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 2)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x4 = xindex // 2
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = (-1) + 2*x1
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.full([1], 0, tl.int64)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 >= tmp1
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.full([1], 4, tl.int64)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp0 < tmp3
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp2 & tmp4
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = (-1) + 2*x0
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tmp6 >= tmp1
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp6 < tmp3
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp7 & tmp8
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp5 & tmp9
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tl.load(in_ptr0 + ((-5) + 2*x0 + 8*x4), tmp10 & xmask, eviction_policy='evict_last', other=0.0)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = 2*x0
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp12 >= tmp1
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tmp12 < tmp3
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp13 & tmp14
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tmp5 & tmp15
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tl.load(in_ptr0 + ((-4) + 2*x0 + 8*x4), tmp16 & xmask, eviction_policy='evict_last', other=0.0)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tmp17 + tmp11
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = 1 + 2*x0
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp19 >= tmp1
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tmp19 < tmp3
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tmp20 & tmp21
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tmp5 & tmp22
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tl.load(in_ptr0 + ((-3) + 2*x0 + 8*x4), tmp23 & xmask, eviction_policy='evict_last', other=0.0)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = tmp24 + tmp18
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = 2*x1
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tmp26 >= tmp1
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tmp26 < tmp3
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = tmp27 & tmp28
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = tmp29 & tmp9
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = tl.load(in_ptr0 + ((-1) + 2*x0 + 8*x4), tmp30 & xmask, eviction_policy='evict_last', other=0.0)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = tmp31 + tmp25
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp33 = tmp29 & tmp15
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp34 = tl.load(in_ptr0 + (2*x0 + 8*x4), tmp33 & xmask, eviction_policy='evict_last', other=0.0)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp35 = tmp34 + tmp32
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp36 = tmp29 & tmp22
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp37 = tl.load(in_ptr0 + (1 + 2*x0 + 8*x4), tmp36 & xmask, eviction_policy='evict_last', other=0.0)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp38 = tmp37 + tmp35
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp39 = 1 + 2*x1
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp40 = tmp39 >= tmp1
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp41 = tmp39 < tmp3
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp42 = tmp40 & tmp41
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp43 = tmp42 & tmp9
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp44 = tl.load(in_ptr0 + (3 + 2*x0 + 8*x4), tmp43 & xmask, eviction_policy='evict_last', other=0.0)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp45 = tmp44 + tmp38
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp46 = tmp42 & tmp15
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp47 = tl.load(in_ptr0 + (4 + 2*x0 + 8*x4), tmp46 & xmask, eviction_policy='evict_last', other=0.0)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp48 = tmp47 + tmp45
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp49 = tmp42 & tmp22
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp50 = tl.load(in_ptr0 + (5 + 2*x0 + 8*x4), tmp49 & xmask, eviction_policy='evict_last', other=0.0)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp51 = tmp50 + tmp48
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp52 = 1 + ((-2)*x0) + ((-2)*x1) + ((5) * ((5) <= (2 + 2*x0)) + (2 + 2*x0) * ((2 + 2*x0) < (5)))*((5) * ((5) <= (2 + 2*x1)) + (2 + 2*x1) * ((2 + 2*x1) < (5))) + ((-2)*x0*((5) * ((5) <= (2 + 2*x1)) + (2 + 2*x1) * ((2 + 2*x1) < (5)))) + ((-2)*x1*((5) * ((5) <= (2 + 2*x0)) + (2 + 2*x0) * ((2 + 2*x0) < (5)))) + 4*x0*x1 + ((5) * ((5) <= (2 + 2*x0)) + (2 + 2*x0) * ((2 + 2*x0) < (5))) + ((5) * ((5) <= (2 + 2*x1)) + (2 + 2*x1) * ((2 + 2*x1) < (5)))
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp53 = tmp51 / tmp52
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp54 = tl.load(in_ptr1 + ((-5) + 2*x0 + 8*x4), tmp10 & xmask, eviction_policy='evict_last', other=0.0)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp55 = tl.load(in_ptr1 + ((-4) + 2*x0 + 8*x4), tmp16 & xmask, eviction_policy='evict_last', other=0.0)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp56 = tmp55 + tmp54
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp57 = tl.load(in_ptr1 + ((-3) + 2*x0 + 8*x4), tmp23 & xmask, eviction_policy='evict_last', other=0.0)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp58 = tmp57 + tmp56
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp59 = tl.load(in_ptr1 + ((-1) + 2*x0 + 8*x4), tmp30 & xmask, eviction_policy='evict_last', other=0.0)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp60 = tmp59 + tmp58
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp61 = tl.load(in_ptr1 + (2*x0 + 8*x4), tmp33 & xmask, eviction_policy='evict_last', other=0.0)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp62 = tmp61 + tmp60
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp63 = tl.load(in_ptr1 + (1 + 2*x0 + 8*x4), tmp36 & xmask, eviction_policy='evict_last', other=0.0)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp64 = tmp63 + tmp62
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp65 = tl.load(in_ptr1 + (3 + 2*x0 + 8*x4), tmp43 & xmask, eviction_policy='evict_last', other=0.0)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp66 = tmp65 + tmp64
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp67 = tl.load(in_ptr1 + (4 + 2*x0 + 8*x4), tmp46 & xmask, eviction_policy='evict_last', other=0.0)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp68 = tmp67 + tmp66
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp69 = tl.load(in_ptr1 + (5 + 2*x0 + 8*x4), tmp49 & xmask, eviction_policy='evict_last', other=0.0)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp70 = tmp69 + tmp68
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp71 = tmp70 / tmp52
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp72 = tmp53 / tmp71
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x3), tmp53, xmask)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr1 + (x3), tmp71, xmask)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr2 + (x3), tmp72, xmask)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1, primals_2, primals_3, primals_4 = args
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_1, (4, 4, 3, 3), (36, 9, 3, 1))
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_2, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_3, (4, ), (1, ))
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_4, (4, ), (1, ))
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [input_1], Original ATen: [aten.convolution]
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = extern_kernels.convolution(primals_2, primals_1, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf0, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = empty_strided_cuda((16, ), (1, ), torch.float32)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = empty_strided_cuda((16, ), (1, ), torch.float32)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = empty_strided_cuda((1, 16, 1, 1), (16, 1, 1, 1), torch.float32)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf4 = empty_strided_cuda((1, 16, 1, 1), (16, 1, 16, 16), torch.float32)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf6 = reinterpret_tensor(buf4, (1, 16, 1, 1), (16, 1, 1, 1), 0); del buf4  # reuse
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf7 = empty_strided_cuda((4, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf8 = empty_strided_cuda((4, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [input_2, sigmoid, input_3, weight, mul_1], Original ATen: [aten.repeat, aten._native_batch_norm_legit, aten.sigmoid, aten.mul, aten.exp]
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused__native_batch_norm_legit_exp_mul_repeat_sigmoid_0.run(buf6, primals_3, primals_4, buf0, primals_2, buf1, buf2, buf3, buf7, buf8, 16, 16, grid=grid(16), stream=stream0)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_3
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_4
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf9 = empty_strided_cuda((4, 4, 2, 2), (16, 4, 2, 1), torch.float32)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf10 = empty_strided_cuda((4, 4, 2, 2), (16, 4, 2, 1), torch.float32)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf11 = empty_strided_cuda((4, 4, 2, 2), (16, 4, 2, 1), torch.float32)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [avg_pool2d, avg_pool2d_1, frac], Original ATen: [aten.avg_pool2d, aten.div]
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_avg_pool2d_div_1.run(buf8, buf7, buf9, buf10, buf11, 64, grid=grid(64), stream=stream0)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf11, primals_1, primals_2, buf0, buf1, buf2, buf3, buf6, buf7, buf8, buf9, buf10, )
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1 = rand_strided((4, 4, 3, 3), (36, 9, 3, 1), device='cuda:0', dtype=torch.float32)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_2 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_3 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_4 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([primals_1, primals_2, primals_3, primals_4])
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0204 14:33:13.035000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:33:13.041000 18345 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: /tmp/torchinductor_sahanp/sx/csxcjvtb7dae2yr4othjol5fcqlpxuhw6i5vjumjpjkchioyuxvx.py
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['32_forward']
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/og/cogyqond72szqf7zl47o6x3kiufx4kqx3pjgbadtmqp6qe46mwoa.py
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [input_2, sigmoid, input_3, weight, mul_1], Original ATen: [aten.repeat, aten._native_batch_norm_legit, aten.sigmoid, aten.mul, aten.exp]
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   input_2 => add, repeat, repeat_1, rsqrt, var_mean
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   input_3 => mul_2
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_1 => mul_3
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sigmoid => sigmoid
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   weight => exp
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %repeat : [num_users=2] = call_function[target=torch.ops.aten.repeat.default](args = (%primals_3, [4]), kwargs = {})
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %repeat_1 : [num_users=2] = call_function[target=torch.ops.aten.repeat.default](args = (%primals_4, [4]), kwargs = {})
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %var_mean : [num_users=2] = call_function[target=torch.ops.aten.var_mean.correction](args = (%view, [0, 2, 3]), kwargs = {correction: 0, keepdim: True})
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%getitem, 1e-05), kwargs = {})
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %rsqrt : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add,), kwargs = {})
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sigmoid : [num_users=1] = call_function[target=torch.ops.aten.sigmoid.default](args = (%view_1,), kwargs = {})
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_2 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sigmoid, 12.0), kwargs = {})
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %exp : [num_users=3] = call_function[target=torch.ops.aten.exp.default](args = (%mul_2,), kwargs = {})
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_3 : [num_users=2] = call_function[target=torch.ops.aten.mul.Tensor](args = (%primals_2, %exp), kwargs = {})
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused__native_batch_norm_legit_exp_mul_repeat_sigmoid_0 = async_compile.triton('triton_per_fused__native_batch_norm_legit_exp_mul_repeat_sigmoid_0', '''
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 16, 'r': 16},
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'out_ptr2': '*fp32', 'out_ptr3': '*fp32', 'out_ptr4': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused__native_batch_norm_legit_exp_mul_repeat_sigmoid_0', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 4, 'num_reduction': 4, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused__native_batch_norm_legit_exp_mul_repeat_sigmoid_0(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, out_ptr1, out_ptr2, out_ptr3, out_ptr4, xnumel, rnumel, XBLOCK : tl.constexpr):
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 16
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 16
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 16
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[None, :]
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = xindex
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r1 = rindex
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + ((x0 % 4)), xmask, eviction_policy='evict_last')
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + ((x0 % 4)), xmask, eviction_policy='evict_last')
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tl.load(in_ptr2 + (r1 + 16*x0), xmask, other=0.0)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = tl.load(in_ptr3 + (r1 + 16*x0), xmask, other=0.0)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tl.where(xmask, tmp3, 0)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tl.where(xmask, tmp6, 0)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tl.sum(tmp8, 1)[:, None]
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tl.full([XBLOCK, 1], 16, tl.int32)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp10.to(tl.float32)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tmp9 / tmp11
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp3 - tmp12
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tmp13 * tmp13
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tl.broadcast_to(tmp14, [XBLOCK, RBLOCK])
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tl.where(xmask, tmp15, 0)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tl.sum(tmp17, 1)[:, None]
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = 16.0
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp18 / tmp19
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = 1e-05
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tmp20 + tmp21
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = libdevice.rsqrt(tmp22)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tmp2 - tmp12
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = tmp24 * tmp23
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tmp25 * tmp0
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tmp26 + tmp1
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tl.sigmoid(tmp27)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = 12.0
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = tmp28 * tmp29
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = tl_math.exp(tmp30)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp33 = tmp32 * tmp31
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x0), tmp0, xmask)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr1 + (x0), tmp1, xmask)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x0), tmp23, xmask)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr3 + (r1 + 16*x0), tmp31, xmask)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr4 + (r1 + 16*x0), tmp33, xmask)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr2 + (x0), tmp12, xmask)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/hu/chuqta4pwag2sed3mevuh7cp562a3myjskaclwmmtmn4ighmgjye.py
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [avg_pool2d, avg_pool2d_1, frac], Original ATen: [aten.avg_pool2d, aten.div]
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   avg_pool2d => avg_pool2d
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   avg_pool2d_1 => avg_pool2d_1
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   frac => div
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %avg_pool2d : [num_users=2] = call_function[target=torch.ops.aten.avg_pool2d.default](args = (%mul_3, [3, 3], [2, 2], [1, 1]), kwargs = {})
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %avg_pool2d_1 : [num_users=2] = call_function[target=torch.ops.aten.avg_pool2d.default](args = (%exp, [3, 3], [2, 2], [1, 1]), kwargs = {})
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %div : [num_users=1] = call_function[target=torch.ops.aten.div.Tensor](args = (%avg_pool2d, %avg_pool2d_1), kwargs = {})
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_avg_pool2d_div_1 = async_compile.triton('triton_poi_fused_avg_pool2d_div_1', '''
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64}, 
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'out_ptr2': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_avg_pool2d_div_1', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 18, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_avg_pool2d_div_1(in_ptr0, in_ptr1, out_ptr0, out_ptr1, out_ptr2, xnumel, XBLOCK : tl.constexpr):
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 64
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 2) % 2)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 2)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x4 = xindex // 2
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = (-1) + 2*x1
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.full([1], 0, tl.int64)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 >= tmp1
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.full([1], 4, tl.int64)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp0 < tmp3
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp2 & tmp4
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = (-1) + 2*x0
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tmp6 >= tmp1
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp6 < tmp3
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp7 & tmp8
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp5 & tmp9
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tl.load(in_ptr0 + ((-5) + 2*x0 + 8*x4), tmp10 & xmask, eviction_policy='evict_last', other=0.0)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = 2*x0
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp12 >= tmp1
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tmp12 < tmp3
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp13 & tmp14
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tmp5 & tmp15
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tl.load(in_ptr0 + ((-4) + 2*x0 + 8*x4), tmp16 & xmask, eviction_policy='evict_last', other=0.0)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tmp17 + tmp11
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = 1 + 2*x0
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp19 >= tmp1
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tmp19 < tmp3
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tmp20 & tmp21
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tmp5 & tmp22
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tl.load(in_ptr0 + ((-3) + 2*x0 + 8*x4), tmp23 & xmask, eviction_policy='evict_last', other=0.0)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = tmp24 + tmp18
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = 2*x1
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tmp26 >= tmp1
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tmp26 < tmp3
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = tmp27 & tmp28
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = tmp29 & tmp9
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = tl.load(in_ptr0 + ((-1) + 2*x0 + 8*x4), tmp30 & xmask, eviction_policy='evict_last', other=0.0)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = tmp31 + tmp25
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp33 = tmp29 & tmp15
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp34 = tl.load(in_ptr0 + (2*x0 + 8*x4), tmp33 & xmask, eviction_policy='evict_last', other=0.0)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp35 = tmp34 + tmp32
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp36 = tmp29 & tmp22
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp37 = tl.load(in_ptr0 + (1 + 2*x0 + 8*x4), tmp36 & xmask, eviction_policy='evict_last', other=0.0)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp38 = tmp37 + tmp35
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp39 = 1 + 2*x1
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp40 = tmp39 >= tmp1
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp41 = tmp39 < tmp3
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp42 = tmp40 & tmp41
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp43 = tmp42 & tmp9
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp44 = tl.load(in_ptr0 + (3 + 2*x0 + 8*x4), tmp43 & xmask, eviction_policy='evict_last', other=0.0)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp45 = tmp44 + tmp38
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp46 = tmp42 & tmp15
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp47 = tl.load(in_ptr0 + (4 + 2*x0 + 8*x4), tmp46 & xmask, eviction_policy='evict_last', other=0.0)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp48 = tmp47 + tmp45
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp49 = tmp42 & tmp22
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp50 = tl.load(in_ptr0 + (5 + 2*x0 + 8*x4), tmp49 & xmask, eviction_policy='evict_last', other=0.0)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp51 = tmp50 + tmp48
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp52 = 1 + ((-2)*x0) + ((-2)*x1) + ((5) * ((5) <= (2 + 2*x0)) + (2 + 2*x0) * ((2 + 2*x0) < (5)))*((5) * ((5) <= (2 + 2*x1)) + (2 + 2*x1) * ((2 + 2*x1) < (5))) + ((-2)*x0*((5) * ((5) <= (2 + 2*x1)) + (2 + 2*x1) * ((2 + 2*x1) < (5)))) + ((-2)*x1*((5) * ((5) <= (2 + 2*x0)) + (2 + 2*x0) * ((2 + 2*x0) < (5)))) + 4*x0*x1 + ((5) * ((5) <= (2 + 2*x0)) + (2 + 2*x0) * ((2 + 2*x0) < (5))) + ((5) * ((5) <= (2 + 2*x1)) + (2 + 2*x1) * ((2 + 2*x1) < (5)))
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp53 = tmp51 / tmp52
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp54 = tl.load(in_ptr1 + ((-5) + 2*x0 + 8*x4), tmp10 & xmask, eviction_policy='evict_last', other=0.0)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp55 = tl.load(in_ptr1 + ((-4) + 2*x0 + 8*x4), tmp16 & xmask, eviction_policy='evict_last', other=0.0)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp56 = tmp55 + tmp54
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp57 = tl.load(in_ptr1 + ((-3) + 2*x0 + 8*x4), tmp23 & xmask, eviction_policy='evict_last', other=0.0)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp58 = tmp57 + tmp56
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp59 = tl.load(in_ptr1 + ((-1) + 2*x0 + 8*x4), tmp30 & xmask, eviction_policy='evict_last', other=0.0)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp60 = tmp59 + tmp58
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp61 = tl.load(in_ptr1 + (2*x0 + 8*x4), tmp33 & xmask, eviction_policy='evict_last', other=0.0)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp62 = tmp61 + tmp60
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp63 = tl.load(in_ptr1 + (1 + 2*x0 + 8*x4), tmp36 & xmask, eviction_policy='evict_last', other=0.0)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp64 = tmp63 + tmp62
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp65 = tl.load(in_ptr1 + (3 + 2*x0 + 8*x4), tmp43 & xmask, eviction_policy='evict_last', other=0.0)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp66 = tmp65 + tmp64
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp67 = tl.load(in_ptr1 + (4 + 2*x0 + 8*x4), tmp46 & xmask, eviction_policy='evict_last', other=0.0)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp68 = tmp67 + tmp66
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp69 = tl.load(in_ptr1 + (5 + 2*x0 + 8*x4), tmp49 & xmask, eviction_policy='evict_last', other=0.0)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp70 = tmp69 + tmp68
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp71 = tmp70 / tmp52
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp72 = tmp53 / tmp71
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x3), tmp53, xmask)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr1 + (x3), tmp71, xmask)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr2 + (x3), tmp72, xmask)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1, primals_2, primals_3, primals_4 = args
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_1, (4, 4, 3, 3), (36, 9, 3, 1))
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_2, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_3, (4, ), (1, ))
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_4, (4, ), (1, ))
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [input_1], Original ATen: [aten.convolution]
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = extern_kernels.convolution(primals_2, primals_1, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf0, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = empty_strided_cuda((16, ), (1, ), torch.float32)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = empty_strided_cuda((16, ), (1, ), torch.float32)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = empty_strided_cuda((1, 16, 1, 1), (16, 1, 1, 1), torch.float32)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf4 = empty_strided_cuda((1, 16, 1, 1), (16, 1, 16, 16), torch.float32)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf6 = reinterpret_tensor(buf4, (1, 16, 1, 1), (16, 1, 1, 1), 0); del buf4  # reuse
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf7 = empty_strided_cuda((4, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf8 = empty_strided_cuda((4, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [input_2, sigmoid, input_3, weight, mul_1], Original ATen: [aten.repeat, aten._native_batch_norm_legit, aten.sigmoid, aten.mul, aten.exp]
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused__native_batch_norm_legit_exp_mul_repeat_sigmoid_0.run(buf6, primals_3, primals_4, buf0, primals_2, buf1, buf2, buf3, buf7, buf8, 16, 16, grid=grid(16), stream=stream0)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_3
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_4
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf9 = empty_strided_cuda((4, 4, 2, 2), (16, 4, 2, 1), torch.float32)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf10 = empty_strided_cuda((4, 4, 2, 2), (16, 4, 2, 1), torch.float32)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf11 = empty_strided_cuda((4, 4, 2, 2), (16, 4, 2, 1), torch.float32)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [avg_pool2d, avg_pool2d_1, frac], Original ATen: [aten.avg_pool2d, aten.div]
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_avg_pool2d_div_1.run(buf8, buf7, buf9, buf10, buf11, 64, grid=grid(64), stream=stream0)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf11, primals_1, primals_2, buf0, buf1, buf2, buf3, buf6, buf7, buf8, buf9, buf10, )
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1 = rand_strided((4, 4, 3, 3), (36, 9, 3, 1), device='cuda:0', dtype=torch.float32)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_2 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_3 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_4 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([primals_1, primals_2, primals_3, primals_4])
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0205 19:22:01.203000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:22:01.208000 1409051 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: inductor_cache/4m/c4mnawmu5xiqjizdsnyqkiudfoiqfq6kjol3fjujgr2w5dzcms6p.py
