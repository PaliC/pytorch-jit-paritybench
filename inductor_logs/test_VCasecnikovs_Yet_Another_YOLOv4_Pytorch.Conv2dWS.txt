V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['2_forward']
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/7w/c7wuu3d3kjqk64tws3x733uwxvnugojehqcgcptkhry6adkbx6n5.py
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [mean, mean_1], Original ATen: [aten.mean]
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mean => mean
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mean_1 => mean_1
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean : [num_users=1] = call_function[target=torch.ops.aten.mean.dim](args = (%primals_1, [1], True), kwargs = {})
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean_1 : [num_users=1] = call_function[target=torch.ops.aten.mean.dim](args = (%mean, [2], True), kwargs = {})
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_mean_0 = async_compile.triton('triton_poi_fused_mean_0', '''
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 16}, 
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_mean_0', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 16, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_mean_0(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 16
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 4)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = xindex // 4
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x0 + 64*x1), xmask)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr0 + (16 + x0 + 64*x1), xmask)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.load(in_ptr0 + (32 + x0 + 64*x1), xmask)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tl.load(in_ptr0 + (48 + x0 + 64*x1), xmask)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tl.load(in_ptr0 + (4 + x0 + 64*x1), xmask)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tl.load(in_ptr0 + (20 + x0 + 64*x1), xmask)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tl.load(in_ptr0 + (36 + x0 + 64*x1), xmask)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tl.load(in_ptr0 + (52 + x0 + 64*x1), xmask)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tl.load(in_ptr0 + (8 + x0 + 64*x1), xmask)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tl.load(in_ptr0 + (24 + x0 + 64*x1), xmask)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tl.load(in_ptr0 + (40 + x0 + 64*x1), xmask)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tl.load(in_ptr0 + (56 + x0 + 64*x1), xmask)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tl.load(in_ptr0 + (12 + x0 + 64*x1), xmask)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tl.load(in_ptr0 + (28 + x0 + 64*x1), xmask)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = tl.load(in_ptr0 + (44 + x0 + 64*x1), xmask)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = tl.load(in_ptr0 + (60 + x0 + 64*x1), xmask)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 + tmp1
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp2 + tmp3
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tmp4 + tmp5
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = 4.0
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp6 / tmp7
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp9 + tmp10
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp11 + tmp12
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp13 + tmp14
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tmp15 / tmp7
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp8 + tmp16
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp18 + tmp19
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tmp20 + tmp21
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tmp22 + tmp23
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = tmp24 / tmp7
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tmp17 + tmp25
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = tmp27 + tmp28
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = tmp29 + tmp30
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp33 = tmp31 + tmp32
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp34 = tmp33 / tmp7
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp35 = tmp26 + tmp34
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp36 = tmp35 / tmp7
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x2), tmp36, xmask)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/wh/cwhx33k4mr53njazzx5pfkbvmhjkzpvi23koerlzg7flgxgkiplf.py
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [weight_mean, weight, var, add, sqrt, weight_1], Original ATen: [aten.mean, aten.sub, aten.var, aten.add, aten.sqrt, aten.div]
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add => add
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sqrt => sqrt
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   var => var
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   weight => sub
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   weight_1 => div
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   weight_mean => mean_2
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean_2 : [num_users=1] = call_function[target=torch.ops.aten.mean.dim](args = (%mean_1, [3], True), kwargs = {})
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=2] = call_function[target=torch.ops.aten.sub.Tensor](args = (%primals_1, %mean_2), kwargs = {})
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %var : [num_users=1] = call_function[target=torch.ops.aten.var.correction](args = (%view, [1]), kwargs = {correction: 1})
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%var, 2e-05), kwargs = {})
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sqrt : [num_users=2] = call_function[target=torch.ops.aten.sqrt.default](args = (%add,), kwargs = {})
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %div : [num_users=2] = call_function[target=torch.ops.aten.div.Tensor](args = (%sub, %expand), kwargs = {})
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused_add_div_mean_sqrt_sub_var_1 = async_compile.triton('triton_per_fused_add_div_mean_sqrt_sub_var_1', '''
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 4, 'r': 64},
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.DEFAULT,
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_out_ptr1': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 5), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_div_mean_sqrt_sub_var_1', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 3, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused_add_div_mean_sqrt_sub_var_1(in_out_ptr0, in_out_ptr1, in_ptr0, in_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 4
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 64
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 64
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[None, :]
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r1 = rindex
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = xindex
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r1 + 64*x0), xmask, other=0.0)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (4*x0), xmask, eviction_policy='evict_last')
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tl.load(in_ptr1 + (1 + 4*x0), xmask, eviction_policy='evict_last')
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.load(in_ptr1 + (2 + 4*x0), xmask, eviction_policy='evict_last')
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tl.load(in_ptr1 + (3 + 4*x0), xmask, eviction_policy='evict_last')
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp1 + tmp2
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp3 + tmp4
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tmp5 + tmp6
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = 4.0
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp7 / tmp8
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp0 - tmp9
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tl.where(xmask, tmp11, 0)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tl.where(xmask, tmp14, 0)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tl.sum(tmp16, 1)[:, None]
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tl.full([XBLOCK, 1], 64, tl.int32)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tmp18.to(tl.float32)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp17 / tmp19
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tmp11 - tmp20
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tmp21 * tmp21
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = tl.where(xmask, tmp23, 0)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tl.sum(tmp25, 1)[:, None]
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = 63.0
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tmp26 / tmp27
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = 2e-05
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = tmp28 + tmp29
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = libdevice.sqrt(tmp30)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = 1e-05
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp33 = tmp31 + tmp32
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp34 = tmp10 / tmp33
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x0), tmp31, xmask)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr1 + (r1 + 64*x0), tmp34, xmask)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/tm/ctm5fh7ijf4dp5bu4sjze3ylrq73qznnz5a55atvan2a2qthkkwi.py
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [conv2d], Original ATen: [aten.convolution]
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   conv2d => convolution
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convolution : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%primals_3, %div, %primals_2, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), kwargs = {})
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_convolution_2 = async_compile.triton('triton_poi_fused_convolution_2', '''
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 16}, 
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_convolution_2', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_convolution_2(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 16
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 4)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_out_ptr0 + (x2), xmask)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr0 + (x0), xmask, eviction_policy='evict_last')
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 + tmp1
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x2), tmp2, xmask)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1, primals_2, primals_3 = args
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_2, (4, ), (1, ))
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_3, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((4, 1, 1, 4), (4, 16, 16, 1), torch.float32)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mean, mean_1], Original ATen: [aten.mean]
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_mean_0.run(primals_1, buf0, 16, grid=grid(16), stream=stream0)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = empty_strided_cuda((4, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = empty_strided_cuda((4, ), (1, ), torch.float32)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf5 = buf3; del buf3  # reuse
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf6 = buf1; del buf1  # reuse
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [weight_mean, weight, var, add, sqrt, weight_1], Original ATen: [aten.mean, aten.sub, aten.var, aten.add, aten.sqrt, aten.div]
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused_add_div_mean_sqrt_sub_var_1.run(buf5, buf6, primals_1, buf0, 4, 64, grid=grid(4), stream=stream0)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf0
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [conv2d], Original ATen: [aten.convolution]
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf7 = extern_kernels.convolution(primals_3, buf6, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf7, (4, 4, 1, 1), (4, 1, 1, 1))
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf8 = buf7; del buf7  # reuse
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [conv2d], Original ATen: [aten.convolution]
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_convolution_2.run(buf8, primals_2, 16, grid=grid(16), stream=stream0)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_2
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf8, primals_1, primals_3, buf5, buf6, )
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_2 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_3 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([primals_1, primals_2, primals_3])
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0204 14:17:09.843000 3666363 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:17:09.848000 3666363 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: /tmp/torchinductor_sahanp/av/cavx6jkpfwg4veeazwm2ogntdhd24sj7yicxvrl5ye6nj2d3qtxy.py
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['2_forward']
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/7w/c7wuu3d3kjqk64tws3x733uwxvnugojehqcgcptkhry6adkbx6n5.py
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [mean, mean_1], Original ATen: [aten.mean]
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mean => mean
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mean_1 => mean_1
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean : [num_users=1] = call_function[target=torch.ops.aten.mean.dim](args = (%primals_1, [1], True), kwargs = {})
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean_1 : [num_users=1] = call_function[target=torch.ops.aten.mean.dim](args = (%mean, [2], True), kwargs = {})
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_mean_0 = async_compile.triton('triton_poi_fused_mean_0', '''
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 16}, 
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_mean_0', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 16, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_mean_0(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 16
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 4)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = xindex // 4
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x0 + 64*x1), xmask)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr0 + (16 + x0 + 64*x1), xmask)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.load(in_ptr0 + (32 + x0 + 64*x1), xmask)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tl.load(in_ptr0 + (48 + x0 + 64*x1), xmask)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tl.load(in_ptr0 + (4 + x0 + 64*x1), xmask)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tl.load(in_ptr0 + (20 + x0 + 64*x1), xmask)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tl.load(in_ptr0 + (36 + x0 + 64*x1), xmask)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tl.load(in_ptr0 + (52 + x0 + 64*x1), xmask)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tl.load(in_ptr0 + (8 + x0 + 64*x1), xmask)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tl.load(in_ptr0 + (24 + x0 + 64*x1), xmask)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tl.load(in_ptr0 + (40 + x0 + 64*x1), xmask)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tl.load(in_ptr0 + (56 + x0 + 64*x1), xmask)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tl.load(in_ptr0 + (12 + x0 + 64*x1), xmask)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tl.load(in_ptr0 + (28 + x0 + 64*x1), xmask)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = tl.load(in_ptr0 + (44 + x0 + 64*x1), xmask)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = tl.load(in_ptr0 + (60 + x0 + 64*x1), xmask)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 + tmp1
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tmp2 + tmp3
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tmp4 + tmp5
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = 4.0
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp6 / tmp7
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp9 + tmp10
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp11 + tmp12
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp13 + tmp14
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tmp15 / tmp7
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp8 + tmp16
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp18 + tmp19
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tmp20 + tmp21
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tmp22 + tmp23
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = tmp24 / tmp7
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tmp17 + tmp25
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = tmp27 + tmp28
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = tmp29 + tmp30
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp33 = tmp31 + tmp32
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp34 = tmp33 / tmp7
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp35 = tmp26 + tmp34
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp36 = tmp35 / tmp7
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x2), tmp36, xmask)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/wh/cwhx33k4mr53njazzx5pfkbvmhjkzpvi23koerlzg7flgxgkiplf.py
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [weight_mean, weight, var, add, sqrt, weight_1], Original ATen: [aten.mean, aten.sub, aten.var, aten.add, aten.sqrt, aten.div]
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add => add
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sqrt => sqrt
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   var => var
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   weight => sub
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   weight_1 => div
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   weight_mean => mean_2
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean_2 : [num_users=1] = call_function[target=torch.ops.aten.mean.dim](args = (%mean_1, [3], True), kwargs = {})
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=2] = call_function[target=torch.ops.aten.sub.Tensor](args = (%primals_1, %mean_2), kwargs = {})
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %var : [num_users=1] = call_function[target=torch.ops.aten.var.correction](args = (%view, [1]), kwargs = {correction: 1})
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%var, 2e-05), kwargs = {})
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sqrt : [num_users=2] = call_function[target=torch.ops.aten.sqrt.default](args = (%add,), kwargs = {})
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %div : [num_users=2] = call_function[target=torch.ops.aten.div.Tensor](args = (%sub, %expand), kwargs = {})
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused_add_div_mean_sqrt_sub_var_1 = async_compile.triton('triton_per_fused_add_div_mean_sqrt_sub_var_1', '''
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 4, 'r': 64},
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.DEFAULT,
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_out_ptr1': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 5), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_div_mean_sqrt_sub_var_1', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 3, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused_add_div_mean_sqrt_sub_var_1(in_out_ptr0, in_out_ptr1, in_ptr0, in_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 4
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 64
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 64
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[None, :]
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r1 = rindex
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = xindex
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r1 + 64*x0), xmask, other=0.0)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (4*x0), xmask, eviction_policy='evict_last')
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tl.load(in_ptr1 + (1 + 4*x0), xmask, eviction_policy='evict_last')
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.load(in_ptr1 + (2 + 4*x0), xmask, eviction_policy='evict_last')
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tl.load(in_ptr1 + (3 + 4*x0), xmask, eviction_policy='evict_last')
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp1 + tmp2
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp3 + tmp4
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tmp5 + tmp6
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = 4.0
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp7 / tmp8
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tmp0 - tmp9
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tl.where(xmask, tmp11, 0)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tl.where(xmask, tmp14, 0)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tl.sum(tmp16, 1)[:, None]
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tl.full([XBLOCK, 1], 64, tl.int32)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = tmp18.to(tl.float32)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp17 / tmp19
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tmp11 - tmp20
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tmp21 * tmp21
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = tl.where(xmask, tmp23, 0)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tl.sum(tmp25, 1)[:, None]
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = 63.0
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tmp26 / tmp27
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = 2e-05
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = tmp28 + tmp29
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = libdevice.sqrt(tmp30)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = 1e-05
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp33 = tmp31 + tmp32
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp34 = tmp10 / tmp33
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x0), tmp31, xmask)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr1 + (r1 + 64*x0), tmp34, xmask)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/tm/ctm5fh7ijf4dp5bu4sjze3ylrq73qznnz5a55atvan2a2qthkkwi.py
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [conv2d], Original ATen: [aten.convolution]
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   conv2d => convolution
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convolution : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%primals_3, %div, %primals_2, [1, 1], [0, 0], [1, 1], False, [0, 0], 1), kwargs = {})
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_convolution_2 = async_compile.triton('triton_poi_fused_convolution_2', '''
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 16}, 
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_convolution_2', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_convolution_2(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 16
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 4)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_out_ptr0 + (x2), xmask)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr0 + (x0), xmask, eviction_policy='evict_last')
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 + tmp1
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x2), tmp2, xmask)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1, primals_2, primals_3 = args
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_2, (4, ), (1, ))
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_3, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((4, 1, 1, 4), (4, 16, 16, 1), torch.float32)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mean, mean_1], Original ATen: [aten.mean]
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_mean_0.run(primals_1, buf0, 16, grid=grid(16), stream=stream0)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = empty_strided_cuda((4, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = empty_strided_cuda((4, ), (1, ), torch.float32)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf5 = buf3; del buf3  # reuse
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf6 = buf1; del buf1  # reuse
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [weight_mean, weight, var, add, sqrt, weight_1], Original ATen: [aten.mean, aten.sub, aten.var, aten.add, aten.sqrt, aten.div]
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused_add_div_mean_sqrt_sub_var_1.run(buf5, buf6, primals_1, buf0, 4, 64, grid=grid(4), stream=stream0)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf0
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [conv2d], Original ATen: [aten.convolution]
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf7 = extern_kernels.convolution(primals_3, buf6, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf7, (4, 4, 1, 1), (4, 1, 1, 1))
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf8 = buf7; del buf7  # reuse
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [conv2d], Original ATen: [aten.convolution]
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_convolution_2.run(buf8, primals_2, 16, grid=grid(16), stream=stream0)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_2
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf8, primals_1, primals_3, buf5, buf6, )
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_2 = rand_strided((4, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_3 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([primals_1, primals_2, primals_3])
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0205 19:06:12.540000 1034241 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:06:12.545000 1034241 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: inductor_cache/x6/cx6dujdpywzd545rdo4ie6zyjrdjdp35izk72yqx444vbndc4yhi.py
