V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['74_inference']
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/uc/cucrlux6juzljow5f6qzt5lo5vml6vfdmssktdmfwyjjlpu57uoy.py
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [mse_loss], Original ATen: [aten.mse_loss]
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mse_loss => mean, pow_1, sub
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%arg1_1, %arg0_1), kwargs = {})
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_1 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sub, 2), kwargs = {})
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean : [num_users=1] = call_function[target=torch.ops.aten.mean.default](args = (%pow_1,), kwargs = {})
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused_mse_loss_0 = async_compile.triton('triton_per_fused_mse_loss_0', '''
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 1, 'r': 256},
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {'xnumel': 1}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 4), 'tt.equal_to': (3,)}, 'cls': 'AttrsDescriptor'})]},
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_mse_loss_0', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused_mse_loss_0(in_out_ptr0, in_ptr0, in_ptr1, xnumel, rnumel):
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 1
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     XBLOCK: tl.constexpr = 1
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 256
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 256
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = tl.full([1], xoffset, tl.int32)
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = tl.full([RBLOCK], True, tl.int1)
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[:]
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = tl.full([RBLOCK], True, tl.int1)
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r0 = rindex
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r0), None)
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (r0), None)
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 - tmp1
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp2 * tmp2
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = 256.0
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp6 / tmp7
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (tl.full([1], 0, tl.int32)), tmp8, None)
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1, arg1_1 = args
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg0_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg1_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((), (), torch.float32)
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = buf0; del buf0  # reuse
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mse_loss], Original ATen: [aten.mse_loss]
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused_mse_loss_0.run(buf1, arg1_1, arg0_1, 1, 256, grid=grid(1), stream=stream0)
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg0_1
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg1_1
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf1, )
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg1_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([arg0_1, arg1_1])
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0204 13:18:56.840000 859334 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:18:56.841000 859334 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: /tmp/torchinductor_sahanp/2m/c2melkxcldnokrh5woeboyudexrgp6gl2rhbrogfdlocuvaxqavh.py
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['60_inference']
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/uc/cucrlux6juzljow5f6qzt5lo5vml6vfdmssktdmfwyjjlpu57uoy.py
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [mse_loss], Original ATen: [aten.mse_loss]
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mse_loss => mean, pow_1, sub
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%arg1_1, %arg0_1), kwargs = {})
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_1 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sub, 2), kwargs = {})
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean : [num_users=1] = call_function[target=torch.ops.aten.mean.default](args = (%pow_1,), kwargs = {})
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused_mse_loss_0 = async_compile.triton('triton_per_fused_mse_loss_0', '''
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 1, 'r': 256},
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {'xnumel': 1}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 4), 'tt.equal_to': (3,)}, 'cls': 'AttrsDescriptor'})]},
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_mse_loss_0', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused_mse_loss_0(in_out_ptr0, in_ptr0, in_ptr1, xnumel, rnumel):
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 1
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     XBLOCK: tl.constexpr = 1
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 256
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 256
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = tl.full([1], xoffset, tl.int32)
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = tl.full([RBLOCK], True, tl.int1)
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[:]
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = tl.full([RBLOCK], True, tl.int1)
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r0 = rindex
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r0), None)
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (r0), None)
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 - tmp1
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp2 * tmp2
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = 256.0
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp6 / tmp7
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (tl.full([1], 0, tl.int32)), tmp8, None)
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1, arg1_1 = args
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg0_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg1_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((), (), torch.float32)
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = buf0; del buf0  # reuse
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mse_loss], Original ATen: [aten.mse_loss]
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused_mse_loss_0.run(buf1, arg1_1, arg0_1, 1, 256, grid=grid(1), stream=stream0)
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg0_1
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg1_1
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf1, )
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg1_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([arg0_1, arg1_1])
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0204 13:56:25.858000 2571858 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:56:25.859000 2571858 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: /tmp/torchinductor_sahanp/oz/cozvkewv47ciyjlqmq3ntmgtq6wp3ye53h2iuqmequfiy2gex2is.py
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['11_inference']
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/uc/cucrlux6juzljow5f6qzt5lo5vml6vfdmssktdmfwyjjlpu57uoy.py
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [mse_loss], Original ATen: [aten.mse_loss]
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mse_loss => mean, pow_1, sub
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%arg1_1, %arg0_1), kwargs = {})
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_1 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sub, 2), kwargs = {})
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean : [num_users=1] = call_function[target=torch.ops.aten.mean.default](args = (%pow_1,), kwargs = {})
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused_mse_loss_0 = async_compile.triton('triton_per_fused_mse_loss_0', '''
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 1, 'r': 256},
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {'xnumel': 1}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 4), 'tt.equal_to': (3,)}, 'cls': 'AttrsDescriptor'})]},
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_mse_loss_0', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused_mse_loss_0(in_out_ptr0, in_ptr0, in_ptr1, xnumel, rnumel):
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 1
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     XBLOCK: tl.constexpr = 1
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 256
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 256
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = tl.full([1], xoffset, tl.int32)
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = tl.full([RBLOCK], True, tl.int1)
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[:]
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = tl.full([RBLOCK], True, tl.int1)
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r0 = rindex
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r0), None)
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (r0), None)
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 - tmp1
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp2 * tmp2
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = 256.0
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp6 / tmp7
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (tl.full([1], 0, tl.int32)), tmp8, None)
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1, arg1_1 = args
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg0_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg1_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((), (), torch.float32)
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = buf0; del buf0  # reuse
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mse_loss], Original ATen: [aten.mse_loss]
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused_mse_loss_0.run(buf1, arg1_1, arg0_1, 1, 256, grid=grid(1), stream=stream0)
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg0_1
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg1_1
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf1, )
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg1_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([arg0_1, arg1_1])
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0204 14:20:38.963000 3814935 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:20:38.965000 3814935 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: /tmp/torchinductor_sahanp/f3/cf34cry2sluzgmwgin4b5nisb66dmsaxvkz7gnxd2rbuqookguve.py
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['15_inference']
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/uc/cucrlux6juzljow5f6qzt5lo5vml6vfdmssktdmfwyjjlpu57uoy.py
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [mse_loss], Original ATen: [aten.mse_loss]
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mse_loss => mean, pow_1, sub
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%arg1_1, %arg0_1), kwargs = {})
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_1 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sub, 2), kwargs = {})
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean : [num_users=1] = call_function[target=torch.ops.aten.mean.default](args = (%pow_1,), kwargs = {})
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused_mse_loss_0 = async_compile.triton('triton_per_fused_mse_loss_0', '''
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 1, 'r': 256},
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {'xnumel': 1}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 4), 'tt.equal_to': (3,)}, 'cls': 'AttrsDescriptor'})]},
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_mse_loss_0', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused_mse_loss_0(in_out_ptr0, in_ptr0, in_ptr1, xnumel, rnumel):
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 1
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     XBLOCK: tl.constexpr = 1
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 256
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 256
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = tl.full([1], xoffset, tl.int32)
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = tl.full([RBLOCK], True, tl.int1)
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[:]
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = tl.full([RBLOCK], True, tl.int1)
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r0 = rindex
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r0), None)
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (r0), None)
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 - tmp1
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp2 * tmp2
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = 256.0
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp6 / tmp7
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (tl.full([1], 0, tl.int32)), tmp8, None)
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1, arg1_1 = args
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg0_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg1_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((), (), torch.float32)
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = buf0; del buf0  # reuse
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mse_loss], Original ATen: [aten.mse_loss]
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused_mse_loss_0.run(buf1, arg1_1, arg0_1, 1, 256, grid=grid(1), stream=stream0)
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg0_1
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg1_1
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf1, )
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg1_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([arg0_1, arg1_1])
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0204 14:32:32.425000 18345 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:32:32.426000 18345 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: /tmp/torchinductor_sahanp/xp/cxpstzbbp2jhd2xrfee4s7quyjggwufc6y6zgubantnotsbjr7cb.py
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['5_inference']
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/uc/cucrlux6juzljow5f6qzt5lo5vml6vfdmssktdmfwyjjlpu57uoy.py
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [mse_loss], Original ATen: [aten.mse_loss]
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mse_loss => mean, pow_1, sub
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%arg1_1, %arg0_1), kwargs = {})
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_1 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sub, 2), kwargs = {})
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean : [num_users=1] = call_function[target=torch.ops.aten.mean.default](args = (%pow_1,), kwargs = {})
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused_mse_loss_0 = async_compile.triton('triton_per_fused_mse_loss_0', '''
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 1, 'r': 256},
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {'xnumel': 1}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 4), 'tt.equal_to': (3,)}, 'cls': 'AttrsDescriptor'})]},
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_mse_loss_0', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused_mse_loss_0(in_out_ptr0, in_ptr0, in_ptr1, xnumel, rnumel):
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 1
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     XBLOCK: tl.constexpr = 1
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 256
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 256
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = tl.full([1], xoffset, tl.int32)
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = tl.full([RBLOCK], True, tl.int1)
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[:]
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = tl.full([RBLOCK], True, tl.int1)
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r0 = rindex
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r0), None)
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (r0), None)
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 - tmp1
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp2 * tmp2
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = 256.0
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp6 / tmp7
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (tl.full([1], 0, tl.int32)), tmp8, None)
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1, arg1_1 = args
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg0_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg1_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((), (), torch.float32)
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = buf0; del buf0  # reuse
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mse_loss], Original ATen: [aten.mse_loss]
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused_mse_loss_0.run(buf1, arg1_1, arg0_1, 1, 256, grid=grid(1), stream=stream0)
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg0_1
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg1_1
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf1, )
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg1_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([arg0_1, arg1_1])
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0204 14:57:11.908000 899729 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:57:11.909000 899729 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: /tmp/torchinductor_sahanp/rl/crllsllwptdn4tcqhmp5znrfkgunq6rpptiitttcbig4my3d7s7t.py
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['36_inference']
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/uc/cucrlux6juzljow5f6qzt5lo5vml6vfdmssktdmfwyjjlpu57uoy.py
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [mse_loss], Original ATen: [aten.mse_loss]
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mse_loss => mean, pow_1, sub
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%arg1_1, %arg0_1), kwargs = {})
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_1 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sub, 2), kwargs = {})
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean : [num_users=1] = call_function[target=torch.ops.aten.mean.default](args = (%pow_1,), kwargs = {})
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused_mse_loss_0 = async_compile.triton('triton_per_fused_mse_loss_0', '''
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 1, 'r': 256},
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {'xnumel': 1}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 4), 'tt.equal_to': (3,)}, 'cls': 'AttrsDescriptor'})]},
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_mse_loss_0', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused_mse_loss_0(in_out_ptr0, in_ptr0, in_ptr1, xnumel, rnumel):
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 1
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     XBLOCK: tl.constexpr = 1
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 256
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 256
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = tl.full([1], xoffset, tl.int32)
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = tl.full([RBLOCK], True, tl.int1)
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[:]
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = tl.full([RBLOCK], True, tl.int1)
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r0 = rindex
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r0), None)
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (r0), None)
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 - tmp1
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp2 * tmp2
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = 256.0
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp6 / tmp7
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (tl.full([1], 0, tl.int32)), tmp8, None)
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1, arg1_1 = args
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg0_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg1_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((), (), torch.float32)
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = buf0; del buf0  # reuse
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mse_loss], Original ATen: [aten.mse_loss]
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused_mse_loss_0.run(buf1, arg1_1, arg0_1, 1, 256, grid=grid(1), stream=stream0)
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg0_1
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg1_1
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf1, )
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg1_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([arg0_1, arg1_1])
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0204 15:56:05.202000 2240541 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 15:56:05.204000 2240541 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: /tmp/torchinductor_sahanp/e6/ce6woe5r5mw6ttnbn64ohgv3l56eacrvujapzxbzysmt7tacpaec.py
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['74_inference']
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/uc/cucrlux6juzljow5f6qzt5lo5vml6vfdmssktdmfwyjjlpu57uoy.py
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [mse_loss], Original ATen: [aten.mse_loss]
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mse_loss => mean, pow_1, sub
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%arg1_1, %arg0_1), kwargs = {})
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_1 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sub, 2), kwargs = {})
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean : [num_users=1] = call_function[target=torch.ops.aten.mean.default](args = (%pow_1,), kwargs = {})
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused_mse_loss_0 = async_compile.triton('triton_per_fused_mse_loss_0', '''
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 1, 'r': 256},
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {'xnumel': 1}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 4), 'tt.equal_to': (3,)}, 'cls': 'AttrsDescriptor'})]},
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_mse_loss_0', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused_mse_loss_0(in_out_ptr0, in_ptr0, in_ptr1, xnumel, rnumel):
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 1
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     XBLOCK: tl.constexpr = 1
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 256
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 256
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = tl.full([1], xoffset, tl.int32)
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = tl.full([RBLOCK], True, tl.int1)
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[:]
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = tl.full([RBLOCK], True, tl.int1)
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r0 = rindex
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r0), None)
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (r0), None)
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 - tmp1
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp2 * tmp2
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = 256.0
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp6 / tmp7
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (tl.full([1], 0, tl.int32)), tmp8, None)
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1, arg1_1 = args
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg0_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg1_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((), (), torch.float32)
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = buf0; del buf0  # reuse
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mse_loss], Original ATen: [aten.mse_loss]
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused_mse_loss_0.run(buf1, arg1_1, arg0_1, 1, 256, grid=grid(1), stream=stream0)
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg0_1
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg1_1
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf1, )
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg1_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([arg0_1, arg1_1])
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0205 18:09:18.909000 3568094 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:09:18.911000 3568094 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: inductor_cache/4y/c4ypr6bqhm27ye7qhjmuepjjtbla54wqf4fs4rgqcxmxovtcjv5p.py
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['60_inference']
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/uc/cucrlux6juzljow5f6qzt5lo5vml6vfdmssktdmfwyjjlpu57uoy.py
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [mse_loss], Original ATen: [aten.mse_loss]
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mse_loss => mean, pow_1, sub
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%arg1_1, %arg0_1), kwargs = {})
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_1 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sub, 2), kwargs = {})
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean : [num_users=1] = call_function[target=torch.ops.aten.mean.default](args = (%pow_1,), kwargs = {})
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused_mse_loss_0 = async_compile.triton('triton_per_fused_mse_loss_0', '''
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 1, 'r': 256},
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {'xnumel': 1}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 4), 'tt.equal_to': (3,)}, 'cls': 'AttrsDescriptor'})]},
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_mse_loss_0', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused_mse_loss_0(in_out_ptr0, in_ptr0, in_ptr1, xnumel, rnumel):
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 1
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     XBLOCK: tl.constexpr = 1
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 256
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 256
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = tl.full([1], xoffset, tl.int32)
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = tl.full([RBLOCK], True, tl.int1)
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[:]
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = tl.full([RBLOCK], True, tl.int1)
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r0 = rindex
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r0), None)
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (r0), None)
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 - tmp1
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp2 * tmp2
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = 256.0
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp6 / tmp7
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (tl.full([1], 0, tl.int32)), tmp8, None)
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1, arg1_1 = args
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg0_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg1_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((), (), torch.float32)
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = buf0; del buf0  # reuse
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mse_loss], Original ATen: [aten.mse_loss]
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused_mse_loss_0.run(buf1, arg1_1, arg0_1, 1, 256, grid=grid(1), stream=stream0)
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg0_1
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg1_1
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf1, )
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg1_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([arg0_1, arg1_1])
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0205 18:46:04.659000 506877 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:46:04.660000 506877 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: inductor_cache/6z/c6zkltzjonjh5cihgjvluyta4fgcgepmz6hdloxr6alhickvmt3w.py
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['11_inference']
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/uc/cucrlux6juzljow5f6qzt5lo5vml6vfdmssktdmfwyjjlpu57uoy.py
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [mse_loss], Original ATen: [aten.mse_loss]
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mse_loss => mean, pow_1, sub
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%arg1_1, %arg0_1), kwargs = {})
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_1 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sub, 2), kwargs = {})
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean : [num_users=1] = call_function[target=torch.ops.aten.mean.default](args = (%pow_1,), kwargs = {})
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused_mse_loss_0 = async_compile.triton('triton_per_fused_mse_loss_0', '''
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 1, 'r': 256},
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {'xnumel': 1}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 4), 'tt.equal_to': (3,)}, 'cls': 'AttrsDescriptor'})]},
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_mse_loss_0', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused_mse_loss_0(in_out_ptr0, in_ptr0, in_ptr1, xnumel, rnumel):
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 1
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     XBLOCK: tl.constexpr = 1
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 256
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 256
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = tl.full([1], xoffset, tl.int32)
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = tl.full([RBLOCK], True, tl.int1)
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[:]
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = tl.full([RBLOCK], True, tl.int1)
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r0 = rindex
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r0), None)
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (r0), None)
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 - tmp1
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp2 * tmp2
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = 256.0
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp6 / tmp7
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (tl.full([1], 0, tl.int32)), tmp8, None)
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1, arg1_1 = args
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg0_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg1_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((), (), torch.float32)
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = buf0; del buf0  # reuse
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mse_loss], Original ATen: [aten.mse_loss]
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused_mse_loss_0.run(buf1, arg1_1, arg0_1, 1, 256, grid=grid(1), stream=stream0)
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg0_1
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg1_1
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf1, )
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg1_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([arg0_1, arg1_1])
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0205 19:09:38.631000 1117231 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:09:38.632000 1117231 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: inductor_cache/47/c47bxe7wefjpeftosvx3ffjtjlrpr23auajyk7s3yhjc2lbm7gv4.py
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['15_inference']
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/uc/cucrlux6juzljow5f6qzt5lo5vml6vfdmssktdmfwyjjlpu57uoy.py
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [mse_loss], Original ATen: [aten.mse_loss]
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mse_loss => mean, pow_1, sub
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%arg1_1, %arg0_1), kwargs = {})
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_1 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sub, 2), kwargs = {})
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean : [num_users=1] = call_function[target=torch.ops.aten.mean.default](args = (%pow_1,), kwargs = {})
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused_mse_loss_0 = async_compile.triton('triton_per_fused_mse_loss_0', '''
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 1, 'r': 256},
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {'xnumel': 1}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 4), 'tt.equal_to': (3,)}, 'cls': 'AttrsDescriptor'})]},
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_mse_loss_0', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused_mse_loss_0(in_out_ptr0, in_ptr0, in_ptr1, xnumel, rnumel):
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 1
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     XBLOCK: tl.constexpr = 1
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 256
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 256
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = tl.full([1], xoffset, tl.int32)
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = tl.full([RBLOCK], True, tl.int1)
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[:]
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = tl.full([RBLOCK], True, tl.int1)
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r0 = rindex
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r0), None)
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (r0), None)
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 - tmp1
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp2 * tmp2
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = 256.0
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp6 / tmp7
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (tl.full([1], 0, tl.int32)), tmp8, None)
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1, arg1_1 = args
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg0_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg1_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((), (), torch.float32)
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = buf0; del buf0  # reuse
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mse_loss], Original ATen: [aten.mse_loss]
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused_mse_loss_0.run(buf1, arg1_1, arg0_1, 1, 256, grid=grid(1), stream=stream0)
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg0_1
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg1_1
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf1, )
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg1_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([arg0_1, arg1_1])
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0205 19:21:19.164000 1409051 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:21:19.165000 1409051 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: inductor_cache/qy/cqyrkxm6rxqd73jz737b7cujcjudvqic2quvdlfpgmx5gvrteo2w.py
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['5_inference']
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/uc/cucrlux6juzljow5f6qzt5lo5vml6vfdmssktdmfwyjjlpu57uoy.py
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [mse_loss], Original ATen: [aten.mse_loss]
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mse_loss => mean, pow_1, sub
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%arg1_1, %arg0_1), kwargs = {})
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_1 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sub, 2), kwargs = {})
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean : [num_users=1] = call_function[target=torch.ops.aten.mean.default](args = (%pow_1,), kwargs = {})
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused_mse_loss_0 = async_compile.triton('triton_per_fused_mse_loss_0', '''
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 1, 'r': 256},
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {'xnumel': 1}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 4), 'tt.equal_to': (3,)}, 'cls': 'AttrsDescriptor'})]},
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_mse_loss_0', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused_mse_loss_0(in_out_ptr0, in_ptr0, in_ptr1, xnumel, rnumel):
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 1
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     XBLOCK: tl.constexpr = 1
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 256
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 256
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = tl.full([1], xoffset, tl.int32)
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = tl.full([RBLOCK], True, tl.int1)
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[:]
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = tl.full([RBLOCK], True, tl.int1)
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r0 = rindex
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r0), None)
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (r0), None)
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 - tmp1
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp2 * tmp2
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = 256.0
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp6 / tmp7
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (tl.full([1], 0, tl.int32)), tmp8, None)
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1, arg1_1 = args
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg0_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg1_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((), (), torch.float32)
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = buf0; del buf0  # reuse
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mse_loss], Original ATen: [aten.mse_loss]
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused_mse_loss_0.run(buf1, arg1_1, arg0_1, 1, 256, grid=grid(1), stream=stream0)
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg0_1
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg1_1
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf1, )
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg1_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([arg0_1, arg1_1])
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0205 19:46:15.689000 2174782 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 19:46:15.690000 2174782 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: inductor_cache/pp/cpp7ipbfevormw424qsvua6mpwsofvlbcnbzgjfx7vyi4gxdo3qp.py
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['36_inference']
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/uc/cucrlux6juzljow5f6qzt5lo5vml6vfdmssktdmfwyjjlpu57uoy.py
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [mse_loss], Original ATen: [aten.mse_loss]
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mse_loss => mean, pow_1, sub
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%arg1_1, %arg0_1), kwargs = {})
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %pow_1 : [num_users=1] = call_function[target=torch.ops.aten.pow.Tensor_Scalar](args = (%sub, 2), kwargs = {})
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean : [num_users=1] = call_function[target=torch.ops.aten.mean.default](args = (%pow_1,), kwargs = {})
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused_mse_loss_0 = async_compile.triton('triton_per_fused_mse_loss_0', '''
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 1, 'r': 256},
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {'xnumel': 1}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 4), 'tt.equal_to': (3,)}, 'cls': 'AttrsDescriptor'})]},
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_mse_loss_0', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused_mse_loss_0(in_out_ptr0, in_ptr0, in_ptr1, xnumel, rnumel):
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 1
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     XBLOCK: tl.constexpr = 1
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 256
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 256
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = tl.full([1], xoffset, tl.int32)
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = tl.full([RBLOCK], True, tl.int1)
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[:]
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = tl.full([RBLOCK], True, tl.int1)
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r0 = rindex
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r0), None)
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (r0), None)
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 - tmp1
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp2 * tmp2
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = 256.0
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp6 / tmp7
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (tl.full([1], 0, tl.int32)), tmp8, None)
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1, arg1_1 = args
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg0_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg1_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((), (), torch.float32)
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = buf0; del buf0  # reuse
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mse_loss], Original ATen: [aten.mse_loss]
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused_mse_loss_0.run(buf1, arg1_1, arg0_1, 1, 256, grid=grid(1), stream=stream0)
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg0_1
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg1_1
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf1, )
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg1_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([arg0_1, arg1_1])
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0205 20:45:23.626000 3778217 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 20:45:23.628000 3778217 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: inductor_cache/de/cdepwbnpmsxnimmbcwfpedzsuaajmszsdbubgudn7bnia6jddp33.py
