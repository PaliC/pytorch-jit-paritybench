V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['3_inference']
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/5q/c5qg6oc54ns76rvzf5gxxyj6luemxzvlfwfiadylqueqhahwxhby.py
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [mul, kernel_x, x, kernel_x_1, x_2, mul_2], Original ATen: [aten.mul, aten.full, aten.convolution]
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   kernel_x => full_default
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   kernel_x_1 => full_default_2
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul => mul
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_2 => mul_2
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   x => convolution
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   x_2 => convolution_2
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%arg0_1, %arg1_1), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %full_default : [num_users=1] = call_function[target=torch.ops.aten.full.default](args = ([4, 1, 1, 9], 0.1111111111111111), kwargs = {dtype: torch.float32, layout: torch.strided, device: cuda:0, pin_memory: False})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convolution : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%arg0_1, %full_default, None, [1, 1], [0, 4], [1, 1], False, [0, 0], 4), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %full_default_2 : [num_users=1] = call_function[target=torch.ops.aten.full.default](args = ([4, 1, 1, 9], 0.1111111111111111), kwargs = {dtype: torch.float32, layout: torch.strided, device: cuda:0, pin_memory: False})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convolution_2 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%arg1_1, %full_default_2, None, [1, 1], [0, 4], [1, 1], False, [0, 0], 4), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_2 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%arg0_1, %arg0_1), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_convolution_full_mul_0 = async_compile.triton('triton_poi_fused_convolution_full_mul_0', '''
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'y': 16, 'x': 16}, tile_hint=TileHint.DEFAULT,
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'out_ptr2': '*fp32', 'out_ptr3': '*fp32', 'ynumel': 'i32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_convolution_full_mul_0', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_convolution_full_mul_0(in_ptr0, in_ptr1, out_ptr0, out_ptr1, out_ptr2, out_ptr3, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     ynumel = 16
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 16
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     yoffset = tl.program_id(1) * YBLOCK
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     ymask = yindex < ynumel
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     y3 = yindex
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     y0 = (yindex % 4)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     y1 = yindex // 4
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x2 + 16*y3), xmask & ymask)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (x2 + 16*y3), xmask & ymask)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 * tmp1
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp0 * tmp0
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (y0 + 4*x2 + 64*y1), tmp2, xmask & ymask)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr1 + (y0 + 4*x2 + 64*y1), tmp0, xmask & ymask)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr2 + (y0 + 4*x2 + 64*y1), tmp3, xmask & ymask)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr3 + (y0 + 4*x2 + 64*y1), tmp1, xmask & ymask)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/db/cdb3iir6oyoirtm4g4zhhd3a5ipp2ranm5fq7y6bzed5vbrlriw4.py
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [kernel_x_2], Original ATen: [aten.full]
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   kernel_x_2 => full_default_4
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %full_default_4 : [num_users=1] = call_function[target=torch.ops.aten.full.default](args = ([4, 1, 1, 9], 0.1111111111111111), kwargs = {dtype: torch.float32, layout: torch.strided, device: cuda:0, pin_memory: False})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_full_1 = async_compile.triton('triton_poi_fused_full_1', '''
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64}, 
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0,), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_full_1', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_full_1(out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 36
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = xindex
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = 0.1111111111111111
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x0), tmp0, xmask)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/lz/clzdozvaaxqyyce4hs7j5mvezwwj2rb3hpgfhosc2i455pcgzoaa.py
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [mul_1, cov_xy, mul_3, var_x, add, A, A_1, mul_5, mul_4, b, b_1, add_1], Original ATen: [aten.mul, aten.sub, aten.add, aten.div, aten._to_copy, aten.arange, aten.clamp, aten._unsafe_index]
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   A => div
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   A_1 => _unsafe_index, _unsafe_index_1, _unsafe_index_2, _unsafe_index_3, add_3, add_5, add_6, add_7, clamp_max_2, clamp_max_3, clamp_min_1, clamp_min_2, clamp_min_3, convert_element_type_1, convert_element_type_2, convert_element_type_3, iota_1, mul_6, mul_7, mul_8, mul_9, sub_4, sub_5, sub_6, sub_7, sub_8, sub_9
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add => add
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add_1 => add_15
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   b => sub_2
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   b_1 => _unsafe_index_4, _unsafe_index_5, _unsafe_index_6, _unsafe_index_7, add_10, add_12, add_13, add_14, clamp_max_6, clamp_max_7, clamp_min_5, clamp_min_6, clamp_min_7, convert_element_type_5, convert_element_type_6, convert_element_type_7, iota_3, mul_11, mul_12, mul_13, mul_14, sub_11, sub_12, sub_13, sub_14, sub_15, sub_16
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   cov_xy => sub
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_1 => mul_1
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_3 => mul_3
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_4 => mul_4
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_5 => mul_15
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   var_x => sub_1
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_1, %convolution_3), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%convolution_5, %mul_1), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_3 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_1, %convolution_1), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_1 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%convolution_7, %mul_3), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%sub_1, 1e-05), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %div : [num_users=5] = call_function[target=torch.ops.aten.div.Tensor](args = (%sub, %add), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convert_element_type_1 : [num_users=4] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%view, torch.int64), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %iota_1 : [num_users=1] = call_function[target=torch.ops.prims.iota.default](args = (4,), kwargs = {start: 0, step: 1, dtype: torch.int64, device: cuda:0, requires_grad: False})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convert_element_type_2 : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%iota_1, torch.float32), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_3 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convert_element_type_2, 0.5), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_6 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_3, 1.0), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_4 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%mul_6, 0.5), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_min_1 : [num_users=2] = call_function[target=torch.ops.aten.clamp_min.default](args = (%sub_4, 0.0), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convert_element_type_3 : [num_users=4] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%clamp_min_1, torch.int64), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %_unsafe_index_3 : [num_users=1] = call_function[target=torch.ops.aten._unsafe_index.Tensor](args = (%div, [None, None, %clamp_max, %clamp_max_1]), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %_unsafe_index_2 : [num_users=2] = call_function[target=torch.ops.aten._unsafe_index.Tensor](args = (%div, [None, None, %clamp_max, %convert_element_type_3]), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_7 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%_unsafe_index_3, %_unsafe_index_2), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_5 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%clamp_min_1, %convert_element_type_3), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_min_2 : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%sub_5, 0.0), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_max_2 : [num_users=2] = call_function[target=torch.ops.aten.clamp_max.default](args = (%clamp_min_2, 1.0), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_8 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_7, %clamp_max_2), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_6 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%_unsafe_index_2, %mul_8), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %_unsafe_index_1 : [num_users=1] = call_function[target=torch.ops.aten._unsafe_index.Tensor](args = (%div, [None, None, %convert_element_type_1, %clamp_max_1]), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %_unsafe_index : [num_users=2] = call_function[target=torch.ops.aten._unsafe_index.Tensor](args = (%div, [None, None, %convert_element_type_1, %convert_element_type_3]), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_6 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%_unsafe_index_1, %_unsafe_index), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_7 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_6, %clamp_max_2), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_5 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%_unsafe_index, %mul_7), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_9 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_6, %add_5), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_8 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%view, %convert_element_type_1), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_min_3 : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%sub_8, 0.0), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_max_3 : [num_users=1] = call_function[target=torch.ops.aten.clamp_max.default](args = (%clamp_min_3, 1.0), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_9 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_9, %clamp_max_3), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_7 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_5, %mul_9), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_15 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_7, %arg2_1), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_4 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%div, %convolution_1), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_2 : [num_users=4] = call_function[target=torch.ops.aten.sub.Tensor](args = (%convolution_3, %mul_4), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convert_element_type_5 : [num_users=4] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%view_2, torch.int64), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %iota_3 : [num_users=1] = call_function[target=torch.ops.prims.iota.default](args = (4,), kwargs = {start: 0, step: 1, dtype: torch.int64, device: cuda:0, requires_grad: False})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convert_element_type_6 : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%iota_3, torch.float32), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_10 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convert_element_type_6, 0.5), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_11 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_10, 1.0), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_11 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%mul_11, 0.5), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_min_5 : [num_users=2] = call_function[target=torch.ops.aten.clamp_min.default](args = (%sub_11, 0.0), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convert_element_type_7 : [num_users=4] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%clamp_min_5, torch.int64), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %_unsafe_index_7 : [num_users=1] = call_function[target=torch.ops.aten._unsafe_index.Tensor](args = (%sub_2, [None, None, %clamp_max_4, %clamp_max_5]), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %_unsafe_index_6 : [num_users=2] = call_function[target=torch.ops.aten._unsafe_index.Tensor](args = (%sub_2, [None, None, %clamp_max_4, %convert_element_type_7]), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_14 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%_unsafe_index_7, %_unsafe_index_6), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_12 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%clamp_min_5, %convert_element_type_7), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_min_6 : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%sub_12, 0.0), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_max_6 : [num_users=2] = call_function[target=torch.ops.aten.clamp_max.default](args = (%clamp_min_6, 1.0), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_13 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_14, %clamp_max_6), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_13 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%_unsafe_index_6, %mul_13), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %_unsafe_index_5 : [num_users=1] = call_function[target=torch.ops.aten._unsafe_index.Tensor](args = (%sub_2, [None, None, %convert_element_type_5, %clamp_max_5]), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %_unsafe_index_4 : [num_users=2] = call_function[target=torch.ops.aten._unsafe_index.Tensor](args = (%sub_2, [None, None, %convert_element_type_5, %convert_element_type_7]), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_13 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%_unsafe_index_5, %_unsafe_index_4), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_12 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_13, %clamp_max_6), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_12 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%_unsafe_index_4, %mul_12), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_16 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_13, %add_12), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_15 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%view_2, %convert_element_type_5), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_min_7 : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%sub_15, 0.0), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_max_7 : [num_users=1] = call_function[target=torch.ops.aten.clamp_max.default](args = (%clamp_min_7, 1.0), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_14 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_16, %clamp_max_7), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_14 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_12, %mul_14), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_15 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_15, %add_14), kwargs = {})
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_div_mul_sub_2 = async_compile.triton('triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_div_mul_sub_2', '''
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 256}, 
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_div_mul_sub_2', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_div_mul_sub_2(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, XBLOCK : tl.constexpr):
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 256
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 4) % 4)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 4)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = ((xindex // 16) % 4)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex // 64
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x5 = xindex
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp97 = tl.load(in_ptr4 + (x5), xmask)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = x1
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tmp0.to(tl.float32)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = 0.5
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp1 + tmp2
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = 1.0
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp3 * tmp4
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tmp5 - tmp2
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = 0.0
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = triton_helpers.maximum(tmp6, tmp7)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp8.to(tl.int32)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tl.full([1], 1, tl.int64)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp9 + tmp10
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tl.full([1], 3, tl.int64)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = triton_helpers.minimum(tmp11, tmp12)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = x0
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp14.to(tl.float32)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tmp15 + tmp2
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp16 * tmp4
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tmp17 - tmp2
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = triton_helpers.maximum(tmp18, tmp7)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp19.to(tl.int32)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tmp20 + tmp10
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = triton_helpers.minimum(tmp21, tmp12)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tl.load(in_ptr0 + (x2 + 4*tmp22 + 16*tmp13 + 64*x3), xmask, eviction_policy='evict_last')
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tl.load(in_ptr1 + (x2 + 4*tmp22 + 16*tmp13 + 64*x3), xmask, eviction_policy='evict_last')
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = tl.load(in_ptr2 + (x2 + 4*tmp22 + 16*tmp13 + 64*x3), xmask, eviction_policy='evict_last')
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tmp24 * tmp25
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tmp23 - tmp26
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tl.load(in_ptr3 + (x2 + 4*tmp22 + 16*tmp13 + 64*x3), xmask, eviction_policy='evict_last')
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = tmp24 * tmp24
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = tmp28 - tmp29
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = 1e-05
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = tmp30 + tmp31
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp33 = tmp27 / tmp32
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp34 = tl.load(in_ptr0 + (x2 + 4*tmp20 + 16*tmp13 + 64*x3), xmask, eviction_policy='evict_last')
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp35 = tl.load(in_ptr1 + (x2 + 4*tmp20 + 16*tmp13 + 64*x3), xmask, eviction_policy='evict_last')
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp36 = tl.load(in_ptr2 + (x2 + 4*tmp20 + 16*tmp13 + 64*x3), xmask, eviction_policy='evict_last')
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp37 = tmp35 * tmp36
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp38 = tmp34 - tmp37
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp39 = tl.load(in_ptr3 + (x2 + 4*tmp20 + 16*tmp13 + 64*x3), xmask, eviction_policy='evict_last')
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp40 = tmp35 * tmp35
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp41 = tmp39 - tmp40
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp42 = tmp41 + tmp31
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp43 = tmp38 / tmp42
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp44 = tl.load(in_ptr0 + (x2 + 4*tmp22 + 16*tmp9 + 64*x3), xmask, eviction_policy='evict_last')
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp45 = tl.load(in_ptr1 + (x2 + 4*tmp22 + 16*tmp9 + 64*x3), xmask, eviction_policy='evict_last')
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp46 = tl.load(in_ptr2 + (x2 + 4*tmp22 + 16*tmp9 + 64*x3), xmask, eviction_policy='evict_last')
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp47 = tmp45 * tmp46
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp48 = tmp44 - tmp47
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp49 = tl.load(in_ptr3 + (x2 + 4*tmp22 + 16*tmp9 + 64*x3), xmask, eviction_policy='evict_last')
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp50 = tmp45 * tmp45
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp51 = tmp49 - tmp50
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp52 = tmp51 + tmp31
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp53 = tmp48 / tmp52
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp54 = tl.load(in_ptr0 + (x2 + 4*tmp20 + 16*tmp9 + 64*x3), xmask, eviction_policy='evict_last')
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp55 = tl.load(in_ptr1 + (x2 + 4*tmp20 + 16*tmp9 + 64*x3), xmask, eviction_policy='evict_last')
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp56 = tl.load(in_ptr2 + (x2 + 4*tmp20 + 16*tmp9 + 64*x3), xmask, eviction_policy='evict_last')
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp57 = tmp55 * tmp56
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp58 = tmp54 - tmp57
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp59 = tl.load(in_ptr3 + (x2 + 4*tmp20 + 16*tmp9 + 64*x3), xmask, eviction_policy='evict_last')
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp60 = tmp55 * tmp55
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp61 = tmp59 - tmp60
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp62 = tmp61 + tmp31
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp63 = tmp58 / tmp62
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp64 = tmp53 - tmp63
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp65 = tmp20.to(tl.float32)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp66 = tmp19 - tmp65
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp67 = triton_helpers.maximum(tmp66, tmp7)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp68 = triton_helpers.minimum(tmp67, tmp4)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp69 = tmp64 * tmp68
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp70 = tmp63 + tmp69
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp71 = tmp33 * tmp24
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp72 = tmp25 - tmp71
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp73 = tmp43 * tmp35
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp74 = tmp36 - tmp73
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp75 = tmp53 * tmp45
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp76 = tmp46 - tmp75
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp77 = tmp63 * tmp55
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp78 = tmp56 - tmp77
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp79 = tmp76 - tmp78
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp80 = tmp79 * tmp68
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp81 = tmp78 + tmp80
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp82 = tmp33 - tmp43
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp83 = tmp82 * tmp68
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp84 = tmp43 + tmp83
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp85 = tmp84 - tmp70
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp86 = tmp9.to(tl.float32)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp87 = tmp8 - tmp86
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp88 = triton_helpers.maximum(tmp87, tmp7)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp89 = triton_helpers.minimum(tmp88, tmp4)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp90 = tmp85 * tmp89
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp91 = tmp72 - tmp74
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp92 = tmp91 * tmp68
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp93 = tmp74 + tmp92
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp94 = tmp93 - tmp81
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp95 = tmp94 * tmp89
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp96 = tmp70 + tmp90
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp98 = tmp96 * tmp97
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp99 = tmp81 + tmp95
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp100 = tmp98 + tmp99
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x5), tmp100, xmask)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1, arg1_1, arg2_1 = args
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg0_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg1_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg2_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((4, 4, 4, 4), (64, 1, 16, 4), torch.float32)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf6 = empty_strided_cuda((4, 4, 4, 4), (64, 1, 16, 4), torch.float32)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf15 = empty_strided_cuda((4, 4, 4, 4), (64, 1, 16, 4), torch.float32)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf11 = empty_strided_cuda((4, 4, 4, 4), (64, 1, 16, 4), torch.float32)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mul, kernel_x, x, kernel_x_1, x_2, mul_2], Original ATen: [aten.mul, aten.full, aten.convolution]
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_convolution_full_mul_0.run(arg0_1, arg1_1, buf0, buf6, buf15, buf11, 16, 16, grid=grid(16, 16), stream=stream0)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg0_1
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg1_1
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = empty_strided_cuda((4, 1, 1, 9), (9, 9, 9, 1), torch.float32)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [kernel_x_2], Original ATen: [aten.full]
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_full_1.run(buf1, 36, grid=grid(36), stream=stream0)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mul, kernel_x_2, x_4], Original ATen: [aten.mul, aten.full, aten.convolution]
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = extern_kernels.convolution(buf0, buf1, stride=(1, 1), padding=(0, 4), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=4, bias=None)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf2, (4, 4, 4, 4), (64, 1, 16, 4))
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf0
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = reinterpret_tensor(buf1, (4, 1, 9, 1), (9, 9, 1, 1), 0); del buf1  # reuse
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [kernel_y_2], Original ATen: [aten.full]
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_full_1.run(buf3, 36, grid=grid(36), stream=stream0)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [kernel_y_2, x_5], Original ATen: [aten.full, aten.convolution]
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf4 = extern_kernels.convolution(buf2, buf3, stride=(1, 1), padding=(4, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=4, bias=None)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf4, (4, 4, 4, 4), (64, 1, 16, 4))
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf2
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf5 = reinterpret_tensor(buf3, (4, 1, 1, 9), (9, 9, 9, 1), 0); del buf3  # reuse
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [kernel_x], Original ATen: [aten.full]
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_full_1.run(buf5, 36, grid=grid(36), stream=stream0)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [kernel_x, x], Original ATen: [aten.full, aten.convolution]
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf7 = extern_kernels.convolution(buf6, buf5, stride=(1, 1), padding=(0, 4), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=4, bias=None)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf7, (4, 4, 4, 4), (64, 1, 16, 4))
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf6
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf8 = reinterpret_tensor(buf5, (4, 1, 9, 1), (9, 9, 1, 1), 0); del buf5  # reuse
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [kernel_y], Original ATen: [aten.full]
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_full_1.run(buf8, 36, grid=grid(36), stream=stream0)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [kernel_y, x_1], Original ATen: [aten.full, aten.convolution]
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf9 = extern_kernels.convolution(buf7, buf8, stride=(1, 1), padding=(4, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=4, bias=None)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf9, (4, 4, 4, 4), (64, 1, 16, 4))
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf7
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf10 = reinterpret_tensor(buf8, (4, 1, 1, 9), (9, 9, 9, 1), 0); del buf8  # reuse
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [kernel_x_1], Original ATen: [aten.full]
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_full_1.run(buf10, 36, grid=grid(36), stream=stream0)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [kernel_x_1, x_2], Original ATen: [aten.full, aten.convolution]
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf12 = extern_kernels.convolution(buf11, buf10, stride=(1, 1), padding=(0, 4), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=4, bias=None)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf12, (4, 4, 4, 4), (64, 1, 16, 4))
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf11
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf13 = reinterpret_tensor(buf10, (4, 1, 9, 1), (9, 9, 1, 1), 0); del buf10  # reuse
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [kernel_y_1], Original ATen: [aten.full]
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_full_1.run(buf13, 36, grid=grid(36), stream=stream0)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [kernel_y_1, x_3], Original ATen: [aten.full, aten.convolution]
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf14 = extern_kernels.convolution(buf12, buf13, stride=(1, 1), padding=(4, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=4, bias=None)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf14, (4, 4, 4, 4), (64, 1, 16, 4))
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf12
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf16 = reinterpret_tensor(buf13, (4, 1, 1, 9), (9, 9, 9, 1), 0); del buf13  # reuse
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [kernel_x_3], Original ATen: [aten.full]
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_full_1.run(buf16, 36, grid=grid(36), stream=stream0)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mul_2, kernel_x_3, x_6], Original ATen: [aten.mul, aten.full, aten.convolution]
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf17 = extern_kernels.convolution(buf15, buf16, stride=(1, 1), padding=(0, 4), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=4, bias=None)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf17, (4, 4, 4, 4), (64, 1, 16, 4))
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf15
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf18 = reinterpret_tensor(buf16, (4, 1, 9, 1), (9, 9, 1, 1), 0); del buf16  # reuse
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [kernel_y_3], Original ATen: [aten.full]
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_full_1.run(buf18, 36, grid=grid(36), stream=stream0)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [kernel_y_3, x_7], Original ATen: [aten.full, aten.convolution]
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf19 = extern_kernels.convolution(buf17, buf18, stride=(1, 1), padding=(4, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=4, bias=None)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf19, (4, 4, 4, 4), (64, 1, 16, 4))
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf18
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf22 = reinterpret_tensor(buf17, (4, 4, 4, 4), (64, 16, 4, 1), 0); del buf17  # reuse
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf23 = buf22; del buf22  # reuse
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf24 = buf23; del buf23  # reuse
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf32 = buf24; del buf24  # reuse
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mul_1, cov_xy, mul_3, var_x, add, A, A_1, mul_5, mul_4, b, b_1, add_1], Original ATen: [aten.mul, aten.sub, aten.add, aten.div, aten._to_copy, aten.arange, aten.clamp, aten._unsafe_index]
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_div_mul_sub_2.run(buf32, buf4, buf9, buf14, buf19, arg2_1, 256, grid=grid(256), stream=stream0)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg2_1
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf14
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf19
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf4
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf9
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf32, )
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg1_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg2_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([arg0_1, arg1_1, arg2_1])
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0204 13:45:22.088000 2080206 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 13:45:22.097000 2080206 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: /tmp/torchinductor_sahanp/xk/cxkqkhexvij2s7xqcv4sgnanodvizqxagtkcpz43qpcmvz5yaybd.py
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['3_inference']
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/5q/c5qg6oc54ns76rvzf5gxxyj6luemxzvlfwfiadylqueqhahwxhby.py
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [mul, kernel_x, x, kernel_x_1, x_2, mul_2], Original ATen: [aten.mul, aten.full, aten.convolution]
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   kernel_x => full_default
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   kernel_x_1 => full_default_2
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul => mul
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_2 => mul_2
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   x => convolution
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   x_2 => convolution_2
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%arg0_1, %arg1_1), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %full_default : [num_users=1] = call_function[target=torch.ops.aten.full.default](args = ([4, 1, 1, 9], 0.1111111111111111), kwargs = {dtype: torch.float32, layout: torch.strided, device: cuda:0, pin_memory: False})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convolution : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%arg0_1, %full_default, None, [1, 1], [0, 4], [1, 1], False, [0, 0], 4), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %full_default_2 : [num_users=1] = call_function[target=torch.ops.aten.full.default](args = ([4, 1, 1, 9], 0.1111111111111111), kwargs = {dtype: torch.float32, layout: torch.strided, device: cuda:0, pin_memory: False})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convolution_2 : [num_users=1] = call_function[target=torch.ops.aten.convolution.default](args = (%arg1_1, %full_default_2, None, [1, 1], [0, 4], [1, 1], False, [0, 0], 4), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_2 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%arg0_1, %arg0_1), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_convolution_full_mul_0 = async_compile.triton('triton_poi_fused_convolution_full_mul_0', '''
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'y': 16, 'x': 16}, tile_hint=TileHint.DEFAULT,
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'out_ptr0': '*fp32', 'out_ptr1': '*fp32', 'out_ptr2': '*fp32', 'out_ptr3': '*fp32', 'ynumel': 'i32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_convolution_full_mul_0', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_convolution_full_mul_0(in_ptr0, in_ptr1, out_ptr0, out_ptr1, out_ptr2, out_ptr3, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     ynumel = 16
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 16
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     yoffset = tl.program_id(1) * YBLOCK
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     ymask = yindex < ynumel
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     y3 = yindex
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     y0 = (yindex % 4)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     y1 = yindex // 4
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x2 + 16*y3), xmask & ymask)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr1 + (x2 + 16*y3), xmask & ymask)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tmp0 * tmp1
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp0 * tmp0
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (y0 + 4*x2 + 64*y1), tmp2, xmask & ymask)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr1 + (y0 + 4*x2 + 64*y1), tmp0, xmask & ymask)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr2 + (y0 + 4*x2 + 64*y1), tmp3, xmask & ymask)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr3 + (y0 + 4*x2 + 64*y1), tmp1, xmask & ymask)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/db/cdb3iir6oyoirtm4g4zhhd3a5ipp2ranm5fq7y6bzed5vbrlriw4.py
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [kernel_x_2], Original ATen: [aten.full]
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   kernel_x_2 => full_default_4
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %full_default_4 : [num_users=1] = call_function[target=torch.ops.aten.full.default](args = ([4, 1, 1, 9], 0.1111111111111111), kwargs = {dtype: torch.float32, layout: torch.strided, device: cuda:0, pin_memory: False})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_full_1 = async_compile.triton('triton_poi_fused_full_1', '''
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64}, 
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0,), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_full_1', 'mutated_arg_names': [], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 0, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_full_1(out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 36
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = xindex
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = 0.1111111111111111
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x0), tmp0, xmask)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/lz/clzdozvaaxqyyce4hs7j5mvezwwj2rb3hpgfhosc2i455pcgzoaa.py
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [mul_1, cov_xy, mul_3, var_x, add, A, A_1, mul_5, mul_4, b, b_1, add_1], Original ATen: [aten.mul, aten.sub, aten.add, aten.div, aten._to_copy, aten.arange, aten.clamp, aten._unsafe_index]
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   A => div
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   A_1 => _unsafe_index, _unsafe_index_1, _unsafe_index_2, _unsafe_index_3, add_3, add_5, add_6, add_7, clamp_max_2, clamp_max_3, clamp_min_1, clamp_min_2, clamp_min_3, convert_element_type_1, convert_element_type_2, convert_element_type_3, iota_1, mul_6, mul_7, mul_8, mul_9, sub_4, sub_5, sub_6, sub_7, sub_8, sub_9
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add => add
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add_1 => add_15
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   b => sub_2
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   b_1 => _unsafe_index_4, _unsafe_index_5, _unsafe_index_6, _unsafe_index_7, add_10, add_12, add_13, add_14, clamp_max_6, clamp_max_7, clamp_min_5, clamp_min_6, clamp_min_7, convert_element_type_5, convert_element_type_6, convert_element_type_7, iota_3, mul_11, mul_12, mul_13, mul_14, sub_11, sub_12, sub_13, sub_14, sub_15, sub_16
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   cov_xy => sub
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_1 => mul_1
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_3 => mul_3
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_4 => mul_4
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_5 => mul_15
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   var_x => sub_1
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_1, %convolution_3), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%convolution_5, %mul_1), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_3 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%convolution_1, %convolution_1), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_1 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%convolution_7, %mul_3), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%sub_1, 1e-05), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %div : [num_users=5] = call_function[target=torch.ops.aten.div.Tensor](args = (%sub, %add), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convert_element_type_1 : [num_users=4] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%view, torch.int64), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %iota_1 : [num_users=1] = call_function[target=torch.ops.prims.iota.default](args = (4,), kwargs = {start: 0, step: 1, dtype: torch.int64, device: cuda:0, requires_grad: False})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convert_element_type_2 : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%iota_1, torch.float32), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_3 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convert_element_type_2, 0.5), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_6 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_3, 1.0), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_4 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%mul_6, 0.5), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_min_1 : [num_users=2] = call_function[target=torch.ops.aten.clamp_min.default](args = (%sub_4, 0.0), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convert_element_type_3 : [num_users=4] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%clamp_min_1, torch.int64), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %_unsafe_index_3 : [num_users=1] = call_function[target=torch.ops.aten._unsafe_index.Tensor](args = (%div, [None, None, %clamp_max, %clamp_max_1]), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %_unsafe_index_2 : [num_users=2] = call_function[target=torch.ops.aten._unsafe_index.Tensor](args = (%div, [None, None, %clamp_max, %convert_element_type_3]), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_7 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%_unsafe_index_3, %_unsafe_index_2), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_5 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%clamp_min_1, %convert_element_type_3), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_min_2 : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%sub_5, 0.0), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_max_2 : [num_users=2] = call_function[target=torch.ops.aten.clamp_max.default](args = (%clamp_min_2, 1.0), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_8 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_7, %clamp_max_2), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_6 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%_unsafe_index_2, %mul_8), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %_unsafe_index_1 : [num_users=1] = call_function[target=torch.ops.aten._unsafe_index.Tensor](args = (%div, [None, None, %convert_element_type_1, %clamp_max_1]), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %_unsafe_index : [num_users=2] = call_function[target=torch.ops.aten._unsafe_index.Tensor](args = (%div, [None, None, %convert_element_type_1, %convert_element_type_3]), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_6 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%_unsafe_index_1, %_unsafe_index), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_7 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_6, %clamp_max_2), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_5 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%_unsafe_index, %mul_7), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_9 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_6, %add_5), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_8 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%view, %convert_element_type_1), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_min_3 : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%sub_8, 0.0), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_max_3 : [num_users=1] = call_function[target=torch.ops.aten.clamp_max.default](args = (%clamp_min_3, 1.0), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_9 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_9, %clamp_max_3), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_7 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_5, %mul_9), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_15 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_7, %arg2_1), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_4 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%div, %convolution_1), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_2 : [num_users=4] = call_function[target=torch.ops.aten.sub.Tensor](args = (%convolution_3, %mul_4), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convert_element_type_5 : [num_users=4] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%view_2, torch.int64), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %iota_3 : [num_users=1] = call_function[target=torch.ops.prims.iota.default](args = (4,), kwargs = {start: 0, step: 1, dtype: torch.int64, device: cuda:0, requires_grad: False})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convert_element_type_6 : [num_users=1] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%iota_3, torch.float32), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_10 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%convert_element_type_6, 0.5), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_11 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%add_10, 1.0), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_11 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%mul_11, 0.5), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_min_5 : [num_users=2] = call_function[target=torch.ops.aten.clamp_min.default](args = (%sub_11, 0.0), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %convert_element_type_7 : [num_users=4] = call_function[target=torch.ops.prims.convert_element_type.default](args = (%clamp_min_5, torch.int64), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %_unsafe_index_7 : [num_users=1] = call_function[target=torch.ops.aten._unsafe_index.Tensor](args = (%sub_2, [None, None, %clamp_max_4, %clamp_max_5]), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %_unsafe_index_6 : [num_users=2] = call_function[target=torch.ops.aten._unsafe_index.Tensor](args = (%sub_2, [None, None, %clamp_max_4, %convert_element_type_7]), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_14 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%_unsafe_index_7, %_unsafe_index_6), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_12 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%clamp_min_5, %convert_element_type_7), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_min_6 : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%sub_12, 0.0), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_max_6 : [num_users=2] = call_function[target=torch.ops.aten.clamp_max.default](args = (%clamp_min_6, 1.0), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_13 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_14, %clamp_max_6), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_13 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%_unsafe_index_6, %mul_13), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %_unsafe_index_5 : [num_users=1] = call_function[target=torch.ops.aten._unsafe_index.Tensor](args = (%sub_2, [None, None, %convert_element_type_5, %clamp_max_5]), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %_unsafe_index_4 : [num_users=2] = call_function[target=torch.ops.aten._unsafe_index.Tensor](args = (%sub_2, [None, None, %convert_element_type_5, %convert_element_type_7]), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_13 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%_unsafe_index_5, %_unsafe_index_4), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_12 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_13, %clamp_max_6), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_12 : [num_users=2] = call_function[target=torch.ops.aten.add.Tensor](args = (%_unsafe_index_4, %mul_12), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_16 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%add_13, %add_12), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_15 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%view_2, %convert_element_type_5), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_min_7 : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%sub_15, 0.0), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_max_7 : [num_users=1] = call_function[target=torch.ops.aten.clamp_max.default](args = (%clamp_min_7, 1.0), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_14 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_16, %clamp_max_7), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_14 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%add_12, %mul_14), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_15 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_15, %add_14), kwargs = {})
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_div_mul_sub_2 = async_compile.triton('triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_div_mul_sub_2', '''
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 256}, 
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'in_ptr3': '*fp32', 'in_ptr4': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_div_mul_sub_2', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_div_mul_sub_2(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, xnumel, XBLOCK : tl.constexpr):
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 256
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = ((xindex // 4) % 4)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 4)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = ((xindex // 16) % 4)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex // 64
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x5 = xindex
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp97 = tl.load(in_ptr4 + (x5), xmask)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = x1
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tmp0.to(tl.float32)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = 0.5
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp1 + tmp2
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = 1.0
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp3 * tmp4
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tmp5 - tmp2
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = 0.0
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = triton_helpers.maximum(tmp6, tmp7)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tmp8.to(tl.int32)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = tl.full([1], 1, tl.int64)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp9 + tmp10
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tl.full([1], 3, tl.int64)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = triton_helpers.minimum(tmp11, tmp12)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = x0
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = tmp14.to(tl.float32)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = tmp15 + tmp2
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = tmp16 * tmp4
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tmp17 - tmp2
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = triton_helpers.maximum(tmp18, tmp7)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tmp19.to(tl.int32)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tmp20 + tmp10
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = triton_helpers.minimum(tmp21, tmp12)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = tl.load(in_ptr0 + (x2 + 4*tmp22 + 16*tmp13 + 64*x3), xmask, eviction_policy='evict_last')
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tl.load(in_ptr1 + (x2 + 4*tmp22 + 16*tmp13 + 64*x3), xmask, eviction_policy='evict_last')
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = tl.load(in_ptr2 + (x2 + 4*tmp22 + 16*tmp13 + 64*x3), xmask, eviction_policy='evict_last')
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tmp24 * tmp25
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tmp23 - tmp26
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tl.load(in_ptr3 + (x2 + 4*tmp22 + 16*tmp13 + 64*x3), xmask, eviction_policy='evict_last')
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = tmp24 * tmp24
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = tmp28 - tmp29
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = 1e-05
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = tmp30 + tmp31
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp33 = tmp27 / tmp32
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp34 = tl.load(in_ptr0 + (x2 + 4*tmp20 + 16*tmp13 + 64*x3), xmask, eviction_policy='evict_last')
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp35 = tl.load(in_ptr1 + (x2 + 4*tmp20 + 16*tmp13 + 64*x3), xmask, eviction_policy='evict_last')
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp36 = tl.load(in_ptr2 + (x2 + 4*tmp20 + 16*tmp13 + 64*x3), xmask, eviction_policy='evict_last')
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp37 = tmp35 * tmp36
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp38 = tmp34 - tmp37
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp39 = tl.load(in_ptr3 + (x2 + 4*tmp20 + 16*tmp13 + 64*x3), xmask, eviction_policy='evict_last')
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp40 = tmp35 * tmp35
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp41 = tmp39 - tmp40
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp42 = tmp41 + tmp31
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp43 = tmp38 / tmp42
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp44 = tl.load(in_ptr0 + (x2 + 4*tmp22 + 16*tmp9 + 64*x3), xmask, eviction_policy='evict_last')
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp45 = tl.load(in_ptr1 + (x2 + 4*tmp22 + 16*tmp9 + 64*x3), xmask, eviction_policy='evict_last')
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp46 = tl.load(in_ptr2 + (x2 + 4*tmp22 + 16*tmp9 + 64*x3), xmask, eviction_policy='evict_last')
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp47 = tmp45 * tmp46
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp48 = tmp44 - tmp47
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp49 = tl.load(in_ptr3 + (x2 + 4*tmp22 + 16*tmp9 + 64*x3), xmask, eviction_policy='evict_last')
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp50 = tmp45 * tmp45
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp51 = tmp49 - tmp50
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp52 = tmp51 + tmp31
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp53 = tmp48 / tmp52
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp54 = tl.load(in_ptr0 + (x2 + 4*tmp20 + 16*tmp9 + 64*x3), xmask, eviction_policy='evict_last')
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp55 = tl.load(in_ptr1 + (x2 + 4*tmp20 + 16*tmp9 + 64*x3), xmask, eviction_policy='evict_last')
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp56 = tl.load(in_ptr2 + (x2 + 4*tmp20 + 16*tmp9 + 64*x3), xmask, eviction_policy='evict_last')
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp57 = tmp55 * tmp56
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp58 = tmp54 - tmp57
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp59 = tl.load(in_ptr3 + (x2 + 4*tmp20 + 16*tmp9 + 64*x3), xmask, eviction_policy='evict_last')
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp60 = tmp55 * tmp55
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp61 = tmp59 - tmp60
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp62 = tmp61 + tmp31
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp63 = tmp58 / tmp62
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp64 = tmp53 - tmp63
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp65 = tmp20.to(tl.float32)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp66 = tmp19 - tmp65
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp67 = triton_helpers.maximum(tmp66, tmp7)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp68 = triton_helpers.minimum(tmp67, tmp4)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp69 = tmp64 * tmp68
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp70 = tmp63 + tmp69
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp71 = tmp33 * tmp24
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp72 = tmp25 - tmp71
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp73 = tmp43 * tmp35
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp74 = tmp36 - tmp73
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp75 = tmp53 * tmp45
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp76 = tmp46 - tmp75
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp77 = tmp63 * tmp55
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp78 = tmp56 - tmp77
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp79 = tmp76 - tmp78
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp80 = tmp79 * tmp68
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp81 = tmp78 + tmp80
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp82 = tmp33 - tmp43
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp83 = tmp82 * tmp68
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp84 = tmp43 + tmp83
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp85 = tmp84 - tmp70
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp86 = tmp9.to(tl.float32)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp87 = tmp8 - tmp86
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp88 = triton_helpers.maximum(tmp87, tmp7)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp89 = triton_helpers.minimum(tmp88, tmp4)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp90 = tmp85 * tmp89
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp91 = tmp72 - tmp74
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp92 = tmp91 * tmp68
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp93 = tmp74 + tmp92
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp94 = tmp93 - tmp81
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp95 = tmp94 * tmp89
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp96 = tmp70 + tmp90
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp98 = tmp96 * tmp97
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp99 = tmp81 + tmp95
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp100 = tmp98 + tmp99
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x5), tmp100, xmask)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1, arg1_1, arg2_1 = args
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg0_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg1_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(arg2_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((4, 4, 4, 4), (64, 1, 16, 4), torch.float32)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf6 = empty_strided_cuda((4, 4, 4, 4), (64, 1, 16, 4), torch.float32)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf15 = empty_strided_cuda((4, 4, 4, 4), (64, 1, 16, 4), torch.float32)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf11 = empty_strided_cuda((4, 4, 4, 4), (64, 1, 16, 4), torch.float32)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mul, kernel_x, x, kernel_x_1, x_2, mul_2], Original ATen: [aten.mul, aten.full, aten.convolution]
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_convolution_full_mul_0.run(arg0_1, arg1_1, buf0, buf6, buf15, buf11, 16, 16, grid=grid(16, 16), stream=stream0)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg0_1
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg1_1
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = empty_strided_cuda((4, 1, 1, 9), (9, 9, 9, 1), torch.float32)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [kernel_x_2], Original ATen: [aten.full]
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_full_1.run(buf1, 36, grid=grid(36), stream=stream0)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mul, kernel_x_2, x_4], Original ATen: [aten.mul, aten.full, aten.convolution]
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = extern_kernels.convolution(buf0, buf1, stride=(1, 1), padding=(0, 4), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=4, bias=None)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf2, (4, 4, 4, 4), (64, 1, 16, 4))
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf0
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = reinterpret_tensor(buf1, (4, 1, 9, 1), (9, 9, 1, 1), 0); del buf1  # reuse
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [kernel_y_2], Original ATen: [aten.full]
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_full_1.run(buf3, 36, grid=grid(36), stream=stream0)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [kernel_y_2, x_5], Original ATen: [aten.full, aten.convolution]
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf4 = extern_kernels.convolution(buf2, buf3, stride=(1, 1), padding=(4, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=4, bias=None)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf4, (4, 4, 4, 4), (64, 1, 16, 4))
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf2
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf5 = reinterpret_tensor(buf3, (4, 1, 1, 9), (9, 9, 9, 1), 0); del buf3  # reuse
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [kernel_x], Original ATen: [aten.full]
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_full_1.run(buf5, 36, grid=grid(36), stream=stream0)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [kernel_x, x], Original ATen: [aten.full, aten.convolution]
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf7 = extern_kernels.convolution(buf6, buf5, stride=(1, 1), padding=(0, 4), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=4, bias=None)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf7, (4, 4, 4, 4), (64, 1, 16, 4))
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf6
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf8 = reinterpret_tensor(buf5, (4, 1, 9, 1), (9, 9, 1, 1), 0); del buf5  # reuse
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [kernel_y], Original ATen: [aten.full]
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_full_1.run(buf8, 36, grid=grid(36), stream=stream0)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [kernel_y, x_1], Original ATen: [aten.full, aten.convolution]
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf9 = extern_kernels.convolution(buf7, buf8, stride=(1, 1), padding=(4, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=4, bias=None)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf9, (4, 4, 4, 4), (64, 1, 16, 4))
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf7
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf10 = reinterpret_tensor(buf8, (4, 1, 1, 9), (9, 9, 9, 1), 0); del buf8  # reuse
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [kernel_x_1], Original ATen: [aten.full]
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_full_1.run(buf10, 36, grid=grid(36), stream=stream0)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [kernel_x_1, x_2], Original ATen: [aten.full, aten.convolution]
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf12 = extern_kernels.convolution(buf11, buf10, stride=(1, 1), padding=(0, 4), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=4, bias=None)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf12, (4, 4, 4, 4), (64, 1, 16, 4))
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf11
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf13 = reinterpret_tensor(buf10, (4, 1, 9, 1), (9, 9, 1, 1), 0); del buf10  # reuse
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [kernel_y_1], Original ATen: [aten.full]
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_full_1.run(buf13, 36, grid=grid(36), stream=stream0)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [kernel_y_1, x_3], Original ATen: [aten.full, aten.convolution]
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf14 = extern_kernels.convolution(buf12, buf13, stride=(1, 1), padding=(4, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=4, bias=None)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf14, (4, 4, 4, 4), (64, 1, 16, 4))
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf12
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf16 = reinterpret_tensor(buf13, (4, 1, 1, 9), (9, 9, 9, 1), 0); del buf13  # reuse
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [kernel_x_3], Original ATen: [aten.full]
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_full_1.run(buf16, 36, grid=grid(36), stream=stream0)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mul_2, kernel_x_3, x_6], Original ATen: [aten.mul, aten.full, aten.convolution]
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf17 = extern_kernels.convolution(buf15, buf16, stride=(1, 1), padding=(0, 4), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=4, bias=None)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf17, (4, 4, 4, 4), (64, 1, 16, 4))
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf15
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf18 = reinterpret_tensor(buf16, (4, 1, 9, 1), (9, 9, 1, 1), 0); del buf16  # reuse
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [kernel_y_3], Original ATen: [aten.full]
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_full_1.run(buf18, 36, grid=grid(36), stream=stream0)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [kernel_y_3, x_7], Original ATen: [aten.full, aten.convolution]
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf19 = extern_kernels.convolution(buf17, buf18, stride=(1, 1), padding=(4, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=4, bias=None)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         assert_size_stride(buf19, (4, 4, 4, 4), (64, 1, 16, 4))
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf18
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf22 = reinterpret_tensor(buf17, (4, 4, 4, 4), (64, 16, 4, 1), 0); del buf17  # reuse
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf23 = buf22; del buf22  # reuse
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf24 = buf23; del buf23  # reuse
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf32 = buf24; del buf24  # reuse
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mul_1, cov_xy, mul_3, var_x, add, A, A_1, mul_5, mul_4, b, b_1, add_1], Original ATen: [aten.mul, aten.sub, aten.add, aten.div, aten._to_copy, aten.arange, aten.clamp, aten._unsafe_index]
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_div_mul_sub_2.run(buf32, buf4, buf9, buf14, buf19, arg2_1, 256, grid=grid(256), stream=stream0)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del arg2_1
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf14
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf19
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf4
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf9
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf32, )
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg0_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg1_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     arg2_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([arg0_1, arg1_1, arg2_1])
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0205 18:35:22.316000 136672 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:35:22.325000 136672 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: inductor_cache/pn/cpno2omufs3csi3apaxqh5gkeebckl7pcn76wphbslz7f5q52rx7.py
