V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['0_forward']
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [mean, mul, mean_1, mul_1, sub, varx, add, varx_1, sub_1, x, mul_3, add_1], Original ATen: [aten.mean, aten.mul, aten.sub, aten.clamp, aten.add, aten.rsqrt]
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add => add
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add_1 => add_1
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mean => mean
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mean_1 => mean_1
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul => mul
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_1 => mul_1
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_3 => mul_4
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub => sub
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub_1 => sub_1
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   varx => clamp_min
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   varx_1 => rsqrt
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   x => mul_2
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean : [num_users=1] = call_function[target=torch.ops.aten.mean.dim](args = (%view, [2]), kwargs = {})
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view, %view), kwargs = {})
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean_1 : [num_users=1] = call_function[target=torch.ops.aten.mean.dim](args = (%mul, [2]), kwargs = {})
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_1, %view_1), kwargs = {})
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%view_2, %mul_1), kwargs = {})
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_min : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%sub, 0), kwargs = {})
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%clamp_min, 1e-08), kwargs = {})
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %rsqrt : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add,), kwargs = {})
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_1 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%primals_1, %view_1), kwargs = {})
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_2 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_1, %rsqrt), kwargs = {})
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_4 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_5, %mul_2), kwargs = {})
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_1 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_4, %view_6), kwargs = {})
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused_add_clamp_mean_mul_rsqrt_sub_0 = async_compile.triton('triton_per_fused_add_clamp_mean_mul_rsqrt_sub_0', '''
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 16, 'r': 16},
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_out_ptr1': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_clamp_mean_mul_rsqrt_sub_0', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 2, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused_add_clamp_mean_mul_rsqrt_sub_0(in_out_ptr0, in_out_ptr1, in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 16
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 16
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 16
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[None, :]
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r1 = rindex
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = xindex
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = (xindex % 4)
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex // 4
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r1 + 16*x0), xmask, other=0.0)
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tl.load(in_ptr1 + (x2 + 8*x3), xmask, eviction_policy='evict_last')
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tl.load(in_ptr2 + (x2), xmask, eviction_policy='evict_last')
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tl.load(in_ptr1 + (4 + x2 + 8*x3), xmask, eviction_policy='evict_last')
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = tl.load(in_ptr2 + (4 + x2), xmask, eviction_policy='evict_last')
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.where(xmask, tmp1, 0)
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.sum(tmp3, 1)[:, None]
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp0 * tmp0
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tl.where(xmask, tmp6, 0)
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tl.sum(tmp8, 1)[:, None]
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = 16.0
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp4 / tmp10
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tmp9 / tmp10
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp11 * tmp11
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tmp12 - tmp13
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = 0.0
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = triton_helpers.maximum(tmp14, tmp15)
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = 1e-08
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tmp16 + tmp17
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = libdevice.rsqrt(tmp18)
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tmp20 + tmp21
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = 0.7071067811865476
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tmp22 * tmp23
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = tmp0 - tmp11
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tmp25 * tmp19
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tmp24 * tmp26
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = tmp28 + tmp29
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = tmp30 * tmp23
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = tmp27 + tmp31
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x0), tmp11, xmask)
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr1 + (x0), tmp19, xmask)
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (r1 + 16*x0), tmp32, xmask)
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1, primals_2, primals_3, primals_4 = args
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_2, (8, 4), (4, 1))
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_3, (8, ), (1, ))
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_4, (4, 4), (4, 1))
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf4 = empty_strided_cuda((4, 8), (8, 1), torch.float32)
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [x_1], Original ATen: [aten.addmm]
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         extern_kernels.mm(primals_4, reinterpret_tensor(primals_2, (4, 8), (1, 4), 0), out=buf4)
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_2
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((4, 4), (4, 1), torch.float32)
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = empty_strided_cuda((4, 4), (4, 1), torch.float32)
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = buf0; del buf0  # reuse
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = reinterpret_tensor(buf2, (4, 4, 1, 1), (4, 1, 1, 1), 0); del buf2  # reuse
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf5 = empty_strided_cuda((4, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mean, mul, mean_1, mul_1, sub, varx, add, varx_1, sub_1, x, mul_3, add_1], Original ATen: [aten.mean, aten.mul, aten.sub, aten.clamp, aten.add, aten.rsqrt]
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused_add_clamp_mean_mul_rsqrt_sub_0.run(buf1, buf3, primals_1, buf4, primals_3, buf5, 16, 16, grid=grid(16), stream=stream0)
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf4
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_3
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf5, primals_1, primals_4, reinterpret_tensor(buf1, (4, 4, 1, 1), (4, 1, 1, 1), 0), buf3, )
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_2 = rand_strided((8, 4), (4, 1), device='cuda:0', dtype=torch.float32)
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_3 = rand_strided((8, ), (1, ), device='cuda:0', dtype=torch.float32)
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_4 = rand_strided((4, 4), (4, 1), device='cuda:0', dtype=torch.float32)
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([primals_1, primals_2, primals_3, primals_4])
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0204 16:14:44.321000 2701636 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 16:14:44.324000 2701636 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: /tmp/torchinductor_sahanp/j2/cj2pr37ds5b45syuvyr4drodpox7ix56ssxs2juonf3kopr4ofbo.py
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['0_forward']
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [mean, mul, mean_1, mul_1, sub, varx, add, varx_1, sub_1, x, mul_3, add_1], Original ATen: [aten.mean, aten.mul, aten.sub, aten.clamp, aten.add, aten.rsqrt]
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add => add
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   add_1 => add_1
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mean => mean
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mean_1 => mean_1
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul => mul
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_1 => mul_1
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   mul_3 => mul_4
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub => sub
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   sub_1 => sub_1
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   varx => clamp_min
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   varx_1 => rsqrt
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   x => mul_2
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean : [num_users=1] = call_function[target=torch.ops.aten.mean.dim](args = (%view, [2]), kwargs = {})
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view, %view), kwargs = {})
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mean_1 : [num_users=1] = call_function[target=torch.ops.aten.mean.dim](args = (%mul, [2]), kwargs = {})
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_1 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_1, %view_1), kwargs = {})
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%view_2, %mul_1), kwargs = {})
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %clamp_min : [num_users=1] = call_function[target=torch.ops.aten.clamp_min.default](args = (%sub, 0), kwargs = {})
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%clamp_min, 1e-08), kwargs = {})
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %rsqrt : [num_users=2] = call_function[target=torch.ops.aten.rsqrt.default](args = (%add,), kwargs = {})
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub_1 : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%primals_1, %view_1), kwargs = {})
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_2 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%sub_1, %rsqrt), kwargs = {})
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %mul_4 : [num_users=1] = call_function[target=torch.ops.aten.mul.Tensor](args = (%view_5, %mul_2), kwargs = {})
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %add_1 : [num_users=1] = call_function[target=torch.ops.aten.add.Tensor](args = (%mul_4, %view_6), kwargs = {})
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_per_fused_add_clamp_mean_mul_rsqrt_sub_0 = async_compile.triton('triton_per_fused_add_clamp_mean_mul_rsqrt_sub_0', '''
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.persistent_reduction(
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 16, 'r': 16},
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     reduction_hint=ReductionHint.INNER,
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_out_ptr1': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32', 'rnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3, 4, 5, 6, 7), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_add_clamp_mean_mul_rsqrt_sub_0', 'mutated_arg_names': ['in_out_ptr0', 'in_out_ptr1'], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 2, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_per_fused_add_clamp_mean_mul_rsqrt_sub_0(in_out_ptr0, in_out_ptr1, in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 16
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rnumel = 16
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     RBLOCK: tl.constexpr = 16
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rindex = tl.arange(0, RBLOCK)[None, :]
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     roffset = 0
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     r1 = rindex
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = xindex
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = (xindex % 4)
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x3 = xindex // 4
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (r1 + 16*x0), xmask, other=0.0)
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp20 = tl.load(in_ptr1 + (x2 + 8*x3), xmask, eviction_policy='evict_last')
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp21 = tl.load(in_ptr2 + (x2), xmask, eviction_policy='evict_last')
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp28 = tl.load(in_ptr1 + (4 + x2 + 8*x3), xmask, eviction_policy='evict_last')
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp29 = tl.load(in_ptr2 + (4 + x2), xmask, eviction_policy='evict_last')
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tl.where(xmask, tmp1, 0)
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.sum(tmp3, 1)[:, None]
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp0 * tmp0
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tl.where(xmask, tmp6, 0)
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tl.sum(tmp8, 1)[:, None]
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp10 = 16.0
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp11 = tmp4 / tmp10
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp12 = tmp9 / tmp10
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp13 = tmp11 * tmp11
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp14 = tmp12 - tmp13
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp15 = 0.0
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp16 = triton_helpers.maximum(tmp14, tmp15)
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp17 = 1e-08
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp18 = tmp16 + tmp17
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp19 = libdevice.rsqrt(tmp18)
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp22 = tmp20 + tmp21
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp23 = 0.7071067811865476
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp24 = tmp22 * tmp23
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp25 = tmp0 - tmp11
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp26 = tmp25 * tmp19
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp27 = tmp24 * tmp26
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp30 = tmp28 + tmp29
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp31 = tmp30 * tmp23
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp32 = tmp27 + tmp31
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr0 + (x0), tmp11, xmask)
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.debug_barrier()
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(in_out_ptr1 + (x0), tmp19, xmask)
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (r1 + 16*x0), tmp32, xmask)
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1, primals_2, primals_3, primals_4 = args
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_2, (8, 4), (4, 1))
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_3, (8, ), (1, ))
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_4, (4, 4), (4, 1))
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf4 = empty_strided_cuda((4, 8), (8, 1), torch.float32)
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [x_1], Original ATen: [aten.addmm]
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         extern_kernels.mm(primals_4, reinterpret_tensor(primals_2, (4, 8), (1, 4), 0), out=buf4)
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_2
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((4, 4), (4, 1), torch.float32)
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = empty_strided_cuda((4, 4), (4, 1), torch.float32)
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = buf0; del buf0  # reuse
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = reinterpret_tensor(buf2, (4, 4, 1, 1), (4, 1, 1, 1), 0); del buf2  # reuse
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf5 = empty_strided_cuda((4, 4, 4, 4), (64, 16, 4, 1), torch.float32)
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [mean, mul, mean_1, mul_1, sub, varx, add, varx_1, sub_1, x, mul_3, add_1], Original ATen: [aten.mean, aten.mul, aten.sub, aten.clamp, aten.add, aten.rsqrt]
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_per_fused_add_clamp_mean_mul_rsqrt_sub_0.run(buf1, buf3, primals_1, buf4, primals_3, buf5, 16, 16, grid=grid(16), stream=stream0)
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf4
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_3
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf5, primals_1, primals_4, reinterpret_tensor(buf1, (4, 4, 1, 1), (4, 1, 1, 1), 0), buf3, )
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_2 = rand_strided((8, 4), (4, 1), device='cuda:0', dtype=torch.float32)
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_3 = rand_strided((8, ), (1, ), device='cuda:0', dtype=torch.float32)
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_4 = rand_strided((4, 4), (4, 1), device='cuda:0', dtype=torch.float32)
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([primals_1, primals_2, primals_3, primals_4])
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0205 21:03:44.352000 149549 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 21:03:44.355000 149549 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: inductor_cache/ef/cefl6lhtdnnmph2kaloq7cavummsz64vh6eoqkyywpccwi65a32f.py
