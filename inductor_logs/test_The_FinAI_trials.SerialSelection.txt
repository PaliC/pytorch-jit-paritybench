V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['1_forward']
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/t6/ct6ljzmgo3rkymto3gvwkblrgaixnfyqfp7pxml73dq7pjac3bgi.py
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [repeat], Original ATen: [aten.repeat]
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   repeat => repeat
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %repeat : [num_users=1] = call_function[target=torch.ops.aten.repeat.default](args = (%unsqueeze, [16, 1, 1]), kwargs = {})
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_repeat_0 = async_compile.triton('triton_poi_fused_repeat_0', '''
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64}, 
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_repeat_0', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_repeat_0(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 64
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 4)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x0), xmask, eviction_policy='evict_last')
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x2), tmp0, xmask)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/oa/coaysow6vdr3sv2lgdavppmcfjizdp5cfe6djy3mplhxnu4m7pwh.py
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [first_logits], Original ATen: [aten._softmax]
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   first_logits => amax, exp, sub
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %amax : [num_users=1] = call_function[target=torch.ops.aten.amax.default](args = (%bmm, [1], True), kwargs = {})
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%bmm, %amax), kwargs = {})
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %exp : [num_users=2] = call_function[target=torch.ops.aten.exp.default](args = (%sub,), kwargs = {})
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused__softmax_1 = async_compile.triton('triton_poi_fused__softmax_1', '''
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64}, 
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__softmax_1', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused__softmax_1(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 64
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = xindex // 4
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x2), xmask)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr0 + (4*x1), xmask, eviction_policy='evict_last')
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tl.load(in_ptr0 + (1 + 4*x1), xmask, eviction_policy='evict_last')
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.load(in_ptr0 + (2 + 4*x1), xmask, eviction_policy='evict_last')
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tl.load(in_ptr0 + (3 + 4*x1), xmask, eviction_policy='evict_last')
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = triton_helpers.maximum(tmp1, tmp2)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = triton_helpers.maximum(tmp3, tmp4)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = triton_helpers.maximum(tmp5, tmp6)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp0 - tmp7
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tl_math.exp(tmp8)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x2), tmp9, xmask)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: /tmp/torchinductor_sahanp/gi/cgityplu7uwf4bpcpbcyhklrydxy7ckspqhte6hmeimxf7d4nxiq.py
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [first_logits], Original ATen: [aten._softmax]
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   first_logits => div, sum_1
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sum_1 : [num_users=1] = call_function[target=torch.ops.aten.sum.dim_IntList](args = (%exp, [1], True), kwargs = {})
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %div : [num_users=3] = call_function[target=torch.ops.aten.div.Tensor](args = (%exp, %sum_1), kwargs = {})
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused__softmax_2 = async_compile.triton('triton_poi_fused__softmax_2', '''
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64}, 
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__softmax_2', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused__softmax_2(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 64
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = xindex // 4
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x2), xmask)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr0 + (4*x1), xmask, eviction_policy='evict_last')
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tl.load(in_ptr0 + (1 + 4*x1), xmask, eviction_policy='evict_last')
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.load(in_ptr0 + (2 + 4*x1), xmask, eviction_policy='evict_last')
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tl.load(in_ptr0 + (3 + 4*x1), xmask, eviction_policy='evict_last')
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp1 + tmp2
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp3 + tmp4
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tmp5 + tmp6
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp0 / tmp7
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x2), tmp8, xmask)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] cpp_fused_triu_indices_3 = async_compile.cpp_pybinding(['int64_t*', 'int64_t*'], '''
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #include "/tmp/torchinductor_sahanp/2r/c2rnilspx43ivnzu4uieul65kx65dfhfbptbh5og4wk6rqebuxoo.h"
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] extern "C"  void kernel(int64_t* out_ptr0,
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                        int64_t* out_ptr1)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] {
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     {
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         for(int64_t x0=static_cast<int64_t>(0L); x0<static_cast<int64_t>(6L); x0+=static_cast<int64_t>(16L))
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         {
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]             {
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                 if(C10_LIKELY(x0 >= static_cast<int64_t>(0L) && x0 < static_cast<int64_t>(6L)))
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                 {
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     for (int64_t x0_tail = static_cast<int64_t>(0L);x0_tail < static_cast<int64_t>(6L); x0_tail++)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     {
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp0 = x0_tail;
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp1 = c10::convert<double>(tmp0);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp2 = static_cast<double>(2.0);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp3 = decltype(tmp1)(tmp1 * tmp2);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp4 = static_cast<double>(12.25);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp5 = decltype(tmp4)(tmp4 - tmp3);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp6 = std::sqrt(tmp5);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp7 = static_cast<double>(3.5);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp8 = decltype(tmp7)(tmp7 - tmp6);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp9 = std::floor(tmp8);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp10 = c10::convert<int64_t>(tmp9);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp11 = static_cast<int64_t>(0);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         out_ptr0[static_cast<int64_t>(x0_tail)] = tmp12;
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     }
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                 }
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]             }
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         }
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     }
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     {
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         for(int64_t x0=static_cast<int64_t>(0L); x0<static_cast<int64_t>(6L); x0+=static_cast<int64_t>(16L))
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         {
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]             {
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                 if(C10_LIKELY(x0 >= static_cast<int64_t>(0L) && x0 < static_cast<int64_t>(6L)))
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                 {
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     for (int64_t x0_tail = static_cast<int64_t>(0L);x0_tail < static_cast<int64_t>(6L); x0_tail++)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     {
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp0 = x0_tail;
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp1 = c10::convert<double>(tmp0);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp2 = static_cast<double>(2.0);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp3 = decltype(tmp1)(tmp1 * tmp2);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp4 = static_cast<double>(12.25);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp5 = decltype(tmp4)(tmp4 - tmp3);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp6 = std::sqrt(tmp5);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp7 = static_cast<double>(3.5);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp8 = decltype(tmp7)(tmp7 - tmp6);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp9 = std::floor(tmp8);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp10 = static_cast<double>(5.0);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp11 = decltype(tmp10)(tmp10 - tmp9);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp12 = decltype(tmp11)(tmp11 * tmp9);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp13 = static_cast<double>(0.5);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp14 = decltype(tmp12)(tmp12 * tmp13);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp15 = decltype(tmp1)(tmp1 - tmp14);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp16 = std::floor(tmp15);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp17 = c10::convert<int64_t>(tmp16);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp18 = static_cast<int64_t>(1);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         auto tmp19 = decltype(tmp17)(tmp17 + tmp18);
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                         out_ptr1[static_cast<int64_t>(x0_tail)] = tmp19;
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     }
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                 }
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]             }
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         }
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     }
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] }
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''')
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1, primals_2 = args
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_2, (1, 4), (4, 1))
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((16, 4, 1), (4, 1, 64), torch.float32)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [repeat], Original ATen: [aten.repeat]
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_repeat_0.run(primals_2, buf0, 64, grid=grid(64), stream=stream0)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_2
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = empty_strided_cuda((16, 4, 1), (4, 1, 1), torch.float32)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [repeat, bmm], Original ATen: [aten.repeat, aten.bmm]
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         extern_kernels.bmm(reinterpret_tensor(primals_1, (16, 4, 4), (16, 4, 1), 0), buf0, out=buf1)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = buf0; del buf0  # reuse
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [first_logits], Original ATen: [aten._softmax]
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__softmax_1.run(buf1, buf2, 64, grid=grid(64), stream=stream0)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = buf1; del buf1  # reuse
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [first_logits], Original ATen: [aten._softmax]
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__softmax_2.run(buf2, buf3, 64, grid=grid(64), stream=stream0)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf4 = reinterpret_tensor(buf2, (16, 1, 4), (4, 4, 1), 0); del buf2  # reuse
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [output], Original ATen: [aten.bmm]
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         extern_kernels.bmm(reinterpret_tensor(buf3, (16, 1, 4), (4, 1, 1), 0), reinterpret_tensor(primals_1, (16, 4, 4), (16, 4, 1), 0), out=buf4)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf5 = empty_strided_cuda((16, 1, 4), (4, 4, 1), torch.float32)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [bmm_2], Original ATen: [aten.bmm]
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         extern_kernels.bmm(buf4, reinterpret_tensor(primals_1, (16, 4, 4), (16, 1, 4), 0), out=buf5)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf6 = reinterpret_tensor(buf4, (16, 1, 4), (4, 64, 1), 0); del buf4  # reuse
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [second_logits], Original ATen: [aten._softmax]
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__softmax_1.run(buf5, buf6, 64, grid=grid(64), stream=stream0)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf7 = buf5; del buf5  # reuse
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [second_logits], Original ATen: [aten._softmax]
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__softmax_2.run(buf6, buf7, 64, grid=grid(64), stream=stream0)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf6
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf8 = empty_strided_cuda((16, 4, 4), (16, 4, 1), torch.float32)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [pair_logits], Original ATen: [aten.bmm]
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         extern_kernels.bmm(buf3, buf7, out=buf8)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     buf11 = empty_strided_cpu((12, ), (1, ), torch.int64)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     buf9 = reinterpret_tensor(buf11, (6, ), (1, ), 0)  # alias
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     buf10 = reinterpret_tensor(buf11, (6, ), (1, ), 6)  # alias
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cpp_fused_triu_indices_3(buf9, buf10)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [triu_vector], Original ATen: [aten.index]
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf12 = torch.ops.aten.index.Tensor(buf8, [None, reinterpret_tensor(buf11, (6, ), (1, ), 0), reinterpret_tensor(buf11, (6, ), (1, ), 6)])
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf8
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf13 = buf12
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf12
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf13, buf3, reinterpret_tensor(primals_1, (16, 4, 4), (16, 1, 4), 0), buf7, reinterpret_tensor(buf11, (6, ), (1, ), 0), reinterpret_tensor(buf11, (6, ), (1, ), 6), )
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_2 = rand_strided((1, 4), (4, 1), device='cuda:0', dtype=torch.float32)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([primals_1, primals_2])
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0204 14:06:29.711000 3135577 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0204 14:06:29.717000 3135577 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: /tmp/torchinductor_sahanp/k3/ck3zsi3n2edufdeeubkxiklfan5s2iysluhhpfztk7v2arf63r5a.py
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] Output code: 
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # AOT ID: ['1_forward']
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from ctypes import c_void_p, c_long, c_int
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import torch
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import math
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import random
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import os
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import tempfile
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from math import inf, nan
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.hooks import run_intermediate_hooks
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.utils import maybe_profile
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.memory_planning import _align as align
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch import device, empty_strided
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.async_compile import AsyncCompile
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.select_algorithm import extern_kernels
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.codegen.multi_kernel import MultiKernelCall
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_heuristics import (
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid,
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     split_scan_grid,
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     grid_combo_kernels,
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     start_graph,
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     end_graph,
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cooperative_reduction_grid,
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._C import _cuda_getCurrentRawStream as get_raw_stream
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] aten = torch.ops.aten
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] inductor_ops = torch.ops.inductor
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] _quantized = torch.ops._quantized
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] assert_size_stride = torch._C._dynamo.guards.assert_size_stride
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cpu = torch._C._dynamo.guards._empty_strided_cpu
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_cuda = torch._C._dynamo.guards._empty_strided_cuda
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_xpu = torch._C._dynamo.guards._empty_strided_xpu
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] reinterpret_tensor = torch._C._dynamo.guards._reinterpret_tensor
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] alloc_from_pool = torch.ops.inductor._alloc_from_pool
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile = AsyncCompile()
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] empty_strided_p2p = torch._C._distributed_c10d._SymmetricMemory.empty_strided_p2p
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/t6/ct6ljzmgo3rkymto3gvwkblrgaixnfyqfp7pxml73dq7pjac3bgi.py
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [repeat], Original ATen: [aten.repeat]
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   repeat => repeat
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %repeat : [num_users=1] = call_function[target=torch.ops.aten.repeat.default](args = (%unsqueeze, [16, 1, 1]), kwargs = {})
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused_repeat_0 = async_compile.triton('triton_poi_fused_repeat_0', '''
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64}, 
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_repeat_0', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused_repeat_0(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 64
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x0 = (xindex % 4)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x0), xmask, eviction_policy='evict_last')
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x2), tmp0, xmask)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/oa/coaysow6vdr3sv2lgdavppmcfjizdp5cfe6djy3mplhxnu4m7pwh.py
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [first_logits], Original ATen: [aten._softmax]
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   first_logits => amax, exp, sub
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %amax : [num_users=1] = call_function[target=torch.ops.aten.amax.default](args = (%bmm, [1], True), kwargs = {})
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sub : [num_users=1] = call_function[target=torch.ops.aten.sub.Tensor](args = (%bmm, %amax), kwargs = {})
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %exp : [num_users=2] = call_function[target=torch.ops.aten.exp.default](args = (%sub,), kwargs = {})
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused__softmax_1 = async_compile.triton('triton_poi_fused__softmax_1', '''
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64}, 
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__softmax_1', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused__softmax_1(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 64
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = xindex // 4
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x2), xmask)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr0 + (4*x1), xmask, eviction_policy='evict_last')
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tl.load(in_ptr0 + (1 + 4*x1), xmask, eviction_policy='evict_last')
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.load(in_ptr0 + (2 + 4*x1), xmask, eviction_policy='evict_last')
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tl.load(in_ptr0 + (3 + 4*x1), xmask, eviction_policy='evict_last')
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = triton_helpers.maximum(tmp1, tmp2)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = triton_helpers.maximum(tmp3, tmp4)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = triton_helpers.maximum(tmp5, tmp6)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp0 - tmp7
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp9 = tl_math.exp(tmp8)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x2), tmp9, xmask)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # kernel path: inductor_cache/gi/cgityplu7uwf4bpcpbcyhklrydxy7ckspqhte6hmeimxf7d4nxiq.py
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Topologically Sorted Source Nodes: [first_logits], Original ATen: [aten._softmax]
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Source node to ATen node mapping:
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   first_logits => div, sum_1
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] # Graph fragment:
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %sum_1 : [num_users=1] = call_function[target=torch.ops.aten.sum.dim_IntList](args = (%exp, [1], True), kwargs = {})
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #   %div : [num_users=3] = call_function[target=torch.ops.aten.div.Tensor](args = (%exp, %sum_1), kwargs = {})
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_poi_fused__softmax_2 = async_compile.triton('triton_poi_fused__softmax_2', '''
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] import triton.language as tl
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from triton.compiler.compiler import AttrsDescriptor
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime import triton_helpers, triton_heuristics
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] triton_helpers.set_driver_to_gpu()
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton_heuristics.pointwise(
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     size_hints={'x': 64}, 
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     filename=__file__,
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     triton_meta={'signature': {'in_ptr0': '*fp32', 'out_ptr0': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2), 'tt.equal_to': ()}, 'cls': 'AttrsDescriptor'})]},
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused__softmax_2', 'mutated_arg_names': [], 'optimize_mem': False, 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     min_elem_per_thread=0
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] )
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] @triton.jit
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def triton_poi_fused__softmax_2(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xnumel = 64
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xoffset = tl.program_id(0) * XBLOCK
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xindex = xoffset + tl.arange(0, XBLOCK)[:]
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     xmask = xindex < xnumel
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x2 = xindex
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     x1 = xindex // 4
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp0 = tl.load(in_ptr0 + (x2), xmask)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp1 = tl.load(in_ptr0 + (4*x1), xmask, eviction_policy='evict_last')
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp2 = tl.load(in_ptr0 + (1 + 4*x1), xmask, eviction_policy='evict_last')
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp4 = tl.load(in_ptr0 + (2 + 4*x1), xmask, eviction_policy='evict_last')
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp6 = tl.load(in_ptr0 + (3 + 4*x1), xmask, eviction_policy='evict_last')
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp3 = tmp1 + tmp2
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp5 = tmp3 + tmp4
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp7 = tmp5 + tmp6
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tmp8 = tmp0 / tmp7
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     tl.store(out_ptr0 + (x2), tmp8, xmask)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''', device_str='cuda')
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] cpp_fused_triu_indices_3 = async_compile.cpp_pybinding(['int64_t*', 'int64_t*'], '''
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] #include "inductor_cache/2r/c2rnilspx43ivnzu4uieul65kx65dfhfbptbh5og4wk6rqebuxoo.h"
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] extern "C"  void kernel(int64_t* out_ptr0,
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                        int64_t* out_ptr1)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] {
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     {
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         #pragma GCC ivdep
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         for(int64_t x0=static_cast<int64_t>(0L); x0<static_cast<int64_t>(6L); x0+=static_cast<int64_t>(1L))
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         {
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]             {
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                 {
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp0 = x0;
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp1 = c10::convert<double>(tmp0);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp2 = static_cast<double>(2.0);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp3 = decltype(tmp1)(tmp1 * tmp2);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp4 = static_cast<double>(12.25);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp5 = decltype(tmp4)(tmp4 - tmp3);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp6 = std::sqrt(tmp5);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp7 = static_cast<double>(3.5);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp8 = decltype(tmp7)(tmp7 - tmp6);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp9 = std::floor(tmp8);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp10 = c10::convert<int64_t>(tmp9);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp11 = static_cast<int64_t>(0);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     out_ptr0[static_cast<int64_t>(x0)] = tmp12;
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                 }
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]             }
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         }
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     }
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     {
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         #pragma GCC ivdep
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         for(int64_t x0=static_cast<int64_t>(0L); x0<static_cast<int64_t>(6L); x0+=static_cast<int64_t>(1L))
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         {
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]             {
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                 {
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp0 = x0;
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp1 = c10::convert<double>(tmp0);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp2 = static_cast<double>(2.0);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp3 = decltype(tmp1)(tmp1 * tmp2);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp4 = static_cast<double>(12.25);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp5 = decltype(tmp4)(tmp4 - tmp3);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp6 = std::sqrt(tmp5);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp7 = static_cast<double>(3.5);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp8 = decltype(tmp7)(tmp7 - tmp6);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp9 = std::floor(tmp8);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp10 = static_cast<double>(5.0);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp11 = decltype(tmp10)(tmp10 - tmp9);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp12 = decltype(tmp11)(tmp11 * tmp9);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp13 = static_cast<double>(0.5);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp14 = decltype(tmp12)(tmp12 * tmp13);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp15 = decltype(tmp1)(tmp1 - tmp14);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp16 = std::floor(tmp15);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp17 = c10::convert<int64_t>(tmp16);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp18 = static_cast<int64_t>(1);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     auto tmp19 = decltype(tmp17)(tmp17 + tmp18);
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                     out_ptr1[static_cast<int64_t>(x0)] = tmp19;
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]                 }
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]             }
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         }
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     }
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] }
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] ''')
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] async_compile.wait(globals())
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] del async_compile
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def call(args):
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1, primals_2 = args
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     args.clear()
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_1, (4, 4, 4, 4), (64, 16, 4, 1))
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     assert_size_stride(primals_2, (1, 4), (4, 1))
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf0 = empty_strided_cuda((16, 4, 1), (4, 1, 64), torch.float32)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [repeat], Original ATen: [aten.repeat]
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused_repeat_0.run(primals_2, buf0, 64, grid=grid(64), stream=stream0)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del primals_2
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf1 = empty_strided_cuda((16, 4, 1), (4, 1, 1), torch.float32)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [repeat, bmm], Original ATen: [aten.repeat, aten.bmm]
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         extern_kernels.bmm(reinterpret_tensor(primals_1, (16, 4, 4), (16, 4, 1), 0), buf0, out=buf1)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf2 = buf0; del buf0  # reuse
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [first_logits], Original ATen: [aten._softmax]
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__softmax_1.run(buf1, buf2, 64, grid=grid(64), stream=stream0)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf3 = buf1; del buf1  # reuse
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [first_logits], Original ATen: [aten._softmax]
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__softmax_2.run(buf2, buf3, 64, grid=grid(64), stream=stream0)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf4 = reinterpret_tensor(buf2, (16, 1, 4), (4, 4, 1), 0); del buf2  # reuse
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [output], Original ATen: [aten.bmm]
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         extern_kernels.bmm(reinterpret_tensor(buf3, (16, 1, 4), (4, 1, 1), 0), reinterpret_tensor(primals_1, (16, 4, 4), (16, 4, 1), 0), out=buf4)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf5 = empty_strided_cuda((16, 1, 4), (4, 4, 1), torch.float32)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [bmm_2], Original ATen: [aten.bmm]
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         extern_kernels.bmm(buf4, reinterpret_tensor(primals_1, (16, 4, 4), (16, 1, 4), 0), out=buf5)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf6 = reinterpret_tensor(buf4, (16, 1, 4), (4, 64, 1), 0); del buf4  # reuse
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [second_logits], Original ATen: [aten._softmax]
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__softmax_1.run(buf5, buf6, 64, grid=grid(64), stream=stream0)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf7 = buf5; del buf5  # reuse
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [second_logits], Original ATen: [aten._softmax]
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         stream0 = get_raw_stream(0)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         triton_poi_fused__softmax_2.run(buf6, buf7, 64, grid=grid(64), stream=stream0)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf6
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf8 = empty_strided_cuda((16, 4, 4), (16, 4, 1), torch.float32)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [pair_logits], Original ATen: [aten.bmm]
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         extern_kernels.bmm(buf3, buf7, out=buf8)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     buf11 = empty_strided_cpu((12, ), (1, ), torch.int64)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     buf9 = reinterpret_tensor(buf11, (6, ), (1, ), 0)  # alias
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     buf10 = reinterpret_tensor(buf11, (6, ), (1, ), 6)  # alias
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     cpp_fused_triu_indices_3(buf9, buf10)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     with torch.cuda._DeviceGuard(0):
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         torch.cuda.set_device(0)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         # Topologically Sorted Source Nodes: [triu_vector], Original ATen: [aten.index]
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf12 = torch.ops.aten.index.Tensor(buf8, [None, reinterpret_tensor(buf11, (6, ), (1, ), 0), reinterpret_tensor(buf11, (6, ), (1, ), 6)])
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf8
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         buf13 = buf12
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]         del buf12
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return (buf13, buf3, reinterpret_tensor(primals_1, (16, 4, 4), (16, 1, 4), 0), buf7, reinterpret_tensor(buf11, (6, ), (1, ), 0), reinterpret_tensor(buf11, (6, ), (1, ), 6), )
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] def benchmark_compiled_module(times=10, repeat=10):
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._dynamo.testing import rand_strided
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.utils import print_performance
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_1 = rand_strided((4, 4, 4, 4), (64, 16, 4, 1), device='cuda:0', dtype=torch.float32)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     primals_2 = rand_strided((1, 4), (4, 1), device='cuda:0', dtype=torch.float32)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     fn = lambda: call([primals_1, primals_2])
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     return print_performance(fn, times=times, repeat=repeat)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] if __name__ == "__main__":
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     from torch._inductor.wrapper_benchmark import compiled_module_main
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code]     compiled_module_main('None', benchmark_compiled_module)
V0205 18:55:54.687000 790724 site-packages/torch/_inductor/graph.py:2045] [0/0] [__output_code] 
V0205 18:55:54.693000 790724 site-packages/torch/_inductor/graph.py:2053] [0/0] [__output_code] Output code written to: inductor_cache/g2/cg2uq253xm4y6wv4x4gmqwagbeafnraher36incdnxhfeok6cbbq.py
