
import triton
import triton.language as tl
from triton.compiler.compiler import AttrsDescriptor

from torch._inductor.runtime import triton_helpers, triton_heuristics
from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, DeviceProperties
triton_helpers.set_driver_to_gpu()

@triton_heuristics.pointwise(
    size_hints={'x': 1}, 
    filename=__file__,
    triton_meta={'signature': {'in_out_ptr0': '*fp32', 'in_ptr0': '*fp32', 'in_ptr1': '*fp32', 'in_ptr2': '*fp32', 'xnumel': 'i32'}, 'device': DeviceProperties(type='cuda', index=0, multi_processor_count=132, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, warp_size=32), 'constants': {'xnumel': 1}, 'configs': [AttrsDescriptor.from_dict({'arg_properties': {'tt.divisibility': (0, 1, 2, 3), 'tt.equal_to': (4,)}, 'cls': 'AttrsDescriptor'})]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_mse_loss_mul_0', 'mutated_arg_names': ['in_out_ptr0'], 'optimize_mem': True, 'no_x_dim': False, 'num_load': 48, 'num_reduction': 0, 'backend_hash': 'A0D3A2B50857E9501D843044B01F725922648D76E6D26323B14F8A4EA4473D1B', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
    min_elem_per_thread=0
)
@triton.jit
def triton_poi_fused_add_mse_loss_mul_0(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = tl.full([XBLOCK], True, tl.int1)
    tmp0 = tl.load(in_ptr0 + (0))
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK])
    tmp2 = tl.load(in_ptr1 + (0))
    tmp3 = tl.broadcast_to(tmp2, [XBLOCK])
    tmp5 = tl.load(in_ptr2 + (0))
    tmp6 = tl.broadcast_to(tmp5, [XBLOCK])
    tmp10 = tl.load(in_ptr0 + (4))
    tmp11 = tl.broadcast_to(tmp10, [XBLOCK])
    tmp12 = tl.load(in_ptr1 + (4))
    tmp13 = tl.broadcast_to(tmp12, [XBLOCK])
    tmp15 = tl.load(in_ptr2 + (4))
    tmp16 = tl.broadcast_to(tmp15, [XBLOCK])
    tmp21 = tl.load(in_ptr0 + (8))
    tmp22 = tl.broadcast_to(tmp21, [XBLOCK])
    tmp23 = tl.load(in_ptr1 + (8))
    tmp24 = tl.broadcast_to(tmp23, [XBLOCK])
    tmp26 = tl.load(in_ptr2 + (8))
    tmp27 = tl.broadcast_to(tmp26, [XBLOCK])
    tmp32 = tl.load(in_ptr0 + (12))
    tmp33 = tl.broadcast_to(tmp32, [XBLOCK])
    tmp34 = tl.load(in_ptr1 + (12))
    tmp35 = tl.broadcast_to(tmp34, [XBLOCK])
    tmp37 = tl.load(in_ptr2 + (12))
    tmp38 = tl.broadcast_to(tmp37, [XBLOCK])
    tmp47 = tl.load(in_ptr0 + (1))
    tmp48 = tl.broadcast_to(tmp47, [XBLOCK])
    tmp49 = tl.load(in_ptr1 + (1))
    tmp50 = tl.broadcast_to(tmp49, [XBLOCK])
    tmp52 = tl.load(in_ptr2 + (1))
    tmp53 = tl.broadcast_to(tmp52, [XBLOCK])
    tmp57 = tl.load(in_ptr0 + (5))
    tmp58 = tl.broadcast_to(tmp57, [XBLOCK])
    tmp59 = tl.load(in_ptr1 + (5))
    tmp60 = tl.broadcast_to(tmp59, [XBLOCK])
    tmp62 = tl.load(in_ptr2 + (5))
    tmp63 = tl.broadcast_to(tmp62, [XBLOCK])
    tmp68 = tl.load(in_ptr0 + (9))
    tmp69 = tl.broadcast_to(tmp68, [XBLOCK])
    tmp70 = tl.load(in_ptr1 + (9))
    tmp71 = tl.broadcast_to(tmp70, [XBLOCK])
    tmp73 = tl.load(in_ptr2 + (9))
    tmp74 = tl.broadcast_to(tmp73, [XBLOCK])
    tmp79 = tl.load(in_ptr0 + (13))
    tmp80 = tl.broadcast_to(tmp79, [XBLOCK])
    tmp81 = tl.load(in_ptr1 + (13))
    tmp82 = tl.broadcast_to(tmp81, [XBLOCK])
    tmp84 = tl.load(in_ptr2 + (13))
    tmp85 = tl.broadcast_to(tmp84, [XBLOCK])
    tmp92 = tl.load(in_ptr0 + (2))
    tmp93 = tl.broadcast_to(tmp92, [XBLOCK])
    tmp94 = tl.load(in_ptr1 + (2))
    tmp95 = tl.broadcast_to(tmp94, [XBLOCK])
    tmp97 = tl.load(in_ptr2 + (2))
    tmp98 = tl.broadcast_to(tmp97, [XBLOCK])
    tmp102 = tl.load(in_ptr0 + (6))
    tmp103 = tl.broadcast_to(tmp102, [XBLOCK])
    tmp104 = tl.load(in_ptr1 + (6))
    tmp105 = tl.broadcast_to(tmp104, [XBLOCK])
    tmp107 = tl.load(in_ptr2 + (6))
    tmp108 = tl.broadcast_to(tmp107, [XBLOCK])
    tmp113 = tl.load(in_ptr0 + (10))
    tmp114 = tl.broadcast_to(tmp113, [XBLOCK])
    tmp115 = tl.load(in_ptr1 + (10))
    tmp116 = tl.broadcast_to(tmp115, [XBLOCK])
    tmp118 = tl.load(in_ptr2 + (10))
    tmp119 = tl.broadcast_to(tmp118, [XBLOCK])
    tmp124 = tl.load(in_ptr0 + (14))
    tmp125 = tl.broadcast_to(tmp124, [XBLOCK])
    tmp126 = tl.load(in_ptr1 + (14))
    tmp127 = tl.broadcast_to(tmp126, [XBLOCK])
    tmp129 = tl.load(in_ptr2 + (14))
    tmp130 = tl.broadcast_to(tmp129, [XBLOCK])
    tmp137 = tl.load(in_ptr0 + (3))
    tmp138 = tl.broadcast_to(tmp137, [XBLOCK])
    tmp139 = tl.load(in_ptr1 + (3))
    tmp140 = tl.broadcast_to(tmp139, [XBLOCK])
    tmp142 = tl.load(in_ptr2 + (3))
    tmp143 = tl.broadcast_to(tmp142, [XBLOCK])
    tmp147 = tl.load(in_ptr0 + (7))
    tmp148 = tl.broadcast_to(tmp147, [XBLOCK])
    tmp149 = tl.load(in_ptr1 + (7))
    tmp150 = tl.broadcast_to(tmp149, [XBLOCK])
    tmp152 = tl.load(in_ptr2 + (7))
    tmp153 = tl.broadcast_to(tmp152, [XBLOCK])
    tmp158 = tl.load(in_ptr0 + (11))
    tmp159 = tl.broadcast_to(tmp158, [XBLOCK])
    tmp160 = tl.load(in_ptr1 + (11))
    tmp161 = tl.broadcast_to(tmp160, [XBLOCK])
    tmp163 = tl.load(in_ptr2 + (11))
    tmp164 = tl.broadcast_to(tmp163, [XBLOCK])
    tmp169 = tl.load(in_ptr0 + (15))
    tmp170 = tl.broadcast_to(tmp169, [XBLOCK])
    tmp171 = tl.load(in_ptr1 + (15))
    tmp172 = tl.broadcast_to(tmp171, [XBLOCK])
    tmp174 = tl.load(in_ptr2 + (15))
    tmp175 = tl.broadcast_to(tmp174, [XBLOCK])
    tmp4 = tmp1 * tmp3
    tmp7 = tmp6 * tmp3
    tmp8 = tmp4 - tmp7
    tmp9 = tmp8 * tmp8
    tmp14 = tmp11 * tmp13
    tmp17 = tmp16 * tmp13
    tmp18 = tmp14 - tmp17
    tmp19 = tmp18 * tmp18
    tmp20 = tmp9 + tmp19
    tmp25 = tmp22 * tmp24
    tmp28 = tmp27 * tmp24
    tmp29 = tmp25 - tmp28
    tmp30 = tmp29 * tmp29
    tmp31 = tmp20 + tmp30
    tmp36 = tmp33 * tmp35
    tmp39 = tmp38 * tmp35
    tmp40 = tmp36 - tmp39
    tmp41 = tmp40 * tmp40
    tmp42 = tmp31 + tmp41
    tmp43 = 4.0
    tmp44 = tmp42 / tmp43
    tmp45 = 0.0
    tmp46 = tmp44 + tmp45
    tmp51 = tmp48 * tmp50
    tmp54 = tmp53 * tmp50
    tmp55 = tmp51 - tmp54
    tmp56 = tmp55 * tmp55
    tmp61 = tmp58 * tmp60
    tmp64 = tmp63 * tmp60
    tmp65 = tmp61 - tmp64
    tmp66 = tmp65 * tmp65
    tmp67 = tmp56 + tmp66
    tmp72 = tmp69 * tmp71
    tmp75 = tmp74 * tmp71
    tmp76 = tmp72 - tmp75
    tmp77 = tmp76 * tmp76
    tmp78 = tmp67 + tmp77
    tmp83 = tmp80 * tmp82
    tmp86 = tmp85 * tmp82
    tmp87 = tmp83 - tmp86
    tmp88 = tmp87 * tmp87
    tmp89 = tmp78 + tmp88
    tmp90 = tmp89 / tmp43
    tmp91 = tmp46 + tmp90
    tmp96 = tmp93 * tmp95
    tmp99 = tmp98 * tmp95
    tmp100 = tmp96 - tmp99
    tmp101 = tmp100 * tmp100
    tmp106 = tmp103 * tmp105
    tmp109 = tmp108 * tmp105
    tmp110 = tmp106 - tmp109
    tmp111 = tmp110 * tmp110
    tmp112 = tmp101 + tmp111
    tmp117 = tmp114 * tmp116
    tmp120 = tmp119 * tmp116
    tmp121 = tmp117 - tmp120
    tmp122 = tmp121 * tmp121
    tmp123 = tmp112 + tmp122
    tmp128 = tmp125 * tmp127
    tmp131 = tmp130 * tmp127
    tmp132 = tmp128 - tmp131
    tmp133 = tmp132 * tmp132
    tmp134 = tmp123 + tmp133
    tmp135 = tmp134 / tmp43
    tmp136 = tmp91 + tmp135
    tmp141 = tmp138 * tmp140
    tmp144 = tmp143 * tmp140
    tmp145 = tmp141 - tmp144
    tmp146 = tmp145 * tmp145
    tmp151 = tmp148 * tmp150
    tmp154 = tmp153 * tmp150
    tmp155 = tmp151 - tmp154
    tmp156 = tmp155 * tmp155
    tmp157 = tmp146 + tmp156
    tmp162 = tmp159 * tmp161
    tmp165 = tmp164 * tmp161
    tmp166 = tmp162 - tmp165
    tmp167 = tmp166 * tmp166
    tmp168 = tmp157 + tmp167
    tmp173 = tmp170 * tmp172
    tmp176 = tmp175 * tmp172
    tmp177 = tmp173 - tmp176
    tmp178 = tmp177 * tmp177
    tmp179 = tmp168 + tmp178
    tmp180 = tmp179 / tmp43
    tmp181 = tmp136 + tmp180
    tl.store(in_out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp181, None)
