; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_native_batch_norm_backward_42(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %14 = shl i32 %13, 9, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 2, !dbg !13
  %20 = sdiv i32 %18, 4096, !dbg !14
  %21 = srem i32 %20, 4, !dbg !15
  %.frozen = freeze i32 %18, !dbg !16
  %22 = sdiv i32 %.frozen, 64, !dbg !16
  %23 = srem i32 %22, 64, !dbg !17
  %24 = mul i32 %22, 64, !dbg !18
  %.decomposed = sub i32 %.frozen, %24, !dbg !18
  %25 = srem i32 %19, 64, !dbg !18
  %26 = sext i32 %18 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !19
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !20
  %33 = sext i32 %21 to i64, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !22
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !23
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !24
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !24
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !24
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !24
  %45 = sext i32 %23 to i64, !dbg !25
  %46 = getelementptr i64, ptr addrspace(1) %3, i64 %45, !dbg !25
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !26
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !26
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !26
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !26
  %51 = sext i32 %.decomposed to i64, !dbg !27
  %52 = getelementptr i64, ptr addrspace(1) %3, i64 %51, !dbg !27
  %53 = sext i32 %25 to i64, !dbg !27
  %54 = getelementptr i64, ptr addrspace(1) %3, i64 %53, !dbg !27
  %55 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !28
  %56 = extractvalue { i64, i64 } %55, 0, !dbg !28
  %57 = extractvalue { i64, i64 } %55, 1, !dbg !28
  %58 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !28
  %59 = extractvalue { i64, i64 } %58, 0, !dbg !28
  %60 = extractvalue { i64, i64 } %58, 1, !dbg !28
  %61 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !29
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !30
  %63 = bitcast i32 %62 to float, !dbg !30
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !30
  %65 = bitcast i32 %64 to float, !dbg !30
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !30
  %67 = bitcast i32 %66 to float, !dbg !30
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !30
  %69 = bitcast i32 %68 to float, !dbg !30
  %70 = getelementptr float, ptr addrspace(1) %7, i64 %33, !dbg !31
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !32
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !32
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !32
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !32
  %75 = getelementptr float, ptr addrspace(1) %9, i64 %33, !dbg !33
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #1, !dbg !34
  %77 = bitcast i32 %76 to float, !dbg !34
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #1, !dbg !34
  %79 = bitcast i32 %78 to float, !dbg !34
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #1, !dbg !34
  %81 = bitcast i32 %80 to float, !dbg !34
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #1, !dbg !34
  %83 = bitcast i32 %82 to float, !dbg !34
  %84 = lshr i64 %47, 58, !dbg !35
  %85 = and i64 %84, 32, !dbg !35
  %86 = add i64 %85, %47, !dbg !35
  %87 = lshr i64 %56, 58, !dbg !36
  %88 = and i64 %87, 32, !dbg !36
  %89 = lshr i64 %57, 58, !dbg !36
  %90 = and i64 %89, 32, !dbg !36
  %91 = lshr i64 %59, 58, !dbg !36
  %92 = and i64 %91, 32, !dbg !36
  %93 = lshr i64 %60, 58, !dbg !36
  %94 = and i64 %93, 32, !dbg !36
  %95 = shl i64 %86, 5, !dbg !37
  %96 = shl nsw i32 %20, 10, !dbg !38
  %97 = sext i32 %96 to i64, !dbg !39
  %98 = add i64 %95, %97, !dbg !36
  %99 = add i64 %98, %56, !dbg !40
  %100 = add i64 %99, %88, !dbg !39
  %101 = add i64 %98, %57, !dbg !40
  %102 = add i64 %101, %90, !dbg !39
  %103 = add i64 %98, %59, !dbg !40
  %104 = add i64 %103, %92, !dbg !39
  %105 = add i64 %98, %60, !dbg !40
  %106 = add i64 %105, %94, !dbg !39
  %107 = getelementptr float, ptr addrspace(1) %4, i64 %100, !dbg !41
  %108 = getelementptr float, ptr addrspace(1) %4, i64 %102, !dbg !41
  %109 = getelementptr float, ptr addrspace(1) %4, i64 %104, !dbg !41
  %110 = getelementptr float, ptr addrspace(1) %4, i64 %106, !dbg !41
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !42
  %112 = bitcast i32 %111 to float, !dbg !42
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #1, !dbg !42
  %114 = bitcast i32 %113 to float, !dbg !42
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 true) #1, !dbg !42
  %116 = bitcast i32 %115 to float, !dbg !42
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #1, !dbg !42
  %118 = bitcast i32 %117 to float, !dbg !42
  %119 = fadd float %63, %112, !dbg !43
  %120 = fadd float %65, %114, !dbg !43
  %121 = fadd float %67, %116, !dbg !43
  %122 = fadd float %69, %118, !dbg !43
  %123 = getelementptr float, ptr addrspace(1) %6, i64 %100, !dbg !44
  %124 = getelementptr float, ptr addrspace(1) %6, i64 %102, !dbg !44
  %125 = getelementptr float, ptr addrspace(1) %6, i64 %104, !dbg !44
  %126 = getelementptr float, ptr addrspace(1) %6, i64 %106, !dbg !44
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #1, !dbg !45
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 true) #1, !dbg !45
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 true) #1, !dbg !45
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 true) #1, !dbg !45
  %131 = getelementptr float, ptr addrspace(1) %8, i64 %100, !dbg !46
  %132 = getelementptr float, ptr addrspace(1) %8, i64 %102, !dbg !46
  %133 = getelementptr float, ptr addrspace(1) %8, i64 %104, !dbg !46
  %134 = getelementptr float, ptr addrspace(1) %8, i64 %106, !dbg !46
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 true) #1, !dbg !47
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #1, !dbg !47
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 true) #1, !dbg !47
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #1, !dbg !47
  %139 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !20
  %140 = insertelement <2 x i32> %139, i32 %71, i64 1, !dbg !20
  %141 = bitcast <2 x i32> %140 to <2 x float>, !dbg !20
  %142 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !22
  %143 = insertelement <2 x i32> %142, i32 %127, i64 1, !dbg !22
  %144 = bitcast <2 x i32> %143 to <2 x float>, !dbg !22
  %145 = fadd <2 x float> %141, %144, !dbg !48
  %146 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !24
  %147 = insertelement <2 x i32> %146, i32 %135, i64 1, !dbg !24
  %148 = bitcast <2 x i32> %147 to <2 x float>, !dbg !24
  %149 = bitcast i32 %41 to float, !dbg !24
  %150 = fadd <2 x float> %145, %148, !dbg !49
  %151 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !20
  %152 = insertelement <2 x i32> %151, i32 %72, i64 1, !dbg !20
  %153 = bitcast <2 x i32> %152 to <2 x float>, !dbg !20
  %154 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !22
  %155 = insertelement <2 x i32> %154, i32 %128, i64 1, !dbg !22
  %156 = bitcast <2 x i32> %155 to <2 x float>, !dbg !22
  %157 = fadd <2 x float> %153, %156, !dbg !48
  %158 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !24
  %159 = insertelement <2 x i32> %158, i32 %136, i64 1, !dbg !24
  %160 = bitcast <2 x i32> %159 to <2 x float>, !dbg !24
  %161 = bitcast i32 %42 to float, !dbg !24
  %162 = fadd <2 x float> %157, %160, !dbg !49
  %163 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !20
  %164 = insertelement <2 x i32> %163, i32 %73, i64 1, !dbg !20
  %165 = bitcast <2 x i32> %164 to <2 x float>, !dbg !20
  %166 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !22
  %167 = insertelement <2 x i32> %166, i32 %129, i64 1, !dbg !22
  %168 = bitcast <2 x i32> %167 to <2 x float>, !dbg !22
  %169 = fadd <2 x float> %165, %168, !dbg !48
  %170 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !24
  %171 = insertelement <2 x i32> %170, i32 %137, i64 1, !dbg !24
  %172 = bitcast <2 x i32> %171 to <2 x float>, !dbg !24
  %173 = bitcast i32 %43 to float, !dbg !24
  %174 = fadd <2 x float> %169, %172, !dbg !49
  %175 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !20
  %176 = insertelement <2 x i32> %175, i32 %74, i64 1, !dbg !20
  %177 = bitcast <2 x i32> %176 to <2 x float>, !dbg !20
  %178 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !22
  %179 = insertelement <2 x i32> %178, i32 %130, i64 1, !dbg !22
  %180 = bitcast <2 x i32> %179 to <2 x float>, !dbg !22
  %181 = fadd <2 x float> %177, %180, !dbg !48
  %182 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !24
  %183 = insertelement <2 x i32> %182, i32 %138, i64 1, !dbg !24
  %184 = bitcast <2 x i32> %183 to <2 x float>, !dbg !24
  %185 = bitcast i32 %44 to float, !dbg !24
  %186 = fadd <2 x float> %181, %184, !dbg !49
  %187 = extractelement <2 x float> %150, i64 1, !dbg !50
  %188 = fadd float %119, %187, !dbg !50
  %189 = extractelement <2 x float> %162, i64 1, !dbg !50
  %190 = fadd float %120, %189, !dbg !50
  %191 = extractelement <2 x float> %174, i64 1, !dbg !50
  %192 = fadd float %121, %191, !dbg !50
  %193 = extractelement <2 x float> %186, i64 1, !dbg !50
  %194 = fadd float %122, %193, !dbg !50
  %195 = extractelement <2 x float> %150, i64 0, !dbg !51
  %196 = fadd float %195, %188, !dbg !51
  %197 = extractelement <2 x float> %162, i64 0, !dbg !51
  %198 = fadd float %197, %190, !dbg !51
  %199 = extractelement <2 x float> %174, i64 0, !dbg !51
  %200 = fadd float %199, %192, !dbg !51
  %201 = extractelement <2 x float> %186, i64 0, !dbg !51
  %202 = fadd float %201, %194, !dbg !51
  %203 = fsub float %149, %77, !dbg !52
  %204 = fsub float %161, %79, !dbg !52
  %205 = fsub float %173, %81, !dbg !52
  %206 = fsub float %185, %83, !dbg !52
  %207 = bitcast float %196 to i32, !dbg !53
  %208 = bitcast float %198 to i32, !dbg !53
  %209 = bitcast float %200 to i32, !dbg !53
  %210 = bitcast float %202 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %207, i32 %208, i32 %209, i32 %210, ptr addrspace(1) %27, i1 true) #1, !dbg !53
  %211 = getelementptr float, ptr addrspace(1) %10, i64 %26, !dbg !54
  %212 = bitcast float %203 to i32, !dbg !55
  %213 = bitcast float %204 to i32, !dbg !55
  %214 = bitcast float %205 to i32, !dbg !55
  %215 = bitcast float %206 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %212, i32 %213, i32 %214, i32 %215, ptr addrspace(1) %211, i1 true) #1, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnflsvqdddrdyjbmvc5owwamw7zoyavig4kxqy3ee2kdvuek5ive.py", directory: "inductor_cache/nf")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_native_batch_norm_backward_42, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_native_batch_norm_backward_42, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_native_batch_norm_backward_42", linkageName: "triton_poi_fused__unsafe_index_add_convolution_native_batch_norm_backward_42", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 27, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 34, scope: !7)
!20 = !DILocation(line: 29, column: 39, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 42, column: 32, scope: !7)
!36 = !DILocation(line: 45, column: 35, scope: !7)
!37 = !DILocation(line: 46, column: 42, scope: !7)
!38 = !DILocation(line: 46, column: 54, scope: !7)
!39 = !DILocation(line: 46, column: 49, scope: !7)
!40 = !DILocation(line: 46, column: 39, scope: !7)
!41 = !DILocation(line: 46, column: 31, scope: !7)
!42 = !DILocation(line: 46, column: 59, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 48, column: 31, scope: !7)
!45 = !DILocation(line: 48, column: 59, scope: !7)
!46 = !DILocation(line: 50, column: 31, scope: !7)
!47 = !DILocation(line: 50, column: 59, scope: !7)
!48 = !DILocation(line: 37, column: 18, scope: !7)
!49 = !DILocation(line: 38, column: 18, scope: !7)
!50 = !DILocation(line: 52, column: 20, scope: !7)
!51 = !DILocation(line: 53, column: 19, scope: !7)
!52 = !DILocation(line: 54, column: 19, scope: !7)
!53 = !DILocation(line: 55, column: 40, scope: !7)
!54 = !DILocation(line: 56, column: 25, scope: !7)
!55 = !DILocation(line: 56, column: 37, scope: !7)
!56 = !DILocation(line: 56, column: 4, scope: !7)
