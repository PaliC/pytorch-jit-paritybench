; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__softmax_21(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 15, !dbg !12
  %9 = or disjoint i32 %6, %8, !dbg !13
  %10 = icmp slt i32 %9, 16, !dbg !14
  %11 = insertelement <4 x i1> poison, i1 %10, i64 0, !dbg !15
  %12 = shufflevector <4 x i1> %11, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !15
  %13 = lshr i32 %7, 4, !dbg !16
  %14 = and i32 %13, 7, !dbg !16
  %15 = zext nneg i32 %14 to i64, !dbg !17
  %.frozen = freeze i32 %9, !dbg !18
  %16 = sdiv i32 %.frozen, 4, !dbg !18
  %17 = mul i32 %16, 4, !dbg !19
  %.decomposed = sub i32 %.frozen, %17, !dbg !19
  %18 = mul nsw i32 %.decomposed, 25, !dbg !20
  %19 = and i32 %13, 3, !dbg !16
  %20 = mul nuw nsw i32 %19, 100
  %21 = add nsw i32 %18, %20
  %22 = mul i32 %16, 400, !dbg !21
  %23 = add i32 %21, %22
  %24 = lshr i32 %14, 2, !dbg !22
  %25 = lshr i32 %14, 2, !dbg !22
  %26 = or disjoint i32 %25, 2, !dbg !22
  %27 = lshr i32 %14, 2, !dbg !22
  %28 = or disjoint i32 %27, 4, !dbg !22
  %29 = lshr i32 %14, 2, !dbg !22
  %30 = or disjoint i32 %29, 6, !dbg !22
  %31 = add i32 %23, %24, !dbg !23
  %32 = add i32 %23, %26, !dbg !23
  %33 = add i32 %23, %28, !dbg !23
  %34 = add i32 %23, %30, !dbg !23
  %35 = sext i32 %31 to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !24
  %37 = sext i32 %32 to i64, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !24
  %39 = sext i32 %33 to i64, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !24
  %41 = sext i32 %34 to i64, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !24
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %10, i32 0, i1 %10) #3, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %10, i32 0, i1 %10) #3, !dbg !25
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %10, i32 0, i1 %10) #3, !dbg !25
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %10, i32 0, i1 %10) #3, !dbg !25
  %47 = insertelement <4 x i32> poison, i32 %43, i64 0, !dbg !25
  %48 = insertelement <4 x i32> %47, i32 %44, i64 1, !dbg !25
  %49 = insertelement <4 x i32> %48, i32 %45, i64 2, !dbg !25
  %50 = insertelement <4 x i32> %49, i32 %46, i64 3, !dbg !25
  %51 = bitcast <4 x i32> %50 to <4 x float>, !dbg !25
  %52 = select <4 x i1> %12, <4 x float> %51, <4 x float> splat (float 0xFFF0000000000000), !dbg !26
  %53 = or disjoint i64 %15, 32, !dbg !27
  %54 = or disjoint i64 %15, 40, !dbg !27
  %55 = or disjoint i64 %15, 48, !dbg !27
  %56 = or disjoint i64 %15, 56, !dbg !27
  %57 = lshr i64 %53, 2, !dbg !22
  %58 = lshr i64 %54, 2, !dbg !22
  %59 = lshr i64 %55, 2, !dbg !22
  %60 = lshr i64 %56, 2, !dbg !22
  %61 = trunc nuw nsw i64 %57 to i32, !dbg !23
  %62 = add i32 %23, %61, !dbg !23
  %63 = trunc nuw nsw i64 %58 to i32, !dbg !23
  %64 = add i32 %23, %63, !dbg !23
  %65 = trunc nuw nsw i64 %59 to i32, !dbg !23
  %66 = add i32 %23, %65, !dbg !23
  %67 = trunc nuw nsw i64 %60 to i32, !dbg !23
  %68 = add i32 %23, %67, !dbg !23
  %69 = sext i32 %62 to i64, !dbg !24
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !24
  %71 = sext i32 %64 to i64, !dbg !24
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !24
  %73 = sext i32 %66 to i64, !dbg !24
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !24
  %75 = sext i32 %68 to i64, !dbg !24
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !24
  %77 = fcmp uno <4 x float> %52, zeroinitializer, !dbg !28
  %78 = insertelement <4 x i64> poison, i64 %53, i64 0, !dbg !32
  %79 = insertelement <4 x i64> %78, i64 %54, i64 1, !dbg !32
  %80 = insertelement <4 x i64> %79, i64 %55, i64 2, !dbg !32
  %81 = insertelement <4 x i64> %80, i64 %56, i64 3, !dbg !32
  %82 = icmp samesign ult <4 x i64> %81, splat (i64 100), !dbg !32
  %83 = and <4 x i1> %12, %82, !dbg !15
  %84 = extractelement <4 x i1> %83, i64 0, !dbg !25
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %84, i32 0, i1 %84) #3, !dbg !25
  %86 = extractelement <4 x i1> %83, i64 1, !dbg !25
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %86, i32 0, i1 %86) #3, !dbg !25
  %88 = extractelement <4 x i1> %83, i64 2, !dbg !25
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %88, i32 0, i1 %88) #3, !dbg !25
  %90 = extractelement <4 x i1> %83, i64 3, !dbg !25
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %90, i32 0, i1 %90) #3, !dbg !25
  %92 = insertelement <4 x i32> poison, i32 %85, i64 0, !dbg !25
  %93 = insertelement <4 x i32> %92, i32 %87, i64 1, !dbg !25
  %94 = insertelement <4 x i32> %93, i32 %89, i64 2, !dbg !25
  %95 = insertelement <4 x i32> %94, i32 %91, i64 3, !dbg !25
  %96 = bitcast <4 x i32> %95 to <4 x float>, !dbg !25
  %97 = fcmp ogt <4 x float> %52, %96, !dbg !33
  %98 = or <4 x i1> %77, %97, !dbg !34
  %99 = select <4 x i1> %98, <4 x float> %52, <4 x float> %96, !dbg !35
  %100 = select <4 x i1> %83, <4 x float> %99, <4 x float> %52, !dbg !26
  %101 = or disjoint i64 %15, 64, !dbg !27
  %102 = or disjoint i64 %15, 72, !dbg !27
  %103 = or disjoint i64 %15, 80, !dbg !27
  %104 = or disjoint i64 %15, 88, !dbg !27
  %105 = lshr i64 %101, 2, !dbg !22
  %106 = lshr i64 %102, 2, !dbg !22
  %107 = lshr i64 %103, 2, !dbg !22
  %108 = lshr i64 %104, 2, !dbg !22
  %109 = trunc nuw nsw i64 %105 to i32, !dbg !23
  %110 = add i32 %23, %109, !dbg !23
  %111 = trunc nuw nsw i64 %106 to i32, !dbg !23
  %112 = add i32 %23, %111, !dbg !23
  %113 = trunc nuw nsw i64 %107 to i32, !dbg !23
  %114 = add i32 %23, %113, !dbg !23
  %115 = trunc nuw nsw i64 %108 to i32, !dbg !23
  %116 = add i32 %23, %115, !dbg !23
  %117 = sext i32 %110 to i64, !dbg !24
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !24
  %119 = sext i32 %112 to i64, !dbg !24
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !24
  %121 = sext i32 %114 to i64, !dbg !24
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !24
  %123 = sext i32 %116 to i64, !dbg !24
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !24
  %125 = fcmp uno <4 x float> %100, zeroinitializer, !dbg !28
  %126 = insertelement <4 x i64> poison, i64 %101, i64 0, !dbg !32
  %127 = insertelement <4 x i64> %126, i64 %102, i64 1, !dbg !32
  %128 = insertelement <4 x i64> %127, i64 %103, i64 2, !dbg !32
  %129 = insertelement <4 x i64> %128, i64 %104, i64 3, !dbg !32
  %130 = icmp samesign ult <4 x i64> %129, splat (i64 100), !dbg !32
  %131 = and <4 x i1> %12, %130, !dbg !15
  %132 = extractelement <4 x i1> %131, i64 0, !dbg !25
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %132, i32 0, i1 %132) #3, !dbg !25
  %134 = extractelement <4 x i1> %131, i64 1, !dbg !25
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %134, i32 0, i1 %134) #3, !dbg !25
  %136 = extractelement <4 x i1> %131, i64 2, !dbg !25
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %136, i32 0, i1 %136) #3, !dbg !25
  %138 = extractelement <4 x i1> %131, i64 3, !dbg !25
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %138, i32 0, i1 %138) #3, !dbg !25
  %140 = insertelement <4 x i32> poison, i32 %133, i64 0, !dbg !25
  %141 = insertelement <4 x i32> %140, i32 %135, i64 1, !dbg !25
  %142 = insertelement <4 x i32> %141, i32 %137, i64 2, !dbg !25
  %143 = insertelement <4 x i32> %142, i32 %139, i64 3, !dbg !25
  %144 = bitcast <4 x i32> %143 to <4 x float>, !dbg !25
  %145 = fcmp ogt <4 x float> %100, %144, !dbg !33
  %146 = or <4 x i1> %125, %145, !dbg !34
  %147 = select <4 x i1> %146, <4 x float> %100, <4 x float> %144, !dbg !35
  %148 = select <4 x i1> %131, <4 x float> %147, <4 x float> %100, !dbg !26
  %149 = or disjoint i64 %15, 96, !dbg !27
  %150 = or disjoint i64 %15, 104, !dbg !27
  %151 = or disjoint i64 %15, 112, !dbg !27
  %152 = or disjoint i64 %15, 120, !dbg !27
  %153 = lshr i64 %149, 2, !dbg !22
  %154 = lshr i64 %150, 2, !dbg !22
  %155 = lshr i64 %151, 2, !dbg !22
  %156 = lshr i64 %152, 2, !dbg !22
  %157 = trunc nuw nsw i64 %153 to i32, !dbg !23
  %158 = add i32 %23, %157, !dbg !23
  %159 = trunc nuw nsw i64 %154 to i32, !dbg !23
  %160 = add i32 %23, %159, !dbg !23
  %161 = trunc nuw nsw i64 %155 to i32, !dbg !23
  %162 = add i32 %23, %161, !dbg !23
  %163 = trunc nuw nsw i64 %156 to i32, !dbg !23
  %164 = add i32 %23, %163, !dbg !23
  %165 = sext i32 %158 to i64, !dbg !24
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !24
  %167 = sext i32 %160 to i64, !dbg !24
  %168 = getelementptr float, ptr addrspace(1) %0, i64 %167, !dbg !24
  %169 = sext i32 %162 to i64, !dbg !24
  %170 = getelementptr float, ptr addrspace(1) %0, i64 %169, !dbg !24
  %171 = sext i32 %164 to i64, !dbg !24
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !24
  %173 = fcmp uno <4 x float> %148, zeroinitializer, !dbg !28
  %174 = insertelement <4 x i64> poison, i64 %149, i64 0, !dbg !32
  %175 = insertelement <4 x i64> %174, i64 %150, i64 1, !dbg !32
  %176 = insertelement <4 x i64> %175, i64 %151, i64 2, !dbg !32
  %177 = insertelement <4 x i64> %176, i64 %152, i64 3, !dbg !32
  %178 = icmp samesign ult <4 x i64> %177, splat (i64 100), !dbg !32
  %179 = and <4 x i1> %12, %178, !dbg !15
  %180 = extractelement <4 x i1> %179, i64 0, !dbg !25
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %166, i1 %180, i32 0, i1 %180) #3, !dbg !25
  %182 = extractelement <4 x i1> %179, i64 1, !dbg !25
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %168, i1 %182, i32 0, i1 %182) #3, !dbg !25
  %184 = extractelement <4 x i1> %179, i64 2, !dbg !25
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %170, i1 %184, i32 0, i1 %184) #3, !dbg !25
  %186 = extractelement <4 x i1> %179, i64 3, !dbg !25
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %172, i1 %186, i32 0, i1 %186) #3, !dbg !25
  %188 = insertelement <4 x i32> poison, i32 %181, i64 0, !dbg !25
  %189 = insertelement <4 x i32> %188, i32 %183, i64 1, !dbg !25
  %190 = insertelement <4 x i32> %189, i32 %185, i64 2, !dbg !25
  %191 = insertelement <4 x i32> %190, i32 %187, i64 3, !dbg !25
  %192 = bitcast <4 x i32> %191 to <4 x float>, !dbg !25
  %193 = fcmp ogt <4 x float> %148, %192, !dbg !33
  %194 = or <4 x i1> %173, %193, !dbg !34
  %195 = select <4 x i1> %194, <4 x float> %148, <4 x float> %192, !dbg !35
  %196 = select <4 x i1> %179, <4 x float> %195, <4 x float> %148, !dbg !26
  %197 = lshr i32 %7, 5, !dbg !16
  %198 = and i32 %7, 31, !dbg !12
  %199 = extractelement <4 x float> %196, i64 0, !dbg !36
  %200 = extractelement <4 x float> %196, i64 1, !dbg !36
  %201 = fcmp ogt float %199, %200, !dbg !36
  %202 = fcmp uno float %199, 0.000000e+00, !dbg !39
  %203 = or i1 %201, %202, !dbg !40
  %204 = select i1 %203, float %199, float %200, !dbg !41
  %205 = extractelement <4 x float> %196, i64 2, !dbg !36
  %206 = fcmp ogt float %204, %205, !dbg !36
  %207 = fcmp uno float %204, 0.000000e+00, !dbg !39
  %208 = or i1 %206, %207, !dbg !40
  %209 = select i1 %208, float %204, float %205, !dbg !41
  %210 = extractelement <4 x float> %196, i64 3, !dbg !36
  %211 = fcmp ogt float %209, %210, !dbg !36
  %212 = fcmp uno float %209, 0.000000e+00, !dbg !39
  %213 = or i1 %211, %212, !dbg !40
  %214 = select i1 %213, float %209, float %210, !dbg !41
  %215 = bitcast float %214 to i32, !dbg !42
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 16, i32 31), !dbg !42
  %217 = bitcast i32 %216 to float, !dbg !42
  %218 = fcmp ogt float %214, %217, !dbg !36
  %219 = fcmp uno float %214, 0.000000e+00, !dbg !39
  %220 = or i1 %219, %218, !dbg !40
  %221 = lshr i32 %198, 4, !dbg !42
  %222 = icmp samesign ult i32 %198, 16, !dbg !42
  %223 = and i32 %197, 3, !dbg !42
  %224 = shl nuw nsw i32 %8, 2, !dbg !42
  %225 = or disjoint i32 %224, %223, !dbg !42
  %226 = getelementptr float, ptr addrspace(3) @global_smem, i32 %225, !dbg !42
  %227 = select i1 %220, i32 %215, i32 %216, !dbg !41
  %228 = insertelement <1 x i32> poison, i32 %227, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %228, i1 %222) #3, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %229 = icmp slt i32 %7, 64, !dbg !42
  %230 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !42
  %231 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %230, i1 %229) #3, !dbg !42
  %232 = bitcast i32 %231 to float, !dbg !42
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 2, i32 31), !dbg !42
  %234 = bitcast i32 %233 to float, !dbg !42
  %235 = fcmp ogt float %232, %234, !dbg !36
  %236 = fcmp uno float %232, 0.000000e+00, !dbg !39
  %237 = or i1 %236, %235, !dbg !40
  %238 = select i1 %237, float %232, float %234, !dbg !41
  %239 = bitcast float %238 to i32, !dbg !42
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 1, i32 31), !dbg !42
  %241 = bitcast i32 %240 to float, !dbg !42
  %242 = fcmp ogt float %238, %241, !dbg !36
  %243 = fcmp uno float %238, 0.000000e+00, !dbg !39
  %244 = or i1 %242, %243, !dbg !40
  %245 = and i32 %7, 3, !dbg !42
  %246 = icmp eq i32 %245, 0, !dbg !42
  %247 = and i1 %229, %246, !dbg !42
  %248 = select i1 %244, i32 %239, i32 %240, !dbg !41
  %249 = insertelement <1 x i32> poison, i32 %248, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %249, i1 %247) #3, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %250 = getelementptr float, ptr addrspace(3) @global_smem, i32 %224, !dbg !42
  %251 = load i32, ptr addrspace(3) %250, align 16, !dbg !42
  %252 = sext i32 %9 to i64, !dbg !43
  %253 = getelementptr float, ptr addrspace(1) %1, i64 %252, !dbg !43
  %254 = shl nuw nsw i32 %223, 1, !dbg !44
  %255 = or disjoint i32 %254, %221, !dbg !44
  %256 = icmp eq i32 %255, 0, !dbg !44
  %257 = and i1 %256, %10, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %251, ptr addrspace(1) %253, i1 %257) #3, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py", directory: "inductor_cache/se")
!4 = !{ptr @triton_red_fused__softmax_21, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__softmax_21, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__softmax_21", linkageName: "triton_red_fused__softmax_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 34, column: 88, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 30, column: 36, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 26, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 37, scope: !7)
!21 = !DILocation(line: 34, column: 63, scope: !7)
!22 = !DILocation(line: 34, column: 75, scope: !7)
!23 = !DILocation(line: 34, column: 69, scope: !7)
!24 = !DILocation(line: 34, column: 34, scope: !7)
!25 = !DILocation(line: 34, column: 80, scope: !7)
!26 = !DILocation(line: 37, column: 46, scope: !7)
!27 = !DILocation(line: 31, column: 27, scope: !7)
!28 = !DILocation(line: 120, column: 21, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 36, column: 45, scope: !7)
!32 = !DILocation(line: 32, column: 25, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !31)
!34 = !DILocation(line: 120, column: 16, scope: !29, inlinedAt: !31)
!35 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !31)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !38)
!37 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!38 = !DILocation(line: 38, column: 38, scope: !7)
!39 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !38)
!41 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !38)
!42 = !DILocation(line: 131, column: 29, scope: !29, inlinedAt: !38)
!43 = !DILocation(line: 39, column: 25, scope: !7)
!44 = !DILocation(line: 39, column: 36, scope: !7)
!45 = !DILocation(line: 39, column: 4, scope: !7)
