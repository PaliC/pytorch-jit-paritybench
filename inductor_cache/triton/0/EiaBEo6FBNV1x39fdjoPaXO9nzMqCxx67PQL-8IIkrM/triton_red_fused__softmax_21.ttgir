#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":19:0)
#loc1 = loc(unknown)
#loc32 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":38:38)
#loc42 = loc(callsite(#loc1 at #loc32))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__softmax_21(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":19:0), %arg3: i32 loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0xFF800000> : tensor<16x32xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c100_i32 = arith.constant 100 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<16x32xf32, #blocked> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<16> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<4> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<400> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<4> : tensor<1x32xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<25> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<100> : tensor<1x32xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc4)
    %4 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked> loc(#loc5)
    %5 = arith.addi %4, %3 : tensor<16x1xi32, #blocked> loc(#loc5)
    %6 = arith.cmpi slt, %5, %cst_1 : tensor<16x1xi32, #blocked> loc(#loc6)
    %7 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc7)
    %9 = arith.remsi %5, %cst_2 : tensor<16x1xi32, #blocked> loc(#loc8)
    %10 = arith.divsi %5, %cst_2 : tensor<16x1xi32, #blocked> loc(#loc9)
    %11 = arith.muli %9, %cst_5 : tensor<16x1xi32, #blocked> loc(#loc10)
    %12 = tt.broadcast %11 : tensor<16x1xi32, #blocked> -> tensor<16x32xi32, #blocked> loc(#loc11)
    %13 = arith.muli %10, %cst_3 : tensor<16x1xi32, #blocked> loc(#loc12)
    %14 = tt.broadcast %13 : tensor<16x1xi32, #blocked> -> tensor<16x32xi32, #blocked> loc(#loc13)
    %15 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<16x32x!tt.ptr<f32>, #blocked> loc(#loc14)
    %16 = tt.broadcast %6 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc15)
    %17 = scf.for %arg4 = %c0_i32 to %c100_i32 step %c32_i32 iter_args(%arg5 = %cst) -> (tensor<16x32xf32, #blocked>)  : i32 {
      %22 = tt.splat %arg4 : i32 -> tensor<1x32xi32, #blocked> loc(#loc17)
      %23 = arith.addi %22, %8 : tensor<1x32xi32, #blocked> loc(#loc17)
      %24 = arith.cmpi slt, %23, %cst_6 : tensor<1x32xi32, #blocked> loc(#loc18)
      %25 = arith.remsi %23, %cst_4 : tensor<1x32xi32, #blocked> loc(#loc19)
      %26 = arith.muli %25, %cst_6 : tensor<1x32xi32, #blocked> loc(#loc20)
      %27 = tt.broadcast %26 : tensor<1x32xi32, #blocked> -> tensor<16x32xi32, #blocked> loc(#loc11)
      %28 = arith.addi %12, %27 : tensor<16x32xi32, #blocked> loc(#loc11)
      %29 = arith.addi %28, %14 : tensor<16x32xi32, #blocked> loc(#loc13)
      %30 = arith.divsi %23, %cst_4 : tensor<1x32xi32, #blocked> loc(#loc21)
      %31 = tt.broadcast %30 : tensor<1x32xi32, #blocked> -> tensor<16x32xi32, #blocked> loc(#loc22)
      %32 = arith.addi %29, %31 : tensor<16x32xi32, #blocked> loc(#loc22)
      %33 = tt.addptr %15, %32 : tensor<16x32x!tt.ptr<f32>, #blocked>, tensor<16x32xi32, #blocked> loc(#loc14)
      %34 = tt.broadcast %24 : tensor<1x32xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc15)
      %35 = arith.andi %34, %16 : tensor<16x32xi1, #blocked> loc(#loc15)
      %36 = tt.load %33, %35, %cst_0 evictionPolicy = evict_last : tensor<16x32x!tt.ptr<f32>, #blocked> loc(#loc23)
      %37 = arith.cmpf ogt, %arg5, %36 : tensor<16x32xf32, #blocked> loc(#loc37)
      %38 = arith.cmpf une, %arg5, %arg5 : tensor<16x32xf32, #blocked> loc(#loc38)
      %39 = arith.ori %37, %38 : tensor<16x32xi1, #blocked> loc(#loc39)
      %40 = arith.select %39, %arg5, %36 : tensor<16x32xi1, #blocked>, tensor<16x32xf32, #blocked> loc(#loc40)
      %41 = arith.select %35, %40, %arg5 : tensor<16x32xi1, #blocked>, tensor<16x32xf32, #blocked> loc(#loc29)
      scf.yield %41 : tensor<16x32xf32, #blocked> loc(#loc30)
    } loc(#loc16)
    %18 = "tt.reduce"(%17) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc32)), %arg5: f32 loc(callsite(#loc1 at #loc32))):
      %22 = arith.cmpf ogt, %arg4, %arg5 : f32 loc(#loc47)
      %23 = arith.cmpf une, %arg4, %arg4 : f32 loc(#loc48)
      %24 = arith.ori %22, %23 : i1 loc(#loc49)
      %25 = arith.select %24, %arg4, %arg5 : f32 loc(#loc50)
      tt.reduce.return %25 : f32 loc(#loc41)
    }) : (tensor<16x32xf32, #blocked>) -> tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc41)
    %19 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xf32, #blocked> loc(#loc33)
    %20 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<16x1x!tt.ptr<f32>, #blocked> loc(#loc34)
    %21 = tt.addptr %20, %5 : tensor<16x1x!tt.ptr<f32>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc34)
    tt.store %21, %19, %6 : tensor<16x1x!tt.ptr<f32>, #blocked> loc(#loc35)
    tt.return loc(#loc36)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":22:28)
#loc3 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":22:33)
#loc4 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":23:44)
#loc5 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":23:23)
#loc6 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":24:21)
#loc7 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":25:33)
#loc8 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":26:19)
#loc9 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":27:19)
#loc10 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":34:37)
#loc11 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":34:42)
#loc12 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":34:63)
#loc13 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":34:59)
#loc14 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":34:34)
#loc15 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":34:88)
#loc16 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":30:36)
#loc17 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":31:27)
#loc18 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":32:25)
#loc19 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":34:53)
#loc20 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":34:48)
#loc21 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":34:75)
#loc22 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":34:69)
#loc23 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":34:80)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc25 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":36:45)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc27 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc29 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":37:46)
#loc30 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":37:8)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":131:29)
#loc33 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":38:41)
#loc34 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":39:25)
#loc35 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":39:36)
#loc36 = loc("inductor_cache/se/cseyyb5kgoucejqnrbpnsmnaodupzzscoz6vji5yymzi33jxh6el.py":39:4)
#loc37 = loc(callsite(#loc24 at #loc25))
#loc38 = loc(callsite(#loc26 at #loc25))
#loc39 = loc(callsite(#loc27 at #loc25))
#loc40 = loc(callsite(#loc28 at #loc25))
#loc41 = loc(callsite(#loc31 at #loc32))
#loc43 = loc(callsite(#loc24 at #loc31))
#loc44 = loc(callsite(#loc26 at #loc31))
#loc45 = loc(callsite(#loc27 at #loc31))
#loc46 = loc(callsite(#loc28 at #loc31))
#loc47 = loc(callsite(#loc43 at #loc32))
#loc48 = loc(callsite(#loc44 at #loc32))
#loc49 = loc(callsite(#loc45 at #loc32))
#loc50 = loc(callsite(#loc46 at #loc32))
