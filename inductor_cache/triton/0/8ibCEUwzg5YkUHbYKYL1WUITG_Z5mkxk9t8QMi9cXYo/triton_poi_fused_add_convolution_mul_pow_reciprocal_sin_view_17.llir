; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@__cudart_i2opi_f = internal unnamed_addr addrspace(1) constant [6 x i32] [i32 1011060801, i32 -614296167, i32 -181084736, i32 -64530479, i32 1313084713, i32 -1560706194], align 4

define void @triton_poi_fused_add_convolution_mul_pow_reciprocal_sin_view_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %result.i.i.i.i1 = alloca [7 x i32], align 4
  %result.i.i.i.i = alloca [7 x i32], align 4
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 254, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, 256, !dbg !14
  %17 = sext i32 %15 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !15
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %18, i1 %16) #4, !dbg !16
  %20 = extractvalue { i32, i32 } %19, 0, !dbg !16
  %21 = extractvalue { i32, i32 } %19, 1, !dbg !16
  %22 = bitcast i32 %20 to float, !dbg !16
  %23 = bitcast i32 %21 to float, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !17
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 %16) #4, !dbg !18
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !18
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !18
  %28 = bitcast i32 %26 to float, !dbg !18
  %29 = bitcast i32 %27 to float, !dbg !18
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !19
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %16) #4, !dbg !20
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !20
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !20
  %34 = bitcast i32 %32 to float, !dbg !20
  %35 = bitcast i32 %33 to float, !dbg !20
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #4, !dbg !21
  %37 = bitcast i32 %36 to float, !dbg !21
  %38 = getelementptr float, ptr addrspace(1) %4, i64 %17, !dbg !22
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %16) #4, !dbg !23
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !23
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !23
  %42 = bitcast i32 %40 to float, !dbg !23
  %43 = bitcast i32 %41 to float, !dbg !23
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %5, i1 true) #4, !dbg !24
  %45 = bitcast i32 %44 to float, !dbg !24
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %6, i1 true) #4, !dbg !25
  %47 = bitcast i32 %46 to float, !dbg !25
  %48 = fadd float %22, %28, !dbg !26
  %49 = fadd float %23, %29, !dbg !26
  %50 = fadd float %34, %37, !dbg !27
  %51 = fadd float %35, %37, !dbg !27
  %52 = fadd float %48, %50, !dbg !28
  %53 = fadd float %49, %51, !dbg !28
  %54 = fadd float %42, %45, !dbg !29
  %55 = fadd float %43, %45, !dbg !29
  %56 = fadd float %52, %54, !dbg !30
  %57 = fadd float %53, %55, !dbg !30
  %58 = fadd float %47, 0x3E112E0BE0000000, !dbg !31
  %59 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %58) #4, !dbg !32
  %60 = fmul float %56, %47, !dbg !33
  %61 = fmul float %57, %47, !dbg !33
  call void @llvm.lifetime.start.p0(i64 28, ptr nonnull %result.i.i.i.i), !dbg !34
  %62 = fmul float %60, 0x3FE45F3060000000, !dbg !34
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %63, 0, !dbg !34
  %64 = tail call i32 @llvm.nvvm.f2i.rn.ftz(float %62) #4, !dbg !34
  %65 = tail call i32 @llvm.nvvm.f2i.rn(float %62) #4, !dbg !34
  %.01.i = select i1 %.not.i, i32 %65, i32 %64, !dbg !34
  %66 = sitofp i32 %.01.i to float, !dbg !34
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not15.i = icmp eq i32 %67, 0, !dbg !34
  %68 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %66, float 0xBFF921FB40000000, float %60) #4, !dbg !34
  %69 = tail call float @llvm.nvvm.fma.rn.f(float %66, float 0xBFF921FB40000000, float %60) #4, !dbg !34
  %.02.i = select i1 %.not15.i, float %69, float %68, !dbg !34
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not16.i = icmp eq i32 %70, 0, !dbg !34
  %71 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %66, float 0xBE74442D00000000, float %.02.i) #4, !dbg !34
  %72 = tail call float @llvm.nvvm.fma.rn.f(float %66, float 0xBE74442D00000000, float %.02.i) #4, !dbg !34
  %.03.i = select i1 %.not16.i, float %72, float %71, !dbg !34
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not17.i = icmp eq i32 %73, 0, !dbg !34
  %74 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %66, float 0xBCF84698A0000000, float %.03.i) #4, !dbg !34
  %75 = tail call float @llvm.nvvm.fma.rn.f(float %66, float 0xBCF84698A0000000, float %.03.i) #4, !dbg !34
  %.04.i = select i1 %.not17.i, float %75, float %74, !dbg !34
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not18.i = icmp eq i32 %76, 0, !dbg !34
  %77 = tail call float @llvm.nvvm.fabs.ftz.f(float %60) #4, !dbg !34
  %78 = tail call float @llvm.nvvm.fabs.f(float %60) #4, !dbg !34
  %.06.i = select i1 %.not18.i, float %78, float %77, !dbg !34
  %79 = fcmp ult float %.06.i, 1.056150e+05, !dbg !34
  br i1 %79, label %__internal_trig_reduction_kernel.exit.i.i, label %__nv_isinff.exit.i.i.i, !dbg !34

__nv_isinff.exit.i.i.i:                           ; preds = %9
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not19.i = icmp eq i32 %80, 0, !dbg !34
  %.07.i = select i1 %.not19.i, float %78, float %77, !dbg !34
  %81 = fcmp oeq float %.07.i, 0x7FF0000000000000, !dbg !34
  br i1 %81, label %__nv_fmul_rn.exit.i.i.i, label %85, !dbg !34

__nv_fmul_rn.exit.i.i.i:                          ; preds = %__nv_isinff.exit.i.i.i
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not27.i = icmp eq i32 %82, 0, !dbg !34
  %83 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %60, float 0.000000e+00) #4, !dbg !34
  %84 = tail call float @llvm.nvvm.mul.rn.f(float %60, float 0.000000e+00) #4, !dbg !34
  %.08.i = select i1 %.not27.i, float %84, float %83, !dbg !34
  br label %__internal_trig_reduction_kernel.exit.i.i, !dbg !34

85:                                               ; preds = %__nv_isinff.exit.i.i.i
  %86 = bitcast float %60 to i32, !dbg !34
  %87 = lshr i32 %86, 23, !dbg !34
  %88 = and i32 %87, 224, !dbg !34
  %89 = add nsw i32 %88, -128, !dbg !34
  %90 = shl i32 %86, 8, !dbg !34
  %91 = or i32 %90, -2147483648, !dbg !34
  %92 = lshr exact i32 %89, 5, !dbg !34
  br label %93, !dbg !34

93:                                               ; preds = %85, %93
  %indvars.iv = phi i64 [ 0, %85 ], [ %indvars.iv.next, %93 ]
  %hi.i.i.i.0.i56 = phi i32 [ 0, %85 ], [ %98, %93 ]
  %94 = getelementptr inbounds [6 x i32], ptr addrspace(1) @__cudart_i2opi_f, i64 0, i64 %indvars.iv, !dbg !34
  %95 = load i32, ptr addrspace(1) %94, align 4, !dbg !34
  %96 = tail call { i32, i32 } asm "{\0A\09mad.lo.cc.u32   $0, $2, $3, $4;\0A\09madc.hi.u32     $1, $2, $3,  0;\0A\09}", "=r,=r,r,r,r"(i32 %95, i32 %91, i32 %hi.i.i.i.0.i56) #5, !dbg !34, !srcloc !35
  %97 = extractvalue { i32, i32 } %96, 0, !dbg !34
  %98 = extractvalue { i32, i32 } %96, 1, !dbg !34
  %99 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %indvars.iv, !dbg !34
  store i32 %97, ptr %99, align 4, !dbg !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !34
  %exitcond.not = icmp eq i64 %indvars.iv.next, 6, !dbg !34
  br i1 %exitcond.not, label %100, label %93, !dbg !34, !llvm.loop !36

100:                                              ; preds = %93
  %101 = getelementptr inbounds i8, ptr %result.i.i.i.i, i64 24, !dbg !34
  store i32 %98, ptr %101, align 4, !dbg !34
  %102 = and i32 %87, 31, !dbg !34
  %103 = sub nsw i32 6, %92, !dbg !34
  %104 = sext i32 %103 to i64, !dbg !34
  %105 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %104, !dbg !34
  %106 = load i32, ptr %105, align 4, !dbg !34
  %107 = sub nsw i32 5, %92, !dbg !34
  %108 = sext i32 %107 to i64, !dbg !34
  %109 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %108, !dbg !34
  %110 = load i32, ptr %109, align 4, !dbg !34
  %.not20.i = icmp eq i32 %102, 0, !dbg !34
  br i1 %.not20.i, label %__internal_trig_reduction_slowpath.exit.i.i.i, label %111, !dbg !34

111:                                              ; preds = %100
  %112 = sub nsw i32 4, %92, !dbg !34
  %113 = sub nuw nsw i32 32, %102, !dbg !34
  %114 = shl i32 %106, %102, !dbg !34
  %115 = lshr i32 %110, %113, !dbg !34
  %116 = add i32 %115, %114, !dbg !34
  %117 = shl i32 %110, %102, !dbg !34
  %118 = sext i32 %112 to i64, !dbg !34
  %119 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %118, !dbg !34
  %120 = load i32, ptr %119, align 4, !dbg !34
  %121 = lshr i32 %120, %113, !dbg !34
  %122 = add i32 %121, %117, !dbg !34
  br label %__internal_trig_reduction_slowpath.exit.i.i.i, !dbg !34

__internal_trig_reduction_slowpath.exit.i.i.i:    ; preds = %111, %100
  %hi.i.i.i.1.i = phi i32 [ %116, %111 ], [ %106, %100 ], !dbg !34
  %lo.i.i.i.0.i = phi i32 [ %122, %111 ], [ %110, %100 ], !dbg !34
  %123 = lshr i32 %hi.i.i.i.1.i, 30, !dbg !34
  %124 = tail call i32 @llvm.fshl.i32(i32 %hi.i.i.i.1.i, i32 %lo.i.i.i.0.i, i32 2), !dbg !34
  %125 = shl i32 %lo.i.i.i.0.i, 2, !dbg !34
  %126 = lshr i32 %124, 31, !dbg !34
  %127 = add nuw nsw i32 %126, %123, !dbg !34
  %128 = sub nsw i32 0, %127, !dbg !34
  %.not2123.i = icmp slt i32 %86, 0, !dbg !34
  %spec.select.i = select i1 %.not2123.i, i32 %128, i32 %127, !dbg !34
  %129 = xor i32 %124, %86, !dbg !34
  %.lobit.i = ashr i32 %124, 31, !dbg !34
  %hi.i.i.i.2.i = xor i32 %.lobit.i, %124, !dbg !34
  %lo.i.i.i.1.i = xor i32 %.lobit.i, %125, !dbg !34
  %130 = zext i32 %hi.i.i.i.2.i to i64, !dbg !34
  %131 = shl nuw i64 %130, 32, !dbg !34
  %132 = zext i32 %lo.i.i.i.1.i to i64, !dbg !34
  %133 = or disjoint i64 %131, %132, !dbg !34
  %134 = sitofp i64 %133 to double, !dbg !34
  %135 = fmul double %134, 0x3BF921FB54442D19, !dbg !34
  %136 = fptrunc double %135 to float, !dbg !34
  %137 = fneg float %136, !dbg !34
  %.not2526.i = icmp slt i32 %129, 0, !dbg !34
  %r.i.i.i.0.i = select i1 %.not2526.i, float %137, float %136, !dbg !34
  br label %__internal_trig_reduction_kernel.exit.i.i, !dbg !34

__internal_trig_reduction_kernel.exit.i.i:        ; preds = %__internal_trig_reduction_slowpath.exit.i.i.i, %__nv_fmul_rn.exit.i.i.i, %9
  %i.i.1.i = phi i32 [ %.01.i, %9 ], [ 0, %__nv_fmul_rn.exit.i.i.i ], [ %spec.select.i, %__internal_trig_reduction_slowpath.exit.i.i.i ], !dbg !34
  %t.i.i.1.i = phi float [ %.04.i, %9 ], [ %.08.i, %__nv_fmul_rn.exit.i.i.i ], [ %r.i.i.i.0.i, %__internal_trig_reduction_slowpath.exit.i.i.i ], !dbg !34
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not28.i = icmp eq i32 %138, 0, !dbg !34
  %139 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %t.i.i.1.i, float %t.i.i.1.i) #4, !dbg !34
  %140 = tail call float @llvm.nvvm.mul.rn.f(float %t.i.i.1.i, float %t.i.i.1.i) #4, !dbg !34
  %.011.i = select i1 %.not28.i, float %140, float %139, !dbg !34
  %141 = and i32 %i.i.1.i, 1, !dbg !34
  %.not29.i = icmp eq i32 %141, 0, !dbg !34
  %142 = select i1 %.not29.i, float %t.i.i.1.i, float 1.000000e+00, !dbg !34
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not30.i = icmp eq i32 %143, 0, !dbg !34
  %144 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %142, float 0.000000e+00) #4, !dbg !34
  %145 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %142, float 0.000000e+00) #4, !dbg !34
  %.012.i = select i1 %.not30.i, float %145, float %144, !dbg !34
  br i1 %.not29.i, label %__internal_fmad.exit2.i.i.i, label %__internal_fmad.exit1.i.i.i, !dbg !34

__internal_fmad.exit1.i.i.i:                      ; preds = %__internal_trig_reduction_kernel.exit.i.i
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not31.i = icmp eq i32 %146, 0, !dbg !34
  %147 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3EF9758000000000, float %.011.i, float 0xBF56C0FDA0000000) #4, !dbg !34
  %148 = tail call float @llvm.nvvm.fma.rn.f(float 0x3EF9758000000000, float %.011.i, float 0xBF56C0FDA0000000) #4, !dbg !34
  %.013.i = select i1 %.not31.i, float %148, float %147, !dbg !34
  br label %__internal_fmad.exit2.i.i.i, !dbg !34

__internal_fmad.exit2.i.i.i:                      ; preds = %__internal_fmad.exit1.i.i.i, %__internal_trig_reduction_kernel.exit.i.i
  %149 = phi float [ 0xBFDFFFFFE0000000, %__internal_fmad.exit1.i.i.i ], [ 0xBFC5555500000000, %__internal_trig_reduction_kernel.exit.i.i ], !dbg !34
  %150 = phi float [ 0x3FA5555760000000, %__internal_fmad.exit1.i.i.i ], [ 0x3F8110BC80000000, %__internal_trig_reduction_kernel.exit.i.i ], !dbg !34
  %151 = phi float [ %.013.i, %__internal_fmad.exit1.i.i.i ], [ 0xBF29A82A60000000, %__internal_trig_reduction_kernel.exit.i.i ], !dbg !34
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not32.i = icmp eq i32 %152, 0, !dbg !34
  %153 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %151, float %.011.i, float %150) #4, !dbg !34
  %154 = tail call float @llvm.nvvm.fma.rn.f(float %151, float %.011.i, float %150) #4, !dbg !34
  %.010.i = select i1 %.not32.i, float %154, float %153, !dbg !34
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not33.i = icmp eq i32 %155, 0, !dbg !34
  %156 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %.011.i, float %149) #4, !dbg !34
  %157 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %.011.i, float %149) #4, !dbg !34
  %.09.i = select i1 %.not33.i, float %157, float %156, !dbg !34
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not34.i = icmp eq i32 %158, 0, !dbg !34
  %159 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %.012.i, float %142) #4, !dbg !34
  %160 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %.012.i, float %142) #4, !dbg !34
  %.05.i = select i1 %.not34.i, float %160, float %159, !dbg !34
  %161 = and i32 %i.i.1.i, 2, !dbg !34
  %.not35.i = icmp eq i32 %161, 0, !dbg !34
  br i1 %.not35.i, label %__nv_sinf.exit, label %__internal_fmad.exit5.i.i.i, !dbg !34

__internal_fmad.exit5.i.i.i:                      ; preds = %__internal_fmad.exit2.i.i.i
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not36.i = icmp eq i32 %162, 0, !dbg !34
  %163 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float -1.000000e+00, float 0.000000e+00) #4, !dbg !34
  %164 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float -1.000000e+00, float 0.000000e+00) #4, !dbg !34
  %.0.i = select i1 %.not36.i, float %164, float %163, !dbg !34
  br label %__nv_sinf.exit, !dbg !34

__nv_sinf.exit:                                   ; preds = %__internal_fmad.exit2.i.i.i, %__internal_fmad.exit5.i.i.i
  %z.i.i.0.i = phi float [ %.0.i, %__internal_fmad.exit5.i.i.i ], [ %.05.i, %__internal_fmad.exit2.i.i.i ], !dbg !34
  call void @llvm.lifetime.end.p0(i64 28, ptr nonnull %result.i.i.i.i), !dbg !34
  call void @llvm.lifetime.start.p0(i64 28, ptr nonnull %result.i.i.i.i1), !dbg !34
  %165 = fmul float %61, 0x3FE45F3060000000, !dbg !34
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i2 = icmp eq i32 %166, 0, !dbg !34
  %167 = tail call i32 @llvm.nvvm.f2i.rn.ftz(float %165) #4, !dbg !34
  %168 = tail call i32 @llvm.nvvm.f2i.rn(float %165) #4, !dbg !34
  %.01.i3 = select i1 %.not.i2, i32 %168, i32 %167, !dbg !34
  %169 = sitofp i32 %.01.i3 to float, !dbg !34
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not15.i4 = icmp eq i32 %170, 0, !dbg !34
  %171 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %169, float 0xBFF921FB40000000, float %61) #4, !dbg !34
  %172 = tail call float @llvm.nvvm.fma.rn.f(float %169, float 0xBFF921FB40000000, float %61) #4, !dbg !34
  %.02.i5 = select i1 %.not15.i4, float %172, float %171, !dbg !34
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not16.i6 = icmp eq i32 %173, 0, !dbg !34
  %174 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %169, float 0xBE74442D00000000, float %.02.i5) #4, !dbg !34
  %175 = tail call float @llvm.nvvm.fma.rn.f(float %169, float 0xBE74442D00000000, float %.02.i5) #4, !dbg !34
  %.03.i7 = select i1 %.not16.i6, float %175, float %174, !dbg !34
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not17.i8 = icmp eq i32 %176, 0, !dbg !34
  %177 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %169, float 0xBCF84698A0000000, float %.03.i7) #4, !dbg !34
  %178 = tail call float @llvm.nvvm.fma.rn.f(float %169, float 0xBCF84698A0000000, float %.03.i7) #4, !dbg !34
  %.04.i9 = select i1 %.not17.i8, float %178, float %177, !dbg !34
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not18.i10 = icmp eq i32 %179, 0, !dbg !34
  %180 = tail call float @llvm.nvvm.fabs.ftz.f(float %61) #4, !dbg !34
  %181 = tail call float @llvm.nvvm.fabs.f(float %61) #4, !dbg !34
  %.06.i11 = select i1 %.not18.i10, float %181, float %180, !dbg !34
  %182 = fcmp ult float %.06.i11, 1.056150e+05, !dbg !34
  br i1 %182, label %__internal_trig_reduction_kernel.exit.i.i29, label %__nv_isinff.exit.i.i.i12, !dbg !34

__nv_isinff.exit.i.i.i12:                         ; preds = %__nv_sinf.exit
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not19.i13 = icmp eq i32 %183, 0, !dbg !34
  %.07.i14 = select i1 %.not19.i13, float %181, float %180, !dbg !34
  %184 = fcmp oeq float %.07.i14, 0x7FF0000000000000, !dbg !34
  br i1 %184, label %__nv_fmul_rn.exit.i.i.i52, label %188, !dbg !34

__nv_fmul_rn.exit.i.i.i52:                        ; preds = %__nv_isinff.exit.i.i.i12
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not27.i53 = icmp eq i32 %185, 0, !dbg !34
  %186 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %61, float 0.000000e+00) #4, !dbg !34
  %187 = tail call float @llvm.nvvm.mul.rn.f(float %61, float 0.000000e+00) #4, !dbg !34
  %.08.i54 = select i1 %.not27.i53, float %187, float %186, !dbg !34
  br label %__internal_trig_reduction_kernel.exit.i.i29, !dbg !34

188:                                              ; preds = %__nv_isinff.exit.i.i.i12
  %189 = bitcast float %61 to i32, !dbg !34
  %190 = lshr i32 %189, 23, !dbg !34
  %191 = and i32 %190, 224, !dbg !34
  %192 = add nsw i32 %191, -128, !dbg !34
  %193 = shl i32 %189, 8, !dbg !34
  %194 = or i32 %193, -2147483648, !dbg !34
  %195 = lshr exact i32 %192, 5, !dbg !34
  br label %196, !dbg !34

196:                                              ; preds = %188, %196
  %indvars.iv63 = phi i64 [ 0, %188 ], [ %indvars.iv.next64, %196 ]
  %hi.i.i.i.0.i1558 = phi i32 [ 0, %188 ], [ %201, %196 ]
  %197 = getelementptr inbounds [6 x i32], ptr addrspace(1) @__cudart_i2opi_f, i64 0, i64 %indvars.iv63, !dbg !34
  %198 = load i32, ptr addrspace(1) %197, align 4, !dbg !34
  %199 = tail call { i32, i32 } asm "{\0A\09mad.lo.cc.u32   $0, $2, $3, $4;\0A\09madc.hi.u32     $1, $2, $3,  0;\0A\09}", "=r,=r,r,r,r"(i32 %198, i32 %194, i32 %hi.i.i.i.0.i1558) #5, !dbg !34, !srcloc !35
  %200 = extractvalue { i32, i32 } %199, 0, !dbg !34
  %201 = extractvalue { i32, i32 } %199, 1, !dbg !34
  %202 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i1, i64 0, i64 %indvars.iv63, !dbg !34
  store i32 %200, ptr %202, align 4, !dbg !34
  %indvars.iv.next64 = add nuw nsw i64 %indvars.iv63, 1, !dbg !34
  %exitcond65.not = icmp eq i64 %indvars.iv.next64, 6, !dbg !34
  br i1 %exitcond65.not, label %203, label %196, !dbg !34, !llvm.loop !38

203:                                              ; preds = %196
  %204 = getelementptr inbounds i8, ptr %result.i.i.i.i1, i64 24, !dbg !34
  store i32 %201, ptr %204, align 4, !dbg !34
  %205 = and i32 %190, 31, !dbg !34
  %206 = sub nsw i32 6, %195, !dbg !34
  %207 = sext i32 %206 to i64, !dbg !34
  %208 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i1, i64 0, i64 %207, !dbg !34
  %209 = load i32, ptr %208, align 4, !dbg !34
  %210 = sub nsw i32 5, %195, !dbg !34
  %211 = sext i32 %210 to i64, !dbg !34
  %212 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i1, i64 0, i64 %211, !dbg !34
  %213 = load i32, ptr %212, align 4, !dbg !34
  %.not20.i17 = icmp eq i32 %205, 0, !dbg !34
  br i1 %.not20.i17, label %__internal_trig_reduction_slowpath.exit.i.i.i18, label %214, !dbg !34

214:                                              ; preds = %203
  %215 = sub nsw i32 4, %195, !dbg !34
  %216 = sub nuw nsw i32 32, %205, !dbg !34
  %217 = shl i32 %209, %205, !dbg !34
  %218 = lshr i32 %213, %216, !dbg !34
  %219 = add i32 %218, %217, !dbg !34
  %220 = shl i32 %213, %205, !dbg !34
  %221 = sext i32 %215 to i64, !dbg !34
  %222 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i1, i64 0, i64 %221, !dbg !34
  %223 = load i32, ptr %222, align 4, !dbg !34
  %224 = lshr i32 %223, %216, !dbg !34
  %225 = add i32 %224, %220, !dbg !34
  br label %__internal_trig_reduction_slowpath.exit.i.i.i18, !dbg !34

__internal_trig_reduction_slowpath.exit.i.i.i18:  ; preds = %214, %203
  %hi.i.i.i.1.i19 = phi i32 [ %219, %214 ], [ %209, %203 ], !dbg !34
  %lo.i.i.i.0.i20 = phi i32 [ %225, %214 ], [ %213, %203 ], !dbg !34
  %226 = lshr i32 %hi.i.i.i.1.i19, 30, !dbg !34
  %227 = tail call i32 @llvm.fshl.i32(i32 %hi.i.i.i.1.i19, i32 %lo.i.i.i.0.i20, i32 2), !dbg !34
  %228 = shl i32 %lo.i.i.i.0.i20, 2, !dbg !34
  %229 = lshr i32 %227, 31, !dbg !34
  %230 = add nuw nsw i32 %229, %226, !dbg !34
  %231 = sub nsw i32 0, %230, !dbg !34
  %.not2123.i21 = icmp slt i32 %189, 0, !dbg !34
  %spec.select.i22 = select i1 %.not2123.i21, i32 %231, i32 %230, !dbg !34
  %232 = xor i32 %227, %189, !dbg !34
  %.lobit.i23 = ashr i32 %227, 31, !dbg !34
  %hi.i.i.i.2.i24 = xor i32 %.lobit.i23, %227, !dbg !34
  %lo.i.i.i.1.i26 = xor i32 %.lobit.i23, %228, !dbg !34
  %233 = zext i32 %hi.i.i.i.2.i24 to i64, !dbg !34
  %234 = shl nuw i64 %233, 32, !dbg !34
  %235 = zext i32 %lo.i.i.i.1.i26 to i64, !dbg !34
  %236 = or disjoint i64 %234, %235, !dbg !34
  %237 = sitofp i64 %236 to double, !dbg !34
  %238 = fmul double %237, 0x3BF921FB54442D19, !dbg !34
  %239 = fptrunc double %238 to float, !dbg !34
  %240 = fneg float %239, !dbg !34
  %.not2526.i27 = icmp slt i32 %232, 0, !dbg !34
  %r.i.i.i.0.i28 = select i1 %.not2526.i27, float %240, float %239, !dbg !34
  br label %__internal_trig_reduction_kernel.exit.i.i29, !dbg !34

__internal_trig_reduction_kernel.exit.i.i29:      ; preds = %__internal_trig_reduction_slowpath.exit.i.i.i18, %__nv_fmul_rn.exit.i.i.i52, %__nv_sinf.exit
  %i.i.1.i30 = phi i32 [ %.01.i3, %__nv_sinf.exit ], [ 0, %__nv_fmul_rn.exit.i.i.i52 ], [ %spec.select.i22, %__internal_trig_reduction_slowpath.exit.i.i.i18 ], !dbg !34
  %t.i.i.1.i31 = phi float [ %.04.i9, %__nv_sinf.exit ], [ %.08.i54, %__nv_fmul_rn.exit.i.i.i52 ], [ %r.i.i.i.0.i28, %__internal_trig_reduction_slowpath.exit.i.i.i18 ], !dbg !34
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not28.i32 = icmp eq i32 %241, 0, !dbg !34
  %242 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %t.i.i.1.i31, float %t.i.i.1.i31) #4, !dbg !34
  %243 = tail call float @llvm.nvvm.mul.rn.f(float %t.i.i.1.i31, float %t.i.i.1.i31) #4, !dbg !34
  %.011.i33 = select i1 %.not28.i32, float %243, float %242, !dbg !34
  %244 = and i32 %i.i.1.i30, 1, !dbg !34
  %.not29.i34 = icmp eq i32 %244, 0, !dbg !34
  %245 = select i1 %.not29.i34, float %t.i.i.1.i31, float 1.000000e+00, !dbg !34
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not30.i35 = icmp eq i32 %246, 0, !dbg !34
  %247 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i33, float %245, float 0.000000e+00) #4, !dbg !34
  %248 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i33, float %245, float 0.000000e+00) #4, !dbg !34
  %.012.i36 = select i1 %.not30.i35, float %248, float %247, !dbg !34
  br i1 %.not29.i34, label %__internal_fmad.exit2.i.i.i40, label %__internal_fmad.exit1.i.i.i37, !dbg !34

__internal_fmad.exit1.i.i.i37:                    ; preds = %__internal_trig_reduction_kernel.exit.i.i29
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not31.i38 = icmp eq i32 %249, 0, !dbg !34
  %250 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3EF9758000000000, float %.011.i33, float 0xBF56C0FDA0000000) #4, !dbg !34
  %251 = tail call float @llvm.nvvm.fma.rn.f(float 0x3EF9758000000000, float %.011.i33, float 0xBF56C0FDA0000000) #4, !dbg !34
  %.013.i39 = select i1 %.not31.i38, float %251, float %250, !dbg !34
  br label %__internal_fmad.exit2.i.i.i40, !dbg !34

__internal_fmad.exit2.i.i.i40:                    ; preds = %__internal_fmad.exit1.i.i.i37, %__internal_trig_reduction_kernel.exit.i.i29
  %252 = phi float [ 0xBFDFFFFFE0000000, %__internal_fmad.exit1.i.i.i37 ], [ 0xBFC5555500000000, %__internal_trig_reduction_kernel.exit.i.i29 ], !dbg !34
  %253 = phi float [ 0x3FA5555760000000, %__internal_fmad.exit1.i.i.i37 ], [ 0x3F8110BC80000000, %__internal_trig_reduction_kernel.exit.i.i29 ], !dbg !34
  %254 = phi float [ %.013.i39, %__internal_fmad.exit1.i.i.i37 ], [ 0xBF29A82A60000000, %__internal_trig_reduction_kernel.exit.i.i29 ], !dbg !34
  %255 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not32.i41 = icmp eq i32 %255, 0, !dbg !34
  %256 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %254, float %.011.i33, float %253) #4, !dbg !34
  %257 = tail call float @llvm.nvvm.fma.rn.f(float %254, float %.011.i33, float %253) #4, !dbg !34
  %.010.i42 = select i1 %.not32.i41, float %257, float %256, !dbg !34
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not33.i43 = icmp eq i32 %258, 0, !dbg !34
  %259 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i42, float %.011.i33, float %252) #4, !dbg !34
  %260 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i42, float %.011.i33, float %252) #4, !dbg !34
  %.09.i44 = select i1 %.not33.i43, float %260, float %259, !dbg !34
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not34.i45 = icmp eq i32 %261, 0, !dbg !34
  %262 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i44, float %.012.i36, float %245) #4, !dbg !34
  %263 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i44, float %.012.i36, float %245) #4, !dbg !34
  %.05.i46 = select i1 %.not34.i45, float %263, float %262, !dbg !34
  %264 = and i32 %i.i.1.i30, 2, !dbg !34
  %.not35.i47 = icmp eq i32 %264, 0, !dbg !34
  br i1 %.not35.i47, label %__nv_sinf.exit55, label %__internal_fmad.exit5.i.i.i48, !dbg !34

__internal_fmad.exit5.i.i.i48:                    ; preds = %__internal_fmad.exit2.i.i.i40
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not36.i49 = icmp eq i32 %265, 0, !dbg !34
  %266 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i46, float -1.000000e+00, float 0.000000e+00) #4, !dbg !34
  %267 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i46, float -1.000000e+00, float 0.000000e+00) #4, !dbg !34
  %.0.i50 = select i1 %.not36.i49, float %267, float %266, !dbg !34
  br label %__nv_sinf.exit55, !dbg !34

__nv_sinf.exit55:                                 ; preds = %__internal_fmad.exit2.i.i.i40, %__internal_fmad.exit5.i.i.i48
  %z.i.i.0.i51 = phi float [ %.0.i50, %__internal_fmad.exit5.i.i.i48 ], [ %.05.i46, %__internal_fmad.exit2.i.i.i40 ], !dbg !34
  call void @llvm.lifetime.end.p0(i64 28, ptr nonnull %result.i.i.i.i1), !dbg !34
  %268 = fmul float %z.i.i.0.i, %z.i.i.0.i, !dbg !39
  %269 = fmul float %z.i.i.0.i51, %z.i.i.0.i51, !dbg !39
  %270 = fmul float %59, %268, !dbg !40
  %271 = fmul float %59, %269, !dbg !40
  %272 = fadd float %56, %270, !dbg !41
  %273 = fadd float %57, %271, !dbg !41
  %274 = bitcast float %56 to i32, !dbg !42
  %275 = bitcast float %57 to i32, !dbg !42
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %274, i32 %275, ptr addrspace(1) %30, i1 %16) #4, !dbg !42
  %276 = getelementptr float, ptr addrspace(1) %7, i64 %17, !dbg !43
  %277 = bitcast float %272 to i32, !dbg !44
  %278 = bitcast float %273 to i32, !dbg !44
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %277, i32 %278, ptr addrspace(1) %276, i1 %16) #4, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.nvvm.f2i.rn.ftz(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.nvvm.f2i.rn(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.ftz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.f(float, float) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.fshl.i32(i32, i32, i32) #2

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { nounwind }
attributes #5 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyi74oa2j5oji5e2scx7wzeeb7lycwe23l4lt42zorfy2e6zqe5r.py", directory: "inductor_cache/yi")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_pow_reciprocal_sin_view_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_pow_reciprocal_sin_view_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_pow_reciprocal_sin_view_17", linkageName: "triton_poi_fused_add_convolution_mul_pow_reciprocal_sin_view_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 30, scope: !7)
!16 = !DILocation(line: 25, column: 35, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 34, scope: !7)
!20 = !DILocation(line: 27, column: 39, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 19, scope: !7)
!25 = !DILocation(line: 33, column: 20, scope: !7)
!26 = !DILocation(line: 35, column: 18, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 37, column: 18, scope: !7)
!29 = !DILocation(line: 38, column: 19, scope: !7)
!30 = !DILocation(line: 39, column: 19, scope: !7)
!31 = !DILocation(line: 41, column: 20, scope: !7)
!32 = !DILocation(line: 43, column: 20, scope: !7)
!33 = !DILocation(line: 44, column: 20, scope: !7)
!34 = !DILocation(line: 45, column: 24, scope: !7)
!35 = !{i32 30999, i32 31003, i32 31048, i32 31093}
!36 = distinct !{!36, !37}
!37 = !{!"llvm.loop.unroll.count", i32 1}
!38 = distinct !{!38, !37}
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 49, column: 40, scope: !7)
!43 = !DILocation(line: 50, column: 25, scope: !7)
!44 = !DILocation(line: 50, column: 37, scope: !7)
!45 = !DILocation(line: 50, column: 4, scope: !7)
