; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %16 = srem i32 %14, 12, !dbg !14
  %17 = srem i32 %15, 12, !dbg !14
  %18 = sext i32 %14 to i64, !dbg !15
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !15
  %20 = sext i32 %15 to i64, !dbg !15
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !15
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #3, !dbg !16
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !16
  %24 = sext i32 %16 to i64, !dbg !17
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !17
  %26 = sext i32 %17 to i64, !dbg !17
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !17
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !18
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !18
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !19
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !20
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !21
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !22
  %41 = bitcast i32 %37 to float, !dbg !22
  %42 = bitcast i32 %38 to float, !dbg !22
  %43 = bitcast i32 %39 to float, !dbg !22
  %44 = bitcast i32 %40 to float, !dbg !22
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !22
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !22
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !22
  %50 = bitcast i32 %46 to float, !dbg !22
  %51 = bitcast i32 %47 to float, !dbg !22
  %52 = bitcast i32 %48 to float, !dbg !22
  %53 = bitcast i32 %49 to float, !dbg !22
  %54 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !23
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !23
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !24
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !25
  %59 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !25
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !26
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !26
  %62 = fadd float %41, 0x3EE4F8B580000000, !dbg !27
  %63 = fadd float %42, 0x3EE4F8B580000000, !dbg !27
  %64 = fadd float %43, 0x3EE4F8B580000000, !dbg !27
  %65 = fadd float %44, 0x3EE4F8B580000000, !dbg !27
  %66 = fadd float %50, 0x3EE4F8B580000000, !dbg !27
  %67 = fadd float %51, 0x3EE4F8B580000000, !dbg !27
  %68 = fadd float %52, 0x3EE4F8B580000000, !dbg !27
  %69 = fadd float %53, 0x3EE4F8B580000000, !dbg !27
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %70, 0, !dbg !28
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %71, 0, !dbg !28
  br i1 %.not.i, label %77, label %72, !dbg !28

72:                                               ; preds = %8
  br i1 %.not1.i, label %75, label %73, !dbg !28

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

77:                                               ; preds = %8
  br i1 %.not1.i, label %80, label %78, !dbg !28

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %73, %75, %78, %80
  %.0.i = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !28
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i8 = icmp eq i32 %82, 0, !dbg !28
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i11 = icmp eq i32 %83, 0, !dbg !28
  br i1 %.not.i8, label %89, label %84, !dbg !28

84:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %87, label %85, !dbg !28

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #3, !dbg !28
  br label %__nv_sqrtf.exit12, !dbg !28

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #3, !dbg !28
  br label %__nv_sqrtf.exit12, !dbg !28

89:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %92, label %90, !dbg !28

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #3, !dbg !28
  br label %__nv_sqrtf.exit12, !dbg !28

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #3, !dbg !28
  br label %__nv_sqrtf.exit12, !dbg !28

__nv_sqrtf.exit12:                                ; preds = %85, %87, %90, %92
  %.0.i10 = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !28
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i13 = icmp eq i32 %94, 0, !dbg !28
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i16 = icmp eq i32 %95, 0, !dbg !28
  br i1 %.not.i13, label %101, label %96, !dbg !28

96:                                               ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %99, label %97, !dbg !28

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !28
  br label %__nv_sqrtf.exit17, !dbg !28

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !28
  br label %__nv_sqrtf.exit17, !dbg !28

101:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %104, label %102, !dbg !28

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !28
  br label %__nv_sqrtf.exit17, !dbg !28

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !28
  br label %__nv_sqrtf.exit17, !dbg !28

__nv_sqrtf.exit17:                                ; preds = %97, %99, %102, %104
  %.0.i15 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !28
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i18 = icmp eq i32 %106, 0, !dbg !28
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i21 = icmp eq i32 %107, 0, !dbg !28
  br i1 %.not.i18, label %113, label %108, !dbg !28

108:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %111, label %109, !dbg !28

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !28
  br label %__nv_sqrtf.exit22, !dbg !28

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !28
  br label %__nv_sqrtf.exit22, !dbg !28

113:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %116, label %114, !dbg !28

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !28
  br label %__nv_sqrtf.exit22, !dbg !28

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !28
  br label %__nv_sqrtf.exit22, !dbg !28

__nv_sqrtf.exit22:                                ; preds = %109, %111, %114, %116
  %.0.i20 = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !28
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i23 = icmp eq i32 %118, 0, !dbg !28
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i26 = icmp eq i32 %119, 0, !dbg !28
  br i1 %.not.i23, label %125, label %120, !dbg !28

120:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %123, label %121, !dbg !28

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !28
  br label %__nv_sqrtf.exit27, !dbg !28

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !28
  br label %__nv_sqrtf.exit27, !dbg !28

125:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %128, label %126, !dbg !28

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !28
  br label %__nv_sqrtf.exit27, !dbg !28

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !28
  br label %__nv_sqrtf.exit27, !dbg !28

__nv_sqrtf.exit27:                                ; preds = %121, %123, %126, %128
  %.0.i25 = phi float [ %122, %121 ], [ %124, %123 ], [ %127, %126 ], [ %129, %128 ], !dbg !28
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i28 = icmp eq i32 %130, 0, !dbg !28
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i31 = icmp eq i32 %131, 0, !dbg !28
  br i1 %.not.i28, label %137, label %132, !dbg !28

132:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %135, label %133, !dbg !28

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !28
  br label %__nv_sqrtf.exit32, !dbg !28

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !28
  br label %__nv_sqrtf.exit32, !dbg !28

137:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %140, label %138, !dbg !28

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !28
  br label %__nv_sqrtf.exit32, !dbg !28

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !28
  br label %__nv_sqrtf.exit32, !dbg !28

__nv_sqrtf.exit32:                                ; preds = %133, %135, %138, %140
  %.0.i30 = phi float [ %134, %133 ], [ %136, %135 ], [ %139, %138 ], [ %141, %140 ], !dbg !28
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i33 = icmp eq i32 %142, 0, !dbg !28
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i36 = icmp eq i32 %143, 0, !dbg !28
  br i1 %.not.i33, label %149, label %144, !dbg !28

144:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %147, label %145, !dbg !28

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !28
  br label %__nv_sqrtf.exit37, !dbg !28

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !28
  br label %__nv_sqrtf.exit37, !dbg !28

149:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %152, label %150, !dbg !28

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !28
  br label %__nv_sqrtf.exit37, !dbg !28

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !28
  br label %__nv_sqrtf.exit37, !dbg !28

__nv_sqrtf.exit37:                                ; preds = %145, %147, %150, %152
  %.0.i35 = phi float [ %146, %145 ], [ %148, %147 ], [ %151, %150 ], [ %153, %152 ], !dbg !28
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i38 = icmp eq i32 %154, 0, !dbg !28
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i41 = icmp eq i32 %155, 0, !dbg !28
  br i1 %.not.i38, label %161, label %156, !dbg !28

156:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %159, label %157, !dbg !28

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !28
  br label %__nv_sqrtf.exit42, !dbg !28

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !28
  br label %__nv_sqrtf.exit42, !dbg !28

161:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %164, label %162, !dbg !28

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !28
  br label %__nv_sqrtf.exit42, !dbg !28

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !28
  br label %__nv_sqrtf.exit42, !dbg !28

__nv_sqrtf.exit42:                                ; preds = %157, %159, %162, %164
  %.0.i40 = phi float [ %158, %157 ], [ %160, %159 ], [ %163, %162 ], [ %165, %164 ], !dbg !28
  %166 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !16
  %167 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !18
  %168 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !20
  %169 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !16
  %170 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !18
  %171 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !20
  %172 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !16
  %173 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !18
  %174 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !20
  %175 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !16
  %176 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !18
  %177 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !20
  %178 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !16
  %179 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !18
  %180 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !20
  %181 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !16
  %182 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !18
  %183 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !20
  %184 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !16
  %185 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !18
  %186 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !20
  %187 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !16
  %188 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !18
  %189 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !20
  %190 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !26
  %191 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !26
  %192 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !26
  %193 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !26
  %194 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !26
  %195 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !26
  %196 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !26
  %197 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !26
  %198 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !24
  %199 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !24
  %200 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !24
  %201 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !24
  %202 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !24
  %203 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !24
  %204 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !24
  %205 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !24
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !29
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #3, !dbg !29
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #3, !dbg !29
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #3, !dbg !29
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #3, !dbg !29
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #3, !dbg !29
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #3, !dbg !29
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #3, !dbg !29
  %214 = insertelement <8 x i32> poison, i32 %166, i64 0, !dbg !16
  %215 = insertelement <8 x i32> %214, i32 %169, i64 1, !dbg !16
  %216 = insertelement <8 x i32> %215, i32 %172, i64 2, !dbg !16
  %217 = insertelement <8 x i32> %216, i32 %175, i64 3, !dbg !16
  %218 = insertelement <8 x i32> %217, i32 %178, i64 4, !dbg !16
  %219 = insertelement <8 x i32> %218, i32 %181, i64 5, !dbg !16
  %220 = insertelement <8 x i32> %219, i32 %184, i64 6, !dbg !16
  %221 = insertelement <8 x i32> %220, i32 %187, i64 7, !dbg !16
  %222 = bitcast <8 x i32> %221 to <8 x float>, !dbg !16
  %223 = insertelement <8 x i32> poison, i32 %167, i64 0, !dbg !18
  %224 = insertelement <8 x i32> %223, i32 %170, i64 1, !dbg !18
  %225 = insertelement <8 x i32> %224, i32 %173, i64 2, !dbg !18
  %226 = insertelement <8 x i32> %225, i32 %176, i64 3, !dbg !18
  %227 = insertelement <8 x i32> %226, i32 %179, i64 4, !dbg !18
  %228 = insertelement <8 x i32> %227, i32 %182, i64 5, !dbg !18
  %229 = insertelement <8 x i32> %228, i32 %185, i64 6, !dbg !18
  %230 = insertelement <8 x i32> %229, i32 %188, i64 7, !dbg !18
  %231 = bitcast <8 x i32> %230 to <8 x float>, !dbg !18
  %232 = fadd <8 x float> %222, %231, !dbg !30
  %233 = insertelement <8 x i32> poison, i32 %168, i64 0, !dbg !20
  %234 = insertelement <8 x i32> %233, i32 %171, i64 1, !dbg !20
  %235 = insertelement <8 x i32> %234, i32 %174, i64 2, !dbg !20
  %236 = insertelement <8 x i32> %235, i32 %177, i64 3, !dbg !20
  %237 = insertelement <8 x i32> %236, i32 %180, i64 4, !dbg !20
  %238 = insertelement <8 x i32> %237, i32 %183, i64 5, !dbg !20
  %239 = insertelement <8 x i32> %238, i32 %186, i64 6, !dbg !20
  %240 = insertelement <8 x i32> %239, i32 %189, i64 7, !dbg !20
  %241 = bitcast <8 x i32> %240 to <8 x float>, !dbg !20
  %242 = fsub <8 x float> %232, %241, !dbg !31
  %243 = insertelement <8 x i32> poison, i32 %190, i64 0, !dbg !26
  %244 = insertelement <8 x i32> %243, i32 %191, i64 1, !dbg !26
  %245 = insertelement <8 x i32> %244, i32 %192, i64 2, !dbg !26
  %246 = insertelement <8 x i32> %245, i32 %193, i64 3, !dbg !26
  %247 = insertelement <8 x i32> %246, i32 %194, i64 4, !dbg !26
  %248 = insertelement <8 x i32> %247, i32 %195, i64 5, !dbg !26
  %249 = insertelement <8 x i32> %248, i32 %196, i64 6, !dbg !26
  %250 = insertelement <8 x i32> %249, i32 %197, i64 7, !dbg !26
  %251 = bitcast <8 x i32> %250 to <8 x float>, !dbg !26
  %252 = insertelement <8 x i32> poison, i32 %198, i64 0, !dbg !24
  %253 = insertelement <8 x i32> %252, i32 %199, i64 1, !dbg !24
  %254 = insertelement <8 x i32> %253, i32 %200, i64 2, !dbg !24
  %255 = insertelement <8 x i32> %254, i32 %201, i64 3, !dbg !24
  %256 = insertelement <8 x i32> %255, i32 %202, i64 4, !dbg !24
  %257 = insertelement <8 x i32> %256, i32 %203, i64 5, !dbg !24
  %258 = insertelement <8 x i32> %257, i32 %204, i64 6, !dbg !24
  %259 = insertelement <8 x i32> %258, i32 %205, i64 7, !dbg !24
  %260 = bitcast <8 x i32> %259 to <8 x float>, !dbg !24
  %261 = insertelement <8 x float> poison, float %213, i64 0, !dbg !32
  %262 = insertelement <8 x float> %261, float %212, i64 1, !dbg !32
  %263 = insertelement <8 x float> %262, float %211, i64 2, !dbg !32
  %264 = insertelement <8 x float> %263, float %210, i64 3, !dbg !32
  %265 = insertelement <8 x float> %264, float %209, i64 4, !dbg !32
  %266 = insertelement <8 x float> %265, float %208, i64 5, !dbg !32
  %267 = insertelement <8 x float> %266, float %207, i64 6, !dbg !32
  %268 = insertelement <8 x float> %267, float %206, i64 7, !dbg !32
  %269 = fmul <8 x float> %242, %268, !dbg !32
  %270 = fmul <8 x float> %269, %260, !dbg !33
  %271 = fadd <8 x float> %270, %251, !dbg !34
  %272 = fcmp ole <8 x float> %271, zeroinitializer, !dbg !35
  %273 = select <8 x i1> %272, <8 x float> zeroinitializer, <8 x float> %271, !dbg !35
  %274 = fcmp olt <8 x float> %273, splat (float 6.000000e+00), !dbg !39
  %275 = extractelement <8 x float> %273, i64 7, !dbg !41
  %276 = fcmp uno float %275, 0.000000e+00, !dbg !42
  %277 = extractelement <8 x float> %273, i64 6, !dbg !41
  %278 = fcmp uno float %277, 0.000000e+00, !dbg !42
  %279 = extractelement <8 x float> %273, i64 5, !dbg !41
  %280 = fcmp uno float %279, 0.000000e+00, !dbg !42
  %281 = extractelement <8 x float> %273, i64 4, !dbg !41
  %282 = fcmp uno float %281, 0.000000e+00, !dbg !42
  %283 = extractelement <8 x float> %273, i64 3, !dbg !41
  %284 = fcmp uno float %283, 0.000000e+00, !dbg !42
  %285 = extractelement <8 x float> %273, i64 2, !dbg !41
  %286 = fcmp uno float %285, 0.000000e+00, !dbg !42
  %287 = extractelement <8 x float> %273, i64 1, !dbg !41
  %288 = fcmp uno float %287, 0.000000e+00, !dbg !42
  %289 = extractelement <8 x float> %273, i64 0, !dbg !41
  %290 = fcmp uno float %289, 0.000000e+00, !dbg !42
  %291 = extractelement <8 x i1> %274, i64 7, !dbg !43
  %292 = or i1 %291, %276, !dbg !43
  %293 = extractelement <8 x i1> %274, i64 6, !dbg !43
  %294 = or i1 %293, %278, !dbg !43
  %295 = extractelement <8 x i1> %274, i64 5, !dbg !43
  %296 = or i1 %295, %280, !dbg !43
  %297 = extractelement <8 x i1> %274, i64 4, !dbg !43
  %298 = or i1 %297, %282, !dbg !43
  %299 = extractelement <8 x i1> %274, i64 3, !dbg !43
  %300 = or i1 %299, %284, !dbg !43
  %301 = extractelement <8 x i1> %274, i64 2, !dbg !43
  %302 = or i1 %301, %286, !dbg !43
  %303 = extractelement <8 x i1> %274, i64 1, !dbg !43
  %304 = or i1 %303, %288, !dbg !43
  %305 = extractelement <8 x i1> %274, i64 0, !dbg !43
  %306 = or i1 %305, %290, !dbg !43
  %bc = bitcast <8 x float> %232 to <8 x i32>, !dbg !44
  %307 = extractelement <8 x i32> %bc, i64 7, !dbg !44
  %bc43 = bitcast <8 x float> %232 to <8 x i32>, !dbg !44
  %308 = extractelement <8 x i32> %bc43, i64 6, !dbg !44
  %bc44 = bitcast <8 x float> %232 to <8 x i32>, !dbg !44
  %309 = extractelement <8 x i32> %bc44, i64 5, !dbg !44
  %bc45 = bitcast <8 x float> %232 to <8 x i32>, !dbg !44
  %310 = extractelement <8 x i32> %bc45, i64 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %307, i32 %308, i32 %309, i32 %310, ptr addrspace(1) %19, i1 true) #3, !dbg !44
  %bc46 = bitcast <8 x float> %232 to <8 x i32>, !dbg !44
  %311 = extractelement <8 x i32> %bc46, i64 3, !dbg !44
  %bc47 = bitcast <8 x float> %232 to <8 x i32>, !dbg !44
  %312 = extractelement <8 x i32> %bc47, i64 2, !dbg !44
  %bc48 = bitcast <8 x float> %232 to <8 x i32>, !dbg !44
  %313 = extractelement <8 x i32> %bc48, i64 1, !dbg !44
  %bc49 = bitcast <8 x float> %232 to <8 x i32>, !dbg !44
  %314 = extractelement <8 x i32> %bc49, i64 0, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %311, i32 %312, i32 %313, i32 %314, ptr addrspace(1) %21, i1 true) #3, !dbg !44
  %315 = getelementptr float, ptr addrspace(1) %6, i64 %18, !dbg !45
  %316 = getelementptr float, ptr addrspace(1) %6, i64 %20, !dbg !45
  %317 = bitcast float %275 to i32, !dbg !41
  %318 = select i1 %292, i32 %317, i32 1086324736, !dbg !46
  %319 = bitcast float %277 to i32, !dbg !41
  %320 = select i1 %294, i32 %319, i32 1086324736, !dbg !46
  %321 = bitcast float %279 to i32, !dbg !41
  %322 = select i1 %296, i32 %321, i32 1086324736, !dbg !46
  %323 = bitcast float %281 to i32, !dbg !41
  %324 = select i1 %298, i32 %323, i32 1086324736, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %318, i32 %320, i32 %322, i32 %324, ptr addrspace(1) %315, i1 true) #3, !dbg !41
  %325 = bitcast float %283 to i32, !dbg !41
  %326 = select i1 %300, i32 %325, i32 1086324736, !dbg !46
  %327 = bitcast float %285 to i32, !dbg !41
  %328 = select i1 %302, i32 %327, i32 1086324736, !dbg !46
  %329 = bitcast float %287 to i32, !dbg !41
  %330 = select i1 %304, i32 %329, i32 1086324736, !dbg !46
  %331 = bitcast float %289 to i32, !dbg !41
  %332 = select i1 %306, i32 %331, i32 1086324736, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %326, i32 %328, i32 %330, i32 %332, ptr addrspace(1) %316, i1 true) #3, !dbg !41
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr3mctbvtjemxi6gg3s6na45uslblz7vvltscbatoxkidywlimm6.py", directory: "inductor_cache/r3")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_9", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 35, column: 18, scope: !7)
!28 = !DILocation(line: 36, column: 26, scope: !7)
!29 = !DILocation(line: 38, column: 19, scope: !7)
!30 = !DILocation(line: 32, column: 18, scope: !7)
!31 = !DILocation(line: 33, column: 18, scope: !7)
!32 = !DILocation(line: 41, column: 19, scope: !7)
!33 = !DILocation(line: 42, column: 20, scope: !7)
!34 = !DILocation(line: 43, column: 20, scope: !7)
!35 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 45, column: 42, scope: !7)
!39 = !DILocation(line: 110, column: 15, scope: !36, inlinedAt: !40)
!40 = !DILocation(line: 47, column: 42, scope: !7)
!41 = !DILocation(line: 49, column: 37, scope: !7)
!42 = !DILocation(line: 112, column: 21, scope: !36, inlinedAt: !40)
!43 = !DILocation(line: 112, column: 16, scope: !36, inlinedAt: !40)
!44 = !DILocation(line: 48, column: 39, scope: !7)
!45 = !DILocation(line: 49, column: 25, scope: !7)
!46 = !DILocation(line: 113, column: 29, scope: !36, inlinedAt: !40)
!47 = !DILocation(line: 49, column: 4, scope: !7)
