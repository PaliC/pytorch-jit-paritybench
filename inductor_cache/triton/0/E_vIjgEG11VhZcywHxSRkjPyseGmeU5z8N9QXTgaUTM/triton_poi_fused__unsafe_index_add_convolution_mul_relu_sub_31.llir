; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_31(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 2, !dbg !13
  %19 = or disjoint i32 %17, 512, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %20 = sdiv i32 %.frozen, 16, !dbg !14
  %21 = sdiv i32 %19, 16, !dbg !14
  %22 = srem i32 %20, 16, !dbg !15
  %23 = srem i32 %21, 16, !dbg !15
  %24 = mul i32 %20, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %24, !dbg !16
  %25 = srem i32 %18, 16, !dbg !16
  %26 = sdiv i32 %17, 256, !dbg !17
  %27 = sdiv i32 %19, 256, !dbg !17
  %28 = srem i32 %26, 256, !dbg !18
  %29 = srem i32 %27, 256, !dbg !18
  %30 = sext i32 %22 to i64, !dbg !19
  %31 = getelementptr i64, ptr addrspace(1) %0, i64 %30, !dbg !19
  %32 = sext i32 %23 to i64, !dbg !19
  %33 = getelementptr i64, ptr addrspace(1) %0, i64 %32, !dbg !19
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !20
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !20
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !20
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !20
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !20
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !20
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !20
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !20
  %42 = sext i32 %.decomposed to i64, !dbg !21
  %43 = getelementptr i64, ptr addrspace(1) %1, i64 %42, !dbg !21
  %44 = sext i32 %25 to i64, !dbg !21
  %45 = getelementptr i64, ptr addrspace(1) %1, i64 %44, !dbg !21
  %46 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !22
  %47 = extractvalue { i64, i64 } %46, 0, !dbg !22
  %48 = extractvalue { i64, i64 } %46, 1, !dbg !22
  %49 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !22
  %50 = extractvalue { i64, i64 } %49, 0, !dbg !22
  %51 = extractvalue { i64, i64 } %49, 1, !dbg !22
  %52 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !22
  %53 = extractvalue { i64, i64 } %52, 0, !dbg !22
  %54 = extractvalue { i64, i64 } %52, 1, !dbg !22
  %55 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !22
  %56 = extractvalue { i64, i64 } %55, 0, !dbg !22
  %57 = extractvalue { i64, i64 } %55, 1, !dbg !22
  %58 = sext i32 %28 to i64, !dbg !23
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !23
  %60 = sext i32 %29 to i64, !dbg !23
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !23
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !24
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !24
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !24
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !24
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !24
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !24
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !24
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !24
  %70 = getelementptr i64, ptr addrspace(1) %4, i64 %42, !dbg !25
  %71 = getelementptr i64, ptr addrspace(1) %4, i64 %44, !dbg !25
  %72 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !26
  %73 = extractvalue { i64, i64 } %72, 0, !dbg !26
  %74 = extractvalue { i64, i64 } %72, 1, !dbg !26
  %75 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !26
  %76 = extractvalue { i64, i64 } %75, 0, !dbg !26
  %77 = extractvalue { i64, i64 } %75, 1, !dbg !26
  %78 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !26
  %79 = extractvalue { i64, i64 } %78, 0, !dbg !26
  %80 = extractvalue { i64, i64 } %78, 1, !dbg !26
  %81 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !26
  %82 = extractvalue { i64, i64 } %81, 0, !dbg !26
  %83 = extractvalue { i64, i64 } %81, 1, !dbg !26
  %84 = getelementptr float, ptr addrspace(1) %5, i64 %42, !dbg !27
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !28
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !28
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !28
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !28
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !28
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !28
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !28
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !28
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !28
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !28
  %95 = getelementptr i64, ptr addrspace(1) %6, i64 %30, !dbg !29
  %96 = getelementptr i64, ptr addrspace(1) %6, i64 %32, !dbg !29
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !30
  %98 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !30
  %99 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !30
  %100 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !30
  %101 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !30
  %102 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !30
  %103 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !30
  %104 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !30
  %105 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !31
  %106 = getelementptr float, ptr addrspace(1) %7, i64 %32, !dbg !31
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !32
  %108 = bitcast i32 %107 to float, !dbg !32
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !32
  %110 = bitcast i32 %109 to float, !dbg !32
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !32
  %112 = bitcast i32 %111 to float, !dbg !32
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !32
  %114 = bitcast i32 %113 to float, !dbg !32
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !32
  %116 = bitcast i32 %115 to float, !dbg !32
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !32
  %118 = bitcast i32 %117 to float, !dbg !32
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !32
  %120 = bitcast i32 %119 to float, !dbg !32
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !32
  %122 = bitcast i32 %121 to float, !dbg !32
  %123 = lshr i64 %34, 62, !dbg !33
  %124 = and i64 %123, 2, !dbg !33
  %125 = add i64 %124, %34, !dbg !33
  %126 = lshr i64 %38, 62, !dbg !33
  %127 = and i64 %126, 2, !dbg !33
  %128 = add i64 %127, %38, !dbg !33
  %129 = lshr i64 %47, 62, !dbg !34
  %130 = and i64 %129, 2, !dbg !34
  %131 = lshr i64 %48, 62, !dbg !34
  %132 = and i64 %131, 2, !dbg !34
  %133 = lshr i64 %50, 62, !dbg !34
  %134 = and i64 %133, 2, !dbg !34
  %135 = lshr i64 %51, 62, !dbg !34
  %136 = and i64 %135, 2, !dbg !34
  %137 = lshr i64 %53, 62, !dbg !34
  %138 = and i64 %137, 2, !dbg !34
  %139 = lshr i64 %54, 62, !dbg !34
  %140 = and i64 %139, 2, !dbg !34
  %141 = lshr i64 %56, 62, !dbg !34
  %142 = and i64 %141, 2, !dbg !34
  %143 = lshr i64 %57, 62, !dbg !34
  %144 = and i64 %143, 2, !dbg !34
  %145 = shl i64 %125, 1, !dbg !35
  %146 = shl i64 %128, 1, !dbg !35
  %147 = shl nsw i32 %26, 2, !dbg !36
  %148 = shl nsw i32 %27, 2, !dbg !36
  %149 = sext i32 %147 to i64, !dbg !37
  %150 = sext i32 %148 to i64, !dbg !37
  %151 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !38
  %152 = getelementptr float, ptr addrspace(1) %151, i64 %130, !dbg !38
  %153 = getelementptr float, ptr addrspace(1) %152, i64 %145, !dbg !38
  %154 = getelementptr float, ptr addrspace(1) %153, i64 %149, !dbg !38
  %155 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !38
  %156 = getelementptr float, ptr addrspace(1) %155, i64 %132, !dbg !38
  %157 = getelementptr float, ptr addrspace(1) %156, i64 %145, !dbg !38
  %158 = getelementptr float, ptr addrspace(1) %157, i64 %149, !dbg !38
  %159 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !38
  %160 = getelementptr float, ptr addrspace(1) %159, i64 %134, !dbg !38
  %161 = getelementptr float, ptr addrspace(1) %160, i64 %145, !dbg !38
  %162 = getelementptr float, ptr addrspace(1) %161, i64 %149, !dbg !38
  %163 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !38
  %164 = getelementptr float, ptr addrspace(1) %163, i64 %136, !dbg !38
  %165 = getelementptr float, ptr addrspace(1) %164, i64 %145, !dbg !38
  %166 = getelementptr float, ptr addrspace(1) %165, i64 %149, !dbg !38
  %167 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !38
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %138, !dbg !38
  %169 = getelementptr float, ptr addrspace(1) %168, i64 %146, !dbg !38
  %170 = getelementptr float, ptr addrspace(1) %169, i64 %150, !dbg !38
  %171 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !38
  %172 = getelementptr float, ptr addrspace(1) %171, i64 %140, !dbg !38
  %173 = getelementptr float, ptr addrspace(1) %172, i64 %146, !dbg !38
  %174 = getelementptr float, ptr addrspace(1) %173, i64 %150, !dbg !38
  %175 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !38
  %176 = getelementptr float, ptr addrspace(1) %175, i64 %142, !dbg !38
  %177 = getelementptr float, ptr addrspace(1) %176, i64 %146, !dbg !38
  %178 = getelementptr float, ptr addrspace(1) %177, i64 %150, !dbg !38
  %179 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !38
  %180 = getelementptr float, ptr addrspace(1) %179, i64 %144, !dbg !38
  %181 = getelementptr float, ptr addrspace(1) %180, i64 %146, !dbg !38
  %182 = getelementptr float, ptr addrspace(1) %181, i64 %150, !dbg !38
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 true) #1, !dbg !39
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 true) #1, !dbg !39
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 true) #1, !dbg !39
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 true) #1, !dbg !39
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 true) #1, !dbg !39
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 true) #1, !dbg !39
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 true) #1, !dbg !39
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 true) #1, !dbg !39
  %191 = lshr i64 %73, 62, !dbg !40
  %192 = and i64 %191, 2, !dbg !40
  %193 = lshr i64 %74, 62, !dbg !40
  %194 = and i64 %193, 2, !dbg !40
  %195 = lshr i64 %76, 62, !dbg !40
  %196 = and i64 %195, 2, !dbg !40
  %197 = lshr i64 %77, 62, !dbg !40
  %198 = and i64 %197, 2, !dbg !40
  %199 = lshr i64 %79, 62, !dbg !40
  %200 = and i64 %199, 2, !dbg !40
  %201 = lshr i64 %80, 62, !dbg !40
  %202 = and i64 %201, 2, !dbg !40
  %203 = lshr i64 %82, 62, !dbg !40
  %204 = and i64 %203, 2, !dbg !40
  %205 = lshr i64 %83, 62, !dbg !40
  %206 = and i64 %205, 2, !dbg !40
  %207 = getelementptr float, ptr addrspace(1) %2, i64 %73, !dbg !41
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %192, !dbg !41
  %209 = getelementptr float, ptr addrspace(1) %208, i64 %145, !dbg !41
  %210 = getelementptr float, ptr addrspace(1) %209, i64 %149, !dbg !41
  %211 = getelementptr float, ptr addrspace(1) %2, i64 %74, !dbg !41
  %212 = getelementptr float, ptr addrspace(1) %211, i64 %194, !dbg !41
  %213 = getelementptr float, ptr addrspace(1) %212, i64 %145, !dbg !41
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %149, !dbg !41
  %215 = getelementptr float, ptr addrspace(1) %2, i64 %76, !dbg !41
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %196, !dbg !41
  %217 = getelementptr float, ptr addrspace(1) %216, i64 %145, !dbg !41
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %149, !dbg !41
  %219 = getelementptr float, ptr addrspace(1) %2, i64 %77, !dbg !41
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %198, !dbg !41
  %221 = getelementptr float, ptr addrspace(1) %220, i64 %145, !dbg !41
  %222 = getelementptr float, ptr addrspace(1) %221, i64 %149, !dbg !41
  %223 = getelementptr float, ptr addrspace(1) %2, i64 %79, !dbg !41
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %200, !dbg !41
  %225 = getelementptr float, ptr addrspace(1) %224, i64 %146, !dbg !41
  %226 = getelementptr float, ptr addrspace(1) %225, i64 %150, !dbg !41
  %227 = getelementptr float, ptr addrspace(1) %2, i64 %80, !dbg !41
  %228 = getelementptr float, ptr addrspace(1) %227, i64 %202, !dbg !41
  %229 = getelementptr float, ptr addrspace(1) %228, i64 %146, !dbg !41
  %230 = getelementptr float, ptr addrspace(1) %229, i64 %150, !dbg !41
  %231 = getelementptr float, ptr addrspace(1) %2, i64 %82, !dbg !41
  %232 = getelementptr float, ptr addrspace(1) %231, i64 %204, !dbg !41
  %233 = getelementptr float, ptr addrspace(1) %232, i64 %146, !dbg !41
  %234 = getelementptr float, ptr addrspace(1) %233, i64 %150, !dbg !41
  %235 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !41
  %236 = getelementptr float, ptr addrspace(1) %235, i64 %206, !dbg !41
  %237 = getelementptr float, ptr addrspace(1) %236, i64 %146, !dbg !41
  %238 = getelementptr float, ptr addrspace(1) %237, i64 %150, !dbg !41
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %210, i1 true) #1, !dbg !42
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %214, i1 true) #1, !dbg !42
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %218, i1 true) #1, !dbg !42
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %222, i1 true) #1, !dbg !42
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 true) #1, !dbg !42
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %230, i1 true) #1, !dbg !42
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %234, i1 true) #1, !dbg !42
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 true) #1, !dbg !42
  %247 = lshr i64 %97, 62, !dbg !43
  %248 = and i64 %247, 2, !dbg !43
  %249 = add i64 %248, %97, !dbg !43
  %250 = lshr i64 %101, 62, !dbg !43
  %251 = and i64 %250, 2, !dbg !43
  %252 = add i64 %251, %101, !dbg !43
  %253 = shl i64 %249, 1, !dbg !44
  %254 = shl i64 %252, 1, !dbg !44
  %255 = getelementptr float, ptr addrspace(1) %152, i64 %253, !dbg !45
  %256 = getelementptr float, ptr addrspace(1) %255, i64 %149, !dbg !45
  %257 = getelementptr float, ptr addrspace(1) %156, i64 %253, !dbg !45
  %258 = getelementptr float, ptr addrspace(1) %257, i64 %149, !dbg !45
  %259 = getelementptr float, ptr addrspace(1) %160, i64 %253, !dbg !45
  %260 = getelementptr float, ptr addrspace(1) %259, i64 %149, !dbg !45
  %261 = getelementptr float, ptr addrspace(1) %164, i64 %253, !dbg !45
  %262 = getelementptr float, ptr addrspace(1) %261, i64 %149, !dbg !45
  %263 = getelementptr float, ptr addrspace(1) %168, i64 %254, !dbg !45
  %264 = getelementptr float, ptr addrspace(1) %263, i64 %150, !dbg !45
  %265 = getelementptr float, ptr addrspace(1) %172, i64 %254, !dbg !45
  %266 = getelementptr float, ptr addrspace(1) %265, i64 %150, !dbg !45
  %267 = getelementptr float, ptr addrspace(1) %176, i64 %254, !dbg !45
  %268 = getelementptr float, ptr addrspace(1) %267, i64 %150, !dbg !45
  %269 = getelementptr float, ptr addrspace(1) %180, i64 %254, !dbg !45
  %270 = getelementptr float, ptr addrspace(1) %269, i64 %150, !dbg !45
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %256, i1 true) #1, !dbg !46
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %258, i1 true) #1, !dbg !46
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %260, i1 true) #1, !dbg !46
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %262, i1 true) #1, !dbg !46
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %264, i1 true) #1, !dbg !46
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %266, i1 true) #1, !dbg !46
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %268, i1 true) #1, !dbg !46
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %270, i1 true) #1, !dbg !46
  %279 = getelementptr float, ptr addrspace(1) %208, i64 %253, !dbg !47
  %280 = getelementptr float, ptr addrspace(1) %279, i64 %149, !dbg !47
  %281 = getelementptr float, ptr addrspace(1) %212, i64 %253, !dbg !47
  %282 = getelementptr float, ptr addrspace(1) %281, i64 %149, !dbg !47
  %283 = getelementptr float, ptr addrspace(1) %216, i64 %253, !dbg !47
  %284 = getelementptr float, ptr addrspace(1) %283, i64 %149, !dbg !47
  %285 = getelementptr float, ptr addrspace(1) %220, i64 %253, !dbg !47
  %286 = getelementptr float, ptr addrspace(1) %285, i64 %149, !dbg !47
  %287 = getelementptr float, ptr addrspace(1) %224, i64 %254, !dbg !47
  %288 = getelementptr float, ptr addrspace(1) %287, i64 %150, !dbg !47
  %289 = getelementptr float, ptr addrspace(1) %228, i64 %254, !dbg !47
  %290 = getelementptr float, ptr addrspace(1) %289, i64 %150, !dbg !47
  %291 = getelementptr float, ptr addrspace(1) %232, i64 %254, !dbg !47
  %292 = getelementptr float, ptr addrspace(1) %291, i64 %150, !dbg !47
  %293 = getelementptr float, ptr addrspace(1) %236, i64 %254, !dbg !47
  %294 = getelementptr float, ptr addrspace(1) %293, i64 %150, !dbg !47
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %280, i1 true) #1, !dbg !48
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %282, i1 true) #1, !dbg !48
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %284, i1 true) #1, !dbg !48
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %286, i1 true) #1, !dbg !48
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %288, i1 true) #1, !dbg !48
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %290, i1 true) #1, !dbg !48
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %292, i1 true) #1, !dbg !48
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %294, i1 true) #1, !dbg !48
  %303 = insertelement <2 x i32> poison, i32 %271, i64 0, !dbg !46
  %304 = insertelement <2 x i32> %303, i32 %183, i64 1, !dbg !46
  %305 = bitcast <2 x i32> %304 to <2 x float>, !dbg !46
  %306 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !49
  %307 = bitcast <2 x i32> %306 to <2 x float>, !dbg !49
  %308 = shufflevector <2 x float> %307, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %309 = fadd <2 x float> %308, %305, !dbg !49
  %310 = fcmp olt <2 x float> %309, zeroinitializer, !dbg !50
  %311 = select <2 x i1> %310, <2 x float> zeroinitializer, <2 x float> %309, !dbg !54
  %312 = insertelement <2 x i32> poison, i32 %295, i64 0, !dbg !48
  %313 = insertelement <2 x i32> %312, i32 %239, i64 1, !dbg !48
  %314 = bitcast <2 x i32> %313 to <2 x float>, !dbg !48
  %315 = fadd <2 x float> %308, %314, !dbg !55
  %316 = fcmp olt <2 x float> %315, zeroinitializer, !dbg !56
  %317 = select <2 x i1> %316, <2 x float> zeroinitializer, <2 x float> %315, !dbg !58
  %318 = fsub <2 x float> %317, %311, !dbg !59
  %319 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !60
  %320 = bitcast <2 x i32> %319 to <2 x float>, !dbg !60
  %321 = shufflevector <2 x float> %320, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %322 = fmul <2 x float> %318, %321, !dbg !60
  %323 = fadd <2 x float> %311, %322, !dbg !61
  %324 = insertelement <2 x i32> poison, i32 %272, i64 0, !dbg !46
  %325 = insertelement <2 x i32> %324, i32 %184, i64 1, !dbg !46
  %326 = bitcast <2 x i32> %325 to <2 x float>, !dbg !46
  %327 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !49
  %328 = bitcast <2 x i32> %327 to <2 x float>, !dbg !49
  %329 = shufflevector <2 x float> %328, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %330 = fadd <2 x float> %329, %326, !dbg !49
  %331 = fcmp olt <2 x float> %330, zeroinitializer, !dbg !50
  %332 = select <2 x i1> %331, <2 x float> zeroinitializer, <2 x float> %330, !dbg !54
  %333 = insertelement <2 x i32> poison, i32 %296, i64 0, !dbg !48
  %334 = insertelement <2 x i32> %333, i32 %240, i64 1, !dbg !48
  %335 = bitcast <2 x i32> %334 to <2 x float>, !dbg !48
  %336 = fadd <2 x float> %329, %335, !dbg !55
  %337 = fcmp olt <2 x float> %336, zeroinitializer, !dbg !56
  %338 = select <2 x i1> %337, <2 x float> zeroinitializer, <2 x float> %336, !dbg !58
  %339 = fsub <2 x float> %338, %332, !dbg !59
  %340 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !60
  %341 = bitcast <2 x i32> %340 to <2 x float>, !dbg !60
  %342 = shufflevector <2 x float> %341, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %343 = fmul <2 x float> %339, %342, !dbg !60
  %344 = fadd <2 x float> %332, %343, !dbg !61
  %345 = insertelement <2 x i32> poison, i32 %273, i64 0, !dbg !46
  %346 = insertelement <2 x i32> %345, i32 %185, i64 1, !dbg !46
  %347 = bitcast <2 x i32> %346 to <2 x float>, !dbg !46
  %348 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !49
  %349 = bitcast <2 x i32> %348 to <2 x float>, !dbg !49
  %350 = shufflevector <2 x float> %349, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %351 = fadd <2 x float> %350, %347, !dbg !49
  %352 = fcmp olt <2 x float> %351, zeroinitializer, !dbg !50
  %353 = select <2 x i1> %352, <2 x float> zeroinitializer, <2 x float> %351, !dbg !54
  %354 = insertelement <2 x i32> poison, i32 %297, i64 0, !dbg !48
  %355 = insertelement <2 x i32> %354, i32 %241, i64 1, !dbg !48
  %356 = bitcast <2 x i32> %355 to <2 x float>, !dbg !48
  %357 = fadd <2 x float> %350, %356, !dbg !55
  %358 = fcmp olt <2 x float> %357, zeroinitializer, !dbg !56
  %359 = select <2 x i1> %358, <2 x float> zeroinitializer, <2 x float> %357, !dbg !58
  %360 = fsub <2 x float> %359, %353, !dbg !59
  %361 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !60
  %362 = bitcast <2 x i32> %361 to <2 x float>, !dbg !60
  %363 = shufflevector <2 x float> %362, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %364 = fmul <2 x float> %360, %363, !dbg !60
  %365 = fadd <2 x float> %353, %364, !dbg !61
  %366 = insertelement <2 x i32> poison, i32 %274, i64 0, !dbg !46
  %367 = insertelement <2 x i32> %366, i32 %186, i64 1, !dbg !46
  %368 = bitcast <2 x i32> %367 to <2 x float>, !dbg !46
  %369 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !49
  %370 = bitcast <2 x i32> %369 to <2 x float>, !dbg !49
  %371 = shufflevector <2 x float> %370, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %372 = fadd <2 x float> %371, %368, !dbg !49
  %373 = fcmp olt <2 x float> %372, zeroinitializer, !dbg !50
  %374 = select <2 x i1> %373, <2 x float> zeroinitializer, <2 x float> %372, !dbg !54
  %375 = insertelement <2 x i32> poison, i32 %298, i64 0, !dbg !48
  %376 = insertelement <2 x i32> %375, i32 %242, i64 1, !dbg !48
  %377 = bitcast <2 x i32> %376 to <2 x float>, !dbg !48
  %378 = fadd <2 x float> %371, %377, !dbg !55
  %379 = fcmp olt <2 x float> %378, zeroinitializer, !dbg !56
  %380 = select <2 x i1> %379, <2 x float> zeroinitializer, <2 x float> %378, !dbg !58
  %381 = fsub <2 x float> %380, %374, !dbg !59
  %382 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !60
  %383 = bitcast <2 x i32> %382 to <2 x float>, !dbg !60
  %384 = shufflevector <2 x float> %383, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %385 = fmul <2 x float> %381, %384, !dbg !60
  %386 = fadd <2 x float> %374, %385, !dbg !61
  %387 = insertelement <2 x i32> poison, i32 %275, i64 0, !dbg !46
  %388 = insertelement <2 x i32> %387, i32 %187, i64 1, !dbg !46
  %389 = bitcast <2 x i32> %388 to <2 x float>, !dbg !46
  %390 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !49
  %391 = bitcast <2 x i32> %390 to <2 x float>, !dbg !49
  %392 = shufflevector <2 x float> %391, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %393 = fadd <2 x float> %392, %389, !dbg !49
  %394 = fcmp olt <2 x float> %393, zeroinitializer, !dbg !50
  %395 = select <2 x i1> %394, <2 x float> zeroinitializer, <2 x float> %393, !dbg !54
  %396 = insertelement <2 x i32> poison, i32 %299, i64 0, !dbg !48
  %397 = insertelement <2 x i32> %396, i32 %243, i64 1, !dbg !48
  %398 = bitcast <2 x i32> %397 to <2 x float>, !dbg !48
  %399 = fadd <2 x float> %392, %398, !dbg !55
  %400 = fcmp olt <2 x float> %399, zeroinitializer, !dbg !56
  %401 = select <2 x i1> %400, <2 x float> zeroinitializer, <2 x float> %399, !dbg !58
  %402 = fsub <2 x float> %401, %395, !dbg !59
  %403 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !60
  %404 = bitcast <2 x i32> %403 to <2 x float>, !dbg !60
  %405 = shufflevector <2 x float> %404, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %406 = fmul <2 x float> %402, %405, !dbg !60
  %407 = fadd <2 x float> %395, %406, !dbg !61
  %408 = insertelement <2 x i32> poison, i32 %276, i64 0, !dbg !46
  %409 = insertelement <2 x i32> %408, i32 %188, i64 1, !dbg !46
  %410 = bitcast <2 x i32> %409 to <2 x float>, !dbg !46
  %411 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !49
  %412 = bitcast <2 x i32> %411 to <2 x float>, !dbg !49
  %413 = shufflevector <2 x float> %412, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %414 = fadd <2 x float> %413, %410, !dbg !49
  %415 = fcmp olt <2 x float> %414, zeroinitializer, !dbg !50
  %416 = select <2 x i1> %415, <2 x float> zeroinitializer, <2 x float> %414, !dbg !54
  %417 = insertelement <2 x i32> poison, i32 %300, i64 0, !dbg !48
  %418 = insertelement <2 x i32> %417, i32 %244, i64 1, !dbg !48
  %419 = bitcast <2 x i32> %418 to <2 x float>, !dbg !48
  %420 = fadd <2 x float> %413, %419, !dbg !55
  %421 = fcmp olt <2 x float> %420, zeroinitializer, !dbg !56
  %422 = select <2 x i1> %421, <2 x float> zeroinitializer, <2 x float> %420, !dbg !58
  %423 = fsub <2 x float> %422, %416, !dbg !59
  %424 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !60
  %425 = bitcast <2 x i32> %424 to <2 x float>, !dbg !60
  %426 = shufflevector <2 x float> %425, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %427 = fmul <2 x float> %423, %426, !dbg !60
  %428 = fadd <2 x float> %416, %427, !dbg !61
  %429 = insertelement <2 x i32> poison, i32 %277, i64 0, !dbg !46
  %430 = insertelement <2 x i32> %429, i32 %189, i64 1, !dbg !46
  %431 = bitcast <2 x i32> %430 to <2 x float>, !dbg !46
  %432 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !49
  %433 = bitcast <2 x i32> %432 to <2 x float>, !dbg !49
  %434 = shufflevector <2 x float> %433, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %435 = fadd <2 x float> %434, %431, !dbg !49
  %436 = fcmp olt <2 x float> %435, zeroinitializer, !dbg !50
  %437 = select <2 x i1> %436, <2 x float> zeroinitializer, <2 x float> %435, !dbg !54
  %438 = insertelement <2 x i32> poison, i32 %301, i64 0, !dbg !48
  %439 = insertelement <2 x i32> %438, i32 %245, i64 1, !dbg !48
  %440 = bitcast <2 x i32> %439 to <2 x float>, !dbg !48
  %441 = fadd <2 x float> %434, %440, !dbg !55
  %442 = fcmp olt <2 x float> %441, zeroinitializer, !dbg !56
  %443 = select <2 x i1> %442, <2 x float> zeroinitializer, <2 x float> %441, !dbg !58
  %444 = fsub <2 x float> %443, %437, !dbg !59
  %445 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !60
  %446 = bitcast <2 x i32> %445 to <2 x float>, !dbg !60
  %447 = shufflevector <2 x float> %446, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %448 = fmul <2 x float> %444, %447, !dbg !60
  %449 = fadd <2 x float> %437, %448, !dbg !61
  %450 = insertelement <2 x i32> poison, i32 %278, i64 0, !dbg !46
  %451 = insertelement <2 x i32> %450, i32 %190, i64 1, !dbg !46
  %452 = bitcast <2 x i32> %451 to <2 x float>, !dbg !46
  %453 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !49
  %454 = bitcast <2 x i32> %453 to <2 x float>, !dbg !49
  %455 = shufflevector <2 x float> %454, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %456 = fadd <2 x float> %455, %452, !dbg !49
  %457 = fcmp olt <2 x float> %456, zeroinitializer, !dbg !50
  %458 = select <2 x i1> %457, <2 x float> zeroinitializer, <2 x float> %456, !dbg !54
  %459 = insertelement <2 x i32> poison, i32 %302, i64 0, !dbg !48
  %460 = insertelement <2 x i32> %459, i32 %246, i64 1, !dbg !48
  %461 = bitcast <2 x i32> %460 to <2 x float>, !dbg !48
  %462 = fadd <2 x float> %455, %461, !dbg !55
  %463 = fcmp olt <2 x float> %462, zeroinitializer, !dbg !56
  %464 = select <2 x i1> %463, <2 x float> zeroinitializer, <2 x float> %462, !dbg !58
  %465 = fsub <2 x float> %464, %458, !dbg !59
  %466 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !60
  %467 = bitcast <2 x i32> %466 to <2 x float>, !dbg !60
  %468 = shufflevector <2 x float> %467, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %469 = fmul <2 x float> %465, %468, !dbg !60
  %470 = fadd <2 x float> %458, %469, !dbg !61
  %471 = extractelement <2 x float> %323, i64 0, !dbg !62
  %472 = extractelement <2 x float> %323, i64 1, !dbg !63
  %473 = fsub float %471, %472, !dbg !62
  %474 = extractelement <2 x float> %344, i64 0, !dbg !62
  %475 = extractelement <2 x float> %344, i64 1, !dbg !63
  %476 = fsub float %474, %475, !dbg !62
  %477 = extractelement <2 x float> %365, i64 0, !dbg !62
  %478 = extractelement <2 x float> %365, i64 1, !dbg !63
  %479 = fsub float %477, %478, !dbg !62
  %480 = extractelement <2 x float> %386, i64 0, !dbg !62
  %481 = extractelement <2 x float> %386, i64 1, !dbg !63
  %482 = fsub float %480, %481, !dbg !62
  %483 = extractelement <2 x float> %407, i64 0, !dbg !62
  %484 = extractelement <2 x float> %407, i64 1, !dbg !63
  %485 = fsub float %483, %484, !dbg !62
  %486 = extractelement <2 x float> %428, i64 0, !dbg !62
  %487 = extractelement <2 x float> %428, i64 1, !dbg !63
  %488 = fsub float %486, %487, !dbg !62
  %489 = extractelement <2 x float> %449, i64 0, !dbg !62
  %490 = extractelement <2 x float> %449, i64 1, !dbg !63
  %491 = fsub float %489, %490, !dbg !62
  %492 = extractelement <2 x float> %470, i64 0, !dbg !62
  %493 = extractelement <2 x float> %470, i64 1, !dbg !63
  %494 = fsub float %492, %493, !dbg !62
  %495 = fmul float %473, %108, !dbg !64
  %496 = fmul float %476, %110, !dbg !64
  %497 = fmul float %479, %112, !dbg !64
  %498 = fmul float %482, %114, !dbg !64
  %499 = fmul float %485, %116, !dbg !64
  %500 = fmul float %488, %118, !dbg !64
  %501 = fmul float %491, %120, !dbg !64
  %502 = fmul float %494, %122, !dbg !64
  %503 = sext i32 %17 to i64, !dbg !65
  %504 = getelementptr float, ptr addrspace(1) %8, i64 %503, !dbg !65
  %505 = sext i32 %19 to i64, !dbg !65
  %506 = getelementptr float, ptr addrspace(1) %8, i64 %505, !dbg !65
  %507 = bitcast float %472 to i32, !dbg !63
  %508 = bitcast float %475 to i32, !dbg !63
  %509 = bitcast float %478 to i32, !dbg !63
  %510 = bitcast float %481 to i32, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %507, i32 %508, i32 %509, i32 %510, ptr addrspace(1) %504, i1 true) #1, !dbg !63
  %511 = bitcast float %484 to i32, !dbg !63
  %512 = bitcast float %487 to i32, !dbg !63
  %513 = bitcast float %490 to i32, !dbg !63
  %514 = bitcast float %493 to i32, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %511, i32 %512, i32 %513, i32 %514, ptr addrspace(1) %506, i1 true) #1, !dbg !63
  %515 = getelementptr float, ptr addrspace(1) %9, i64 %503, !dbg !66
  %516 = getelementptr float, ptr addrspace(1) %9, i64 %505, !dbg !66
  %517 = bitcast float %495 to i32, !dbg !67
  %518 = bitcast float %496 to i32, !dbg !67
  %519 = bitcast float %497 to i32, !dbg !67
  %520 = bitcast float %498 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %517, i32 %518, i32 %519, i32 %520, ptr addrspace(1) %515, i1 true) #1, !dbg !67
  %521 = bitcast float %499 to i32, !dbg !67
  %522 = bitcast float %500 to i32, !dbg !67
  %523 = bitcast float %501 to i32, !dbg !67
  %524 = bitcast float %502 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %521, i32 %522, i32 %523, i32 %524, ptr addrspace(1) %516, i1 true) #1, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdlr4ysccdzk45cxhttsl6z4awmtx3phny7o2faoowusgsbfuvzn.py", directory: "inductor_cache/dl")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_31, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_31, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_31", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 28, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 32, scope: !7)
!34 = !DILocation(line: 42, column: 32, scope: !7)
!35 = !DILocation(line: 43, column: 39, scope: !7)
!36 = !DILocation(line: 43, column: 48, scope: !7)
!37 = !DILocation(line: 43, column: 46, scope: !7)
!38 = !DILocation(line: 43, column: 30, scope: !7)
!39 = !DILocation(line: 43, column: 53, scope: !7)
!40 = !DILocation(line: 49, column: 35, scope: !7)
!41 = !DILocation(line: 50, column: 31, scope: !7)
!42 = !DILocation(line: 50, column: 55, scope: !7)
!43 = !DILocation(line: 58, column: 35, scope: !7)
!44 = !DILocation(line: 59, column: 40, scope: !7)
!45 = !DILocation(line: 59, column: 31, scope: !7)
!46 = !DILocation(line: 59, column: 55, scope: !7)
!47 = !DILocation(line: 62, column: 31, scope: !7)
!48 = !DILocation(line: 62, column: 56, scope: !7)
!49 = !DILocation(line: 60, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 61, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 63, column: 20, scope: !7)
!56 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !57)
!57 = !DILocation(line: 64, column: 42, scope: !7)
!58 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !57)
!59 = !DILocation(line: 65, column: 20, scope: !7)
!60 = !DILocation(line: 66, column: 20, scope: !7)
!61 = !DILocation(line: 67, column: 20, scope: !7)
!62 = !DILocation(line: 68, column: 20, scope: !7)
!63 = !DILocation(line: 70, column: 37, scope: !7)
!64 = !DILocation(line: 69, column: 20, scope: !7)
!65 = !DILocation(line: 70, column: 25, scope: !7)
!66 = !DILocation(line: 71, column: 25, scope: !7)
!67 = !DILocation(line: 71, column: 37, scope: !7)
!68 = !DILocation(line: 71, column: 4, scope: !7)
