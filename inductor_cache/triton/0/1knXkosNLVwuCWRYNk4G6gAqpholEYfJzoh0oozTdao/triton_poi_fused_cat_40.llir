; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_40(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 10, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 512, !dbg !13
  %20 = icmp slt i32 %18, 1382400, !dbg !14
  %21 = icmp slt i32 %19, 1382400, !dbg !14
  %.frozen = freeze i32 %18, !dbg !15
  %22 = sdiv i32 %.frozen, 384, !dbg !15
  %23 = mul i32 %22, 384, !dbg !16
  %.decomposed = sub i32 %.frozen, %23, !dbg !16
  %.frozen76 = freeze i32 %19, !dbg !15
  %24 = sdiv i32 %.frozen76, 384, !dbg !15
  %25 = mul i32 %24, 384, !dbg !16
  %.decomposed77 = sub i32 %.frozen76, %25, !dbg !16
  %26 = icmp slt i32 %.decomposed, 192, !dbg !17
  %27 = icmp slt i32 %.decomposed77, 192, !dbg !17
  %28 = mul nsw i32 %22, 192, !dbg !18
  %29 = mul nsw i32 %24, 192, !dbg !18
  %30 = add nsw i32 %28, %.decomposed, !dbg !19
  %31 = add nsw i32 %29, %.decomposed77, !dbg !19
  %32 = sext i32 %30 to i64, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !20
  %34 = sext i32 %31 to i64, !dbg !20
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !20
  %36 = and i1 %20, %26, !dbg !21
  %37 = and i1 %21, %27, !dbg !21
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #3, !dbg !22
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !22
  %40 = sext i32 %.decomposed to i64, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !23
  %42 = sext i32 %.decomposed77 to i64, !dbg !23
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !23
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #3, !dbg !24
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !24
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !25
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #3, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !26
  %53 = bitcast i32 %49 to float, !dbg !26
  %54 = bitcast i32 %50 to float, !dbg !26
  %55 = bitcast i32 %51 to float, !dbg !26
  %56 = bitcast i32 %52 to float, !dbg !26
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %47, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !26
  %62 = bitcast i32 %58 to float, !dbg !26
  %63 = bitcast i32 %59 to float, !dbg !26
  %64 = bitcast i32 %60 to float, !dbg !26
  %65 = bitcast i32 %61 to float, !dbg !26
  %66 = fadd float %53, 0x3F50624DE0000000, !dbg !27
  %67 = fadd float %54, 0x3F50624DE0000000, !dbg !27
  %68 = fadd float %55, 0x3F50624DE0000000, !dbg !27
  %69 = fadd float %56, 0x3F50624DE0000000, !dbg !27
  %70 = fadd float %62, 0x3F50624DE0000000, !dbg !27
  %71 = fadd float %63, 0x3F50624DE0000000, !dbg !27
  %72 = fadd float %64, 0x3F50624DE0000000, !dbg !27
  %73 = fadd float %65, 0x3F50624DE0000000, !dbg !27
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %74, 0, !dbg !28
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %75, 0, !dbg !28
  br i1 %.not.i, label %81, label %76, !dbg !28

76:                                               ; preds = %12
  br i1 %.not1.i, label %79, label %77, !dbg !28

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

81:                                               ; preds = %12
  br i1 %.not1.i, label %84, label %82, !dbg !28

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %77, %79, %82, %84
  %.0.i = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !28
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i1 = icmp eq i32 %86, 0, !dbg !28
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i4 = icmp eq i32 %87, 0, !dbg !28
  br i1 %.not.i1, label %93, label %88, !dbg !28

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %91, label %89, !dbg !28

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

93:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %96, label %94, !dbg !28

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %89, %91, %94, %96
  %.0.i3 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !28
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i6 = icmp eq i32 %98, 0, !dbg !28
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i9 = icmp eq i32 %99, 0, !dbg !28
  br i1 %.not.i6, label %105, label %100, !dbg !28

100:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %103, label %101, !dbg !28

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

105:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %108, label %106, !dbg !28

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

__nv_sqrtf.exit10:                                ; preds = %101, %103, %106, %108
  %.0.i8 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !28
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i11 = icmp eq i32 %110, 0, !dbg !28
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i14 = icmp eq i32 %111, 0, !dbg !28
  br i1 %.not.i11, label %117, label %112, !dbg !28

112:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %115, label %113, !dbg !28

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

117:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %120, label %118, !dbg !28

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

__nv_sqrtf.exit15:                                ; preds = %113, %115, %118, %120
  %.0.i13 = phi float [ %114, %113 ], [ %116, %115 ], [ %119, %118 ], [ %121, %120 ], !dbg !28
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i16 = icmp eq i32 %122, 0, !dbg !28
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i19 = icmp eq i32 %123, 0, !dbg !28
  br i1 %.not.i16, label %129, label %124, !dbg !28

124:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %127, label %125, !dbg !28

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

129:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %132, label %130, !dbg !28

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

__nv_sqrtf.exit20:                                ; preds = %125, %127, %130, %132
  %.0.i18 = phi float [ %126, %125 ], [ %128, %127 ], [ %131, %130 ], [ %133, %132 ], !dbg !28
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i21 = icmp eq i32 %134, 0, !dbg !28
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i24 = icmp eq i32 %135, 0, !dbg !28
  br i1 %.not.i21, label %141, label %136, !dbg !28

136:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %139, label %137, !dbg !28

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

141:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %144, label %142, !dbg !28

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

__nv_sqrtf.exit25:                                ; preds = %137, %139, %142, %144
  %.0.i23 = phi float [ %138, %137 ], [ %140, %139 ], [ %143, %142 ], [ %145, %144 ], !dbg !28
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i26 = icmp eq i32 %146, 0, !dbg !28
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i29 = icmp eq i32 %147, 0, !dbg !28
  br i1 %.not.i26, label %153, label %148, !dbg !28

148:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %151, label %149, !dbg !28

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

153:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %156, label %154, !dbg !28

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

__nv_sqrtf.exit30:                                ; preds = %149, %151, %154, %156
  %.0.i28 = phi float [ %150, %149 ], [ %152, %151 ], [ %155, %154 ], [ %157, %156 ], !dbg !28
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i31 = icmp eq i32 %158, 0, !dbg !28
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i34 = icmp eq i32 %159, 0, !dbg !28
  br i1 %.not.i31, label %165, label %160, !dbg !28

160:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %163, label %161, !dbg !28

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

165:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %168, label %166, !dbg !28

166:                                              ; preds = %165
  %167 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

168:                                              ; preds = %165
  %169 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

__nv_sqrtf.exit35:                                ; preds = %161, %163, %166, %168
  %.0.i33 = phi float [ %162, %161 ], [ %164, %163 ], [ %167, %166 ], [ %169, %168 ], !dbg !28
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !29
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !29
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !29
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !29
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !29
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !29
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !29
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !29
  %178 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !30
  %179 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !30
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %178, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #3, !dbg !31
  %181 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %179, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !31
  %182 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !32
  %183 = getelementptr float, ptr addrspace(1) %4, i64 %42, !dbg !32
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %182, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #3, !dbg !33
  %185 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %183, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !33
  %186 = icmp sgt i32 %.decomposed, 191, !dbg !34
  %187 = icmp sgt i32 %.decomposed77, 191, !dbg !34
  %188 = add nsw i32 %.decomposed, -192, !dbg !35
  %189 = add nsw i32 %.decomposed77, -192, !dbg !35
  %190 = add nsw i32 %28, %188, !dbg !36
  %191 = add nsw i32 %29, %189, !dbg !36
  %192 = sext i32 %190 to i64, !dbg !37
  %193 = getelementptr float, ptr addrspace(1) %5, i64 %192, !dbg !37
  %194 = sext i32 %191 to i64, !dbg !37
  %195 = getelementptr float, ptr addrspace(1) %5, i64 %194, !dbg !37
  %196 = and i1 %20, %186, !dbg !38
  %197 = and i1 %21, %187, !dbg !38
  %198 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %193, i1 %196, i32 0, i1 %196, i32 0, i1 %196, i32 0, i1 %196, i32 0, i1 %196) #3, !dbg !39
  %199 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %195, i1 %197, i32 0, i1 %197, i32 0, i1 %197, i32 0, i1 %197, i32 0, i1 %197) #3, !dbg !39
  %200 = sext i32 %188 to i64, !dbg !40
  %201 = getelementptr float, ptr addrspace(1) %6, i64 %200, !dbg !40
  %202 = sext i32 %189 to i64, !dbg !40
  %203 = getelementptr float, ptr addrspace(1) %6, i64 %202, !dbg !40
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %201, i1 %196, i32 0, i1 %196, i32 0, i1 %196, i32 0, i1 %196, i32 0, i1 %196) #3, !dbg !41
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %203, i1 %197, i32 0, i1 %197, i32 0, i1 %197, i32 0, i1 %197, i32 0, i1 %197) #3, !dbg !41
  %206 = getelementptr float, ptr addrspace(1) %7, i64 %200, !dbg !42
  %207 = getelementptr float, ptr addrspace(1) %7, i64 %202, !dbg !42
  %208 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %206, i1 %196, i32 0, i1 %196, i32 0, i1 %196, i32 0, i1 %196, i32 0, i1 %196) #3, !dbg !43
  %209 = extractvalue { i32, i32, i32, i32 } %208, 0, !dbg !43
  %210 = extractvalue { i32, i32, i32, i32 } %208, 1, !dbg !43
  %211 = extractvalue { i32, i32, i32, i32 } %208, 2, !dbg !43
  %212 = extractvalue { i32, i32, i32, i32 } %208, 3, !dbg !43
  %213 = bitcast i32 %209 to float, !dbg !43
  %214 = bitcast i32 %210 to float, !dbg !43
  %215 = bitcast i32 %211 to float, !dbg !43
  %216 = bitcast i32 %212 to float, !dbg !43
  %217 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %207, i1 %197, i32 0, i1 %197, i32 0, i1 %197, i32 0, i1 %197, i32 0, i1 %197) #3, !dbg !43
  %218 = extractvalue { i32, i32, i32, i32 } %217, 0, !dbg !43
  %219 = extractvalue { i32, i32, i32, i32 } %217, 1, !dbg !43
  %220 = extractvalue { i32, i32, i32, i32 } %217, 2, !dbg !43
  %221 = extractvalue { i32, i32, i32, i32 } %217, 3, !dbg !43
  %222 = bitcast i32 %218 to float, !dbg !43
  %223 = bitcast i32 %219 to float, !dbg !43
  %224 = bitcast i32 %220 to float, !dbg !43
  %225 = bitcast i32 %221 to float, !dbg !43
  %226 = fadd float %213, 0x3F50624DE0000000, !dbg !44
  %227 = fadd float %214, 0x3F50624DE0000000, !dbg !44
  %228 = fadd float %215, 0x3F50624DE0000000, !dbg !44
  %229 = fadd float %216, 0x3F50624DE0000000, !dbg !44
  %230 = fadd float %222, 0x3F50624DE0000000, !dbg !44
  %231 = fadd float %223, 0x3F50624DE0000000, !dbg !44
  %232 = fadd float %224, 0x3F50624DE0000000, !dbg !44
  %233 = fadd float %225, 0x3F50624DE0000000, !dbg !44
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i36 = icmp eq i32 %234, 0, !dbg !45
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i39 = icmp eq i32 %235, 0, !dbg !45
  br i1 %.not.i36, label %241, label %236, !dbg !45

236:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %239, label %237, !dbg !45

237:                                              ; preds = %236
  %238 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %226) #3, !dbg !45
  br label %__nv_sqrtf.exit40, !dbg !45

239:                                              ; preds = %236
  %240 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %226) #3, !dbg !45
  br label %__nv_sqrtf.exit40, !dbg !45

241:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %244, label %242, !dbg !45

242:                                              ; preds = %241
  %243 = tail call float @llvm.nvvm.sqrt.rn.f(float %226) #3, !dbg !45
  br label %__nv_sqrtf.exit40, !dbg !45

244:                                              ; preds = %241
  %245 = tail call float @llvm.nvvm.sqrt.approx.f(float %226) #3, !dbg !45
  br label %__nv_sqrtf.exit40, !dbg !45

__nv_sqrtf.exit40:                                ; preds = %237, %239, %242, %244
  %.0.i38 = phi float [ %238, %237 ], [ %240, %239 ], [ %243, %242 ], [ %245, %244 ], !dbg !45
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i41 = icmp eq i32 %246, 0, !dbg !45
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i44 = icmp eq i32 %247, 0, !dbg !45
  br i1 %.not.i41, label %253, label %248, !dbg !45

248:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %251, label %249, !dbg !45

249:                                              ; preds = %248
  %250 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %227) #3, !dbg !45
  br label %__nv_sqrtf.exit45, !dbg !45

251:                                              ; preds = %248
  %252 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %227) #3, !dbg !45
  br label %__nv_sqrtf.exit45, !dbg !45

253:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %256, label %254, !dbg !45

254:                                              ; preds = %253
  %255 = tail call float @llvm.nvvm.sqrt.rn.f(float %227) #3, !dbg !45
  br label %__nv_sqrtf.exit45, !dbg !45

256:                                              ; preds = %253
  %257 = tail call float @llvm.nvvm.sqrt.approx.f(float %227) #3, !dbg !45
  br label %__nv_sqrtf.exit45, !dbg !45

__nv_sqrtf.exit45:                                ; preds = %249, %251, %254, %256
  %.0.i43 = phi float [ %250, %249 ], [ %252, %251 ], [ %255, %254 ], [ %257, %256 ], !dbg !45
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i46 = icmp eq i32 %258, 0, !dbg !45
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i49 = icmp eq i32 %259, 0, !dbg !45
  br i1 %.not.i46, label %265, label %260, !dbg !45

260:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %263, label %261, !dbg !45

261:                                              ; preds = %260
  %262 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %228) #3, !dbg !45
  br label %__nv_sqrtf.exit50, !dbg !45

263:                                              ; preds = %260
  %264 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %228) #3, !dbg !45
  br label %__nv_sqrtf.exit50, !dbg !45

265:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %268, label %266, !dbg !45

266:                                              ; preds = %265
  %267 = tail call float @llvm.nvvm.sqrt.rn.f(float %228) #3, !dbg !45
  br label %__nv_sqrtf.exit50, !dbg !45

268:                                              ; preds = %265
  %269 = tail call float @llvm.nvvm.sqrt.approx.f(float %228) #3, !dbg !45
  br label %__nv_sqrtf.exit50, !dbg !45

__nv_sqrtf.exit50:                                ; preds = %261, %263, %266, %268
  %.0.i48 = phi float [ %262, %261 ], [ %264, %263 ], [ %267, %266 ], [ %269, %268 ], !dbg !45
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i51 = icmp eq i32 %270, 0, !dbg !45
  %271 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i54 = icmp eq i32 %271, 0, !dbg !45
  br i1 %.not.i51, label %277, label %272, !dbg !45

272:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %275, label %273, !dbg !45

273:                                              ; preds = %272
  %274 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %229) #3, !dbg !45
  br label %__nv_sqrtf.exit55, !dbg !45

275:                                              ; preds = %272
  %276 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %229) #3, !dbg !45
  br label %__nv_sqrtf.exit55, !dbg !45

277:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %280, label %278, !dbg !45

278:                                              ; preds = %277
  %279 = tail call float @llvm.nvvm.sqrt.rn.f(float %229) #3, !dbg !45
  br label %__nv_sqrtf.exit55, !dbg !45

280:                                              ; preds = %277
  %281 = tail call float @llvm.nvvm.sqrt.approx.f(float %229) #3, !dbg !45
  br label %__nv_sqrtf.exit55, !dbg !45

__nv_sqrtf.exit55:                                ; preds = %273, %275, %278, %280
  %.0.i53 = phi float [ %274, %273 ], [ %276, %275 ], [ %279, %278 ], [ %281, %280 ], !dbg !45
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i56 = icmp eq i32 %282, 0, !dbg !45
  %283 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i59 = icmp eq i32 %283, 0, !dbg !45
  br i1 %.not.i56, label %289, label %284, !dbg !45

284:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %287, label %285, !dbg !45

285:                                              ; preds = %284
  %286 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %230) #3, !dbg !45
  br label %__nv_sqrtf.exit60, !dbg !45

287:                                              ; preds = %284
  %288 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %230) #3, !dbg !45
  br label %__nv_sqrtf.exit60, !dbg !45

289:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %292, label %290, !dbg !45

290:                                              ; preds = %289
  %291 = tail call float @llvm.nvvm.sqrt.rn.f(float %230) #3, !dbg !45
  br label %__nv_sqrtf.exit60, !dbg !45

292:                                              ; preds = %289
  %293 = tail call float @llvm.nvvm.sqrt.approx.f(float %230) #3, !dbg !45
  br label %__nv_sqrtf.exit60, !dbg !45

__nv_sqrtf.exit60:                                ; preds = %285, %287, %290, %292
  %.0.i58 = phi float [ %286, %285 ], [ %288, %287 ], [ %291, %290 ], [ %293, %292 ], !dbg !45
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i61 = icmp eq i32 %294, 0, !dbg !45
  %295 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i64 = icmp eq i32 %295, 0, !dbg !45
  br i1 %.not.i61, label %301, label %296, !dbg !45

296:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %299, label %297, !dbg !45

297:                                              ; preds = %296
  %298 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %231) #3, !dbg !45
  br label %__nv_sqrtf.exit65, !dbg !45

299:                                              ; preds = %296
  %300 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %231) #3, !dbg !45
  br label %__nv_sqrtf.exit65, !dbg !45

301:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %304, label %302, !dbg !45

302:                                              ; preds = %301
  %303 = tail call float @llvm.nvvm.sqrt.rn.f(float %231) #3, !dbg !45
  br label %__nv_sqrtf.exit65, !dbg !45

304:                                              ; preds = %301
  %305 = tail call float @llvm.nvvm.sqrt.approx.f(float %231) #3, !dbg !45
  br label %__nv_sqrtf.exit65, !dbg !45

__nv_sqrtf.exit65:                                ; preds = %297, %299, %302, %304
  %.0.i63 = phi float [ %298, %297 ], [ %300, %299 ], [ %303, %302 ], [ %305, %304 ], !dbg !45
  %306 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i66 = icmp eq i32 %306, 0, !dbg !45
  %307 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i69 = icmp eq i32 %307, 0, !dbg !45
  br i1 %.not.i66, label %313, label %308, !dbg !45

308:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %311, label %309, !dbg !45

309:                                              ; preds = %308
  %310 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %232) #3, !dbg !45
  br label %__nv_sqrtf.exit70, !dbg !45

311:                                              ; preds = %308
  %312 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %232) #3, !dbg !45
  br label %__nv_sqrtf.exit70, !dbg !45

313:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %316, label %314, !dbg !45

314:                                              ; preds = %313
  %315 = tail call float @llvm.nvvm.sqrt.rn.f(float %232) #3, !dbg !45
  br label %__nv_sqrtf.exit70, !dbg !45

316:                                              ; preds = %313
  %317 = tail call float @llvm.nvvm.sqrt.approx.f(float %232) #3, !dbg !45
  br label %__nv_sqrtf.exit70, !dbg !45

__nv_sqrtf.exit70:                                ; preds = %309, %311, %314, %316
  %.0.i68 = phi float [ %310, %309 ], [ %312, %311 ], [ %315, %314 ], [ %317, %316 ], !dbg !45
  %318 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i71 = icmp eq i32 %318, 0, !dbg !45
  %319 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i74 = icmp eq i32 %319, 0, !dbg !45
  br i1 %.not.i71, label %325, label %320, !dbg !45

320:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %323, label %321, !dbg !45

321:                                              ; preds = %320
  %322 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %233) #3, !dbg !45
  br label %__nv_sqrtf.exit75, !dbg !45

323:                                              ; preds = %320
  %324 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %233) #3, !dbg !45
  br label %__nv_sqrtf.exit75, !dbg !45

325:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %328, label %326, !dbg !45

326:                                              ; preds = %325
  %327 = tail call float @llvm.nvvm.sqrt.rn.f(float %233) #3, !dbg !45
  br label %__nv_sqrtf.exit75, !dbg !45

328:                                              ; preds = %325
  %329 = tail call float @llvm.nvvm.sqrt.approx.f(float %233) #3, !dbg !45
  br label %__nv_sqrtf.exit75, !dbg !45

__nv_sqrtf.exit75:                                ; preds = %321, %323, %326, %328
  %.0.i73 = phi float [ %322, %321 ], [ %324, %323 ], [ %327, %326 ], [ %329, %328 ], !dbg !45
  %330 = extractvalue { i32, i32, i32, i32 } %199, 3, !dbg !39
  %331 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !41
  %332 = extractvalue { i32, i32, i32, i32 } %199, 2, !dbg !39
  %333 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !41
  %334 = extractvalue { i32, i32, i32, i32 } %199, 1, !dbg !39
  %335 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !41
  %336 = extractvalue { i32, i32, i32, i32 } %199, 0, !dbg !39
  %337 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !41
  %338 = extractvalue { i32, i32, i32, i32 } %198, 3, !dbg !39
  %339 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !41
  %340 = extractvalue { i32, i32, i32, i32 } %198, 2, !dbg !39
  %341 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !41
  %342 = extractvalue { i32, i32, i32, i32 } %198, 1, !dbg !39
  %343 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !41
  %344 = extractvalue { i32, i32, i32, i32 } %198, 0, !dbg !39
  %345 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !41
  %346 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !22
  %347 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !24
  %348 = extractvalue { i32, i32, i32, i32 } %181, 3, !dbg !31
  %349 = extractvalue { i32, i32, i32, i32 } %185, 3, !dbg !33
  %350 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !22
  %351 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !24
  %352 = extractvalue { i32, i32, i32, i32 } %181, 2, !dbg !31
  %353 = extractvalue { i32, i32, i32, i32 } %185, 2, !dbg !33
  %354 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !22
  %355 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !24
  %356 = extractvalue { i32, i32, i32, i32 } %181, 1, !dbg !31
  %357 = extractvalue { i32, i32, i32, i32 } %185, 1, !dbg !33
  %358 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !22
  %359 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !24
  %360 = extractvalue { i32, i32, i32, i32 } %181, 0, !dbg !31
  %361 = extractvalue { i32, i32, i32, i32 } %185, 0, !dbg !33
  %362 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !22
  %363 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !24
  %364 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !31
  %365 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !33
  %366 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !22
  %367 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !24
  %368 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !31
  %369 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !33
  %370 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !22
  %371 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !24
  %372 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !31
  %373 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !33
  %374 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !22
  %375 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !24
  %376 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !31
  %377 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !33
  %378 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !46
  %379 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !46
  %380 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !46
  %381 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !46
  %382 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !46
  %383 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !46
  %384 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !46
  %385 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !46
  %386 = getelementptr float, ptr addrspace(1) %8, i64 %200, !dbg !47
  %387 = getelementptr float, ptr addrspace(1) %8, i64 %202, !dbg !47
  %388 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %386, i1 %196, i32 0, i1 %196, i32 0, i1 %196, i32 0, i1 %196, i32 0, i1 %196) #3, !dbg !48
  %389 = extractvalue { i32, i32, i32, i32 } %388, 0, !dbg !48
  %390 = extractvalue { i32, i32, i32, i32 } %388, 1, !dbg !48
  %391 = extractvalue { i32, i32, i32, i32 } %388, 2, !dbg !48
  %392 = extractvalue { i32, i32, i32, i32 } %388, 3, !dbg !48
  %393 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %387, i1 %197, i32 0, i1 %197, i32 0, i1 %197, i32 0, i1 %197, i32 0, i1 %197) #3, !dbg !48
  %394 = extractvalue { i32, i32, i32, i32 } %393, 0, !dbg !48
  %395 = extractvalue { i32, i32, i32, i32 } %393, 1, !dbg !48
  %396 = extractvalue { i32, i32, i32, i32 } %393, 2, !dbg !48
  %397 = extractvalue { i32, i32, i32, i32 } %393, 3, !dbg !48
  %398 = getelementptr float, ptr addrspace(1) %9, i64 %200, !dbg !49
  %399 = getelementptr float, ptr addrspace(1) %9, i64 %202, !dbg !49
  %400 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %398, i1 %196, i32 0, i1 %196, i32 0, i1 %196, i32 0, i1 %196, i32 0, i1 %196) #3, !dbg !50
  %401 = extractvalue { i32, i32, i32, i32 } %400, 0, !dbg !50
  %402 = extractvalue { i32, i32, i32, i32 } %400, 1, !dbg !50
  %403 = extractvalue { i32, i32, i32, i32 } %400, 2, !dbg !50
  %404 = extractvalue { i32, i32, i32, i32 } %400, 3, !dbg !50
  %405 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %399, i1 %197, i32 0, i1 %197, i32 0, i1 %197, i32 0, i1 %197, i32 0, i1 %197) #3, !dbg !50
  %406 = extractvalue { i32, i32, i32, i32 } %405, 0, !dbg !50
  %407 = extractvalue { i32, i32, i32, i32 } %405, 1, !dbg !50
  %408 = extractvalue { i32, i32, i32, i32 } %405, 2, !dbg !50
  %409 = extractvalue { i32, i32, i32, i32 } %405, 3, !dbg !50
  %410 = insertelement <16 x i32> poison, i32 %330, i64 0, !dbg !39
  %411 = insertelement <16 x i32> %410, i32 %332, i64 1, !dbg !39
  %412 = insertelement <16 x i32> %411, i32 %334, i64 2, !dbg !39
  %413 = insertelement <16 x i32> %412, i32 %336, i64 3, !dbg !39
  %414 = insertelement <16 x i32> %413, i32 %338, i64 4, !dbg !39
  %415 = insertelement <16 x i32> %414, i32 %340, i64 5, !dbg !39
  %416 = insertelement <16 x i32> %415, i32 %342, i64 6, !dbg !39
  %417 = insertelement <16 x i32> %416, i32 %344, i64 7, !dbg !39
  %418 = insertelement <16 x i32> %417, i32 %374, i64 8, !dbg !39
  %419 = insertelement <16 x i32> %418, i32 %370, i64 9, !dbg !39
  %420 = insertelement <16 x i32> %419, i32 %366, i64 10, !dbg !39
  %421 = insertelement <16 x i32> %420, i32 %362, i64 11, !dbg !39
  %422 = insertelement <16 x i32> %421, i32 %358, i64 12, !dbg !39
  %423 = insertelement <16 x i32> %422, i32 %354, i64 13, !dbg !39
  %424 = insertelement <16 x i32> %423, i32 %350, i64 14, !dbg !39
  %425 = insertelement <16 x i32> %424, i32 %346, i64 15, !dbg !39
  %426 = bitcast <16 x i32> %425 to <16 x float>, !dbg !39
  %427 = insertelement <16 x i32> poison, i32 %331, i64 0, !dbg !41
  %428 = insertelement <16 x i32> %427, i32 %333, i64 1, !dbg !41
  %429 = insertelement <16 x i32> %428, i32 %335, i64 2, !dbg !41
  %430 = insertelement <16 x i32> %429, i32 %337, i64 3, !dbg !41
  %431 = insertelement <16 x i32> %430, i32 %339, i64 4, !dbg !41
  %432 = insertelement <16 x i32> %431, i32 %341, i64 5, !dbg !41
  %433 = insertelement <16 x i32> %432, i32 %343, i64 6, !dbg !41
  %434 = insertelement <16 x i32> %433, i32 %345, i64 7, !dbg !41
  %435 = insertelement <16 x i32> %434, i32 %375, i64 8, !dbg !41
  %436 = insertelement <16 x i32> %435, i32 %371, i64 9, !dbg !41
  %437 = insertelement <16 x i32> %436, i32 %367, i64 10, !dbg !41
  %438 = insertelement <16 x i32> %437, i32 %363, i64 11, !dbg !41
  %439 = insertelement <16 x i32> %438, i32 %359, i64 12, !dbg !41
  %440 = insertelement <16 x i32> %439, i32 %355, i64 13, !dbg !41
  %441 = insertelement <16 x i32> %440, i32 %351, i64 14, !dbg !41
  %442 = insertelement <16 x i32> %441, i32 %347, i64 15, !dbg !41
  %443 = bitcast <16 x i32> %442 to <16 x float>, !dbg !41
  %444 = fsub <16 x float> %426, %443, !dbg !51
  %445 = insertelement <16 x float> poison, float %385, i64 0, !dbg !52
  %446 = insertelement <16 x float> %445, float %384, i64 1, !dbg !52
  %447 = insertelement <16 x float> %446, float %383, i64 2, !dbg !52
  %448 = insertelement <16 x float> %447, float %382, i64 3, !dbg !52
  %449 = insertelement <16 x float> %448, float %381, i64 4, !dbg !52
  %450 = insertelement <16 x float> %449, float %380, i64 5, !dbg !52
  %451 = insertelement <16 x float> %450, float %379, i64 6, !dbg !52
  %452 = insertelement <16 x float> %451, float %378, i64 7, !dbg !52
  %453 = insertelement <16 x float> %452, float %170, i64 8, !dbg !52
  %454 = insertelement <16 x float> %453, float %171, i64 9, !dbg !52
  %455 = insertelement <16 x float> %454, float %172, i64 10, !dbg !52
  %456 = insertelement <16 x float> %455, float %173, i64 11, !dbg !52
  %457 = insertelement <16 x float> %456, float %174, i64 12, !dbg !52
  %458 = insertelement <16 x float> %457, float %175, i64 13, !dbg !52
  %459 = insertelement <16 x float> %458, float %176, i64 14, !dbg !52
  %460 = insertelement <16 x float> %459, float %177, i64 15, !dbg !52
  %461 = fmul <16 x float> %444, %460, !dbg !52
  %462 = insertelement <16 x i32> poison, i32 %397, i64 0, !dbg !48
  %463 = insertelement <16 x i32> %462, i32 %396, i64 1, !dbg !48
  %464 = insertelement <16 x i32> %463, i32 %395, i64 2, !dbg !48
  %465 = insertelement <16 x i32> %464, i32 %394, i64 3, !dbg !48
  %466 = insertelement <16 x i32> %465, i32 %392, i64 4, !dbg !48
  %467 = insertelement <16 x i32> %466, i32 %391, i64 5, !dbg !48
  %468 = insertelement <16 x i32> %467, i32 %390, i64 6, !dbg !48
  %469 = insertelement <16 x i32> %468, i32 %389, i64 7, !dbg !48
  %470 = insertelement <16 x i32> %469, i32 %376, i64 8, !dbg !48
  %471 = insertelement <16 x i32> %470, i32 %372, i64 9, !dbg !48
  %472 = insertelement <16 x i32> %471, i32 %368, i64 10, !dbg !48
  %473 = insertelement <16 x i32> %472, i32 %364, i64 11, !dbg !48
  %474 = insertelement <16 x i32> %473, i32 %360, i64 12, !dbg !48
  %475 = insertelement <16 x i32> %474, i32 %356, i64 13, !dbg !48
  %476 = insertelement <16 x i32> %475, i32 %352, i64 14, !dbg !48
  %477 = insertelement <16 x i32> %476, i32 %348, i64 15, !dbg !48
  %478 = bitcast <16 x i32> %477 to <16 x float>, !dbg !48
  %479 = fmul <16 x float> %461, %478, !dbg !53
  %480 = insertelement <16 x i32> poison, i32 %409, i64 0, !dbg !50
  %481 = insertelement <16 x i32> %480, i32 %408, i64 1, !dbg !50
  %482 = insertelement <16 x i32> %481, i32 %407, i64 2, !dbg !50
  %483 = insertelement <16 x i32> %482, i32 %406, i64 3, !dbg !50
  %484 = insertelement <16 x i32> %483, i32 %404, i64 4, !dbg !50
  %485 = insertelement <16 x i32> %484, i32 %403, i64 5, !dbg !50
  %486 = insertelement <16 x i32> %485, i32 %402, i64 6, !dbg !50
  %487 = insertelement <16 x i32> %486, i32 %401, i64 7, !dbg !50
  %488 = insertelement <16 x i32> %487, i32 %377, i64 8, !dbg !50
  %489 = insertelement <16 x i32> %488, i32 %373, i64 9, !dbg !50
  %490 = insertelement <16 x i32> %489, i32 %369, i64 10, !dbg !50
  %491 = insertelement <16 x i32> %490, i32 %365, i64 11, !dbg !50
  %492 = insertelement <16 x i32> %491, i32 %361, i64 12, !dbg !50
  %493 = insertelement <16 x i32> %492, i32 %357, i64 13, !dbg !50
  %494 = insertelement <16 x i32> %493, i32 %353, i64 14, !dbg !50
  %495 = insertelement <16 x i32> %494, i32 %349, i64 15, !dbg !50
  %496 = bitcast <16 x i32> %495 to <16 x float>, !dbg !50
  %497 = fadd <16 x float> %479, %496, !dbg !54
  %498 = fcmp olt <16 x float> %497, zeroinitializer, !dbg !55
  %499 = extractelement <16 x i1> %498, i64 15, !dbg !59
  %500 = extractelement <16 x float> %497, i64 15, !dbg !59
  %501 = select i1 %499, float 0.000000e+00, float %500, !dbg !59
  %502 = extractelement <16 x i1> %498, i64 14, !dbg !59
  %503 = extractelement <16 x float> %497, i64 14, !dbg !59
  %504 = select i1 %502, float 0.000000e+00, float %503, !dbg !59
  %505 = extractelement <16 x i1> %498, i64 13, !dbg !59
  %506 = extractelement <16 x float> %497, i64 13, !dbg !59
  %507 = select i1 %505, float 0.000000e+00, float %506, !dbg !59
  %508 = extractelement <16 x i1> %498, i64 12, !dbg !59
  %509 = extractelement <16 x float> %497, i64 12, !dbg !59
  %510 = select i1 %508, float 0.000000e+00, float %509, !dbg !59
  %511 = extractelement <16 x i1> %498, i64 11, !dbg !59
  %512 = extractelement <16 x float> %497, i64 11, !dbg !59
  %513 = select i1 %511, float 0.000000e+00, float %512, !dbg !59
  %514 = extractelement <16 x i1> %498, i64 10, !dbg !59
  %515 = extractelement <16 x float> %497, i64 10, !dbg !59
  %516 = select i1 %514, float 0.000000e+00, float %515, !dbg !59
  %517 = extractelement <16 x i1> %498, i64 9, !dbg !59
  %518 = extractelement <16 x float> %497, i64 9, !dbg !59
  %519 = select i1 %517, float 0.000000e+00, float %518, !dbg !59
  %520 = extractelement <16 x i1> %498, i64 8, !dbg !59
  %521 = extractelement <16 x float> %497, i64 8, !dbg !59
  %522 = select i1 %520, float 0.000000e+00, float %521, !dbg !59
  %523 = extractelement <16 x i1> %498, i64 7, !dbg !61
  %524 = extractelement <16 x float> %497, i64 7, !dbg !61
  %525 = select i1 %523, float 0.000000e+00, float %524, !dbg !61
  %526 = extractelement <16 x i1> %498, i64 6, !dbg !61
  %527 = extractelement <16 x float> %497, i64 6, !dbg !61
  %528 = select i1 %526, float 0.000000e+00, float %527, !dbg !61
  %529 = extractelement <16 x i1> %498, i64 5, !dbg !61
  %530 = extractelement <16 x float> %497, i64 5, !dbg !61
  %531 = select i1 %529, float 0.000000e+00, float %530, !dbg !61
  %532 = extractelement <16 x i1> %498, i64 4, !dbg !61
  %533 = extractelement <16 x float> %497, i64 4, !dbg !61
  %534 = select i1 %532, float 0.000000e+00, float %533, !dbg !61
  %535 = extractelement <16 x i1> %498, i64 3, !dbg !61
  %536 = extractelement <16 x float> %497, i64 3, !dbg !61
  %537 = select i1 %535, float 0.000000e+00, float %536, !dbg !61
  %538 = extractelement <16 x i1> %498, i64 2, !dbg !61
  %539 = extractelement <16 x float> %497, i64 2, !dbg !61
  %540 = select i1 %538, float 0.000000e+00, float %539, !dbg !61
  %541 = extractelement <16 x i1> %498, i64 1, !dbg !61
  %542 = extractelement <16 x float> %497, i64 1, !dbg !61
  %543 = select i1 %541, float 0.000000e+00, float %542, !dbg !61
  %544 = extractelement <16 x i1> %498, i64 0, !dbg !61
  %545 = extractelement <16 x float> %497, i64 0, !dbg !61
  %546 = select i1 %544, float 0.000000e+00, float %545, !dbg !61
  %547 = select i1 %26, float %522, float %525, !dbg !62
  %548 = select i1 %26, float %519, float %528, !dbg !62
  %549 = select i1 %26, float %516, float %531, !dbg !62
  %550 = select i1 %26, float %513, float %534, !dbg !62
  %551 = select i1 %27, float %510, float %537, !dbg !62
  %552 = select i1 %27, float %507, float %540, !dbg !62
  %553 = select i1 %27, float %504, float %543, !dbg !62
  %554 = select i1 %27, float %501, float %546, !dbg !62
  %555 = sext i32 %18 to i64, !dbg !63
  %556 = getelementptr float, ptr addrspace(1) %10, i64 %555, !dbg !63
  %557 = sext i32 %19 to i64, !dbg !63
  %558 = getelementptr float, ptr addrspace(1) %10, i64 %557, !dbg !63
  %559 = bitcast float %547 to i32, !dbg !64
  %560 = bitcast float %548 to i32, !dbg !64
  %561 = bitcast float %549 to i32, !dbg !64
  %562 = bitcast float %550 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %559, i32 %560, i32 %561, i32 %562, ptr addrspace(1) %556, i1 %20) #3, !dbg !64
  %563 = bitcast float %551 to i32, !dbg !64
  %564 = bitcast float %552 to i32, !dbg !64
  %565 = bitcast float %553 to i32, !dbg !64
  %566 = bitcast float %554 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %563, i32 %564, i32 %565, i32 %566, ptr addrspace(1) %558, i1 %21) #3, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2436f2hmhctosdrjmbwiesgvdr2o2kwz2vswg2acereqxotcepn.py", directory: "inductor_cache/24")
!4 = !{ptr @triton_poi_fused_cat_40, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_40, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_40", linkageName: "triton_poi_fused_cat_40", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 18, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 53, scope: !7)
!22 = !DILocation(line: 32, column: 46, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 37, column: 19, scope: !7)
!28 = !DILocation(line: 38, column: 27, scope: !7)
!29 = !DILocation(line: 40, column: 20, scope: !7)
!30 = !DILocation(line: 44, column: 31, scope: !7)
!31 = !DILocation(line: 44, column: 36, scope: !7)
!32 = !DILocation(line: 46, column: 31, scope: !7)
!33 = !DILocation(line: 46, column: 36, scope: !7)
!34 = !DILocation(line: 52, column: 20, scope: !7)
!35 = !DILocation(line: 55, column: 50, scope: !7)
!36 = !DILocation(line: 55, column: 41, scope: !7)
!37 = !DILocation(line: 55, column: 31, scope: !7)
!38 = !DILocation(line: 55, column: 64, scope: !7)
!39 = !DILocation(line: 55, column: 56, scope: !7)
!40 = !DILocation(line: 56, column: 31, scope: !7)
!41 = !DILocation(line: 56, column: 45, scope: !7)
!42 = !DILocation(line: 58, column: 31, scope: !7)
!43 = !DILocation(line: 58, column: 45, scope: !7)
!44 = !DILocation(line: 60, column: 20, scope: !7)
!45 = !DILocation(line: 61, column: 27, scope: !7)
!46 = !DILocation(line: 63, column: 20, scope: !7)
!47 = !DILocation(line: 67, column: 31, scope: !7)
!48 = !DILocation(line: 67, column: 45, scope: !7)
!49 = !DILocation(line: 69, column: 31, scope: !7)
!50 = !DILocation(line: 69, column: 45, scope: !7)
!51 = !DILocation(line: 57, column: 20, scope: !7)
!52 = !DILocation(line: 66, column: 20, scope: !7)
!53 = !DILocation(line: 68, column: 20, scope: !7)
!54 = !DILocation(line: 70, column: 20, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !58)
!56 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!57 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!58 = !DILocation(line: 72, column: 42, scope: !7)
!59 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !60)
!60 = !DILocation(line: 49, column: 42, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !58)
!62 = !DILocation(line: 0, scope: !7)
!63 = !DILocation(line: 76, column: 25, scope: !7)
!64 = !DILocation(line: 76, column: 37, scope: !7)
!65 = !DILocation(line: 76, column: 4, scope: !7)
