#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [1], order = [0]}>
#loc = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 1 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused__softmax_leaky_relu_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2.000000e-01> : tensor<64xf32, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<64> : tensor<64xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<16> : tensor<64xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<32> : tensor<64xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<48> : tensor<64xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<64xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<64xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_1 : tensor<64xi32, #blocked> loc(#loc6)
    %6 = arith.remsi %4, %cst_2 : tensor<64xi32, #blocked> loc(#loc7)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #blocked> loc(#loc8)
    %8 = tt.addptr %7, %4 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi32, #blocked> loc(#loc8)
    %9 = tt.load %8, %5 : tensor<64x!tt.ptr<f32>, #blocked> loc(#loc9)
    %10 = tt.addptr %7, %6 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi32, #blocked> loc(#loc10)
    %11 = tt.load %10, %5 evictionPolicy = evict_last : tensor<64x!tt.ptr<f32>, #blocked> loc(#loc11)
    %12 = arith.addi %6, %cst_2 : tensor<64xi32, #blocked> loc(#loc12)
    %13 = tt.addptr %7, %12 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi32, #blocked> loc(#loc13)
    %14 = tt.load %13, %5 evictionPolicy = evict_last : tensor<64x!tt.ptr<f32>, #blocked> loc(#loc14)
    %15 = arith.addi %6, %cst_3 : tensor<64xi32, #blocked> loc(#loc15)
    %16 = tt.addptr %7, %15 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi32, #blocked> loc(#loc16)
    %17 = tt.load %16, %5 evictionPolicy = evict_last : tensor<64x!tt.ptr<f32>, #blocked> loc(#loc17)
    %18 = arith.addi %6, %cst_4 : tensor<64xi32, #blocked> loc(#loc18)
    %19 = tt.addptr %7, %18 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi32, #blocked> loc(#loc19)
    %20 = tt.load %19, %5 evictionPolicy = evict_last : tensor<64x!tt.ptr<f32>, #blocked> loc(#loc20)
    %21 = arith.cmpf ogt, %9, %cst : tensor<64xf32, #blocked> loc(#loc21)
    %22 = arith.mulf %9, %cst_0 : tensor<64xf32, #blocked> loc(#loc22)
    %23 = arith.select %21, %9, %22 : tensor<64xi1, #blocked>, tensor<64xf32, #blocked> loc(#loc23)
    %24 = arith.cmpf ogt, %11, %cst : tensor<64xf32, #blocked> loc(#loc24)
    %25 = arith.mulf %11, %cst_0 : tensor<64xf32, #blocked> loc(#loc25)
    %26 = arith.select %24, %11, %25 : tensor<64xi1, #blocked>, tensor<64xf32, #blocked> loc(#loc26)
    %27 = arith.cmpf ogt, %14, %cst : tensor<64xf32, #blocked> loc(#loc27)
    %28 = arith.mulf %14, %cst_0 : tensor<64xf32, #blocked> loc(#loc28)
    %29 = arith.select %27, %14, %28 : tensor<64xi1, #blocked>, tensor<64xf32, #blocked> loc(#loc29)
    %30 = arith.cmpf ogt, %26, %29 : tensor<64xf32, #blocked> loc(#loc48)
    %31 = arith.cmpf une, %26, %26 : tensor<64xf32, #blocked> loc(#loc49)
    %32 = arith.ori %30, %31 : tensor<64xi1, #blocked> loc(#loc50)
    %33 = arith.select %32, %26, %29 : tensor<64xi1, #blocked>, tensor<64xf32, #blocked> loc(#loc51)
    %34 = arith.cmpf ogt, %17, %cst : tensor<64xf32, #blocked> loc(#loc35)
    %35 = arith.mulf %17, %cst_0 : tensor<64xf32, #blocked> loc(#loc36)
    %36 = arith.select %34, %17, %35 : tensor<64xi1, #blocked>, tensor<64xf32, #blocked> loc(#loc37)
    %37 = arith.cmpf ogt, %33, %36 : tensor<64xf32, #blocked> loc(#loc52)
    %38 = arith.cmpf une, %33, %33 : tensor<64xf32, #blocked> loc(#loc53)
    %39 = arith.ori %37, %38 : tensor<64xi1, #blocked> loc(#loc54)
    %40 = arith.select %39, %33, %36 : tensor<64xi1, #blocked>, tensor<64xf32, #blocked> loc(#loc55)
    %41 = arith.cmpf ogt, %20, %cst : tensor<64xf32, #blocked> loc(#loc39)
    %42 = arith.mulf %20, %cst_0 : tensor<64xf32, #blocked> loc(#loc40)
    %43 = arith.select %41, %20, %42 : tensor<64xi1, #blocked>, tensor<64xf32, #blocked> loc(#loc41)
    %44 = arith.cmpf ogt, %40, %43 : tensor<64xf32, #blocked> loc(#loc56)
    %45 = arith.cmpf une, %40, %40 : tensor<64xf32, #blocked> loc(#loc57)
    %46 = arith.ori %44, %45 : tensor<64xi1, #blocked> loc(#loc58)
    %47 = arith.select %46, %40, %43 : tensor<64xi1, #blocked>, tensor<64xf32, #blocked> loc(#loc59)
    %48 = arith.subf %23, %47 : tensor<64xf32, #blocked> loc(#loc43)
    %49 = math.exp %48 : tensor<64xf32, #blocked> loc(#loc44)
    %50 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #blocked> loc(#loc45)
    %51 = tt.addptr %50, %4 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi32, #blocked> loc(#loc45)
    tt.store %51, %49, %5 : tensor<64x!tt.ptr<f32>, #blocked> loc(#loc46)
    tt.return loc(#loc47)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":21:28)
#loc3 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":21:33)
#loc4 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":22:36)
#loc5 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":22:23)
#loc6 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":23:21)
#loc7 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":25:19)
#loc8 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":26:30)
#loc9 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":26:35)
#loc10 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":27:30)
#loc11 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":27:35)
#loc12 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":28:36)
#loc13 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":28:31)
#loc14 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":28:41)
#loc15 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":29:36)
#loc16 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":29:31)
#loc17 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":29:41)
#loc18 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":30:36)
#loc19 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":30:31)
#loc20 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":30:41)
#loc21 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":32:18)
#loc22 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":34:18)
#loc23 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":35:32)
#loc24 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":36:18)
#loc25 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":37:18)
#loc26 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":38:32)
#loc27 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":39:20)
#loc28 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":40:20)
#loc29 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":41:35)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc31 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":42:41)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc35 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":43:20)
#loc36 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":44:20)
#loc37 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":45:35)
#loc38 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":46:42)
#loc39 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":47:20)
#loc40 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":48:20)
#loc41 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":49:35)
#loc42 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":50:42)
#loc43 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":51:19)
#loc44 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":52:24)
#loc45 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":53:25)
#loc46 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":53:37)
#loc47 = loc("inductor_cache/z6/cz6h2qkytbvsc6av4iiaabqywbbyxfoo422wjszo4xybkcb7soit.py":53:4)
#loc48 = loc(callsite(#loc30 at #loc31))
#loc49 = loc(callsite(#loc32 at #loc31))
#loc50 = loc(callsite(#loc33 at #loc31))
#loc51 = loc(callsite(#loc34 at #loc31))
#loc52 = loc(callsite(#loc30 at #loc38))
#loc53 = loc(callsite(#loc32 at #loc38))
#loc54 = loc(callsite(#loc33 at #loc38))
#loc55 = loc(callsite(#loc34 at #loc38))
#loc56 = loc(callsite(#loc30 at #loc42))
#loc57 = loc(callsite(#loc32 at #loc42))
#loc58 = loc(callsite(#loc33 at #loc42))
#loc59 = loc(callsite(#loc34 at #loc42))
