; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_mul_sigmoid_silu_37(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 6144, !dbg !14
  %12 = srem i32 %10, 1536, !dbg !15
  %13 = sext i32 %10 to i64, !dbg !16
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !16
  %15 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %14, i1 %11) #1, !dbg !17
  %16 = extractvalue { i32, i32 } %15, 0, !dbg !17
  %17 = extractvalue { i32, i32 } %15, 1, !dbg !17
  %18 = bitcast i32 %16 to float, !dbg !17
  %19 = bitcast i32 %17 to float, !dbg !17
  %20 = sext i32 %12 to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !18
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 %11) #1, !dbg !19
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !19
  %24 = extractvalue { i32, i32 } %22, 1, !dbg !19
  %25 = bitcast i32 %23 to float, !dbg !19
  %26 = bitcast i32 %24 to float, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !20
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 %11) #1, !dbg !21
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !21
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !21
  %31 = bitcast i32 %29 to float, !dbg !21
  %32 = bitcast i32 %30 to float, !dbg !21
  %33 = fadd float %18, %25, !dbg !22
  %34 = fadd float %19, %26, !dbg !22
  %35 = fsub float 0.000000e+00, %33, !dbg !23
  %36 = fsub float 0.000000e+00, %34, !dbg !23
  %37 = fmul float %35, 0x3FF7154760000000, !dbg !27
  %38 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %37) #1, !dbg !27
  %39 = fmul float %36, 0x3FF7154760000000, !dbg !27
  %40 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %39) #1, !dbg !27
  %41 = fadd float %38, 1.000000e+00, !dbg !28
  %42 = fadd float %40, 1.000000e+00, !dbg !28
  %43 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %41) #1, !dbg !29
  %44 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %42) #1, !dbg !29
  %45 = fsub float 0.000000e+00, %31, !dbg !30
  %46 = fsub float 0.000000e+00, %32, !dbg !30
  %47 = fmul float %45, 0x3FF7154760000000, !dbg !32
  %48 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %47) #1, !dbg !32
  %49 = fmul float %46, 0x3FF7154760000000, !dbg !32
  %50 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %49) #1, !dbg !32
  %51 = fadd float %48, 1.000000e+00, !dbg !33
  %52 = fadd float %50, 1.000000e+00, !dbg !33
  %53 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %51) #1, !dbg !34
  %54 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %52) #1, !dbg !34
  %55 = fmul float %53, %31, !dbg !35
  %56 = fmul float %54, %32, !dbg !35
  %57 = fmul float %43, %55, !dbg !36
  %58 = fmul float %44, %56, !dbg !36
  %59 = bitcast float %33 to i32, !dbg !37
  %60 = bitcast float %34 to i32, !dbg !37
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %59, i32 %60, ptr addrspace(1) %14, i1 %11) #1, !dbg !37
  %61 = bitcast float %57 to i32, !dbg !38
  %62 = bitcast float %58 to i32, !dbg !38
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %61, i32 %62, ptr addrspace(1) %27, i1 %11) #1, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjwckazjiqagr4rlcsyu2v7geiugzn6u2vvntbe4icilx6lcwbp5.py", directory: "inductor_cache/jw")
!4 = !{ptr @triton_poi_fused_convolution_mul_sigmoid_silu_37, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_mul_sigmoid_silu_37, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_mul_sigmoid_silu_37", linkageName: "triton_poi_fused_convolution_mul_sigmoid_silu_37", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 34, scope: !7)
!21 = !DILocation(line: 28, column: 39, scope: !7)
!22 = !DILocation(line: 29, column: 18, scope: !7)
!23 = !DILocation(line: 47, column: 30, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = !DILocation(line: 30, column: 22, scope: !7)
!27 = !DILocation(line: 47, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 47, column: 20, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 47, column: 16, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 47, column: 30, scope: !24, inlinedAt: !31)
!31 = !DILocation(line: 31, column: 22, scope: !7)
!32 = !DILocation(line: 47, column: 29, scope: !24, inlinedAt: !31)
!33 = !DILocation(line: 47, column: 20, scope: !24, inlinedAt: !31)
!34 = !DILocation(line: 47, column: 16, scope: !24, inlinedAt: !31)
!35 = !DILocation(line: 32, column: 18, scope: !7)
!36 = !DILocation(line: 33, column: 18, scope: !7)
!37 = !DILocation(line: 34, column: 39, scope: !7)
!38 = !DILocation(line: 35, column: 39, scope: !7)
!39 = !DILocation(line: 35, column: 4, scope: !7)
