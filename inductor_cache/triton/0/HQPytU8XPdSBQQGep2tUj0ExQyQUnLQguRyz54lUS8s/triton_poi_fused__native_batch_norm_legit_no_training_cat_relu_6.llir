; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 1, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %18 = sdiv i32 %.frozen, 16, !dbg !14
  %19 = mul i32 %18, 16, !dbg !15
  %.decomposed = sub i32 %.frozen, %19, !dbg !15
  %20 = srem i32 %17, 16, !dbg !15
  %21 = srem i32 %18, 32, !dbg !16
  %22 = sdiv i32 %16, 512, !dbg !17
  %23 = sext i32 %.decomposed to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !18
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !20
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !21
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !21
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !21
  %30 = bitcast i32 %28 to float, !dbg !21
  %31 = bitcast i32 %29 to float, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !22
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %6, i64 %23, !dbg !24
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !25
  %36 = icmp slt i32 %.decomposed, 13, !dbg !26
  %37 = icmp slt i32 %20, 13, !dbg !26
  %38 = mul nsw i32 %18, 13, !dbg !27
  %39 = add nsw i32 %38, %.decomposed, !dbg !28
  %40 = add nsw i32 %38, %20, !dbg !28
  %41 = sext i32 %39 to i64, !dbg !29
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !29
  %43 = sext i32 %40 to i64, !dbg !29
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !29
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %36, i32 0, i1 %36) #3, !dbg !30
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %37, i32 0, i1 %37) #3, !dbg !30
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !31
  %48 = sext i32 %20 to i64, !dbg !31
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !31
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %36, i32 0, i1 %36) #3, !dbg !32
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %37, i32 0, i1 %37) #3, !dbg !32
  %52 = icmp sgt i32 %.decomposed, 12, !dbg !33
  %53 = icmp sgt i32 %20, 12, !dbg !33
  %54 = mul nsw i32 %21, 6, !dbg !34
  %55 = mul nsw i32 %22, 384, !dbg !35
  %56 = add nsw i32 %54, %55, !dbg !36
  %57 = add nsw i32 %.decomposed, -13, !dbg !37
  %58 = add nsw i32 %20, -13, !dbg !37
  %59 = add nsw i32 %56, %57, !dbg !38
  %60 = add nsw i32 %56, %58, !dbg !38
  %61 = sext i32 %59 to i64, !dbg !39
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !39
  %63 = sext i32 %60 to i64, !dbg !39
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !39
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %52, i32 0, i1 %52) #3, !dbg !40
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %53, i32 0, i1 %53) #3, !dbg !40
  %67 = add nsw i32 %56, 3, !dbg !41
  %68 = add nsw i32 %67, %57, !dbg !42
  %69 = add nsw i32 %67, %58, !dbg !42
  %70 = sext i32 %68 to i64, !dbg !43
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %70, !dbg !43
  %72 = sext i32 %69 to i64, !dbg !43
  %73 = getelementptr float, ptr addrspace(1) %2, i64 %72, !dbg !43
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %52, i32 0, i1 %52) #3, !dbg !44
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %53, i32 0, i1 %53) #3, !dbg !44
  %76 = add nsw i32 %56, 192, !dbg !45
  %77 = add nsw i32 %76, %57, !dbg !46
  %78 = add nsw i32 %76, %58, !dbg !46
  %79 = sext i32 %77 to i64, !dbg !47
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %79, !dbg !47
  %81 = sext i32 %78 to i64, !dbg !47
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %81, !dbg !47
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %52, i32 0, i1 %52) #3, !dbg !48
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %53, i32 0, i1 %53) #3, !dbg !48
  %85 = add nsw i32 %56, 195, !dbg !49
  %86 = add nsw i32 %85, %57, !dbg !50
  %87 = add nsw i32 %85, %58, !dbg !50
  %88 = sext i32 %86 to i64, !dbg !51
  %89 = getelementptr float, ptr addrspace(1) %2, i64 %88, !dbg !51
  %90 = sext i32 %87 to i64, !dbg !51
  %91 = getelementptr float, ptr addrspace(1) %2, i64 %90, !dbg !51
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %52, i32 0, i1 %52) #3, !dbg !52
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %53, i32 0, i1 %53) #3, !dbg !52
  %94 = fadd float %30, 0x3F50624DE0000000, !dbg !53
  %95 = fadd float %31, 0x3F50624DE0000000, !dbg !53
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i = icmp eq i32 %96, 0, !dbg !54
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i = icmp eq i32 %97, 0, !dbg !54
  br i1 %.not.i, label %103, label %98, !dbg !54

98:                                               ; preds = %10
  br i1 %.not1.i, label %101, label %99, !dbg !54

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

103:                                              ; preds = %10
  br i1 %.not1.i, label %106, label %104, !dbg !54

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

__nv_sqrtf.exit:                                  ; preds = %99, %101, %104, %106
  %.0.i = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !54
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i1 = icmp eq i32 %108, 0, !dbg !54
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i4 = icmp eq i32 %109, 0, !dbg !54
  br i1 %.not.i1, label %115, label %110, !dbg !54

110:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %113, label %111, !dbg !54

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

115:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %118, label %116, !dbg !54

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

__nv_sqrtf.exit5:                                 ; preds = %111, %113, %116, %118
  %.0.i3 = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !54
  %120 = bitcast i32 %46 to float, !dbg !30
  %121 = bitcast i32 %51 to float, !dbg !32
  %122 = fadd float %120, %121, !dbg !55
  %123 = bitcast i32 %75 to float, !dbg !44
  %124 = bitcast i32 %66 to float, !dbg !40
  %125 = fcmp ogt float %123, %124, !dbg !56
  %126 = fcmp uno float %123, 0.000000e+00, !dbg !60
  %127 = or i1 %125, %126, !dbg !61
  %128 = select i1 %127, float %123, float %124, !dbg !62
  %129 = bitcast i32 %84 to float, !dbg !48
  %130 = fcmp olt float %128, %129, !dbg !63
  %131 = fcmp uno float %129, 0.000000e+00, !dbg !65
  %132 = or i1 %131, %130, !dbg !66
  %133 = select i1 %132, float %129, float %128, !dbg !67
  %134 = bitcast i32 %93 to float, !dbg !52
  %135 = fcmp olt float %133, %134, !dbg !68
  %136 = fcmp uno float %134, 0.000000e+00, !dbg !70
  %137 = or i1 %136, %135, !dbg !71
  %138 = select i1 %137, float %134, float %133, !dbg !72
  %139 = select i1 %37, float %122, float %138, !dbg !73
  %140 = extractvalue { i32, i32 } %25, 1, !dbg !19
  %141 = bitcast i32 %140 to float, !dbg !19
  %142 = fsub float %139, %141, !dbg !74
  %143 = bitcast i32 %45 to float, !dbg !30
  %144 = bitcast i32 %50 to float, !dbg !32
  %145 = fadd float %143, %144, !dbg !55
  %146 = bitcast i32 %74 to float, !dbg !44
  %147 = bitcast i32 %65 to float, !dbg !40
  %148 = fcmp ogt float %146, %147, !dbg !56
  %149 = fcmp uno float %146, 0.000000e+00, !dbg !60
  %150 = or i1 %148, %149, !dbg !61
  %151 = select i1 %150, float %146, float %147, !dbg !62
  %152 = bitcast i32 %83 to float, !dbg !48
  %153 = fcmp olt float %151, %152, !dbg !63
  %154 = fcmp uno float %152, 0.000000e+00, !dbg !65
  %155 = or i1 %154, %153, !dbg !66
  %156 = select i1 %155, float %152, float %151, !dbg !67
  %157 = bitcast i32 %92 to float, !dbg !52
  %158 = fcmp olt float %156, %157, !dbg !68
  %159 = fcmp uno float %157, 0.000000e+00, !dbg !70
  %160 = or i1 %159, %158, !dbg !71
  %161 = select i1 %160, float %157, float %156, !dbg !72
  %162 = select i1 %36, float %145, float %161, !dbg !73
  %163 = extractvalue { i32, i32 } %25, 0, !dbg !19
  %164 = bitcast i32 %163 to float, !dbg !19
  %165 = fsub float %162, %164, !dbg !74
  %166 = extractvalue { i32, i32 } %35, 1, !dbg !25
  %167 = bitcast i32 %166 to float, !dbg !25
  %168 = extractvalue { i32, i32 } %35, 0, !dbg !25
  %169 = bitcast i32 %168 to float, !dbg !25
  %170 = extractvalue { i32, i32 } %33, 1, !dbg !23
  %171 = bitcast i32 %170 to float, !dbg !23
  %172 = extractvalue { i32, i32 } %33, 0, !dbg !23
  %173 = bitcast i32 %172 to float, !dbg !23
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !75
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !75
  %176 = fmul float %165, %174, !dbg !76
  %177 = fmul float %142, %175, !dbg !76
  %178 = fmul float %176, %173, !dbg !77
  %179 = fmul float %177, %171, !dbg !77
  %180 = fadd float %178, %169, !dbg !78
  %181 = fadd float %179, %167, !dbg !78
  %182 = fcmp olt float %180, 0.000000e+00, !dbg !79
  %183 = fcmp olt float %181, 0.000000e+00, !dbg !79
  %184 = select i1 %182, float 0.000000e+00, float %180, !dbg !81
  %185 = select i1 %183, float 0.000000e+00, float %181, !dbg !81
  %186 = sext i32 %16 to i64, !dbg !82
  %187 = getelementptr float, ptr addrspace(1) %7, i64 %186, !dbg !82
  %188 = bitcast float %162 to i32, !dbg !83
  %189 = bitcast float %139 to i32, !dbg !83
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %188, i32 %189, ptr addrspace(1) %187, i1 true) #3, !dbg !83
  %190 = getelementptr float, ptr addrspace(1) %8, i64 %186, !dbg !84
  %191 = bitcast float %184 to i32, !dbg !85
  %192 = bitcast float %185 to i32, !dbg !85
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %191, i32 %192, ptr addrspace(1) %190, i1 true) #3, !dbg !85
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5gzyyh4iqt5cr5ndahafitzaksuljy3eofxcbivqfjwa3fmlyc7.py", directory: "inductor_cache/5g")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 27, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 31, scope: !7)
!19 = !DILocation(line: 29, column: 36, scope: !7)
!20 = !DILocation(line: 30, column: 31, scope: !7)
!21 = !DILocation(line: 30, column: 36, scope: !7)
!22 = !DILocation(line: 31, column: 31, scope: !7)
!23 = !DILocation(line: 31, column: 36, scope: !7)
!24 = !DILocation(line: 32, column: 31, scope: !7)
!25 = !DILocation(line: 32, column: 36, scope: !7)
!26 = !DILocation(line: 37, column: 18, scope: !7)
!27 = !DILocation(line: 38, column: 33, scope: !7)
!28 = !DILocation(line: 38, column: 39, scope: !7)
!29 = !DILocation(line: 38, column: 30, scope: !7)
!30 = !DILocation(line: 38, column: 45, scope: !7)
!31 = !DILocation(line: 39, column: 30, scope: !7)
!32 = !DILocation(line: 39, column: 35, scope: !7)
!33 = !DILocation(line: 43, column: 20, scope: !7)
!34 = !DILocation(line: 46, column: 33, scope: !7)
!35 = !DILocation(line: 46, column: 42, scope: !7)
!36 = !DILocation(line: 46, column: 38, scope: !7)
!37 = !DILocation(line: 46, column: 56, scope: !7)
!38 = !DILocation(line: 46, column: 48, scope: !7)
!39 = !DILocation(line: 46, column: 31, scope: !7)
!40 = !DILocation(line: 46, column: 62, scope: !7)
!41 = !DILocation(line: 47, column: 42, scope: !7)
!42 = !DILocation(line: 47, column: 52, scope: !7)
!43 = !DILocation(line: 47, column: 31, scope: !7)
!44 = !DILocation(line: 47, column: 66, scope: !7)
!45 = !DILocation(line: 49, column: 44, scope: !7)
!46 = !DILocation(line: 49, column: 54, scope: !7)
!47 = !DILocation(line: 49, column: 31, scope: !7)
!48 = !DILocation(line: 49, column: 68, scope: !7)
!49 = !DILocation(line: 51, column: 44, scope: !7)
!50 = !DILocation(line: 51, column: 54, scope: !7)
!51 = !DILocation(line: 51, column: 31, scope: !7)
!52 = !DILocation(line: 51, column: 68, scope: !7)
!53 = !DILocation(line: 58, column: 20, scope: !7)
!54 = !DILocation(line: 59, column: 27, scope: !7)
!55 = !DILocation(line: 40, column: 18, scope: !7)
!56 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !59)
!57 = distinct !DILexicalBlockFile(scope: !7, file: !58, discriminator: 0)
!58 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!59 = !DILocation(line: 48, column: 42, scope: !7)
!60 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !59)
!61 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !59)
!62 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !59)
!63 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !64)
!64 = !DILocation(line: 50, column: 42, scope: !7)
!65 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !64)
!66 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !64)
!67 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !64)
!68 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !69)
!69 = !DILocation(line: 52, column: 42, scope: !7)
!70 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !69)
!71 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !69)
!72 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !69)
!73 = !DILocation(line: 0, scope: !7)
!74 = !DILocation(line: 56, column: 20, scope: !7)
!75 = !DILocation(line: 61, column: 20, scope: !7)
!76 = !DILocation(line: 64, column: 20, scope: !7)
!77 = !DILocation(line: 65, column: 20, scope: !7)
!78 = !DILocation(line: 66, column: 20, scope: !7)
!79 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !80)
!80 = !DILocation(line: 68, column: 42, scope: !7)
!81 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !80)
!82 = !DILocation(line: 69, column: 25, scope: !7)
!83 = !DILocation(line: 69, column: 37, scope: !7)
!84 = !DILocation(line: 70, column: 25, scope: !7)
!85 = !DILocation(line: 70, column: 37, scope: !7)
!86 = !DILocation(line: 70, column: 4, scope: !7)
