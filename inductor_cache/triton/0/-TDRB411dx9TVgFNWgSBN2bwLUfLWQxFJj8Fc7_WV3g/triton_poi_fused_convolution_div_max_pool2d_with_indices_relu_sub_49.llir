; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_49(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %11 = and i32 %9, 60, !dbg !12
  %12 = lshr i32 %8, 2, !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = or disjoint i32 %13, 32, !dbg !12
  %15 = or disjoint i32 %7, %11, !dbg !13
  %16 = or disjoint i32 %7, %13, !dbg !13
  %17 = or disjoint i32 %7, %14, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %19 = shl i32 %18, 4, !dbg !15
  %20 = lshr i32 %8, 4, !dbg !16
  %21 = and i32 %20, 7, !dbg !16
  %22 = or disjoint i32 %19, %21, !dbg !17
  %23 = or disjoint i32 %22, 8, !dbg !17
  %24 = or disjoint i32 %19, %10, !dbg !17
  %25 = icmp slt i32 %22, 16, !dbg !18
  %26 = icmp slt i32 %23, 16, !dbg !18
  %27 = icmp slt i32 %24, 16, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %28 = sdiv i32 %.frozen, 512, !dbg !19
  %29 = mul i32 %28, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %29, !dbg !20
  %30 = shl i32 %22, 9, !dbg !21
  %31 = shl i32 %23, 9, !dbg !21
  %32 = shl i32 %28, 13, !dbg !22
  %33 = add i32 %32, %.decomposed, !dbg !23
  %34 = add i32 %33, %30, !dbg !24
  %35 = add i32 %33, %31, !dbg !24
  %36 = sext i32 %34 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !25
  %38 = sext i32 %35 to i64, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !25
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %25) #2, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !26
  %45 = bitcast i32 %41 to float, !dbg !26
  %46 = bitcast i32 %42 to float, !dbg !26
  %47 = bitcast i32 %43 to float, !dbg !26
  %48 = bitcast i32 %44 to float, !dbg !26
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %26) #2, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !26
  %54 = bitcast i32 %50 to float, !dbg !26
  %55 = bitcast i32 %51 to float, !dbg !26
  %56 = bitcast i32 %52 to float, !dbg !26
  %57 = bitcast i32 %53 to float, !dbg !26
  %58 = sext i32 %.decomposed to i64, !dbg !27
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !27
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #2, !dbg !28
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !28
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !28
  %65 = bitcast i32 %61 to float, !dbg !28
  %66 = bitcast i32 %62 to float, !dbg !28
  %67 = bitcast i32 %63 to float, !dbg !28
  %68 = bitcast i32 %64 to float, !dbg !28
  %69 = fadd float %45, %65, !dbg !29
  %70 = fadd float %46, %66, !dbg !29
  %71 = fadd float %47, %67, !dbg !29
  %72 = fadd float %48, %68, !dbg !29
  %73 = fadd float %54, %65, !dbg !29
  %74 = fadd float %55, %66, !dbg !29
  %75 = fadd float %56, %67, !dbg !29
  %76 = fadd float %57, %68, !dbg !29
  %77 = shl i32 %16, 4, !dbg !30
  %78 = shl i32 %17, 4, !dbg !30
  %79 = add i32 %24, %77, !dbg !31
  %80 = add i32 %24, %78, !dbg !31
  %81 = sext i32 %79 to i64, !dbg !32
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %81, !dbg !32
  %83 = sext i32 %80 to i64, !dbg !32
  %84 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !32
  %85 = shl i32 %8, 6, !dbg !33
  %86 = and i32 %85, 960, !dbg !33
  %87 = or disjoint i32 %86, %21, !dbg !33
  %88 = and i32 %9, 508, !dbg !33
  %89 = lshr exact i32 %86, 2, !dbg !33
  %90 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %89, !dbg !33
  %91 = getelementptr float, ptr addrspace(3) %90, i32 %87, !dbg !33
  %92 = bitcast float %69 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 true) #2, !dbg !33
  %93 = or disjoint i32 %87, 16, !dbg !33
  %94 = lshr i32 %93, 4, !dbg !33
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i32 %94, !dbg !33
  %96 = getelementptr float, ptr addrspace(3) %95, i32 %93, !dbg !33
  %97 = bitcast float %70 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #2, !dbg !33
  %98 = or disjoint i32 %87, 32, !dbg !33
  %99 = lshr i32 %98, 4, !dbg !33
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i32 %99, !dbg !33
  %101 = getelementptr float, ptr addrspace(3) %100, i32 %98, !dbg !33
  %102 = bitcast float %71 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #2, !dbg !33
  %103 = or disjoint i32 %87, 48, !dbg !33
  %104 = lshr i32 %103, 4, !dbg !33
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i32 %104, !dbg !33
  %106 = getelementptr float, ptr addrspace(3) %105, i32 %103, !dbg !33
  %107 = bitcast float %72 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 true) #2, !dbg !33
  %108 = or disjoint i32 %87, 8, !dbg !33
  %109 = getelementptr float, ptr addrspace(3) %90, i32 %108, !dbg !33
  %110 = bitcast float %73 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %110, i1 true) #2, !dbg !33
  %111 = or disjoint i32 %87, 24, !dbg !33
  %112 = lshr i32 %111, 4, !dbg !33
  %113 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !33
  %114 = getelementptr float, ptr addrspace(3) %113, i32 %111, !dbg !33
  %115 = bitcast float %74 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #2, !dbg !33
  %116 = or disjoint i32 %87, 40, !dbg !33
  %117 = lshr i32 %116, 4, !dbg !33
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !33
  %119 = getelementptr float, ptr addrspace(3) %118, i32 %116, !dbg !33
  %120 = bitcast float %75 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #2, !dbg !33
  %121 = or disjoint i32 %87, 56, !dbg !33
  %122 = lshr i32 %121, 4, !dbg !33
  %123 = getelementptr float, ptr addrspace(3) @global_smem, i32 %122, !dbg !33
  %124 = getelementptr float, ptr addrspace(3) %123, i32 %121, !dbg !33
  %125 = bitcast float %76 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 true) #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %126 = lshr i32 %88, 4, !dbg !33
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %126, !dbg !33
  %128 = getelementptr inbounds float, ptr addrspace(3) %127, i32 %88, !dbg !33
  %129 = load i32, ptr addrspace(3) %128, align 4, !dbg !33
  %130 = or disjoint i32 %88, 1, !dbg !33
  %131 = getelementptr inbounds float, ptr addrspace(3) %127, i32 %130, !dbg !33
  %132 = load i32, ptr addrspace(3) %131, align 4, !dbg !33
  %133 = or disjoint i32 %88, 2, !dbg !33
  %134 = getelementptr inbounds float, ptr addrspace(3) %127, i32 %133, !dbg !33
  %135 = load i32, ptr addrspace(3) %134, align 4, !dbg !33
  %136 = or disjoint i32 %88, 3, !dbg !33
  %137 = getelementptr inbounds float, ptr addrspace(3) %127, i32 %136, !dbg !33
  %138 = load i32, ptr addrspace(3) %137, align 4, !dbg !33
  %139 = or disjoint i32 %88, 512, !dbg !33
  %140 = lshr i32 %139, 4, !dbg !33
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %140, !dbg !33
  %142 = getelementptr inbounds float, ptr addrspace(3) %141, i32 %139, !dbg !33
  %143 = load i32, ptr addrspace(3) %142, align 4, !dbg !33
  %144 = or disjoint i32 %88, 513, !dbg !33
  %145 = lshr i32 %144, 4, !dbg !33
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %145, !dbg !33
  %147 = getelementptr inbounds float, ptr addrspace(3) %146, i32 %144, !dbg !33
  %148 = load i32, ptr addrspace(3) %147, align 4, !dbg !33
  %149 = or disjoint i32 %88, 514, !dbg !33
  %150 = lshr i32 %149, 4, !dbg !33
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %150, !dbg !33
  %152 = getelementptr inbounds float, ptr addrspace(3) %151, i32 %149, !dbg !33
  %153 = load i32, ptr addrspace(3) %152, align 4, !dbg !33
  %154 = or disjoint i32 %88, 515, !dbg !33
  %155 = lshr i32 %154, 4, !dbg !33
  %156 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %155, !dbg !33
  %157 = getelementptr inbounds float, ptr addrspace(3) %156, i32 %154, !dbg !33
  %158 = load i32, ptr addrspace(3) %157, align 4, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %129, i32 %132, i32 %135, i32 %138, ptr addrspace(1) %82, i1 %27) #2, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %143, i32 %148, i32 %153, i32 %158, ptr addrspace(1) %84, i1 %27) #2, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3wgjrcacagsfwc5u2ooonww3c3mdfuebwucn6cg5k3yvax6lpln.py", directory: "inductor_cache/3w")
!4 = !{ptr @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_49, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_49, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_49", linkageName: "triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_49", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 54, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 33, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 25, scope: !7)
!33 = !DILocation(line: 35, column: 44, scope: !7)
!34 = !DILocation(line: 35, column: 4, scope: !7)
