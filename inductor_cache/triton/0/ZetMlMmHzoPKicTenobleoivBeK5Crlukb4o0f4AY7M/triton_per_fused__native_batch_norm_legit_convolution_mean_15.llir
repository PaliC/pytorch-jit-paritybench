; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_convolution_mean_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = and i32 %9, 31, !dbg !11
  %11 = lshr i32 %9, 5, !dbg !11
  %12 = shl i32 %9, 2, !dbg !11
  %13 = and i32 %12, 252, !dbg !11
  %14 = srem i32 %8, 256, !dbg !12
  %15 = shl i32 %8, 8, !dbg !13
  %16 = or disjoint i32 %15, %13, !dbg !14
  %17 = sext i32 %16 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #5, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !16
  %24 = bitcast i32 %20 to float, !dbg !16
  %25 = bitcast i32 %21 to float, !dbg !16
  %26 = bitcast i32 %22 to float, !dbg !16
  %27 = bitcast i32 %23 to float, !dbg !16
  %28 = sext i32 %14 to i64, !dbg !17
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !17
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !18
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !18
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !18
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !18
  %34 = bitcast i32 %33 to float, !dbg !18
  %35 = fadd float %24, %34, !dbg !19
  %36 = fadd float %25, %34, !dbg !19
  %37 = fadd float %26, %34, !dbg !19
  %38 = fadd float %27, %34, !dbg !19
  %39 = fadd float %35, %36, !dbg !20
  %40 = fadd float %37, %39, !dbg !20
  %41 = fadd float %38, %40, !dbg !20
  %42 = bitcast float %41 to i32, !dbg !25
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 16, i32 31), !dbg !25
  %44 = bitcast i32 %43 to float, !dbg !25
  %45 = fadd float %41, %44, !dbg !20
  %46 = bitcast float %45 to i32, !dbg !25
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 8, i32 31), !dbg !25
  %48 = bitcast i32 %47 to float, !dbg !25
  %49 = fadd float %45, %48, !dbg !20
  %50 = bitcast float %49 to i32, !dbg !25
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 4, i32 31), !dbg !25
  %52 = bitcast i32 %51 to float, !dbg !25
  %53 = fadd float %49, %52, !dbg !20
  %54 = bitcast float %53 to i32, !dbg !25
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 2, i32 31), !dbg !25
  %56 = bitcast i32 %55 to float, !dbg !25
  %57 = fadd float %53, %56, !dbg !20
  %58 = bitcast float %57 to i32, !dbg !25
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 1, i32 31), !dbg !25
  %60 = bitcast i32 %59 to float, !dbg !25
  %61 = fadd float %57, %60, !dbg !20
  %62 = icmp eq i32 %10, 0, !dbg !25
  %63 = and i32 %11, 1, !dbg !25
  %64 = zext nneg i32 %63 to i64, !dbg !25
  %65 = getelementptr float, ptr addrspace(3) @global_smem, i64 %64, !dbg !25
  %66 = bitcast float %61 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 %62) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %67 = icmp slt i32 %9, 2, !dbg !25
  %68 = sext i32 %9 to i64, !dbg !25
  %69 = getelementptr float, ptr addrspace(3) @global_smem, i64 %68, !dbg !25
  %70 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %69, i1 %67) #5, !dbg !25
  %71 = bitcast i32 %70 to float, !dbg !25
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 1, i32 31), !dbg !25
  %73 = bitcast i32 %72 to float, !dbg !25
  %74 = fadd float %71, %73, !dbg !20
  %75 = and i32 %9, 1, !dbg !25
  %76 = icmp eq i32 %75, 0, !dbg !25
  %77 = and i1 %67, %76, !dbg !25
  %78 = bitcast float %74 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %78, i1 %77) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %79 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !25
  %80 = fadd float %79, 0.000000e+00, !dbg !26
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float 2.560000e+02) #5, !dbg !30
  %82 = fsub float %35, %81, !dbg !31
  %83 = fsub float %36, %81, !dbg !31
  %84 = fsub float %37, %81, !dbg !31
  %85 = fsub float %38, %81, !dbg !31
  %86 = fmul float %82, %82, !dbg !32
  %87 = fmul float %83, %83, !dbg !32
  %88 = fmul float %84, %84, !dbg !32
  %89 = fmul float %85, %85, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %90 = fadd float %86, %87, !dbg !35
  %91 = fadd float %88, %90, !dbg !35
  %92 = fadd float %89, %91, !dbg !35
  %93 = bitcast float %92 to i32, !dbg !33
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 16, i32 31), !dbg !33
  %95 = bitcast i32 %94 to float, !dbg !33
  %96 = fadd float %92, %95, !dbg !35
  %97 = bitcast float %96 to i32, !dbg !33
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 8, i32 31), !dbg !33
  %99 = bitcast i32 %98 to float, !dbg !33
  %100 = fadd float %96, %99, !dbg !35
  %101 = bitcast float %100 to i32, !dbg !33
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 4, i32 31), !dbg !33
  %103 = bitcast i32 %102 to float, !dbg !33
  %104 = fadd float %100, %103, !dbg !35
  %105 = bitcast float %104 to i32, !dbg !33
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 2, i32 31), !dbg !33
  %107 = bitcast i32 %106 to float, !dbg !33
  %108 = fadd float %104, %107, !dbg !35
  %109 = bitcast float %108 to i32, !dbg !33
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 1, i32 31), !dbg !33
  %111 = bitcast i32 %110 to float, !dbg !33
  %112 = fadd float %108, %111, !dbg !35
  %113 = bitcast float %112 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %113, i1 %62) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %114 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %69, i1 %67) #5, !dbg !33
  %115 = bitcast i32 %114 to float, !dbg !33
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 1, i32 31), !dbg !33
  %117 = bitcast i32 %116 to float, !dbg !33
  %118 = fadd float %115, %117, !dbg !35
  %119 = bitcast float %118 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %119, i1 %77) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %120 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !33
  %121 = fadd float %120, 0.000000e+00, !dbg !36
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float 2.560000e+02) #5, !dbg !38
  %123 = fadd float %122, 0x3EE4F8B580000000, !dbg !39
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i = icmp eq i32 %124, 0, !dbg !40
  br i1 %.not.i, label %127, label %125, !dbg !40

125:                                              ; preds = %7
  %126 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %123), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

127:                                              ; preds = %7
  %128 = tail call float @llvm.nvvm.rsqrt.approx.f(float %123), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %125, %127
  %.0.i = phi float [ %126, %125 ], [ %128, %127 ], !dbg !40
  %129 = fmul float %82, %.0.i, !dbg !41
  %130 = fmul float %83, %.0.i, !dbg !41
  %131 = fmul float %84, %.0.i, !dbg !41
  %132 = fmul float %85, %.0.i, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %133 = fadd float %129, %130, !dbg !44
  %134 = fadd float %131, %133, !dbg !44
  %135 = fadd float %132, %134, !dbg !44
  %136 = bitcast float %135 to i32, !dbg !42
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 16, i32 31), !dbg !42
  %138 = bitcast i32 %137 to float, !dbg !42
  %139 = fadd float %135, %138, !dbg !44
  %140 = bitcast float %139 to i32, !dbg !42
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 8, i32 31), !dbg !42
  %142 = bitcast i32 %141 to float, !dbg !42
  %143 = fadd float %139, %142, !dbg !44
  %144 = bitcast float %143 to i32, !dbg !42
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 4, i32 31), !dbg !42
  %146 = bitcast i32 %145 to float, !dbg !42
  %147 = fadd float %143, %146, !dbg !44
  %148 = bitcast float %147 to i32, !dbg !42
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 2, i32 31), !dbg !42
  %150 = bitcast i32 %149 to float, !dbg !42
  %151 = fadd float %147, %150, !dbg !44
  %152 = bitcast float %151 to i32, !dbg !42
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 1, i32 31), !dbg !42
  %154 = bitcast i32 %153 to float, !dbg !42
  %155 = fadd float %151, %154, !dbg !44
  %156 = bitcast float %155 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %156, i1 %62) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %157 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %69, i1 %67) #5, !dbg !42
  %158 = bitcast i32 %157 to float, !dbg !42
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 1, i32 31), !dbg !42
  %160 = bitcast i32 %159 to float, !dbg !42
  %161 = fadd float %158, %160, !dbg !44
  %162 = bitcast float %161 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %162, i1 %77) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %163 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !42
  %164 = fadd float %163, 0.000000e+00, !dbg !45
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float 2.560000e+02) #5, !dbg !47
  %166 = bitcast float %35 to i32, !dbg !48
  %167 = bitcast float %36 to i32, !dbg !48
  %168 = bitcast float %37 to i32, !dbg !48
  %169 = bitcast float %38 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %166, i32 %167, i32 %168, i32 %169, ptr addrspace(1) %18, i1 true) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %170 = sext i32 %8 to i64, !dbg !50
  %171 = getelementptr float, ptr addrspace(1) %1, i64 %170, !dbg !50
  %urem = and i32 %9, 63, !dbg !51
  %172 = icmp eq i32 %urem, 0, !dbg !51
  %173 = bitcast float %.0.i to i32, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %173, ptr addrspace(1) %171, i1 %172) #5, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %174 = getelementptr float, ptr addrspace(1) %2, i64 %170, !dbg !53
  %175 = bitcast float %165 to i32, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %175, ptr addrspace(1) %174, i1 %172) #5, !dbg !54
  %176 = getelementptr float, ptr addrspace(1) %4, i64 %170, !dbg !55
  %177 = bitcast float %81 to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %177, ptr addrspace(1) %176, i1 %172) #5, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caqifztuxczcltjmehrevkivkw4dgqhx76vvfivziwn67rxbo6qj.py", directory: "inductor_cache/aq")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_mean_15, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_mean_15, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_convolution_mean_15", linkageName: "triton_per_fused__native_batch_norm_legit_convolution_mean_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 19, scope: !7)
!13 = !DILocation(line: 33, column: 43, scope: !7)
!14 = !DILocation(line: 33, column: 39, scope: !7)
!15 = !DILocation(line: 33, column: 34, scope: !7)
!16 = !DILocation(line: 33, column: 48, scope: !7)
!17 = !DILocation(line: 34, column: 30, scope: !7)
!18 = !DILocation(line: 34, column: 35, scope: !7)
!19 = !DILocation(line: 35, column: 18, scope: !7)
!20 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 38, column: 57, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !24)
!26 = !DILocation(line: 73, column: 15, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 38, column: 44, scope: !7)
!30 = !DILocation(line: 41, column: 19, scope: !7)
!31 = !DILocation(line: 42, column: 19, scope: !7)
!32 = !DILocation(line: 43, column: 20, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !34)
!34 = !DILocation(line: 45, column: 59, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 73, column: 15, scope: !27, inlinedAt: !37)
!37 = !DILocation(line: 45, column: 45, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 49, column: 20, scope: !7)
!40 = !DILocation(line: 50, column: 28, scope: !7)
!41 = !DILocation(line: 52, column: 20, scope: !7)
!42 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !43)
!43 = !DILocation(line: 54, column: 59, scope: !7)
!44 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !43)
!45 = !DILocation(line: 73, column: 15, scope: !27, inlinedAt: !46)
!46 = !DILocation(line: 54, column: 45, scope: !7)
!47 = !DILocation(line: 55, column: 20, scope: !7)
!48 = !DILocation(line: 56, column: 48, scope: !7)
!49 = !DILocation(line: 57, column: 4, scope: !7)
!50 = !DILocation(line: 58, column: 28, scope: !7)
!51 = !DILocation(line: 58, column: 40, scope: !7)
!52 = !DILocation(line: 59, column: 4, scope: !7)
!53 = !DILocation(line: 60, column: 28, scope: !7)
!54 = !DILocation(line: 60, column: 40, scope: !7)
!55 = !DILocation(line: 61, column: 25, scope: !7)
!56 = !DILocation(line: 61, column: 37, scope: !7)
!57 = !DILocation(line: 61, column: 4, scope: !7)
