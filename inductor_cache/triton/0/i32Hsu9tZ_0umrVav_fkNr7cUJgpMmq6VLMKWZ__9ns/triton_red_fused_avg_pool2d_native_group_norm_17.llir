; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_avg_pool2d_native_group_norm_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 3, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = and i32 %10, 7, !dbg !12
  %13 = lshr i32 %10, 5, !dbg !12
  %.lobit2 = lshr i32 %10, 7, !dbg !12
  %14 = and i32 %.lobit2, 3, !dbg !12
  %15 = or disjoint i32 %9, %12, !dbg !13
  %16 = or disjoint i32 %9, %14, !dbg !13
  %17 = or disjoint i32 %16, 4, !dbg !13
  %18 = icmp slt i32 %15, 128, !dbg !14
  %19 = icmp slt i32 %16, 128, !dbg !14
  %20 = icmp slt i32 %17, 128, !dbg !14
  %21 = lshr i32 %10, 3, !dbg !15
  %22 = shl i32 %10, 2, !dbg !15
  %23 = and i32 %22, 508, !dbg !15
  %24 = shl nuw nsw i32 %21, 1, !dbg !16
  %25 = and i32 %24, 14, !dbg !16
  %26 = shl nuw nsw i32 %21, 2, !dbg !17
  %27 = and i32 %26, 224, !dbg !17
  %28 = or disjoint i32 %25, %27, !dbg !18
  %29 = or disjoint i32 %28, 256, !dbg !18
  %30 = or disjoint i32 %28, 512, !dbg !18
  %31 = or disjoint i32 %28, 768, !dbg !18
  %32 = or disjoint i32 %28, 1024, !dbg !18
  %33 = or disjoint i32 %28, 1280, !dbg !18
  %34 = or disjoint i32 %28, 1536, !dbg !18
  %35 = or disjoint i32 %28, 1792, !dbg !18
  %36 = shl i32 %15, 11, !dbg !19
  %37 = or disjoint i32 %36, %28, !dbg !20
  %38 = or disjoint i32 %36, %29, !dbg !20
  %39 = or disjoint i32 %36, %30, !dbg !20
  %40 = or disjoint i32 %36, %31, !dbg !20
  %41 = or disjoint i32 %36, %32, !dbg !20
  %42 = or disjoint i32 %36, %33, !dbg !20
  %43 = or disjoint i32 %36, %34, !dbg !20
  %44 = or disjoint i32 %36, %35, !dbg !20
  %45 = sext i32 %37 to i64, !dbg !21
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !21
  %47 = sext i32 %38 to i64, !dbg !21
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !21
  %49 = sext i32 %39 to i64, !dbg !21
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !21
  %51 = sext i32 %40 to i64, !dbg !21
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !21
  %53 = sext i32 %41 to i64, !dbg !21
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !21
  %55 = sext i32 %42 to i64, !dbg !21
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !21
  %57 = sext i32 %43 to i64, !dbg !21
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !21
  %59 = sext i32 %44 to i64, !dbg !21
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !21
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %18, i32 0, i1 %18) #5, !dbg !22
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %18, i32 0, i1 %18) #5, !dbg !22
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %18, i32 0, i1 %18) #5, !dbg !22
  %64 = bitcast i32 %63 to float, !dbg !22
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %18, i32 0, i1 %18) #5, !dbg !22
  %66 = bitcast i32 %65 to float, !dbg !22
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %18, i32 0, i1 %18) #5, !dbg !22
  %68 = bitcast i32 %67 to float, !dbg !22
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %18, i32 0, i1 %18) #5, !dbg !22
  %70 = bitcast i32 %69 to float, !dbg !22
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %18, i32 0, i1 %18) #5, !dbg !22
  %72 = bitcast i32 %71 to float, !dbg !22
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %18, i32 0, i1 %18) #5, !dbg !22
  %74 = bitcast i32 %73 to float, !dbg !22
  %75 = or disjoint i32 %37, 1, !dbg !23
  %76 = or disjoint i32 %38, 1, !dbg !23
  %77 = or disjoint i32 %39, 1, !dbg !23
  %78 = or disjoint i32 %40, 1, !dbg !23
  %79 = or disjoint i32 %41, 1, !dbg !23
  %80 = or disjoint i32 %42, 1, !dbg !23
  %81 = or disjoint i32 %43, 1, !dbg !23
  %82 = or disjoint i32 %44, 1, !dbg !23
  %83 = sext i32 %75 to i64, !dbg !24
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !24
  %85 = sext i32 %76 to i64, !dbg !24
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !24
  %87 = sext i32 %77 to i64, !dbg !24
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !24
  %89 = sext i32 %78 to i64, !dbg !24
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !24
  %91 = sext i32 %79 to i64, !dbg !24
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !24
  %93 = sext i32 %80 to i64, !dbg !24
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !24
  %95 = sext i32 %81 to i64, !dbg !24
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !24
  %97 = sext i32 %82 to i64, !dbg !24
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !24
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %18, i32 0, i1 %18) #5, !dbg !25
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %18, i32 0, i1 %18) #5, !dbg !25
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %18, i32 0, i1 %18) #5, !dbg !25
  %102 = bitcast i32 %101 to float, !dbg !25
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %18, i32 0, i1 %18) #5, !dbg !25
  %104 = bitcast i32 %103 to float, !dbg !25
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %18, i32 0, i1 %18) #5, !dbg !25
  %106 = bitcast i32 %105 to float, !dbg !25
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %18, i32 0, i1 %18) #5, !dbg !25
  %108 = bitcast i32 %107 to float, !dbg !25
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %18, i32 0, i1 %18) #5, !dbg !25
  %110 = bitcast i32 %109 to float, !dbg !25
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %18, i32 0, i1 %18) #5, !dbg !25
  %112 = bitcast i32 %111 to float, !dbg !25
  %113 = or disjoint i32 %37, 16, !dbg !26
  %114 = or disjoint i32 %38, 16, !dbg !26
  %115 = or disjoint i32 %39, 16, !dbg !26
  %116 = or disjoint i32 %40, 16, !dbg !26
  %117 = or disjoint i32 %41, 16, !dbg !26
  %118 = or disjoint i32 %42, 16, !dbg !26
  %119 = or disjoint i32 %43, 16, !dbg !26
  %120 = or disjoint i32 %44, 16, !dbg !26
  %121 = sext i32 %113 to i64, !dbg !27
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !27
  %123 = sext i32 %114 to i64, !dbg !27
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !27
  %125 = sext i32 %115 to i64, !dbg !27
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !27
  %127 = sext i32 %116 to i64, !dbg !27
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !27
  %129 = sext i32 %117 to i64, !dbg !27
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !27
  %131 = sext i32 %118 to i64, !dbg !27
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !27
  %133 = sext i32 %119 to i64, !dbg !27
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !27
  %135 = sext i32 %120 to i64, !dbg !27
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !27
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %18, i32 0, i1 %18) #5, !dbg !28
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %18, i32 0, i1 %18) #5, !dbg !28
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %18, i32 0, i1 %18) #5, !dbg !28
  %140 = bitcast i32 %139 to float, !dbg !28
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %18, i32 0, i1 %18) #5, !dbg !28
  %142 = bitcast i32 %141 to float, !dbg !28
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %18, i32 0, i1 %18) #5, !dbg !28
  %144 = bitcast i32 %143 to float, !dbg !28
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %18, i32 0, i1 %18) #5, !dbg !28
  %146 = bitcast i32 %145 to float, !dbg !28
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %18, i32 0, i1 %18) #5, !dbg !28
  %148 = bitcast i32 %147 to float, !dbg !28
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %18, i32 0, i1 %18) #5, !dbg !28
  %150 = bitcast i32 %149 to float, !dbg !28
  %151 = or disjoint i32 %37, 17, !dbg !29
  %152 = or disjoint i32 %38, 17, !dbg !29
  %153 = or disjoint i32 %39, 17, !dbg !29
  %154 = or disjoint i32 %40, 17, !dbg !29
  %155 = or disjoint i32 %41, 17, !dbg !29
  %156 = or disjoint i32 %42, 17, !dbg !29
  %157 = or disjoint i32 %43, 17, !dbg !29
  %158 = or disjoint i32 %44, 17, !dbg !29
  %159 = sext i32 %151 to i64, !dbg !30
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !30
  %161 = sext i32 %152 to i64, !dbg !30
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !30
  %163 = sext i32 %153 to i64, !dbg !30
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !30
  %165 = sext i32 %154 to i64, !dbg !30
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !30
  %167 = sext i32 %155 to i64, !dbg !30
  %168 = getelementptr float, ptr addrspace(1) %0, i64 %167, !dbg !30
  %169 = sext i32 %156 to i64, !dbg !30
  %170 = getelementptr float, ptr addrspace(1) %0, i64 %169, !dbg !30
  %171 = sext i32 %157 to i64, !dbg !30
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !30
  %173 = sext i32 %158 to i64, !dbg !30
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !30
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %18, i32 0, i1 %18) #5, !dbg !31
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %162, i1 %18, i32 0, i1 %18) #5, !dbg !31
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %164, i1 %18, i32 0, i1 %18) #5, !dbg !31
  %178 = bitcast i32 %177 to float, !dbg !31
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %166, i1 %18, i32 0, i1 %18) #5, !dbg !31
  %180 = bitcast i32 %179 to float, !dbg !31
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %168, i1 %18, i32 0, i1 %18) #5, !dbg !31
  %182 = bitcast i32 %181 to float, !dbg !31
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %170, i1 %18, i32 0, i1 %18) #5, !dbg !31
  %184 = bitcast i32 %183 to float, !dbg !31
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %172, i1 %18, i32 0, i1 %18) #5, !dbg !31
  %186 = bitcast i32 %185 to float, !dbg !31
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %174, i1 %18, i32 0, i1 %18) #5, !dbg !31
  %188 = bitcast i32 %187 to float, !dbg !31
  %189 = fadd float %64, %102, !dbg !32
  %190 = fadd float %66, %104, !dbg !32
  %191 = fadd float %68, %106, !dbg !32
  %192 = fadd float %70, %108, !dbg !32
  %193 = fadd float %72, %110, !dbg !32
  %194 = fadd float %74, %112, !dbg !32
  %195 = fadd float %189, %140, !dbg !33
  %196 = fadd float %190, %142, !dbg !33
  %197 = fadd float %191, %144, !dbg !33
  %198 = fadd float %192, %146, !dbg !33
  %199 = fadd float %193, %148, !dbg !33
  %200 = fadd float %194, %150, !dbg !33
  %201 = fadd float %195, %178, !dbg !34
  %202 = fadd float %196, %180, !dbg !34
  %203 = fadd float %197, %182, !dbg !34
  %204 = fadd float %198, %184, !dbg !34
  %205 = fadd float %199, %186, !dbg !34
  %206 = fadd float %200, %188, !dbg !34
  %207 = fmul float %201, 2.500000e-01, !dbg !35
  %208 = fmul float %202, 2.500000e-01, !dbg !35
  %209 = fmul float %203, 2.500000e-01, !dbg !35
  %210 = fmul float %204, 2.500000e-01, !dbg !35
  %211 = fmul float %205, 2.500000e-01, !dbg !35
  %212 = fmul float %206, 2.500000e-01, !dbg !35
  %213 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !22
  %214 = insertelement <2 x i32> %213, i32 %61, i64 1, !dbg !22
  %215 = bitcast <2 x i32> %214 to <2 x float>, !dbg !22
  %216 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !25
  %217 = insertelement <2 x i32> %216, i32 %99, i64 1, !dbg !25
  %218 = bitcast <2 x i32> %217 to <2 x float>, !dbg !25
  %219 = insertelement <2 x i32> poison, i32 %138, i64 0, !dbg !28
  %220 = insertelement <2 x i32> %219, i32 %137, i64 1, !dbg !28
  %221 = bitcast <2 x i32> %220 to <2 x float>, !dbg !28
  %222 = insertelement <2 x i32> poison, i32 %176, i64 0, !dbg !31
  %223 = insertelement <2 x i32> %222, i32 %175, i64 1, !dbg !31
  %224 = bitcast <2 x i32> %223 to <2 x float>, !dbg !31
  %225 = fadd <2 x float> %215, %218, !dbg !32
  %226 = fadd <2 x float> %225, %221, !dbg !33
  %227 = fadd <2 x float> %226, %224, !dbg !34
  %228 = fmul <2 x float> %227, splat (float 2.500000e-01), !dbg !35
  %229 = insertelement <2 x i1> poison, i1 %18, i64 0, !dbg !36
  %230 = shufflevector <2 x i1> %229, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !36
  %231 = select <2 x i1> %230, <2 x float> %228, <2 x float> zeroinitializer, !dbg !36
  %232 = select i1 %18, float %207, float 0.000000e+00, !dbg !36
  %233 = select i1 %18, float %208, float 0.000000e+00, !dbg !36
  %234 = select i1 %18, float %209, float 0.000000e+00, !dbg !36
  %235 = select i1 %18, float %210, float 0.000000e+00, !dbg !36
  %236 = select i1 %18, float %211, float 0.000000e+00, !dbg !36
  %237 = select i1 %18, float %212, float 0.000000e+00, !dbg !36
  %238 = select i1 %18, float 1.000000e+00, float 0.000000e+00, !dbg !37
  %239 = shl i32 %16, 9, !dbg !38
  %240 = shl i32 %17, 9, !dbg !38
  %241 = or disjoint i32 %239, %23, !dbg !39
  %242 = or disjoint i32 %240, %23, !dbg !39
  %243 = sext i32 %241 to i64, !dbg !40
  %244 = getelementptr float, ptr addrspace(1) %1, i64 %243, !dbg !40
  %245 = sext i32 %242 to i64, !dbg !40
  %246 = getelementptr float, ptr addrspace(1) %1, i64 %245, !dbg !40
  %247 = shl i32 %10, 9, !dbg !41
  %248 = and i32 %247, 3584, !dbg !41
  %249 = and i32 %21, 63, !dbg !41
  %250 = or disjoint i32 %248, %249, !dbg !41
  %251 = and i32 %22, 2044, !dbg !41
  %252 = lshr exact i32 %248, 5, !dbg !41
  %253 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %252, !dbg !41
  %254 = getelementptr float, ptr addrspace(3) %253, i32 %250, !dbg !41
  %255 = extractelement <2 x float> %228, i64 1, !dbg !41
  %256 = bitcast float %255 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %256, i1 true) #5, !dbg !41
  %257 = or disjoint i32 %250, 64, !dbg !41
  %258 = getelementptr float, ptr addrspace(3) %253, i32 %257, !dbg !41
  %259 = extractelement <2 x float> %228, i64 0, !dbg !41
  %260 = bitcast float %259 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %260, i1 true) #5, !dbg !41
  %261 = or disjoint i32 %250, 128, !dbg !41
  %262 = getelementptr float, ptr addrspace(3) %253, i32 %261, !dbg !41
  %263 = bitcast float %207 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %263, i1 true) #5, !dbg !41
  %264 = or disjoint i32 %250, 192, !dbg !41
  %265 = getelementptr float, ptr addrspace(3) %253, i32 %264, !dbg !41
  %266 = bitcast float %208 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %266, i1 true) #5, !dbg !41
  %267 = or disjoint i32 %250, 256, !dbg !41
  %268 = getelementptr float, ptr addrspace(3) %253, i32 %267, !dbg !41
  %269 = bitcast float %209 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #5, !dbg !41
  %270 = or disjoint i32 %250, 320, !dbg !41
  %271 = getelementptr float, ptr addrspace(3) %253, i32 %270, !dbg !41
  %272 = bitcast float %210 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #5, !dbg !41
  %273 = or disjoint i32 %250, 384, !dbg !41
  %274 = getelementptr float, ptr addrspace(3) %253, i32 %273, !dbg !41
  %275 = bitcast float %211 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 true) #5, !dbg !41
  %276 = or disjoint i32 %250, 448, !dbg !41
  %277 = getelementptr float, ptr addrspace(3) %253, i32 %276, !dbg !41
  %278 = bitcast float %212 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %277, <1 x i32> %278, i1 true) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %279 = lshr i32 %22, 7, !dbg !41
  %280 = and i32 %279, 12, !dbg !41
  %281 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %280, !dbg !41
  %282 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %251, !dbg !41
  %283 = or disjoint i32 %251, 2048, !dbg !41
  %284 = lshr i32 %283, 7, !dbg !41
  %285 = and i32 %284, 28, !dbg !41
  %286 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %285, !dbg !41
  %287 = getelementptr inbounds float, ptr addrspace(3) %286, i32 %283, !dbg !41
  %288 = load <4 x i32>, ptr addrspace(3) %287, align 16, !dbg !41
  %.extract = load i32, ptr addrspace(3) %282, align 16, !dbg !41
  %289 = getelementptr inbounds i8, ptr addrspace(3) %282, i32 4, !dbg !41
  %.extract11 = load i32, ptr addrspace(3) %289, align 4, !dbg !41
  %290 = getelementptr inbounds i8, ptr addrspace(3) %282, i32 8, !dbg !41
  %.extract12 = load i32, ptr addrspace(3) %290, align 8, !dbg !41
  %291 = getelementptr inbounds i8, ptr addrspace(3) %282, i32 12, !dbg !41
  %.extract13 = load i32, ptr addrspace(3) %291, align 4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %244, i1 %19) #5, !dbg !41
  %.extract14 = extractelement <4 x i32> %288, i64 0, !dbg !41
  %.extract15 = extractelement <4 x i32> %288, i64 1, !dbg !41
  %.extract16 = extractelement <4 x i32> %288, i64 2, !dbg !41
  %.extract17 = extractelement <4 x i32> %288, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract14, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %246, i1 %20) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %292 = extractelement <2 x float> %231, i64 0, !dbg !46
  %293 = extractelement <2 x float> %231, i64 1, !dbg !48
  %294 = fsub float %292, %293, !dbg !46
  %295 = select i1 %18, float 2.000000e+00, float 0.000000e+00, !dbg !49
  %296 = fcmp oeq float %295, 0.000000e+00, !dbg !50
  %297 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float %295) #5, !dbg !51
  %298 = select i1 %296, float 0.000000e+00, float %297, !dbg !52
  %299 = fmul float %294, %298, !dbg !53
  %300 = fadd float %293, %299, !dbg !48
  %301 = fmul float %294, %294, !dbg !54
  %302 = fmul float %238, %301, !dbg !55
  %303 = fmul float %302, %298, !dbg !56
  %304 = fadd float %303, 0.000000e+00, !dbg !57
  %305 = fsub float %232, %300, !dbg !46
  %306 = select i1 %18, float 3.000000e+00, float 0.000000e+00, !dbg !49
  %307 = fcmp oeq float %306, 0.000000e+00, !dbg !50
  %308 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float %306) #5, !dbg !51
  %309 = select i1 %307, float 0.000000e+00, float %308, !dbg !52
  %310 = fmul float %309, %305, !dbg !53
  %311 = fadd float %300, %310, !dbg !48
  %312 = fmul float %305, %305, !dbg !54
  %313 = fmul float %295, %312, !dbg !55
  %314 = fmul float %309, %313, !dbg !56
  %315 = fadd float %304, %314, !dbg !57
  %316 = fsub float %233, %311, !dbg !46
  %317 = select i1 %18, float 4.000000e+00, float 0.000000e+00, !dbg !49
  %318 = fcmp oeq float %317, 0.000000e+00, !dbg !50
  %319 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float %317) #5, !dbg !51
  %320 = select i1 %318, float 0.000000e+00, float %319, !dbg !52
  %321 = fmul float %320, %316, !dbg !53
  %322 = fadd float %311, %321, !dbg !48
  %323 = fmul float %316, %316, !dbg !54
  %324 = fmul float %306, %323, !dbg !55
  %325 = fmul float %320, %324, !dbg !56
  %326 = fadd float %315, %325, !dbg !57
  %327 = fsub float %234, %322, !dbg !46
  %328 = select i1 %18, float 5.000000e+00, float 0.000000e+00, !dbg !49
  %329 = fcmp oeq float %328, 0.000000e+00, !dbg !50
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float %328) #5, !dbg !51
  %331 = select i1 %329, float 0.000000e+00, float %330, !dbg !52
  %332 = fmul float %331, %327, !dbg !53
  %333 = fadd float %322, %332, !dbg !48
  %334 = fmul float %327, %327, !dbg !54
  %335 = fmul float %317, %334, !dbg !55
  %336 = fmul float %331, %335, !dbg !56
  %337 = fadd float %326, %336, !dbg !57
  %338 = fsub float %235, %333, !dbg !46
  %339 = select i1 %18, float 6.000000e+00, float 0.000000e+00, !dbg !49
  %340 = fcmp oeq float %339, 0.000000e+00, !dbg !50
  %341 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float %339) #5, !dbg !51
  %342 = select i1 %340, float 0.000000e+00, float %341, !dbg !52
  %343 = fmul float %342, %338, !dbg !53
  %344 = fadd float %333, %343, !dbg !48
  %345 = fmul float %338, %338, !dbg !54
  %346 = fmul float %328, %345, !dbg !55
  %347 = fmul float %342, %346, !dbg !56
  %348 = fadd float %337, %347, !dbg !57
  %349 = fsub float %236, %344, !dbg !46
  %350 = select i1 %18, float 7.000000e+00, float 0.000000e+00, !dbg !49
  %351 = fcmp oeq float %350, 0.000000e+00, !dbg !50
  %352 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float %350) #5, !dbg !51
  %353 = select i1 %351, float 0.000000e+00, float %352, !dbg !52
  %354 = fmul float %353, %349, !dbg !53
  %355 = fadd float %344, %354, !dbg !48
  %356 = fmul float %349, %349, !dbg !54
  %357 = fmul float %339, %356, !dbg !55
  %358 = fmul float %353, %357, !dbg !56
  %359 = fadd float %348, %358, !dbg !57
  %360 = fsub float %237, %355, !dbg !46
  %361 = select i1 %18, float 8.000000e+00, float 0.000000e+00, !dbg !49
  %362 = fcmp oeq float %361, 0.000000e+00, !dbg !50
  %363 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float %361) #5, !dbg !51
  %364 = select i1 %362, float 0.000000e+00, float %363, !dbg !52
  %365 = fmul float %364, %360, !dbg !53
  %366 = fadd float %355, %365, !dbg !48
  %367 = fmul float %360, %360, !dbg !54
  %368 = fmul float %350, %367, !dbg !55
  %369 = fmul float %364, %368, !dbg !56
  %370 = fadd float %359, %369, !dbg !57
  %371 = bitcast float %366 to i32, !dbg !42
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 16, i32 31), !dbg !42
  %373 = bitcast i32 %372 to float, !dbg !42
  %374 = bitcast float %370 to i32, !dbg !42
  %375 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %374, i32 16, i32 31), !dbg !42
  %376 = bitcast i32 %375 to float, !dbg !42
  %377 = bitcast float %361 to i32, !dbg !42
  %378 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %377, i32 16, i32 31), !dbg !42
  %379 = bitcast i32 %378 to float, !dbg !42
  %380 = fsub float %373, %366, !dbg !46
  %381 = fadd float %361, %379, !dbg !49
  %382 = fcmp oeq float %381, 0.000000e+00, !dbg !50
  %383 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %379, float %381) #5, !dbg !51
  %384 = select i1 %382, float 0.000000e+00, float %383, !dbg !52
  %385 = fmul float %384, %380, !dbg !53
  %386 = fadd float %366, %385, !dbg !48
  %387 = fadd float %370, %376, !dbg !58
  %388 = fmul float %380, %380, !dbg !54
  %389 = fmul float %361, %388, !dbg !55
  %390 = fmul float %384, %389, !dbg !56
  %391 = fadd float %387, %390, !dbg !57
  %392 = bitcast float %386 to i32, !dbg !42
  %393 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %392, i32 8, i32 31), !dbg !42
  %394 = bitcast i32 %393 to float, !dbg !42
  %395 = bitcast float %391 to i32, !dbg !42
  %396 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %395, i32 8, i32 31), !dbg !42
  %397 = bitcast i32 %396 to float, !dbg !42
  %398 = bitcast float %381 to i32, !dbg !42
  %399 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %398, i32 8, i32 31), !dbg !42
  %400 = bitcast i32 %399 to float, !dbg !42
  %401 = fsub float %394, %386, !dbg !46
  %402 = fadd float %381, %400, !dbg !49
  %403 = fcmp oeq float %402, 0.000000e+00, !dbg !50
  %404 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %400, float %402) #5, !dbg !51
  %405 = select i1 %403, float 0.000000e+00, float %404, !dbg !52
  %406 = fmul float %405, %401, !dbg !53
  %407 = fadd float %386, %406, !dbg !48
  %408 = fadd float %391, %397, !dbg !58
  %409 = fmul float %401, %401, !dbg !54
  %410 = fmul float %381, %409, !dbg !55
  %411 = fmul float %405, %410, !dbg !56
  %412 = fadd float %408, %411, !dbg !57
  %413 = lshr i32 %11, 3, !dbg !42
  %414 = icmp samesign ult i32 %11, 8, !dbg !42
  %415 = and i32 %13, 15, !dbg !42
  %416 = shl nuw nsw i32 %12, 4, !dbg !42
  %417 = or disjoint i32 %416, %415, !dbg !42
  %418 = getelementptr float, ptr addrspace(3) @global_smem, i32 %417, !dbg !42
  %419 = bitcast float %407 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %418, <1 x i32> %419, i1 %414) #5, !dbg !42
  %420 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %417, !dbg !42
  %421 = bitcast float %412 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %420, <1 x i32> %421, i1 %414) #5, !dbg !42
  %422 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %417, !dbg !42
  %423 = bitcast float %402 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %422, <1 x i32> %423, i1 %414) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %424 = icmp slt i32 %10, 128, !dbg !42
  %425 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !42
  %426 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %425, i1 %424) #5, !dbg !42
  %427 = bitcast i32 %426 to float, !dbg !42
  %428 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %10, !dbg !42
  %429 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %428, i1 %424) #5, !dbg !42
  %430 = bitcast i32 %429 to float, !dbg !42
  %431 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %10, !dbg !42
  %432 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %431, i1 %424) #5, !dbg !42
  %433 = bitcast i32 %432 to float, !dbg !42
  %434 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %426, i32 8, i32 31), !dbg !42
  %435 = bitcast i32 %434 to float, !dbg !42
  %436 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %429, i32 8, i32 31), !dbg !42
  %437 = bitcast i32 %436 to float, !dbg !42
  %438 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %432, i32 8, i32 31), !dbg !42
  %439 = bitcast i32 %438 to float, !dbg !42
  %440 = fsub float %435, %427, !dbg !46
  %441 = fadd float %433, %439, !dbg !49
  %442 = fcmp oeq float %441, 0.000000e+00, !dbg !50
  %443 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %439, float %441) #5, !dbg !51
  %444 = select i1 %442, float 0.000000e+00, float %443, !dbg !52
  %445 = fmul float %440, %444, !dbg !53
  %446 = fadd float %445, %427, !dbg !48
  %447 = fadd float %430, %437, !dbg !58
  %448 = fmul float %440, %440, !dbg !54
  %449 = fmul float %448, %433, !dbg !55
  %450 = fmul float %449, %444, !dbg !56
  %451 = fadd float %447, %450, !dbg !57
  %452 = bitcast float %446 to i32, !dbg !42
  %453 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %452, i32 4, i32 31), !dbg !42
  %454 = bitcast i32 %453 to float, !dbg !42
  %455 = bitcast float %451 to i32, !dbg !42
  %456 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %455, i32 4, i32 31), !dbg !42
  %457 = bitcast i32 %456 to float, !dbg !42
  %458 = bitcast float %441 to i32, !dbg !42
  %459 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %458, i32 4, i32 31), !dbg !42
  %460 = bitcast i32 %459 to float, !dbg !42
  %461 = fsub float %454, %446, !dbg !46
  %462 = fadd float %441, %460, !dbg !49
  %463 = fcmp oeq float %462, 0.000000e+00, !dbg !50
  %464 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %460, float %462) #5, !dbg !51
  %465 = select i1 %463, float 0.000000e+00, float %464, !dbg !52
  %466 = fmul float %461, %465, !dbg !53
  %467 = fadd float %446, %466, !dbg !48
  %468 = fadd float %451, %457, !dbg !58
  %469 = fmul float %461, %461, !dbg !54
  %470 = fmul float %441, %469, !dbg !55
  %471 = fmul float %465, %470, !dbg !56
  %472 = fadd float %468, %471, !dbg !57
  %473 = bitcast float %467 to i32, !dbg !42
  %474 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %473, i32 2, i32 31), !dbg !42
  %475 = bitcast i32 %474 to float, !dbg !42
  %476 = bitcast float %472 to i32, !dbg !42
  %477 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %476, i32 2, i32 31), !dbg !42
  %478 = bitcast i32 %477 to float, !dbg !42
  %479 = bitcast float %462 to i32, !dbg !42
  %480 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %479, i32 2, i32 31), !dbg !42
  %481 = bitcast i32 %480 to float, !dbg !42
  %482 = fsub float %475, %467, !dbg !46
  %483 = fadd float %462, %481, !dbg !49
  %484 = fcmp oeq float %483, 0.000000e+00, !dbg !50
  %485 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %481, float %483) #5, !dbg !51
  %486 = select i1 %484, float 0.000000e+00, float %485, !dbg !52
  %487 = fmul float %482, %486, !dbg !53
  %488 = fadd float %467, %487, !dbg !48
  %489 = fadd float %472, %478, !dbg !58
  %490 = fmul float %482, %482, !dbg !54
  %491 = fmul float %462, %490, !dbg !55
  %492 = fmul float %486, %491, !dbg !56
  %493 = fadd float %489, %492, !dbg !57
  %494 = bitcast float %488 to i32, !dbg !42
  %495 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %494, i32 1, i32 31), !dbg !42
  %496 = bitcast i32 %495 to float, !dbg !42
  %497 = bitcast float %493 to i32, !dbg !42
  %498 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %497, i32 1, i32 31), !dbg !42
  %499 = bitcast i32 %498 to float, !dbg !42
  %500 = bitcast float %483 to i32, !dbg !42
  %501 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %500, i32 1, i32 31), !dbg !42
  %502 = bitcast i32 %501 to float, !dbg !42
  %503 = fsub float %496, %488, !dbg !46
  %504 = fadd float %483, %502, !dbg !49
  %505 = fcmp oeq float %504, 0.000000e+00, !dbg !50
  %506 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %502, float %504) #5, !dbg !51
  %507 = select i1 %505, float 0.000000e+00, float %506, !dbg !52
  %508 = fmul float %503, %507, !dbg !53
  %509 = fadd float %488, %508, !dbg !48
  %510 = fadd float %493, %499, !dbg !58
  %511 = fmul float %503, %503, !dbg !54
  %512 = fmul float %483, %511, !dbg !55
  %513 = fmul float %507, %512, !dbg !56
  %514 = fadd float %510, %513, !dbg !57
  %515 = and i32 %10, 15, !dbg !42
  %516 = icmp eq i32 %515, 0, !dbg !42
  %517 = and i1 %424, %516, !dbg !42
  %518 = bitcast float %509 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %425, <1 x i32> %518, i1 %517) #5, !dbg !42
  %519 = bitcast float %514 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %428, <1 x i32> %519, i1 %517) #5, !dbg !42
  %520 = bitcast float %504 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %431, <1 x i32> %520, i1 %517) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %521 = getelementptr float, ptr addrspace(3) @global_smem, i32 %416, !dbg !42
  %522 = load i32, ptr addrspace(3) %521, align 16, !dbg !42
  %523 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %416, !dbg !42
  %524 = load float, ptr addrspace(3) %523, align 16, !dbg !42
  %525 = sext i32 %15 to i64, !dbg !59
  %526 = getelementptr float, ptr addrspace(1) %2, i64 %525, !dbg !59
  %527 = shl nuw nsw i32 %415, 2, !dbg !60
  %528 = or disjoint i32 %527, %413, !dbg !60
  %529 = icmp eq i32 %528, 0, !dbg !60
  %530 = and i1 %529, %18, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %522, ptr addrspace(1) %526, i1 %530) #5, !dbg !60
  %531 = getelementptr float, ptr addrspace(1) %3, i64 %525, !dbg !61
  %532 = bitcast float %524 to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %532, ptr addrspace(1) %531, i1 %530) #5, !dbg !62
  %533 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %524, float 5.120000e+02) #5, !dbg !63
  %534 = fadd float %533, 0x3EE4F8B580000000, !dbg !64
  %535 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !65
  %.not.i = icmp eq i32 %535, 0, !dbg !65
  br i1 %.not.i, label %538, label %536, !dbg !65

536:                                              ; preds = %7
  %537 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %534), !dbg !65
  br label %__nv_rsqrtf.exit, !dbg !65

538:                                              ; preds = %7
  %539 = tail call float @llvm.nvvm.rsqrt.approx.f(float %534), !dbg !65
  br label %__nv_rsqrtf.exit, !dbg !65

__nv_rsqrtf.exit:                                 ; preds = %536, %538
  %.0.i = phi float [ %537, %536 ], [ %539, %538 ], !dbg !65
  %540 = getelementptr float, ptr addrspace(1) %4, i64 %525, !dbg !66
  %541 = bitcast float %.0.i to i32, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %541, ptr addrspace(1) %540, i1 %530) #5, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py", directory: "inductor_cache/m3")
!4 = !{ptr @triton_red_fused_avg_pool2d_native_group_norm_17, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_avg_pool2d_native_group_norm_17, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_avg_pool2d_native_group_norm_17", linkageName: "triton_red_fused_avg_pool2d_native_group_norm_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 36, column: 36, scope: !7)
!17 = !DILocation(line: 36, column: 44, scope: !7)
!18 = !DILocation(line: 36, column: 41, scope: !7)
!19 = !DILocation(line: 36, column: 54, scope: !7)
!20 = !DILocation(line: 36, column: 49, scope: !7)
!21 = !DILocation(line: 36, column: 34, scope: !7)
!22 = !DILocation(line: 36, column: 59, scope: !7)
!23 = !DILocation(line: 37, column: 53, scope: !7)
!24 = !DILocation(line: 37, column: 34, scope: !7)
!25 = !DILocation(line: 37, column: 63, scope: !7)
!26 = !DILocation(line: 38, column: 54, scope: !7)
!27 = !DILocation(line: 38, column: 34, scope: !7)
!28 = !DILocation(line: 38, column: 64, scope: !7)
!29 = !DILocation(line: 39, column: 54, scope: !7)
!30 = !DILocation(line: 39, column: 34, scope: !7)
!31 = !DILocation(line: 39, column: 64, scope: !7)
!32 = !DILocation(line: 40, column: 22, scope: !7)
!33 = !DILocation(line: 41, column: 22, scope: !7)
!34 = !DILocation(line: 42, column: 22, scope: !7)
!35 = !DILocation(line: 44, column: 22, scope: !7)
!36 = !DILocation(line: 49, column: 62, scope: !7)
!37 = !DILocation(line: 51, column: 66, scope: !7)
!38 = !DILocation(line: 52, column: 38, scope: !7)
!39 = !DILocation(line: 52, column: 34, scope: !7)
!40 = !DILocation(line: 52, column: 29, scope: !7)
!41 = !DILocation(line: 52, column: 49, scope: !7)
!42 = !DILocation(line: 204, column: 46, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 54, column: 44, scope: !7)
!46 = !DILocation(line: 192, column: 21, scope: !47, inlinedAt: !45)
!47 = distinct !DILexicalBlockFile(scope: !43, file: !44, discriminator: 0)
!48 = !DILocation(line: 196, column: 17, scope: !47, inlinedAt: !45)
!49 = !DILocation(line: 193, column: 28, scope: !47, inlinedAt: !45)
!50 = !DILocation(line: 194, column: 39, scope: !47, inlinedAt: !45)
!51 = !DILocation(line: 194, column: 60, scope: !47, inlinedAt: !45)
!52 = !DILocation(line: 194, column: 49, scope: !47, inlinedAt: !45)
!53 = !DILocation(line: 196, column: 25, scope: !47, inlinedAt: !45)
!54 = !DILocation(line: 197, column: 30, scope: !47, inlinedAt: !45)
!55 = !DILocation(line: 197, column: 38, scope: !47, inlinedAt: !45)
!56 = !DILocation(line: 197, column: 49, scope: !47, inlinedAt: !45)
!57 = !DILocation(line: 197, column: 22, scope: !47, inlinedAt: !45)
!58 = !DILocation(line: 197, column: 15, scope: !47, inlinedAt: !45)
!59 = !DILocation(line: 59, column: 25, scope: !7)
!60 = !DILocation(line: 59, column: 37, scope: !7)
!61 = !DILocation(line: 60, column: 25, scope: !7)
!62 = !DILocation(line: 60, column: 37, scope: !7)
!63 = !DILocation(line: 62, column: 20, scope: !7)
!64 = !DILocation(line: 64, column: 20, scope: !7)
!65 = !DILocation(line: 65, column: 28, scope: !7)
!66 = !DILocation(line: 66, column: 25, scope: !7)
!67 = !DILocation(line: 66, column: 37, scope: !7)
!68 = !DILocation(line: 66, column: 4, scope: !7)
