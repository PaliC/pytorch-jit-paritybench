; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 1, !dbg !13
  %14 = or disjoint i32 %12, 2, !dbg !13
  %15 = or disjoint i32 %12, 3, !dbg !13
  %16 = or disjoint i32 %12, 512, !dbg !13
  %17 = or disjoint i32 %12, 513, !dbg !13
  %18 = or disjoint i32 %12, 514, !dbg !13
  %19 = or disjoint i32 %12, 515, !dbg !13
  %20 = icmp slt i32 %12, 115200, !dbg !14
  %21 = icmp slt i32 %16, 115200, !dbg !14
  %22 = insertelement <8 x i32> poison, i32 %19, i64 0, !dbg !15
  %23 = insertelement <8 x i32> %22, i32 %18, i64 1, !dbg !15
  %24 = insertelement <8 x i32> %23, i32 %17, i64 2, !dbg !15
  %25 = insertelement <8 x i32> %24, i32 %16, i64 3, !dbg !15
  %26 = insertelement <8 x i32> %25, i32 %15, i64 4, !dbg !15
  %27 = insertelement <8 x i32> %26, i32 %14, i64 5, !dbg !15
  %28 = insertelement <8 x i32> %27, i32 %13, i64 6, !dbg !15
  %29 = insertelement <8 x i32> %28, i32 %12, i64 7, !dbg !15
  %30 = sdiv <8 x i32> %29, splat (i32 225), !dbg !15
  %31 = srem <8 x i32> %30, splat (i32 128), !dbg !16
  %32 = srem i32 %12, 225, !dbg !17
  %33 = srem i32 %13, 225, !dbg !17
  %34 = srem i32 %14, 225, !dbg !17
  %35 = srem i32 %15, 225, !dbg !17
  %36 = srem i32 %16, 225, !dbg !17
  %37 = srem i32 %17, 225, !dbg !17
  %38 = srem i32 %18, 225, !dbg !17
  %39 = srem i32 %19, 225, !dbg !17
  %40 = sdiv i32 %12, 28800, !dbg !18
  %41 = sdiv i32 %16, 28800, !dbg !18
  %42 = icmp slt <8 x i32> %31, splat (i32 64), !dbg !19
  %43 = shl nsw i32 %32, 6, !dbg !20
  %44 = shl nsw i32 %33, 6, !dbg !20
  %45 = shl nsw i32 %34, 6, !dbg !20
  %46 = shl nsw i32 %35, 6, !dbg !20
  %47 = shl nsw i32 %36, 6, !dbg !20
  %48 = shl nsw i32 %37, 6, !dbg !20
  %49 = shl nsw i32 %38, 6, !dbg !20
  %50 = shl nsw i32 %39, 6, !dbg !20
  %51 = mul nsw i32 %40, 14400, !dbg !21
  %52 = mul nsw i32 %41, 14400, !dbg !21
  %53 = add nsw i32 %43, %51, !dbg !22
  %54 = add nsw i32 %51, %44, !dbg !22
  %55 = add nsw i32 %51, %45, !dbg !22
  %56 = add nsw i32 %51, %46, !dbg !22
  %57 = add nsw i32 %47, %52, !dbg !22
  %58 = add nsw i32 %48, %52, !dbg !22
  %59 = add nsw i32 %49, %52, !dbg !22
  %60 = add nsw i32 %50, %52, !dbg !22
  %61 = extractelement <8 x i32> %31, i64 7, !dbg !23
  %62 = add nsw i32 %53, %61, !dbg !24
  %63 = extractelement <8 x i32> %31, i64 6, !dbg !23
  %64 = add nsw i32 %54, %63, !dbg !24
  %65 = extractelement <8 x i32> %31, i64 5, !dbg !23
  %66 = add nsw i32 %55, %65, !dbg !24
  %67 = extractelement <8 x i32> %31, i64 4, !dbg !23
  %68 = add nsw i32 %56, %67, !dbg !24
  %69 = extractelement <8 x i32> %31, i64 3, !dbg !23
  %70 = add nsw i32 %57, %69, !dbg !24
  %71 = extractelement <8 x i32> %31, i64 2, !dbg !23
  %72 = add nsw i32 %58, %71, !dbg !24
  %73 = extractelement <8 x i32> %31, i64 1, !dbg !23
  %74 = add nsw i32 %59, %73, !dbg !24
  %75 = extractelement <8 x i32> %31, i64 0, !dbg !23
  %76 = add nsw i32 %60, %75, !dbg !24
  %77 = sext i32 %62 to i64, !dbg !25
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !25
  %79 = sext i32 %64 to i64, !dbg !25
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !25
  %81 = sext i32 %66 to i64, !dbg !25
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !25
  %83 = sext i32 %68 to i64, !dbg !25
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !25
  %85 = sext i32 %70 to i64, !dbg !25
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !25
  %87 = sext i32 %72 to i64, !dbg !25
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !25
  %89 = sext i32 %74 to i64, !dbg !25
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !25
  %91 = sext i32 %76 to i64, !dbg !25
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !25
  %93 = extractelement <8 x i1> %42, i64 7, !dbg !26
  %94 = and i1 %20, %93, !dbg !26
  %95 = extractelement <8 x i1> %42, i64 6, !dbg !26
  %96 = and i1 %95, %20, !dbg !26
  %97 = extractelement <8 x i1> %42, i64 5, !dbg !26
  %98 = and i1 %97, %20, !dbg !26
  %99 = extractelement <8 x i1> %42, i64 4, !dbg !26
  %100 = and i1 %99, %20, !dbg !26
  %101 = extractelement <8 x i1> %42, i64 3, !dbg !26
  %102 = and i1 %21, %101, !dbg !26
  %103 = extractelement <8 x i1> %42, i64 2, !dbg !26
  %104 = and i1 %21, %103, !dbg !26
  %105 = extractelement <8 x i1> %42, i64 1, !dbg !26
  %106 = and i1 %21, %105, !dbg !26
  %107 = extractelement <8 x i1> %42, i64 0, !dbg !26
  %108 = and i1 %21, %107, !dbg !26
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %94, i32 0, i1 %94) #1, !dbg !27
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %96, i32 0, i1 %96) #1, !dbg !27
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %98, i32 0, i1 %98) #1, !dbg !27
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %100, i32 0, i1 %100) #1, !dbg !27
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %102, i32 0, i1 %102) #1, !dbg !27
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %104, i32 0, i1 %104) #1, !dbg !27
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %106, i32 0, i1 %106) #1, !dbg !27
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %108, i32 0, i1 %108) #1, !dbg !27
  %117 = sext i32 %61 to i64, !dbg !28
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !28
  %119 = sext i32 %63 to i64, !dbg !28
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %119, !dbg !28
  %121 = sext i32 %65 to i64, !dbg !28
  %122 = getelementptr float, ptr addrspace(1) %1, i64 %121, !dbg !28
  %123 = sext i32 %67 to i64, !dbg !28
  %124 = getelementptr float, ptr addrspace(1) %1, i64 %123, !dbg !28
  %125 = sext i32 %69 to i64, !dbg !28
  %126 = getelementptr float, ptr addrspace(1) %1, i64 %125, !dbg !28
  %127 = sext i32 %71 to i64, !dbg !28
  %128 = getelementptr float, ptr addrspace(1) %1, i64 %127, !dbg !28
  %129 = sext i32 %73 to i64, !dbg !28
  %130 = getelementptr float, ptr addrspace(1) %1, i64 %129, !dbg !28
  %131 = sext i32 %75 to i64, !dbg !28
  %132 = getelementptr float, ptr addrspace(1) %1, i64 %131, !dbg !28
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %94, i32 0, i1 %94) #1, !dbg !29
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %96, i32 0, i1 %96) #1, !dbg !29
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %98, i32 0, i1 %98) #1, !dbg !29
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %100, i32 0, i1 %100) #1, !dbg !29
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %102, i32 0, i1 %102) #1, !dbg !29
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %104, i32 0, i1 %104) #1, !dbg !29
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %106, i32 0, i1 %106) #1, !dbg !29
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %108, i32 0, i1 %108) #1, !dbg !29
  %141 = icmp sgt i32 %61, 63, !dbg !23
  %142 = icmp sgt i32 %63, 63, !dbg !23
  %143 = icmp sgt i32 %65, 63, !dbg !23
  %144 = icmp sgt i32 %67, 63, !dbg !23
  %145 = icmp sgt i32 %69, 63, !dbg !23
  %146 = icmp sgt i32 %71, 63, !dbg !23
  %147 = icmp sgt i32 %73, 63, !dbg !23
  %148 = icmp sgt i32 %75, 63, !dbg !23
  %149 = add nsw i32 %61, -64, !dbg !30
  %150 = add nsw i32 %63, -64, !dbg !30
  %151 = add nsw i32 %65, -64, !dbg !30
  %152 = add nsw i32 %67, -64, !dbg !30
  %153 = add nsw i32 %69, -64, !dbg !30
  %154 = add nsw i32 %71, -64, !dbg !30
  %155 = add nsw i32 %73, -64, !dbg !30
  %156 = add nsw i32 %75, -64, !dbg !30
  %157 = add nsw i32 %53, %149, !dbg !31
  %158 = add nsw i32 %54, %150, !dbg !31
  %159 = add nsw i32 %55, %151, !dbg !31
  %160 = add nsw i32 %56, %152, !dbg !31
  %161 = add nsw i32 %57, %153, !dbg !31
  %162 = add nsw i32 %58, %154, !dbg !31
  %163 = add nsw i32 %59, %155, !dbg !31
  %164 = add nsw i32 %60, %156, !dbg !31
  %165 = sext i32 %157 to i64, !dbg !32
  %166 = getelementptr float, ptr addrspace(1) %2, i64 %165, !dbg !32
  %167 = sext i32 %158 to i64, !dbg !32
  %168 = getelementptr float, ptr addrspace(1) %2, i64 %167, !dbg !32
  %169 = sext i32 %159 to i64, !dbg !32
  %170 = getelementptr float, ptr addrspace(1) %2, i64 %169, !dbg !32
  %171 = sext i32 %160 to i64, !dbg !32
  %172 = getelementptr float, ptr addrspace(1) %2, i64 %171, !dbg !32
  %173 = sext i32 %161 to i64, !dbg !32
  %174 = getelementptr float, ptr addrspace(1) %2, i64 %173, !dbg !32
  %175 = sext i32 %162 to i64, !dbg !32
  %176 = getelementptr float, ptr addrspace(1) %2, i64 %175, !dbg !32
  %177 = sext i32 %163 to i64, !dbg !32
  %178 = getelementptr float, ptr addrspace(1) %2, i64 %177, !dbg !32
  %179 = sext i32 %164 to i64, !dbg !32
  %180 = getelementptr float, ptr addrspace(1) %2, i64 %179, !dbg !32
  %181 = and i1 %20, %141, !dbg !33
  %182 = and i1 %142, %20, !dbg !33
  %183 = and i1 %143, %20, !dbg !33
  %184 = and i1 %144, %20, !dbg !33
  %185 = and i1 %21, %145, !dbg !33
  %186 = and i1 %21, %146, !dbg !33
  %187 = and i1 %21, %147, !dbg !33
  %188 = and i1 %21, %148, !dbg !33
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %166, i1 %181, i32 0, i1 %181) #1, !dbg !34
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %168, i1 %182, i32 0, i1 %182) #1, !dbg !34
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %170, i1 %183, i32 0, i1 %183) #1, !dbg !34
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %172, i1 %184, i32 0, i1 %184) #1, !dbg !34
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %174, i1 %185, i32 0, i1 %185) #1, !dbg !34
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %176, i1 %186, i32 0, i1 %186) #1, !dbg !34
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %178, i1 %187, i32 0, i1 %187) #1, !dbg !34
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %180, i1 %188, i32 0, i1 %188) #1, !dbg !34
  %197 = sext i32 %149 to i64, !dbg !35
  %198 = getelementptr float, ptr addrspace(1) %3, i64 %197, !dbg !35
  %199 = sext i32 %150 to i64, !dbg !35
  %200 = getelementptr float, ptr addrspace(1) %3, i64 %199, !dbg !35
  %201 = sext i32 %151 to i64, !dbg !35
  %202 = getelementptr float, ptr addrspace(1) %3, i64 %201, !dbg !35
  %203 = sext i32 %152 to i64, !dbg !35
  %204 = getelementptr float, ptr addrspace(1) %3, i64 %203, !dbg !35
  %205 = sext i32 %153 to i64, !dbg !35
  %206 = getelementptr float, ptr addrspace(1) %3, i64 %205, !dbg !35
  %207 = sext i32 %154 to i64, !dbg !35
  %208 = getelementptr float, ptr addrspace(1) %3, i64 %207, !dbg !35
  %209 = sext i32 %155 to i64, !dbg !35
  %210 = getelementptr float, ptr addrspace(1) %3, i64 %209, !dbg !35
  %211 = sext i32 %156 to i64, !dbg !35
  %212 = getelementptr float, ptr addrspace(1) %3, i64 %211, !dbg !35
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %198, i1 %181, i32 0, i1 %181) #1, !dbg !36
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %200, i1 %182, i32 0, i1 %182) #1, !dbg !36
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %202, i1 %183, i32 0, i1 %183) #1, !dbg !36
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %204, i1 %184, i32 0, i1 %184) #1, !dbg !36
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %206, i1 %185, i32 0, i1 %185) #1, !dbg !36
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %208, i1 %186, i32 0, i1 %186) #1, !dbg !36
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %210, i1 %187, i32 0, i1 %187) #1, !dbg !36
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %212, i1 %188, i32 0, i1 %188) #1, !dbg !36
  %221 = insertelement <16 x i32> poison, i32 %196, i64 0, !dbg !34
  %222 = insertelement <16 x i32> %221, i32 %195, i64 1, !dbg !34
  %223 = insertelement <16 x i32> %222, i32 %194, i64 2, !dbg !34
  %224 = insertelement <16 x i32> %223, i32 %193, i64 3, !dbg !34
  %225 = insertelement <16 x i32> %224, i32 %192, i64 4, !dbg !34
  %226 = insertelement <16 x i32> %225, i32 %191, i64 5, !dbg !34
  %227 = insertelement <16 x i32> %226, i32 %190, i64 6, !dbg !34
  %228 = insertelement <16 x i32> %227, i32 %189, i64 7, !dbg !34
  %229 = insertelement <16 x i32> %228, i32 %116, i64 8, !dbg !34
  %230 = insertelement <16 x i32> %229, i32 %115, i64 9, !dbg !34
  %231 = insertelement <16 x i32> %230, i32 %114, i64 10, !dbg !34
  %232 = insertelement <16 x i32> %231, i32 %113, i64 11, !dbg !34
  %233 = insertelement <16 x i32> %232, i32 %112, i64 12, !dbg !34
  %234 = insertelement <16 x i32> %233, i32 %111, i64 13, !dbg !34
  %235 = insertelement <16 x i32> %234, i32 %110, i64 14, !dbg !34
  %236 = insertelement <16 x i32> %235, i32 %109, i64 15, !dbg !34
  %237 = bitcast <16 x i32> %236 to <16 x float>, !dbg !34
  %238 = insertelement <16 x i32> poison, i32 %220, i64 0, !dbg !36
  %239 = insertelement <16 x i32> %238, i32 %219, i64 1, !dbg !36
  %240 = insertelement <16 x i32> %239, i32 %218, i64 2, !dbg !36
  %241 = insertelement <16 x i32> %240, i32 %217, i64 3, !dbg !36
  %242 = insertelement <16 x i32> %241, i32 %216, i64 4, !dbg !36
  %243 = insertelement <16 x i32> %242, i32 %215, i64 5, !dbg !36
  %244 = insertelement <16 x i32> %243, i32 %214, i64 6, !dbg !36
  %245 = insertelement <16 x i32> %244, i32 %213, i64 7, !dbg !36
  %246 = insertelement <16 x i32> %245, i32 %140, i64 8, !dbg !36
  %247 = insertelement <16 x i32> %246, i32 %139, i64 9, !dbg !36
  %248 = insertelement <16 x i32> %247, i32 %138, i64 10, !dbg !36
  %249 = insertelement <16 x i32> %248, i32 %137, i64 11, !dbg !36
  %250 = insertelement <16 x i32> %249, i32 %136, i64 12, !dbg !36
  %251 = insertelement <16 x i32> %250, i32 %135, i64 13, !dbg !36
  %252 = insertelement <16 x i32> %251, i32 %134, i64 14, !dbg !36
  %253 = insertelement <16 x i32> %252, i32 %133, i64 15, !dbg !36
  %254 = bitcast <16 x i32> %253 to <16 x float>, !dbg !36
  %255 = fadd <16 x float> %237, %254, !dbg !37
  %256 = fcmp olt <16 x float> %255, zeroinitializer, !dbg !38
  %257 = extractelement <16 x i1> %256, i64 15, !dbg !42
  %258 = extractelement <16 x float> %255, i64 15, !dbg !42
  %259 = select i1 %257, float 0.000000e+00, float %258, !dbg !42
  %260 = extractelement <16 x i1> %256, i64 14, !dbg !42
  %261 = extractelement <16 x float> %255, i64 14, !dbg !42
  %262 = select i1 %260, float 0.000000e+00, float %261, !dbg !42
  %263 = extractelement <16 x i1> %256, i64 13, !dbg !42
  %264 = extractelement <16 x float> %255, i64 13, !dbg !42
  %265 = select i1 %263, float 0.000000e+00, float %264, !dbg !42
  %266 = extractelement <16 x i1> %256, i64 12, !dbg !42
  %267 = extractelement <16 x float> %255, i64 12, !dbg !42
  %268 = select i1 %266, float 0.000000e+00, float %267, !dbg !42
  %269 = extractelement <16 x i1> %256, i64 11, !dbg !42
  %270 = extractelement <16 x float> %255, i64 11, !dbg !42
  %271 = select i1 %269, float 0.000000e+00, float %270, !dbg !42
  %272 = extractelement <16 x i1> %256, i64 10, !dbg !42
  %273 = extractelement <16 x float> %255, i64 10, !dbg !42
  %274 = select i1 %272, float 0.000000e+00, float %273, !dbg !42
  %275 = extractelement <16 x i1> %256, i64 9, !dbg !42
  %276 = extractelement <16 x float> %255, i64 9, !dbg !42
  %277 = select i1 %275, float 0.000000e+00, float %276, !dbg !42
  %278 = extractelement <16 x i1> %256, i64 8, !dbg !42
  %279 = extractelement <16 x float> %255, i64 8, !dbg !42
  %280 = select i1 %278, float 0.000000e+00, float %279, !dbg !42
  %281 = extractelement <16 x i1> %256, i64 7, !dbg !44
  %282 = extractelement <16 x float> %255, i64 7, !dbg !44
  %283 = select i1 %281, float 0.000000e+00, float %282, !dbg !44
  %284 = extractelement <16 x i1> %256, i64 6, !dbg !44
  %285 = extractelement <16 x float> %255, i64 6, !dbg !44
  %286 = select i1 %284, float 0.000000e+00, float %285, !dbg !44
  %287 = extractelement <16 x i1> %256, i64 5, !dbg !44
  %288 = extractelement <16 x float> %255, i64 5, !dbg !44
  %289 = select i1 %287, float 0.000000e+00, float %288, !dbg !44
  %290 = extractelement <16 x i1> %256, i64 4, !dbg !44
  %291 = extractelement <16 x float> %255, i64 4, !dbg !44
  %292 = select i1 %290, float 0.000000e+00, float %291, !dbg !44
  %293 = extractelement <16 x i1> %256, i64 3, !dbg !44
  %294 = extractelement <16 x float> %255, i64 3, !dbg !44
  %295 = select i1 %293, float 0.000000e+00, float %294, !dbg !44
  %296 = extractelement <16 x i1> %256, i64 2, !dbg !44
  %297 = extractelement <16 x float> %255, i64 2, !dbg !44
  %298 = select i1 %296, float 0.000000e+00, float %297, !dbg !44
  %299 = extractelement <16 x i1> %256, i64 1, !dbg !44
  %300 = extractelement <16 x float> %255, i64 1, !dbg !44
  %301 = select i1 %299, float 0.000000e+00, float %300, !dbg !44
  %302 = extractelement <16 x i1> %256, i64 0, !dbg !44
  %303 = extractelement <16 x float> %255, i64 0, !dbg !44
  %304 = select i1 %302, float 0.000000e+00, float %303, !dbg !44
  %305 = select i1 %93, float %259, float %283, !dbg !45
  %306 = select i1 %95, float %262, float %286, !dbg !45
  %307 = select i1 %97, float %265, float %289, !dbg !45
  %308 = select i1 %99, float %268, float %292, !dbg !45
  %309 = select i1 %101, float %271, float %295, !dbg !45
  %310 = select i1 %103, float %274, float %298, !dbg !45
  %311 = select i1 %105, float %277, float %301, !dbg !45
  %312 = select i1 %107, float %280, float %304, !dbg !45
  %313 = sext i32 %12 to i64, !dbg !46
  %314 = getelementptr float, ptr addrspace(1) %4, i64 %313, !dbg !46
  %315 = sext i32 %16 to i64, !dbg !46
  %316 = getelementptr float, ptr addrspace(1) %4, i64 %315, !dbg !46
  %317 = bitcast float %305 to i32, !dbg !47
  %318 = bitcast float %306 to i32, !dbg !47
  %319 = bitcast float %307 to i32, !dbg !47
  %320 = bitcast float %308 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %317, i32 %318, i32 %319, i32 %320, ptr addrspace(1) %314, i1 %20) #1, !dbg !47
  %321 = bitcast float %309 to i32, !dbg !47
  %322 = bitcast float %310 to i32, !dbg !47
  %323 = bitcast float %311 to i32, !dbg !47
  %324 = bitcast float %312 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %321, i32 %322, i32 %323, i32 %324, ptr addrspace(1) %316, i1 %21) #1, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ce2rwr5xfzzfw2jun5dapuyvq2k6zdm63ulklcfsu7l6hsvizwcn.py", directory: "inductor_cache/e2")
!4 = !{ptr @triton_poi_fused_cat_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_7", linkageName: "triton_poi_fused_cat_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 28, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 33, scope: !7)
!21 = !DILocation(line: 33, column: 44, scope: !7)
!22 = !DILocation(line: 33, column: 38, scope: !7)
!23 = !DILocation(line: 40, column: 20, scope: !7)
!24 = !DILocation(line: 33, column: 50, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 63, scope: !7)
!27 = !DILocation(line: 33, column: 56, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 43, column: 59, scope: !7)
!31 = !DILocation(line: 43, column: 51, scope: !7)
!32 = !DILocation(line: 43, column: 31, scope: !7)
!33 = !DILocation(line: 43, column: 73, scope: !7)
!34 = !DILocation(line: 43, column: 65, scope: !7)
!35 = !DILocation(line: 44, column: 31, scope: !7)
!36 = !DILocation(line: 44, column: 44, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 47, column: 42, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !43)
!43 = !DILocation(line: 37, column: 40, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!45 = !DILocation(line: 0, scope: !7)
!46 = !DILocation(line: 51, column: 25, scope: !7)
!47 = !DILocation(line: 51, column: 37, scope: !7)
!48 = !DILocation(line: 51, column: 4, scope: !7)
