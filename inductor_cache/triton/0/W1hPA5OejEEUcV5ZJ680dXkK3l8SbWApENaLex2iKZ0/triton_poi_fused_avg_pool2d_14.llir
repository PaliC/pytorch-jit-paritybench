; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_avg_pool2d_14(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 5, !dbg !12
  %9 = and i32 %8, 3, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 28, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %12, 4, !dbg !13
  %14 = or disjoint i32 %12, 8, !dbg !13
  %15 = or disjoint i32 %12, 12, !dbg !13
  %16 = or disjoint i32 %12, 16, !dbg !13
  %17 = or disjoint i32 %12, 20, !dbg !13
  %18 = or disjoint i32 %12, 24, !dbg !13
  %19 = or disjoint i32 %12, 28, !dbg !13
  %20 = or disjoint i32 %6, %11, !dbg !13
  %21 = icmp slt i32 %12, 64, !dbg !14
  %22 = icmp slt i32 %13, 64, !dbg !14
  %23 = icmp slt i32 %14, 64, !dbg !14
  %24 = icmp slt i32 %15, 64, !dbg !14
  %25 = icmp slt i32 %16, 64, !dbg !14
  %26 = icmp slt i32 %17, 64, !dbg !14
  %27 = icmp slt i32 %18, 64, !dbg !14
  %28 = icmp slt i32 %19, 64, !dbg !14
  %29 = icmp slt i32 %20, 64, !dbg !14
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %31 = shl i32 %30, 5, !dbg !16
  %32 = and i32 %7, 31, !dbg !17
  %33 = lshr i32 %7, 3, !dbg !17
  %34 = and i32 %33, 15, !dbg !17
  %35 = or disjoint i32 %34, 16, !dbg !17
  %36 = or disjoint i32 %31, %32, !dbg !18
  %37 = or disjoint i32 %31, %34, !dbg !18
  %38 = or disjoint i32 %31, %35, !dbg !18
  %.frozen = freeze i32 %36, !dbg !19
  %39 = sdiv i32 %.frozen, 64, !dbg !19
  %40 = mul i32 %39, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %40, !dbg !20
  %.frozen19 = freeze i32 %20, !dbg !21
  %41 = sdiv i32 %.frozen19, 16, !dbg !21
  %42 = mul i32 %41, 16, !dbg !22
  %.decomposed20 = sub i32 %.frozen19, %42, !dbg !22
  %43 = shl nsw i32 %.decomposed, 2, !dbg !23
  %44 = shl i32 %39, 10, !dbg !24
  %45 = add i32 %43, %44, !dbg !25
  %46 = shl i32 %12, 16, !dbg !26
  %47 = shl i32 %13, 16, !dbg !26
  %48 = shl i32 %14, 16, !dbg !26
  %49 = shl i32 %15, 16, !dbg !26
  %50 = shl i32 %16, 16, !dbg !26
  %51 = shl i32 %17, 16, !dbg !26
  %52 = shl i32 %18, 16, !dbg !26
  %53 = shl i32 %19, 16, !dbg !26
  %54 = add i32 %45, %46, !dbg !27
  %55 = add i32 %45, %47, !dbg !27
  %56 = add i32 %45, %48, !dbg !27
  %57 = add i32 %45, %49, !dbg !27
  %58 = add i32 %45, %50, !dbg !27
  %59 = add i32 %45, %51, !dbg !27
  %60 = add i32 %45, %52, !dbg !27
  %61 = add i32 %45, %53, !dbg !27
  %62 = sext i32 %54 to i64, !dbg !28
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !28
  %64 = sext i32 %55 to i64, !dbg !28
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !28
  %66 = sext i32 %56 to i64, !dbg !28
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !28
  %68 = sext i32 %57 to i64, !dbg !28
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !28
  %70 = sext i32 %58 to i64, !dbg !28
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !28
  %72 = sext i32 %59 to i64, !dbg !28
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !28
  %74 = sext i32 %60 to i64, !dbg !28
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !28
  %76 = sext i32 %61 to i64, !dbg !28
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !28
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %21) #2, !dbg !29
  %79 = bitcast i32 %78 to float, !dbg !29
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %22) #2, !dbg !29
  %81 = bitcast i32 %80 to float, !dbg !29
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %23) #2, !dbg !29
  %83 = bitcast i32 %82 to float, !dbg !29
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %24) #2, !dbg !29
  %85 = bitcast i32 %84 to float, !dbg !29
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %25) #2, !dbg !29
  %87 = bitcast i32 %86 to float, !dbg !29
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %26) #2, !dbg !29
  %89 = bitcast i32 %88 to float, !dbg !29
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %27) #2, !dbg !29
  %91 = bitcast i32 %90 to float, !dbg !29
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %28) #2, !dbg !29
  %93 = bitcast i32 %92 to float, !dbg !29
  %94 = or disjoint i32 %43, 1, !dbg !30
  %95 = add i32 %94, %44, !dbg !31
  %96 = add i32 %95, %46, !dbg !32
  %97 = add i32 %95, %47, !dbg !32
  %98 = add i32 %95, %48, !dbg !32
  %99 = add i32 %95, %49, !dbg !32
  %100 = add i32 %95, %50, !dbg !32
  %101 = add i32 %95, %51, !dbg !32
  %102 = add i32 %95, %52, !dbg !32
  %103 = add i32 %95, %53, !dbg !32
  %104 = sext i32 %96 to i64, !dbg !33
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !33
  %106 = sext i32 %97 to i64, !dbg !33
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !33
  %108 = sext i32 %98 to i64, !dbg !33
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !33
  %110 = sext i32 %99 to i64, !dbg !33
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !33
  %112 = sext i32 %100 to i64, !dbg !33
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !33
  %114 = sext i32 %101 to i64, !dbg !33
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !33
  %116 = sext i32 %102 to i64, !dbg !33
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !33
  %118 = sext i32 %103 to i64, !dbg !33
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !33
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %21) #2, !dbg !34
  %121 = bitcast i32 %120 to float, !dbg !34
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %22) #2, !dbg !34
  %123 = bitcast i32 %122 to float, !dbg !34
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %23) #2, !dbg !34
  %125 = bitcast i32 %124 to float, !dbg !34
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %24) #2, !dbg !34
  %127 = bitcast i32 %126 to float, !dbg !34
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %25) #2, !dbg !34
  %129 = bitcast i32 %128 to float, !dbg !34
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %26) #2, !dbg !34
  %131 = bitcast i32 %130 to float, !dbg !34
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %27) #2, !dbg !34
  %133 = bitcast i32 %132 to float, !dbg !34
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %28) #2, !dbg !34
  %135 = bitcast i32 %134 to float, !dbg !34
  %136 = or disjoint i32 %43, 2, !dbg !35
  %137 = add i32 %136, %44, !dbg !36
  %138 = add i32 %137, %46, !dbg !37
  %139 = add i32 %137, %47, !dbg !37
  %140 = add i32 %137, %48, !dbg !37
  %141 = add i32 %137, %49, !dbg !37
  %142 = add i32 %137, %50, !dbg !37
  %143 = add i32 %137, %51, !dbg !37
  %144 = add i32 %137, %52, !dbg !37
  %145 = add i32 %137, %53, !dbg !37
  %146 = sext i32 %138 to i64, !dbg !38
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !38
  %148 = sext i32 %139 to i64, !dbg !38
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !38
  %150 = sext i32 %140 to i64, !dbg !38
  %151 = getelementptr float, ptr addrspace(1) %0, i64 %150, !dbg !38
  %152 = sext i32 %141 to i64, !dbg !38
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !38
  %154 = sext i32 %142 to i64, !dbg !38
  %155 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !38
  %156 = sext i32 %143 to i64, !dbg !38
  %157 = getelementptr float, ptr addrspace(1) %0, i64 %156, !dbg !38
  %158 = sext i32 %144 to i64, !dbg !38
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !38
  %160 = sext i32 %145 to i64, !dbg !38
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !38
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 %21) #2, !dbg !39
  %163 = bitcast i32 %162 to float, !dbg !39
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %22) #2, !dbg !39
  %165 = bitcast i32 %164 to float, !dbg !39
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %23) #2, !dbg !39
  %167 = bitcast i32 %166 to float, !dbg !39
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %24) #2, !dbg !39
  %169 = bitcast i32 %168 to float, !dbg !39
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 %25) #2, !dbg !39
  %171 = bitcast i32 %170 to float, !dbg !39
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 %26) #2, !dbg !39
  %173 = bitcast i32 %172 to float, !dbg !39
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %159, i1 %27) #2, !dbg !39
  %175 = bitcast i32 %174 to float, !dbg !39
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 %28) #2, !dbg !39
  %177 = bitcast i32 %176 to float, !dbg !39
  %178 = or disjoint i32 %43, 3, !dbg !40
  %179 = add i32 %178, %44, !dbg !41
  %180 = add i32 %179, %46, !dbg !42
  %181 = add i32 %179, %47, !dbg !42
  %182 = add i32 %179, %48, !dbg !42
  %183 = add i32 %179, %49, !dbg !42
  %184 = add i32 %179, %50, !dbg !42
  %185 = add i32 %179, %51, !dbg !42
  %186 = add i32 %179, %52, !dbg !42
  %187 = add i32 %179, %53, !dbg !42
  %188 = sext i32 %180 to i64, !dbg !43
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %188, !dbg !43
  %190 = sext i32 %181 to i64, !dbg !43
  %191 = getelementptr float, ptr addrspace(1) %0, i64 %190, !dbg !43
  %192 = sext i32 %182 to i64, !dbg !43
  %193 = getelementptr float, ptr addrspace(1) %0, i64 %192, !dbg !43
  %194 = sext i32 %183 to i64, !dbg !43
  %195 = getelementptr float, ptr addrspace(1) %0, i64 %194, !dbg !43
  %196 = sext i32 %184 to i64, !dbg !43
  %197 = getelementptr float, ptr addrspace(1) %0, i64 %196, !dbg !43
  %198 = sext i32 %185 to i64, !dbg !43
  %199 = getelementptr float, ptr addrspace(1) %0, i64 %198, !dbg !43
  %200 = sext i32 %186 to i64, !dbg !43
  %201 = getelementptr float, ptr addrspace(1) %0, i64 %200, !dbg !43
  %202 = sext i32 %187 to i64, !dbg !43
  %203 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !43
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 %21) #2, !dbg !44
  %205 = bitcast i32 %204 to float, !dbg !44
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 %22) #2, !dbg !44
  %207 = bitcast i32 %206 to float, !dbg !44
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %193, i1 %23) #2, !dbg !44
  %209 = bitcast i32 %208 to float, !dbg !44
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %195, i1 %24) #2, !dbg !44
  %211 = bitcast i32 %210 to float, !dbg !44
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %197, i1 %25) #2, !dbg !44
  %213 = bitcast i32 %212 to float, !dbg !44
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %199, i1 %26) #2, !dbg !44
  %215 = bitcast i32 %214 to float, !dbg !44
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 %27) #2, !dbg !44
  %217 = bitcast i32 %216 to float, !dbg !44
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %203, i1 %28) #2, !dbg !44
  %219 = bitcast i32 %218 to float, !dbg !44
  %220 = add i32 %45, 256, !dbg !45
  %221 = add i32 %220, %46, !dbg !46
  %222 = add i32 %220, %47, !dbg !46
  %223 = add i32 %220, %48, !dbg !46
  %224 = add i32 %220, %49, !dbg !46
  %225 = add i32 %220, %50, !dbg !46
  %226 = add i32 %220, %51, !dbg !46
  %227 = add i32 %220, %52, !dbg !46
  %228 = add i32 %220, %53, !dbg !46
  %229 = sext i32 %221 to i64, !dbg !47
  %230 = getelementptr float, ptr addrspace(1) %0, i64 %229, !dbg !47
  %231 = sext i32 %222 to i64, !dbg !47
  %232 = getelementptr float, ptr addrspace(1) %0, i64 %231, !dbg !47
  %233 = sext i32 %223 to i64, !dbg !47
  %234 = getelementptr float, ptr addrspace(1) %0, i64 %233, !dbg !47
  %235 = sext i32 %224 to i64, !dbg !47
  %236 = getelementptr float, ptr addrspace(1) %0, i64 %235, !dbg !47
  %237 = sext i32 %225 to i64, !dbg !47
  %238 = getelementptr float, ptr addrspace(1) %0, i64 %237, !dbg !47
  %239 = sext i32 %226 to i64, !dbg !47
  %240 = getelementptr float, ptr addrspace(1) %0, i64 %239, !dbg !47
  %241 = sext i32 %227 to i64, !dbg !47
  %242 = getelementptr float, ptr addrspace(1) %0, i64 %241, !dbg !47
  %243 = sext i32 %228 to i64, !dbg !47
  %244 = getelementptr float, ptr addrspace(1) %0, i64 %243, !dbg !47
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %230, i1 %21) #2, !dbg !48
  %246 = bitcast i32 %245 to float, !dbg !48
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 %22) #2, !dbg !48
  %248 = bitcast i32 %247 to float, !dbg !48
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %234, i1 %23) #2, !dbg !48
  %250 = bitcast i32 %249 to float, !dbg !48
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %236, i1 %24) #2, !dbg !48
  %252 = bitcast i32 %251 to float, !dbg !48
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 %25) #2, !dbg !48
  %254 = bitcast i32 %253 to float, !dbg !48
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 %26) #2, !dbg !48
  %256 = bitcast i32 %255 to float, !dbg !48
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 %27) #2, !dbg !48
  %258 = bitcast i32 %257 to float, !dbg !48
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 %28) #2, !dbg !48
  %260 = bitcast i32 %259 to float, !dbg !48
  %261 = add i32 %45, 257, !dbg !49
  %262 = add i32 %261, %46, !dbg !50
  %263 = add i32 %261, %47, !dbg !50
  %264 = add i32 %261, %48, !dbg !50
  %265 = add i32 %261, %49, !dbg !50
  %266 = add i32 %261, %50, !dbg !50
  %267 = add i32 %261, %51, !dbg !50
  %268 = add i32 %261, %52, !dbg !50
  %269 = add i32 %261, %53, !dbg !50
  %270 = sext i32 %262 to i64, !dbg !51
  %271 = getelementptr float, ptr addrspace(1) %0, i64 %270, !dbg !51
  %272 = sext i32 %263 to i64, !dbg !51
  %273 = getelementptr float, ptr addrspace(1) %0, i64 %272, !dbg !51
  %274 = sext i32 %264 to i64, !dbg !51
  %275 = getelementptr float, ptr addrspace(1) %0, i64 %274, !dbg !51
  %276 = sext i32 %265 to i64, !dbg !51
  %277 = getelementptr float, ptr addrspace(1) %0, i64 %276, !dbg !51
  %278 = sext i32 %266 to i64, !dbg !51
  %279 = getelementptr float, ptr addrspace(1) %0, i64 %278, !dbg !51
  %280 = sext i32 %267 to i64, !dbg !51
  %281 = getelementptr float, ptr addrspace(1) %0, i64 %280, !dbg !51
  %282 = sext i32 %268 to i64, !dbg !51
  %283 = getelementptr float, ptr addrspace(1) %0, i64 %282, !dbg !51
  %284 = sext i32 %269 to i64, !dbg !51
  %285 = getelementptr float, ptr addrspace(1) %0, i64 %284, !dbg !51
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %271, i1 %21) #2, !dbg !52
  %287 = bitcast i32 %286 to float, !dbg !52
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %273, i1 %22) #2, !dbg !52
  %289 = bitcast i32 %288 to float, !dbg !52
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %275, i1 %23) #2, !dbg !52
  %291 = bitcast i32 %290 to float, !dbg !52
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %277, i1 %24) #2, !dbg !52
  %293 = bitcast i32 %292 to float, !dbg !52
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %279, i1 %25) #2, !dbg !52
  %295 = bitcast i32 %294 to float, !dbg !52
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %281, i1 %26) #2, !dbg !52
  %297 = bitcast i32 %296 to float, !dbg !52
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %283, i1 %27) #2, !dbg !52
  %299 = bitcast i32 %298 to float, !dbg !52
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %285, i1 %28) #2, !dbg !52
  %301 = bitcast i32 %300 to float, !dbg !52
  %302 = add i32 %45, 258, !dbg !53
  %303 = add i32 %302, %46, !dbg !54
  %304 = add i32 %302, %47, !dbg !54
  %305 = add i32 %302, %48, !dbg !54
  %306 = add i32 %302, %49, !dbg !54
  %307 = add i32 %302, %50, !dbg !54
  %308 = add i32 %302, %51, !dbg !54
  %309 = add i32 %302, %52, !dbg !54
  %310 = add i32 %302, %53, !dbg !54
  %311 = sext i32 %303 to i64, !dbg !55
  %312 = getelementptr float, ptr addrspace(1) %0, i64 %311, !dbg !55
  %313 = sext i32 %304 to i64, !dbg !55
  %314 = getelementptr float, ptr addrspace(1) %0, i64 %313, !dbg !55
  %315 = sext i32 %305 to i64, !dbg !55
  %316 = getelementptr float, ptr addrspace(1) %0, i64 %315, !dbg !55
  %317 = sext i32 %306 to i64, !dbg !55
  %318 = getelementptr float, ptr addrspace(1) %0, i64 %317, !dbg !55
  %319 = sext i32 %307 to i64, !dbg !55
  %320 = getelementptr float, ptr addrspace(1) %0, i64 %319, !dbg !55
  %321 = sext i32 %308 to i64, !dbg !55
  %322 = getelementptr float, ptr addrspace(1) %0, i64 %321, !dbg !55
  %323 = sext i32 %309 to i64, !dbg !55
  %324 = getelementptr float, ptr addrspace(1) %0, i64 %323, !dbg !55
  %325 = sext i32 %310 to i64, !dbg !55
  %326 = getelementptr float, ptr addrspace(1) %0, i64 %325, !dbg !55
  %327 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %312, i1 %21) #2, !dbg !56
  %328 = bitcast i32 %327 to float, !dbg !56
  %329 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %314, i1 %22) #2, !dbg !56
  %330 = bitcast i32 %329 to float, !dbg !56
  %331 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %316, i1 %23) #2, !dbg !56
  %332 = bitcast i32 %331 to float, !dbg !56
  %333 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %318, i1 %24) #2, !dbg !56
  %334 = bitcast i32 %333 to float, !dbg !56
  %335 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %320, i1 %25) #2, !dbg !56
  %336 = bitcast i32 %335 to float, !dbg !56
  %337 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %322, i1 %26) #2, !dbg !56
  %338 = bitcast i32 %337 to float, !dbg !56
  %339 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %324, i1 %27) #2, !dbg !56
  %340 = bitcast i32 %339 to float, !dbg !56
  %341 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %326, i1 %28) #2, !dbg !56
  %342 = bitcast i32 %341 to float, !dbg !56
  %343 = add i32 %45, 259, !dbg !57
  %344 = add i32 %343, %46, !dbg !58
  %345 = add i32 %343, %47, !dbg !58
  %346 = add i32 %343, %48, !dbg !58
  %347 = add i32 %343, %49, !dbg !58
  %348 = add i32 %343, %50, !dbg !58
  %349 = add i32 %343, %51, !dbg !58
  %350 = add i32 %343, %52, !dbg !58
  %351 = add i32 %343, %53, !dbg !58
  %352 = sext i32 %344 to i64, !dbg !59
  %353 = getelementptr float, ptr addrspace(1) %0, i64 %352, !dbg !59
  %354 = sext i32 %345 to i64, !dbg !59
  %355 = getelementptr float, ptr addrspace(1) %0, i64 %354, !dbg !59
  %356 = sext i32 %346 to i64, !dbg !59
  %357 = getelementptr float, ptr addrspace(1) %0, i64 %356, !dbg !59
  %358 = sext i32 %347 to i64, !dbg !59
  %359 = getelementptr float, ptr addrspace(1) %0, i64 %358, !dbg !59
  %360 = sext i32 %348 to i64, !dbg !59
  %361 = getelementptr float, ptr addrspace(1) %0, i64 %360, !dbg !59
  %362 = sext i32 %349 to i64, !dbg !59
  %363 = getelementptr float, ptr addrspace(1) %0, i64 %362, !dbg !59
  %364 = sext i32 %350 to i64, !dbg !59
  %365 = getelementptr float, ptr addrspace(1) %0, i64 %364, !dbg !59
  %366 = sext i32 %351 to i64, !dbg !59
  %367 = getelementptr float, ptr addrspace(1) %0, i64 %366, !dbg !59
  %368 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %353, i1 %21) #2, !dbg !60
  %369 = bitcast i32 %368 to float, !dbg !60
  %370 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %355, i1 %22) #2, !dbg !60
  %371 = bitcast i32 %370 to float, !dbg !60
  %372 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %357, i1 %23) #2, !dbg !60
  %373 = bitcast i32 %372 to float, !dbg !60
  %374 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %359, i1 %24) #2, !dbg !60
  %375 = bitcast i32 %374 to float, !dbg !60
  %376 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %361, i1 %25) #2, !dbg !60
  %377 = bitcast i32 %376 to float, !dbg !60
  %378 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %363, i1 %26) #2, !dbg !60
  %379 = bitcast i32 %378 to float, !dbg !60
  %380 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %365, i1 %27) #2, !dbg !60
  %381 = bitcast i32 %380 to float, !dbg !60
  %382 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %367, i1 %28) #2, !dbg !60
  %383 = bitcast i32 %382 to float, !dbg !60
  %384 = add i32 %45, 512, !dbg !61
  %385 = add i32 %384, %46, !dbg !62
  %386 = add i32 %384, %47, !dbg !62
  %387 = add i32 %384, %48, !dbg !62
  %388 = add i32 %384, %49, !dbg !62
  %389 = add i32 %384, %50, !dbg !62
  %390 = add i32 %384, %51, !dbg !62
  %391 = add i32 %384, %52, !dbg !62
  %392 = add i32 %384, %53, !dbg !62
  %393 = sext i32 %385 to i64, !dbg !63
  %394 = getelementptr float, ptr addrspace(1) %0, i64 %393, !dbg !63
  %395 = sext i32 %386 to i64, !dbg !63
  %396 = getelementptr float, ptr addrspace(1) %0, i64 %395, !dbg !63
  %397 = sext i32 %387 to i64, !dbg !63
  %398 = getelementptr float, ptr addrspace(1) %0, i64 %397, !dbg !63
  %399 = sext i32 %388 to i64, !dbg !63
  %400 = getelementptr float, ptr addrspace(1) %0, i64 %399, !dbg !63
  %401 = sext i32 %389 to i64, !dbg !63
  %402 = getelementptr float, ptr addrspace(1) %0, i64 %401, !dbg !63
  %403 = sext i32 %390 to i64, !dbg !63
  %404 = getelementptr float, ptr addrspace(1) %0, i64 %403, !dbg !63
  %405 = sext i32 %391 to i64, !dbg !63
  %406 = getelementptr float, ptr addrspace(1) %0, i64 %405, !dbg !63
  %407 = sext i32 %392 to i64, !dbg !63
  %408 = getelementptr float, ptr addrspace(1) %0, i64 %407, !dbg !63
  %409 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %394, i1 %21) #2, !dbg !64
  %410 = bitcast i32 %409 to float, !dbg !64
  %411 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %396, i1 %22) #2, !dbg !64
  %412 = bitcast i32 %411 to float, !dbg !64
  %413 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %398, i1 %23) #2, !dbg !64
  %414 = bitcast i32 %413 to float, !dbg !64
  %415 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %400, i1 %24) #2, !dbg !64
  %416 = bitcast i32 %415 to float, !dbg !64
  %417 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %402, i1 %25) #2, !dbg !64
  %418 = bitcast i32 %417 to float, !dbg !64
  %419 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %404, i1 %26) #2, !dbg !64
  %420 = bitcast i32 %419 to float, !dbg !64
  %421 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %406, i1 %27) #2, !dbg !64
  %422 = bitcast i32 %421 to float, !dbg !64
  %423 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %408, i1 %28) #2, !dbg !64
  %424 = bitcast i32 %423 to float, !dbg !64
  %425 = add i32 %45, 513, !dbg !65
  %426 = add i32 %425, %46, !dbg !66
  %427 = add i32 %425, %47, !dbg !66
  %428 = add i32 %425, %48, !dbg !66
  %429 = add i32 %425, %49, !dbg !66
  %430 = add i32 %425, %50, !dbg !66
  %431 = add i32 %425, %51, !dbg !66
  %432 = add i32 %425, %52, !dbg !66
  %433 = add i32 %425, %53, !dbg !66
  %434 = sext i32 %426 to i64, !dbg !67
  %435 = getelementptr float, ptr addrspace(1) %0, i64 %434, !dbg !67
  %436 = sext i32 %427 to i64, !dbg !67
  %437 = getelementptr float, ptr addrspace(1) %0, i64 %436, !dbg !67
  %438 = sext i32 %428 to i64, !dbg !67
  %439 = getelementptr float, ptr addrspace(1) %0, i64 %438, !dbg !67
  %440 = sext i32 %429 to i64, !dbg !67
  %441 = getelementptr float, ptr addrspace(1) %0, i64 %440, !dbg !67
  %442 = sext i32 %430 to i64, !dbg !67
  %443 = getelementptr float, ptr addrspace(1) %0, i64 %442, !dbg !67
  %444 = sext i32 %431 to i64, !dbg !67
  %445 = getelementptr float, ptr addrspace(1) %0, i64 %444, !dbg !67
  %446 = sext i32 %432 to i64, !dbg !67
  %447 = getelementptr float, ptr addrspace(1) %0, i64 %446, !dbg !67
  %448 = sext i32 %433 to i64, !dbg !67
  %449 = getelementptr float, ptr addrspace(1) %0, i64 %448, !dbg !67
  %450 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %435, i1 %21) #2, !dbg !68
  %451 = bitcast i32 %450 to float, !dbg !68
  %452 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %437, i1 %22) #2, !dbg !68
  %453 = bitcast i32 %452 to float, !dbg !68
  %454 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %439, i1 %23) #2, !dbg !68
  %455 = bitcast i32 %454 to float, !dbg !68
  %456 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %441, i1 %24) #2, !dbg !68
  %457 = bitcast i32 %456 to float, !dbg !68
  %458 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %443, i1 %25) #2, !dbg !68
  %459 = bitcast i32 %458 to float, !dbg !68
  %460 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %445, i1 %26) #2, !dbg !68
  %461 = bitcast i32 %460 to float, !dbg !68
  %462 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %447, i1 %27) #2, !dbg !68
  %463 = bitcast i32 %462 to float, !dbg !68
  %464 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %449, i1 %28) #2, !dbg !68
  %465 = bitcast i32 %464 to float, !dbg !68
  %466 = add i32 %45, 514, !dbg !69
  %467 = add i32 %466, %46, !dbg !70
  %468 = add i32 %466, %47, !dbg !70
  %469 = add i32 %466, %48, !dbg !70
  %470 = add i32 %466, %49, !dbg !70
  %471 = add i32 %466, %50, !dbg !70
  %472 = add i32 %466, %51, !dbg !70
  %473 = add i32 %466, %52, !dbg !70
  %474 = add i32 %466, %53, !dbg !70
  %475 = sext i32 %467 to i64, !dbg !71
  %476 = getelementptr float, ptr addrspace(1) %0, i64 %475, !dbg !71
  %477 = sext i32 %468 to i64, !dbg !71
  %478 = getelementptr float, ptr addrspace(1) %0, i64 %477, !dbg !71
  %479 = sext i32 %469 to i64, !dbg !71
  %480 = getelementptr float, ptr addrspace(1) %0, i64 %479, !dbg !71
  %481 = sext i32 %470 to i64, !dbg !71
  %482 = getelementptr float, ptr addrspace(1) %0, i64 %481, !dbg !71
  %483 = sext i32 %471 to i64, !dbg !71
  %484 = getelementptr float, ptr addrspace(1) %0, i64 %483, !dbg !71
  %485 = sext i32 %472 to i64, !dbg !71
  %486 = getelementptr float, ptr addrspace(1) %0, i64 %485, !dbg !71
  %487 = sext i32 %473 to i64, !dbg !71
  %488 = getelementptr float, ptr addrspace(1) %0, i64 %487, !dbg !71
  %489 = sext i32 %474 to i64, !dbg !71
  %490 = getelementptr float, ptr addrspace(1) %0, i64 %489, !dbg !71
  %491 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %476, i1 %21) #2, !dbg !72
  %492 = bitcast i32 %491 to float, !dbg !72
  %493 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %478, i1 %22) #2, !dbg !72
  %494 = bitcast i32 %493 to float, !dbg !72
  %495 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %480, i1 %23) #2, !dbg !72
  %496 = bitcast i32 %495 to float, !dbg !72
  %497 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %482, i1 %24) #2, !dbg !72
  %498 = bitcast i32 %497 to float, !dbg !72
  %499 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %484, i1 %25) #2, !dbg !72
  %500 = bitcast i32 %499 to float, !dbg !72
  %501 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %486, i1 %26) #2, !dbg !72
  %502 = bitcast i32 %501 to float, !dbg !72
  %503 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %488, i1 %27) #2, !dbg !72
  %504 = bitcast i32 %503 to float, !dbg !72
  %505 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %490, i1 %28) #2, !dbg !72
  %506 = bitcast i32 %505 to float, !dbg !72
  %507 = add i32 %45, 515, !dbg !73
  %508 = add i32 %507, %46, !dbg !74
  %509 = add i32 %507, %47, !dbg !74
  %510 = add i32 %507, %48, !dbg !74
  %511 = add i32 %507, %49, !dbg !74
  %512 = add i32 %507, %50, !dbg !74
  %513 = add i32 %507, %51, !dbg !74
  %514 = add i32 %507, %52, !dbg !74
  %515 = add i32 %507, %53, !dbg !74
  %516 = sext i32 %508 to i64, !dbg !75
  %517 = getelementptr float, ptr addrspace(1) %0, i64 %516, !dbg !75
  %518 = sext i32 %509 to i64, !dbg !75
  %519 = getelementptr float, ptr addrspace(1) %0, i64 %518, !dbg !75
  %520 = sext i32 %510 to i64, !dbg !75
  %521 = getelementptr float, ptr addrspace(1) %0, i64 %520, !dbg !75
  %522 = sext i32 %511 to i64, !dbg !75
  %523 = getelementptr float, ptr addrspace(1) %0, i64 %522, !dbg !75
  %524 = sext i32 %512 to i64, !dbg !75
  %525 = getelementptr float, ptr addrspace(1) %0, i64 %524, !dbg !75
  %526 = sext i32 %513 to i64, !dbg !75
  %527 = getelementptr float, ptr addrspace(1) %0, i64 %526, !dbg !75
  %528 = sext i32 %514 to i64, !dbg !75
  %529 = getelementptr float, ptr addrspace(1) %0, i64 %528, !dbg !75
  %530 = sext i32 %515 to i64, !dbg !75
  %531 = getelementptr float, ptr addrspace(1) %0, i64 %530, !dbg !75
  %532 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %517, i1 %21) #2, !dbg !76
  %533 = bitcast i32 %532 to float, !dbg !76
  %534 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %519, i1 %22) #2, !dbg !76
  %535 = bitcast i32 %534 to float, !dbg !76
  %536 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %521, i1 %23) #2, !dbg !76
  %537 = bitcast i32 %536 to float, !dbg !76
  %538 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %523, i1 %24) #2, !dbg !76
  %539 = bitcast i32 %538 to float, !dbg !76
  %540 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %525, i1 %25) #2, !dbg !76
  %541 = bitcast i32 %540 to float, !dbg !76
  %542 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %527, i1 %26) #2, !dbg !76
  %543 = bitcast i32 %542 to float, !dbg !76
  %544 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %529, i1 %27) #2, !dbg !76
  %545 = bitcast i32 %544 to float, !dbg !76
  %546 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %531, i1 %28) #2, !dbg !76
  %547 = bitcast i32 %546 to float, !dbg !76
  %548 = add i32 %45, 768, !dbg !77
  %549 = add i32 %548, %46, !dbg !78
  %550 = add i32 %548, %47, !dbg !78
  %551 = add i32 %548, %48, !dbg !78
  %552 = add i32 %548, %49, !dbg !78
  %553 = add i32 %548, %50, !dbg !78
  %554 = add i32 %548, %51, !dbg !78
  %555 = add i32 %548, %52, !dbg !78
  %556 = add i32 %548, %53, !dbg !78
  %557 = sext i32 %549 to i64, !dbg !79
  %558 = getelementptr float, ptr addrspace(1) %0, i64 %557, !dbg !79
  %559 = sext i32 %550 to i64, !dbg !79
  %560 = getelementptr float, ptr addrspace(1) %0, i64 %559, !dbg !79
  %561 = sext i32 %551 to i64, !dbg !79
  %562 = getelementptr float, ptr addrspace(1) %0, i64 %561, !dbg !79
  %563 = sext i32 %552 to i64, !dbg !79
  %564 = getelementptr float, ptr addrspace(1) %0, i64 %563, !dbg !79
  %565 = sext i32 %553 to i64, !dbg !79
  %566 = getelementptr float, ptr addrspace(1) %0, i64 %565, !dbg !79
  %567 = sext i32 %554 to i64, !dbg !79
  %568 = getelementptr float, ptr addrspace(1) %0, i64 %567, !dbg !79
  %569 = sext i32 %555 to i64, !dbg !79
  %570 = getelementptr float, ptr addrspace(1) %0, i64 %569, !dbg !79
  %571 = sext i32 %556 to i64, !dbg !79
  %572 = getelementptr float, ptr addrspace(1) %0, i64 %571, !dbg !79
  %573 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %558, i1 %21) #2, !dbg !80
  %574 = bitcast i32 %573 to float, !dbg !80
  %575 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %560, i1 %22) #2, !dbg !80
  %576 = bitcast i32 %575 to float, !dbg !80
  %577 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %562, i1 %23) #2, !dbg !80
  %578 = bitcast i32 %577 to float, !dbg !80
  %579 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %564, i1 %24) #2, !dbg !80
  %580 = bitcast i32 %579 to float, !dbg !80
  %581 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %566, i1 %25) #2, !dbg !80
  %582 = bitcast i32 %581 to float, !dbg !80
  %583 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %568, i1 %26) #2, !dbg !80
  %584 = bitcast i32 %583 to float, !dbg !80
  %585 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %570, i1 %27) #2, !dbg !80
  %586 = bitcast i32 %585 to float, !dbg !80
  %587 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %572, i1 %28) #2, !dbg !80
  %588 = bitcast i32 %587 to float, !dbg !80
  %589 = add i32 %45, 769, !dbg !81
  %590 = add i32 %589, %46, !dbg !82
  %591 = add i32 %589, %47, !dbg !82
  %592 = add i32 %589, %48, !dbg !82
  %593 = add i32 %589, %49, !dbg !82
  %594 = add i32 %589, %50, !dbg !82
  %595 = add i32 %589, %51, !dbg !82
  %596 = add i32 %589, %52, !dbg !82
  %597 = add i32 %589, %53, !dbg !82
  %598 = sext i32 %590 to i64, !dbg !83
  %599 = getelementptr float, ptr addrspace(1) %0, i64 %598, !dbg !83
  %600 = sext i32 %591 to i64, !dbg !83
  %601 = getelementptr float, ptr addrspace(1) %0, i64 %600, !dbg !83
  %602 = sext i32 %592 to i64, !dbg !83
  %603 = getelementptr float, ptr addrspace(1) %0, i64 %602, !dbg !83
  %604 = sext i32 %593 to i64, !dbg !83
  %605 = getelementptr float, ptr addrspace(1) %0, i64 %604, !dbg !83
  %606 = sext i32 %594 to i64, !dbg !83
  %607 = getelementptr float, ptr addrspace(1) %0, i64 %606, !dbg !83
  %608 = sext i32 %595 to i64, !dbg !83
  %609 = getelementptr float, ptr addrspace(1) %0, i64 %608, !dbg !83
  %610 = sext i32 %596 to i64, !dbg !83
  %611 = getelementptr float, ptr addrspace(1) %0, i64 %610, !dbg !83
  %612 = sext i32 %597 to i64, !dbg !83
  %613 = getelementptr float, ptr addrspace(1) %0, i64 %612, !dbg !83
  %614 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %599, i1 %21) #2, !dbg !84
  %615 = bitcast i32 %614 to float, !dbg !84
  %616 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %601, i1 %22) #2, !dbg !84
  %617 = bitcast i32 %616 to float, !dbg !84
  %618 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %603, i1 %23) #2, !dbg !84
  %619 = bitcast i32 %618 to float, !dbg !84
  %620 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %605, i1 %24) #2, !dbg !84
  %621 = bitcast i32 %620 to float, !dbg !84
  %622 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %607, i1 %25) #2, !dbg !84
  %623 = bitcast i32 %622 to float, !dbg !84
  %624 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %609, i1 %26) #2, !dbg !84
  %625 = bitcast i32 %624 to float, !dbg !84
  %626 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %611, i1 %27) #2, !dbg !84
  %627 = bitcast i32 %626 to float, !dbg !84
  %628 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %613, i1 %28) #2, !dbg !84
  %629 = bitcast i32 %628 to float, !dbg !84
  %630 = add i32 %45, 770, !dbg !85
  %631 = add i32 %630, %46, !dbg !86
  %632 = add i32 %630, %47, !dbg !86
  %633 = add i32 %630, %48, !dbg !86
  %634 = add i32 %630, %49, !dbg !86
  %635 = add i32 %630, %50, !dbg !86
  %636 = add i32 %630, %51, !dbg !86
  %637 = add i32 %630, %52, !dbg !86
  %638 = add i32 %630, %53, !dbg !86
  %639 = sext i32 %631 to i64, !dbg !87
  %640 = getelementptr float, ptr addrspace(1) %0, i64 %639, !dbg !87
  %641 = sext i32 %632 to i64, !dbg !87
  %642 = getelementptr float, ptr addrspace(1) %0, i64 %641, !dbg !87
  %643 = sext i32 %633 to i64, !dbg !87
  %644 = getelementptr float, ptr addrspace(1) %0, i64 %643, !dbg !87
  %645 = sext i32 %634 to i64, !dbg !87
  %646 = getelementptr float, ptr addrspace(1) %0, i64 %645, !dbg !87
  %647 = sext i32 %635 to i64, !dbg !87
  %648 = getelementptr float, ptr addrspace(1) %0, i64 %647, !dbg !87
  %649 = sext i32 %636 to i64, !dbg !87
  %650 = getelementptr float, ptr addrspace(1) %0, i64 %649, !dbg !87
  %651 = sext i32 %637 to i64, !dbg !87
  %652 = getelementptr float, ptr addrspace(1) %0, i64 %651, !dbg !87
  %653 = sext i32 %638 to i64, !dbg !87
  %654 = getelementptr float, ptr addrspace(1) %0, i64 %653, !dbg !87
  %655 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %640, i1 %21) #2, !dbg !88
  %656 = bitcast i32 %655 to float, !dbg !88
  %657 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %642, i1 %22) #2, !dbg !88
  %658 = bitcast i32 %657 to float, !dbg !88
  %659 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %644, i1 %23) #2, !dbg !88
  %660 = bitcast i32 %659 to float, !dbg !88
  %661 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %646, i1 %24) #2, !dbg !88
  %662 = bitcast i32 %661 to float, !dbg !88
  %663 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %648, i1 %25) #2, !dbg !88
  %664 = bitcast i32 %663 to float, !dbg !88
  %665 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %650, i1 %26) #2, !dbg !88
  %666 = bitcast i32 %665 to float, !dbg !88
  %667 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %652, i1 %27) #2, !dbg !88
  %668 = bitcast i32 %667 to float, !dbg !88
  %669 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %654, i1 %28) #2, !dbg !88
  %670 = bitcast i32 %669 to float, !dbg !88
  %671 = add i32 %45, 771, !dbg !89
  %672 = add i32 %671, %46, !dbg !90
  %673 = add i32 %671, %47, !dbg !90
  %674 = add i32 %671, %48, !dbg !90
  %675 = add i32 %671, %49, !dbg !90
  %676 = add i32 %671, %50, !dbg !90
  %677 = add i32 %671, %51, !dbg !90
  %678 = add i32 %671, %52, !dbg !90
  %679 = add i32 %671, %53, !dbg !90
  %680 = sext i32 %672 to i64, !dbg !91
  %681 = getelementptr float, ptr addrspace(1) %0, i64 %680, !dbg !91
  %682 = sext i32 %673 to i64, !dbg !91
  %683 = getelementptr float, ptr addrspace(1) %0, i64 %682, !dbg !91
  %684 = sext i32 %674 to i64, !dbg !91
  %685 = getelementptr float, ptr addrspace(1) %0, i64 %684, !dbg !91
  %686 = sext i32 %675 to i64, !dbg !91
  %687 = getelementptr float, ptr addrspace(1) %0, i64 %686, !dbg !91
  %688 = sext i32 %676 to i64, !dbg !91
  %689 = getelementptr float, ptr addrspace(1) %0, i64 %688, !dbg !91
  %690 = sext i32 %677 to i64, !dbg !91
  %691 = getelementptr float, ptr addrspace(1) %0, i64 %690, !dbg !91
  %692 = sext i32 %678 to i64, !dbg !91
  %693 = getelementptr float, ptr addrspace(1) %0, i64 %692, !dbg !91
  %694 = sext i32 %679 to i64, !dbg !91
  %695 = getelementptr float, ptr addrspace(1) %0, i64 %694, !dbg !91
  %696 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %681, i1 %21) #2, !dbg !92
  %697 = bitcast i32 %696 to float, !dbg !92
  %698 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %683, i1 %22) #2, !dbg !92
  %699 = bitcast i32 %698 to float, !dbg !92
  %700 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %685, i1 %23) #2, !dbg !92
  %701 = bitcast i32 %700 to float, !dbg !92
  %702 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %687, i1 %24) #2, !dbg !92
  %703 = bitcast i32 %702 to float, !dbg !92
  %704 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %689, i1 %25) #2, !dbg !92
  %705 = bitcast i32 %704 to float, !dbg !92
  %706 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %691, i1 %26) #2, !dbg !92
  %707 = bitcast i32 %706 to float, !dbg !92
  %708 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %693, i1 %27) #2, !dbg !92
  %709 = bitcast i32 %708 to float, !dbg !92
  %710 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %695, i1 %28) #2, !dbg !92
  %711 = bitcast i32 %710 to float, !dbg !92
  %712 = fadd float %79, %121, !dbg !93
  %713 = fadd float %81, %123, !dbg !93
  %714 = fadd float %83, %125, !dbg !93
  %715 = fadd float %85, %127, !dbg !93
  %716 = fadd float %87, %129, !dbg !93
  %717 = fadd float %89, %131, !dbg !93
  %718 = fadd float %91, %133, !dbg !93
  %719 = fadd float %93, %135, !dbg !93
  %720 = fadd float %712, %163, !dbg !94
  %721 = fadd float %713, %165, !dbg !94
  %722 = fadd float %714, %167, !dbg !94
  %723 = fadd float %715, %169, !dbg !94
  %724 = fadd float %716, %171, !dbg !94
  %725 = fadd float %717, %173, !dbg !94
  %726 = fadd float %718, %175, !dbg !94
  %727 = fadd float %719, %177, !dbg !94
  %728 = fadd float %720, %205, !dbg !95
  %729 = fadd float %721, %207, !dbg !95
  %730 = fadd float %722, %209, !dbg !95
  %731 = fadd float %723, %211, !dbg !95
  %732 = fadd float %724, %213, !dbg !95
  %733 = fadd float %725, %215, !dbg !95
  %734 = fadd float %726, %217, !dbg !95
  %735 = fadd float %727, %219, !dbg !95
  %736 = fadd float %728, %246, !dbg !96
  %737 = fadd float %729, %248, !dbg !96
  %738 = fadd float %730, %250, !dbg !96
  %739 = fadd float %731, %252, !dbg !96
  %740 = fadd float %732, %254, !dbg !96
  %741 = fadd float %733, %256, !dbg !96
  %742 = fadd float %734, %258, !dbg !96
  %743 = fadd float %735, %260, !dbg !96
  %744 = fadd float %736, %287, !dbg !97
  %745 = fadd float %737, %289, !dbg !97
  %746 = fadd float %738, %291, !dbg !97
  %747 = fadd float %739, %293, !dbg !97
  %748 = fadd float %740, %295, !dbg !97
  %749 = fadd float %741, %297, !dbg !97
  %750 = fadd float %742, %299, !dbg !97
  %751 = fadd float %743, %301, !dbg !97
  %752 = fadd float %744, %328, !dbg !98
  %753 = fadd float %745, %330, !dbg !98
  %754 = fadd float %746, %332, !dbg !98
  %755 = fadd float %747, %334, !dbg !98
  %756 = fadd float %748, %336, !dbg !98
  %757 = fadd float %749, %338, !dbg !98
  %758 = fadd float %750, %340, !dbg !98
  %759 = fadd float %751, %342, !dbg !98
  %760 = fadd float %752, %369, !dbg !99
  %761 = fadd float %753, %371, !dbg !99
  %762 = fadd float %754, %373, !dbg !99
  %763 = fadd float %755, %375, !dbg !99
  %764 = fadd float %756, %377, !dbg !99
  %765 = fadd float %757, %379, !dbg !99
  %766 = fadd float %758, %381, !dbg !99
  %767 = fadd float %759, %383, !dbg !99
  %768 = fadd float %760, %410, !dbg !100
  %769 = fadd float %761, %412, !dbg !100
  %770 = fadd float %762, %414, !dbg !100
  %771 = fadd float %763, %416, !dbg !100
  %772 = fadd float %764, %418, !dbg !100
  %773 = fadd float %765, %420, !dbg !100
  %774 = fadd float %766, %422, !dbg !100
  %775 = fadd float %767, %424, !dbg !100
  %776 = fadd float %768, %451, !dbg !101
  %777 = fadd float %769, %453, !dbg !101
  %778 = fadd float %770, %455, !dbg !101
  %779 = fadd float %771, %457, !dbg !101
  %780 = fadd float %772, %459, !dbg !101
  %781 = fadd float %773, %461, !dbg !101
  %782 = fadd float %774, %463, !dbg !101
  %783 = fadd float %775, %465, !dbg !101
  %784 = fadd float %776, %492, !dbg !102
  %785 = fadd float %777, %494, !dbg !102
  %786 = fadd float %778, %496, !dbg !102
  %787 = fadd float %779, %498, !dbg !102
  %788 = fadd float %780, %500, !dbg !102
  %789 = fadd float %781, %502, !dbg !102
  %790 = fadd float %782, %504, !dbg !102
  %791 = fadd float %783, %506, !dbg !102
  %792 = fadd float %784, %533, !dbg !103
  %793 = fadd float %785, %535, !dbg !103
  %794 = fadd float %786, %537, !dbg !103
  %795 = fadd float %787, %539, !dbg !103
  %796 = fadd float %788, %541, !dbg !103
  %797 = fadd float %789, %543, !dbg !103
  %798 = fadd float %790, %545, !dbg !103
  %799 = fadd float %791, %547, !dbg !103
  %800 = fadd float %792, %574, !dbg !104
  %801 = fadd float %793, %576, !dbg !104
  %802 = fadd float %794, %578, !dbg !104
  %803 = fadd float %795, %580, !dbg !104
  %804 = fadd float %796, %582, !dbg !104
  %805 = fadd float %797, %584, !dbg !104
  %806 = fadd float %798, %586, !dbg !104
  %807 = fadd float %799, %588, !dbg !104
  %808 = fadd float %800, %615, !dbg !105
  %809 = fadd float %801, %617, !dbg !105
  %810 = fadd float %802, %619, !dbg !105
  %811 = fadd float %803, %621, !dbg !105
  %812 = fadd float %804, %623, !dbg !105
  %813 = fadd float %805, %625, !dbg !105
  %814 = fadd float %806, %627, !dbg !105
  %815 = fadd float %807, %629, !dbg !105
  %816 = fadd float %808, %656, !dbg !106
  %817 = fadd float %809, %658, !dbg !106
  %818 = fadd float %810, %660, !dbg !106
  %819 = fadd float %811, %662, !dbg !106
  %820 = fadd float %812, %664, !dbg !106
  %821 = fadd float %813, %666, !dbg !106
  %822 = fadd float %814, %668, !dbg !106
  %823 = fadd float %815, %670, !dbg !106
  %824 = fadd float %816, %697, !dbg !107
  %825 = fadd float %817, %699, !dbg !107
  %826 = fadd float %818, %701, !dbg !107
  %827 = fadd float %819, %703, !dbg !107
  %828 = fadd float %820, %705, !dbg !107
  %829 = fadd float %821, %707, !dbg !107
  %830 = fadd float %822, %709, !dbg !107
  %831 = fadd float %823, %711, !dbg !107
  %832 = fmul float %824, 6.250000e-02, !dbg !108
  %833 = fmul float %825, 6.250000e-02, !dbg !108
  %834 = fmul float %826, 6.250000e-02, !dbg !108
  %835 = fmul float %827, 6.250000e-02, !dbg !108
  %836 = fmul float %828, 6.250000e-02, !dbg !108
  %837 = fmul float %829, 6.250000e-02, !dbg !108
  %838 = fmul float %830, 6.250000e-02, !dbg !108
  %839 = fmul float %831, 6.250000e-02, !dbg !108
  %840 = shl i32 %37, 4, !dbg !109
  %841 = shl i32 %38, 4, !dbg !109
  %842 = shl i32 %41, 16, !dbg !110
  %843 = add i32 %842, %.decomposed20, !dbg !111
  %844 = add i32 %843, %840, !dbg !112
  %845 = add i32 %843, %841, !dbg !112
  %846 = sext i32 %844 to i64, !dbg !113
  %847 = getelementptr float, ptr addrspace(1) %1, i64 %846, !dbg !113
  %848 = sext i32 %845 to i64, !dbg !113
  %849 = getelementptr float, ptr addrspace(1) %1, i64 %848, !dbg !113
  %850 = shl i32 %7, 5, !dbg !114
  %851 = and i32 %850, 992, !dbg !114
  %852 = or disjoint i32 %851, %9, !dbg !114
  %853 = and i32 %10, 508, !dbg !114
  %854 = lshr exact i32 %851, 3, !dbg !114
  %855 = add nuw nsw i32 %854, %852, !dbg !114
  %856 = zext nneg i32 %855 to i64, !dbg !114
  %857 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %856, !dbg !114
  %858 = bitcast float %832 to <1 x i32>, !dbg !114
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %857, <1 x i32> %858, i1 true) #2, !dbg !114
  %859 = or disjoint i32 %852, 4, !dbg !114
  %860 = add nuw nsw i32 %859, %854, !dbg !114
  %861 = zext nneg i32 %860 to i64, !dbg !114
  %862 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %861, !dbg !114
  %863 = bitcast float %833 to <1 x i32>, !dbg !114
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %862, <1 x i32> %863, i1 true) #2, !dbg !114
  %864 = or disjoint i32 %852, 8, !dbg !114
  %865 = add nuw nsw i32 %864, %854, !dbg !114
  %866 = zext nneg i32 %865 to i64, !dbg !114
  %867 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %866, !dbg !114
  %868 = bitcast float %834 to <1 x i32>, !dbg !114
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %867, <1 x i32> %868, i1 true) #2, !dbg !114
  %869 = or disjoint i32 %852, 12, !dbg !114
  %870 = add nuw nsw i32 %869, %854, !dbg !114
  %871 = zext nneg i32 %870 to i64, !dbg !114
  %872 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %871, !dbg !114
  %873 = bitcast float %835 to <1 x i32>, !dbg !114
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %872, <1 x i32> %873, i1 true) #2, !dbg !114
  %874 = or disjoint i32 %852, 16, !dbg !114
  %875 = add nuw nsw i32 %874, %854, !dbg !114
  %876 = zext nneg i32 %875 to i64, !dbg !114
  %877 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %876, !dbg !114
  %878 = bitcast float %836 to <1 x i32>, !dbg !114
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %877, <1 x i32> %878, i1 true) #2, !dbg !114
  %879 = or disjoint i32 %852, 20, !dbg !114
  %880 = add nuw nsw i32 %879, %854, !dbg !114
  %881 = zext nneg i32 %880 to i64, !dbg !114
  %882 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %881, !dbg !114
  %883 = bitcast float %837 to <1 x i32>, !dbg !114
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %882, <1 x i32> %883, i1 true) #2, !dbg !114
  %884 = or disjoint i32 %852, 24, !dbg !114
  %885 = add nuw nsw i32 %884, %854, !dbg !114
  %886 = zext nneg i32 %885 to i64, !dbg !114
  %887 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %886, !dbg !114
  %888 = bitcast float %838 to <1 x i32>, !dbg !114
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %887, <1 x i32> %888, i1 true) #2, !dbg !114
  %889 = or disjoint i32 %852, 28, !dbg !114
  %890 = add nuw nsw i32 %889, %854, !dbg !114
  %891 = zext nneg i32 %890 to i64, !dbg !114
  %892 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %891, !dbg !114
  %893 = bitcast float %839 to <1 x i32>, !dbg !114
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %892, <1 x i32> %893, i1 true) #2, !dbg !114
  tail call void @llvm.nvvm.barrier0(), !dbg !114
  %894 = lshr i32 %10, 3, !dbg !114
  %895 = and i32 %894, 60, !dbg !114
  %896 = add nuw nsw i32 %895, %853, !dbg !114
  %897 = zext nneg i32 %896 to i64, !dbg !114
  %898 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %897, !dbg !114
  %899 = or disjoint i32 %853, 512, !dbg !114
  %900 = lshr i32 %899, 3, !dbg !114
  %901 = and i32 %900, 124, !dbg !114
  %902 = add nuw nsw i32 %901, %899, !dbg !114
  %903 = zext nneg i32 %902 to i64, !dbg !114
  %904 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %903, !dbg !114
  %905 = load <4 x i32>, ptr addrspace(3) %904, align 16, !dbg !114
  %.extract = load i32, ptr addrspace(3) %898, align 16, !dbg !114
  %906 = getelementptr inbounds i8, ptr addrspace(3) %898, i64 4, !dbg !114
  %.extract12 = load i32, ptr addrspace(3) %906, align 4, !dbg !114
  %907 = getelementptr inbounds i8, ptr addrspace(3) %898, i64 8, !dbg !114
  %.extract13 = load i32, ptr addrspace(3) %907, align 8, !dbg !114
  %908 = getelementptr inbounds i8, ptr addrspace(3) %898, i64 12, !dbg !114
  %.extract14 = load i32, ptr addrspace(3) %908, align 4, !dbg !114
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %847, i1 %29) #2, !dbg !114
  %.extract15 = extractelement <4 x i32> %905, i64 0, !dbg !114
  %.extract16 = extractelement <4 x i32> %905, i64 1, !dbg !114
  %.extract17 = extractelement <4 x i32> %905, i64 2, !dbg !114
  %.extract18 = extractelement <4 x i32> %905, i64 3, !dbg !114
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %849, i1 %29) #2, !dbg !114
  ret void, !dbg !115
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfswrjki4gvaogwrpfqbl3mx66ja6zq6m4djr6643hrfrev7zzcy.py", directory: "inductor_cache/fs")
!4 = !{ptr @triton_poi_fused_avg_pool2d_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_14", linkageName: "triton_poi_fused_avg_pool2d_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 32, scope: !7)
!24 = !DILocation(line: 34, column: 42, scope: !7)
!25 = !DILocation(line: 34, column: 37, scope: !7)
!26 = !DILocation(line: 34, column: 53, scope: !7)
!27 = !DILocation(line: 34, column: 47, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 58, scope: !7)
!30 = !DILocation(line: 35, column: 34, scope: !7)
!31 = !DILocation(line: 35, column: 41, scope: !7)
!32 = !DILocation(line: 35, column: 51, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 62, scope: !7)
!35 = !DILocation(line: 36, column: 34, scope: !7)
!36 = !DILocation(line: 36, column: 41, scope: !7)
!37 = !DILocation(line: 36, column: 51, scope: !7)
!38 = !DILocation(line: 36, column: 30, scope: !7)
!39 = !DILocation(line: 36, column: 62, scope: !7)
!40 = !DILocation(line: 37, column: 34, scope: !7)
!41 = !DILocation(line: 37, column: 41, scope: !7)
!42 = !DILocation(line: 37, column: 51, scope: !7)
!43 = !DILocation(line: 37, column: 30, scope: !7)
!44 = !DILocation(line: 37, column: 62, scope: !7)
!45 = !DILocation(line: 38, column: 43, scope: !7)
!46 = !DILocation(line: 38, column: 53, scope: !7)
!47 = !DILocation(line: 38, column: 30, scope: !7)
!48 = !DILocation(line: 38, column: 64, scope: !7)
!49 = !DILocation(line: 39, column: 43, scope: !7)
!50 = !DILocation(line: 39, column: 53, scope: !7)
!51 = !DILocation(line: 39, column: 30, scope: !7)
!52 = !DILocation(line: 39, column: 64, scope: !7)
!53 = !DILocation(line: 40, column: 44, scope: !7)
!54 = !DILocation(line: 40, column: 54, scope: !7)
!55 = !DILocation(line: 40, column: 31, scope: !7)
!56 = !DILocation(line: 40, column: 65, scope: !7)
!57 = !DILocation(line: 41, column: 44, scope: !7)
!58 = !DILocation(line: 41, column: 54, scope: !7)
!59 = !DILocation(line: 41, column: 31, scope: !7)
!60 = !DILocation(line: 41, column: 65, scope: !7)
!61 = !DILocation(line: 42, column: 44, scope: !7)
!62 = !DILocation(line: 42, column: 54, scope: !7)
!63 = !DILocation(line: 42, column: 31, scope: !7)
!64 = !DILocation(line: 42, column: 65, scope: !7)
!65 = !DILocation(line: 43, column: 44, scope: !7)
!66 = !DILocation(line: 43, column: 54, scope: !7)
!67 = !DILocation(line: 43, column: 31, scope: !7)
!68 = !DILocation(line: 43, column: 65, scope: !7)
!69 = !DILocation(line: 44, column: 44, scope: !7)
!70 = !DILocation(line: 44, column: 54, scope: !7)
!71 = !DILocation(line: 44, column: 31, scope: !7)
!72 = !DILocation(line: 44, column: 65, scope: !7)
!73 = !DILocation(line: 45, column: 44, scope: !7)
!74 = !DILocation(line: 45, column: 54, scope: !7)
!75 = !DILocation(line: 45, column: 31, scope: !7)
!76 = !DILocation(line: 45, column: 65, scope: !7)
!77 = !DILocation(line: 46, column: 44, scope: !7)
!78 = !DILocation(line: 46, column: 54, scope: !7)
!79 = !DILocation(line: 46, column: 31, scope: !7)
!80 = !DILocation(line: 46, column: 65, scope: !7)
!81 = !DILocation(line: 47, column: 44, scope: !7)
!82 = !DILocation(line: 47, column: 54, scope: !7)
!83 = !DILocation(line: 47, column: 31, scope: !7)
!84 = !DILocation(line: 47, column: 65, scope: !7)
!85 = !DILocation(line: 48, column: 44, scope: !7)
!86 = !DILocation(line: 48, column: 54, scope: !7)
!87 = !DILocation(line: 48, column: 31, scope: !7)
!88 = !DILocation(line: 48, column: 65, scope: !7)
!89 = !DILocation(line: 49, column: 44, scope: !7)
!90 = !DILocation(line: 49, column: 54, scope: !7)
!91 = !DILocation(line: 49, column: 31, scope: !7)
!92 = !DILocation(line: 49, column: 65, scope: !7)
!93 = !DILocation(line: 50, column: 18, scope: !7)
!94 = !DILocation(line: 51, column: 18, scope: !7)
!95 = !DILocation(line: 52, column: 18, scope: !7)
!96 = !DILocation(line: 53, column: 18, scope: !7)
!97 = !DILocation(line: 54, column: 19, scope: !7)
!98 = !DILocation(line: 55, column: 20, scope: !7)
!99 = !DILocation(line: 56, column: 20, scope: !7)
!100 = !DILocation(line: 57, column: 20, scope: !7)
!101 = !DILocation(line: 58, column: 20, scope: !7)
!102 = !DILocation(line: 59, column: 20, scope: !7)
!103 = !DILocation(line: 60, column: 20, scope: !7)
!104 = !DILocation(line: 61, column: 20, scope: !7)
!105 = !DILocation(line: 62, column: 20, scope: !7)
!106 = !DILocation(line: 63, column: 20, scope: !7)
!107 = !DILocation(line: 64, column: 20, scope: !7)
!108 = !DILocation(line: 66, column: 20, scope: !7)
!109 = !DILocation(line: 67, column: 33, scope: !7)
!110 = !DILocation(line: 67, column: 44, scope: !7)
!111 = !DILocation(line: 67, column: 30, scope: !7)
!112 = !DILocation(line: 67, column: 38, scope: !7)
!113 = !DILocation(line: 67, column: 25, scope: !7)
!114 = !DILocation(line: 67, column: 56, scope: !7)
!115 = !DILocation(line: 67, column: 4, scope: !7)
