; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_avg_pool2d_native_group_norm_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 6, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = and i32 %10, 64, !dbg !12
  %13 = lshr i32 %10, 1, !dbg !12
  %14 = and i32 %13, 63, !dbg !12
  %15 = or disjoint i32 %9, %11, !dbg !13
  %16 = or disjoint i32 %9, %14, !dbg !13
  %17 = icmp slt i32 %15, 128, !dbg !14
  %18 = icmp slt i32 %16, 128, !dbg !14
  %.lobit = lshr exact i32 %12, 6, !dbg !15
  %19 = shl i32 %10, 2, !dbg !15
  %20 = and i32 %19, 4, !dbg !15
  %21 = shl i32 %15, 11, !dbg !16
  %22 = shl i32 %16, 9, !dbg !17
  %23 = lshr exact i32 %12, 5
  %invariant.op = or disjoint i32 %23, %21, !dbg !18
  %24 = or disjoint i32 %22, %20
  %25 = shl i32 %10, 3
  %26 = and i32 %25, 504
  %27 = or disjoint i32 %26, %.lobit
  %28 = and i32 %19, 252
  %29 = shl nuw nsw i32 %12, 2
  %30 = or disjoint i32 %28, %29
  %31 = lshr exact i32 %26, 1
  %32 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %31
  %33 = getelementptr inbounds float, ptr addrspace(3) %32, i32 %27
  %34 = or disjoint i32 %27, 2
  %35 = getelementptr inbounds float, ptr addrspace(3) %32, i32 %34
  %36 = or disjoint i32 %27, 4
  %37 = getelementptr inbounds float, ptr addrspace(3) %32, i32 %36
  %38 = or disjoint i32 %27, 6
  %39 = getelementptr inbounds float, ptr addrspace(3) %32, i32 %38
  %40 = lshr exact i32 %30, 1
  %41 = and i32 %40, 252
  %42 = getelementptr float, ptr addrspace(3) @global_smem, i32 %41
  %43 = getelementptr float, ptr addrspace(3) %42, i32 %30
  %44 = sext i32 %24 to i64, !dbg !18
  %45 = zext i32 %invariant.op to i64, !dbg !18
  %invariant.gep = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !18
  %46 = getelementptr inbounds i8, ptr addrspace(3) %43, i32 4
  %47 = getelementptr inbounds i8, ptr addrspace(3) %43, i32 8
  %48 = getelementptr inbounds i8, ptr addrspace(3) %43, i32 12
  %49 = insertelement <4 x i1> poison, i1 %17, i64 0, !dbg !19
  %50 = shufflevector <4 x i1> %49, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !19
  br label %51, !dbg !18

51:                                               ; preds = %7, %._crit_edge
  %indvars.iv = phi i64 [ 0, %7 ], [ %indvars.iv.next, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %7 ], [ %203, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %7 ], [ %204, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %7 ], [ %205, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %7 ], [ %206, %._crit_edge ]
  %56 = phi float [ 0.000000e+00, %7 ], [ %199, %._crit_edge ]
  %57 = phi float [ 0.000000e+00, %7 ], [ %200, %._crit_edge ]
  %58 = phi float [ 0.000000e+00, %7 ], [ %201, %._crit_edge ]
  %59 = phi float [ 0.000000e+00, %7 ], [ %202, %._crit_edge ]
  %60 = phi <4 x float> [ zeroinitializer, %7 ], [ %198, %._crit_edge ]
  %61 = shl nuw nsw i64 %indvars.iv, 2, !dbg !20
  %62 = add nuw nsw i64 %61, %45
  %sext = shl i64 %62, 32, !dbg !21
  %63 = ashr exact i64 %sext, 30, !dbg !21
  %64 = getelementptr i8, ptr addrspace(1) %0, i64 %63, !dbg !21
  %65 = shl i64 %62, 32, !dbg !21
  %sext53 = ashr exact i64 %65, 32, !dbg !21
  %66 = or i64 %sext53, 4, !dbg !21
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !21
  %68 = shl i64 %62, 32, !dbg !21
  %sext54 = ashr exact i64 %68, 32, !dbg !21
  %69 = or i64 %sext54, 8, !dbg !21
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !21
  %71 = shl i64 %62, 32, !dbg !21
  %sext55 = ashr exact i64 %71, 32, !dbg !21
  %72 = or i64 %sext55, 12, !dbg !21
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !21
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %17, i32 0, i1 %17) #5, !dbg !22
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %17, i32 0, i1 %17) #5, !dbg !22
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %17, i32 0, i1 %17) #5, !dbg !22
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %17, i32 0, i1 %17) #5, !dbg !22
  %78 = shl i64 %62, 32, !dbg !23
  %sext56 = ashr exact i64 %78, 32, !dbg !23
  %79 = or i64 %sext56, 1, !dbg !23
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !23
  %81 = shl i64 %62, 32, !dbg !23
  %sext57 = ashr exact i64 %81, 32, !dbg !23
  %82 = or i64 %sext57, 5, !dbg !23
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !23
  %84 = shl i64 %62, 32, !dbg !23
  %sext58 = ashr exact i64 %84, 32, !dbg !23
  %85 = or i64 %sext58, 9, !dbg !23
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !23
  %87 = shl i64 %62, 32, !dbg !23
  %sext59 = ashr exact i64 %87, 32, !dbg !23
  %88 = or i64 %sext59, 13, !dbg !23
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !23
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %17, i32 0, i1 %17) #5, !dbg !24
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %17, i32 0, i1 %17) #5, !dbg !24
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %17, i32 0, i1 %17) #5, !dbg !24
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %17, i32 0, i1 %17) #5, !dbg !24
  %94 = shl i64 %62, 32, !dbg !25
  %sext60 = ashr exact i64 %94, 32, !dbg !25
  %95 = or i64 %sext60, 16, !dbg !25
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !25
  %97 = shl i64 %62, 32, !dbg !25
  %sext61 = ashr exact i64 %97, 32, !dbg !25
  %98 = or i64 %sext61, 20, !dbg !25
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !25
  %100 = shl i64 %62, 32, !dbg !25
  %sext62 = ashr exact i64 %100, 32, !dbg !25
  %101 = or i64 %sext62, 24, !dbg !25
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !25
  %103 = shl i64 %62, 32, !dbg !25
  %sext63 = ashr exact i64 %103, 32, !dbg !25
  %104 = or i64 %sext63, 28, !dbg !25
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !25
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %17, i32 0, i1 %17) #5, !dbg !26
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %17, i32 0, i1 %17) #5, !dbg !26
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %17, i32 0, i1 %17) #5, !dbg !26
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %17, i32 0, i1 %17) #5, !dbg !26
  %110 = shl i64 %62, 32, !dbg !27
  %sext64 = ashr exact i64 %110, 32, !dbg !27
  %111 = or i64 %sext64, 17, !dbg !27
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !27
  %113 = shl i64 %62, 32, !dbg !27
  %sext65 = ashr exact i64 %113, 32, !dbg !27
  %114 = or i64 %sext65, 21, !dbg !27
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !27
  %116 = shl i64 %62, 32, !dbg !27
  %sext66 = ashr exact i64 %116, 32, !dbg !27
  %117 = or i64 %sext66, 25, !dbg !27
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !27
  %119 = shl i64 %62, 32, !dbg !27
  %sext67 = ashr exact i64 %119, 32, !dbg !27
  %120 = or i64 %sext67, 29, !dbg !27
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !27
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %17, i32 0, i1 %17) #5, !dbg !28
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %115, i1 %17, i32 0, i1 %17) #5, !dbg !28
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %17, i32 0, i1 %17) #5, !dbg !28
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %17, i32 0, i1 %17) #5, !dbg !28
  %126 = insertelement <4 x i32> poison, i32 %74, i64 0, !dbg !22
  %127 = insertelement <4 x i32> %126, i32 %75, i64 1, !dbg !22
  %128 = insertelement <4 x i32> %127, i32 %76, i64 2, !dbg !22
  %129 = insertelement <4 x i32> %128, i32 %77, i64 3, !dbg !22
  %130 = bitcast <4 x i32> %129 to <4 x float>, !dbg !22
  %131 = insertelement <4 x i32> poison, i32 %90, i64 0, !dbg !24
  %132 = insertelement <4 x i32> %131, i32 %91, i64 1, !dbg !24
  %133 = insertelement <4 x i32> %132, i32 %92, i64 2, !dbg !24
  %134 = insertelement <4 x i32> %133, i32 %93, i64 3, !dbg !24
  %135 = bitcast <4 x i32> %134 to <4 x float>, !dbg !24
  %136 = insertelement <4 x i32> poison, i32 %106, i64 0, !dbg !26
  %137 = insertelement <4 x i32> %136, i32 %107, i64 1, !dbg !26
  %138 = insertelement <4 x i32> %137, i32 %108, i64 2, !dbg !26
  %139 = insertelement <4 x i32> %138, i32 %109, i64 3, !dbg !26
  %140 = bitcast <4 x i32> %139 to <4 x float>, !dbg !26
  %141 = insertelement <4 x i32> poison, i32 %122, i64 0, !dbg !28
  %142 = insertelement <4 x i32> %141, i32 %123, i64 1, !dbg !28
  %143 = insertelement <4 x i32> %142, i32 %124, i64 2, !dbg !28
  %144 = insertelement <4 x i32> %143, i32 %125, i64 3, !dbg !28
  %145 = bitcast <4 x i32> %144 to <4 x float>, !dbg !28
  %146 = fadd <4 x float> %130, %135, !dbg !29
  %147 = fadd <4 x float> %146, %140, !dbg !30
  %148 = fadd <4 x float> %147, %145, !dbg !31
  %149 = fmul <4 x float> %148, splat (float 2.500000e-01), !dbg !32
  %150 = icmp eq i64 %indvars.iv, 0, !dbg !33
  br i1 %150, label %._crit_edge, label %151, !dbg !34

151:                                              ; preds = %51
  %152 = fsub <4 x float> %149, %60, !dbg !38
  %153 = extractelement <4 x float> %152, i64 0, !dbg !38
  %154 = fsub <4 x float> %149, %60, !dbg !38
  %155 = extractelement <4 x float> %154, i64 1, !dbg !38
  %156 = fsub <4 x float> %149, %60, !dbg !38
  %157 = extractelement <4 x float> %156, i64 2, !dbg !38
  %158 = fsub <4 x float> %149, %60, !dbg !38
  %159 = extractelement <4 x float> %158, i64 3, !dbg !38
  %160 = fadd float %52, 1.000000e+00, !dbg !39
  %161 = fadd float %53, 1.000000e+00, !dbg !39
  %162 = fadd float %54, 1.000000e+00, !dbg !39
  %163 = fadd float %55, 1.000000e+00, !dbg !39
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %153, float %160) #5, !dbg !40
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %155, float %161) #5, !dbg !40
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %157, float %162) #5, !dbg !40
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float %163) #5, !dbg !40
  %168 = insertelement <4 x float> poison, float %164, i64 0, !dbg !41
  %169 = insertelement <4 x float> %168, float %165, i64 1, !dbg !41
  %170 = insertelement <4 x float> %169, float %166, i64 2, !dbg !41
  %171 = insertelement <4 x float> %170, float %167, i64 3, !dbg !41
  %172 = fadd <4 x float> %60, %171, !dbg !41
  %173 = fsub <4 x float> %149, %172, !dbg !42
  %174 = fsub <4 x float> %149, %172, !dbg !42
  %175 = fsub <4 x float> %149, %172, !dbg !42
  %176 = fsub <4 x float> %149, %172, !dbg !42
  %177 = fmul <4 x float> %152, %173, !dbg !43
  %178 = extractelement <4 x float> %177, i64 0, !dbg !43
  %179 = fmul <4 x float> %154, %174, !dbg !43
  %180 = extractelement <4 x float> %179, i64 1, !dbg !43
  %181 = fmul <4 x float> %156, %175, !dbg !43
  %182 = extractelement <4 x float> %181, i64 2, !dbg !43
  %183 = fmul <4 x float> %158, %176, !dbg !43
  %184 = extractelement <4 x float> %183, i64 3, !dbg !43
  %185 = fadd float %56, %178, !dbg !44
  %186 = fadd float %57, %180, !dbg !44
  %187 = fadd float %58, %182, !dbg !44
  %188 = fadd float %59, %184, !dbg !44
  br label %._crit_edge, !dbg !34

._crit_edge:                                      ; preds = %51, %151
  %189 = phi float [ %185, %151 ], [ 0.000000e+00, %51 ], !dbg !37
  %190 = phi float [ %186, %151 ], [ 0.000000e+00, %51 ], !dbg !37
  %191 = phi float [ %187, %151 ], [ 0.000000e+00, %51 ], !dbg !37
  %192 = phi float [ %188, %151 ], [ 0.000000e+00, %51 ], !dbg !37
  %193 = phi float [ %160, %151 ], [ 1.000000e+00, %51 ], !dbg !37
  %194 = phi float [ %161, %151 ], [ 1.000000e+00, %51 ], !dbg !37
  %195 = phi float [ %162, %151 ], [ 1.000000e+00, %51 ], !dbg !37
  %196 = phi float [ %163, %151 ], [ 1.000000e+00, %51 ], !dbg !37
  %197 = phi <4 x float> [ %172, %151 ], [ %149, %51 ]
  %198 = select <4 x i1> %50, <4 x float> %197, <4 x float> %60, !dbg !19
  %199 = select i1 %17, float %189, float %56, !dbg !45
  %200 = select i1 %17, float %190, float %57, !dbg !45
  %201 = select i1 %17, float %191, float %58, !dbg !45
  %202 = select i1 %17, float %192, float %59, !dbg !45
  %203 = select i1 %17, float %193, float %52, !dbg !46
  %204 = select i1 %17, float %194, float %53, !dbg !46
  %205 = select i1 %17, float %195, float %54, !dbg !46
  %206 = select i1 %17, float %196, float %55, !dbg !46
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %indvars.iv, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %207 = extractelement <4 x float> %149, i64 0, !dbg !48
  %208 = bitcast float %207 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %33, <1 x i32> %208, i1 true) #5, !dbg !48
  %209 = extractelement <4 x float> %149, i64 1, !dbg !48
  %210 = bitcast float %209 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %35, <1 x i32> %210, i1 true) #5, !dbg !48
  %211 = extractelement <4 x float> %149, i64 2, !dbg !48
  %212 = bitcast float %211 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %37, <1 x i32> %212, i1 true) #5, !dbg !48
  %213 = extractelement <4 x float> %149, i64 3, !dbg !48
  %214 = bitcast float %213 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %39, <1 x i32> %214, i1 true) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %.extract = load i32, ptr addrspace(3) %43, align 16, !dbg !48
  %.extract14 = load i32, ptr addrspace(3) %46, align 4, !dbg !48
  %.extract15 = load i32, ptr addrspace(3) %47, align 8, !dbg !48
  %.extract16 = load i32, ptr addrspace(3) %48, align 4, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract14, i32 %.extract15, i32 %.extract16, ptr addrspace(1) %gep, i1 %18) #5, !dbg !48
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !18
  %215 = icmp samesign ult i64 %indvars.iv, 504, !dbg !18
  br i1 %215, label %51, label %216, !dbg !18

216:                                              ; preds = %._crit_edge
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %217 = extractelement <4 x float> %198, i64 0, !dbg !51
  %218 = extractelement <4 x float> %198, i64 1, !dbg !51
  %219 = fsub float %218, %217, !dbg !51
  %220 = fadd float %203, %204, !dbg !53
  %221 = fcmp oeq float %220, 0.000000e+00, !dbg !54
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %204, float %220) #5, !dbg !55
  %223 = select i1 %221, float 0.000000e+00, float %222, !dbg !56
  %224 = fmul float %219, %223, !dbg !57
  %225 = fadd float %217, %224, !dbg !58
  %226 = fadd float %199, %200, !dbg !59
  %227 = fmul float %219, %219, !dbg !60
  %228 = fmul float %227, %203, !dbg !61
  %229 = fmul float %228, %223, !dbg !62
  %230 = fadd float %226, %229, !dbg !63
  %231 = extractelement <4 x float> %198, i64 2, !dbg !51
  %232 = fsub float %231, %225, !dbg !51
  %233 = fadd float %205, %220, !dbg !53
  %234 = fcmp oeq float %233, 0.000000e+00, !dbg !54
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %205, float %233) #5, !dbg !55
  %236 = select i1 %234, float 0.000000e+00, float %235, !dbg !56
  %237 = fmul float %236, %232, !dbg !57
  %238 = fadd float %225, %237, !dbg !58
  %239 = fadd float %201, %230, !dbg !59
  %240 = fmul float %232, %232, !dbg !60
  %241 = fmul float %220, %240, !dbg !61
  %242 = fmul float %236, %241, !dbg !62
  %243 = fadd float %239, %242, !dbg !63
  %244 = extractelement <4 x float> %198, i64 3, !dbg !51
  %245 = fsub float %244, %238, !dbg !51
  %246 = fadd float %206, %233, !dbg !53
  %247 = fcmp oeq float %246, 0.000000e+00, !dbg !54
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %206, float %246) #5, !dbg !55
  %249 = select i1 %247, float 0.000000e+00, float %248, !dbg !56
  %250 = fmul float %249, %245, !dbg !57
  %251 = fadd float %238, %250, !dbg !58
  %252 = fadd float %202, %243, !dbg !59
  %253 = fmul float %245, %245, !dbg !60
  %254 = fmul float %233, %253, !dbg !61
  %255 = fmul float %249, %254, !dbg !62
  %256 = fadd float %252, %255, !dbg !63
  %257 = lshr i32 %10, 6, !dbg !49
  %258 = and i32 %257, 1, !dbg !49
  %259 = shl nuw nsw i32 %11, 1, !dbg !49
  %260 = or disjoint i32 %259, %258, !dbg !49
  %261 = getelementptr float, ptr addrspace(3) @global_smem, i32 %260, !dbg !49
  %262 = bitcast float %251 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %262, i1 true) #5, !dbg !49
  %263 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %260, !dbg !49
  %264 = bitcast float %256 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #5, !dbg !49
  %265 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %260, !dbg !49
  %266 = bitcast float %246 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %266, i1 true) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %267 = icmp slt i32 %10, 128, !dbg !49
  %268 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !49
  %269 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %268, i1 %267) #5, !dbg !49
  %270 = bitcast i32 %269 to float, !dbg !49
  %271 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %10, !dbg !49
  %272 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %271, i1 %267) #5, !dbg !49
  %273 = bitcast i32 %272 to float, !dbg !49
  %274 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %10, !dbg !49
  %275 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %274, i1 %267) #5, !dbg !49
  %276 = bitcast i32 %275 to float, !dbg !49
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 1, i32 31), !dbg !49
  %278 = bitcast i32 %277 to float, !dbg !49
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 1, i32 31), !dbg !49
  %280 = bitcast i32 %279 to float, !dbg !49
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 1, i32 31), !dbg !49
  %282 = bitcast i32 %281 to float, !dbg !49
  %283 = fsub float %278, %270, !dbg !51
  %284 = fadd float %276, %282, !dbg !53
  %285 = fcmp oeq float %284, 0.000000e+00, !dbg !54
  %286 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %282, float %284) #5, !dbg !55
  %287 = select i1 %285, float 0.000000e+00, float %286, !dbg !56
  %288 = fmul float %283, %287, !dbg !57
  %289 = fadd float %288, %270, !dbg !58
  %290 = fadd float %273, %280, !dbg !59
  %291 = fmul float %283, %283, !dbg !60
  %292 = fmul float %291, %276, !dbg !61
  %293 = fmul float %292, %287, !dbg !62
  %294 = fadd float %290, %293, !dbg !63
  %295 = and i32 %10, 1, !dbg !49
  %296 = icmp eq i32 %295, 0, !dbg !49
  %297 = and i1 %267, %296, !dbg !49
  %298 = bitcast float %289 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %298, i1 %297) #5, !dbg !49
  %299 = bitcast float %294 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %299, i1 %297) #5, !dbg !49
  %300 = bitcast float %284 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %300, i1 %297) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %301 = getelementptr float, ptr addrspace(3) @global_smem, i32 %259, !dbg !49
  %302 = load i32, ptr addrspace(3) %301, align 8, !dbg !49
  %303 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %259, !dbg !49
  %304 = load float, ptr addrspace(3) %303, align 8, !dbg !49
  %305 = sext i32 %15 to i64, !dbg !64
  %306 = getelementptr float, ptr addrspace(1) %2, i64 %305, !dbg !64
  %307 = icmp eq i32 %258, 0, !dbg !65
  %308 = and i1 %307, %17, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %302, ptr addrspace(1) %306, i1 %308) #5, !dbg !65
  %309 = getelementptr float, ptr addrspace(1) %3, i64 %305, !dbg !66
  %310 = bitcast float %304 to i32, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %310, ptr addrspace(1) %309, i1 %308) #5, !dbg !67
  %311 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %304, float 5.120000e+02) #5, !dbg !68
  %312 = fadd float %311, 0x3EE4F8B580000000, !dbg !69
  %313 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !70
  %.not.i = icmp eq i32 %313, 0, !dbg !70
  br i1 %.not.i, label %316, label %314, !dbg !70

314:                                              ; preds = %216
  %315 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %312), !dbg !70
  br label %__nv_rsqrtf.exit, !dbg !70

316:                                              ; preds = %216
  %317 = tail call float @llvm.nvvm.rsqrt.approx.f(float %312), !dbg !70
  br label %__nv_rsqrtf.exit, !dbg !70

__nv_rsqrtf.exit:                                 ; preds = %314, %316
  %.0.i = phi float [ %315, %314 ], [ %317, %316 ], !dbg !70
  %318 = getelementptr float, ptr addrspace(1) %4, i64 %305, !dbg !71
  %319 = bitcast float %.0.i to i32, !dbg !72
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %319, ptr addrspace(1) %318, i1 %308) #5, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm3tzt4o3gabxzg5ywte3rebsnjyrnhzep4xwf2ajb2aqnsqepab.py", directory: "inductor_cache/m3")
!4 = !{ptr @triton_red_fused_avg_pool2d_native_group_norm_17, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_avg_pool2d_native_group_norm_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_avg_pool2d_native_group_norm_17", linkageName: "triton_red_fused_avg_pool2d_native_group_norm_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 36, column: 54, scope: !7)
!17 = !DILocation(line: 52, column: 38, scope: !7)
!18 = !DILocation(line: 30, column: 36, scope: !7)
!19 = !DILocation(line: 49, column: 62, scope: !7)
!20 = !DILocation(line: 36, column: 44, scope: !7)
!21 = !DILocation(line: 36, column: 34, scope: !7)
!22 = !DILocation(line: 36, column: 59, scope: !7)
!23 = !DILocation(line: 37, column: 34, scope: !7)
!24 = !DILocation(line: 37, column: 63, scope: !7)
!25 = !DILocation(line: 38, column: 34, scope: !7)
!26 = !DILocation(line: 38, column: 64, scope: !7)
!27 = !DILocation(line: 39, column: 34, scope: !7)
!28 = !DILocation(line: 39, column: 64, scope: !7)
!29 = !DILocation(line: 40, column: 22, scope: !7)
!30 = !DILocation(line: 41, column: 22, scope: !7)
!31 = !DILocation(line: 42, column: 22, scope: !7)
!32 = !DILocation(line: 44, column: 22, scope: !7)
!33 = !DILocation(line: 47, column: 65, scope: !7)
!34 = !DILocation(line: 178, column: 7, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 47, column: 54, scope: !7)
!38 = !DILocation(line: 183, column: 24, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 184, column: 30, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 185, column: 34, scope: !35, inlinedAt: !37)
!41 = !DILocation(line: 185, column: 26, scope: !35, inlinedAt: !37)
!42 = !DILocation(line: 186, column: 39, scope: !35, inlinedAt: !37)
!43 = !DILocation(line: 186, column: 31, scope: !35, inlinedAt: !37)
!44 = !DILocation(line: 186, column: 22, scope: !35, inlinedAt: !37)
!45 = !DILocation(line: 50, column: 58, scope: !7)
!46 = !DILocation(line: 51, column: 66, scope: !7)
!47 = !DILocation(line: 52, column: 29, scope: !7)
!48 = !DILocation(line: 52, column: 49, scope: !7)
!49 = !DILocation(line: 204, column: 46, scope: !35, inlinedAt: !50)
!50 = !DILocation(line: 54, column: 44, scope: !7)
!51 = !DILocation(line: 192, column: 21, scope: !52, inlinedAt: !50)
!52 = distinct !DILexicalBlockFile(scope: !35, file: !36, discriminator: 0)
!53 = !DILocation(line: 193, column: 28, scope: !52, inlinedAt: !50)
!54 = !DILocation(line: 194, column: 39, scope: !52, inlinedAt: !50)
!55 = !DILocation(line: 194, column: 60, scope: !52, inlinedAt: !50)
!56 = !DILocation(line: 194, column: 49, scope: !52, inlinedAt: !50)
!57 = !DILocation(line: 196, column: 25, scope: !52, inlinedAt: !50)
!58 = !DILocation(line: 196, column: 17, scope: !52, inlinedAt: !50)
!59 = !DILocation(line: 197, column: 15, scope: !52, inlinedAt: !50)
!60 = !DILocation(line: 197, column: 30, scope: !52, inlinedAt: !50)
!61 = !DILocation(line: 197, column: 38, scope: !52, inlinedAt: !50)
!62 = !DILocation(line: 197, column: 49, scope: !52, inlinedAt: !50)
!63 = !DILocation(line: 197, column: 22, scope: !52, inlinedAt: !50)
!64 = !DILocation(line: 59, column: 25, scope: !7)
!65 = !DILocation(line: 59, column: 37, scope: !7)
!66 = !DILocation(line: 60, column: 25, scope: !7)
!67 = !DILocation(line: 60, column: 37, scope: !7)
!68 = !DILocation(line: 62, column: 20, scope: !7)
!69 = !DILocation(line: 64, column: 20, scope: !7)
!70 = !DILocation(line: 65, column: 28, scope: !7)
!71 = !DILocation(line: 66, column: 25, scope: !7)
!72 = !DILocation(line: 66, column: 37, scope: !7)
!73 = !DILocation(line: 66, column: 4, scope: !7)
