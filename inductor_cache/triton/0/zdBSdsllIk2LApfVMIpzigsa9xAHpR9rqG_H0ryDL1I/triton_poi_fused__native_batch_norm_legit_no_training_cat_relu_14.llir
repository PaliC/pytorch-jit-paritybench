; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 254, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %18 = sdiv i32 %.frozen, 64, !dbg !14
  %19 = srem i32 %18, 224, !dbg !15
  %20 = mul i32 %18, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %.frozen11 = freeze i32 %17, !dbg !17
  %21 = sdiv i32 %.frozen11, 14336, !dbg !17
  %22 = sext i32 %19 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !18
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !20
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !21
  %28 = bitcast i32 %27 to float, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !21
  %30 = bitcast i32 %29 to float, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !23
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %7, i64 %22, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !25
  %37 = icmp slt i32 %19, 128, !dbg !26
  %38 = mul i32 %21, 14336, !dbg !27
  %srem.decomposed = sub i32 %.frozen11, %38, !dbg !27
  %39 = shl nsw i32 %21, 13, !dbg !28
  %40 = add nsw i32 %39, %srem.decomposed, !dbg !29
  %41 = sext i32 %40 to i64, !dbg !30
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !30
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %42, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !31
  %44 = and i32 %19, -32, !dbg !32
  %45 = icmp eq i32 %44, 128, !dbg !32
  %46 = shl nsw i32 %19, 6, !dbg !33
  %47 = shl nsw i32 %21, 11, !dbg !34
  %48 = add nsw i32 %47, %.decomposed, !dbg !33
  %49 = add nsw i32 %48, -8192, !dbg !35
  %50 = add nsw i32 %49, %46, !dbg !36
  %51 = sext i32 %50 to i64, !dbg !37
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !37
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %52, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #3, !dbg !38
  %54 = icmp eq i32 %44, 160, !dbg !39
  %55 = add nsw i32 %48, -10240, !dbg !40
  %56 = add nsw i32 %55, %46, !dbg !41
  %57 = sext i32 %56 to i64, !dbg !42
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !42
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %58, i1 %54, i32 0, i1 %54, i32 0, i1 %54) #3, !dbg !43
  %60 = icmp sgt i32 %19, 191, !dbg !44
  %61 = add nsw i32 %48, -12288, !dbg !45
  %62 = add nsw i32 %61, %46, !dbg !46
  %63 = sext i32 %62 to i64, !dbg !47
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %63, !dbg !47
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %64, i1 %60, i32 0, i1 %60, i32 0, i1 %60) #3, !dbg !48
  %66 = fadd float %28, 0x3EE4F8B580000000, !dbg !49
  %67 = fadd float %30, 0x3EE4F8B580000000, !dbg !49
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i = icmp eq i32 %68, 0, !dbg !50
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i = icmp eq i32 %69, 0, !dbg !50
  br i1 %.not.i, label %75, label %70, !dbg !50

70:                                               ; preds = %11
  br i1 %.not1.i, label %73, label %71, !dbg !50

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

75:                                               ; preds = %11
  br i1 %.not1.i, label %78, label %76, !dbg !50

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

__nv_sqrtf.exit:                                  ; preds = %71, %73, %76, %78
  %.0.i = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !50
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i6 = icmp eq i32 %80, 0, !dbg !50
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i9 = icmp eq i32 %81, 0, !dbg !50
  br i1 %.not.i6, label %87, label %82, !dbg !50

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %85, label %83, !dbg !50

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !50
  br label %__nv_sqrtf.exit10, !dbg !50

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !50
  br label %__nv_sqrtf.exit10, !dbg !50

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %90, label %88, !dbg !50

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !50
  br label %__nv_sqrtf.exit10, !dbg !50

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !50
  br label %__nv_sqrtf.exit10, !dbg !50

__nv_sqrtf.exit10:                                ; preds = %83, %85, %88, %90
  %.0.i8 = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !50
  %92 = extractvalue { i32, i32 } %43, 1, !dbg !31
  %93 = extractvalue { i32, i32 } %53, 1, !dbg !38
  %94 = extractvalue { i32, i32 } %59, 1, !dbg !43
  %95 = extractvalue { i32, i32 } %65, 1, !dbg !48
  %.v1 = select i1 %54, i32 %94, i32 %95, !dbg !51
  %.v3 = select i1 %45, i32 %93, i32 %.v1, !dbg !52
  %.v5 = select i1 %37, i32 %92, i32 %.v3, !dbg !53
  %96 = bitcast i32 %.v5 to float, !dbg !53
  %97 = bitcast i32 %25 to float, !dbg !19
  %98 = fsub float %96, %97, !dbg !54
  %99 = extractvalue { i32, i32 } %43, 0, !dbg !31
  %100 = extractvalue { i32, i32 } %53, 0, !dbg !38
  %101 = extractvalue { i32, i32 } %59, 0, !dbg !43
  %102 = extractvalue { i32, i32 } %65, 0, !dbg !48
  %.v = select i1 %54, i32 %101, i32 %102, !dbg !51
  %.v2 = select i1 %45, i32 %100, i32 %.v, !dbg !52
  %.v4 = select i1 %37, i32 %99, i32 %.v2, !dbg !53
  %103 = bitcast i32 %.v4 to float, !dbg !53
  %104 = bitcast i32 %24 to float, !dbg !19
  %105 = fsub float %103, %104, !dbg !54
  %106 = bitcast i32 %36 to float, !dbg !25
  %107 = bitcast i32 %35 to float, !dbg !25
  %108 = bitcast i32 %33 to float, !dbg !23
  %109 = bitcast i32 %32 to float, !dbg !23
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !55
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !55
  %112 = fmul float %105, %110, !dbg !56
  %113 = fmul float %98, %111, !dbg !56
  %114 = fmul float %112, %109, !dbg !57
  %115 = fmul float %113, %108, !dbg !57
  %116 = fadd float %114, %107, !dbg !58
  %117 = fadd float %115, %106, !dbg !58
  %118 = fcmp olt float %116, 0.000000e+00, !dbg !59
  %119 = fcmp olt float %117, 0.000000e+00, !dbg !59
  %120 = select i1 %118, float 0.000000e+00, float %116, !dbg !63
  %121 = select i1 %119, float 0.000000e+00, float %117, !dbg !63
  %122 = sext i32 %17 to i64, !dbg !64
  %123 = getelementptr float, ptr addrspace(1) %8, i64 %122, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.v4, i32 %.v5, ptr addrspace(1) %123, i1 true) #3, !dbg !65
  %124 = getelementptr float, ptr addrspace(1) %9, i64 %122, !dbg !66
  %125 = bitcast float %120 to i32, !dbg !67
  %126 = bitcast float %121 to i32, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %125, i32 %126, ptr addrspace(1) %124, i1 true) #3, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqooj6ejb5hcc3ng2z5phq3uey37puh5n7jxxibq46m5t7rhgseo.py", directory: "inductor_cache/qo")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_14", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 31, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 31, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 50, scope: !7)
!29 = !DILocation(line: 37, column: 45, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 55, scope: !7)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 42, column: 40, scope: !7)
!34 = !DILocation(line: 42, column: 60, scope: !7)
!35 = !DILocation(line: 42, column: 36, scope: !7)
!36 = !DILocation(line: 42, column: 55, scope: !7)
!37 = !DILocation(line: 42, column: 31, scope: !7)
!38 = !DILocation(line: 42, column: 65, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 36, scope: !7)
!41 = !DILocation(line: 47, column: 55, scope: !7)
!42 = !DILocation(line: 47, column: 31, scope: !7)
!43 = !DILocation(line: 47, column: 65, scope: !7)
!44 = !DILocation(line: 48, column: 20, scope: !7)
!45 = !DILocation(line: 51, column: 36, scope: !7)
!46 = !DILocation(line: 51, column: 55, scope: !7)
!47 = !DILocation(line: 51, column: 31, scope: !7)
!48 = !DILocation(line: 51, column: 65, scope: !7)
!49 = !DILocation(line: 57, column: 20, scope: !7)
!50 = !DILocation(line: 58, column: 27, scope: !7)
!51 = !DILocation(line: 52, column: 35, scope: !7)
!52 = !DILocation(line: 53, column: 34, scope: !7)
!53 = !DILocation(line: 54, column: 33, scope: !7)
!54 = !DILocation(line: 55, column: 20, scope: !7)
!55 = !DILocation(line: 60, column: 20, scope: !7)
!56 = !DILocation(line: 63, column: 20, scope: !7)
!57 = !DILocation(line: 64, column: 20, scope: !7)
!58 = !DILocation(line: 65, column: 20, scope: !7)
!59 = !DILocation(line: 118, column: 15, scope: !60, inlinedAt: !62)
!60 = distinct !DILexicalBlockFile(scope: !7, file: !61, discriminator: 0)
!61 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!62 = !DILocation(line: 67, column: 42, scope: !7)
!63 = !DILocation(line: 121, column: 29, scope: !60, inlinedAt: !62)
!64 = !DILocation(line: 68, column: 25, scope: !7)
!65 = !DILocation(line: 68, column: 37, scope: !7)
!66 = !DILocation(line: 69, column: 25, scope: !7)
!67 = !DILocation(line: 69, column: 37, scope: !7)
!68 = !DILocation(line: 69, column: 4, scope: !7)
