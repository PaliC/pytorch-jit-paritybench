; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_31(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 9, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 2, !dbg !12
  %18 = and i32 %17, 508, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = sdiv i32 %19, 64, !dbg !14
  %21 = srem i32 %20, 256, !dbg !15
  %.frozen = freeze i32 %19, !dbg !16
  %22 = sdiv i32 %.frozen, 8, !dbg !16
  %23 = mul i32 %22, 8, !dbg !17
  %.decomposed = sub i32 %.frozen, %23, !dbg !17
  %24 = srem i32 %22, 8, !dbg !18
  %25 = sext i32 %19 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !19
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !20
  %28 = sext i32 %21 to i64, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !21
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !25
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !26
  %41 = bitcast i32 %40 to float, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !26
  %43 = bitcast i32 %42 to float, !dbg !26
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !26
  %45 = bitcast i32 %44 to float, !dbg !26
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !26
  %47 = bitcast i32 %46 to float, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !27
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !28
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !28
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !28
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !28
  %53 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !29
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !30
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !30
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !30
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !30
  %.lhs.trunc = trunc nsw i32 %24 to i8, !dbg !31
  %58 = sdiv i8 %.lhs.trunc, 2, !dbg !31
  %.sext = sext i8 %58 to i32, !dbg !31
  %59 = shl nsw i32 %.sext, 3, !dbg !32
  %60 = mul i8 %58, 2, !dbg !33
  %.decomposed44 = sub i8 %.lhs.trunc, %60, !dbg !33
  %.sext37 = sext i8 %.decomposed44 to i32, !dbg !33
  %61 = shl nsw i32 %.sext37, 5, !dbg !34
  %62 = shl nsw i32 %20, 6, !dbg !35
  %63 = add i32 %62, %.decomposed, !dbg !36
  %64 = add i32 %63, %59, !dbg !37
  %65 = add i32 %64, %61, !dbg !38
  %66 = sext i32 %65 to i64, !dbg !39
  %67 = getelementptr float, ptr addrspace(1) %6, i64 %66, !dbg !39
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !40
  %69 = getelementptr float, ptr addrspace(1) %7, i64 %28, !dbg !41
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !42
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !42
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !42
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !42
  %74 = getelementptr float, ptr addrspace(1) %8, i64 %28, !dbg !43
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !44
  %76 = bitcast i32 %75 to float, !dbg !44
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !44
  %78 = bitcast i32 %77 to float, !dbg !44
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !44
  %80 = bitcast i32 %79 to float, !dbg !44
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !44
  %82 = bitcast i32 %81 to float, !dbg !44
  %83 = getelementptr float, ptr addrspace(1) %9, i64 %28, !dbg !45
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !46
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !46
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !46
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !46
  %88 = getelementptr float, ptr addrspace(1) %10, i64 %28, !dbg !47
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !48
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !48
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !48
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !48
  %93 = fadd float %41, 0x3EE4F8B580000000, !dbg !49
  %94 = fadd float %43, 0x3EE4F8B580000000, !dbg !49
  %95 = fadd float %45, 0x3EE4F8B580000000, !dbg !49
  %96 = fadd float %47, 0x3EE4F8B580000000, !dbg !49
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i = icmp eq i32 %97, 0, !dbg !50
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i = icmp eq i32 %98, 0, !dbg !50
  br i1 %.not.i, label %104, label %99, !dbg !50

99:                                               ; preds = %13
  br i1 %.not1.i, label %102, label %100, !dbg !50

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

104:                                              ; preds = %13
  br i1 %.not1.i, label %107, label %105, !dbg !50

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

__nv_sqrtf.exit:                                  ; preds = %100, %102, %105, %107
  %.0.i = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !50
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i1 = icmp eq i32 %109, 0, !dbg !50
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i4 = icmp eq i32 %110, 0, !dbg !50
  br i1 %.not.i1, label %116, label %111, !dbg !50

111:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %114, label %112, !dbg !50

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

116:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %119, label %117, !dbg !50

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

__nv_sqrtf.exit5:                                 ; preds = %112, %114, %117, %119
  %.0.i3 = phi float [ %113, %112 ], [ %115, %114 ], [ %118, %117 ], [ %120, %119 ], !dbg !50
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i6 = icmp eq i32 %121, 0, !dbg !50
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i9 = icmp eq i32 %122, 0, !dbg !50
  br i1 %.not.i6, label %128, label %123, !dbg !50

123:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %126, label %124, !dbg !50

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #3, !dbg !50
  br label %__nv_sqrtf.exit10, !dbg !50

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #3, !dbg !50
  br label %__nv_sqrtf.exit10, !dbg !50

128:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %131, label %129, !dbg !50

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #3, !dbg !50
  br label %__nv_sqrtf.exit10, !dbg !50

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #3, !dbg !50
  br label %__nv_sqrtf.exit10, !dbg !50

__nv_sqrtf.exit10:                                ; preds = %124, %126, %129, %131
  %.0.i8 = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !50
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i11 = icmp eq i32 %133, 0, !dbg !50
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i14 = icmp eq i32 %134, 0, !dbg !50
  br i1 %.not.i11, label %140, label %135, !dbg !50

135:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %138, label %136, !dbg !50

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %96) #3, !dbg !50
  br label %__nv_sqrtf.exit15, !dbg !50

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %96) #3, !dbg !50
  br label %__nv_sqrtf.exit15, !dbg !50

140:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %143, label %141, !dbg !50

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.f(float %96) #3, !dbg !50
  br label %__nv_sqrtf.exit15, !dbg !50

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.f(float %96) #3, !dbg !50
  br label %__nv_sqrtf.exit15, !dbg !50

__nv_sqrtf.exit15:                                ; preds = %136, %138, %141, %143
  %.0.i13 = phi float [ %137, %136 ], [ %139, %138 ], [ %142, %141 ], [ %144, %143 ], !dbg !50
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !51
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !51
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !51
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !51
  %149 = fadd float %76, 0x3EE4F8B580000000, !dbg !52
  %150 = fadd float %78, 0x3EE4F8B580000000, !dbg !52
  %151 = fadd float %80, 0x3EE4F8B580000000, !dbg !52
  %152 = fadd float %82, 0x3EE4F8B580000000, !dbg !52
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i16 = icmp eq i32 %153, 0, !dbg !53
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i19 = icmp eq i32 %154, 0, !dbg !53
  br i1 %.not.i16, label %160, label %155, !dbg !53

155:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %158, label %156, !dbg !53

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %149) #3, !dbg !53
  br label %__nv_sqrtf.exit20, !dbg !53

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %149) #3, !dbg !53
  br label %__nv_sqrtf.exit20, !dbg !53

160:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %163, label %161, !dbg !53

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.f(float %149) #3, !dbg !53
  br label %__nv_sqrtf.exit20, !dbg !53

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.f(float %149) #3, !dbg !53
  br label %__nv_sqrtf.exit20, !dbg !53

__nv_sqrtf.exit20:                                ; preds = %156, %158, %161, %163
  %.0.i18 = phi float [ %157, %156 ], [ %159, %158 ], [ %162, %161 ], [ %164, %163 ], !dbg !53
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i21 = icmp eq i32 %165, 0, !dbg !53
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i24 = icmp eq i32 %166, 0, !dbg !53
  br i1 %.not.i21, label %172, label %167, !dbg !53

167:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %170, label %168, !dbg !53

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %150) #3, !dbg !53
  br label %__nv_sqrtf.exit25, !dbg !53

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %150) #3, !dbg !53
  br label %__nv_sqrtf.exit25, !dbg !53

172:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %175, label %173, !dbg !53

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.f(float %150) #3, !dbg !53
  br label %__nv_sqrtf.exit25, !dbg !53

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.f(float %150) #3, !dbg !53
  br label %__nv_sqrtf.exit25, !dbg !53

__nv_sqrtf.exit25:                                ; preds = %168, %170, %173, %175
  %.0.i23 = phi float [ %169, %168 ], [ %171, %170 ], [ %174, %173 ], [ %176, %175 ], !dbg !53
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i26 = icmp eq i32 %177, 0, !dbg !53
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i29 = icmp eq i32 %178, 0, !dbg !53
  br i1 %.not.i26, label %184, label %179, !dbg !53

179:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %182, label %180, !dbg !53

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %151) #3, !dbg !53
  br label %__nv_sqrtf.exit30, !dbg !53

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %151) #3, !dbg !53
  br label %__nv_sqrtf.exit30, !dbg !53

184:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %187, label %185, !dbg !53

185:                                              ; preds = %184
  %186 = tail call float @llvm.nvvm.sqrt.rn.f(float %151) #3, !dbg !53
  br label %__nv_sqrtf.exit30, !dbg !53

187:                                              ; preds = %184
  %188 = tail call float @llvm.nvvm.sqrt.approx.f(float %151) #3, !dbg !53
  br label %__nv_sqrtf.exit30, !dbg !53

__nv_sqrtf.exit30:                                ; preds = %180, %182, %185, %187
  %.0.i28 = phi float [ %181, %180 ], [ %183, %182 ], [ %186, %185 ], [ %188, %187 ], !dbg !53
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i31 = icmp eq i32 %189, 0, !dbg !53
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i34 = icmp eq i32 %190, 0, !dbg !53
  br i1 %.not.i31, label %196, label %191, !dbg !53

191:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %194, label %192, !dbg !53

192:                                              ; preds = %191
  %193 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %152) #3, !dbg !53
  br label %__nv_sqrtf.exit35, !dbg !53

194:                                              ; preds = %191
  %195 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %152) #3, !dbg !53
  br label %__nv_sqrtf.exit35, !dbg !53

196:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %199, label %197, !dbg !53

197:                                              ; preds = %196
  %198 = tail call float @llvm.nvvm.sqrt.rn.f(float %152) #3, !dbg !53
  br label %__nv_sqrtf.exit35, !dbg !53

199:                                              ; preds = %196
  %200 = tail call float @llvm.nvvm.sqrt.approx.f(float %152) #3, !dbg !53
  br label %__nv_sqrtf.exit35, !dbg !53

__nv_sqrtf.exit35:                                ; preds = %192, %194, %197, %199
  %.0.i33 = phi float [ %193, %192 ], [ %195, %194 ], [ %198, %197 ], [ %200, %199 ], !dbg !53
  %201 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !40
  %202 = bitcast i32 %201 to float, !dbg !40
  %203 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !24
  %204 = insertelement <2 x i32> %203, i32 %73, i64 1, !dbg !24
  %205 = bitcast <2 x i32> %204 to <2 x float>, !dbg !24
  %206 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !40
  %207 = bitcast i32 %206 to float, !dbg !40
  %208 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !24
  %209 = insertelement <2 x i32> %208, i32 %72, i64 1, !dbg !24
  %210 = bitcast <2 x i32> %209 to <2 x float>, !dbg !24
  %211 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !40
  %212 = bitcast i32 %211 to float, !dbg !40
  %213 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !24
  %214 = insertelement <2 x i32> %213, i32 %71, i64 1, !dbg !24
  %215 = bitcast <2 x i32> %214 to <2 x float>, !dbg !24
  %216 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !40
  %217 = bitcast i32 %216 to float, !dbg !40
  %218 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !24
  %219 = insertelement <2 x i32> %218, i32 %70, i64 1, !dbg !24
  %220 = bitcast <2 x i32> %219 to <2 x float>, !dbg !24
  %221 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !20
  %222 = bitcast i32 %221 to float, !dbg !20
  %223 = bitcast i32 %33 to float, !dbg !22
  %224 = fadd float %222, %223, !dbg !54
  %225 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !28
  %226 = insertelement <2 x i32> %225, i32 %87, i64 1, !dbg !28
  %227 = bitcast <2 x i32> %226 to <2 x float>, !dbg !28
  %228 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !30
  %229 = insertelement <2 x i32> %228, i32 %92, i64 1, !dbg !30
  %230 = bitcast <2 x i32> %229 to <2 x float>, !dbg !30
  %231 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !20
  %232 = bitcast i32 %231 to float, !dbg !20
  %233 = bitcast i32 %32 to float, !dbg !22
  %234 = fadd float %232, %233, !dbg !54
  %235 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !28
  %236 = insertelement <2 x i32> %235, i32 %86, i64 1, !dbg !28
  %237 = bitcast <2 x i32> %236 to <2 x float>, !dbg !28
  %238 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !30
  %239 = insertelement <2 x i32> %238, i32 %91, i64 1, !dbg !30
  %240 = bitcast <2 x i32> %239 to <2 x float>, !dbg !30
  %241 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !20
  %242 = bitcast i32 %241 to float, !dbg !20
  %243 = bitcast i32 %31 to float, !dbg !22
  %244 = fadd float %242, %243, !dbg !54
  %245 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !28
  %246 = insertelement <2 x i32> %245, i32 %85, i64 1, !dbg !28
  %247 = bitcast <2 x i32> %246 to <2 x float>, !dbg !28
  %248 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !30
  %249 = insertelement <2 x i32> %248, i32 %90, i64 1, !dbg !30
  %250 = bitcast <2 x i32> %249 to <2 x float>, !dbg !30
  %251 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !20
  %252 = bitcast i32 %251 to float, !dbg !20
  %253 = bitcast i32 %30 to float, !dbg !22
  %254 = fadd float %252, %253, !dbg !54
  %255 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !28
  %256 = insertelement <2 x i32> %255, i32 %84, i64 1, !dbg !28
  %257 = bitcast <2 x i32> %256 to <2 x float>, !dbg !28
  %258 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !30
  %259 = insertelement <2 x i32> %258, i32 %89, i64 1, !dbg !30
  %260 = bitcast <2 x i32> %259 to <2 x float>, !dbg !30
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !55
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !55
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !55
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !55
  %265 = insertelement <2 x float> poison, float %254, i64 0, !dbg !56
  %266 = insertelement <2 x float> %265, float %217, i64 1, !dbg !56
  %267 = fsub <2 x float> %266, %220, !dbg !56
  %268 = insertelement <2 x float> poison, float %145, i64 0, !dbg !57
  %269 = insertelement <2 x float> %268, float %261, i64 1, !dbg !57
  %270 = fmul <2 x float> %267, %269, !dbg !57
  %271 = fmul <2 x float> %270, %257, !dbg !58
  %272 = fadd <2 x float> %271, %260, !dbg !59
  %273 = insertelement <2 x float> poison, float %244, i64 0, !dbg !56
  %274 = insertelement <2 x float> %273, float %212, i64 1, !dbg !56
  %275 = fsub <2 x float> %274, %215, !dbg !56
  %276 = insertelement <2 x float> poison, float %146, i64 0, !dbg !57
  %277 = insertelement <2 x float> %276, float %262, i64 1, !dbg !57
  %278 = fmul <2 x float> %275, %277, !dbg !57
  %279 = fmul <2 x float> %278, %247, !dbg !58
  %280 = fadd <2 x float> %279, %250, !dbg !59
  %281 = insertelement <2 x float> poison, float %234, i64 0, !dbg !56
  %282 = insertelement <2 x float> %281, float %207, i64 1, !dbg !56
  %283 = fsub <2 x float> %282, %210, !dbg !56
  %284 = insertelement <2 x float> poison, float %147, i64 0, !dbg !57
  %285 = insertelement <2 x float> %284, float %263, i64 1, !dbg !57
  %286 = fmul <2 x float> %283, %285, !dbg !57
  %287 = fmul <2 x float> %286, %237, !dbg !58
  %288 = fadd <2 x float> %287, %240, !dbg !59
  %289 = insertelement <2 x float> poison, float %224, i64 0, !dbg !56
  %290 = insertelement <2 x float> %289, float %202, i64 1, !dbg !56
  %291 = fsub <2 x float> %290, %205, !dbg !56
  %292 = insertelement <2 x float> poison, float %148, i64 0, !dbg !57
  %293 = insertelement <2 x float> %292, float %264, i64 1, !dbg !57
  %294 = fmul <2 x float> %291, %293, !dbg !57
  %295 = fmul <2 x float> %294, %227, !dbg !58
  %296 = fadd <2 x float> %295, %230, !dbg !59
  %shift = shufflevector <2 x float> %272, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !60
  %297 = fadd <2 x float> %272, %shift, !dbg !60
  %shift38 = shufflevector <2 x float> %280, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !60
  %298 = fadd <2 x float> %280, %shift38, !dbg !60
  %shift39 = shufflevector <2 x float> %288, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !60
  %299 = fadd <2 x float> %288, %shift39, !dbg !60
  %shift40 = shufflevector <2 x float> %296, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !60
  %300 = fadd <2 x float> %296, %shift40, !dbg !60
  %301 = bitcast float %254 to i32, !dbg !61
  %302 = bitcast float %244 to i32, !dbg !61
  %303 = bitcast float %234 to i32, !dbg !61
  %304 = bitcast float %224 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %301, i32 %302, i32 %303, i32 %304, ptr addrspace(1) %26, i1 true) #3, !dbg !61
  %305 = getelementptr float, ptr addrspace(1) %11, i64 %25, !dbg !62
  %bc = bitcast <2 x float> %297 to <2 x i32>, !dbg !63
  %306 = extractelement <2 x i32> %bc, i64 0, !dbg !63
  %bc41 = bitcast <2 x float> %298 to <2 x i32>, !dbg !63
  %307 = extractelement <2 x i32> %bc41, i64 0, !dbg !63
  %bc42 = bitcast <2 x float> %299 to <2 x i32>, !dbg !63
  %308 = extractelement <2 x i32> %bc42, i64 0, !dbg !63
  %bc43 = bitcast <2 x float> %300 to <2 x i32>, !dbg !63
  %309 = extractelement <2 x i32> %bc43, i64 0, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %306, i32 %307, i32 %308, i32 %309, ptr addrspace(1) %305, i1 true) #3, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crbo26hqmqaimv3scipp5j2xnc2iwur4rnvkfv4arrrmut6d2f5d.py", directory: "inductor_cache/rb")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_31, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_31, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_31", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 26, scope: !7)
!19 = !DILocation(line: 29, column: 34, scope: !7)
!20 = !DILocation(line: 29, column: 39, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 45, scope: !7)
!32 = !DILocation(line: 35, column: 39, scope: !7)
!33 = !DILocation(line: 35, column: 60, scope: !7)
!34 = !DILocation(line: 35, column: 55, scope: !7)
!35 = !DILocation(line: 35, column: 69, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 35, column: 50, scope: !7)
!38 = !DILocation(line: 35, column: 66, scope: !7)
!39 = !DILocation(line: 35, column: 31, scope: !7)
!40 = !DILocation(line: 35, column: 74, scope: !7)
!41 = !DILocation(line: 36, column: 31, scope: !7)
!42 = !DILocation(line: 36, column: 36, scope: !7)
!43 = !DILocation(line: 37, column: 31, scope: !7)
!44 = !DILocation(line: 37, column: 36, scope: !7)
!45 = !DILocation(line: 38, column: 31, scope: !7)
!46 = !DILocation(line: 38, column: 36, scope: !7)
!47 = !DILocation(line: 39, column: 31, scope: !7)
!48 = !DILocation(line: 39, column: 36, scope: !7)
!49 = !DILocation(line: 43, column: 18, scope: !7)
!50 = !DILocation(line: 44, column: 26, scope: !7)
!51 = !DILocation(line: 46, column: 19, scope: !7)
!52 = !DILocation(line: 53, column: 20, scope: !7)
!53 = !DILocation(line: 54, column: 27, scope: !7)
!54 = !DILocation(line: 40, column: 18, scope: !7)
!55 = !DILocation(line: 55, column: 19, scope: !7)
!56 = !DILocation(line: 41, column: 18, scope: !7)
!57 = !DILocation(line: 49, column: 19, scope: !7)
!58 = !DILocation(line: 50, column: 20, scope: !7)
!59 = !DILocation(line: 51, column: 20, scope: !7)
!60 = !DILocation(line: 60, column: 20, scope: !7)
!61 = !DILocation(line: 61, column: 39, scope: !7)
!62 = !DILocation(line: 62, column: 25, scope: !7)
!63 = !DILocation(line: 62, column: 37, scope: !7)
!64 = !DILocation(line: 62, column: 4, scope: !7)
