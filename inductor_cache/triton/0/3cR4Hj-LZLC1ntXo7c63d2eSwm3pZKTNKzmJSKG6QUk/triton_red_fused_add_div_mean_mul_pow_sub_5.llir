; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused_add_div_mean_mul_pow_sub_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %7 = and i32 %6, 255, !dbg !10
  %8 = and i32 %6, 252, !dbg !11
  %9 = zext nneg i32 %7 to i64, !dbg !12
  %10 = getelementptr float, ptr addrspace(1) %1, i64 %9, !dbg !12
  %11 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %10, i1 true, i32 0, i1 true) #5, !dbg !13
  %12 = bitcast i32 %11 to float, !dbg !13
  %13 = zext nneg i32 %8 to i64, !dbg !14
  %14 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !14
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %14, i1 true, i32 0, i1 true) #5, !dbg !15
  %16 = bitcast i32 %15 to float, !dbg !15
  %17 = or disjoint i32 %8, 1, !dbg !16
  %18 = zext nneg i32 %17 to i64, !dbg !17
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !17
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 true, i32 0, i1 true) #5, !dbg !18
  %21 = bitcast i32 %20 to float, !dbg !18
  %22 = or disjoint i32 %8, 2, !dbg !19
  %23 = zext nneg i32 %22 to i64, !dbg !20
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !20
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 true, i32 0, i1 true) #5, !dbg !21
  %26 = bitcast i32 %25 to float, !dbg !21
  %27 = or disjoint i32 %8, 3, !dbg !22
  %28 = zext nneg i32 %27 to i64, !dbg !23
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !23
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 true, i32 0, i1 true) #5, !dbg !24
  %31 = bitcast i32 %30 to float, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %9, !dbg !25
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 true, i32 0, i1 true) #5, !dbg !26
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %13, !dbg !27
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 true, i32 0, i1 true) #5, !dbg !28
  %36 = bitcast i32 %35 to float, !dbg !28
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !29
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 true, i32 0, i1 true) #5, !dbg !30
  %39 = bitcast i32 %38 to float, !dbg !30
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !31
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 true, i32 0, i1 true) #5, !dbg !32
  %42 = bitcast i32 %41 to float, !dbg !32
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !33
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 true, i32 0, i1 true) #5, !dbg !34
  %45 = bitcast i32 %44 to float, !dbg !34
  %46 = fmul float %16, %16, !dbg !35
  %47 = fmul float %21, %21, !dbg !36
  %48 = fadd float %46, %47, !dbg !37
  %49 = fmul float %26, %26, !dbg !38
  %50 = fadd float %48, %49, !dbg !39
  %51 = fmul float %31, %31, !dbg !40
  %52 = fadd float %50, %51, !dbg !41
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i = icmp eq i32 %53, 0, !dbg !42
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %.not1.i = icmp eq i32 %54, 0, !dbg !42
  br i1 %.not.i, label %60, label %55, !dbg !42

55:                                               ; preds = %5
  br i1 %.not1.i, label %58, label %56, !dbg !42

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #5, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #5, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

60:                                               ; preds = %5
  br i1 %.not1.i, label %63, label %61, !dbg !42

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #5, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #5, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %56, %58, %61, %63
  %.0.i = phi float [ %57, %56 ], [ %59, %58 ], [ %62, %61 ], [ %64, %63 ], !dbg !42
  %65 = fcmp ogt float %.0.i, 0x3D71979980000000, !dbg !43
  %66 = fcmp uno float %.0.i, 0.000000e+00, !dbg !47
  %67 = or i1 %65, %66, !dbg !48
  %68 = select i1 %67, float %.0.i, float 0x3D71979980000000, !dbg !49
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %12, float %68) #5, !dbg !50
  %70 = fmul float %36, %36, !dbg !51
  %71 = fmul float %39, %39, !dbg !52
  %72 = fadd float %70, %71, !dbg !53
  %73 = fmul float %42, %42, !dbg !54
  %74 = fadd float %72, %73, !dbg !55
  %75 = fmul float %45, %45, !dbg !56
  %76 = fadd float %74, %75, !dbg !57
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !58
  %.not.i1 = icmp eq i32 %77, 0, !dbg !58
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !58
  %.not1.i4 = icmp eq i32 %78, 0, !dbg !58
  br i1 %.not.i1, label %84, label %79, !dbg !58

79:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %82, label %80, !dbg !58

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #5, !dbg !58
  br label %__nv_sqrtf.exit5, !dbg !58

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #5, !dbg !58
  br label %__nv_sqrtf.exit5, !dbg !58

84:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %87, label %85, !dbg !58

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #5, !dbg !58
  br label %__nv_sqrtf.exit5, !dbg !58

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #5, !dbg !58
  br label %__nv_sqrtf.exit5, !dbg !58

__nv_sqrtf.exit5:                                 ; preds = %80, %82, %85, %87
  %.0.i3 = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !58
  %89 = bitcast i32 %33 to float, !dbg !26
  %90 = fsub float %69, %89, !dbg !59
  %91 = fadd float %90, %89, !dbg !60
  %92 = lshr i32 %6, 5, !dbg !10
  %93 = and i32 %6, 31, !dbg !10
  %94 = fcmp ogt float %.0.i3, 0x3D71979980000000, !dbg !61
  %95 = fcmp uno float %.0.i3, 0.000000e+00, !dbg !63
  %96 = or i1 %94, %95, !dbg !64
  %97 = select i1 %96, float %.0.i3, float 0x3D71979980000000, !dbg !65
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float %97) #5, !dbg !66
  %99 = fsub float %69, %98, !dbg !67
  %100 = fmul float %99, %99, !dbg !68
  %101 = getelementptr float, ptr addrspace(1) %3, i64 %9, !dbg !69
  %102 = bitcast float %91 to i32, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %102, ptr addrspace(1) %101, i1 true) #5, !dbg !70
  %103 = bitcast float %100 to i32, !dbg !71
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 16, i32 31), !dbg !71
  %105 = bitcast i32 %104 to float, !dbg !71
  %106 = fadd float %100, %105, !dbg !75
  %107 = bitcast float %106 to i32, !dbg !71
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 8, i32 31), !dbg !71
  %109 = bitcast i32 %108 to float, !dbg !71
  %110 = fadd float %106, %109, !dbg !75
  %111 = bitcast float %110 to i32, !dbg !71
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 4, i32 31), !dbg !71
  %113 = bitcast i32 %112 to float, !dbg !71
  %114 = fadd float %110, %113, !dbg !75
  %115 = bitcast float %114 to i32, !dbg !71
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 2, i32 31), !dbg !71
  %117 = bitcast i32 %116 to float, !dbg !71
  %118 = fadd float %114, %117, !dbg !75
  %119 = bitcast float %118 to i32, !dbg !71
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 1, i32 31), !dbg !71
  %121 = bitcast i32 %120 to float, !dbg !71
  %122 = fadd float %118, %121, !dbg !75
  %123 = icmp eq i32 %93, 0, !dbg !71
  %124 = and i32 %92, 7, !dbg !71
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i32 %124, !dbg !71
  %126 = bitcast float %122 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 %123) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %127 = icmp slt i32 %6, 8, !dbg !71
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i32 %6, !dbg !71
  %129 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %128, i1 %127) #5, !dbg !71
  %130 = bitcast i32 %129 to float, !dbg !71
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 4, i32 31), !dbg !71
  %132 = bitcast i32 %131 to float, !dbg !71
  %133 = fadd float %130, %132, !dbg !75
  %134 = bitcast float %133 to i32, !dbg !71
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 2, i32 31), !dbg !71
  %136 = bitcast i32 %135 to float, !dbg !71
  %137 = fadd float %133, %136, !dbg !75
  %138 = bitcast float %137 to i32, !dbg !71
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 1, i32 31), !dbg !71
  %140 = bitcast i32 %139 to float, !dbg !71
  %141 = fadd float %137, %140, !dbg !75
  %142 = and i32 %6, 7, !dbg !71
  %143 = icmp eq i32 %142, 0, !dbg !71
  %144 = and i1 %127, %143, !dbg !71
  %145 = bitcast float %141 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %145, i1 %144) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %146 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !71
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float 2.560000e+02) #5, !dbg !77
  %148 = fmul float %147, 2.500000e-01, !dbg !78
  %149 = fadd float %147, %148, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %150 = icmp eq i32 %7, 0, !dbg !81
  %151 = bitcast float %149 to i32, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %151, ptr addrspace(1) %0, i1 %150) #5, !dbg !81
  ret void, !dbg !82
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpzc42dgbvoyhmofozaeyppazoqkfik23o4ncon4j2b2xwzuwis5.py", directory: "inductor_cache/pz")
!4 = !{ptr @triton_red_fused_add_div_mean_mul_pow_sub_5, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_div_mean_mul_pow_sub_5, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_div_mean_mul_pow_sub_5", linkageName: "triton_red_fused_add_div_mean_mul_pow_sub_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 25, column: 33, scope: !7)
!11 = !DILocation(line: 33, column: 36, scope: !7)
!12 = !DILocation(line: 32, column: 34, scope: !7)
!13 = !DILocation(line: 32, column: 39, scope: !7)
!14 = !DILocation(line: 33, column: 34, scope: !7)
!15 = !DILocation(line: 33, column: 41, scope: !7)
!16 = !DILocation(line: 34, column: 38, scope: !7)
!17 = !DILocation(line: 34, column: 34, scope: !7)
!18 = !DILocation(line: 34, column: 45, scope: !7)
!19 = !DILocation(line: 35, column: 38, scope: !7)
!20 = !DILocation(line: 35, column: 34, scope: !7)
!21 = !DILocation(line: 35, column: 45, scope: !7)
!22 = !DILocation(line: 36, column: 38, scope: !7)
!23 = !DILocation(line: 36, column: 34, scope: !7)
!24 = !DILocation(line: 36, column: 45, scope: !7)
!25 = !DILocation(line: 37, column: 35, scope: !7)
!26 = !DILocation(line: 37, column: 40, scope: !7)
!27 = !DILocation(line: 38, column: 35, scope: !7)
!28 = !DILocation(line: 38, column: 42, scope: !7)
!29 = !DILocation(line: 39, column: 35, scope: !7)
!30 = !DILocation(line: 39, column: 46, scope: !7)
!31 = !DILocation(line: 40, column: 35, scope: !7)
!32 = !DILocation(line: 40, column: 46, scope: !7)
!33 = !DILocation(line: 41, column: 35, scope: !7)
!34 = !DILocation(line: 41, column: 46, scope: !7)
!35 = !DILocation(line: 42, column: 22, scope: !7)
!36 = !DILocation(line: 43, column: 22, scope: !7)
!37 = !DILocation(line: 44, column: 22, scope: !7)
!38 = !DILocation(line: 45, column: 22, scope: !7)
!39 = !DILocation(line: 46, column: 22, scope: !7)
!40 = !DILocation(line: 47, column: 23, scope: !7)
!41 = !DILocation(line: 48, column: 23, scope: !7)
!42 = !DILocation(line: 49, column: 31, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 51, column: 46, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 52, column: 23, scope: !7)
!51 = !DILocation(line: 55, column: 24, scope: !7)
!52 = !DILocation(line: 56, column: 24, scope: !7)
!53 = !DILocation(line: 57, column: 24, scope: !7)
!54 = !DILocation(line: 58, column: 24, scope: !7)
!55 = !DILocation(line: 59, column: 24, scope: !7)
!56 = !DILocation(line: 60, column: 24, scope: !7)
!57 = !DILocation(line: 61, column: 24, scope: !7)
!58 = !DILocation(line: 62, column: 31, scope: !7)
!59 = !DILocation(line: 53, column: 24, scope: !7)
!60 = !DILocation(line: 54, column: 24, scope: !7)
!61 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !62)
!62 = !DILocation(line: 63, column: 46, scope: !7)
!63 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !62)
!64 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !62)
!65 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !62)
!66 = !DILocation(line: 64, column: 24, scope: !7)
!67 = !DILocation(line: 65, column: 24, scope: !7)
!68 = !DILocation(line: 66, column: 24, scope: !7)
!69 = !DILocation(line: 70, column: 29, scope: !7)
!70 = !DILocation(line: 70, column: 76, scope: !7)
!71 = !DILocation(line: 267, column: 36, scope: !72, inlinedAt: !74)
!72 = distinct !DILexicalBlockFile(scope: !7, file: !73, discriminator: 0)
!73 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!74 = !DILocation(line: 71, column: 27, scope: !7)
!75 = !DILocation(line: 256, column: 15, scope: !76, inlinedAt: !74)
!76 = distinct !DILexicalBlockFile(scope: !72, file: !73, discriminator: 0)
!77 = !DILocation(line: 73, column: 20, scope: !7)
!78 = !DILocation(line: 75, column: 20, scope: !7)
!79 = !DILocation(line: 76, column: 20, scope: !7)
!80 = !DILocation(line: 77, column: 4, scope: !7)
!81 = !DILocation(line: 78, column: 71, scope: !7)
!82 = !DILocation(line: 78, column: 4, scope: !7)
