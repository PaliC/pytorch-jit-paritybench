; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_43(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 510, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %12 = sdiv i32 %.frozen, 16, !dbg !14
  %13 = mul i32 %12, 16, !dbg !15
  %.decomposed = sub i32 %.frozen, %13, !dbg !15
  %14 = icmp sgt i32 %.decomposed, 1, !dbg !16
  %15 = add i32 %10, -34, !dbg !17
  %16 = sext i32 %15 to i64, !dbg !18
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !18
  %18 = icmp sgt i32 %.decomposed, 0, !dbg !19
  %19 = add i32 %10, -33, !dbg !20
  %20 = add i32 %10, -32, !dbg !20
  %21 = sext i32 %19 to i64, !dbg !21
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !21
  %23 = sext i32 %20 to i64, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !21
  %25 = icmp sgt i32 %.decomposed, -1, !dbg !22
  %26 = icmp ult i32 %.decomposed, 16, !dbg !23
  %27 = add i32 %10, -31, !dbg !24
  %28 = add i32 %10, -30, !dbg !24
  %29 = sext i32 %27 to i64, !dbg !25
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !25
  %31 = sext i32 %28 to i64, !dbg !25
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !25
  %33 = add nsw i32 %.decomposed, 2, !dbg !26
  %34 = icmp ult i32 %33, 16, !dbg !26
  %35 = add i32 %10, -18, !dbg !27
  %36 = sext i32 %35 to i64, !dbg !28
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !28
  %38 = add i32 %10, -17, !dbg !29
  %39 = add i32 %10, -16, !dbg !29
  %40 = sext i32 %38 to i64, !dbg !30
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !30
  %42 = sext i32 %39 to i64, !dbg !30
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !30
  %44 = add i32 %10, -15, !dbg !31
  %45 = add i32 %10, -14, !dbg !31
  %46 = sext i32 %44 to i64, !dbg !32
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !32
  %48 = sext i32 %45 to i64, !dbg !32
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !32
  %50 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !15
  %51 = insertelement <2 x i32> %50, i32 %12, i64 1, !dbg !15
  %52 = srem <2 x i32> %51, splat (i32 16), !dbg !15
  %53 = extractelement <2 x i32> %52, i64 1, !dbg !33
  %54 = icmp sgt i32 %53, 1, !dbg !34
  %55 = and i1 %14, %54, !dbg !35
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %17, i1 %55, i32 -8388608, i1 %55, i32 -8388608, i1 %55) #1, !dbg !36
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !36
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !36
  %59 = and i1 %18, %54, !dbg !37
  %60 = icmp sgt <2 x i32> %52, <i32 0, i32 -1>, !dbg !19
  %61 = extractelement <2 x i1> %60, i64 0, !dbg !37
  %62 = and i1 %61, %54, !dbg !37
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %59, i32 -8388608, i1 %59) #1, !dbg !38
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 %62, i32 -8388608, i1 %62) #1, !dbg !38
  %65 = and i1 %25, %54, !dbg !39
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %65, i32 -8388608, i1 %65, i32 -8388608, i1 %65) #1, !dbg !40
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !40
  %68 = extractvalue { i32, i32 } %66, 1, !dbg !40
  %69 = extractelement <2 x i32> %52, i64 0, !dbg !23
  %70 = add nsw i32 %69, 1, !dbg !23
  %71 = icmp ult i32 %70, 16, !dbg !23
  %72 = and i1 %26, %54, !dbg !41
  %73 = and i1 %71, %54, !dbg !41
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %72, i32 -8388608, i1 %72) #1, !dbg !42
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %73, i32 -8388608, i1 %73) #1, !dbg !42
  %76 = and i1 %54, %34, !dbg !43
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %32, i1 %76, i32 -8388608, i1 %76, i32 -8388608, i1 %76) #1, !dbg !44
  %78 = extractvalue { i32, i32 } %77, 0, !dbg !44
  %79 = extractvalue { i32, i32 } %77, 1, !dbg !44
  %80 = icmp sgt i32 %53, 0, !dbg !45
  %81 = and i1 %14, %80, !dbg !46
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %37, i1 %81, i32 -8388608, i1 %81, i32 -8388608, i1 %81) #1, !dbg !47
  %83 = extractvalue { i32, i32 } %82, 0, !dbg !47
  %84 = extractvalue { i32, i32 } %82, 1, !dbg !47
  %85 = and i1 %18, %80, !dbg !48
  %86 = and i1 %61, %80, !dbg !48
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %85, i32 -8388608, i1 %85) #1, !dbg !49
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %86, i32 -8388608, i1 %86) #1, !dbg !49
  %89 = and i1 %25, %80, !dbg !50
  %90 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %43, i1 %89, i32 -8388608, i1 %89, i32 -8388608, i1 %89) #1, !dbg !51
  %91 = extractvalue { i32, i32 } %90, 0, !dbg !51
  %92 = extractvalue { i32, i32 } %90, 1, !dbg !51
  %93 = and i1 %26, %80, !dbg !52
  %94 = and i1 %71, %80, !dbg !52
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %93, i32 -8388608, i1 %93) #1, !dbg !53
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %94, i32 -8388608, i1 %94) #1, !dbg !53
  %97 = and i1 %80, %34, !dbg !54
  %98 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %49, i1 %97, i32 -8388608, i1 %97, i32 -8388608, i1 %97) #1, !dbg !55
  %99 = extractvalue { i32, i32 } %98, 0, !dbg !55
  %100 = extractvalue { i32, i32 } %98, 1, !dbg !55
  %101 = extractelement <2 x i1> %60, i64 1, !dbg !56
  %102 = and i1 %14, %101, !dbg !56
  %103 = add i32 %10, -2, !dbg !57
  %104 = sext i32 %103 to i64, !dbg !58
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !58
  %106 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %105, i1 %102, i32 -8388608, i1 %102, i32 -8388608, i1 %102) #1, !dbg !59
  %107 = extractvalue { i32, i32 } %106, 0, !dbg !59
  %108 = extractvalue { i32, i32 } %106, 1, !dbg !59
  %109 = and i1 %18, %101, !dbg !60
  %110 = and i1 %61, %101, !dbg !60
  %111 = add i32 %10, -1, !dbg !61
  %112 = sext i32 %111 to i64, !dbg !62
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !62
  %114 = sext i32 %11 to i64, !dbg !62
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !62
  %116 = getelementptr i8, ptr addrspace(1) %115, i64 -4, !dbg !62
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %109, i32 -8388608, i1 %109) #1, !dbg !63
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %110, i32 -8388608, i1 %110) #1, !dbg !63
  %119 = or i32 %53, %.decomposed, !dbg !64
  %120 = icmp sgt i32 %119, -1, !dbg !64
  %121 = sext i32 %10 to i64, !dbg !65
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !65
  %123 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %122, i1 %120, i32 -8388608, i1 %120, i32 -8388608, i1 %120) #1, !dbg !66
  %124 = extractvalue { i32, i32 } %123, 0, !dbg !66
  %125 = extractvalue { i32, i32 } %123, 1, !dbg !66
  %126 = and i1 %26, %101, !dbg !67
  %127 = and i1 %71, %101, !dbg !67
  %128 = add i32 %10, 2, !dbg !68
  %129 = sext i32 %128 to i64, !dbg !69
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !69
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %115, i1 %126, i32 -8388608, i1 %126) #1, !dbg !70
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %127, i32 -8388608, i1 %127) #1, !dbg !70
  %133 = and i1 %101, %34, !dbg !71
  %134 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %130, i1 %133, i32 -8388608, i1 %133, i32 -8388608, i1 %133) #1, !dbg !72
  %135 = extractvalue { i32, i32 } %134, 0, !dbg !72
  %136 = extractvalue { i32, i32 } %134, 1, !dbg !72
  %137 = add nsw i32 %53, 1, !dbg !73
  %138 = icmp ult i32 %137, 16, !dbg !73
  %139 = and i1 %14, %138, !dbg !74
  %140 = add i32 %10, 14, !dbg !75
  %141 = sext i32 %140 to i64, !dbg !76
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !76
  %143 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %142, i1 %139, i32 -8388608, i1 %139, i32 -8388608, i1 %139) #1, !dbg !77
  %144 = extractvalue { i32, i32 } %143, 0, !dbg !77
  %145 = extractvalue { i32, i32 } %143, 1, !dbg !77
  %146 = and i1 %18, %138, !dbg !78
  %147 = and i1 %61, %138, !dbg !78
  %148 = add i32 %10, 15, !dbg !79
  %149 = add i32 %10, 16, !dbg !79
  %150 = sext i32 %148 to i64, !dbg !80
  %151 = getelementptr float, ptr addrspace(1) %0, i64 %150, !dbg !80
  %152 = sext i32 %149 to i64, !dbg !80
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !80
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %151, i1 %146, i32 -8388608, i1 %146) #1, !dbg !81
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %147, i32 -8388608, i1 %147) #1, !dbg !81
  %156 = and i1 %25, %138, !dbg !82
  %157 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %153, i1 %156, i32 -8388608, i1 %156, i32 -8388608, i1 %156) #1, !dbg !83
  %158 = extractvalue { i32, i32 } %157, 0, !dbg !83
  %159 = extractvalue { i32, i32 } %157, 1, !dbg !83
  %160 = or i32 %137, %.decomposed, !dbg !84
  %161 = icmp ult i32 %160, 16, !dbg !84
  %162 = add i32 %10, 17, !dbg !85
  %163 = add i32 %10, 18, !dbg !85
  %164 = sext i32 %162 to i64, !dbg !86
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !86
  %166 = sext i32 %163 to i64, !dbg !86
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !86
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %165, i1 %161, i32 -8388608, i1 %161) #1, !dbg !87
  %169 = add nsw i32 %53, 2, !dbg !33
  %170 = icmp ult i32 %169, 16, !dbg !33
  %171 = and i1 %14, %170, !dbg !88
  %172 = add i32 %10, 30, !dbg !89
  %173 = sext i32 %172 to i64, !dbg !90
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !90
  %175 = and i1 %18, %170, !dbg !91
  %176 = and i1 %61, %170, !dbg !91
  %177 = add i32 %10, 31, !dbg !92
  %178 = add i32 %10, 32, !dbg !92
  %179 = sext i32 %177 to i64, !dbg !93
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !93
  %181 = sext i32 %178 to i64, !dbg !93
  %182 = getelementptr float, ptr addrspace(1) %0, i64 %181, !dbg !93
  %183 = and i1 %25, %170, !dbg !94
  %184 = insertelement <4 x i32> poison, i32 %70, i64 0, !dbg !95
  %185 = insertelement <4 x i32> %184, i32 %169, i64 1, !dbg !95
  %186 = insertelement <4 x i32> %185, i32 %137, i64 2, !dbg !95
  %187 = shufflevector <4 x i32> %186, <4 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 0>, !dbg !95
  %188 = insertelement <4 x i32> poison, i32 %169, i64 0, !dbg !95
  %189 = insertelement <4 x i32> %188, i32 %.decomposed, i64 1, !dbg !95
  %190 = insertelement <4 x i32> %189, i32 %33, i64 2, !dbg !95
  %191 = insertelement <4 x i32> %190, i32 %137, i64 3, !dbg !95
  %192 = or <4 x i32> %187, %191, !dbg !95
  %193 = icmp ult <4 x i32> %192, splat (i32 16), !dbg !95
  %194 = extractelement <4 x i1> %193, i64 3, !dbg !87
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %167, i1 %194, i32 -8388608, i1 %194) #1, !dbg !87
  %196 = extractelement <4 x i1> %193, i64 2, !dbg !96
  %197 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %167, i1 %196, i32 -8388608, i1 %196, i32 -8388608, i1 %196) #1, !dbg !96
  %198 = extractvalue { i32, i32 } %197, 0, !dbg !96
  %199 = extractvalue { i32, i32 } %197, 1, !dbg !96
  %200 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %174, i1 %171, i32 -8388608, i1 %171, i32 -8388608, i1 %171) #1, !dbg !97
  %201 = extractvalue { i32, i32 } %200, 0, !dbg !97
  %202 = extractvalue { i32, i32 } %200, 1, !dbg !97
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %180, i1 %175, i32 -8388608, i1 %175) #1, !dbg !98
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %182, i1 %176, i32 -8388608, i1 %176) #1, !dbg !98
  %205 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %182, i1 %183, i32 -8388608, i1 %183, i32 -8388608, i1 %183) #1, !dbg !99
  %206 = extractvalue { i32, i32 } %205, 0, !dbg !99
  %207 = extractvalue { i32, i32 } %205, 1, !dbg !99
  %208 = add i32 %10, 33, !dbg !100
  %209 = add i32 %10, 34, !dbg !100
  %210 = sext i32 %208 to i64, !dbg !101
  %211 = getelementptr float, ptr addrspace(1) %0, i64 %210, !dbg !101
  %212 = sext i32 %209 to i64, !dbg !101
  %213 = getelementptr float, ptr addrspace(1) %0, i64 %212, !dbg !101
  %214 = extractelement <4 x i1> %193, i64 1, !dbg !102
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %211, i1 %214, i32 -8388608, i1 %214) #1, !dbg !102
  %216 = extractelement <4 x i1> %193, i64 0, !dbg !102
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %213, i1 %216, i32 -8388608, i1 %216) #1, !dbg !102
  %218 = or i32 %169, %33, !dbg !103
  %219 = icmp ult i32 %218, 16, !dbg !103
  %220 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %213, i1 %219, i32 -8388608, i1 %219, i32 -8388608, i1 %219) #1, !dbg !104
  %221 = extractvalue { i32, i32 } %220, 0, !dbg !104
  %222 = extractvalue { i32, i32 } %220, 1, !dbg !104
  %223 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !36
  %224 = insertelement <2 x i32> %223, i32 %58, i64 1, !dbg !36
  %225 = bitcast <2 x i32> %224 to <2 x float>, !dbg !36
  %226 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !38
  %227 = insertelement <2 x i32> %226, i32 %64, i64 1, !dbg !38
  %228 = bitcast <2 x i32> %227 to <2 x float>, !dbg !38
  %229 = fcmp ogt <2 x float> %228, %225, !dbg !105
  %230 = fcmp uno <2 x float> %228, zeroinitializer, !dbg !109
  %231 = or <2 x i1> %229, %230, !dbg !110
  %.v = select <2 x i1> %231, <2 x i32> %227, <2 x i32> %224, !dbg !111
  %232 = bitcast <2 x i32> %.v to <2 x float>, !dbg !111
  %233 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !40
  %234 = insertelement <2 x i32> %233, i32 %68, i64 1, !dbg !40
  %235 = bitcast <2 x i32> %234 to <2 x float>, !dbg !40
  %236 = fcmp olt <2 x float> %232, %235, !dbg !112
  %237 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !42
  %238 = insertelement <2 x i32> %237, i32 %75, i64 1, !dbg !42
  %239 = bitcast <2 x i32> %238 to <2 x float>, !dbg !42
  %240 = fcmp uno <2 x float> %235, zeroinitializer, !dbg !114
  %241 = or <2 x i1> %236, %240, !dbg !115
  %.v1 = select <2 x i1> %241, <2 x i32> %234, <2 x i32> %.v, !dbg !116
  %242 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !116
  %243 = fcmp olt <2 x float> %242, %239, !dbg !117
  %244 = fcmp uno <2 x float> %239, zeroinitializer, !dbg !119
  %245 = or <2 x i1> %244, %243, !dbg !120
  %.v2 = select <2 x i1> %245, <2 x i32> %238, <2 x i32> %.v1, !dbg !121
  %246 = bitcast <2 x i32> %.v2 to <2 x float>, !dbg !121
  %247 = zext <2 x i1> %229 to <2 x i8>, !dbg !122
  %248 = select <2 x i1> %236, <2 x i8> splat (i8 2), <2 x i8> %247, !dbg !123
  %249 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !44
  %250 = insertelement <2 x i32> %249, i32 %79, i64 1, !dbg !44
  %251 = bitcast <2 x i32> %250 to <2 x float>, !dbg !44
  %252 = fcmp uno <2 x float> %251, zeroinitializer, !dbg !124
  %253 = fcmp olt <2 x float> %246, %251, !dbg !126
  %254 = or <2 x i1> %252, %253, !dbg !127
  %.v3 = select <2 x i1> %254, <2 x i32> %250, <2 x i32> %.v2, !dbg !128
  %255 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !128
  %256 = insertelement <2 x i32> poison, i32 %83, i64 0, !dbg !47
  %257 = insertelement <2 x i32> %256, i32 %84, i64 1, !dbg !47
  %258 = bitcast <2 x i32> %257 to <2 x float>, !dbg !47
  %259 = fcmp olt <2 x float> %255, %258, !dbg !129
  %260 = fcmp uno <2 x float> %258, zeroinitializer, !dbg !131
  %261 = or <2 x i1> %260, %259, !dbg !132
  %.v4 = select <2 x i1> %261, <2 x i32> %257, <2 x i32> %.v3, !dbg !133
  %262 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !133
  %263 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !49
  %264 = insertelement <2 x i32> %263, i32 %88, i64 1, !dbg !49
  %265 = bitcast <2 x i32> %264 to <2 x float>, !dbg !49
  %266 = fcmp olt <2 x float> %262, %265, !dbg !134
  %267 = fcmp uno <2 x float> %265, zeroinitializer, !dbg !136
  %268 = or <2 x i1> %267, %266, !dbg !137
  %.v5 = select <2 x i1> %268, <2 x i32> %264, <2 x i32> %.v4, !dbg !138
  %269 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !138
  %270 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !51
  %271 = insertelement <2 x i32> %270, i32 %92, i64 1, !dbg !51
  %272 = bitcast <2 x i32> %271 to <2 x float>, !dbg !51
  %273 = fcmp olt <2 x float> %269, %272, !dbg !139
  %274 = fcmp uno <2 x float> %272, zeroinitializer, !dbg !141
  %275 = or <2 x i1> %274, %273, !dbg !142
  %.v6 = select <2 x i1> %275, <2 x i32> %271, <2 x i32> %.v5, !dbg !143
  %276 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !143
  %277 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !53
  %278 = insertelement <2 x i32> %277, i32 %96, i64 1, !dbg !53
  %279 = bitcast <2 x i32> %278 to <2 x float>, !dbg !53
  %280 = fcmp olt <2 x float> %276, %279, !dbg !144
  %281 = fcmp uno <2 x float> %279, zeroinitializer, !dbg !146
  %282 = or <2 x i1> %281, %280, !dbg !147
  %.v7 = select <2 x i1> %282, <2 x i32> %278, <2 x i32> %.v6, !dbg !148
  %283 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !148
  %284 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !55
  %285 = insertelement <2 x i32> %284, i32 %100, i64 1, !dbg !55
  %286 = bitcast <2 x i32> %285 to <2 x float>, !dbg !55
  %287 = fcmp olt <2 x float> %283, %286, !dbg !149
  %288 = fcmp uno <2 x float> %286, zeroinitializer, !dbg !151
  %289 = or <2 x i1> %288, %287, !dbg !152
  %.v8 = select <2 x i1> %289, <2 x i32> %285, <2 x i32> %.v7, !dbg !153
  %290 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !153
  %291 = insertelement <2 x i32> poison, i32 %107, i64 0, !dbg !59
  %292 = insertelement <2 x i32> %291, i32 %108, i64 1, !dbg !59
  %293 = bitcast <2 x i32> %292 to <2 x float>, !dbg !59
  %294 = fcmp olt <2 x float> %290, %293, !dbg !154
  %295 = fcmp uno <2 x float> %293, zeroinitializer, !dbg !156
  %296 = or <2 x i1> %295, %294, !dbg !157
  %.v9 = select <2 x i1> %296, <2 x i32> %292, <2 x i32> %.v8, !dbg !158
  %297 = bitcast <2 x i32> %.v9 to <2 x float>, !dbg !158
  %298 = insertelement <2 x i32> poison, i32 %117, i64 0, !dbg !63
  %299 = insertelement <2 x i32> %298, i32 %118, i64 1, !dbg !63
  %300 = bitcast <2 x i32> %299 to <2 x float>, !dbg !63
  %301 = fcmp olt <2 x float> %297, %300, !dbg !159
  %302 = fcmp uno <2 x float> %300, zeroinitializer, !dbg !161
  %303 = or <2 x i1> %302, %301, !dbg !162
  %.v10 = select <2 x i1> %303, <2 x i32> %299, <2 x i32> %.v9, !dbg !163
  %304 = bitcast <2 x i32> %.v10 to <2 x float>, !dbg !163
  %305 = insertelement <2 x i32> poison, i32 %124, i64 0, !dbg !66
  %306 = insertelement <2 x i32> %305, i32 %125, i64 1, !dbg !66
  %307 = bitcast <2 x i32> %306 to <2 x float>, !dbg !66
  %308 = fcmp olt <2 x float> %304, %307, !dbg !164
  %309 = fcmp uno <2 x float> %307, zeroinitializer, !dbg !166
  %310 = or <2 x i1> %309, %308, !dbg !167
  %.v11 = select <2 x i1> %310, <2 x i32> %306, <2 x i32> %.v10, !dbg !168
  %311 = bitcast <2 x i32> %.v11 to <2 x float>, !dbg !168
  %312 = insertelement <2 x i32> poison, i32 %131, i64 0, !dbg !70
  %313 = insertelement <2 x i32> %312, i32 %132, i64 1, !dbg !70
  %314 = bitcast <2 x i32> %313 to <2 x float>, !dbg !70
  %315 = fcmp olt <2 x float> %311, %314, !dbg !169
  %316 = insertelement <2 x i32> poison, i32 %135, i64 0, !dbg !72
  %317 = insertelement <2 x i32> %316, i32 %136, i64 1, !dbg !72
  %318 = bitcast <2 x i32> %317 to <2 x float>, !dbg !72
  %319 = fcmp uno <2 x float> %314, zeroinitializer, !dbg !171
  %320 = or <2 x i1> %319, %315, !dbg !172
  %.v12 = select <2 x i1> %320, <2 x i32> %313, <2 x i32> %.v11, !dbg !173
  %321 = bitcast <2 x i32> %.v12 to <2 x float>, !dbg !173
  %322 = fcmp olt <2 x float> %321, %318, !dbg !174
  %323 = fcmp uno <2 x float> %318, zeroinitializer, !dbg !176
  %324 = or <2 x i1> %323, %322, !dbg !177
  %.v13 = select <2 x i1> %324, <2 x i32> %317, <2 x i32> %.v12, !dbg !178
  %325 = bitcast <2 x i32> %.v13 to <2 x float>, !dbg !178
  %326 = select <2 x i1> %243, <2 x i8> splat (i8 3), <2 x i8> %248, !dbg !179
  %327 = select <2 x i1> %253, <2 x i8> splat (i8 4), <2 x i8> %326, !dbg !180
  %328 = select <2 x i1> %259, <2 x i8> splat (i8 5), <2 x i8> %327, !dbg !181
  %329 = select <2 x i1> %266, <2 x i8> splat (i8 6), <2 x i8> %328, !dbg !182
  %330 = select <2 x i1> %273, <2 x i8> splat (i8 7), <2 x i8> %329, !dbg !183
  %331 = select <2 x i1> %280, <2 x i8> splat (i8 8), <2 x i8> %330, !dbg !184
  %332 = select <2 x i1> %287, <2 x i8> splat (i8 9), <2 x i8> %331, !dbg !185
  %333 = select <2 x i1> %294, <2 x i8> splat (i8 10), <2 x i8> %332, !dbg !186
  %334 = select <2 x i1> %301, <2 x i8> splat (i8 11), <2 x i8> %333, !dbg !187
  %335 = select <2 x i1> %308, <2 x i8> splat (i8 12), <2 x i8> %334, !dbg !188
  %336 = select <2 x i1> %315, <2 x i8> splat (i8 13), <2 x i8> %335, !dbg !189
  %337 = insertelement <2 x i32> poison, i32 %144, i64 0, !dbg !77
  %338 = insertelement <2 x i32> %337, i32 %145, i64 1, !dbg !77
  %339 = bitcast <2 x i32> %338 to <2 x float>, !dbg !77
  %340 = fcmp uno <2 x float> %339, zeroinitializer, !dbg !190
  %341 = fcmp olt <2 x float> %325, %339, !dbg !192
  %342 = or <2 x i1> %340, %341, !dbg !193
  %.v14 = select <2 x i1> %342, <2 x i32> %338, <2 x i32> %.v13, !dbg !194
  %343 = bitcast <2 x i32> %.v14 to <2 x float>, !dbg !194
  %344 = insertelement <2 x i32> poison, i32 %154, i64 0, !dbg !81
  %345 = insertelement <2 x i32> %344, i32 %155, i64 1, !dbg !81
  %346 = bitcast <2 x i32> %345 to <2 x float>, !dbg !81
  %347 = fcmp olt <2 x float> %343, %346, !dbg !195
  %348 = fcmp uno <2 x float> %346, zeroinitializer, !dbg !197
  %349 = or <2 x i1> %348, %347, !dbg !198
  %.v15 = select <2 x i1> %349, <2 x i32> %345, <2 x i32> %.v14, !dbg !199
  %350 = bitcast <2 x i32> %.v15 to <2 x float>, !dbg !199
  %351 = insertelement <2 x i32> poison, i32 %158, i64 0, !dbg !83
  %352 = insertelement <2 x i32> %351, i32 %159, i64 1, !dbg !83
  %353 = bitcast <2 x i32> %352 to <2 x float>, !dbg !83
  %354 = fcmp olt <2 x float> %350, %353, !dbg !200
  %355 = fcmp uno <2 x float> %353, zeroinitializer, !dbg !202
  %356 = or <2 x i1> %355, %354, !dbg !203
  %.v16 = select <2 x i1> %356, <2 x i32> %352, <2 x i32> %.v15, !dbg !204
  %357 = bitcast <2 x i32> %.v16 to <2 x float>, !dbg !204
  %358 = insertelement <2 x i32> poison, i32 %168, i64 0, !dbg !87
  %359 = insertelement <2 x i32> %358, i32 %195, i64 1, !dbg !87
  %360 = bitcast <2 x i32> %359 to <2 x float>, !dbg !87
  %361 = fcmp olt <2 x float> %357, %360, !dbg !205
  %362 = fcmp uno <2 x float> %360, zeroinitializer, !dbg !207
  %363 = or <2 x i1> %362, %361, !dbg !208
  %.v17 = select <2 x i1> %363, <2 x i32> %359, <2 x i32> %.v16, !dbg !209
  %364 = bitcast <2 x i32> %.v17 to <2 x float>, !dbg !209
  %365 = insertelement <2 x i32> poison, i32 %198, i64 0, !dbg !96
  %366 = insertelement <2 x i32> %365, i32 %199, i64 1, !dbg !96
  %367 = bitcast <2 x i32> %366 to <2 x float>, !dbg !96
  %368 = fcmp olt <2 x float> %364, %367, !dbg !210
  %369 = fcmp uno <2 x float> %367, zeroinitializer, !dbg !212
  %370 = or <2 x i1> %369, %368, !dbg !213
  %.v18 = select <2 x i1> %370, <2 x i32> %366, <2 x i32> %.v17, !dbg !214
  %371 = bitcast <2 x i32> %.v18 to <2 x float>, !dbg !214
  %372 = insertelement <2 x i32> poison, i32 %201, i64 0, !dbg !97
  %373 = insertelement <2 x i32> %372, i32 %202, i64 1, !dbg !97
  %374 = bitcast <2 x i32> %373 to <2 x float>, !dbg !97
  %375 = fcmp olt <2 x float> %371, %374, !dbg !215
  %376 = fcmp uno <2 x float> %374, zeroinitializer, !dbg !217
  %377 = or <2 x i1> %376, %375, !dbg !218
  %.v19 = select <2 x i1> %377, <2 x i32> %373, <2 x i32> %.v18, !dbg !219
  %378 = bitcast <2 x i32> %.v19 to <2 x float>, !dbg !219
  %379 = insertelement <2 x i32> poison, i32 %203, i64 0, !dbg !98
  %380 = insertelement <2 x i32> %379, i32 %204, i64 1, !dbg !98
  %381 = bitcast <2 x i32> %380 to <2 x float>, !dbg !98
  %382 = fcmp olt <2 x float> %378, %381, !dbg !220
  %383 = fcmp uno <2 x float> %381, zeroinitializer, !dbg !222
  %384 = or <2 x i1> %383, %382, !dbg !223
  %.v20 = select <2 x i1> %384, <2 x i32> %380, <2 x i32> %.v19, !dbg !224
  %385 = bitcast <2 x i32> %.v20 to <2 x float>, !dbg !224
  %386 = insertelement <2 x i32> poison, i32 %206, i64 0, !dbg !99
  %387 = insertelement <2 x i32> %386, i32 %207, i64 1, !dbg !99
  %388 = bitcast <2 x i32> %387 to <2 x float>, !dbg !99
  %389 = fcmp olt <2 x float> %385, %388, !dbg !225
  %390 = fcmp uno <2 x float> %388, zeroinitializer, !dbg !227
  %391 = or <2 x i1> %390, %389, !dbg !228
  %.v21 = select <2 x i1> %391, <2 x i32> %387, <2 x i32> %.v20, !dbg !229
  %392 = bitcast <2 x i32> %.v21 to <2 x float>, !dbg !229
  %393 = insertelement <2 x i32> poison, i32 %215, i64 0, !dbg !102
  %394 = insertelement <2 x i32> %393, i32 %217, i64 1, !dbg !102
  %395 = bitcast <2 x i32> %394 to <2 x float>, !dbg !102
  %396 = fcmp olt <2 x float> %392, %395, !dbg !230
  %397 = fcmp uno <2 x float> %395, zeroinitializer, !dbg !232
  %398 = or <2 x i1> %397, %396, !dbg !233
  %.v22 = select <2 x i1> %398, <2 x i32> %394, <2 x i32> %.v21, !dbg !234
  %399 = bitcast <2 x i32> %.v22 to <2 x float>, !dbg !234
  %400 = insertelement <2 x i32> poison, i32 %221, i64 0, !dbg !104
  %401 = insertelement <2 x i32> %400, i32 %222, i64 1, !dbg !104
  %402 = bitcast <2 x i32> %401 to <2 x float>, !dbg !104
  %403 = fcmp olt <2 x float> %399, %402, !dbg !235
  %404 = bitcast i32 %221 to float, !dbg !237
  %405 = fcmp uno float %404, 0.000000e+00, !dbg !237
  %406 = bitcast i32 %222 to float, !dbg !237
  %407 = fcmp uno float %406, 0.000000e+00, !dbg !237
  %408 = extractelement <2 x i1> %403, i64 0, !dbg !238
  %409 = or i1 %405, %408, !dbg !238
  %410 = extractelement <2 x i1> %403, i64 1, !dbg !238
  %411 = or i1 %407, %410, !dbg !238
  %412 = select <2 x i1> %322, <2 x i8> splat (i8 14), <2 x i8> %336, !dbg !239
  %413 = select <2 x i1> %341, <2 x i8> splat (i8 15), <2 x i8> %412, !dbg !240
  %414 = select <2 x i1> %347, <2 x i8> splat (i8 16), <2 x i8> %413, !dbg !241
  %415 = select <2 x i1> %354, <2 x i8> splat (i8 17), <2 x i8> %414, !dbg !242
  %416 = select <2 x i1> %361, <2 x i8> splat (i8 18), <2 x i8> %415, !dbg !243
  %417 = select <2 x i1> %368, <2 x i8> splat (i8 19), <2 x i8> %416, !dbg !244
  %418 = select <2 x i1> %375, <2 x i8> splat (i8 20), <2 x i8> %417, !dbg !245
  %419 = select <2 x i1> %382, <2 x i8> splat (i8 21), <2 x i8> %418, !dbg !246
  %420 = select <2 x i1> %389, <2 x i8> splat (i8 22), <2 x i8> %419, !dbg !247
  %421 = select <2 x i1> %396, <2 x i8> splat (i8 23), <2 x i8> %420, !dbg !248
  %422 = select <2 x i1> %403, <2 x i8> splat (i8 24), <2 x i8> %421, !dbg !249
  %423 = getelementptr float, ptr addrspace(1) %1, i64 %121, !dbg !250
  %424 = extractelement <2 x i32> %.v22, i64 0, !dbg !251
  %425 = select i1 %409, i32 %221, i32 %424, !dbg !252
  %426 = extractelement <2 x i32> %.v22, i64 1, !dbg !251
  %427 = select i1 %411, i32 %222, i32 %426, !dbg !252
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %425, i32 %427, ptr addrspace(1) %423, i1 true) #1, !dbg !251
  %428 = getelementptr i8, ptr addrspace(1) %2, i64 %121, !dbg !253
  %429 = bitcast <2 x i8> %422 to i16, !dbg !254
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %429, ptr addrspace(1) %428, i1 true) #1, !dbg !254
  ret void, !dbg !255
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3ugecgqgjtfaiyfztw7qnj6q2gcxnrzbq25rrpqtgslos776sdu.py", directory: "inductor_cache/3u")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_43, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_43, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_43", linkageName: "triton_poi_fused_max_pool2d_with_indices_43", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 34, column: 19, scope: !7)
!17 = !DILocation(line: 38, column: 39, scope: !7)
!18 = !DILocation(line: 38, column: 31, scope: !7)
!19 = !DILocation(line: 40, column: 21, scope: !7)
!20 = !DILocation(line: 44, column: 39, scope: !7)
!21 = !DILocation(line: 44, column: 31, scope: !7)
!22 = !DILocation(line: 47, column: 21, scope: !7)
!23 = !DILocation(line: 56, column: 20, scope: !7)
!24 = !DILocation(line: 58, column: 39, scope: !7)
!25 = !DILocation(line: 58, column: 31, scope: !7)
!26 = !DILocation(line: 63, column: 20, scope: !7)
!27 = !DILocation(line: 72, column: 39, scope: !7)
!28 = !DILocation(line: 72, column: 31, scope: !7)
!29 = !DILocation(line: 75, column: 39, scope: !7)
!30 = !DILocation(line: 75, column: 31, scope: !7)
!31 = !DILocation(line: 81, column: 39, scope: !7)
!32 = !DILocation(line: 81, column: 31, scope: !7)
!33 = !DILocation(line: 127, column: 21, scope: !7)
!34 = !DILocation(line: 29, column: 19, scope: !7)
!35 = !DILocation(line: 37, column: 19, scope: !7)
!36 = !DILocation(line: 38, column: 44, scope: !7)
!37 = !DILocation(line: 43, column: 19, scope: !7)
!38 = !DILocation(line: 44, column: 44, scope: !7)
!39 = !DILocation(line: 50, column: 19, scope: !7)
!40 = !DILocation(line: 51, column: 44, scope: !7)
!41 = !DILocation(line: 57, column: 19, scope: !7)
!42 = !DILocation(line: 58, column: 44, scope: !7)
!43 = !DILocation(line: 64, column: 19, scope: !7)
!44 = !DILocation(line: 65, column: 44, scope: !7)
!45 = !DILocation(line: 68, column: 21, scope: !7)
!46 = !DILocation(line: 71, column: 20, scope: !7)
!47 = !DILocation(line: 72, column: 44, scope: !7)
!48 = !DILocation(line: 74, column: 20, scope: !7)
!49 = !DILocation(line: 75, column: 44, scope: !7)
!50 = !DILocation(line: 77, column: 20, scope: !7)
!51 = !DILocation(line: 78, column: 44, scope: !7)
!52 = !DILocation(line: 80, column: 20, scope: !7)
!53 = !DILocation(line: 81, column: 44, scope: !7)
!54 = !DILocation(line: 83, column: 20, scope: !7)
!55 = !DILocation(line: 84, column: 44, scope: !7)
!56 = !DILocation(line: 90, column: 20, scope: !7)
!57 = !DILocation(line: 91, column: 38, scope: !7)
!58 = !DILocation(line: 91, column: 31, scope: !7)
!59 = !DILocation(line: 91, column: 43, scope: !7)
!60 = !DILocation(line: 93, column: 20, scope: !7)
!61 = !DILocation(line: 94, column: 38, scope: !7)
!62 = !DILocation(line: 94, column: 31, scope: !7)
!63 = !DILocation(line: 94, column: 43, scope: !7)
!64 = !DILocation(line: 96, column: 20, scope: !7)
!65 = !DILocation(line: 97, column: 31, scope: !7)
!66 = !DILocation(line: 97, column: 36, scope: !7)
!67 = !DILocation(line: 99, column: 20, scope: !7)
!68 = !DILocation(line: 100, column: 35, scope: !7)
!69 = !DILocation(line: 100, column: 31, scope: !7)
!70 = !DILocation(line: 100, column: 40, scope: !7)
!71 = !DILocation(line: 102, column: 20, scope: !7)
!72 = !DILocation(line: 103, column: 40, scope: !7)
!73 = !DILocation(line: 108, column: 20, scope: !7)
!74 = !DILocation(line: 109, column: 20, scope: !7)
!75 = !DILocation(line: 110, column: 36, scope: !7)
!76 = !DILocation(line: 110, column: 31, scope: !7)
!77 = !DILocation(line: 110, column: 41, scope: !7)
!78 = !DILocation(line: 112, column: 20, scope: !7)
!79 = !DILocation(line: 113, column: 36, scope: !7)
!80 = !DILocation(line: 113, column: 31, scope: !7)
!81 = !DILocation(line: 113, column: 41, scope: !7)
!82 = !DILocation(line: 115, column: 20, scope: !7)
!83 = !DILocation(line: 116, column: 41, scope: !7)
!84 = !DILocation(line: 118, column: 20, scope: !7)
!85 = !DILocation(line: 119, column: 36, scope: !7)
!86 = !DILocation(line: 119, column: 31, scope: !7)
!87 = !DILocation(line: 119, column: 41, scope: !7)
!88 = !DILocation(line: 128, column: 22, scope: !7)
!89 = !DILocation(line: 129, column: 37, scope: !7)
!90 = !DILocation(line: 129, column: 32, scope: !7)
!91 = !DILocation(line: 131, column: 22, scope: !7)
!92 = !DILocation(line: 132, column: 37, scope: !7)
!93 = !DILocation(line: 132, column: 32, scope: !7)
!94 = !DILocation(line: 134, column: 22, scope: !7)
!95 = !DILocation(line: 137, column: 22, scope: !7)
!96 = !DILocation(line: 122, column: 41, scope: !7)
!97 = !DILocation(line: 129, column: 42, scope: !7)
!98 = !DILocation(line: 132, column: 42, scope: !7)
!99 = !DILocation(line: 135, column: 42, scope: !7)
!100 = !DILocation(line: 138, column: 37, scope: !7)
!101 = !DILocation(line: 138, column: 32, scope: !7)
!102 = !DILocation(line: 138, column: 42, scope: !7)
!103 = !DILocation(line: 140, column: 22, scope: !7)
!104 = !DILocation(line: 141, column: 42, scope: !7)
!105 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !108)
!106 = distinct !DILexicalBlockFile(scope: !7, file: !107, discriminator: 0)
!107 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!108 = !DILocation(line: 45, column: 42, scope: !7)
!109 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !108)
!110 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !108)
!111 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !108)
!112 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !113)
!113 = !DILocation(line: 52, column: 42, scope: !7)
!114 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !113)
!115 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !113)
!116 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !113)
!117 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !118)
!118 = !DILocation(line: 59, column: 42, scope: !7)
!119 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !118)
!120 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !118)
!121 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !118)
!122 = !DILocation(line: 146, column: 38, scope: !7)
!123 = !DILocation(line: 149, column: 38, scope: !7)
!124 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !125)
!125 = !DILocation(line: 66, column: 42, scope: !7)
!126 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !125)
!127 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !125)
!128 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !125)
!129 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !130)
!130 = !DILocation(line: 73, column: 42, scope: !7)
!131 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !130)
!132 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !130)
!133 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !130)
!134 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !135)
!135 = !DILocation(line: 76, column: 42, scope: !7)
!136 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !135)
!137 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !135)
!138 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !135)
!139 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !140)
!140 = !DILocation(line: 79, column: 42, scope: !7)
!141 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !140)
!142 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !140)
!143 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !140)
!144 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !145)
!145 = !DILocation(line: 82, column: 42, scope: !7)
!146 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !145)
!147 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !145)
!148 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !145)
!149 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !150)
!150 = !DILocation(line: 85, column: 42, scope: !7)
!151 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !150)
!152 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !150)
!153 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !150)
!154 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !155)
!155 = !DILocation(line: 92, column: 42, scope: !7)
!156 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !155)
!157 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !155)
!158 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !155)
!159 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !160)
!160 = !DILocation(line: 95, column: 42, scope: !7)
!161 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !160)
!162 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !160)
!163 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !160)
!164 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !165)
!165 = !DILocation(line: 98, column: 42, scope: !7)
!166 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !165)
!167 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !165)
!168 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !165)
!169 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !170)
!170 = !DILocation(line: 101, column: 42, scope: !7)
!171 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !170)
!172 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !170)
!173 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !170)
!174 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !175)
!175 = !DILocation(line: 104, column: 42, scope: !7)
!176 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !175)
!177 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !175)
!178 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !175)
!179 = !DILocation(line: 152, column: 38, scope: !7)
!180 = !DILocation(line: 155, column: 38, scope: !7)
!181 = !DILocation(line: 158, column: 38, scope: !7)
!182 = !DILocation(line: 161, column: 38, scope: !7)
!183 = !DILocation(line: 164, column: 38, scope: !7)
!184 = !DILocation(line: 167, column: 38, scope: !7)
!185 = !DILocation(line: 170, column: 38, scope: !7)
!186 = !DILocation(line: 173, column: 38, scope: !7)
!187 = !DILocation(line: 176, column: 38, scope: !7)
!188 = !DILocation(line: 179, column: 38, scope: !7)
!189 = !DILocation(line: 182, column: 38, scope: !7)
!190 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !191)
!191 = !DILocation(line: 111, column: 42, scope: !7)
!192 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !191)
!193 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !191)
!194 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !191)
!195 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !196)
!196 = !DILocation(line: 114, column: 42, scope: !7)
!197 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !196)
!198 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !196)
!199 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !196)
!200 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !201)
!201 = !DILocation(line: 117, column: 42, scope: !7)
!202 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !201)
!203 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !201)
!204 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !201)
!205 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !206)
!206 = !DILocation(line: 120, column: 42, scope: !7)
!207 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !206)
!208 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !206)
!209 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !206)
!210 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !211)
!211 = !DILocation(line: 123, column: 42, scope: !7)
!212 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !211)
!213 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !211)
!214 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !211)
!215 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !216)
!216 = !DILocation(line: 130, column: 44, scope: !7)
!217 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !216)
!218 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !216)
!219 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !216)
!220 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !221)
!221 = !DILocation(line: 133, column: 44, scope: !7)
!222 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !221)
!223 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !221)
!224 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !221)
!225 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !226)
!226 = !DILocation(line: 136, column: 44, scope: !7)
!227 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !226)
!228 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !226)
!229 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !226)
!230 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !231)
!231 = !DILocation(line: 139, column: 44, scope: !7)
!232 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !231)
!233 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !231)
!234 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !231)
!235 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !236)
!236 = !DILocation(line: 142, column: 44, scope: !7)
!237 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !236)
!238 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !236)
!239 = !DILocation(line: 185, column: 38, scope: !7)
!240 = !DILocation(line: 188, column: 38, scope: !7)
!241 = !DILocation(line: 191, column: 38, scope: !7)
!242 = !DILocation(line: 194, column: 38, scope: !7)
!243 = !DILocation(line: 197, column: 38, scope: !7)
!244 = !DILocation(line: 200, column: 38, scope: !7)
!245 = !DILocation(line: 203, column: 38, scope: !7)
!246 = !DILocation(line: 206, column: 38, scope: !7)
!247 = !DILocation(line: 209, column: 38, scope: !7)
!248 = !DILocation(line: 212, column: 38, scope: !7)
!249 = !DILocation(line: 215, column: 38, scope: !7)
!250 = !DILocation(line: 216, column: 25, scope: !7)
!251 = !DILocation(line: 216, column: 38, scope: !7)
!252 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !236)
!253 = !DILocation(line: 217, column: 25, scope: !7)
!254 = !DILocation(line: 217, column: 38, scope: !7)
!255 = !DILocation(line: 217, column: 4, scope: !7)
