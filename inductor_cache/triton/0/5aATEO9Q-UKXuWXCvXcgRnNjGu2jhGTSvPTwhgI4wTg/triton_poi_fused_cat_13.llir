; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, ptr addrspace(1) %24, ptr addrspace(1) %25, i32 %26) local_unnamed_addr !dbg !7 {
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %29 = shl i32 %28, 9, !dbg !11
  %30 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %31 = shl i32 %30, 1, !dbg !12
  %32 = and i32 %31, 510, !dbg !12
  %33 = or disjoint i32 %29, %32, !dbg !13
  %.frozen = freeze i32 %33, !dbg !14
  %34 = sdiv i32 %.frozen, 1280, !dbg !14
  %35 = mul i32 %34, 1280, !dbg !15
  %.decomposed = sub i32 %.frozen, %35, !dbg !15
  %36 = icmp slt i32 %.decomposed, 256, !dbg !16
  %37 = shl nsw i32 %34, 8, !dbg !17
  %38 = add nsw i32 %37, %.decomposed, !dbg !18
  %39 = sext i32 %38 to i64, !dbg !19
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !19
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %40, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #3, !dbg !20
  %42 = sext i32 %.decomposed to i64, !dbg !21
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !21
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %43, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #3, !dbg !22
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !23
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %45, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #3, !dbg !24
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !24
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !24
  %49 = bitcast i32 %47 to float, !dbg !24
  %50 = bitcast i32 %48 to float, !dbg !24
  %51 = fadd float %49, 0x3EE4F8B580000000, !dbg !25
  %52 = fadd float %50, 0x3EE4F8B580000000, !dbg !25
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i = icmp eq i32 %53, 0, !dbg !26
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i = icmp eq i32 %54, 0, !dbg !26
  br i1 %.not.i, label %60, label %55, !dbg !26

55:                                               ; preds = %27
  br i1 %.not1.i, label %58, label %56, !dbg !26

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

60:                                               ; preds = %27
  br i1 %.not1.i, label %63, label %61, !dbg !26

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

__nv_sqrtf.exit:                                  ; preds = %56, %58, %61, %63
  %.0.i = phi float [ %57, %56 ], [ %59, %58 ], [ %62, %61 ], [ %64, %63 ], !dbg !26
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i1 = icmp eq i32 %65, 0, !dbg !26
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i4 = icmp eq i32 %66, 0, !dbg !26
  br i1 %.not.i1, label %72, label %67, !dbg !26

67:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %70, label %68, !dbg !26

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

72:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %75, label %73, !dbg !26

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

__nv_sqrtf.exit5:                                 ; preds = %68, %70, %73, %75
  %.0.i3 = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !26
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !27
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !27
  %79 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !28
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %79, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #3, !dbg !29
  %81 = getelementptr float, ptr addrspace(1) %4, i64 %42, !dbg !30
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %81, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #3, !dbg !31
  %83 = and i32 %.decomposed, -256, !dbg !32
  %84 = icmp eq i32 %83, 256, !dbg !32
  %85 = add nsw i32 %.decomposed, -256, !dbg !33
  %86 = add nsw i32 %37, %85, !dbg !34
  %87 = sext i32 %86 to i64, !dbg !35
  %88 = getelementptr float, ptr addrspace(1) %5, i64 %87, !dbg !35
  %89 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %88, i1 %84, i32 0, i1 %84, i32 0, i1 %84) #3, !dbg !36
  %90 = sext i32 %85 to i64, !dbg !37
  %91 = getelementptr float, ptr addrspace(1) %6, i64 %90, !dbg !37
  %92 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %91, i1 %84, i32 0, i1 %84, i32 0, i1 %84) #3, !dbg !38
  %93 = getelementptr float, ptr addrspace(1) %7, i64 %90, !dbg !39
  %94 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %93, i1 %84, i32 0, i1 %84, i32 0, i1 %84) #3, !dbg !40
  %95 = extractvalue { i32, i32 } %94, 0, !dbg !40
  %96 = extractvalue { i32, i32 } %94, 1, !dbg !40
  %97 = bitcast i32 %95 to float, !dbg !40
  %98 = bitcast i32 %96 to float, !dbg !40
  %99 = fadd float %97, 0x3EE4F8B580000000, !dbg !41
  %100 = fadd float %98, 0x3EE4F8B580000000, !dbg !41
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i6 = icmp eq i32 %101, 0, !dbg !42
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i9 = icmp eq i32 %102, 0, !dbg !42
  br i1 %.not.i6, label %108, label %103, !dbg !42

103:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %106, label %104, !dbg !42

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

108:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %111, label %109, !dbg !42

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

__nv_sqrtf.exit10:                                ; preds = %104, %106, %109, %111
  %.0.i8 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !42
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i11 = icmp eq i32 %113, 0, !dbg !42
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i14 = icmp eq i32 %114, 0, !dbg !42
  br i1 %.not.i11, label %120, label %115, !dbg !42

115:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %118, label %116, !dbg !42

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

120:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %123, label %121, !dbg !42

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

__nv_sqrtf.exit15:                                ; preds = %116, %118, %121, %123
  %.0.i13 = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !42
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !43
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !43
  %127 = getelementptr float, ptr addrspace(1) %8, i64 %90, !dbg !44
  %128 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %127, i1 %84, i32 0, i1 %84, i32 0, i1 %84) #3, !dbg !45
  %129 = getelementptr float, ptr addrspace(1) %9, i64 %90, !dbg !46
  %130 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %129, i1 %84, i32 0, i1 %84, i32 0, i1 %84) #3, !dbg !47
  %131 = icmp eq i32 %83, 512, !dbg !48
  %132 = add nsw i32 %.decomposed, -512, !dbg !49
  %133 = add nsw i32 %37, %132, !dbg !50
  %134 = sext i32 %133 to i64, !dbg !51
  %135 = getelementptr float, ptr addrspace(1) %10, i64 %134, !dbg !51
  %136 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %135, i1 %131, i32 0, i1 %131, i32 0, i1 %131) #3, !dbg !52
  %137 = sext i32 %132 to i64, !dbg !53
  %138 = getelementptr float, ptr addrspace(1) %11, i64 %137, !dbg !53
  %139 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %138, i1 %131, i32 0, i1 %131, i32 0, i1 %131) #3, !dbg !54
  %140 = getelementptr float, ptr addrspace(1) %12, i64 %137, !dbg !55
  %141 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %140, i1 %131, i32 0, i1 %131, i32 0, i1 %131) #3, !dbg !56
  %142 = extractvalue { i32, i32 } %141, 0, !dbg !56
  %143 = extractvalue { i32, i32 } %141, 1, !dbg !56
  %144 = bitcast i32 %142 to float, !dbg !56
  %145 = bitcast i32 %143 to float, !dbg !56
  %146 = fadd float %144, 0x3EE4F8B580000000, !dbg !57
  %147 = fadd float %145, 0x3EE4F8B580000000, !dbg !57
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i16 = icmp eq i32 %148, 0, !dbg !58
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i19 = icmp eq i32 %149, 0, !dbg !58
  br i1 %.not.i16, label %155, label %150, !dbg !58

150:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %153, label %151, !dbg !58

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %146) #3, !dbg !58
  br label %__nv_sqrtf.exit20, !dbg !58

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %146) #3, !dbg !58
  br label %__nv_sqrtf.exit20, !dbg !58

155:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %158, label %156, !dbg !58

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.f(float %146) #3, !dbg !58
  br label %__nv_sqrtf.exit20, !dbg !58

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.f(float %146) #3, !dbg !58
  br label %__nv_sqrtf.exit20, !dbg !58

__nv_sqrtf.exit20:                                ; preds = %151, %153, %156, %158
  %.0.i18 = phi float [ %152, %151 ], [ %154, %153 ], [ %157, %156 ], [ %159, %158 ], !dbg !58
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i21 = icmp eq i32 %160, 0, !dbg !58
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i24 = icmp eq i32 %161, 0, !dbg !58
  br i1 %.not.i21, label %167, label %162, !dbg !58

162:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %165, label %163, !dbg !58

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %147) #3, !dbg !58
  br label %__nv_sqrtf.exit25, !dbg !58

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %147) #3, !dbg !58
  br label %__nv_sqrtf.exit25, !dbg !58

167:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %170, label %168, !dbg !58

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.f(float %147) #3, !dbg !58
  br label %__nv_sqrtf.exit25, !dbg !58

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.f(float %147) #3, !dbg !58
  br label %__nv_sqrtf.exit25, !dbg !58

__nv_sqrtf.exit25:                                ; preds = %163, %165, %168, %170
  %.0.i23 = phi float [ %164, %163 ], [ %166, %165 ], [ %169, %168 ], [ %171, %170 ], !dbg !58
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !59
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !59
  %174 = getelementptr float, ptr addrspace(1) %13, i64 %137, !dbg !60
  %175 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %174, i1 %131, i32 0, i1 %131, i32 0, i1 %131) #3, !dbg !61
  %176 = getelementptr float, ptr addrspace(1) %14, i64 %137, !dbg !62
  %177 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %176, i1 %131, i32 0, i1 %131, i32 0, i1 %131) #3, !dbg !63
  %178 = icmp eq i32 %83, 768, !dbg !64
  %179 = add nsw i32 %.decomposed, -768, !dbg !65
  %180 = add nsw i32 %37, %179, !dbg !66
  %181 = sext i32 %180 to i64, !dbg !67
  %182 = getelementptr float, ptr addrspace(1) %15, i64 %181, !dbg !67
  %183 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %182, i1 %178, i32 0, i1 %178, i32 0, i1 %178) #3, !dbg !68
  %184 = sext i32 %179 to i64, !dbg !69
  %185 = getelementptr float, ptr addrspace(1) %16, i64 %184, !dbg !69
  %186 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %185, i1 %178, i32 0, i1 %178, i32 0, i1 %178) #3, !dbg !70
  %187 = getelementptr float, ptr addrspace(1) %17, i64 %184, !dbg !71
  %188 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %187, i1 %178, i32 0, i1 %178, i32 0, i1 %178) #3, !dbg !72
  %189 = extractvalue { i32, i32 } %188, 0, !dbg !72
  %190 = extractvalue { i32, i32 } %188, 1, !dbg !72
  %191 = bitcast i32 %189 to float, !dbg !72
  %192 = bitcast i32 %190 to float, !dbg !72
  %193 = fadd float %191, 0x3EE4F8B580000000, !dbg !73
  %194 = fadd float %192, 0x3EE4F8B580000000, !dbg !73
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i26 = icmp eq i32 %195, 0, !dbg !74
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i29 = icmp eq i32 %196, 0, !dbg !74
  br i1 %.not.i26, label %202, label %197, !dbg !74

197:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %200, label %198, !dbg !74

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %193) #3, !dbg !74
  br label %__nv_sqrtf.exit30, !dbg !74

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %193) #3, !dbg !74
  br label %__nv_sqrtf.exit30, !dbg !74

202:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %205, label %203, !dbg !74

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.f(float %193) #3, !dbg !74
  br label %__nv_sqrtf.exit30, !dbg !74

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.f(float %193) #3, !dbg !74
  br label %__nv_sqrtf.exit30, !dbg !74

__nv_sqrtf.exit30:                                ; preds = %198, %200, %203, %205
  %.0.i28 = phi float [ %199, %198 ], [ %201, %200 ], [ %204, %203 ], [ %206, %205 ], !dbg !74
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i31 = icmp eq i32 %207, 0, !dbg !74
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i34 = icmp eq i32 %208, 0, !dbg !74
  br i1 %.not.i31, label %214, label %209, !dbg !74

209:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %212, label %210, !dbg !74

210:                                              ; preds = %209
  %211 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %194) #3, !dbg !74
  br label %__nv_sqrtf.exit35, !dbg !74

212:                                              ; preds = %209
  %213 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %194) #3, !dbg !74
  br label %__nv_sqrtf.exit35, !dbg !74

214:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %217, label %215, !dbg !74

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.f(float %194) #3, !dbg !74
  br label %__nv_sqrtf.exit35, !dbg !74

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.f(float %194) #3, !dbg !74
  br label %__nv_sqrtf.exit35, !dbg !74

__nv_sqrtf.exit35:                                ; preds = %210, %212, %215, %217
  %.0.i33 = phi float [ %211, %210 ], [ %213, %212 ], [ %216, %215 ], [ %218, %217 ], !dbg !74
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !75
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !75
  %221 = getelementptr float, ptr addrspace(1) %18, i64 %184, !dbg !76
  %222 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %221, i1 %178, i32 0, i1 %178, i32 0, i1 %178) #3, !dbg !77
  %223 = getelementptr float, ptr addrspace(1) %19, i64 %184, !dbg !78
  %224 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %223, i1 %178, i32 0, i1 %178, i32 0, i1 %178) #3, !dbg !79
  %225 = icmp sgt i32 %.decomposed, 1023, !dbg !80
  %226 = add nsw i32 %.decomposed, -1024, !dbg !81
  %227 = add nsw i32 %37, %226, !dbg !82
  %228 = sext i32 %227 to i64, !dbg !83
  %229 = getelementptr float, ptr addrspace(1) %20, i64 %228, !dbg !83
  %230 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %229, i1 %225, i32 0, i1 %225, i32 0, i1 %225) #3, !dbg !84
  %231 = sext i32 %226 to i64, !dbg !85
  %232 = getelementptr float, ptr addrspace(1) %21, i64 %231, !dbg !85
  %233 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %232, i1 %225, i32 0, i1 %225, i32 0, i1 %225) #3, !dbg !86
  %234 = getelementptr float, ptr addrspace(1) %22, i64 %231, !dbg !87
  %235 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %234, i1 %225, i32 0, i1 %225, i32 0, i1 %225) #3, !dbg !88
  %236 = extractvalue { i32, i32 } %235, 0, !dbg !88
  %237 = extractvalue { i32, i32 } %235, 1, !dbg !88
  %238 = bitcast i32 %236 to float, !dbg !88
  %239 = bitcast i32 %237 to float, !dbg !88
  %240 = fadd float %238, 0x3EE4F8B580000000, !dbg !89
  %241 = fadd float %239, 0x3EE4F8B580000000, !dbg !89
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !90
  %.not.i36 = icmp eq i32 %242, 0, !dbg !90
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !90
  %.not1.i39 = icmp eq i32 %243, 0, !dbg !90
  br i1 %.not.i36, label %249, label %244, !dbg !90

244:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %247, label %245, !dbg !90

245:                                              ; preds = %244
  %246 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %240) #3, !dbg !90
  br label %__nv_sqrtf.exit40, !dbg !90

247:                                              ; preds = %244
  %248 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %240) #3, !dbg !90
  br label %__nv_sqrtf.exit40, !dbg !90

249:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %252, label %250, !dbg !90

250:                                              ; preds = %249
  %251 = tail call float @llvm.nvvm.sqrt.rn.f(float %240) #3, !dbg !90
  br label %__nv_sqrtf.exit40, !dbg !90

252:                                              ; preds = %249
  %253 = tail call float @llvm.nvvm.sqrt.approx.f(float %240) #3, !dbg !90
  br label %__nv_sqrtf.exit40, !dbg !90

__nv_sqrtf.exit40:                                ; preds = %245, %247, %250, %252
  %.0.i38 = phi float [ %246, %245 ], [ %248, %247 ], [ %251, %250 ], [ %253, %252 ], !dbg !90
  %254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !90
  %.not.i41 = icmp eq i32 %254, 0, !dbg !90
  %255 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !90
  %.not1.i44 = icmp eq i32 %255, 0, !dbg !90
  br i1 %.not.i41, label %261, label %256, !dbg !90

256:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %259, label %257, !dbg !90

257:                                              ; preds = %256
  %258 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %241) #3, !dbg !90
  br label %__nv_sqrtf.exit45, !dbg !90

259:                                              ; preds = %256
  %260 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %241) #3, !dbg !90
  br label %__nv_sqrtf.exit45, !dbg !90

261:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %264, label %262, !dbg !90

262:                                              ; preds = %261
  %263 = tail call float @llvm.nvvm.sqrt.rn.f(float %241) #3, !dbg !90
  br label %__nv_sqrtf.exit45, !dbg !90

264:                                              ; preds = %261
  %265 = tail call float @llvm.nvvm.sqrt.approx.f(float %241) #3, !dbg !90
  br label %__nv_sqrtf.exit45, !dbg !90

__nv_sqrtf.exit45:                                ; preds = %257, %259, %262, %264
  %.0.i43 = phi float [ %258, %257 ], [ %260, %259 ], [ %263, %262 ], [ %265, %264 ], !dbg !90
  %266 = extractvalue { i32, i32 } %230, 1, !dbg !84
  %267 = extractvalue { i32, i32 } %233, 1, !dbg !86
  %268 = extractvalue { i32, i32 } %230, 0, !dbg !84
  %269 = extractvalue { i32, i32 } %233, 0, !dbg !86
  %270 = extractvalue { i32, i32 } %183, 1, !dbg !68
  %271 = bitcast i32 %270 to float, !dbg !68
  %272 = extractvalue { i32, i32 } %186, 1, !dbg !70
  %273 = bitcast i32 %272 to float, !dbg !70
  %274 = fsub float %271, %273, !dbg !91
  %275 = fmul float %274, %220, !dbg !92
  %276 = extractvalue { i32, i32 } %222, 1, !dbg !77
  %277 = bitcast i32 %276 to float, !dbg !77
  %278 = fmul float %275, %277, !dbg !93
  %279 = extractvalue { i32, i32 } %224, 1, !dbg !79
  %280 = bitcast i32 %279 to float, !dbg !79
  %281 = fadd float %278, %280, !dbg !94
  %282 = fcmp olt float %281, 0.000000e+00, !dbg !95
  %283 = select i1 %282, float 0.000000e+00, float %281, !dbg !99
  %284 = extractvalue { i32, i32 } %183, 0, !dbg !68
  %285 = bitcast i32 %284 to float, !dbg !68
  %286 = extractvalue { i32, i32 } %186, 0, !dbg !70
  %287 = bitcast i32 %286 to float, !dbg !70
  %288 = fsub float %285, %287, !dbg !91
  %289 = fmul float %288, %219, !dbg !92
  %290 = extractvalue { i32, i32 } %222, 0, !dbg !77
  %291 = bitcast i32 %290 to float, !dbg !77
  %292 = fmul float %289, %291, !dbg !93
  %293 = extractvalue { i32, i32 } %224, 0, !dbg !79
  %294 = bitcast i32 %293 to float, !dbg !79
  %295 = fadd float %292, %294, !dbg !94
  %296 = fcmp olt float %295, 0.000000e+00, !dbg !95
  %297 = select i1 %296, float 0.000000e+00, float %295, !dbg !99
  %298 = extractvalue { i32, i32 } %136, 1, !dbg !52
  %299 = extractvalue { i32, i32 } %139, 1, !dbg !54
  %300 = extractvalue { i32, i32 } %175, 1, !dbg !61
  %301 = extractvalue { i32, i32 } %177, 1, !dbg !63
  %302 = extractvalue { i32, i32 } %136, 0, !dbg !52
  %303 = extractvalue { i32, i32 } %139, 0, !dbg !54
  %304 = extractvalue { i32, i32 } %175, 0, !dbg !61
  %305 = extractvalue { i32, i32 } %177, 0, !dbg !63
  %306 = extractvalue { i32, i32 } %89, 1, !dbg !36
  %307 = extractvalue { i32, i32 } %92, 1, !dbg !38
  %308 = extractvalue { i32, i32 } %128, 1, !dbg !45
  %309 = extractvalue { i32, i32 } %130, 1, !dbg !47
  %310 = extractvalue { i32, i32 } %89, 0, !dbg !36
  %311 = extractvalue { i32, i32 } %92, 0, !dbg !38
  %312 = extractvalue { i32, i32 } %128, 0, !dbg !45
  %313 = extractvalue { i32, i32 } %130, 0, !dbg !47
  %314 = extractvalue { i32, i32 } %41, 1, !dbg !20
  %315 = extractvalue { i32, i32 } %44, 1, !dbg !22
  %316 = extractvalue { i32, i32 } %80, 1, !dbg !29
  %317 = extractvalue { i32, i32 } %82, 1, !dbg !31
  %318 = extractvalue { i32, i32 } %41, 0, !dbg !20
  %319 = extractvalue { i32, i32 } %44, 0, !dbg !22
  %320 = extractvalue { i32, i32 } %80, 0, !dbg !29
  %321 = extractvalue { i32, i32 } %82, 0, !dbg !31
  %322 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !100
  %323 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !100
  %324 = getelementptr float, ptr addrspace(1) %23, i64 %231, !dbg !101
  %325 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %324, i1 %225, i32 0, i1 %225, i32 0, i1 %225) #3, !dbg !102
  %326 = extractvalue { i32, i32 } %325, 0, !dbg !102
  %327 = extractvalue { i32, i32 } %325, 1, !dbg !102
  %328 = getelementptr float, ptr addrspace(1) %24, i64 %231, !dbg !103
  %329 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %328, i1 %225, i32 0, i1 %225, i32 0, i1 %225) #3, !dbg !104
  %330 = extractvalue { i32, i32 } %329, 0, !dbg !104
  %331 = extractvalue { i32, i32 } %329, 1, !dbg !104
  %332 = insertelement <8 x i32> poison, i32 %266, i64 0, !dbg !84
  %333 = insertelement <8 x i32> %332, i32 %268, i64 1, !dbg !84
  %334 = insertelement <8 x i32> %333, i32 %318, i64 2, !dbg !84
  %335 = insertelement <8 x i32> %334, i32 %314, i64 3, !dbg !84
  %336 = insertelement <8 x i32> %335, i32 %310, i64 4, !dbg !84
  %337 = insertelement <8 x i32> %336, i32 %306, i64 5, !dbg !84
  %338 = insertelement <8 x i32> %337, i32 %302, i64 6, !dbg !84
  %339 = insertelement <8 x i32> %338, i32 %298, i64 7, !dbg !84
  %340 = bitcast <8 x i32> %339 to <8 x float>, !dbg !84
  %341 = insertelement <8 x i32> poison, i32 %267, i64 0, !dbg !86
  %342 = insertelement <8 x i32> %341, i32 %269, i64 1, !dbg !86
  %343 = insertelement <8 x i32> %342, i32 %319, i64 2, !dbg !86
  %344 = insertelement <8 x i32> %343, i32 %315, i64 3, !dbg !86
  %345 = insertelement <8 x i32> %344, i32 %311, i64 4, !dbg !86
  %346 = insertelement <8 x i32> %345, i32 %307, i64 5, !dbg !86
  %347 = insertelement <8 x i32> %346, i32 %303, i64 6, !dbg !86
  %348 = insertelement <8 x i32> %347, i32 %299, i64 7, !dbg !86
  %349 = bitcast <8 x i32> %348 to <8 x float>, !dbg !86
  %350 = fsub <8 x float> %340, %349, !dbg !105
  %351 = insertelement <8 x float> poison, float %323, i64 0, !dbg !106
  %352 = insertelement <8 x float> %351, float %322, i64 1, !dbg !106
  %353 = insertelement <8 x float> %352, float %77, i64 2, !dbg !106
  %354 = insertelement <8 x float> %353, float %78, i64 3, !dbg !106
  %355 = insertelement <8 x float> %354, float %125, i64 4, !dbg !106
  %356 = insertelement <8 x float> %355, float %126, i64 5, !dbg !106
  %357 = insertelement <8 x float> %356, float %172, i64 6, !dbg !106
  %358 = insertelement <8 x float> %357, float %173, i64 7, !dbg !106
  %359 = fmul <8 x float> %350, %358, !dbg !106
  %360 = insertelement <8 x i32> poison, i32 %327, i64 0, !dbg !102
  %361 = insertelement <8 x i32> %360, i32 %326, i64 1, !dbg !102
  %362 = insertelement <8 x i32> %361, i32 %320, i64 2, !dbg !102
  %363 = insertelement <8 x i32> %362, i32 %316, i64 3, !dbg !102
  %364 = insertelement <8 x i32> %363, i32 %312, i64 4, !dbg !102
  %365 = insertelement <8 x i32> %364, i32 %308, i64 5, !dbg !102
  %366 = insertelement <8 x i32> %365, i32 %304, i64 6, !dbg !102
  %367 = insertelement <8 x i32> %366, i32 %300, i64 7, !dbg !102
  %368 = bitcast <8 x i32> %367 to <8 x float>, !dbg !102
  %369 = fmul <8 x float> %359, %368, !dbg !107
  %370 = insertelement <8 x i32> poison, i32 %331, i64 0, !dbg !104
  %371 = insertelement <8 x i32> %370, i32 %330, i64 1, !dbg !104
  %372 = insertelement <8 x i32> %371, i32 %321, i64 2, !dbg !104
  %373 = insertelement <8 x i32> %372, i32 %317, i64 3, !dbg !104
  %374 = insertelement <8 x i32> %373, i32 %313, i64 4, !dbg !104
  %375 = insertelement <8 x i32> %374, i32 %309, i64 5, !dbg !104
  %376 = insertelement <8 x i32> %375, i32 %305, i64 6, !dbg !104
  %377 = insertelement <8 x i32> %376, i32 %301, i64 7, !dbg !104
  %378 = bitcast <8 x i32> %377 to <8 x float>, !dbg !104
  %379 = fadd <8 x float> %369, %378, !dbg !108
  %380 = fcmp olt <8 x float> %379, zeroinitializer, !dbg !109
  %381 = extractelement <8 x i1> %380, i64 7, !dbg !111
  %382 = extractelement <8 x float> %379, i64 7, !dbg !111
  %383 = select i1 %381, float 0.000000e+00, float %382, !dbg !111
  %384 = extractelement <8 x i1> %380, i64 6, !dbg !111
  %385 = extractelement <8 x float> %379, i64 6, !dbg !111
  %386 = select i1 %384, float 0.000000e+00, float %385, !dbg !111
  %387 = extractelement <8 x i1> %380, i64 5, !dbg !113
  %388 = extractelement <8 x float> %379, i64 5, !dbg !113
  %389 = select i1 %387, float 0.000000e+00, float %388, !dbg !113
  %390 = extractelement <8 x i1> %380, i64 4, !dbg !113
  %391 = extractelement <8 x float> %379, i64 4, !dbg !113
  %392 = select i1 %390, float 0.000000e+00, float %391, !dbg !113
  %393 = extractelement <8 x i1> %380, i64 3, !dbg !115
  %394 = extractelement <8 x float> %379, i64 3, !dbg !115
  %395 = select i1 %393, float 0.000000e+00, float %394, !dbg !115
  %396 = extractelement <8 x i1> %380, i64 2, !dbg !115
  %397 = extractelement <8 x float> %379, i64 2, !dbg !115
  %398 = select i1 %396, float 0.000000e+00, float %397, !dbg !115
  %399 = extractelement <8 x i1> %380, i64 1, !dbg !117
  %400 = extractelement <8 x float> %379, i64 1, !dbg !117
  %401 = select i1 %399, float 0.000000e+00, float %400, !dbg !117
  %402 = extractelement <8 x i1> %380, i64 0, !dbg !117
  %403 = extractelement <8 x float> %379, i64 0, !dbg !117
  %404 = select i1 %402, float 0.000000e+00, float %403, !dbg !117
  %405 = select i1 %225, float %401, float 0.000000e+00, !dbg !118
  %406 = select i1 %225, float %404, float 0.000000e+00, !dbg !118
  %407 = select i1 %178, float %297, float %405, !dbg !119
  %408 = select i1 %178, float %283, float %406, !dbg !119
  %409 = select i1 %131, float %386, float %407, !dbg !119
  %410 = select i1 %131, float %383, float %408, !dbg !119
  %411 = select i1 %84, float %392, float %409, !dbg !119
  %412 = select i1 %84, float %389, float %410, !dbg !119
  %413 = select i1 %36, float %398, float %411, !dbg !119
  %414 = select i1 %36, float %395, float %412, !dbg !119
  %415 = sext i32 %33 to i64, !dbg !120
  %416 = getelementptr float, ptr addrspace(1) %25, i64 %415, !dbg !120
  %417 = bitcast float %413 to i32, !dbg !121
  %418 = bitcast float %414 to i32, !dbg !121
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %417, i32 %418, ptr addrspace(1) %416, i1 true) #3, !dbg !121
  ret void, !dbg !122
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctl2kqfehwkyog3svhzyxnj2wyur3woyxsjexgrdy3wqrv4vpc7u.py", directory: "inductor_cache/tl")
!4 = !{ptr @triton_poi_fused_cat_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_13, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_13", linkageName: "triton_poi_fused_cat_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 31, column: 18, scope: !7)
!17 = !DILocation(line: 32, column: 34, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 46, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 35, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 38, column: 27, scope: !7)
!27 = !DILocation(line: 40, column: 20, scope: !7)
!28 = !DILocation(line: 44, column: 31, scope: !7)
!29 = !DILocation(line: 44, column: 36, scope: !7)
!30 = !DILocation(line: 46, column: 31, scope: !7)
!31 = !DILocation(line: 46, column: 36, scope: !7)
!32 = !DILocation(line: 55, column: 20, scope: !7)
!33 = !DILocation(line: 56, column: 50, scope: !7)
!34 = !DILocation(line: 56, column: 41, scope: !7)
!35 = !DILocation(line: 56, column: 31, scope: !7)
!36 = !DILocation(line: 56, column: 56, scope: !7)
!37 = !DILocation(line: 57, column: 31, scope: !7)
!38 = !DILocation(line: 57, column: 45, scope: !7)
!39 = !DILocation(line: 59, column: 31, scope: !7)
!40 = !DILocation(line: 59, column: 45, scope: !7)
!41 = !DILocation(line: 61, column: 20, scope: !7)
!42 = !DILocation(line: 62, column: 27, scope: !7)
!43 = !DILocation(line: 64, column: 20, scope: !7)
!44 = !DILocation(line: 68, column: 31, scope: !7)
!45 = !DILocation(line: 68, column: 45, scope: !7)
!46 = !DILocation(line: 70, column: 31, scope: !7)
!47 = !DILocation(line: 70, column: 45, scope: !7)
!48 = !DILocation(line: 79, column: 20, scope: !7)
!49 = !DILocation(line: 80, column: 51, scope: !7)
!50 = !DILocation(line: 80, column: 42, scope: !7)
!51 = !DILocation(line: 80, column: 32, scope: !7)
!52 = !DILocation(line: 80, column: 57, scope: !7)
!53 = !DILocation(line: 81, column: 32, scope: !7)
!54 = !DILocation(line: 81, column: 46, scope: !7)
!55 = !DILocation(line: 83, column: 32, scope: !7)
!56 = !DILocation(line: 83, column: 46, scope: !7)
!57 = !DILocation(line: 85, column: 20, scope: !7)
!58 = !DILocation(line: 86, column: 27, scope: !7)
!59 = !DILocation(line: 88, column: 20, scope: !7)
!60 = !DILocation(line: 92, column: 32, scope: !7)
!61 = !DILocation(line: 92, column: 46, scope: !7)
!62 = !DILocation(line: 94, column: 32, scope: !7)
!63 = !DILocation(line: 94, column: 46, scope: !7)
!64 = !DILocation(line: 103, column: 20, scope: !7)
!65 = !DILocation(line: 104, column: 51, scope: !7)
!66 = !DILocation(line: 104, column: 42, scope: !7)
!67 = !DILocation(line: 104, column: 32, scope: !7)
!68 = !DILocation(line: 104, column: 57, scope: !7)
!69 = !DILocation(line: 105, column: 32, scope: !7)
!70 = !DILocation(line: 105, column: 46, scope: !7)
!71 = !DILocation(line: 107, column: 32, scope: !7)
!72 = !DILocation(line: 107, column: 46, scope: !7)
!73 = !DILocation(line: 109, column: 20, scope: !7)
!74 = !DILocation(line: 110, column: 27, scope: !7)
!75 = !DILocation(line: 112, column: 20, scope: !7)
!76 = !DILocation(line: 116, column: 32, scope: !7)
!77 = !DILocation(line: 116, column: 46, scope: !7)
!78 = !DILocation(line: 118, column: 32, scope: !7)
!79 = !DILocation(line: 118, column: 46, scope: !7)
!80 = !DILocation(line: 124, column: 20, scope: !7)
!81 = !DILocation(line: 127, column: 53, scope: !7)
!82 = !DILocation(line: 127, column: 43, scope: !7)
!83 = !DILocation(line: 127, column: 33, scope: !7)
!84 = !DILocation(line: 127, column: 59, scope: !7)
!85 = !DILocation(line: 128, column: 33, scope: !7)
!86 = !DILocation(line: 128, column: 48, scope: !7)
!87 = !DILocation(line: 130, column: 33, scope: !7)
!88 = !DILocation(line: 130, column: 48, scope: !7)
!89 = !DILocation(line: 132, column: 22, scope: !7)
!90 = !DILocation(line: 133, column: 28, scope: !7)
!91 = !DILocation(line: 106, column: 20, scope: !7)
!92 = !DILocation(line: 115, column: 20, scope: !7)
!93 = !DILocation(line: 117, column: 20, scope: !7)
!94 = !DILocation(line: 119, column: 20, scope: !7)
!95 = !DILocation(line: 118, column: 15, scope: !96, inlinedAt: !98)
!96 = distinct !DILexicalBlockFile(scope: !7, file: !97, discriminator: 0)
!97 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!98 = !DILocation(line: 121, column: 42, scope: !7)
!99 = !DILocation(line: 121, column: 29, scope: !96, inlinedAt: !98)
!100 = !DILocation(line: 135, column: 22, scope: !7)
!101 = !DILocation(line: 139, column: 33, scope: !7)
!102 = !DILocation(line: 139, column: 48, scope: !7)
!103 = !DILocation(line: 141, column: 33, scope: !7)
!104 = !DILocation(line: 141, column: 48, scope: !7)
!105 = !DILocation(line: 129, column: 22, scope: !7)
!106 = !DILocation(line: 138, column: 22, scope: !7)
!107 = !DILocation(line: 140, column: 22, scope: !7)
!108 = !DILocation(line: 142, column: 22, scope: !7)
!109 = !DILocation(line: 118, column: 15, scope: !96, inlinedAt: !110)
!110 = !DILocation(line: 144, column: 44, scope: !7)
!111 = !DILocation(line: 121, column: 29, scope: !96, inlinedAt: !112)
!112 = !DILocation(line: 97, column: 42, scope: !7)
!113 = !DILocation(line: 121, column: 29, scope: !96, inlinedAt: !114)
!114 = !DILocation(line: 73, column: 42, scope: !7)
!115 = !DILocation(line: 121, column: 29, scope: !96, inlinedAt: !116)
!116 = !DILocation(line: 49, column: 42, scope: !7)
!117 = !DILocation(line: 121, column: 29, scope: !96, inlinedAt: !110)
!118 = !DILocation(line: 146, column: 37, scope: !7)
!119 = !DILocation(line: 0, scope: !7)
!120 = !DILocation(line: 151, column: 25, scope: !7)
!121 = !DILocation(line: 151, column: 38, scope: !7)
!122 = !DILocation(line: 151, column: 4, scope: !7)
