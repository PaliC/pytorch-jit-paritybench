; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 8, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 1, !dbg !12
  %19 = and i32 %18, 254, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = icmp slt i32 %20, 256, !dbg !14
  %22 = sdiv i32 %20, 16, !dbg !15
  %23 = srem i32 %22, 4, !dbg !16
  %24 = sext i32 %20 to i64, !dbg !17
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !17
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 %21) #3, !dbg !18
  %27 = sext i32 %23 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !19
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %21) #3, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %21) #3, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !21
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 %21) #3, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %21) #3, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %21) #3, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %21) #3, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %21) #3, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %6, i64 %27, !dbg !27
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %21) #3, !dbg !28
  %41 = bitcast i32 %40 to float, !dbg !28
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %21) #3, !dbg !28
  %43 = bitcast i32 %42 to float, !dbg !28
  %44 = getelementptr float, ptr addrspace(1) %7, i64 %27, !dbg !29
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %21) #3, !dbg !30
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %21) #3, !dbg !30
  %47 = getelementptr float, ptr addrspace(1) %8, i64 %27, !dbg !31
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %21) #3, !dbg !32
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %21) #3, !dbg !32
  %50 = getelementptr float, ptr addrspace(1) %9, i64 %27, !dbg !33
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %21) #3, !dbg !34
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %21) #3, !dbg !34
  %53 = getelementptr float, ptr addrspace(1) %10, i64 %27, !dbg !35
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %21) #3, !dbg !36
  %55 = bitcast i32 %54 to float, !dbg !36
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %21) #3, !dbg !36
  %57 = bitcast i32 %56 to float, !dbg !36
  %58 = getelementptr float, ptr addrspace(1) %11, i64 %27, !dbg !37
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %21) #3, !dbg !38
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %21) #3, !dbg !38
  %61 = getelementptr float, ptr addrspace(1) %12, i64 %27, !dbg !39
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %21) #3, !dbg !40
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %21) #3, !dbg !40
  %64 = fadd float %41, 0x3EE4F8B580000000, !dbg !41
  %65 = fadd float %43, 0x3EE4F8B580000000, !dbg !41
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i = icmp eq i32 %66, 0, !dbg !42
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i = icmp eq i32 %67, 0, !dbg !42
  br i1 %.not.i, label %73, label %68, !dbg !42

68:                                               ; preds = %14
  br i1 %.not1.i, label %71, label %69, !dbg !42

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

73:                                               ; preds = %14
  br i1 %.not1.i, label %76, label %74, !dbg !42

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %69, %71, %74, %76
  %.0.i = phi float [ %70, %69 ], [ %72, %71 ], [ %75, %74 ], [ %77, %76 ], !dbg !42
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i1 = icmp eq i32 %78, 0, !dbg !42
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i4 = icmp eq i32 %79, 0, !dbg !42
  br i1 %.not.i1, label %85, label %80, !dbg !42

80:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %83, label %81, !dbg !42

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %88, label %86, !dbg !42

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

__nv_sqrtf.exit5:                                 ; preds = %81, %83, %86, %88
  %.0.i3 = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !42
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !43
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !43
  %92 = fadd float %55, 0x3EE4F8B580000000, !dbg !44
  %93 = fadd float %57, 0x3EE4F8B580000000, !dbg !44
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i6 = icmp eq i32 %94, 0, !dbg !45
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i9 = icmp eq i32 %95, 0, !dbg !45
  br i1 %.not.i6, label %101, label %96, !dbg !45

96:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %99, label %97, !dbg !45

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #3, !dbg !45
  br label %__nv_sqrtf.exit10, !dbg !45

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #3, !dbg !45
  br label %__nv_sqrtf.exit10, !dbg !45

101:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %104, label %102, !dbg !45

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #3, !dbg !45
  br label %__nv_sqrtf.exit10, !dbg !45

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #3, !dbg !45
  br label %__nv_sqrtf.exit10, !dbg !45

__nv_sqrtf.exit10:                                ; preds = %97, %99, %102, %104
  %.0.i8 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !45
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i11 = icmp eq i32 %106, 0, !dbg !45
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i14 = icmp eq i32 %107, 0, !dbg !45
  br i1 %.not.i11, label %113, label %108, !dbg !45

108:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %111, label %109, !dbg !45

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #3, !dbg !45
  br label %__nv_sqrtf.exit15, !dbg !45

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #3, !dbg !45
  br label %__nv_sqrtf.exit15, !dbg !45

113:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %116, label %114, !dbg !45

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #3, !dbg !45
  br label %__nv_sqrtf.exit15, !dbg !45

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #3, !dbg !45
  br label %__nv_sqrtf.exit15, !dbg !45

__nv_sqrtf.exit15:                                ; preds = %109, %111, %114, %116
  %.0.i13 = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !45
  %118 = extractvalue { i32, i32 } %32, 1, !dbg !22
  %119 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !20
  %120 = insertelement <2 x i32> %119, i32 %35, i64 1, !dbg !20
  %121 = bitcast <2 x i32> %120 to <2 x float>, !dbg !20
  %122 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !26
  %123 = insertelement <2 x i32> %122, i32 %52, i64 1, !dbg !26
  %124 = bitcast <2 x i32> %123 to <2 x float>, !dbg !26
  %125 = extractvalue { i32, i32 } %32, 0, !dbg !22
  %126 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !20
  %127 = insertelement <2 x i32> %126, i32 %34, i64 1, !dbg !20
  %128 = bitcast <2 x i32> %127 to <2 x float>, !dbg !20
  %129 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !26
  %130 = insertelement <2 x i32> %129, i32 %51, i64 1, !dbg !26
  %131 = bitcast <2 x i32> %130 to <2 x float>, !dbg !26
  %132 = extractvalue { i32, i32 } %26, 1, !dbg !18
  %133 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !30
  %134 = insertelement <2 x i32> %133, i32 %60, i64 1, !dbg !30
  %135 = bitcast <2 x i32> %134 to <2 x float>, !dbg !30
  %136 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !32
  %137 = insertelement <2 x i32> %136, i32 %63, i64 1, !dbg !32
  %138 = bitcast <2 x i32> %137 to <2 x float>, !dbg !32
  %139 = extractvalue { i32, i32 } %26, 0, !dbg !18
  %140 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !30
  %141 = insertelement <2 x i32> %140, i32 %59, i64 1, !dbg !30
  %142 = bitcast <2 x i32> %141 to <2 x float>, !dbg !30
  %143 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !32
  %144 = insertelement <2 x i32> %143, i32 %62, i64 1, !dbg !32
  %145 = bitcast <2 x i32> %144 to <2 x float>, !dbg !32
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !46
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !46
  %148 = insertelement <2 x i32> poison, i32 %139, i64 0, !dbg !18
  %149 = insertelement <2 x i32> %148, i32 %125, i64 1, !dbg !18
  %150 = bitcast <2 x i32> %149 to <2 x float>, !dbg !18
  %151 = fadd <2 x float> %150, %128, !dbg !47
  %152 = fsub <2 x float> %151, %131, !dbg !48
  %153 = insertelement <2 x float> poison, float %90, i64 0, !dbg !49
  %154 = insertelement <2 x float> %153, float %146, i64 1, !dbg !49
  %155 = fmul <2 x float> %152, %154, !dbg !49
  %156 = fmul <2 x float> %155, %142, !dbg !50
  %157 = fadd <2 x float> %156, %145, !dbg !51
  %158 = insertelement <2 x i32> poison, i32 %132, i64 0, !dbg !18
  %159 = insertelement <2 x i32> %158, i32 %118, i64 1, !dbg !18
  %160 = bitcast <2 x i32> %159 to <2 x float>, !dbg !18
  %161 = fadd <2 x float> %160, %121, !dbg !47
  %162 = fsub <2 x float> %161, %124, !dbg !48
  %163 = insertelement <2 x float> poison, float %91, i64 0, !dbg !49
  %164 = insertelement <2 x float> %163, float %147, i64 1, !dbg !49
  %165 = fmul <2 x float> %162, %164, !dbg !49
  %166 = fmul <2 x float> %165, %135, !dbg !50
  %167 = fadd <2 x float> %166, %138, !dbg !51
  %shift = shufflevector <2 x float> %157, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !52
  %168 = fadd <2 x float> %157, %shift, !dbg !52
  %169 = extractelement <2 x float> %168, i64 0, !dbg !52
  %shift16 = shufflevector <2 x float> %167, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !52
  %170 = fadd <2 x float> %167, %shift16, !dbg !52
  %171 = extractelement <2 x float> %170, i64 0, !dbg !52
  %172 = fcmp olt float %169, 0.000000e+00, !dbg !53
  %173 = fcmp olt float %171, 0.000000e+00, !dbg !53
  %174 = select i1 %172, float 0.000000e+00, float %169, !dbg !57
  %175 = select i1 %173, float 0.000000e+00, float %171, !dbg !57
  %bc = bitcast <2 x float> %151 to <2 x i32>, !dbg !58
  %176 = extractelement <2 x i32> %bc, i64 0, !dbg !58
  %bc17 = bitcast <2 x float> %161 to <2 x i32>, !dbg !58
  %177 = extractelement <2 x i32> %bc17, i64 0, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %176, i32 %177, ptr addrspace(1) %25, i1 %21) #3, !dbg !58
  %bc18 = bitcast <2 x float> %151 to <2 x i32>, !dbg !59
  %178 = extractelement <2 x i32> %bc18, i64 1, !dbg !59
  %bc19 = bitcast <2 x float> %161 to <2 x i32>, !dbg !59
  %179 = extractelement <2 x i32> %bc19, i64 1, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %178, i32 %179, ptr addrspace(1) %31, i1 %21) #3, !dbg !59
  %180 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !60
  %181 = bitcast float %174 to i32, !dbg !61
  %182 = bitcast float %175 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %181, i32 %182, ptr addrspace(1) %180, i1 %21) #3, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3m3zak5pmkl76idcyeudtfq65sgg525ilb44j5p76sb3thkcobl.py", directory: "inductor_cache/3m")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_1", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 34, scope: !7)
!18 = !DILocation(line: 26, column: 39, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 34, scope: !7)
!22 = !DILocation(line: 28, column: 39, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 35, scope: !7)
!27 = !DILocation(line: 31, column: 30, scope: !7)
!28 = !DILocation(line: 31, column: 35, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 33, column: 31, scope: !7)
!32 = !DILocation(line: 33, column: 36, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 31, scope: !7)
!38 = !DILocation(line: 36, column: 36, scope: !7)
!39 = !DILocation(line: 37, column: 31, scope: !7)
!40 = !DILocation(line: 37, column: 36, scope: !7)
!41 = !DILocation(line: 42, column: 19, scope: !7)
!42 = !DILocation(line: 43, column: 27, scope: !7)
!43 = !DILocation(line: 45, column: 20, scope: !7)
!44 = !DILocation(line: 52, column: 20, scope: !7)
!45 = !DILocation(line: 53, column: 27, scope: !7)
!46 = !DILocation(line: 54, column: 20, scope: !7)
!47 = !DILocation(line: 38, column: 18, scope: !7)
!48 = !DILocation(line: 40, column: 18, scope: !7)
!49 = !DILocation(line: 48, column: 19, scope: !7)
!50 = !DILocation(line: 49, column: 20, scope: !7)
!51 = !DILocation(line: 50, column: 20, scope: !7)
!52 = !DILocation(line: 59, column: 20, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !56)
!54 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!55 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!56 = !DILocation(line: 61, column: 42, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !56)
!58 = !DILocation(line: 62, column: 39, scope: !7)
!59 = !DILocation(line: 63, column: 39, scope: !7)
!60 = !DILocation(line: 64, column: 28, scope: !7)
!61 = !DILocation(line: 64, column: 40, scope: !7)
!62 = !DILocation(line: 64, column: 4, scope: !7)
