; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %17 = shl i32 %16, 7, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = and i32 %18, 127, !dbg !12
  %20 = or disjoint i32 %17, %19, !dbg !13
  %21 = sdiv i32 %20, 64, !dbg !14
  %22 = srem i32 %21, 32, !dbg !15
  %.frozen = freeze i32 %20, !dbg !16
  %23 = sdiv i32 %.frozen, 8, !dbg !16
  %24 = srem i32 %23, 8, !dbg !17
  %25 = mul i32 %23, 8, !dbg !18
  %.decomposed = sub i32 %.frozen, %25, !dbg !18
  %26 = sext i32 %20 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !20
  %29 = sext i32 %22 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !23
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !25
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !26
  %36 = bitcast i32 %35 to float, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !27
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !28
  %39 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !29
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !30
  %41 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !31
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !32
  %43 = sext i32 %24 to i64, !dbg !33
  %44 = getelementptr i64, ptr addrspace(1) %7, i64 %43, !dbg !33
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !34
  %46 = sext i32 %.decomposed to i64, !dbg !35
  %47 = getelementptr i64, ptr addrspace(1) %7, i64 %46, !dbg !35
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !36
  %49 = getelementptr float, ptr addrspace(1) %9, i64 %29, !dbg !37
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !38
  %51 = getelementptr float, ptr addrspace(1) %10, i64 %29, !dbg !39
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !40
  %53 = bitcast i32 %52 to float, !dbg !40
  %54 = getelementptr float, ptr addrspace(1) %11, i64 %29, !dbg !41
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !42
  %56 = getelementptr float, ptr addrspace(1) %12, i64 %29, !dbg !43
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !44
  %58 = fadd float %36, 0x3EE4F8B580000000, !dbg !45
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i = icmp eq i32 %59, 0, !dbg !46
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i = icmp eq i32 %60, 0, !dbg !46
  br i1 %.not.i, label %66, label %61, !dbg !46

61:                                               ; preds = %15
  br i1 %.not1.i, label %64, label %62, !dbg !46

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

66:                                               ; preds = %15
  br i1 %.not1.i, label %69, label %67, !dbg !46

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

__nv_sqrtf.exit:                                  ; preds = %62, %64, %67, %69
  %.0.i = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !46
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !47
  %72 = lshr i64 %45, 61, !dbg !48
  %73 = and i64 %72, 4, !dbg !48
  %74 = add i64 %73, %45, !dbg !48
  %75 = lshr i64 %48, 61, !dbg !49
  %76 = and i64 %75, 4, !dbg !49
  %77 = shl nsw i32 %21, 4, !dbg !50
  %78 = sext i32 %77 to i64, !dbg !51
  %79 = getelementptr float, ptr addrspace(1) %8, i64 %48, !dbg !52
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %76, !dbg !52
  %.idx = shl i64 %74, 4, !dbg !52
  %81 = getelementptr i8, ptr addrspace(1) %80, i64 %.idx, !dbg !52
  %82 = getelementptr float, ptr addrspace(1) %81, i64 %78, !dbg !52
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !53
  %84 = fadd float %53, 0x3EE4F8B580000000, !dbg !54
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i1 = icmp eq i32 %85, 0, !dbg !55
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i4 = icmp eq i32 %86, 0, !dbg !55
  br i1 %.not.i1, label %92, label %87, !dbg !55

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %90, label %88, !dbg !55

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #3, !dbg !55
  br label %__nv_sqrtf.exit5, !dbg !55

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #3, !dbg !55
  br label %__nv_sqrtf.exit5, !dbg !55

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %95, label %93, !dbg !55

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #3, !dbg !55
  br label %__nv_sqrtf.exit5, !dbg !55

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #3, !dbg !55
  br label %__nv_sqrtf.exit5, !dbg !55

__nv_sqrtf.exit5:                                 ; preds = %88, %90, %93, %95
  %.0.i3 = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !55
  %97 = bitcast i32 %83 to float, !dbg !53
  %98 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !24
  %99 = insertelement <2 x i32> %98, i32 %50, i64 1, !dbg !24
  %100 = bitcast <2 x i32> %99 to <2 x float>, !dbg !24
  %101 = bitcast i32 %28 to float, !dbg !20
  %102 = bitcast i32 %31 to float, !dbg !22
  %103 = fadd float %101, %102, !dbg !56
  %104 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !28
  %105 = insertelement <2 x i32> %104, i32 %55, i64 1, !dbg !28
  %106 = bitcast <2 x i32> %105 to <2 x float>, !dbg !28
  %107 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !30
  %108 = insertelement <2 x i32> %107, i32 %57, i64 1, !dbg !30
  %109 = bitcast <2 x i32> %108 to <2 x float>, !dbg !30
  %110 = bitcast i32 %42 to float, !dbg !32
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !57
  %112 = insertelement <2 x float> poison, float %103, i64 0, !dbg !58
  %113 = insertelement <2 x float> %112, float %97, i64 1, !dbg !58
  %114 = fsub <2 x float> %113, %100, !dbg !58
  %115 = insertelement <2 x float> poison, float %71, i64 0, !dbg !59
  %116 = insertelement <2 x float> %115, float %111, i64 1, !dbg !59
  %117 = fmul <2 x float> %114, %116, !dbg !59
  %118 = fmul <2 x float> %117, %106, !dbg !60
  %119 = fadd <2 x float> %118, %109, !dbg !61
  %120 = extractelement <2 x float> %119, i64 0, !dbg !62
  %121 = fadd float %120, %110, !dbg !62
  %122 = extractelement <2 x float> %119, i64 1, !dbg !63
  %123 = fadd float %121, %122, !dbg !63
  %124 = bitcast float %103 to i32, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %124, ptr addrspace(1) %27, i1 true) #3, !dbg !64
  %125 = getelementptr float, ptr addrspace(1) %13, i64 %26, !dbg !65
  %126 = bitcast float %123 to i32, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %126, ptr addrspace(1) %125, i1 true) #3, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfqhphcfls2spwy27x3avaryzzk3eyggh6ufcokxlgbr3zmrgkkn.py", directory: "inductor_cache/fq")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_18", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 26, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 34, scope: !7)
!20 = !DILocation(line: 29, column: 39, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 31, scope: !7)
!38 = !DILocation(line: 38, column: 36, scope: !7)
!39 = !DILocation(line: 39, column: 31, scope: !7)
!40 = !DILocation(line: 39, column: 36, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 41, column: 32, scope: !7)
!44 = !DILocation(line: 41, column: 37, scope: !7)
!45 = !DILocation(line: 45, column: 18, scope: !7)
!46 = !DILocation(line: 46, column: 26, scope: !7)
!47 = !DILocation(line: 48, column: 19, scope: !7)
!48 = !DILocation(line: 58, column: 35, scope: !7)
!49 = !DILocation(line: 61, column: 35, scope: !7)
!50 = !DILocation(line: 62, column: 52, scope: !7)
!51 = !DILocation(line: 62, column: 49, scope: !7)
!52 = !DILocation(line: 62, column: 31, scope: !7)
!53 = !DILocation(line: 62, column: 57, scope: !7)
!54 = !DILocation(line: 64, column: 20, scope: !7)
!55 = !DILocation(line: 65, column: 27, scope: !7)
!56 = !DILocation(line: 42, column: 18, scope: !7)
!57 = !DILocation(line: 66, column: 19, scope: !7)
!58 = !DILocation(line: 43, column: 18, scope: !7)
!59 = !DILocation(line: 51, column: 19, scope: !7)
!60 = !DILocation(line: 52, column: 20, scope: !7)
!61 = !DILocation(line: 53, column: 20, scope: !7)
!62 = !DILocation(line: 54, column: 20, scope: !7)
!63 = !DILocation(line: 71, column: 20, scope: !7)
!64 = !DILocation(line: 72, column: 39, scope: !7)
!65 = !DILocation(line: 73, column: 25, scope: !7)
!66 = !DILocation(line: 73, column: 37, scope: !7)
!67 = !DILocation(line: 73, column: 4, scope: !7)
