; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_native_batch_norm_backward_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 3, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 3, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = and i32 %10, 7, !dbg !12
  %14 = or disjoint i32 %9, %12, !dbg !13
  %15 = icmp slt i32 %14, 8, !dbg !14
  %16 = shl i32 %10, 1, !dbg !15
  %17 = and i32 %16, 14, !dbg !15
  %.frozen = freeze i32 %14, !dbg !16
  %18 = sdiv i32 %.frozen, 2, !dbg !16
  %19 = mul i32 %18, 2, !dbg !17
  %.decomposed = sub i32 %.frozen, %19, !dbg !17
  %20 = shl nsw i32 %.decomposed, 4, !dbg !18
  %21 = or disjoint i32 %20, %17, !dbg !19
  %22 = shl i32 %18, 6, !dbg !20
  %23 = add i32 %21, %22, !dbg !21
  %24 = sext i32 %23 to i64, !dbg !22
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !22
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %25, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !23
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !23
  %28 = extractvalue { i32, i32 } %26, 1, !dbg !23
  %29 = bitcast i32 %27 to float, !dbg !23
  %30 = bitcast i32 %28 to float, !dbg !23
  %31 = fadd float %29, %30, !dbg !24
  %32 = select i1 %15, float %31, float 0.000000e+00, !dbg !24
  %33 = bitcast float %32 to i32, !dbg !29
  %34 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %33, i32 4, i32 31), !dbg !29
  %35 = bitcast i32 %34 to float, !dbg !29
  %36 = fadd float %32, %35, !dbg !24
  %37 = bitcast float %36 to i32, !dbg !29
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 2, i32 31), !dbg !29
  %39 = bitcast i32 %38 to float, !dbg !29
  %40 = fadd float %36, %39, !dbg !24
  %41 = bitcast float %40 to i32, !dbg !29
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 1, i32 31), !dbg !29
  %43 = bitcast i32 %42 to float, !dbg !29
  %44 = fadd float %40, %43, !dbg !24
  %45 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !30
  %46 = bitcast float %44 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %46, i1 true) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %47 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !30
  %48 = load float, ptr addrspace(3) %47, align 4, !dbg !30
  %49 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %48, float 1.600000e+01) #5, !dbg !30
  %50 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %44, float 1.600000e+01) #5, !dbg !30
  %51 = fsub float %29, %50, !dbg !31
  %52 = fsub float %30, %50, !dbg !31
  %53 = fmul float %51, %51, !dbg !32
  %54 = fmul float %52, %52, !dbg !32
  %55 = fadd float %53, %54, !dbg !33
  %56 = select i1 %15, float %55, float 0.000000e+00, !dbg !33
  %57 = bitcast float %56 to i32, !dbg !35
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 4, i32 31), !dbg !35
  %59 = bitcast i32 %58 to float, !dbg !35
  %60 = fadd float %56, %59, !dbg !33
  %61 = bitcast float %60 to i32, !dbg !35
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 2, i32 31), !dbg !35
  %63 = bitcast i32 %62 to float, !dbg !35
  %64 = fadd float %60, %63, !dbg !33
  %65 = bitcast float %64 to i32, !dbg !35
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 1, i32 31), !dbg !35
  %67 = bitcast i32 %66 to float, !dbg !35
  %68 = fadd float %64, %67, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %69 = bitcast float %68 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %69, i1 true) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %70 = load float, ptr addrspace(3) %47, align 4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %69, i1 true) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %71 = load i32, ptr addrspace(3) %47, align 4, !dbg !37
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %70, float 1.600000e+01) #5, !dbg !38
  %73 = fadd float %72, 0x3EE4F8B580000000, !dbg !39
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i = icmp eq i32 %74, 0, !dbg !36
  br i1 %.not.i, label %77, label %75, !dbg !36

75:                                               ; preds = %7
  %76 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %73), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

77:                                               ; preds = %7
  %78 = tail call float @llvm.nvvm.rsqrt.approx.f(float %73), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

__nv_rsqrtf.exit:                                 ; preds = %75, %77
  %.0.i = phi float [ %76, %75 ], [ %78, %77 ], !dbg !36
  %79 = or disjoint i32 %9, %13, !dbg !13
  %80 = icmp slt i32 %79, 8, !dbg !14
  %81 = shl i32 %14, 4, !dbg !40
  %82 = or disjoint i32 %81, %17, !dbg !41
  %83 = sext i32 %82 to i64, !dbg !42
  %84 = getelementptr float, ptr addrspace(1) %3, i64 %83, !dbg !42
  %85 = bitcast float %51 to i32, !dbg !43
  %86 = bitcast float %52 to i32, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %85, i32 %86, ptr addrspace(1) %84, i1 %15) #5, !dbg !43
  %87 = sext i32 %79 to i64, !dbg !44
  %88 = getelementptr float, ptr addrspace(1) %4, i64 %87, !dbg !44
  %89 = and i32 %10, 56, !dbg !45
  %90 = icmp eq i32 %89, 0, !dbg !45
  %91 = bitcast float %.0.i to i32, !dbg !45
  %92 = and i1 %90, %80, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %91, ptr addrspace(1) %88, i1 %92) #5, !dbg !45
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !46
  %94 = bitcast float %49 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %94, ptr addrspace(1) %93, i1 %92) #5, !dbg !47
  %95 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %71, ptr addrspace(1) %95, i1 %92) #5, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c24vb45rvwytfj3k36yiawc3heurpa7ezuvrw2lpntjmgfvq3a5z.py", directory: "inductor_cache/24")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_native_batch_norm_backward_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_native_batch_norm_backward_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_native_batch_norm_backward_2", linkageName: "triton_per_fused__native_batch_norm_legit_native_batch_norm_backward_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 61, scope: !7)
!17 = !DILocation(line: 31, column: 45, scope: !7)
!18 = !DILocation(line: 31, column: 40, scope: !7)
!19 = !DILocation(line: 31, column: 35, scope: !7)
!20 = !DILocation(line: 31, column: 55, scope: !7)
!21 = !DILocation(line: 31, column: 51, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 66, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 36, column: 24, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 39, column: 19, scope: !7)
!31 = !DILocation(line: 40, column: 19, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !34)
!34 = !DILocation(line: 44, column: 26, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !34)
!36 = !DILocation(line: 50, column: 28, scope: !7)
!37 = !DILocation(line: 44, column: 29, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 49, column: 20, scope: !7)
!40 = !DILocation(line: 51, column: 33, scope: !7)
!41 = !DILocation(line: 51, column: 30, scope: !7)
!42 = !DILocation(line: 51, column: 25, scope: !7)
!43 = !DILocation(line: 51, column: 45, scope: !7)
!44 = !DILocation(line: 52, column: 25, scope: !7)
!45 = !DILocation(line: 52, column: 37, scope: !7)
!46 = !DILocation(line: 53, column: 25, scope: !7)
!47 = !DILocation(line: 53, column: 37, scope: !7)
!48 = !DILocation(line: 54, column: 25, scope: !7)
!49 = !DILocation(line: 54, column: 37, scope: !7)
!50 = !DILocation(line: 54, column: 4, scope: !7)
