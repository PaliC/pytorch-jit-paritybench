; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_cat_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 8, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 254, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 1, !dbg !13
  %20 = icmp slt i32 %18, 256, !dbg !14
  %.frozen = freeze i32 %18, !dbg !15
  %21 = sdiv i32 %.frozen, 4, !dbg !15
  %22 = mul i32 %21, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %22, !dbg !16
  %23 = sdiv i32 %18, 16, !dbg !17
  %24 = srem i32 %23, 4, !dbg !18
  %25 = sext i32 %18 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !19
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %20) #3, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !21
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 %20) #3, !dbg !22
  %30 = sext i32 %24 to i64, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !23
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %20) #3, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %20) #3, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !25
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %20) #3, !dbg !26
  %36 = bitcast i32 %35 to float, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %20) #3, !dbg !26
  %38 = bitcast i32 %37 to float, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !27
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %20) #3, !dbg !28
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %20) #3, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !29
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %20) #3, !dbg !30
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %20) #3, !dbg !30
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !31
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %20) #3, !dbg !32
  %47 = add nsw i32 %.decomposed, -1, !dbg !33
  %48 = icmp sgt i32 %.decomposed, 0, !dbg !34
  %49 = add i32 %18, -5, !dbg !35
  %50 = add i32 %18, -4, !dbg !35
  %51 = sext i32 %49 to i64, !dbg !36
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !36
  %53 = sext i32 %50 to i64, !dbg !36
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !36
  %55 = icmp sgt i32 %.decomposed, -1, !dbg !37
  %56 = icmp ult i32 %.decomposed, 4, !dbg !38
  %57 = add i32 %18, -3, !dbg !39
  %58 = add i32 %18, -2, !dbg !39
  %59 = sext i32 %57 to i64, !dbg !40
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !40
  %61 = sext i32 %58 to i64, !dbg !40
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !40
  %63 = add i32 %18, -1, !dbg !41
  %64 = sext i32 %63 to i64, !dbg !42
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !42
  %66 = add i32 %18, 2, !dbg !43
  %67 = sext i32 %19 to i64, !dbg !44
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !44
  %69 = sext i32 %66 to i64, !dbg !44
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !44
  %71 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !45
  %72 = insertelement <2 x i32> %71, i32 %19, i64 1, !dbg !45
  %73 = srem <2 x i32> %72, splat (i32 4), !dbg !45
  %74 = extractelement <2 x i32> %73, i64 0, !dbg !46
  %75 = add nsw i32 %74, -1, !dbg !47
  %76 = icmp sgt i32 %74, 0, !dbg !48
  %77 = extractelement <2 x i32> %73, i64 1, !dbg !49
  %78 = add nsw i32 %77, -1, !dbg !33
  %79 = icmp sgt i32 %77, 0, !dbg !34
  %80 = and i1 %48, %76, !dbg !50
  %81 = and i1 %79, %76, !dbg !50
  %82 = and i1 %20, %80, !dbg !51
  %83 = and i1 %20, %81, !dbg !51
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %82, i32 0, i1 %82) #3, !dbg !52
  %85 = bitcast i32 %84 to float, !dbg !52
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %83, i32 0, i1 %83) #3, !dbg !52
  %87 = bitcast i32 %86 to float, !dbg !52
  %88 = and i1 %55, %76, !dbg !53
  %89 = and i1 %20, %88, !dbg !54
  %90 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %54, i1 %89, i32 0, i1 %89, i32 0, i1 %89) #3, !dbg !55
  %91 = extractvalue { i32, i32 } %90, 0, !dbg !55
  %92 = extractvalue { i32, i32 } %90, 1, !dbg !55
  %93 = bitcast i32 %91 to float, !dbg !55
  %94 = bitcast i32 %92 to float, !dbg !55
  %95 = fadd float %85, %93, !dbg !56
  %96 = fadd float %87, %94, !dbg !56
  %97 = add nsw <2 x i32> %73, splat (i32 1), !dbg !57
  %98 = extractelement <2 x i32> %97, i64 1, !dbg !58
  %99 = icmp ult i32 %98, 4, !dbg !38
  %100 = and i1 %56, %76, !dbg !59
  %101 = and i1 %99, %76, !dbg !59
  %102 = and i1 %20, %100, !dbg !60
  %103 = and i1 %20, %101, !dbg !60
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %102, i32 0, i1 %102) #3, !dbg !61
  %105 = bitcast i32 %104 to float, !dbg !61
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %103, i32 0, i1 %103) #3, !dbg !61
  %107 = bitcast i32 %106 to float, !dbg !61
  %108 = fadd float %95, %105, !dbg !62
  %109 = fadd float %96, %107, !dbg !62
  %110 = icmp sgt i32 %74, -1, !dbg !63
  %111 = and i1 %48, %110, !dbg !64
  %112 = and i1 %79, %110, !dbg !64
  %113 = and i1 %20, %111, !dbg !65
  %114 = and i1 %20, %112, !dbg !65
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %113, i32 0, i1 %113) #3, !dbg !66
  %116 = bitcast i32 %115 to float, !dbg !66
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %114, i32 0, i1 %114) #3, !dbg !66
  %118 = bitcast i32 %117 to float, !dbg !66
  %119 = fadd float %108, %116, !dbg !67
  %120 = fadd float %109, %118, !dbg !67
  %121 = or i32 %74, %.decomposed, !dbg !68
  %122 = icmp sgt i32 %121, -1, !dbg !68
  %123 = and i1 %20, %122, !dbg !69
  %124 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %45, i1 %123, i32 0, i1 %123, i32 0, i1 %123) #3, !dbg !70
  %125 = extractvalue { i32, i32 } %124, 0, !dbg !70
  %126 = extractvalue { i32, i32 } %124, 1, !dbg !70
  %127 = bitcast i32 %125 to float, !dbg !70
  %128 = bitcast i32 %126 to float, !dbg !70
  %129 = fadd float %119, %127, !dbg !71
  %130 = fadd float %120, %128, !dbg !71
  %131 = and i1 %56, %110, !dbg !72
  %132 = and i1 %99, %110, !dbg !72
  %133 = and i1 %20, %131, !dbg !73
  %134 = and i1 %20, %132, !dbg !73
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %133, i32 0, i1 %133) #3, !dbg !74
  %136 = bitcast i32 %135 to float, !dbg !74
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %134, i32 0, i1 %134) #3, !dbg !74
  %138 = bitcast i32 %137 to float, !dbg !74
  %139 = fadd float %129, %136, !dbg !75
  %140 = fadd float %130, %138, !dbg !75
  %141 = extractelement <2 x i32> %97, i64 0, !dbg !58
  %142 = icmp ult i32 %141, 4, !dbg !57
  %143 = and i1 %48, %142, !dbg !76
  %144 = and i1 %79, %142, !dbg !76
  %145 = add i32 %18, 3, !dbg !77
  %146 = add i32 %18, 4, !dbg !77
  %147 = sext i32 %145 to i64, !dbg !78
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !78
  %149 = sext i32 %146 to i64, !dbg !78
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !78
  %151 = and i1 %20, %143, !dbg !79
  %152 = and i1 %20, %144, !dbg !79
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %148, i1 %151, i32 0, i1 %151) #3, !dbg !80
  %154 = bitcast i32 %153 to float, !dbg !80
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %150, i1 %152, i32 0, i1 %152) #3, !dbg !80
  %156 = bitcast i32 %155 to float, !dbg !80
  %157 = fadd float %139, %154, !dbg !81
  %158 = fadd float %140, %156, !dbg !81
  %159 = and i1 %55, %142, !dbg !82
  %160 = and i1 %20, %159, !dbg !83
  %161 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %150, i1 %160, i32 0, i1 %160, i32 0, i1 %160) #3, !dbg !84
  %162 = extractvalue { i32, i32 } %161, 0, !dbg !84
  %163 = extractvalue { i32, i32 } %161, 1, !dbg !84
  %164 = bitcast i32 %162 to float, !dbg !84
  %165 = bitcast i32 %163 to float, !dbg !84
  %166 = fadd float %157, %164, !dbg !85
  %167 = fadd float %158, %165, !dbg !85
  %168 = or i32 %141, %.decomposed, !dbg !58
  %169 = icmp ult i32 %168, 4, !dbg !58
  %170 = or i32 %141, %98, !dbg !58
  %171 = icmp ult i32 %170, 4, !dbg !58
  %172 = add i32 %18, 5, !dbg !86
  %173 = add i32 %18, 6, !dbg !86
  %174 = sext i32 %172 to i64, !dbg !87
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !87
  %176 = sext i32 %173 to i64, !dbg !87
  %177 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !87
  %178 = and i1 %20, %169, !dbg !88
  %179 = and i1 %20, %171, !dbg !88
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %175, i1 %178, i32 0, i1 %178) #3, !dbg !89
  %181 = bitcast i32 %180 to float, !dbg !89
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %177, i1 %179, i32 0, i1 %179) #3, !dbg !89
  %183 = bitcast i32 %182 to float, !dbg !89
  %184 = fadd float %166, %181, !dbg !90
  %185 = fadd float %167, %183, !dbg !90
  %186 = icmp sgt i32 %.decomposed, 1, !dbg !49
  %187 = icmp sgt i32 %77, 1, !dbg !49
  %188 = select i1 %186, i32 %47, i32 0, !dbg !91
  %189 = select i1 %187, i32 %78, i32 0, !dbg !91
  %190 = icmp sgt i32 %74, 1, !dbg !92
  %191 = select i1 %190, i32 %75, i32 0, !dbg !93
  %192 = add nsw i32 %.decomposed, 2, !dbg !94
  %193 = add nsw i32 %77, 2, !dbg !94
  %194 = select i1 %186, i32 4, i32 0, !dbg !95
  %195 = icmp slt i32 %.decomposed, 2, !dbg !96
  %196 = select i1 %195, i32 %192, i32 0, !dbg !97
  %197 = select i1 %195, i32 %193, i32 0, !dbg !97
  %198 = add nsw i32 %194, %196, !dbg !98
  %199 = add nsw i32 %194, %197, !dbg !98
  %200 = add nsw i32 %74, 2, !dbg !99
  %201 = select i1 %190, i32 4, i32 0, !dbg !100
  %202 = icmp slt i32 %74, 2, !dbg !46
  %203 = select i1 %202, i32 %200, i32 0, !dbg !101
  %204 = add nsw i32 %201, %203, !dbg !102
  %reass.add = sub nsw i32 %204, %191
  %reass.mul = mul nsw i32 %reass.add, %198
  %reass.add9 = sub nsw i32 %191, %204
  %reass.mul10 = mul nsw i32 %reass.add9, %188
  %205 = add nsw i32 %reass.mul10, %reass.mul, !dbg !103
  %reass.mul8 = mul nsw i32 %reass.add, %199
  %reass.mul12 = mul nsw i32 %reass.add9, %189
  %206 = add nsw i32 %reass.mul12, %reass.mul8, !dbg !103
  %207 = sitofp i32 %205 to float, !dbg !104
  %208 = sitofp i32 %206 to float, !dbg !104
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %184, float %207) #3, !dbg !104
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %185, float %208) #3, !dbg !104
  %211 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !105
  %212 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !105
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %211, i1 %82, i32 0, i1 %82) #3, !dbg !106
  %214 = bitcast i32 %213 to float, !dbg !106
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %212, i1 %83, i32 0, i1 %83) #3, !dbg !106
  %216 = bitcast i32 %215 to float, !dbg !106
  %217 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %212, i1 %89, i32 0, i1 %89, i32 0, i1 %89) #3, !dbg !107
  %218 = extractvalue { i32, i32 } %217, 0, !dbg !107
  %219 = extractvalue { i32, i32 } %217, 1, !dbg !107
  %220 = bitcast i32 %218 to float, !dbg !107
  %221 = bitcast i32 %219 to float, !dbg !107
  %222 = fadd float %214, %220, !dbg !108
  %223 = fadd float %216, %221, !dbg !108
  %224 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !109
  %225 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !109
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 %102, i32 0, i1 %102) #3, !dbg !110
  %227 = bitcast i32 %226 to float, !dbg !110
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %225, i1 %103, i32 0, i1 %103) #3, !dbg !110
  %229 = bitcast i32 %228 to float, !dbg !110
  %230 = fadd float %222, %227, !dbg !111
  %231 = fadd float %223, %229, !dbg !111
  %232 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !112
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %232, i1 %113, i32 0, i1 %113) #3, !dbg !113
  %234 = bitcast i32 %233 to float, !dbg !113
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %114, i32 0, i1 %114) #3, !dbg !113
  %236 = bitcast i32 %235 to float, !dbg !113
  %237 = fadd float %230, %234, !dbg !114
  %238 = fadd float %231, %236, !dbg !114
  %239 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %26, i1 %123, i32 0, i1 %123, i32 0, i1 %123) #3, !dbg !115
  %240 = extractvalue { i32, i32 } %239, 0, !dbg !115
  %241 = extractvalue { i32, i32 } %239, 1, !dbg !115
  %242 = bitcast i32 %240 to float, !dbg !115
  %243 = bitcast i32 %241 to float, !dbg !115
  %244 = fadd float %237, %242, !dbg !116
  %245 = fadd float %238, %243, !dbg !116
  %246 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !117
  %247 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !117
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %246, i1 %133, i32 0, i1 %133) #3, !dbg !118
  %249 = bitcast i32 %248 to float, !dbg !118
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %247, i1 %134, i32 0, i1 %134) #3, !dbg !118
  %251 = bitcast i32 %250 to float, !dbg !118
  %252 = fadd float %244, %249, !dbg !119
  %253 = fadd float %245, %251, !dbg !119
  %254 = getelementptr float, ptr addrspace(1) %1, i64 %147, !dbg !120
  %255 = getelementptr float, ptr addrspace(1) %1, i64 %149, !dbg !120
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %254, i1 %151, i32 0, i1 %151) #3, !dbg !121
  %257 = bitcast i32 %256 to float, !dbg !121
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %255, i1 %152, i32 0, i1 %152) #3, !dbg !121
  %259 = bitcast i32 %258 to float, !dbg !121
  %260 = fadd float %252, %257, !dbg !122
  %261 = fadd float %253, %259, !dbg !122
  %262 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %255, i1 %160, i32 0, i1 %160, i32 0, i1 %160) #3, !dbg !123
  %263 = extractvalue { i32, i32 } %262, 0, !dbg !123
  %264 = extractvalue { i32, i32 } %262, 1, !dbg !123
  %265 = bitcast i32 %263 to float, !dbg !123
  %266 = bitcast i32 %264 to float, !dbg !123
  %267 = fadd float %260, %265, !dbg !124
  %268 = fadd float %261, %266, !dbg !124
  %269 = getelementptr float, ptr addrspace(1) %1, i64 %174, !dbg !125
  %270 = getelementptr float, ptr addrspace(1) %1, i64 %176, !dbg !125
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %269, i1 %178, i32 0, i1 %178) #3, !dbg !126
  %272 = bitcast i32 %271 to float, !dbg !126
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %270, i1 %179, i32 0, i1 %179) #3, !dbg !126
  %274 = bitcast i32 %273 to float, !dbg !126
  %275 = fadd float %267, %272, !dbg !127
  %276 = fadd float %268, %274, !dbg !127
  %277 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %275, float %207) #3, !dbg !128
  %278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %276, float %208) #3, !dbg !128
  %279 = fadd float %36, 0x3F50624DE0000000, !dbg !129
  %280 = fadd float %38, 0x3F50624DE0000000, !dbg !129
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !130
  %.not.i = icmp eq i32 %281, 0, !dbg !130
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !130
  %.not1.i = icmp eq i32 %282, 0, !dbg !130
  br i1 %.not.i, label %288, label %283, !dbg !130

283:                                              ; preds = %12
  br i1 %.not1.i, label %286, label %284, !dbg !130

284:                                              ; preds = %283
  %285 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %279) #3, !dbg !130
  br label %__nv_sqrtf.exit, !dbg !130

286:                                              ; preds = %283
  %287 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %279) #3, !dbg !130
  br label %__nv_sqrtf.exit, !dbg !130

288:                                              ; preds = %12
  br i1 %.not1.i, label %291, label %289, !dbg !130

289:                                              ; preds = %288
  %290 = tail call float @llvm.nvvm.sqrt.rn.f(float %279) #3, !dbg !130
  br label %__nv_sqrtf.exit, !dbg !130

291:                                              ; preds = %288
  %292 = tail call float @llvm.nvvm.sqrt.approx.f(float %279) #3, !dbg !130
  br label %__nv_sqrtf.exit, !dbg !130

__nv_sqrtf.exit:                                  ; preds = %284, %286, %289, %291
  %.0.i = phi float [ %285, %284 ], [ %287, %286 ], [ %290, %289 ], [ %292, %291 ], !dbg !130
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !130
  %.not.i1 = icmp eq i32 %293, 0, !dbg !130
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !130
  %.not1.i4 = icmp eq i32 %294, 0, !dbg !130
  br i1 %.not.i1, label %300, label %295, !dbg !130

295:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %298, label %296, !dbg !130

296:                                              ; preds = %295
  %297 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %280) #3, !dbg !130
  br label %__nv_sqrtf.exit5, !dbg !130

298:                                              ; preds = %295
  %299 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %280) #3, !dbg !130
  br label %__nv_sqrtf.exit5, !dbg !130

300:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %303, label %301, !dbg !130

301:                                              ; preds = %300
  %302 = tail call float @llvm.nvvm.sqrt.rn.f(float %280) #3, !dbg !130
  br label %__nv_sqrtf.exit5, !dbg !130

303:                                              ; preds = %300
  %304 = tail call float @llvm.nvvm.sqrt.approx.f(float %280) #3, !dbg !130
  br label %__nv_sqrtf.exit5, !dbg !130

__nv_sqrtf.exit5:                                 ; preds = %296, %298, %301, %303
  %.0.i3 = phi float [ %297, %296 ], [ %299, %298 ], [ %302, %301 ], [ %304, %303 ], !dbg !130
  %305 = extractvalue { i32, i32 } %29, 1, !dbg !22
  %306 = bitcast i32 %305 to float, !dbg !22
  %307 = bitcast i32 %33 to float, !dbg !24
  %308 = fsub float %306, %307, !dbg !131
  %309 = extractvalue { i32, i32 } %29, 0, !dbg !22
  %310 = bitcast i32 %309 to float, !dbg !22
  %311 = bitcast i32 %32 to float, !dbg !24
  %312 = fsub float %310, %311, !dbg !131
  %313 = fadd float %278, %278, !dbg !132
  %314 = fadd float %277, %277, !dbg !132
  %315 = extractvalue { i32, i32 } %27, 1, !dbg !20
  %316 = bitcast i32 %315 to float, !dbg !20
  %317 = fadd float %210, %316, !dbg !133
  %318 = extractvalue { i32, i32 } %27, 0, !dbg !20
  %319 = bitcast i32 %318 to float, !dbg !20
  %320 = fadd float %209, %319, !dbg !133
  %321 = extractvalue { i32, i32 } %46, 1, !dbg !32
  %322 = bitcast i32 %321 to float, !dbg !32
  %323 = extractvalue { i32, i32 } %46, 0, !dbg !32
  %324 = bitcast i32 %323 to float, !dbg !32
  %325 = bitcast i32 %44 to float, !dbg !30
  %326 = bitcast i32 %43 to float, !dbg !30
  %327 = bitcast i32 %41 to float, !dbg !28
  %328 = bitcast i32 %40 to float, !dbg !28
  %.frozen13 = freeze i32 %18, !dbg !134
  %329 = sdiv i32 %.frozen13, 64, !dbg !134
  %330 = mul i32 %329, 64, !dbg !135
  %.decomposed14 = sub i32 %.frozen13, %330, !dbg !135
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !136
  %332 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !136
  %333 = fmul float %312, %331, !dbg !137
  %334 = fmul float %308, %332, !dbg !137
  %335 = fmul float %333, %328, !dbg !138
  %336 = fmul float %334, %327, !dbg !138
  %337 = fadd float %335, %326, !dbg !139
  %338 = fadd float %336, %325, !dbg !139
  %339 = fadd float %337, %324, !dbg !140
  %340 = fadd float %338, %322, !dbg !140
  %341 = mul i32 %329, 384, !dbg !141
  %342 = add i32 %341, %.decomposed14, !dbg !142
  %343 = sext i32 %342 to i64, !dbg !143
  %344 = getelementptr float, ptr addrspace(1) %7, i64 %343, !dbg !143
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %318, i32 %315, ptr addrspace(1) %344, i1 %20) #3, !dbg !144
  %345 = getelementptr float, ptr addrspace(1) %8, i64 %343, !dbg !145
  %346 = bitcast float %320 to i32, !dbg !146
  %347 = bitcast float %317 to i32, !dbg !146
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %346, i32 %347, ptr addrspace(1) %345, i1 %20) #3, !dbg !146
  %348 = getelementptr float, ptr addrspace(1) %9, i64 %343, !dbg !147
  %349 = bitcast float %314 to i32, !dbg !148
  %350 = bitcast float %313 to i32, !dbg !148
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %349, i32 %350, ptr addrspace(1) %348, i1 %20) #3, !dbg !148
  %351 = getelementptr float, ptr addrspace(1) %10, i64 %343, !dbg !149
  %352 = bitcast float %339 to i32, !dbg !150
  %353 = bitcast float %340 to i32, !dbg !150
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %352, i32 %353, ptr addrspace(1) %351, i1 %20) #3, !dbg !150
  ret void, !dbg !151
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyd2mwxe7egr3renivsfv6huiim3h3ahfw42hyt3saapidgdv3ak.py", directory: "inductor_cache/yd")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_cat_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_cat_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_cat_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_cat_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 21, scope: !7)
!18 = !DILocation(line: 29, column: 27, scope: !7)
!19 = !DILocation(line: 30, column: 31, scope: !7)
!20 = !DILocation(line: 30, column: 36, scope: !7)
!21 = !DILocation(line: 31, column: 31, scope: !7)
!22 = !DILocation(line: 31, column: 36, scope: !7)
!23 = !DILocation(line: 32, column: 31, scope: !7)
!24 = !DILocation(line: 32, column: 36, scope: !7)
!25 = !DILocation(line: 33, column: 31, scope: !7)
!26 = !DILocation(line: 33, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 31, scope: !7)
!28 = !DILocation(line: 34, column: 36, scope: !7)
!29 = !DILocation(line: 35, column: 31, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 43, column: 18, scope: !7)
!34 = !DILocation(line: 44, column: 19, scope: !7)
!35 = !DILocation(line: 48, column: 38, scope: !7)
!36 = !DILocation(line: 48, column: 31, scope: !7)
!37 = !DILocation(line: 50, column: 21, scope: !7)
!38 = !DILocation(line: 59, column: 20, scope: !7)
!39 = !DILocation(line: 61, column: 38, scope: !7)
!40 = !DILocation(line: 61, column: 31, scope: !7)
!41 = !DILocation(line: 68, column: 38, scope: !7)
!42 = !DILocation(line: 68, column: 31, scope: !7)
!43 = !DILocation(line: 74, column: 35, scope: !7)
!44 = !DILocation(line: 74, column: 31, scope: !7)
!45 = !DILocation(line: 24, column: 26, scope: !7)
!46 = !DILocation(line: 89, column: 251, scope: !7)
!47 = !DILocation(line: 37, column: 18, scope: !7)
!48 = !DILocation(line: 39, column: 19, scope: !7)
!49 = !DILocation(line: 89, column: 72, scope: !7)
!50 = !DILocation(line: 47, column: 19, scope: !7)
!51 = !DILocation(line: 48, column: 51, scope: !7)
!52 = !DILocation(line: 48, column: 43, scope: !7)
!53 = !DILocation(line: 53, column: 19, scope: !7)
!54 = !DILocation(line: 54, column: 51, scope: !7)
!55 = !DILocation(line: 54, column: 43, scope: !7)
!56 = !DILocation(line: 55, column: 20, scope: !7)
!57 = !DILocation(line: 79, column: 20, scope: !7)
!58 = !DILocation(line: 86, column: 20, scope: !7)
!59 = !DILocation(line: 60, column: 19, scope: !7)
!60 = !DILocation(line: 61, column: 51, scope: !7)
!61 = !DILocation(line: 61, column: 43, scope: !7)
!62 = !DILocation(line: 62, column: 20, scope: !7)
!63 = !DILocation(line: 64, column: 21, scope: !7)
!64 = !DILocation(line: 67, column: 20, scope: !7)
!65 = !DILocation(line: 68, column: 51, scope: !7)
!66 = !DILocation(line: 68, column: 43, scope: !7)
!67 = !DILocation(line: 69, column: 20, scope: !7)
!68 = !DILocation(line: 70, column: 20, scope: !7)
!69 = !DILocation(line: 71, column: 44, scope: !7)
!70 = !DILocation(line: 71, column: 36, scope: !7)
!71 = !DILocation(line: 72, column: 20, scope: !7)
!72 = !DILocation(line: 73, column: 20, scope: !7)
!73 = !DILocation(line: 74, column: 48, scope: !7)
!74 = !DILocation(line: 74, column: 40, scope: !7)
!75 = !DILocation(line: 75, column: 20, scope: !7)
!76 = !DILocation(line: 80, column: 20, scope: !7)
!77 = !DILocation(line: 81, column: 35, scope: !7)
!78 = !DILocation(line: 81, column: 31, scope: !7)
!79 = !DILocation(line: 81, column: 48, scope: !7)
!80 = !DILocation(line: 81, column: 40, scope: !7)
!81 = !DILocation(line: 82, column: 20, scope: !7)
!82 = !DILocation(line: 83, column: 20, scope: !7)
!83 = !DILocation(line: 84, column: 48, scope: !7)
!84 = !DILocation(line: 84, column: 40, scope: !7)
!85 = !DILocation(line: 85, column: 20, scope: !7)
!86 = !DILocation(line: 87, column: 35, scope: !7)
!87 = !DILocation(line: 87, column: 31, scope: !7)
!88 = !DILocation(line: 87, column: 48, scope: !7)
!89 = !DILocation(line: 87, column: 40, scope: !7)
!90 = !DILocation(line: 88, column: 20, scope: !7)
!91 = !DILocation(line: 89, column: 57, scope: !7)
!92 = !DILocation(line: 89, column: 137, scope: !7)
!93 = !DILocation(line: 89, column: 122, scope: !7)
!94 = !DILocation(line: 89, column: 164, scope: !7)
!95 = !DILocation(line: 89, column: 152, scope: !7)
!96 = !DILocation(line: 89, column: 195, scope: !7)
!97 = !DILocation(line: 89, column: 183, scope: !7)
!98 = !DILocation(line: 89, column: 171, scope: !7)
!99 = !DILocation(line: 89, column: 220, scope: !7)
!100 = !DILocation(line: 89, column: 208, scope: !7)
!101 = !DILocation(line: 89, column: 239, scope: !7)
!102 = !DILocation(line: 89, column: 227, scope: !7)
!103 = !DILocation(line: 89, column: 389, scope: !7)
!104 = !DILocation(line: 90, column: 20, scope: !7)
!105 = !DILocation(line: 91, column: 31, scope: !7)
!106 = !DILocation(line: 91, column: 43, scope: !7)
!107 = !DILocation(line: 92, column: 43, scope: !7)
!108 = !DILocation(line: 93, column: 20, scope: !7)
!109 = !DILocation(line: 94, column: 31, scope: !7)
!110 = !DILocation(line: 94, column: 43, scope: !7)
!111 = !DILocation(line: 95, column: 20, scope: !7)
!112 = !DILocation(line: 96, column: 31, scope: !7)
!113 = !DILocation(line: 96, column: 43, scope: !7)
!114 = !DILocation(line: 97, column: 20, scope: !7)
!115 = !DILocation(line: 98, column: 36, scope: !7)
!116 = !DILocation(line: 99, column: 20, scope: !7)
!117 = !DILocation(line: 100, column: 31, scope: !7)
!118 = !DILocation(line: 100, column: 40, scope: !7)
!119 = !DILocation(line: 101, column: 20, scope: !7)
!120 = !DILocation(line: 102, column: 31, scope: !7)
!121 = !DILocation(line: 102, column: 40, scope: !7)
!122 = !DILocation(line: 103, column: 20, scope: !7)
!123 = !DILocation(line: 104, column: 40, scope: !7)
!124 = !DILocation(line: 105, column: 20, scope: !7)
!125 = !DILocation(line: 106, column: 31, scope: !7)
!126 = !DILocation(line: 106, column: 40, scope: !7)
!127 = !DILocation(line: 107, column: 20, scope: !7)
!128 = !DILocation(line: 108, column: 20, scope: !7)
!129 = !DILocation(line: 113, column: 20, scope: !7)
!130 = !DILocation(line: 114, column: 27, scope: !7)
!131 = !DILocation(line: 111, column: 20, scope: !7)
!132 = !DILocation(line: 110, column: 20, scope: !7)
!133 = !DILocation(line: 109, column: 20, scope: !7)
!134 = !DILocation(line: 28, column: 19, scope: !7)
!135 = !DILocation(line: 27, column: 19, scope: !7)
!136 = !DILocation(line: 116, column: 20, scope: !7)
!137 = !DILocation(line: 119, column: 20, scope: !7)
!138 = !DILocation(line: 120, column: 20, scope: !7)
!139 = !DILocation(line: 121, column: 20, scope: !7)
!140 = !DILocation(line: 122, column: 20, scope: !7)
!141 = !DILocation(line: 123, column: 34, scope: !7)
!142 = !DILocation(line: 123, column: 30, scope: !7)
!143 = !DILocation(line: 123, column: 25, scope: !7)
!144 = !DILocation(line: 123, column: 46, scope: !7)
!145 = !DILocation(line: 124, column: 25, scope: !7)
!146 = !DILocation(line: 124, column: 46, scope: !7)
!147 = !DILocation(line: 125, column: 25, scope: !7)
!148 = !DILocation(line: 125, column: 46, scope: !7)
!149 = !DILocation(line: 126, column: 25, scope: !7)
!150 = !DILocation(line: 126, column: 46, scope: !7)
!151 = !DILocation(line: 126, column: 4, scope: !7)
