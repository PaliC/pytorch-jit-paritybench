; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_2(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = or disjoint i32 %9, 512, !dbg !13
  %.frozen = freeze i32 %9, !dbg !14
  %14 = sdiv i32 %.frozen, 32, !dbg !14
  %15 = mul i32 %14, 32, !dbg !15
  %.decomposed = sub i32 %.frozen, %15, !dbg !15
  %16 = srem i32 %10, 32, !dbg !15
  %17 = srem i32 %11, 32, !dbg !15
  %18 = srem i32 %12, 32, !dbg !15
  %19 = sdiv i32 %13, 32, !dbg !14
  %20 = shl nsw i32 %.decomposed, 1, !dbg !16
  %21 = shl nsw i32 %16, 1, !dbg !16
  %22 = shl nsw i32 %17, 1, !dbg !16
  %23 = shl nsw i32 %18, 1, !dbg !16
  %24 = shl i32 %14, 7, !dbg !17
  %25 = shl i32 %19, 7, !dbg !17
  %26 = add i32 %20, %24, !dbg !18
  %27 = add i32 %24, %21, !dbg !18
  %28 = add i32 %24, %22, !dbg !18
  %29 = add i32 %24, %23, !dbg !18
  %30 = add i32 %20, %25, !dbg !18
  %31 = add i32 %21, %25, !dbg !18
  %32 = add i32 %22, %25, !dbg !18
  %33 = add i32 %23, %25, !dbg !18
  %34 = sext i32 %26 to i64, !dbg !19
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !19
  %36 = sext i32 %27 to i64, !dbg !19
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !19
  %38 = sext i32 %28 to i64, !dbg !19
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !19
  %40 = sext i32 %29 to i64, !dbg !19
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !19
  %42 = sext i32 %30 to i64, !dbg !19
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !19
  %44 = sext i32 %31 to i64, !dbg !19
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !19
  %46 = sext i32 %32 to i64, !dbg !19
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !19
  %48 = sext i32 %33 to i64, !dbg !19
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !19
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !20
  %51 = bitcast i32 %50 to float, !dbg !20
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !20
  %53 = bitcast i32 %52 to float, !dbg !20
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !20
  %55 = bitcast i32 %54 to float, !dbg !20
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !20
  %57 = bitcast i32 %56 to float, !dbg !20
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !20
  %59 = bitcast i32 %58 to float, !dbg !20
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !20
  %61 = bitcast i32 %60 to float, !dbg !20
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !20
  %63 = bitcast i32 %62 to float, !dbg !20
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !20
  %65 = bitcast i32 %64 to float, !dbg !20
  %66 = or disjoint i32 %26, 1, !dbg !21
  %67 = or disjoint i32 %27, 1, !dbg !21
  %68 = or disjoint i32 %28, 1, !dbg !21
  %69 = or disjoint i32 %29, 1, !dbg !21
  %70 = or disjoint i32 %30, 1, !dbg !21
  %71 = or disjoint i32 %31, 1, !dbg !21
  %72 = or disjoint i32 %32, 1, !dbg !21
  %73 = or disjoint i32 %33, 1, !dbg !21
  %74 = sext i32 %66 to i64, !dbg !22
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !22
  %76 = sext i32 %67 to i64, !dbg !22
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !22
  %78 = sext i32 %68 to i64, !dbg !22
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !22
  %80 = sext i32 %69 to i64, !dbg !22
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !22
  %82 = sext i32 %70 to i64, !dbg !22
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !22
  %84 = sext i32 %71 to i64, !dbg !22
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !22
  %86 = sext i32 %72 to i64, !dbg !22
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !22
  %88 = sext i32 %73 to i64, !dbg !22
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !22
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #1, !dbg !23
  %91 = bitcast i32 %90 to float, !dbg !23
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #1, !dbg !23
  %93 = bitcast i32 %92 to float, !dbg !23
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #1, !dbg !23
  %95 = bitcast i32 %94 to float, !dbg !23
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !23
  %97 = bitcast i32 %96 to float, !dbg !23
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !23
  %99 = bitcast i32 %98 to float, !dbg !23
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !23
  %101 = bitcast i32 %100 to float, !dbg !23
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #1, !dbg !23
  %103 = bitcast i32 %102 to float, !dbg !23
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #1, !dbg !23
  %105 = bitcast i32 %104 to float, !dbg !23
  %106 = or disjoint i32 %24, 64, !dbg !24
  %107 = add i32 %106, %20, !dbg !25
  %108 = add i32 %106, %21, !dbg !25
  %109 = add i32 %106, %22, !dbg !25
  %110 = add i32 %106, %23, !dbg !25
  %111 = or disjoint i32 %25, 64, !dbg !24
  %112 = add i32 %111, %20, !dbg !25
  %113 = add i32 %111, %21, !dbg !25
  %114 = add i32 %111, %22, !dbg !25
  %115 = add i32 %111, %23, !dbg !25
  %116 = sext i32 %107 to i64, !dbg !26
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !26
  %118 = sext i32 %108 to i64, !dbg !26
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !26
  %120 = sext i32 %109 to i64, !dbg !26
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !26
  %122 = sext i32 %110 to i64, !dbg !26
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !26
  %124 = sext i32 %112 to i64, !dbg !26
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !26
  %126 = sext i32 %113 to i64, !dbg !26
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !26
  %128 = sext i32 %114 to i64, !dbg !26
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !26
  %130 = sext i32 %115 to i64, !dbg !26
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !26
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #1, !dbg !27
  %133 = bitcast i32 %132 to float, !dbg !27
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #1, !dbg !27
  %135 = bitcast i32 %134 to float, !dbg !27
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 true) #1, !dbg !27
  %137 = bitcast i32 %136 to float, !dbg !27
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #1, !dbg !27
  %139 = bitcast i32 %138 to float, !dbg !27
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 true) #1, !dbg !27
  %141 = bitcast i32 %140 to float, !dbg !27
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #1, !dbg !27
  %143 = bitcast i32 %142 to float, !dbg !27
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #1, !dbg !27
  %145 = bitcast i32 %144 to float, !dbg !27
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 true) #1, !dbg !27
  %147 = bitcast i32 %146 to float, !dbg !27
  %148 = or disjoint i32 %24, 65, !dbg !28
  %149 = add i32 %148, %20, !dbg !29
  %150 = add i32 %148, %21, !dbg !29
  %151 = add i32 %148, %22, !dbg !29
  %152 = add i32 %148, %23, !dbg !29
  %153 = or disjoint i32 %25, 65, !dbg !28
  %154 = add i32 %153, %20, !dbg !29
  %155 = add i32 %153, %21, !dbg !29
  %156 = add i32 %153, %22, !dbg !29
  %157 = add i32 %153, %23, !dbg !29
  %158 = sext i32 %149 to i64, !dbg !30
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !30
  %160 = sext i32 %150 to i64, !dbg !30
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !30
  %162 = sext i32 %151 to i64, !dbg !30
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !30
  %164 = sext i32 %152 to i64, !dbg !30
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !30
  %166 = sext i32 %154 to i64, !dbg !30
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !30
  %168 = sext i32 %155 to i64, !dbg !30
  %169 = getelementptr float, ptr addrspace(1) %0, i64 %168, !dbg !30
  %170 = sext i32 %156 to i64, !dbg !30
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !30
  %172 = sext i32 %157 to i64, !dbg !30
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !30
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %159, i1 true) #1, !dbg !31
  %175 = bitcast i32 %174 to float, !dbg !31
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 true) #1, !dbg !31
  %177 = bitcast i32 %176 to float, !dbg !31
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 true) #1, !dbg !31
  %179 = bitcast i32 %178 to float, !dbg !31
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 true) #1, !dbg !31
  %181 = bitcast i32 %180 to float, !dbg !31
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 true) #1, !dbg !31
  %183 = bitcast i32 %182 to float, !dbg !31
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 true) #1, !dbg !31
  %185 = bitcast i32 %184 to float, !dbg !31
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 true) #1, !dbg !31
  %187 = bitcast i32 %186 to float, !dbg !31
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 true) #1, !dbg !31
  %189 = bitcast i32 %188 to float, !dbg !31
  %190 = fadd float %51, %91, !dbg !32
  %191 = fadd float %53, %93, !dbg !32
  %192 = fadd float %55, %95, !dbg !32
  %193 = fadd float %57, %97, !dbg !32
  %194 = fadd float %59, %99, !dbg !32
  %195 = fadd float %61, %101, !dbg !32
  %196 = fadd float %63, %103, !dbg !32
  %197 = fadd float %65, %105, !dbg !32
  %198 = fadd float %190, %133, !dbg !33
  %199 = fadd float %191, %135, !dbg !33
  %200 = fadd float %192, %137, !dbg !33
  %201 = fadd float %193, %139, !dbg !33
  %202 = fadd float %194, %141, !dbg !33
  %203 = fadd float %195, %143, !dbg !33
  %204 = fadd float %196, %145, !dbg !33
  %205 = fadd float %197, %147, !dbg !33
  %206 = fadd float %198, %175, !dbg !34
  %207 = fadd float %199, %177, !dbg !34
  %208 = fadd float %200, %179, !dbg !34
  %209 = fadd float %201, %181, !dbg !34
  %210 = fadd float %202, %183, !dbg !34
  %211 = fadd float %203, %185, !dbg !34
  %212 = fadd float %204, %187, !dbg !34
  %213 = fadd float %205, %189, !dbg !34
  %214 = fmul float %206, 2.500000e-01, !dbg !35
  %215 = fmul float %207, 2.500000e-01, !dbg !35
  %216 = fmul float %208, 2.500000e-01, !dbg !35
  %217 = fmul float %209, 2.500000e-01, !dbg !35
  %218 = fmul float %210, 2.500000e-01, !dbg !35
  %219 = fmul float %211, 2.500000e-01, !dbg !35
  %220 = fmul float %212, 2.500000e-01, !dbg !35
  %221 = fmul float %213, 2.500000e-01, !dbg !35
  %222 = sext i32 %9 to i64, !dbg !36
  %223 = getelementptr float, ptr addrspace(1) %1, i64 %222, !dbg !36
  %224 = sext i32 %13 to i64, !dbg !36
  %225 = getelementptr float, ptr addrspace(1) %1, i64 %224, !dbg !36
  %226 = bitcast float %214 to i32, !dbg !37
  %227 = bitcast float %215 to i32, !dbg !37
  %228 = bitcast float %216 to i32, !dbg !37
  %229 = bitcast float %217 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %226, i32 %227, i32 %228, i32 %229, ptr addrspace(1) %223, i1 true) #1, !dbg !37
  %230 = bitcast float %218 to i32, !dbg !37
  %231 = bitcast float %219 to i32, !dbg !37
  %232 = bitcast float %220 to i32, !dbg !37
  %233 = bitcast float %221 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %230, i32 %231, i32 %232, i32 %233, ptr addrspace(1) %225, i1 true) #1, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci7eriznhr2gxvbkxqz7vrt6lyyqu732kg5sktgbugxgzkqnmuet.py", directory: "inductor_cache/i7")
!4 = !{ptr @triton_poi_fused_avg_pool2d_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_2", linkageName: "triton_poi_fused_avg_pool2d_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 32, scope: !7)
!17 = !DILocation(line: 27, column: 41, scope: !7)
!18 = !DILocation(line: 27, column: 37, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 46, scope: !7)
!21 = !DILocation(line: 28, column: 41, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 50, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 29, column: 42, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 51, scope: !7)
!28 = !DILocation(line: 30, column: 35, scope: !7)
!29 = !DILocation(line: 30, column: 42, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 51, scope: !7)
!32 = !DILocation(line: 31, column: 18, scope: !7)
!33 = !DILocation(line: 32, column: 18, scope: !7)
!34 = !DILocation(line: 33, column: 18, scope: !7)
!35 = !DILocation(line: 35, column: 18, scope: !7)
!36 = !DILocation(line: 36, column: 25, scope: !7)
!37 = !DILocation(line: 36, column: 36, scope: !7)
!38 = !DILocation(line: 36, column: 4, scope: !7)
