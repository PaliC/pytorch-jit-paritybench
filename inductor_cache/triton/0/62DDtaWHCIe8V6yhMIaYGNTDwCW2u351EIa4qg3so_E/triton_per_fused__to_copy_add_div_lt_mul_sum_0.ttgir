#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":19:0)
#loc1 = loc(unknown)
#loc18 = loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":39:24)
#loc22 = loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":42:26)
#loc31 = loc(callsite(#loc1 at #loc18))
#loc34 = loc(callsite(#loc1 at #loc22))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__to_copy_add_div_lt_mul_sum_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":19:0), %arg2: i32 loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<16> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<64> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<9.99999997E-7> : tensor<1x1xf32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c4_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc4)
    %4 = arith.remsi %3, %cst : tensor<1x64xi32, #blocked> loc(#loc5)
    %5 = arith.divsi %3, %cst : tensor<1x64xi32, #blocked> loc(#loc6)
    %6 = arith.muli %0, %c16_i32 : i32 loc(#loc7)
    %7 = tt.splat %6 : i32 -> tensor<1x64xi32, #blocked> loc(#loc8)
    %8 = arith.addi %4, %7 : tensor<1x64xi32, #blocked> loc(#loc8)
    %9 = arith.muli %5, %cst_0 : tensor<1x64xi32, #blocked> loc(#loc9)
    %10 = arith.addi %8, %9 : tensor<1x64xi32, #blocked> loc(#loc10)
    %11 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc11)
    %12 = tt.addptr %11, %10 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc11)
    %13 = tt.splat %1 : i1 -> tensor<1x64xi1, #blocked> loc(#loc12)
    %14 = tt.load %12, %13, %cst_1 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = arith.cmpf olt, %14, %cst_1 : tensor<1x64xf32, #blocked> loc(#loc13)
    %16 = arith.uitofp %15 : tensor<1x64xi1, #blocked> to tensor<1x64xf32, #blocked> loc(#loc14)
    %17 = arith.mulf %14, %16 : tensor<1x64xf32, #blocked> loc(#loc15)
    %18 = arith.select %13, %17, %cst_1 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc16)
    %19 = "tt.reduce"(%18) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc18)), %arg5: f32 loc(callsite(#loc1 at #loc18))):
      %30 = arith.addf %arg4, %arg5 : f32 loc(#loc35)
      tt.reduce.return %30 : f32 loc(#loc30)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc30)
    %20 = tt.expand_dims %19 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc20)
    %21 = arith.select %13, %16, %cst_1 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc21)
    %22 = "tt.reduce"(%21) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc22)), %arg5: f32 loc(callsite(#loc1 at #loc22))):
      %30 = arith.addf %arg4, %arg5 : f32 loc(#loc36)
      tt.reduce.return %30 : f32 loc(#loc33)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc33)
    %23 = tt.expand_dims %22 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc23)
    %24 = arith.addf %23, %cst_2 : tensor<1x1xf32, #blocked> loc(#loc24)
    %25 = arith.divf %20, %24 : tensor<1x1xf32, #blocked> loc(#loc25)
    gpu.barrier loc(#loc26)
    %26 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc27)
    %27 = tt.splat %26 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc28)
    %28 = triton_gpu.convert_layout %25 : tensor<1x1xf32, #blocked> -> tensor<1x1xf32, #blocked1> loc(#loc28)
    %29 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc28)
    tt.store %27, %28, %29 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc28)
    tt.return loc(#loc29)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":23:28)
#loc3 = loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":25:21)
#loc4 = loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":26:34)
#loc5 = loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":29:19)
#loc6 = loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":30:19)
#loc7 = loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":32:38)
#loc8 = loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":32:35)
#loc9 = loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":32:46)
#loc10 = loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":32:43)
#loc11 = loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":32:30)
#loc12 = loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":32:51)
#loc13 = loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":34:18)
#loc14 = loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":35:19)
#loc15 = loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":36:18)
#loc16 = loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":38:33)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc20 = loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":39:27)
#loc21 = loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":41:34)
#loc23 = loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":42:29)
#loc24 = loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":44:20)
#loc25 = loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":45:19)
#loc26 = loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":46:4)
#loc27 = loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":47:28)
#loc28 = loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":47:40)
#loc29 = loc("inductor_cache/s6/cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py":47:4)
#loc30 = loc(callsite(#loc17 at #loc18))
#loc32 = loc(callsite(#loc19 at #loc17))
#loc33 = loc(callsite(#loc17 at #loc22))
#loc35 = loc(callsite(#loc32 at #loc18))
#loc36 = loc(callsite(#loc32 at #loc22))
