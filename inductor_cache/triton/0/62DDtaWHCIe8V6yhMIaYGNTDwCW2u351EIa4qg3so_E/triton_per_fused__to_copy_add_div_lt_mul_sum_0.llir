; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused__to_copy_add_div_lt_mul_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = icmp slt i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 31, !dbg !12
  %9 = lshr i32 %7, 5, !dbg !12
  %10 = and i32 %7, 15, !dbg !13
  %11 = shl i32 %5, 4, !dbg !14
  %12 = shl i32 %7, 2, !dbg !15
  %13 = and i32 %12, 192, !dbg !15
  %14 = or disjoint i32 %13, %10, !dbg !16
  %15 = add i32 %14, %11, !dbg !17
  %16 = sext i32 %15 to i64, !dbg !18
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !18
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %6, i32 0, i1 %6) #3, !dbg !19
  %19 = bitcast i32 %18 to float, !dbg !19
  %20 = fcmp olt float %19, 0.000000e+00, !dbg !20
  %21 = uitofp i1 %20 to float, !dbg !21
  %22 = fmul float %19, %21, !dbg !22
  %23 = select i1 %6, float %22, float 0.000000e+00, !dbg !23
  %24 = bitcast float %23 to i32, !dbg !24
  %25 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %24, i32 16, i32 31), !dbg !24
  %26 = bitcast i32 %25 to float, !dbg !24
  %27 = fadd float %23, %26, !dbg !28
  %28 = bitcast float %27 to i32, !dbg !24
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 8, i32 31), !dbg !24
  %30 = bitcast i32 %29 to float, !dbg !24
  %31 = fadd float %27, %30, !dbg !28
  %32 = bitcast float %31 to i32, !dbg !24
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 4, i32 31), !dbg !24
  %34 = bitcast i32 %33 to float, !dbg !24
  %35 = fadd float %31, %34, !dbg !28
  %36 = bitcast float %35 to i32, !dbg !24
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 2, i32 31), !dbg !24
  %38 = bitcast i32 %37 to float, !dbg !24
  %39 = fadd float %35, %38, !dbg !28
  %40 = bitcast float %39 to i32, !dbg !24
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 1, i32 31), !dbg !24
  %42 = bitcast i32 %41 to float, !dbg !24
  %43 = fadd float %39, %42, !dbg !28
  %44 = icmp eq i32 %8, 0, !dbg !24
  %45 = and i32 %9, 1, !dbg !24
  %46 = zext nneg i32 %45 to i64, !dbg !24
  %47 = getelementptr float, ptr addrspace(3) @global_smem, i64 %46, !dbg !24
  %48 = bitcast float %43 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %48, i1 %44) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %49 = icmp slt i32 %7, 2, !dbg !24
  %50 = sext i32 %7 to i64, !dbg !24
  %51 = getelementptr float, ptr addrspace(3) @global_smem, i64 %50, !dbg !24
  %52 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %51, i1 %49) #3, !dbg !24
  %53 = bitcast i32 %52 to float, !dbg !24
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 1, i32 31), !dbg !24
  %55 = bitcast i32 %54 to float, !dbg !24
  %56 = fadd float %53, %55, !dbg !28
  %57 = and i32 %7, 1, !dbg !24
  %58 = icmp eq i32 %57, 0, !dbg !24
  %59 = and i1 %49, %58, !dbg !24
  %60 = bitcast float %56 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %60, i1 %59) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %61 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !24
  %62 = select i1 %6, float %21, float 0.000000e+00, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %63 = bitcast float %62 to i32, !dbg !31
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 16, i32 31), !dbg !31
  %65 = bitcast i32 %64 to float, !dbg !31
  %66 = fadd float %62, %65, !dbg !33
  %67 = bitcast float %66 to i32, !dbg !31
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 8, i32 31), !dbg !31
  %69 = bitcast i32 %68 to float, !dbg !31
  %70 = fadd float %66, %69, !dbg !33
  %71 = bitcast float %70 to i32, !dbg !31
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 4, i32 31), !dbg !31
  %73 = bitcast i32 %72 to float, !dbg !31
  %74 = fadd float %70, %73, !dbg !33
  %75 = bitcast float %74 to i32, !dbg !31
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 2, i32 31), !dbg !31
  %77 = bitcast i32 %76 to float, !dbg !31
  %78 = fadd float %74, %77, !dbg !33
  %79 = bitcast float %78 to i32, !dbg !31
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 1, i32 31), !dbg !31
  %81 = bitcast i32 %80 to float, !dbg !31
  %82 = fadd float %78, %81, !dbg !33
  %83 = bitcast float %82 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %83, i1 %44) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %84 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %51, i1 %49) #3, !dbg !31
  %85 = bitcast i32 %84 to float, !dbg !31
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 1, i32 31), !dbg !31
  %87 = bitcast i32 %86 to float, !dbg !31
  %88 = fadd float %85, %87, !dbg !33
  %89 = bitcast float %88 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %89, i1 %59) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %90 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !31
  %91 = fadd float %90, 0x3EB0C6F7A0000000, !dbg !34
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float %91) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %93 = sext i32 %5 to i64, !dbg !37
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !37
  %urem = and i32 %7, 63, !dbg !38
  %95 = icmp eq i32 %urem, 0, !dbg !38
  %96 = bitcast float %92 to i32, !dbg !38
  %97 = and i1 %95, %6, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %96, ptr addrspace(1) %94, i1 %97) #3, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs6psy7cpta5s4p3aiyergpro2heioybe5evhugzwvd2o2ncbu3d.py", directory: "inductor_cache/s6")
!4 = !{ptr @triton_per_fused__to_copy_add_div_lt_mul_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__to_copy_add_div_lt_mul_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__to_copy_add_div_lt_mul_sum_0", linkageName: "triton_per_fused__to_copy_add_div_lt_mul_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 29, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 38, scope: !7)
!15 = !DILocation(line: 32, column: 46, scope: !7)
!16 = !DILocation(line: 32, column: 35, scope: !7)
!17 = !DILocation(line: 32, column: 43, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 51, scope: !7)
!20 = !DILocation(line: 34, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 19, scope: !7)
!22 = !DILocation(line: 36, column: 18, scope: !7)
!23 = !DILocation(line: 38, column: 33, scope: !7)
!24 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = !DILocation(line: 39, column: 24, scope: !7)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !27)
!29 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!30 = !DILocation(line: 41, column: 34, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !32)
!32 = !DILocation(line: 42, column: 26, scope: !7)
!33 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !32)
!34 = !DILocation(line: 44, column: 20, scope: !7)
!35 = !DILocation(line: 45, column: 19, scope: !7)
!36 = !DILocation(line: 46, column: 4, scope: !7)
!37 = !DILocation(line: 47, column: 28, scope: !7)
!38 = !DILocation(line: 47, column: 40, scope: !7)
!39 = !DILocation(line: 47, column: 4, scope: !7)
