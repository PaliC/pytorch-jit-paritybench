; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = lshr i32 %11, 3, !dbg !12
  %15 = and i32 %14, 15, !dbg !12
  %16 = or disjoint i32 %15, 16, !dbg !12
  %17 = or disjoint i32 %10, %13, !dbg !13
  %18 = icmp slt i32 %17, 256, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %20 = shl i32 %19, 5, !dbg !16
  %21 = or disjoint i32 %20, %15, !dbg !17
  %22 = or disjoint i32 %20, %16, !dbg !17
  %.frozen = freeze i32 %17, !dbg !18
  %23 = sdiv i32 %.frozen, 64, !dbg !18
  %24 = mul i32 %23, 64, !dbg !19
  %.decomposed = sub i32 %.frozen, %24, !dbg !19
  %25 = shl i32 %21, 6, !dbg !20
  %26 = shl i32 %22, 6, !dbg !20
  %27 = shl i32 %23, 18, !dbg !21
  %28 = add i32 %27, %.decomposed, !dbg !22
  %29 = add i32 %28, %25, !dbg !23
  %30 = add i32 %28, %26, !dbg !23
  %31 = sext i32 %29 to i64, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !24
  %33 = sext i32 %30 to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !24
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %18) #4, !dbg !25
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %18) #4, !dbg !25
  %37 = sext i32 %.decomposed to i64, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !26
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %18) #4, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !28
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %18) #4, !dbg !29
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !29
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !29
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !29
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !29
  %46 = bitcast i32 %42 to float, !dbg !29
  %47 = bitcast i32 %43 to float, !dbg !29
  %48 = bitcast i32 %44 to float, !dbg !29
  %49 = bitcast i32 %45 to float, !dbg !29
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !30
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %18) #4, !dbg !31
  %52 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !32
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %18) #4, !dbg !33
  %54 = fadd float %46, 0x3EE4F8B580000000, !dbg !34
  %55 = fadd float %47, 0x3EE4F8B580000000, !dbg !34
  %56 = fadd float %48, 0x3EE4F8B580000000, !dbg !34
  %57 = fadd float %49, 0x3EE4F8B580000000, !dbg !34
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %58, 0, !dbg !35
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %59, 0, !dbg !35
  br i1 %.not.i, label %65, label %60, !dbg !35

60:                                               ; preds = %8
  br i1 %.not1.i, label %63, label %61, !dbg !35

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

65:                                               ; preds = %8
  br i1 %.not1.i, label %68, label %66, !dbg !35

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %61, %63, %66, %68
  %.0.i = phi float [ %62, %61 ], [ %64, %63 ], [ %67, %66 ], [ %69, %68 ], !dbg !35
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i1 = icmp eq i32 %70, 0, !dbg !35
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i4 = icmp eq i32 %71, 0, !dbg !35
  br i1 %.not.i1, label %77, label %72, !dbg !35

72:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %75, label %73, !dbg !35

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

77:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %80, label %78, !dbg !35

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %73, %75, %78, %80
  %.0.i3 = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !35
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i6 = icmp eq i32 %82, 0, !dbg !35
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i9 = icmp eq i32 %83, 0, !dbg !35
  br i1 %.not.i6, label %89, label %84, !dbg !35

84:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %87, label %85, !dbg !35

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

89:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %92, label %90, !dbg !35

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

__nv_sqrtf.exit10:                                ; preds = %85, %87, %90, %92
  %.0.i8 = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !35
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i11 = icmp eq i32 %94, 0, !dbg !35
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i14 = icmp eq i32 %95, 0, !dbg !35
  br i1 %.not.i11, label %101, label %96, !dbg !35

96:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %99, label %97, !dbg !35

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

101:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %104, label %102, !dbg !35

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

__nv_sqrtf.exit15:                                ; preds = %97, %99, %102, %104
  %.0.i13 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !35
  %106 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !25
  %107 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !27
  %108 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !25
  %109 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !27
  %110 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !25
  %111 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !27
  %112 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !25
  %113 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !27
  %114 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !25
  %115 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !25
  %116 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !25
  %117 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !25
  %118 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !33
  %119 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !33
  %120 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !33
  %121 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !33
  %122 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !31
  %123 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !31
  %124 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !31
  %125 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !31
  %126 = or disjoint i32 %10, %16, !dbg !13
  %.frozen16 = freeze i32 %126, !dbg !18
  %127 = sdiv i32 %.frozen16, 64, !dbg !18
  %128 = or disjoint i32 %10, %15, !dbg !13
  %.frozen18 = freeze i32 %128, !dbg !18
  %129 = sdiv i32 %.frozen18, 64, !dbg !18
  %130 = mul i32 %127, 64, !dbg !19
  %.decomposed17 = sub i32 %.frozen16, %130, !dbg !19
  %131 = mul i32 %129, 64, !dbg !19
  %.decomposed19 = sub i32 %.frozen18, %131, !dbg !19
  %132 = or disjoint i32 %20, %13, !dbg !17
  %133 = icmp slt i32 %126, 256, !dbg !14
  %134 = icmp slt i32 %128, 256, !dbg !14
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !36
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !36
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !36
  %139 = insertelement <4 x i32> poison, i32 %107, i64 0, !dbg !27
  %140 = insertelement <4 x i32> %139, i32 %109, i64 1, !dbg !27
  %141 = insertelement <4 x i32> %140, i32 %111, i64 2, !dbg !27
  %142 = insertelement <4 x i32> %141, i32 %113, i64 3, !dbg !27
  %143 = bitcast <4 x i32> %142 to <4 x float>, !dbg !27
  %144 = shufflevector <4 x float> %143, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !27
  %145 = insertelement <8 x i32> poison, i32 %106, i64 0, !dbg !25
  %146 = insertelement <8 x i32> %145, i32 %108, i64 1, !dbg !25
  %147 = insertelement <8 x i32> %146, i32 %110, i64 2, !dbg !25
  %148 = insertelement <8 x i32> %147, i32 %112, i64 3, !dbg !25
  %149 = insertelement <8 x i32> %148, i32 %114, i64 4, !dbg !25
  %150 = insertelement <8 x i32> %149, i32 %115, i64 5, !dbg !25
  %151 = insertelement <8 x i32> %150, i32 %116, i64 6, !dbg !25
  %152 = insertelement <8 x i32> %151, i32 %117, i64 7, !dbg !25
  %153 = bitcast <8 x i32> %152 to <8 x float>, !dbg !25
  %154 = fsub <8 x float> %153, %144, !dbg !37
  %155 = insertelement <4 x i32> poison, i32 %118, i64 0, !dbg !33
  %156 = insertelement <4 x i32> %155, i32 %119, i64 1, !dbg !33
  %157 = insertelement <4 x i32> %156, i32 %120, i64 2, !dbg !33
  %158 = insertelement <4 x i32> %157, i32 %121, i64 3, !dbg !33
  %159 = bitcast <4 x i32> %158 to <4 x float>, !dbg !33
  %160 = shufflevector <4 x float> %159, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !33
  %161 = insertelement <4 x i32> poison, i32 %122, i64 0, !dbg !31
  %162 = insertelement <4 x i32> %161, i32 %123, i64 1, !dbg !31
  %163 = insertelement <4 x i32> %162, i32 %124, i64 2, !dbg !31
  %164 = insertelement <4 x i32> %163, i32 %125, i64 3, !dbg !31
  %165 = bitcast <4 x i32> %164 to <4 x float>, !dbg !31
  %166 = shufflevector <4 x float> %165, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !31
  %167 = insertelement <8 x float> poison, float %138, i64 0, !dbg !38
  %168 = insertelement <8 x float> %167, float %137, i64 1, !dbg !38
  %169 = insertelement <8 x float> %168, float %136, i64 2, !dbg !38
  %170 = insertelement <8 x float> %169, float %135, i64 3, !dbg !38
  %171 = shufflevector <8 x float> %170, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !38
  %172 = fmul <8 x float> %154, %171, !dbg !38
  %173 = fmul <8 x float> %172, %166, !dbg !39
  %174 = fadd <8 x float> %173, %160, !dbg !40
  %175 = fcmp olt <8 x float> %174, zeroinitializer, !dbg !41
  %176 = extractelement <8 x i1> %175, i64 7, !dbg !45
  %177 = extractelement <8 x float> %174, i64 7, !dbg !45
  %178 = select i1 %176, float 0.000000e+00, float %177, !dbg !45
  %179 = extractelement <8 x i1> %175, i64 6, !dbg !45
  %180 = extractelement <8 x float> %174, i64 6, !dbg !45
  %181 = select i1 %179, float 0.000000e+00, float %180, !dbg !45
  %182 = extractelement <8 x i1> %175, i64 5, !dbg !45
  %183 = extractelement <8 x float> %174, i64 5, !dbg !45
  %184 = select i1 %182, float 0.000000e+00, float %183, !dbg !45
  %185 = extractelement <8 x i1> %175, i64 4, !dbg !45
  %186 = extractelement <8 x float> %174, i64 4, !dbg !45
  %187 = select i1 %185, float 0.000000e+00, float %186, !dbg !45
  %188 = extractelement <8 x i1> %175, i64 3, !dbg !45
  %189 = extractelement <8 x float> %174, i64 3, !dbg !45
  %190 = select i1 %188, float 0.000000e+00, float %189, !dbg !45
  %191 = extractelement <8 x i1> %175, i64 2, !dbg !45
  %192 = extractelement <8 x float> %174, i64 2, !dbg !45
  %193 = select i1 %191, float 0.000000e+00, float %192, !dbg !45
  %194 = extractelement <8 x i1> %175, i64 1, !dbg !45
  %195 = extractelement <8 x float> %174, i64 1, !dbg !45
  %196 = select i1 %194, float 0.000000e+00, float %195, !dbg !45
  %197 = extractelement <8 x i1> %175, i64 0, !dbg !45
  %198 = extractelement <8 x float> %174, i64 0, !dbg !45
  %199 = select i1 %197, float 0.000000e+00, float %198, !dbg !45
  %200 = shl nsw i32 %.decomposed19, 12, !dbg !46
  %201 = shl nsw i32 %.decomposed17, 12, !dbg !46
  %202 = add i32 %200, %132, !dbg !47
  %203 = add i32 %201, %132, !dbg !47
  %204 = shl i32 %129, 20, !dbg !48
  %205 = shl i32 %127, 20, !dbg !48
  %206 = add i32 %202, %204, !dbg !49
  %207 = add i32 %203, %205, !dbg !49
  %208 = sext i32 %206 to i64, !dbg !50
  %209 = getelementptr float, ptr addrspace(1) %5, i64 %208, !dbg !50
  %210 = sext i32 %207 to i64, !dbg !50
  %211 = getelementptr float, ptr addrspace(1) %5, i64 %210, !dbg !50
  %212 = shl i32 %11, 7, !dbg !51
  %213 = and i32 %212, 896, !dbg !51
  %214 = or disjoint i32 %213, %15, !dbg !51
  %215 = and i32 %12, 508, !dbg !51
  %216 = lshr exact i32 %213, 5, !dbg !51
  %217 = add nuw nsw i32 %216, %214, !dbg !51
  %218 = zext nneg i32 %217 to i64, !dbg !51
  %219 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %218, !dbg !51
  %220 = bitcast float %178 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %220, i1 true) #4, !dbg !51
  %221 = or disjoint i32 %214, 32, !dbg !51
  %222 = lshr i32 %221, 5, !dbg !51
  %223 = add nuw nsw i32 %222, %221, !dbg !51
  %224 = zext nneg i32 %223 to i64, !dbg !51
  %225 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %224, !dbg !51
  %226 = bitcast float %181 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %226, i1 true) #4, !dbg !51
  %227 = or disjoint i32 %214, 64, !dbg !51
  %228 = lshr i32 %227, 5, !dbg !51
  %229 = add nuw nsw i32 %228, %227, !dbg !51
  %230 = zext nneg i32 %229 to i64, !dbg !51
  %231 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %230, !dbg !51
  %232 = bitcast float %184 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %232, i1 true) #4, !dbg !51
  %233 = or disjoint i32 %214, 96, !dbg !51
  %234 = lshr i32 %233, 5, !dbg !51
  %235 = add nuw nsw i32 %234, %233, !dbg !51
  %236 = zext nneg i32 %235 to i64, !dbg !51
  %237 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %236, !dbg !51
  %238 = bitcast float %187 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %237, <1 x i32> %238, i1 true) #4, !dbg !51
  %239 = or disjoint i32 %214, 16, !dbg !51
  %240 = add nuw nsw i32 %239, %216, !dbg !51
  %241 = zext nneg i32 %240 to i64, !dbg !51
  %242 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %241, !dbg !51
  %243 = bitcast float %190 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %242, <1 x i32> %243, i1 true) #4, !dbg !51
  %244 = or disjoint i32 %214, 48, !dbg !51
  %245 = lshr i32 %244, 5, !dbg !51
  %246 = add nuw nsw i32 %245, %244, !dbg !51
  %247 = zext nneg i32 %246 to i64, !dbg !51
  %248 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %247, !dbg !51
  %249 = bitcast float %193 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %249, i1 true) #4, !dbg !51
  %250 = or disjoint i32 %214, 80, !dbg !51
  %251 = lshr i32 %250, 5, !dbg !51
  %252 = add nuw nsw i32 %251, %250, !dbg !51
  %253 = zext nneg i32 %252 to i64, !dbg !51
  %254 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %253, !dbg !51
  %255 = bitcast float %196 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %255, i1 true) #4, !dbg !51
  %256 = or disjoint i32 %214, 112, !dbg !51
  %257 = lshr i32 %256, 5, !dbg !51
  %258 = add nuw nsw i32 %257, %256, !dbg !51
  %259 = zext nneg i32 %258 to i64, !dbg !51
  %260 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %259, !dbg !51
  %261 = bitcast float %199 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %261, i1 true) #4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %262 = lshr i32 %215, 5, !dbg !51
  %263 = add nuw nsw i32 %262, %215, !dbg !51
  %264 = zext nneg i32 %263 to i64, !dbg !51
  %265 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %264, !dbg !51
  %266 = load i32, ptr addrspace(3) %265, align 4, !dbg !51
  %267 = or disjoint i32 %215, 1, !dbg !51
  %268 = add nuw nsw i32 %267, %262, !dbg !51
  %269 = zext nneg i32 %268 to i64, !dbg !51
  %270 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %269, !dbg !51
  %271 = load i32, ptr addrspace(3) %270, align 4, !dbg !51
  %272 = or disjoint i32 %215, 2, !dbg !51
  %273 = add nuw nsw i32 %272, %262, !dbg !51
  %274 = zext nneg i32 %273 to i64, !dbg !51
  %275 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %274, !dbg !51
  %276 = load i32, ptr addrspace(3) %275, align 4, !dbg !51
  %277 = or disjoint i32 %215, 3, !dbg !51
  %278 = add nuw nsw i32 %277, %262, !dbg !51
  %279 = zext nneg i32 %278 to i64, !dbg !51
  %280 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %279, !dbg !51
  %281 = load i32, ptr addrspace(3) %280, align 4, !dbg !51
  %282 = or disjoint i32 %215, 512, !dbg !51
  %283 = lshr i32 %282, 5, !dbg !51
  %284 = add nuw nsw i32 %283, %282, !dbg !51
  %285 = zext nneg i32 %284 to i64, !dbg !51
  %286 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %285, !dbg !51
  %287 = load i32, ptr addrspace(3) %286, align 4, !dbg !51
  %288 = or disjoint i32 %215, 513, !dbg !51
  %289 = lshr i32 %288, 5, !dbg !51
  %290 = add nuw nsw i32 %289, %288, !dbg !51
  %291 = zext nneg i32 %290 to i64, !dbg !51
  %292 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %291, !dbg !51
  %293 = load i32, ptr addrspace(3) %292, align 4, !dbg !51
  %294 = or disjoint i32 %215, 514, !dbg !51
  %295 = lshr i32 %294, 5, !dbg !51
  %296 = add nuw nsw i32 %295, %294, !dbg !51
  %297 = zext nneg i32 %296 to i64, !dbg !51
  %298 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %297, !dbg !51
  %299 = load i32, ptr addrspace(3) %298, align 4, !dbg !51
  %300 = or disjoint i32 %215, 515, !dbg !51
  %301 = lshr i32 %300, 5, !dbg !51
  %302 = add nuw nsw i32 %301, %300, !dbg !51
  %303 = zext nneg i32 %302 to i64, !dbg !51
  %304 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %303, !dbg !51
  %305 = load i32, ptr addrspace(3) %304, align 4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %266, i32 %271, i32 %276, i32 %281, ptr addrspace(1) %209, i1 %134) #4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %287, i32 %293, i32 %299, i32 %305, ptr addrspace(1) %211, i1 %133) #4, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "covb4k6zcoizqcciwkzxzkjf3xzegn5kuprxexhkrc6guejy5iql.py", directory: "inductor_cache/ov")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 38, scope: !7)
!21 = !DILocation(line: 31, column: 50, scope: !7)
!22 = !DILocation(line: 31, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 43, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 55, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 39, column: 26, scope: !7)
!36 = !DILocation(line: 41, column: 18, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 44, column: 19, scope: !7)
!39 = !DILocation(line: 45, column: 20, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 48, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 49, column: 35, scope: !7)
!47 = !DILocation(line: 49, column: 30, scope: !7)
!48 = !DILocation(line: 49, column: 48, scope: !7)
!49 = !DILocation(line: 49, column: 40, scope: !7)
!50 = !DILocation(line: 49, column: 25, scope: !7)
!51 = !DILocation(line: 49, column: 60, scope: !7)
!52 = !DILocation(line: 49, column: 4, scope: !7)
