; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_40(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 62, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 64, !dbg !14
  %12 = srem i32 %10, 16, !dbg !15
  %13 = sext i32 %10 to i64, !dbg !16
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !16
  %15 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %14, i1 %11) #3, !dbg !17
  %16 = sext i32 %12 to i64, !dbg !18
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !18
  %18 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %17, i1 %11) #3, !dbg !19
  %19 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !20
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 %11) #3, !dbg !21
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !21
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !21
  %23 = bitcast i32 %21 to float, !dbg !21
  %24 = bitcast i32 %22 to float, !dbg !21
  %25 = fadd float %23, 0x3EE4F8B580000000, !dbg !22
  %26 = fadd float %24, 0x3EE4F8B580000000, !dbg !22
  %27 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !23
  %.not.i = icmp eq i32 %27, 0, !dbg !23
  %28 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !23
  %.not1.i = icmp eq i32 %28, 0, !dbg !23
  br i1 %.not.i, label %34, label %29, !dbg !23

29:                                               ; preds = %4
  br i1 %.not1.i, label %32, label %30, !dbg !23

30:                                               ; preds = %29
  %31 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %25) #3, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

32:                                               ; preds = %29
  %33 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %25) #3, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

34:                                               ; preds = %4
  br i1 %.not1.i, label %37, label %35, !dbg !23

35:                                               ; preds = %34
  %36 = tail call float @llvm.nvvm.sqrt.rn.f(float %25) #3, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

37:                                               ; preds = %34
  %38 = tail call float @llvm.nvvm.sqrt.approx.f(float %25) #3, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

__nv_sqrtf.exit:                                  ; preds = %30, %32, %35, %37
  %.0.i = phi float [ %31, %30 ], [ %33, %32 ], [ %36, %35 ], [ %38, %37 ], !dbg !23
  %39 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !23
  %.not.i1 = icmp eq i32 %39, 0, !dbg !23
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !23
  %.not1.i4 = icmp eq i32 %40, 0, !dbg !23
  br i1 %.not.i1, label %46, label %41, !dbg !23

41:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %44, label %42, !dbg !23

42:                                               ; preds = %41
  %43 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %26) #3, !dbg !23
  br label %__nv_sqrtf.exit5, !dbg !23

44:                                               ; preds = %41
  %45 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %26) #3, !dbg !23
  br label %__nv_sqrtf.exit5, !dbg !23

46:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %49, label %47, !dbg !23

47:                                               ; preds = %46
  %48 = tail call float @llvm.nvvm.sqrt.rn.f(float %26) #3, !dbg !23
  br label %__nv_sqrtf.exit5, !dbg !23

49:                                               ; preds = %46
  %50 = tail call float @llvm.nvvm.sqrt.approx.f(float %26) #3, !dbg !23
  br label %__nv_sqrtf.exit5, !dbg !23

__nv_sqrtf.exit5:                                 ; preds = %42, %44, %47, %49
  %.0.i3 = phi float [ %43, %42 ], [ %45, %44 ], [ %48, %47 ], [ %50, %49 ], !dbg !23
  %51 = extractvalue { i32, i32 } %15, 1, !dbg !17
  %52 = bitcast i32 %51 to float, !dbg !17
  %53 = extractvalue { i32, i32 } %18, 1, !dbg !19
  %54 = bitcast i32 %53 to float, !dbg !19
  %55 = fsub float %52, %54, !dbg !24
  %56 = extractvalue { i32, i32 } %15, 0, !dbg !17
  %57 = bitcast i32 %56 to float, !dbg !17
  %58 = extractvalue { i32, i32 } %18, 0, !dbg !19
  %59 = bitcast i32 %58 to float, !dbg !19
  %60 = fsub float %57, %59, !dbg !24
  %61 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !25
  %62 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !25
  %63 = fmul float %60, %61, !dbg !26
  %64 = fmul float %55, %62, !dbg !26
  %65 = bitcast float %63 to i32, !dbg !27
  %66 = bitcast float %64 to i32, !dbg !27
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %65, i32 %66, ptr addrspace(1) %14, i1 %11) #3, !dbg !27
  ret void, !dbg !28
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciuekavx7k64gf6rfh237nj5w75qtpjbitck5ju6734bqfwpiget.py", directory: "inductor_cache/iu")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_40, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_40, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_40", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_40", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 31, column: 18, scope: !7)
!23 = !DILocation(line: 32, column: 26, scope: !7)
!24 = !DILocation(line: 29, column: 18, scope: !7)
!25 = !DILocation(line: 34, column: 18, scope: !7)
!26 = !DILocation(line: 37, column: 19, scope: !7)
!27 = !DILocation(line: 38, column: 40, scope: !7)
!28 = !DILocation(line: 38, column: 4, scope: !7)
