; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_cat_convolution_relu_threshold_backward_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, i32 %20) local_unnamed_addr !dbg !7 {
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %23 = shl i32 %22, 8, !dbg !11
  %24 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %25 = shl i32 %24, 1, !dbg !12
  %26 = and i32 %25, 254, !dbg !12
  %27 = or disjoint i32 %23, %26, !dbg !13
  %28 = icmp slt i32 %27, 384, !dbg !14
  %.frozen = freeze i32 %27, !dbg !15
  %29 = sdiv i32 %.frozen, 16, !dbg !15
  %30 = srem i32 %29, 6, !dbg !16
  %31 = mul i32 %29, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %31, !dbg !17
  %32 = sdiv i32 %27, 96, !dbg !18
  %33 = sext i32 %27 to i64, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !19
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %28) #3, !dbg !20
  %36 = sext i32 %30 to i64, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !21
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %28) #3, !dbg !22
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %28) #3, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %10, i64 %36, !dbg !23
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %28) #3, !dbg !24
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %28) #3, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %11, i64 %36, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %28) #3, !dbg !26
  %45 = bitcast i32 %44 to float, !dbg !26
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %28) #3, !dbg !26
  %47 = bitcast i32 %46 to float, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %12, i64 %36, !dbg !27
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %28) #3, !dbg !28
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %28) #3, !dbg !28
  %51 = getelementptr float, ptr addrspace(1) %13, i64 %36, !dbg !29
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %28) #3, !dbg !30
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %28) #3, !dbg !30
  %54 = getelementptr float, ptr addrspace(1) %14, i64 %36, !dbg !31
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %28) #3, !dbg !32
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %28) #3, !dbg !32
  %57 = getelementptr float, ptr addrspace(1) %15, i64 %36, !dbg !33
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %28) #3, !dbg !34
  %59 = bitcast i32 %58 to float, !dbg !34
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %28) #3, !dbg !34
  %61 = bitcast i32 %60 to float, !dbg !34
  %62 = getelementptr float, ptr addrspace(1) %16, i64 %36, !dbg !35
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %28) #3, !dbg !36
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %28) #3, !dbg !36
  %65 = getelementptr float, ptr addrspace(1) %17, i64 %36, !dbg !37
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %28) #3, !dbg !38
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %28) #3, !dbg !38
  %68 = icmp slt i32 %30, 1, !dbg !39
  %69 = shl nsw i32 %32, 4, !dbg !40
  %70 = add nsw i32 %69, %.decomposed, !dbg !41
  %71 = sext i32 %70 to i64, !dbg !42
  %72 = getelementptr float, ptr addrspace(1) %3, i64 %71, !dbg !42
  %73 = and i1 %28, %68, !dbg !43
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %72, i1 %73, i32 0, i1 %73, i32 0, i1 %73) #3, !dbg !44
  %75 = add nsw i32 %30, -1, !dbg !45
  %76 = icmp ult i32 %75, 2, !dbg !45
  %77 = shl nsw i32 %30, 4, !dbg !46
  %78 = shl nsw i32 %32, 5, !dbg !47
  %79 = add nsw i32 %.decomposed, -16, !dbg !46
  %80 = add nsw i32 %79, %78, !dbg !48
  %81 = add nsw i32 %80, %77, !dbg !49
  %82 = sext i32 %81 to i64, !dbg !50
  %83 = getelementptr float, ptr addrspace(1) %4, i64 %82, !dbg !50
  %84 = and i1 %28, %76, !dbg !51
  %85 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %83, i1 %84, i32 0, i1 %84, i32 0, i1 %84) #3, !dbg !52
  %86 = icmp sgt i32 %30, 2, !dbg !53
  %87 = add nsw i32 %30, -3, !dbg !54
  %88 = shl nsw i32 %87, 4, !dbg !55
  %89 = mul nsw i32 %32, 48, !dbg !56
  %90 = add nsw i32 %89, %.decomposed, !dbg !57
  %91 = add nsw i32 %90, %88, !dbg !58
  %92 = sext i32 %91 to i64, !dbg !59
  %93 = getelementptr float, ptr addrspace(1) %5, i64 %92, !dbg !59
  %94 = and i1 %28, %86, !dbg !60
  %95 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %93, i1 %94, i32 0, i1 %94, i32 0, i1 %94) #3, !dbg !61
  %96 = sext i32 %87 to i64, !dbg !62
  %97 = getelementptr float, ptr addrspace(1) %6, i64 %96, !dbg !62
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %94, i32 0, i1 %94) #3, !dbg !63
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %94, i32 0, i1 %94) #3, !dbg !63
  %100 = getelementptr float, ptr addrspace(1) %7, i64 %96, !dbg !64
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %94, i32 0, i1 %94) #3, !dbg !65
  %102 = bitcast i32 %101 to float, !dbg !65
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %94, i32 0, i1 %94) #3, !dbg !65
  %104 = bitcast i32 %103 to float, !dbg !65
  %105 = fadd float %102, 0x3EE4F8B580000000, !dbg !66
  %106 = fadd float %104, 0x3EE4F8B580000000, !dbg !66
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i = icmp eq i32 %107, 0, !dbg !67
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !67
  %.not1.i = icmp eq i32 %108, 0, !dbg !67
  br i1 %.not.i, label %114, label %109, !dbg !67

109:                                              ; preds = %21
  br i1 %.not1.i, label %112, label %110, !dbg !67

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %105) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %105) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

114:                                              ; preds = %21
  br i1 %.not1.i, label %117, label %115, !dbg !67

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.f(float %105) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.f(float %105) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

__nv_sqrtf.exit:                                  ; preds = %110, %112, %115, %117
  %.0.i = phi float [ %111, %110 ], [ %113, %112 ], [ %116, %115 ], [ %118, %117 ], !dbg !67
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i1 = icmp eq i32 %119, 0, !dbg !67
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !67
  %.not1.i4 = icmp eq i32 %120, 0, !dbg !67
  br i1 %.not.i1, label %126, label %121, !dbg !67

121:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %124, label %122, !dbg !67

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %106) #3, !dbg !67
  br label %__nv_sqrtf.exit5, !dbg !67

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %106) #3, !dbg !67
  br label %__nv_sqrtf.exit5, !dbg !67

126:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %129, label %127, !dbg !67

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.f(float %106) #3, !dbg !67
  br label %__nv_sqrtf.exit5, !dbg !67

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.f(float %106) #3, !dbg !67
  br label %__nv_sqrtf.exit5, !dbg !67

__nv_sqrtf.exit5:                                 ; preds = %122, %124, %127, %129
  %.0.i3 = phi float [ %123, %122 ], [ %125, %124 ], [ %128, %127 ], [ %130, %129 ], !dbg !67
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !68
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !68
  %133 = getelementptr float, ptr addrspace(1) %8, i64 %96, !dbg !69
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %94, i32 0, i1 %94) #3, !dbg !70
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %94, i32 0, i1 %94) #3, !dbg !70
  %136 = getelementptr float, ptr addrspace(1) %9, i64 %96, !dbg !71
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %94, i32 0, i1 %94) #3, !dbg !72
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %94, i32 0, i1 %94) #3, !dbg !72
  %139 = fadd float %45, 0x3EE4F8B580000000, !dbg !73
  %140 = fadd float %47, 0x3EE4F8B580000000, !dbg !73
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i6 = icmp eq i32 %141, 0, !dbg !74
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i9 = icmp eq i32 %142, 0, !dbg !74
  br i1 %.not.i6, label %148, label %143, !dbg !74

143:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %146, label %144, !dbg !74

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %139) #3, !dbg !74
  br label %__nv_sqrtf.exit10, !dbg !74

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %139) #3, !dbg !74
  br label %__nv_sqrtf.exit10, !dbg !74

148:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %151, label %149, !dbg !74

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.f(float %139) #3, !dbg !74
  br label %__nv_sqrtf.exit10, !dbg !74

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.f(float %139) #3, !dbg !74
  br label %__nv_sqrtf.exit10, !dbg !74

__nv_sqrtf.exit10:                                ; preds = %144, %146, %149, %151
  %.0.i8 = phi float [ %145, %144 ], [ %147, %146 ], [ %150, %149 ], [ %152, %151 ], !dbg !74
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i11 = icmp eq i32 %153, 0, !dbg !74
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i14 = icmp eq i32 %154, 0, !dbg !74
  br i1 %.not.i11, label %160, label %155, !dbg !74

155:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %158, label %156, !dbg !74

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %140) #3, !dbg !74
  br label %__nv_sqrtf.exit15, !dbg !74

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %140) #3, !dbg !74
  br label %__nv_sqrtf.exit15, !dbg !74

160:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %163, label %161, !dbg !74

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.f(float %140) #3, !dbg !74
  br label %__nv_sqrtf.exit15, !dbg !74

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.f(float %140) #3, !dbg !74
  br label %__nv_sqrtf.exit15, !dbg !74

__nv_sqrtf.exit15:                                ; preds = %156, %158, %161, %163
  %.0.i13 = phi float [ %157, %156 ], [ %159, %158 ], [ %162, %161 ], [ %164, %163 ], !dbg !74
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !75
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !75
  %167 = fadd float %59, 0x3EE4F8B580000000, !dbg !76
  %168 = fadd float %61, 0x3EE4F8B580000000, !dbg !76
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !77
  %.not.i16 = icmp eq i32 %169, 0, !dbg !77
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !77
  %.not1.i19 = icmp eq i32 %170, 0, !dbg !77
  br i1 %.not.i16, label %176, label %171, !dbg !77

171:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %174, label %172, !dbg !77

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %167) #3, !dbg !77
  br label %__nv_sqrtf.exit20, !dbg !77

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %167) #3, !dbg !77
  br label %__nv_sqrtf.exit20, !dbg !77

176:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %179, label %177, !dbg !77

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.f(float %167) #3, !dbg !77
  br label %__nv_sqrtf.exit20, !dbg !77

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.f(float %167) #3, !dbg !77
  br label %__nv_sqrtf.exit20, !dbg !77

__nv_sqrtf.exit20:                                ; preds = %172, %174, %177, %179
  %.0.i18 = phi float [ %173, %172 ], [ %175, %174 ], [ %178, %177 ], [ %180, %179 ], !dbg !77
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !77
  %.not.i21 = icmp eq i32 %181, 0, !dbg !77
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !77
  %.not1.i24 = icmp eq i32 %182, 0, !dbg !77
  br i1 %.not.i21, label %188, label %183, !dbg !77

183:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %186, label %184, !dbg !77

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %168) #3, !dbg !77
  br label %__nv_sqrtf.exit25, !dbg !77

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %168) #3, !dbg !77
  br label %__nv_sqrtf.exit25, !dbg !77

188:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %191, label %189, !dbg !77

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.f(float %168) #3, !dbg !77
  br label %__nv_sqrtf.exit25, !dbg !77

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.f(float %168) #3, !dbg !77
  br label %__nv_sqrtf.exit25, !dbg !77

__nv_sqrtf.exit25:                                ; preds = %184, %186, %189, %191
  %.0.i23 = phi float [ %185, %184 ], [ %187, %186 ], [ %190, %189 ], [ %192, %191 ], !dbg !77
  %193 = extractvalue { i32, i32 } %35, 1, !dbg !20
  %194 = bitcast i32 %193 to float, !dbg !20
  %195 = bitcast i32 %39 to float, !dbg !22
  %196 = fadd float %194, %195, !dbg !78
  %197 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !24
  %198 = insertelement <2 x i32> %197, i32 %56, i64 1, !dbg !24
  %199 = bitcast <2 x i32> %198 to <2 x float>, !dbg !24
  %200 = extractvalue { i32, i32 } %35, 0, !dbg !20
  %201 = bitcast i32 %200 to float, !dbg !20
  %202 = bitcast i32 %38 to float, !dbg !22
  %203 = fadd float %201, %202, !dbg !78
  %204 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !24
  %205 = insertelement <2 x i32> %204, i32 %55, i64 1, !dbg !24
  %206 = bitcast <2 x i32> %205 to <2 x float>, !dbg !24
  %207 = extractvalue { i32, i32 } %74, 1, !dbg !44
  %208 = bitcast i32 %207 to float, !dbg !44
  %209 = extractvalue { i32, i32 } %85, 1, !dbg !52
  %210 = bitcast i32 %209 to float, !dbg !52
  %211 = extractvalue { i32, i32 } %95, 1, !dbg !61
  %212 = bitcast i32 %211 to float, !dbg !61
  %213 = bitcast i32 %99 to float, !dbg !63
  %214 = fsub float %212, %213, !dbg !79
  %215 = fmul float %214, %132, !dbg !80
  %216 = bitcast i32 %135 to float, !dbg !70
  %217 = fmul float %215, %216, !dbg !81
  %218 = bitcast i32 %138 to float, !dbg !72
  %219 = fadd float %217, %218, !dbg !82
  %220 = fcmp olt float %219, 0.000000e+00, !dbg !83
  %221 = select i1 %220, float 0.000000e+00, float %219, !dbg !87
  %222 = select i1 %86, float %221, float 0.000000e+00, !dbg !88
  %223 = select i1 %76, float %210, float %222, !dbg !89
  %224 = select i1 %68, float %208, float %223, !dbg !90
  %225 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !28
  %226 = insertelement <2 x i32> %225, i32 %64, i64 1, !dbg !28
  %227 = bitcast <2 x i32> %226 to <2 x float>, !dbg !28
  %228 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !30
  %229 = insertelement <2 x i32> %228, i32 %67, i64 1, !dbg !30
  %230 = bitcast <2 x i32> %229 to <2 x float>, !dbg !30
  %231 = extractvalue { i32, i32 } %74, 0, !dbg !44
  %232 = bitcast i32 %231 to float, !dbg !44
  %233 = extractvalue { i32, i32 } %85, 0, !dbg !52
  %234 = bitcast i32 %233 to float, !dbg !52
  %235 = extractvalue { i32, i32 } %95, 0, !dbg !61
  %236 = bitcast i32 %235 to float, !dbg !61
  %237 = bitcast i32 %98 to float, !dbg !63
  %238 = fsub float %236, %237, !dbg !79
  %239 = fmul float %238, %131, !dbg !80
  %240 = bitcast i32 %134 to float, !dbg !70
  %241 = fmul float %239, %240, !dbg !81
  %242 = bitcast i32 %137 to float, !dbg !72
  %243 = fadd float %241, %242, !dbg !82
  %244 = fcmp olt float %243, 0.000000e+00, !dbg !83
  %245 = select i1 %244, float 0.000000e+00, float %243, !dbg !87
  %246 = select i1 %86, float %245, float 0.000000e+00, !dbg !88
  %247 = select i1 %76, float %234, float %246, !dbg !89
  %248 = select i1 %68, float %232, float %247, !dbg !90
  %249 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !28
  %250 = insertelement <2 x i32> %249, i32 %63, i64 1, !dbg !28
  %251 = bitcast <2 x i32> %250 to <2 x float>, !dbg !28
  %252 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !30
  %253 = insertelement <2 x i32> %252, i32 %66, i64 1, !dbg !30
  %254 = bitcast <2 x i32> %253 to <2 x float>, !dbg !30
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !91
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !91
  %257 = insertelement <2 x float> poison, float %248, i64 0, !dbg !92
  %258 = insertelement <2 x float> %257, float %203, i64 1, !dbg !92
  %259 = fsub <2 x float> %258, %206, !dbg !92
  %260 = insertelement <2 x float> poison, float %165, i64 0, !dbg !93
  %261 = insertelement <2 x float> %260, float %255, i64 1, !dbg !93
  %262 = fmul <2 x float> %259, %261, !dbg !93
  %263 = fmul <2 x float> %262, %251, !dbg !94
  %264 = fadd <2 x float> %263, %254, !dbg !95
  %265 = insertelement <2 x float> poison, float %224, i64 0, !dbg !92
  %266 = insertelement <2 x float> %265, float %196, i64 1, !dbg !92
  %267 = fsub <2 x float> %266, %199, !dbg !92
  %268 = insertelement <2 x float> poison, float %166, i64 0, !dbg !93
  %269 = insertelement <2 x float> %268, float %256, i64 1, !dbg !93
  %270 = fmul <2 x float> %267, %269, !dbg !93
  %271 = fmul <2 x float> %270, %227, !dbg !94
  %272 = fadd <2 x float> %271, %230, !dbg !95
  %273 = bitcast float %203 to i32, !dbg !96
  %274 = bitcast float %196 to i32, !dbg !96
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %273, i32 %274, ptr addrspace(1) %34, i1 %28) #3, !dbg !96
  %275 = getelementptr float, ptr addrspace(1) %18, i64 %33, !dbg !97
  %276 = bitcast float %248 to i32, !dbg !98
  %277 = bitcast float %224 to i32, !dbg !98
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %276, i32 %277, ptr addrspace(1) %275, i1 %28) #3, !dbg !98
  %278 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !99
  %279 = getelementptr i1, ptr addrspace(1) %19, i64 %33, !dbg !100
  %280 = shufflevector <2 x float> %264, <2 x float> %272, <2 x i32> <i32 0, i32 2>, !dbg !101
  %281 = shufflevector <2 x float> %264, <2 x float> %272, <2 x i32> <i32 1, i32 3>, !dbg !101
  %282 = fadd <2 x float> %280, %281, !dbg !101
  %283 = fcmp olt <2 x float> %282, zeroinitializer, !dbg !102
  %284 = select <2 x i1> %283, <2 x float> zeroinitializer, <2 x float> %282, !dbg !104
  %285 = fcmp ole <2 x float> %284, zeroinitializer, !dbg !105
  %bc = bitcast <2 x float> %284 to <2 x i32>, !dbg !106
  %286 = extractelement <2 x i32> %bc, i64 0, !dbg !106
  %bc26 = bitcast <2 x float> %284 to <2 x i32>, !dbg !106
  %287 = extractelement <2 x i32> %bc26, i64 1, !dbg !106
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %286, i32 %287, ptr addrspace(1) %278, i1 %28) #3, !dbg !106
  %288 = zext <2 x i1> %285 to <2 x i8>, !dbg !107
  %289 = bitcast <2 x i8> %288 to i16, !dbg !107
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %289, ptr addrspace(1) %279, i1 %28) #3, !dbg !107
  ret void, !dbg !108
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm6o26sem6u74v43x46zbgf2vdhdj2sltbmictqe7p6w5vycp5hr.py", directory: "inductor_cache/m6")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_cat_convolution_relu_threshold_backward_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_cat_convolution_relu_threshold_backward_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_cat_convolution_relu_threshold_backward_3", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_cat_convolution_relu_threshold_backward_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 34, scope: !7)
!20 = !DILocation(line: 28, column: 39, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 32, scope: !7)
!28 = !DILocation(line: 32, column: 37, scope: !7)
!29 = !DILocation(line: 33, column: 32, scope: !7)
!30 = !DILocation(line: 33, column: 37, scope: !7)
!31 = !DILocation(line: 34, column: 32, scope: !7)
!32 = !DILocation(line: 34, column: 37, scope: !7)
!33 = !DILocation(line: 35, column: 32, scope: !7)
!34 = !DILocation(line: 35, column: 37, scope: !7)
!35 = !DILocation(line: 36, column: 32, scope: !7)
!36 = !DILocation(line: 36, column: 37, scope: !7)
!37 = !DILocation(line: 37, column: 32, scope: !7)
!38 = !DILocation(line: 37, column: 37, scope: !7)
!39 = !DILocation(line: 43, column: 18, scope: !7)
!40 = !DILocation(line: 44, column: 38, scope: !7)
!41 = !DILocation(line: 44, column: 35, scope: !7)
!42 = !DILocation(line: 44, column: 30, scope: !7)
!43 = !DILocation(line: 44, column: 50, scope: !7)
!44 = !DILocation(line: 44, column: 43, scope: !7)
!45 = !DILocation(line: 48, column: 19, scope: !7)
!46 = !DILocation(line: 49, column: 40, scope: !7)
!47 = !DILocation(line: 49, column: 56, scope: !7)
!48 = !DILocation(line: 49, column: 36, scope: !7)
!49 = !DILocation(line: 49, column: 53, scope: !7)
!50 = !DILocation(line: 49, column: 31, scope: !7)
!51 = !DILocation(line: 49, column: 69, scope: !7)
!52 = !DILocation(line: 49, column: 61, scope: !7)
!53 = !DILocation(line: 50, column: 20, scope: !7)
!54 = !DILocation(line: 53, column: 47, scope: !7)
!55 = !DILocation(line: 53, column: 40, scope: !7)
!56 = !DILocation(line: 53, column: 56, scope: !7)
!57 = !DILocation(line: 53, column: 36, scope: !7)
!58 = !DILocation(line: 53, column: 53, scope: !7)
!59 = !DILocation(line: 53, column: 31, scope: !7)
!60 = !DILocation(line: 53, column: 69, scope: !7)
!61 = !DILocation(line: 53, column: 61, scope: !7)
!62 = !DILocation(line: 54, column: 31, scope: !7)
!63 = !DILocation(line: 54, column: 43, scope: !7)
!64 = !DILocation(line: 56, column: 31, scope: !7)
!65 = !DILocation(line: 56, column: 43, scope: !7)
!66 = !DILocation(line: 58, column: 20, scope: !7)
!67 = !DILocation(line: 59, column: 27, scope: !7)
!68 = !DILocation(line: 61, column: 20, scope: !7)
!69 = !DILocation(line: 65, column: 31, scope: !7)
!70 = !DILocation(line: 65, column: 43, scope: !7)
!71 = !DILocation(line: 67, column: 31, scope: !7)
!72 = !DILocation(line: 67, column: 43, scope: !7)
!73 = !DILocation(line: 77, column: 20, scope: !7)
!74 = !DILocation(line: 78, column: 27, scope: !7)
!75 = !DILocation(line: 80, column: 20, scope: !7)
!76 = !DILocation(line: 87, column: 20, scope: !7)
!77 = !DILocation(line: 88, column: 27, scope: !7)
!78 = !DILocation(line: 38, column: 18, scope: !7)
!79 = !DILocation(line: 55, column: 20, scope: !7)
!80 = !DILocation(line: 64, column: 20, scope: !7)
!81 = !DILocation(line: 66, column: 20, scope: !7)
!82 = !DILocation(line: 68, column: 20, scope: !7)
!83 = !DILocation(line: 118, column: 15, scope: !84, inlinedAt: !86)
!84 = distinct !DILexicalBlockFile(scope: !7, file: !85, discriminator: 0)
!85 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!86 = !DILocation(line: 70, column: 42, scope: !7)
!87 = !DILocation(line: 121, column: 29, scope: !84, inlinedAt: !86)
!88 = !DILocation(line: 72, column: 35, scope: !7)
!89 = !DILocation(line: 73, column: 35, scope: !7)
!90 = !DILocation(line: 74, column: 33, scope: !7)
!91 = !DILocation(line: 89, column: 20, scope: !7)
!92 = !DILocation(line: 75, column: 20, scope: !7)
!93 = !DILocation(line: 83, column: 20, scope: !7)
!94 = !DILocation(line: 84, column: 20, scope: !7)
!95 = !DILocation(line: 85, column: 20, scope: !7)
!96 = !DILocation(line: 99, column: 39, scope: !7)
!97 = !DILocation(line: 100, column: 25, scope: !7)
!98 = !DILocation(line: 100, column: 37, scope: !7)
!99 = !DILocation(line: 101, column: 28, scope: !7)
!100 = !DILocation(line: 102, column: 25, scope: !7)
!101 = !DILocation(line: 94, column: 20, scope: !7)
!102 = !DILocation(line: 118, column: 15, scope: !84, inlinedAt: !103)
!103 = !DILocation(line: 96, column: 42, scope: !7)
!104 = !DILocation(line: 121, column: 29, scope: !84, inlinedAt: !103)
!105 = !DILocation(line: 98, column: 21, scope: !7)
!106 = !DILocation(line: 101, column: 40, scope: !7)
!107 = !DILocation(line: 102, column: 37, scope: !7)
!108 = !DILocation(line: 102, column: 4, scope: !7)
