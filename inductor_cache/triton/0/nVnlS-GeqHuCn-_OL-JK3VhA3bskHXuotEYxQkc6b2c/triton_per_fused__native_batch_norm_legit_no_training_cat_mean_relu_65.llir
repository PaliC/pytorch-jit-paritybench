; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_cat_mean_relu_65(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = icmp slt i32 %11, 1556, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 63, !dbg !12
  %.frozen = freeze i32 %11, !dbg !13
  %15 = sdiv i32 %.frozen, 389, !dbg !13
  %16 = mul i32 %15, 389, !dbg !14
  %.decomposed = sub i32 %.frozen, %16, !dbg !14
  %17 = sext i32 %.decomposed to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %3, i64 %17, !dbg !15
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %12) #5, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %4, i64 %17, !dbg !17
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 %12) #5, !dbg !18
  %22 = bitcast i32 %21 to float, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %5, i64 %17, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %12) #5, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %6, i64 %17, !dbg !21
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %12) #5, !dbg !22
  %27 = icmp slt i32 %.decomposed, 377, !dbg !23
  %28 = shl nsw i32 %.decomposed, 6, !dbg !24
  %29 = or disjoint i32 %28, %14, !dbg !25
  %30 = mul i32 %15, 24128, !dbg !26
  %31 = add i32 %29, %30, !dbg !27
  %32 = sext i32 %31 to i64, !dbg !28
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !28
  %34 = and i1 %12, %27, !dbg !29
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %34, i32 0, i1 %34) #5, !dbg !30
  %36 = icmp sgt i32 %.decomposed, 376, !dbg !31
  %37 = mul i32 %15, 768, !dbg !32
  %38 = or disjoint i32 %14, -24128, !dbg !33
  %39 = add nsw i32 %38, %28, !dbg !34
  %40 = add i32 %39, %37, !dbg !35
  %41 = sext i32 %40 to i64, !dbg !36
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !36
  %43 = and i1 %12, %36, !dbg !37
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %43, i32 0, i1 %43) #5, !dbg !38
  %45 = fadd float %22, 0x3EE4F8B580000000, !dbg !39
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i = icmp eq i32 %46, 0, !dbg !40
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !40
  %.not1.i = icmp eq i32 %47, 0, !dbg !40
  br i1 %.not.i, label %53, label %48, !dbg !40

48:                                               ; preds = %10
  br i1 %.not1.i, label %51, label %49, !dbg !40

49:                                               ; preds = %48
  %50 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #5, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

51:                                               ; preds = %48
  %52 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #5, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

53:                                               ; preds = %10
  br i1 %.not1.i, label %56, label %54, !dbg !40

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #5, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #5, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

__nv_sqrtf.exit:                                  ; preds = %49, %51, %54, %56
  %.0.i = phi float [ %50, %49 ], [ %52, %51 ], [ %55, %54 ], [ %57, %56 ], !dbg !40
  %.v = select i1 %27, i32 %35, i32 %44, !dbg !41
  %58 = bitcast i32 %.v to float, !dbg !41
  %59 = bitcast i32 %19 to float, !dbg !16
  %60 = fsub float %58, %59, !dbg !42
  %61 = bitcast i32 %26 to float, !dbg !22
  %62 = bitcast i32 %24 to float, !dbg !20
  %63 = lshr i32 %13, 5, !dbg !12
  %64 = and i32 %13, 31, !dbg !12
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !43
  %66 = fmul float %60, %65, !dbg !44
  %67 = fmul float %66, %62, !dbg !45
  %68 = fadd float %67, %61, !dbg !46
  %69 = fcmp olt float %68, 0.000000e+00, !dbg !47
  %70 = select i1 %69, float 0.000000e+00, float %68, !dbg !51
  %71 = select i1 %12, float %70, float 0.000000e+00, !dbg !52
  %72 = bitcast float %71 to i32, !dbg !53
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 16, i32 31), !dbg !53
  %74 = bitcast i32 %73 to float, !dbg !53
  %75 = fadd float %71, %74, !dbg !57
  %76 = bitcast float %75 to i32, !dbg !53
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 8, i32 31), !dbg !53
  %78 = bitcast i32 %77 to float, !dbg !53
  %79 = fadd float %75, %78, !dbg !57
  %80 = bitcast float %79 to i32, !dbg !53
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 4, i32 31), !dbg !53
  %82 = bitcast i32 %81 to float, !dbg !53
  %83 = fadd float %79, %82, !dbg !57
  %84 = bitcast float %83 to i32, !dbg !53
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 2, i32 31), !dbg !53
  %86 = bitcast i32 %85 to float, !dbg !53
  %87 = fadd float %83, %86, !dbg !57
  %88 = bitcast float %87 to i32, !dbg !53
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 1, i32 31), !dbg !53
  %90 = bitcast i32 %89 to float, !dbg !53
  %91 = fadd float %87, %90, !dbg !57
  %92 = icmp eq i32 %64, 0, !dbg !53
  %93 = and i32 %63, 1, !dbg !53
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i32 %93, !dbg !53
  %95 = bitcast float %91 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 %92) #5, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %96 = icmp slt i32 %13, 2, !dbg !53
  %97 = getelementptr float, ptr addrspace(3) @global_smem, i32 %13, !dbg !53
  %98 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %97, i1 %96) #5, !dbg !53
  %99 = bitcast i32 %98 to float, !dbg !53
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 1, i32 31), !dbg !53
  %101 = bitcast i32 %100 to float, !dbg !53
  %102 = fadd float %99, %101, !dbg !57
  %103 = and i32 %13, 1, !dbg !53
  %104 = icmp eq i32 %103, 0, !dbg !53
  %105 = and i1 %96, %104, !dbg !53
  %106 = bitcast float %102 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %106, i1 %105) #5, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %107 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !53
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float 6.400000e+01) #5, !dbg !59
  %109 = shl i32 %11, 6, !dbg !60
  %110 = or disjoint i32 %109, %14, !dbg !61
  %111 = sext i32 %110 to i64, !dbg !62
  %112 = getelementptr float, ptr addrspace(1) %7, i64 %111, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %.v, ptr addrspace(1) %112, i1 %12) #5, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %113 = sext i32 %11 to i64, !dbg !65
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !65
  %115 = icmp eq i32 %14, 0, !dbg !66
  %116 = bitcast float %108 to i32, !dbg !66
  %117 = and i1 %115, %12, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %116, ptr addrspace(1) %114, i1 %117) #5, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw3gxgbzjbku56horc7j7citrdh5al4hjp7vjzktnr7qdycf5y6w.py", directory: "inductor_cache/w3")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_cat_mean_relu_65, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_cat_mean_relu_65, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_cat_mean_relu_65", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_cat_mean_relu_65", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 29, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 31, scope: !7)
!16 = !DILocation(line: 33, column: 36, scope: !7)
!17 = !DILocation(line: 34, column: 31, scope: !7)
!18 = !DILocation(line: 34, column: 36, scope: !7)
!19 = !DILocation(line: 35, column: 31, scope: !7)
!20 = !DILocation(line: 35, column: 36, scope: !7)
!21 = !DILocation(line: 36, column: 31, scope: !7)
!22 = !DILocation(line: 36, column: 36, scope: !7)
!23 = !DILocation(line: 41, column: 18, scope: !7)
!24 = !DILocation(line: 42, column: 39, scope: !7)
!25 = !DILocation(line: 42, column: 35, scope: !7)
!26 = !DILocation(line: 42, column: 51, scope: !7)
!27 = !DILocation(line: 42, column: 45, scope: !7)
!28 = !DILocation(line: 42, column: 30, scope: !7)
!29 = !DILocation(line: 42, column: 63, scope: !7)
!30 = !DILocation(line: 42, column: 56, scope: !7)
!31 = !DILocation(line: 43, column: 19, scope: !7)
!32 = !DILocation(line: 46, column: 58, scope: !7)
!33 = !DILocation(line: 46, column: 35, scope: !7)
!34 = !DILocation(line: 46, column: 39, scope: !7)
!35 = !DILocation(line: 46, column: 54, scope: !7)
!36 = !DILocation(line: 46, column: 30, scope: !7)
!37 = !DILocation(line: 46, column: 70, scope: !7)
!38 = !DILocation(line: 46, column: 63, scope: !7)
!39 = !DILocation(line: 50, column: 20, scope: !7)
!40 = !DILocation(line: 51, column: 27, scope: !7)
!41 = !DILocation(line: 47, column: 33, scope: !7)
!42 = !DILocation(line: 48, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 20, scope: !7)
!44 = !DILocation(line: 56, column: 20, scope: !7)
!45 = !DILocation(line: 57, column: 20, scope: !7)
!46 = !DILocation(line: 58, column: 20, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 60, column: 42, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 62, column: 35, scope: !7)
!53 = !DILocation(line: 267, column: 36, scope: !54, inlinedAt: !56)
!54 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!55 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!56 = !DILocation(line: 63, column: 26, scope: !7)
!57 = !DILocation(line: 256, column: 15, scope: !58, inlinedAt: !56)
!58 = distinct !DILexicalBlockFile(scope: !54, file: !55, discriminator: 0)
!59 = !DILocation(line: 65, column: 20, scope: !7)
!60 = !DILocation(line: 66, column: 33, scope: !7)
!61 = !DILocation(line: 66, column: 30, scope: !7)
!62 = !DILocation(line: 66, column: 25, scope: !7)
!63 = !DILocation(line: 66, column: 45, scope: !7)
!64 = !DILocation(line: 67, column: 4, scope: !7)
!65 = !DILocation(line: 68, column: 28, scope: !7)
!66 = !DILocation(line: 68, column: 40, scope: !7)
!67 = !DILocation(line: 68, column: 4, scope: !7)
