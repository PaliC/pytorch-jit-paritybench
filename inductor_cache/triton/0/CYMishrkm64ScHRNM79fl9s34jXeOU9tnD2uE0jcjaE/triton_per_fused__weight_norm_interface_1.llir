; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__weight_norm_interface_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = and i32 %8, 31, !dbg !11
  %10 = lshr i32 %8, 5, !dbg !11
  %11 = shl i32 %8, 2, !dbg !11
  %12 = and i32 %11, 1020, !dbg !11
  %13 = icmp samesign ult i32 %12, 896, !dbg !12
  %14 = mul i32 %7, 896, !dbg !13
  %15 = add i32 %14, %12, !dbg !14
  %16 = sext i32 %15 to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !15
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %17, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !16
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !16
  %23 = bitcast i32 %19 to float, !dbg !16
  %24 = bitcast i32 %20 to float, !dbg !16
  %25 = bitcast i32 %21 to float, !dbg !16
  %26 = bitcast i32 %22 to float, !dbg !16
  %27 = sext i32 %7 to i64, !dbg !17
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !17
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !18
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !18
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !18
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !18
  %33 = fmul float %23, %23, !dbg !19
  %34 = fmul float %24, %24, !dbg !19
  %35 = fmul float %25, %25, !dbg !19
  %36 = fmul float %26, %26, !dbg !19
  %37 = fadd float %33, %34, !dbg !20
  %38 = fadd float %35, %37, !dbg !20
  %39 = fadd float %36, %38, !dbg !20
  %40 = select i1 %13, float %39, float 0.000000e+00, !dbg !20
  %41 = bitcast float %40 to i32, !dbg !25
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 16, i32 31), !dbg !25
  %43 = bitcast i32 %42 to float, !dbg !25
  %44 = fadd float %40, %43, !dbg !20
  %45 = bitcast float %44 to i32, !dbg !25
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 8, i32 31), !dbg !25
  %47 = bitcast i32 %46 to float, !dbg !25
  %48 = fadd float %44, %47, !dbg !20
  %49 = bitcast float %48 to i32, !dbg !25
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 4, i32 31), !dbg !25
  %51 = bitcast i32 %50 to float, !dbg !25
  %52 = fadd float %48, %51, !dbg !20
  %53 = bitcast float %52 to i32, !dbg !25
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 2, i32 31), !dbg !25
  %55 = bitcast i32 %54 to float, !dbg !25
  %56 = fadd float %52, %55, !dbg !20
  %57 = bitcast float %56 to i32, !dbg !25
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 1, i32 31), !dbg !25
  %59 = bitcast i32 %58 to float, !dbg !25
  %60 = fadd float %56, %59, !dbg !20
  %61 = icmp eq i32 %9, 0, !dbg !25
  %62 = and i32 %10, 7, !dbg !25
  %63 = getelementptr float, ptr addrspace(3) @global_smem, i32 %62, !dbg !25
  %64 = bitcast float %60 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %64, i1 %61) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %65 = icmp slt i32 %8, 8, !dbg !25
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !25
  %67 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %66, i1 %65) #5, !dbg !25
  %68 = bitcast i32 %67 to float, !dbg !25
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 4, i32 31), !dbg !25
  %70 = bitcast i32 %69 to float, !dbg !25
  %71 = fadd float %68, %70, !dbg !20
  %72 = bitcast float %71 to i32, !dbg !25
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 2, i32 31), !dbg !25
  %74 = bitcast i32 %73 to float, !dbg !25
  %75 = fadd float %71, %74, !dbg !20
  %76 = bitcast float %75 to i32, !dbg !25
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 1, i32 31), !dbg !25
  %78 = bitcast i32 %77 to float, !dbg !25
  %79 = fadd float %75, %78, !dbg !20
  %80 = and i32 %8, 7, !dbg !25
  %81 = icmp eq i32 %80, 0, !dbg !25
  %82 = and i1 %65, %81, !dbg !25
  %83 = bitcast float %79 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %83, i1 %82) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %84 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !25
  %85 = fadd float %84, 0.000000e+00, !dbg !26
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %.not.i = icmp eq i32 %86, 0, !dbg !30
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %.not1.i = icmp eq i32 %87, 0, !dbg !30
  br i1 %.not.i, label %93, label %88, !dbg !30

88:                                               ; preds = %6
  br i1 %.not1.i, label %91, label %89, !dbg !30

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #5, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #5, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

93:                                               ; preds = %6
  br i1 %.not1.i, label %96, label %94, !dbg !30

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #5, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #5, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %89, %91, %94, %96
  %.0.i = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !30
  %98 = bitcast i32 %32 to float, !dbg !18
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float %.0.i) #5, !dbg !31
  %100 = fmul float %99, %23, !dbg !32
  %101 = fmul float %99, %24, !dbg !32
  %102 = fmul float %99, %25, !dbg !32
  %103 = fmul float %99, %26, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !34
  %urem = and i32 %8, 255, !dbg !35
  %105 = icmp eq i32 %urem, 0, !dbg !35
  %106 = bitcast float %.0.i to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %106, ptr addrspace(1) %104, i1 %105) #5, !dbg !35
  %107 = getelementptr float, ptr addrspace(1) %3, i64 %16, !dbg !36
  %108 = bitcast float %100 to i32, !dbg !37
  %109 = bitcast float %101 to i32, !dbg !37
  %110 = bitcast float %102 to i32, !dbg !37
  %111 = bitcast float %103 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %108, i32 %109, i32 %110, i32 %111, ptr addrspace(1) %107, i1 %13) #5, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctzmp7dqojt4rfqihpy25kitgipxetc3u74gmjdw33voe3ydgzm6.py", directory: "inductor_cache/tz")
!4 = !{ptr @triton_per_fused__weight_norm_interface_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__weight_norm_interface_1, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__weight_norm_interface_1", linkageName: "triton_per_fused__weight_norm_interface_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 29, column: 21, scope: !7)
!13 = !DILocation(line: 32, column: 39, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 32, column: 30, scope: !7)
!16 = !DILocation(line: 32, column: 44, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 34, column: 18, scope: !7)
!20 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 37, column: 57, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !24)
!26 = !DILocation(line: 73, column: 15, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 37, column: 44, scope: !7)
!30 = !DILocation(line: 38, column: 26, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 18, scope: !7)
!33 = !DILocation(line: 41, column: 4, scope: !7)
!34 = !DILocation(line: 42, column: 28, scope: !7)
!35 = !DILocation(line: 42, column: 39, scope: !7)
!36 = !DILocation(line: 43, column: 25, scope: !7)
!37 = !DILocation(line: 43, column: 45, scope: !7)
!38 = !DILocation(line: 43, column: 4, scope: !7)
