; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %.lobit3 = lshr i32 %8, 5, !dbg !12
  %11 = and i32 %.lobit3, 3, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %13, 8, !dbg !13
  %16 = or disjoint i32 %13, 12, !dbg !13
  %17 = or disjoint i32 %13, 16, !dbg !13
  %18 = or disjoint i32 %13, 20, !dbg !13
  %19 = or disjoint i32 %13, 24, !dbg !13
  %20 = or disjoint i32 %13, 28, !dbg !13
  %21 = icmp slt i32 %12, 100, !dbg !14
  %22 = icmp slt i32 %13, 100, !dbg !14
  %23 = icmp slt i32 %14, 100, !dbg !14
  %24 = icmp slt i32 %15, 100, !dbg !14
  %25 = icmp slt i32 %16, 100, !dbg !14
  %26 = icmp slt i32 %17, 100, !dbg !14
  %27 = icmp slt i32 %18, 100, !dbg !14
  %28 = icmp slt i32 %19, 100, !dbg !14
  %29 = icmp slt i32 %20, 100, !dbg !14
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %31 = shl i32 %30, 5, !dbg !16
  %32 = shl i32 %8, 3, !dbg !17
  %33 = and i32 %32, 24, !dbg !17
  %34 = and i32 %8, 31, !dbg !17
  %35 = or disjoint i32 %31, %33, !dbg !18
  %36 = or disjoint i32 %35, 4, !dbg !18
  %37 = or disjoint i32 %31, %34, !dbg !18
  %38 = icmp slt i32 %35, 128, !dbg !19
  %39 = icmp slt i32 %37, 128, !dbg !19
  %.frozen = freeze i32 %12, !dbg !20
  %40 = sdiv i32 %.frozen, 5, !dbg !20
  %41 = mul i32 %40, 5, !dbg !21
  %.decomposed = sub i32 %.frozen, %41, !dbg !21
  %.frozen7 = freeze i32 %13, !dbg !22
  %42 = sdiv i32 %.frozen7, 25, !dbg !22
  %.frozen9 = freeze i32 %14, !dbg !22
  %43 = sdiv i32 %.frozen9, 25, !dbg !22
  %.frozen11 = freeze i32 %15, !dbg !22
  %44 = sdiv i32 %.frozen11, 25, !dbg !22
  %.frozen13 = freeze i32 %16, !dbg !22
  %45 = sdiv i32 %.frozen13, 25, !dbg !22
  %.frozen15 = freeze i32 %17, !dbg !22
  %46 = sdiv i32 %.frozen15, 25, !dbg !22
  %.frozen17 = freeze i32 %18, !dbg !22
  %47 = sdiv i32 %.frozen17, 25, !dbg !22
  %.frozen19 = freeze i32 %19, !dbg !22
  %48 = sdiv i32 %.frozen19, 25, !dbg !22
  %.frozen21 = freeze i32 %20, !dbg !22
  %49 = sdiv i32 %.frozen21, 25, !dbg !22
  %50 = mul i32 %42, 25, !dbg !23
  %.decomposed8 = sub i32 %.frozen7, %50, !dbg !23
  %51 = mul i32 %43, 25, !dbg !23
  %.decomposed10 = sub i32 %.frozen9, %51, !dbg !23
  %52 = mul i32 %44, 25, !dbg !23
  %.decomposed12 = sub i32 %.frozen11, %52, !dbg !23
  %53 = mul i32 %45, 25, !dbg !23
  %.decomposed14 = sub i32 %.frozen13, %53, !dbg !23
  %54 = mul i32 %46, 25, !dbg !23
  %.decomposed16 = sub i32 %.frozen15, %54, !dbg !23
  %55 = mul i32 %47, 25, !dbg !23
  %.decomposed18 = sub i32 %.frozen17, %55, !dbg !23
  %56 = mul i32 %48, 25, !dbg !23
  %.decomposed20 = sub i32 %.frozen19, %56, !dbg !23
  %57 = mul i32 %49, 25, !dbg !23
  %.decomposed22 = sub i32 %.frozen21, %57, !dbg !23
  %58 = shl nsw i32 %.decomposed, 8, !dbg !24
  %59 = mul i32 %40, 2560, !dbg !25
  %60 = add i32 %59, %58, !dbg !26
  %61 = add i32 %60, %35, !dbg !27
  %62 = add i32 %60, %36, !dbg !27
  %63 = sext i32 %61 to i64, !dbg !28
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !28
  %65 = sext i32 %62 to i64, !dbg !28
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !28
  %67 = and i1 %21, %38, !dbg !29
  %68 = and i1 %22, %39, !dbg !29
  %69 = and i1 %23, %39, !dbg !29
  %70 = and i1 %24, %39, !dbg !29
  %71 = and i1 %25, %39, !dbg !29
  %72 = and i1 %26, %39, !dbg !29
  %73 = and i1 %27, %39, !dbg !29
  %74 = and i1 %28, %39, !dbg !29
  %75 = and i1 %29, %39, !dbg !29
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 %67) #2, !dbg !30
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !30
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !30
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !30
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !30
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %67) #2, !dbg !30
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !30
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !30
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !30
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !30
  %86 = or disjoint i32 %60, 128, !dbg !31
  %87 = add i32 %86, %35, !dbg !32
  %88 = add i32 %86, %36, !dbg !32
  %89 = sext i32 %87 to i64, !dbg !33
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !33
  %91 = sext i32 %88 to i64, !dbg !33
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !33
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %90, i1 %67) #2, !dbg !34
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !34
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !34
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !34
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !34
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %92, i1 %67) #2, !dbg !34
  %99 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !34
  %100 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !34
  %101 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !34
  %102 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !34
  %103 = add i32 %60, 1280, !dbg !35
  %104 = add i32 %103, %35, !dbg !36
  %105 = add i32 %103, %36, !dbg !36
  %106 = sext i32 %104 to i64, !dbg !37
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !37
  %108 = sext i32 %105 to i64, !dbg !37
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !37
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %107, i1 %67) #2, !dbg !38
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !38
  %112 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !38
  %113 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !38
  %114 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !38
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %109, i1 %67) #2, !dbg !38
  %116 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !38
  %117 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !38
  %118 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !38
  %119 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !38
  %120 = add i32 %60, 1408, !dbg !39
  %121 = add i32 %120, %35, !dbg !40
  %122 = add i32 %120, %36, !dbg !40
  %123 = sext i32 %121 to i64, !dbg !41
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !41
  %125 = sext i32 %122 to i64, !dbg !41
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !41
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %124, i1 %67) #2, !dbg !42
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !42
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !42
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !42
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !42
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %126, i1 %67) #2, !dbg !42
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !42
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !42
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !42
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !42
  %137 = insertelement <4 x i32> poison, i32 %77, i64 0, !dbg !30
  %138 = insertelement <4 x i32> %137, i32 %78, i64 1, !dbg !30
  %139 = insertelement <4 x i32> %138, i32 %79, i64 2, !dbg !30
  %140 = insertelement <4 x i32> %139, i32 %80, i64 3, !dbg !30
  %141 = bitcast <4 x i32> %140 to <4 x float>, !dbg !30
  %142 = insertelement <4 x i32> poison, i32 %94, i64 0, !dbg !34
  %143 = insertelement <4 x i32> %142, i32 %95, i64 1, !dbg !34
  %144 = insertelement <4 x i32> %143, i32 %96, i64 2, !dbg !34
  %145 = insertelement <4 x i32> %144, i32 %97, i64 3, !dbg !34
  %146 = bitcast <4 x i32> %145 to <4 x float>, !dbg !34
  %147 = insertelement <4 x i32> poison, i32 %111, i64 0, !dbg !38
  %148 = insertelement <4 x i32> %147, i32 %112, i64 1, !dbg !38
  %149 = insertelement <4 x i32> %148, i32 %113, i64 2, !dbg !38
  %150 = insertelement <4 x i32> %149, i32 %114, i64 3, !dbg !38
  %151 = bitcast <4 x i32> %150 to <4 x float>, !dbg !38
  %152 = insertelement <4 x i32> poison, i32 %128, i64 0, !dbg !42
  %153 = insertelement <4 x i32> %152, i32 %129, i64 1, !dbg !42
  %154 = insertelement <4 x i32> %153, i32 %130, i64 2, !dbg !42
  %155 = insertelement <4 x i32> %154, i32 %131, i64 3, !dbg !42
  %156 = bitcast <4 x i32> %155 to <4 x float>, !dbg !42
  %157 = fcmp ogt <4 x float> %146, %141, !dbg !43
  %158 = zext <4 x i1> %157 to <4 x i8>, !dbg !44
  %159 = fcmp uno <4 x float> %146, zeroinitializer, !dbg !45
  %160 = or <4 x i1> %157, %159, !dbg !49
  %.v = select <4 x i1> %160, <4 x i32> %145, <4 x i32> %140, !dbg !50
  %161 = bitcast <4 x i32> %.v to <4 x float>, !dbg !50
  %162 = fcmp olt <4 x float> %161, %151, !dbg !51
  %163 = select <4 x i1> %162, <4 x i8> splat (i8 2), <4 x i8> %158, !dbg !52
  %164 = fcmp uno <4 x float> %151, zeroinitializer, !dbg !53
  %165 = or <4 x i1> %164, %162, !dbg !55
  %.v4 = select <4 x i1> %165, <4 x i32> %150, <4 x i32> %.v, !dbg !56
  %166 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !56
  %167 = fcmp olt <4 x float> %166, %156, !dbg !57
  %168 = select <4 x i1> %167, <4 x i8> splat (i8 3), <4 x i8> %163, !dbg !58
  %169 = insertelement <4 x i32> poison, i32 %82, i64 0, !dbg !30
  %170 = insertelement <4 x i32> %169, i32 %83, i64 1, !dbg !30
  %171 = insertelement <4 x i32> %170, i32 %84, i64 2, !dbg !30
  %172 = insertelement <4 x i32> %171, i32 %85, i64 3, !dbg !30
  %173 = bitcast <4 x i32> %172 to <4 x float>, !dbg !30
  %174 = insertelement <4 x i32> poison, i32 %99, i64 0, !dbg !34
  %175 = insertelement <4 x i32> %174, i32 %100, i64 1, !dbg !34
  %176 = insertelement <4 x i32> %175, i32 %101, i64 2, !dbg !34
  %177 = insertelement <4 x i32> %176, i32 %102, i64 3, !dbg !34
  %178 = bitcast <4 x i32> %177 to <4 x float>, !dbg !34
  %179 = insertelement <4 x i32> poison, i32 %116, i64 0, !dbg !38
  %180 = insertelement <4 x i32> %179, i32 %117, i64 1, !dbg !38
  %181 = insertelement <4 x i32> %180, i32 %118, i64 2, !dbg !38
  %182 = insertelement <4 x i32> %181, i32 %119, i64 3, !dbg !38
  %183 = bitcast <4 x i32> %182 to <4 x float>, !dbg !38
  %184 = insertelement <4 x i32> poison, i32 %133, i64 0, !dbg !42
  %185 = insertelement <4 x i32> %184, i32 %134, i64 1, !dbg !42
  %186 = insertelement <4 x i32> %185, i32 %135, i64 2, !dbg !42
  %187 = insertelement <4 x i32> %186, i32 %136, i64 3, !dbg !42
  %188 = bitcast <4 x i32> %187 to <4 x float>, !dbg !42
  %189 = fcmp ogt <4 x float> %178, %173, !dbg !43
  %190 = zext <4 x i1> %189 to <4 x i8>, !dbg !44
  %191 = fcmp uno <4 x float> %178, zeroinitializer, !dbg !45
  %192 = or <4 x i1> %189, %191, !dbg !49
  %.v5 = select <4 x i1> %192, <4 x i32> %177, <4 x i32> %172, !dbg !50
  %193 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !50
  %194 = fcmp olt <4 x float> %193, %183, !dbg !51
  %195 = select <4 x i1> %194, <4 x i8> splat (i8 2), <4 x i8> %190, !dbg !52
  %196 = fcmp uno <4 x float> %183, zeroinitializer, !dbg !53
  %197 = or <4 x i1> %196, %194, !dbg !55
  %.v6 = select <4 x i1> %197, <4 x i32> %182, <4 x i32> %.v5, !dbg !56
  %198 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !56
  %199 = fcmp olt <4 x float> %198, %188, !dbg !57
  %200 = select <4 x i1> %199, <4 x i8> splat (i8 3), <4 x i8> %195, !dbg !58
  %201 = shufflevector <4 x float> %188, <4 x float> %156, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !59
  %202 = fcmp uno <8 x float> %201, zeroinitializer, !dbg !59
  %203 = shufflevector <4 x i1> %199, <4 x i1> %167, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !61
  %204 = or <8 x i1> %202, %203, !dbg !61
  %205 = shufflevector <4 x float> %198, <4 x float> %166, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !62
  %206 = select <8 x i1> %204, <8 x float> %201, <8 x float> %205, !dbg !62
  %207 = fcmp olt <8 x float> %206, zeroinitializer, !dbg !63
  %208 = extractelement <8 x i1> %207, i64 7, !dbg !65
  %209 = extractelement <8 x float> %206, i64 7, !dbg !65
  %210 = select i1 %208, float 0.000000e+00, float %209, !dbg !65
  %211 = extractelement <8 x i1> %207, i64 6, !dbg !65
  %212 = extractelement <8 x float> %206, i64 6, !dbg !65
  %213 = select i1 %211, float 0.000000e+00, float %212, !dbg !65
  %214 = extractelement <8 x i1> %207, i64 5, !dbg !65
  %215 = extractelement <8 x float> %206, i64 5, !dbg !65
  %216 = select i1 %214, float 0.000000e+00, float %215, !dbg !65
  %217 = extractelement <8 x i1> %207, i64 4, !dbg !65
  %218 = extractelement <8 x float> %206, i64 4, !dbg !65
  %219 = select i1 %217, float 0.000000e+00, float %218, !dbg !65
  %220 = extractelement <8 x i1> %207, i64 3, !dbg !65
  %221 = extractelement <8 x float> %206, i64 3, !dbg !65
  %222 = select i1 %220, float 0.000000e+00, float %221, !dbg !65
  %223 = extractelement <8 x i1> %207, i64 2, !dbg !65
  %224 = extractelement <8 x float> %206, i64 2, !dbg !65
  %225 = select i1 %223, float 0.000000e+00, float %224, !dbg !65
  %226 = extractelement <8 x i1> %207, i64 1, !dbg !65
  %227 = extractelement <8 x float> %206, i64 1, !dbg !65
  %228 = select i1 %226, float 0.000000e+00, float %227, !dbg !65
  %229 = extractelement <8 x i1> %207, i64 0, !dbg !65
  %230 = extractelement <8 x float> %206, i64 0, !dbg !65
  %231 = select i1 %229, float 0.000000e+00, float %230, !dbg !65
  %232 = shl i32 %12, 7, !dbg !66
  %233 = add i32 %35, %232, !dbg !67
  %234 = sext i32 %233 to i64, !dbg !68
  %235 = getelementptr i8, ptr addrspace(1) %1, i64 %234, !dbg !68
  %236 = bitcast <4 x i8> %168 to i32, !dbg !69
  %237 = bitcast <4 x i8> %200 to i32, !dbg !69
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %236, i32 %237, ptr addrspace(1) %235, i1 %67) #2, !dbg !69
  %238 = mul i32 %37, 25, !dbg !70
  %239 = add i32 %238, %.decomposed8, !dbg !71
  %240 = mul i32 %42, 3200, !dbg !72
  %241 = mul i32 %43, 3200, !dbg !72
  %242 = mul i32 %44, 3200, !dbg !72
  %243 = mul i32 %45, 3200, !dbg !72
  %244 = mul i32 %46, 3200, !dbg !72
  %245 = mul i32 %47, 3200, !dbg !72
  %246 = mul i32 %48, 3200, !dbg !72
  %247 = mul i32 %49, 3200, !dbg !72
  %248 = add i32 %239, %240, !dbg !73
  %249 = add i32 %241, %.decomposed10, !dbg !71
  %250 = add i32 %249, %238, !dbg !73
  %251 = add i32 %242, %.decomposed12, !dbg !71
  %252 = add i32 %251, %238, !dbg !73
  %253 = add i32 %243, %.decomposed14, !dbg !71
  %254 = add i32 %253, %238, !dbg !73
  %255 = add i32 %244, %.decomposed16, !dbg !71
  %256 = add i32 %255, %238, !dbg !73
  %257 = add i32 %245, %.decomposed18, !dbg !71
  %258 = add i32 %257, %238, !dbg !73
  %259 = add i32 %246, %.decomposed20, !dbg !71
  %260 = add i32 %259, %238, !dbg !73
  %261 = add i32 %247, %.decomposed22, !dbg !71
  %262 = add i32 %261, %238, !dbg !73
  %263 = sext i32 %248 to i64, !dbg !74
  %264 = getelementptr float, ptr addrspace(1) %2, i64 %263, !dbg !74
  %265 = sext i32 %250 to i64, !dbg !74
  %266 = getelementptr float, ptr addrspace(1) %2, i64 %265, !dbg !74
  %267 = sext i32 %252 to i64, !dbg !74
  %268 = getelementptr float, ptr addrspace(1) %2, i64 %267, !dbg !74
  %269 = sext i32 %254 to i64, !dbg !74
  %270 = getelementptr float, ptr addrspace(1) %2, i64 %269, !dbg !74
  %271 = sext i32 %256 to i64, !dbg !74
  %272 = getelementptr float, ptr addrspace(1) %2, i64 %271, !dbg !74
  %273 = sext i32 %258 to i64, !dbg !74
  %274 = getelementptr float, ptr addrspace(1) %2, i64 %273, !dbg !74
  %275 = sext i32 %260 to i64, !dbg !74
  %276 = getelementptr float, ptr addrspace(1) %2, i64 %275, !dbg !74
  %277 = sext i32 %262 to i64, !dbg !74
  %278 = getelementptr float, ptr addrspace(1) %2, i64 %277, !dbg !74
  %279 = and i32 %32, 1016, !dbg !75
  %280 = and i32 %8, 127, !dbg !75
  %281 = lshr i32 %32, 5, !dbg !75
  %282 = and i32 %281, 31, !dbg !75
  %283 = add nuw nsw i32 %282, %279, !dbg !75
  %284 = zext nneg i32 %283 to i64, !dbg !75
  %285 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %284, !dbg !75
  %286 = bitcast float %210 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %286, i1 true) #2, !dbg !75
  %287 = or disjoint i32 %279, 1, !dbg !75
  %288 = add nuw nsw i32 %287, %282, !dbg !75
  %289 = zext nneg i32 %288 to i64, !dbg !75
  %290 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %289, !dbg !75
  %291 = bitcast float %213 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %291, i1 true) #2, !dbg !75
  %292 = or disjoint i32 %279, 2, !dbg !75
  %293 = add nuw nsw i32 %292, %282, !dbg !75
  %294 = zext nneg i32 %293 to i64, !dbg !75
  %295 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %294, !dbg !75
  %296 = bitcast float %216 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %295, <1 x i32> %296, i1 true) #2, !dbg !75
  %297 = or disjoint i32 %279, 3, !dbg !75
  %298 = add nuw nsw i32 %297, %282, !dbg !75
  %299 = zext nneg i32 %298 to i64, !dbg !75
  %300 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %299, !dbg !75
  %301 = bitcast float %219 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %301, i1 true) #2, !dbg !75
  %302 = or disjoint i32 %279, 4, !dbg !75
  %303 = add nuw nsw i32 %302, %282, !dbg !75
  %304 = zext nneg i32 %303 to i64, !dbg !75
  %305 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %304, !dbg !75
  %306 = bitcast float %222 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %305, <1 x i32> %306, i1 true) #2, !dbg !75
  %307 = or disjoint i32 %279, 5, !dbg !75
  %308 = add nuw nsw i32 %307, %282, !dbg !75
  %309 = zext nneg i32 %308 to i64, !dbg !75
  %310 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %309, !dbg !75
  %311 = bitcast float %225 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %310, <1 x i32> %311, i1 true) #2, !dbg !75
  %312 = or disjoint i32 %279, 6, !dbg !75
  %313 = add nuw nsw i32 %312, %282, !dbg !75
  %314 = zext nneg i32 %313 to i64, !dbg !75
  %315 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %314, !dbg !75
  %316 = bitcast float %228 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %315, <1 x i32> %316, i1 true) #2, !dbg !75
  %317 = or disjoint i32 %279, 7, !dbg !75
  %318 = add nuw nsw i32 %317, %282, !dbg !75
  %319 = zext nneg i32 %318 to i64, !dbg !75
  %320 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %319, !dbg !75
  %321 = bitcast float %231 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %320, <1 x i32> %321, i1 true) #2, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %322 = lshr i32 %280, 5, !dbg !75
  %323 = add nuw nsw i32 %322, %280, !dbg !75
  %324 = zext nneg i32 %323 to i64, !dbg !75
  %325 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %324, !dbg !75
  %326 = load i32, ptr addrspace(3) %325, align 4, !dbg !75
  %327 = or disjoint i32 %280, 128, !dbg !75
  %328 = lshr i32 %327, 5, !dbg !75
  %329 = add nuw nsw i32 %328, %327, !dbg !75
  %330 = zext nneg i32 %329 to i64, !dbg !75
  %331 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %330, !dbg !75
  %332 = load i32, ptr addrspace(3) %331, align 4, !dbg !75
  %333 = or disjoint i32 %280, 256, !dbg !75
  %334 = lshr i32 %333, 5, !dbg !75
  %335 = add nuw nsw i32 %334, %333, !dbg !75
  %336 = zext nneg i32 %335 to i64, !dbg !75
  %337 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %336, !dbg !75
  %338 = load i32, ptr addrspace(3) %337, align 4, !dbg !75
  %339 = or disjoint i32 %280, 384, !dbg !75
  %340 = lshr i32 %339, 5, !dbg !75
  %341 = add nuw nsw i32 %340, %339, !dbg !75
  %342 = zext nneg i32 %341 to i64, !dbg !75
  %343 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %342, !dbg !75
  %344 = load i32, ptr addrspace(3) %343, align 4, !dbg !75
  %345 = or disjoint i32 %280, 512, !dbg !75
  %346 = lshr i32 %345, 5, !dbg !75
  %347 = add nuw nsw i32 %346, %345, !dbg !75
  %348 = zext nneg i32 %347 to i64, !dbg !75
  %349 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %348, !dbg !75
  %350 = load i32, ptr addrspace(3) %349, align 4, !dbg !75
  %351 = or disjoint i32 %280, 640, !dbg !75
  %352 = lshr i32 %351, 5, !dbg !75
  %353 = add nuw nsw i32 %352, %351, !dbg !75
  %354 = zext nneg i32 %353 to i64, !dbg !75
  %355 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %354, !dbg !75
  %356 = load i32, ptr addrspace(3) %355, align 4, !dbg !75
  %357 = or disjoint i32 %280, 768, !dbg !75
  %358 = lshr i32 %357, 5, !dbg !75
  %359 = add nuw nsw i32 %358, %357, !dbg !75
  %360 = zext nneg i32 %359 to i64, !dbg !75
  %361 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %360, !dbg !75
  %362 = load i32, ptr addrspace(3) %361, align 4, !dbg !75
  %363 = or disjoint i32 %280, 896, !dbg !75
  %364 = lshr i32 %363, 5, !dbg !75
  %365 = add nuw nsw i32 %364, %363, !dbg !75
  %366 = zext nneg i32 %365 to i64, !dbg !75
  %367 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %366, !dbg !75
  %368 = load i32, ptr addrspace(3) %367, align 4, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %326, ptr addrspace(1) %264, i1 %68) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %332, ptr addrspace(1) %266, i1 %69) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %338, ptr addrspace(1) %268, i1 %70) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %344, ptr addrspace(1) %270, i1 %71) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %350, ptr addrspace(1) %272, i1 %72) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %356, ptr addrspace(1) %274, i1 %73) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %362, ptr addrspace(1) %276, i1 %74) #2, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %368, ptr addrspace(1) %278, i1 %75) #2, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyrb2epqdgq3emzqbxibuvgtlyureccubdfj5b4j4dkzfgctbisv.py", directory: "inductor_cache/yr")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_relu_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_relu_11", linkageName: "triton_poi_fused_max_pool2d_with_indices_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 33, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 49, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 62, scope: !7)
!30 = !DILocation(line: 34, column: 54, scope: !7)
!31 = !DILocation(line: 35, column: 41, scope: !7)
!32 = !DILocation(line: 35, column: 50, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 60, scope: !7)
!35 = !DILocation(line: 36, column: 42, scope: !7)
!36 = !DILocation(line: 36, column: 51, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 61, scope: !7)
!39 = !DILocation(line: 37, column: 43, scope: !7)
!40 = !DILocation(line: 37, column: 52, scope: !7)
!41 = !DILocation(line: 37, column: 31, scope: !7)
!42 = !DILocation(line: 37, column: 62, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 41, column: 32, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 42, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!51 = !DILocation(line: 43, column: 18, scope: !7)
!52 = !DILocation(line: 45, column: 33, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !54)
!54 = !DILocation(line: 46, column: 41, scope: !7)
!55 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !54)
!56 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !54)
!57 = !DILocation(line: 47, column: 20, scope: !7)
!58 = !DILocation(line: 49, column: 35, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !60)
!60 = !DILocation(line: 50, column: 42, scope: !7)
!61 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !60)
!62 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !60)
!63 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !64)
!64 = !DILocation(line: 52, column: 42, scope: !7)
!65 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !64)
!66 = !DILocation(line: 53, column: 34, scope: !7)
!67 = !DILocation(line: 53, column: 30, scope: !7)
!68 = !DILocation(line: 53, column: 25, scope: !7)
!69 = !DILocation(line: 53, column: 46, scope: !7)
!70 = !DILocation(line: 54, column: 33, scope: !7)
!71 = !DILocation(line: 54, column: 30, scope: !7)
!72 = !DILocation(line: 54, column: 43, scope: !7)
!73 = !DILocation(line: 54, column: 38, scope: !7)
!74 = !DILocation(line: 54, column: 25, scope: !7)
!75 = !DILocation(line: 54, column: 55, scope: !7)
!76 = !DILocation(line: 54, column: 4, scope: !7)
