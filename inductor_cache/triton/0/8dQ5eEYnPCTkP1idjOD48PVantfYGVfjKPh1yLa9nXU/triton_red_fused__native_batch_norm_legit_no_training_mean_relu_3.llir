; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused__native_batch_norm_legit_no_training_mean_relu_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 60, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 6144, !dbg !14
  %16 = lshr i32 %11, 4, !dbg !15
  %17 = and i32 %16, 7, !dbg !15
  %.frozen = freeze i32 %14, !dbg !16
  %18 = sdiv i32 %.frozen, 768, !dbg !16
  %19 = mul i32 %18, 768, !dbg !17
  %.decomposed = sub i32 %.frozen, %19, !dbg !17
  %20 = sext i32 %.decomposed to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !18
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 %15) #5, !dbg !19
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !19
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !19
  %27 = insertelement <4 x i32> poison, i32 %23, i64 0, !dbg !19
  %28 = insertelement <4 x i32> %27, i32 %24, i64 1, !dbg !19
  %29 = insertelement <4 x i32> %28, i32 %25, i64 2, !dbg !19
  %30 = insertelement <4 x i32> %29, i32 %26, i64 3, !dbg !19
  %31 = bitcast <4 x i32> %30 to <4 x float>, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !20
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %15) #5, !dbg !21
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !21
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !21
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !21
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !21
  %38 = bitcast i32 %34 to float, !dbg !21
  %39 = bitcast i32 %35 to float, !dbg !21
  %40 = bitcast i32 %36 to float, !dbg !21
  %41 = bitcast i32 %37 to float, !dbg !21
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !22
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %15) #5, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !23
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !23
  %48 = insertelement <4 x i32> poison, i32 %44, i64 0, !dbg !23
  %49 = insertelement <4 x i32> %48, i32 %45, i64 1, !dbg !23
  %50 = insertelement <4 x i32> %49, i32 %46, i64 2, !dbg !23
  %51 = insertelement <4 x i32> %50, i32 %47, i64 3, !dbg !23
  %52 = bitcast <4 x i32> %51 to <4 x float>, !dbg !23
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !24
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %15) #5, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !25
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !25
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !25
  %59 = insertelement <4 x i32> poison, i32 %55, i64 0, !dbg !25
  %60 = insertelement <4 x i32> %59, i32 %56, i64 1, !dbg !25
  %61 = insertelement <4 x i32> %60, i32 %57, i64 2, !dbg !25
  %62 = insertelement <4 x i32> %61, i32 %58, i64 3, !dbg !25
  %63 = bitcast <4 x i32> %62 to <4 x float>, !dbg !25
  %64 = mul i32 %18, 98304, !dbg !26
  %65 = fadd float %38, 0x3F50624DE0000000, !dbg !27
  %66 = fadd float %39, 0x3F50624DE0000000, !dbg !27
  %67 = fadd float %40, 0x3F50624DE0000000, !dbg !27
  %68 = fadd float %41, 0x3F50624DE0000000, !dbg !27
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %.not.i = icmp eq i32 %69, 0, !dbg !28
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %.not1.i = icmp eq i32 %70, 0, !dbg !28
  br i1 %.not.i, label %76, label %71, !dbg !28

71:                                               ; preds = %8
  br i1 %.not1.i, label %74, label %72, !dbg !28

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

76:                                               ; preds = %8
  br i1 %.not1.i, label %79, label %77, !dbg !28

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %72, %74, %77, %79
  %.0.i = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !28
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %.not.i1 = icmp eq i32 %81, 0, !dbg !28
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %.not1.i4 = icmp eq i32 %82, 0, !dbg !28
  br i1 %.not.i1, label %88, label %83, !dbg !28

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %86, label %84, !dbg !28

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #5, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #5, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %91, label %89, !dbg !28

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #5, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #5, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %84, %86, %89, %91
  %.0.i3 = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !28
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %.not.i6 = icmp eq i32 %93, 0, !dbg !28
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %.not1.i9 = icmp eq i32 %94, 0, !dbg !28
  br i1 %.not.i6, label %100, label %95, !dbg !28

95:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %98, label %96, !dbg !28

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #5, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #5, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

100:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %103, label %101, !dbg !28

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #5, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #5, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

__nv_sqrtf.exit10:                                ; preds = %96, %98, %101, %103
  %.0.i8 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !28
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %.not.i11 = icmp eq i32 %105, 0, !dbg !28
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %.not1.i14 = icmp eq i32 %106, 0, !dbg !28
  br i1 %.not.i11, label %112, label %107, !dbg !28

107:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %110, label %108, !dbg !28

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #5, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #5, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

112:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %115, label %113, !dbg !28

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #5, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #5, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

__nv_sqrtf.exit15:                                ; preds = %108, %110, %113, %115
  %.0.i13 = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !28
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !29
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #5, !dbg !29
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #5, !dbg !29
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #5, !dbg !29
  %121 = add i32 %64, %.decomposed
  %122 = insertelement <4 x i1> poison, i1 %15, i64 0, !dbg !30
  %123 = shufflevector <4 x i1> %122, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !30
  %124 = insertelement <4 x float> poison, float %117, i64 0, !dbg !31
  %125 = insertelement <4 x float> %124, float %118, i64 1, !dbg !31
  %126 = insertelement <4 x float> %125, float %119, i64 2, !dbg !31
  %127 = insertelement <4 x float> %126, float %120, i64 3, !dbg !31
  br label %128, !dbg !32

128:                                              ; preds = %__nv_sqrtf.exit15, %128
  %indvars.iv = phi i64 [ 0, %__nv_sqrtf.exit15 ], [ %indvars.iv.next, %128 ]
  %129 = phi <4 x float> [ zeroinitializer, %__nv_sqrtf.exit15 ], [ %153, %128 ]
  %130 = trunc i64 %indvars.iv to i32, !dbg !33
  %131 = or disjoint i32 %17, %130, !dbg !33
  %132 = mul i32 %131, 768, !dbg !33
  %133 = add i32 %121, %132, !dbg !33
  %134 = sext i32 %133 to i64, !dbg !34
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !34
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %135, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !35
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !35
  %138 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !35
  %139 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !35
  %140 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !35
  %141 = insertelement <4 x i32> poison, i32 %137, i64 0, !dbg !35
  %142 = insertelement <4 x i32> %141, i32 %138, i64 1, !dbg !35
  %143 = insertelement <4 x i32> %142, i32 %139, i64 2, !dbg !35
  %144 = insertelement <4 x i32> %143, i32 %140, i64 3, !dbg !35
  %145 = bitcast <4 x i32> %144 to <4 x float>, !dbg !35
  %146 = fsub <4 x float> %145, %31, !dbg !36
  %147 = fmul <4 x float> %127, %146, !dbg !31
  %148 = fmul <4 x float> %147, %52, !dbg !37
  %149 = fadd <4 x float> %148, %63, !dbg !38
  %150 = fcmp olt <4 x float> %149, zeroinitializer, !dbg !39
  %151 = select <4 x i1> %150, <4 x float> zeroinitializer, <4 x float> %149, !dbg !43
  %152 = fadd <4 x float> %129, %151, !dbg !44
  %153 = select <4 x i1> %123, <4 x float> %152, <4 x float> %129, !dbg !30
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !32
  %154 = icmp samesign ult i64 %indvars.iv, 120, !dbg !32
  br i1 %154, label %128, label %155, !dbg !32

155:                                              ; preds = %128
  %156 = lshr i32 %11, 5, !dbg !12
  %157 = and i32 %11, 63, !dbg !12
  %158 = or disjoint i32 %10, %157, !dbg !13
  %159 = icmp slt i32 %158, 6144, !dbg !14
  %160 = and i32 %11, 16, !dbg !12
  %161 = extractelement <4 x float> %153, i64 0, !dbg !45
  %162 = bitcast float %161 to i32, !dbg !45
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 16, i32 31), !dbg !45
  %164 = bitcast i32 %163 to float, !dbg !45
  %165 = fadd float %161, %164, !dbg !49
  %166 = extractelement <4 x float> %153, i64 1, !dbg !45
  %167 = bitcast float %166 to i32, !dbg !45
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 16, i32 31), !dbg !45
  %169 = bitcast i32 %168 to float, !dbg !45
  %170 = fadd float %166, %169, !dbg !49
  %171 = extractelement <4 x float> %153, i64 2, !dbg !45
  %172 = bitcast float %171 to i32, !dbg !45
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 16, i32 31), !dbg !45
  %174 = bitcast i32 %173 to float, !dbg !45
  %175 = fadd float %171, %174, !dbg !49
  %176 = extractelement <4 x float> %153, i64 3, !dbg !45
  %177 = bitcast float %176 to i32, !dbg !45
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 16, i32 31), !dbg !45
  %179 = bitcast i32 %178 to float, !dbg !45
  %180 = fadd float %176, %179, !dbg !49
  %181 = icmp eq i32 %160, 0, !dbg !45
  %182 = and i32 %156, 3, !dbg !45
  %183 = shl nuw nsw i32 %13, 2, !dbg !45
  %184 = or disjoint i32 %183, %182, !dbg !45
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i32 %184, !dbg !45
  %186 = bitcast float %165 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %186, i1 %181) #5, !dbg !45
  %187 = or disjoint i32 %183, 4, !dbg !45
  %188 = or disjoint i32 %187, %182, !dbg !45
  %189 = getelementptr float, ptr addrspace(3) @global_smem, i32 %188, !dbg !45
  %190 = bitcast float %170 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %189, <1 x i32> %190, i1 %181) #5, !dbg !45
  %191 = or disjoint i32 %183, 8, !dbg !45
  %192 = or disjoint i32 %191, %182, !dbg !45
  %193 = getelementptr float, ptr addrspace(3) @global_smem, i32 %192, !dbg !45
  %194 = bitcast float %175 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %193, <1 x i32> %194, i1 %181) #5, !dbg !45
  %195 = or disjoint i32 %183, 12, !dbg !45
  %196 = or disjoint i32 %195, %182, !dbg !45
  %197 = getelementptr float, ptr addrspace(3) @global_smem, i32 %196, !dbg !45
  %198 = bitcast float %180 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 %181) #5, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %199 = icmp slt i32 %11, 256, !dbg !45
  %200 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !45
  %201 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %200, i1 %199) #5, !dbg !45
  %202 = bitcast i32 %201 to float, !dbg !45
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 2, i32 31), !dbg !45
  %204 = bitcast i32 %203 to float, !dbg !45
  %205 = fadd float %202, %204, !dbg !49
  %206 = bitcast float %205 to i32, !dbg !45
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 1, i32 31), !dbg !45
  %208 = bitcast i32 %207 to float, !dbg !45
  %209 = fadd float %205, %208, !dbg !49
  %210 = and i32 %11, 3, !dbg !45
  %211 = icmp eq i32 %210, 0, !dbg !45
  %212 = and i1 %199, %211, !dbg !45
  %213 = bitcast float %209 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %213, i1 %212) #5, !dbg !45
  %214 = getelementptr i8, ptr addrspace(3) %200, i32 512, !dbg !45
  %215 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %214, i1 %199) #5, !dbg !45
  %216 = bitcast i32 %215 to float, !dbg !45
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 2, i32 31), !dbg !45
  %218 = bitcast i32 %217 to float, !dbg !45
  %219 = fadd float %216, %218, !dbg !49
  %220 = bitcast float %219 to i32, !dbg !45
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 1, i32 31), !dbg !45
  %222 = bitcast i32 %221 to float, !dbg !45
  %223 = fadd float %219, %222, !dbg !49
  %224 = bitcast float %223 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %224, i1 %212) #5, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %225 = getelementptr float, ptr addrspace(3) @global_smem, i32 %183, !dbg !45
  %226 = load i32, ptr addrspace(3) %225, align 16, !dbg !45
  %227 = getelementptr float, ptr addrspace(3) @global_smem, i32 %187, !dbg !45
  %228 = load i32, ptr addrspace(3) %227, align 16, !dbg !45
  %229 = getelementptr float, ptr addrspace(3) @global_smem, i32 %191, !dbg !45
  %230 = load i32, ptr addrspace(3) %229, align 16, !dbg !45
  %231 = getelementptr float, ptr addrspace(3) @global_smem, i32 %195, !dbg !45
  %232 = load i32, ptr addrspace(3) %231, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %233 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !51
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %233, i32 %226, i32 %228, i32 %230, i32 %232, i1 true) #5, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %234 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %157, !dbg !51
  %235 = load i32, ptr addrspace(3) %234, align 4, !dbg !51
  %236 = sext i32 %158 to i64, !dbg !52
  %237 = getelementptr float, ptr addrspace(1) %5, i64 %236, !dbg !52
  %238 = and i32 %11, 64, !dbg !53
  %239 = icmp eq i32 %238, 0, !dbg !53
  %240 = and i1 %239, %159, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %235, ptr addrspace(1) %237, i1 %240) #5, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctbaelwvxqpno3q2yrbcogdunyghdz5eyslona5ldnpox2k3qxc2.py", directory: "inductor_cache/tb")
!4 = !{ptr @triton_red_fused__native_batch_norm_legit_no_training_mean_relu_3, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__native_batch_norm_legit_no_training_mean_relu_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__native_batch_norm_legit_no_training_mean_relu_3", linkageName: "triton_red_fused__native_batch_norm_legit_no_training_mean_relu_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 38, column: 54, scope: !7)
!27 = !DILocation(line: 41, column: 22, scope: !7)
!28 = !DILocation(line: 42, column: 30, scope: !7)
!29 = !DILocation(line: 44, column: 22, scope: !7)
!30 = !DILocation(line: 54, column: 48, scope: !7)
!31 = !DILocation(line: 47, column: 23, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 38, column: 48, scope: !7)
!34 = !DILocation(line: 38, column: 34, scope: !7)
!35 = !DILocation(line: 38, column: 59, scope: !7)
!36 = !DILocation(line: 39, column: 22, scope: !7)
!37 = !DILocation(line: 48, column: 24, scope: !7)
!38 = !DILocation(line: 49, column: 24, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 51, column: 46, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 53, column: 25, scope: !7)
!45 = !DILocation(line: 267, column: 36, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!48 = !DILocation(line: 55, column: 27, scope: !7)
!49 = !DILocation(line: 256, column: 15, scope: !50, inlinedAt: !48)
!50 = distinct !DILexicalBlockFile(scope: !46, file: !47, discriminator: 0)
!51 = !DILocation(line: 55, column: 30, scope: !7)
!52 = !DILocation(line: 56, column: 25, scope: !7)
!53 = !DILocation(line: 56, column: 37, scope: !7)
!54 = !DILocation(line: 56, column: 4, scope: !7)
