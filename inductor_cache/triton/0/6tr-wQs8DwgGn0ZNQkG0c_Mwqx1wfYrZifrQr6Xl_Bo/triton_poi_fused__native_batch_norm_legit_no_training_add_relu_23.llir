; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 3, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 4, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = shl i32 %12, 2, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %18 = shl i32 %17, 6, !dbg !15
  %19 = and i32 %15, 60, !dbg !16
  %20 = or disjoint i32 %18, %19, !dbg !17
  %21 = icmp slt i32 %20, 64, !dbg !18
  %22 = shl i32 %16, 6, !dbg !19
  %23 = add i32 %20, %22, !dbg !20
  %24 = sext i32 %23 to i64, !dbg !21
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !21
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 %21) #4, !dbg !22
  %27 = sext i32 %20 to i64, !dbg !23
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !23
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 %21) #4, !dbg !24
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !25
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %21) #4, !dbg !26
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !26
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !26
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !26
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !26
  %36 = bitcast i32 %32 to float, !dbg !26
  %37 = bitcast i32 %33 to float, !dbg !26
  %38 = bitcast i32 %34 to float, !dbg !26
  %39 = bitcast i32 %35 to float, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !27
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %21) #4, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !29
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %21) #4, !dbg !30
  %44 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !31
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %21) #4, !dbg !32
  %46 = fadd float %36, 0x3EE4F8B580000000, !dbg !33
  %47 = fadd float %37, 0x3EE4F8B580000000, !dbg !33
  %48 = fadd float %38, 0x3EE4F8B580000000, !dbg !33
  %49 = fadd float %39, 0x3EE4F8B580000000, !dbg !33
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %50, 0, !dbg !34
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i = icmp eq i32 %51, 0, !dbg !34
  br i1 %.not.i, label %57, label %52, !dbg !34

52:                                               ; preds = %9
  br i1 %.not1.i, label %55, label %53, !dbg !34

53:                                               ; preds = %52
  %54 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

55:                                               ; preds = %52
  %56 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

57:                                               ; preds = %9
  br i1 %.not1.i, label %60, label %58, !dbg !34

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %53, %55, %58, %60
  %.0.i = phi float [ %54, %53 ], [ %56, %55 ], [ %59, %58 ], [ %61, %60 ], !dbg !34
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i10 = icmp eq i32 %62, 0, !dbg !34
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i13 = icmp eq i32 %63, 0, !dbg !34
  br i1 %.not.i10, label %69, label %64, !dbg !34

64:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i13, label %67, label %65, !dbg !34

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #4, !dbg !34
  br label %__nv_sqrtf.exit14, !dbg !34

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #4, !dbg !34
  br label %__nv_sqrtf.exit14, !dbg !34

69:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i13, label %72, label %70, !dbg !34

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #4, !dbg !34
  br label %__nv_sqrtf.exit14, !dbg !34

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #4, !dbg !34
  br label %__nv_sqrtf.exit14, !dbg !34

__nv_sqrtf.exit14:                                ; preds = %65, %67, %70, %72
  %.0.i12 = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !34
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i15 = icmp eq i32 %74, 0, !dbg !34
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i18 = icmp eq i32 %75, 0, !dbg !34
  br i1 %.not.i15, label %81, label %76, !dbg !34

76:                                               ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %79, label %77, !dbg !34

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #4, !dbg !34
  br label %__nv_sqrtf.exit19, !dbg !34

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #4, !dbg !34
  br label %__nv_sqrtf.exit19, !dbg !34

81:                                               ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %84, label %82, !dbg !34

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #4, !dbg !34
  br label %__nv_sqrtf.exit19, !dbg !34

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #4, !dbg !34
  br label %__nv_sqrtf.exit19, !dbg !34

__nv_sqrtf.exit19:                                ; preds = %77, %79, %82, %84
  %.0.i17 = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !34
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i20 = icmp eq i32 %86, 0, !dbg !34
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i23 = icmp eq i32 %87, 0, !dbg !34
  br i1 %.not.i20, label %93, label %88, !dbg !34

88:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %91, label %89, !dbg !34

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #4, !dbg !34
  br label %__nv_sqrtf.exit24, !dbg !34

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #4, !dbg !34
  br label %__nv_sqrtf.exit24, !dbg !34

93:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %96, label %94, !dbg !34

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #4, !dbg !34
  br label %__nv_sqrtf.exit24, !dbg !34

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #4, !dbg !34
  br label %__nv_sqrtf.exit24, !dbg !34

__nv_sqrtf.exit24:                                ; preds = %89, %91, %94, %96
  %.0.i22 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !34
  %98 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !22
  %99 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !24
  %100 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !22
  %101 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !24
  %102 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !22
  %103 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !24
  %104 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !22
  %105 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !24
  %106 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !32
  %107 = bitcast i32 %106 to float, !dbg !32
  %108 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !32
  %109 = bitcast i32 %108 to float, !dbg !32
  %110 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !32
  %111 = bitcast i32 %110 to float, !dbg !32
  %112 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !32
  %113 = bitcast i32 %112 to float, !dbg !32
  %114 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !30
  %115 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !30
  %116 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !30
  %117 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !30
  %118 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !28
  %119 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !28
  %120 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !28
  %121 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !28
  %122 = and i32 %15, 4, !dbg !12
  %123 = or disjoint i32 %11, %122, !dbg !13
  %.frozen = freeze i32 %123, !dbg !35
  %124 = sdiv i32 %.frozen, 256, !dbg !35
  %125 = mul i32 %124, 256, !dbg !36
  %.decomposed = sub i32 %.frozen, %125, !dbg !36
  %126 = lshr i32 %12, 1, !dbg !16
  %127 = and i32 %126, 63, !dbg !16
  %128 = or disjoint i32 %18, %127, !dbg !17
  %129 = icmp slt i32 %128, 64, !dbg !18
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i12) #4, !dbg !37
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !37
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !37
  %134 = insertelement <4 x i32> poison, i32 %98, i64 0, !dbg !22
  %135 = insertelement <4 x i32> %134, i32 %100, i64 1, !dbg !22
  %136 = insertelement <4 x i32> %135, i32 %102, i64 2, !dbg !22
  %137 = insertelement <4 x i32> %136, i32 %104, i64 3, !dbg !22
  %138 = bitcast <4 x i32> %137 to <4 x float>, !dbg !22
  %139 = insertelement <4 x i32> poison, i32 %99, i64 0, !dbg !24
  %140 = insertelement <4 x i32> %139, i32 %101, i64 1, !dbg !24
  %141 = insertelement <4 x i32> %140, i32 %103, i64 2, !dbg !24
  %142 = insertelement <4 x i32> %141, i32 %105, i64 3, !dbg !24
  %143 = bitcast <4 x i32> %142 to <4 x float>, !dbg !24
  %144 = fsub <4 x float> %138, %143, !dbg !38
  %145 = insertelement <4 x i32> poison, i32 %114, i64 0, !dbg !30
  %146 = insertelement <4 x i32> %145, i32 %115, i64 1, !dbg !30
  %147 = insertelement <4 x i32> %146, i32 %116, i64 2, !dbg !30
  %148 = insertelement <4 x i32> %147, i32 %117, i64 3, !dbg !30
  %149 = bitcast <4 x i32> %148 to <4 x float>, !dbg !30
  %150 = insertelement <4 x i32> poison, i32 %118, i64 0, !dbg !28
  %151 = insertelement <4 x i32> %150, i32 %119, i64 1, !dbg !28
  %152 = insertelement <4 x i32> %151, i32 %120, i64 2, !dbg !28
  %153 = insertelement <4 x i32> %152, i32 %121, i64 3, !dbg !28
  %154 = bitcast <4 x i32> %153 to <4 x float>, !dbg !28
  %155 = insertelement <4 x float> poison, float %133, i64 0, !dbg !39
  %156 = insertelement <4 x float> %155, float %132, i64 1, !dbg !39
  %157 = insertelement <4 x float> %156, float %131, i64 2, !dbg !39
  %158 = insertelement <4 x float> %157, float %130, i64 3, !dbg !39
  %159 = fmul <4 x float> %144, %158, !dbg !39
  %160 = fmul <4 x float> %159, %154, !dbg !40
  %161 = fadd <4 x float> %160, %149, !dbg !41
  %162 = fcmp olt <4 x float> %161, zeroinitializer, !dbg !42
  %163 = extractelement <4 x i1> %162, i64 3, !dbg !46
  %164 = extractelement <4 x float> %161, i64 3, !dbg !46
  %165 = select i1 %163, float 0.000000e+00, float %164, !dbg !46
  %166 = extractelement <4 x i1> %162, i64 2, !dbg !46
  %167 = extractelement <4 x float> %161, i64 2, !dbg !46
  %168 = select i1 %166, float 0.000000e+00, float %167, !dbg !46
  %169 = extractelement <4 x i1> %162, i64 1, !dbg !46
  %170 = extractelement <4 x float> %161, i64 1, !dbg !46
  %171 = select i1 %169, float 0.000000e+00, float %170, !dbg !46
  %172 = extractelement <4 x i1> %162, i64 0, !dbg !46
  %173 = extractelement <4 x float> %161, i64 0, !dbg !46
  %174 = select i1 %172, float 0.000000e+00, float %173, !dbg !46
  %175 = fadd float %165, %113, !dbg !47
  %176 = fadd float %168, %111, !dbg !47
  %177 = fadd float %171, %109, !dbg !47
  %178 = fadd float %174, %107, !dbg !47
  %179 = shl i32 %128, 8, !dbg !48
  %180 = add i32 %179, %.decomposed, !dbg !49
  %181 = shl i32 %124, 14, !dbg !50
  %182 = add i32 %180, %181, !dbg !51
  %183 = sext i32 %182 to i64, !dbg !52
  %184 = getelementptr float, ptr addrspace(1) %6, i64 %183, !dbg !52
  %185 = shl i32 %12, 5, !dbg !53
  %186 = and i32 %185, 480, !dbg !53
  %187 = or disjoint i32 %186, %14, !dbg !53
  %188 = and i32 %15, 508, !dbg !53
  %189 = lshr exact i32 %186, 1, !dbg !53
  %190 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %189, !dbg !53
  %191 = getelementptr inbounds float, ptr addrspace(3) %190, i32 %187, !dbg !53
  %192 = bitcast float %175 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %192, i1 true) #4, !dbg !53
  %193 = or disjoint i32 %187, 8, !dbg !53
  %194 = lshr i32 %193, 1, !dbg !53
  %195 = and i32 %194, 244, !dbg !53
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i32 %195, !dbg !53
  %197 = getelementptr float, ptr addrspace(3) %196, i32 %193, !dbg !53
  %198 = bitcast float %176 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 true) #4, !dbg !53
  %199 = or disjoint i32 %187, 16, !dbg !53
  %200 = lshr i32 %199, 1, !dbg !53
  %201 = and i32 %200, 248, !dbg !53
  %202 = getelementptr float, ptr addrspace(3) @global_smem, i32 %201, !dbg !53
  %203 = getelementptr float, ptr addrspace(3) %202, i32 %199, !dbg !53
  %204 = bitcast float %177 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %204, i1 true) #4, !dbg !53
  %205 = or disjoint i32 %187, 24, !dbg !53
  %206 = lshr i32 %205, 1, !dbg !53
  %207 = and i32 %206, 252, !dbg !53
  %208 = getelementptr float, ptr addrspace(3) @global_smem, i32 %207, !dbg !53
  %209 = getelementptr float, ptr addrspace(3) %208, i32 %205, !dbg !53
  %210 = bitcast float %178 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %209, <1 x i32> %210, i1 true) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %211 = lshr exact i32 %15, 1, !dbg !53
  %212 = and i32 %211, 252, !dbg !53
  %213 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %212, !dbg !53
  %214 = getelementptr inbounds float, ptr addrspace(3) %213, i32 %188, !dbg !53
  %.extract = load i32, ptr addrspace(3) %214, align 16, !dbg !53
  %215 = getelementptr inbounds i8, ptr addrspace(3) %214, i32 4, !dbg !53
  %.extract7 = load i32, ptr addrspace(3) %215, align 4, !dbg !53
  %216 = getelementptr inbounds i8, ptr addrspace(3) %214, i32 8, !dbg !53
  %.extract8 = load i32, ptr addrspace(3) %216, align 8, !dbg !53
  %217 = getelementptr inbounds i8, ptr addrspace(3) %214, i32 12, !dbg !53
  %.extract9 = load i32, ptr addrspace(3) %217, align 4, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract7, i32 %.extract8, i32 %.extract9, ptr addrspace(1) %184, i1 %129) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clt4fujazd5xqiqu75pqeqru2rbo5qrvsbsytubgfs5tyw47snai.py", directory: "inductor_cache/lt")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_23", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 38, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 43, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 31, scope: !7)
!28 = !DILocation(line: 35, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 31, scope: !7)
!30 = !DILocation(line: 36, column: 36, scope: !7)
!31 = !DILocation(line: 37, column: 31, scope: !7)
!32 = !DILocation(line: 37, column: 44, scope: !7)
!33 = !DILocation(line: 40, column: 18, scope: !7)
!34 = !DILocation(line: 41, column: 26, scope: !7)
!35 = !DILocation(line: 31, column: 19, scope: !7)
!36 = !DILocation(line: 30, column: 19, scope: !7)
!37 = !DILocation(line: 43, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 18, scope: !7)
!39 = !DILocation(line: 46, column: 19, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 50, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 51, column: 20, scope: !7)
!48 = !DILocation(line: 52, column: 34, scope: !7)
!49 = !DILocation(line: 52, column: 30, scope: !7)
!50 = !DILocation(line: 52, column: 45, scope: !7)
!51 = !DILocation(line: 52, column: 39, scope: !7)
!52 = !DILocation(line: 52, column: 25, scope: !7)
!53 = !DILocation(line: 52, column: 57, scope: !7)
!54 = !DILocation(line: 52, column: 4, scope: !7)
