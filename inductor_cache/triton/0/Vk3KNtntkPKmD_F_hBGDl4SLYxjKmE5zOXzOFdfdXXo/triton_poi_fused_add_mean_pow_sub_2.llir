; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_mean_pow_sub_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 62, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = icmp slt i32 %11, 64, !dbg !14
  %14 = srem i32 %11, 16, !dbg !15
  %15 = srem i32 %12, 16, !dbg !15
  %16 = shl i32 %11, 2, !dbg !16
  %17 = shl i32 %12, 2, !dbg !16
  %18 = sext i32 %16 to i64, !dbg !17
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !17
  %20 = sext i32 %17 to i64, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !17
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %13) #1, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %13) #1, !dbg !18
  %24 = shl nsw i32 %14, 2, !dbg !19
  %25 = shl nsw i32 %15, 2, !dbg !19
  %26 = sext i32 %24 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !20
  %28 = sext i32 %25 to i64, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %13) #1, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %13) #1, !dbg !21
  %32 = or disjoint i32 %16, 1, !dbg !22
  %33 = or disjoint i32 %17, 1, !dbg !22
  %34 = sext i32 %32 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !23
  %36 = sext i32 %33 to i64, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !23
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %13) #1, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %13) #1, !dbg !24
  %40 = or disjoint i32 %24, 1, !dbg !25
  %41 = or disjoint i32 %25, 1, !dbg !25
  %42 = sext i32 %40 to i64, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !26
  %44 = sext i32 %41 to i64, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !26
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %13) #1, !dbg !27
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %13) #1, !dbg !27
  %48 = or disjoint i32 %16, 2, !dbg !28
  %49 = or disjoint i32 %17, 2, !dbg !28
  %50 = sext i32 %48 to i64, !dbg !29
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !29
  %52 = sext i32 %49 to i64, !dbg !29
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !29
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %13) #1, !dbg !30
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %13) #1, !dbg !30
  %56 = or disjoint i32 %24, 2, !dbg !31
  %57 = or disjoint i32 %25, 2, !dbg !31
  %58 = sext i32 %56 to i64, !dbg !32
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !32
  %60 = sext i32 %57 to i64, !dbg !32
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !32
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %13) #1, !dbg !33
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %13) #1, !dbg !33
  %64 = or disjoint i32 %16, 3, !dbg !34
  %65 = or disjoint i32 %17, 3, !dbg !34
  %66 = sext i32 %64 to i64, !dbg !35
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !35
  %68 = sext i32 %65 to i64, !dbg !35
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !35
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %13) #1, !dbg !36
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %13) #1, !dbg !36
  %72 = or disjoint i32 %24, 3, !dbg !37
  %73 = or disjoint i32 %25, 3, !dbg !37
  %74 = sext i32 %72 to i64, !dbg !38
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !38
  %76 = sext i32 %73 to i64, !dbg !38
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !38
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %13) #1, !dbg !39
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %13) #1, !dbg !39
  %80 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !18
  %81 = insertelement <2 x i32> %80, i32 %38, i64 1, !dbg !18
  %82 = bitcast <2 x i32> %81 to <2 x float>, !dbg !18
  %83 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !21
  %84 = insertelement <2 x i32> %83, i32 %46, i64 1, !dbg !21
  %85 = bitcast <2 x i32> %84 to <2 x float>, !dbg !21
  %86 = fadd <2 x float> %82, %85, !dbg !40
  %87 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !18
  %88 = insertelement <2 x i32> %87, i32 %39, i64 1, !dbg !18
  %89 = bitcast <2 x i32> %88 to <2 x float>, !dbg !18
  %90 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !21
  %91 = insertelement <2 x i32> %90, i32 %47, i64 1, !dbg !21
  %92 = bitcast <2 x i32> %91 to <2 x float>, !dbg !21
  %93 = fadd <2 x float> %89, %92, !dbg !40
  %94 = extractelement <2 x float> %86, i64 0, !dbg !41
  %95 = extractelement <2 x float> %86, i64 1, !dbg !42
  %96 = fadd float %94, %95, !dbg !43
  %97 = extractelement <2 x float> %93, i64 0, !dbg !41
  %98 = extractelement <2 x float> %93, i64 1, !dbg !42
  %99 = fadd float %97, %98, !dbg !43
  %100 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !30
  %101 = insertelement <2 x i32> %100, i32 %70, i64 1, !dbg !30
  %102 = bitcast <2 x i32> %101 to <2 x float>, !dbg !30
  %103 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !33
  %104 = insertelement <2 x i32> %103, i32 %78, i64 1, !dbg !33
  %105 = bitcast <2 x i32> %104 to <2 x float>, !dbg !33
  %106 = fadd <2 x float> %102, %105, !dbg !44
  %107 = extractelement <2 x float> %106, i64 0, !dbg !45
  %108 = fadd float %96, %107, !dbg !46
  %109 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !30
  %110 = insertelement <2 x i32> %109, i32 %71, i64 1, !dbg !30
  %111 = bitcast <2 x i32> %110 to <2 x float>, !dbg !30
  %112 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !33
  %113 = insertelement <2 x i32> %112, i32 %79, i64 1, !dbg !33
  %114 = bitcast <2 x i32> %113 to <2 x float>, !dbg !33
  %115 = fadd <2 x float> %111, %114, !dbg !44
  %116 = extractelement <2 x float> %115, i64 0, !dbg !45
  %117 = fadd float %99, %116, !dbg !46
  %118 = extractelement <2 x float> %106, i64 1, !dbg !47
  %119 = fadd float %108, %118, !dbg !48
  %120 = extractelement <2 x float> %115, i64 1, !dbg !47
  %121 = fadd float %117, %120, !dbg !48
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float 4.000000e+00) #1, !dbg !49
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float 4.000000e+00) #1, !dbg !49
  %124 = fsub float %94, %122, !dbg !41
  %125 = fsub float %97, %123, !dbg !41
  %126 = fmul float %124, %124, !dbg !50
  %127 = fmul float %125, %125, !dbg !50
  %128 = fsub float %95, %122, !dbg !42
  %129 = fsub float %98, %123, !dbg !42
  %130 = fmul float %128, %128, !dbg !51
  %131 = fmul float %129, %129, !dbg !51
  %132 = fadd float %126, %130, !dbg !52
  %133 = fadd float %127, %131, !dbg !52
  %134 = fsub float %107, %122, !dbg !45
  %135 = fsub float %116, %123, !dbg !45
  %136 = fmul float %134, %134, !dbg !53
  %137 = fmul float %135, %135, !dbg !53
  %138 = fadd float %136, %132, !dbg !54
  %139 = fadd float %137, %133, !dbg !54
  %140 = fsub float %118, %122, !dbg !47
  %141 = fsub float %120, %123, !dbg !47
  %142 = fmul float %140, %140, !dbg !55
  %143 = fmul float %141, %141, !dbg !55
  %144 = fadd float %142, %138, !dbg !56
  %145 = fadd float %143, %139, !dbg !56
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float 4.000000e+00) #1, !dbg !57
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %145, float 4.000000e+00) #1, !dbg !57
  %148 = sext i32 %11 to i64, !dbg !58
  %149 = getelementptr float, ptr addrspace(1) %2, i64 %148, !dbg !58
  %150 = bitcast float %122 to i32, !dbg !59
  %151 = bitcast float %123 to i32, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %150, i32 %151, ptr addrspace(1) %149, i1 %13) #1, !dbg !59
  %152 = getelementptr float, ptr addrspace(1) %3, i64 %148, !dbg !60
  %153 = bitcast float %146 to i32, !dbg !61
  %154 = bitcast float %147 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %153, i32 %154, ptr addrspace(1) %152, i1 %13) #1, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccaqruzf6cfxidyditcyvk6uj4czkjh4hsj4uchirjzelzdl6jcu.py", directory: "inductor_cache/ca")
!4 = !{ptr @triton_poi_fused_add_mean_pow_sub_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mean_pow_sub_2, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mean_pow_sub_2", linkageName: "triton_poi_fused_add_mean_pow_sub_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 32, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 37, scope: !7)
!19 = !DILocation(line: 27, column: 32, scope: !7)
!20 = !DILocation(line: 27, column: 30, scope: !7)
!21 = !DILocation(line: 27, column: 37, scope: !7)
!22 = !DILocation(line: 28, column: 34, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 34, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 41, scope: !7)
!28 = !DILocation(line: 30, column: 34, scope: !7)
!29 = !DILocation(line: 30, column: 30, scope: !7)
!30 = !DILocation(line: 30, column: 41, scope: !7)
!31 = !DILocation(line: 31, column: 34, scope: !7)
!32 = !DILocation(line: 31, column: 30, scope: !7)
!33 = !DILocation(line: 31, column: 41, scope: !7)
!34 = !DILocation(line: 32, column: 35, scope: !7)
!35 = !DILocation(line: 32, column: 31, scope: !7)
!36 = !DILocation(line: 32, column: 42, scope: !7)
!37 = !DILocation(line: 33, column: 35, scope: !7)
!38 = !DILocation(line: 33, column: 31, scope: !7)
!39 = !DILocation(line: 33, column: 42, scope: !7)
!40 = !DILocation(line: 34, column: 18, scope: !7)
!41 = !DILocation(line: 43, column: 19, scope: !7)
!42 = !DILocation(line: 45, column: 19, scope: !7)
!43 = !DILocation(line: 36, column: 18, scope: !7)
!44 = !DILocation(line: 37, column: 18, scope: !7)
!45 = !DILocation(line: 48, column: 19, scope: !7)
!46 = !DILocation(line: 38, column: 19, scope: !7)
!47 = !DILocation(line: 51, column: 20, scope: !7)
!48 = !DILocation(line: 40, column: 20, scope: !7)
!49 = !DILocation(line: 42, column: 20, scope: !7)
!50 = !DILocation(line: 44, column: 20, scope: !7)
!51 = !DILocation(line: 46, column: 20, scope: !7)
!52 = !DILocation(line: 47, column: 20, scope: !7)
!53 = !DILocation(line: 49, column: 20, scope: !7)
!54 = !DILocation(line: 50, column: 20, scope: !7)
!55 = !DILocation(line: 52, column: 20, scope: !7)
!56 = !DILocation(line: 53, column: 20, scope: !7)
!57 = !DILocation(line: 54, column: 20, scope: !7)
!58 = !DILocation(line: 55, column: 25, scope: !7)
!59 = !DILocation(line: 55, column: 37, scope: !7)
!60 = !DILocation(line: 56, column: 25, scope: !7)
!61 = !DILocation(line: 56, column: 37, scope: !7)
!62 = !DILocation(line: 56, column: 4, scope: !7)
