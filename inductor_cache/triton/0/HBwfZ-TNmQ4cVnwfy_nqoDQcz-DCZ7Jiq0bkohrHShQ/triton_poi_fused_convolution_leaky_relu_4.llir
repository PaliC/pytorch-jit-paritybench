; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_leaky_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 127, !dbg !12
  %11 = or disjoint i32 %10, 128, !dbg !12
  %12 = shl i32 %9, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = shl i32 %9, 3, !dbg !12
  %15 = and i32 %14, 248, !dbg !12
  %16 = shl i32 %9, 2, !dbg !12
  %17 = and i32 %16, 252, !dbg !12
  %18 = or disjoint i32 %8, %10, !dbg !13
  %19 = or disjoint i32 %8, %11, !dbg !13
  %20 = or disjoint i32 %8, %13, !dbg !13
  %21 = or disjoint i32 %8, %15, !dbg !13
  %22 = or disjoint i32 %8, %17, !dbg !13
  %23 = icmp slt i32 %18, 256, !dbg !14
  %24 = icmp slt i32 %19, 256, !dbg !14
  %25 = icmp slt i32 %20, 256, !dbg !14
  %26 = icmp slt i32 %21, 256, !dbg !14
  %27 = icmp slt i32 %22, 256, !dbg !14
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %29 = shl i32 %28, 2, !dbg !16
  %.lobit1 = lshr i32 %9, 5, !dbg !17
  %30 = and i32 %.lobit1, 3, !dbg !17
  %31 = lshr i32 %9, 6, !dbg !17
  %.lobit = and i32 %31, 1, !dbg !17
  %32 = or disjoint i32 %29, %30, !dbg !18
  %33 = or disjoint i32 %29, %.lobit, !dbg !18
  %34 = or disjoint i32 %33, 2, !dbg !18
  %35 = icmp slt i32 %29, 2116, !dbg !19
  %36 = icmp slt i32 %32, 2116, !dbg !19
  %37 = icmp slt i32 %33, 2116, !dbg !19
  %38 = icmp slt i32 %34, 2116, !dbg !19
  %39 = srem i32 %20, 64, !dbg !20
  %.frozen = freeze i32 %21, !dbg !21
  %40 = sdiv i32 %.frozen, 64, !dbg !21
  %41 = mul i32 %40, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %41, !dbg !20
  %.frozen26 = freeze i32 %22, !dbg !21
  %42 = sdiv i32 %.frozen26, 64, !dbg !21
  %43 = mul i32 %42, 64, !dbg !20
  %.decomposed27 = sub i32 %.frozen26, %43, !dbg !20
  %44 = mul i32 %18, 2116, !dbg !22
  %45 = mul i32 %19, 2116, !dbg !22
  %46 = add i32 %44, %29, !dbg !23
  %47 = add i32 %45, %29, !dbg !23
  %48 = sext i32 %46 to i64, !dbg !24
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !24
  %50 = sext i32 %47 to i64, !dbg !24
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !24
  %52 = and i1 %35, %23, !dbg !25
  %53 = and i1 %35, %24, !dbg !25
  %54 = and i1 %26, %36, !dbg !25
  %55 = and i1 %27, %37, !dbg !25
  %56 = and i1 %38, %27, !dbg !25
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %52) #2, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !26
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %53) #2, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !26
  %67 = and i32 %16, 508, !dbg !26
  %68 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !26
  %69 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %69, i1 true) #2, !dbg !26
  %70 = getelementptr inbounds i8, ptr addrspace(3) %68, i32 1040, !dbg !26
  %71 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 true) #2, !dbg !26
  %72 = getelementptr inbounds i8, ptr addrspace(3) %68, i32 2080, !dbg !26
  %73 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %73, i1 true) #2, !dbg !26
  %74 = getelementptr inbounds i8, ptr addrspace(3) %68, i32 3120, !dbg !26
  %75 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 true) #2, !dbg !26
  %76 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !26
  %77 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 true) #2, !dbg !26
  %78 = getelementptr inbounds i8, ptr addrspace(3) %68, i32 1552, !dbg !26
  %79 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #2, !dbg !26
  %80 = getelementptr inbounds i8, ptr addrspace(3) %68, i32 2592, !dbg !26
  %81 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 true) #2, !dbg !26
  %82 = getelementptr inbounds i8, ptr addrspace(3) %68, i32 3632, !dbg !26
  %83 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %84 = lshr i32 %16, 6, !dbg !26
  %85 = and i32 %84, 4, !dbg !26
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !26
  %87 = getelementptr float, ptr addrspace(3) %86, i32 %67, !dbg !26
  %88 = or disjoint i32 %67, 512, !dbg !26
  %89 = lshr i32 %88, 6, !dbg !26
  %90 = and i32 %89, 12, !dbg !26
  %91 = getelementptr float, ptr addrspace(3) @global_smem, i32 %90, !dbg !26
  %92 = getelementptr float, ptr addrspace(3) %91, i32 %88, !dbg !26
  %93 = getelementptr inbounds i8, ptr addrspace(3) %68, i32 1032, !dbg !26
  %94 = getelementptr inbounds i8, ptr addrspace(3) %68, i32 2064, !dbg !26
  %95 = getelementptr inbounds i8, ptr addrspace(3) %68, i32 3096, !dbg !26
  %96 = getelementptr inbounds i8, ptr addrspace(3) %68, i32 1544, !dbg !26
  %97 = getelementptr inbounds i8, ptr addrspace(3) %68, i32 2576, !dbg !26
  %98 = getelementptr inbounds i8, ptr addrspace(3) %68, i32 3608, !dbg !26
  %99 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !26
  %100 = getelementptr inbounds i8, ptr addrspace(3) %99, i32 1032, !dbg !26
  %101 = getelementptr inbounds i8, ptr addrspace(3) %99, i32 2064, !dbg !26
  %102 = getelementptr inbounds i8, ptr addrspace(3) %99, i32 3096, !dbg !26
  %103 = sext i32 %39 to i64, !dbg !27
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !27
  %105 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !28
  %106 = load <4 x float>, ptr addrspace(3) %87, align 16, !dbg !26
  %107 = shufflevector <4 x float> %106, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !26
  %108 = load <4 x float>, ptr addrspace(3) %92, align 16, !dbg !26
  %109 = shufflevector <4 x float> %108, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %69, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %71, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %73, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %75, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %79, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %81, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %83, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %110 = load <2 x float>, ptr addrspace(3) %99, align 8, !dbg !26
  %111 = shufflevector <2 x float> %110, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !26
  %112 = load <2 x float>, ptr addrspace(3) %100, align 8, !dbg !26
  %113 = shufflevector <2 x float> %112, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !26
  %114 = load <2 x float>, ptr addrspace(3) %101, align 8, !dbg !26
  %115 = shufflevector <2 x float> %114, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !26
  %116 = load <2 x float>, ptr addrspace(3) %102, align 8, !dbg !26
  %117 = shufflevector <2 x float> %116, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !26
  %118 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %104, i1 %25) #2, !dbg !29
  %119 = extractvalue { i32, i32 } %118, 0, !dbg !29
  %120 = extractvalue { i32, i32 } %118, 1, !dbg !29
  %121 = insertelement <2 x i32> poison, i32 %120, i64 0, !dbg !29
  %122 = insertelement <2 x i32> %121, i32 %119, i64 1, !dbg !29
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !29
  %124 = shufflevector <2 x float> %123, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %99, i32 %119, i32 %120, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %125 = load <4 x float>, ptr addrspace(3) %105, align 16, !dbg !28
  %126 = shufflevector <4 x float> %125, <4 x float> poison, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 3, i32 2, i32 1, i32 0>, !dbg !28
  %127 = shufflevector <4 x float> %109, <4 x float> poison, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %128 = shufflevector <4 x float> %107, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %129 = shufflevector <16 x float> %127, <16 x float> %128, <16 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>, !dbg !30
  %130 = shufflevector <2 x float> %117, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %131 = shufflevector <16 x float> %130, <16 x float> %129, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !30
  %132 = shufflevector <2 x float> %115, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %133 = shufflevector <16 x float> %131, <16 x float> %132, <16 x i32> <i32 0, i32 1, i32 16, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !30
  %134 = shufflevector <2 x float> %113, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %135 = shufflevector <16 x float> %133, <16 x float> %134, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 poison, i32 poison, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !30
  %136 = shufflevector <2 x float> %111, <2 x float> poison, <16 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %137 = shufflevector <16 x float> %135, <16 x float> %136, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 17, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !30
  %138 = shufflevector <8 x float> %124, <8 x float> %126, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !30
  %139 = fadd <16 x float> %137, %138, !dbg !30
  %140 = fcmp ogt <16 x float> %139, zeroinitializer, !dbg !31
  %141 = extractelement <16 x float> %139, i64 15, !dbg !28
  %142 = fmul float %141, 0x3F847AE140000000, !dbg !32
  %143 = extractelement <16 x float> %139, i64 14, !dbg !28
  %144 = fmul float %143, 0x3F847AE140000000, !dbg !32
  %145 = extractelement <16 x float> %139, i64 13, !dbg !28
  %146 = fmul float %145, 0x3F847AE140000000, !dbg !32
  %147 = extractelement <16 x float> %139, i64 12, !dbg !28
  %148 = fmul float %147, 0x3F847AE140000000, !dbg !32
  %149 = extractelement <16 x float> %139, i64 11, !dbg !28
  %150 = fmul float %149, 0x3F847AE140000000, !dbg !32
  %151 = extractelement <16 x float> %139, i64 10, !dbg !28
  %152 = fmul float %151, 0x3F847AE140000000, !dbg !32
  %153 = extractelement <16 x float> %139, i64 9, !dbg !28
  %154 = fmul float %153, 0x3F847AE140000000, !dbg !32
  %155 = extractelement <16 x float> %139, i64 8, !dbg !28
  %156 = fmul float %155, 0x3F847AE140000000, !dbg !32
  %157 = extractelement <16 x i1> %140, i64 15, !dbg !28
  %158 = select i1 %157, float %141, float %142, !dbg !28
  %159 = extractelement <16 x i1> %140, i64 14, !dbg !28
  %160 = select i1 %159, float %143, float %144, !dbg !28
  %161 = extractelement <16 x i1> %140, i64 13, !dbg !28
  %162 = select i1 %161, float %145, float %146, !dbg !28
  %163 = extractelement <16 x i1> %140, i64 12, !dbg !28
  %164 = select i1 %163, float %147, float %148, !dbg !28
  %165 = extractelement <16 x i1> %140, i64 11, !dbg !28
  %166 = select i1 %165, float %149, float %150, !dbg !28
  %167 = extractelement <16 x i1> %140, i64 10, !dbg !28
  %168 = select i1 %167, float %151, float %152, !dbg !28
  %169 = extractelement <16 x i1> %140, i64 9, !dbg !28
  %170 = select i1 %169, float %153, float %154, !dbg !28
  %171 = extractelement <16 x i1> %140, i64 8, !dbg !28
  %172 = select i1 %171, float %155, float %156, !dbg !28
  %173 = shl i32 %32, 6, !dbg !33
  %174 = shl i32 %33, 6, !dbg !33
  %175 = shl i32 %34, 6, !dbg !33
  %176 = add i32 %173, %.decomposed, !dbg !34
  %177 = mul i32 %40, 135424, !dbg !35
  %178 = mul i32 %42, 135424, !dbg !35
  %179 = add i32 %176, %177, !dbg !36
  %180 = add i32 %178, %.decomposed27, !dbg !34
  %181 = add i32 %180, %174, !dbg !36
  %182 = add i32 %180, %175, !dbg !36
  %183 = sext i32 %179 to i64, !dbg !37
  %184 = getelementptr i1, ptr addrspace(1) %2, i64 %183, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %185 = extractelement <16 x i1> %140, i64 7, !dbg !38
  %186 = zext i1 %185 to i8, !dbg !38
  %187 = extractelement <16 x i1> %140, i64 6, !dbg !38
  %188 = zext i1 %187 to i8, !dbg !38
  %189 = extractelement <16 x i1> %140, i64 5, !dbg !38
  %190 = zext i1 %189 to i8, !dbg !38
  %191 = extractelement <16 x i1> %140, i64 4, !dbg !38
  %192 = zext i1 %191 to i8, !dbg !38
  %193 = extractelement <16 x i1> %140, i64 3, !dbg !38
  %194 = zext i1 %193 to i8, !dbg !38
  %195 = extractelement <16 x i1> %140, i64 2, !dbg !38
  %196 = zext i1 %195 to i8, !dbg !38
  %197 = extractelement <16 x i1> %140, i64 1, !dbg !38
  %198 = zext i1 %197 to i8, !dbg !38
  %199 = extractelement <16 x i1> %140, i64 0, !dbg !38
  %200 = zext i1 %199 to i8, !dbg !38
  %201 = and i32 %14, 1016, !dbg !38
  %202 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %13, !dbg !38
  tail call void asm sideeffect "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %202, i8 %186, i8 %188, i1 true) #2, !dbg !38
  %203 = getelementptr inbounds i8, ptr addrspace(3) %202, i32 264, !dbg !38
  tail call void asm sideeffect "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %203, i8 %190, i8 %192, i1 true) #2, !dbg !38
  %204 = getelementptr inbounds i8, ptr addrspace(3) %202, i32 528, !dbg !38
  tail call void asm sideeffect "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %204, i8 %194, i8 %196, i1 true) #2, !dbg !38
  %205 = getelementptr inbounds i8, ptr addrspace(3) %202, i32 792, !dbg !38
  tail call void asm sideeffect "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %205, i8 %198, i8 %200, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %206 = lshr i32 %14, 5, !dbg !38
  %207 = and i32 %206, 24, !dbg !38
  %208 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %207, !dbg !38
  %209 = getelementptr inbounds i8, ptr addrspace(3) %208, i32 %201, !dbg !38
  %210 = load <2 x i32>, ptr addrspace(3) %209, align 8, !dbg !38
  %211 = bitcast <2 x i32> %210 to <64 x i1>, !dbg !38
  %212 = extractelement <64 x i1> %211, i64 24, !dbg !38
  %213 = extractelement <64 x i1> %211, i64 56, !dbg !38
  %214 = bitcast <2 x i32> %210 to <8 x i8>, !dbg !38
  %215 = extractelement <8 x i8> %214, i64 0, !dbg !38
  %216 = and i8 %215, 1, !dbg !38
  %217 = shufflevector <8 x i8> %214, <8 x i8> poison, <2 x i32> <i32 1, i32 2>, !dbg !38
  %218 = and <2 x i8> %217, splat (i8 1), !dbg !38
  %219 = zext i1 %212 to i8, !dbg !38
  %220 = extractelement <8 x i8> %214, i64 4, !dbg !38
  %221 = and i8 %220, 1, !dbg !38
  %222 = shufflevector <8 x i8> %214, <8 x i8> poison, <2 x i32> <i32 5, i32 6>, !dbg !38
  %223 = and <2 x i8> %222, splat (i8 1), !dbg !38
  %224 = zext i1 %213 to i8, !dbg !38
  %225 = insertelement <4 x i8> poison, i8 %216, i64 0, !dbg !38
  %226 = shufflevector <2 x i8> %218, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !38
  %227 = shufflevector <4 x i8> %225, <4 x i8> %226, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !38
  %228 = insertelement <4 x i8> %227, i8 %219, i64 3, !dbg !38
  %229 = bitcast <4 x i8> %228 to i32, !dbg !38
  %230 = insertelement <4 x i8> poison, i8 %221, i64 0, !dbg !38
  %231 = shufflevector <2 x i8> %223, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !38
  %232 = shufflevector <4 x i8> %230, <4 x i8> %231, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !38
  %233 = insertelement <4 x i8> %232, i8 %224, i64 3, !dbg !38
  %234 = bitcast <4 x i8> %233 to i32, !dbg !38
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %229, i32 %234, ptr addrspace(1) %184, i1 %54) #2, !dbg !38
  %235 = sext i32 %181 to i64, !dbg !39
  %236 = getelementptr float, ptr addrspace(1) %3, i64 %235, !dbg !39
  %237 = sext i32 %182 to i64, !dbg !39
  %238 = getelementptr float, ptr addrspace(1) %3, i64 %237, !dbg !39
  %239 = bitcast float %158 to i32, !dbg !40
  %240 = bitcast float %160 to i32, !dbg !40
  %241 = bitcast float %162 to i32, !dbg !40
  %242 = bitcast float %164 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %239, i32 %240, i32 %241, i32 %242, ptr addrspace(1) %236, i1 %55) #2, !dbg !40
  %243 = bitcast float %166 to i32, !dbg !40
  %244 = bitcast float %168 to i32, !dbg !40
  %245 = bitcast float %170 to i32, !dbg !40
  %246 = bitcast float %172 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %243, i32 %244, i32 %245, i32 %246, ptr addrspace(1) %238, i1 %56) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm46eun44r2txrc2b4j3kzsp2qgf22imegf4vmicbfgdsczfx4ns.py", directory: "inductor_cache/m4")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_4", linkageName: "triton_poi_fused_convolution_leaky_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 40, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 53, scope: !7)
!26 = !DILocation(line: 32, column: 45, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 39, column: 32, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 33, scope: !7)
!34 = !DILocation(line: 40, column: 30, scope: !7)
!35 = !DILocation(line: 40, column: 45, scope: !7)
!36 = !DILocation(line: 40, column: 38, scope: !7)
!37 = !DILocation(line: 40, column: 25, scope: !7)
!38 = !DILocation(line: 40, column: 56, scope: !7)
!39 = !DILocation(line: 41, column: 25, scope: !7)
!40 = !DILocation(line: 41, column: 56, scope: !7)
!41 = !DILocation(line: 41, column: 4, scope: !7)
