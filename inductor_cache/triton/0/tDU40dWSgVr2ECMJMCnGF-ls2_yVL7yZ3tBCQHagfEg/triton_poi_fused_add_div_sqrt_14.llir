; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_sqrt_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 60, !dbg !12
  %.lobit1 = lshr i32 %8, 6, !dbg !12
  %11 = and i32 %.lobit1, 3, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %13, 8, !dbg !13
  %16 = or disjoint i32 %13, 12, !dbg !13
  %17 = or disjoint i32 %13, 16, !dbg !13
  %18 = or disjoint i32 %13, 20, !dbg !13
  %19 = or disjoint i32 %13, 24, !dbg !13
  %20 = or disjoint i32 %13, 28, !dbg !13
  %21 = or disjoint i32 %13, 32, !dbg !13
  %22 = or disjoint i32 %13, 36, !dbg !13
  %23 = or disjoint i32 %13, 40, !dbg !13
  %24 = or disjoint i32 %13, 44, !dbg !13
  %25 = or disjoint i32 %13, 48, !dbg !13
  %26 = or disjoint i32 %13, 52, !dbg !13
  %27 = or disjoint i32 %13, 56, !dbg !13
  %28 = or disjoint i32 %13, 60, !dbg !13
  %29 = icmp slt i32 %12, 256, !dbg !14
  %30 = icmp slt i32 %13, 256, !dbg !14
  %31 = icmp slt i32 %14, 256, !dbg !14
  %32 = icmp slt i32 %15, 256, !dbg !14
  %33 = icmp slt i32 %16, 256, !dbg !14
  %34 = icmp slt i32 %17, 256, !dbg !14
  %35 = icmp slt i32 %18, 256, !dbg !14
  %36 = icmp slt i32 %19, 256, !dbg !14
  %37 = icmp slt i32 %20, 256, !dbg !14
  %38 = icmp slt i32 %21, 256, !dbg !14
  %39 = icmp slt i32 %22, 256, !dbg !14
  %40 = icmp slt i32 %23, 256, !dbg !14
  %41 = icmp slt i32 %24, 256, !dbg !14
  %42 = icmp slt i32 %25, 256, !dbg !14
  %43 = icmp slt i32 %26, 256, !dbg !14
  %44 = icmp slt i32 %27, 256, !dbg !14
  %45 = icmp slt i32 %28, 256, !dbg !14
  %46 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %47 = shl i32 %46, 6, !dbg !16
  %48 = lshr i32 %8, 4, !dbg !17
  %49 = and i32 %48, 15, !dbg !17
  %50 = and i32 %8, 63, !dbg !17
  %51 = or disjoint i32 %47, %49, !dbg !18
  %52 = or disjoint i32 %51, 16, !dbg !18
  %53 = or disjoint i32 %51, 32, !dbg !18
  %54 = or disjoint i32 %51, 48, !dbg !18
  %55 = or disjoint i32 %47, %50, !dbg !18
  %56 = icmp slt i32 %51, 961, !dbg !19
  %57 = icmp slt i32 %52, 961, !dbg !19
  %58 = icmp slt i32 %53, 961, !dbg !19
  %59 = icmp slt i32 %54, 961, !dbg !19
  %60 = icmp slt i32 %55, 961, !dbg !19
  %.frozen = freeze i32 %12, !dbg !20
  %61 = sdiv i32 %.frozen, 64, !dbg !20
  %62 = mul i32 %61, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %62, !dbg !21
  %63 = sdiv i32 %13, 64, !dbg !20
  %64 = sdiv i32 %14, 64, !dbg !20
  %65 = sdiv i32 %15, 64, !dbg !20
  %66 = sdiv i32 %16, 64, !dbg !20
  %67 = sdiv i32 %17, 64, !dbg !20
  %68 = sdiv i32 %18, 64, !dbg !20
  %69 = sdiv i32 %19, 64, !dbg !20
  %70 = sdiv i32 %20, 64, !dbg !20
  %71 = sdiv i32 %21, 64, !dbg !20
  %72 = sdiv i32 %22, 64, !dbg !20
  %73 = sdiv i32 %23, 64, !dbg !20
  %74 = sdiv i32 %24, 64, !dbg !20
  %75 = sdiv i32 %25, 64, !dbg !20
  %76 = sdiv i32 %26, 64, !dbg !20
  %77 = sdiv i32 %27, 64, !dbg !20
  %78 = sdiv i32 %28, 64, !dbg !20
  %79 = shl i32 %51, 6, !dbg !22
  %80 = shl i32 %52, 6, !dbg !22
  %81 = shl i32 %53, 6, !dbg !22
  %82 = shl i32 %54, 6, !dbg !22
  %83 = mul i32 %61, 61504, !dbg !23
  %84 = add i32 %83, %.decomposed, !dbg !24
  %85 = add i32 %84, %79, !dbg !25
  %86 = add i32 %84, %80, !dbg !25
  %87 = add i32 %84, %81, !dbg !25
  %88 = add i32 %84, %82, !dbg !25
  %89 = sext i32 %85 to i64, !dbg !26
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !26
  %91 = sext i32 %86 to i64, !dbg !26
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !26
  %93 = sext i32 %87 to i64, !dbg !26
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !26
  %95 = sext i32 %88 to i64, !dbg !26
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !26
  %97 = and i1 %29, %56, !dbg !27
  %98 = and i1 %57, %29, !dbg !27
  %99 = and i1 %58, %29, !dbg !27
  %100 = and i1 %59, %29, !dbg !27
  %101 = and i1 %30, %60, !dbg !27
  %102 = and i1 %31, %60, !dbg !27
  %103 = and i1 %32, %60, !dbg !27
  %104 = and i1 %33, %60, !dbg !27
  %105 = and i1 %34, %60, !dbg !27
  %106 = and i1 %35, %60, !dbg !27
  %107 = and i1 %36, %60, !dbg !27
  %108 = and i1 %37, %60, !dbg !27
  %109 = and i1 %38, %60, !dbg !27
  %110 = and i1 %39, %60, !dbg !27
  %111 = and i1 %40, %60, !dbg !27
  %112 = and i1 %41, %60, !dbg !27
  %113 = and i1 %42, %60, !dbg !27
  %114 = and i1 %43, %60, !dbg !27
  %115 = and i1 %44, %60, !dbg !27
  %116 = and i1 %45, %60, !dbg !27
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %90, i1 %97) #4, !dbg !28
  %118 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !28
  %119 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !28
  %120 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !28
  %121 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !28
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %92, i1 %98) #4, !dbg !28
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !28
  %124 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !28
  %125 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !28
  %126 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !28
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 %99) #4, !dbg !28
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !28
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !28
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !28
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !28
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 %100) #4, !dbg !28
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !28
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !28
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !28
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !28
  %137 = shl i32 %8, 8, !dbg !28
  %138 = and i32 %137, 3840, !dbg !28
  %139 = or disjoint i32 %138, %49, !dbg !28
  %140 = and i32 %8, 255, !dbg !28
  %141 = lshr exact i32 %138, 4, !dbg !28
  %142 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %141, !dbg !28
  %143 = getelementptr float, ptr addrspace(3) %142, i32 %139, !dbg !28
  %144 = insertelement <1 x i32> poison, i32 %118, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %144, i1 true) #4, !dbg !28
  %145 = or disjoint i32 %139, 64, !dbg !28
  %146 = lshr i32 %145, 6, !dbg !28
  %147 = getelementptr float, ptr addrspace(3) @global_smem, i32 %146, !dbg !28
  %148 = getelementptr float, ptr addrspace(3) %147, i32 %145, !dbg !28
  %149 = insertelement <1 x i32> poison, i32 %119, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 true) #4, !dbg !28
  %150 = or disjoint i32 %139, 128, !dbg !28
  %151 = lshr i32 %150, 6, !dbg !28
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i32 %151, !dbg !28
  %153 = getelementptr float, ptr addrspace(3) %152, i32 %150, !dbg !28
  %154 = insertelement <1 x i32> poison, i32 %120, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #4, !dbg !28
  %155 = or disjoint i32 %139, 192, !dbg !28
  %156 = lshr i32 %155, 6, !dbg !28
  %157 = getelementptr float, ptr addrspace(3) @global_smem, i32 %156, !dbg !28
  %158 = getelementptr float, ptr addrspace(3) %157, i32 %155, !dbg !28
  %159 = insertelement <1 x i32> poison, i32 %121, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 true) #4, !dbg !28
  %160 = or disjoint i32 %139, 16, !dbg !28
  %161 = getelementptr float, ptr addrspace(3) %142, i32 %160, !dbg !28
  %162 = insertelement <1 x i32> poison, i32 %123, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %162, i1 true) #4, !dbg !28
  %163 = or disjoint i32 %139, 80, !dbg !28
  %164 = lshr i32 %163, 6, !dbg !28
  %165 = getelementptr float, ptr addrspace(3) @global_smem, i32 %164, !dbg !28
  %166 = getelementptr float, ptr addrspace(3) %165, i32 %163, !dbg !28
  %167 = insertelement <1 x i32> poison, i32 %124, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, <1 x i32> %167, i1 true) #4, !dbg !28
  %168 = or disjoint i32 %139, 144, !dbg !28
  %169 = lshr i32 %168, 6, !dbg !28
  %170 = getelementptr float, ptr addrspace(3) @global_smem, i32 %169, !dbg !28
  %171 = getelementptr float, ptr addrspace(3) %170, i32 %168, !dbg !28
  %172 = insertelement <1 x i32> poison, i32 %125, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %171, <1 x i32> %172, i1 true) #4, !dbg !28
  %173 = or disjoint i32 %139, 208, !dbg !28
  %174 = lshr i32 %173, 6, !dbg !28
  %175 = getelementptr float, ptr addrspace(3) @global_smem, i32 %174, !dbg !28
  %176 = getelementptr float, ptr addrspace(3) %175, i32 %173, !dbg !28
  %177 = insertelement <1 x i32> poison, i32 %126, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %177, i1 true) #4, !dbg !28
  %178 = or disjoint i32 %139, 32, !dbg !28
  %179 = getelementptr float, ptr addrspace(3) %142, i32 %178, !dbg !28
  %180 = insertelement <1 x i32> poison, i32 %128, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #4, !dbg !28
  %181 = or disjoint i32 %139, 96, !dbg !28
  %182 = lshr i32 %181, 6, !dbg !28
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i32 %182, !dbg !28
  %184 = getelementptr float, ptr addrspace(3) %183, i32 %181, !dbg !28
  %185 = insertelement <1 x i32> poison, i32 %129, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %185, i1 true) #4, !dbg !28
  %186 = or disjoint i32 %139, 160, !dbg !28
  %187 = lshr i32 %186, 6, !dbg !28
  %188 = getelementptr float, ptr addrspace(3) @global_smem, i32 %187, !dbg !28
  %189 = getelementptr float, ptr addrspace(3) %188, i32 %186, !dbg !28
  %190 = insertelement <1 x i32> poison, i32 %130, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %189, <1 x i32> %190, i1 true) #4, !dbg !28
  %191 = or disjoint i32 %139, 224, !dbg !28
  %192 = lshr i32 %191, 6, !dbg !28
  %193 = getelementptr float, ptr addrspace(3) @global_smem, i32 %192, !dbg !28
  %194 = getelementptr float, ptr addrspace(3) %193, i32 %191, !dbg !28
  %195 = insertelement <1 x i32> poison, i32 %131, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %195, i1 true) #4, !dbg !28
  %196 = or disjoint i32 %139, 48, !dbg !28
  %197 = getelementptr float, ptr addrspace(3) %142, i32 %196, !dbg !28
  %198 = insertelement <1 x i32> poison, i32 %133, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 true) #4, !dbg !28
  %199 = or disjoint i32 %139, 112, !dbg !28
  %200 = lshr i32 %199, 6, !dbg !28
  %201 = getelementptr float, ptr addrspace(3) @global_smem, i32 %200, !dbg !28
  %202 = getelementptr float, ptr addrspace(3) %201, i32 %199, !dbg !28
  %203 = insertelement <1 x i32> poison, i32 %134, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %203, i1 true) #4, !dbg !28
  %204 = or disjoint i32 %139, 176, !dbg !28
  %205 = lshr i32 %204, 6, !dbg !28
  %206 = getelementptr float, ptr addrspace(3) @global_smem, i32 %205, !dbg !28
  %207 = getelementptr float, ptr addrspace(3) %206, i32 %204, !dbg !28
  %208 = insertelement <1 x i32> poison, i32 %135, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %207, <1 x i32> %208, i1 true) #4, !dbg !28
  %209 = or disjoint i32 %139, 240, !dbg !28
  %210 = lshr i32 %209, 6, !dbg !28
  %211 = getelementptr float, ptr addrspace(3) @global_smem, i32 %210, !dbg !28
  %212 = getelementptr float, ptr addrspace(3) %211, i32 %209, !dbg !28
  %213 = insertelement <1 x i32> poison, i32 %136, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %212, <1 x i32> %213, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %214 = lshr i32 %140, 6, !dbg !28
  %215 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %214, !dbg !28
  %216 = getelementptr inbounds float, ptr addrspace(3) %215, i32 %140, !dbg !28
  %217 = load float, ptr addrspace(3) %216, align 4, !dbg !28
  %218 = or disjoint i32 %140, 256, !dbg !28
  %219 = lshr i32 %218, 6, !dbg !28
  %220 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %219, !dbg !28
  %221 = getelementptr inbounds float, ptr addrspace(3) %220, i32 %218, !dbg !28
  %222 = load float, ptr addrspace(3) %221, align 4, !dbg !28
  %223 = or disjoint i32 %140, 512, !dbg !28
  %224 = lshr i32 %223, 6, !dbg !28
  %225 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %224, !dbg !28
  %226 = getelementptr inbounds float, ptr addrspace(3) %225, i32 %223, !dbg !28
  %227 = load float, ptr addrspace(3) %226, align 4, !dbg !28
  %228 = or disjoint i32 %140, 768, !dbg !28
  %229 = lshr i32 %228, 6, !dbg !28
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %229, !dbg !28
  %231 = getelementptr inbounds float, ptr addrspace(3) %230, i32 %228, !dbg !28
  %232 = load float, ptr addrspace(3) %231, align 4, !dbg !28
  %233 = or disjoint i32 %140, 1024, !dbg !28
  %234 = lshr i32 %233, 6, !dbg !28
  %235 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %234, !dbg !28
  %236 = getelementptr inbounds float, ptr addrspace(3) %235, i32 %233, !dbg !28
  %237 = load float, ptr addrspace(3) %236, align 4, !dbg !28
  %238 = or disjoint i32 %140, 1280, !dbg !28
  %239 = lshr i32 %238, 6, !dbg !28
  %240 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %239, !dbg !28
  %241 = getelementptr inbounds float, ptr addrspace(3) %240, i32 %238, !dbg !28
  %242 = load float, ptr addrspace(3) %241, align 4, !dbg !28
  %243 = or disjoint i32 %140, 1536, !dbg !28
  %244 = lshr i32 %243, 6, !dbg !28
  %245 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %244, !dbg !28
  %246 = getelementptr inbounds float, ptr addrspace(3) %245, i32 %243, !dbg !28
  %247 = load float, ptr addrspace(3) %246, align 4, !dbg !28
  %248 = or disjoint i32 %140, 1792, !dbg !28
  %249 = lshr i32 %248, 6, !dbg !28
  %250 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %249, !dbg !28
  %251 = getelementptr inbounds float, ptr addrspace(3) %250, i32 %248, !dbg !28
  %252 = load float, ptr addrspace(3) %251, align 4, !dbg !28
  %253 = or disjoint i32 %140, 2048, !dbg !28
  %254 = lshr i32 %253, 6, !dbg !28
  %255 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %254, !dbg !28
  %256 = getelementptr inbounds float, ptr addrspace(3) %255, i32 %253, !dbg !28
  %257 = load float, ptr addrspace(3) %256, align 4, !dbg !28
  %258 = or disjoint i32 %140, 2304, !dbg !28
  %259 = lshr i32 %258, 6, !dbg !28
  %260 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %259, !dbg !28
  %261 = getelementptr inbounds float, ptr addrspace(3) %260, i32 %258, !dbg !28
  %262 = load float, ptr addrspace(3) %261, align 4, !dbg !28
  %263 = or disjoint i32 %140, 2560, !dbg !28
  %264 = lshr i32 %263, 6, !dbg !28
  %265 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %264, !dbg !28
  %266 = getelementptr inbounds float, ptr addrspace(3) %265, i32 %263, !dbg !28
  %267 = load float, ptr addrspace(3) %266, align 4, !dbg !28
  %268 = or disjoint i32 %140, 2816, !dbg !28
  %269 = lshr i32 %268, 6, !dbg !28
  %270 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %269, !dbg !28
  %271 = getelementptr inbounds float, ptr addrspace(3) %270, i32 %268, !dbg !28
  %272 = load float, ptr addrspace(3) %271, align 4, !dbg !28
  %273 = or disjoint i32 %140, 3072, !dbg !28
  %274 = lshr i32 %273, 6, !dbg !28
  %275 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %274, !dbg !28
  %276 = getelementptr inbounds float, ptr addrspace(3) %275, i32 %273, !dbg !28
  %277 = load float, ptr addrspace(3) %276, align 4, !dbg !28
  %278 = or disjoint i32 %140, 3328, !dbg !28
  %279 = lshr i32 %278, 6, !dbg !28
  %280 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %279, !dbg !28
  %281 = getelementptr inbounds float, ptr addrspace(3) %280, i32 %278, !dbg !28
  %282 = load float, ptr addrspace(3) %281, align 4, !dbg !28
  %283 = or disjoint i32 %140, 3584, !dbg !28
  %284 = lshr i32 %283, 6, !dbg !28
  %285 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %284, !dbg !28
  %286 = getelementptr inbounds float, ptr addrspace(3) %285, i32 %283, !dbg !28
  %287 = load float, ptr addrspace(3) %286, align 4, !dbg !28
  %288 = or disjoint i32 %140, 3840, !dbg !28
  %289 = lshr i32 %288, 6, !dbg !28
  %290 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %289, !dbg !28
  %291 = getelementptr inbounds float, ptr addrspace(3) %290, i32 %288, !dbg !28
  %292 = load float, ptr addrspace(3) %291, align 4, !dbg !28
  %293 = mul i32 %63, 961, !dbg !29
  %294 = mul i32 %64, 961, !dbg !29
  %295 = mul i32 %65, 961, !dbg !29
  %296 = mul i32 %66, 961, !dbg !29
  %297 = mul i32 %67, 961, !dbg !29
  %298 = mul i32 %68, 961, !dbg !29
  %299 = mul i32 %69, 961, !dbg !29
  %300 = mul i32 %70, 961, !dbg !29
  %301 = mul i32 %71, 961, !dbg !29
  %302 = mul i32 %72, 961, !dbg !29
  %303 = mul i32 %73, 961, !dbg !29
  %304 = mul i32 %74, 961, !dbg !29
  %305 = mul i32 %75, 961, !dbg !29
  %306 = mul i32 %76, 961, !dbg !29
  %307 = mul i32 %77, 961, !dbg !29
  %308 = mul i32 %78, 961, !dbg !29
  %309 = add i32 %293, %55, !dbg !30
  %310 = add i32 %55, %294, !dbg !30
  %311 = add i32 %55, %295, !dbg !30
  %312 = add i32 %55, %296, !dbg !30
  %313 = add i32 %55, %297, !dbg !30
  %314 = add i32 %55, %298, !dbg !30
  %315 = add i32 %55, %299, !dbg !30
  %316 = add i32 %55, %300, !dbg !30
  %317 = add i32 %55, %301, !dbg !30
  %318 = add i32 %55, %302, !dbg !30
  %319 = add i32 %55, %303, !dbg !30
  %320 = add i32 %55, %304, !dbg !30
  %321 = add i32 %55, %305, !dbg !30
  %322 = add i32 %55, %306, !dbg !30
  %323 = add i32 %55, %307, !dbg !30
  %324 = add i32 %55, %308, !dbg !30
  %325 = sext i32 %309 to i64, !dbg !31
  %326 = getelementptr float, ptr addrspace(1) %1, i64 %325, !dbg !31
  %327 = sext i32 %310 to i64, !dbg !31
  %328 = getelementptr float, ptr addrspace(1) %1, i64 %327, !dbg !31
  %329 = sext i32 %311 to i64, !dbg !31
  %330 = getelementptr float, ptr addrspace(1) %1, i64 %329, !dbg !31
  %331 = sext i32 %312 to i64, !dbg !31
  %332 = getelementptr float, ptr addrspace(1) %1, i64 %331, !dbg !31
  %333 = sext i32 %313 to i64, !dbg !31
  %334 = getelementptr float, ptr addrspace(1) %1, i64 %333, !dbg !31
  %335 = sext i32 %314 to i64, !dbg !31
  %336 = getelementptr float, ptr addrspace(1) %1, i64 %335, !dbg !31
  %337 = sext i32 %315 to i64, !dbg !31
  %338 = getelementptr float, ptr addrspace(1) %1, i64 %337, !dbg !31
  %339 = sext i32 %316 to i64, !dbg !31
  %340 = getelementptr float, ptr addrspace(1) %1, i64 %339, !dbg !31
  %341 = sext i32 %317 to i64, !dbg !31
  %342 = getelementptr float, ptr addrspace(1) %1, i64 %341, !dbg !31
  %343 = sext i32 %318 to i64, !dbg !31
  %344 = getelementptr float, ptr addrspace(1) %1, i64 %343, !dbg !31
  %345 = sext i32 %319 to i64, !dbg !31
  %346 = getelementptr float, ptr addrspace(1) %1, i64 %345, !dbg !31
  %347 = sext i32 %320 to i64, !dbg !31
  %348 = getelementptr float, ptr addrspace(1) %1, i64 %347, !dbg !31
  %349 = sext i32 %321 to i64, !dbg !31
  %350 = getelementptr float, ptr addrspace(1) %1, i64 %349, !dbg !31
  %351 = sext i32 %322 to i64, !dbg !31
  %352 = getelementptr float, ptr addrspace(1) %1, i64 %351, !dbg !31
  %353 = sext i32 %323 to i64, !dbg !31
  %354 = getelementptr float, ptr addrspace(1) %1, i64 %353, !dbg !31
  %355 = sext i32 %324 to i64, !dbg !31
  %356 = getelementptr float, ptr addrspace(1) %1, i64 %355, !dbg !31
  %357 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %326, i1 %101) #4, !dbg !32
  %358 = bitcast i32 %357 to float, !dbg !32
  %359 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %328, i1 %102) #4, !dbg !32
  %360 = bitcast i32 %359 to float, !dbg !32
  %361 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %330, i1 %103) #4, !dbg !32
  %362 = bitcast i32 %361 to float, !dbg !32
  %363 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %332, i1 %104) #4, !dbg !32
  %364 = bitcast i32 %363 to float, !dbg !32
  %365 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %334, i1 %105) #4, !dbg !32
  %366 = bitcast i32 %365 to float, !dbg !32
  %367 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %336, i1 %106) #4, !dbg !32
  %368 = bitcast i32 %367 to float, !dbg !32
  %369 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %338, i1 %107) #4, !dbg !32
  %370 = bitcast i32 %369 to float, !dbg !32
  %371 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %340, i1 %108) #4, !dbg !32
  %372 = bitcast i32 %371 to float, !dbg !32
  %373 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %342, i1 %109) #4, !dbg !32
  %374 = bitcast i32 %373 to float, !dbg !32
  %375 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %344, i1 %110) #4, !dbg !32
  %376 = bitcast i32 %375 to float, !dbg !32
  %377 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %346, i1 %111) #4, !dbg !32
  %378 = bitcast i32 %377 to float, !dbg !32
  %379 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %348, i1 %112) #4, !dbg !32
  %380 = bitcast i32 %379 to float, !dbg !32
  %381 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %350, i1 %113) #4, !dbg !32
  %382 = bitcast i32 %381 to float, !dbg !32
  %383 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %352, i1 %114) #4, !dbg !32
  %384 = bitcast i32 %383 to float, !dbg !32
  %385 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %354, i1 %115) #4, !dbg !32
  %386 = bitcast i32 %385 to float, !dbg !32
  %387 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %356, i1 %116) #4, !dbg !32
  %388 = bitcast i32 %387 to float, !dbg !32
  %389 = fadd float %358, 0x3E112E0BE0000000, !dbg !33
  %390 = fadd float %360, 0x3E112E0BE0000000, !dbg !33
  %391 = fadd float %362, 0x3E112E0BE0000000, !dbg !33
  %392 = fadd float %364, 0x3E112E0BE0000000, !dbg !33
  %393 = fadd float %366, 0x3E112E0BE0000000, !dbg !33
  %394 = fadd float %368, 0x3E112E0BE0000000, !dbg !33
  %395 = fadd float %370, 0x3E112E0BE0000000, !dbg !33
  %396 = fadd float %372, 0x3E112E0BE0000000, !dbg !33
  %397 = fadd float %374, 0x3E112E0BE0000000, !dbg !33
  %398 = fadd float %376, 0x3E112E0BE0000000, !dbg !33
  %399 = fadd float %378, 0x3E112E0BE0000000, !dbg !33
  %400 = fadd float %380, 0x3E112E0BE0000000, !dbg !33
  %401 = fadd float %382, 0x3E112E0BE0000000, !dbg !33
  %402 = fadd float %384, 0x3E112E0BE0000000, !dbg !33
  %403 = fadd float %386, 0x3E112E0BE0000000, !dbg !33
  %404 = fadd float %388, 0x3E112E0BE0000000, !dbg !33
  %405 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %405, 0, !dbg !34
  %406 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i = icmp eq i32 %406, 0, !dbg !34
  br i1 %.not.i, label %412, label %407, !dbg !34

407:                                              ; preds = %5
  br i1 %.not1.i, label %410, label %408, !dbg !34

408:                                              ; preds = %407
  %409 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %389) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

410:                                              ; preds = %407
  %411 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %389) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

412:                                              ; preds = %5
  br i1 %.not1.i, label %415, label %413, !dbg !34

413:                                              ; preds = %412
  %414 = tail call float @llvm.nvvm.sqrt.rn.f(float %389) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

415:                                              ; preds = %412
  %416 = tail call float @llvm.nvvm.sqrt.approx.f(float %389) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %408, %410, %413, %415
  %.0.i = phi float [ %409, %408 ], [ %411, %410 ], [ %414, %413 ], [ %416, %415 ], !dbg !34
  %417 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i4 = icmp eq i32 %417, 0, !dbg !34
  %418 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i7 = icmp eq i32 %418, 0, !dbg !34
  br i1 %.not.i4, label %424, label %419, !dbg !34

419:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %422, label %420, !dbg !34

420:                                              ; preds = %419
  %421 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %390) #4, !dbg !34
  br label %__nv_sqrtf.exit8, !dbg !34

422:                                              ; preds = %419
  %423 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %390) #4, !dbg !34
  br label %__nv_sqrtf.exit8, !dbg !34

424:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %427, label %425, !dbg !34

425:                                              ; preds = %424
  %426 = tail call float @llvm.nvvm.sqrt.rn.f(float %390) #4, !dbg !34
  br label %__nv_sqrtf.exit8, !dbg !34

427:                                              ; preds = %424
  %428 = tail call float @llvm.nvvm.sqrt.approx.f(float %390) #4, !dbg !34
  br label %__nv_sqrtf.exit8, !dbg !34

__nv_sqrtf.exit8:                                 ; preds = %420, %422, %425, %427
  %.0.i6 = phi float [ %421, %420 ], [ %423, %422 ], [ %426, %425 ], [ %428, %427 ], !dbg !34
  %429 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i9 = icmp eq i32 %429, 0, !dbg !34
  %430 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i12 = icmp eq i32 %430, 0, !dbg !34
  br i1 %.not.i9, label %436, label %431, !dbg !34

431:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %434, label %432, !dbg !34

432:                                              ; preds = %431
  %433 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %391) #4, !dbg !34
  br label %__nv_sqrtf.exit13, !dbg !34

434:                                              ; preds = %431
  %435 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %391) #4, !dbg !34
  br label %__nv_sqrtf.exit13, !dbg !34

436:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %439, label %437, !dbg !34

437:                                              ; preds = %436
  %438 = tail call float @llvm.nvvm.sqrt.rn.f(float %391) #4, !dbg !34
  br label %__nv_sqrtf.exit13, !dbg !34

439:                                              ; preds = %436
  %440 = tail call float @llvm.nvvm.sqrt.approx.f(float %391) #4, !dbg !34
  br label %__nv_sqrtf.exit13, !dbg !34

__nv_sqrtf.exit13:                                ; preds = %432, %434, %437, %439
  %.0.i11 = phi float [ %433, %432 ], [ %435, %434 ], [ %438, %437 ], [ %440, %439 ], !dbg !34
  %441 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i14 = icmp eq i32 %441, 0, !dbg !34
  %442 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i17 = icmp eq i32 %442, 0, !dbg !34
  br i1 %.not.i14, label %448, label %443, !dbg !34

443:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %446, label %444, !dbg !34

444:                                              ; preds = %443
  %445 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %392) #4, !dbg !34
  br label %__nv_sqrtf.exit18, !dbg !34

446:                                              ; preds = %443
  %447 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %392) #4, !dbg !34
  br label %__nv_sqrtf.exit18, !dbg !34

448:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %451, label %449, !dbg !34

449:                                              ; preds = %448
  %450 = tail call float @llvm.nvvm.sqrt.rn.f(float %392) #4, !dbg !34
  br label %__nv_sqrtf.exit18, !dbg !34

451:                                              ; preds = %448
  %452 = tail call float @llvm.nvvm.sqrt.approx.f(float %392) #4, !dbg !34
  br label %__nv_sqrtf.exit18, !dbg !34

__nv_sqrtf.exit18:                                ; preds = %444, %446, %449, %451
  %.0.i16 = phi float [ %445, %444 ], [ %447, %446 ], [ %450, %449 ], [ %452, %451 ], !dbg !34
  %453 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i19 = icmp eq i32 %453, 0, !dbg !34
  %454 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i22 = icmp eq i32 %454, 0, !dbg !34
  br i1 %.not.i19, label %460, label %455, !dbg !34

455:                                              ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %458, label %456, !dbg !34

456:                                              ; preds = %455
  %457 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %393) #4, !dbg !34
  br label %__nv_sqrtf.exit23, !dbg !34

458:                                              ; preds = %455
  %459 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %393) #4, !dbg !34
  br label %__nv_sqrtf.exit23, !dbg !34

460:                                              ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %463, label %461, !dbg !34

461:                                              ; preds = %460
  %462 = tail call float @llvm.nvvm.sqrt.rn.f(float %393) #4, !dbg !34
  br label %__nv_sqrtf.exit23, !dbg !34

463:                                              ; preds = %460
  %464 = tail call float @llvm.nvvm.sqrt.approx.f(float %393) #4, !dbg !34
  br label %__nv_sqrtf.exit23, !dbg !34

__nv_sqrtf.exit23:                                ; preds = %456, %458, %461, %463
  %.0.i21 = phi float [ %457, %456 ], [ %459, %458 ], [ %462, %461 ], [ %464, %463 ], !dbg !34
  %465 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i24 = icmp eq i32 %465, 0, !dbg !34
  %466 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i27 = icmp eq i32 %466, 0, !dbg !34
  br i1 %.not.i24, label %472, label %467, !dbg !34

467:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %470, label %468, !dbg !34

468:                                              ; preds = %467
  %469 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %394) #4, !dbg !34
  br label %__nv_sqrtf.exit28, !dbg !34

470:                                              ; preds = %467
  %471 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %394) #4, !dbg !34
  br label %__nv_sqrtf.exit28, !dbg !34

472:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %475, label %473, !dbg !34

473:                                              ; preds = %472
  %474 = tail call float @llvm.nvvm.sqrt.rn.f(float %394) #4, !dbg !34
  br label %__nv_sqrtf.exit28, !dbg !34

475:                                              ; preds = %472
  %476 = tail call float @llvm.nvvm.sqrt.approx.f(float %394) #4, !dbg !34
  br label %__nv_sqrtf.exit28, !dbg !34

__nv_sqrtf.exit28:                                ; preds = %468, %470, %473, %475
  %.0.i26 = phi float [ %469, %468 ], [ %471, %470 ], [ %474, %473 ], [ %476, %475 ], !dbg !34
  %477 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i29 = icmp eq i32 %477, 0, !dbg !34
  %478 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i32 = icmp eq i32 %478, 0, !dbg !34
  br i1 %.not.i29, label %484, label %479, !dbg !34

479:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %482, label %480, !dbg !34

480:                                              ; preds = %479
  %481 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %395) #4, !dbg !34
  br label %__nv_sqrtf.exit33, !dbg !34

482:                                              ; preds = %479
  %483 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %395) #4, !dbg !34
  br label %__nv_sqrtf.exit33, !dbg !34

484:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %487, label %485, !dbg !34

485:                                              ; preds = %484
  %486 = tail call float @llvm.nvvm.sqrt.rn.f(float %395) #4, !dbg !34
  br label %__nv_sqrtf.exit33, !dbg !34

487:                                              ; preds = %484
  %488 = tail call float @llvm.nvvm.sqrt.approx.f(float %395) #4, !dbg !34
  br label %__nv_sqrtf.exit33, !dbg !34

__nv_sqrtf.exit33:                                ; preds = %480, %482, %485, %487
  %.0.i31 = phi float [ %481, %480 ], [ %483, %482 ], [ %486, %485 ], [ %488, %487 ], !dbg !34
  %489 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i34 = icmp eq i32 %489, 0, !dbg !34
  %490 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i37 = icmp eq i32 %490, 0, !dbg !34
  br i1 %.not.i34, label %496, label %491, !dbg !34

491:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %494, label %492, !dbg !34

492:                                              ; preds = %491
  %493 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %396) #4, !dbg !34
  br label %__nv_sqrtf.exit38, !dbg !34

494:                                              ; preds = %491
  %495 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %396) #4, !dbg !34
  br label %__nv_sqrtf.exit38, !dbg !34

496:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %499, label %497, !dbg !34

497:                                              ; preds = %496
  %498 = tail call float @llvm.nvvm.sqrt.rn.f(float %396) #4, !dbg !34
  br label %__nv_sqrtf.exit38, !dbg !34

499:                                              ; preds = %496
  %500 = tail call float @llvm.nvvm.sqrt.approx.f(float %396) #4, !dbg !34
  br label %__nv_sqrtf.exit38, !dbg !34

__nv_sqrtf.exit38:                                ; preds = %492, %494, %497, %499
  %.0.i36 = phi float [ %493, %492 ], [ %495, %494 ], [ %498, %497 ], [ %500, %499 ], !dbg !34
  %501 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i39 = icmp eq i32 %501, 0, !dbg !34
  %502 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i42 = icmp eq i32 %502, 0, !dbg !34
  br i1 %.not.i39, label %508, label %503, !dbg !34

503:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %506, label %504, !dbg !34

504:                                              ; preds = %503
  %505 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %397) #4, !dbg !34
  br label %__nv_sqrtf.exit43, !dbg !34

506:                                              ; preds = %503
  %507 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %397) #4, !dbg !34
  br label %__nv_sqrtf.exit43, !dbg !34

508:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %511, label %509, !dbg !34

509:                                              ; preds = %508
  %510 = tail call float @llvm.nvvm.sqrt.rn.f(float %397) #4, !dbg !34
  br label %__nv_sqrtf.exit43, !dbg !34

511:                                              ; preds = %508
  %512 = tail call float @llvm.nvvm.sqrt.approx.f(float %397) #4, !dbg !34
  br label %__nv_sqrtf.exit43, !dbg !34

__nv_sqrtf.exit43:                                ; preds = %504, %506, %509, %511
  %.0.i41 = phi float [ %505, %504 ], [ %507, %506 ], [ %510, %509 ], [ %512, %511 ], !dbg !34
  %513 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i44 = icmp eq i32 %513, 0, !dbg !34
  %514 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i47 = icmp eq i32 %514, 0, !dbg !34
  br i1 %.not.i44, label %520, label %515, !dbg !34

515:                                              ; preds = %__nv_sqrtf.exit43
  br i1 %.not1.i47, label %518, label %516, !dbg !34

516:                                              ; preds = %515
  %517 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %398) #4, !dbg !34
  br label %__nv_sqrtf.exit48, !dbg !34

518:                                              ; preds = %515
  %519 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %398) #4, !dbg !34
  br label %__nv_sqrtf.exit48, !dbg !34

520:                                              ; preds = %__nv_sqrtf.exit43
  br i1 %.not1.i47, label %523, label %521, !dbg !34

521:                                              ; preds = %520
  %522 = tail call float @llvm.nvvm.sqrt.rn.f(float %398) #4, !dbg !34
  br label %__nv_sqrtf.exit48, !dbg !34

523:                                              ; preds = %520
  %524 = tail call float @llvm.nvvm.sqrt.approx.f(float %398) #4, !dbg !34
  br label %__nv_sqrtf.exit48, !dbg !34

__nv_sqrtf.exit48:                                ; preds = %516, %518, %521, %523
  %.0.i46 = phi float [ %517, %516 ], [ %519, %518 ], [ %522, %521 ], [ %524, %523 ], !dbg !34
  %525 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i49 = icmp eq i32 %525, 0, !dbg !34
  %526 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i52 = icmp eq i32 %526, 0, !dbg !34
  br i1 %.not.i49, label %532, label %527, !dbg !34

527:                                              ; preds = %__nv_sqrtf.exit48
  br i1 %.not1.i52, label %530, label %528, !dbg !34

528:                                              ; preds = %527
  %529 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %399) #4, !dbg !34
  br label %__nv_sqrtf.exit53, !dbg !34

530:                                              ; preds = %527
  %531 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %399) #4, !dbg !34
  br label %__nv_sqrtf.exit53, !dbg !34

532:                                              ; preds = %__nv_sqrtf.exit48
  br i1 %.not1.i52, label %535, label %533, !dbg !34

533:                                              ; preds = %532
  %534 = tail call float @llvm.nvvm.sqrt.rn.f(float %399) #4, !dbg !34
  br label %__nv_sqrtf.exit53, !dbg !34

535:                                              ; preds = %532
  %536 = tail call float @llvm.nvvm.sqrt.approx.f(float %399) #4, !dbg !34
  br label %__nv_sqrtf.exit53, !dbg !34

__nv_sqrtf.exit53:                                ; preds = %528, %530, %533, %535
  %.0.i51 = phi float [ %529, %528 ], [ %531, %530 ], [ %534, %533 ], [ %536, %535 ], !dbg !34
  %537 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i54 = icmp eq i32 %537, 0, !dbg !34
  %538 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i57 = icmp eq i32 %538, 0, !dbg !34
  br i1 %.not.i54, label %544, label %539, !dbg !34

539:                                              ; preds = %__nv_sqrtf.exit53
  br i1 %.not1.i57, label %542, label %540, !dbg !34

540:                                              ; preds = %539
  %541 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %400) #4, !dbg !34
  br label %__nv_sqrtf.exit58, !dbg !34

542:                                              ; preds = %539
  %543 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %400) #4, !dbg !34
  br label %__nv_sqrtf.exit58, !dbg !34

544:                                              ; preds = %__nv_sqrtf.exit53
  br i1 %.not1.i57, label %547, label %545, !dbg !34

545:                                              ; preds = %544
  %546 = tail call float @llvm.nvvm.sqrt.rn.f(float %400) #4, !dbg !34
  br label %__nv_sqrtf.exit58, !dbg !34

547:                                              ; preds = %544
  %548 = tail call float @llvm.nvvm.sqrt.approx.f(float %400) #4, !dbg !34
  br label %__nv_sqrtf.exit58, !dbg !34

__nv_sqrtf.exit58:                                ; preds = %540, %542, %545, %547
  %.0.i56 = phi float [ %541, %540 ], [ %543, %542 ], [ %546, %545 ], [ %548, %547 ], !dbg !34
  %549 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i59 = icmp eq i32 %549, 0, !dbg !34
  %550 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i62 = icmp eq i32 %550, 0, !dbg !34
  br i1 %.not.i59, label %556, label %551, !dbg !34

551:                                              ; preds = %__nv_sqrtf.exit58
  br i1 %.not1.i62, label %554, label %552, !dbg !34

552:                                              ; preds = %551
  %553 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %401) #4, !dbg !34
  br label %__nv_sqrtf.exit63, !dbg !34

554:                                              ; preds = %551
  %555 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %401) #4, !dbg !34
  br label %__nv_sqrtf.exit63, !dbg !34

556:                                              ; preds = %__nv_sqrtf.exit58
  br i1 %.not1.i62, label %559, label %557, !dbg !34

557:                                              ; preds = %556
  %558 = tail call float @llvm.nvvm.sqrt.rn.f(float %401) #4, !dbg !34
  br label %__nv_sqrtf.exit63, !dbg !34

559:                                              ; preds = %556
  %560 = tail call float @llvm.nvvm.sqrt.approx.f(float %401) #4, !dbg !34
  br label %__nv_sqrtf.exit63, !dbg !34

__nv_sqrtf.exit63:                                ; preds = %552, %554, %557, %559
  %.0.i61 = phi float [ %553, %552 ], [ %555, %554 ], [ %558, %557 ], [ %560, %559 ], !dbg !34
  %561 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i64 = icmp eq i32 %561, 0, !dbg !34
  %562 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i67 = icmp eq i32 %562, 0, !dbg !34
  br i1 %.not.i64, label %568, label %563, !dbg !34

563:                                              ; preds = %__nv_sqrtf.exit63
  br i1 %.not1.i67, label %566, label %564, !dbg !34

564:                                              ; preds = %563
  %565 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %402) #4, !dbg !34
  br label %__nv_sqrtf.exit68, !dbg !34

566:                                              ; preds = %563
  %567 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %402) #4, !dbg !34
  br label %__nv_sqrtf.exit68, !dbg !34

568:                                              ; preds = %__nv_sqrtf.exit63
  br i1 %.not1.i67, label %571, label %569, !dbg !34

569:                                              ; preds = %568
  %570 = tail call float @llvm.nvvm.sqrt.rn.f(float %402) #4, !dbg !34
  br label %__nv_sqrtf.exit68, !dbg !34

571:                                              ; preds = %568
  %572 = tail call float @llvm.nvvm.sqrt.approx.f(float %402) #4, !dbg !34
  br label %__nv_sqrtf.exit68, !dbg !34

__nv_sqrtf.exit68:                                ; preds = %564, %566, %569, %571
  %.0.i66 = phi float [ %565, %564 ], [ %567, %566 ], [ %570, %569 ], [ %572, %571 ], !dbg !34
  %573 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i69 = icmp eq i32 %573, 0, !dbg !34
  %574 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i72 = icmp eq i32 %574, 0, !dbg !34
  br i1 %.not.i69, label %580, label %575, !dbg !34

575:                                              ; preds = %__nv_sqrtf.exit68
  br i1 %.not1.i72, label %578, label %576, !dbg !34

576:                                              ; preds = %575
  %577 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %403) #4, !dbg !34
  br label %__nv_sqrtf.exit73, !dbg !34

578:                                              ; preds = %575
  %579 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %403) #4, !dbg !34
  br label %__nv_sqrtf.exit73, !dbg !34

580:                                              ; preds = %__nv_sqrtf.exit68
  br i1 %.not1.i72, label %583, label %581, !dbg !34

581:                                              ; preds = %580
  %582 = tail call float @llvm.nvvm.sqrt.rn.f(float %403) #4, !dbg !34
  br label %__nv_sqrtf.exit73, !dbg !34

583:                                              ; preds = %580
  %584 = tail call float @llvm.nvvm.sqrt.approx.f(float %403) #4, !dbg !34
  br label %__nv_sqrtf.exit73, !dbg !34

__nv_sqrtf.exit73:                                ; preds = %576, %578, %581, %583
  %.0.i71 = phi float [ %577, %576 ], [ %579, %578 ], [ %582, %581 ], [ %584, %583 ], !dbg !34
  %585 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i74 = icmp eq i32 %585, 0, !dbg !34
  %586 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i77 = icmp eq i32 %586, 0, !dbg !34
  br i1 %.not.i74, label %592, label %587, !dbg !34

587:                                              ; preds = %__nv_sqrtf.exit73
  br i1 %.not1.i77, label %590, label %588, !dbg !34

588:                                              ; preds = %587
  %589 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %404) #4, !dbg !34
  br label %__nv_sqrtf.exit78, !dbg !34

590:                                              ; preds = %587
  %591 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %404) #4, !dbg !34
  br label %__nv_sqrtf.exit78, !dbg !34

592:                                              ; preds = %__nv_sqrtf.exit73
  br i1 %.not1.i77, label %595, label %593, !dbg !34

593:                                              ; preds = %592
  %594 = tail call float @llvm.nvvm.sqrt.rn.f(float %404) #4, !dbg !34
  br label %__nv_sqrtf.exit78, !dbg !34

595:                                              ; preds = %592
  %596 = tail call float @llvm.nvvm.sqrt.approx.f(float %404) #4, !dbg !34
  br label %__nv_sqrtf.exit78, !dbg !34

__nv_sqrtf.exit78:                                ; preds = %588, %590, %593, %595
  %.0.i76 = phi float [ %589, %588 ], [ %591, %590 ], [ %594, %593 ], [ %596, %595 ], !dbg !34
  %597 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !35
  %598 = fadd float %.0.i6, 0x3DDB7CDFE0000000, !dbg !35
  %599 = fadd float %.0.i11, 0x3DDB7CDFE0000000, !dbg !35
  %600 = fadd float %.0.i16, 0x3DDB7CDFE0000000, !dbg !35
  %601 = fadd float %.0.i21, 0x3DDB7CDFE0000000, !dbg !35
  %602 = fadd float %.0.i26, 0x3DDB7CDFE0000000, !dbg !35
  %603 = fadd float %.0.i31, 0x3DDB7CDFE0000000, !dbg !35
  %604 = fadd float %.0.i36, 0x3DDB7CDFE0000000, !dbg !35
  %605 = fadd float %.0.i41, 0x3DDB7CDFE0000000, !dbg !35
  %606 = fadd float %.0.i46, 0x3DDB7CDFE0000000, !dbg !35
  %607 = fadd float %.0.i51, 0x3DDB7CDFE0000000, !dbg !35
  %608 = fadd float %.0.i56, 0x3DDB7CDFE0000000, !dbg !35
  %609 = fadd float %.0.i61, 0x3DDB7CDFE0000000, !dbg !35
  %610 = fadd float %.0.i66, 0x3DDB7CDFE0000000, !dbg !35
  %611 = fadd float %.0.i71, 0x3DDB7CDFE0000000, !dbg !35
  %612 = fadd float %.0.i76, 0x3DDB7CDFE0000000, !dbg !35
  %613 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %217, float %597) #4, !dbg !36
  %614 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %222, float %598) #4, !dbg !36
  %615 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %227, float %599) #4, !dbg !36
  %616 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %232, float %600) #4, !dbg !36
  %617 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %237, float %601) #4, !dbg !36
  %618 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %242, float %602) #4, !dbg !36
  %619 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %247, float %603) #4, !dbg !36
  %620 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %252, float %604) #4, !dbg !36
  %621 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %257, float %605) #4, !dbg !36
  %622 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %262, float %606) #4, !dbg !36
  %623 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %267, float %607) #4, !dbg !36
  %624 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %272, float %608) #4, !dbg !36
  %625 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %277, float %609) #4, !dbg !36
  %626 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %282, float %610) #4, !dbg !36
  %627 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %287, float %611) #4, !dbg !36
  %628 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %292, float %612) #4, !dbg !36
  %629 = mul i32 %13, 961, !dbg !37
  %630 = mul i32 %14, 961, !dbg !37
  %631 = mul i32 %15, 961, !dbg !37
  %632 = mul i32 %16, 961, !dbg !37
  %633 = mul i32 %17, 961, !dbg !37
  %634 = mul i32 %18, 961, !dbg !37
  %635 = mul i32 %19, 961, !dbg !37
  %636 = mul i32 %20, 961, !dbg !37
  %637 = mul i32 %21, 961, !dbg !37
  %638 = mul i32 %22, 961, !dbg !37
  %639 = mul i32 %23, 961, !dbg !37
  %640 = mul i32 %24, 961, !dbg !37
  %641 = mul i32 %25, 961, !dbg !37
  %642 = mul i32 %26, 961, !dbg !37
  %643 = mul i32 %27, 961, !dbg !37
  %644 = mul i32 %28, 961, !dbg !37
  %645 = add i32 %55, %629, !dbg !38
  %646 = add i32 %55, %630, !dbg !38
  %647 = add i32 %55, %631, !dbg !38
  %648 = add i32 %55, %632, !dbg !38
  %649 = add i32 %55, %633, !dbg !38
  %650 = add i32 %55, %634, !dbg !38
  %651 = add i32 %55, %635, !dbg !38
  %652 = add i32 %55, %636, !dbg !38
  %653 = add i32 %55, %637, !dbg !38
  %654 = add i32 %55, %638, !dbg !38
  %655 = add i32 %55, %639, !dbg !38
  %656 = add i32 %55, %640, !dbg !38
  %657 = add i32 %55, %641, !dbg !38
  %658 = add i32 %55, %642, !dbg !38
  %659 = add i32 %55, %643, !dbg !38
  %660 = add i32 %55, %644, !dbg !38
  %661 = sext i32 %645 to i64, !dbg !39
  %662 = getelementptr float, ptr addrspace(1) %2, i64 %661, !dbg !39
  %663 = sext i32 %646 to i64, !dbg !39
  %664 = getelementptr float, ptr addrspace(1) %2, i64 %663, !dbg !39
  %665 = sext i32 %647 to i64, !dbg !39
  %666 = getelementptr float, ptr addrspace(1) %2, i64 %665, !dbg !39
  %667 = sext i32 %648 to i64, !dbg !39
  %668 = getelementptr float, ptr addrspace(1) %2, i64 %667, !dbg !39
  %669 = sext i32 %649 to i64, !dbg !39
  %670 = getelementptr float, ptr addrspace(1) %2, i64 %669, !dbg !39
  %671 = sext i32 %650 to i64, !dbg !39
  %672 = getelementptr float, ptr addrspace(1) %2, i64 %671, !dbg !39
  %673 = sext i32 %651 to i64, !dbg !39
  %674 = getelementptr float, ptr addrspace(1) %2, i64 %673, !dbg !39
  %675 = sext i32 %652 to i64, !dbg !39
  %676 = getelementptr float, ptr addrspace(1) %2, i64 %675, !dbg !39
  %677 = sext i32 %653 to i64, !dbg !39
  %678 = getelementptr float, ptr addrspace(1) %2, i64 %677, !dbg !39
  %679 = sext i32 %654 to i64, !dbg !39
  %680 = getelementptr float, ptr addrspace(1) %2, i64 %679, !dbg !39
  %681 = sext i32 %655 to i64, !dbg !39
  %682 = getelementptr float, ptr addrspace(1) %2, i64 %681, !dbg !39
  %683 = sext i32 %656 to i64, !dbg !39
  %684 = getelementptr float, ptr addrspace(1) %2, i64 %683, !dbg !39
  %685 = sext i32 %657 to i64, !dbg !39
  %686 = getelementptr float, ptr addrspace(1) %2, i64 %685, !dbg !39
  %687 = sext i32 %658 to i64, !dbg !39
  %688 = getelementptr float, ptr addrspace(1) %2, i64 %687, !dbg !39
  %689 = sext i32 %659 to i64, !dbg !39
  %690 = getelementptr float, ptr addrspace(1) %2, i64 %689, !dbg !39
  %691 = sext i32 %660 to i64, !dbg !39
  %692 = getelementptr float, ptr addrspace(1) %2, i64 %691, !dbg !39
  %693 = bitcast float %613 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %693, ptr addrspace(1) %662, i1 %101) #4, !dbg !40
  %694 = bitcast float %614 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %694, ptr addrspace(1) %664, i1 %102) #4, !dbg !40
  %695 = bitcast float %615 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %695, ptr addrspace(1) %666, i1 %103) #4, !dbg !40
  %696 = bitcast float %616 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %696, ptr addrspace(1) %668, i1 %104) #4, !dbg !40
  %697 = bitcast float %617 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %697, ptr addrspace(1) %670, i1 %105) #4, !dbg !40
  %698 = bitcast float %618 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %698, ptr addrspace(1) %672, i1 %106) #4, !dbg !40
  %699 = bitcast float %619 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %699, ptr addrspace(1) %674, i1 %107) #4, !dbg !40
  %700 = bitcast float %620 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %700, ptr addrspace(1) %676, i1 %108) #4, !dbg !40
  %701 = bitcast float %621 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %701, ptr addrspace(1) %678, i1 %109) #4, !dbg !40
  %702 = bitcast float %622 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %702, ptr addrspace(1) %680, i1 %110) #4, !dbg !40
  %703 = bitcast float %623 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %703, ptr addrspace(1) %682, i1 %111) #4, !dbg !40
  %704 = bitcast float %624 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %704, ptr addrspace(1) %684, i1 %112) #4, !dbg !40
  %705 = bitcast float %625 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %705, ptr addrspace(1) %686, i1 %113) #4, !dbg !40
  %706 = bitcast float %626 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %706, ptr addrspace(1) %688, i1 %114) #4, !dbg !40
  %707 = bitcast float %627 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %707, ptr addrspace(1) %690, i1 %115) #4, !dbg !40
  %708 = bitcast float %628 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %708, ptr addrspace(1) %692, i1 %116) #4, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw4ebqrsq2ikwesrt4tjtb2k3y4xpbe7yogrspynmxwobged3he5.py", directory: "inductor_cache/w4")
!4 = !{ptr @triton_poi_fused_add_div_sqrt_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_sqrt_14, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_sqrt_14", linkageName: "triton_poi_fused_add_div_sqrt_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 39, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 44, scope: !7)
!33 = !DILocation(line: 35, column: 18, scope: !7)
!34 = !DILocation(line: 36, column: 26, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 34, scope: !7)
!38 = !DILocation(line: 40, column: 30, scope: !7)
!39 = !DILocation(line: 40, column: 25, scope: !7)
!40 = !DILocation(line: 40, column: 45, scope: !7)
!41 = !DILocation(line: 40, column: 4, scope: !7)
