; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 60, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 1280, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %17 = shl i32 %16, 6, !dbg !16
  %18 = lshr i32 %11, 4, !dbg !17
  %19 = and i32 %18, 15, !dbg !17
  %20 = or disjoint i32 %17, %19, !dbg !18
  %21 = or disjoint i32 %20, 16, !dbg !18
  %22 = or disjoint i32 %20, 32, !dbg !18
  %23 = or disjoint i32 %20, 48, !dbg !18
  %24 = icmp slt i32 %20, 49, !dbg !19
  %25 = icmp slt i32 %21, 49, !dbg !19
  %26 = icmp slt i32 %22, 49, !dbg !19
  %27 = icmp slt i32 %23, 49, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %28 = sdiv i32 %.frozen, 320, !dbg !20
  %29 = mul i32 %28, 320, !dbg !21
  %.decomposed = sub i32 %.frozen, %29, !dbg !21
  %30 = mul i32 %20, 320, !dbg !22
  %31 = mul i32 %21, 320, !dbg !22
  %32 = mul i32 %22, 320, !dbg !22
  %33 = mul i32 %23, 320, !dbg !22
  %34 = mul i32 %28, 15680, !dbg !23
  %35 = add i32 %34, %.decomposed, !dbg !24
  %36 = add i32 %35, %30, !dbg !25
  %37 = add i32 %35, %31, !dbg !25
  %38 = add i32 %35, %32, !dbg !25
  %39 = add i32 %35, %33, !dbg !25
  %40 = sext i32 %36 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !26
  %42 = sext i32 %37 to i64, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !26
  %44 = sext i32 %38 to i64, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !26
  %46 = sext i32 %39 to i64, !dbg !26
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !26
  %48 = and i1 %15, %24, !dbg !27
  %49 = and i1 %25, %15, !dbg !27
  %50 = and i1 %26, %15, !dbg !27
  %51 = and i1 %27, %15, !dbg !27
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %48) #4, !dbg !28
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %49) #4, !dbg !28
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %50) #4, !dbg !28
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %51) #4, !dbg !28
  %56 = sext i32 %.decomposed to i64, !dbg !29
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !29
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %15) #4, !dbg !30
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !31
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %15) #4, !dbg !32
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !32
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !32
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !32
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !32
  %65 = bitcast i32 %61 to float, !dbg !32
  %66 = bitcast i32 %62 to float, !dbg !32
  %67 = bitcast i32 %63 to float, !dbg !32
  %68 = bitcast i32 %64 to float, !dbg !32
  %69 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !33
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %15) #4, !dbg !34
  %71 = getelementptr float, ptr addrspace(1) %4, i64 %56, !dbg !35
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %15) #4, !dbg !36
  %73 = fadd float %65, 0x3EE4F8B580000000, !dbg !37
  %74 = fadd float %66, 0x3EE4F8B580000000, !dbg !37
  %75 = fadd float %67, 0x3EE4F8B580000000, !dbg !37
  %76 = fadd float %68, 0x3EE4F8B580000000, !dbg !37
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %77, 0, !dbg !38
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %78, 0, !dbg !38
  br i1 %.not.i, label %84, label %79, !dbg !38

79:                                               ; preds = %8
  br i1 %.not1.i, label %82, label %80, !dbg !38

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

84:                                               ; preds = %8
  br i1 %.not1.i, label %87, label %85, !dbg !38

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %80, %82, %85, %87
  %.0.i = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !38
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i4 = icmp eq i32 %89, 0, !dbg !38
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i7 = icmp eq i32 %90, 0, !dbg !38
  br i1 %.not.i4, label %96, label %91, !dbg !38

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %94, label %92, !dbg !38

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !38
  br label %__nv_sqrtf.exit8, !dbg !38

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !38
  br label %__nv_sqrtf.exit8, !dbg !38

96:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %99, label %97, !dbg !38

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !38
  br label %__nv_sqrtf.exit8, !dbg !38

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !38
  br label %__nv_sqrtf.exit8, !dbg !38

__nv_sqrtf.exit8:                                 ; preds = %92, %94, %97, %99
  %.0.i6 = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !38
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i9 = icmp eq i32 %101, 0, !dbg !38
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i12 = icmp eq i32 %102, 0, !dbg !38
  br i1 %.not.i9, label %108, label %103, !dbg !38

103:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %106, label %104, !dbg !38

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #4, !dbg !38
  br label %__nv_sqrtf.exit13, !dbg !38

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #4, !dbg !38
  br label %__nv_sqrtf.exit13, !dbg !38

108:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %111, label %109, !dbg !38

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #4, !dbg !38
  br label %__nv_sqrtf.exit13, !dbg !38

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #4, !dbg !38
  br label %__nv_sqrtf.exit13, !dbg !38

__nv_sqrtf.exit13:                                ; preds = %104, %106, %109, %111
  %.0.i11 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !38
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i14 = icmp eq i32 %113, 0, !dbg !38
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i17 = icmp eq i32 %114, 0, !dbg !38
  br i1 %.not.i14, label %120, label %115, !dbg !38

115:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %118, label %116, !dbg !38

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #4, !dbg !38
  br label %__nv_sqrtf.exit18, !dbg !38

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #4, !dbg !38
  br label %__nv_sqrtf.exit18, !dbg !38

120:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %123, label %121, !dbg !38

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #4, !dbg !38
  br label %__nv_sqrtf.exit18, !dbg !38

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #4, !dbg !38
  br label %__nv_sqrtf.exit18, !dbg !38

__nv_sqrtf.exit18:                                ; preds = %116, %118, %121, %123
  %.0.i16 = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !38
  %125 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !28
  %126 = bitcast i32 %125 to float, !dbg !28
  %127 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !30
  %128 = bitcast i32 %127 to float, !dbg !30
  %129 = fsub float %126, %128, !dbg !39
  %130 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !28
  %131 = bitcast i32 %130 to float, !dbg !28
  %132 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !30
  %133 = bitcast i32 %132 to float, !dbg !30
  %134 = fsub float %131, %133, !dbg !39
  %135 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !28
  %136 = bitcast i32 %135 to float, !dbg !28
  %137 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !30
  %138 = bitcast i32 %137 to float, !dbg !30
  %139 = fsub float %136, %138, !dbg !39
  %140 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !28
  %141 = bitcast i32 %140 to float, !dbg !28
  %142 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !30
  %143 = bitcast i32 %142 to float, !dbg !30
  %144 = fsub float %141, %143, !dbg !39
  %145 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !28
  %146 = bitcast i32 %145 to float, !dbg !28
  %147 = fsub float %146, %128, !dbg !39
  %148 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !28
  %149 = bitcast i32 %148 to float, !dbg !28
  %150 = fsub float %149, %133, !dbg !39
  %151 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !28
  %152 = bitcast i32 %151 to float, !dbg !28
  %153 = fsub float %152, %138, !dbg !39
  %154 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !28
  %155 = bitcast i32 %154 to float, !dbg !28
  %156 = fsub float %155, %143, !dbg !39
  %157 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !28
  %158 = bitcast i32 %157 to float, !dbg !28
  %159 = fsub float %158, %128, !dbg !39
  %160 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !28
  %161 = bitcast i32 %160 to float, !dbg !28
  %162 = fsub float %161, %133, !dbg !39
  %163 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !28
  %164 = bitcast i32 %163 to float, !dbg !28
  %165 = fsub float %164, %138, !dbg !39
  %166 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !28
  %167 = bitcast i32 %166 to float, !dbg !28
  %168 = fsub float %167, %143, !dbg !39
  %169 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !28
  %170 = bitcast i32 %169 to float, !dbg !28
  %171 = fsub float %170, %128, !dbg !39
  %172 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !28
  %173 = bitcast i32 %172 to float, !dbg !28
  %174 = fsub float %173, %133, !dbg !39
  %175 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !28
  %176 = bitcast i32 %175 to float, !dbg !28
  %177 = fsub float %176, %138, !dbg !39
  %178 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !28
  %179 = bitcast i32 %178 to float, !dbg !28
  %180 = fsub float %179, %143, !dbg !39
  %181 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !36
  %182 = bitcast i32 %181 to float, !dbg !36
  %183 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !36
  %184 = bitcast i32 %183 to float, !dbg !36
  %185 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !36
  %186 = bitcast i32 %185 to float, !dbg !36
  %187 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !36
  %188 = bitcast i32 %187 to float, !dbg !36
  %189 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !34
  %190 = bitcast i32 %189 to float, !dbg !34
  %191 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !34
  %192 = bitcast i32 %191 to float, !dbg !34
  %193 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !34
  %194 = bitcast i32 %193 to float, !dbg !34
  %195 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !34
  %196 = bitcast i32 %195 to float, !dbg !34
  %197 = and i32 %11, 63, !dbg !17
  %198 = or disjoint i32 %17, %197, !dbg !18
  %199 = icmp slt i32 %198, 49, !dbg !19
  %.lobit1 = lshr i32 %11, 6, !dbg !12
  %200 = and i32 %.lobit1, 3, !dbg !12
  %201 = or disjoint i32 %200, %10, !dbg !13
  %202 = or disjoint i32 %201, 60, !dbg !13
  %203 = icmp slt i32 %202, 1280, !dbg !14
  %204 = and i1 %203, %199, !dbg !27
  %205 = or disjoint i32 %201, 56, !dbg !13
  %206 = icmp slt i32 %205, 1280, !dbg !14
  %207 = and i1 %206, %199, !dbg !27
  %208 = or disjoint i32 %201, 52, !dbg !13
  %209 = icmp slt i32 %208, 1280, !dbg !14
  %210 = and i1 %209, %199, !dbg !27
  %211 = or disjoint i32 %201, 48, !dbg !13
  %212 = icmp slt i32 %211, 1280, !dbg !14
  %213 = and i1 %212, %199, !dbg !27
  %214 = or disjoint i32 %201, 44, !dbg !13
  %215 = icmp slt i32 %214, 1280, !dbg !14
  %216 = and i1 %215, %199, !dbg !27
  %217 = or disjoint i32 %201, 40, !dbg !13
  %218 = icmp slt i32 %217, 1280, !dbg !14
  %219 = and i1 %218, %199, !dbg !27
  %220 = or disjoint i32 %201, 36, !dbg !13
  %221 = icmp slt i32 %220, 1280, !dbg !14
  %222 = and i1 %221, %199, !dbg !27
  %223 = or disjoint i32 %201, 32, !dbg !13
  %224 = icmp slt i32 %223, 1280, !dbg !14
  %225 = and i1 %224, %199, !dbg !27
  %226 = or disjoint i32 %201, 28, !dbg !13
  %227 = icmp slt i32 %226, 1280, !dbg !14
  %228 = and i1 %227, %199, !dbg !27
  %229 = or disjoint i32 %201, 24, !dbg !13
  %230 = icmp slt i32 %229, 1280, !dbg !14
  %231 = and i1 %230, %199, !dbg !27
  %232 = or disjoint i32 %201, 20, !dbg !13
  %233 = icmp slt i32 %232, 1280, !dbg !14
  %234 = and i1 %233, %199, !dbg !27
  %235 = or disjoint i32 %201, 16, !dbg !13
  %236 = icmp slt i32 %235, 1280, !dbg !14
  %237 = and i1 %236, %199, !dbg !27
  %238 = or disjoint i32 %201, 12, !dbg !13
  %239 = icmp slt i32 %238, 1280, !dbg !14
  %240 = and i1 %239, %199, !dbg !27
  %241 = or disjoint i32 %201, 8, !dbg !13
  %242 = icmp slt i32 %241, 1280, !dbg !14
  %243 = and i1 %242, %199, !dbg !27
  %244 = or disjoint i32 %201, 4, !dbg !13
  %245 = icmp slt i32 %244, 1280, !dbg !14
  %246 = and i1 %245, %199, !dbg !27
  %247 = icmp slt i32 %201, 1280, !dbg !14
  %248 = and i1 %247, %199, !dbg !27
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !40
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #4, !dbg !40
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #4, !dbg !40
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #4, !dbg !40
  %253 = fmul float %180, %249, !dbg !41
  %254 = fmul float %177, %250, !dbg !41
  %255 = fmul float %174, %251, !dbg !41
  %256 = fmul float %171, %252, !dbg !41
  %257 = fmul float %168, %249, !dbg !41
  %258 = fmul float %165, %250, !dbg !41
  %259 = fmul float %162, %251, !dbg !41
  %260 = fmul float %159, %252, !dbg !41
  %261 = fmul float %156, %249, !dbg !41
  %262 = fmul float %153, %250, !dbg !41
  %263 = fmul float %150, %251, !dbg !41
  %264 = fmul float %147, %252, !dbg !41
  %265 = fmul float %144, %249, !dbg !41
  %266 = fmul float %139, %250, !dbg !41
  %267 = fmul float %134, %251, !dbg !41
  %268 = fmul float %129, %252, !dbg !41
  %269 = fmul float %253, %196, !dbg !42
  %270 = fmul float %254, %194, !dbg !42
  %271 = fmul float %255, %192, !dbg !42
  %272 = fmul float %256, %190, !dbg !42
  %273 = fmul float %257, %196, !dbg !42
  %274 = fmul float %258, %194, !dbg !42
  %275 = fmul float %259, %192, !dbg !42
  %276 = fmul float %260, %190, !dbg !42
  %277 = fmul float %261, %196, !dbg !42
  %278 = fmul float %262, %194, !dbg !42
  %279 = fmul float %263, %192, !dbg !42
  %280 = fmul float %264, %190, !dbg !42
  %281 = fmul float %265, %196, !dbg !42
  %282 = fmul float %266, %194, !dbg !42
  %283 = fmul float %267, %192, !dbg !42
  %284 = fmul float %268, %190, !dbg !42
  %285 = fadd float %269, %188, !dbg !43
  %286 = fadd float %270, %186, !dbg !43
  %287 = fadd float %271, %184, !dbg !43
  %288 = fadd float %272, %182, !dbg !43
  %289 = fadd float %273, %188, !dbg !43
  %290 = fadd float %274, %186, !dbg !43
  %291 = fadd float %275, %184, !dbg !43
  %292 = fadd float %276, %182, !dbg !43
  %293 = fadd float %277, %188, !dbg !43
  %294 = fadd float %278, %186, !dbg !43
  %295 = fadd float %279, %184, !dbg !43
  %296 = fadd float %280, %182, !dbg !43
  %297 = fadd float %281, %188, !dbg !43
  %298 = fadd float %282, %186, !dbg !43
  %299 = fadd float %283, %184, !dbg !43
  %300 = fadd float %284, %182, !dbg !43
  %301 = mul i32 %201, 49, !dbg !44
  %302 = mul i32 %244, 49, !dbg !44
  %303 = mul i32 %241, 49, !dbg !44
  %304 = mul i32 %238, 49, !dbg !44
  %305 = mul i32 %235, 49, !dbg !44
  %306 = mul i32 %232, 49, !dbg !44
  %307 = mul i32 %229, 49, !dbg !44
  %308 = mul i32 %226, 49, !dbg !44
  %309 = mul i32 %223, 49, !dbg !44
  %310 = mul i32 %220, 49, !dbg !44
  %311 = mul i32 %217, 49, !dbg !44
  %312 = mul i32 %214, 49, !dbg !44
  %313 = mul i32 %211, 49, !dbg !44
  %314 = mul i32 %208, 49, !dbg !44
  %315 = mul i32 %205, 49, !dbg !44
  %316 = mul i32 %202, 49, !dbg !44
  %317 = add i32 %198, %301, !dbg !45
  %318 = add i32 %198, %302, !dbg !45
  %319 = add i32 %198, %303, !dbg !45
  %320 = add i32 %198, %304, !dbg !45
  %321 = add i32 %198, %305, !dbg !45
  %322 = add i32 %198, %306, !dbg !45
  %323 = add i32 %198, %307, !dbg !45
  %324 = add i32 %198, %308, !dbg !45
  %325 = add i32 %198, %309, !dbg !45
  %326 = add i32 %198, %310, !dbg !45
  %327 = add i32 %198, %311, !dbg !45
  %328 = add i32 %198, %312, !dbg !45
  %329 = add i32 %198, %313, !dbg !45
  %330 = add i32 %198, %314, !dbg !45
  %331 = add i32 %198, %315, !dbg !45
  %332 = add i32 %198, %316, !dbg !45
  %333 = sext i32 %317 to i64, !dbg !46
  %334 = getelementptr float, ptr addrspace(1) %5, i64 %333, !dbg !46
  %335 = sext i32 %318 to i64, !dbg !46
  %336 = getelementptr float, ptr addrspace(1) %5, i64 %335, !dbg !46
  %337 = sext i32 %319 to i64, !dbg !46
  %338 = getelementptr float, ptr addrspace(1) %5, i64 %337, !dbg !46
  %339 = sext i32 %320 to i64, !dbg !46
  %340 = getelementptr float, ptr addrspace(1) %5, i64 %339, !dbg !46
  %341 = sext i32 %321 to i64, !dbg !46
  %342 = getelementptr float, ptr addrspace(1) %5, i64 %341, !dbg !46
  %343 = sext i32 %322 to i64, !dbg !46
  %344 = getelementptr float, ptr addrspace(1) %5, i64 %343, !dbg !46
  %345 = sext i32 %323 to i64, !dbg !46
  %346 = getelementptr float, ptr addrspace(1) %5, i64 %345, !dbg !46
  %347 = sext i32 %324 to i64, !dbg !46
  %348 = getelementptr float, ptr addrspace(1) %5, i64 %347, !dbg !46
  %349 = sext i32 %325 to i64, !dbg !46
  %350 = getelementptr float, ptr addrspace(1) %5, i64 %349, !dbg !46
  %351 = sext i32 %326 to i64, !dbg !46
  %352 = getelementptr float, ptr addrspace(1) %5, i64 %351, !dbg !46
  %353 = sext i32 %327 to i64, !dbg !46
  %354 = getelementptr float, ptr addrspace(1) %5, i64 %353, !dbg !46
  %355 = sext i32 %328 to i64, !dbg !46
  %356 = getelementptr float, ptr addrspace(1) %5, i64 %355, !dbg !46
  %357 = sext i32 %329 to i64, !dbg !46
  %358 = getelementptr float, ptr addrspace(1) %5, i64 %357, !dbg !46
  %359 = sext i32 %330 to i64, !dbg !46
  %360 = getelementptr float, ptr addrspace(1) %5, i64 %359, !dbg !46
  %361 = sext i32 %331 to i64, !dbg !46
  %362 = getelementptr float, ptr addrspace(1) %5, i64 %361, !dbg !46
  %363 = sext i32 %332 to i64, !dbg !46
  %364 = getelementptr float, ptr addrspace(1) %5, i64 %363, !dbg !46
  %365 = shl i32 %11, 8, !dbg !47
  %366 = and i32 %365, 3840, !dbg !47
  %367 = or disjoint i32 %366, %19, !dbg !47
  %368 = and i32 %11, 255, !dbg !47
  %369 = lshr exact i32 %366, 4, !dbg !47
  %370 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %369, !dbg !47
  %371 = getelementptr float, ptr addrspace(3) %370, i32 %367, !dbg !47
  %372 = bitcast float %285 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %371, <1 x i32> %372, i1 true) #4, !dbg !47
  %373 = or disjoint i32 %367, 64, !dbg !47
  %374 = lshr i32 %373, 6, !dbg !47
  %375 = getelementptr float, ptr addrspace(3) @global_smem, i32 %374, !dbg !47
  %376 = getelementptr float, ptr addrspace(3) %375, i32 %373, !dbg !47
  %377 = bitcast float %286 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %376, <1 x i32> %377, i1 true) #4, !dbg !47
  %378 = or disjoint i32 %367, 128, !dbg !47
  %379 = lshr i32 %378, 6, !dbg !47
  %380 = getelementptr float, ptr addrspace(3) @global_smem, i32 %379, !dbg !47
  %381 = getelementptr float, ptr addrspace(3) %380, i32 %378, !dbg !47
  %382 = bitcast float %287 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, <1 x i32> %382, i1 true) #4, !dbg !47
  %383 = or disjoint i32 %367, 192, !dbg !47
  %384 = lshr i32 %383, 6, !dbg !47
  %385 = getelementptr float, ptr addrspace(3) @global_smem, i32 %384, !dbg !47
  %386 = getelementptr float, ptr addrspace(3) %385, i32 %383, !dbg !47
  %387 = bitcast float %288 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %387, i1 true) #4, !dbg !47
  %388 = or disjoint i32 %367, 16, !dbg !47
  %389 = getelementptr float, ptr addrspace(3) %370, i32 %388, !dbg !47
  %390 = bitcast float %289 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %390, i1 true) #4, !dbg !47
  %391 = or disjoint i32 %367, 80, !dbg !47
  %392 = lshr i32 %391, 6, !dbg !47
  %393 = getelementptr float, ptr addrspace(3) @global_smem, i32 %392, !dbg !47
  %394 = getelementptr float, ptr addrspace(3) %393, i32 %391, !dbg !47
  %395 = bitcast float %290 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %394, <1 x i32> %395, i1 true) #4, !dbg !47
  %396 = or disjoint i32 %367, 144, !dbg !47
  %397 = lshr i32 %396, 6, !dbg !47
  %398 = getelementptr float, ptr addrspace(3) @global_smem, i32 %397, !dbg !47
  %399 = getelementptr float, ptr addrspace(3) %398, i32 %396, !dbg !47
  %400 = bitcast float %291 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %399, <1 x i32> %400, i1 true) #4, !dbg !47
  %401 = or disjoint i32 %367, 208, !dbg !47
  %402 = lshr i32 %401, 6, !dbg !47
  %403 = getelementptr float, ptr addrspace(3) @global_smem, i32 %402, !dbg !47
  %404 = getelementptr float, ptr addrspace(3) %403, i32 %401, !dbg !47
  %405 = bitcast float %292 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %404, <1 x i32> %405, i1 true) #4, !dbg !47
  %406 = or disjoint i32 %367, 32, !dbg !47
  %407 = getelementptr float, ptr addrspace(3) %370, i32 %406, !dbg !47
  %408 = bitcast float %293 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %407, <1 x i32> %408, i1 true) #4, !dbg !47
  %409 = or disjoint i32 %367, 96, !dbg !47
  %410 = lshr i32 %409, 6, !dbg !47
  %411 = getelementptr float, ptr addrspace(3) @global_smem, i32 %410, !dbg !47
  %412 = getelementptr float, ptr addrspace(3) %411, i32 %409, !dbg !47
  %413 = bitcast float %294 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %412, <1 x i32> %413, i1 true) #4, !dbg !47
  %414 = or disjoint i32 %367, 160, !dbg !47
  %415 = lshr i32 %414, 6, !dbg !47
  %416 = getelementptr float, ptr addrspace(3) @global_smem, i32 %415, !dbg !47
  %417 = getelementptr float, ptr addrspace(3) %416, i32 %414, !dbg !47
  %418 = bitcast float %295 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %417, <1 x i32> %418, i1 true) #4, !dbg !47
  %419 = or disjoint i32 %367, 224, !dbg !47
  %420 = lshr i32 %419, 6, !dbg !47
  %421 = getelementptr float, ptr addrspace(3) @global_smem, i32 %420, !dbg !47
  %422 = getelementptr float, ptr addrspace(3) %421, i32 %419, !dbg !47
  %423 = bitcast float %296 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %422, <1 x i32> %423, i1 true) #4, !dbg !47
  %424 = or disjoint i32 %367, 48, !dbg !47
  %425 = getelementptr float, ptr addrspace(3) %370, i32 %424, !dbg !47
  %426 = bitcast float %297 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %425, <1 x i32> %426, i1 true) #4, !dbg !47
  %427 = or disjoint i32 %367, 112, !dbg !47
  %428 = lshr i32 %427, 6, !dbg !47
  %429 = getelementptr float, ptr addrspace(3) @global_smem, i32 %428, !dbg !47
  %430 = getelementptr float, ptr addrspace(3) %429, i32 %427, !dbg !47
  %431 = bitcast float %298 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %430, <1 x i32> %431, i1 true) #4, !dbg !47
  %432 = or disjoint i32 %367, 176, !dbg !47
  %433 = lshr i32 %432, 6, !dbg !47
  %434 = getelementptr float, ptr addrspace(3) @global_smem, i32 %433, !dbg !47
  %435 = getelementptr float, ptr addrspace(3) %434, i32 %432, !dbg !47
  %436 = bitcast float %299 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %435, <1 x i32> %436, i1 true) #4, !dbg !47
  %437 = or disjoint i32 %367, 240, !dbg !47
  %438 = lshr i32 %437, 6, !dbg !47
  %439 = getelementptr float, ptr addrspace(3) @global_smem, i32 %438, !dbg !47
  %440 = getelementptr float, ptr addrspace(3) %439, i32 %437, !dbg !47
  %441 = bitcast float %300 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %440, <1 x i32> %441, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %442 = lshr i32 %368, 6, !dbg !47
  %443 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %442, !dbg !47
  %444 = getelementptr inbounds float, ptr addrspace(3) %443, i32 %368, !dbg !47
  %445 = load i32, ptr addrspace(3) %444, align 4, !dbg !47
  %446 = or disjoint i32 %368, 256, !dbg !47
  %447 = lshr i32 %446, 6, !dbg !47
  %448 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %447, !dbg !47
  %449 = getelementptr inbounds float, ptr addrspace(3) %448, i32 %446, !dbg !47
  %450 = load i32, ptr addrspace(3) %449, align 4, !dbg !47
  %451 = or disjoint i32 %368, 512, !dbg !47
  %452 = lshr i32 %451, 6, !dbg !47
  %453 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %452, !dbg !47
  %454 = getelementptr inbounds float, ptr addrspace(3) %453, i32 %451, !dbg !47
  %455 = load i32, ptr addrspace(3) %454, align 4, !dbg !47
  %456 = or disjoint i32 %368, 768, !dbg !47
  %457 = lshr i32 %456, 6, !dbg !47
  %458 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %457, !dbg !47
  %459 = getelementptr inbounds float, ptr addrspace(3) %458, i32 %456, !dbg !47
  %460 = load i32, ptr addrspace(3) %459, align 4, !dbg !47
  %461 = or disjoint i32 %368, 1024, !dbg !47
  %462 = lshr i32 %461, 6, !dbg !47
  %463 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %462, !dbg !47
  %464 = getelementptr inbounds float, ptr addrspace(3) %463, i32 %461, !dbg !47
  %465 = load i32, ptr addrspace(3) %464, align 4, !dbg !47
  %466 = or disjoint i32 %368, 1280, !dbg !47
  %467 = lshr i32 %466, 6, !dbg !47
  %468 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %467, !dbg !47
  %469 = getelementptr inbounds float, ptr addrspace(3) %468, i32 %466, !dbg !47
  %470 = load i32, ptr addrspace(3) %469, align 4, !dbg !47
  %471 = or disjoint i32 %368, 1536, !dbg !47
  %472 = lshr i32 %471, 6, !dbg !47
  %473 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %472, !dbg !47
  %474 = getelementptr inbounds float, ptr addrspace(3) %473, i32 %471, !dbg !47
  %475 = load i32, ptr addrspace(3) %474, align 4, !dbg !47
  %476 = or disjoint i32 %368, 1792, !dbg !47
  %477 = lshr i32 %476, 6, !dbg !47
  %478 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %477, !dbg !47
  %479 = getelementptr inbounds float, ptr addrspace(3) %478, i32 %476, !dbg !47
  %480 = load i32, ptr addrspace(3) %479, align 4, !dbg !47
  %481 = or disjoint i32 %368, 2048, !dbg !47
  %482 = lshr i32 %481, 6, !dbg !47
  %483 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %482, !dbg !47
  %484 = getelementptr inbounds float, ptr addrspace(3) %483, i32 %481, !dbg !47
  %485 = load i32, ptr addrspace(3) %484, align 4, !dbg !47
  %486 = or disjoint i32 %368, 2304, !dbg !47
  %487 = lshr i32 %486, 6, !dbg !47
  %488 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %487, !dbg !47
  %489 = getelementptr inbounds float, ptr addrspace(3) %488, i32 %486, !dbg !47
  %490 = load i32, ptr addrspace(3) %489, align 4, !dbg !47
  %491 = or disjoint i32 %368, 2560, !dbg !47
  %492 = lshr i32 %491, 6, !dbg !47
  %493 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %492, !dbg !47
  %494 = getelementptr inbounds float, ptr addrspace(3) %493, i32 %491, !dbg !47
  %495 = load i32, ptr addrspace(3) %494, align 4, !dbg !47
  %496 = or disjoint i32 %368, 2816, !dbg !47
  %497 = lshr i32 %496, 6, !dbg !47
  %498 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %497, !dbg !47
  %499 = getelementptr inbounds float, ptr addrspace(3) %498, i32 %496, !dbg !47
  %500 = load i32, ptr addrspace(3) %499, align 4, !dbg !47
  %501 = or disjoint i32 %368, 3072, !dbg !47
  %502 = lshr i32 %501, 6, !dbg !47
  %503 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %502, !dbg !47
  %504 = getelementptr inbounds float, ptr addrspace(3) %503, i32 %501, !dbg !47
  %505 = load i32, ptr addrspace(3) %504, align 4, !dbg !47
  %506 = or disjoint i32 %368, 3328, !dbg !47
  %507 = lshr i32 %506, 6, !dbg !47
  %508 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %507, !dbg !47
  %509 = getelementptr inbounds float, ptr addrspace(3) %508, i32 %506, !dbg !47
  %510 = load i32, ptr addrspace(3) %509, align 4, !dbg !47
  %511 = or disjoint i32 %368, 3584, !dbg !47
  %512 = lshr i32 %511, 6, !dbg !47
  %513 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %512, !dbg !47
  %514 = getelementptr inbounds float, ptr addrspace(3) %513, i32 %511, !dbg !47
  %515 = load i32, ptr addrspace(3) %514, align 4, !dbg !47
  %516 = or disjoint i32 %368, 3840, !dbg !47
  %517 = lshr i32 %516, 6, !dbg !47
  %518 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %517, !dbg !47
  %519 = getelementptr inbounds float, ptr addrspace(3) %518, i32 %516, !dbg !47
  %520 = load i32, ptr addrspace(3) %519, align 4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %445, ptr addrspace(1) %334, i1 %248) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %450, ptr addrspace(1) %336, i1 %246) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %455, ptr addrspace(1) %338, i1 %243) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %460, ptr addrspace(1) %340, i1 %240) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %465, ptr addrspace(1) %342, i1 %237) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %470, ptr addrspace(1) %344, i1 %234) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %475, ptr addrspace(1) %346, i1 %231) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %480, ptr addrspace(1) %348, i1 %228) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %485, ptr addrspace(1) %350, i1 %225) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %490, ptr addrspace(1) %352, i1 %222) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %495, ptr addrspace(1) %354, i1 %219) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %500, ptr addrspace(1) %356, i1 %216) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %505, ptr addrspace(1) %358, i1 %213) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %510, ptr addrspace(1) %360, i1 %210) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %515, ptr addrspace(1) %362, i1 %207) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %520, ptr addrspace(1) %364, i1 %204) #4, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpjyb7tnoj7pg3sq776mg5am7rq7xibfy6wyeesdstdpkssclhev.py", directory: "inductor_cache/pj")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_26, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_26", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 50, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 63, scope: !7)
!28 = !DILocation(line: 32, column: 55, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 48, column: 33, scope: !7)
!45 = !DILocation(line: 48, column: 30, scope: !7)
!46 = !DILocation(line: 48, column: 25, scope: !7)
!47 = !DILocation(line: 48, column: 45, scope: !7)
!48 = !DILocation(line: 48, column: 4, scope: !7)
