; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_42(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 6, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 2, !dbg !12
  %12 = and i32 %11, 3, !dbg !12
  %13 = lshr i32 %10, 2, !dbg !12
  %14 = and i32 %13, 4, !dbg !12
  %15 = or disjoint i32 %12, %14, !dbg !12
  %16 = lshr i32 %10, 2, !dbg !12
  %17 = and i32 %16, 8, !dbg !12
  %18 = or disjoint i32 %15, %17, !dbg !12
  %19 = and i32 %10, 64, !dbg !12
  %20 = lshr exact i32 %19, 2, !dbg !12
  %21 = or disjoint i32 %18, %20, !dbg !12
  %22 = or disjoint i32 %21, 32, !dbg !12
  %23 = shl i32 %10, 2, !dbg !12
  %24 = and i32 %23, 12, !dbg !12
  %25 = and i32 %23, 60, !dbg !12
  %26 = or disjoint i32 %9, %21, !dbg !13
  %27 = or disjoint i32 %9, %22, !dbg !13
  %28 = or disjoint i32 %9, %25, !dbg !13
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %30 = shl i32 %29, 4, !dbg !15
  %.lobit110 = lshr i32 %10, 4, !dbg !16
  %31 = and i32 %.lobit110, 3, !dbg !16
  %32 = lshr exact i32 %19, 4, !dbg !16
  %33 = or disjoint i32 %31, %32, !dbg !16
  %34 = or disjoint i32 %30, %24, !dbg !17
  %35 = or disjoint i32 %30, %33, !dbg !17
  %36 = or disjoint i32 %35, 8, !dbg !17
  %37 = icmp slt i32 %34, 16, !dbg !18
  %38 = icmp slt i32 %35, 16, !dbg !18
  %39 = icmp slt i32 %36, 16, !dbg !18
  %40 = srem i32 %28, 512, !dbg !19
  %41 = shl i32 %26, 4, !dbg !20
  %42 = shl i32 %27, 4, !dbg !20
  %43 = add i32 %34, %41, !dbg !21
  %44 = add i32 %34, %42, !dbg !21
  %45 = sext i32 %43 to i64, !dbg !22
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !22
  %47 = sext i32 %44 to i64, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !22
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %37) #2, !dbg !23
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !23
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !23
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !23
  %54 = bitcast i32 %50 to float, !dbg !23
  %55 = bitcast i32 %51 to float, !dbg !23
  %56 = bitcast i32 %52 to float, !dbg !23
  %57 = bitcast i32 %53 to float, !dbg !23
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %37) #2, !dbg !23
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !23
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !23
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !23
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !23
  %63 = bitcast i32 %59 to float, !dbg !23
  %64 = bitcast i32 %60 to float, !dbg !23
  %65 = bitcast i32 %61 to float, !dbg !23
  %66 = bitcast i32 %62 to float, !dbg !23
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !24
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !24
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %37) #2, !dbg !25
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !25
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !25
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !25
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !25
  %74 = bitcast i32 %70 to float, !dbg !25
  %75 = bitcast i32 %71 to float, !dbg !25
  %76 = bitcast i32 %72 to float, !dbg !25
  %77 = bitcast i32 %73 to float, !dbg !25
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 %37) #2, !dbg !25
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !25
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !25
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !25
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !25
  %83 = bitcast i32 %79 to float, !dbg !25
  %84 = bitcast i32 %80 to float, !dbg !25
  %85 = bitcast i32 %81 to float, !dbg !25
  %86 = bitcast i32 %82 to float, !dbg !25
  %87 = shl i32 %35, 11, !dbg !26
  %88 = shl i32 %36, 11, !dbg !26
  %89 = add i32 %87, %28, !dbg !27
  %90 = add i32 %28, %88, !dbg !27
  %91 = sext i32 %89 to i64, !dbg !28
  %92 = getelementptr float, ptr addrspace(1) %2, i64 %91, !dbg !28
  %93 = sext i32 %90 to i64, !dbg !28
  %94 = getelementptr float, ptr addrspace(1) %2, i64 %93, !dbg !28
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %92, i1 %38) #2, !dbg !29
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !29
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !29
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !29
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !29
  %100 = bitcast i32 %96 to float, !dbg !29
  %101 = bitcast i32 %97 to float, !dbg !29
  %102 = bitcast i32 %98 to float, !dbg !29
  %103 = bitcast i32 %99 to float, !dbg !29
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 %39) #2, !dbg !29
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !29
  %106 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !29
  %107 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !29
  %108 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !29
  %109 = bitcast i32 %105 to float, !dbg !29
  %110 = bitcast i32 %106 to float, !dbg !29
  %111 = bitcast i32 %107 to float, !dbg !29
  %112 = bitcast i32 %108 to float, !dbg !29
  %113 = sext i32 %40 to i64, !dbg !30
  %114 = getelementptr float, ptr addrspace(1) %3, i64 %113, !dbg !30
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %114, i1 true) #2, !dbg !31
  %116 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !31
  %117 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !31
  %118 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !31
  %119 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !31
  %120 = bitcast i32 %116 to float, !dbg !31
  %121 = bitcast i32 %117 to float, !dbg !31
  %122 = bitcast i32 %118 to float, !dbg !31
  %123 = bitcast i32 %119 to float, !dbg !31
  %124 = fadd float %54, %74, !dbg !32
  %125 = fadd float %55, %75, !dbg !32
  %126 = fadd float %56, %76, !dbg !32
  %127 = fadd float %57, %77, !dbg !32
  %128 = fadd float %63, %83, !dbg !32
  %129 = fadd float %64, %84, !dbg !32
  %130 = fadd float %65, %85, !dbg !32
  %131 = fadd float %66, %86, !dbg !32
  %132 = shl i32 %10, 8, !dbg !32
  %133 = and i32 %132, 768, !dbg !32
  %134 = or disjoint i32 %12, %133, !dbg !32
  %135 = or disjoint i32 %134, %14, !dbg !32
  %136 = or disjoint i32 %135, %17, !dbg !32
  %137 = or disjoint i32 %136, %20, !dbg !32
  %138 = and i32 %23, 508, !dbg !32
  %139 = lshr exact i32 %133, 2, !dbg !32
  %140 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %139, !dbg !32
  %141 = getelementptr inbounds float, ptr addrspace(3) %140, i32 %137, !dbg !32
  %142 = bitcast float %124 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #2, !dbg !32
  %143 = or disjoint i32 %137, 64, !dbg !32
  %144 = lshr i32 %143, 4, !dbg !32
  %145 = and i32 %144, 268435452, !dbg !32
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %145, !dbg !32
  %147 = getelementptr float, ptr addrspace(3) %146, i32 %143, !dbg !32
  %148 = bitcast float %125 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #2, !dbg !32
  %149 = or disjoint i32 %137, 128, !dbg !32
  %150 = lshr i32 %149, 4, !dbg !32
  %151 = and i32 %150, 268435452, !dbg !32
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i32 %151, !dbg !32
  %153 = getelementptr float, ptr addrspace(3) %152, i32 %149, !dbg !32
  %154 = bitcast float %126 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #2, !dbg !32
  %155 = or disjoint i32 %137, 192, !dbg !32
  %156 = lshr i32 %155, 4, !dbg !32
  %157 = and i32 %156, 268435452, !dbg !32
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %157, !dbg !32
  %159 = getelementptr float, ptr addrspace(3) %158, i32 %155, !dbg !32
  %160 = bitcast float %127 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #2, !dbg !32
  %161 = or disjoint i32 %137, 32, !dbg !32
  %162 = getelementptr float, ptr addrspace(3) %140, i32 %161, !dbg !32
  %163 = bitcast float %128 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %163, i1 true) #2, !dbg !32
  %164 = or disjoint i32 %137, 96, !dbg !32
  %165 = lshr i32 %164, 4, !dbg !32
  %166 = and i32 %165, 268435452, !dbg !32
  %167 = getelementptr float, ptr addrspace(3) @global_smem, i32 %166, !dbg !32
  %168 = getelementptr float, ptr addrspace(3) %167, i32 %164, !dbg !32
  %169 = bitcast float %129 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, <1 x i32> %169, i1 true) #2, !dbg !32
  %170 = or disjoint i32 %137, 160, !dbg !32
  %171 = lshr i32 %170, 4, !dbg !32
  %172 = and i32 %171, 268435452, !dbg !32
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i32 %172, !dbg !32
  %174 = getelementptr float, ptr addrspace(3) %173, i32 %170, !dbg !32
  %175 = bitcast float %130 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 true) #2, !dbg !32
  %176 = or disjoint i32 %137, 224, !dbg !32
  %177 = lshr i32 %176, 4, !dbg !32
  %178 = and i32 %177, 268435452, !dbg !32
  %179 = getelementptr float, ptr addrspace(3) @global_smem, i32 %178, !dbg !32
  %180 = getelementptr float, ptr addrspace(3) %179, i32 %176, !dbg !32
  %181 = bitcast float %131 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %181, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %182 = lshr i32 %23, 4, !dbg !32
  %183 = and i32 %182, 28, !dbg !32
  %184 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %183, !dbg !32
  %185 = getelementptr inbounds float, ptr addrspace(3) %184, i32 %138, !dbg !32
  %186 = load float, ptr addrspace(3) %185, align 16, !dbg !32
  %187 = getelementptr inbounds i8, ptr addrspace(3) %185, i32 4, !dbg !32
  %188 = load float, ptr addrspace(3) %187, align 4, !dbg !32
  %189 = getelementptr inbounds i8, ptr addrspace(3) %185, i32 8, !dbg !32
  %190 = load float, ptr addrspace(3) %189, align 8, !dbg !32
  %191 = getelementptr inbounds i8, ptr addrspace(3) %185, i32 12, !dbg !32
  %192 = load float, ptr addrspace(3) %191, align 4, !dbg !32
  %193 = or disjoint i32 %138, 512, !dbg !32
  %194 = lshr i32 %193, 4, !dbg !32
  %195 = and i32 %194, 60, !dbg !32
  %196 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %195, !dbg !32
  %197 = getelementptr inbounds float, ptr addrspace(3) %196, i32 %193, !dbg !32
  %198 = load float, ptr addrspace(3) %197, align 16, !dbg !32
  %199 = getelementptr inbounds i8, ptr addrspace(3) %197, i32 4, !dbg !32
  %200 = load float, ptr addrspace(3) %199, align 4, !dbg !32
  %201 = getelementptr inbounds i8, ptr addrspace(3) %197, i32 8, !dbg !32
  %202 = load float, ptr addrspace(3) %201, align 8, !dbg !32
  %203 = getelementptr inbounds i8, ptr addrspace(3) %197, i32 12, !dbg !32
  %204 = load float, ptr addrspace(3) %203, align 4, !dbg !32
  %205 = fadd float %100, %120, !dbg !33
  %206 = fadd float %101, %121, !dbg !33
  %207 = fadd float %102, %122, !dbg !33
  %208 = fadd float %103, %123, !dbg !33
  %209 = fadd float %109, %120, !dbg !33
  %210 = fadd float %110, %121, !dbg !33
  %211 = fadd float %111, %122, !dbg !33
  %212 = fadd float %112, %123, !dbg !33
  %213 = fadd float %205, %186, !dbg !34
  %214 = fadd float %206, %188, !dbg !34
  %215 = fadd float %207, %190, !dbg !34
  %216 = fadd float %208, %192, !dbg !34
  %217 = fadd float %209, %198, !dbg !34
  %218 = fadd float %210, %200, !dbg !34
  %219 = fadd float %211, %202, !dbg !34
  %220 = fadd float %212, %204, !dbg !34
  %221 = getelementptr float, ptr addrspace(1) %4, i64 %45, !dbg !35
  %222 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %223 = shl i32 %10, 6, !dbg !36
  %224 = and i32 %223, 960, !dbg !36
  %225 = or disjoint i32 %31, %224, !dbg !36
  %226 = or disjoint i32 %225, %32, !dbg !36
  %227 = lshr exact i32 %224, 2, !dbg !36
  %228 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %227, !dbg !36
  %229 = getelementptr float, ptr addrspace(3) %228, i32 %226, !dbg !36
  %230 = bitcast float %213 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %230, i1 true) #2, !dbg !36
  %231 = or disjoint i32 %226, 16, !dbg !36
  %232 = lshr i32 %231, 4, !dbg !36
  %233 = getelementptr float, ptr addrspace(3) @global_smem, i32 %232, !dbg !36
  %234 = getelementptr float, ptr addrspace(3) %233, i32 %231, !dbg !36
  %235 = bitcast float %214 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %235, i1 true) #2, !dbg !36
  %236 = or disjoint i32 %226, 32, !dbg !36
  %237 = lshr i32 %236, 4, !dbg !36
  %238 = getelementptr float, ptr addrspace(3) @global_smem, i32 %237, !dbg !36
  %239 = getelementptr float, ptr addrspace(3) %238, i32 %236, !dbg !36
  %240 = bitcast float %215 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %240, i1 true) #2, !dbg !36
  %241 = or disjoint i32 %226, 48, !dbg !36
  %242 = lshr i32 %241, 4, !dbg !36
  %243 = getelementptr float, ptr addrspace(3) @global_smem, i32 %242, !dbg !36
  %244 = getelementptr float, ptr addrspace(3) %243, i32 %241, !dbg !36
  %245 = bitcast float %216 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %245, i1 true) #2, !dbg !36
  %246 = or disjoint i32 %226, 8, !dbg !36
  %247 = getelementptr float, ptr addrspace(3) %228, i32 %246, !dbg !36
  %248 = bitcast float %217 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %248, i1 true) #2, !dbg !36
  %249 = or disjoint i32 %226, 24, !dbg !36
  %250 = lshr i32 %249, 4, !dbg !36
  %251 = getelementptr float, ptr addrspace(3) @global_smem, i32 %250, !dbg !36
  %252 = getelementptr float, ptr addrspace(3) %251, i32 %249, !dbg !36
  %253 = bitcast float %218 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %253, i1 true) #2, !dbg !36
  %254 = or disjoint i32 %226, 40, !dbg !36
  %255 = lshr i32 %254, 4, !dbg !36
  %256 = getelementptr float, ptr addrspace(3) @global_smem, i32 %255, !dbg !36
  %257 = getelementptr float, ptr addrspace(3) %256, i32 %254, !dbg !36
  %258 = bitcast float %219 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, <1 x i32> %258, i1 true) #2, !dbg !36
  %259 = or disjoint i32 %226, 56, !dbg !36
  %260 = lshr i32 %259, 4, !dbg !36
  %261 = getelementptr float, ptr addrspace(3) @global_smem, i32 %260, !dbg !36
  %262 = getelementptr float, ptr addrspace(3) %261, i32 %259, !dbg !36
  %263 = bitcast float %220 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %263, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %264 = lshr i32 %138, 4, !dbg !36
  %265 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %264, !dbg !36
  %266 = getelementptr inbounds float, ptr addrspace(3) %265, i32 %138, !dbg !36
  %267 = load i32, ptr addrspace(3) %266, align 4, !dbg !36
  %268 = or disjoint i32 %138, 1, !dbg !36
  %269 = getelementptr inbounds float, ptr addrspace(3) %265, i32 %268, !dbg !36
  %270 = load i32, ptr addrspace(3) %269, align 4, !dbg !36
  %271 = or disjoint i32 %138, 2, !dbg !36
  %272 = getelementptr inbounds float, ptr addrspace(3) %265, i32 %271, !dbg !36
  %273 = load i32, ptr addrspace(3) %272, align 4, !dbg !36
  %274 = or disjoint i32 %138, 3, !dbg !36
  %275 = getelementptr inbounds float, ptr addrspace(3) %265, i32 %274, !dbg !36
  %276 = load i32, ptr addrspace(3) %275, align 4, !dbg !36
  %277 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %194, !dbg !36
  %278 = getelementptr inbounds float, ptr addrspace(3) %277, i32 %193, !dbg !36
  %279 = load i32, ptr addrspace(3) %278, align 4, !dbg !36
  %280 = or disjoint i32 %138, 513, !dbg !36
  %281 = lshr i32 %280, 4, !dbg !36
  %282 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %281, !dbg !36
  %283 = getelementptr inbounds float, ptr addrspace(3) %282, i32 %280, !dbg !36
  %284 = load i32, ptr addrspace(3) %283, align 4, !dbg !36
  %285 = or disjoint i32 %138, 514, !dbg !36
  %286 = lshr i32 %285, 4, !dbg !36
  %287 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %286, !dbg !36
  %288 = getelementptr inbounds float, ptr addrspace(3) %287, i32 %285, !dbg !36
  %289 = load i32, ptr addrspace(3) %288, align 4, !dbg !36
  %290 = or disjoint i32 %138, 515, !dbg !36
  %291 = lshr i32 %290, 4, !dbg !36
  %292 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %291, !dbg !36
  %293 = getelementptr inbounds float, ptr addrspace(3) %292, i32 %290, !dbg !36
  %294 = load i32, ptr addrspace(3) %293, align 4, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %267, i32 %270, i32 %273, i32 %276, ptr addrspace(1) %221, i1 %37) #2, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %279, i32 %284, i32 %289, i32 %294, ptr addrspace(1) %222, i1 %37) #2, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqu6pfeqhesuehadha3fbvu5ike2tefs5qdw24uibtx4gnv7njy7.py", directory: "inductor_cache/qu")
!4 = !{ptr @triton_poi_fused_add_42, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_42, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_42", linkageName: "triton_poi_fused_add_42", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 38, scope: !7)
!21 = !DILocation(line: 31, column: 35, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 43, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 33, column: 40, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 45, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 35, scope: !7)
!32 = !DILocation(line: 35, column: 18, scope: !7)
!33 = !DILocation(line: 36, column: 18, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 38, column: 25, scope: !7)
!36 = !DILocation(line: 38, column: 44, scope: !7)
!37 = !DILocation(line: 38, column: 4, scope: !7)
