; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %14 = shl i32 %13, 10, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 3, !dbg !12
  %17 = and i32 %16, 1016, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 4, !dbg !13
  %20 = srem i32 %18, 728, !dbg !14
  %21 = srem i32 %19, 728, !dbg !14
  %22 = sext i32 %18 to i64, !dbg !15
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !15
  %24 = sext i32 %19 to i64, !dbg !15
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !15
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #4, !dbg !16
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #4, !dbg !16
  %28 = sext i32 %20 to i64, !dbg !17
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !17
  %30 = sext i32 %21 to i64, !dbg !17
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !17
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #4, !dbg !18
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #4, !dbg !18
  %34 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !19
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !19
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #4, !dbg !20
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !20
  %38 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !21
  %39 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !21
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #4, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !22
  %45 = bitcast i32 %41 to float, !dbg !22
  %46 = bitcast i32 %42 to float, !dbg !22
  %47 = bitcast i32 %43 to float, !dbg !22
  %48 = bitcast i32 %44 to float, !dbg !22
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !22
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !22
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !22
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !22
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !22
  %54 = bitcast i32 %50 to float, !dbg !22
  %55 = bitcast i32 %51 to float, !dbg !22
  %56 = bitcast i32 %52 to float, !dbg !22
  %57 = bitcast i32 %53 to float, !dbg !22
  %58 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !23
  %59 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !23
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #4, !dbg !24
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #4, !dbg !24
  %62 = getelementptr float, ptr addrspace(1) %7, i64 %28, !dbg !25
  %63 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !25
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !26
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #4, !dbg !26
  %66 = add i32 %18, -12376, !dbg !27
  %67 = add i32 %18, -12372, !dbg !27
  %68 = sext i32 %66 to i64, !dbg !28
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %68, !dbg !28
  %70 = sext i32 %67 to i64, !dbg !28
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %70, !dbg !28
  %72 = add i32 %18, -11648, !dbg !29
  %73 = add i32 %18, -11644, !dbg !29
  %74 = sext i32 %72 to i64, !dbg !30
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %74, !dbg !30
  %76 = sext i32 %73 to i64, !dbg !30
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %76, !dbg !30
  %78 = add i32 %18, -10920, !dbg !31
  %79 = add i32 %18, -10916, !dbg !31
  %80 = sext i32 %78 to i64, !dbg !32
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %80, !dbg !32
  %82 = sext i32 %79 to i64, !dbg !32
  %83 = getelementptr float, ptr addrspace(1) %2, i64 %82, !dbg !32
  %84 = add i32 %18, -728, !dbg !33
  %85 = add i32 %18, -724, !dbg !33
  %86 = sext i32 %84 to i64, !dbg !34
  %87 = getelementptr float, ptr addrspace(1) %2, i64 %86, !dbg !34
  %88 = sext i32 %85 to i64, !dbg !34
  %89 = getelementptr float, ptr addrspace(1) %2, i64 %88, !dbg !34
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !35
  %91 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !35
  %92 = add i32 %18, 728, !dbg !36
  %93 = add i32 %18, 732, !dbg !36
  %94 = sext i32 %92 to i64, !dbg !37
  %95 = getelementptr float, ptr addrspace(1) %2, i64 %94, !dbg !37
  %96 = sext i32 %93 to i64, !dbg !37
  %97 = getelementptr float, ptr addrspace(1) %2, i64 %96, !dbg !37
  %98 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !38
  %99 = shufflevector <2 x i32> %98, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !38
  %100 = sdiv <2 x i32> %99, <i32 11648, i32 728>, !dbg !38
  %101 = srem <2 x i32> %100, splat (i32 16), !dbg !39
  %102 = extractelement <2 x i32> %101, i64 0, !dbg !40
  %103 = icmp sgt i32 %102, 0, !dbg !41
  %104 = extractelement <2 x i32> %101, i64 1, !dbg !40
  %105 = icmp sgt i32 %104, 0, !dbg !42
  %106 = and i1 %103, %105, !dbg !43
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %69, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106) #4, !dbg !44
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %71, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106, i32 -8388608, i1 %106) #4, !dbg !44
  %109 = icmp sgt i32 %104, -1, !dbg !45
  %110 = and i1 %103, %109, !dbg !46
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %75, i1 %110, i32 -8388608, i1 %110, i32 -8388608, i1 %110, i32 -8388608, i1 %110, i32 -8388608, i1 %110) #4, !dbg !47
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %77, i1 %110, i32 -8388608, i1 %110, i32 -8388608, i1 %110, i32 -8388608, i1 %110, i32 -8388608, i1 %110) #4, !dbg !47
  %113 = add nsw <2 x i32> %101, splat (i32 1), !dbg !48
  %114 = extractelement <2 x i32> %113, i64 1, !dbg !49
  %115 = icmp ult i32 %114, 16, !dbg !50
  %116 = and i1 %103, %115, !dbg !51
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %81, i1 %116, i32 -8388608, i1 %116, i32 -8388608, i1 %116, i32 -8388608, i1 %116, i32 -8388608, i1 %116) #4, !dbg !52
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 %116, i32 -8388608, i1 %116, i32 -8388608, i1 %116, i32 -8388608, i1 %116, i32 -8388608, i1 %116) #4, !dbg !52
  %119 = icmp sgt i32 %102, -1, !dbg !53
  %120 = and i1 %119, %105, !dbg !54
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %87, i1 %120, i32 -8388608, i1 %120, i32 -8388608, i1 %120, i32 -8388608, i1 %120, i32 -8388608, i1 %120) #4, !dbg !55
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %89, i1 %120, i32 -8388608, i1 %120, i32 -8388608, i1 %120, i32 -8388608, i1 %120, i32 -8388608, i1 %120) #4, !dbg !55
  %123 = or i32 %102, %104, !dbg !40
  %124 = icmp sgt i32 %123, -1, !dbg !40
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %90, i1 %124, i32 -8388608, i1 %124, i32 -8388608, i1 %124, i32 -8388608, i1 %124, i32 -8388608, i1 %124) #4, !dbg !56
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %91, i1 %124, i32 -8388608, i1 %124, i32 -8388608, i1 %124, i32 -8388608, i1 %124, i32 -8388608, i1 %124) #4, !dbg !56
  %127 = and i1 %119, %115, !dbg !57
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %95, i1 %127, i32 -8388608, i1 %127, i32 -8388608, i1 %127, i32 -8388608, i1 %127, i32 -8388608, i1 %127) #4, !dbg !58
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %97, i1 %127, i32 -8388608, i1 %127, i32 -8388608, i1 %127, i32 -8388608, i1 %127, i32 -8388608, i1 %127) #4, !dbg !58
  %130 = extractelement <2 x i32> %113, i64 0, !dbg !49
  %131 = icmp ult i32 %130, 16, !dbg !48
  %132 = and i1 %105, %131, !dbg !59
  %133 = add i32 %18, 10920, !dbg !60
  %134 = add i32 %18, 10924, !dbg !60
  %135 = sext i32 %133 to i64, !dbg !61
  %136 = getelementptr float, ptr addrspace(1) %2, i64 %135, !dbg !61
  %137 = sext i32 %134 to i64, !dbg !61
  %138 = getelementptr float, ptr addrspace(1) %2, i64 %137, !dbg !61
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %136, i1 %132, i32 -8388608, i1 %132, i32 -8388608, i1 %132, i32 -8388608, i1 %132, i32 -8388608, i1 %132) #4, !dbg !62
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %138, i1 %132, i32 -8388608, i1 %132, i32 -8388608, i1 %132, i32 -8388608, i1 %132, i32 -8388608, i1 %132) #4, !dbg !62
  %141 = and i1 %109, %131, !dbg !63
  %142 = add i32 %18, 11648, !dbg !64
  %143 = add i32 %18, 11652, !dbg !64
  %144 = sext i32 %142 to i64, !dbg !65
  %145 = getelementptr float, ptr addrspace(1) %2, i64 %144, !dbg !65
  %146 = sext i32 %143 to i64, !dbg !65
  %147 = getelementptr float, ptr addrspace(1) %2, i64 %146, !dbg !65
  %148 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %145, i1 %141, i32 -8388608, i1 %141, i32 -8388608, i1 %141, i32 -8388608, i1 %141, i32 -8388608, i1 %141) #4, !dbg !66
  %149 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %147, i1 %141, i32 -8388608, i1 %141, i32 -8388608, i1 %141, i32 -8388608, i1 %141, i32 -8388608, i1 %141) #4, !dbg !66
  %150 = or i32 %130, %114, !dbg !49
  %151 = icmp ult i32 %150, 16, !dbg !49
  %152 = add i32 %18, 12376, !dbg !67
  %153 = add i32 %18, 12380, !dbg !67
  %154 = sext i32 %152 to i64, !dbg !68
  %155 = getelementptr float, ptr addrspace(1) %2, i64 %154, !dbg !68
  %156 = sext i32 %153 to i64, !dbg !68
  %157 = getelementptr float, ptr addrspace(1) %2, i64 %156, !dbg !68
  %158 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %155, i1 %151, i32 -8388608, i1 %151, i32 -8388608, i1 %151, i32 -8388608, i1 %151, i32 -8388608, i1 %151) #4, !dbg !69
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %157, i1 %151, i32 -8388608, i1 %151, i32 -8388608, i1 %151, i32 -8388608, i1 %151, i32 -8388608, i1 %151) #4, !dbg !69
  %160 = fadd float %45, 0x3EE4F8B580000000, !dbg !70
  %161 = fadd float %46, 0x3EE4F8B580000000, !dbg !70
  %162 = fadd float %47, 0x3EE4F8B580000000, !dbg !70
  %163 = fadd float %48, 0x3EE4F8B580000000, !dbg !70
  %164 = fadd float %54, 0x3EE4F8B580000000, !dbg !70
  %165 = fadd float %55, 0x3EE4F8B580000000, !dbg !70
  %166 = fadd float %56, 0x3EE4F8B580000000, !dbg !70
  %167 = fadd float %57, 0x3EE4F8B580000000, !dbg !70
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %.not.i = icmp eq i32 %168, 0, !dbg !71
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !71
  %.not1.i = icmp eq i32 %169, 0, !dbg !71
  br i1 %.not.i, label %175, label %170, !dbg !71

170:                                              ; preds = %12
  br i1 %.not1.i, label %173, label %171, !dbg !71

171:                                              ; preds = %170
  %172 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %160) #4, !dbg !71
  br label %__nv_sqrtf.exit, !dbg !71

173:                                              ; preds = %170
  %174 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %160) #4, !dbg !71
  br label %__nv_sqrtf.exit, !dbg !71

175:                                              ; preds = %12
  br i1 %.not1.i, label %178, label %176, !dbg !71

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.f(float %160) #4, !dbg !71
  br label %__nv_sqrtf.exit, !dbg !71

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.f(float %160) #4, !dbg !71
  br label %__nv_sqrtf.exit, !dbg !71

__nv_sqrtf.exit:                                  ; preds = %171, %173, %176, %178
  %.0.i = phi float [ %172, %171 ], [ %174, %173 ], [ %177, %176 ], [ %179, %178 ], !dbg !71
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %.not.i60 = icmp eq i32 %180, 0, !dbg !71
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !71
  %.not1.i63 = icmp eq i32 %181, 0, !dbg !71
  br i1 %.not.i60, label %187, label %182, !dbg !71

182:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i63, label %185, label %183, !dbg !71

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %161) #4, !dbg !71
  br label %__nv_sqrtf.exit64, !dbg !71

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %161) #4, !dbg !71
  br label %__nv_sqrtf.exit64, !dbg !71

187:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i63, label %190, label %188, !dbg !71

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.f(float %161) #4, !dbg !71
  br label %__nv_sqrtf.exit64, !dbg !71

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.f(float %161) #4, !dbg !71
  br label %__nv_sqrtf.exit64, !dbg !71

__nv_sqrtf.exit64:                                ; preds = %183, %185, %188, %190
  %.0.i62 = phi float [ %184, %183 ], [ %186, %185 ], [ %189, %188 ], [ %191, %190 ], !dbg !71
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %.not.i65 = icmp eq i32 %192, 0, !dbg !71
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !71
  %.not1.i68 = icmp eq i32 %193, 0, !dbg !71
  br i1 %.not.i65, label %199, label %194, !dbg !71

194:                                              ; preds = %__nv_sqrtf.exit64
  br i1 %.not1.i68, label %197, label %195, !dbg !71

195:                                              ; preds = %194
  %196 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %162) #4, !dbg !71
  br label %__nv_sqrtf.exit69, !dbg !71

197:                                              ; preds = %194
  %198 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %162) #4, !dbg !71
  br label %__nv_sqrtf.exit69, !dbg !71

199:                                              ; preds = %__nv_sqrtf.exit64
  br i1 %.not1.i68, label %202, label %200, !dbg !71

200:                                              ; preds = %199
  %201 = tail call float @llvm.nvvm.sqrt.rn.f(float %162) #4, !dbg !71
  br label %__nv_sqrtf.exit69, !dbg !71

202:                                              ; preds = %199
  %203 = tail call float @llvm.nvvm.sqrt.approx.f(float %162) #4, !dbg !71
  br label %__nv_sqrtf.exit69, !dbg !71

__nv_sqrtf.exit69:                                ; preds = %195, %197, %200, %202
  %.0.i67 = phi float [ %196, %195 ], [ %198, %197 ], [ %201, %200 ], [ %203, %202 ], !dbg !71
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %.not.i70 = icmp eq i32 %204, 0, !dbg !71
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !71
  %.not1.i73 = icmp eq i32 %205, 0, !dbg !71
  br i1 %.not.i70, label %211, label %206, !dbg !71

206:                                              ; preds = %__nv_sqrtf.exit69
  br i1 %.not1.i73, label %209, label %207, !dbg !71

207:                                              ; preds = %206
  %208 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %163) #4, !dbg !71
  br label %__nv_sqrtf.exit74, !dbg !71

209:                                              ; preds = %206
  %210 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %163) #4, !dbg !71
  br label %__nv_sqrtf.exit74, !dbg !71

211:                                              ; preds = %__nv_sqrtf.exit69
  br i1 %.not1.i73, label %214, label %212, !dbg !71

212:                                              ; preds = %211
  %213 = tail call float @llvm.nvvm.sqrt.rn.f(float %163) #4, !dbg !71
  br label %__nv_sqrtf.exit74, !dbg !71

214:                                              ; preds = %211
  %215 = tail call float @llvm.nvvm.sqrt.approx.f(float %163) #4, !dbg !71
  br label %__nv_sqrtf.exit74, !dbg !71

__nv_sqrtf.exit74:                                ; preds = %207, %209, %212, %214
  %.0.i72 = phi float [ %208, %207 ], [ %210, %209 ], [ %213, %212 ], [ %215, %214 ], !dbg !71
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %.not.i75 = icmp eq i32 %216, 0, !dbg !71
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !71
  %.not1.i78 = icmp eq i32 %217, 0, !dbg !71
  br i1 %.not.i75, label %223, label %218, !dbg !71

218:                                              ; preds = %__nv_sqrtf.exit74
  br i1 %.not1.i78, label %221, label %219, !dbg !71

219:                                              ; preds = %218
  %220 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %164) #4, !dbg !71
  br label %__nv_sqrtf.exit79, !dbg !71

221:                                              ; preds = %218
  %222 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %164) #4, !dbg !71
  br label %__nv_sqrtf.exit79, !dbg !71

223:                                              ; preds = %__nv_sqrtf.exit74
  br i1 %.not1.i78, label %226, label %224, !dbg !71

224:                                              ; preds = %223
  %225 = tail call float @llvm.nvvm.sqrt.rn.f(float %164) #4, !dbg !71
  br label %__nv_sqrtf.exit79, !dbg !71

226:                                              ; preds = %223
  %227 = tail call float @llvm.nvvm.sqrt.approx.f(float %164) #4, !dbg !71
  br label %__nv_sqrtf.exit79, !dbg !71

__nv_sqrtf.exit79:                                ; preds = %219, %221, %224, %226
  %.0.i77 = phi float [ %220, %219 ], [ %222, %221 ], [ %225, %224 ], [ %227, %226 ], !dbg !71
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %.not.i80 = icmp eq i32 %228, 0, !dbg !71
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !71
  %.not1.i83 = icmp eq i32 %229, 0, !dbg !71
  br i1 %.not.i80, label %235, label %230, !dbg !71

230:                                              ; preds = %__nv_sqrtf.exit79
  br i1 %.not1.i83, label %233, label %231, !dbg !71

231:                                              ; preds = %230
  %232 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %165) #4, !dbg !71
  br label %__nv_sqrtf.exit84, !dbg !71

233:                                              ; preds = %230
  %234 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %165) #4, !dbg !71
  br label %__nv_sqrtf.exit84, !dbg !71

235:                                              ; preds = %__nv_sqrtf.exit79
  br i1 %.not1.i83, label %238, label %236, !dbg !71

236:                                              ; preds = %235
  %237 = tail call float @llvm.nvvm.sqrt.rn.f(float %165) #4, !dbg !71
  br label %__nv_sqrtf.exit84, !dbg !71

238:                                              ; preds = %235
  %239 = tail call float @llvm.nvvm.sqrt.approx.f(float %165) #4, !dbg !71
  br label %__nv_sqrtf.exit84, !dbg !71

__nv_sqrtf.exit84:                                ; preds = %231, %233, %236, %238
  %.0.i82 = phi float [ %232, %231 ], [ %234, %233 ], [ %237, %236 ], [ %239, %238 ], !dbg !71
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %.not.i85 = icmp eq i32 %240, 0, !dbg !71
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !71
  %.not1.i88 = icmp eq i32 %241, 0, !dbg !71
  br i1 %.not.i85, label %247, label %242, !dbg !71

242:                                              ; preds = %__nv_sqrtf.exit84
  br i1 %.not1.i88, label %245, label %243, !dbg !71

243:                                              ; preds = %242
  %244 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %166) #4, !dbg !71
  br label %__nv_sqrtf.exit89, !dbg !71

245:                                              ; preds = %242
  %246 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %166) #4, !dbg !71
  br label %__nv_sqrtf.exit89, !dbg !71

247:                                              ; preds = %__nv_sqrtf.exit84
  br i1 %.not1.i88, label %250, label %248, !dbg !71

248:                                              ; preds = %247
  %249 = tail call float @llvm.nvvm.sqrt.rn.f(float %166) #4, !dbg !71
  br label %__nv_sqrtf.exit89, !dbg !71

250:                                              ; preds = %247
  %251 = tail call float @llvm.nvvm.sqrt.approx.f(float %166) #4, !dbg !71
  br label %__nv_sqrtf.exit89, !dbg !71

__nv_sqrtf.exit89:                                ; preds = %243, %245, %248, %250
  %.0.i87 = phi float [ %244, %243 ], [ %246, %245 ], [ %249, %248 ], [ %251, %250 ], !dbg !71
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %.not.i90 = icmp eq i32 %252, 0, !dbg !71
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !71
  %.not1.i93 = icmp eq i32 %253, 0, !dbg !71
  br i1 %.not.i90, label %259, label %254, !dbg !71

254:                                              ; preds = %__nv_sqrtf.exit89
  br i1 %.not1.i93, label %257, label %255, !dbg !71

255:                                              ; preds = %254
  %256 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %167) #4, !dbg !71
  br label %__nv_sqrtf.exit94, !dbg !71

257:                                              ; preds = %254
  %258 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %167) #4, !dbg !71
  br label %__nv_sqrtf.exit94, !dbg !71

259:                                              ; preds = %__nv_sqrtf.exit89
  br i1 %.not1.i93, label %262, label %260, !dbg !71

260:                                              ; preds = %259
  %261 = tail call float @llvm.nvvm.sqrt.rn.f(float %167) #4, !dbg !71
  br label %__nv_sqrtf.exit94, !dbg !71

262:                                              ; preds = %259
  %263 = tail call float @llvm.nvvm.sqrt.approx.f(float %167) #4, !dbg !71
  br label %__nv_sqrtf.exit94, !dbg !71

__nv_sqrtf.exit94:                                ; preds = %255, %257, %260, %262
  %.0.i92 = phi float [ %256, %255 ], [ %258, %257 ], [ %261, %260 ], [ %263, %262 ], !dbg !71
  %264 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !16
  %265 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !18
  %266 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !20
  %267 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !16
  %268 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !18
  %269 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !20
  %270 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !16
  %271 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !18
  %272 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !20
  %273 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !16
  %274 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !18
  %275 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !20
  %276 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !16
  %277 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !18
  %278 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !20
  %279 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !16
  %280 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !18
  %281 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !20
  %282 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !16
  %283 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !18
  %284 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !20
  %285 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !16
  %286 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !18
  %287 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !20
  %288 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !47
  %289 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !44
  %290 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !52
  %291 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !55
  %292 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !56
  %293 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !58
  %294 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !62
  %295 = extractvalue { i32, i32, i32, i32 } %149, 3, !dbg !66
  %296 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !69
  %297 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !47
  %298 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !44
  %299 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !52
  %300 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !55
  %301 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !56
  %302 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !58
  %303 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !62
  %304 = extractvalue { i32, i32, i32, i32 } %149, 2, !dbg !66
  %305 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !69
  %306 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !47
  %307 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !44
  %308 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !52
  %309 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !55
  %310 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !56
  %311 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !58
  %312 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !62
  %313 = extractvalue { i32, i32, i32, i32 } %149, 1, !dbg !66
  %314 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !69
  %315 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !47
  %316 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !44
  %317 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !52
  %318 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !55
  %319 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !56
  %320 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !58
  %321 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !62
  %322 = extractvalue { i32, i32, i32, i32 } %149, 0, !dbg !66
  %323 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !69
  %324 = insertelement <4 x i32> poison, i32 %315, i64 0, !dbg !47
  %325 = insertelement <4 x i32> %324, i32 %306, i64 1, !dbg !47
  %326 = insertelement <4 x i32> %325, i32 %297, i64 2, !dbg !47
  %327 = insertelement <4 x i32> %326, i32 %288, i64 3, !dbg !47
  %328 = bitcast <4 x i32> %327 to <4 x float>, !dbg !47
  %329 = insertelement <4 x i32> poison, i32 %316, i64 0, !dbg !44
  %330 = insertelement <4 x i32> %329, i32 %307, i64 1, !dbg !44
  %331 = insertelement <4 x i32> %330, i32 %298, i64 2, !dbg !44
  %332 = insertelement <4 x i32> %331, i32 %289, i64 3, !dbg !44
  %333 = bitcast <4 x i32> %332 to <4 x float>, !dbg !44
  %334 = fcmp ogt <4 x float> %328, %333, !dbg !72
  %335 = insertelement <4 x i32> poison, i32 %318, i64 0, !dbg !55
  %336 = insertelement <4 x i32> %335, i32 %309, i64 1, !dbg !55
  %337 = insertelement <4 x i32> %336, i32 %300, i64 2, !dbg !55
  %338 = insertelement <4 x i32> %337, i32 %291, i64 3, !dbg !55
  %339 = bitcast <4 x i32> %338 to <4 x float>, !dbg !55
  %340 = fcmp uno <4 x float> %328, zeroinitializer, !dbg !76
  %341 = or <4 x i1> %334, %340, !dbg !77
  %.v = select <4 x i1> %341, <4 x i32> %327, <4 x i32> %332, !dbg !78
  %342 = bitcast <4 x i32> %.v to <4 x float>, !dbg !78
  %343 = insertelement <4 x i32> poison, i32 %317, i64 0, !dbg !52
  %344 = insertelement <4 x i32> %343, i32 %308, i64 1, !dbg !52
  %345 = insertelement <4 x i32> %344, i32 %299, i64 2, !dbg !52
  %346 = insertelement <4 x i32> %345, i32 %290, i64 3, !dbg !52
  %347 = bitcast <4 x i32> %346 to <4 x float>, !dbg !52
  %348 = fcmp olt <4 x float> %342, %347, !dbg !79
  %349 = fcmp uno <4 x float> %347, zeroinitializer, !dbg !81
  %350 = or <4 x i1> %349, %348, !dbg !82
  %.v95 = select <4 x i1> %350, <4 x i32> %346, <4 x i32> %.v, !dbg !83
  %351 = bitcast <4 x i32> %.v95 to <4 x float>, !dbg !83
  %352 = fcmp olt <4 x float> %351, %339, !dbg !84
  %353 = insertelement <4 x i32> poison, i32 %319, i64 0, !dbg !56
  %354 = insertelement <4 x i32> %353, i32 %310, i64 1, !dbg !56
  %355 = insertelement <4 x i32> %354, i32 %301, i64 2, !dbg !56
  %356 = insertelement <4 x i32> %355, i32 %292, i64 3, !dbg !56
  %357 = bitcast <4 x i32> %356 to <4 x float>, !dbg !56
  %358 = fcmp uno <4 x float> %339, zeroinitializer, !dbg !86
  %359 = or <4 x i1> %358, %352, !dbg !87
  %.v96 = select <4 x i1> %359, <4 x i32> %338, <4 x i32> %.v95, !dbg !88
  %360 = bitcast <4 x i32> %.v96 to <4 x float>, !dbg !88
  %361 = fcmp olt <4 x float> %360, %357, !dbg !89
  %362 = fcmp uno <4 x float> %357, zeroinitializer, !dbg !91
  %363 = or <4 x i1> %362, %361, !dbg !92
  %.v97 = select <4 x i1> %363, <4 x i32> %356, <4 x i32> %.v96, !dbg !93
  %364 = bitcast <4 x i32> %.v97 to <4 x float>, !dbg !93
  %365 = insertelement <4 x i32> poison, i32 %320, i64 0, !dbg !58
  %366 = insertelement <4 x i32> %365, i32 %311, i64 1, !dbg !58
  %367 = insertelement <4 x i32> %366, i32 %302, i64 2, !dbg !58
  %368 = insertelement <4 x i32> %367, i32 %293, i64 3, !dbg !58
  %369 = bitcast <4 x i32> %368 to <4 x float>, !dbg !58
  %370 = fcmp olt <4 x float> %364, %369, !dbg !94
  %371 = fcmp uno <4 x float> %369, zeroinitializer, !dbg !96
  %372 = or <4 x i1> %371, %370, !dbg !97
  %.v98 = select <4 x i1> %372, <4 x i32> %368, <4 x i32> %.v97, !dbg !98
  %373 = bitcast <4 x i32> %.v98 to <4 x float>, !dbg !98
  %374 = insertelement <4 x i32> poison, i32 %321, i64 0, !dbg !62
  %375 = insertelement <4 x i32> %374, i32 %312, i64 1, !dbg !62
  %376 = insertelement <4 x i32> %375, i32 %303, i64 2, !dbg !62
  %377 = insertelement <4 x i32> %376, i32 %294, i64 3, !dbg !62
  %378 = bitcast <4 x i32> %377 to <4 x float>, !dbg !62
  %379 = fcmp olt <4 x float> %373, %378, !dbg !99
  %380 = fcmp uno <4 x float> %378, zeroinitializer, !dbg !101
  %381 = or <4 x i1> %380, %379, !dbg !102
  %.v99 = select <4 x i1> %381, <4 x i32> %377, <4 x i32> %.v98, !dbg !103
  %382 = bitcast <4 x i32> %.v99 to <4 x float>, !dbg !103
  %383 = insertelement <4 x i32> poison, i32 %322, i64 0, !dbg !66
  %384 = insertelement <4 x i32> %383, i32 %313, i64 1, !dbg !66
  %385 = insertelement <4 x i32> %384, i32 %304, i64 2, !dbg !66
  %386 = insertelement <4 x i32> %385, i32 %295, i64 3, !dbg !66
  %387 = bitcast <4 x i32> %386 to <4 x float>, !dbg !66
  %388 = fcmp olt <4 x float> %382, %387, !dbg !104
  %389 = fcmp uno <4 x float> %387, zeroinitializer, !dbg !106
  %390 = or <4 x i1> %389, %388, !dbg !107
  %.v100 = select <4 x i1> %390, <4 x i32> %386, <4 x i32> %.v99, !dbg !108
  %391 = bitcast <4 x i32> %.v100 to <4 x float>, !dbg !108
  %392 = insertelement <4 x i32> poison, i32 %323, i64 0, !dbg !69
  %393 = insertelement <4 x i32> %392, i32 %314, i64 1, !dbg !69
  %394 = insertelement <4 x i32> %393, i32 %305, i64 2, !dbg !69
  %395 = insertelement <4 x i32> %394, i32 %296, i64 3, !dbg !69
  %396 = bitcast <4 x i32> %395 to <4 x float>, !dbg !69
  %397 = fcmp olt <4 x float> %391, %396, !dbg !109
  %398 = zext <4 x i1> %334 to <4 x i8>, !dbg !111
  %399 = select <4 x i1> %348, <4 x i8> splat (i8 2), <4 x i8> %398, !dbg !112
  %400 = select <4 x i1> %352, <4 x i8> splat (i8 3), <4 x i8> %399, !dbg !113
  %401 = select <4 x i1> %361, <4 x i8> splat (i8 4), <4 x i8> %400, !dbg !114
  %402 = select <4 x i1> %370, <4 x i8> splat (i8 5), <4 x i8> %401, !dbg !115
  %403 = select <4 x i1> %379, <4 x i8> splat (i8 6), <4 x i8> %402, !dbg !116
  %404 = select <4 x i1> %388, <4 x i8> splat (i8 7), <4 x i8> %403, !dbg !117
  %405 = select <4 x i1> %397, <4 x i8> splat (i8 8), <4 x i8> %404, !dbg !118
  %406 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !47
  %407 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !44
  %408 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !52
  %409 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !55
  %410 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !56
  %411 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !58
  %412 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !62
  %413 = extractvalue { i32, i32, i32, i32 } %148, 3, !dbg !66
  %414 = extractvalue { i32, i32, i32, i32 } %158, 3, !dbg !69
  %415 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !47
  %416 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !44
  %417 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !52
  %418 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !55
  %419 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !56
  %420 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !58
  %421 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !62
  %422 = extractvalue { i32, i32, i32, i32 } %148, 2, !dbg !66
  %423 = extractvalue { i32, i32, i32, i32 } %158, 2, !dbg !69
  %424 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !47
  %425 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !44
  %426 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !52
  %427 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !55
  %428 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !56
  %429 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !58
  %430 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !62
  %431 = extractvalue { i32, i32, i32, i32 } %148, 1, !dbg !66
  %432 = extractvalue { i32, i32, i32, i32 } %158, 1, !dbg !69
  %433 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !47
  %434 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !44
  %435 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !52
  %436 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !55
  %437 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !56
  %438 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !58
  %439 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !62
  %440 = extractvalue { i32, i32, i32, i32 } %148, 0, !dbg !66
  %441 = extractvalue { i32, i32, i32, i32 } %158, 0, !dbg !69
  %442 = insertelement <4 x i32> poison, i32 %433, i64 0, !dbg !47
  %443 = insertelement <4 x i32> %442, i32 %424, i64 1, !dbg !47
  %444 = insertelement <4 x i32> %443, i32 %415, i64 2, !dbg !47
  %445 = insertelement <4 x i32> %444, i32 %406, i64 3, !dbg !47
  %446 = bitcast <4 x i32> %445 to <4 x float>, !dbg !47
  %447 = insertelement <4 x i32> poison, i32 %434, i64 0, !dbg !44
  %448 = insertelement <4 x i32> %447, i32 %425, i64 1, !dbg !44
  %449 = insertelement <4 x i32> %448, i32 %416, i64 2, !dbg !44
  %450 = insertelement <4 x i32> %449, i32 %407, i64 3, !dbg !44
  %451 = bitcast <4 x i32> %450 to <4 x float>, !dbg !44
  %452 = fcmp ogt <4 x float> %446, %451, !dbg !72
  %453 = insertelement <4 x i32> poison, i32 %436, i64 0, !dbg !55
  %454 = insertelement <4 x i32> %453, i32 %427, i64 1, !dbg !55
  %455 = insertelement <4 x i32> %454, i32 %418, i64 2, !dbg !55
  %456 = insertelement <4 x i32> %455, i32 %409, i64 3, !dbg !55
  %457 = bitcast <4 x i32> %456 to <4 x float>, !dbg !55
  %458 = fcmp uno <4 x float> %446, zeroinitializer, !dbg !76
  %459 = or <4 x i1> %452, %458, !dbg !77
  %.v101 = select <4 x i1> %459, <4 x i32> %445, <4 x i32> %450, !dbg !78
  %460 = bitcast <4 x i32> %.v101 to <4 x float>, !dbg !78
  %461 = insertelement <4 x i32> poison, i32 %435, i64 0, !dbg !52
  %462 = insertelement <4 x i32> %461, i32 %426, i64 1, !dbg !52
  %463 = insertelement <4 x i32> %462, i32 %417, i64 2, !dbg !52
  %464 = insertelement <4 x i32> %463, i32 %408, i64 3, !dbg !52
  %465 = bitcast <4 x i32> %464 to <4 x float>, !dbg !52
  %466 = fcmp olt <4 x float> %460, %465, !dbg !79
  %467 = fcmp uno <4 x float> %465, zeroinitializer, !dbg !81
  %468 = or <4 x i1> %467, %466, !dbg !82
  %.v102 = select <4 x i1> %468, <4 x i32> %464, <4 x i32> %.v101, !dbg !83
  %469 = bitcast <4 x i32> %.v102 to <4 x float>, !dbg !83
  %470 = fcmp olt <4 x float> %469, %457, !dbg !84
  %471 = insertelement <4 x i32> poison, i32 %437, i64 0, !dbg !56
  %472 = insertelement <4 x i32> %471, i32 %428, i64 1, !dbg !56
  %473 = insertelement <4 x i32> %472, i32 %419, i64 2, !dbg !56
  %474 = insertelement <4 x i32> %473, i32 %410, i64 3, !dbg !56
  %475 = bitcast <4 x i32> %474 to <4 x float>, !dbg !56
  %476 = fcmp uno <4 x float> %457, zeroinitializer, !dbg !86
  %477 = or <4 x i1> %476, %470, !dbg !87
  %.v103 = select <4 x i1> %477, <4 x i32> %456, <4 x i32> %.v102, !dbg !88
  %478 = bitcast <4 x i32> %.v103 to <4 x float>, !dbg !88
  %479 = fcmp olt <4 x float> %478, %475, !dbg !89
  %480 = fcmp uno <4 x float> %475, zeroinitializer, !dbg !91
  %481 = or <4 x i1> %480, %479, !dbg !92
  %.v104 = select <4 x i1> %481, <4 x i32> %474, <4 x i32> %.v103, !dbg !93
  %482 = bitcast <4 x i32> %.v104 to <4 x float>, !dbg !93
  %483 = insertelement <4 x i32> poison, i32 %438, i64 0, !dbg !58
  %484 = insertelement <4 x i32> %483, i32 %429, i64 1, !dbg !58
  %485 = insertelement <4 x i32> %484, i32 %420, i64 2, !dbg !58
  %486 = insertelement <4 x i32> %485, i32 %411, i64 3, !dbg !58
  %487 = bitcast <4 x i32> %486 to <4 x float>, !dbg !58
  %488 = fcmp olt <4 x float> %482, %487, !dbg !94
  %489 = fcmp uno <4 x float> %487, zeroinitializer, !dbg !96
  %490 = or <4 x i1> %489, %488, !dbg !97
  %.v105 = select <4 x i1> %490, <4 x i32> %486, <4 x i32> %.v104, !dbg !98
  %491 = bitcast <4 x i32> %.v105 to <4 x float>, !dbg !98
  %492 = insertelement <4 x i32> poison, i32 %439, i64 0, !dbg !62
  %493 = insertelement <4 x i32> %492, i32 %430, i64 1, !dbg !62
  %494 = insertelement <4 x i32> %493, i32 %421, i64 2, !dbg !62
  %495 = insertelement <4 x i32> %494, i32 %412, i64 3, !dbg !62
  %496 = bitcast <4 x i32> %495 to <4 x float>, !dbg !62
  %497 = fcmp olt <4 x float> %491, %496, !dbg !99
  %498 = fcmp uno <4 x float> %496, zeroinitializer, !dbg !101
  %499 = or <4 x i1> %498, %497, !dbg !102
  %.v106 = select <4 x i1> %499, <4 x i32> %495, <4 x i32> %.v105, !dbg !103
  %500 = bitcast <4 x i32> %.v106 to <4 x float>, !dbg !103
  %501 = insertelement <4 x i32> poison, i32 %440, i64 0, !dbg !66
  %502 = insertelement <4 x i32> %501, i32 %431, i64 1, !dbg !66
  %503 = insertelement <4 x i32> %502, i32 %422, i64 2, !dbg !66
  %504 = insertelement <4 x i32> %503, i32 %413, i64 3, !dbg !66
  %505 = bitcast <4 x i32> %504 to <4 x float>, !dbg !66
  %506 = fcmp olt <4 x float> %500, %505, !dbg !104
  %507 = fcmp uno <4 x float> %505, zeroinitializer, !dbg !106
  %508 = or <4 x i1> %507, %506, !dbg !107
  %.v107 = select <4 x i1> %508, <4 x i32> %504, <4 x i32> %.v106, !dbg !108
  %509 = bitcast <4 x i32> %.v107 to <4 x float>, !dbg !108
  %510 = insertelement <4 x i32> poison, i32 %441, i64 0, !dbg !69
  %511 = insertelement <4 x i32> %510, i32 %432, i64 1, !dbg !69
  %512 = insertelement <4 x i32> %511, i32 %423, i64 2, !dbg !69
  %513 = insertelement <4 x i32> %512, i32 %414, i64 3, !dbg !69
  %514 = bitcast <4 x i32> %513 to <4 x float>, !dbg !69
  %515 = fcmp olt <4 x float> %509, %514, !dbg !109
  %516 = zext <4 x i1> %452 to <4 x i8>, !dbg !111
  %517 = select <4 x i1> %466, <4 x i8> splat (i8 2), <4 x i8> %516, !dbg !112
  %518 = select <4 x i1> %470, <4 x i8> splat (i8 3), <4 x i8> %517, !dbg !113
  %519 = select <4 x i1> %479, <4 x i8> splat (i8 4), <4 x i8> %518, !dbg !114
  %520 = select <4 x i1> %488, <4 x i8> splat (i8 5), <4 x i8> %519, !dbg !115
  %521 = select <4 x i1> %497, <4 x i8> splat (i8 6), <4 x i8> %520, !dbg !116
  %522 = select <4 x i1> %506, <4 x i8> splat (i8 7), <4 x i8> %521, !dbg !117
  %523 = select <4 x i1> %515, <4 x i8> splat (i8 8), <4 x i8> %522, !dbg !118
  %524 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !26
  %525 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !26
  %526 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !26
  %527 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !26
  %528 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !26
  %529 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !26
  %530 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !26
  %531 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !26
  %532 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !24
  %533 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !24
  %534 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !24
  %535 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !24
  %536 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !24
  %537 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !24
  %538 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !24
  %539 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !24
  %540 = shl i32 %15, 2, !dbg !12
  %541 = and i32 %540, 508, !dbg !12
  %542 = or disjoint i32 %541, 512, !dbg !12
  %543 = or disjoint i32 %14, %542, !dbg !13
  %544 = sext i32 %543 to i64, !dbg !15
  %545 = getelementptr float, ptr addrspace(1) %0, i64 %544, !dbg !15
  %546 = or disjoint i32 %14, %541, !dbg !13
  %547 = sext i32 %546 to i64, !dbg !15
  %548 = getelementptr float, ptr addrspace(1) %0, i64 %547, !dbg !15
  %549 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !119
  %550 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i62) #4, !dbg !119
  %551 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i67) #4, !dbg !119
  %552 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i72) #4, !dbg !119
  %553 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i77) #4, !dbg !119
  %554 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i82) #4, !dbg !119
  %555 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i87) #4, !dbg !119
  %556 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i92) #4, !dbg !119
  %557 = insertelement <8 x i32> poison, i32 %264, i64 0, !dbg !16
  %558 = insertelement <8 x i32> %557, i32 %267, i64 1, !dbg !16
  %559 = insertelement <8 x i32> %558, i32 %270, i64 2, !dbg !16
  %560 = insertelement <8 x i32> %559, i32 %273, i64 3, !dbg !16
  %561 = insertelement <8 x i32> %560, i32 %276, i64 4, !dbg !16
  %562 = insertelement <8 x i32> %561, i32 %279, i64 5, !dbg !16
  %563 = insertelement <8 x i32> %562, i32 %282, i64 6, !dbg !16
  %564 = insertelement <8 x i32> %563, i32 %285, i64 7, !dbg !16
  %565 = bitcast <8 x i32> %564 to <8 x float>, !dbg !16
  %566 = insertelement <8 x i32> poison, i32 %265, i64 0, !dbg !18
  %567 = insertelement <8 x i32> %566, i32 %268, i64 1, !dbg !18
  %568 = insertelement <8 x i32> %567, i32 %271, i64 2, !dbg !18
  %569 = insertelement <8 x i32> %568, i32 %274, i64 3, !dbg !18
  %570 = insertelement <8 x i32> %569, i32 %277, i64 4, !dbg !18
  %571 = insertelement <8 x i32> %570, i32 %280, i64 5, !dbg !18
  %572 = insertelement <8 x i32> %571, i32 %283, i64 6, !dbg !18
  %573 = insertelement <8 x i32> %572, i32 %286, i64 7, !dbg !18
  %574 = bitcast <8 x i32> %573 to <8 x float>, !dbg !18
  %575 = fadd <8 x float> %565, %574, !dbg !120
  %576 = insertelement <8 x i32> poison, i32 %266, i64 0, !dbg !20
  %577 = insertelement <8 x i32> %576, i32 %269, i64 1, !dbg !20
  %578 = insertelement <8 x i32> %577, i32 %272, i64 2, !dbg !20
  %579 = insertelement <8 x i32> %578, i32 %275, i64 3, !dbg !20
  %580 = insertelement <8 x i32> %579, i32 %278, i64 4, !dbg !20
  %581 = insertelement <8 x i32> %580, i32 %281, i64 5, !dbg !20
  %582 = insertelement <8 x i32> %581, i32 %284, i64 6, !dbg !20
  %583 = insertelement <8 x i32> %582, i32 %287, i64 7, !dbg !20
  %584 = bitcast <8 x i32> %583 to <8 x float>, !dbg !20
  %585 = fsub <8 x float> %575, %584, !dbg !121
  %586 = shufflevector <4 x float> %396, <4 x float> %514, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !122
  %587 = fcmp uno <8 x float> %586, zeroinitializer, !dbg !122
  %588 = shufflevector <4 x i1> %397, <4 x i1> %515, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !123
  %589 = or <8 x i1> %587, %588, !dbg !123
  %590 = shufflevector <4 x float> %391, <4 x float> %509, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !124
  %591 = select <8 x i1> %589, <8 x float> %586, <8 x float> %590, !dbg !124
  %592 = insertelement <8 x i32> poison, i32 %524, i64 0, !dbg !26
  %593 = insertelement <8 x i32> %592, i32 %525, i64 1, !dbg !26
  %594 = insertelement <8 x i32> %593, i32 %526, i64 2, !dbg !26
  %595 = insertelement <8 x i32> %594, i32 %527, i64 3, !dbg !26
  %596 = insertelement <8 x i32> %595, i32 %528, i64 4, !dbg !26
  %597 = insertelement <8 x i32> %596, i32 %529, i64 5, !dbg !26
  %598 = insertelement <8 x i32> %597, i32 %530, i64 6, !dbg !26
  %599 = insertelement <8 x i32> %598, i32 %531, i64 7, !dbg !26
  %600 = bitcast <8 x i32> %599 to <8 x float>, !dbg !26
  %601 = insertelement <8 x i32> poison, i32 %532, i64 0, !dbg !24
  %602 = insertelement <8 x i32> %601, i32 %533, i64 1, !dbg !24
  %603 = insertelement <8 x i32> %602, i32 %534, i64 2, !dbg !24
  %604 = insertelement <8 x i32> %603, i32 %535, i64 3, !dbg !24
  %605 = insertelement <8 x i32> %604, i32 %536, i64 4, !dbg !24
  %606 = insertelement <8 x i32> %605, i32 %537, i64 5, !dbg !24
  %607 = insertelement <8 x i32> %606, i32 %538, i64 6, !dbg !24
  %608 = insertelement <8 x i32> %607, i32 %539, i64 7, !dbg !24
  %609 = bitcast <8 x i32> %608 to <8 x float>, !dbg !24
  %610 = insertelement <8 x float> poison, float %556, i64 0, !dbg !125
  %611 = insertelement <8 x float> %610, float %555, i64 1, !dbg !125
  %612 = insertelement <8 x float> %611, float %554, i64 2, !dbg !125
  %613 = insertelement <8 x float> %612, float %553, i64 3, !dbg !125
  %614 = insertelement <8 x float> %613, float %552, i64 4, !dbg !125
  %615 = insertelement <8 x float> %614, float %551, i64 5, !dbg !125
  %616 = insertelement <8 x float> %615, float %550, i64 6, !dbg !125
  %617 = insertelement <8 x float> %616, float %549, i64 7, !dbg !125
  %618 = fmul <8 x float> %585, %617, !dbg !125
  %619 = fmul <8 x float> %618, %609, !dbg !126
  %620 = fadd <8 x float> %619, %600, !dbg !127
  %621 = fadd <8 x float> %591, %620, !dbg !128
  %622 = fcmp olt <8 x float> %621, zeroinitializer, !dbg !129
  %623 = extractelement <8 x i1> %622, i64 7, !dbg !131
  %624 = extractelement <8 x i1> %622, i64 6, !dbg !131
  %625 = extractelement <8 x i1> %622, i64 5, !dbg !131
  %626 = extractelement <8 x i1> %622, i64 4, !dbg !131
  %627 = extractelement <8 x i1> %622, i64 3, !dbg !131
  %628 = extractelement <8 x i1> %622, i64 2, !dbg !131
  %629 = extractelement <8 x i1> %622, i64 1, !dbg !131
  %630 = extractelement <8 x i1> %622, i64 0, !dbg !131
  %631 = getelementptr i8, ptr addrspace(1) %8, i64 %22, !dbg !132
  %632 = bitcast <4 x i8> %523 to i32, !dbg !133
  %633 = bitcast <4 x i8> %405 to i32, !dbg !133
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %632, i32 %633, ptr addrspace(1) %631, i1 true) #4, !dbg !133
  %634 = zext nneg i32 %17 to i64, !dbg !134
  %635 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %634, !dbg !134
  %bc = bitcast <8 x float> %575 to <8 x i32>, !dbg !134
  %636 = extractelement <8 x i32> %bc, i64 7, !dbg !134
  %bc108 = bitcast <8 x float> %575 to <8 x i32>, !dbg !134
  %637 = extractelement <8 x i32> %bc108, i64 6, !dbg !134
  %bc109 = bitcast <8 x float> %575 to <8 x i32>, !dbg !134
  %638 = extractelement <8 x i32> %bc109, i64 5, !dbg !134
  %bc110 = bitcast <8 x float> %575 to <8 x i32>, !dbg !134
  %639 = extractelement <8 x i32> %bc110, i64 4, !dbg !134
  %bc111 = bitcast <8 x float> %575 to <8 x i32>, !dbg !134
  %640 = extractelement <8 x i32> %bc111, i64 3, !dbg !134
  %bc112 = bitcast <8 x float> %575 to <8 x i32>, !dbg !134
  %641 = extractelement <8 x i32> %bc112, i64 2, !dbg !134
  %bc113 = bitcast <8 x float> %575 to <8 x i32>, !dbg !134
  %642 = extractelement <8 x i32> %bc113, i64 1, !dbg !134
  %bc114 = bitcast <8 x float> %575 to <8 x i32>, !dbg !134
  %643 = extractelement <8 x i32> %bc114, i64 0, !dbg !134
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %635, i32 %636, i32 %637, i32 %638, i32 %639, i1 true) #4, !dbg !134
  %644 = getelementptr inbounds i8, ptr addrspace(3) %635, i64 16, !dbg !134
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %644, i32 %640, i32 %641, i32 %642, i32 %643, i1 true) #4, !dbg !134
  tail call void @llvm.nvvm.barrier0(), !dbg !134
  %645 = zext nneg i32 %541 to i64, !dbg !134
  %646 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %645, !dbg !134
  %647 = zext nneg i32 %542 to i64, !dbg !134
  %648 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %647, !dbg !134
  %649 = load <4 x i32>, ptr addrspace(3) %648, align 16, !dbg !134
  %.extract = load i32, ptr addrspace(3) %646, align 16, !dbg !134
  %650 = getelementptr inbounds i8, ptr addrspace(3) %646, i64 4, !dbg !134
  %.extract8 = load i32, ptr addrspace(3) %650, align 4, !dbg !134
  %651 = getelementptr inbounds i8, ptr addrspace(3) %646, i64 8, !dbg !134
  %.extract9 = load i32, ptr addrspace(3) %651, align 8, !dbg !134
  %652 = getelementptr inbounds i8, ptr addrspace(3) %646, i64 12, !dbg !134
  %.extract10 = load i32, ptr addrspace(3) %652, align 4, !dbg !134
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %548, i1 true) #4, !dbg !134
  %.extract11 = extractelement <4 x i32> %649, i64 0, !dbg !134
  %.extract12 = extractelement <4 x i32> %649, i64 1, !dbg !134
  %.extract13 = extractelement <4 x i32> %649, i64 2, !dbg !134
  %.extract14 = extractelement <4 x i32> %649, i64 3, !dbg !134
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %545, i1 true) #4, !dbg !134
  %653 = getelementptr float, ptr addrspace(1) %1, i64 %547, !dbg !135
  %654 = getelementptr float, ptr addrspace(1) %1, i64 %544, !dbg !135
  tail call void @llvm.nvvm.barrier0(), !dbg !136
  %bc115 = bitcast <8 x float> %621 to <8 x i32>, !dbg !136
  %655 = extractelement <8 x i32> %bc115, i64 7, !dbg !136
  %656 = select i1 %623, i32 0, i32 %655, !dbg !131
  %bc116 = bitcast <8 x float> %621 to <8 x i32>, !dbg !136
  %657 = extractelement <8 x i32> %bc116, i64 6, !dbg !136
  %658 = select i1 %624, i32 0, i32 %657, !dbg !131
  %bc117 = bitcast <8 x float> %621 to <8 x i32>, !dbg !136
  %659 = extractelement <8 x i32> %bc117, i64 5, !dbg !136
  %660 = select i1 %625, i32 0, i32 %659, !dbg !131
  %bc118 = bitcast <8 x float> %621 to <8 x i32>, !dbg !136
  %661 = extractelement <8 x i32> %bc118, i64 4, !dbg !136
  %662 = select i1 %626, i32 0, i32 %661, !dbg !131
  %bc119 = bitcast <8 x float> %621 to <8 x i32>, !dbg !136
  %663 = extractelement <8 x i32> %bc119, i64 3, !dbg !136
  %664 = select i1 %627, i32 0, i32 %663, !dbg !131
  %bc120 = bitcast <8 x float> %621 to <8 x i32>, !dbg !136
  %665 = extractelement <8 x i32> %bc120, i64 2, !dbg !136
  %666 = select i1 %628, i32 0, i32 %665, !dbg !131
  %bc121 = bitcast <8 x float> %621 to <8 x i32>, !dbg !136
  %667 = extractelement <8 x i32> %bc121, i64 1, !dbg !136
  %668 = select i1 %629, i32 0, i32 %667, !dbg !131
  %bc122 = bitcast <8 x float> %621 to <8 x i32>, !dbg !136
  %669 = extractelement <8 x i32> %bc122, i64 0, !dbg !136
  %670 = select i1 %630, i32 0, i32 %669, !dbg !131
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %635, i32 %656, i32 %658, i32 %660, i32 %662, i1 true) #4, !dbg !136
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %644, i32 %664, i32 %666, i32 %668, i32 %670, i1 true) #4, !dbg !136
  tail call void @llvm.nvvm.barrier0(), !dbg !136
  %671 = load <4 x i32>, ptr addrspace(3) %648, align 16, !dbg !136
  %.extract22 = load i32, ptr addrspace(3) %646, align 16, !dbg !136
  %.extract23 = load i32, ptr addrspace(3) %650, align 4, !dbg !136
  %.extract24 = load i32, ptr addrspace(3) %651, align 8, !dbg !136
  %.extract25 = load i32, ptr addrspace(3) %652, align 4, !dbg !136
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %653, i1 true) #4, !dbg !136
  %.extract26 = extractelement <4 x i32> %671, i64 0, !dbg !136
  %.extract27 = extractelement <4 x i32> %671, i64 1, !dbg !136
  %.extract28 = extractelement <4 x i32> %671, i64 2, !dbg !136
  %.extract29 = extractelement <4 x i32> %671, i64 3, !dbg !136
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %654, i1 true) #4, !dbg !136
  %672 = getelementptr float, ptr addrspace(1) %9, i64 %547, !dbg !137
  %673 = getelementptr float, ptr addrspace(1) %9, i64 %544, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !138
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %635, i32 %656, i32 %658, i32 %660, i32 %662, i1 true) #4, !dbg !138
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %644, i32 %664, i32 %666, i32 %668, i32 %670, i1 true) #4, !dbg !138
  tail call void @llvm.nvvm.barrier0(), !dbg !138
  %674 = load <4 x i32>, ptr addrspace(3) %648, align 16, !dbg !138
  %.extract37 = load i32, ptr addrspace(3) %646, align 16, !dbg !138
  %.extract38 = load i32, ptr addrspace(3) %650, align 4, !dbg !138
  %.extract39 = load i32, ptr addrspace(3) %651, align 8, !dbg !138
  %.extract40 = load i32, ptr addrspace(3) %652, align 4, !dbg !138
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract37, i32 %.extract38, i32 %.extract39, i32 %.extract40, ptr addrspace(1) %672, i1 true) #4, !dbg !138
  %.extract41 = extractelement <4 x i32> %674, i64 0, !dbg !138
  %.extract42 = extractelement <4 x i32> %674, i64 1, !dbg !138
  %.extract43 = extractelement <4 x i32> %674, i64 2, !dbg !138
  %.extract44 = extractelement <4 x i32> %674, i64 3, !dbg !138
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract41, i32 %.extract42, i32 %.extract43, i32 %.extract44, ptr addrspace(1) %673, i1 true) #4, !dbg !138
  %675 = getelementptr float, ptr addrspace(1) %10, i64 %547, !dbg !139
  %676 = getelementptr float, ptr addrspace(1) %10, i64 %544, !dbg !139
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %635, i32 %656, i32 %658, i32 %660, i32 %662, i1 true) #4, !dbg !140
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %644, i32 %664, i32 %666, i32 %668, i32 %670, i1 true) #4, !dbg !140
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %677 = load <4 x i32>, ptr addrspace(3) %648, align 16, !dbg !140
  %.extract52 = load i32, ptr addrspace(3) %646, align 16, !dbg !140
  %.extract53 = load i32, ptr addrspace(3) %650, align 4, !dbg !140
  %.extract54 = load i32, ptr addrspace(3) %651, align 8, !dbg !140
  %.extract55 = load i32, ptr addrspace(3) %652, align 4, !dbg !140
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract52, i32 %.extract53, i32 %.extract54, i32 %.extract55, ptr addrspace(1) %675, i1 true) #4, !dbg !140
  %.extract56 = extractelement <4 x i32> %677, i64 0, !dbg !140
  %.extract57 = extractelement <4 x i32> %677, i64 1, !dbg !140
  %.extract58 = extractelement <4 x i32> %677, i64 2, !dbg !140
  %.extract59 = extractelement <4 x i32> %677, i64 3, !dbg !140
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract56, i32 %.extract57, i32 %.extract58, i32 %.extract59, ptr addrspace(1) %676, i1 true) #4, !dbg !140
  ret void, !dbg !141
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3ze6swlpyn23y6pixsnpobajf5jz2kfa465a2hklduyrezydpo6.py", directory: "inductor_cache/3z")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 27, column: 19, scope: !7)
!15 = !DILocation(line: 28, column: 35, scope: !7)
!16 = !DILocation(line: 28, column: 40, scope: !7)
!17 = !DILocation(line: 29, column: 31, scope: !7)
!18 = !DILocation(line: 29, column: 36, scope: !7)
!19 = !DILocation(line: 30, column: 31, scope: !7)
!20 = !DILocation(line: 30, column: 36, scope: !7)
!21 = !DILocation(line: 31, column: 31, scope: !7)
!22 = !DILocation(line: 31, column: 36, scope: !7)
!23 = !DILocation(line: 32, column: 31, scope: !7)
!24 = !DILocation(line: 32, column: 36, scope: !7)
!25 = !DILocation(line: 33, column: 31, scope: !7)
!26 = !DILocation(line: 33, column: 36, scope: !7)
!27 = !DILocation(line: 45, column: 42, scope: !7)
!28 = !DILocation(line: 45, column: 31, scope: !7)
!29 = !DILocation(line: 51, column: 42, scope: !7)
!30 = !DILocation(line: 51, column: 31, scope: !7)
!31 = !DILocation(line: 58, column: 42, scope: !7)
!32 = !DILocation(line: 58, column: 31, scope: !7)
!33 = !DILocation(line: 65, column: 40, scope: !7)
!34 = !DILocation(line: 65, column: 31, scope: !7)
!35 = !DILocation(line: 68, column: 31, scope: !7)
!36 = !DILocation(line: 71, column: 37, scope: !7)
!37 = !DILocation(line: 71, column: 31, scope: !7)
!38 = !DILocation(line: 24, column: 21, scope: !7)
!39 = !DILocation(line: 24, column: 30, scope: !7)
!40 = !DILocation(line: 67, column: 20, scope: !7)
!41 = !DILocation(line: 36, column: 19, scope: !7)
!42 = !DILocation(line: 41, column: 19, scope: !7)
!43 = !DILocation(line: 44, column: 19, scope: !7)
!44 = !DILocation(line: 45, column: 47, scope: !7)
!45 = !DILocation(line: 47, column: 21, scope: !7)
!46 = !DILocation(line: 50, column: 19, scope: !7)
!47 = !DILocation(line: 51, column: 47, scope: !7)
!48 = !DILocation(line: 76, column: 20, scope: !7)
!49 = !DILocation(line: 83, column: 20, scope: !7)
!50 = !DILocation(line: 56, column: 20, scope: !7)
!51 = !DILocation(line: 57, column: 19, scope: !7)
!52 = !DILocation(line: 58, column: 47, scope: !7)
!53 = !DILocation(line: 61, column: 21, scope: !7)
!54 = !DILocation(line: 64, column: 20, scope: !7)
!55 = !DILocation(line: 65, column: 45, scope: !7)
!56 = !DILocation(line: 68, column: 36, scope: !7)
!57 = !DILocation(line: 70, column: 20, scope: !7)
!58 = !DILocation(line: 71, column: 42, scope: !7)
!59 = !DILocation(line: 77, column: 20, scope: !7)
!60 = !DILocation(line: 78, column: 39, scope: !7)
!61 = !DILocation(line: 78, column: 31, scope: !7)
!62 = !DILocation(line: 78, column: 44, scope: !7)
!63 = !DILocation(line: 80, column: 20, scope: !7)
!64 = !DILocation(line: 81, column: 39, scope: !7)
!65 = !DILocation(line: 81, column: 31, scope: !7)
!66 = !DILocation(line: 81, column: 44, scope: !7)
!67 = !DILocation(line: 84, column: 39, scope: !7)
!68 = !DILocation(line: 84, column: 31, scope: !7)
!69 = !DILocation(line: 84, column: 44, scope: !7)
!70 = !DILocation(line: 114, column: 20, scope: !7)
!71 = !DILocation(line: 115, column: 27, scope: !7)
!72 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !75)
!73 = distinct !DILexicalBlockFile(scope: !7, file: !74, discriminator: 0)
!74 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!75 = !DILocation(line: 52, column: 42, scope: !7)
!76 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !75)
!77 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !75)
!78 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !75)
!79 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !80)
!80 = !DILocation(line: 59, column: 42, scope: !7)
!81 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !80)
!82 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !80)
!83 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !80)
!84 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !85)
!85 = !DILocation(line: 66, column: 42, scope: !7)
!86 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !85)
!87 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !85)
!88 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !85)
!89 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !90)
!90 = !DILocation(line: 69, column: 42, scope: !7)
!91 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !90)
!92 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !90)
!93 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !90)
!94 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !95)
!95 = !DILocation(line: 72, column: 42, scope: !7)
!96 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !95)
!97 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !95)
!98 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !95)
!99 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !100)
!100 = !DILocation(line: 79, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !100)
!103 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !100)
!104 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !105)
!105 = !DILocation(line: 82, column: 42, scope: !7)
!106 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !105)
!107 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !105)
!108 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !105)
!109 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !110)
!110 = !DILocation(line: 85, column: 42, scope: !7)
!111 = !DILocation(line: 89, column: 35, scope: !7)
!112 = !DILocation(line: 92, column: 35, scope: !7)
!113 = !DILocation(line: 95, column: 35, scope: !7)
!114 = !DILocation(line: 98, column: 35, scope: !7)
!115 = !DILocation(line: 101, column: 35, scope: !7)
!116 = !DILocation(line: 104, column: 35, scope: !7)
!117 = !DILocation(line: 107, column: 35, scope: !7)
!118 = !DILocation(line: 110, column: 35, scope: !7)
!119 = !DILocation(line: 117, column: 20, scope: !7)
!120 = !DILocation(line: 111, column: 20, scope: !7)
!121 = !DILocation(line: 112, column: 20, scope: !7)
!122 = !DILocation(line: 120, column: 21, scope: !73, inlinedAt: !110)
!123 = !DILocation(line: 120, column: 16, scope: !73, inlinedAt: !110)
!124 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !110)
!125 = !DILocation(line: 120, column: 20, scope: !7)
!126 = !DILocation(line: 121, column: 20, scope: !7)
!127 = !DILocation(line: 122, column: 20, scope: !7)
!128 = !DILocation(line: 123, column: 20, scope: !7)
!129 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !130)
!130 = !DILocation(line: 125, column: 42, scope: !7)
!131 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !130)
!132 = !DILocation(line: 134, column: 25, scope: !7)
!133 = !DILocation(line: 134, column: 37, scope: !7)
!134 = !DILocation(line: 135, column: 40, scope: !7)
!135 = !DILocation(line: 136, column: 28, scope: !7)
!136 = !DILocation(line: 136, column: 40, scope: !7)
!137 = !DILocation(line: 137, column: 25, scope: !7)
!138 = !DILocation(line: 137, column: 38, scope: !7)
!139 = !DILocation(line: 138, column: 25, scope: !7)
!140 = !DILocation(line: 138, column: 38, scope: !7)
!141 = !DILocation(line: 138, column: 4, scope: !7)
