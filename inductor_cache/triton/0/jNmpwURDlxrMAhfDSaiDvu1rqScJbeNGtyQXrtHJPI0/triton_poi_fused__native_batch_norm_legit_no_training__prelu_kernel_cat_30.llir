; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_30(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 9, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 2, !dbg !12
  %18 = and i32 %17, 508, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %.frozen = freeze i32 %19, !dbg !14
  %20 = sdiv i32 %.frozen, 256, !dbg !14
  %21 = mul i32 %20, 256, !dbg !15
  %.decomposed = sub i32 %.frozen, %21, !dbg !15
  %22 = sdiv i32 %19, 16384, !dbg !16
  %23 = sext i32 %.decomposed to i64, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %6, i64 %23, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %7, i64 %23, !dbg !19
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !20
  %32 = bitcast i32 %28 to float, !dbg !20
  %33 = bitcast i32 %29 to float, !dbg !20
  %34 = bitcast i32 %30 to float, !dbg !20
  %35 = bitcast i32 %31 to float, !dbg !20
  %36 = getelementptr float, ptr addrspace(1) %8, i64 %23, !dbg !21
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %9, i64 %23, !dbg !23
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %10, i64 %23, !dbg !25
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !26
  %42 = icmp slt i32 %.decomposed, 128, !dbg !27
  %43 = shl nsw i32 %20, 7, !dbg !28
  %44 = add nsw i32 %43, %.decomposed, !dbg !29
  %45 = sext i32 %44 to i64, !dbg !30
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !30
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42) #3, !dbg !31
  %48 = icmp sgt i32 %.decomposed, 127, !dbg !32
  %49 = add nsw i32 %.decomposed, -128, !dbg !33
  %50 = add nsw i32 %43, %49, !dbg !34
  %51 = sext i32 %50 to i64, !dbg !35
  %52 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !35
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #3, !dbg !36
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !37
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #3, !dbg !38
  %56 = sext i32 %49 to i64, !dbg !39
  %57 = getelementptr float, ptr addrspace(1) %4, i64 %56, !dbg !39
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #3, !dbg !40
  %59 = shl nsw i32 %22, 7, !dbg !41
  %60 = add nsw i32 %59, %49, !dbg !42
  %61 = sext i32 %60 to i64, !dbg !43
  %62 = getelementptr float, ptr addrspace(1) %5, i64 %61, !dbg !43
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %62, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #3, !dbg !44
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !44
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !44
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !44
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !44
  %68 = bitcast i32 %64 to float, !dbg !44
  %69 = bitcast i32 %65 to float, !dbg !44
  %70 = bitcast i32 %66 to float, !dbg !44
  %71 = bitcast i32 %67 to float, !dbg !44
  %72 = fsub float 0.000000e+00, %68, !dbg !45
  %73 = fsub float 0.000000e+00, %69, !dbg !45
  %74 = fsub float 0.000000e+00, %70, !dbg !45
  %75 = fsub float 0.000000e+00, %71, !dbg !45
  %76 = fmul float %72, 0x3FF7154760000000, !dbg !49
  %77 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %76) #3, !dbg !49
  %78 = fmul float %73, 0x3FF7154760000000, !dbg !49
  %79 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %78) #3, !dbg !49
  %80 = fmul float %74, 0x3FF7154760000000, !dbg !49
  %81 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %80) #3, !dbg !49
  %82 = fmul float %75, 0x3FF7154760000000, !dbg !49
  %83 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %82) #3, !dbg !49
  %84 = fadd float %77, 1.000000e+00, !dbg !50
  %85 = fadd float %79, 1.000000e+00, !dbg !50
  %86 = fadd float %81, 1.000000e+00, !dbg !50
  %87 = fadd float %83, 1.000000e+00, !dbg !50
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %84) #3, !dbg !51
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %85) #3, !dbg !51
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %86) #3, !dbg !51
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %87) #3, !dbg !51
  %92 = fadd float %32, 0x3F50624DE0000000, !dbg !52
  %93 = fadd float %33, 0x3F50624DE0000000, !dbg !52
  %94 = fadd float %34, 0x3F50624DE0000000, !dbg !52
  %95 = fadd float %35, 0x3F50624DE0000000, !dbg !52
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i = icmp eq i32 %96, 0, !dbg !53
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i = icmp eq i32 %97, 0, !dbg !53
  br i1 %.not.i, label %103, label %98, !dbg !53

98:                                               ; preds = %13
  br i1 %.not1.i, label %101, label %99, !dbg !53

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

103:                                              ; preds = %13
  br i1 %.not1.i, label %106, label %104, !dbg !53

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

__nv_sqrtf.exit:                                  ; preds = %99, %101, %104, %106
  %.0.i = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !53
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i1 = icmp eq i32 %108, 0, !dbg !53
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i4 = icmp eq i32 %109, 0, !dbg !53
  br i1 %.not.i1, label %115, label %110, !dbg !53

110:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %113, label %111, !dbg !53

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

115:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %118, label %116, !dbg !53

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

__nv_sqrtf.exit5:                                 ; preds = %111, %113, %116, %118
  %.0.i3 = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !53
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i6 = icmp eq i32 %120, 0, !dbg !53
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i9 = icmp eq i32 %121, 0, !dbg !53
  br i1 %.not.i6, label %127, label %122, !dbg !53

122:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %125, label %123, !dbg !53

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #3, !dbg !53
  br label %__nv_sqrtf.exit10, !dbg !53

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #3, !dbg !53
  br label %__nv_sqrtf.exit10, !dbg !53

127:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %130, label %128, !dbg !53

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #3, !dbg !53
  br label %__nv_sqrtf.exit10, !dbg !53

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #3, !dbg !53
  br label %__nv_sqrtf.exit10, !dbg !53

__nv_sqrtf.exit10:                                ; preds = %123, %125, %128, %130
  %.0.i8 = phi float [ %124, %123 ], [ %126, %125 ], [ %129, %128 ], [ %131, %130 ], !dbg !53
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i11 = icmp eq i32 %132, 0, !dbg !53
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i14 = icmp eq i32 %133, 0, !dbg !53
  br i1 %.not.i11, label %139, label %134, !dbg !53

134:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %137, label %135, !dbg !53

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #3, !dbg !53
  br label %__nv_sqrtf.exit15, !dbg !53

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #3, !dbg !53
  br label %__nv_sqrtf.exit15, !dbg !53

139:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %142, label %140, !dbg !53

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #3, !dbg !53
  br label %__nv_sqrtf.exit15, !dbg !53

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #3, !dbg !53
  br label %__nv_sqrtf.exit15, !dbg !53

__nv_sqrtf.exit15:                                ; preds = %135, %137, %140, %142
  %.0.i13 = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !53
  %144 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !31
  %145 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !38
  %146 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !40
  %147 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !36
  %148 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !18
  %149 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !31
  %150 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !38
  %151 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !40
  %152 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !36
  %153 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !18
  %154 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !31
  %155 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !38
  %156 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !40
  %157 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !36
  %158 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !18
  %159 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !31
  %160 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !38
  %161 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !40
  %162 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !36
  %163 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !18
  %164 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !26
  %165 = bitcast i32 %164 to float, !dbg !26
  %166 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !26
  %167 = bitcast i32 %166 to float, !dbg !26
  %168 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !26
  %169 = bitcast i32 %168 to float, !dbg !26
  %170 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !26
  %171 = bitcast i32 %170 to float, !dbg !26
  %172 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !24
  %173 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !24
  %174 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !24
  %175 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !24
  %176 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !22
  %177 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !22
  %178 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !22
  %179 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !22
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !54
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !54
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !54
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !54
  %184 = insertelement <4 x i32> poison, i32 %144, i64 0, !dbg !31
  %185 = insertelement <4 x i32> %184, i32 %149, i64 1, !dbg !31
  %186 = insertelement <4 x i32> %185, i32 %154, i64 2, !dbg !31
  %187 = insertelement <4 x i32> %186, i32 %159, i64 3, !dbg !31
  %188 = bitcast <4 x i32> %187 to <4 x float>, !dbg !31
  %189 = insertelement <4 x i32> poison, i32 %145, i64 0, !dbg !38
  %190 = insertelement <4 x i32> %189, i32 %150, i64 1, !dbg !38
  %191 = insertelement <4 x i32> %190, i32 %155, i64 2, !dbg !38
  %192 = insertelement <4 x i32> %191, i32 %160, i64 3, !dbg !38
  %193 = bitcast <4 x i32> %192 to <4 x float>, !dbg !38
  %194 = fcmp ogt <4 x float> %193, zeroinitializer, !dbg !55
  %195 = insertelement <4 x i32> poison, i32 %146, i64 0, !dbg !40
  %196 = insertelement <4 x i32> %195, i32 %151, i64 1, !dbg !40
  %197 = insertelement <4 x i32> %196, i32 %156, i64 2, !dbg !40
  %198 = insertelement <4 x i32> %197, i32 %161, i64 3, !dbg !40
  %199 = bitcast <4 x i32> %198 to <4 x float>, !dbg !40
  %200 = fmul <4 x float> %193, %199, !dbg !56
  %201 = select <4 x i1> %194, <4 x float> %193, <4 x float> %200, !dbg !57
  %202 = insertelement <4 x float> poison, float %91, i64 0, !dbg !58
  %203 = insertelement <4 x float> %202, float %90, i64 1, !dbg !58
  %204 = insertelement <4 x float> %203, float %89, i64 2, !dbg !58
  %205 = insertelement <4 x float> %204, float %88, i64 3, !dbg !58
  %206 = fmul <4 x float> %201, %205, !dbg !58
  %207 = insertelement <4 x i32> poison, i32 %147, i64 0, !dbg !36
  %208 = insertelement <4 x i32> %207, i32 %152, i64 1, !dbg !36
  %209 = insertelement <4 x i32> %208, i32 %157, i64 2, !dbg !36
  %210 = insertelement <4 x i32> %209, i32 %162, i64 3, !dbg !36
  %211 = bitcast <4 x i32> %210 to <4 x float>, !dbg !36
  %212 = fadd <4 x float> %206, %211, !dbg !59
  %213 = insertelement <4 x i1> poison, i1 %42, i64 0, !dbg !60
  %214 = shufflevector <4 x i1> %213, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !60
  %215 = select <4 x i1> %214, <4 x float> %188, <4 x float> %212, !dbg !60
  %216 = insertelement <4 x i32> poison, i32 %148, i64 0, !dbg !18
  %217 = insertelement <4 x i32> %216, i32 %153, i64 1, !dbg !18
  %218 = insertelement <4 x i32> %217, i32 %158, i64 2, !dbg !18
  %219 = insertelement <4 x i32> %218, i32 %163, i64 3, !dbg !18
  %220 = bitcast <4 x i32> %219 to <4 x float>, !dbg !18
  %221 = fsub <4 x float> %215, %220, !dbg !61
  %222 = insertelement <4 x i32> poison, i32 %172, i64 0, !dbg !24
  %223 = insertelement <4 x i32> %222, i32 %173, i64 1, !dbg !24
  %224 = insertelement <4 x i32> %223, i32 %174, i64 2, !dbg !24
  %225 = insertelement <4 x i32> %224, i32 %175, i64 3, !dbg !24
  %226 = bitcast <4 x i32> %225 to <4 x float>, !dbg !24
  %227 = insertelement <4 x i32> poison, i32 %176, i64 0, !dbg !22
  %228 = insertelement <4 x i32> %227, i32 %177, i64 1, !dbg !22
  %229 = insertelement <4 x i32> %228, i32 %178, i64 2, !dbg !22
  %230 = insertelement <4 x i32> %229, i32 %179, i64 3, !dbg !22
  %231 = bitcast <4 x i32> %230 to <4 x float>, !dbg !22
  %232 = insertelement <4 x float> poison, float %183, i64 0, !dbg !62
  %233 = insertelement <4 x float> %232, float %182, i64 1, !dbg !62
  %234 = insertelement <4 x float> %233, float %181, i64 2, !dbg !62
  %235 = insertelement <4 x float> %234, float %180, i64 3, !dbg !62
  %236 = fmul <4 x float> %221, %235, !dbg !62
  %237 = fmul <4 x float> %236, %231, !dbg !63
  %238 = fadd <4 x float> %237, %226, !dbg !64
  %239 = fcmp ogt <4 x float> %238, zeroinitializer, !dbg !65
  %240 = extractelement <4 x float> %238, i64 3, !dbg !66
  %241 = fmul float %240, %171, !dbg !67
  %242 = extractelement <4 x float> %238, i64 2, !dbg !66
  %243 = fmul float %242, %169, !dbg !67
  %244 = extractelement <4 x float> %238, i64 1, !dbg !66
  %245 = fmul float %244, %167, !dbg !67
  %246 = extractelement <4 x float> %238, i64 0, !dbg !66
  %247 = fmul float %246, %165, !dbg !67
  %248 = extractelement <4 x i1> %239, i64 3, !dbg !66
  %249 = select i1 %248, float %240, float %241, !dbg !66
  %250 = extractelement <4 x i1> %239, i64 2, !dbg !66
  %251 = select i1 %250, float %242, float %243, !dbg !66
  %252 = extractelement <4 x i1> %239, i64 1, !dbg !66
  %253 = select i1 %252, float %244, float %245, !dbg !66
  %254 = extractelement <4 x i1> %239, i64 0, !dbg !66
  %255 = select i1 %254, float %246, float %247, !dbg !66
  %256 = sext i32 %19 to i64, !dbg !68
  %257 = getelementptr float, ptr addrspace(1) %11, i64 %256, !dbg !68
  %bc = bitcast <4 x float> %215 to <4 x i32>, !dbg !69
  %258 = extractelement <4 x i32> %bc, i64 3, !dbg !69
  %bc16 = bitcast <4 x float> %215 to <4 x i32>, !dbg !69
  %259 = extractelement <4 x i32> %bc16, i64 2, !dbg !69
  %bc17 = bitcast <4 x float> %215 to <4 x i32>, !dbg !69
  %260 = extractelement <4 x i32> %bc17, i64 1, !dbg !69
  %bc18 = bitcast <4 x float> %215 to <4 x i32>, !dbg !69
  %261 = extractelement <4 x i32> %bc18, i64 0, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %258, i32 %259, i32 %260, i32 %261, ptr addrspace(1) %257, i1 true) #3, !dbg !69
  %262 = getelementptr float, ptr addrspace(1) %0, i64 %256, !dbg !70
  %263 = bitcast float %249 to i32, !dbg !71
  %264 = bitcast float %251 to i32, !dbg !71
  %265 = bitcast float %253 to i32, !dbg !71
  %266 = bitcast float %255 to i32, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %263, i32 %264, i32 %265, i32 %266, ptr addrspace(1) %262, i1 true) #3, !dbg !71
  ret void, !dbg !72
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clcl6zdbvhmqoagcrev7ttvkldhg4mdm3s7zuq2kiieeg43edfhx.py", directory: "inductor_cache/lc")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_30, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_30, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_30", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 31, scope: !7)
!18 = !DILocation(line: 28, column: 36, scope: !7)
!19 = !DILocation(line: 29, column: 31, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 30, column: 31, scope: !7)
!22 = !DILocation(line: 30, column: 36, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 37, column: 18, scope: !7)
!28 = !DILocation(line: 38, column: 34, scope: !7)
!29 = !DILocation(line: 38, column: 40, scope: !7)
!30 = !DILocation(line: 38, column: 30, scope: !7)
!31 = !DILocation(line: 38, column: 46, scope: !7)
!32 = !DILocation(line: 39, column: 19, scope: !7)
!33 = !DILocation(line: 42, column: 49, scope: !7)
!34 = !DILocation(line: 42, column: 40, scope: !7)
!35 = !DILocation(line: 42, column: 30, scope: !7)
!36 = !DILocation(line: 42, column: 55, scope: !7)
!37 = !DILocation(line: 43, column: 31, scope: !7)
!38 = !DILocation(line: 43, column: 56, scope: !7)
!39 = !DILocation(line: 46, column: 31, scope: !7)
!40 = !DILocation(line: 46, column: 45, scope: !7)
!41 = !DILocation(line: 49, column: 35, scope: !7)
!42 = !DILocation(line: 49, column: 41, scope: !7)
!43 = !DILocation(line: 49, column: 31, scope: !7)
!44 = !DILocation(line: 49, column: 56, scope: !7)
!45 = !DILocation(line: 47, column: 30, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!48 = !DILocation(line: 50, column: 23, scope: !7)
!49 = !DILocation(line: 47, column: 29, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 47, column: 20, scope: !46, inlinedAt: !48)
!51 = !DILocation(line: 47, column: 16, scope: !46, inlinedAt: !48)
!52 = !DILocation(line: 58, column: 20, scope: !7)
!53 = !DILocation(line: 59, column: 27, scope: !7)
!54 = !DILocation(line: 61, column: 20, scope: !7)
!55 = !DILocation(line: 45, column: 20, scope: !7)
!56 = !DILocation(line: 47, column: 20, scope: !7)
!57 = !DILocation(line: 48, column: 35, scope: !7)
!58 = !DILocation(line: 51, column: 20, scope: !7)
!59 = !DILocation(line: 52, column: 19, scope: !7)
!60 = !DILocation(line: 55, column: 33, scope: !7)
!61 = !DILocation(line: 56, column: 20, scope: !7)
!62 = !DILocation(line: 64, column: 20, scope: !7)
!63 = !DILocation(line: 65, column: 20, scope: !7)
!64 = !DILocation(line: 66, column: 20, scope: !7)
!65 = !DILocation(line: 68, column: 20, scope: !7)
!66 = !DILocation(line: 70, column: 35, scope: !7)
!67 = !DILocation(line: 69, column: 20, scope: !7)
!68 = !DILocation(line: 71, column: 25, scope: !7)
!69 = !DILocation(line: 71, column: 37, scope: !7)
!70 = !DILocation(line: 72, column: 28, scope: !7)
!71 = !DILocation(line: 72, column: 40, scope: !7)
!72 = !DILocation(line: 72, column: 4, scope: !7)
