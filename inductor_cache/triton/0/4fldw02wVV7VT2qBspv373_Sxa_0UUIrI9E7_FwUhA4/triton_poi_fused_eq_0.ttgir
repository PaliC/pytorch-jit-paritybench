#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [1], order = [0]}>
#loc = loc("inductor_cache/gy/cgy25jwtutljado6ffc6aw7sfbi6n6adnypu7a7ykvlkssa4v4ja.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 1 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_eq_0(%arg0: !tt.ptr<i8> {tt.divisibility = 16 : i32} loc("inductor_cache/gy/cgy25jwtutljado6ffc6aw7sfbi6n6adnypu7a7ykvlkssa4v4ja.py":19:0), %arg1: !tt.ptr<i1> {tt.divisibility = 16 : i32} loc("inductor_cache/gy/cgy25jwtutljado6ffc6aw7sfbi6n6adnypu7a7ykvlkssa4v4ja.py":19:0)) attributes {noinline = false} {
    %c1_i8 = arith.constant 1 : i8 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = tt.addptr %arg0, %c0_i32 : !tt.ptr<i8>, i32 loc(#loc2)
    %1 = tt.load %0 : !tt.ptr<i8> loc(#loc3)
    %2 = arith.cmpi eq, %1, %c1_i8 : i8 loc(#loc4)
    %3 = tt.addptr %arg1, %c0_i32 : !tt.ptr<i1>, i32 loc(#loc5)
    %4 = tt.bitcast %3 : !tt.ptr<i1> -> !tt.ptr<i8> loc(#loc6)
    %5 = tt.splat %4 : !tt.ptr<i8> -> tensor<1x!tt.ptr<i8>, #blocked> loc(#loc6)
    %6 = arith.extui %2 : i1 to i8 loc(#loc6)
    %7 = tt.splat %6 : i8 -> tensor<1xi8, #blocked> loc(#loc6)
    tt.store %5, %7 : tensor<1x!tt.ptr<i8>, #blocked> loc(#loc6)
    tt.return loc(#loc7)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/gy/cgy25jwtutljado6ffc6aw7sfbi6n6adnypu7a7ykvlkssa4v4ja.py":24:30)
#loc3 = loc("inductor_cache/gy/cgy25jwtutljado6ffc6aw7sfbi6n6adnypu7a7ykvlkssa4v4ja.py":24:19)
#loc4 = loc("inductor_cache/gy/cgy25jwtutljado6ffc6aw7sfbi6n6adnypu7a7ykvlkssa4v4ja.py":27:19)
#loc5 = loc("inductor_cache/gy/cgy25jwtutljado6ffc6aw7sfbi6n6adnypu7a7ykvlkssa4v4ja.py":28:25)
#loc6 = loc("inductor_cache/gy/cgy25jwtutljado6ffc6aw7sfbi6n6adnypu7a7ykvlkssa4v4ja.py":28:64)
#loc7 = loc("inductor_cache/gy/cgy25jwtutljado6ffc6aw7sfbi6n6adnypu7a7ykvlkssa4v4ja.py":28:4)
