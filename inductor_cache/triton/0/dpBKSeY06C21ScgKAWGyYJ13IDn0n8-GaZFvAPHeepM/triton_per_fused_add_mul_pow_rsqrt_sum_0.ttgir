#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#loc = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":19:0)
#loc1 = loc(unknown)
#loc20 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":40:24)
#loc35 = loc(callsite(#loc1 at #loc20))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_mul_pow_rsqrt_sum_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<9.99999993E-9> : tensor<1x1xf32, #blocked> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<16> : tensor<1x64xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc4)
    %6 = arith.remsi %0, %c4_i32 : i32 loc(#loc5)
    %7 = arith.divsi %4, %cst_2 : tensor<1x64xi32, #blocked> loc(#loc6)
    %8 = arith.divsi %0, %c4_i32 : i32 loc(#loc7)
    %9 = arith.muli %6, %c64_i32 : i32 loc(#loc8)
    %10 = tt.splat %9 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc9)
    %11 = arith.addi %5, %10 : tensor<1x64xi32, #blocked1> loc(#loc9)
    %12 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %13 = tt.addptr %12, %11 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc10)
    %14 = tt.splat %1 : i1 -> tensor<1x64xi1, #blocked1> loc(#loc11)
    %15 = tt.splat %1 : i1 -> tensor<1x64xi1, #blocked> loc(#loc11)
    %16 = tt.load %13, %14, %cst_1 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc11)
    %17 = triton_gpu.convert_layout %16 {boundaryCheck = array<i32>, cache = 1 : i32, evict = 3 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 1>} : tensor<1x64xf32, #blocked1> -> tensor<1x64xf32, #blocked> loc(#loc11)
    %18 = arith.muli %8, %c4_i32 : i32 loc(#loc12)
    %19 = tt.splat %18 : i32 -> tensor<1x64xi32, #blocked> loc(#loc13)
    %20 = arith.addi %7, %19 : tensor<1x64xi32, #blocked> loc(#loc13)
    %21 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc14)
    %22 = tt.addptr %21, %20 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc14)
    %23 = tt.load %22, %15, %cst evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc15)
    %24 = arith.mulf %17, %23 : tensor<1x64xf32, #blocked> loc(#loc16)
    %25 = arith.mulf %24, %24 : tensor<1x64xf32, #blocked> loc(#loc17)
    %26 = arith.select %15, %25, %cst : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc18)
    %27 = "tt.reduce"(%26) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc20)), %arg7: f32 loc(callsite(#loc1 at #loc20))):
      %42 = arith.addf %arg6, %arg7 : f32 loc(#loc37)
      tt.reduce.return %42 : f32 loc(#loc34)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc34)
    %28 = tt.expand_dims %27 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc22)
    %29 = arith.addf %28, %cst_0 : tensor<1x1xf32, #blocked> loc(#loc23)
    %30 = tt.extern_elementwise %29 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc24)
    %31 = tt.broadcast %30 : tensor<1x1xf32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc25)
    %32 = arith.mulf %24, %31 : tensor<1x64xf32, #blocked> loc(#loc25)
    gpu.barrier loc(#loc26)
    %33 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc27)
    %34 = tt.splat %33 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc28)
    %35 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc28)
    tt.store %34, %30, %35 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc28)
    %36 = arith.muli %0, %c64_i32 : i32 loc(#loc29)
    %37 = tt.splat %36 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc30)
    %38 = arith.addi %5, %37 : tensor<1x64xi32, #blocked1> loc(#loc30)
    %39 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc31)
    %40 = tt.addptr %39, %38 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc31)
    %41 = triton_gpu.convert_layout %32 : tensor<1x64xf32, #blocked> -> tensor<1x64xf32, #blocked1> loc(#loc32)
    tt.store %40, %41, %14 : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc32)
    tt.return loc(#loc33)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":23:28)
#loc3 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":25:21)
#loc4 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":26:34)
#loc5 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":30:19)
#loc6 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":31:19)
#loc7 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":32:19)
#loc8 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":34:38)
#loc9 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":34:35)
#loc10 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":34:30)
#loc11 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":34:43)
#loc12 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":35:37)
#loc13 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":35:35)
#loc14 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":35:30)
#loc15 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":35:42)
#loc16 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":36:18)
#loc17 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":37:18)
#loc18 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":39:33)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc22 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":40:27)
#loc23 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":42:18)
#loc24 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":43:28)
#loc25 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":44:19)
#loc26 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":45:4)
#loc27 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":46:28)
#loc28 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":46:40)
#loc29 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":47:33)
#loc30 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":47:30)
#loc31 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":47:25)
#loc32 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":47:45)
#loc33 = loc("inductor_cache/gn/cgnezq3citvut5ows765gaawxdmsfugjrdcgjgkx22kgk5hfembb.py":47:4)
#loc34 = loc(callsite(#loc19 at #loc20))
#loc36 = loc(callsite(#loc21 at #loc19))
#loc37 = loc(callsite(#loc36 at #loc20))
