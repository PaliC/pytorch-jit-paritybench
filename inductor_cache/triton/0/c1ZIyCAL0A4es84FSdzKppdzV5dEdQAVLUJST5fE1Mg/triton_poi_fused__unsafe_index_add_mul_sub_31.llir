; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_31(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %12 = icmp slt i32 %11, 48, !dbg !11
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !12
  %14 = shl i32 %13, 10, !dbg !13
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %16 = and i32 %15, 127, !dbg !14
  %17 = or disjoint i32 %14, %16, !dbg !15
  %18 = or disjoint i32 %17, 128, !dbg !15
  %19 = or disjoint i32 %17, 256, !dbg !15
  %20 = or disjoint i32 %17, 384, !dbg !15
  %21 = or disjoint i32 %17, 512, !dbg !15
  %22 = or disjoint i32 %17, 640, !dbg !15
  %23 = or disjoint i32 %17, 768, !dbg !15
  %24 = or disjoint i32 %17, 896, !dbg !15
  %25 = icmp slt i32 %17, 90721, !dbg !16
  %26 = icmp slt i32 %18, 90721, !dbg !16
  %27 = icmp slt i32 %19, 90721, !dbg !16
  %28 = icmp slt i32 %20, 90721, !dbg !16
  %29 = icmp slt i32 %21, 90721, !dbg !16
  %30 = icmp slt i32 %22, 90721, !dbg !16
  %31 = icmp slt i32 %23, 90721, !dbg !16
  %32 = icmp slt i32 %24, 90721, !dbg !16
  %.frozen = freeze i32 %17, !dbg !17
  %33 = sdiv i32 %.frozen, 257, !dbg !17
  %.frozen16 = freeze i32 %18, !dbg !17
  %34 = sdiv i32 %.frozen16, 257, !dbg !17
  %.frozen18 = freeze i32 %19, !dbg !17
  %35 = sdiv i32 %.frozen18, 257, !dbg !17
  %.frozen20 = freeze i32 %20, !dbg !17
  %36 = sdiv i32 %.frozen20, 257, !dbg !17
  %.frozen22 = freeze i32 %21, !dbg !17
  %37 = sdiv i32 %.frozen22, 257, !dbg !17
  %.frozen24 = freeze i32 %22, !dbg !17
  %38 = sdiv i32 %.frozen24, 257, !dbg !17
  %.frozen26 = freeze i32 %23, !dbg !17
  %39 = sdiv i32 %.frozen26, 257, !dbg !17
  %.frozen28 = freeze i32 %24, !dbg !17
  %40 = sdiv i32 %.frozen28, 257, !dbg !17
  %41 = mul i32 %33, 257, !dbg !18
  %.decomposed = sub i32 %.frozen, %41, !dbg !18
  %42 = mul i32 %34, 257, !dbg !18
  %.decomposed17 = sub i32 %.frozen16, %42, !dbg !18
  %43 = mul i32 %35, 257, !dbg !18
  %.decomposed19 = sub i32 %.frozen18, %43, !dbg !18
  %44 = mul i32 %36, 257, !dbg !18
  %.decomposed21 = sub i32 %.frozen20, %44, !dbg !18
  %45 = mul i32 %37, 257, !dbg !18
  %.decomposed23 = sub i32 %.frozen22, %45, !dbg !18
  %46 = mul i32 %38, 257, !dbg !18
  %.decomposed25 = sub i32 %.frozen24, %46, !dbg !18
  %47 = mul i32 %39, 257, !dbg !18
  %.decomposed27 = sub i32 %.frozen26, %47, !dbg !18
  %48 = mul i32 %40, 257, !dbg !18
  %.decomposed29 = sub i32 %.frozen28, %48, !dbg !18
  %.frozen30 = freeze i32 %11, !dbg !19
  %49 = sdiv i32 %.frozen30, 12, !dbg !19
  %50 = mul i32 %49, 12, !dbg !20
  %.decomposed31 = sub i32 %.frozen30, %50, !dbg !20
  %51 = sext i32 %33 to i64, !dbg !21
  %52 = getelementptr i64, ptr addrspace(1) %0, i64 %51, !dbg !21
  %53 = sext i32 %34 to i64, !dbg !21
  %54 = getelementptr i64, ptr addrspace(1) %0, i64 %53, !dbg !21
  %55 = sext i32 %35 to i64, !dbg !21
  %56 = getelementptr i64, ptr addrspace(1) %0, i64 %55, !dbg !21
  %57 = sext i32 %36 to i64, !dbg !21
  %58 = getelementptr i64, ptr addrspace(1) %0, i64 %57, !dbg !21
  %59 = sext i32 %37 to i64, !dbg !21
  %60 = getelementptr i64, ptr addrspace(1) %0, i64 %59, !dbg !21
  %61 = sext i32 %38 to i64, !dbg !21
  %62 = getelementptr i64, ptr addrspace(1) %0, i64 %61, !dbg !21
  %63 = sext i32 %39 to i64, !dbg !21
  %64 = getelementptr i64, ptr addrspace(1) %0, i64 %63, !dbg !21
  %65 = sext i32 %40 to i64, !dbg !21
  %66 = getelementptr i64, ptr addrspace(1) %0, i64 %65, !dbg !21
  %67 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %52, i1 %25) #1, !dbg !22
  %68 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 %26) #1, !dbg !22
  %69 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 %27) #1, !dbg !22
  %70 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %58, i1 %28) #1, !dbg !22
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 %29) #1, !dbg !22
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 %30) #1, !dbg !22
  %73 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %64, i1 %31) #1, !dbg !22
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 %32) #1, !dbg !22
  %75 = sext i32 %.decomposed to i64, !dbg !23
  %76 = getelementptr i64, ptr addrspace(1) %1, i64 %75, !dbg !23
  %77 = sext i32 %.decomposed17 to i64, !dbg !23
  %78 = getelementptr i64, ptr addrspace(1) %1, i64 %77, !dbg !23
  %79 = sext i32 %.decomposed19 to i64, !dbg !23
  %80 = getelementptr i64, ptr addrspace(1) %1, i64 %79, !dbg !23
  %81 = sext i32 %.decomposed21 to i64, !dbg !23
  %82 = getelementptr i64, ptr addrspace(1) %1, i64 %81, !dbg !23
  %83 = sext i32 %.decomposed23 to i64, !dbg !23
  %84 = getelementptr i64, ptr addrspace(1) %1, i64 %83, !dbg !23
  %85 = sext i32 %.decomposed25 to i64, !dbg !23
  %86 = getelementptr i64, ptr addrspace(1) %1, i64 %85, !dbg !23
  %87 = sext i32 %.decomposed27 to i64, !dbg !23
  %88 = getelementptr i64, ptr addrspace(1) %1, i64 %87, !dbg !23
  %89 = sext i32 %.decomposed29 to i64, !dbg !23
  %90 = getelementptr i64, ptr addrspace(1) %1, i64 %89, !dbg !23
  %91 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %76, i1 %25) #1, !dbg !24
  %92 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %78, i1 %26) #1, !dbg !24
  %93 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %80, i1 %27) #1, !dbg !24
  %94 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %82, i1 %28) #1, !dbg !24
  %95 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %84, i1 %29) #1, !dbg !24
  %96 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %86, i1 %30) #1, !dbg !24
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %88, i1 %31) #1, !dbg !24
  %98 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %90, i1 %32) #1, !dbg !24
  %99 = getelementptr i64, ptr addrspace(1) %3, i64 %75, !dbg !25
  %100 = getelementptr i64, ptr addrspace(1) %3, i64 %77, !dbg !25
  %101 = getelementptr i64, ptr addrspace(1) %3, i64 %79, !dbg !25
  %102 = getelementptr i64, ptr addrspace(1) %3, i64 %81, !dbg !25
  %103 = getelementptr i64, ptr addrspace(1) %3, i64 %83, !dbg !25
  %104 = getelementptr i64, ptr addrspace(1) %3, i64 %85, !dbg !25
  %105 = getelementptr i64, ptr addrspace(1) %3, i64 %87, !dbg !25
  %106 = getelementptr i64, ptr addrspace(1) %3, i64 %89, !dbg !25
  %107 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %99, i1 %25) #1, !dbg !26
  %108 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %100, i1 %26) #1, !dbg !26
  %109 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %101, i1 %27) #1, !dbg !26
  %110 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %102, i1 %28) #1, !dbg !26
  %111 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %103, i1 %29) #1, !dbg !26
  %112 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %104, i1 %30) #1, !dbg !26
  %113 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %105, i1 %31) #1, !dbg !26
  %114 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %106, i1 %32) #1, !dbg !26
  %115 = getelementptr float, ptr addrspace(1) %4, i64 %75, !dbg !27
  %116 = getelementptr float, ptr addrspace(1) %4, i64 %77, !dbg !27
  %117 = getelementptr float, ptr addrspace(1) %4, i64 %79, !dbg !27
  %118 = getelementptr float, ptr addrspace(1) %4, i64 %81, !dbg !27
  %119 = getelementptr float, ptr addrspace(1) %4, i64 %83, !dbg !27
  %120 = getelementptr float, ptr addrspace(1) %4, i64 %85, !dbg !27
  %121 = getelementptr float, ptr addrspace(1) %4, i64 %87, !dbg !27
  %122 = getelementptr float, ptr addrspace(1) %4, i64 %89, !dbg !27
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %25) #1, !dbg !28
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %26) #1, !dbg !28
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %27) #1, !dbg !28
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %28) #1, !dbg !28
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %29) #1, !dbg !28
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %30) #1, !dbg !28
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %31) #1, !dbg !28
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %32) #1, !dbg !28
  %131 = getelementptr i64, ptr addrspace(1) %5, i64 %51, !dbg !29
  %132 = getelementptr i64, ptr addrspace(1) %5, i64 %53, !dbg !29
  %133 = getelementptr i64, ptr addrspace(1) %5, i64 %55, !dbg !29
  %134 = getelementptr i64, ptr addrspace(1) %5, i64 %57, !dbg !29
  %135 = getelementptr i64, ptr addrspace(1) %5, i64 %59, !dbg !29
  %136 = getelementptr i64, ptr addrspace(1) %5, i64 %61, !dbg !29
  %137 = getelementptr i64, ptr addrspace(1) %5, i64 %63, !dbg !29
  %138 = getelementptr i64, ptr addrspace(1) %5, i64 %65, !dbg !29
  %139 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %131, i1 %25) #1, !dbg !30
  %140 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %132, i1 %26) #1, !dbg !30
  %141 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %133, i1 %27) #1, !dbg !30
  %142 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %134, i1 %28) #1, !dbg !30
  %143 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %135, i1 %29) #1, !dbg !30
  %144 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %136, i1 %30) #1, !dbg !30
  %145 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %137, i1 %31) #1, !dbg !30
  %146 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %138, i1 %32) #1, !dbg !30
  %147 = getelementptr float, ptr addrspace(1) %6, i64 %51, !dbg !31
  %148 = getelementptr float, ptr addrspace(1) %6, i64 %53, !dbg !31
  %149 = getelementptr float, ptr addrspace(1) %6, i64 %55, !dbg !31
  %150 = getelementptr float, ptr addrspace(1) %6, i64 %57, !dbg !31
  %151 = getelementptr float, ptr addrspace(1) %6, i64 %59, !dbg !31
  %152 = getelementptr float, ptr addrspace(1) %6, i64 %61, !dbg !31
  %153 = getelementptr float, ptr addrspace(1) %6, i64 %63, !dbg !31
  %154 = getelementptr float, ptr addrspace(1) %6, i64 %65, !dbg !31
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 %25) #1, !dbg !32
  %156 = bitcast i32 %155 to float, !dbg !32
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %26) #1, !dbg !32
  %158 = bitcast i32 %157 to float, !dbg !32
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %27) #1, !dbg !32
  %160 = bitcast i32 %159 to float, !dbg !32
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %28) #1, !dbg !32
  %162 = bitcast i32 %161 to float, !dbg !32
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %29) #1, !dbg !32
  %164 = bitcast i32 %163 to float, !dbg !32
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %30) #1, !dbg !32
  %166 = bitcast i32 %165 to float, !dbg !32
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %31) #1, !dbg !32
  %168 = bitcast i32 %167 to float, !dbg !32
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %32) #1, !dbg !32
  %170 = bitcast i32 %169 to float, !dbg !32
  %171 = add i64 %67, 40, !dbg !33
  %172 = add i64 %68, 40, !dbg !33
  %173 = add i64 %69, 40, !dbg !33
  %174 = add i64 %70, 40, !dbg !33
  %175 = add i64 %71, 40, !dbg !33
  %176 = add i64 %72, 40, !dbg !33
  %177 = add i64 %73, 40, !dbg !33
  %178 = add i64 %74, 40, !dbg !33
  %179 = icmp slt i64 %67, 0, !dbg !34
  %180 = icmp slt i64 %68, 0, !dbg !34
  %181 = icmp slt i64 %69, 0, !dbg !34
  %182 = icmp slt i64 %70, 0, !dbg !34
  %183 = icmp slt i64 %71, 0, !dbg !34
  %184 = icmp slt i64 %72, 0, !dbg !34
  %185 = icmp slt i64 %73, 0, !dbg !34
  %186 = icmp slt i64 %74, 0, !dbg !34
  %187 = select i1 %179, i64 %171, i64 %67, !dbg !35
  %188 = select i1 %180, i64 %172, i64 %68, !dbg !35
  %189 = select i1 %181, i64 %173, i64 %69, !dbg !35
  %190 = select i1 %182, i64 %174, i64 %70, !dbg !35
  %191 = select i1 %183, i64 %175, i64 %71, !dbg !35
  %192 = select i1 %184, i64 %176, i64 %72, !dbg !35
  %193 = select i1 %185, i64 %177, i64 %73, !dbg !35
  %194 = select i1 %186, i64 %178, i64 %74, !dbg !35
  %195 = add i64 %91, 40, !dbg !36
  %196 = add i64 %92, 40, !dbg !36
  %197 = add i64 %93, 40, !dbg !36
  %198 = add i64 %94, 40, !dbg !36
  %199 = add i64 %95, 40, !dbg !36
  %200 = add i64 %96, 40, !dbg !36
  %201 = add i64 %97, 40, !dbg !36
  %202 = add i64 %98, 40, !dbg !36
  %203 = icmp slt i64 %91, 0, !dbg !37
  %204 = icmp slt i64 %92, 0, !dbg !37
  %205 = icmp slt i64 %93, 0, !dbg !37
  %206 = icmp slt i64 %94, 0, !dbg !37
  %207 = icmp slt i64 %95, 0, !dbg !37
  %208 = icmp slt i64 %96, 0, !dbg !37
  %209 = icmp slt i64 %97, 0, !dbg !37
  %210 = icmp slt i64 %98, 0, !dbg !37
  %211 = select i1 %203, i64 %195, i64 %91, !dbg !38
  %212 = select i1 %204, i64 %196, i64 %92, !dbg !38
  %213 = select i1 %205, i64 %197, i64 %93, !dbg !38
  %214 = select i1 %206, i64 %198, i64 %94, !dbg !38
  %215 = select i1 %207, i64 %199, i64 %95, !dbg !38
  %216 = select i1 %208, i64 %200, i64 %96, !dbg !38
  %217 = select i1 %209, i64 %201, i64 %97, !dbg !38
  %218 = select i1 %210, i64 %202, i64 %98, !dbg !38
  %219 = sext i32 %.decomposed31 to i64, !dbg !39
  %220 = mul i64 %187, 480, !dbg !40
  %221 = mul i64 %188, 480, !dbg !40
  %222 = mul i64 %189, 480, !dbg !40
  %223 = mul i64 %190, 480, !dbg !40
  %224 = mul i64 %191, 480, !dbg !40
  %225 = mul i64 %192, 480, !dbg !40
  %226 = mul i64 %193, 480, !dbg !40
  %227 = mul i64 %194, 480, !dbg !40
  %228 = mul i32 %49, 19200, !dbg !41
  %229 = sext i32 %228 to i64, !dbg !42
  %.idx = mul i64 %211, 48, !dbg !43
  %230 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx, !dbg !43
  %231 = getelementptr float, ptr addrspace(1) %230, i64 %219, !dbg !43
  %232 = getelementptr float, ptr addrspace(1) %231, i64 %220, !dbg !43
  %233 = getelementptr float, ptr addrspace(1) %232, i64 %229, !dbg !43
  %.idx1 = mul i64 %212, 48, !dbg !43
  %234 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx1, !dbg !43
  %235 = getelementptr float, ptr addrspace(1) %234, i64 %219, !dbg !43
  %236 = getelementptr float, ptr addrspace(1) %235, i64 %221, !dbg !43
  %237 = getelementptr float, ptr addrspace(1) %236, i64 %229, !dbg !43
  %.idx2 = mul i64 %213, 48, !dbg !43
  %238 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx2, !dbg !43
  %239 = getelementptr float, ptr addrspace(1) %238, i64 %219, !dbg !43
  %240 = getelementptr float, ptr addrspace(1) %239, i64 %222, !dbg !43
  %241 = getelementptr float, ptr addrspace(1) %240, i64 %229, !dbg !43
  %.idx3 = mul i64 %214, 48, !dbg !43
  %242 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx3, !dbg !43
  %243 = getelementptr float, ptr addrspace(1) %242, i64 %219, !dbg !43
  %244 = getelementptr float, ptr addrspace(1) %243, i64 %223, !dbg !43
  %245 = getelementptr float, ptr addrspace(1) %244, i64 %229, !dbg !43
  %.idx4 = mul i64 %215, 48, !dbg !43
  %246 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx4, !dbg !43
  %247 = getelementptr float, ptr addrspace(1) %246, i64 %219, !dbg !43
  %248 = getelementptr float, ptr addrspace(1) %247, i64 %224, !dbg !43
  %249 = getelementptr float, ptr addrspace(1) %248, i64 %229, !dbg !43
  %.idx5 = mul i64 %216, 48, !dbg !43
  %250 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx5, !dbg !43
  %251 = getelementptr float, ptr addrspace(1) %250, i64 %219, !dbg !43
  %252 = getelementptr float, ptr addrspace(1) %251, i64 %225, !dbg !43
  %253 = getelementptr float, ptr addrspace(1) %252, i64 %229, !dbg !43
  %.idx6 = mul i64 %217, 48, !dbg !43
  %254 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx6, !dbg !43
  %255 = getelementptr float, ptr addrspace(1) %254, i64 %219, !dbg !43
  %256 = getelementptr float, ptr addrspace(1) %255, i64 %226, !dbg !43
  %257 = getelementptr float, ptr addrspace(1) %256, i64 %229, !dbg !43
  %.idx7 = mul i64 %218, 48, !dbg !43
  %258 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx7, !dbg !43
  %259 = getelementptr float, ptr addrspace(1) %258, i64 %219, !dbg !43
  %260 = getelementptr float, ptr addrspace(1) %259, i64 %227, !dbg !43
  %261 = getelementptr float, ptr addrspace(1) %260, i64 %229, !dbg !43
  %262 = and i1 %12, %25, !dbg !44
  %263 = and i1 %26, %12, !dbg !44
  %264 = and i1 %27, %12, !dbg !44
  %265 = and i1 %28, %12, !dbg !44
  %266 = and i1 %29, %12, !dbg !44
  %267 = and i1 %30, %12, !dbg !44
  %268 = and i1 %31, %12, !dbg !44
  %269 = and i1 %32, %12, !dbg !44
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %233, i1 %262) #1, !dbg !45
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %237, i1 %263) #1, !dbg !45
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %241, i1 %264) #1, !dbg !45
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 %265) #1, !dbg !45
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %249, i1 %266) #1, !dbg !45
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %253, i1 %267) #1, !dbg !45
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %257, i1 %268) #1, !dbg !45
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %261, i1 %269) #1, !dbg !45
  %278 = add i64 %107, 40, !dbg !46
  %279 = add i64 %108, 40, !dbg !46
  %280 = add i64 %109, 40, !dbg !46
  %281 = add i64 %110, 40, !dbg !46
  %282 = add i64 %111, 40, !dbg !46
  %283 = add i64 %112, 40, !dbg !46
  %284 = add i64 %113, 40, !dbg !46
  %285 = add i64 %114, 40, !dbg !46
  %286 = icmp slt i64 %107, 0, !dbg !47
  %287 = icmp slt i64 %108, 0, !dbg !47
  %288 = icmp slt i64 %109, 0, !dbg !47
  %289 = icmp slt i64 %110, 0, !dbg !47
  %290 = icmp slt i64 %111, 0, !dbg !47
  %291 = icmp slt i64 %112, 0, !dbg !47
  %292 = icmp slt i64 %113, 0, !dbg !47
  %293 = icmp slt i64 %114, 0, !dbg !47
  %294 = select i1 %286, i64 %278, i64 %107, !dbg !48
  %295 = select i1 %287, i64 %279, i64 %108, !dbg !48
  %296 = select i1 %288, i64 %280, i64 %109, !dbg !48
  %297 = select i1 %289, i64 %281, i64 %110, !dbg !48
  %298 = select i1 %290, i64 %282, i64 %111, !dbg !48
  %299 = select i1 %291, i64 %283, i64 %112, !dbg !48
  %300 = select i1 %292, i64 %284, i64 %113, !dbg !48
  %301 = select i1 %293, i64 %285, i64 %114, !dbg !48
  %.idx8 = mul i64 %294, 48, !dbg !49
  %302 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx8, !dbg !49
  %303 = getelementptr float, ptr addrspace(1) %302, i64 %219, !dbg !49
  %304 = getelementptr float, ptr addrspace(1) %303, i64 %220, !dbg !49
  %305 = getelementptr float, ptr addrspace(1) %304, i64 %229, !dbg !49
  %.idx9 = mul i64 %295, 48, !dbg !49
  %306 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx9, !dbg !49
  %307 = getelementptr float, ptr addrspace(1) %306, i64 %219, !dbg !49
  %308 = getelementptr float, ptr addrspace(1) %307, i64 %221, !dbg !49
  %309 = getelementptr float, ptr addrspace(1) %308, i64 %229, !dbg !49
  %.idx10 = mul i64 %296, 48, !dbg !49
  %310 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx10, !dbg !49
  %311 = getelementptr float, ptr addrspace(1) %310, i64 %219, !dbg !49
  %312 = getelementptr float, ptr addrspace(1) %311, i64 %222, !dbg !49
  %313 = getelementptr float, ptr addrspace(1) %312, i64 %229, !dbg !49
  %.idx11 = mul i64 %297, 48, !dbg !49
  %314 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx11, !dbg !49
  %315 = getelementptr float, ptr addrspace(1) %314, i64 %219, !dbg !49
  %316 = getelementptr float, ptr addrspace(1) %315, i64 %223, !dbg !49
  %317 = getelementptr float, ptr addrspace(1) %316, i64 %229, !dbg !49
  %.idx12 = mul i64 %298, 48, !dbg !49
  %318 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx12, !dbg !49
  %319 = getelementptr float, ptr addrspace(1) %318, i64 %219, !dbg !49
  %320 = getelementptr float, ptr addrspace(1) %319, i64 %224, !dbg !49
  %321 = getelementptr float, ptr addrspace(1) %320, i64 %229, !dbg !49
  %.idx13 = mul i64 %299, 48, !dbg !49
  %322 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx13, !dbg !49
  %323 = getelementptr float, ptr addrspace(1) %322, i64 %219, !dbg !49
  %324 = getelementptr float, ptr addrspace(1) %323, i64 %225, !dbg !49
  %325 = getelementptr float, ptr addrspace(1) %324, i64 %229, !dbg !49
  %.idx14 = mul i64 %300, 48, !dbg !49
  %326 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx14, !dbg !49
  %327 = getelementptr float, ptr addrspace(1) %326, i64 %219, !dbg !49
  %328 = getelementptr float, ptr addrspace(1) %327, i64 %226, !dbg !49
  %329 = getelementptr float, ptr addrspace(1) %328, i64 %229, !dbg !49
  %.idx15 = mul i64 %301, 48, !dbg !49
  %330 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx15, !dbg !49
  %331 = getelementptr float, ptr addrspace(1) %330, i64 %219, !dbg !49
  %332 = getelementptr float, ptr addrspace(1) %331, i64 %227, !dbg !49
  %333 = getelementptr float, ptr addrspace(1) %332, i64 %229, !dbg !49
  %334 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %305, i1 %262) #1, !dbg !50
  %335 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %309, i1 %263) #1, !dbg !50
  %336 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %313, i1 %264) #1, !dbg !50
  %337 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %317, i1 %265) #1, !dbg !50
  %338 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %321, i1 %266) #1, !dbg !50
  %339 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %325, i1 %267) #1, !dbg !50
  %340 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %329, i1 %268) #1, !dbg !50
  %341 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %333, i1 %269) #1, !dbg !50
  %342 = add i64 %139, 40, !dbg !51
  %343 = add i64 %140, 40, !dbg !51
  %344 = add i64 %141, 40, !dbg !51
  %345 = add i64 %142, 40, !dbg !51
  %346 = add i64 %143, 40, !dbg !51
  %347 = add i64 %144, 40, !dbg !51
  %348 = add i64 %145, 40, !dbg !51
  %349 = add i64 %146, 40, !dbg !51
  %350 = icmp slt i64 %139, 0, !dbg !52
  %351 = icmp slt i64 %140, 0, !dbg !52
  %352 = icmp slt i64 %141, 0, !dbg !52
  %353 = icmp slt i64 %142, 0, !dbg !52
  %354 = icmp slt i64 %143, 0, !dbg !52
  %355 = icmp slt i64 %144, 0, !dbg !52
  %356 = icmp slt i64 %145, 0, !dbg !52
  %357 = icmp slt i64 %146, 0, !dbg !52
  %358 = select i1 %350, i64 %342, i64 %139, !dbg !53
  %359 = select i1 %351, i64 %343, i64 %140, !dbg !53
  %360 = select i1 %352, i64 %344, i64 %141, !dbg !53
  %361 = select i1 %353, i64 %345, i64 %142, !dbg !53
  %362 = select i1 %354, i64 %346, i64 %143, !dbg !53
  %363 = select i1 %355, i64 %347, i64 %144, !dbg !53
  %364 = select i1 %356, i64 %348, i64 %145, !dbg !53
  %365 = select i1 %357, i64 %349, i64 %146, !dbg !53
  %366 = mul i64 %358, 480, !dbg !54
  %367 = mul i64 %359, 480, !dbg !54
  %368 = mul i64 %360, 480, !dbg !54
  %369 = mul i64 %361, 480, !dbg !54
  %370 = mul i64 %362, 480, !dbg !54
  %371 = mul i64 %363, 480, !dbg !54
  %372 = mul i64 %364, 480, !dbg !54
  %373 = mul i64 %365, 480, !dbg !54
  %374 = getelementptr float, ptr addrspace(1) %231, i64 %366, !dbg !55
  %375 = getelementptr float, ptr addrspace(1) %374, i64 %229, !dbg !55
  %376 = getelementptr float, ptr addrspace(1) %235, i64 %367, !dbg !55
  %377 = getelementptr float, ptr addrspace(1) %376, i64 %229, !dbg !55
  %378 = getelementptr float, ptr addrspace(1) %239, i64 %368, !dbg !55
  %379 = getelementptr float, ptr addrspace(1) %378, i64 %229, !dbg !55
  %380 = getelementptr float, ptr addrspace(1) %243, i64 %369, !dbg !55
  %381 = getelementptr float, ptr addrspace(1) %380, i64 %229, !dbg !55
  %382 = getelementptr float, ptr addrspace(1) %247, i64 %370, !dbg !55
  %383 = getelementptr float, ptr addrspace(1) %382, i64 %229, !dbg !55
  %384 = getelementptr float, ptr addrspace(1) %251, i64 %371, !dbg !55
  %385 = getelementptr float, ptr addrspace(1) %384, i64 %229, !dbg !55
  %386 = getelementptr float, ptr addrspace(1) %255, i64 %372, !dbg !55
  %387 = getelementptr float, ptr addrspace(1) %386, i64 %229, !dbg !55
  %388 = getelementptr float, ptr addrspace(1) %259, i64 %373, !dbg !55
  %389 = getelementptr float, ptr addrspace(1) %388, i64 %229, !dbg !55
  %390 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %375, i1 %262) #1, !dbg !56
  %391 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %377, i1 %263) #1, !dbg !56
  %392 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %379, i1 %264) #1, !dbg !56
  %393 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %381, i1 %265) #1, !dbg !56
  %394 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %383, i1 %266) #1, !dbg !56
  %395 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %385, i1 %267) #1, !dbg !56
  %396 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %387, i1 %268) #1, !dbg !56
  %397 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %389, i1 %269) #1, !dbg !56
  %398 = getelementptr float, ptr addrspace(1) %303, i64 %366, !dbg !57
  %399 = getelementptr float, ptr addrspace(1) %398, i64 %229, !dbg !57
  %400 = getelementptr float, ptr addrspace(1) %307, i64 %367, !dbg !57
  %401 = getelementptr float, ptr addrspace(1) %400, i64 %229, !dbg !57
  %402 = getelementptr float, ptr addrspace(1) %311, i64 %368, !dbg !57
  %403 = getelementptr float, ptr addrspace(1) %402, i64 %229, !dbg !57
  %404 = getelementptr float, ptr addrspace(1) %315, i64 %369, !dbg !57
  %405 = getelementptr float, ptr addrspace(1) %404, i64 %229, !dbg !57
  %406 = getelementptr float, ptr addrspace(1) %319, i64 %370, !dbg !57
  %407 = getelementptr float, ptr addrspace(1) %406, i64 %229, !dbg !57
  %408 = getelementptr float, ptr addrspace(1) %323, i64 %371, !dbg !57
  %409 = getelementptr float, ptr addrspace(1) %408, i64 %229, !dbg !57
  %410 = getelementptr float, ptr addrspace(1) %327, i64 %372, !dbg !57
  %411 = getelementptr float, ptr addrspace(1) %410, i64 %229, !dbg !57
  %412 = getelementptr float, ptr addrspace(1) %331, i64 %373, !dbg !57
  %413 = getelementptr float, ptr addrspace(1) %412, i64 %229, !dbg !57
  %414 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %399, i1 %262) #1, !dbg !58
  %415 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %401, i1 %263) #1, !dbg !58
  %416 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %403, i1 %264) #1, !dbg !58
  %417 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %405, i1 %265) #1, !dbg !58
  %418 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %407, i1 %266) #1, !dbg !58
  %419 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %409, i1 %267) #1, !dbg !58
  %420 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %411, i1 %268) #1, !dbg !58
  %421 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %413, i1 %269) #1, !dbg !58
  %422 = insertelement <2 x i32> poison, i32 %390, i64 0, !dbg !56
  %423 = insertelement <2 x i32> %422, i32 %270, i64 1, !dbg !56
  %424 = bitcast <2 x i32> %423 to <2 x float>, !dbg !56
  %425 = insertelement <2 x i32> poison, i32 %414, i64 0, !dbg !58
  %426 = insertelement <2 x i32> %425, i32 %334, i64 1, !dbg !58
  %427 = bitcast <2 x i32> %426 to <2 x float>, !dbg !58
  %428 = fsub <2 x float> %427, %424, !dbg !59
  %429 = insertelement <2 x i32> poison, i32 %123, i64 0, !dbg !60
  %430 = bitcast <2 x i32> %429 to <2 x float>, !dbg !60
  %431 = shufflevector <2 x float> %430, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %432 = fmul <2 x float> %428, %431, !dbg !60
  %433 = fadd <2 x float> %432, %424, !dbg !61
  %434 = insertelement <2 x i32> poison, i32 %391, i64 0, !dbg !56
  %435 = insertelement <2 x i32> %434, i32 %271, i64 1, !dbg !56
  %436 = bitcast <2 x i32> %435 to <2 x float>, !dbg !56
  %437 = insertelement <2 x i32> poison, i32 %415, i64 0, !dbg !58
  %438 = insertelement <2 x i32> %437, i32 %335, i64 1, !dbg !58
  %439 = bitcast <2 x i32> %438 to <2 x float>, !dbg !58
  %440 = fsub <2 x float> %439, %436, !dbg !59
  %441 = insertelement <2 x i32> poison, i32 %124, i64 0, !dbg !60
  %442 = bitcast <2 x i32> %441 to <2 x float>, !dbg !60
  %443 = shufflevector <2 x float> %442, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %444 = fmul <2 x float> %440, %443, !dbg !60
  %445 = fadd <2 x float> %444, %436, !dbg !61
  %446 = insertelement <2 x i32> poison, i32 %392, i64 0, !dbg !56
  %447 = insertelement <2 x i32> %446, i32 %272, i64 1, !dbg !56
  %448 = bitcast <2 x i32> %447 to <2 x float>, !dbg !56
  %449 = insertelement <2 x i32> poison, i32 %416, i64 0, !dbg !58
  %450 = insertelement <2 x i32> %449, i32 %336, i64 1, !dbg !58
  %451 = bitcast <2 x i32> %450 to <2 x float>, !dbg !58
  %452 = fsub <2 x float> %451, %448, !dbg !59
  %453 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !60
  %454 = bitcast <2 x i32> %453 to <2 x float>, !dbg !60
  %455 = shufflevector <2 x float> %454, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %456 = fmul <2 x float> %452, %455, !dbg !60
  %457 = fadd <2 x float> %456, %448, !dbg !61
  %458 = insertelement <2 x i32> poison, i32 %393, i64 0, !dbg !56
  %459 = insertelement <2 x i32> %458, i32 %273, i64 1, !dbg !56
  %460 = bitcast <2 x i32> %459 to <2 x float>, !dbg !56
  %461 = insertelement <2 x i32> poison, i32 %417, i64 0, !dbg !58
  %462 = insertelement <2 x i32> %461, i32 %337, i64 1, !dbg !58
  %463 = bitcast <2 x i32> %462 to <2 x float>, !dbg !58
  %464 = fsub <2 x float> %463, %460, !dbg !59
  %465 = insertelement <2 x i32> poison, i32 %126, i64 0, !dbg !60
  %466 = bitcast <2 x i32> %465 to <2 x float>, !dbg !60
  %467 = shufflevector <2 x float> %466, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %468 = fmul <2 x float> %464, %467, !dbg !60
  %469 = fadd <2 x float> %468, %460, !dbg !61
  %470 = insertelement <2 x i32> poison, i32 %394, i64 0, !dbg !56
  %471 = insertelement <2 x i32> %470, i32 %274, i64 1, !dbg !56
  %472 = bitcast <2 x i32> %471 to <2 x float>, !dbg !56
  %473 = insertelement <2 x i32> poison, i32 %418, i64 0, !dbg !58
  %474 = insertelement <2 x i32> %473, i32 %338, i64 1, !dbg !58
  %475 = bitcast <2 x i32> %474 to <2 x float>, !dbg !58
  %476 = fsub <2 x float> %475, %472, !dbg !59
  %477 = insertelement <2 x i32> poison, i32 %127, i64 0, !dbg !60
  %478 = bitcast <2 x i32> %477 to <2 x float>, !dbg !60
  %479 = shufflevector <2 x float> %478, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %480 = fmul <2 x float> %476, %479, !dbg !60
  %481 = fadd <2 x float> %480, %472, !dbg !61
  %482 = insertelement <2 x i32> poison, i32 %395, i64 0, !dbg !56
  %483 = insertelement <2 x i32> %482, i32 %275, i64 1, !dbg !56
  %484 = bitcast <2 x i32> %483 to <2 x float>, !dbg !56
  %485 = insertelement <2 x i32> poison, i32 %419, i64 0, !dbg !58
  %486 = insertelement <2 x i32> %485, i32 %339, i64 1, !dbg !58
  %487 = bitcast <2 x i32> %486 to <2 x float>, !dbg !58
  %488 = fsub <2 x float> %487, %484, !dbg !59
  %489 = insertelement <2 x i32> poison, i32 %128, i64 0, !dbg !60
  %490 = bitcast <2 x i32> %489 to <2 x float>, !dbg !60
  %491 = shufflevector <2 x float> %490, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %492 = fmul <2 x float> %488, %491, !dbg !60
  %493 = fadd <2 x float> %492, %484, !dbg !61
  %494 = insertelement <2 x i32> poison, i32 %396, i64 0, !dbg !56
  %495 = insertelement <2 x i32> %494, i32 %276, i64 1, !dbg !56
  %496 = bitcast <2 x i32> %495 to <2 x float>, !dbg !56
  %497 = insertelement <2 x i32> poison, i32 %420, i64 0, !dbg !58
  %498 = insertelement <2 x i32> %497, i32 %340, i64 1, !dbg !58
  %499 = bitcast <2 x i32> %498 to <2 x float>, !dbg !58
  %500 = fsub <2 x float> %499, %496, !dbg !59
  %501 = insertelement <2 x i32> poison, i32 %129, i64 0, !dbg !60
  %502 = bitcast <2 x i32> %501 to <2 x float>, !dbg !60
  %503 = shufflevector <2 x float> %502, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %504 = fmul <2 x float> %500, %503, !dbg !60
  %505 = fadd <2 x float> %504, %496, !dbg !61
  %506 = insertelement <2 x i32> poison, i32 %397, i64 0, !dbg !56
  %507 = insertelement <2 x i32> %506, i32 %277, i64 1, !dbg !56
  %508 = bitcast <2 x i32> %507 to <2 x float>, !dbg !56
  %509 = insertelement <2 x i32> poison, i32 %421, i64 0, !dbg !58
  %510 = insertelement <2 x i32> %509, i32 %341, i64 1, !dbg !58
  %511 = bitcast <2 x i32> %510 to <2 x float>, !dbg !58
  %512 = fsub <2 x float> %511, %508, !dbg !59
  %513 = insertelement <2 x i32> poison, i32 %130, i64 0, !dbg !60
  %514 = bitcast <2 x i32> %513 to <2 x float>, !dbg !60
  %515 = shufflevector <2 x float> %514, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %516 = fmul <2 x float> %512, %515, !dbg !60
  %517 = fadd <2 x float> %516, %508, !dbg !61
  %518 = extractelement <2 x float> %433, i64 0, !dbg !62
  %519 = extractelement <2 x float> %433, i64 1, !dbg !63
  %520 = fsub float %518, %519, !dbg !62
  %521 = extractelement <2 x float> %445, i64 0, !dbg !62
  %522 = extractelement <2 x float> %445, i64 1, !dbg !63
  %523 = fsub float %521, %522, !dbg !62
  %524 = extractelement <2 x float> %457, i64 0, !dbg !62
  %525 = extractelement <2 x float> %457, i64 1, !dbg !63
  %526 = fsub float %524, %525, !dbg !62
  %527 = extractelement <2 x float> %469, i64 0, !dbg !62
  %528 = extractelement <2 x float> %469, i64 1, !dbg !63
  %529 = fsub float %527, %528, !dbg !62
  %530 = extractelement <2 x float> %481, i64 0, !dbg !62
  %531 = extractelement <2 x float> %481, i64 1, !dbg !63
  %532 = fsub float %530, %531, !dbg !62
  %533 = extractelement <2 x float> %493, i64 0, !dbg !62
  %534 = extractelement <2 x float> %493, i64 1, !dbg !63
  %535 = fsub float %533, %534, !dbg !62
  %536 = extractelement <2 x float> %505, i64 0, !dbg !62
  %537 = extractelement <2 x float> %505, i64 1, !dbg !63
  %538 = fsub float %536, %537, !dbg !62
  %539 = extractelement <2 x float> %517, i64 0, !dbg !62
  %540 = extractelement <2 x float> %517, i64 1, !dbg !63
  %541 = fsub float %539, %540, !dbg !62
  %542 = fmul float %520, %156, !dbg !64
  %543 = fmul float %523, %158, !dbg !64
  %544 = fmul float %526, %160, !dbg !64
  %545 = fmul float %529, %162, !dbg !64
  %546 = fmul float %532, %164, !dbg !64
  %547 = fmul float %535, %166, !dbg !64
  %548 = fmul float %538, %168, !dbg !64
  %549 = fmul float %541, %170, !dbg !64
  %550 = fadd float %519, %542, !dbg !63
  %551 = fadd float %522, %543, !dbg !63
  %552 = fadd float %525, %544, !dbg !63
  %553 = fadd float %528, %545, !dbg !63
  %554 = fadd float %531, %546, !dbg !63
  %555 = fadd float %534, %547, !dbg !63
  %556 = fadd float %537, %548, !dbg !63
  %557 = fadd float %540, %549, !dbg !63
  %558 = mul i32 %17, 12, !dbg !65
  %559 = mul i32 %18, 12, !dbg !65
  %560 = mul i32 %19, 12, !dbg !65
  %561 = mul i32 %20, 12, !dbg !65
  %562 = mul i32 %21, 12, !dbg !65
  %563 = mul i32 %22, 12, !dbg !65
  %564 = mul i32 %23, 12, !dbg !65
  %565 = mul i32 %24, 12, !dbg !65
  %566 = mul i32 %49, 1088652, !dbg !66
  %567 = add i32 %566, %.decomposed31, !dbg !67
  %568 = add i32 %567, %558, !dbg !68
  %569 = add i32 %567, %559, !dbg !68
  %570 = add i32 %567, %560, !dbg !68
  %571 = add i32 %567, %561, !dbg !68
  %572 = add i32 %567, %562, !dbg !68
  %573 = add i32 %567, %563, !dbg !68
  %574 = add i32 %567, %564, !dbg !68
  %575 = add i32 %567, %565, !dbg !68
  %576 = sext i32 %568 to i64, !dbg !69
  %577 = getelementptr float, ptr addrspace(1) %7, i64 %576, !dbg !69
  %578 = sext i32 %569 to i64, !dbg !69
  %579 = getelementptr float, ptr addrspace(1) %7, i64 %578, !dbg !69
  %580 = sext i32 %570 to i64, !dbg !69
  %581 = getelementptr float, ptr addrspace(1) %7, i64 %580, !dbg !69
  %582 = sext i32 %571 to i64, !dbg !69
  %583 = getelementptr float, ptr addrspace(1) %7, i64 %582, !dbg !69
  %584 = sext i32 %572 to i64, !dbg !69
  %585 = getelementptr float, ptr addrspace(1) %7, i64 %584, !dbg !69
  %586 = sext i32 %573 to i64, !dbg !69
  %587 = getelementptr float, ptr addrspace(1) %7, i64 %586, !dbg !69
  %588 = sext i32 %574 to i64, !dbg !69
  %589 = getelementptr float, ptr addrspace(1) %7, i64 %588, !dbg !69
  %590 = sext i32 %575 to i64, !dbg !69
  %591 = getelementptr float, ptr addrspace(1) %7, i64 %590, !dbg !69
  %592 = bitcast float %550 to i32, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %592, ptr addrspace(1) %577, i1 %262) #1, !dbg !70
  %593 = bitcast float %551 to i32, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %593, ptr addrspace(1) %579, i1 %263) #1, !dbg !70
  %594 = bitcast float %552 to i32, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %594, ptr addrspace(1) %581, i1 %264) #1, !dbg !70
  %595 = bitcast float %553 to i32, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %595, ptr addrspace(1) %583, i1 %265) #1, !dbg !70
  %596 = bitcast float %554 to i32, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %596, ptr addrspace(1) %585, i1 %266) #1, !dbg !70
  %597 = bitcast float %555 to i32, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %597, ptr addrspace(1) %587, i1 %267) #1, !dbg !70
  %598 = bitcast float %556 to i32, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %598, ptr addrspace(1) %589, i1 %268) #1, !dbg !70
  %599 = bitcast float %557 to i32, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %599, ptr addrspace(1) %591, i1 %269) #1, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csdi3tc4f35yio3rsrwrdprh3jukvt2khnzifz3e2unel443iao7.py", directory: "inductor_cache/sd")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_31, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_31, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_31", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 28, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 34, column: 30, scope: !7)
!22 = !DILocation(line: 34, column: 35, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 35, scope: !7)
!25 = !DILocation(line: 36, column: 31, scope: !7)
!26 = !DILocation(line: 36, column: 36, scope: !7)
!27 = !DILocation(line: 37, column: 31, scope: !7)
!28 = !DILocation(line: 37, column: 36, scope: !7)
!29 = !DILocation(line: 38, column: 31, scope: !7)
!30 = !DILocation(line: 38, column: 36, scope: !7)
!31 = !DILocation(line: 39, column: 31, scope: !7)
!32 = !DILocation(line: 39, column: 36, scope: !7)
!33 = !DILocation(line: 41, column: 18, scope: !7)
!34 = !DILocation(line: 42, column: 18, scope: !7)
!35 = !DILocation(line: 43, column: 32, scope: !7)
!36 = !DILocation(line: 44, column: 18, scope: !7)
!37 = !DILocation(line: 45, column: 18, scope: !7)
!38 = !DILocation(line: 46, column: 32, scope: !7)
!39 = !DILocation(line: 47, column: 35, scope: !7)
!40 = !DILocation(line: 47, column: 49, scope: !7)
!41 = !DILocation(line: 47, column: 62, scope: !7)
!42 = !DILocation(line: 47, column: 56, scope: !7)
!43 = !DILocation(line: 47, column: 30, scope: !7)
!44 = !DILocation(line: 47, column: 75, scope: !7)
!45 = !DILocation(line: 47, column: 67, scope: !7)
!46 = !DILocation(line: 48, column: 20, scope: !7)
!47 = !DILocation(line: 49, column: 20, scope: !7)
!48 = !DILocation(line: 50, column: 35, scope: !7)
!49 = !DILocation(line: 51, column: 31, scope: !7)
!50 = !DILocation(line: 51, column: 69, scope: !7)
!51 = !DILocation(line: 55, column: 20, scope: !7)
!52 = !DILocation(line: 56, column: 20, scope: !7)
!53 = !DILocation(line: 57, column: 35, scope: !7)
!54 = !DILocation(line: 58, column: 50, scope: !7)
!55 = !DILocation(line: 58, column: 31, scope: !7)
!56 = !DILocation(line: 58, column: 69, scope: !7)
!57 = !DILocation(line: 59, column: 31, scope: !7)
!58 = !DILocation(line: 59, column: 70, scope: !7)
!59 = !DILocation(line: 60, column: 20, scope: !7)
!60 = !DILocation(line: 61, column: 20, scope: !7)
!61 = !DILocation(line: 62, column: 20, scope: !7)
!62 = !DILocation(line: 63, column: 20, scope: !7)
!63 = !DILocation(line: 65, column: 20, scope: !7)
!64 = !DILocation(line: 64, column: 20, scope: !7)
!65 = !DILocation(line: 66, column: 33, scope: !7)
!66 = !DILocation(line: 66, column: 46, scope: !7)
!67 = !DILocation(line: 66, column: 30, scope: !7)
!68 = !DILocation(line: 66, column: 38, scope: !7)
!69 = !DILocation(line: 66, column: 25, scope: !7)
!70 = !DILocation(line: 66, column: 58, scope: !7)
!71 = !DILocation(line: 66, column: 4, scope: !7)
