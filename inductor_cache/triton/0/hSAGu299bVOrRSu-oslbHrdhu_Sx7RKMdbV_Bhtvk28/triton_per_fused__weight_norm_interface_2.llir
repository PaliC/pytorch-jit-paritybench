; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__weight_norm_interface_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = icmp slt i32 %8, 256, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = lshr i32 %10, 5, !dbg !12
  %13 = shl i32 %10, 2, !dbg !12
  %14 = and i32 %13, 252, !dbg !12
  %15 = icmp samesign ult i32 %14, 164, !dbg !13
  %16 = mul i32 %8, 164, !dbg !14
  %17 = add i32 %16, %14, !dbg !15
  %18 = sext i32 %17 to i64, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !16
  %20 = and i1 %15, %9, !dbg !17
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !18
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !18
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !18
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !18
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !18
  %26 = bitcast i32 %22 to float, !dbg !18
  %27 = bitcast i32 %23 to float, !dbg !18
  %28 = bitcast i32 %24 to float, !dbg !18
  %29 = bitcast i32 %25 to float, !dbg !18
  %30 = sext i32 %8 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %9) #5, !dbg !20
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %9) #5, !dbg !20
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %9) #5, !dbg !20
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %9) #5, !dbg !20
  %36 = fmul float %26, %26, !dbg !21
  %37 = fmul float %27, %27, !dbg !21
  %38 = fmul float %28, %28, !dbg !21
  %39 = fmul float %29, %29, !dbg !21
  %40 = fadd float %36, %37, !dbg !22
  %41 = fadd float %38, %40, !dbg !22
  %42 = fadd float %39, %41, !dbg !22
  %43 = select i1 %20, float %42, float 0.000000e+00, !dbg !22
  %44 = bitcast float %43 to i32, !dbg !27
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 16, i32 31), !dbg !27
  %46 = bitcast i32 %45 to float, !dbg !27
  %47 = fadd float %43, %46, !dbg !22
  %48 = bitcast float %47 to i32, !dbg !27
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 8, i32 31), !dbg !27
  %50 = bitcast i32 %49 to float, !dbg !27
  %51 = fadd float %47, %50, !dbg !22
  %52 = bitcast float %51 to i32, !dbg !27
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 4, i32 31), !dbg !27
  %54 = bitcast i32 %53 to float, !dbg !27
  %55 = fadd float %51, %54, !dbg !22
  %56 = bitcast float %55 to i32, !dbg !27
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 2, i32 31), !dbg !27
  %58 = bitcast i32 %57 to float, !dbg !27
  %59 = fadd float %55, %58, !dbg !22
  %60 = bitcast float %59 to i32, !dbg !27
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 1, i32 31), !dbg !27
  %62 = bitcast i32 %61 to float, !dbg !27
  %63 = fadd float %59, %62, !dbg !22
  %64 = icmp eq i32 %11, 0, !dbg !27
  %65 = and i32 %12, 1, !dbg !27
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i32 %65, !dbg !27
  %67 = bitcast float %63 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 %64) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %68 = icmp slt i32 %10, 2, !dbg !27
  %69 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !27
  %70 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %69, i1 %68) #5, !dbg !27
  %71 = bitcast i32 %70 to float, !dbg !27
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 1, i32 31), !dbg !27
  %73 = bitcast i32 %72 to float, !dbg !27
  %74 = fadd float %71, %73, !dbg !22
  %75 = and i32 %10, 1, !dbg !27
  %76 = icmp eq i32 %75, 0, !dbg !27
  %77 = and i1 %68, %76, !dbg !27
  %78 = bitcast float %74 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %78, i1 %77) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %79 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !27
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %.not.i = icmp eq i32 %80, 0, !dbg !28
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %.not1.i = icmp eq i32 %81, 0, !dbg !28
  br i1 %.not.i, label %87, label %82, !dbg !28

82:                                               ; preds = %7
  br i1 %.not1.i, label %85, label %83, !dbg !28

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

87:                                               ; preds = %7
  br i1 %.not1.i, label %90, label %88, !dbg !28

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %83, %85, %88, %90
  %.0.i = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !28
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %.not.i16 = icmp eq i32 %98, 0, !dbg !28
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %.not1.i19 = icmp eq i32 %99, 0, !dbg !28
  br i1 %.not.i16, label %105, label %100, !dbg !28

100:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %103, label %101, !dbg !28

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #5, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #5, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

105:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %108, label %106, !dbg !28

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #5, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #5, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

__nv_sqrtf.exit20:                                ; preds = %101, %103, %106, %108
  %.0.i18 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !28
  %110 = bitcast i32 %35 to float, !dbg !20
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float %.0.i18) #5, !dbg !29
  %112 = fmul float %111, %26, !dbg !30
  %113 = fmul float %111, %27, !dbg !30
  %114 = fmul float %111, %28, !dbg !30
  %115 = fmul float %111, %29, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !32
  %urem = and i32 %10, 63, !dbg !33
  %117 = icmp eq i32 %urem, 0, !dbg !33
  %118 = bitcast float %.0.i to i32, !dbg !33
  %119 = and i1 %117, %9, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %118, ptr addrspace(1) %116, i1 %119) #5, !dbg !33
  %120 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !34
  %121 = bitcast float %112 to i32, !dbg !35
  %122 = bitcast float %113 to i32, !dbg !35
  %123 = bitcast float %114 to i32, !dbg !35
  %124 = bitcast float %115 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %121, i32 %122, i32 %123, i32 %124, ptr addrspace(1) %120, i1 %20) #5, !dbg !35
  %125 = getelementptr float, ptr addrspace(1) %4, i64 %18, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %121, i32 %122, i32 %123, i32 %124, ptr addrspace(1) %125, i1 %20) #5, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ca6bjcsodvanublzu3glyxrxpjyx7ofxyce4scnmhspcxxr2xdir.py", directory: "inductor_cache/a6")
!4 = !{ptr @triton_per_fused__weight_norm_interface_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__weight_norm_interface_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__weight_norm_interface_2", linkageName: "triton_per_fused__weight_norm_interface_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 28, column: 21, scope: !7)
!14 = !DILocation(line: 31, column: 39, scope: !7)
!15 = !DILocation(line: 31, column: 35, scope: !7)
!16 = !DILocation(line: 31, column: 30, scope: !7)
!17 = !DILocation(line: 31, column: 52, scope: !7)
!18 = !DILocation(line: 31, column: 44, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 18, scope: !7)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !26)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!26 = !DILocation(line: 36, column: 24, scope: !7)
!27 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !26)
!28 = !DILocation(line: 37, column: 26, scope: !7)
!29 = !DILocation(line: 38, column: 18, scope: !7)
!30 = !DILocation(line: 39, column: 18, scope: !7)
!31 = !DILocation(line: 40, column: 4, scope: !7)
!32 = !DILocation(line: 41, column: 28, scope: !7)
!33 = !DILocation(line: 41, column: 39, scope: !7)
!34 = !DILocation(line: 42, column: 25, scope: !7)
!35 = !DILocation(line: 42, column: 45, scope: !7)
!36 = !DILocation(line: 43, column: 25, scope: !7)
!37 = !DILocation(line: 43, column: 45, scope: !7)
!38 = !DILocation(line: 43, column: 4, scope: !7)
