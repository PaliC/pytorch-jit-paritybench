; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__softmax_mul_sum_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 12, !dbg !12
  %13 = and i32 %11, 252, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %14, 64, !dbg !13
  %16 = or disjoint i32 %14, 128, !dbg !13
  %17 = or disjoint i32 %14, 192, !dbg !13
  %18 = or disjoint i32 %7, %13, !dbg !13
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %20 = shl i32 %19, 4, !dbg !15
  %.lobit12 = lshr i32 %8, 6, !dbg !16
  %21 = and i32 %.lobit12, 3, !dbg !16
  %22 = or disjoint i32 %20, %12, !dbg !17
  %23 = or disjoint i32 %20, %21, !dbg !17
  %24 = or disjoint i32 %23, 4, !dbg !17
  %25 = or disjoint i32 %23, 8, !dbg !17
  %26 = or disjoint i32 %23, 12, !dbg !17
  %27 = icmp slt i32 %22, 512, !dbg !18
  %28 = icmp slt i32 %23, 512, !dbg !18
  %29 = icmp slt i32 %24, 512, !dbg !18
  %30 = icmp slt i32 %25, 512, !dbg !18
  %31 = icmp slt i32 %26, 512, !dbg !18
  %32 = sdiv i32 %14, 4096, !dbg !19
  %33 = sdiv i32 %15, 4096, !dbg !19
  %34 = sdiv i32 %16, 4096, !dbg !19
  %35 = sdiv i32 %17, 4096, !dbg !19
  %.frozen = freeze i32 %18, !dbg !19
  %36 = sdiv i32 %.frozen, 4096, !dbg !19
  %37 = mul i32 %36, 4096, !dbg !20
  %.decomposed = sub i32 %.frozen, %37, !dbg !20
  %38 = shl nsw i32 %32, 9, !dbg !21
  %39 = shl nsw i32 %33, 9, !dbg !21
  %40 = shl nsw i32 %34, 9, !dbg !21
  %41 = shl nsw i32 %35, 9, !dbg !21
  %42 = add i32 %38, %22, !dbg !22
  %43 = add i32 %22, %39, !dbg !22
  %44 = add i32 %22, %40, !dbg !22
  %45 = add i32 %22, %41, !dbg !22
  %46 = sext i32 %42 to i64, !dbg !23
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !23
  %48 = sext i32 %43 to i64, !dbg !23
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !23
  %50 = sext i32 %44 to i64, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !23
  %52 = sext i32 %45 to i64, !dbg !23
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !23
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %27) #2, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !24
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %27) #2, !dbg !24
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !24
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !24
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !24
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %27) #2, !dbg !24
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !24
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !24
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !24
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %27) #2, !dbg !24
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !24
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !24
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !24
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !24
  %74 = shl i32 %14, 9, !dbg !25
  %75 = shl i32 %15, 9, !dbg !25
  %76 = shl i32 %16, 9, !dbg !25
  %77 = shl i32 %17, 9, !dbg !25
  %78 = add i32 %22, %74, !dbg !26
  %79 = add i32 %22, %75, !dbg !26
  %80 = add i32 %22, %76, !dbg !26
  %81 = add i32 %22, %77, !dbg !26
  %82 = sext i32 %78 to i64, !dbg !27
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !27
  %84 = sext i32 %79 to i64, !dbg !27
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !27
  %86 = sext i32 %80 to i64, !dbg !27
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !27
  %88 = sext i32 %81 to i64, !dbg !27
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !27
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %83, i1 %27) #2, !dbg !28
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !28
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !28
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !28
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !28
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %85, i1 %27) #2, !dbg !28
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !28
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !28
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !28
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !28
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %87, i1 %27) #2, !dbg !28
  %101 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !28
  %102 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !28
  %103 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !28
  %104 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !28
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %89, i1 %27) #2, !dbg !28
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !28
  %107 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !28
  %108 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !28
  %109 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !28
  %110 = add i32 %22, 2048, !dbg !29
  %111 = add i32 %110, %38, !dbg !30
  %112 = add i32 %110, %39, !dbg !30
  %113 = add i32 %110, %40, !dbg !30
  %114 = add i32 %110, %41, !dbg !30
  %115 = sext i32 %111 to i64, !dbg !31
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !31
  %117 = sext i32 %112 to i64, !dbg !31
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !31
  %119 = sext i32 %113 to i64, !dbg !31
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !31
  %121 = sext i32 %114 to i64, !dbg !31
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !31
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %116, i1 %27) #2, !dbg !32
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !32
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !32
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !32
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !32
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %118, i1 %27) #2, !dbg !32
  %129 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !32
  %130 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !32
  %131 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !32
  %132 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !32
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %120, i1 %27) #2, !dbg !32
  %134 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !32
  %135 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !32
  %136 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !32
  %137 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !32
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %122, i1 %27) #2, !dbg !32
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !32
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !32
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !32
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !32
  %143 = add i32 %22, 8388608, !dbg !33
  %144 = add i32 %143, %74, !dbg !34
  %145 = add i32 %143, %75, !dbg !34
  %146 = add i32 %143, %76, !dbg !34
  %147 = add i32 %143, %77, !dbg !34
  %148 = sext i32 %144 to i64, !dbg !35
  %149 = getelementptr float, ptr addrspace(1) %1, i64 %148, !dbg !35
  %150 = sext i32 %145 to i64, !dbg !35
  %151 = getelementptr float, ptr addrspace(1) %1, i64 %150, !dbg !35
  %152 = sext i32 %146 to i64, !dbg !35
  %153 = getelementptr float, ptr addrspace(1) %1, i64 %152, !dbg !35
  %154 = sext i32 %147 to i64, !dbg !35
  %155 = getelementptr float, ptr addrspace(1) %1, i64 %154, !dbg !35
  %156 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %149, i1 %27) #2, !dbg !36
  %157 = extractvalue { i32, i32, i32, i32 } %156, 0, !dbg !36
  %158 = extractvalue { i32, i32, i32, i32 } %156, 1, !dbg !36
  %159 = extractvalue { i32, i32, i32, i32 } %156, 2, !dbg !36
  %160 = extractvalue { i32, i32, i32, i32 } %156, 3, !dbg !36
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %151, i1 %27) #2, !dbg !36
  %162 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !36
  %163 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !36
  %164 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !36
  %165 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !36
  %166 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %153, i1 %27) #2, !dbg !36
  %167 = extractvalue { i32, i32, i32, i32 } %166, 0, !dbg !36
  %168 = extractvalue { i32, i32, i32, i32 } %166, 1, !dbg !36
  %169 = extractvalue { i32, i32, i32, i32 } %166, 2, !dbg !36
  %170 = extractvalue { i32, i32, i32, i32 } %166, 3, !dbg !36
  %171 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %155, i1 %27) #2, !dbg !36
  %172 = extractvalue { i32, i32, i32, i32 } %171, 0, !dbg !36
  %173 = extractvalue { i32, i32, i32, i32 } %171, 1, !dbg !36
  %174 = extractvalue { i32, i32, i32, i32 } %171, 2, !dbg !36
  %175 = extractvalue { i32, i32, i32, i32 } %171, 3, !dbg !36
  %176 = add i32 %22, 4096, !dbg !37
  %177 = add i32 %176, %38, !dbg !38
  %178 = add i32 %176, %39, !dbg !38
  %179 = add i32 %176, %40, !dbg !38
  %180 = add i32 %176, %41, !dbg !38
  %181 = sext i32 %177 to i64, !dbg !39
  %182 = getelementptr float, ptr addrspace(1) %0, i64 %181, !dbg !39
  %183 = sext i32 %178 to i64, !dbg !39
  %184 = getelementptr float, ptr addrspace(1) %0, i64 %183, !dbg !39
  %185 = sext i32 %179 to i64, !dbg !39
  %186 = getelementptr float, ptr addrspace(1) %0, i64 %185, !dbg !39
  %187 = sext i32 %180 to i64, !dbg !39
  %188 = getelementptr float, ptr addrspace(1) %0, i64 %187, !dbg !39
  %189 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %182, i1 %27) #2, !dbg !40
  %190 = extractvalue { i32, i32, i32, i32 } %189, 0, !dbg !40
  %191 = extractvalue { i32, i32, i32, i32 } %189, 1, !dbg !40
  %192 = extractvalue { i32, i32, i32, i32 } %189, 2, !dbg !40
  %193 = extractvalue { i32, i32, i32, i32 } %189, 3, !dbg !40
  %194 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %184, i1 %27) #2, !dbg !40
  %195 = extractvalue { i32, i32, i32, i32 } %194, 0, !dbg !40
  %196 = extractvalue { i32, i32, i32, i32 } %194, 1, !dbg !40
  %197 = extractvalue { i32, i32, i32, i32 } %194, 2, !dbg !40
  %198 = extractvalue { i32, i32, i32, i32 } %194, 3, !dbg !40
  %199 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %186, i1 %27) #2, !dbg !40
  %200 = extractvalue { i32, i32, i32, i32 } %199, 0, !dbg !40
  %201 = extractvalue { i32, i32, i32, i32 } %199, 1, !dbg !40
  %202 = extractvalue { i32, i32, i32, i32 } %199, 2, !dbg !40
  %203 = extractvalue { i32, i32, i32, i32 } %199, 3, !dbg !40
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %188, i1 %27) #2, !dbg !40
  %205 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !40
  %206 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !40
  %207 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !40
  %208 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !40
  %209 = add i32 %22, 16777216, !dbg !41
  %210 = add i32 %209, %74, !dbg !42
  %211 = add i32 %209, %75, !dbg !42
  %212 = add i32 %209, %76, !dbg !42
  %213 = add i32 %209, %77, !dbg !42
  %214 = sext i32 %210 to i64, !dbg !43
  %215 = getelementptr float, ptr addrspace(1) %1, i64 %214, !dbg !43
  %216 = sext i32 %211 to i64, !dbg !43
  %217 = getelementptr float, ptr addrspace(1) %1, i64 %216, !dbg !43
  %218 = sext i32 %212 to i64, !dbg !43
  %219 = getelementptr float, ptr addrspace(1) %1, i64 %218, !dbg !43
  %220 = sext i32 %213 to i64, !dbg !43
  %221 = getelementptr float, ptr addrspace(1) %1, i64 %220, !dbg !43
  %222 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %215, i1 %27) #2, !dbg !44
  %223 = extractvalue { i32, i32, i32, i32 } %222, 0, !dbg !44
  %224 = extractvalue { i32, i32, i32, i32 } %222, 1, !dbg !44
  %225 = extractvalue { i32, i32, i32, i32 } %222, 2, !dbg !44
  %226 = extractvalue { i32, i32, i32, i32 } %222, 3, !dbg !44
  %227 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %217, i1 %27) #2, !dbg !44
  %228 = extractvalue { i32, i32, i32, i32 } %227, 0, !dbg !44
  %229 = extractvalue { i32, i32, i32, i32 } %227, 1, !dbg !44
  %230 = extractvalue { i32, i32, i32, i32 } %227, 2, !dbg !44
  %231 = extractvalue { i32, i32, i32, i32 } %227, 3, !dbg !44
  %232 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %219, i1 %27) #2, !dbg !44
  %233 = extractvalue { i32, i32, i32, i32 } %232, 0, !dbg !44
  %234 = extractvalue { i32, i32, i32, i32 } %232, 1, !dbg !44
  %235 = extractvalue { i32, i32, i32, i32 } %232, 2, !dbg !44
  %236 = extractvalue { i32, i32, i32, i32 } %232, 3, !dbg !44
  %237 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %221, i1 %27) #2, !dbg !44
  %238 = extractvalue { i32, i32, i32, i32 } %237, 0, !dbg !44
  %239 = extractvalue { i32, i32, i32, i32 } %237, 1, !dbg !44
  %240 = extractvalue { i32, i32, i32, i32 } %237, 2, !dbg !44
  %241 = extractvalue { i32, i32, i32, i32 } %237, 3, !dbg !44
  %242 = add i32 %22, 6144, !dbg !45
  %243 = add i32 %242, %38, !dbg !46
  %244 = add i32 %242, %39, !dbg !46
  %245 = add i32 %242, %40, !dbg !46
  %246 = add i32 %242, %41, !dbg !46
  %247 = sext i32 %243 to i64, !dbg !47
  %248 = getelementptr float, ptr addrspace(1) %0, i64 %247, !dbg !47
  %249 = sext i32 %244 to i64, !dbg !47
  %250 = getelementptr float, ptr addrspace(1) %0, i64 %249, !dbg !47
  %251 = sext i32 %245 to i64, !dbg !47
  %252 = getelementptr float, ptr addrspace(1) %0, i64 %251, !dbg !47
  %253 = sext i32 %246 to i64, !dbg !47
  %254 = getelementptr float, ptr addrspace(1) %0, i64 %253, !dbg !47
  %255 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %248, i1 %27) #2, !dbg !48
  %256 = extractvalue { i32, i32, i32, i32 } %255, 0, !dbg !48
  %257 = extractvalue { i32, i32, i32, i32 } %255, 1, !dbg !48
  %258 = extractvalue { i32, i32, i32, i32 } %255, 2, !dbg !48
  %259 = extractvalue { i32, i32, i32, i32 } %255, 3, !dbg !48
  %260 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %250, i1 %27) #2, !dbg !48
  %261 = extractvalue { i32, i32, i32, i32 } %260, 0, !dbg !48
  %262 = extractvalue { i32, i32, i32, i32 } %260, 1, !dbg !48
  %263 = extractvalue { i32, i32, i32, i32 } %260, 2, !dbg !48
  %264 = extractvalue { i32, i32, i32, i32 } %260, 3, !dbg !48
  %265 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %252, i1 %27) #2, !dbg !48
  %266 = extractvalue { i32, i32, i32, i32 } %265, 0, !dbg !48
  %267 = extractvalue { i32, i32, i32, i32 } %265, 1, !dbg !48
  %268 = extractvalue { i32, i32, i32, i32 } %265, 2, !dbg !48
  %269 = extractvalue { i32, i32, i32, i32 } %265, 3, !dbg !48
  %270 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %254, i1 %27) #2, !dbg !48
  %271 = extractvalue { i32, i32, i32, i32 } %270, 0, !dbg !48
  %272 = extractvalue { i32, i32, i32, i32 } %270, 1, !dbg !48
  %273 = extractvalue { i32, i32, i32, i32 } %270, 2, !dbg !48
  %274 = extractvalue { i32, i32, i32, i32 } %270, 3, !dbg !48
  %275 = add i32 %22, 25165824, !dbg !49
  %276 = add i32 %275, %74, !dbg !50
  %277 = add i32 %275, %75, !dbg !50
  %278 = add i32 %275, %76, !dbg !50
  %279 = add i32 %275, %77, !dbg !50
  %280 = sext i32 %276 to i64, !dbg !51
  %281 = getelementptr float, ptr addrspace(1) %1, i64 %280, !dbg !51
  %282 = sext i32 %277 to i64, !dbg !51
  %283 = getelementptr float, ptr addrspace(1) %1, i64 %282, !dbg !51
  %284 = sext i32 %278 to i64, !dbg !51
  %285 = getelementptr float, ptr addrspace(1) %1, i64 %284, !dbg !51
  %286 = sext i32 %279 to i64, !dbg !51
  %287 = getelementptr float, ptr addrspace(1) %1, i64 %286, !dbg !51
  %288 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %281, i1 %27) #2, !dbg !52
  %289 = extractvalue { i32, i32, i32, i32 } %288, 0, !dbg !52
  %290 = extractvalue { i32, i32, i32, i32 } %288, 1, !dbg !52
  %291 = extractvalue { i32, i32, i32, i32 } %288, 2, !dbg !52
  %292 = extractvalue { i32, i32, i32, i32 } %288, 3, !dbg !52
  %293 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %283, i1 %27) #2, !dbg !52
  %294 = extractvalue { i32, i32, i32, i32 } %293, 0, !dbg !52
  %295 = extractvalue { i32, i32, i32, i32 } %293, 1, !dbg !52
  %296 = extractvalue { i32, i32, i32, i32 } %293, 2, !dbg !52
  %297 = extractvalue { i32, i32, i32, i32 } %293, 3, !dbg !52
  %298 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %285, i1 %27) #2, !dbg !52
  %299 = extractvalue { i32, i32, i32, i32 } %298, 0, !dbg !52
  %300 = extractvalue { i32, i32, i32, i32 } %298, 1, !dbg !52
  %301 = extractvalue { i32, i32, i32, i32 } %298, 2, !dbg !52
  %302 = extractvalue { i32, i32, i32, i32 } %298, 3, !dbg !52
  %303 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %287, i1 %27) #2, !dbg !52
  %304 = extractvalue { i32, i32, i32, i32 } %303, 0, !dbg !52
  %305 = extractvalue { i32, i32, i32, i32 } %303, 1, !dbg !52
  %306 = extractvalue { i32, i32, i32, i32 } %303, 2, !dbg !52
  %307 = extractvalue { i32, i32, i32, i32 } %303, 3, !dbg !52
  %308 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !24
  %309 = insertelement <2 x i32> %308, i32 %124, i64 1, !dbg !24
  %310 = bitcast <2 x i32> %309 to <2 x float>, !dbg !24
  %311 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !28
  %312 = insertelement <2 x i32> %311, i32 %157, i64 1, !dbg !28
  %313 = bitcast <2 x i32> %312 to <2 x float>, !dbg !28
  %314 = fmul <2 x float> %310, %313, !dbg !53
  %315 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !24
  %316 = insertelement <2 x i32> %315, i32 %125, i64 1, !dbg !24
  %317 = bitcast <2 x i32> %316 to <2 x float>, !dbg !24
  %318 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !28
  %319 = insertelement <2 x i32> %318, i32 %158, i64 1, !dbg !28
  %320 = bitcast <2 x i32> %319 to <2 x float>, !dbg !28
  %321 = fmul <2 x float> %317, %320, !dbg !53
  %322 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !24
  %323 = insertelement <2 x i32> %322, i32 %126, i64 1, !dbg !24
  %324 = bitcast <2 x i32> %323 to <2 x float>, !dbg !24
  %325 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !28
  %326 = insertelement <2 x i32> %325, i32 %159, i64 1, !dbg !28
  %327 = bitcast <2 x i32> %326 to <2 x float>, !dbg !28
  %328 = fmul <2 x float> %324, %327, !dbg !53
  %329 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !24
  %330 = insertelement <2 x i32> %329, i32 %127, i64 1, !dbg !24
  %331 = bitcast <2 x i32> %330 to <2 x float>, !dbg !24
  %332 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !28
  %333 = insertelement <2 x i32> %332, i32 %160, i64 1, !dbg !28
  %334 = bitcast <2 x i32> %333 to <2 x float>, !dbg !28
  %335 = fmul <2 x float> %331, %334, !dbg !53
  %336 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !24
  %337 = insertelement <2 x i32> %336, i32 %129, i64 1, !dbg !24
  %338 = bitcast <2 x i32> %337 to <2 x float>, !dbg !24
  %339 = insertelement <2 x i32> poison, i32 %96, i64 0, !dbg !28
  %340 = insertelement <2 x i32> %339, i32 %162, i64 1, !dbg !28
  %341 = bitcast <2 x i32> %340 to <2 x float>, !dbg !28
  %342 = fmul <2 x float> %338, %341, !dbg !53
  %343 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !24
  %344 = insertelement <2 x i32> %343, i32 %130, i64 1, !dbg !24
  %345 = bitcast <2 x i32> %344 to <2 x float>, !dbg !24
  %346 = insertelement <2 x i32> poison, i32 %97, i64 0, !dbg !28
  %347 = insertelement <2 x i32> %346, i32 %163, i64 1, !dbg !28
  %348 = bitcast <2 x i32> %347 to <2 x float>, !dbg !28
  %349 = fmul <2 x float> %345, %348, !dbg !53
  %350 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !24
  %351 = insertelement <2 x i32> %350, i32 %131, i64 1, !dbg !24
  %352 = bitcast <2 x i32> %351 to <2 x float>, !dbg !24
  %353 = insertelement <2 x i32> poison, i32 %98, i64 0, !dbg !28
  %354 = insertelement <2 x i32> %353, i32 %164, i64 1, !dbg !28
  %355 = bitcast <2 x i32> %354 to <2 x float>, !dbg !28
  %356 = fmul <2 x float> %352, %355, !dbg !53
  %357 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !24
  %358 = insertelement <2 x i32> %357, i32 %132, i64 1, !dbg !24
  %359 = bitcast <2 x i32> %358 to <2 x float>, !dbg !24
  %360 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !28
  %361 = insertelement <2 x i32> %360, i32 %165, i64 1, !dbg !28
  %362 = bitcast <2 x i32> %361 to <2 x float>, !dbg !28
  %363 = fmul <2 x float> %359, %362, !dbg !53
  %364 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !24
  %365 = insertelement <2 x i32> %364, i32 %134, i64 1, !dbg !24
  %366 = bitcast <2 x i32> %365 to <2 x float>, !dbg !24
  %367 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !28
  %368 = insertelement <2 x i32> %367, i32 %167, i64 1, !dbg !28
  %369 = bitcast <2 x i32> %368 to <2 x float>, !dbg !28
  %370 = fmul <2 x float> %366, %369, !dbg !53
  %371 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !24
  %372 = insertelement <2 x i32> %371, i32 %135, i64 1, !dbg !24
  %373 = bitcast <2 x i32> %372 to <2 x float>, !dbg !24
  %374 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !28
  %375 = insertelement <2 x i32> %374, i32 %168, i64 1, !dbg !28
  %376 = bitcast <2 x i32> %375 to <2 x float>, !dbg !28
  %377 = fmul <2 x float> %373, %376, !dbg !53
  %378 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !24
  %379 = insertelement <2 x i32> %378, i32 %136, i64 1, !dbg !24
  %380 = bitcast <2 x i32> %379 to <2 x float>, !dbg !24
  %381 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !28
  %382 = insertelement <2 x i32> %381, i32 %169, i64 1, !dbg !28
  %383 = bitcast <2 x i32> %382 to <2 x float>, !dbg !28
  %384 = fmul <2 x float> %380, %383, !dbg !53
  %385 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !24
  %386 = insertelement <2 x i32> %385, i32 %137, i64 1, !dbg !24
  %387 = bitcast <2 x i32> %386 to <2 x float>, !dbg !24
  %388 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !28
  %389 = insertelement <2 x i32> %388, i32 %170, i64 1, !dbg !28
  %390 = bitcast <2 x i32> %389 to <2 x float>, !dbg !28
  %391 = fmul <2 x float> %387, %390, !dbg !53
  %392 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !24
  %393 = insertelement <2 x i32> %392, i32 %139, i64 1, !dbg !24
  %394 = bitcast <2 x i32> %393 to <2 x float>, !dbg !24
  %395 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !28
  %396 = insertelement <2 x i32> %395, i32 %172, i64 1, !dbg !28
  %397 = bitcast <2 x i32> %396 to <2 x float>, !dbg !28
  %398 = fmul <2 x float> %394, %397, !dbg !53
  %399 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !24
  %400 = insertelement <2 x i32> %399, i32 %140, i64 1, !dbg !24
  %401 = bitcast <2 x i32> %400 to <2 x float>, !dbg !24
  %402 = insertelement <2 x i32> poison, i32 %107, i64 0, !dbg !28
  %403 = insertelement <2 x i32> %402, i32 %173, i64 1, !dbg !28
  %404 = bitcast <2 x i32> %403 to <2 x float>, !dbg !28
  %405 = fmul <2 x float> %401, %404, !dbg !53
  %406 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !24
  %407 = insertelement <2 x i32> %406, i32 %141, i64 1, !dbg !24
  %408 = bitcast <2 x i32> %407 to <2 x float>, !dbg !24
  %409 = insertelement <2 x i32> poison, i32 %108, i64 0, !dbg !28
  %410 = insertelement <2 x i32> %409, i32 %174, i64 1, !dbg !28
  %411 = bitcast <2 x i32> %410 to <2 x float>, !dbg !28
  %412 = fmul <2 x float> %408, %411, !dbg !53
  %413 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !24
  %414 = insertelement <2 x i32> %413, i32 %142, i64 1, !dbg !24
  %415 = bitcast <2 x i32> %414 to <2 x float>, !dbg !24
  %416 = insertelement <2 x i32> poison, i32 %109, i64 0, !dbg !28
  %417 = insertelement <2 x i32> %416, i32 %175, i64 1, !dbg !28
  %418 = bitcast <2 x i32> %417 to <2 x float>, !dbg !28
  %419 = fmul <2 x float> %415, %418, !dbg !53
  %shift = shufflevector <2 x float> %314, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %420 = fadd <2 x float> %314, %shift, !dbg !54
  %shift33 = shufflevector <2 x float> %321, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %421 = fadd <2 x float> %321, %shift33, !dbg !54
  %shift34 = shufflevector <2 x float> %328, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %422 = fadd <2 x float> %328, %shift34, !dbg !54
  %shift35 = shufflevector <2 x float> %335, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %423 = fadd <2 x float> %335, %shift35, !dbg !54
  %shift36 = shufflevector <2 x float> %342, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %424 = fadd <2 x float> %342, %shift36, !dbg !54
  %shift37 = shufflevector <2 x float> %349, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %425 = fadd <2 x float> %349, %shift37, !dbg !54
  %shift38 = shufflevector <2 x float> %356, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %426 = fadd <2 x float> %356, %shift38, !dbg !54
  %shift39 = shufflevector <2 x float> %363, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %427 = fadd <2 x float> %363, %shift39, !dbg !54
  %shift40 = shufflevector <2 x float> %370, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %428 = fadd <2 x float> %370, %shift40, !dbg !54
  %shift41 = shufflevector <2 x float> %377, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %429 = fadd <2 x float> %377, %shift41, !dbg !54
  %shift42 = shufflevector <2 x float> %384, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %430 = fadd <2 x float> %384, %shift42, !dbg !54
  %shift43 = shufflevector <2 x float> %391, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %431 = fadd <2 x float> %391, %shift43, !dbg !54
  %shift44 = shufflevector <2 x float> %398, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %432 = fadd <2 x float> %398, %shift44, !dbg !54
  %shift45 = shufflevector <2 x float> %405, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %433 = fadd <2 x float> %405, %shift45, !dbg !54
  %shift46 = shufflevector <2 x float> %412, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %434 = fadd <2 x float> %412, %shift46, !dbg !54
  %shift47 = shufflevector <2 x float> %419, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %435 = fadd <2 x float> %419, %shift47, !dbg !54
  %436 = insertelement <2 x i32> poison, i32 %190, i64 0, !dbg !40
  %437 = insertelement <2 x i32> %436, i32 %256, i64 1, !dbg !40
  %438 = bitcast <2 x i32> %437 to <2 x float>, !dbg !40
  %439 = insertelement <2 x i32> poison, i32 %223, i64 0, !dbg !44
  %440 = insertelement <2 x i32> %439, i32 %289, i64 1, !dbg !44
  %441 = bitcast <2 x i32> %440 to <2 x float>, !dbg !44
  %442 = fmul <2 x float> %438, %441, !dbg !55
  %443 = fadd <2 x float> %420, %442, !dbg !56
  %444 = insertelement <2 x i32> poison, i32 %191, i64 0, !dbg !40
  %445 = insertelement <2 x i32> %444, i32 %257, i64 1, !dbg !40
  %446 = bitcast <2 x i32> %445 to <2 x float>, !dbg !40
  %447 = insertelement <2 x i32> poison, i32 %224, i64 0, !dbg !44
  %448 = insertelement <2 x i32> %447, i32 %290, i64 1, !dbg !44
  %449 = bitcast <2 x i32> %448 to <2 x float>, !dbg !44
  %450 = fmul <2 x float> %446, %449, !dbg !55
  %451 = fadd <2 x float> %421, %450, !dbg !56
  %452 = insertelement <2 x i32> poison, i32 %192, i64 0, !dbg !40
  %453 = insertelement <2 x i32> %452, i32 %258, i64 1, !dbg !40
  %454 = bitcast <2 x i32> %453 to <2 x float>, !dbg !40
  %455 = insertelement <2 x i32> poison, i32 %225, i64 0, !dbg !44
  %456 = insertelement <2 x i32> %455, i32 %291, i64 1, !dbg !44
  %457 = bitcast <2 x i32> %456 to <2 x float>, !dbg !44
  %458 = fmul <2 x float> %454, %457, !dbg !55
  %459 = fadd <2 x float> %422, %458, !dbg !56
  %460 = insertelement <2 x i32> poison, i32 %193, i64 0, !dbg !40
  %461 = insertelement <2 x i32> %460, i32 %259, i64 1, !dbg !40
  %462 = bitcast <2 x i32> %461 to <2 x float>, !dbg !40
  %463 = insertelement <2 x i32> poison, i32 %226, i64 0, !dbg !44
  %464 = insertelement <2 x i32> %463, i32 %292, i64 1, !dbg !44
  %465 = bitcast <2 x i32> %464 to <2 x float>, !dbg !44
  %466 = fmul <2 x float> %462, %465, !dbg !55
  %467 = fadd <2 x float> %423, %466, !dbg !56
  %468 = insertelement <2 x i32> poison, i32 %195, i64 0, !dbg !40
  %469 = insertelement <2 x i32> %468, i32 %261, i64 1, !dbg !40
  %470 = bitcast <2 x i32> %469 to <2 x float>, !dbg !40
  %471 = insertelement <2 x i32> poison, i32 %228, i64 0, !dbg !44
  %472 = insertelement <2 x i32> %471, i32 %294, i64 1, !dbg !44
  %473 = bitcast <2 x i32> %472 to <2 x float>, !dbg !44
  %474 = fmul <2 x float> %470, %473, !dbg !55
  %475 = fadd <2 x float> %424, %474, !dbg !56
  %476 = insertelement <2 x i32> poison, i32 %196, i64 0, !dbg !40
  %477 = insertelement <2 x i32> %476, i32 %262, i64 1, !dbg !40
  %478 = bitcast <2 x i32> %477 to <2 x float>, !dbg !40
  %479 = insertelement <2 x i32> poison, i32 %229, i64 0, !dbg !44
  %480 = insertelement <2 x i32> %479, i32 %295, i64 1, !dbg !44
  %481 = bitcast <2 x i32> %480 to <2 x float>, !dbg !44
  %482 = fmul <2 x float> %478, %481, !dbg !55
  %483 = fadd <2 x float> %425, %482, !dbg !56
  %484 = insertelement <2 x i32> poison, i32 %197, i64 0, !dbg !40
  %485 = insertelement <2 x i32> %484, i32 %263, i64 1, !dbg !40
  %486 = bitcast <2 x i32> %485 to <2 x float>, !dbg !40
  %487 = insertelement <2 x i32> poison, i32 %230, i64 0, !dbg !44
  %488 = insertelement <2 x i32> %487, i32 %296, i64 1, !dbg !44
  %489 = bitcast <2 x i32> %488 to <2 x float>, !dbg !44
  %490 = fmul <2 x float> %486, %489, !dbg !55
  %491 = fadd <2 x float> %426, %490, !dbg !56
  %492 = insertelement <2 x i32> poison, i32 %198, i64 0, !dbg !40
  %493 = insertelement <2 x i32> %492, i32 %264, i64 1, !dbg !40
  %494 = bitcast <2 x i32> %493 to <2 x float>, !dbg !40
  %495 = insertelement <2 x i32> poison, i32 %231, i64 0, !dbg !44
  %496 = insertelement <2 x i32> %495, i32 %297, i64 1, !dbg !44
  %497 = bitcast <2 x i32> %496 to <2 x float>, !dbg !44
  %498 = fmul <2 x float> %494, %497, !dbg !55
  %499 = fadd <2 x float> %427, %498, !dbg !56
  %500 = insertelement <2 x i32> poison, i32 %200, i64 0, !dbg !40
  %501 = insertelement <2 x i32> %500, i32 %266, i64 1, !dbg !40
  %502 = bitcast <2 x i32> %501 to <2 x float>, !dbg !40
  %503 = insertelement <2 x i32> poison, i32 %233, i64 0, !dbg !44
  %504 = insertelement <2 x i32> %503, i32 %299, i64 1, !dbg !44
  %505 = bitcast <2 x i32> %504 to <2 x float>, !dbg !44
  %506 = fmul <2 x float> %502, %505, !dbg !55
  %507 = fadd <2 x float> %428, %506, !dbg !56
  %508 = insertelement <2 x i32> poison, i32 %201, i64 0, !dbg !40
  %509 = insertelement <2 x i32> %508, i32 %267, i64 1, !dbg !40
  %510 = bitcast <2 x i32> %509 to <2 x float>, !dbg !40
  %511 = insertelement <2 x i32> poison, i32 %234, i64 0, !dbg !44
  %512 = insertelement <2 x i32> %511, i32 %300, i64 1, !dbg !44
  %513 = bitcast <2 x i32> %512 to <2 x float>, !dbg !44
  %514 = fmul <2 x float> %510, %513, !dbg !55
  %515 = fadd <2 x float> %429, %514, !dbg !56
  %516 = insertelement <2 x i32> poison, i32 %202, i64 0, !dbg !40
  %517 = insertelement <2 x i32> %516, i32 %268, i64 1, !dbg !40
  %518 = bitcast <2 x i32> %517 to <2 x float>, !dbg !40
  %519 = insertelement <2 x i32> poison, i32 %235, i64 0, !dbg !44
  %520 = insertelement <2 x i32> %519, i32 %301, i64 1, !dbg !44
  %521 = bitcast <2 x i32> %520 to <2 x float>, !dbg !44
  %522 = fmul <2 x float> %518, %521, !dbg !55
  %523 = fadd <2 x float> %430, %522, !dbg !56
  %524 = insertelement <2 x i32> poison, i32 %203, i64 0, !dbg !40
  %525 = insertelement <2 x i32> %524, i32 %269, i64 1, !dbg !40
  %526 = bitcast <2 x i32> %525 to <2 x float>, !dbg !40
  %527 = insertelement <2 x i32> poison, i32 %236, i64 0, !dbg !44
  %528 = insertelement <2 x i32> %527, i32 %302, i64 1, !dbg !44
  %529 = bitcast <2 x i32> %528 to <2 x float>, !dbg !44
  %530 = fmul <2 x float> %526, %529, !dbg !55
  %531 = fadd <2 x float> %431, %530, !dbg !56
  %532 = insertelement <2 x i32> poison, i32 %205, i64 0, !dbg !40
  %533 = insertelement <2 x i32> %532, i32 %271, i64 1, !dbg !40
  %534 = bitcast <2 x i32> %533 to <2 x float>, !dbg !40
  %535 = insertelement <2 x i32> poison, i32 %238, i64 0, !dbg !44
  %536 = insertelement <2 x i32> %535, i32 %304, i64 1, !dbg !44
  %537 = bitcast <2 x i32> %536 to <2 x float>, !dbg !44
  %538 = fmul <2 x float> %534, %537, !dbg !55
  %539 = fadd <2 x float> %432, %538, !dbg !56
  %540 = insertelement <2 x i32> poison, i32 %206, i64 0, !dbg !40
  %541 = insertelement <2 x i32> %540, i32 %272, i64 1, !dbg !40
  %542 = bitcast <2 x i32> %541 to <2 x float>, !dbg !40
  %543 = insertelement <2 x i32> poison, i32 %239, i64 0, !dbg !44
  %544 = insertelement <2 x i32> %543, i32 %305, i64 1, !dbg !44
  %545 = bitcast <2 x i32> %544 to <2 x float>, !dbg !44
  %546 = fmul <2 x float> %542, %545, !dbg !55
  %547 = fadd <2 x float> %433, %546, !dbg !56
  %548 = insertelement <2 x i32> poison, i32 %207, i64 0, !dbg !40
  %549 = insertelement <2 x i32> %548, i32 %273, i64 1, !dbg !40
  %550 = bitcast <2 x i32> %549 to <2 x float>, !dbg !40
  %551 = insertelement <2 x i32> poison, i32 %240, i64 0, !dbg !44
  %552 = insertelement <2 x i32> %551, i32 %306, i64 1, !dbg !44
  %553 = bitcast <2 x i32> %552 to <2 x float>, !dbg !44
  %554 = fmul <2 x float> %550, %553, !dbg !55
  %555 = fadd <2 x float> %434, %554, !dbg !56
  %556 = insertelement <2 x i32> poison, i32 %208, i64 0, !dbg !40
  %557 = insertelement <2 x i32> %556, i32 %274, i64 1, !dbg !40
  %558 = bitcast <2 x i32> %557 to <2 x float>, !dbg !40
  %559 = insertelement <2 x i32> poison, i32 %241, i64 0, !dbg !44
  %560 = insertelement <2 x i32> %559, i32 %307, i64 1, !dbg !44
  %561 = bitcast <2 x i32> %560 to <2 x float>, !dbg !44
  %562 = fmul <2 x float> %558, %561, !dbg !55
  %563 = fadd <2 x float> %435, %562, !dbg !56
  %shift48 = shufflevector <2 x float> %442, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %564 = fadd <2 x float> %443, %shift48, !dbg !57
  %565 = extractelement <2 x float> %564, i64 0, !dbg !57
  %shift49 = shufflevector <2 x float> %450, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %566 = fadd <2 x float> %451, %shift49, !dbg !57
  %567 = extractelement <2 x float> %566, i64 0, !dbg !57
  %shift50 = shufflevector <2 x float> %458, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %568 = fadd <2 x float> %459, %shift50, !dbg !57
  %569 = extractelement <2 x float> %568, i64 0, !dbg !57
  %shift51 = shufflevector <2 x float> %466, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %570 = fadd <2 x float> %467, %shift51, !dbg !57
  %571 = extractelement <2 x float> %570, i64 0, !dbg !57
  %shift52 = shufflevector <2 x float> %474, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %572 = fadd <2 x float> %475, %shift52, !dbg !57
  %573 = extractelement <2 x float> %572, i64 0, !dbg !57
  %shift53 = shufflevector <2 x float> %482, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %574 = fadd <2 x float> %483, %shift53, !dbg !57
  %575 = extractelement <2 x float> %574, i64 0, !dbg !57
  %shift54 = shufflevector <2 x float> %490, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %576 = fadd <2 x float> %491, %shift54, !dbg !57
  %577 = extractelement <2 x float> %576, i64 0, !dbg !57
  %shift55 = shufflevector <2 x float> %498, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %578 = fadd <2 x float> %499, %shift55, !dbg !57
  %579 = extractelement <2 x float> %578, i64 0, !dbg !57
  %shift56 = shufflevector <2 x float> %506, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %580 = fadd <2 x float> %507, %shift56, !dbg !57
  %581 = extractelement <2 x float> %580, i64 0, !dbg !57
  %shift57 = shufflevector <2 x float> %514, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %582 = fadd <2 x float> %515, %shift57, !dbg !57
  %583 = extractelement <2 x float> %582, i64 0, !dbg !57
  %shift58 = shufflevector <2 x float> %522, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %584 = fadd <2 x float> %523, %shift58, !dbg !57
  %585 = extractelement <2 x float> %584, i64 0, !dbg !57
  %shift59 = shufflevector <2 x float> %530, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %586 = fadd <2 x float> %531, %shift59, !dbg !57
  %587 = extractelement <2 x float> %586, i64 0, !dbg !57
  %shift60 = shufflevector <2 x float> %538, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %588 = fadd <2 x float> %539, %shift60, !dbg !57
  %589 = extractelement <2 x float> %588, i64 0, !dbg !57
  %shift61 = shufflevector <2 x float> %546, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %590 = fadd <2 x float> %547, %shift61, !dbg !57
  %591 = extractelement <2 x float> %590, i64 0, !dbg !57
  %shift62 = shufflevector <2 x float> %554, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %592 = fadd <2 x float> %555, %shift62, !dbg !57
  %593 = extractelement <2 x float> %592, i64 0, !dbg !57
  %shift63 = shufflevector <2 x float> %562, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %594 = fadd <2 x float> %563, %shift63, !dbg !57
  %595 = extractelement <2 x float> %594, i64 0, !dbg !57
  %596 = shl i32 %23, 12, !dbg !58
  %597 = shl i32 %24, 12, !dbg !58
  %598 = shl i32 %25, 12, !dbg !58
  %599 = shl i32 %26, 12, !dbg !58
  %600 = shl i32 %36, 21, !dbg !59
  %601 = add i32 %600, %.decomposed, !dbg !60
  %602 = add i32 %601, %596, !dbg !61
  %603 = add i32 %601, %597, !dbg !61
  %604 = add i32 %601, %598, !dbg !61
  %605 = add i32 %601, %599, !dbg !61
  %606 = sext i32 %602 to i64, !dbg !62
  %607 = getelementptr float, ptr addrspace(1) %2, i64 %606, !dbg !62
  %608 = sext i32 %603 to i64, !dbg !62
  %609 = getelementptr float, ptr addrspace(1) %2, i64 %608, !dbg !62
  %610 = sext i32 %604 to i64, !dbg !62
  %611 = getelementptr float, ptr addrspace(1) %2, i64 %610, !dbg !62
  %612 = sext i32 %605 to i64, !dbg !62
  %613 = getelementptr float, ptr addrspace(1) %2, i64 %612, !dbg !62
  %614 = shl i32 %8, 10, !dbg !63
  %615 = and i32 %614, 3072, !dbg !63
  %616 = or disjoint i32 %615, %10, !dbg !63
  %617 = and i32 %11, 1020, !dbg !63
  %618 = lshr exact i32 %615, 4, !dbg !63
  %619 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %618, !dbg !63
  %620 = getelementptr float, ptr addrspace(3) %619, i32 %616, !dbg !63
  %621 = bitcast float %565 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %620, <1 x i32> %621, i1 true) #2, !dbg !63
  %622 = or disjoint i32 %616, 256, !dbg !63
  %623 = lshr i32 %622, 6, !dbg !63
  %624 = getelementptr float, ptr addrspace(3) @global_smem, i32 %623, !dbg !63
  %625 = getelementptr float, ptr addrspace(3) %624, i32 %622, !dbg !63
  %626 = bitcast float %567 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %625, <1 x i32> %626, i1 true) #2, !dbg !63
  %627 = or disjoint i32 %616, 512, !dbg !63
  %628 = lshr i32 %627, 6, !dbg !63
  %629 = getelementptr float, ptr addrspace(3) @global_smem, i32 %628, !dbg !63
  %630 = getelementptr float, ptr addrspace(3) %629, i32 %627, !dbg !63
  %631 = bitcast float %569 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %630, <1 x i32> %631, i1 true) #2, !dbg !63
  %632 = or disjoint i32 %616, 768, !dbg !63
  %633 = lshr i32 %632, 6, !dbg !63
  %634 = getelementptr float, ptr addrspace(3) @global_smem, i32 %633, !dbg !63
  %635 = getelementptr float, ptr addrspace(3) %634, i32 %632, !dbg !63
  %636 = bitcast float %571 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %635, <1 x i32> %636, i1 true) #2, !dbg !63
  %637 = or disjoint i32 %616, 64, !dbg !63
  %638 = getelementptr float, ptr addrspace(3) %619, i32 %637, !dbg !63
  %639 = bitcast float %573 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %638, <1 x i32> %639, i1 true) #2, !dbg !63
  %640 = or disjoint i32 %616, 320, !dbg !63
  %641 = lshr i32 %640, 6, !dbg !63
  %642 = and i32 %641, 52, !dbg !63
  %643 = getelementptr float, ptr addrspace(3) @global_smem, i32 %642, !dbg !63
  %644 = getelementptr float, ptr addrspace(3) %643, i32 %640, !dbg !63
  %645 = bitcast float %575 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %644, <1 x i32> %645, i1 true) #2, !dbg !63
  %646 = or disjoint i32 %616, 576, !dbg !63
  %647 = lshr i32 %646, 6, !dbg !63
  %648 = and i32 %647, 56, !dbg !63
  %649 = getelementptr float, ptr addrspace(3) @global_smem, i32 %648, !dbg !63
  %650 = getelementptr float, ptr addrspace(3) %649, i32 %646, !dbg !63
  %651 = bitcast float %577 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %650, <1 x i32> %651, i1 true) #2, !dbg !63
  %652 = or disjoint i32 %616, 832, !dbg !63
  %653 = lshr i32 %652, 6, !dbg !63
  %654 = and i32 %653, 60, !dbg !63
  %655 = getelementptr float, ptr addrspace(3) @global_smem, i32 %654, !dbg !63
  %656 = getelementptr float, ptr addrspace(3) %655, i32 %652, !dbg !63
  %657 = bitcast float %579 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %656, <1 x i32> %657, i1 true) #2, !dbg !63
  %658 = or disjoint i32 %616, 128, !dbg !63
  %659 = getelementptr float, ptr addrspace(3) %619, i32 %658, !dbg !63
  %660 = bitcast float %581 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %659, <1 x i32> %660, i1 true) #2, !dbg !63
  %661 = or disjoint i32 %616, 384, !dbg !63
  %662 = lshr i32 %661, 6, !dbg !63
  %663 = and i32 %662, 52, !dbg !63
  %664 = getelementptr float, ptr addrspace(3) @global_smem, i32 %663, !dbg !63
  %665 = getelementptr float, ptr addrspace(3) %664, i32 %661, !dbg !63
  %666 = bitcast float %583 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %665, <1 x i32> %666, i1 true) #2, !dbg !63
  %667 = or disjoint i32 %616, 640, !dbg !63
  %668 = lshr i32 %667, 6, !dbg !63
  %669 = and i32 %668, 56, !dbg !63
  %670 = getelementptr float, ptr addrspace(3) @global_smem, i32 %669, !dbg !63
  %671 = getelementptr float, ptr addrspace(3) %670, i32 %667, !dbg !63
  %672 = bitcast float %585 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %671, <1 x i32> %672, i1 true) #2, !dbg !63
  %673 = or disjoint i32 %616, 896, !dbg !63
  %674 = lshr i32 %673, 6, !dbg !63
  %675 = and i32 %674, 60, !dbg !63
  %676 = getelementptr float, ptr addrspace(3) @global_smem, i32 %675, !dbg !63
  %677 = getelementptr float, ptr addrspace(3) %676, i32 %673, !dbg !63
  %678 = bitcast float %587 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %677, <1 x i32> %678, i1 true) #2, !dbg !63
  %679 = or disjoint i32 %616, 192, !dbg !63
  %680 = getelementptr float, ptr addrspace(3) %619, i32 %679, !dbg !63
  %681 = bitcast float %589 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %680, <1 x i32> %681, i1 true) #2, !dbg !63
  %682 = or disjoint i32 %616, 448, !dbg !63
  %683 = lshr i32 %682, 6, !dbg !63
  %684 = and i32 %683, 52, !dbg !63
  %685 = getelementptr float, ptr addrspace(3) @global_smem, i32 %684, !dbg !63
  %686 = getelementptr float, ptr addrspace(3) %685, i32 %682, !dbg !63
  %687 = bitcast float %591 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %686, <1 x i32> %687, i1 true) #2, !dbg !63
  %688 = or disjoint i32 %616, 704, !dbg !63
  %689 = lshr i32 %688, 6, !dbg !63
  %690 = and i32 %689, 56, !dbg !63
  %691 = getelementptr float, ptr addrspace(3) @global_smem, i32 %690, !dbg !63
  %692 = getelementptr float, ptr addrspace(3) %691, i32 %688, !dbg !63
  %693 = bitcast float %593 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %692, <1 x i32> %693, i1 true) #2, !dbg !63
  %694 = or disjoint i32 %616, 960, !dbg !63
  %695 = lshr i32 %694, 6, !dbg !63
  %696 = and i32 %695, 60, !dbg !63
  %697 = getelementptr float, ptr addrspace(3) @global_smem, i32 %696, !dbg !63
  %698 = getelementptr float, ptr addrspace(3) %697, i32 %694, !dbg !63
  %699 = bitcast float %595 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %698, <1 x i32> %699, i1 true) #2, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %700 = lshr i32 %11, 6, !dbg !63
  %701 = and i32 %700, 12, !dbg !63
  %702 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %701, !dbg !63
  %703 = getelementptr inbounds float, ptr addrspace(3) %702, i32 %617, !dbg !63
  %704 = or disjoint i32 %617, 1024, !dbg !63
  %705 = lshr i32 %704, 6, !dbg !63
  %706 = and i32 %705, 28, !dbg !63
  %707 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %706, !dbg !63
  %708 = getelementptr inbounds float, ptr addrspace(3) %707, i32 %704, !dbg !63
  %709 = load <4 x i32>, ptr addrspace(3) %708, align 16, !dbg !63
  %710 = or disjoint i32 %617, 2048, !dbg !63
  %711 = lshr i32 %710, 6, !dbg !63
  %712 = and i32 %711, 44, !dbg !63
  %713 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %712, !dbg !63
  %714 = getelementptr inbounds float, ptr addrspace(3) %713, i32 %710, !dbg !63
  %715 = load <4 x i32>, ptr addrspace(3) %714, align 16, !dbg !63
  %716 = or disjoint i32 %617, 3072, !dbg !63
  %717 = lshr i32 %716, 6, !dbg !63
  %718 = and i32 %717, 60, !dbg !63
  %719 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %718, !dbg !63
  %720 = getelementptr inbounds float, ptr addrspace(3) %719, i32 %716, !dbg !63
  %721 = load <4 x i32>, ptr addrspace(3) %720, align 16, !dbg !63
  %.extract = load i32, ptr addrspace(3) %703, align 16, !dbg !63
  %722 = getelementptr inbounds i8, ptr addrspace(3) %703, i32 4, !dbg !63
  %.extract18 = load i32, ptr addrspace(3) %722, align 4, !dbg !63
  %723 = getelementptr inbounds i8, ptr addrspace(3) %703, i32 8, !dbg !63
  %.extract19 = load i32, ptr addrspace(3) %723, align 8, !dbg !63
  %724 = getelementptr inbounds i8, ptr addrspace(3) %703, i32 12, !dbg !63
  %.extract20 = load i32, ptr addrspace(3) %724, align 4, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %607, i1 %28) #2, !dbg !63
  %.extract21 = extractelement <4 x i32> %709, i64 0, !dbg !63
  %.extract22 = extractelement <4 x i32> %709, i64 1, !dbg !63
  %.extract23 = extractelement <4 x i32> %709, i64 2, !dbg !63
  %.extract24 = extractelement <4 x i32> %709, i64 3, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %609, i1 %29) #2, !dbg !63
  %.extract25 = extractelement <4 x i32> %715, i64 0, !dbg !63
  %.extract26 = extractelement <4 x i32> %715, i64 1, !dbg !63
  %.extract27 = extractelement <4 x i32> %715, i64 2, !dbg !63
  %.extract28 = extractelement <4 x i32> %715, i64 3, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %611, i1 %30) #2, !dbg !63
  %.extract29 = extractelement <4 x i32> %721, i64 0, !dbg !63
  %.extract30 = extractelement <4 x i32> %721, i64 1, !dbg !63
  %.extract31 = extractelement <4 x i32> %721, i64 2, !dbg !63
  %.extract32 = extractelement <4 x i32> %721, i64 3, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %613, i1 %31) #2, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3api6onjseajvp6qxcdvzkpjeo73u5r6t76ylynvqyrjhahbfcd.py", directory: "inductor_cache/3a")
!4 = !{ptr @triton_poi_fused__softmax_mul_sum_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_mul_sum_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_mul_sum_12", linkageName: "triton_poi_fused__softmax_mul_sum_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 33, column: 39, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 44, scope: !7)
!29 = !DILocation(line: 34, column: 37, scope: !7)
!30 = !DILocation(line: 34, column: 42, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 51, scope: !7)
!33 = !DILocation(line: 35, column: 40, scope: !7)
!34 = !DILocation(line: 35, column: 45, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 54, scope: !7)
!37 = !DILocation(line: 36, column: 37, scope: !7)
!38 = !DILocation(line: 36, column: 42, scope: !7)
!39 = !DILocation(line: 36, column: 30, scope: !7)
!40 = !DILocation(line: 36, column: 51, scope: !7)
!41 = !DILocation(line: 37, column: 41, scope: !7)
!42 = !DILocation(line: 37, column: 46, scope: !7)
!43 = !DILocation(line: 37, column: 30, scope: !7)
!44 = !DILocation(line: 37, column: 55, scope: !7)
!45 = !DILocation(line: 38, column: 38, scope: !7)
!46 = !DILocation(line: 38, column: 43, scope: !7)
!47 = !DILocation(line: 38, column: 31, scope: !7)
!48 = !DILocation(line: 38, column: 52, scope: !7)
!49 = !DILocation(line: 39, column: 42, scope: !7)
!50 = !DILocation(line: 39, column: 47, scope: !7)
!51 = !DILocation(line: 39, column: 31, scope: !7)
!52 = !DILocation(line: 39, column: 56, scope: !7)
!53 = !DILocation(line: 40, column: 18, scope: !7)
!54 = !DILocation(line: 42, column: 18, scope: !7)
!55 = !DILocation(line: 43, column: 18, scope: !7)
!56 = !DILocation(line: 44, column: 19, scope: !7)
!57 = !DILocation(line: 46, column: 20, scope: !7)
!58 = !DILocation(line: 47, column: 35, scope: !7)
!59 = !DILocation(line: 47, column: 48, scope: !7)
!60 = !DILocation(line: 47, column: 30, scope: !7)
!61 = !DILocation(line: 47, column: 40, scope: !7)
!62 = !DILocation(line: 47, column: 25, scope: !7)
!63 = !DILocation(line: 47, column: 60, scope: !7)
!64 = !DILocation(line: 47, column: 4, scope: !7)
