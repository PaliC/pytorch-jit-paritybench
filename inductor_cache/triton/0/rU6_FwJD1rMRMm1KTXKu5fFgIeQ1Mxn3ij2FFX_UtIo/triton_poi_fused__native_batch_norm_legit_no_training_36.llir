; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 512, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %17 = shl i32 %16, 5, !dbg !16
  %18 = lshr i32 %11, 3, !dbg !17
  %19 = and i32 %18, 15, !dbg !17
  %20 = or disjoint i32 %17, %19, !dbg !18
  %21 = or disjoint i32 %20, 16, !dbg !18
  %22 = icmp slt i32 %20, 30, !dbg !19
  %23 = icmp slt i32 %21, 30, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %24 = sdiv i32 %.frozen, 128, !dbg !20
  %25 = mul i32 %24, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %25, !dbg !21
  %26 = shl i32 %20, 7, !dbg !22
  %27 = shl i32 %21, 7, !dbg !22
  %28 = mul i32 %24, 3840, !dbg !23
  %29 = add i32 %28, %.decomposed, !dbg !24
  %30 = add i32 %29, %26, !dbg !25
  %31 = add i32 %29, %27, !dbg !25
  %32 = sext i32 %30 to i64, !dbg !26
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !26
  %34 = sext i32 %31 to i64, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !26
  %36 = and i1 %15, %22, !dbg !27
  %37 = and i1 %23, %15, !dbg !27
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %36) #4, !dbg !28
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %37) #4, !dbg !28
  %40 = sext i32 %.decomposed to i64, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !29
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %15) #4, !dbg !30
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !31
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %15) #4, !dbg !32
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !32
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !32
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !32
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !32
  %49 = bitcast i32 %45 to float, !dbg !32
  %50 = bitcast i32 %46 to float, !dbg !32
  %51 = bitcast i32 %47 to float, !dbg !32
  %52 = bitcast i32 %48 to float, !dbg !32
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !33
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %15) #4, !dbg !34
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !35
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %15) #4, !dbg !36
  %57 = fadd float %49, 0x3EE4F8B580000000, !dbg !37
  %58 = fadd float %50, 0x3EE4F8B580000000, !dbg !37
  %59 = fadd float %51, 0x3EE4F8B580000000, !dbg !37
  %60 = fadd float %52, 0x3EE4F8B580000000, !dbg !37
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %61, 0, !dbg !38
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %62, 0, !dbg !38
  br i1 %.not.i, label %68, label %63, !dbg !38

63:                                               ; preds = %8
  br i1 %.not1.i, label %66, label %64, !dbg !38

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

68:                                               ; preds = %8
  br i1 %.not1.i, label %71, label %69, !dbg !38

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %64, %66, %69, %71
  %.0.i = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !38
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i3 = icmp eq i32 %73, 0, !dbg !38
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i6 = icmp eq i32 %74, 0, !dbg !38
  br i1 %.not.i3, label %80, label %75, !dbg !38

75:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %78, label %76, !dbg !38

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

80:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %83, label %81, !dbg !38

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

__nv_sqrtf.exit7:                                 ; preds = %76, %78, %81, %83
  %.0.i5 = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !38
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i8 = icmp eq i32 %85, 0, !dbg !38
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i11 = icmp eq i32 %86, 0, !dbg !38
  br i1 %.not.i8, label %92, label %87, !dbg !38

87:                                               ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %90, label %88, !dbg !38

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

92:                                               ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %95, label %93, !dbg !38

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

__nv_sqrtf.exit12:                                ; preds = %88, %90, %93, %95
  %.0.i10 = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !38
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i13 = icmp eq i32 %97, 0, !dbg !38
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i16 = icmp eq i32 %98, 0, !dbg !38
  br i1 %.not.i13, label %104, label %99, !dbg !38

99:                                               ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %102, label %100, !dbg !38

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

104:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %107, label %105, !dbg !38

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

__nv_sqrtf.exit17:                                ; preds = %100, %102, %105, %107
  %.0.i15 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !38
  %109 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !28
  %110 = bitcast i32 %109 to float, !dbg !28
  %111 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !30
  %112 = bitcast i32 %111 to float, !dbg !30
  %113 = fsub float %110, %112, !dbg !39
  %114 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !28
  %115 = bitcast i32 %114 to float, !dbg !28
  %116 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !30
  %117 = bitcast i32 %116 to float, !dbg !30
  %118 = fsub float %115, %117, !dbg !39
  %119 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !28
  %120 = bitcast i32 %119 to float, !dbg !28
  %121 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !30
  %122 = bitcast i32 %121 to float, !dbg !30
  %123 = fsub float %120, %122, !dbg !39
  %124 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !28
  %125 = bitcast i32 %124 to float, !dbg !28
  %126 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !30
  %127 = bitcast i32 %126 to float, !dbg !30
  %128 = fsub float %125, %127, !dbg !39
  %129 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !28
  %130 = bitcast i32 %129 to float, !dbg !28
  %131 = fsub float %130, %112, !dbg !39
  %132 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !28
  %133 = bitcast i32 %132 to float, !dbg !28
  %134 = fsub float %133, %117, !dbg !39
  %135 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !28
  %136 = bitcast i32 %135 to float, !dbg !28
  %137 = fsub float %136, %122, !dbg !39
  %138 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !28
  %139 = bitcast i32 %138 to float, !dbg !28
  %140 = fsub float %139, %127, !dbg !39
  %141 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !36
  %142 = bitcast i32 %141 to float, !dbg !36
  %143 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !36
  %144 = bitcast i32 %143 to float, !dbg !36
  %145 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !36
  %146 = bitcast i32 %145 to float, !dbg !36
  %147 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !36
  %148 = bitcast i32 %147 to float, !dbg !36
  %149 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !34
  %150 = bitcast i32 %149 to float, !dbg !34
  %151 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !34
  %152 = bitcast i32 %151 to float, !dbg !34
  %153 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !34
  %154 = bitcast i32 %153 to float, !dbg !34
  %155 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !34
  %156 = bitcast i32 %155 to float, !dbg !34
  %157 = shl i32 %11, 1, !dbg !17
  %158 = and i32 %157, 30, !dbg !17
  %159 = or disjoint i32 %17, %158, !dbg !18
  %160 = icmp slt i32 %159, 30, !dbg !19
  %161 = lshr i32 %11, 4, !dbg !12
  %162 = and i32 %161, 7, !dbg !12
  %163 = or disjoint i32 %162, %10, !dbg !13
  %164 = or disjoint i32 %163, 24, !dbg !13
  %165 = icmp slt i32 %164, 512, !dbg !14
  %166 = and i1 %165, %160, !dbg !27
  %167 = or disjoint i32 %163, 16, !dbg !13
  %168 = icmp slt i32 %167, 512, !dbg !14
  %169 = and i1 %168, %160, !dbg !27
  %170 = or disjoint i32 %163, 8, !dbg !13
  %171 = icmp slt i32 %170, 512, !dbg !14
  %172 = and i1 %171, %160, !dbg !27
  %173 = icmp slt i32 %163, 512, !dbg !14
  %174 = and i1 %173, %160, !dbg !27
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !40
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !40
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #4, !dbg !40
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #4, !dbg !40
  %179 = fmul float %140, %175, !dbg !41
  %180 = fmul float %137, %176, !dbg !41
  %181 = fmul float %134, %177, !dbg !41
  %182 = fmul float %131, %178, !dbg !41
  %183 = fmul float %128, %175, !dbg !41
  %184 = fmul float %123, %176, !dbg !41
  %185 = fmul float %118, %177, !dbg !41
  %186 = fmul float %113, %178, !dbg !41
  %187 = fmul float %179, %156, !dbg !42
  %188 = fmul float %180, %154, !dbg !42
  %189 = fmul float %181, %152, !dbg !42
  %190 = fmul float %182, %150, !dbg !42
  %191 = fmul float %183, %156, !dbg !42
  %192 = fmul float %184, %154, !dbg !42
  %193 = fmul float %185, %152, !dbg !42
  %194 = fmul float %186, %150, !dbg !42
  %195 = fadd float %187, %148, !dbg !43
  %196 = fadd float %188, %146, !dbg !43
  %197 = fadd float %189, %144, !dbg !43
  %198 = fadd float %190, %142, !dbg !43
  %199 = fadd float %191, %148, !dbg !43
  %200 = fadd float %192, %146, !dbg !43
  %201 = fadd float %193, %144, !dbg !43
  %202 = fadd float %194, %142, !dbg !43
  %203 = mul i32 %163, 30, !dbg !44
  %204 = mul i32 %170, 30, !dbg !44
  %205 = mul i32 %167, 30, !dbg !44
  %206 = mul i32 %164, 30, !dbg !44
  %207 = add i32 %159, %203, !dbg !45
  %208 = add i32 %159, %204, !dbg !45
  %209 = add i32 %159, %205, !dbg !45
  %210 = add i32 %159, %206, !dbg !45
  %211 = sext i32 %207 to i64, !dbg !46
  %212 = getelementptr float, ptr addrspace(1) %5, i64 %211, !dbg !46
  %213 = sext i32 %208 to i64, !dbg !46
  %214 = getelementptr float, ptr addrspace(1) %5, i64 %213, !dbg !46
  %215 = sext i32 %209 to i64, !dbg !46
  %216 = getelementptr float, ptr addrspace(1) %5, i64 %215, !dbg !46
  %217 = sext i32 %210 to i64, !dbg !46
  %218 = getelementptr float, ptr addrspace(1) %5, i64 %217, !dbg !46
  %219 = shl i32 %11, 7, !dbg !47
  %220 = and i32 %219, 896, !dbg !47
  %221 = or disjoint i32 %220, %19, !dbg !47
  %222 = and i32 %157, 254, !dbg !47
  %223 = lshr exact i32 %220, 3, !dbg !47
  %224 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %223, !dbg !47
  %225 = getelementptr float, ptr addrspace(3) %224, i32 %221, !dbg !47
  %226 = bitcast float %195 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %226, i1 true) #4, !dbg !47
  %227 = or disjoint i32 %221, 32, !dbg !47
  %228 = lshr i32 %227, 5, !dbg !47
  %229 = getelementptr float, ptr addrspace(3) @global_smem, i32 %228, !dbg !47
  %230 = getelementptr float, ptr addrspace(3) %229, i32 %227, !dbg !47
  %231 = bitcast float %196 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 true) #4, !dbg !47
  %232 = or disjoint i32 %221, 64, !dbg !47
  %233 = lshr i32 %232, 5, !dbg !47
  %234 = getelementptr float, ptr addrspace(3) @global_smem, i32 %233, !dbg !47
  %235 = getelementptr float, ptr addrspace(3) %234, i32 %232, !dbg !47
  %236 = bitcast float %197 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %236, i1 true) #4, !dbg !47
  %237 = or disjoint i32 %221, 96, !dbg !47
  %238 = lshr i32 %237, 5, !dbg !47
  %239 = getelementptr float, ptr addrspace(3) @global_smem, i32 %238, !dbg !47
  %240 = getelementptr float, ptr addrspace(3) %239, i32 %237, !dbg !47
  %241 = bitcast float %198 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 true) #4, !dbg !47
  %242 = or disjoint i32 %221, 16, !dbg !47
  %243 = getelementptr float, ptr addrspace(3) %224, i32 %242, !dbg !47
  %244 = bitcast float %199 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %244, i1 true) #4, !dbg !47
  %245 = or disjoint i32 %221, 48, !dbg !47
  %246 = lshr i32 %245, 5, !dbg !47
  %247 = getelementptr float, ptr addrspace(3) @global_smem, i32 %246, !dbg !47
  %248 = getelementptr float, ptr addrspace(3) %247, i32 %245, !dbg !47
  %249 = bitcast float %200 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %249, i1 true) #4, !dbg !47
  %250 = or disjoint i32 %221, 80, !dbg !47
  %251 = lshr i32 %250, 5, !dbg !47
  %252 = getelementptr float, ptr addrspace(3) @global_smem, i32 %251, !dbg !47
  %253 = getelementptr float, ptr addrspace(3) %252, i32 %250, !dbg !47
  %254 = bitcast float %201 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %254, i1 true) #4, !dbg !47
  %255 = or disjoint i32 %221, 112, !dbg !47
  %256 = lshr i32 %255, 5, !dbg !47
  %257 = getelementptr float, ptr addrspace(3) @global_smem, i32 %256, !dbg !47
  %258 = getelementptr float, ptr addrspace(3) %257, i32 %255, !dbg !47
  %259 = bitcast float %202 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %259, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %260 = lshr i32 %222, 5, !dbg !47
  %261 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %260, !dbg !47
  %262 = getelementptr inbounds float, ptr addrspace(3) %261, i32 %222, !dbg !47
  %263 = load i32, ptr addrspace(3) %262, align 4, !dbg !47
  %264 = or disjoint i32 %222, 1, !dbg !47
  %265 = getelementptr inbounds float, ptr addrspace(3) %261, i32 %264, !dbg !47
  %266 = load i32, ptr addrspace(3) %265, align 4, !dbg !47
  %267 = or disjoint i32 %222, 256, !dbg !47
  %268 = lshr i32 %267, 5, !dbg !47
  %269 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %268, !dbg !47
  %270 = getelementptr inbounds float, ptr addrspace(3) %269, i32 %267, !dbg !47
  %271 = load i32, ptr addrspace(3) %270, align 4, !dbg !47
  %272 = or disjoint i32 %222, 257, !dbg !47
  %273 = lshr i32 %272, 5, !dbg !47
  %274 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %273, !dbg !47
  %275 = getelementptr inbounds float, ptr addrspace(3) %274, i32 %272, !dbg !47
  %276 = load i32, ptr addrspace(3) %275, align 4, !dbg !47
  %277 = or disjoint i32 %222, 512, !dbg !47
  %278 = lshr i32 %277, 5, !dbg !47
  %279 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %278, !dbg !47
  %280 = getelementptr inbounds float, ptr addrspace(3) %279, i32 %277, !dbg !47
  %281 = load i32, ptr addrspace(3) %280, align 4, !dbg !47
  %282 = or disjoint i32 %222, 513, !dbg !47
  %283 = lshr i32 %282, 5, !dbg !47
  %284 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %283, !dbg !47
  %285 = getelementptr inbounds float, ptr addrspace(3) %284, i32 %282, !dbg !47
  %286 = load i32, ptr addrspace(3) %285, align 4, !dbg !47
  %287 = or disjoint i32 %222, 768, !dbg !47
  %288 = lshr i32 %287, 5, !dbg !47
  %289 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %288, !dbg !47
  %290 = getelementptr inbounds float, ptr addrspace(3) %289, i32 %287, !dbg !47
  %291 = load i32, ptr addrspace(3) %290, align 4, !dbg !47
  %292 = or disjoint i32 %222, 769, !dbg !47
  %293 = lshr i32 %292, 5, !dbg !47
  %294 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %293, !dbg !47
  %295 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %292, !dbg !47
  %296 = load i32, ptr addrspace(3) %295, align 4, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %263, i32 %266, ptr addrspace(1) %212, i1 %174) #4, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %271, i32 %276, ptr addrspace(1) %214, i1 %172) #4, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %281, i32 %286, ptr addrspace(1) %216, i1 %169) #4, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %291, i32 %296, ptr addrspace(1) %218, i1 %166) #4, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbpr5xosznznfm5meozkmfr64fw4anl7wajv6w2knwjpzrhqbttb.py", directory: "inductor_cache/bp")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_36, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_36, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_36", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 48, column: 33, scope: !7)
!45 = !DILocation(line: 48, column: 30, scope: !7)
!46 = !DILocation(line: 48, column: 25, scope: !7)
!47 = !DILocation(line: 48, column: 45, scope: !7)
!48 = !DILocation(line: 48, column: 4, scope: !7)
