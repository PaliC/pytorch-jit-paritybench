; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_copy_mean_mul_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 6, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 62, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = icmp slt i32 %13, 64, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %16 = sdiv i32 %.frozen, 16, !dbg !15
  %17 = mul i32 %16, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = srem i32 %14, 16, !dbg !16
  %19 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !17
  %20 = insertelement <2 x i32> %19, i32 %13, i64 1, !dbg !17
  %21 = srem <2 x i32> %20, splat (i32 4), !dbg !17
  %22 = shufflevector <2 x i32> %21, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 0>, !dbg !17
  %23 = sdiv i32 %13, 4, !dbg !18
  %24 = srem i32 %23, 4, !dbg !19
  %25 = shl i32 %16, 6, !dbg !20
  %26 = add i32 %25, %.decomposed, !dbg !21
  %27 = add i32 %25, %18, !dbg !21
  %28 = sext i32 %26 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !22
  %30 = sext i32 %27 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !22
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %15) #1, !dbg !23
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !23
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !24
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %15) #1, !dbg !25
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !25
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !25
  %39 = add i32 %26, 16, !dbg !26
  %40 = add i32 %27, 16, !dbg !26
  %41 = sext i32 %39 to i64, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !27
  %43 = sext i32 %40 to i64, !dbg !27
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !27
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %15) #1, !dbg !28
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !28
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !28
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !29
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %15) #1, !dbg !30
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !30
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !30
  %52 = add i32 %26, 32, !dbg !31
  %53 = add i32 %27, 32, !dbg !31
  %54 = sext i32 %52 to i64, !dbg !32
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !32
  %56 = sext i32 %53 to i64, !dbg !32
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !32
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 %15) #1, !dbg !33
  %59 = extractvalue { i32, i32 } %58, 0, !dbg !33
  %60 = extractvalue { i32, i32 } %58, 1, !dbg !33
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !34
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 %15) #1, !dbg !35
  %63 = extractvalue { i32, i32 } %62, 0, !dbg !35
  %64 = extractvalue { i32, i32 } %62, 1, !dbg !35
  %65 = add i32 %26, 48, !dbg !36
  %66 = add i32 %27, 48, !dbg !36
  %67 = sext i32 %65 to i64, !dbg !37
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !37
  %69 = sext i32 %66 to i64, !dbg !37
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !37
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %68, i1 %15) #1, !dbg !38
  %72 = extractvalue { i32, i32 } %71, 0, !dbg !38
  %73 = extractvalue { i32, i32 } %71, 1, !dbg !38
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !39
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %74, i1 %15) #1, !dbg !40
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !40
  %77 = extractvalue { i32, i32 } %75, 1, !dbg !40
  %78 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !23
  %79 = insertelement <2 x i32> %78, i32 %46, i64 1, !dbg !23
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !23
  %81 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !25
  %82 = insertelement <2 x i32> %81, i32 %50, i64 1, !dbg !25
  %83 = bitcast <2 x i32> %82 to <2 x float>, !dbg !25
  %84 = fmul <2 x float> %80, %83, !dbg !41
  %85 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !23
  %86 = insertelement <2 x i32> %85, i32 %47, i64 1, !dbg !23
  %87 = bitcast <2 x i32> %86 to <2 x float>, !dbg !23
  %88 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !25
  %89 = insertelement <2 x i32> %88, i32 %51, i64 1, !dbg !25
  %90 = bitcast <2 x i32> %89 to <2 x float>, !dbg !25
  %91 = fmul <2 x float> %87, %90, !dbg !41
  %shift = shufflevector <2 x float> %84, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !42
  %92 = fadd <2 x float> %84, %shift, !dbg !42
  %shift1 = shufflevector <2 x float> %91, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !42
  %93 = fadd <2 x float> %91, %shift1, !dbg !42
  %94 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !33
  %95 = insertelement <2 x i32> %94, i32 %72, i64 1, !dbg !33
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !33
  %97 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !35
  %98 = insertelement <2 x i32> %97, i32 %76, i64 1, !dbg !35
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !35
  %100 = fmul <2 x float> %96, %99, !dbg !43
  %101 = fadd <2 x float> %92, %100, !dbg !44
  %102 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !33
  %103 = insertelement <2 x i32> %102, i32 %73, i64 1, !dbg !33
  %104 = bitcast <2 x i32> %103 to <2 x float>, !dbg !33
  %105 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !35
  %106 = insertelement <2 x i32> %105, i32 %77, i64 1, !dbg !35
  %107 = bitcast <2 x i32> %106 to <2 x float>, !dbg !35
  %108 = fmul <2 x float> %104, %107, !dbg !43
  %109 = fadd <2 x float> %93, %108, !dbg !44
  %shift2 = shufflevector <2 x float> %100, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %110 = fadd <2 x float> %101, %shift2, !dbg !45
  %111 = extractelement <2 x float> %110, i64 0, !dbg !45
  %shift3 = shufflevector <2 x float> %108, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %112 = fadd <2 x float> %109, %shift3, !dbg !45
  %113 = extractelement <2 x float> %112, i64 0, !dbg !45
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float 4.000000e+00) #1, !dbg !46
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float 4.000000e+00) #1, !dbg !46
  %116 = extractelement <2 x i32> %21, i64 1, !dbg !47
  %117 = icmp sgt i32 %116, 0, !dbg !47
  %118 = and i1 %15, %117, !dbg !48
  %119 = icmp sgt <4 x i32> %22, <i32 2, i32 2, i32 1, i32 0>, !dbg !49
  %120 = extractelement <4 x i1> %119, i64 3, !dbg !50
  %121 = and i1 %120, %15, !dbg !48
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %118, i32 0, i1 %118) #1, !dbg !51
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %121, i32 0, i1 %121) #1, !dbg !51
  %124 = add i32 %26, -1, !dbg !52
  %125 = sext i32 %124 to i64, !dbg !53
  %126 = getelementptr float, ptr addrspace(1) %1, i64 %125, !dbg !53
  %127 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !53
  %128 = getelementptr i8, ptr addrspace(1) %127, i64 -4, !dbg !53
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %118, i32 0, i1 %118) #1, !dbg !54
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %121, i32 0, i1 %121) #1, !dbg !54
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %118, i32 0, i1 %118) #1, !dbg !55
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %121, i32 0, i1 %121) #1, !dbg !55
  %133 = add i32 %26, 15, !dbg !56
  %134 = add i32 %27, 15, !dbg !56
  %135 = sext i32 %133 to i64, !dbg !57
  %136 = getelementptr float, ptr addrspace(1) %1, i64 %135, !dbg !57
  %137 = sext i32 %134 to i64, !dbg !57
  %138 = getelementptr float, ptr addrspace(1) %1, i64 %137, !dbg !57
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %118, i32 0, i1 %118) #1, !dbg !58
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %121, i32 0, i1 %121) #1, !dbg !58
  %141 = insertelement <2 x i32> poison, i32 %122, i64 0, !dbg !51
  %142 = insertelement <2 x i32> %141, i32 %131, i64 1, !dbg !51
  %143 = bitcast <2 x i32> %142 to <2 x float>, !dbg !51
  %144 = insertelement <2 x i32> poison, i32 %129, i64 0, !dbg !54
  %145 = insertelement <2 x i32> %144, i32 %139, i64 1, !dbg !54
  %146 = bitcast <2 x i32> %145 to <2 x float>, !dbg !54
  %147 = fmul <2 x float> %143, %146, !dbg !59
  %148 = insertelement <2 x i32> poison, i32 %123, i64 0, !dbg !51
  %149 = insertelement <2 x i32> %148, i32 %132, i64 1, !dbg !51
  %150 = bitcast <2 x i32> %149 to <2 x float>, !dbg !51
  %151 = insertelement <2 x i32> poison, i32 %130, i64 0, !dbg !54
  %152 = insertelement <2 x i32> %151, i32 %140, i64 1, !dbg !54
  %153 = bitcast <2 x i32> %152 to <2 x float>, !dbg !54
  %154 = fmul <2 x float> %150, %153, !dbg !59
  %shift4 = shufflevector <2 x float> %147, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !60
  %155 = fadd <2 x float> %147, %shift4, !dbg !60
  %shift5 = shufflevector <2 x float> %154, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !60
  %156 = fadd <2 x float> %154, %shift5, !dbg !60
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %118, i32 0, i1 %118) #1, !dbg !61
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %121, i32 0, i1 %121) #1, !dbg !61
  %159 = add i32 %26, 31, !dbg !62
  %160 = add i32 %27, 31, !dbg !62
  %161 = sext i32 %159 to i64, !dbg !63
  %162 = getelementptr float, ptr addrspace(1) %1, i64 %161, !dbg !63
  %163 = sext i32 %160 to i64, !dbg !63
  %164 = getelementptr float, ptr addrspace(1) %1, i64 %163, !dbg !63
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %162, i1 %118, i32 0, i1 %118) #1, !dbg !64
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %164, i1 %121, i32 0, i1 %121) #1, !dbg !64
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %118, i32 0, i1 %118) #1, !dbg !65
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %121, i32 0, i1 %121) #1, !dbg !65
  %169 = add i32 %26, 47, !dbg !66
  %170 = add i32 %27, 47, !dbg !66
  %171 = sext i32 %169 to i64, !dbg !67
  %172 = getelementptr float, ptr addrspace(1) %1, i64 %171, !dbg !67
  %173 = sext i32 %170 to i64, !dbg !67
  %174 = getelementptr float, ptr addrspace(1) %1, i64 %173, !dbg !67
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %172, i1 %118, i32 0, i1 %118) #1, !dbg !68
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %174, i1 %121, i32 0, i1 %121) #1, !dbg !68
  %177 = insertelement <2 x i32> poison, i32 %157, i64 0, !dbg !61
  %178 = insertelement <2 x i32> %177, i32 %167, i64 1, !dbg !61
  %179 = bitcast <2 x i32> %178 to <2 x float>, !dbg !61
  %180 = insertelement <2 x i32> poison, i32 %165, i64 0, !dbg !64
  %181 = insertelement <2 x i32> %180, i32 %175, i64 1, !dbg !64
  %182 = bitcast <2 x i32> %181 to <2 x float>, !dbg !64
  %183 = fmul <2 x float> %179, %182, !dbg !69
  %184 = fadd <2 x float> %155, %183, !dbg !70
  %185 = insertelement <2 x i32> poison, i32 %158, i64 0, !dbg !61
  %186 = insertelement <2 x i32> %185, i32 %168, i64 1, !dbg !61
  %187 = bitcast <2 x i32> %186 to <2 x float>, !dbg !61
  %188 = insertelement <2 x i32> poison, i32 %166, i64 0, !dbg !64
  %189 = insertelement <2 x i32> %188, i32 %176, i64 1, !dbg !64
  %190 = bitcast <2 x i32> %189 to <2 x float>, !dbg !64
  %191 = fmul <2 x float> %187, %190, !dbg !69
  %192 = fadd <2 x float> %156, %191, !dbg !70
  %shift6 = shufflevector <2 x float> %183, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !71
  %193 = fadd <2 x float> %184, %shift6, !dbg !71
  %194 = extractelement <2 x float> %193, i64 0, !dbg !71
  %shift7 = shufflevector <2 x float> %191, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !71
  %195 = fadd <2 x float> %192, %shift7, !dbg !71
  %196 = extractelement <2 x float> %195, i64 0, !dbg !71
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %194, float 4.000000e+00) #1, !dbg !72
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %196, float 4.000000e+00) #1, !dbg !72
  %199 = extractelement <4 x i1> %119, i64 2, !dbg !50
  %200 = and i1 %15, %199, !dbg !73
  %201 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %29, i1 %200, i32 0, i1 %200, i32 0, i1 %200) #1, !dbg !74
  %202 = extractvalue { i32, i32 } %201, 0, !dbg !74
  %203 = extractvalue { i32, i32 } %201, 1, !dbg !74
  %204 = add i32 %26, -2, !dbg !75
  %205 = sext i32 %204 to i64, !dbg !76
  %206 = getelementptr float, ptr addrspace(1) %1, i64 %205, !dbg !76
  %207 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %206, i1 %200, i32 0, i1 %200, i32 0, i1 %200) #1, !dbg !77
  %208 = extractvalue { i32, i32 } %207, 0, !dbg !77
  %209 = extractvalue { i32, i32 } %207, 1, !dbg !77
  %210 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %42, i1 %200, i32 0, i1 %200, i32 0, i1 %200) #1, !dbg !78
  %211 = extractvalue { i32, i32 } %210, 0, !dbg !78
  %212 = extractvalue { i32, i32 } %210, 1, !dbg !78
  %213 = add i32 %26, 14, !dbg !79
  %214 = sext i32 %213 to i64, !dbg !80
  %215 = getelementptr float, ptr addrspace(1) %1, i64 %214, !dbg !80
  %216 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %215, i1 %200, i32 0, i1 %200, i32 0, i1 %200) #1, !dbg !81
  %217 = extractvalue { i32, i32 } %216, 0, !dbg !81
  %218 = extractvalue { i32, i32 } %216, 1, !dbg !81
  %219 = insertelement <2 x i32> poison, i32 %202, i64 0, !dbg !74
  %220 = insertelement <2 x i32> %219, i32 %211, i64 1, !dbg !74
  %221 = bitcast <2 x i32> %220 to <2 x float>, !dbg !74
  %222 = insertelement <2 x i32> poison, i32 %208, i64 0, !dbg !77
  %223 = insertelement <2 x i32> %222, i32 %217, i64 1, !dbg !77
  %224 = bitcast <2 x i32> %223 to <2 x float>, !dbg !77
  %225 = fmul <2 x float> %221, %224, !dbg !82
  %226 = insertelement <2 x i32> poison, i32 %203, i64 0, !dbg !74
  %227 = insertelement <2 x i32> %226, i32 %212, i64 1, !dbg !74
  %228 = bitcast <2 x i32> %227 to <2 x float>, !dbg !74
  %229 = insertelement <2 x i32> poison, i32 %209, i64 0, !dbg !77
  %230 = insertelement <2 x i32> %229, i32 %218, i64 1, !dbg !77
  %231 = bitcast <2 x i32> %230 to <2 x float>, !dbg !77
  %232 = fmul <2 x float> %228, %231, !dbg !82
  %shift8 = shufflevector <2 x float> %225, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !83
  %233 = fadd <2 x float> %225, %shift8, !dbg !83
  %shift9 = shufflevector <2 x float> %232, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !83
  %234 = fadd <2 x float> %232, %shift9, !dbg !83
  %235 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %55, i1 %200, i32 0, i1 %200, i32 0, i1 %200) #1, !dbg !84
  %236 = extractvalue { i32, i32 } %235, 0, !dbg !84
  %237 = extractvalue { i32, i32 } %235, 1, !dbg !84
  %238 = add i32 %26, 30, !dbg !85
  %239 = sext i32 %238 to i64, !dbg !86
  %240 = getelementptr float, ptr addrspace(1) %1, i64 %239, !dbg !86
  %241 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %240, i1 %200, i32 0, i1 %200, i32 0, i1 %200) #1, !dbg !87
  %242 = extractvalue { i32, i32 } %241, 0, !dbg !87
  %243 = extractvalue { i32, i32 } %241, 1, !dbg !87
  %244 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %68, i1 %200, i32 0, i1 %200, i32 0, i1 %200) #1, !dbg !88
  %245 = extractvalue { i32, i32 } %244, 0, !dbg !88
  %246 = extractvalue { i32, i32 } %244, 1, !dbg !88
  %247 = add i32 %26, 46, !dbg !89
  %248 = sext i32 %247 to i64, !dbg !90
  %249 = getelementptr float, ptr addrspace(1) %1, i64 %248, !dbg !90
  %250 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %249, i1 %200, i32 0, i1 %200, i32 0, i1 %200) #1, !dbg !91
  %251 = extractvalue { i32, i32 } %250, 0, !dbg !91
  %252 = extractvalue { i32, i32 } %250, 1, !dbg !91
  %253 = insertelement <2 x i32> poison, i32 %236, i64 0, !dbg !84
  %254 = insertelement <2 x i32> %253, i32 %245, i64 1, !dbg !84
  %255 = bitcast <2 x i32> %254 to <2 x float>, !dbg !84
  %256 = insertelement <2 x i32> poison, i32 %242, i64 0, !dbg !87
  %257 = insertelement <2 x i32> %256, i32 %251, i64 1, !dbg !87
  %258 = bitcast <2 x i32> %257 to <2 x float>, !dbg !87
  %259 = fmul <2 x float> %255, %258, !dbg !92
  %260 = fadd <2 x float> %233, %259, !dbg !93
  %261 = insertelement <2 x i32> poison, i32 %237, i64 0, !dbg !84
  %262 = insertelement <2 x i32> %261, i32 %246, i64 1, !dbg !84
  %263 = bitcast <2 x i32> %262 to <2 x float>, !dbg !84
  %264 = insertelement <2 x i32> poison, i32 %243, i64 0, !dbg !87
  %265 = insertelement <2 x i32> %264, i32 %252, i64 1, !dbg !87
  %266 = bitcast <2 x i32> %265 to <2 x float>, !dbg !87
  %267 = fmul <2 x float> %263, %266, !dbg !92
  %268 = fadd <2 x float> %234, %267, !dbg !93
  %shift10 = shufflevector <2 x float> %259, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !94
  %269 = fadd <2 x float> %260, %shift10, !dbg !94
  %270 = extractelement <2 x float> %269, i64 0, !dbg !94
  %shift11 = shufflevector <2 x float> %267, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !94
  %271 = fadd <2 x float> %268, %shift11, !dbg !94
  %272 = extractelement <2 x float> %271, i64 0, !dbg !94
  %273 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %270, float 4.000000e+00) #1, !dbg !95
  %274 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %272, float 4.000000e+00) #1, !dbg !95
  %275 = shl nsw i32 %24, 2, !dbg !96
  %276 = add i32 %275, %25, !dbg !97
  %277 = or disjoint i32 %276, 3, !dbg !98
  %278 = sext i32 %277 to i64, !dbg !99
  %279 = getelementptr float, ptr addrspace(1) %0, i64 %278, !dbg !99
  %280 = extractelement <4 x i1> %119, i64 1, !dbg !50
  %281 = and i1 %15, %280, !dbg !100
  %282 = extractelement <4 x i1> %119, i64 0, !dbg !50
  %283 = and i1 %282, %15, !dbg !100
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %279, i1 %281, i32 0, i1 %281) #1, !dbg !101
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %279, i1 %283, i32 0, i1 %283) #1, !dbg !101
  %286 = sext i32 %276 to i64, !dbg !102
  %287 = getelementptr float, ptr addrspace(1) %1, i64 %286, !dbg !102
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %287, i1 %281, i32 0, i1 %281) #1, !dbg !103
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %287, i1 %283, i32 0, i1 %283) #1, !dbg !103
  %290 = add i32 %276, 19, !dbg !104
  %291 = sext i32 %290 to i64, !dbg !105
  %292 = getelementptr float, ptr addrspace(1) %0, i64 %291, !dbg !105
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %292, i1 %281, i32 0, i1 %281) #1, !dbg !106
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %292, i1 %283, i32 0, i1 %283) #1, !dbg !106
  %295 = add i32 %276, 16, !dbg !107
  %296 = sext i32 %295 to i64, !dbg !108
  %297 = getelementptr float, ptr addrspace(1) %1, i64 %296, !dbg !108
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %297, i1 %281, i32 0, i1 %281) #1, !dbg !109
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %297, i1 %283, i32 0, i1 %283) #1, !dbg !109
  %300 = insertelement <2 x i32> poison, i32 %284, i64 0, !dbg !101
  %301 = insertelement <2 x i32> %300, i32 %293, i64 1, !dbg !101
  %302 = bitcast <2 x i32> %301 to <2 x float>, !dbg !101
  %303 = insertelement <2 x i32> poison, i32 %288, i64 0, !dbg !103
  %304 = insertelement <2 x i32> %303, i32 %298, i64 1, !dbg !103
  %305 = bitcast <2 x i32> %304 to <2 x float>, !dbg !103
  %306 = fmul <2 x float> %302, %305, !dbg !110
  %307 = insertelement <2 x i32> poison, i32 %285, i64 0, !dbg !101
  %308 = insertelement <2 x i32> %307, i32 %294, i64 1, !dbg !101
  %309 = bitcast <2 x i32> %308 to <2 x float>, !dbg !101
  %310 = insertelement <2 x i32> poison, i32 %289, i64 0, !dbg !103
  %311 = insertelement <2 x i32> %310, i32 %299, i64 1, !dbg !103
  %312 = bitcast <2 x i32> %311 to <2 x float>, !dbg !103
  %313 = fmul <2 x float> %309, %312, !dbg !110
  %shift12 = shufflevector <2 x float> %306, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !111
  %314 = fadd <2 x float> %306, %shift12, !dbg !111
  %shift13 = shufflevector <2 x float> %313, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !111
  %315 = fadd <2 x float> %313, %shift13, !dbg !111
  %316 = add i32 %276, 35, !dbg !112
  %317 = sext i32 %316 to i64, !dbg !113
  %318 = getelementptr float, ptr addrspace(1) %0, i64 %317, !dbg !113
  %319 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %318, i1 %281, i32 0, i1 %281) #1, !dbg !114
  %320 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %318, i1 %283, i32 0, i1 %283) #1, !dbg !114
  %321 = add i32 %276, 32, !dbg !115
  %322 = sext i32 %321 to i64, !dbg !116
  %323 = getelementptr float, ptr addrspace(1) %1, i64 %322, !dbg !116
  %324 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %323, i1 %281, i32 0, i1 %281) #1, !dbg !117
  %325 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %323, i1 %283, i32 0, i1 %283) #1, !dbg !117
  %326 = add i32 %276, 51, !dbg !118
  %327 = sext i32 %326 to i64, !dbg !119
  %328 = getelementptr float, ptr addrspace(1) %0, i64 %327, !dbg !119
  %329 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %328, i1 %281, i32 0, i1 %281) #1, !dbg !120
  %330 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %328, i1 %283, i32 0, i1 %283) #1, !dbg !120
  %331 = add i32 %276, 48, !dbg !121
  %332 = sext i32 %331 to i64, !dbg !122
  %333 = getelementptr float, ptr addrspace(1) %1, i64 %332, !dbg !122
  %334 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %333, i1 %281, i32 0, i1 %281) #1, !dbg !123
  %335 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %333, i1 %283, i32 0, i1 %283) #1, !dbg !123
  %336 = insertelement <2 x i32> poison, i32 %319, i64 0, !dbg !114
  %337 = insertelement <2 x i32> %336, i32 %329, i64 1, !dbg !114
  %338 = bitcast <2 x i32> %337 to <2 x float>, !dbg !114
  %339 = insertelement <2 x i32> poison, i32 %324, i64 0, !dbg !117
  %340 = insertelement <2 x i32> %339, i32 %334, i64 1, !dbg !117
  %341 = bitcast <2 x i32> %340 to <2 x float>, !dbg !117
  %342 = fmul <2 x float> %338, %341, !dbg !124
  %343 = fadd <2 x float> %314, %342, !dbg !125
  %344 = insertelement <2 x i32> poison, i32 %320, i64 0, !dbg !114
  %345 = insertelement <2 x i32> %344, i32 %330, i64 1, !dbg !114
  %346 = bitcast <2 x i32> %345 to <2 x float>, !dbg !114
  %347 = insertelement <2 x i32> poison, i32 %325, i64 0, !dbg !117
  %348 = insertelement <2 x i32> %347, i32 %335, i64 1, !dbg !117
  %349 = bitcast <2 x i32> %348 to <2 x float>, !dbg !117
  %350 = fmul <2 x float> %346, %349, !dbg !124
  %351 = fadd <2 x float> %315, %350, !dbg !125
  %shift14 = shufflevector <2 x float> %342, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !126
  %352 = fadd <2 x float> %343, %shift14, !dbg !126
  %353 = extractelement <2 x float> %352, i64 0, !dbg !126
  %shift15 = shufflevector <2 x float> %350, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !126
  %354 = fadd <2 x float> %351, %shift15, !dbg !126
  %355 = extractelement <2 x float> %354, i64 0, !dbg !126
  %356 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %353, float 4.000000e+00) #1, !dbg !127
  %357 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %355, float 4.000000e+00) #1, !dbg !127
  %358 = sext i32 %13 to i64, !dbg !128
  %359 = getelementptr float, ptr addrspace(1) %2, i64 %358, !dbg !128
  %360 = bitcast float %114 to i32, !dbg !129
  %361 = bitcast float %115 to i32, !dbg !129
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %360, i32 %361, ptr addrspace(1) %359, i1 %15) #1, !dbg !129
  %362 = getelementptr float, ptr addrspace(1) %3, i64 %358, !dbg !130
  %363 = bitcast float %197 to i32, !dbg !131
  %364 = select i1 %117, i32 %363, i32 0, !dbg !50
  %365 = bitcast float %198 to i32, !dbg !131
  %366 = select i1 %120, i32 %365, i32 0, !dbg !50
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %364, i32 %366, ptr addrspace(1) %362, i1 %15) #1, !dbg !131
  %367 = getelementptr float, ptr addrspace(1) %4, i64 %358, !dbg !132
  %368 = bitcast float %273 to i32, !dbg !133
  %369 = select i1 %199, i32 %368, i32 0, !dbg !50
  %370 = bitcast float %274 to i32, !dbg !133
  %371 = select i1 %199, i32 %370, i32 0, !dbg !50
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %369, i32 %371, ptr addrspace(1) %367, i1 %15) #1, !dbg !133
  %372 = getelementptr float, ptr addrspace(1) %5, i64 %358, !dbg !134
  %373 = bitcast float %356 to i32, !dbg !135
  %374 = select i1 %280, i32 %373, i32 0, !dbg !50
  %375 = bitcast float %357 to i32, !dbg !135
  %376 = select i1 %282, i32 %375, i32 0, !dbg !50
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %374, i32 %376, ptr addrspace(1) %372, i1 %15) #1, !dbg !135
  ret void, !dbg !136
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cf3ptqr6irifg4mbd6s4lzl6sohkbm25xaqjl6ezm2lit67cwwus.py", directory: "inductor_cache/f3")
!4 = !{ptr @triton_poi_fused_copy_mean_mul_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_copy_mean_mul_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_copy_mean_mul_0", linkageName: "triton_poi_fused_copy_mean_mul_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 26, scope: !7)
!20 = !DILocation(line: 29, column: 38, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 43, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 43, scope: !7)
!26 = !DILocation(line: 31, column: 40, scope: !7)
!27 = !DILocation(line: 31, column: 30, scope: !7)
!28 = !DILocation(line: 31, column: 48, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 48, scope: !7)
!31 = !DILocation(line: 33, column: 40, scope: !7)
!32 = !DILocation(line: 33, column: 30, scope: !7)
!33 = !DILocation(line: 33, column: 48, scope: !7)
!34 = !DILocation(line: 34, column: 30, scope: !7)
!35 = !DILocation(line: 34, column: 48, scope: !7)
!36 = !DILocation(line: 35, column: 41, scope: !7)
!37 = !DILocation(line: 35, column: 31, scope: !7)
!38 = !DILocation(line: 35, column: 49, scope: !7)
!39 = !DILocation(line: 36, column: 31, scope: !7)
!40 = !DILocation(line: 36, column: 49, scope: !7)
!41 = !DILocation(line: 37, column: 18, scope: !7)
!42 = !DILocation(line: 39, column: 18, scope: !7)
!43 = !DILocation(line: 40, column: 18, scope: !7)
!44 = !DILocation(line: 41, column: 19, scope: !7)
!45 = !DILocation(line: 43, column: 20, scope: !7)
!46 = !DILocation(line: 45, column: 20, scope: !7)
!47 = !DILocation(line: 48, column: 21, scope: !7)
!48 = !DILocation(line: 49, column: 52, scope: !7)
!49 = !DILocation(line: 102, column: 21, scope: !7)
!50 = !DILocation(line: 0, scope: !7)
!51 = !DILocation(line: 49, column: 44, scope: !7)
!52 = !DILocation(line: 50, column: 43, scope: !7)
!53 = !DILocation(line: 50, column: 31, scope: !7)
!54 = !DILocation(line: 50, column: 51, scope: !7)
!55 = !DILocation(line: 52, column: 49, scope: !7)
!56 = !DILocation(line: 53, column: 41, scope: !7)
!57 = !DILocation(line: 53, column: 31, scope: !7)
!58 = !DILocation(line: 53, column: 49, scope: !7)
!59 = !DILocation(line: 51, column: 20, scope: !7)
!60 = !DILocation(line: 55, column: 20, scope: !7)
!61 = !DILocation(line: 56, column: 49, scope: !7)
!62 = !DILocation(line: 57, column: 41, scope: !7)
!63 = !DILocation(line: 57, column: 31, scope: !7)
!64 = !DILocation(line: 57, column: 49, scope: !7)
!65 = !DILocation(line: 60, column: 49, scope: !7)
!66 = !DILocation(line: 61, column: 41, scope: !7)
!67 = !DILocation(line: 61, column: 31, scope: !7)
!68 = !DILocation(line: 61, column: 49, scope: !7)
!69 = !DILocation(line: 58, column: 20, scope: !7)
!70 = !DILocation(line: 59, column: 20, scope: !7)
!71 = !DILocation(line: 63, column: 20, scope: !7)
!72 = !DILocation(line: 65, column: 20, scope: !7)
!73 = !DILocation(line: 76, column: 52, scope: !7)
!74 = !DILocation(line: 76, column: 44, scope: !7)
!75 = !DILocation(line: 77, column: 43, scope: !7)
!76 = !DILocation(line: 77, column: 31, scope: !7)
!77 = !DILocation(line: 77, column: 51, scope: !7)
!78 = !DILocation(line: 79, column: 49, scope: !7)
!79 = !DILocation(line: 80, column: 41, scope: !7)
!80 = !DILocation(line: 80, column: 31, scope: !7)
!81 = !DILocation(line: 80, column: 49, scope: !7)
!82 = !DILocation(line: 78, column: 20, scope: !7)
!83 = !DILocation(line: 82, column: 20, scope: !7)
!84 = !DILocation(line: 83, column: 49, scope: !7)
!85 = !DILocation(line: 84, column: 41, scope: !7)
!86 = !DILocation(line: 84, column: 31, scope: !7)
!87 = !DILocation(line: 84, column: 49, scope: !7)
!88 = !DILocation(line: 87, column: 49, scope: !7)
!89 = !DILocation(line: 88, column: 41, scope: !7)
!90 = !DILocation(line: 88, column: 31, scope: !7)
!91 = !DILocation(line: 88, column: 49, scope: !7)
!92 = !DILocation(line: 85, column: 20, scope: !7)
!93 = !DILocation(line: 86, column: 20, scope: !7)
!94 = !DILocation(line: 90, column: 20, scope: !7)
!95 = !DILocation(line: 92, column: 20, scope: !7)
!96 = !DILocation(line: 103, column: 37, scope: !7)
!97 = !DILocation(line: 103, column: 35, scope: !7)
!98 = !DILocation(line: 103, column: 42, scope: !7)
!99 = !DILocation(line: 103, column: 31, scope: !7)
!100 = !DILocation(line: 103, column: 58, scope: !7)
!101 = !DILocation(line: 103, column: 50, scope: !7)
!102 = !DILocation(line: 104, column: 31, scope: !7)
!103 = !DILocation(line: 104, column: 46, scope: !7)
!104 = !DILocation(line: 106, column: 43, scope: !7)
!105 = !DILocation(line: 106, column: 31, scope: !7)
!106 = !DILocation(line: 106, column: 51, scope: !7)
!107 = !DILocation(line: 107, column: 43, scope: !7)
!108 = !DILocation(line: 107, column: 31, scope: !7)
!109 = !DILocation(line: 107, column: 51, scope: !7)
!110 = !DILocation(line: 105, column: 20, scope: !7)
!111 = !DILocation(line: 109, column: 20, scope: !7)
!112 = !DILocation(line: 110, column: 43, scope: !7)
!113 = !DILocation(line: 110, column: 31, scope: !7)
!114 = !DILocation(line: 110, column: 51, scope: !7)
!115 = !DILocation(line: 111, column: 43, scope: !7)
!116 = !DILocation(line: 111, column: 31, scope: !7)
!117 = !DILocation(line: 111, column: 51, scope: !7)
!118 = !DILocation(line: 114, column: 43, scope: !7)
!119 = !DILocation(line: 114, column: 31, scope: !7)
!120 = !DILocation(line: 114, column: 51, scope: !7)
!121 = !DILocation(line: 115, column: 43, scope: !7)
!122 = !DILocation(line: 115, column: 31, scope: !7)
!123 = !DILocation(line: 115, column: 51, scope: !7)
!124 = !DILocation(line: 112, column: 20, scope: !7)
!125 = !DILocation(line: 113, column: 20, scope: !7)
!126 = !DILocation(line: 117, column: 20, scope: !7)
!127 = !DILocation(line: 119, column: 20, scope: !7)
!128 = !DILocation(line: 130, column: 25, scope: !7)
!129 = !DILocation(line: 130, column: 37, scope: !7)
!130 = !DILocation(line: 131, column: 25, scope: !7)
!131 = !DILocation(line: 131, column: 37, scope: !7)
!132 = !DILocation(line: 132, column: 25, scope: !7)
!133 = !DILocation(line: 132, column: 37, scope: !7)
!134 = !DILocation(line: 133, column: 25, scope: !7)
!135 = !DILocation(line: 133, column: 38, scope: !7)
!136 = !DILocation(line: 133, column: 4, scope: !7)
