; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_49(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, i32 %22) local_unnamed_addr !dbg !7 {
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %25 = shl i32 %24, 7, !dbg !11
  %26 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %27 = and i32 %26, 127, !dbg !12
  %28 = or disjoint i32 %25, %27, !dbg !13
  %29 = icmp slt i32 %28, 9216, !dbg !14
  %.frozen = freeze i32 %28, !dbg !15
  %30 = sdiv i32 %.frozen, 8, !dbg !15
  %31 = srem i32 %30, 8, !dbg !16
  %32 = mul i32 %30, 8, !dbg !17
  %.decomposed = sub i32 %.frozen, %32, !dbg !17
  %33 = sdiv i32 %28, 64, !dbg !18
  %34 = srem i32 %33, 36, !dbg !19
  %35 = sext i32 %31 to i64, !dbg !20
  %36 = getelementptr i64, ptr addrspace(1) %1, i64 %35, !dbg !20
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 %29) #3, !dbg !21
  %38 = sext i32 %.decomposed to i64, !dbg !22
  %39 = getelementptr i64, ptr addrspace(1) %2, i64 %38, !dbg !22
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 %29) #3, !dbg !23
  %41 = getelementptr i64, ptr addrspace(1) %4, i64 %38, !dbg !24
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %29) #3, !dbg !25
  %43 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !26
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %29) #3, !dbg !27
  %45 = sext i32 %28 to i64, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %6, i64 %45, !dbg !28
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %29) #3, !dbg !29
  %48 = sext i32 %34 to i64, !dbg !30
  %49 = getelementptr float, ptr addrspace(1) %7, i64 %48, !dbg !30
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %29) #3, !dbg !31
  %51 = getelementptr float, ptr addrspace(1) %8, i64 %48, !dbg !32
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %29) #3, !dbg !33
  %53 = bitcast i32 %52 to float, !dbg !33
  %54 = getelementptr float, ptr addrspace(1) %9, i64 %48, !dbg !34
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %29) #3, !dbg !35
  %56 = getelementptr float, ptr addrspace(1) %10, i64 %48, !dbg !36
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %29) #3, !dbg !37
  %58 = getelementptr float, ptr addrspace(1) %11, i64 %45, !dbg !38
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %29) #3, !dbg !39
  %60 = getelementptr i64, ptr addrspace(1) %12, i64 %35, !dbg !40
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 %29) #3, !dbg !41
  %62 = getelementptr float, ptr addrspace(1) %13, i64 %35, !dbg !42
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %29) #3, !dbg !43
  %64 = getelementptr i64, ptr addrspace(1) %14, i64 %35, !dbg !44
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %64, i1 %29) #3, !dbg !45
  %66 = getelementptr i64, ptr addrspace(1) %15, i64 %38, !dbg !46
  %67 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 %29) #3, !dbg !47
  %68 = getelementptr i64, ptr addrspace(1) %17, i64 %38, !dbg !48
  %69 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %68, i1 %29) #3, !dbg !49
  %70 = getelementptr float, ptr addrspace(1) %18, i64 %38, !dbg !50
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %29) #3, !dbg !51
  %72 = getelementptr i64, ptr addrspace(1) %19, i64 %35, !dbg !52
  %73 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %72, i1 %29) #3, !dbg !53
  %74 = getelementptr float, ptr addrspace(1) %20, i64 %35, !dbg !54
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %29) #3, !dbg !55
  %76 = lshr i64 %37, 61, !dbg !56
  %77 = and i64 %76, 4, !dbg !56
  %78 = add i64 %77, %37, !dbg !56
  %79 = lshr i64 %40, 61, !dbg !57
  %80 = and i64 %79, 4, !dbg !57
  %81 = shl i64 %78, 2, !dbg !58
  %82 = shl nsw i32 %33, 4, !dbg !59
  %83 = sext i32 %82 to i64, !dbg !60
  %84 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !61
  %85 = getelementptr float, ptr addrspace(1) %84, i64 %80, !dbg !61
  %86 = getelementptr float, ptr addrspace(1) %85, i64 %81, !dbg !61
  %87 = getelementptr float, ptr addrspace(1) %86, i64 %83, !dbg !61
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %29) #3, !dbg !62
  %89 = lshr i64 %42, 61, !dbg !63
  %90 = and i64 %89, 4, !dbg !63
  %91 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !64
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %90, !dbg !64
  %93 = getelementptr float, ptr addrspace(1) %92, i64 %81, !dbg !64
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %83, !dbg !64
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %29) #3, !dbg !65
  %96 = fadd float %53, 0x3EE4F8B580000000, !dbg !66
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i = icmp eq i32 %97, 0, !dbg !67
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !67
  %.not1.i = icmp eq i32 %98, 0, !dbg !67
  br i1 %.not.i, label %104, label %99, !dbg !67

99:                                               ; preds = %23
  br i1 %.not1.i, label %102, label %100, !dbg !67

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %96) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %96) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

104:                                              ; preds = %23
  br i1 %.not1.i, label %107, label %105, !dbg !67

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %96) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %96) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

__nv_sqrtf.exit:                                  ; preds = %100, %102, %105, %107
  %.0.i = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !67
  %109 = bitcast i32 %47 to float, !dbg !29
  %110 = bitcast i32 %50 to float, !dbg !31
  %111 = fsub float %109, %110, !dbg !68
  %112 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !27
  %113 = insertelement <2 x i32> %112, i32 %71, i64 1, !dbg !27
  %114 = bitcast <2 x i32> %113 to <2 x float>, !dbg !27
  %115 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !43
  %116 = insertelement <2 x i32> %115, i32 %75, i64 1, !dbg !43
  %117 = bitcast <2 x i32> %116 to <2 x float>, !dbg !43
  %118 = bitcast i32 %59 to float, !dbg !39
  %119 = bitcast i32 %57 to float, !dbg !37
  %120 = bitcast i32 %55 to float, !dbg !35
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !69
  %122 = fmul float %111, %121, !dbg !70
  %123 = fmul float %122, %120, !dbg !71
  %124 = fadd float %123, %119, !dbg !72
  %125 = fadd float %124, 0.000000e+00, !dbg !73
  %126 = fadd float %125, %118, !dbg !74
  %127 = lshr i64 %61, 61, !dbg !75
  %128 = and i64 %127, 4, !dbg !75
  %129 = add i64 %128, %61, !dbg !75
  %130 = shl i64 %129, 2, !dbg !76
  %131 = getelementptr float, ptr addrspace(1) %85, i64 %130, !dbg !77
  %132 = getelementptr float, ptr addrspace(1) %131, i64 %83, !dbg !77
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %29) #3, !dbg !78
  %134 = getelementptr float, ptr addrspace(1) %92, i64 %130, !dbg !79
  %135 = getelementptr float, ptr addrspace(1) %134, i64 %83, !dbg !79
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %29) #3, !dbg !80
  %137 = lshr i64 %65, 62, !dbg !81
  %138 = and i64 %137, 2, !dbg !81
  %139 = add i64 %138, %65, !dbg !81
  %140 = lshr i64 %67, 62, !dbg !82
  %141 = and i64 %140, 2, !dbg !82
  %142 = shl i64 %139, 1, !dbg !83
  %143 = shl nsw i32 %33, 2, !dbg !84
  %144 = sext i32 %143 to i64, !dbg !85
  %145 = getelementptr float, ptr addrspace(1) %16, i64 %67, !dbg !86
  %146 = getelementptr float, ptr addrspace(1) %145, i64 %141, !dbg !86
  %147 = getelementptr float, ptr addrspace(1) %146, i64 %142, !dbg !86
  %148 = getelementptr float, ptr addrspace(1) %147, i64 %144, !dbg !86
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %29) #3, !dbg !87
  %150 = lshr i64 %69, 62, !dbg !88
  %151 = and i64 %150, 2, !dbg !88
  %152 = getelementptr float, ptr addrspace(1) %16, i64 %69, !dbg !89
  %153 = getelementptr float, ptr addrspace(1) %152, i64 %151, !dbg !89
  %154 = getelementptr float, ptr addrspace(1) %153, i64 %142, !dbg !89
  %155 = getelementptr float, ptr addrspace(1) %154, i64 %144, !dbg !89
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 %29) #3, !dbg !90
  %157 = lshr i64 %73, 62, !dbg !91
  %158 = and i64 %157, 2, !dbg !91
  %159 = add i64 %158, %73, !dbg !91
  %160 = shl i64 %159, 1, !dbg !92
  %161 = getelementptr float, ptr addrspace(1) %146, i64 %160, !dbg !93
  %162 = getelementptr float, ptr addrspace(1) %161, i64 %144, !dbg !93
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %29) #3, !dbg !94
  %164 = getelementptr float, ptr addrspace(1) %153, i64 %160, !dbg !95
  %165 = getelementptr float, ptr addrspace(1) %164, i64 %144, !dbg !95
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %29) #3, !dbg !96
  %167 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !62
  %168 = insertelement <2 x i32> %167, i32 %149, i64 1, !dbg !62
  %169 = bitcast <2 x i32> %168 to <2 x float>, !dbg !62
  %170 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !65
  %171 = insertelement <2 x i32> %170, i32 %156, i64 1, !dbg !65
  %172 = bitcast <2 x i32> %171 to <2 x float>, !dbg !65
  %173 = fsub <2 x float> %172, %169, !dbg !97
  %174 = fmul <2 x float> %173, %114, !dbg !98
  %175 = fadd <2 x float> %174, %169, !dbg !99
  %176 = insertelement <2 x i32> poison, i32 %133, i64 0, !dbg !78
  %177 = insertelement <2 x i32> %176, i32 %163, i64 1, !dbg !78
  %178 = bitcast <2 x i32> %177 to <2 x float>, !dbg !78
  %179 = insertelement <2 x i32> poison, i32 %136, i64 0, !dbg !80
  %180 = insertelement <2 x i32> %179, i32 %166, i64 1, !dbg !80
  %181 = bitcast <2 x i32> %180 to <2 x float>, !dbg !80
  %182 = fsub <2 x float> %181, %178, !dbg !100
  %183 = fmul <2 x float> %182, %114, !dbg !101
  %184 = fadd <2 x float> %183, %178, !dbg !102
  %185 = fsub <2 x float> %184, %175, !dbg !103
  %186 = fmul <2 x float> %185, %117, !dbg !104
  %187 = fadd <2 x float> %175, %186, !dbg !105
  %188 = extractelement <2 x float> %187, i64 0, !dbg !106
  %189 = fadd float %126, %188, !dbg !106
  %190 = extractelement <2 x float> %187, i64 1, !dbg !107
  %191 = fadd float %189, %190, !dbg !107
  %192 = fcmp olt float %191, 0.000000e+00, !dbg !108
  %193 = select i1 %192, float 0.000000e+00, float %191, !dbg !112
  %194 = fcmp ole float %193, 0.000000e+00, !dbg !113
  %195 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !114
  %196 = bitcast float %193 to i32, !dbg !115
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %196, ptr addrspace(1) %195, i1 %29) #3, !dbg !115
  %197 = getelementptr i1, ptr addrspace(1) %21, i64 %45, !dbg !116
  %198 = zext i1 %194 to i8, !dbg !117
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %198, ptr addrspace(1) %197, i1 %29) #3, !dbg !117
  ret void, !dbg !118
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbwohk4w7xx53ino66ypiqtyqbmdwzgjrpme5jmqjzibjhvci6ev.py", directory: "inductor_cache/bw")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_49, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_49, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_49", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_49", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 27, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 31, scope: !7)
!37 = !DILocation(line: 37, column: 36, scope: !7)
!38 = !DILocation(line: 38, column: 32, scope: !7)
!39 = !DILocation(line: 38, column: 37, scope: !7)
!40 = !DILocation(line: 39, column: 32, scope: !7)
!41 = !DILocation(line: 39, column: 37, scope: !7)
!42 = !DILocation(line: 40, column: 32, scope: !7)
!43 = !DILocation(line: 40, column: 37, scope: !7)
!44 = !DILocation(line: 41, column: 32, scope: !7)
!45 = !DILocation(line: 41, column: 37, scope: !7)
!46 = !DILocation(line: 42, column: 32, scope: !7)
!47 = !DILocation(line: 42, column: 37, scope: !7)
!48 = !DILocation(line: 43, column: 32, scope: !7)
!49 = !DILocation(line: 43, column: 37, scope: !7)
!50 = !DILocation(line: 44, column: 32, scope: !7)
!51 = !DILocation(line: 44, column: 37, scope: !7)
!52 = !DILocation(line: 45, column: 32, scope: !7)
!53 = !DILocation(line: 45, column: 37, scope: !7)
!54 = !DILocation(line: 46, column: 32, scope: !7)
!55 = !DILocation(line: 46, column: 37, scope: !7)
!56 = !DILocation(line: 50, column: 32, scope: !7)
!57 = !DILocation(line: 53, column: 32, scope: !7)
!58 = !DILocation(line: 54, column: 39, scope: !7)
!59 = !DILocation(line: 54, column: 49, scope: !7)
!60 = !DILocation(line: 54, column: 46, scope: !7)
!61 = !DILocation(line: 54, column: 30, scope: !7)
!62 = !DILocation(line: 54, column: 54, scope: !7)
!63 = !DILocation(line: 57, column: 35, scope: !7)
!64 = !DILocation(line: 58, column: 31, scope: !7)
!65 = !DILocation(line: 58, column: 56, scope: !7)
!66 = !DILocation(line: 64, column: 20, scope: !7)
!67 = !DILocation(line: 65, column: 27, scope: !7)
!68 = !DILocation(line: 62, column: 20, scope: !7)
!69 = !DILocation(line: 67, column: 20, scope: !7)
!70 = !DILocation(line: 70, column: 20, scope: !7)
!71 = !DILocation(line: 71, column: 20, scope: !7)
!72 = !DILocation(line: 72, column: 20, scope: !7)
!73 = !DILocation(line: 74, column: 20, scope: !7)
!74 = !DILocation(line: 75, column: 20, scope: !7)
!75 = !DILocation(line: 78, column: 35, scope: !7)
!76 = !DILocation(line: 79, column: 40, scope: !7)
!77 = !DILocation(line: 79, column: 31, scope: !7)
!78 = !DILocation(line: 79, column: 56, scope: !7)
!79 = !DILocation(line: 80, column: 31, scope: !7)
!80 = !DILocation(line: 80, column: 57, scope: !7)
!81 = !DILocation(line: 91, column: 35, scope: !7)
!82 = !DILocation(line: 94, column: 35, scope: !7)
!83 = !DILocation(line: 95, column: 42, scope: !7)
!84 = !DILocation(line: 95, column: 52, scope: !7)
!85 = !DILocation(line: 95, column: 50, scope: !7)
!86 = !DILocation(line: 95, column: 32, scope: !7)
!87 = !DILocation(line: 95, column: 57, scope: !7)
!88 = !DILocation(line: 98, column: 35, scope: !7)
!89 = !DILocation(line: 99, column: 32, scope: !7)
!90 = !DILocation(line: 99, column: 57, scope: !7)
!91 = !DILocation(line: 105, column: 35, scope: !7)
!92 = !DILocation(line: 106, column: 42, scope: !7)
!93 = !DILocation(line: 106, column: 32, scope: !7)
!94 = !DILocation(line: 106, column: 57, scope: !7)
!95 = !DILocation(line: 107, column: 32, scope: !7)
!96 = !DILocation(line: 107, column: 57, scope: !7)
!97 = !DILocation(line: 59, column: 20, scope: !7)
!98 = !DILocation(line: 60, column: 20, scope: !7)
!99 = !DILocation(line: 61, column: 19, scope: !7)
!100 = !DILocation(line: 81, column: 20, scope: !7)
!101 = !DILocation(line: 82, column: 20, scope: !7)
!102 = !DILocation(line: 83, column: 20, scope: !7)
!103 = !DILocation(line: 84, column: 20, scope: !7)
!104 = !DILocation(line: 85, column: 20, scope: !7)
!105 = !DILocation(line: 86, column: 20, scope: !7)
!106 = !DILocation(line: 87, column: 20, scope: !7)
!107 = !DILocation(line: 114, column: 20, scope: !7)
!108 = !DILocation(line: 118, column: 15, scope: !109, inlinedAt: !111)
!109 = distinct !DILexicalBlockFile(scope: !7, file: !110, discriminator: 0)
!110 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!111 = !DILocation(line: 116, column: 42, scope: !7)
!112 = !DILocation(line: 121, column: 29, scope: !109, inlinedAt: !111)
!113 = !DILocation(line: 117, column: 21, scope: !7)
!114 = !DILocation(line: 118, column: 28, scope: !7)
!115 = !DILocation(line: 118, column: 40, scope: !7)
!116 = !DILocation(line: 119, column: 25, scope: !7)
!117 = !DILocation(line: 119, column: 37, scope: !7)
!118 = !DILocation(line: 119, column: 4, scope: !7)
