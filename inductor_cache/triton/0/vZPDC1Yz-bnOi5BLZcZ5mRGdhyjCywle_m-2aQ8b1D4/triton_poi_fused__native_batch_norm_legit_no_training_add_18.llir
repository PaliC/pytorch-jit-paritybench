; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 28, !dbg !12
  %15 = lshr i32 %12, 3, !dbg !12
  %16 = and i32 %15, 15, !dbg !12
  %17 = or disjoint i32 %16, 16, !dbg !12
  %18 = or disjoint i32 %11, %14, !dbg !13
  %19 = or disjoint i32 %11, %16, !dbg !13
  %20 = or disjoint i32 %11, %17, !dbg !13
  %21 = icmp slt i32 %18, 64, !dbg !14
  %22 = icmp slt i32 %19, 64, !dbg !14
  %23 = icmp slt i32 %20, 64, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %25 = shl i32 %24, 5, !dbg !16
  %26 = or disjoint i32 %25, %16, !dbg !17
  %27 = or disjoint i32 %25, %17, !dbg !17
  %28 = or disjoint i32 %25, %14, !dbg !17
  %29 = icmp slt i32 %26, 64, !dbg !18
  %30 = icmp slt i32 %27, 64, !dbg !18
  %31 = icmp slt i32 %28, 64, !dbg !18
  %.frozen = freeze i32 %18, !dbg !19
  %32 = sdiv i32 %.frozen, 16, !dbg !19
  %33 = mul i32 %32, 16, !dbg !20
  %.decomposed = sub i32 %.frozen, %33, !dbg !20
  %34 = shl i32 %26, 4, !dbg !21
  %35 = shl i32 %27, 4, !dbg !21
  %36 = shl i32 %32, 10, !dbg !22
  %37 = add i32 %36, %.decomposed, !dbg !23
  %38 = add i32 %37, %34, !dbg !24
  %39 = add i32 %37, %35, !dbg !24
  %40 = sext i32 %38 to i64, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !25
  %42 = sext i32 %39 to i64, !dbg !25
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !25
  %44 = and i1 %21, %29, !dbg !26
  %45 = and i1 %21, %30, !dbg !26
  %46 = and i1 %22, %31, !dbg !26
  %47 = and i1 %23, %31, !dbg !26
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %44) #4, !dbg !27
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !27
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !27
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !27
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %45) #4, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !27
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !27
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !27
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !27
  %58 = shl i32 %12, 7, !dbg !27
  %59 = and i32 %58, 896, !dbg !27
  %60 = or disjoint i32 %59, %16, !dbg !27
  %61 = and i32 %13, 508, !dbg !27
  %62 = lshr exact i32 %59, 5, !dbg !27
  %63 = add nuw nsw i32 %62, %60, !dbg !27
  %64 = zext nneg i32 %63 to i64, !dbg !27
  %65 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %64, !dbg !27
  %66 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 true) #4, !dbg !27
  %67 = or disjoint i32 %60, 32, !dbg !27
  %68 = lshr i32 %67, 5, !dbg !27
  %69 = add nuw nsw i32 %68, %67, !dbg !27
  %70 = zext nneg i32 %69 to i64, !dbg !27
  %71 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %70, !dbg !27
  %72 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 true) #4, !dbg !27
  %73 = or disjoint i32 %60, 64, !dbg !27
  %74 = lshr i32 %73, 5, !dbg !27
  %75 = add nuw nsw i32 %74, %73, !dbg !27
  %76 = zext nneg i32 %75 to i64, !dbg !27
  %77 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %76, !dbg !27
  %78 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %78, i1 true) #4, !dbg !27
  %79 = or disjoint i32 %60, 96, !dbg !27
  %80 = lshr i32 %79, 5, !dbg !27
  %81 = add nuw nsw i32 %80, %79, !dbg !27
  %82 = zext nneg i32 %81 to i64, !dbg !27
  %83 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %82, !dbg !27
  %84 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #4, !dbg !27
  %85 = or disjoint i32 %60, 16, !dbg !27
  %86 = add nuw nsw i32 %85, %62, !dbg !27
  %87 = zext nneg i32 %86 to i64, !dbg !27
  %88 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %87, !dbg !27
  %89 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #4, !dbg !27
  %90 = or disjoint i32 %60, 48, !dbg !27
  %91 = lshr i32 %90, 5, !dbg !27
  %92 = add nuw nsw i32 %91, %90, !dbg !27
  %93 = zext nneg i32 %92 to i64, !dbg !27
  %94 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %93, !dbg !27
  %95 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 true) #4, !dbg !27
  %96 = or disjoint i32 %60, 80, !dbg !27
  %97 = lshr i32 %96, 5, !dbg !27
  %98 = add nuw nsw i32 %97, %96, !dbg !27
  %99 = zext nneg i32 %98 to i64, !dbg !27
  %100 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %99, !dbg !27
  %101 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #4, !dbg !27
  %102 = or disjoint i32 %60, 112, !dbg !27
  %103 = lshr i32 %102, 5, !dbg !27
  %104 = add nuw nsw i32 %103, %102, !dbg !27
  %105 = zext nneg i32 %104 to i64, !dbg !27
  %106 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %105, !dbg !27
  %107 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 true) #4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %108 = lshr i32 %61, 5, !dbg !27
  %109 = add nuw nsw i32 %108, %61, !dbg !27
  %110 = zext nneg i32 %109 to i64, !dbg !27
  %111 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %110, !dbg !27
  %112 = load float, ptr addrspace(3) %111, align 4, !dbg !27
  %113 = or disjoint i32 %61, 1, !dbg !27
  %114 = add nuw nsw i32 %113, %108, !dbg !27
  %115 = zext nneg i32 %114 to i64, !dbg !27
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %115, !dbg !27
  %117 = load float, ptr addrspace(3) %116, align 4, !dbg !27
  %118 = or disjoint i32 %61, 2, !dbg !27
  %119 = add nuw nsw i32 %118, %108, !dbg !27
  %120 = zext nneg i32 %119 to i64, !dbg !27
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %120, !dbg !27
  %122 = load float, ptr addrspace(3) %121, align 4, !dbg !27
  %123 = or disjoint i32 %61, 3, !dbg !27
  %124 = add nuw nsw i32 %123, %108, !dbg !27
  %125 = zext nneg i32 %124 to i64, !dbg !27
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %125, !dbg !27
  %127 = load float, ptr addrspace(3) %126, align 4, !dbg !27
  %128 = or disjoint i32 %61, 512, !dbg !27
  %129 = lshr i32 %128, 5, !dbg !27
  %130 = add nuw nsw i32 %129, %128, !dbg !27
  %131 = zext nneg i32 %130 to i64, !dbg !27
  %132 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %131, !dbg !27
  %133 = load float, ptr addrspace(3) %132, align 4, !dbg !27
  %134 = or disjoint i32 %61, 513, !dbg !27
  %135 = lshr i32 %134, 5, !dbg !27
  %136 = add nuw nsw i32 %135, %134, !dbg !27
  %137 = zext nneg i32 %136 to i64, !dbg !27
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %137, !dbg !27
  %139 = load float, ptr addrspace(3) %138, align 4, !dbg !27
  %140 = or disjoint i32 %61, 514, !dbg !27
  %141 = lshr i32 %140, 5, !dbg !27
  %142 = add nuw nsw i32 %141, %140, !dbg !27
  %143 = zext nneg i32 %142 to i64, !dbg !27
  %144 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %143, !dbg !27
  %145 = load float, ptr addrspace(3) %144, align 4, !dbg !27
  %146 = or disjoint i32 %61, 515, !dbg !27
  %147 = lshr i32 %146, 5, !dbg !27
  %148 = add nuw nsw i32 %147, %146, !dbg !27
  %149 = zext nneg i32 %148 to i64, !dbg !27
  %150 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %149, !dbg !27
  %151 = load float, ptr addrspace(3) %150, align 4, !dbg !27
  %152 = shl i32 %19, 6, !dbg !28
  %153 = shl i32 %20, 6, !dbg !28
  %154 = add i32 %28, %152, !dbg !29
  %155 = add i32 %28, %153, !dbg !29
  %156 = sext i32 %154 to i64, !dbg !30
  %157 = getelementptr float, ptr addrspace(1) %1, i64 %156, !dbg !30
  %158 = sext i32 %155 to i64, !dbg !30
  %159 = getelementptr float, ptr addrspace(1) %1, i64 %158, !dbg !30
  %160 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %157, i1 %46) #4, !dbg !31
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %159, i1 %47) #4, !dbg !31
  %162 = sext i32 %28 to i64, !dbg !32
  %163 = getelementptr float, ptr addrspace(1) %2, i64 %162, !dbg !32
  %164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %163, i1 %31) #4, !dbg !33
  %165 = getelementptr float, ptr addrspace(1) %3, i64 %162, !dbg !34
  %166 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %165, i1 %31) #4, !dbg !35
  %167 = extractvalue { i32, i32, i32, i32 } %166, 0, !dbg !35
  %168 = extractvalue { i32, i32, i32, i32 } %166, 1, !dbg !35
  %169 = extractvalue { i32, i32, i32, i32 } %166, 2, !dbg !35
  %170 = extractvalue { i32, i32, i32, i32 } %166, 3, !dbg !35
  %171 = bitcast i32 %167 to float, !dbg !35
  %172 = bitcast i32 %168 to float, !dbg !35
  %173 = bitcast i32 %169 to float, !dbg !35
  %174 = bitcast i32 %170 to float, !dbg !35
  %175 = getelementptr float, ptr addrspace(1) %4, i64 %162, !dbg !36
  %176 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %175, i1 %31) #4, !dbg !37
  %177 = getelementptr float, ptr addrspace(1) %5, i64 %162, !dbg !38
  %178 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %177, i1 %31) #4, !dbg !39
  %179 = fadd float %171, 0x3EE4F8B580000000, !dbg !40
  %180 = fadd float %172, 0x3EE4F8B580000000, !dbg !40
  %181 = fadd float %173, 0x3EE4F8B580000000, !dbg !40
  %182 = fadd float %174, 0x3EE4F8B580000000, !dbg !40
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i = icmp eq i32 %183, 0, !dbg !41
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i = icmp eq i32 %184, 0, !dbg !41
  br i1 %.not.i, label %190, label %185, !dbg !41

185:                                              ; preds = %9
  br i1 %.not1.i, label %188, label %186, !dbg !41

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %179) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %179) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

190:                                              ; preds = %9
  br i1 %.not1.i, label %193, label %191, !dbg !41

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.f(float %179) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.f(float %179) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %186, %188, %191, %193
  %.0.i = phi float [ %187, %186 ], [ %189, %188 ], [ %192, %191 ], [ %194, %193 ], !dbg !41
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i1 = icmp eq i32 %195, 0, !dbg !41
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i4 = icmp eq i32 %196, 0, !dbg !41
  br i1 %.not.i1, label %202, label %197, !dbg !41

197:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %200, label %198, !dbg !41

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %180) #4, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %180) #4, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

202:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %205, label %203, !dbg !41

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.f(float %180) #4, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.f(float %180) #4, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

__nv_sqrtf.exit5:                                 ; preds = %198, %200, %203, %205
  %.0.i3 = phi float [ %199, %198 ], [ %201, %200 ], [ %204, %203 ], [ %206, %205 ], !dbg !41
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i6 = icmp eq i32 %207, 0, !dbg !41
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i9 = icmp eq i32 %208, 0, !dbg !41
  br i1 %.not.i6, label %214, label %209, !dbg !41

209:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %212, label %210, !dbg !41

210:                                              ; preds = %209
  %211 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %181) #4, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

212:                                              ; preds = %209
  %213 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %181) #4, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

214:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %217, label %215, !dbg !41

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.f(float %181) #4, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.f(float %181) #4, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

__nv_sqrtf.exit10:                                ; preds = %210, %212, %215, %217
  %.0.i8 = phi float [ %211, %210 ], [ %213, %212 ], [ %216, %215 ], [ %218, %217 ], !dbg !41
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i11 = icmp eq i32 %219, 0, !dbg !41
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i14 = icmp eq i32 %220, 0, !dbg !41
  br i1 %.not.i11, label %226, label %221, !dbg !41

221:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %224, label %222, !dbg !41

222:                                              ; preds = %221
  %223 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %182) #4, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

224:                                              ; preds = %221
  %225 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %182) #4, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

226:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %229, label %227, !dbg !41

227:                                              ; preds = %226
  %228 = tail call float @llvm.nvvm.sqrt.rn.f(float %182) #4, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

229:                                              ; preds = %226
  %230 = tail call float @llvm.nvvm.sqrt.approx.f(float %182) #4, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

__nv_sqrtf.exit15:                                ; preds = %222, %224, %227, %229
  %.0.i13 = phi float [ %223, %222 ], [ %225, %224 ], [ %228, %227 ], [ %230, %229 ], !dbg !41
  %231 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !31
  %232 = bitcast i32 %231 to float, !dbg !31
  %233 = extractvalue { i32, i32, i32, i32 } %164, 3, !dbg !33
  %234 = bitcast i32 %233 to float, !dbg !33
  %235 = fsub float %232, %234, !dbg !42
  %236 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !31
  %237 = bitcast i32 %236 to float, !dbg !31
  %238 = extractvalue { i32, i32, i32, i32 } %164, 2, !dbg !33
  %239 = bitcast i32 %238 to float, !dbg !33
  %240 = fsub float %237, %239, !dbg !42
  %241 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !31
  %242 = bitcast i32 %241 to float, !dbg !31
  %243 = extractvalue { i32, i32, i32, i32 } %164, 1, !dbg !33
  %244 = bitcast i32 %243 to float, !dbg !33
  %245 = fsub float %242, %244, !dbg !42
  %246 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !31
  %247 = bitcast i32 %246 to float, !dbg !31
  %248 = extractvalue { i32, i32, i32, i32 } %164, 0, !dbg !33
  %249 = bitcast i32 %248 to float, !dbg !33
  %250 = fsub float %247, %249, !dbg !42
  %251 = extractvalue { i32, i32, i32, i32 } %160, 3, !dbg !31
  %252 = bitcast i32 %251 to float, !dbg !31
  %253 = fsub float %252, %234, !dbg !42
  %254 = extractvalue { i32, i32, i32, i32 } %160, 2, !dbg !31
  %255 = bitcast i32 %254 to float, !dbg !31
  %256 = fsub float %255, %239, !dbg !42
  %257 = extractvalue { i32, i32, i32, i32 } %160, 1, !dbg !31
  %258 = bitcast i32 %257 to float, !dbg !31
  %259 = fsub float %258, %244, !dbg !42
  %260 = extractvalue { i32, i32, i32, i32 } %160, 0, !dbg !31
  %261 = bitcast i32 %260 to float, !dbg !31
  %262 = fsub float %261, %249, !dbg !42
  %263 = extractvalue { i32, i32, i32, i32 } %178, 3, !dbg !39
  %264 = bitcast i32 %263 to float, !dbg !39
  %265 = extractvalue { i32, i32, i32, i32 } %178, 2, !dbg !39
  %266 = bitcast i32 %265 to float, !dbg !39
  %267 = extractvalue { i32, i32, i32, i32 } %178, 1, !dbg !39
  %268 = bitcast i32 %267 to float, !dbg !39
  %269 = extractvalue { i32, i32, i32, i32 } %178, 0, !dbg !39
  %270 = bitcast i32 %269 to float, !dbg !39
  %271 = extractvalue { i32, i32, i32, i32 } %176, 3, !dbg !37
  %272 = bitcast i32 %271 to float, !dbg !37
  %273 = extractvalue { i32, i32, i32, i32 } %176, 2, !dbg !37
  %274 = bitcast i32 %273 to float, !dbg !37
  %275 = extractvalue { i32, i32, i32, i32 } %176, 1, !dbg !37
  %276 = bitcast i32 %275 to float, !dbg !37
  %277 = extractvalue { i32, i32, i32, i32 } %176, 0, !dbg !37
  %278 = bitcast i32 %277 to float, !dbg !37
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !43
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !43
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !43
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !43
  %283 = fmul float %262, %279, !dbg !44
  %284 = fmul float %259, %280, !dbg !44
  %285 = fmul float %256, %281, !dbg !44
  %286 = fmul float %253, %282, !dbg !44
  %287 = fmul float %250, %279, !dbg !44
  %288 = fmul float %245, %280, !dbg !44
  %289 = fmul float %240, %281, !dbg !44
  %290 = fmul float %235, %282, !dbg !44
  %291 = fmul float %283, %278, !dbg !45
  %292 = fmul float %284, %276, !dbg !45
  %293 = fmul float %285, %274, !dbg !45
  %294 = fmul float %286, %272, !dbg !45
  %295 = fmul float %287, %278, !dbg !45
  %296 = fmul float %288, %276, !dbg !45
  %297 = fmul float %289, %274, !dbg !45
  %298 = fmul float %290, %272, !dbg !45
  %299 = fadd float %291, %270, !dbg !46
  %300 = fadd float %292, %268, !dbg !46
  %301 = fadd float %293, %266, !dbg !46
  %302 = fadd float %294, %264, !dbg !46
  %303 = fadd float %295, %270, !dbg !46
  %304 = fadd float %296, %268, !dbg !46
  %305 = fadd float %297, %266, !dbg !46
  %306 = fadd float %298, %264, !dbg !46
  %307 = fadd float %112, %299, !dbg !47
  %308 = fadd float %117, %300, !dbg !47
  %309 = fadd float %122, %301, !dbg !47
  %310 = fadd float %127, %302, !dbg !47
  %311 = fadd float %133, %303, !dbg !47
  %312 = fadd float %139, %304, !dbg !47
  %313 = fadd float %145, %305, !dbg !47
  %314 = fadd float %151, %306, !dbg !47
  %315 = getelementptr float, ptr addrspace(1) %6, i64 %156, !dbg !48
  %316 = getelementptr float, ptr addrspace(1) %6, i64 %158, !dbg !48
  %317 = bitcast float %307 to i32, !dbg !49
  %318 = bitcast float %308 to i32, !dbg !49
  %319 = bitcast float %309 to i32, !dbg !49
  %320 = bitcast float %310 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %317, i32 %318, i32 %319, i32 %320, ptr addrspace(1) %315, i1 %46) #4, !dbg !49
  %321 = bitcast float %311 to i32, !dbg !49
  %322 = bitcast float %312 to i32, !dbg !49
  %323 = bitcast float %313 to i32, !dbg !49
  %324 = bitcast float %314 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %321, i32 %322, i32 %323, i32 %324, ptr addrspace(1) %316, i1 %47) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csau6uhtgfznjxh7jglbzqlw7hzdjkq3kjpw6qsw5bknzvg4kp6j.py", directory: "inductor_cache/sa")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_18", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 48, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 61, scope: !7)
!27 = !DILocation(line: 32, column: 53, scope: !7)
!28 = !DILocation(line: 33, column: 38, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 33, column: 30, scope: !7)
!31 = !DILocation(line: 33, column: 43, scope: !7)
!32 = !DILocation(line: 34, column: 30, scope: !7)
!33 = !DILocation(line: 34, column: 35, scope: !7)
!34 = !DILocation(line: 35, column: 30, scope: !7)
!35 = !DILocation(line: 35, column: 35, scope: !7)
!36 = !DILocation(line: 36, column: 31, scope: !7)
!37 = !DILocation(line: 36, column: 36, scope: !7)
!38 = !DILocation(line: 37, column: 31, scope: !7)
!39 = !DILocation(line: 37, column: 36, scope: !7)
!40 = !DILocation(line: 40, column: 18, scope: !7)
!41 = !DILocation(line: 41, column: 26, scope: !7)
!42 = !DILocation(line: 38, column: 18, scope: !7)
!43 = !DILocation(line: 43, column: 18, scope: !7)
!44 = !DILocation(line: 46, column: 19, scope: !7)
!45 = !DILocation(line: 47, column: 20, scope: !7)
!46 = !DILocation(line: 48, column: 20, scope: !7)
!47 = !DILocation(line: 49, column: 19, scope: !7)
!48 = !DILocation(line: 50, column: 25, scope: !7)
!49 = !DILocation(line: 50, column: 45, scope: !7)
!50 = !DILocation(line: 50, column: 4, scope: !7)
