; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_div_maximum_mean_std_sub_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = icmp slt i32 %6, 12, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %9 = shl i32 %8, 9, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = shl i32 %10, 2, !dbg !14
  %12 = and i32 %11, 508, !dbg !14
  %.frozen = freeze i32 %6, !dbg !15
  %13 = sdiv i32 %.frozen, 3, !dbg !15
  %14 = shl i32 %6, 12, !dbg !16
  %15 = or disjoint i32 %14, %12, !dbg !17
  %16 = add i32 %15, %9, !dbg !18
  %17 = sext i32 %16 to i64, !dbg !19
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !19
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 %7) #4, !dbg !20
  %20 = sext i32 %13 to i64, !dbg !21
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !21
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %7) #4, !dbg !22
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %7) #4, !dbg !22
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %7) #4, !dbg !22
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %7) #4, !dbg !22
  %26 = bitcast i32 %25 to float, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !23
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %7) #4, !dbg !24
  %29 = bitcast i32 %28 to float, !dbg !24
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %7) #4, !dbg !24
  %31 = bitcast i32 %30 to float, !dbg !24
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %7) #4, !dbg !24
  %33 = bitcast i32 %32 to float, !dbg !24
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %7) #4, !dbg !24
  %35 = bitcast i32 %34 to float, !dbg !24
  %36 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %26, float 1.228800e+04) #4, !dbg !25
  %37 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %29, float 1.228700e+04) #4, !dbg !26
  %38 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %31, float 1.228700e+04) #4, !dbg !26
  %39 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %33, float 1.228700e+04) #4, !dbg !26
  %40 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %35, float 1.228700e+04) #4, !dbg !26
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %42 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !27
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !27
  %45 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !27
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not.i11 = icmp eq i32 %47, 0, !dbg !27
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !27
  %.not1.i14 = icmp eq i32 %48, 0, !dbg !27
  br i1 %.not.i11, label %54, label %49, !dbg !27

49:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %52, label %50, !dbg !27

50:                                               ; preds = %49
  %51 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %40) #4, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

52:                                               ; preds = %49
  %53 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %40) #4, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

54:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %57, label %55, !dbg !27

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.f(float %40) #4, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.f(float %40) #4, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

__nv_sqrtf.exit15:                                ; preds = %50, %52, %55, %57
  %.0.i13 = phi float [ %51, %50 ], [ %53, %52 ], [ %56, %55 ], [ %58, %57 ], !dbg !27
  %59 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !20
  %60 = bitcast i32 %59 to float, !dbg !20
  %61 = fsub float %60, %36, !dbg !28
  %62 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !20
  %63 = bitcast i32 %62 to float, !dbg !20
  %64 = fsub float %63, %36, !dbg !28
  %65 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !20
  %66 = bitcast i32 %65 to float, !dbg !20
  %67 = fsub float %66, %36, !dbg !28
  %68 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !20
  %69 = bitcast i32 %68 to float, !dbg !20
  %70 = fsub float %69, %36, !dbg !28
  %71 = mul i32 %13, 3, !dbg !29
  %.decomposed = sub i32 %.frozen, %71, !dbg !29
  %72 = and i32 %10, 127, !dbg !14
  %73 = or disjoint i32 %72, 384, !dbg !14
  %74 = or disjoint i32 %9, %73, !dbg !17
  %75 = or disjoint i32 %72, 256, !dbg !14
  %76 = or disjoint i32 %9, %75, !dbg !17
  %77 = or disjoint i32 %72, 128, !dbg !14
  %78 = or disjoint i32 %9, %77, !dbg !17
  %79 = or disjoint i32 %9, %72, !dbg !17
  %80 = fcmp ogt float %.0.i13, 0x3F8279A740000000, !dbg !30
  %81 = fcmp uno float %.0.i13, 0.000000e+00, !dbg !34
  %82 = or i1 %80, %81, !dbg !35
  %83 = select i1 %82, float %.0.i13, float 0x3F8279A740000000, !dbg !36
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %70, float %83) #4, !dbg !37
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %67, float %83) #4, !dbg !37
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float %83) #4, !dbg !37
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float %83) #4, !dbg !37
  %88 = mul i32 %79, 3, !dbg !38
  %89 = mul i32 %78, 3, !dbg !38
  %90 = mul i32 %76, 3, !dbg !38
  %91 = mul i32 %74, 3, !dbg !38
  %92 = mul i32 %13, 12288, !dbg !39
  %93 = add i32 %92, %.decomposed, !dbg !40
  %94 = add i32 %93, %88, !dbg !41
  %95 = add i32 %93, %89, !dbg !41
  %96 = add i32 %93, %90, !dbg !41
  %97 = add i32 %93, %91, !dbg !41
  %98 = sext i32 %94 to i64, !dbg !42
  %99 = getelementptr float, ptr addrspace(1) %3, i64 %98, !dbg !42
  %100 = sext i32 %95 to i64, !dbg !42
  %101 = getelementptr float, ptr addrspace(1) %3, i64 %100, !dbg !42
  %102 = sext i32 %96 to i64, !dbg !42
  %103 = getelementptr float, ptr addrspace(1) %3, i64 %102, !dbg !42
  %104 = sext i32 %97 to i64, !dbg !42
  %105 = getelementptr float, ptr addrspace(1) %3, i64 %104, !dbg !42
  %106 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !43
  %107 = bitcast float %84 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 true) #4, !dbg !43
  %108 = or disjoint i32 %12, 1, !dbg !43
  %109 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %108, !dbg !43
  %110 = bitcast float %85 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %110, i1 true) #4, !dbg !43
  %111 = or disjoint i32 %12, 2, !dbg !43
  %112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %111, !dbg !43
  %113 = bitcast float %86 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #4, !dbg !43
  %114 = or disjoint i32 %12, 3, !dbg !43
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %114, !dbg !43
  %116 = bitcast float %87 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %72, !dbg !43
  %118 = load i32, ptr addrspace(3) %117, align 4, !dbg !43
  %119 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %77, !dbg !43
  %120 = load i32, ptr addrspace(3) %119, align 4, !dbg !43
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %75, !dbg !43
  %122 = load i32, ptr addrspace(3) %121, align 4, !dbg !43
  %123 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %73, !dbg !43
  %124 = load i32, ptr addrspace(3) %123, align 4, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %118, ptr addrspace(1) %99, i1 %7) #4, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %120, ptr addrspace(1) %101, i1 %7) #4, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %122, ptr addrspace(1) %103, i1 %7) #4, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %124, ptr addrspace(1) %105, i1 %7) #4, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czburxbxpl4x2h3i7nb2t3dkbaio57k3476gzlfal5idesiyomos.py", directory: "inductor_cache/zb")
!4 = !{ptr @triton_poi_fused_div_maximum_mean_std_sub_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_div_maximum_mean_std_sub_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_div_maximum_mean_std_sub_10", linkageName: "triton_poi_fused_div_maximum_mean_std_sub_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 30, column: 19, scope: !7)
!16 = !DILocation(line: 32, column: 40, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 45, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 36, column: 18, scope: !7)
!26 = !DILocation(line: 39, column: 18, scope: !7)
!27 = !DILocation(line: 40, column: 26, scope: !7)
!28 = !DILocation(line: 37, column: 18, scope: !7)
!29 = !DILocation(line: 31, column: 19, scope: !7)
!30 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 42, column: 41, scope: !7)
!34 = !DILocation(line: 120, column: 21, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 120, column: 16, scope: !31, inlinedAt: !33)
!36 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !33)
!37 = !DILocation(line: 43, column: 19, scope: !7)
!38 = !DILocation(line: 44, column: 32, scope: !7)
!39 = !DILocation(line: 44, column: 43, scope: !7)
!40 = !DILocation(line: 44, column: 30, scope: !7)
!41 = !DILocation(line: 44, column: 37, scope: !7)
!42 = !DILocation(line: 44, column: 25, scope: !7)
!43 = !DILocation(line: 44, column: 55, scope: !7)
!44 = !DILocation(line: 44, column: 4, scope: !7)
