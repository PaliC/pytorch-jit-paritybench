; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_cat_convolution_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 512, !dbg !13
  %18 = srem i32 %16, 262144, !dbg !14
  %19 = srem i32 %17, 262144, !dbg !14
  %20 = sdiv i32 %16, 8388608, !dbg !15
  %21 = sdiv i32 %17, 8388608, !dbg !15
  %22 = sext i32 %16 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !16
  %24 = sext i32 %17 to i64, !dbg !16
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !16
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !17
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !17
  %28 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !18
  %29 = insertelement <2 x i32> %28, i32 %16, i64 1, !dbg !18
  %30 = sdiv <2 x i32> %29, splat (i32 262144), !dbg !18
  %31 = trunc nsw <2 x i32> %30 to <2 x i16>, !dbg !19
  %32 = srem <2 x i16> %31, splat (i16 32), !dbg !19
  %33 = sext <2 x i16> %32 to <2 x i32>, !dbg !19
  %34 = extractelement <2 x i16> %32, i64 1, !dbg !20
  %35 = sext i16 %34 to i64, !dbg !20
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !20
  %37 = extractelement <2 x i16> %32, i64 0, !dbg !20
  %38 = sext i16 %37 to i64, !dbg !20
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !20
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !21
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !21
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !21
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !21
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !21
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !21
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !21
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !21
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !22
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !22
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !23
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !23
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !23
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !23
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !23
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !23
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !23
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !24
  %59 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !24
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !25
  %61 = bitcast i32 %60 to float, !dbg !25
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !25
  %63 = bitcast i32 %62 to float, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !25
  %65 = bitcast i32 %64 to float, !dbg !25
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !25
  %67 = bitcast i32 %66 to float, !dbg !25
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !25
  %69 = bitcast i32 %68 to float, !dbg !25
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !25
  %71 = bitcast i32 %70 to float, !dbg !25
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !25
  %73 = bitcast i32 %72 to float, !dbg !25
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !25
  %75 = bitcast i32 %74 to float, !dbg !25
  %76 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !26
  %77 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !26
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !27
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !27
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !27
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !27
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !27
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !27
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !27
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !27
  %86 = getelementptr float, ptr addrspace(1) %6, i64 %35, !dbg !28
  %87 = getelementptr float, ptr addrspace(1) %6, i64 %38, !dbg !28
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !29
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !29
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !29
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !29
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !29
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !29
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !29
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !29
  %96 = add nsw <2 x i32> %33, splat (i32 -8), !dbg !30
  %97 = icmp ult <2 x i32> %96, splat (i32 16), !dbg !30
  %98 = extractelement <2 x i32> %33, i64 1, !dbg !31
  %99 = shl nsw i32 %98, 18, !dbg !31
  %100 = extractelement <2 x i32> %33, i64 0, !dbg !31
  %101 = shl nsw i32 %100, 18, !dbg !31
  %102 = shl nsw i32 %20, 22, !dbg !32
  %103 = shl nsw i32 %21, 22, !dbg !32
  %104 = add nsw i32 %18, -2097152, !dbg !31
  %105 = add nsw i32 %104, %102, !dbg !33
  %106 = add nsw i32 %105, %99, !dbg !34
  %107 = add nsw i32 %19, -2097152, !dbg !31
  %108 = add nsw i32 %107, %103, !dbg !33
  %109 = add nsw i32 %108, %101, !dbg !34
  %110 = sext i32 %106 to i64, !dbg !35
  %111 = getelementptr float, ptr addrspace(1) %2, i64 %110, !dbg !35
  %112 = sext i32 %109 to i64, !dbg !35
  %113 = getelementptr float, ptr addrspace(1) %2, i64 %112, !dbg !35
  %114 = extractelement <2 x i1> %97, i64 1, !dbg !36
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %111, i1 %114, i32 0, i1 %114, i32 0, i1 %114, i32 0, i1 %114, i32 0, i1 %114) #3, !dbg !36
  %116 = extractelement <2 x i1> %97, i64 0, !dbg !36
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %113, i1 %116, i32 0, i1 %116, i32 0, i1 %116, i32 0, i1 %116, i32 0, i1 %116) #3, !dbg !36
  %118 = fadd float %61, 0x3EE4F8B580000000, !dbg !37
  %119 = fadd float %63, 0x3EE4F8B580000000, !dbg !37
  %120 = fadd float %65, 0x3EE4F8B580000000, !dbg !37
  %121 = fadd float %67, 0x3EE4F8B580000000, !dbg !37
  %122 = fadd float %69, 0x3EE4F8B580000000, !dbg !37
  %123 = fadd float %71, 0x3EE4F8B580000000, !dbg !37
  %124 = fadd float %73, 0x3EE4F8B580000000, !dbg !37
  %125 = fadd float %75, 0x3EE4F8B580000000, !dbg !37
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i = icmp eq i32 %126, 0, !dbg !38
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i = icmp eq i32 %127, 0, !dbg !38
  br i1 %.not.i, label %133, label %128, !dbg !38

128:                                              ; preds = %10
  br i1 %.not1.i, label %131, label %129, !dbg !38

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %118) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %118) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

133:                                              ; preds = %10
  br i1 %.not1.i, label %136, label %134, !dbg !38

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.f(float %118) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.f(float %118) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %129, %131, %134, %136
  %.0.i = phi float [ %130, %129 ], [ %132, %131 ], [ %135, %134 ], [ %137, %136 ], !dbg !38
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i1 = icmp eq i32 %138, 0, !dbg !38
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i4 = icmp eq i32 %139, 0, !dbg !38
  br i1 %.not.i1, label %145, label %140, !dbg !38

140:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %143, label %141, !dbg !38

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %119) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %119) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

145:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %148, label %146, !dbg !38

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %119) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %119) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

__nv_sqrtf.exit5:                                 ; preds = %141, %143, %146, %148
  %.0.i3 = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !38
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i6 = icmp eq i32 %150, 0, !dbg !38
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i9 = icmp eq i32 %151, 0, !dbg !38
  br i1 %.not.i6, label %157, label %152, !dbg !38

152:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %155, label %153, !dbg !38

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #3, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #3, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

157:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %160, label %158, !dbg !38

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #3, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #3, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

__nv_sqrtf.exit10:                                ; preds = %153, %155, %158, %160
  %.0.i8 = phi float [ %154, %153 ], [ %156, %155 ], [ %159, %158 ], [ %161, %160 ], !dbg !38
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i11 = icmp eq i32 %162, 0, !dbg !38
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i14 = icmp eq i32 %163, 0, !dbg !38
  br i1 %.not.i11, label %169, label %164, !dbg !38

164:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %167, label %165, !dbg !38

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %121) #3, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %121) #3, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

169:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %172, label %170, !dbg !38

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.f(float %121) #3, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.f(float %121) #3, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

__nv_sqrtf.exit15:                                ; preds = %165, %167, %170, %172
  %.0.i13 = phi float [ %166, %165 ], [ %168, %167 ], [ %171, %170 ], [ %173, %172 ], !dbg !38
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i16 = icmp eq i32 %174, 0, !dbg !38
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i19 = icmp eq i32 %175, 0, !dbg !38
  br i1 %.not.i16, label %181, label %176, !dbg !38

176:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %179, label %177, !dbg !38

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #3, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #3, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

181:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %184, label %182, !dbg !38

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #3, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #3, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

__nv_sqrtf.exit20:                                ; preds = %177, %179, %182, %184
  %.0.i18 = phi float [ %178, %177 ], [ %180, %179 ], [ %183, %182 ], [ %185, %184 ], !dbg !38
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i21 = icmp eq i32 %186, 0, !dbg !38
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i24 = icmp eq i32 %187, 0, !dbg !38
  br i1 %.not.i21, label %193, label %188, !dbg !38

188:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %191, label %189, !dbg !38

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #3, !dbg !38
  br label %__nv_sqrtf.exit25, !dbg !38

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #3, !dbg !38
  br label %__nv_sqrtf.exit25, !dbg !38

193:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %196, label %194, !dbg !38

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #3, !dbg !38
  br label %__nv_sqrtf.exit25, !dbg !38

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #3, !dbg !38
  br label %__nv_sqrtf.exit25, !dbg !38

__nv_sqrtf.exit25:                                ; preds = %189, %191, %194, %196
  %.0.i23 = phi float [ %190, %189 ], [ %192, %191 ], [ %195, %194 ], [ %197, %196 ], !dbg !38
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i26 = icmp eq i32 %198, 0, !dbg !38
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i29 = icmp eq i32 %199, 0, !dbg !38
  br i1 %.not.i26, label %205, label %200, !dbg !38

200:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %203, label %201, !dbg !38

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #3, !dbg !38
  br label %__nv_sqrtf.exit30, !dbg !38

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #3, !dbg !38
  br label %__nv_sqrtf.exit30, !dbg !38

205:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %208, label %206, !dbg !38

206:                                              ; preds = %205
  %207 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #3, !dbg !38
  br label %__nv_sqrtf.exit30, !dbg !38

208:                                              ; preds = %205
  %209 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #3, !dbg !38
  br label %__nv_sqrtf.exit30, !dbg !38

__nv_sqrtf.exit30:                                ; preds = %201, %203, %206, %208
  %.0.i28 = phi float [ %202, %201 ], [ %204, %203 ], [ %207, %206 ], [ %209, %208 ], !dbg !38
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i31 = icmp eq i32 %210, 0, !dbg !38
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i34 = icmp eq i32 %211, 0, !dbg !38
  br i1 %.not.i31, label %217, label %212, !dbg !38

212:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %215, label %213, !dbg !38

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #3, !dbg !38
  br label %__nv_sqrtf.exit35, !dbg !38

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #3, !dbg !38
  br label %__nv_sqrtf.exit35, !dbg !38

217:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %220, label %218, !dbg !38

218:                                              ; preds = %217
  %219 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #3, !dbg !38
  br label %__nv_sqrtf.exit35, !dbg !38

220:                                              ; preds = %217
  %221 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #3, !dbg !38
  br label %__nv_sqrtf.exit35, !dbg !38

__nv_sqrtf.exit35:                                ; preds = %213, %215, %218, %220
  %.0.i33 = phi float [ %214, %213 ], [ %216, %215 ], [ %219, %218 ], [ %221, %220 ], !dbg !38
  %222 = shufflevector <2 x i1> %97, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !30
  %223 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !17
  %224 = insertelement <8 x i32> poison, i32 %47, i64 0, !dbg !21
  %225 = insertelement <8 x i32> %224, i32 %46, i64 1, !dbg !21
  %226 = insertelement <8 x i32> %225, i32 %45, i64 2, !dbg !21
  %227 = insertelement <8 x i32> %226, i32 %44, i64 3, !dbg !21
  %228 = insertelement <8 x i32> %227, i32 %43, i64 4, !dbg !21
  %229 = insertelement <8 x i32> %228, i32 %42, i64 5, !dbg !21
  %230 = insertelement <8 x i32> %229, i32 %41, i64 6, !dbg !21
  %231 = insertelement <8 x i32> %230, i32 %40, i64 7, !dbg !21
  %232 = bitcast <8 x i32> %231 to <8 x float>, !dbg !21
  %233 = icmp slt <2 x i16> %32, splat (i16 8), !dbg !39
  %234 = shufflevector <2 x i1> %233, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !39
  %235 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !36
  %236 = insertelement <8 x i32> poison, i32 %57, i64 0, !dbg !23
  %237 = insertelement <8 x i32> %236, i32 %56, i64 1, !dbg !23
  %238 = insertelement <8 x i32> %237, i32 %55, i64 2, !dbg !23
  %239 = insertelement <8 x i32> %238, i32 %54, i64 3, !dbg !23
  %240 = insertelement <8 x i32> %239, i32 %53, i64 4, !dbg !23
  %241 = insertelement <8 x i32> %240, i32 %52, i64 5, !dbg !23
  %242 = insertelement <8 x i32> %241, i32 %51, i64 6, !dbg !23
  %243 = insertelement <8 x i32> %242, i32 %50, i64 7, !dbg !23
  %244 = bitcast <8 x i32> %243 to <8 x float>, !dbg !23
  %245 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !17
  %246 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !36
  %247 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !17
  %248 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !36
  %249 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !17
  %250 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !36
  %251 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !17
  %252 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !36
  %253 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !17
  %254 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !36
  %255 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !17
  %256 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !36
  %257 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !17
  %258 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !36
  %259 = insertelement <8 x i32> poison, i32 %95, i64 0, !dbg !29
  %260 = insertelement <8 x i32> %259, i32 %94, i64 1, !dbg !29
  %261 = insertelement <8 x i32> %260, i32 %93, i64 2, !dbg !29
  %262 = insertelement <8 x i32> %261, i32 %92, i64 3, !dbg !29
  %263 = insertelement <8 x i32> %262, i32 %91, i64 4, !dbg !29
  %264 = insertelement <8 x i32> %263, i32 %90, i64 5, !dbg !29
  %265 = insertelement <8 x i32> %264, i32 %89, i64 6, !dbg !29
  %266 = insertelement <8 x i32> %265, i32 %88, i64 7, !dbg !29
  %267 = bitcast <8 x i32> %266 to <8 x float>, !dbg !29
  %268 = insertelement <8 x i32> poison, i32 %85, i64 0, !dbg !27
  %269 = insertelement <8 x i32> %268, i32 %84, i64 1, !dbg !27
  %270 = insertelement <8 x i32> %269, i32 %83, i64 2, !dbg !27
  %271 = insertelement <8 x i32> %270, i32 %82, i64 3, !dbg !27
  %272 = insertelement <8 x i32> %271, i32 %81, i64 4, !dbg !27
  %273 = insertelement <8 x i32> %272, i32 %80, i64 5, !dbg !27
  %274 = insertelement <8 x i32> %273, i32 %79, i64 6, !dbg !27
  %275 = insertelement <8 x i32> %274, i32 %78, i64 7, !dbg !27
  %276 = bitcast <8 x i32> %275 to <8 x float>, !dbg !27
  %277 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !40
  %278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !40
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !40
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !40
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !40
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !40
  %283 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !40
  %284 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !40
  %285 = insertelement <8 x i32> poison, i32 %223, i64 0, !dbg !17
  %286 = insertelement <8 x i32> %285, i32 %245, i64 1, !dbg !17
  %287 = insertelement <8 x i32> %286, i32 %247, i64 2, !dbg !17
  %288 = insertelement <8 x i32> %287, i32 %249, i64 3, !dbg !17
  %289 = insertelement <8 x i32> %288, i32 %251, i64 4, !dbg !17
  %290 = insertelement <8 x i32> %289, i32 %253, i64 5, !dbg !17
  %291 = insertelement <8 x i32> %290, i32 %255, i64 6, !dbg !17
  %292 = insertelement <8 x i32> %291, i32 %257, i64 7, !dbg !17
  %293 = bitcast <8 x i32> %292 to <8 x float>, !dbg !17
  %294 = fadd <8 x float> %293, %232, !dbg !41
  %295 = insertelement <8 x i32> poison, i32 %235, i64 0, !dbg !36
  %296 = insertelement <8 x i32> %295, i32 %246, i64 1, !dbg !36
  %297 = insertelement <8 x i32> %296, i32 %248, i64 2, !dbg !36
  %298 = insertelement <8 x i32> %297, i32 %250, i64 3, !dbg !36
  %299 = insertelement <8 x i32> %298, i32 %252, i64 4, !dbg !36
  %300 = insertelement <8 x i32> %299, i32 %254, i64 5, !dbg !36
  %301 = insertelement <8 x i32> %300, i32 %256, i64 6, !dbg !36
  %302 = insertelement <8 x i32> %301, i32 %258, i64 7, !dbg !36
  %303 = bitcast <8 x i32> %302 to <8 x float>, !dbg !36
  %304 = select <8 x i1> %222, <8 x float> %303, <8 x float> zeroinitializer, !dbg !42
  %305 = select <8 x i1> %234, <8 x float> zeroinitializer, <8 x float> %304, !dbg !43
  %306 = fadd <8 x float> %294, %305, !dbg !44
  %307 = fsub <8 x float> %306, %244, !dbg !45
  %308 = insertelement <8 x float> poison, float %284, i64 0, !dbg !46
  %309 = insertelement <8 x float> %308, float %283, i64 1, !dbg !46
  %310 = insertelement <8 x float> %309, float %282, i64 2, !dbg !46
  %311 = insertelement <8 x float> %310, float %281, i64 3, !dbg !46
  %312 = insertelement <8 x float> %311, float %280, i64 4, !dbg !46
  %313 = insertelement <8 x float> %312, float %279, i64 5, !dbg !46
  %314 = insertelement <8 x float> %313, float %278, i64 6, !dbg !46
  %315 = insertelement <8 x float> %314, float %277, i64 7, !dbg !46
  %316 = fmul <8 x float> %307, %315, !dbg !46
  %317 = fmul <8 x float> %316, %276, !dbg !47
  %318 = fadd <8 x float> %317, %267, !dbg !48
  %319 = fcmp olt <8 x float> %318, zeroinitializer, !dbg !49
  %320 = extractelement <8 x i1> %319, i64 7, !dbg !53
  %321 = extractelement <8 x i1> %319, i64 6, !dbg !53
  %322 = extractelement <8 x i1> %319, i64 5, !dbg !53
  %323 = extractelement <8 x i1> %319, i64 4, !dbg !53
  %324 = extractelement <8 x i1> %319, i64 3, !dbg !53
  %325 = extractelement <8 x i1> %319, i64 2, !dbg !53
  %326 = extractelement <8 x i1> %319, i64 1, !dbg !53
  %327 = extractelement <8 x i1> %319, i64 0, !dbg !53
  %bc = bitcast <8 x float> %294 to <8 x i32>, !dbg !54
  %328 = extractelement <8 x i32> %bc, i64 7, !dbg !54
  %bc38 = bitcast <8 x float> %294 to <8 x i32>, !dbg !54
  %329 = extractelement <8 x i32> %bc38, i64 6, !dbg !54
  %bc39 = bitcast <8 x float> %294 to <8 x i32>, !dbg !54
  %330 = extractelement <8 x i32> %bc39, i64 5, !dbg !54
  %bc40 = bitcast <8 x float> %294 to <8 x i32>, !dbg !54
  %331 = extractelement <8 x i32> %bc40, i64 4, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %328, i32 %329, i32 %330, i32 %331, ptr addrspace(1) %23, i1 true) #3, !dbg !54
  %bc41 = bitcast <8 x float> %294 to <8 x i32>, !dbg !54
  %332 = extractelement <8 x i32> %bc41, i64 3, !dbg !54
  %bc42 = bitcast <8 x float> %294 to <8 x i32>, !dbg !54
  %333 = extractelement <8 x i32> %bc42, i64 2, !dbg !54
  %bc43 = bitcast <8 x float> %294 to <8 x i32>, !dbg !54
  %334 = extractelement <8 x i32> %bc43, i64 1, !dbg !54
  %bc44 = bitcast <8 x float> %294 to <8 x i32>, !dbg !54
  %335 = extractelement <8 x i32> %bc44, i64 0, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %332, i32 %333, i32 %334, i32 %335, ptr addrspace(1) %25, i1 true) #3, !dbg !54
  %336 = getelementptr float, ptr addrspace(1) %7, i64 %22, !dbg !55
  %337 = getelementptr float, ptr addrspace(1) %7, i64 %24, !dbg !55
  %bc45 = bitcast <8 x float> %305 to <8 x i32>, !dbg !56
  %338 = extractelement <8 x i32> %bc45, i64 7, !dbg !56
  %bc46 = bitcast <8 x float> %305 to <8 x i32>, !dbg !56
  %339 = extractelement <8 x i32> %bc46, i64 6, !dbg !56
  %bc47 = bitcast <8 x float> %305 to <8 x i32>, !dbg !56
  %340 = extractelement <8 x i32> %bc47, i64 5, !dbg !56
  %bc48 = bitcast <8 x float> %305 to <8 x i32>, !dbg !56
  %341 = extractelement <8 x i32> %bc48, i64 4, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %338, i32 %339, i32 %340, i32 %341, ptr addrspace(1) %336, i1 true) #3, !dbg !56
  %bc49 = bitcast <8 x float> %305 to <8 x i32>, !dbg !56
  %342 = extractelement <8 x i32> %bc49, i64 3, !dbg !56
  %bc50 = bitcast <8 x float> %305 to <8 x i32>, !dbg !56
  %343 = extractelement <8 x i32> %bc50, i64 2, !dbg !56
  %bc51 = bitcast <8 x float> %305 to <8 x i32>, !dbg !56
  %344 = extractelement <8 x i32> %bc51, i64 1, !dbg !56
  %bc52 = bitcast <8 x float> %305 to <8 x i32>, !dbg !56
  %345 = extractelement <8 x i32> %bc52, i64 0, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %342, i32 %343, i32 %344, i32 %345, ptr addrspace(1) %337, i1 true) #3, !dbg !56
  %346 = getelementptr float, ptr addrspace(1) %8, i64 %22, !dbg !57
  %347 = getelementptr float, ptr addrspace(1) %8, i64 %24, !dbg !57
  %bc53 = bitcast <8 x float> %318 to <8 x i32>, !dbg !58
  %348 = extractelement <8 x i32> %bc53, i64 7, !dbg !58
  %349 = select i1 %320, i32 0, i32 %348, !dbg !53
  %bc54 = bitcast <8 x float> %318 to <8 x i32>, !dbg !58
  %350 = extractelement <8 x i32> %bc54, i64 6, !dbg !58
  %351 = select i1 %321, i32 0, i32 %350, !dbg !53
  %bc55 = bitcast <8 x float> %318 to <8 x i32>, !dbg !58
  %352 = extractelement <8 x i32> %bc55, i64 5, !dbg !58
  %353 = select i1 %322, i32 0, i32 %352, !dbg !53
  %bc56 = bitcast <8 x float> %318 to <8 x i32>, !dbg !58
  %354 = extractelement <8 x i32> %bc56, i64 4, !dbg !58
  %355 = select i1 %323, i32 0, i32 %354, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %349, i32 %351, i32 %353, i32 %355, ptr addrspace(1) %346, i1 true) #3, !dbg !58
  %bc57 = bitcast <8 x float> %318 to <8 x i32>, !dbg !58
  %356 = extractelement <8 x i32> %bc57, i64 3, !dbg !58
  %357 = select i1 %324, i32 0, i32 %356, !dbg !53
  %bc58 = bitcast <8 x float> %318 to <8 x i32>, !dbg !58
  %358 = extractelement <8 x i32> %bc58, i64 2, !dbg !58
  %359 = select i1 %325, i32 0, i32 %358, !dbg !53
  %bc59 = bitcast <8 x float> %318 to <8 x i32>, !dbg !58
  %360 = extractelement <8 x i32> %bc59, i64 1, !dbg !58
  %361 = select i1 %326, i32 0, i32 %360, !dbg !53
  %bc60 = bitcast <8 x float> %318 to <8 x i32>, !dbg !58
  %362 = extractelement <8 x i32> %bc60, i64 0, !dbg !58
  %363 = select i1 %327, i32 0, i32 %362, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %357, i32 %359, i32 %361, i32 %363, ptr addrspace(1) %347, i1 true) #3, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ce4tkmmks4az3eyc4wng36asltlp5tynhyor3awq4uxuhf256jeo.py", directory: "inductor_cache/e4")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_cat_convolution_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_cat_convolution_relu_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_cat_convolution_relu_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_cat_convolution_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 28, column: 34, scope: !7)
!17 = !DILocation(line: 28, column: 39, scope: !7)
!18 = !DILocation(line: 25, column: 21, scope: !7)
!19 = !DILocation(line: 25, column: 31, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 46, column: 20, scope: !7)
!31 = !DILocation(line: 47, column: 44, scope: !7)
!32 = !DILocation(line: 47, column: 65, scope: !7)
!33 = !DILocation(line: 47, column: 36, scope: !7)
!34 = !DILocation(line: 47, column: 57, scope: !7)
!35 = !DILocation(line: 47, column: 31, scope: !7)
!36 = !DILocation(line: 47, column: 70, scope: !7)
!37 = !DILocation(line: 59, column: 20, scope: !7)
!38 = !DILocation(line: 60, column: 27, scope: !7)
!39 = !DILocation(line: 39, column: 18, scope: !7)
!40 = !DILocation(line: 62, column: 20, scope: !7)
!41 = !DILocation(line: 34, column: 18, scope: !7)
!42 = !DILocation(line: 54, column: 35, scope: !7)
!43 = !DILocation(line: 55, column: 34, scope: !7)
!44 = !DILocation(line: 56, column: 19, scope: !7)
!45 = !DILocation(line: 57, column: 20, scope: !7)
!46 = !DILocation(line: 65, column: 20, scope: !7)
!47 = !DILocation(line: 66, column: 20, scope: !7)
!48 = !DILocation(line: 67, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 69, column: 42, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 70, column: 39, scope: !7)
!55 = !DILocation(line: 71, column: 25, scope: !7)
!56 = !DILocation(line: 71, column: 37, scope: !7)
!57 = !DILocation(line: 72, column: 25, scope: !7)
!58 = !DILocation(line: 72, column: 37, scope: !7)
!59 = !DILocation(line: 72, column: 4, scope: !7)
