; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_5(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 4, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = and i32 %6, 16, !dbg !12
  %8 = and i32 %6, 15, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 16, !dbg !14
  %.frozen = freeze i32 %9, !dbg !15
  %11 = sdiv i32 %.frozen, 4, !dbg !15
  %12 = mul i32 %11, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %12, !dbg !16
  %13 = shl i32 %11, 6, !dbg !17
  %14 = add i32 %13, %.decomposed, !dbg !18
  %15 = sext i32 %14 to i64, !dbg !19
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !19
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %10) #1, !dbg !20
  %18 = bitcast i32 %17 to float, !dbg !20
  %19 = add i32 %14, 4, !dbg !21
  %20 = sext i32 %19 to i64, !dbg !22
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !22
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %10) #1, !dbg !23
  %23 = bitcast i32 %22 to float, !dbg !23
  %24 = add i32 %14, 8, !dbg !24
  %25 = sext i32 %24 to i64, !dbg !25
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !25
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %10) #1, !dbg !26
  %28 = bitcast i32 %27 to float, !dbg !26
  %29 = add i32 %14, 16, !dbg !27
  %30 = sext i32 %29 to i64, !dbg !28
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !28
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %10) #1, !dbg !29
  %33 = bitcast i32 %32 to float, !dbg !29
  %34 = add i32 %14, 20, !dbg !30
  %35 = sext i32 %34 to i64, !dbg !31
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !31
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %10) #1, !dbg !32
  %38 = bitcast i32 %37 to float, !dbg !32
  %39 = add i32 %14, 24, !dbg !33
  %40 = sext i32 %39 to i64, !dbg !34
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !34
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %10) #1, !dbg !35
  %43 = bitcast i32 %42 to float, !dbg !35
  %44 = add i32 %14, 32, !dbg !36
  %45 = sext i32 %44 to i64, !dbg !37
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !37
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %10) #1, !dbg !38
  %48 = bitcast i32 %47 to float, !dbg !38
  %49 = add i32 %14, 36, !dbg !39
  %50 = sext i32 %49 to i64, !dbg !40
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !40
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %10) #1, !dbg !41
  %53 = bitcast i32 %52 to float, !dbg !41
  %54 = add i32 %14, 40, !dbg !42
  %55 = sext i32 %54 to i64, !dbg !43
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !43
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %10) #1, !dbg !44
  %58 = bitcast i32 %57 to float, !dbg !44
  %59 = fcmp ogt float %23, %18, !dbg !45
  %60 = fcmp uno float %23, 0.000000e+00, !dbg !49
  %61 = or i1 %59, %60, !dbg !50
  %62 = select i1 %61, float %23, float %18, !dbg !51
  %63 = fcmp olt float %62, %28, !dbg !52
  %64 = fcmp uno float %28, 0.000000e+00, !dbg !54
  %65 = or i1 %64, %63, !dbg !55
  %66 = select i1 %65, float %28, float %62, !dbg !56
  %67 = fcmp olt float %66, %33, !dbg !57
  %68 = fcmp uno float %33, 0.000000e+00, !dbg !59
  %69 = or i1 %68, %67, !dbg !60
  %70 = select i1 %69, float %33, float %66, !dbg !61
  %71 = fcmp olt float %70, %38, !dbg !62
  %72 = fcmp uno float %38, 0.000000e+00, !dbg !64
  %73 = or i1 %72, %71, !dbg !65
  %74 = select i1 %73, float %38, float %70, !dbg !66
  %75 = fcmp olt float %74, %43, !dbg !67
  %76 = fcmp uno float %43, 0.000000e+00, !dbg !69
  %77 = or i1 %76, %75, !dbg !70
  %78 = select i1 %77, float %43, float %74, !dbg !71
  %79 = fcmp olt float %78, %48, !dbg !72
  %80 = fcmp uno float %48, 0.000000e+00, !dbg !74
  %81 = or i1 %80, %79, !dbg !75
  %82 = select i1 %81, float %48, float %78, !dbg !76
  %83 = fcmp olt float %82, %53, !dbg !77
  %84 = fcmp uno float %53, 0.000000e+00, !dbg !79
  %85 = or i1 %84, %83, !dbg !80
  %86 = select i1 %85, float %53, float %82, !dbg !81
  %87 = fcmp olt float %86, %58, !dbg !82
  %88 = fcmp uno float %58, 0.000000e+00, !dbg !84
  %89 = or i1 %88, %87, !dbg !85
  %90 = mul i32 %11, 516, !dbg !86
  %91 = add i32 %90, %.decomposed, !dbg !87
  %92 = sext i32 %91 to i64, !dbg !88
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !88
  %94 = icmp eq i32 %7, 0, !dbg !89
  %95 = bitcast float %86 to i32, !dbg !89
  %96 = select i1 %89, i32 %57, i32 %95, !dbg !90
  %97 = and i1 %94, %10, !dbg !89
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %96, ptr addrspace(1) %93, i1 %97) #1, !dbg !89
  ret void, !dbg !91
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6ulim62nofkebncjlqqdzsbi3uhz3qkwehir5xznk6pu5co5jdr.py", directory: "inductor_cache/6u")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_5, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_5", linkageName: "triton_poi_fused_max_pool2d_with_indices_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 38, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 26, column: 30, scope: !7)
!20 = !DILocation(line: 26, column: 43, scope: !7)
!21 = !DILocation(line: 27, column: 39, scope: !7)
!22 = !DILocation(line: 27, column: 30, scope: !7)
!23 = !DILocation(line: 27, column: 47, scope: !7)
!24 = !DILocation(line: 28, column: 39, scope: !7)
!25 = !DILocation(line: 28, column: 30, scope: !7)
!26 = !DILocation(line: 28, column: 47, scope: !7)
!27 = !DILocation(line: 29, column: 40, scope: !7)
!28 = !DILocation(line: 29, column: 30, scope: !7)
!29 = !DILocation(line: 29, column: 48, scope: !7)
!30 = !DILocation(line: 30, column: 40, scope: !7)
!31 = !DILocation(line: 30, column: 30, scope: !7)
!32 = !DILocation(line: 30, column: 48, scope: !7)
!33 = !DILocation(line: 31, column: 40, scope: !7)
!34 = !DILocation(line: 31, column: 30, scope: !7)
!35 = !DILocation(line: 31, column: 48, scope: !7)
!36 = !DILocation(line: 32, column: 41, scope: !7)
!37 = !DILocation(line: 32, column: 31, scope: !7)
!38 = !DILocation(line: 32, column: 49, scope: !7)
!39 = !DILocation(line: 33, column: 41, scope: !7)
!40 = !DILocation(line: 33, column: 31, scope: !7)
!41 = !DILocation(line: 33, column: 49, scope: !7)
!42 = !DILocation(line: 34, column: 41, scope: !7)
!43 = !DILocation(line: 34, column: 31, scope: !7)
!44 = !DILocation(line: 34, column: 49, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 35, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !48)
!51 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!52 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !53)
!53 = !DILocation(line: 36, column: 40, scope: !7)
!54 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !53)
!55 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !53)
!56 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !53)
!57 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !58)
!58 = !DILocation(line: 37, column: 40, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !58)
!60 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !58)
!61 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !58)
!62 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !63)
!63 = !DILocation(line: 38, column: 40, scope: !7)
!64 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !63)
!65 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !63)
!66 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !63)
!67 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !68)
!68 = !DILocation(line: 39, column: 41, scope: !7)
!69 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !68)
!70 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !68)
!71 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !68)
!72 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !73)
!73 = !DILocation(line: 40, column: 42, scope: !7)
!74 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !73)
!75 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !73)
!76 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !73)
!77 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !78)
!78 = !DILocation(line: 41, column: 42, scope: !7)
!79 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !78)
!80 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !78)
!81 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !78)
!82 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !83)
!83 = !DILocation(line: 42, column: 42, scope: !7)
!84 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !83)
!85 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !83)
!86 = !DILocation(line: 43, column: 34, scope: !7)
!87 = !DILocation(line: 43, column: 30, scope: !7)
!88 = !DILocation(line: 43, column: 25, scope: !7)
!89 = !DILocation(line: 43, column: 46, scope: !7)
!90 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !83)
!91 = !DILocation(line: 43, column: 4, scope: !7)
