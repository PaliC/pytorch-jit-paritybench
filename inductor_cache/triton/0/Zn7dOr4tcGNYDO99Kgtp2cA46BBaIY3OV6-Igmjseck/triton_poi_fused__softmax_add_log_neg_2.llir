; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused__softmax_add_log_neg_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 254, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 256, !dbg !14
  %14 = srem i32 %12, 16, !dbg !15
  %15 = sdiv i32 %12, 64, !dbg !16
  %16 = sext i32 %12 to i64, !dbg !17
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !17
  %18 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %17, i1 %13) #2, !dbg !18
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !19
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 %13) #2, !dbg !20
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !20
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !20
  %23 = bitcast i32 %21 to float, !dbg !20
  %24 = bitcast i32 %22 to float, !dbg !20
  %25 = shl nsw i32 %15, 4, !dbg !21
  %26 = add nsw i32 %25, %14, !dbg !22
  %27 = sext i32 %26 to i64, !dbg !23
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !23
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 %13) #2, !dbg !24
  %30 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !25
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %13) #2, !dbg !26
  %32 = shl nsw i32 %15, 6, !dbg !27
  %33 = add i32 %32, %14, !dbg !28
  %34 = sext i32 %33 to i64, !dbg !29
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !29
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %13) #2, !dbg !30
  %37 = add i32 %33, 16, !dbg !31
  %38 = sext i32 %37 to i64, !dbg !32
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !32
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 %13) #2, !dbg !33
  %41 = add i32 %33, 32, !dbg !34
  %42 = sext i32 %41 to i64, !dbg !35
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !35
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %13) #2, !dbg !36
  %45 = add i32 %33, 48, !dbg !37
  %46 = sext i32 %45 to i64, !dbg !38
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !38
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 %13) #2, !dbg !39
  %49 = fcmp olt float %23, 0x3810000000000000, !dbg !40
  %50 = fmul float %23, 0x4160000000000000, !dbg !40
  %.02.i = select i1 %49, float %50, float %23, !dbg !40
  %i.i.0.i = select i1 %49, float -2.300000e+01, float 0.000000e+00, !dbg !40
  %51 = bitcast float %.02.i to i32, !dbg !40
  %52 = add i32 %51, -1059760811, !dbg !40
  %53 = and i32 %52, -8388608, !dbg !40
  %54 = sub i32 %51, %53, !dbg !40
  %55 = bitcast i32 %54 to float, !dbg !40
  %56 = sitofp i32 %53 to float, !dbg !40
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not.i = icmp eq i32 %57, 0, !dbg !40
  %58 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %56, float 0x3E80000000000000, float %i.i.0.i) #2, !dbg !40
  %59 = tail call float @llvm.nvvm.fma.rn.f(float %56, float 0x3E80000000000000, float %i.i.0.i) #2, !dbg !40
  %.08.i = select i1 %.not.i, float %59, float %58, !dbg !40
  %60 = fadd float %55, -1.000000e+00, !dbg !40
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not1.i = icmp eq i32 %61, 0, !dbg !40
  %62 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %60, float 0x3FC2073EC0000000) #2, !dbg !40
  %63 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %60, float 0x3FC2073EC0000000) #2, !dbg !40
  %.010.i = select i1 %.not1.i, float %63, float %62, !dbg !40
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not2.i = icmp eq i32 %64, 0, !dbg !40
  %65 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %60, float 0xBFBF19B980000000) #2, !dbg !40
  %66 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %60, float 0xBFBF19B980000000) #2, !dbg !40
  %.011.i = select i1 %.not2.i, float %66, float %65, !dbg !40
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not3.i = icmp eq i32 %67, 0, !dbg !40
  %68 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %60, float 0x3FC1E52AA0000000) #2, !dbg !40
  %69 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %60, float 0x3FC1E52AA0000000) #2, !dbg !40
  %.012.i = select i1 %.not3.i, float %69, float %68, !dbg !40
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not4.i = icmp eq i32 %70, 0, !dbg !40
  %71 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %60, float 0xBFC55B1720000000) #2, !dbg !40
  %72 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %60, float 0xBFC55B1720000000) #2, !dbg !40
  %.09.i = select i1 %.not4.i, float %72, float %71, !dbg !40
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not5.i = icmp eq i32 %73, 0, !dbg !40
  %74 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %60, float 0x3FC99DA160000000) #2, !dbg !40
  %75 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %60, float 0x3FC99DA160000000) #2, !dbg !40
  %.05.i = select i1 %.not5.i, float %75, float %74, !dbg !40
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not6.i = icmp eq i32 %76, 0, !dbg !40
  %77 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %60, float 0xBFCFFFE440000000) #2, !dbg !40
  %78 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %60, float 0xBFCFFFE440000000) #2, !dbg !40
  %.01.i = select i1 %.not6.i, float %78, float %77, !dbg !40
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not7.i = icmp eq i32 %79, 0, !dbg !40
  %80 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %60, float 0x3FD5554F00000000) #2, !dbg !40
  %81 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %60, float 0x3FD5554F00000000) #2, !dbg !40
  %.0.i = select i1 %.not7.i, float %81, float %80, !dbg !40
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not8.i = icmp eq i32 %82, 0, !dbg !40
  %83 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %60, float -5.000000e-01) #2, !dbg !40
  %84 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %60, float -5.000000e-01) #2, !dbg !40
  %.07.i = select i1 %.not8.i, float %84, float %83, !dbg !40
  %85 = fmul float %60, %.07.i, !dbg !40
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not9.i = icmp eq i32 %86, 0, !dbg !40
  %87 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %85, float %60, float %60) #2, !dbg !40
  %88 = tail call float @llvm.nvvm.fma.rn.f(float %85, float %60, float %60) #2, !dbg !40
  %.06.i = select i1 %.not9.i, float %88, float %87, !dbg !40
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not10.i = icmp eq i32 %89, 0, !dbg !40
  %90 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #2, !dbg !40
  %91 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #2, !dbg !40
  %.04.i = select i1 %.not10.i, float %91, float %90, !dbg !40
  %92 = icmp ugt i32 %51, 2139095039, !dbg !40
  br i1 %92, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !40

__nv_fmaf_rn.exit.i.i:                            ; preds = %6
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not11.i = icmp eq i32 %93, 0, !dbg !40
  %94 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !40
  %95 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !40
  %.03.i = select i1 %.not11.i, float %95, float %94, !dbg !40
  br label %__nv_logf.exit, !dbg !40

__nv_logf.exit:                                   ; preds = %6, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %6 ], !dbg !40
  %96 = fcmp olt float %24, 0x3810000000000000, !dbg !40
  %97 = fmul float %24, 0x4160000000000000, !dbg !40
  %.02.i1 = select i1 %96, float %97, float %24, !dbg !40
  %i.i.0.i2 = select i1 %96, float -2.300000e+01, float 0.000000e+00, !dbg !40
  %98 = bitcast float %.02.i1 to i32, !dbg !40
  %99 = add i32 %98, -1059760811, !dbg !40
  %100 = and i32 %99, -8388608, !dbg !40
  %101 = sub i32 %98, %100, !dbg !40
  %102 = bitcast i32 %101 to float, !dbg !40
  %103 = sitofp i32 %100 to float, !dbg !40
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not.i3 = icmp eq i32 %104, 0, !dbg !40
  %105 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %103, float 0x3E80000000000000, float %i.i.0.i2) #2, !dbg !40
  %106 = tail call float @llvm.nvvm.fma.rn.f(float %103, float 0x3E80000000000000, float %i.i.0.i2) #2, !dbg !40
  %.08.i4 = select i1 %.not.i3, float %106, float %105, !dbg !40
  %107 = fadd float %102, -1.000000e+00, !dbg !40
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not1.i5 = icmp eq i32 %108, 0, !dbg !40
  %109 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %107, float 0x3FC2073EC0000000) #2, !dbg !40
  %110 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %107, float 0x3FC2073EC0000000) #2, !dbg !40
  %.010.i6 = select i1 %.not1.i5, float %110, float %109, !dbg !40
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not2.i7 = icmp eq i32 %111, 0, !dbg !40
  %112 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i6, float %107, float 0xBFBF19B980000000) #2, !dbg !40
  %113 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i6, float %107, float 0xBFBF19B980000000) #2, !dbg !40
  %.011.i8 = select i1 %.not2.i7, float %113, float %112, !dbg !40
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not3.i9 = icmp eq i32 %114, 0, !dbg !40
  %115 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i8, float %107, float 0x3FC1E52AA0000000) #2, !dbg !40
  %116 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i8, float %107, float 0x3FC1E52AA0000000) #2, !dbg !40
  %.012.i10 = select i1 %.not3.i9, float %116, float %115, !dbg !40
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not4.i11 = icmp eq i32 %117, 0, !dbg !40
  %118 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i10, float %107, float 0xBFC55B1720000000) #2, !dbg !40
  %119 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i10, float %107, float 0xBFC55B1720000000) #2, !dbg !40
  %.09.i12 = select i1 %.not4.i11, float %119, float %118, !dbg !40
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not5.i13 = icmp eq i32 %120, 0, !dbg !40
  %121 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i12, float %107, float 0x3FC99DA160000000) #2, !dbg !40
  %122 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i12, float %107, float 0x3FC99DA160000000) #2, !dbg !40
  %.05.i14 = select i1 %.not5.i13, float %122, float %121, !dbg !40
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not6.i15 = icmp eq i32 %123, 0, !dbg !40
  %124 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i14, float %107, float 0xBFCFFFE440000000) #2, !dbg !40
  %125 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i14, float %107, float 0xBFCFFFE440000000) #2, !dbg !40
  %.01.i16 = select i1 %.not6.i15, float %125, float %124, !dbg !40
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not7.i17 = icmp eq i32 %126, 0, !dbg !40
  %127 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i16, float %107, float 0x3FD5554F00000000) #2, !dbg !40
  %128 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i16, float %107, float 0x3FD5554F00000000) #2, !dbg !40
  %.0.i18 = select i1 %.not7.i17, float %128, float %127, !dbg !40
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not8.i19 = icmp eq i32 %129, 0, !dbg !40
  %130 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i18, float %107, float -5.000000e-01) #2, !dbg !40
  %131 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i18, float %107, float -5.000000e-01) #2, !dbg !40
  %.07.i20 = select i1 %.not8.i19, float %131, float %130, !dbg !40
  %132 = fmul float %107, %.07.i20, !dbg !40
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not9.i21 = icmp eq i32 %133, 0, !dbg !40
  %134 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %132, float %107, float %107) #2, !dbg !40
  %135 = tail call float @llvm.nvvm.fma.rn.f(float %132, float %107, float %107) #2, !dbg !40
  %.06.i22 = select i1 %.not9.i21, float %135, float %134, !dbg !40
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not10.i23 = icmp eq i32 %136, 0, !dbg !40
  %137 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i4, float 0x3FE62E4300000000, float %.06.i22) #2, !dbg !40
  %138 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i4, float 0x3FE62E4300000000, float %.06.i22) #2, !dbg !40
  %.04.i24 = select i1 %.not10.i23, float %138, float %137, !dbg !40
  %139 = icmp ugt i32 %98, 2139095039, !dbg !40
  br i1 %139, label %__nv_fmaf_rn.exit.i.i27, label %__nv_logf.exit30, !dbg !40

__nv_fmaf_rn.exit.i.i27:                          ; preds = %__nv_logf.exit
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not11.i28 = icmp eq i32 %140, 0, !dbg !40
  %141 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i1, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !40
  %142 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i1, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !40
  %.03.i29 = select i1 %.not11.i28, float %142, float %141, !dbg !40
  br label %__nv_logf.exit30, !dbg !40

__nv_logf.exit30:                                 ; preds = %__nv_logf.exit, %__nv_fmaf_rn.exit.i.i27
  %r.i.0.i25 = phi float [ %.03.i29, %__nv_fmaf_rn.exit.i.i27 ], [ %.04.i24, %__nv_logf.exit ], !dbg !40
  %143 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !40
  %144 = extractvalue { i32, i32 } %48, 1, !dbg !39
  %145 = bitcast i32 %144 to float, !dbg !39
  %146 = extractvalue { i32, i32 } %48, 0, !dbg !39
  %147 = bitcast i32 %146 to float, !dbg !39
  %148 = extractvalue { i32, i32 } %44, 1, !dbg !36
  %149 = bitcast i32 %148 to float, !dbg !36
  %150 = extractvalue { i32, i32 } %44, 0, !dbg !36
  %151 = bitcast i32 %150 to float, !dbg !36
  %152 = extractvalue { i32, i32 } %40, 1, !dbg !33
  %153 = bitcast i32 %152 to float, !dbg !33
  %154 = extractvalue { i32, i32 } %40, 0, !dbg !33
  %155 = bitcast i32 %154 to float, !dbg !33
  %156 = extractvalue { i32, i32 } %36, 1, !dbg !30
  %157 = bitcast i32 %156 to float, !dbg !30
  %158 = extractvalue { i32, i32 } %36, 0, !dbg !30
  %159 = bitcast i32 %158 to float, !dbg !30
  %160 = extractvalue { i32, i32 } %31, 1, !dbg !26
  %161 = bitcast i32 %160 to float, !dbg !26
  %162 = extractvalue { i32, i32 } %31, 0, !dbg !26
  %163 = bitcast i32 %162 to float, !dbg !26
  %164 = extractvalue { i32, i32 } %29, 1, !dbg !24
  %165 = bitcast i32 %164 to float, !dbg !24
  %166 = extractvalue { i32, i32 } %29, 0, !dbg !24
  %167 = bitcast i32 %166 to float, !dbg !24
  %168 = extractvalue { i32, i32 } %18, 1, !dbg !18
  %169 = bitcast i32 %168 to float, !dbg !18
  %170 = extractvalue { i32, i32 } %18, 0, !dbg !18
  %171 = bitcast i32 %170 to float, !dbg !18
  %172 = fcmp oeq float %.02.i1, 0.000000e+00, !dbg !40
  %173 = fsub float 0.000000e+00, %r.i.0.i, !dbg !41
  %174 = select i1 %143, float 0x7FF0000000000000, float %173, !dbg !40
  %175 = fsub float 0.000000e+00, %r.i.0.i25, !dbg !41
  %176 = select i1 %172, float 0x7FF0000000000000, float %175, !dbg !40
  %177 = fadd float %174, %171, !dbg !42
  %178 = fadd float %176, %169, !dbg !42
  %179 = fsub float %177, %167, !dbg !43
  %180 = fsub float %178, %165, !dbg !43
  %181 = fmul float %179, 0x3FF7154760000000, !dbg !44
  %182 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %181) #2, !dbg !44
  %183 = fmul float %180, 0x3FF7154760000000, !dbg !44
  %184 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %183) #2, !dbg !44
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %182, float %163) #2, !dbg !45
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %184, float %161) #2, !dbg !45
  %187 = fcmp ogt float %159, %155, !dbg !46
  %188 = fcmp ogt float %157, %153, !dbg !46
  %189 = fcmp uno float %159, 0.000000e+00, !dbg !50
  %190 = fcmp uno float %157, 0.000000e+00, !dbg !50
  %191 = or i1 %189, %187, !dbg !51
  %192 = or i1 %190, %188, !dbg !51
  %193 = select i1 %191, float %159, float %155, !dbg !52
  %194 = select i1 %192, float %157, float %153, !dbg !52
  %195 = fcmp ogt float %193, %151, !dbg !53
  %196 = fcmp ogt float %194, %149, !dbg !53
  %197 = fcmp uno float %193, 0.000000e+00, !dbg !55
  %198 = fcmp uno float %194, 0.000000e+00, !dbg !55
  %199 = or i1 %195, %197, !dbg !56
  %200 = or i1 %196, %198, !dbg !56
  %201 = select i1 %199, float %193, float %151, !dbg !57
  %202 = select i1 %200, float %194, float %149, !dbg !57
  %203 = fcmp ogt float %201, %147, !dbg !58
  %204 = fcmp ogt float %202, %145, !dbg !58
  %205 = fcmp uno float %201, 0.000000e+00, !dbg !60
  %206 = fcmp uno float %202, 0.000000e+00, !dbg !60
  %207 = or i1 %203, %205, !dbg !61
  %208 = or i1 %204, %206, !dbg !61
  %209 = select i1 %207, float %201, float %147, !dbg !62
  %210 = select i1 %208, float %202, float %145, !dbg !62
  %211 = fsub float %171, %209, !dbg !63
  %212 = fsub float %169, %210, !dbg !63
  %213 = fmul float %211, 0x3FF7154760000000, !dbg !64
  %214 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %213) #2, !dbg !64
  %215 = fmul float %212, 0x3FF7154760000000, !dbg !64
  %216 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %215) #2, !dbg !64
  %217 = bitcast float %185 to i32, !dbg !65
  %218 = bitcast float %186 to i32, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %217, i32 %218, ptr addrspace(1) %19, i1 %13) #2, !dbg !65
  %219 = getelementptr float, ptr addrspace(1) %4, i64 %16, !dbg !66
  %220 = bitcast float %214 to i32, !dbg !67
  %221 = bitcast float %216 to i32, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %220, i32 %221, ptr addrspace(1) %219, i1 %13) #2, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2dygcrgojnyyxerb53iarjyqe3m3qdlc252tfxl3ypg77vltwvx.py", directory: "inductor_cache/2d")
!4 = !{ptr @triton_poi_fused__softmax_add_log_neg_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_add_log_neg_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_add_log_neg_2", linkageName: "triton_poi_fused__softmax_add_log_neg_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 34, scope: !7)
!20 = !DILocation(line: 28, column: 39, scope: !7)
!21 = !DILocation(line: 29, column: 38, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 43, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 44, scope: !7)
!27 = !DILocation(line: 31, column: 39, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 31, column: 31, scope: !7)
!30 = !DILocation(line: 31, column: 44, scope: !7)
!31 = !DILocation(line: 32, column: 41, scope: !7)
!32 = !DILocation(line: 32, column: 31, scope: !7)
!33 = !DILocation(line: 32, column: 49, scope: !7)
!34 = !DILocation(line: 33, column: 41, scope: !7)
!35 = !DILocation(line: 33, column: 31, scope: !7)
!36 = !DILocation(line: 33, column: 49, scope: !7)
!37 = !DILocation(line: 34, column: 41, scope: !7)
!38 = !DILocation(line: 34, column: 31, scope: !7)
!39 = !DILocation(line: 34, column: 49, scope: !7)
!40 = !DILocation(line: 35, column: 23, scope: !7)
!41 = !DILocation(line: 36, column: 12, scope: !7)
!42 = !DILocation(line: 37, column: 18, scope: !7)
!43 = !DILocation(line: 40, column: 18, scope: !7)
!44 = !DILocation(line: 42, column: 24, scope: !7)
!45 = !DILocation(line: 43, column: 20, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 44, column: 42, scope: !7)
!50 = !DILocation(line: 120, column: 21, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 120, column: 16, scope: !47, inlinedAt: !49)
!52 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!53 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !54)
!54 = !DILocation(line: 45, column: 42, scope: !7)
!55 = !DILocation(line: 120, column: 21, scope: !47, inlinedAt: !54)
!56 = !DILocation(line: 120, column: 16, scope: !47, inlinedAt: !54)
!57 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !54)
!58 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !59)
!59 = !DILocation(line: 46, column: 42, scope: !7)
!60 = !DILocation(line: 120, column: 21, scope: !47, inlinedAt: !59)
!61 = !DILocation(line: 120, column: 16, scope: !47, inlinedAt: !59)
!62 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !59)
!63 = !DILocation(line: 47, column: 19, scope: !7)
!64 = !DILocation(line: 48, column: 24, scope: !7)
!65 = !DILocation(line: 49, column: 40, scope: !7)
!66 = !DILocation(line: 50, column: 25, scope: !7)
!67 = !DILocation(line: 50, column: 37, scope: !7)
!68 = !DILocation(line: 50, column: 4, scope: !7)
