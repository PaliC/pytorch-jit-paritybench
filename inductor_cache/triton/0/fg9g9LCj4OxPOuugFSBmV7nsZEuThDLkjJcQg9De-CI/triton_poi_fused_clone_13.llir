; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_clone_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = icmp slt i32 %13, 61952, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %18 = sdiv i32 %.frozen, 22, !dbg !15
  %19 = mul i32 %18, 22, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %20 = srem i32 %14, 22, !dbg !16
  %.frozen19 = freeze i32 %15, !dbg !15
  %21 = sdiv i32 %.frozen19, 22, !dbg !15
  %22 = mul i32 %21, 22, !dbg !16
  %.decomposed20 = sub i32 %.frozen19, %22, !dbg !16
  %23 = srem i32 %16, 22, !dbg !16
  %24 = srem i32 %18, 22, !dbg !17
  %25 = srem i32 %21, 22, !dbg !17
  %26 = sdiv i32 %13, 484, !dbg !18
  %27 = srem i32 %26, 32, !dbg !19
  %28 = mul nsw i32 %24, 24, !dbg !20
  %29 = mul nsw i32 %25, 24, !dbg !20
  %30 = mul i32 %26, 576, !dbg !21
  %31 = or disjoint i32 %30, 25, !dbg !22
  %32 = add nsw i32 %31, %.decomposed, !dbg !23
  %33 = add i32 %32, %28, !dbg !24
  %34 = add nsw i32 %31, %20, !dbg !23
  %35 = add i32 %34, %28, !dbg !24
  %36 = add nsw i32 %31, %.decomposed20, !dbg !23
  %37 = add i32 %36, %29, !dbg !24
  %38 = add nsw i32 %31, %23, !dbg !23
  %39 = add i32 %38, %29, !dbg !24
  %40 = sext i32 %33 to i64, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !25
  %42 = sext i32 %35 to i64, !dbg !25
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !25
  %44 = sext i32 %37 to i64, !dbg !25
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !25
  %46 = sext i32 %39 to i64, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !25
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %17) #3, !dbg !26
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %17) #3, !dbg !26
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %17) #3, !dbg !26
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %17) #3, !dbg !26
  %52 = sext i32 %27 to i64, !dbg !27
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !27
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %17) #3, !dbg !28
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %17) #3, !dbg !28
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %17) #3, !dbg !28
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %17) #3, !dbg !28
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !29
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %17) #3, !dbg !30
  %60 = bitcast i32 %59 to float, !dbg !30
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %17) #3, !dbg !30
  %62 = bitcast i32 %61 to float, !dbg !30
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %17) #3, !dbg !30
  %64 = bitcast i32 %63 to float, !dbg !30
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %17) #3, !dbg !30
  %66 = bitcast i32 %65 to float, !dbg !30
  %67 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !31
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %17) #3, !dbg !32
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %17) #3, !dbg !32
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %17) #3, !dbg !32
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %17) #3, !dbg !32
  %72 = getelementptr float, ptr addrspace(1) %4, i64 %52, !dbg !33
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %17) #3, !dbg !34
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %17) #3, !dbg !34
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %17) #3, !dbg !34
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %17) #3, !dbg !34
  %77 = fadd float %60, 0x3EE4F8B580000000, !dbg !35
  %78 = fadd float %62, 0x3EE4F8B580000000, !dbg !35
  %79 = fadd float %64, 0x3EE4F8B580000000, !dbg !35
  %80 = fadd float %66, 0x3EE4F8B580000000, !dbg !35
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %81, 0, !dbg !36
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %82, 0, !dbg !36
  br i1 %.not.i, label %88, label %83, !dbg !36

83:                                               ; preds = %7
  br i1 %.not1.i, label %86, label %84, !dbg !36

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

88:                                               ; preds = %7
  br i1 %.not1.i, label %91, label %89, !dbg !36

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %84, %86, %89, %91
  %.0.i = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !36
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i1 = icmp eq i32 %93, 0, !dbg !36
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i4 = icmp eq i32 %94, 0, !dbg !36
  br i1 %.not.i1, label %100, label %95, !dbg !36

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %98, label %96, !dbg !36

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

100:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %103, label %101, !dbg !36

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

__nv_sqrtf.exit5:                                 ; preds = %96, %98, %101, %103
  %.0.i3 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !36
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i6 = icmp eq i32 %105, 0, !dbg !36
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i9 = icmp eq i32 %106, 0, !dbg !36
  br i1 %.not.i6, label %112, label %107, !dbg !36

107:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %110, label %108, !dbg !36

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

112:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %115, label %113, !dbg !36

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

__nv_sqrtf.exit10:                                ; preds = %108, %110, %113, %115
  %.0.i8 = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !36
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i11 = icmp eq i32 %117, 0, !dbg !36
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i14 = icmp eq i32 %118, 0, !dbg !36
  br i1 %.not.i11, label %124, label %119, !dbg !36

119:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %122, label %120, !dbg !36

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

124:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %127, label %125, !dbg !36

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

__nv_sqrtf.exit15:                                ; preds = %120, %122, %125, %127
  %.0.i13 = phi float [ %121, %120 ], [ %123, %122 ], [ %126, %125 ], [ %128, %127 ], !dbg !36
  %129 = insertelement <4 x i32> poison, i32 %51, i64 0, !dbg !26
  %130 = insertelement <4 x i32> %129, i32 %50, i64 1, !dbg !26
  %131 = insertelement <4 x i32> %130, i32 %49, i64 2, !dbg !26
  %132 = insertelement <4 x i32> %131, i32 %48, i64 3, !dbg !26
  %133 = bitcast <4 x i32> %132 to <4 x float>, !dbg !26
  %134 = insertelement <4 x i32> poison, i32 %57, i64 0, !dbg !28
  %135 = insertelement <4 x i32> %134, i32 %56, i64 1, !dbg !28
  %136 = insertelement <4 x i32> %135, i32 %55, i64 2, !dbg !28
  %137 = insertelement <4 x i32> %136, i32 %54, i64 3, !dbg !28
  %138 = bitcast <4 x i32> %137 to <4 x float>, !dbg !28
  %139 = insertelement <4 x i32> poison, i32 %76, i64 0, !dbg !34
  %140 = insertelement <4 x i32> %139, i32 %75, i64 1, !dbg !34
  %141 = insertelement <4 x i32> %140, i32 %74, i64 2, !dbg !34
  %142 = insertelement <4 x i32> %141, i32 %73, i64 3, !dbg !34
  %143 = bitcast <4 x i32> %142 to <4 x float>, !dbg !34
  %144 = insertelement <4 x i32> poison, i32 %71, i64 0, !dbg !32
  %145 = insertelement <4 x i32> %144, i32 %70, i64 1, !dbg !32
  %146 = insertelement <4 x i32> %145, i32 %69, i64 2, !dbg !32
  %147 = insertelement <4 x i32> %146, i32 %68, i64 3, !dbg !32
  %148 = bitcast <4 x i32> %147 to <4 x float>, !dbg !32
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !37
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !37
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !37
  %153 = fsub <4 x float> %133, %138, !dbg !38
  %154 = insertelement <4 x float> poison, float %152, i64 0, !dbg !39
  %155 = insertelement <4 x float> %154, float %151, i64 1, !dbg !39
  %156 = insertelement <4 x float> %155, float %150, i64 2, !dbg !39
  %157 = insertelement <4 x float> %156, float %149, i64 3, !dbg !39
  %158 = fmul <4 x float> %153, %157, !dbg !39
  %159 = fmul <4 x float> %158, %148, !dbg !40
  %160 = fadd <4 x float> %159, %143, !dbg !41
  %161 = fcmp olt <4 x float> %160, zeroinitializer, !dbg !42
  %162 = extractelement <4 x i1> %161, i64 3, !dbg !46
  %163 = extractelement <4 x i1> %161, i64 2, !dbg !46
  %164 = extractelement <4 x i1> %161, i64 1, !dbg !46
  %165 = extractelement <4 x i1> %161, i64 0, !dbg !46
  %166 = sext i32 %13 to i64, !dbg !47
  %167 = getelementptr float, ptr addrspace(1) %5, i64 %166, !dbg !47
  %bc = bitcast <4 x float> %160 to <4 x i32>, !dbg !48
  %168 = extractelement <4 x i32> %bc, i64 3, !dbg !48
  %169 = select i1 %162, i32 0, i32 %168, !dbg !46
  %bc16 = bitcast <4 x float> %160 to <4 x i32>, !dbg !48
  %170 = extractelement <4 x i32> %bc16, i64 2, !dbg !48
  %171 = select i1 %163, i32 0, i32 %170, !dbg !46
  %bc17 = bitcast <4 x float> %160 to <4 x i32>, !dbg !48
  %172 = extractelement <4 x i32> %bc17, i64 1, !dbg !48
  %173 = select i1 %164, i32 0, i32 %172, !dbg !46
  %bc18 = bitcast <4 x float> %160 to <4 x i32>, !dbg !48
  %174 = extractelement <4 x i32> %bc18, i64 0, !dbg !48
  %175 = select i1 %165, i32 0, i32 %174, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %169, i32 %171, i32 %173, i32 %175, ptr addrspace(1) %167, i1 %17) #3, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clxwlwrchv2oq4b5wgobshkk7fa6zlnwbm3zl635jm533vcp4t6b.py", directory: "inductor_cache/lx")
!4 = !{ptr @triton_poi_fused_clone_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_13", linkageName: "triton_poi_fused_clone_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 27, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 28, scope: !7)
!20 = !DILocation(line: 29, column: 43, scope: !7)
!21 = !DILocation(line: 29, column: 52, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 40, scope: !7)
!24 = !DILocation(line: 29, column: 48, scope: !7)
!25 = !DILocation(line: 29, column: 30, scope: !7)
!26 = !DILocation(line: 29, column: 57, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 35, scope: !7)
!29 = !DILocation(line: 31, column: 30, scope: !7)
!30 = !DILocation(line: 31, column: 35, scope: !7)
!31 = !DILocation(line: 32, column: 31, scope: !7)
!32 = !DILocation(line: 32, column: 36, scope: !7)
!33 = !DILocation(line: 33, column: 31, scope: !7)
!34 = !DILocation(line: 33, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 37, column: 26, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 34, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 19, scope: !7)
!40 = !DILocation(line: 43, column: 20, scope: !7)
!41 = !DILocation(line: 44, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 46, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 47, column: 25, scope: !7)
!48 = !DILocation(line: 47, column: 37, scope: !7)
!49 = !DILocation(line: 47, column: 4, scope: !7)
