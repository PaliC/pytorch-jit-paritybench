; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %11 = and i32 %9, 252, !dbg !12
  %12 = lshr i32 %8, 2, !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = or disjoint i32 %13, 64, !dbg !12
  %15 = or disjoint i32 %13, 128, !dbg !12
  %16 = or disjoint i32 %13, 192, !dbg !12
  %17 = and i32 %8, 255, !dbg !12
  %18 = or disjoint i32 %7, %11, !dbg !13
  %19 = or disjoint i32 %7, %13, !dbg !13
  %20 = or disjoint i32 %7, %14, !dbg !13
  %21 = or disjoint i32 %7, %15, !dbg !13
  %22 = or disjoint i32 %7, %16, !dbg !13
  %23 = or disjoint i32 %7, %17, !dbg !13
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %25 = shl i32 %24, 4, !dbg !15
  %26 = lshr i32 %8, 6, !dbg !16
  %27 = and i32 %26, 3, !dbg !16
  %28 = or disjoint i32 %27, 4, !dbg !16
  %29 = or disjoint i32 %27, 8, !dbg !16
  %30 = or disjoint i32 %27, 12, !dbg !16
  %31 = or disjoint i32 %25, %27, !dbg !17
  %32 = or disjoint i32 %25, %28, !dbg !17
  %33 = or disjoint i32 %25, %29, !dbg !17
  %34 = or disjoint i32 %25, %30, !dbg !17
  %35 = or disjoint i32 %25, %10, !dbg !17
  %.frozen = freeze i32 %18, !dbg !18
  %36 = sdiv i32 %.frozen, 256, !dbg !18
  %37 = mul i32 %36, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %37, !dbg !19
  %38 = srem i32 %23, 256, !dbg !19
  %39 = shl i32 %31, 8, !dbg !20
  %40 = shl i32 %32, 8, !dbg !20
  %41 = shl i32 %33, 8, !dbg !20
  %42 = shl i32 %34, 8, !dbg !20
  %43 = shl i32 %36, 20, !dbg !21
  %44 = add i32 %43, %.decomposed, !dbg !22
  %45 = add i32 %44, %39, !dbg !23
  %46 = add i32 %44, %40, !dbg !23
  %47 = add i32 %44, %41, !dbg !23
  %48 = add i32 %44, %42, !dbg !23
  %49 = sext i32 %45 to i64, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !24
  %51 = sext i32 %46 to i64, !dbg !24
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !24
  %53 = sext i32 %47 to i64, !dbg !24
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !24
  %55 = sext i32 %48 to i64, !dbg !24
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !24
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #2, !dbg !25
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !25
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !25
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !25
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !25
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #2, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !25
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #2, !dbg !25
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !25
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !25
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !25
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !25
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #2, !dbg !25
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !25
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !25
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !25
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !25
  %77 = shl i32 %8, 6, !dbg !25
  %78 = and i32 %77, 4032, !dbg !25
  %79 = or disjoint i32 %78, %27, !dbg !25
  %80 = and i32 %9, 1020, !dbg !25
  %81 = lshr exact i32 %78, 2, !dbg !25
  %82 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %81, !dbg !25
  %83 = getelementptr float, ptr addrspace(3) %82, i32 %79, !dbg !25
  %84 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #2, !dbg !25
  %85 = or disjoint i32 %79, 16, !dbg !25
  %86 = lshr i32 %85, 4, !dbg !25
  %87 = getelementptr float, ptr addrspace(3) @global_smem, i32 %86, !dbg !25
  %88 = getelementptr float, ptr addrspace(3) %87, i32 %85, !dbg !25
  %89 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #2, !dbg !25
  %90 = or disjoint i32 %79, 32, !dbg !25
  %91 = lshr i32 %90, 4, !dbg !25
  %92 = getelementptr float, ptr addrspace(3) @global_smem, i32 %91, !dbg !25
  %93 = getelementptr float, ptr addrspace(3) %92, i32 %90, !dbg !25
  %94 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #2, !dbg !25
  %95 = or disjoint i32 %79, 48, !dbg !25
  %96 = lshr i32 %95, 4, !dbg !25
  %97 = getelementptr float, ptr addrspace(3) @global_smem, i32 %96, !dbg !25
  %98 = getelementptr float, ptr addrspace(3) %97, i32 %95, !dbg !25
  %99 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #2, !dbg !25
  %100 = or disjoint i32 %79, 4, !dbg !25
  %101 = getelementptr float, ptr addrspace(3) %82, i32 %100, !dbg !25
  %102 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #2, !dbg !25
  %103 = or disjoint i32 %79, 20, !dbg !25
  %104 = lshr i32 %103, 4, !dbg !25
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i32 %104, !dbg !25
  %106 = getelementptr float, ptr addrspace(3) %105, i32 %103, !dbg !25
  %107 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 true) #2, !dbg !25
  %108 = or disjoint i32 %79, 36, !dbg !25
  %109 = lshr i32 %108, 4, !dbg !25
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i32 %109, !dbg !25
  %111 = getelementptr float, ptr addrspace(3) %110, i32 %108, !dbg !25
  %112 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 true) #2, !dbg !25
  %113 = or disjoint i32 %79, 52, !dbg !25
  %114 = lshr i32 %113, 4, !dbg !25
  %115 = getelementptr float, ptr addrspace(3) @global_smem, i32 %114, !dbg !25
  %116 = getelementptr float, ptr addrspace(3) %115, i32 %113, !dbg !25
  %117 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 true) #2, !dbg !25
  %118 = or disjoint i32 %79, 8, !dbg !25
  %119 = getelementptr float, ptr addrspace(3) %82, i32 %118, !dbg !25
  %120 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #2, !dbg !25
  %121 = or disjoint i32 %79, 24, !dbg !25
  %122 = lshr i32 %121, 4, !dbg !25
  %123 = getelementptr float, ptr addrspace(3) @global_smem, i32 %122, !dbg !25
  %124 = getelementptr float, ptr addrspace(3) %123, i32 %121, !dbg !25
  %125 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 true) #2, !dbg !25
  %126 = or disjoint i32 %79, 40, !dbg !25
  %127 = lshr i32 %126, 4, !dbg !25
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i32 %127, !dbg !25
  %129 = getelementptr float, ptr addrspace(3) %128, i32 %126, !dbg !25
  %130 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #2, !dbg !25
  %131 = or disjoint i32 %79, 56, !dbg !25
  %132 = lshr i32 %131, 4, !dbg !25
  %133 = getelementptr float, ptr addrspace(3) @global_smem, i32 %132, !dbg !25
  %134 = getelementptr float, ptr addrspace(3) %133, i32 %131, !dbg !25
  %135 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 true) #2, !dbg !25
  %136 = or disjoint i32 %79, 12, !dbg !25
  %137 = getelementptr float, ptr addrspace(3) %82, i32 %136, !dbg !25
  %138 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #2, !dbg !25
  %139 = or disjoint i32 %79, 28, !dbg !25
  %140 = lshr i32 %139, 4, !dbg !25
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %140, !dbg !25
  %142 = getelementptr float, ptr addrspace(3) %141, i32 %139, !dbg !25
  %143 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %143, i1 true) #2, !dbg !25
  %144 = or disjoint i32 %79, 44, !dbg !25
  %145 = lshr i32 %144, 4, !dbg !25
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %145, !dbg !25
  %147 = getelementptr float, ptr addrspace(3) %146, i32 %144, !dbg !25
  %148 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #2, !dbg !25
  %149 = or disjoint i32 %79, 60, !dbg !25
  %150 = lshr i32 %149, 4, !dbg !25
  %151 = getelementptr float, ptr addrspace(3) @global_smem, i32 %150, !dbg !25
  %152 = getelementptr float, ptr addrspace(3) %151, i32 %149, !dbg !25
  %153 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 true) #2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %154 = lshr i32 %80, 4, !dbg !25
  %155 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %154, !dbg !25
  %156 = getelementptr inbounds float, ptr addrspace(3) %155, i32 %80, !dbg !25
  %157 = load float, ptr addrspace(3) %156, align 4, !dbg !25
  %158 = or disjoint i32 %80, 1, !dbg !25
  %159 = getelementptr inbounds float, ptr addrspace(3) %155, i32 %158, !dbg !25
  %160 = load float, ptr addrspace(3) %159, align 4, !dbg !25
  %161 = or disjoint i32 %80, 2, !dbg !25
  %162 = getelementptr inbounds float, ptr addrspace(3) %155, i32 %161, !dbg !25
  %163 = load float, ptr addrspace(3) %162, align 4, !dbg !25
  %164 = or disjoint i32 %80, 3, !dbg !25
  %165 = getelementptr inbounds float, ptr addrspace(3) %155, i32 %164, !dbg !25
  %166 = load float, ptr addrspace(3) %165, align 4, !dbg !25
  %167 = or disjoint i32 %80, 1024, !dbg !25
  %168 = lshr i32 %167, 4, !dbg !25
  %169 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %168, !dbg !25
  %170 = getelementptr inbounds float, ptr addrspace(3) %169, i32 %167, !dbg !25
  %171 = load float, ptr addrspace(3) %170, align 4, !dbg !25
  %172 = or disjoint i32 %80, 1025, !dbg !25
  %173 = lshr i32 %172, 4, !dbg !25
  %174 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %173, !dbg !25
  %175 = getelementptr inbounds float, ptr addrspace(3) %174, i32 %172, !dbg !25
  %176 = load float, ptr addrspace(3) %175, align 4, !dbg !25
  %177 = or disjoint i32 %80, 1026, !dbg !25
  %178 = lshr i32 %177, 4, !dbg !25
  %179 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %178, !dbg !25
  %180 = getelementptr inbounds float, ptr addrspace(3) %179, i32 %177, !dbg !25
  %181 = load float, ptr addrspace(3) %180, align 4, !dbg !25
  %182 = or disjoint i32 %80, 1027, !dbg !25
  %183 = lshr i32 %182, 4, !dbg !25
  %184 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %183, !dbg !25
  %185 = getelementptr inbounds float, ptr addrspace(3) %184, i32 %182, !dbg !25
  %186 = load float, ptr addrspace(3) %185, align 4, !dbg !25
  %187 = or disjoint i32 %80, 2048, !dbg !25
  %188 = lshr i32 %187, 4, !dbg !25
  %189 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %188, !dbg !25
  %190 = getelementptr inbounds float, ptr addrspace(3) %189, i32 %187, !dbg !25
  %191 = load float, ptr addrspace(3) %190, align 4, !dbg !25
  %192 = or disjoint i32 %80, 2049, !dbg !25
  %193 = lshr i32 %192, 4, !dbg !25
  %194 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %193, !dbg !25
  %195 = getelementptr inbounds float, ptr addrspace(3) %194, i32 %192, !dbg !25
  %196 = load float, ptr addrspace(3) %195, align 4, !dbg !25
  %197 = or disjoint i32 %80, 2050, !dbg !25
  %198 = lshr i32 %197, 4, !dbg !25
  %199 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %198, !dbg !25
  %200 = getelementptr inbounds float, ptr addrspace(3) %199, i32 %197, !dbg !25
  %201 = load float, ptr addrspace(3) %200, align 4, !dbg !25
  %202 = or disjoint i32 %80, 2051, !dbg !25
  %203 = lshr i32 %202, 4, !dbg !25
  %204 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %203, !dbg !25
  %205 = getelementptr inbounds float, ptr addrspace(3) %204, i32 %202, !dbg !25
  %206 = load float, ptr addrspace(3) %205, align 4, !dbg !25
  %207 = or disjoint i32 %80, 3072, !dbg !25
  %208 = lshr i32 %207, 4, !dbg !25
  %209 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %208, !dbg !25
  %210 = getelementptr inbounds float, ptr addrspace(3) %209, i32 %207, !dbg !25
  %211 = load float, ptr addrspace(3) %210, align 4, !dbg !25
  %212 = or disjoint i32 %80, 3073, !dbg !25
  %213 = lshr i32 %212, 4, !dbg !25
  %214 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %213, !dbg !25
  %215 = getelementptr inbounds float, ptr addrspace(3) %214, i32 %212, !dbg !25
  %216 = load float, ptr addrspace(3) %215, align 4, !dbg !25
  %217 = or disjoint i32 %80, 3074, !dbg !25
  %218 = lshr i32 %217, 4, !dbg !25
  %219 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %218, !dbg !25
  %220 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %217, !dbg !25
  %221 = load float, ptr addrspace(3) %220, align 4, !dbg !25
  %222 = or disjoint i32 %80, 3075, !dbg !25
  %223 = lshr i32 %222, 4, !dbg !25
  %224 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %223, !dbg !25
  %225 = getelementptr inbounds float, ptr addrspace(3) %224, i32 %222, !dbg !25
  %226 = load float, ptr addrspace(3) %225, align 4, !dbg !25
  %227 = sext i32 %38 to i64, !dbg !26
  %228 = getelementptr float, ptr addrspace(1) %1, i64 %227, !dbg !26
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %228, i1 true) #2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %.idx = shl nuw nsw i32 %17, 3, !dbg !28
  %230 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !28
  %231 = insertelement <1 x i32> poison, i32 %229, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %.idx4 = shl nuw nsw i32 %13, 3, !dbg !28
  %232 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !28
  %233 = load float, ptr addrspace(3) %232, align 8, !dbg !28
  %.idx5 = shl nuw nsw i32 %14, 3, !dbg !28
  %234 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !28
  %235 = load float, ptr addrspace(3) %234, align 8, !dbg !28
  %.idx6 = shl nuw nsw i32 %15, 3, !dbg !28
  %236 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !28
  %237 = load float, ptr addrspace(3) %236, align 8, !dbg !28
  %.idx7 = shl nuw nsw i32 %16, 3, !dbg !28
  %238 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !28
  %239 = load float, ptr addrspace(3) %238, align 8, !dbg !28
  %240 = fadd float %157, %233, !dbg !28
  %241 = fadd float %160, %233, !dbg !28
  %242 = fadd float %163, %233, !dbg !28
  %243 = fadd float %166, %233, !dbg !28
  %244 = fadd float %171, %235, !dbg !28
  %245 = fadd float %176, %235, !dbg !28
  %246 = fadd float %181, %235, !dbg !28
  %247 = fadd float %186, %235, !dbg !28
  %248 = fadd float %191, %237, !dbg !28
  %249 = fadd float %196, %237, !dbg !28
  %250 = fadd float %201, %237, !dbg !28
  %251 = fadd float %206, %237, !dbg !28
  %252 = fadd float %211, %239, !dbg !28
  %253 = fadd float %216, %239, !dbg !28
  %254 = fadd float %221, %239, !dbg !28
  %255 = fadd float %226, %239, !dbg !28
  %256 = shl i32 %19, 12, !dbg !29
  %257 = shl i32 %20, 12, !dbg !29
  %258 = shl i32 %21, 12, !dbg !29
  %259 = shl i32 %22, 12, !dbg !29
  %260 = add i32 %35, %256, !dbg !30
  %261 = add i32 %35, %257, !dbg !30
  %262 = add i32 %35, %258, !dbg !30
  %263 = add i32 %35, %259, !dbg !30
  %264 = sext i32 %260 to i64, !dbg !31
  %265 = getelementptr float, ptr addrspace(1) %2, i64 %264, !dbg !31
  %266 = sext i32 %261 to i64, !dbg !31
  %267 = getelementptr float, ptr addrspace(1) %2, i64 %266, !dbg !31
  %268 = sext i32 %262 to i64, !dbg !31
  %269 = getelementptr float, ptr addrspace(1) %2, i64 %268, !dbg !31
  %270 = sext i32 %263 to i64, !dbg !31
  %271 = getelementptr float, ptr addrspace(1) %2, i64 %270, !dbg !31
  %272 = bitcast float %240 to i32, !dbg !32
  %273 = bitcast float %241 to i32, !dbg !32
  %274 = bitcast float %242 to i32, !dbg !32
  %275 = bitcast float %243 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %272, i32 %273, i32 %274, i32 %275, ptr addrspace(1) %265, i1 true) #2, !dbg !32
  %276 = bitcast float %244 to i32, !dbg !32
  %277 = bitcast float %245 to i32, !dbg !32
  %278 = bitcast float %246 to i32, !dbg !32
  %279 = bitcast float %247 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %276, i32 %277, i32 %278, i32 %279, ptr addrspace(1) %267, i1 true) #2, !dbg !32
  %280 = bitcast float %248 to i32, !dbg !32
  %281 = bitcast float %249 to i32, !dbg !32
  %282 = bitcast float %250 to i32, !dbg !32
  %283 = bitcast float %251 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %280, i32 %281, i32 %282, i32 %283, ptr addrspace(1) %269, i1 true) #2, !dbg !32
  %284 = bitcast float %252 to i32, !dbg !32
  %285 = bitcast float %253 to i32, !dbg !32
  %286 = bitcast float %254 to i32, !dbg !32
  %287 = bitcast float %255 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %284, i32 %285, i32 %286, i32 %287, ptr addrspace(1) %271, i1 true) #2, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crbgxxbe4gipc7e23jtxwua55srfmdpppcqiabflolf2bokj35ui.py", directory: "inductor_cache/rb")
!4 = !{ptr @triton_poi_fused_convolution_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_2, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_2", linkageName: "triton_poi_fused_convolution_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 52, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 57, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 35, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 25, scope: !7)
!32 = !DILocation(line: 35, column: 46, scope: !7)
!33 = !DILocation(line: 35, column: 4, scope: !7)
