; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_avg_pool2d_native_group_norm_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 6, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = and i32 %10, 64, !dbg !12
  %13 = lshr i32 %10, 1, !dbg !12
  %14 = and i32 %13, 63, !dbg !12
  %15 = or disjoint i32 %9, %11, !dbg !13
  %16 = or disjoint i32 %9, %14, !dbg !13
  %17 = icmp slt i32 %15, 128, !dbg !14
  %18 = icmp slt i32 %16, 128, !dbg !14
  %.lobit = lshr exact i32 %12, 6, !dbg !15
  %19 = shl i32 %10, 2, !dbg !15
  %20 = and i32 %19, 4, !dbg !15
  %21 = shl i32 %15, 12, !dbg !16
  %22 = shl i32 %16, 10, !dbg !17
  %23 = or disjoint i32 %22, %20
  %24 = shl i32 %10, 3
  %25 = and i32 %24, 504
  %26 = or disjoint i32 %25, %.lobit
  %27 = and i32 %19, 252
  %28 = shl nuw nsw i32 %12, 2
  %29 = or disjoint i32 %27, %28
  %30 = lshr exact i32 %25, 1
  %31 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %30
  %32 = getelementptr inbounds float, ptr addrspace(3) %31, i32 %26
  %33 = or disjoint i32 %26, 2
  %34 = getelementptr inbounds float, ptr addrspace(3) %31, i32 %33
  %35 = or disjoint i32 %26, 4
  %36 = getelementptr inbounds float, ptr addrspace(3) %31, i32 %35
  %37 = or disjoint i32 %26, 6
  %38 = getelementptr inbounds float, ptr addrspace(3) %31, i32 %37
  %39 = lshr exact i32 %29, 1
  %40 = and i32 %39, 252
  %41 = getelementptr float, ptr addrspace(3) @global_smem, i32 %40
  %42 = getelementptr float, ptr addrspace(3) %41, i32 %29
  %43 = sext i32 %23 to i64, !dbg !18
  %invariant.op = or disjoint i32 %21, 1, !dbg !18
  %invariant.op66 = or disjoint i32 %21, 1, !dbg !18
  %invariant.op68 = or disjoint i32 %21, 1, !dbg !18
  %invariant.gep = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !18
  %44 = getelementptr inbounds i8, ptr addrspace(3) %42, i32 4
  %45 = getelementptr inbounds i8, ptr addrspace(3) %42, i32 8
  %46 = getelementptr inbounds i8, ptr addrspace(3) %42, i32 12
  %47 = insertelement <4 x i1> poison, i1 %17, i64 0, !dbg !19
  %48 = shufflevector <4 x i1> %47, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !19
  br label %49, !dbg !18

49:                                               ; preds = %7, %._crit_edge
  %indvars.iv = phi i64 [ 0, %7 ], [ %indvars.iv.next, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %7 ], [ %219, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %7 ], [ %220, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %7 ], [ %221, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %7 ], [ %222, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %7 ], [ %215, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %7 ], [ %216, %._crit_edge ]
  %56 = phi float [ 0.000000e+00, %7 ], [ %217, %._crit_edge ]
  %57 = phi float [ 0.000000e+00, %7 ], [ %218, %._crit_edge ]
  %58 = phi <4 x float> [ zeroinitializer, %7 ], [ %214, %._crit_edge ]
  %59 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !20
  %.masked = and i32 %59, 8, !dbg !20
  %60 = or disjoint i32 %.masked, %.lobit, !dbg !20
  %61 = shl nuw nsw i32 %60, 1, !dbg !21
  %62 = or disjoint i32 %61, 4, !dbg !21
  %63 = or disjoint i32 %61, 8, !dbg !21
  %64 = or disjoint i32 %61, 12, !dbg !21
  %indvars.iv.tr = trunc i64 %indvars.iv to i32, !dbg !22
  %65 = shl nuw nsw i32 %indvars.iv.tr, 2, !dbg !22
  %66 = and i32 %65, 4032, !dbg !22
  %67 = or disjoint i32 %62, %66, !dbg !23
  %68 = or disjoint i32 %63, %66, !dbg !23
  %69 = or disjoint i32 %64, %66, !dbg !23
  %70 = or disjoint i32 %61, %21, !dbg !23
  %71 = or disjoint i32 %70, %66, !dbg !24
  %72 = or i32 %67, %21, !dbg !24
  %73 = or i32 %68, %21, !dbg !24
  %74 = or i32 %69, %21, !dbg !24
  %75 = sext i32 %71 to i64, !dbg !25
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !25
  %77 = sext i32 %72 to i64, !dbg !25
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !25
  %79 = sext i32 %73 to i64, !dbg !25
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !25
  %81 = sext i32 %74 to i64, !dbg !25
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !25
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %17, i32 0, i1 %17) #5, !dbg !26
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %17, i32 0, i1 %17) #5, !dbg !26
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %17, i32 0, i1 %17) #5, !dbg !26
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %17, i32 0, i1 %17) #5, !dbg !26
  %87 = or disjoint i32 %71, 1, !dbg !27
  %.reass = or i32 %67, %invariant.op
  %.reass67 = or i32 %68, %invariant.op66
  %.reass69 = or i32 %69, %invariant.op68
  %88 = sext i32 %87 to i64, !dbg !28
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !28
  %90 = sext i32 %.reass to i64, !dbg !28
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !28
  %92 = sext i32 %.reass67 to i64, !dbg !28
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !28
  %94 = sext i32 %.reass69 to i64, !dbg !28
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !28
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %17, i32 0, i1 %17) #5, !dbg !29
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %17, i32 0, i1 %17) #5, !dbg !29
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %17, i32 0, i1 %17) #5, !dbg !29
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %17, i32 0, i1 %17) #5, !dbg !29
  %100 = or disjoint i32 %62, %65, !dbg !30
  %101 = or i32 %100, 32, !dbg !30
  %102 = or disjoint i32 %63, %65, !dbg !30
  %103 = or i32 %102, 32, !dbg !30
  %104 = or disjoint i32 %64, %65, !dbg !30
  %105 = or i32 %104, 32, !dbg !30
  %106 = or i32 %70, %65, !dbg !31
  %107 = or i32 %106, 32, !dbg !31
  %108 = add i32 %101, %21, !dbg !31
  %109 = add i32 %103, %21, !dbg !31
  %110 = add i32 %105, %21, !dbg !31
  %111 = sext i32 %107 to i64, !dbg !32
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !32
  %113 = sext i32 %108 to i64, !dbg !32
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !32
  %115 = sext i32 %109 to i64, !dbg !32
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !32
  %117 = sext i32 %110 to i64, !dbg !32
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !32
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %17, i32 0, i1 %17) #5, !dbg !33
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %17, i32 0, i1 %17) #5, !dbg !33
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %17, i32 0, i1 %17) #5, !dbg !33
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %17, i32 0, i1 %17) #5, !dbg !33
  %123 = or i32 %100, 33, !dbg !34
  %124 = or i32 %102, 33, !dbg !34
  %125 = or i32 %104, 33, !dbg !34
  %126 = or i32 %106, 33, !dbg !35
  %127 = add i32 %123, %21, !dbg !35
  %128 = add i32 %124, %21, !dbg !35
  %129 = add i32 %125, %21, !dbg !35
  %130 = sext i32 %126 to i64, !dbg !36
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !36
  %132 = sext i32 %127 to i64, !dbg !36
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !36
  %134 = sext i32 %128 to i64, !dbg !36
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !36
  %136 = sext i32 %129 to i64, !dbg !36
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !36
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %17, i32 0, i1 %17) #5, !dbg !37
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %17, i32 0, i1 %17) #5, !dbg !37
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 %17, i32 0, i1 %17) #5, !dbg !37
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %17, i32 0, i1 %17) #5, !dbg !37
  %142 = insertelement <4 x i32> poison, i32 %83, i64 0, !dbg !26
  %143 = insertelement <4 x i32> %142, i32 %84, i64 1, !dbg !26
  %144 = insertelement <4 x i32> %143, i32 %85, i64 2, !dbg !26
  %145 = insertelement <4 x i32> %144, i32 %86, i64 3, !dbg !26
  %146 = bitcast <4 x i32> %145 to <4 x float>, !dbg !26
  %147 = insertelement <4 x i32> poison, i32 %96, i64 0, !dbg !29
  %148 = insertelement <4 x i32> %147, i32 %97, i64 1, !dbg !29
  %149 = insertelement <4 x i32> %148, i32 %98, i64 2, !dbg !29
  %150 = insertelement <4 x i32> %149, i32 %99, i64 3, !dbg !29
  %151 = bitcast <4 x i32> %150 to <4 x float>, !dbg !29
  %152 = insertelement <4 x i32> poison, i32 %119, i64 0, !dbg !33
  %153 = insertelement <4 x i32> %152, i32 %120, i64 1, !dbg !33
  %154 = insertelement <4 x i32> %153, i32 %121, i64 2, !dbg !33
  %155 = insertelement <4 x i32> %154, i32 %122, i64 3, !dbg !33
  %156 = bitcast <4 x i32> %155 to <4 x float>, !dbg !33
  %157 = insertelement <4 x i32> poison, i32 %138, i64 0, !dbg !37
  %158 = insertelement <4 x i32> %157, i32 %139, i64 1, !dbg !37
  %159 = insertelement <4 x i32> %158, i32 %140, i64 2, !dbg !37
  %160 = insertelement <4 x i32> %159, i32 %141, i64 3, !dbg !37
  %161 = bitcast <4 x i32> %160 to <4 x float>, !dbg !37
  %162 = fadd <4 x float> %146, %151, !dbg !38
  %163 = fadd <4 x float> %162, %156, !dbg !39
  %164 = fadd <4 x float> %163, %161, !dbg !40
  %165 = fmul <4 x float> %164, splat (float 2.500000e-01), !dbg !41
  %166 = icmp eq i64 %indvars.iv, 0, !dbg !42
  br i1 %166, label %._crit_edge, label %167, !dbg !43

167:                                              ; preds = %49
  %168 = fsub <4 x float> %165, %58, !dbg !47
  %169 = extractelement <4 x float> %168, i64 0, !dbg !47
  %170 = fsub <4 x float> %165, %58, !dbg !47
  %171 = extractelement <4 x float> %170, i64 1, !dbg !47
  %172 = fsub <4 x float> %165, %58, !dbg !47
  %173 = extractelement <4 x float> %172, i64 2, !dbg !47
  %174 = fsub <4 x float> %165, %58, !dbg !47
  %175 = extractelement <4 x float> %174, i64 3, !dbg !47
  %176 = fadd float %50, 1.000000e+00, !dbg !48
  %177 = fadd float %51, 1.000000e+00, !dbg !48
  %178 = fadd float %52, 1.000000e+00, !dbg !48
  %179 = fadd float %53, 1.000000e+00, !dbg !48
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %169, float %176) #5, !dbg !49
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %171, float %177) #5, !dbg !49
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %173, float %178) #5, !dbg !49
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float %179) #5, !dbg !49
  %184 = insertelement <4 x float> poison, float %180, i64 0, !dbg !50
  %185 = insertelement <4 x float> %184, float %181, i64 1, !dbg !50
  %186 = insertelement <4 x float> %185, float %182, i64 2, !dbg !50
  %187 = insertelement <4 x float> %186, float %183, i64 3, !dbg !50
  %188 = fadd <4 x float> %58, %187, !dbg !50
  %189 = fsub <4 x float> %165, %188, !dbg !51
  %190 = fsub <4 x float> %165, %188, !dbg !51
  %191 = fsub <4 x float> %165, %188, !dbg !51
  %192 = fsub <4 x float> %165, %188, !dbg !51
  %193 = fmul <4 x float> %168, %189, !dbg !52
  %194 = extractelement <4 x float> %193, i64 0, !dbg !52
  %195 = fmul <4 x float> %170, %190, !dbg !52
  %196 = extractelement <4 x float> %195, i64 1, !dbg !52
  %197 = fmul <4 x float> %172, %191, !dbg !52
  %198 = extractelement <4 x float> %197, i64 2, !dbg !52
  %199 = fmul <4 x float> %174, %192, !dbg !52
  %200 = extractelement <4 x float> %199, i64 3, !dbg !52
  %201 = fadd float %54, %194, !dbg !53
  %202 = fadd float %55, %196, !dbg !53
  %203 = fadd float %56, %198, !dbg !53
  %204 = fadd float %57, %200, !dbg !53
  br label %._crit_edge, !dbg !43

._crit_edge:                                      ; preds = %49, %167
  %205 = phi float [ %201, %167 ], [ 0.000000e+00, %49 ], !dbg !46
  %206 = phi float [ %202, %167 ], [ 0.000000e+00, %49 ], !dbg !46
  %207 = phi float [ %203, %167 ], [ 0.000000e+00, %49 ], !dbg !46
  %208 = phi float [ %204, %167 ], [ 0.000000e+00, %49 ], !dbg !46
  %209 = phi float [ %176, %167 ], [ 1.000000e+00, %49 ], !dbg !46
  %210 = phi float [ %177, %167 ], [ 1.000000e+00, %49 ], !dbg !46
  %211 = phi float [ %178, %167 ], [ 1.000000e+00, %49 ], !dbg !46
  %212 = phi float [ %179, %167 ], [ 1.000000e+00, %49 ], !dbg !46
  %213 = phi <4 x float> [ %188, %167 ], [ %165, %49 ]
  %214 = select <4 x i1> %48, <4 x float> %213, <4 x float> %58, !dbg !19
  %215 = select i1 %17, float %205, float %54, !dbg !54
  %216 = select i1 %17, float %206, float %55, !dbg !54
  %217 = select i1 %17, float %207, float %56, !dbg !54
  %218 = select i1 %17, float %208, float %57, !dbg !54
  %219 = select i1 %17, float %209, float %50, !dbg !55
  %220 = select i1 %17, float %210, float %51, !dbg !55
  %221 = select i1 %17, float %211, float %52, !dbg !55
  %222 = select i1 %17, float %212, float %53, !dbg !55
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %indvars.iv, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %223 = extractelement <4 x float> %165, i64 0, !dbg !57
  %224 = bitcast float %223 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %32, <1 x i32> %224, i1 true) #5, !dbg !57
  %225 = extractelement <4 x float> %165, i64 1, !dbg !57
  %226 = bitcast float %225 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %34, <1 x i32> %226, i1 true) #5, !dbg !57
  %227 = extractelement <4 x float> %165, i64 2, !dbg !57
  %228 = bitcast float %227 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %36, <1 x i32> %228, i1 true) #5, !dbg !57
  %229 = extractelement <4 x float> %165, i64 3, !dbg !57
  %230 = bitcast float %229 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %38, <1 x i32> %230, i1 true) #5, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %.extract = load i32, ptr addrspace(3) %42, align 16, !dbg !57
  %.extract17 = load i32, ptr addrspace(3) %44, align 4, !dbg !57
  %.extract18 = load i32, ptr addrspace(3) %45, align 8, !dbg !57
  %.extract19 = load i32, ptr addrspace(3) %46, align 4, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract17, i32 %.extract18, i32 %.extract19, ptr addrspace(1) %gep, i1 %18) #5, !dbg !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !18
  %231 = icmp samesign ult i64 %indvars.iv, 1016, !dbg !18
  br i1 %231, label %49, label %232, !dbg !18

232:                                              ; preds = %._crit_edge
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %233 = extractelement <4 x float> %214, i64 0, !dbg !60
  %234 = extractelement <4 x float> %214, i64 1, !dbg !60
  %235 = fsub float %234, %233, !dbg !60
  %236 = fadd float %219, %220, !dbg !62
  %237 = fcmp oeq float %236, 0.000000e+00, !dbg !63
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %220, float %236) #5, !dbg !64
  %239 = select i1 %237, float 0.000000e+00, float %238, !dbg !65
  %240 = fmul float %235, %239, !dbg !66
  %241 = fadd float %233, %240, !dbg !67
  %242 = fadd float %215, %216, !dbg !68
  %243 = fmul float %235, %235, !dbg !69
  %244 = fmul float %243, %219, !dbg !70
  %245 = fmul float %244, %239, !dbg !71
  %246 = fadd float %242, %245, !dbg !72
  %247 = extractelement <4 x float> %214, i64 2, !dbg !60
  %248 = fsub float %247, %241, !dbg !60
  %249 = fadd float %221, %236, !dbg !62
  %250 = fcmp oeq float %249, 0.000000e+00, !dbg !63
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %221, float %249) #5, !dbg !64
  %252 = select i1 %250, float 0.000000e+00, float %251, !dbg !65
  %253 = fmul float %252, %248, !dbg !66
  %254 = fadd float %241, %253, !dbg !67
  %255 = fadd float %217, %246, !dbg !68
  %256 = fmul float %248, %248, !dbg !69
  %257 = fmul float %236, %256, !dbg !70
  %258 = fmul float %252, %257, !dbg !71
  %259 = fadd float %255, %258, !dbg !72
  %260 = extractelement <4 x float> %214, i64 3, !dbg !60
  %261 = fsub float %260, %254, !dbg !60
  %262 = fadd float %222, %249, !dbg !62
  %263 = fcmp oeq float %262, 0.000000e+00, !dbg !63
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %222, float %262) #5, !dbg !64
  %265 = select i1 %263, float 0.000000e+00, float %264, !dbg !65
  %266 = fmul float %265, %261, !dbg !66
  %267 = fadd float %254, %266, !dbg !67
  %268 = fadd float %218, %259, !dbg !68
  %269 = fmul float %261, %261, !dbg !69
  %270 = fmul float %249, %269, !dbg !70
  %271 = fmul float %265, %270, !dbg !71
  %272 = fadd float %268, %271, !dbg !72
  %273 = lshr i32 %10, 6, !dbg !58
  %274 = and i32 %273, 1, !dbg !58
  %275 = shl nuw nsw i32 %11, 1, !dbg !58
  %276 = or disjoint i32 %275, %274, !dbg !58
  %277 = getelementptr float, ptr addrspace(3) @global_smem, i32 %276, !dbg !58
  %278 = bitcast float %267 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %277, <1 x i32> %278, i1 true) #5, !dbg !58
  %279 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %276, !dbg !58
  %280 = bitcast float %272 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %280, i1 true) #5, !dbg !58
  %281 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %276, !dbg !58
  %282 = bitcast float %262 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %281, <1 x i32> %282, i1 true) #5, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %283 = icmp slt i32 %10, 128, !dbg !58
  %284 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !58
  %285 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %284, i1 %283) #5, !dbg !58
  %286 = bitcast i32 %285 to float, !dbg !58
  %287 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %10, !dbg !58
  %288 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %287, i1 %283) #5, !dbg !58
  %289 = bitcast i32 %288 to float, !dbg !58
  %290 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %10, !dbg !58
  %291 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %290, i1 %283) #5, !dbg !58
  %292 = bitcast i32 %291 to float, !dbg !58
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 1, i32 31), !dbg !58
  %294 = bitcast i32 %293 to float, !dbg !58
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 1, i32 31), !dbg !58
  %296 = bitcast i32 %295 to float, !dbg !58
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 1, i32 31), !dbg !58
  %298 = bitcast i32 %297 to float, !dbg !58
  %299 = fsub float %294, %286, !dbg !60
  %300 = fadd float %292, %298, !dbg !62
  %301 = fcmp oeq float %300, 0.000000e+00, !dbg !63
  %302 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %298, float %300) #5, !dbg !64
  %303 = select i1 %301, float 0.000000e+00, float %302, !dbg !65
  %304 = fmul float %299, %303, !dbg !66
  %305 = fadd float %304, %286, !dbg !67
  %306 = fadd float %289, %296, !dbg !68
  %307 = fmul float %299, %299, !dbg !69
  %308 = fmul float %307, %292, !dbg !70
  %309 = fmul float %308, %303, !dbg !71
  %310 = fadd float %306, %309, !dbg !72
  %311 = and i32 %10, 1, !dbg !58
  %312 = icmp eq i32 %311, 0, !dbg !58
  %313 = and i1 %283, %312, !dbg !58
  %314 = bitcast float %305 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %314, i1 %313) #5, !dbg !58
  %315 = bitcast float %310 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, <1 x i32> %315, i1 %313) #5, !dbg !58
  %316 = bitcast float %300 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %316, i1 %313) #5, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %317 = getelementptr float, ptr addrspace(3) @global_smem, i32 %275, !dbg !58
  %318 = load i32, ptr addrspace(3) %317, align 8, !dbg !58
  %319 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %275, !dbg !58
  %320 = load float, ptr addrspace(3) %319, align 8, !dbg !58
  %321 = sext i32 %15 to i64, !dbg !73
  %322 = getelementptr float, ptr addrspace(1) %2, i64 %321, !dbg !73
  %323 = icmp eq i32 %274, 0, !dbg !74
  %324 = and i1 %323, %17, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %318, ptr addrspace(1) %322, i1 %324) #5, !dbg !74
  %325 = getelementptr float, ptr addrspace(1) %3, i64 %321, !dbg !75
  %326 = bitcast float %320 to i32, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %326, ptr addrspace(1) %325, i1 %324) #5, !dbg !76
  %327 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %320, float 1.024000e+03) #5, !dbg !77
  %328 = fadd float %327, 0x3EE4F8B580000000, !dbg !78
  %329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !79
  %.not.i = icmp eq i32 %329, 0, !dbg !79
  br i1 %.not.i, label %332, label %330, !dbg !79

330:                                              ; preds = %232
  %331 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %328), !dbg !79
  br label %__nv_rsqrtf.exit, !dbg !79

332:                                              ; preds = %232
  %333 = tail call float @llvm.nvvm.rsqrt.approx.f(float %328), !dbg !79
  br label %__nv_rsqrtf.exit, !dbg !79

__nv_rsqrtf.exit:                                 ; preds = %330, %332
  %.0.i = phi float [ %331, %330 ], [ %333, %332 ], !dbg !79
  %334 = getelementptr float, ptr addrspace(1) %4, i64 %321, !dbg !80
  %335 = bitcast float %.0.i to i32, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %335, ptr addrspace(1) %334, i1 %324) #5, !dbg !81
  ret void, !dbg !82
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr3pylpwulyboeq5xoewxptx33nxuxxmsninhp4hwmv5qvauxh6a.py", directory: "inductor_cache/r3")
!4 = !{ptr @triton_red_fused_avg_pool2d_native_group_norm_7, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_avg_pool2d_native_group_norm_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_avg_pool2d_native_group_norm_7", linkageName: "triton_red_fused_avg_pool2d_native_group_norm_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 36, column: 54, scope: !7)
!17 = !DILocation(line: 52, column: 39, scope: !7)
!18 = !DILocation(line: 30, column: 36, scope: !7)
!19 = !DILocation(line: 49, column: 62, scope: !7)
!20 = !DILocation(line: 33, column: 23, scope: !7)
!21 = !DILocation(line: 36, column: 36, scope: !7)
!22 = !DILocation(line: 36, column: 44, scope: !7)
!23 = !DILocation(line: 36, column: 41, scope: !7)
!24 = !DILocation(line: 36, column: 49, scope: !7)
!25 = !DILocation(line: 36, column: 34, scope: !7)
!26 = !DILocation(line: 36, column: 59, scope: !7)
!27 = !DILocation(line: 37, column: 53, scope: !7)
!28 = !DILocation(line: 37, column: 34, scope: !7)
!29 = !DILocation(line: 37, column: 63, scope: !7)
!30 = !DILocation(line: 38, column: 46, scope: !7)
!31 = !DILocation(line: 38, column: 54, scope: !7)
!32 = !DILocation(line: 38, column: 34, scope: !7)
!33 = !DILocation(line: 38, column: 64, scope: !7)
!34 = !DILocation(line: 39, column: 46, scope: !7)
!35 = !DILocation(line: 39, column: 54, scope: !7)
!36 = !DILocation(line: 39, column: 34, scope: !7)
!37 = !DILocation(line: 39, column: 64, scope: !7)
!38 = !DILocation(line: 40, column: 22, scope: !7)
!39 = !DILocation(line: 41, column: 22, scope: !7)
!40 = !DILocation(line: 42, column: 22, scope: !7)
!41 = !DILocation(line: 44, column: 22, scope: !7)
!42 = !DILocation(line: 47, column: 65, scope: !7)
!43 = !DILocation(line: 178, column: 7, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 47, column: 54, scope: !7)
!47 = !DILocation(line: 183, column: 24, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 184, column: 30, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 185, column: 34, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 185, column: 26, scope: !44, inlinedAt: !46)
!51 = !DILocation(line: 186, column: 39, scope: !44, inlinedAt: !46)
!52 = !DILocation(line: 186, column: 31, scope: !44, inlinedAt: !46)
!53 = !DILocation(line: 186, column: 22, scope: !44, inlinedAt: !46)
!54 = !DILocation(line: 50, column: 58, scope: !7)
!55 = !DILocation(line: 51, column: 66, scope: !7)
!56 = !DILocation(line: 52, column: 29, scope: !7)
!57 = !DILocation(line: 52, column: 50, scope: !7)
!58 = !DILocation(line: 204, column: 46, scope: !44, inlinedAt: !59)
!59 = !DILocation(line: 54, column: 44, scope: !7)
!60 = !DILocation(line: 192, column: 21, scope: !61, inlinedAt: !59)
!61 = distinct !DILexicalBlockFile(scope: !44, file: !45, discriminator: 0)
!62 = !DILocation(line: 193, column: 28, scope: !61, inlinedAt: !59)
!63 = !DILocation(line: 194, column: 39, scope: !61, inlinedAt: !59)
!64 = !DILocation(line: 194, column: 60, scope: !61, inlinedAt: !59)
!65 = !DILocation(line: 194, column: 49, scope: !61, inlinedAt: !59)
!66 = !DILocation(line: 196, column: 25, scope: !61, inlinedAt: !59)
!67 = !DILocation(line: 196, column: 17, scope: !61, inlinedAt: !59)
!68 = !DILocation(line: 197, column: 15, scope: !61, inlinedAt: !59)
!69 = !DILocation(line: 197, column: 30, scope: !61, inlinedAt: !59)
!70 = !DILocation(line: 197, column: 38, scope: !61, inlinedAt: !59)
!71 = !DILocation(line: 197, column: 49, scope: !61, inlinedAt: !59)
!72 = !DILocation(line: 197, column: 22, scope: !61, inlinedAt: !59)
!73 = !DILocation(line: 59, column: 25, scope: !7)
!74 = !DILocation(line: 59, column: 37, scope: !7)
!75 = !DILocation(line: 60, column: 25, scope: !7)
!76 = !DILocation(line: 60, column: 37, scope: !7)
!77 = !DILocation(line: 62, column: 20, scope: !7)
!78 = !DILocation(line: 64, column: 20, scope: !7)
!79 = !DILocation(line: 65, column: 28, scope: !7)
!80 = !DILocation(line: 66, column: 25, scope: !7)
!81 = !DILocation(line: 66, column: 37, scope: !7)
!82 = !DILocation(line: 66, column: 4, scope: !7)
