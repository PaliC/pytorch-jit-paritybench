#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [1], order = [0]}>
#loc = loc("inductor_cache/hy/chyqbqdlhfecxnc3laebkgs2ogiyxcc5bqsq4zettzhq7lkacnek.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 1 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused__to_copy_add_arange_clamp_mul_sub_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/hy/chyqbqdlhfecxnc3laebkgs2ogiyxcc5bqsq4zettzhq7lkacnek.py":19:0), %arg1: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/hy/chyqbqdlhfecxnc3laebkgs2ogiyxcc5bqsq4zettzhq7lkacnek.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1.000000e+00> : tensor<16xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<16xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5.000000e-01> : tensor<16xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<16> : tensor<16xi32, #blocked> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<16xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<16xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_2 : tensor<16xi32, #blocked> loc(#loc6)
    %6 = arith.sitofp %4 : tensor<16xi32, #blocked> to tensor<16xf32, #blocked> loc(#loc7)
    %7 = arith.addf %6, %cst_1 : tensor<16xf32, #blocked> loc(#loc8)
    %8 = arith.mulf %7, %cst_1 : tensor<16xf32, #blocked> loc(#loc9)
    %9 = arith.subf %8, %cst_1 : tensor<16xf32, #blocked> loc(#loc10)
    %10 = arith.cmpf ogt, %9, %cst_0 : tensor<16xf32, #blocked> loc(#loc28)
    %11 = arith.cmpf une, %9, %9 : tensor<16xf32, #blocked> loc(#loc29)
    %12 = arith.ori %10, %11 : tensor<16xi1, #blocked> loc(#loc30)
    %13 = arith.select %12, %9, %cst_0 : tensor<16xi1, #blocked>, tensor<16xf32, #blocked> loc(#loc31)
    %14 = arith.fptosi %13 : tensor<16xf32, #blocked> to tensor<16xi32, #blocked> loc(#loc16)
    %15 = arith.sitofp %14 : tensor<16xi32, #blocked> to tensor<16xf32, #blocked> loc(#loc17)
    %16 = arith.subf %13, %15 : tensor<16xf32, #blocked> loc(#loc18)
    %17 = arith.cmpf ogt, %16, %cst_0 : tensor<16xf32, #blocked> loc(#loc32)
    %18 = arith.cmpf une, %16, %16 : tensor<16xf32, #blocked> loc(#loc33)
    %19 = arith.ori %17, %18 : tensor<16xi1, #blocked> loc(#loc34)
    %20 = arith.select %19, %16, %cst_0 : tensor<16xi1, #blocked>, tensor<16xf32, #blocked> loc(#loc35)
    %21 = arith.cmpf olt, %20, %cst : tensor<16xf32, #blocked> loc(#loc36)
    %22 = arith.cmpf une, %20, %20 : tensor<16xf32, #blocked> loc(#loc37)
    %23 = arith.ori %21, %22 : tensor<16xi1, #blocked> loc(#loc38)
    %24 = arith.select %23, %20, %cst : tensor<16xi1, #blocked>, tensor<16xf32, #blocked> loc(#loc39)
    %25 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<16x!tt.ptr<f32>, #blocked> loc(#loc25)
    %26 = tt.addptr %25, %4 : tensor<16x!tt.ptr<f32>, #blocked>, tensor<16xi32, #blocked> loc(#loc25)
    tt.store %26, %24, %5 : tensor<16x!tt.ptr<f32>, #blocked> loc(#loc26)
    tt.return loc(#loc27)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/hy/chyqbqdlhfecxnc3laebkgs2ogiyxcc5bqsq4zettzhq7lkacnek.py":21:28)
#loc3 = loc("inductor_cache/hy/chyqbqdlhfecxnc3laebkgs2ogiyxcc5bqsq4zettzhq7lkacnek.py":21:33)
#loc4 = loc("inductor_cache/hy/chyqbqdlhfecxnc3laebkgs2ogiyxcc5bqsq4zettzhq7lkacnek.py":22:36)
#loc5 = loc("inductor_cache/hy/chyqbqdlhfecxnc3laebkgs2ogiyxcc5bqsq4zettzhq7lkacnek.py":22:23)
#loc6 = loc("inductor_cache/hy/chyqbqdlhfecxnc3laebkgs2ogiyxcc5bqsq4zettzhq7lkacnek.py":23:21)
#loc7 = loc("inductor_cache/hy/chyqbqdlhfecxnc3laebkgs2ogiyxcc5bqsq4zettzhq7lkacnek.py":26:19)
#loc8 = loc("inductor_cache/hy/chyqbqdlhfecxnc3laebkgs2ogiyxcc5bqsq4zettzhq7lkacnek.py":28:18)
#loc9 = loc("inductor_cache/hy/chyqbqdlhfecxnc3laebkgs2ogiyxcc5bqsq4zettzhq7lkacnek.py":29:18)
#loc10 = loc("inductor_cache/hy/chyqbqdlhfecxnc3laebkgs2ogiyxcc5bqsq4zettzhq7lkacnek.py":30:18)
#loc11 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc12 = loc("inductor_cache/hy/chyqbqdlhfecxnc3laebkgs2ogiyxcc5bqsq4zettzhq7lkacnek.py":32:40)
#loc13 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc14 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc15 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc16 = loc("inductor_cache/hy/chyqbqdlhfecxnc3laebkgs2ogiyxcc5bqsq4zettzhq7lkacnek.py":33:19)
#loc17 = loc("inductor_cache/hy/chyqbqdlhfecxnc3laebkgs2ogiyxcc5bqsq4zettzhq7lkacnek.py":34:19)
#loc18 = loc("inductor_cache/hy/chyqbqdlhfecxnc3laebkgs2ogiyxcc5bqsq4zettzhq7lkacnek.py":35:19)
#loc19 = loc("inductor_cache/hy/chyqbqdlhfecxnc3laebkgs2ogiyxcc5bqsq4zettzhq7lkacnek.py":36:42)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":110:15)
#loc21 = loc("inductor_cache/hy/chyqbqdlhfecxnc3laebkgs2ogiyxcc5bqsq4zettzhq7lkacnek.py":38:42)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":112:21)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":112:16)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":113:29)
#loc25 = loc("inductor_cache/hy/chyqbqdlhfecxnc3laebkgs2ogiyxcc5bqsq4zettzhq7lkacnek.py":39:25)
#loc26 = loc("inductor_cache/hy/chyqbqdlhfecxnc3laebkgs2ogiyxcc5bqsq4zettzhq7lkacnek.py":39:37)
#loc27 = loc("inductor_cache/hy/chyqbqdlhfecxnc3laebkgs2ogiyxcc5bqsq4zettzhq7lkacnek.py":39:4)
#loc28 = loc(callsite(#loc11 at #loc12))
#loc29 = loc(callsite(#loc13 at #loc12))
#loc30 = loc(callsite(#loc14 at #loc12))
#loc31 = loc(callsite(#loc15 at #loc12))
#loc32 = loc(callsite(#loc11 at #loc19))
#loc33 = loc(callsite(#loc13 at #loc19))
#loc34 = loc(callsite(#loc14 at #loc19))
#loc35 = loc(callsite(#loc15 at #loc19))
#loc36 = loc(callsite(#loc20 at #loc21))
#loc37 = loc(callsite(#loc22 at #loc21))
#loc38 = loc(callsite(#loc23 at #loc21))
#loc39 = loc(callsite(#loc24 at #loc21))
