; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_convolution_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %.frozen = freeze i32 %11, !dbg !14
  %12 = sdiv i32 %.frozen, 4096, !dbg !14
  %13 = srem i32 %12, 4, !dbg !15
  %14 = mul i32 %12, 4096, !dbg !16
  %.decomposed = sub i32 %.frozen, %14, !dbg !16
  %15 = sdiv i32 %11, 16384, !dbg !17
  %16 = sext i32 %11 to i64, !dbg !18
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !18
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #1, !dbg !19
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !19
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !19
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !19
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !19
  %23 = bitcast i32 %19 to float, !dbg !19
  %24 = bitcast i32 %20 to float, !dbg !19
  %25 = bitcast i32 %21 to float, !dbg !19
  %26 = bitcast i32 %22 to float, !dbg !19
  %27 = sext i32 %13 to i64, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !20
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !21
  %30 = bitcast i32 %29 to float, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !21
  %32 = bitcast i32 %31 to float, !dbg !21
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !21
  %34 = bitcast i32 %33 to float, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !21
  %36 = bitcast i32 %35 to float, !dbg !21
  %37 = shl nsw i32 %15, 12, !dbg !22
  %38 = add nsw i32 %37, %.decomposed, !dbg !23
  %39 = sext i32 %38 to i64, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !24
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !25
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !25
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !25
  %46 = bitcast i32 %42 to float, !dbg !25
  %47 = bitcast i32 %43 to float, !dbg !25
  %48 = bitcast i32 %44 to float, !dbg !25
  %49 = bitcast i32 %45 to float, !dbg !25
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !26
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !27
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !27
  %56 = bitcast i32 %52 to float, !dbg !27
  %57 = bitcast i32 %53 to float, !dbg !27
  %58 = bitcast i32 %54 to float, !dbg !27
  %59 = bitcast i32 %55 to float, !dbg !27
  %60 = fadd float %23, %30, !dbg !28
  %61 = fadd float %24, %32, !dbg !28
  %62 = fadd float %25, %34, !dbg !28
  %63 = fadd float %26, %36, !dbg !28
  %64 = fsub float %60, %46, !dbg !29
  %65 = fsub float %61, %47, !dbg !29
  %66 = fsub float %62, %48, !dbg !29
  %67 = fsub float %63, %49, !dbg !29
  %68 = fmul float %64, 0x3FF7154760000000, !dbg !30
  %69 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %68) #1, !dbg !30
  %70 = fmul float %65, 0x3FF7154760000000, !dbg !30
  %71 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %70) #1, !dbg !30
  %72 = fmul float %66, 0x3FF7154760000000, !dbg !30
  %73 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %72) #1, !dbg !30
  %74 = fmul float %67, 0x3FF7154760000000, !dbg !30
  %75 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %74) #1, !dbg !30
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %69, float %56) #1, !dbg !31
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float %57) #1, !dbg !31
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float %58) #1, !dbg !31
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float %59) #1, !dbg !31
  %80 = bitcast float %76 to i32, !dbg !32
  %81 = bitcast float %77 to i32, !dbg !32
  %82 = bitcast float %78 to i32, !dbg !32
  %83 = bitcast float %79 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %80, i32 %81, i32 %82, i32 %83, ptr addrspace(1) %17, i1 true) #1, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c54fjovgcobxkgydxwbamyqw5vc4sdlvojrdxo65meegk6em7tuq.py", directory: "inductor_cache/54")
!4 = !{ptr @triton_poi_fused__softmax_convolution_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_convolution_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_convolution_18", linkageName: "triton_poi_fused__softmax_convolution_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 34, scope: !7)
!19 = !DILocation(line: 28, column: 39, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 40, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 45, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 45, scope: !7)
!28 = !DILocation(line: 32, column: 18, scope: !7)
!29 = !DILocation(line: 33, column: 18, scope: !7)
!30 = !DILocation(line: 34, column: 23, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 39, scope: !7)
!33 = !DILocation(line: 36, column: 4, scope: !7)
