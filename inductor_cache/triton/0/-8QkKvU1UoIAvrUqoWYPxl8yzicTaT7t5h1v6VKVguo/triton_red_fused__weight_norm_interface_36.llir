; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused__weight_norm_interface_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %.fr24 = freeze i32 %8, !dbg !11
  %9 = icmp slt i32 %.fr24, 1024, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = lshr i32 %10, 5, !dbg !12
  %13 = shl i32 %10, 2, !dbg !12
  %14 = and i32 %13, 2044, !dbg !12
  %15 = mul i32 %.fr24, 5120, !dbg !13
  %16 = add i32 %14, %15, !dbg !14
  %17 = sext i32 %16 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !15
  br i1 %9, label %.split.preheader, label %.split.us.preheader

.split.us.preheader:                              ; preds = %7
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #5, !dbg !16
  %20 = or disjoint i32 %14, 2048, !dbg !17
  %21 = add i32 %20, %15, !dbg !14
  %22 = sext i32 %21 to i64, !dbg !15
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !15
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #5, !dbg !16
  %25 = or disjoint i32 %14, 4096, !dbg !17
  %26 = add i32 %25, %15, !dbg !14
  %27 = sext i32 %26 to i64, !dbg !15
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !15
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #5, !dbg !16
  br label %.split23.us, !dbg !18

.split.preheader:                                 ; preds = %7
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !16
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !16
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !16
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !16
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !16
  %35 = bitcast i32 %33 to float, !dbg !16
  %36 = bitcast i32 %34 to float, !dbg !16
  %37 = fmul float %35, %35, !dbg !22
  %38 = fmul float %36, %36, !dbg !22
  %39 = or disjoint i32 %14, 2048, !dbg !17
  %40 = add i32 %39, %15, !dbg !14
  %41 = sext i32 %40 to i64, !dbg !15
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !15
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !16
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !16
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !16
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !16
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !16
  %48 = bitcast i32 %46 to float, !dbg !16
  %49 = bitcast i32 %47 to float, !dbg !16
  %50 = fmul float %48, %48, !dbg !22
  %51 = fmul float %49, %49, !dbg !22
  %52 = fadd float %37, %50, !dbg !23
  %53 = fadd float %38, %51, !dbg !23
  %54 = or disjoint i32 %14, 4096, !dbg !17
  %55 = icmp samesign ult i32 %54, 5120, !dbg !24
  %56 = add i32 %54, %15, !dbg !14
  %57 = sext i32 %56 to i64, !dbg !15
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !15
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #5, !dbg !16
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !16
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !16
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !16
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !16
  %64 = bitcast i32 %62 to float, !dbg !16
  %65 = bitcast i32 %63 to float, !dbg !16
  %66 = fmul float %64, %64, !dbg !22
  %67 = fmul float %65, %65, !dbg !22
  %68 = fadd float %52, %66, !dbg !23
  %69 = fadd float %53, %67, !dbg !23
  %70 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !16
  %71 = insertelement <2 x i32> %70, i32 %32, i64 1, !dbg !16
  %72 = bitcast <2 x i32> %71 to <2 x float>, !dbg !16
  %73 = fmul <2 x float> %72, %72, !dbg !22
  %74 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !16
  %75 = insertelement <2 x i32> %74, i32 %45, i64 1, !dbg !16
  %76 = bitcast <2 x i32> %75 to <2 x float>, !dbg !16
  %77 = fmul <2 x float> %76, %76, !dbg !22
  %78 = fadd <2 x float> %73, %77, !dbg !23
  %79 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !16
  %80 = insertelement <2 x i32> %79, i32 %61, i64 1, !dbg !16
  %81 = bitcast <2 x i32> %80 to <2 x float>, !dbg !16
  %82 = fmul <2 x float> %81, %81, !dbg !22
  %83 = fadd <2 x float> %78, %82, !dbg !23
  %84 = insertelement <2 x i1> poison, i1 %55, i64 0, !dbg !25
  %85 = shufflevector <2 x i1> %84, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !25
  %86 = select <2 x i1> %85, <2 x float> %83, <2 x float> %78, !dbg !25
  %87 = select i1 %55, float %68, float %52, !dbg !25
  %88 = select i1 %55, float %69, float %53, !dbg !25
  %shift = shufflevector <2 x float> %86, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !18
  %89 = fadd <2 x float> %86, %shift, !dbg !18
  %90 = extractelement <2 x float> %89, i64 0, !dbg !18
  %91 = fadd float %87, %90, !dbg !18
  %92 = fadd float %88, %91, !dbg !18
  br label %.split23.us, !dbg !18

.split23.us:                                      ; preds = %.split.us.preheader, %.split.preheader
  %93 = phi float [ %92, %.split.preheader ], [ 0.000000e+00, %.split.us.preheader ], !dbg !26
  %94 = bitcast float %93 to i32, !dbg !18
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 16, i32 31), !dbg !18
  %96 = bitcast i32 %95 to float, !dbg !18
  %97 = fadd float %93, %96, !dbg !26
  %98 = bitcast float %97 to i32, !dbg !18
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 8, i32 31), !dbg !18
  %100 = bitcast i32 %99 to float, !dbg !18
  %101 = fadd float %97, %100, !dbg !26
  %102 = bitcast float %101 to i32, !dbg !18
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 4, i32 31), !dbg !18
  %104 = bitcast i32 %103 to float, !dbg !18
  %105 = fadd float %101, %104, !dbg !26
  %106 = bitcast float %105 to i32, !dbg !18
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 2, i32 31), !dbg !18
  %108 = bitcast i32 %107 to float, !dbg !18
  %109 = fadd float %105, %108, !dbg !26
  %110 = bitcast float %109 to i32, !dbg !18
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 1, i32 31), !dbg !18
  %112 = bitcast i32 %111 to float, !dbg !18
  %113 = fadd float %109, %112, !dbg !26
  %114 = icmp eq i32 %11, 0, !dbg !18
  %115 = and i32 %12, 15, !dbg !18
  %116 = getelementptr float, ptr addrspace(3) @global_smem, i32 %115, !dbg !18
  %117 = bitcast float %113 to <1 x i32>, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 %114) #5, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %118 = icmp slt i32 %10, 16, !dbg !18
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !18
  %120 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %119, i1 %118) #5, !dbg !18
  %121 = bitcast i32 %120 to float, !dbg !18
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 8, i32 31), !dbg !18
  %123 = bitcast i32 %122 to float, !dbg !18
  %124 = fadd float %121, %123, !dbg !26
  %125 = bitcast float %124 to i32, !dbg !18
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 4, i32 31), !dbg !18
  %127 = bitcast i32 %126 to float, !dbg !18
  %128 = fadd float %124, %127, !dbg !26
  %129 = bitcast float %128 to i32, !dbg !18
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 2, i32 31), !dbg !18
  %131 = bitcast i32 %130 to float, !dbg !18
  %132 = fadd float %128, %131, !dbg !26
  %133 = bitcast float %132 to i32, !dbg !18
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 1, i32 31), !dbg !18
  %135 = bitcast i32 %134 to float, !dbg !18
  %136 = fadd float %132, %135, !dbg !26
  %137 = and i32 %10, 15, !dbg !18
  %138 = icmp eq i32 %137, 0, !dbg !18
  %139 = and i1 %118, %138, !dbg !18
  %140 = bitcast float %136 to <1 x i32>, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %140, i1 %139) #5, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %141 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !18
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %.not.i = icmp eq i32 %142, 0, !dbg !28
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %.not1.i = icmp eq i32 %143, 0, !dbg !28
  br i1 %.not.i, label %149, label %144, !dbg !28

144:                                              ; preds = %.split23.us
  br i1 %.not1.i, label %147, label %145, !dbg !28

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %141) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %141) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

149:                                              ; preds = %.split23.us
  br i1 %.not1.i, label %152, label %150, !dbg !28

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.f(float %141) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.f(float %141) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %145, %147, %150, %152
  %.0.i = phi float [ %146, %145 ], [ %148, %147 ], [ %151, %150 ], [ %153, %152 ], !dbg !28
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %.not.i17 = icmp eq i32 %160, 0, !dbg !28
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %.not1.i20 = icmp eq i32 %161, 0, !dbg !28
  br i1 %.not.i17, label %167, label %162, !dbg !28

162:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %165, label %163, !dbg !28

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %141) #5, !dbg !28
  br label %__nv_sqrtf.exit21, !dbg !28

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %141) #5, !dbg !28
  br label %__nv_sqrtf.exit21, !dbg !28

167:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %170, label %168, !dbg !28

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.f(float %141) #5, !dbg !28
  br label %__nv_sqrtf.exit21, !dbg !28

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.f(float %141) #5, !dbg !28
  br label %__nv_sqrtf.exit21, !dbg !28

__nv_sqrtf.exit21:                                ; preds = %163, %165, %168, %170
  %.0.i19 = phi float [ %164, %163 ], [ %166, %165 ], [ %169, %168 ], [ %171, %170 ], !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %172 = sext i32 %.fr24 to i64, !dbg !30
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !30
  %urem = and i32 %10, 511, !dbg !31
  %174 = icmp eq i32 %urem, 0, !dbg !31
  %175 = bitcast float %.0.i to i32, !dbg !31
  %176 = and i1 %174, %9, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %175, ptr addrspace(1) %173, i1 %176) #5, !dbg !31
  %177 = getelementptr float, ptr addrspace(1) %2, i64 %172, !dbg !32
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 %9) #5, !dbg !33
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 %9) #5, !dbg !33
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 %9) #5, !dbg !33
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 %9) #5, !dbg !33
  %182 = bitcast i32 %181 to float, !dbg !33
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %182, float %.0.i19) #5, !dbg !34
  %184 = add i32 %14, %15, !dbg !35
  %185 = sext i32 %184 to i64, !dbg !36
  %186 = getelementptr float, ptr addrspace(1) %1, i64 %185, !dbg !36
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %186, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #5, !dbg !37
  %188 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !37
  %189 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !37
  %190 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !37
  %191 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !37
  %192 = bitcast i32 %188 to float, !dbg !37
  %193 = bitcast i32 %189 to float, !dbg !37
  %194 = bitcast i32 %190 to float, !dbg !37
  %195 = bitcast i32 %191 to float, !dbg !37
  %196 = fmul float %183, %192, !dbg !38
  %197 = fmul float %183, %193, !dbg !38
  %198 = fmul float %183, %194, !dbg !38
  %199 = fmul float %183, %195, !dbg !38
  %200 = getelementptr float, ptr addrspace(1) %3, i64 %185, !dbg !39
  %201 = bitcast float %196 to i32, !dbg !40
  %202 = bitcast float %197 to i32, !dbg !40
  %203 = bitcast float %198 to i32, !dbg !40
  %204 = bitcast float %199 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %201, i32 %202, i32 %203, i32 %204, ptr addrspace(1) %200, i1 %9) #5, !dbg !40
  %205 = getelementptr float, ptr addrspace(1) %4, i64 %185, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %201, i32 %202, i32 %203, i32 %204, ptr addrspace(1) %205, i1 %9) #5, !dbg !42
  %206 = or disjoint i32 %14, 2048, !dbg !43
  %207 = add i32 %206, %15, !dbg !35
  %208 = sext i32 %207 to i64, !dbg !36
  %209 = getelementptr float, ptr addrspace(1) %1, i64 %208, !dbg !36
  %210 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %209, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #5, !dbg !37
  %211 = extractvalue { i32, i32, i32, i32 } %210, 0, !dbg !37
  %212 = extractvalue { i32, i32, i32, i32 } %210, 1, !dbg !37
  %213 = extractvalue { i32, i32, i32, i32 } %210, 2, !dbg !37
  %214 = extractvalue { i32, i32, i32, i32 } %210, 3, !dbg !37
  %215 = bitcast i32 %211 to float, !dbg !37
  %216 = bitcast i32 %212 to float, !dbg !37
  %217 = bitcast i32 %213 to float, !dbg !37
  %218 = bitcast i32 %214 to float, !dbg !37
  %219 = fmul float %183, %215, !dbg !38
  %220 = fmul float %183, %216, !dbg !38
  %221 = fmul float %183, %217, !dbg !38
  %222 = fmul float %183, %218, !dbg !38
  %223 = getelementptr float, ptr addrspace(1) %3, i64 %208, !dbg !39
  %224 = bitcast float %219 to i32, !dbg !40
  %225 = bitcast float %220 to i32, !dbg !40
  %226 = bitcast float %221 to i32, !dbg !40
  %227 = bitcast float %222 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %224, i32 %225, i32 %226, i32 %227, ptr addrspace(1) %223, i1 %9) #5, !dbg !40
  %228 = getelementptr float, ptr addrspace(1) %4, i64 %208, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %224, i32 %225, i32 %226, i32 %227, ptr addrspace(1) %228, i1 %9) #5, !dbg !42
  %229 = or disjoint i32 %14, 4096, !dbg !43
  %230 = icmp samesign ult i32 %229, 5120, !dbg !44
  %231 = add i32 %229, %15, !dbg !35
  %232 = sext i32 %231 to i64, !dbg !36
  %233 = getelementptr float, ptr addrspace(1) %1, i64 %232, !dbg !36
  %234 = and i1 %9, %230, !dbg !45
  %235 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %233, i1 %234, i32 0, i1 %234, i32 0, i1 %234, i32 0, i1 %234, i32 0, i1 %234) #5, !dbg !37
  %236 = extractvalue { i32, i32, i32, i32 } %235, 0, !dbg !37
  %237 = extractvalue { i32, i32, i32, i32 } %235, 1, !dbg !37
  %238 = extractvalue { i32, i32, i32, i32 } %235, 2, !dbg !37
  %239 = extractvalue { i32, i32, i32, i32 } %235, 3, !dbg !37
  %240 = bitcast i32 %236 to float, !dbg !37
  %241 = bitcast i32 %237 to float, !dbg !37
  %242 = bitcast i32 %238 to float, !dbg !37
  %243 = bitcast i32 %239 to float, !dbg !37
  %244 = fmul float %183, %240, !dbg !38
  %245 = fmul float %183, %241, !dbg !38
  %246 = fmul float %183, %242, !dbg !38
  %247 = fmul float %183, %243, !dbg !38
  %248 = getelementptr float, ptr addrspace(1) %3, i64 %232, !dbg !39
  %249 = bitcast float %244 to i32, !dbg !40
  %250 = bitcast float %245 to i32, !dbg !40
  %251 = bitcast float %246 to i32, !dbg !40
  %252 = bitcast float %247 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %249, i32 %250, i32 %251, i32 %252, ptr addrspace(1) %248, i1 %234) #5, !dbg !40
  %253 = getelementptr float, ptr addrspace(1) %4, i64 %232, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %249, i32 %250, i32 %251, i32 %252, ptr addrspace(1) %253, i1 %234) #5, !dbg !42
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c665tsyetkkbcwdk7yajve4qw6fr3y26wjn4pfrzmbyt5o6ctsfs.py", directory: "inductor_cache/66")
!4 = !{ptr @triton_red_fused__weight_norm_interface_36, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__weight_norm_interface_36, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__weight_norm_interface_36", linkageName: "triton_red_fused__weight_norm_interface_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 44, scope: !7)
!14 = !DILocation(line: 32, column: 39, scope: !7)
!15 = !DILocation(line: 32, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 49, scope: !7)
!17 = !DILocation(line: 29, column: 27, scope: !7)
!18 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!20 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!21 = !DILocation(line: 37, column: 25, scope: !7)
!22 = !DILocation(line: 33, column: 22, scope: !7)
!23 = !DILocation(line: 35, column: 23, scope: !7)
!24 = !DILocation(line: 30, column: 25, scope: !7)
!25 = !DILocation(line: 36, column: 46, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !21)
!27 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!28 = !DILocation(line: 38, column: 26, scope: !7)
!29 = !DILocation(line: 39, column: 4, scope: !7)
!30 = !DILocation(line: 40, column: 28, scope: !7)
!31 = !DILocation(line: 40, column: 39, scope: !7)
!32 = !DILocation(line: 41, column: 30, scope: !7)
!33 = !DILocation(line: 41, column: 35, scope: !7)
!34 = !DILocation(line: 47, column: 22, scope: !7)
!35 = !DILocation(line: 46, column: 39, scope: !7)
!36 = !DILocation(line: 46, column: 34, scope: !7)
!37 = !DILocation(line: 46, column: 49, scope: !7)
!38 = !DILocation(line: 48, column: 22, scope: !7)
!39 = !DILocation(line: 49, column: 29, scope: !7)
!40 = !DILocation(line: 49, column: 50, scope: !7)
!41 = !DILocation(line: 50, column: 29, scope: !7)
!42 = !DILocation(line: 50, column: 50, scope: !7)
!43 = !DILocation(line: 43, column: 27, scope: !7)
!44 = !DILocation(line: 44, column: 25, scope: !7)
!45 = !DILocation(line: 46, column: 57, scope: !7)
!46 = !DILocation(line: 42, column: 4, scope: !7)
