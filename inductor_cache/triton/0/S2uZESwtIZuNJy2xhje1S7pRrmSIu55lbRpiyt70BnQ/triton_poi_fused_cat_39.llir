; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_cat_39(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 510, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %17 = sdiv i32 %.frozen, 256, !dbg !14
  %18 = mul i32 %17, 256, !dbg !15
  %.decomposed = sub i32 %.frozen, %18, !dbg !15
  %19 = icmp slt i32 %.decomposed, 128, !dbg !16
  %20 = shl nsw i32 %17, 7, !dbg !17
  %21 = add nsw i32 %20, %.decomposed, !dbg !18
  %22 = sext i32 %21 to i64, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !19
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %23, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !20
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !20
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !20
  %27 = bitcast i32 %25 to float, !dbg !20
  %28 = bitcast i32 %26 to float, !dbg !20
  %29 = fmul float %27, 0x3FF7154760000000, !dbg !21
  %30 = tail call float @llvm.nvvm.round.f(float %29) #3, !dbg !21
  %31 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !21
  %.not.i = icmp eq i32 %31, 0, !dbg !21
  %32 = tail call float @llvm.nvvm.fabs.ftz.f(float %27) #3, !dbg !21
  %33 = tail call float @llvm.nvvm.fabs.f(float %27) #3, !dbg !21
  %.03.i = select i1 %.not.i, float %33, float %32, !dbg !21
  %34 = fcmp olt float %.03.i, 0x3FDA3D70A0000000, !dbg !21
  %t.0.i = select i1 %34, float 0.000000e+00, float %30, !dbg !21
  %35 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !21
  %36 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !21
  %37 = fcmp oeq float %t.0.i, 1.280000e+02, !dbg !21
  %j.0.i = select i1 %37, float 1.270000e+02, float %t.0.i, !dbg !21
  %38 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !21
  %39 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !21
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !21
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !21
  %42 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !21
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !21
  %.not8.i = icmp eq i32 %43, 0, !dbg !21
  br i1 %.not8.i, label %46, label %44, !dbg !21

44:                                               ; preds = %10
  %45 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %j.0.i) #3, !dbg !21
  br label %__nv_expm1f.exit, !dbg !21

46:                                               ; preds = %10
  %47 = tail call float @llvm.nvvm.ex2.approx.f(float %j.0.i) #3, !dbg !21
  br label %__nv_expm1f.exit, !dbg !21

__nv_expm1f.exit:                                 ; preds = %44, %46
  %.0.i = phi float [ %45, %44 ], [ %47, %46 ], !dbg !21
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !21
  %49 = fmul float %28, 0x3FF7154760000000, !dbg !21
  %50 = tail call float @llvm.nvvm.round.f(float %49) #3, !dbg !21
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !21
  %.not.i2 = icmp eq i32 %51, 0, !dbg !21
  %52 = tail call float @llvm.nvvm.fabs.ftz.f(float %28) #3, !dbg !21
  %53 = tail call float @llvm.nvvm.fabs.f(float %28) #3, !dbg !21
  %.03.i3 = select i1 %.not.i2, float %53, float %52, !dbg !21
  %54 = fcmp olt float %.03.i3, 0x3FDA3D70A0000000, !dbg !21
  %t.0.i4 = select i1 %54, float 0.000000e+00, float %50, !dbg !21
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !21
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !21
  %57 = fcmp oeq float %t.0.i4, 1.280000e+02, !dbg !21
  %j.0.i5 = select i1 %57, float 1.270000e+02, float %t.0.i4, !dbg !21
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !21
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !21
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !21
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !21
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !21
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !21
  %.not8.i6 = icmp eq i32 %63, 0, !dbg !21
  br i1 %.not8.i6, label %66, label %64, !dbg !21

64:                                               ; preds = %__nv_expm1f.exit
  %65 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %j.0.i5) #3, !dbg !21
  br label %__nv_expm1f.exit28, !dbg !21

66:                                               ; preds = %__nv_expm1f.exit
  %67 = tail call float @llvm.nvvm.ex2.approx.f(float %j.0.i5) #3, !dbg !21
  br label %__nv_expm1f.exit28, !dbg !21

__nv_expm1f.exit28:                               ; preds = %64, %66
  %.0.i7 = phi float [ %65, %64 ], [ %67, %66 ], !dbg !21
  %68 = fcmp oeq float %27, 0.000000e+00, !dbg !21
  %69 = fadd float %27, %27, !dbg !21
  %70 = fcmp olt float %j.0.i, -2.500000e+01, !dbg !21
  %71 = fcmp ogt float %j.0.i, 1.280000e+02, !dbg !21
  %.not9.i = icmp eq i32 %48, 0, !dbg !21
  %.not7.i = icmp eq i32 %42, 0, !dbg !21
  %.not6.i = icmp eq i32 %41, 0, !dbg !21
  %.not5.i = icmp eq i32 %40, 0, !dbg !21
  %.not4.i = icmp eq i32 %39, 0, !dbg !21
  %.not3.i = icmp eq i32 %38, 0, !dbg !21
  %.not2.i = icmp eq i32 %36, 0, !dbg !21
  %72 = fneg float %t.0.i, !dbg !21
  %.not1.i = icmp eq i32 %35, 0, !dbg !21
  %73 = tail call float @llvm.nvvm.fma.rn.f(float %72, float 0x3FE62E4000000000, float %27) #3, !dbg !21
  %74 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %72, float 0x3FE62E4000000000, float %27) #3, !dbg !21
  %.04.i = select i1 %.not1.i, float %73, float %74, !dbg !21
  %75 = tail call float @llvm.nvvm.fma.rn.f(float %72, float 0x3EB7F7D1C0000000, float %.04.i) #3, !dbg !21
  %76 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %72, float 0x3EB7F7D1C0000000, float %.04.i) #3, !dbg !21
  %.05.i = select i1 %.not2.i, float %75, float %76, !dbg !21
  %77 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F56BD7CC0000000, float %.05.i, float 0x3F812ACC60000000) #3, !dbg !21
  %78 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F56BD7CC0000000, float %.05.i, float 0x3F812ACC60000000) #3, !dbg !21
  %.07.i = select i1 %.not3.i, float %77, float %78, !dbg !21
  %79 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %.05.i, float 0x3FA5557C60000000) #3, !dbg !21
  %80 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %.05.i, float 0x3FA5557C60000000) #3, !dbg !21
  %.08.i = select i1 %.not4.i, float %79, float %80, !dbg !21
  %81 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float %.05.i, float 0x3FC5553EC0000000) #3, !dbg !21
  %82 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float %.05.i, float 0x3FC5553EC0000000) #3, !dbg !21
  %.09.i = select i1 %.not5.i, float %81, float %82, !dbg !21
  %83 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %.05.i, float 0x3FDFFFFFC0000000) #3, !dbg !21
  %84 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %.05.i, float 0x3FDFFFFFC0000000) #3, !dbg !21
  %.06.i = select i1 %.not6.i, float %83, float %84, !dbg !21
  %85 = fmul float %.05.i, %.06.i, !dbg !21
  %86 = tail call float @llvm.nvvm.fma.rn.f(float %85, float %.05.i, float %.05.i) #3, !dbg !21
  %87 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %85, float %.05.i, float %.05.i) #3, !dbg !21
  %.01.i = select i1 %.not7.i, float %86, float %87, !dbg !21
  %88 = fadd float %.0.i, -1.000000e+00, !dbg !21
  %89 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %.0.i, float %88) #3, !dbg !21
  %90 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %.0.i, float %88) #3, !dbg !21
  %.02.i = select i1 %.not9.i, float %89, float %90, !dbg !21
  %91 = fadd float %.02.i, %.02.i, !dbg !21
  %u.0.i = select i1 %37, float %91, float %.02.i, !dbg !21
  %u.1.i = select i1 %71, float 0x7FF0000000000000, float %u.0.i, !dbg !21
  %u.2.i = select i1 %70, float -1.000000e+00, float %u.1.i, !dbg !21
  %u.3.i = select i1 %68, float %69, float %u.2.i, !dbg !21
  %92 = fcmp ogt float %28, 0.000000e+00, !dbg !22
  %93 = fcmp ogt float %27, 0.000000e+00, !dbg !22
  %94 = srem i32 %17, 16, !dbg !23
  %95 = sdiv i32 %16, 4096, !dbg !24
  %96 = srem i32 %95, 16, !dbg !25
  %97 = srem i32 %17, 256, !dbg !26
  %98 = sdiv i32 %16, 65536, !dbg !27
  %99 = or disjoint i32 %16, 1, !dbg !13
  %100 = srem i32 %99, 256, !dbg !15
  %.not7.i8 = icmp eq i32 %62, 0, !dbg !21
  %.not6.i9 = icmp eq i32 %61, 0, !dbg !21
  %.not5.i10 = icmp eq i32 %60, 0, !dbg !21
  %.not4.i11 = icmp eq i32 %59, 0, !dbg !21
  %.not3.i12 = icmp eq i32 %58, 0, !dbg !21
  %.not2.i13 = icmp eq i32 %56, 0, !dbg !21
  %101 = fneg float %t.0.i4, !dbg !21
  %.not1.i14 = icmp eq i32 %55, 0, !dbg !21
  %102 = tail call float @llvm.nvvm.fma.rn.f(float %101, float 0x3FE62E4000000000, float %28) #3, !dbg !21
  %103 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %101, float 0x3FE62E4000000000, float %28) #3, !dbg !21
  %.04.i15 = select i1 %.not1.i14, float %102, float %103, !dbg !21
  %104 = tail call float @llvm.nvvm.fma.rn.f(float %101, float 0x3EB7F7D1C0000000, float %.04.i15) #3, !dbg !21
  %105 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %101, float 0x3EB7F7D1C0000000, float %.04.i15) #3, !dbg !21
  %.05.i16 = select i1 %.not2.i13, float %104, float %105, !dbg !21
  %106 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F56BD7CC0000000, float %.05.i16, float 0x3F812ACC60000000) #3, !dbg !21
  %107 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F56BD7CC0000000, float %.05.i16, float 0x3F812ACC60000000) #3, !dbg !21
  %.07.i17 = select i1 %.not3.i12, float %106, float %107, !dbg !21
  %108 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i17, float %.05.i16, float 0x3FA5557C60000000) #3, !dbg !21
  %109 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i17, float %.05.i16, float 0x3FA5557C60000000) #3, !dbg !21
  %.08.i18 = select i1 %.not4.i11, float %108, float %109, !dbg !21
  %110 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i18, float %.05.i16, float 0x3FC5553EC0000000) #3, !dbg !21
  %111 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i18, float %.05.i16, float 0x3FC5553EC0000000) #3, !dbg !21
  %.09.i19 = select i1 %.not5.i10, float %110, float %111, !dbg !21
  %112 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i19, float %.05.i16, float 0x3FDFFFFFC0000000) #3, !dbg !21
  %113 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i19, float %.05.i16, float 0x3FDFFFFFC0000000) #3, !dbg !21
  %.06.i20 = select i1 %.not6.i9, float %112, float %113, !dbg !21
  %114 = fmul float %.05.i16, %.06.i20, !dbg !21
  %115 = tail call float @llvm.nvvm.fma.rn.f(float %114, float %.05.i16, float %.05.i16) #3, !dbg !21
  %116 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %114, float %.05.i16, float %.05.i16) #3, !dbg !21
  %.01.i21 = select i1 %.not7.i8, float %115, float %116, !dbg !21
  %117 = fadd float %.0.i7, -1.000000e+00, !dbg !21
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !21
  %.not9.i22 = icmp eq i32 %118, 0, !dbg !21
  %119 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i21, float %.0.i7, float %117) #3, !dbg !21
  %120 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i21, float %.0.i7, float %117) #3, !dbg !21
  %.02.i23 = select i1 %.not9.i22, float %120, float %119, !dbg !21
  %121 = fadd float %.02.i23, %.02.i23, !dbg !21
  %u.0.i24 = select i1 %57, float %121, float %.02.i23, !dbg !21
  %122 = fcmp ogt float %j.0.i5, 1.280000e+02, !dbg !21
  %u.1.i25 = select i1 %122, float 0x7FF0000000000000, float %u.0.i24, !dbg !21
  %123 = fcmp olt float %j.0.i5, -2.500000e+01, !dbg !21
  %u.2.i26 = select i1 %123, float -1.000000e+00, float %u.1.i25, !dbg !21
  %124 = fcmp oeq float %28, 0.000000e+00, !dbg !21
  %125 = fadd float %28, %28, !dbg !21
  %u.3.i27 = select i1 %124, float %125, float %u.2.i26, !dbg !21
  %126 = select i1 %93, float %27, float %u.3.i, !dbg !28
  %127 = select i1 %92, float %28, float %u.3.i27, !dbg !28
  %128 = icmp sgt i32 %.decomposed, 127, !dbg !29
  %129 = add nsw i32 %.decomposed, -128, !dbg !30
  %130 = shl nsw i32 %129, 8, !dbg !31
  %131 = shl nsw i32 %100, 8, !dbg !31
  %132 = shl nsw i32 %98, 15, !dbg !32
  %133 = add nsw i32 %132, %97, !dbg !33
  %134 = add nsw i32 %133, %130, !dbg !34
  %135 = add nsw i32 %133, -32768, !dbg !33
  %136 = add nsw i32 %135, %131, !dbg !34
  %137 = sext i32 %134 to i64, !dbg !35
  %138 = getelementptr float, ptr addrspace(1) %1, i64 %137, !dbg !35
  %139 = sext i32 %136 to i64, !dbg !35
  %140 = getelementptr float, ptr addrspace(1) %1, i64 %139, !dbg !35
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %128, i32 0, i1 %128) #3, !dbg !36
  %142 = bitcast i32 %141 to float, !dbg !36
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %128, i32 0, i1 %128) #3, !dbg !36
  %144 = bitcast i32 %143 to float, !dbg !36
  %145 = sext i32 %96 to i64, !dbg !37
  %146 = getelementptr i64, ptr addrspace(1) %2, i64 %145, !dbg !37
  %147 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %146, i1 %128, i1 %128) #3, !dbg !38
  %148 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %146, i1 %128, i1 %128) #3, !dbg !38
  %149 = lshr i64 %147, 59, !dbg !39
  %150 = and i64 %149, 16, !dbg !39
  %151 = add i64 %150, %147, !dbg !39
  %152 = sext i32 %94 to i64, !dbg !40
  %153 = getelementptr i64, ptr addrspace(1) %3, i64 %152, !dbg !40
  %154 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %153, i1 %128, i1 %128) #3, !dbg !41
  %155 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %153, i1 %128, i1 %128) #3, !dbg !41
  %156 = lshr i64 %154, 59, !dbg !42
  %157 = and i64 %156, 16, !dbg !42
  %158 = add i64 %157, %154, !dbg !42
  %159 = shl i64 %151, 11, !dbg !43
  %160 = sext i32 %132 to i64, !dbg !44
  %161 = sext i32 %129 to i64, !dbg !45
  %.idx = shl i64 %158, 9, !dbg !46
  %162 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx, !dbg !46
  %163 = getelementptr float, ptr addrspace(1) %162, i64 %159, !dbg !46
  %164 = getelementptr float, ptr addrspace(1) %163, i64 %160, !dbg !46
  %165 = getelementptr float, ptr addrspace(1) %164, i64 %161, !dbg !46
  %166 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %165, i1 %128, i32 0, i1 %128, i32 0, i1 %128) #3, !dbg !47
  %167 = extractvalue { i32, i32 } %166, 0, !dbg !47
  %168 = extractvalue { i32, i32 } %166, 1, !dbg !47
  %169 = bitcast i32 %167 to float, !dbg !47
  %170 = bitcast i32 %168 to float, !dbg !47
  %171 = getelementptr i64, ptr addrspace(1) %5, i64 %152, !dbg !48
  %172 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %171, i1 %128, i1 %128) #3, !dbg !49
  %173 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %171, i1 %128, i1 %128) #3, !dbg !49
  %174 = lshr i64 %172, 59, !dbg !50
  %175 = and i64 %174, 16, !dbg !50
  %176 = add i64 %175, %172, !dbg !50
  %.idx1 = shl i64 %176, 9, !dbg !51
  %177 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx1, !dbg !51
  %178 = getelementptr float, ptr addrspace(1) %177, i64 %159, !dbg !51
  %179 = getelementptr float, ptr addrspace(1) %178, i64 %160, !dbg !51
  %180 = getelementptr float, ptr addrspace(1) %179, i64 %161, !dbg !51
  %181 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %180, i1 %128, i32 0, i1 %128, i32 0, i1 %128) #3, !dbg !52
  %182 = extractvalue { i32, i32 } %181, 0, !dbg !52
  %183 = extractvalue { i32, i32 } %181, 1, !dbg !52
  %184 = bitcast i32 %182 to float, !dbg !52
  %185 = bitcast i32 %183 to float, !dbg !52
  %186 = fsub float %184, %169, !dbg !53
  %187 = fsub float %185, %170, !dbg !53
  %188 = getelementptr float, ptr addrspace(1) %6, i64 %152, !dbg !54
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %188, i1 %128, i32 0, i1 %128) #3, !dbg !55
  %190 = bitcast i32 %189 to float, !dbg !55
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %188, i1 %128, i32 0, i1 %128) #3, !dbg !55
  %192 = bitcast i32 %191 to float, !dbg !55
  %193 = fmul float %186, %190, !dbg !56
  %194 = fmul float %187, %192, !dbg !56
  %195 = fadd float %193, %169, !dbg !57
  %196 = fadd float %194, %170, !dbg !57
  %197 = fsub float %195, %142, !dbg !58
  %198 = fsub float %196, %144, !dbg !58
  %199 = getelementptr float, ptr addrspace(1) %7, i64 %145, !dbg !59
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %199, i1 %128, i32 0, i1 %128) #3, !dbg !60
  %201 = bitcast i32 %200 to float, !dbg !60
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %199, i1 %128, i32 0, i1 %128) #3, !dbg !60
  %203 = bitcast i32 %202 to float, !dbg !60
  %204 = fmul float %197, %201, !dbg !61
  %205 = fmul float %198, %203, !dbg !61
  %206 = fadd float %204, %142, !dbg !62
  %207 = fadd float %205, %144, !dbg !62
  %208 = select i1 %19, float %126, float %206, !dbg !63
  %209 = select i1 %19, float %127, float %207, !dbg !63
  %210 = sext i32 %16 to i64, !dbg !64
  %211 = getelementptr float, ptr addrspace(1) %8, i64 %210, !dbg !64
  %212 = bitcast float %208 to i32, !dbg !65
  %213 = bitcast float %209 to i32, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %212, i32 %213, ptr addrspace(1) %211, i1 true) #3, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyjq5ugo2dcnd3dczfpl3aq2tafez4co3zrqemoohl6vynzxguc2.py", directory: "inductor_cache/yj")
!4 = !{ptr @triton_poi_fused_cat_39, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_39, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_39", linkageName: "triton_poi_fused_cat_39", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 35, column: 18, scope: !7)
!17 = !DILocation(line: 36, column: 34, scope: !7)
!18 = !DILocation(line: 36, column: 40, scope: !7)
!19 = !DILocation(line: 36, column: 30, scope: !7)
!20 = !DILocation(line: 36, column: 46, scope: !7)
!21 = !DILocation(line: 41, column: 28, scope: !7)
!22 = !DILocation(line: 38, column: 18, scope: !7)
!23 = !DILocation(line: 29, column: 28, scope: !7)
!24 = !DILocation(line: 28, column: 21, scope: !7)
!25 = !DILocation(line: 28, column: 29, scope: !7)
!26 = !DILocation(line: 27, column: 28, scope: !7)
!27 = !DILocation(line: 26, column: 19, scope: !7)
!28 = !DILocation(line: 43, column: 33, scope: !7)
!29 = !DILocation(line: 46, column: 20, scope: !7)
!30 = !DILocation(line: 49, column: 50, scope: !7)
!31 = !DILocation(line: 49, column: 41, scope: !7)
!32 = !DILocation(line: 49, column: 62, scope: !7)
!33 = !DILocation(line: 49, column: 36, scope: !7)
!34 = !DILocation(line: 49, column: 56, scope: !7)
!35 = !DILocation(line: 49, column: 31, scope: !7)
!36 = !DILocation(line: 49, column: 67, scope: !7)
!37 = !DILocation(line: 50, column: 31, scope: !7)
!38 = !DILocation(line: 50, column: 36, scope: !7)
!39 = !DILocation(line: 54, column: 35, scope: !7)
!40 = !DILocation(line: 55, column: 31, scope: !7)
!41 = !DILocation(line: 55, column: 36, scope: !7)
!42 = !DILocation(line: 58, column: 35, scope: !7)
!43 = !DILocation(line: 59, column: 48, scope: !7)
!44 = !DILocation(line: 59, column: 56, scope: !7)
!45 = !DILocation(line: 59, column: 68, scope: !7)
!46 = !DILocation(line: 59, column: 31, scope: !7)
!47 = !DILocation(line: 59, column: 83, scope: !7)
!48 = !DILocation(line: 60, column: 31, scope: !7)
!49 = !DILocation(line: 60, column: 36, scope: !7)
!50 = !DILocation(line: 63, column: 35, scope: !7)
!51 = !DILocation(line: 64, column: 31, scope: !7)
!52 = !DILocation(line: 64, column: 83, scope: !7)
!53 = !DILocation(line: 65, column: 20, scope: !7)
!54 = !DILocation(line: 66, column: 31, scope: !7)
!55 = !DILocation(line: 66, column: 36, scope: !7)
!56 = !DILocation(line: 67, column: 20, scope: !7)
!57 = !DILocation(line: 68, column: 20, scope: !7)
!58 = !DILocation(line: 69, column: 20, scope: !7)
!59 = !DILocation(line: 70, column: 31, scope: !7)
!60 = !DILocation(line: 70, column: 36, scope: !7)
!61 = !DILocation(line: 71, column: 20, scope: !7)
!62 = !DILocation(line: 72, column: 20, scope: !7)
!63 = !DILocation(line: 0, scope: !7)
!64 = !DILocation(line: 76, column: 25, scope: !7)
!65 = !DILocation(line: 76, column: 37, scope: !7)
!66 = !DILocation(line: 76, column: 4, scope: !7)
