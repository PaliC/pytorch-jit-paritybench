; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_constant_pad_nd_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 7, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = icmp slt i32 %10, 576, !dbg !14
  %12 = sdiv i32 %10, 6, !dbg !15
  %13 = sdiv i32 %10, 36, !dbg !16
  %14 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !17
  %15 = insertelement <2 x i32> %14, i32 %10, i64 1, !dbg !17
  %16 = srem <2 x i32> %15, splat (i32 6), !dbg !17
  %17 = add nsw <2 x i32> %16, splat (i32 -1), !dbg !18
  %shift = shufflevector <2 x i32> %17, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !19
  %18 = or <2 x i32> %17, %shift, !dbg !19
  %19 = extractelement <2 x i32> %18, i64 0, !dbg !19
  %20 = icmp ult i32 %19, 4, !dbg !19
  %21 = extractelement <2 x i32> %16, i64 1, !dbg !20
  %22 = add nsw i32 %21, -5, !dbg !20
  %23 = extractelement <2 x i32> %16, i64 0, !dbg !21
  %24 = shl nsw i32 %23, 2, !dbg !21
  %25 = shl nsw i32 %13, 4, !dbg !22
  %26 = add nsw i32 %22, %25, !dbg !23
  %27 = add nsw i32 %26, %24, !dbg !24
  %28 = sext i32 %27 to i64, !dbg !25
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !25
  %30 = and i1 %11, %20, !dbg !26
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %30, i32 0, i1 %30) #1, !dbg !27
  %32 = bitcast i32 %31 to float, !dbg !27
  %33 = sext i32 %13 to i64, !dbg !28
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !28
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %30, i32 0, i1 %30) #1, !dbg !29
  %36 = bitcast i32 %35 to float, !dbg !29
  %37 = fsub float %32, %36, !dbg !30
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !31
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %30, i32 0, i1 %30) #1, !dbg !32
  %40 = bitcast i32 %39 to float, !dbg !32
  %41 = fmul float %37, %40, !dbg !33
  %42 = fcmp olt float %41, 0.000000e+00, !dbg !34
  %43 = select i1 %42, float 0.000000e+00, float %41, !dbg !38
  %44 = sext i32 %10 to i64, !dbg !39
  %45 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !39
  %46 = bitcast float %43 to i32, !dbg !40
  %47 = select i1 %20, i32 %46, i32 0, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %47, ptr addrspace(1) %45, i1 %11) #1, !dbg !40
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c27qpi4bpe6bnpbtmsuwf2nntqablgrhr62qa25t5nhii23a4yig.py", directory: "inductor_cache/27")
!4 = !{ptr @triton_poi_fused_constant_pad_nd_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_constant_pad_nd_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_constant_pad_nd_2", linkageName: "triton_poi_fused_constant_pad_nd_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 24, column: 26, scope: !7)
!18 = !DILocation(line: 36, column: 18, scope: !7)
!19 = !DILocation(line: 38, column: 19, scope: !7)
!20 = !DILocation(line: 39, column: 38, scope: !7)
!21 = !DILocation(line: 39, column: 45, scope: !7)
!22 = !DILocation(line: 39, column: 53, scope: !7)
!23 = !DILocation(line: 39, column: 43, scope: !7)
!24 = !DILocation(line: 39, column: 50, scope: !7)
!25 = !DILocation(line: 39, column: 31, scope: !7)
!26 = !DILocation(line: 39, column: 66, scope: !7)
!27 = !DILocation(line: 39, column: 58, scope: !7)
!28 = !DILocation(line: 40, column: 31, scope: !7)
!29 = !DILocation(line: 40, column: 36, scope: !7)
!30 = !DILocation(line: 41, column: 20, scope: !7)
!31 = !DILocation(line: 42, column: 31, scope: !7)
!32 = !DILocation(line: 42, column: 36, scope: !7)
!33 = !DILocation(line: 43, column: 20, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 45, column: 42, scope: !7)
!38 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 48, column: 25, scope: !7)
!40 = !DILocation(line: 48, column: 37, scope: !7)
!41 = !DILocation(line: 47, column: 35, scope: !7)
!42 = !DILocation(line: 48, column: 4, scope: !7)
