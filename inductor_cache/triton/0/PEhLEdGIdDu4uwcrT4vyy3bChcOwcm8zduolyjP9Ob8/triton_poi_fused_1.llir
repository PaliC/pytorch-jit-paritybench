; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 64, !dbg !12
  %9 = lshr i32 %7, 4, !dbg !12
  %10 = and i32 %9, 7, !dbg !12
  %.lobit = lshr exact i32 %8, 6, !dbg !12
  %11 = or disjoint i32 %6, %10, !dbg !13
  %12 = or disjoint i32 %11, 8, !dbg !13
  %13 = or disjoint i32 %6, %.lobit, !dbg !13
  %14 = or disjoint i32 %13, 2, !dbg !13
  %15 = or disjoint i32 %13, 4, !dbg !13
  %16 = or disjoint i32 %13, 6, !dbg !13
  %17 = or disjoint i32 %13, 8, !dbg !13
  %18 = or disjoint i32 %13, 10, !dbg !13
  %19 = or disjoint i32 %13, 12, !dbg !13
  %20 = or disjoint i32 %13, 14, !dbg !13
  %21 = icmp slt i32 %11, 12, !dbg !14
  %22 = icmp slt i32 %12, 12, !dbg !14
  %23 = icmp slt i32 %13, 12, !dbg !14
  %24 = icmp slt i32 %14, 12, !dbg !14
  %25 = icmp slt i32 %15, 12, !dbg !14
  %26 = icmp slt i32 %16, 12, !dbg !14
  %27 = icmp slt i32 %17, 12, !dbg !14
  %28 = icmp slt i32 %18, 12, !dbg !14
  %29 = icmp slt i32 %6, 0, !dbg !14
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %31 = shl i32 %30, 6, !dbg !16
  %32 = shl i32 %7, 2, !dbg !17
  %33 = and i32 %32, 60, !dbg !17
  %34 = and i32 %7, 63, !dbg !17
  %35 = or disjoint i32 %31, %33, !dbg !18
  %36 = or disjoint i32 %31, %34, !dbg !18
  %37 = icmp slt i32 %35, 1024, !dbg !19
  %38 = icmp slt i32 %36, 1024, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %39 = sdiv i32 %.frozen, 3, !dbg !20
  %40 = mul i32 %39, 3, !dbg !21
  %.decomposed = sub i32 %.frozen, %40, !dbg !21
  %.frozen3 = freeze i32 %14, !dbg !20
  %41 = sdiv i32 %.frozen3, 3, !dbg !20
  %42 = mul i32 %41, 3, !dbg !21
  %.decomposed4 = sub i32 %.frozen3, %42, !dbg !21
  %.frozen5 = freeze i32 %15, !dbg !20
  %43 = sdiv i32 %.frozen5, 3, !dbg !20
  %44 = mul i32 %43, 3, !dbg !21
  %.decomposed6 = sub i32 %.frozen5, %44, !dbg !21
  %.frozen7 = freeze i32 %16, !dbg !20
  %45 = sdiv i32 %.frozen7, 3, !dbg !20
  %46 = mul i32 %45, 3, !dbg !21
  %.decomposed8 = sub i32 %.frozen7, %46, !dbg !21
  %.frozen9 = freeze i32 %17, !dbg !20
  %47 = sdiv i32 %.frozen9, 3, !dbg !20
  %48 = mul i32 %47, 3, !dbg !21
  %.decomposed10 = sub i32 %.frozen9, %48, !dbg !21
  %.frozen11 = freeze i32 %18, !dbg !20
  %49 = sdiv i32 %.frozen11, 3, !dbg !20
  %50 = mul i32 %49, 3, !dbg !21
  %.decomposed12 = sub i32 %.frozen11, %50, !dbg !21
  %.frozen13 = freeze i32 %19, !dbg !20
  %51 = sdiv i32 %.frozen13, 3, !dbg !20
  %52 = mul i32 %51, 3, !dbg !21
  %.decomposed14 = sub i32 %.frozen13, %52, !dbg !21
  %.frozen15 = freeze i32 %20, !dbg !20
  %53 = sdiv i32 %.frozen15, 3, !dbg !20
  %54 = mul i32 %53, 3, !dbg !21
  %.decomposed16 = sub i32 %.frozen15, %54, !dbg !21
  %55 = shl i32 %11, 10, !dbg !22
  %56 = shl i32 %12, 10, !dbg !22
  %57 = add i32 %35, %55, !dbg !23
  %58 = add i32 %35, %56, !dbg !23
  %59 = sext i32 %57 to i64, !dbg !24
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !24
  %61 = sext i32 %58 to i64, !dbg !24
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !24
  %63 = and i1 %21, %37, !dbg !25
  %64 = and i1 %22, %37, !dbg !25
  %65 = and i1 %23, %38, !dbg !25
  %66 = and i1 %24, %38, !dbg !25
  %67 = and i1 %25, %38, !dbg !25
  %68 = and i1 %26, %38, !dbg !25
  %69 = and i1 %27, %38, !dbg !25
  %70 = and i1 %28, %38, !dbg !25
  %71 = and i1 %29, %38, !dbg !25
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %63) #2, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !26
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %64) #2, !dbg !26
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !26
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !26
  %82 = mul i32 %36, 3, !dbg !27
  %83 = add i32 %82, %.decomposed, !dbg !28
  %84 = mul i32 %39, 3072, !dbg !29
  %85 = mul i32 %41, 3072, !dbg !29
  %86 = mul i32 %43, 3072, !dbg !29
  %87 = mul i32 %45, 3072, !dbg !29
  %88 = mul i32 %47, 3072, !dbg !29
  %89 = mul i32 %49, 3072, !dbg !29
  %90 = mul i32 %51, 3072, !dbg !29
  %91 = mul i32 %53, 3072, !dbg !29
  %92 = add i32 %83, %84, !dbg !30
  %93 = add i32 %85, %.decomposed4, !dbg !28
  %94 = add i32 %93, %82, !dbg !30
  %95 = add i32 %86, %.decomposed6, !dbg !28
  %96 = add i32 %95, %82, !dbg !30
  %97 = add i32 %87, %.decomposed8, !dbg !28
  %98 = add i32 %97, %82, !dbg !30
  %99 = add i32 %88, %.decomposed10, !dbg !28
  %100 = add i32 %99, %82, !dbg !30
  %101 = add i32 %89, %.decomposed12, !dbg !28
  %102 = add i32 %101, %82, !dbg !30
  %103 = add i32 %90, %.decomposed14, !dbg !28
  %104 = add i32 %103, %82, !dbg !30
  %105 = add i32 %91, %.decomposed16, !dbg !28
  %106 = add i32 %105, %82, !dbg !30
  %107 = sext i32 %92 to i64, !dbg !31
  %108 = getelementptr float, ptr addrspace(1) %1, i64 %107, !dbg !31
  %109 = sext i32 %94 to i64, !dbg !31
  %110 = getelementptr float, ptr addrspace(1) %1, i64 %109, !dbg !31
  %111 = sext i32 %96 to i64, !dbg !31
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !31
  %113 = sext i32 %98 to i64, !dbg !31
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !31
  %115 = sext i32 %100 to i64, !dbg !31
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %115, !dbg !31
  %117 = sext i32 %102 to i64, !dbg !31
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !31
  %119 = sext i32 %104 to i64, !dbg !31
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %119, !dbg !31
  %121 = sext i32 %106 to i64, !dbg !31
  %122 = getelementptr float, ptr addrspace(1) %1, i64 %121, !dbg !31
  %123 = and i32 %32, 192, !dbg !32
  %124 = shl nuw nsw i32 %8, 2, !dbg !32
  %125 = or disjoint i32 %123, %124, !dbg !32
  %126 = or disjoint i32 %125, %33, !dbg !32
  %127 = and i32 %7, 127, !dbg !32
  %128 = lshr exact i32 %125, 6, !dbg !32
  %129 = add nuw nsw i32 %128, %126, !dbg !32
  %130 = zext nneg i32 %129 to i64, !dbg !32
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %130, !dbg !32
  %132 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #2, !dbg !32
  %133 = or disjoint i32 %126, 1, !dbg !32
  %134 = add nuw nsw i32 %133, %128, !dbg !32
  %135 = zext nneg i32 %134 to i64, !dbg !32
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %135, !dbg !32
  %137 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #2, !dbg !32
  %138 = or disjoint i32 %126, 2, !dbg !32
  %139 = add nuw nsw i32 %138, %128, !dbg !32
  %140 = zext nneg i32 %139 to i64, !dbg !32
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %140, !dbg !32
  %142 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #2, !dbg !32
  %143 = or disjoint i32 %126, 3, !dbg !32
  %144 = add nuw nsw i32 %143, %128, !dbg !32
  %145 = zext nneg i32 %144 to i64, !dbg !32
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %145, !dbg !32
  %147 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %148 = lshr i32 %127, 6, !dbg !32
  %149 = add nuw nsw i32 %148, %127, !dbg !32
  %150 = zext nneg i32 %149 to i64, !dbg !32
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %150, !dbg !32
  %152 = load i32, ptr addrspace(3) %151, align 4, !dbg !32
  %153 = or disjoint i32 %127, 128, !dbg !32
  %154 = lshr i32 %153, 6, !dbg !32
  %155 = add nuw nsw i32 %154, %153, !dbg !32
  %156 = zext nneg i32 %155 to i64, !dbg !32
  %157 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %156, !dbg !32
  %158 = load i32, ptr addrspace(3) %157, align 4, !dbg !32
  %159 = or disjoint i32 %127, 256, !dbg !32
  %160 = lshr i32 %159, 6, !dbg !32
  %161 = add nuw nsw i32 %160, %159, !dbg !32
  %162 = zext nneg i32 %161 to i64, !dbg !32
  %163 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %162, !dbg !32
  %164 = load i32, ptr addrspace(3) %163, align 4, !dbg !32
  %165 = or disjoint i32 %127, 384, !dbg !32
  %166 = lshr i32 %165, 6, !dbg !32
  %167 = add nuw nsw i32 %166, %165, !dbg !32
  %168 = zext nneg i32 %167 to i64, !dbg !32
  %169 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %168, !dbg !32
  %170 = load i32, ptr addrspace(3) %169, align 4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %171 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %171, i1 true) #2, !dbg !32
  %172 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %172, i1 true) #2, !dbg !32
  %173 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %173, i1 true) #2, !dbg !32
  %174 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %174, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %175 = load i32, ptr addrspace(3) %151, align 4, !dbg !32
  %176 = load i32, ptr addrspace(3) %157, align 4, !dbg !32
  %177 = load i32, ptr addrspace(3) %163, align 4, !dbg !32
  %178 = load i32, ptr addrspace(3) %169, align 4, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %152, ptr addrspace(1) %108, i1 %65) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %158, ptr addrspace(1) %110, i1 %66) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %164, ptr addrspace(1) %112, i1 %67) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %170, ptr addrspace(1) %114, i1 %68) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %175, ptr addrspace(1) %116, i1 %69) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %176, ptr addrspace(1) %118, i1 %70) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %177, ptr addrspace(1) %120, i1 %71) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %178, ptr addrspace(1) %122, i1 %71) #2, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5sc4o34md3my2pc2u7vhukaiwzdrdumy3zwyusesv4ch2bcuezt.py", directory: "inductor_cache/5s")
!4 = !{ptr @triton_poi_fused_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_1", linkageName: "triton_poi_fused_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 40, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 53, scope: !7)
!26 = !DILocation(line: 32, column: 45, scope: !7)
!27 = !DILocation(line: 33, column: 32, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 42, scope: !7)
!30 = !DILocation(line: 33, column: 37, scope: !7)
!31 = !DILocation(line: 33, column: 25, scope: !7)
!32 = !DILocation(line: 33, column: 53, scope: !7)
!33 = !DILocation(line: 33, column: 4, scope: !7)
