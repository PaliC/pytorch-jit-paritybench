; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 28, !dbg !12
  %10 = lshr i32 %7, 3, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %11, 16, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %6, %11, !dbg !13
  %15 = or disjoint i32 %6, %12, !dbg !13
  %16 = icmp slt i32 %13, 512, !dbg !14
  %17 = icmp slt i32 %14, 512, !dbg !14
  %18 = icmp slt i32 %15, 512, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 5, !dbg !16
  %21 = or disjoint i32 %20, %11, !dbg !17
  %22 = or disjoint i32 %20, %12, !dbg !17
  %23 = or disjoint i32 %20, %9, !dbg !17
  %24 = icmp slt i32 %21, 512, !dbg !18
  %25 = icmp slt i32 %22, 512, !dbg !18
  %26 = icmp slt i32 %23, 512, !dbg !18
  %27 = shl i32 %21, 9, !dbg !19
  %28 = shl i32 %22, 9, !dbg !19
  %29 = add i32 %27, %13, !dbg !20
  %30 = add i32 %28, %13, !dbg !20
  %31 = sext i32 %29 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !21
  %33 = sext i32 %30 to i64, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !21
  %35 = and i1 %16, %24, !dbg !22
  %36 = and i1 %16, %25, !dbg !22
  %37 = and i1 %17, %26, !dbg !22
  %38 = and i1 %18, %26, !dbg !22
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %35) #2, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !23
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %36) #2, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !23
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !23
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !23
  %49 = shl i32 %14, 9, !dbg !24
  %50 = shl i32 %15, 9, !dbg !24
  %51 = add i32 %23, %49, !dbg !25
  %52 = add i32 %23, %50, !dbg !25
  %53 = sext i32 %51 to i64, !dbg !26
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !26
  %55 = sext i32 %52 to i64, !dbg !26
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !26
  %57 = shl i32 %7, 7, !dbg !27
  %58 = and i32 %57, 896, !dbg !27
  %59 = or disjoint i32 %58, %11, !dbg !27
  %60 = and i32 %8, 508, !dbg !27
  %61 = lshr exact i32 %58, 5, !dbg !27
  %62 = add nuw nsw i32 %61, %59, !dbg !27
  %63 = zext nneg i32 %62 to i64, !dbg !27
  %64 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %63, !dbg !27
  %65 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %65, i1 true) #2, !dbg !27
  %66 = or disjoint i32 %59, 32, !dbg !27
  %67 = lshr i32 %66, 5, !dbg !27
  %68 = add nuw nsw i32 %67, %66, !dbg !27
  %69 = zext nneg i32 %68 to i64, !dbg !27
  %70 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %69, !dbg !27
  %71 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 true) #2, !dbg !27
  %72 = or disjoint i32 %59, 64, !dbg !27
  %73 = lshr i32 %72, 5, !dbg !27
  %74 = add nuw nsw i32 %73, %72, !dbg !27
  %75 = zext nneg i32 %74 to i64, !dbg !27
  %76 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %75, !dbg !27
  %77 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 true) #2, !dbg !27
  %78 = or disjoint i32 %59, 96, !dbg !27
  %79 = lshr i32 %78, 5, !dbg !27
  %80 = add nuw nsw i32 %79, %78, !dbg !27
  %81 = zext nneg i32 %80 to i64, !dbg !27
  %82 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %81, !dbg !27
  %83 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #2, !dbg !27
  %84 = or disjoint i32 %59, 16, !dbg !27
  %85 = add nuw nsw i32 %84, %61, !dbg !27
  %86 = zext nneg i32 %85 to i64, !dbg !27
  %87 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %86, !dbg !27
  %88 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #2, !dbg !27
  %89 = or disjoint i32 %59, 48, !dbg !27
  %90 = lshr i32 %89, 5, !dbg !27
  %91 = add nuw nsw i32 %90, %89, !dbg !27
  %92 = zext nneg i32 %91 to i64, !dbg !27
  %93 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %92, !dbg !27
  %94 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #2, !dbg !27
  %95 = or disjoint i32 %59, 80, !dbg !27
  %96 = lshr i32 %95, 5, !dbg !27
  %97 = add nuw nsw i32 %96, %95, !dbg !27
  %98 = zext nneg i32 %97 to i64, !dbg !27
  %99 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %98, !dbg !27
  %100 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %100, i1 true) #2, !dbg !27
  %101 = or disjoint i32 %59, 112, !dbg !27
  %102 = lshr i32 %101, 5, !dbg !27
  %103 = add nuw nsw i32 %102, %101, !dbg !27
  %104 = zext nneg i32 %103 to i64, !dbg !27
  %105 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %104, !dbg !27
  %106 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %107 = lshr i32 %60, 5, !dbg !27
  %108 = add nuw nsw i32 %107, %60, !dbg !27
  %109 = zext nneg i32 %108 to i64, !dbg !27
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %109, !dbg !27
  %111 = load i32, ptr addrspace(3) %110, align 4, !dbg !27
  %112 = or disjoint i32 %60, 1, !dbg !27
  %113 = add nuw nsw i32 %112, %107, !dbg !27
  %114 = zext nneg i32 %113 to i64, !dbg !27
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %114, !dbg !27
  %116 = load i32, ptr addrspace(3) %115, align 4, !dbg !27
  %117 = or disjoint i32 %60, 2, !dbg !27
  %118 = add nuw nsw i32 %117, %107, !dbg !27
  %119 = zext nneg i32 %118 to i64, !dbg !27
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %119, !dbg !27
  %121 = load i32, ptr addrspace(3) %120, align 4, !dbg !27
  %122 = or disjoint i32 %60, 3, !dbg !27
  %123 = add nuw nsw i32 %122, %107, !dbg !27
  %124 = zext nneg i32 %123 to i64, !dbg !27
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %124, !dbg !27
  %126 = load i32, ptr addrspace(3) %125, align 4, !dbg !27
  %127 = or disjoint i32 %60, 512, !dbg !27
  %128 = lshr i32 %127, 5, !dbg !27
  %129 = add nuw nsw i32 %128, %127, !dbg !27
  %130 = zext nneg i32 %129 to i64, !dbg !27
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %130, !dbg !27
  %132 = load i32, ptr addrspace(3) %131, align 4, !dbg !27
  %133 = or disjoint i32 %60, 513, !dbg !27
  %134 = lshr i32 %133, 5, !dbg !27
  %135 = add nuw nsw i32 %134, %133, !dbg !27
  %136 = zext nneg i32 %135 to i64, !dbg !27
  %137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %136, !dbg !27
  %138 = load i32, ptr addrspace(3) %137, align 4, !dbg !27
  %139 = or disjoint i32 %60, 514, !dbg !27
  %140 = lshr i32 %139, 5, !dbg !27
  %141 = add nuw nsw i32 %140, %139, !dbg !27
  %142 = zext nneg i32 %141 to i64, !dbg !27
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %142, !dbg !27
  %144 = load i32, ptr addrspace(3) %143, align 4, !dbg !27
  %145 = or disjoint i32 %60, 515, !dbg !27
  %146 = lshr i32 %145, 5, !dbg !27
  %147 = add nuw nsw i32 %146, %145, !dbg !27
  %148 = zext nneg i32 %147 to i64, !dbg !27
  %149 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %148, !dbg !27
  %150 = load i32, ptr addrspace(3) %149, align 4, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %111, i32 %116, i32 %121, i32 %126, ptr addrspace(1) %54, i1 %37) #2, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %132, i32 %138, i32 %144, i32 %150, ptr addrspace(1) %56, i1 %38) #2, !dbg !27
  ret void, !dbg !28
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crkpymovsmpvcm5p47u6tsn6tekvftmi5siznesz567vl35daqmh.py", directory: "inductor_cache/rk")
!4 = !{ptr @triton_poi_fused_clone_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_0", linkageName: "triton_poi_fused_clone_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 39, scope: !7)
!20 = !DILocation(line: 30, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 52, scope: !7)
!23 = !DILocation(line: 30, column: 44, scope: !7)
!24 = !DILocation(line: 31, column: 34, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 25, scope: !7)
!27 = !DILocation(line: 31, column: 45, scope: !7)
!28 = !DILocation(line: 31, column: 4, scope: !7)
