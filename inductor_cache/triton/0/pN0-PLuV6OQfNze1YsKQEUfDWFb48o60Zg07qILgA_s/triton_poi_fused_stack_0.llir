; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_stack_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %14 = sdiv i32 %.frozen, 64, !dbg !14
  %15 = mul i32 %14, 64, !dbg !15
  %.decomposed = sub i32 %.frozen, %15, !dbg !15
  %16 = sdiv i32 %13, 16, !dbg !16
  %17 = srem i32 %16, 4, !dbg !17
  %18 = icmp slt i32 %13, 256, !dbg !18
  %19 = shl i32 %14, 7, !dbg !19
  %20 = add i32 %19, %.decomposed, !dbg !20
  %21 = sext i32 %20 to i64, !dbg !21
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !21
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !22
  %24 = sext i32 %17 to i64, !dbg !23
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !23
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %25, i1 %18, i32 0, i1 %18) #3, !dbg !24
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %25, i1 %18, i32 0, i1 %18) #3, !dbg !24
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !25
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %18, i32 0, i1 %18) #3, !dbg !26
  %30 = bitcast i32 %29 to float, !dbg !26
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %18, i32 0, i1 %18) #3, !dbg !26
  %32 = bitcast i32 %31 to float, !dbg !26
  %33 = fadd float %30, 0x3EE4F8B580000000, !dbg !27
  %34 = fadd float %32, 0x3EE4F8B580000000, !dbg !27
  %35 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %35, 0, !dbg !28
  %36 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %36, 0, !dbg !28
  br i1 %.not.i, label %42, label %37, !dbg !28

37:                                               ; preds = %7
  br i1 %.not1.i, label %40, label %38, !dbg !28

38:                                               ; preds = %37
  %39 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %33) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

40:                                               ; preds = %37
  %41 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %33) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

42:                                               ; preds = %7
  br i1 %.not1.i, label %45, label %43, !dbg !28

43:                                               ; preds = %42
  %44 = tail call float @llvm.nvvm.sqrt.rn.f(float %33) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

45:                                               ; preds = %42
  %46 = tail call float @llvm.nvvm.sqrt.approx.f(float %33) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %38, %40, %43, %45
  %.0.i = phi float [ %39, %38 ], [ %41, %40 ], [ %44, %43 ], [ %46, %45 ], !dbg !28
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i1 = icmp eq i32 %47, 0, !dbg !28
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i4 = icmp eq i32 %48, 0, !dbg !28
  br i1 %.not.i1, label %54, label %49, !dbg !28

49:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %52, label %50, !dbg !28

50:                                               ; preds = %49
  %51 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %34) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

52:                                               ; preds = %49
  %53 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %34) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

54:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %57, label %55, !dbg !28

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.f(float %34) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.f(float %34) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %50, %52, %55, %57
  %.0.i3 = phi float [ %51, %50 ], [ %53, %52 ], [ %56, %55 ], [ %58, %57 ], !dbg !28
  %59 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !29
  %60 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !29
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !30
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %18, i32 0, i1 %18) #3, !dbg !31
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %18, i32 0, i1 %18) #3, !dbg !31
  %64 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !32
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %18, i32 0, i1 %18) #3, !dbg !33
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %18, i32 0, i1 %18) #3, !dbg !33
  %67 = add i32 %20, -448, !dbg !34
  %68 = sext i32 %67 to i64, !dbg !35
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !35
  %70 = icmp eq i32 %9, 256, !dbg !36
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %69, i1 %70, i32 0, i1 %70, i32 0, i1 %70) #3, !dbg !37
  %72 = add nsw i32 %17, 4, !dbg !38
  %73 = zext nneg i32 %72 to i64, !dbg !39
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !39
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %70, i32 0, i1 %70) #3, !dbg !40
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %70, i32 0, i1 %70) #3, !dbg !40
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %73, !dbg !41
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %70, i32 0, i1 %70) #3, !dbg !42
  %79 = bitcast i32 %78 to float, !dbg !42
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %70, i32 0, i1 %70) #3, !dbg !42
  %81 = bitcast i32 %80 to float, !dbg !42
  %82 = fadd float %79, 0x3EE4F8B580000000, !dbg !43
  %83 = fadd float %81, 0x3EE4F8B580000000, !dbg !43
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i6 = icmp eq i32 %84, 0, !dbg !44
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i9 = icmp eq i32 %85, 0, !dbg !44
  br i1 %.not.i6, label %91, label %86, !dbg !44

86:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %89, label %87, !dbg !44

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

91:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %94, label %92, !dbg !44

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

__nv_sqrtf.exit10:                                ; preds = %87, %89, %92, %94
  %.0.i8 = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !44
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i11 = icmp eq i32 %96, 0, !dbg !44
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i14 = icmp eq i32 %97, 0, !dbg !44
  br i1 %.not.i11, label %103, label %98, !dbg !44

98:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %101, label %99, !dbg !44

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

103:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %106, label %104, !dbg !44

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

__nv_sqrtf.exit15:                                ; preds = %99, %101, %104, %106
  %.0.i13 = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !44
  %108 = extractvalue { i32, i32 } %71, 1, !dbg !37
  %109 = insertelement <4 x i32> poison, i32 %76, i64 0, !dbg !40
  %110 = insertelement <4 x i32> %109, i32 %75, i64 1, !dbg !40
  %111 = insertelement <4 x i32> %110, i32 %26, i64 2, !dbg !40
  %112 = insertelement <4 x i32> %111, i32 %27, i64 3, !dbg !40
  %113 = bitcast <4 x i32> %112 to <4 x float>, !dbg !40
  %114 = extractvalue { i32, i32 } %71, 0, !dbg !37
  %115 = extractvalue { i32, i32 } %23, 1, !dbg !22
  %116 = extractvalue { i32, i32 } %23, 0, !dbg !22
  %117 = icmp slt i32 %13, 512, !dbg !45
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !46
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !46
  %120 = getelementptr float, ptr addrspace(1) %3, i64 %73, !dbg !47
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %70, i32 0, i1 %70) #3, !dbg !48
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %70, i32 0, i1 %70) #3, !dbg !48
  %123 = getelementptr float, ptr addrspace(1) %4, i64 %73, !dbg !49
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %70, i32 0, i1 %70) #3, !dbg !50
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %70, i32 0, i1 %70) #3, !dbg !50
  %126 = insertelement <4 x i32> poison, i32 %108, i64 0, !dbg !37
  %127 = insertelement <4 x i32> %126, i32 %114, i64 1, !dbg !37
  %128 = insertelement <4 x i32> %127, i32 %116, i64 2, !dbg !37
  %129 = insertelement <4 x i32> %128, i32 %115, i64 3, !dbg !37
  %130 = bitcast <4 x i32> %129 to <4 x float>, !dbg !37
  %131 = fsub <4 x float> %130, %113, !dbg !51
  %132 = insertelement <4 x float> poison, float %119, i64 0, !dbg !52
  %133 = insertelement <4 x float> %132, float %118, i64 1, !dbg !52
  %134 = insertelement <4 x float> %133, float %59, i64 2, !dbg !52
  %135 = insertelement <4 x float> %134, float %60, i64 3, !dbg !52
  %136 = fmul <4 x float> %131, %135, !dbg !52
  %137 = insertelement <4 x i32> poison, i32 %122, i64 0, !dbg !48
  %138 = insertelement <4 x i32> %137, i32 %121, i64 1, !dbg !48
  %139 = insertelement <4 x i32> %138, i32 %62, i64 2, !dbg !48
  %140 = insertelement <4 x i32> %139, i32 %63, i64 3, !dbg !48
  %141 = bitcast <4 x i32> %140 to <4 x float>, !dbg !48
  %142 = fmul <4 x float> %136, %141, !dbg !53
  %143 = insertelement <4 x i32> poison, i32 %125, i64 0, !dbg !50
  %144 = insertelement <4 x i32> %143, i32 %124, i64 1, !dbg !50
  %145 = insertelement <4 x i32> %144, i32 %65, i64 2, !dbg !50
  %146 = insertelement <4 x i32> %145, i32 %66, i64 3, !dbg !50
  %147 = bitcast <4 x i32> %146 to <4 x float>, !dbg !50
  %148 = fadd <4 x float> %142, %147, !dbg !54
  %149 = fcmp olt <4 x float> %148, zeroinitializer, !dbg !55
  %150 = extractelement <4 x i1> %149, i64 3, !dbg !59
  %151 = extractelement <4 x float> %148, i64 3, !dbg !59
  %152 = select i1 %150, float 0.000000e+00, float %151, !dbg !59
  %153 = extractelement <4 x i1> %149, i64 2, !dbg !59
  %154 = extractelement <4 x float> %148, i64 2, !dbg !59
  %155 = select i1 %153, float 0.000000e+00, float %154, !dbg !59
  %156 = extractelement <4 x i1> %149, i64 1, !dbg !61
  %157 = extractelement <4 x float> %148, i64 1, !dbg !61
  %158 = select i1 %156, float 0.000000e+00, float %157, !dbg !61
  %159 = extractelement <4 x i1> %149, i64 0, !dbg !61
  %160 = extractelement <4 x float> %148, i64 0, !dbg !61
  %161 = select i1 %159, float 0.000000e+00, float %160, !dbg !61
  %162 = select i1 %18, float %155, float %158, !dbg !62
  %163 = select i1 %18, float %152, float %161, !dbg !62
  %164 = sext i32 %13 to i64, !dbg !63
  %165 = getelementptr float, ptr addrspace(1) %5, i64 %164, !dbg !63
  %166 = bitcast float %162 to i32, !dbg !64
  %167 = bitcast float %163 to i32, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %166, i32 %167, ptr addrspace(1) %165, i1 %117) #3, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clft6pw5dcilguhcqxxssni22lijvthpjsy62wl3yjzpe5f35cjg.py", directory: "inductor_cache/lf")
!4 = !{ptr @triton_poi_fused_stack_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_stack_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_stack_0", linkageName: "triton_poi_fused_stack_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 27, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 40, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 46, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 36, column: 30, scope: !7)
!26 = !DILocation(line: 36, column: 35, scope: !7)
!27 = !DILocation(line: 38, column: 19, scope: !7)
!28 = !DILocation(line: 39, column: 27, scope: !7)
!29 = !DILocation(line: 41, column: 20, scope: !7)
!30 = !DILocation(line: 45, column: 31, scope: !7)
!31 = !DILocation(line: 45, column: 36, scope: !7)
!32 = !DILocation(line: 47, column: 31, scope: !7)
!33 = !DILocation(line: 47, column: 36, scope: !7)
!34 = !DILocation(line: 56, column: 41, scope: !7)
!35 = !DILocation(line: 56, column: 31, scope: !7)
!36 = !DILocation(line: 56, column: 67, scope: !7)
!37 = !DILocation(line: 56, column: 59, scope: !7)
!38 = !DILocation(line: 57, column: 35, scope: !7)
!39 = !DILocation(line: 57, column: 31, scope: !7)
!40 = !DILocation(line: 57, column: 40, scope: !7)
!41 = !DILocation(line: 59, column: 31, scope: !7)
!42 = !DILocation(line: 59, column: 40, scope: !7)
!43 = !DILocation(line: 61, column: 20, scope: !7)
!44 = !DILocation(line: 62, column: 27, scope: !7)
!45 = !DILocation(line: 23, column: 21, scope: !7)
!46 = !DILocation(line: 64, column: 20, scope: !7)
!47 = !DILocation(line: 68, column: 31, scope: !7)
!48 = !DILocation(line: 68, column: 40, scope: !7)
!49 = !DILocation(line: 70, column: 31, scope: !7)
!50 = !DILocation(line: 70, column: 40, scope: !7)
!51 = !DILocation(line: 58, column: 20, scope: !7)
!52 = !DILocation(line: 67, column: 20, scope: !7)
!53 = !DILocation(line: 69, column: 20, scope: !7)
!54 = !DILocation(line: 71, column: 20, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !58)
!56 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!57 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!58 = !DILocation(line: 73, column: 42, scope: !7)
!59 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !60)
!60 = !DILocation(line: 50, column: 42, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !58)
!62 = !DILocation(line: 0, scope: !7)
!63 = !DILocation(line: 77, column: 25, scope: !7)
!64 = !DILocation(line: 77, column: 37, scope: !7)
!65 = !DILocation(line: 77, column: 4, scope: !7)
