; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 512, !dbg !13
  %17 = srem i32 %15, 640, !dbg !14
  %18 = srem i32 %16, 640, !dbg !14
  %19 = sext i32 %15 to i64, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = sext i32 %16 to i64, !dbg !15
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !15
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !16
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !16
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !17
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !18
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !18
  %29 = sext i32 %17 to i64, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !19
  %31 = sext i32 %18 to i64, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !19
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !20
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !21
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !22
  %42 = bitcast i32 %38 to float, !dbg !22
  %43 = bitcast i32 %39 to float, !dbg !22
  %44 = bitcast i32 %40 to float, !dbg !22
  %45 = bitcast i32 %41 to float, !dbg !22
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !22
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !22
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !22
  %51 = bitcast i32 %47 to float, !dbg !22
  %52 = bitcast i32 %48 to float, !dbg !22
  %53 = bitcast i32 %49 to float, !dbg !22
  %54 = bitcast i32 %50 to float, !dbg !22
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !23
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !24
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !24
  %59 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !25
  %60 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !25
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !26
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !26
  %63 = fadd float %42, 0x3EE4F8B580000000, !dbg !27
  %64 = fadd float %43, 0x3EE4F8B580000000, !dbg !27
  %65 = fadd float %44, 0x3EE4F8B580000000, !dbg !27
  %66 = fadd float %45, 0x3EE4F8B580000000, !dbg !27
  %67 = fadd float %51, 0x3EE4F8B580000000, !dbg !27
  %68 = fadd float %52, 0x3EE4F8B580000000, !dbg !27
  %69 = fadd float %53, 0x3EE4F8B580000000, !dbg !27
  %70 = fadd float %54, 0x3EE4F8B580000000, !dbg !27
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %71, 0, !dbg !28
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %72, 0, !dbg !28
  br i1 %.not.i, label %78, label %73, !dbg !28

73:                                               ; preds = %9
  br i1 %.not1.i, label %76, label %74, !dbg !28

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

78:                                               ; preds = %9
  br i1 %.not1.i, label %81, label %79, !dbg !28

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %74, %76, %79, %81
  %.0.i = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !28
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i1 = icmp eq i32 %83, 0, !dbg !28
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i4 = icmp eq i32 %84, 0, !dbg !28
  br i1 %.not.i1, label %90, label %85, !dbg !28

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %88, label %86, !dbg !28

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %93, label %91, !dbg !28

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %86, %88, %91, %93
  %.0.i3 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !28
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i6 = icmp eq i32 %95, 0, !dbg !28
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i9 = icmp eq i32 %96, 0, !dbg !28
  br i1 %.not.i6, label %102, label %97, !dbg !28

97:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %100, label %98, !dbg !28

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

102:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %105, label %103, !dbg !28

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

__nv_sqrtf.exit10:                                ; preds = %98, %100, %103, %105
  %.0.i8 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !28
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i11 = icmp eq i32 %107, 0, !dbg !28
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i14 = icmp eq i32 %108, 0, !dbg !28
  br i1 %.not.i11, label %114, label %109, !dbg !28

109:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %112, label %110, !dbg !28

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

114:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %117, label %115, !dbg !28

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

__nv_sqrtf.exit15:                                ; preds = %110, %112, %115, %117
  %.0.i13 = phi float [ %111, %110 ], [ %113, %112 ], [ %116, %115 ], [ %118, %117 ], !dbg !28
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i16 = icmp eq i32 %119, 0, !dbg !28
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i19 = icmp eq i32 %120, 0, !dbg !28
  br i1 %.not.i16, label %126, label %121, !dbg !28

121:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %124, label %122, !dbg !28

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

126:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %129, label %127, !dbg !28

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

__nv_sqrtf.exit20:                                ; preds = %122, %124, %127, %129
  %.0.i18 = phi float [ %123, %122 ], [ %125, %124 ], [ %128, %127 ], [ %130, %129 ], !dbg !28
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i21 = icmp eq i32 %131, 0, !dbg !28
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i24 = icmp eq i32 %132, 0, !dbg !28
  br i1 %.not.i21, label %138, label %133, !dbg !28

133:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %136, label %134, !dbg !28

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

138:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %141, label %139, !dbg !28

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

__nv_sqrtf.exit25:                                ; preds = %134, %136, %139, %141
  %.0.i23 = phi float [ %135, %134 ], [ %137, %136 ], [ %140, %139 ], [ %142, %141 ], !dbg !28
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i26 = icmp eq i32 %143, 0, !dbg !28
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i29 = icmp eq i32 %144, 0, !dbg !28
  br i1 %.not.i26, label %150, label %145, !dbg !28

145:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %148, label %146, !dbg !28

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

150:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %153, label %151, !dbg !28

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

__nv_sqrtf.exit30:                                ; preds = %146, %148, %151, %153
  %.0.i28 = phi float [ %147, %146 ], [ %149, %148 ], [ %152, %151 ], [ %154, %153 ], !dbg !28
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i31 = icmp eq i32 %155, 0, !dbg !28
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i34 = icmp eq i32 %156, 0, !dbg !28
  br i1 %.not.i31, label %162, label %157, !dbg !28

157:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %160, label %158, !dbg !28

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

162:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %165, label %163, !dbg !28

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

__nv_sqrtf.exit35:                                ; preds = %158, %160, %163, %165
  %.0.i33 = phi float [ %159, %158 ], [ %161, %160 ], [ %164, %163 ], [ %166, %165 ], !dbg !28
  %167 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !16
  %168 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !18
  %169 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !20
  %170 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !16
  %171 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !18
  %172 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !20
  %173 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !16
  %174 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !18
  %175 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !20
  %176 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !16
  %177 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !18
  %178 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !20
  %179 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !16
  %180 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !18
  %181 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !20
  %182 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !16
  %183 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !18
  %184 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !20
  %185 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !16
  %186 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !18
  %187 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !20
  %188 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !16
  %189 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !18
  %190 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !20
  %191 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !26
  %192 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !26
  %193 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !26
  %194 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !26
  %195 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !26
  %196 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !26
  %197 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !26
  %198 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !26
  %199 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !24
  %200 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !24
  %201 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !24
  %202 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !24
  %203 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !24
  %204 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !24
  %205 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !24
  %206 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !24
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !29
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !29
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !29
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !29
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !29
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !29
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !29
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !29
  %215 = insertelement <8 x i32> poison, i32 %167, i64 0, !dbg !16
  %216 = insertelement <8 x i32> %215, i32 %170, i64 1, !dbg !16
  %217 = insertelement <8 x i32> %216, i32 %173, i64 2, !dbg !16
  %218 = insertelement <8 x i32> %217, i32 %176, i64 3, !dbg !16
  %219 = insertelement <8 x i32> %218, i32 %179, i64 4, !dbg !16
  %220 = insertelement <8 x i32> %219, i32 %182, i64 5, !dbg !16
  %221 = insertelement <8 x i32> %220, i32 %185, i64 6, !dbg !16
  %222 = insertelement <8 x i32> %221, i32 %188, i64 7, !dbg !16
  %223 = bitcast <8 x i32> %222 to <8 x float>, !dbg !16
  %224 = insertelement <8 x i32> poison, i32 %168, i64 0, !dbg !18
  %225 = insertelement <8 x i32> %224, i32 %171, i64 1, !dbg !18
  %226 = insertelement <8 x i32> %225, i32 %174, i64 2, !dbg !18
  %227 = insertelement <8 x i32> %226, i32 %177, i64 3, !dbg !18
  %228 = insertelement <8 x i32> %227, i32 %180, i64 4, !dbg !18
  %229 = insertelement <8 x i32> %228, i32 %183, i64 5, !dbg !18
  %230 = insertelement <8 x i32> %229, i32 %186, i64 6, !dbg !18
  %231 = insertelement <8 x i32> %230, i32 %189, i64 7, !dbg !18
  %232 = bitcast <8 x i32> %231 to <8 x float>, !dbg !18
  %233 = fadd <8 x float> %223, %232, !dbg !30
  %234 = insertelement <8 x i32> poison, i32 %169, i64 0, !dbg !20
  %235 = insertelement <8 x i32> %234, i32 %172, i64 1, !dbg !20
  %236 = insertelement <8 x i32> %235, i32 %175, i64 2, !dbg !20
  %237 = insertelement <8 x i32> %236, i32 %178, i64 3, !dbg !20
  %238 = insertelement <8 x i32> %237, i32 %181, i64 4, !dbg !20
  %239 = insertelement <8 x i32> %238, i32 %184, i64 5, !dbg !20
  %240 = insertelement <8 x i32> %239, i32 %187, i64 6, !dbg !20
  %241 = insertelement <8 x i32> %240, i32 %190, i64 7, !dbg !20
  %242 = bitcast <8 x i32> %241 to <8 x float>, !dbg !20
  %243 = fsub <8 x float> %233, %242, !dbg !31
  %244 = insertelement <8 x i32> poison, i32 %191, i64 0, !dbg !26
  %245 = insertelement <8 x i32> %244, i32 %192, i64 1, !dbg !26
  %246 = insertelement <8 x i32> %245, i32 %193, i64 2, !dbg !26
  %247 = insertelement <8 x i32> %246, i32 %194, i64 3, !dbg !26
  %248 = insertelement <8 x i32> %247, i32 %195, i64 4, !dbg !26
  %249 = insertelement <8 x i32> %248, i32 %196, i64 5, !dbg !26
  %250 = insertelement <8 x i32> %249, i32 %197, i64 6, !dbg !26
  %251 = insertelement <8 x i32> %250, i32 %198, i64 7, !dbg !26
  %252 = bitcast <8 x i32> %251 to <8 x float>, !dbg !26
  %253 = insertelement <8 x i32> poison, i32 %199, i64 0, !dbg !24
  %254 = insertelement <8 x i32> %253, i32 %200, i64 1, !dbg !24
  %255 = insertelement <8 x i32> %254, i32 %201, i64 2, !dbg !24
  %256 = insertelement <8 x i32> %255, i32 %202, i64 3, !dbg !24
  %257 = insertelement <8 x i32> %256, i32 %203, i64 4, !dbg !24
  %258 = insertelement <8 x i32> %257, i32 %204, i64 5, !dbg !24
  %259 = insertelement <8 x i32> %258, i32 %205, i64 6, !dbg !24
  %260 = insertelement <8 x i32> %259, i32 %206, i64 7, !dbg !24
  %261 = bitcast <8 x i32> %260 to <8 x float>, !dbg !24
  %262 = insertelement <8 x float> poison, float %214, i64 0, !dbg !32
  %263 = insertelement <8 x float> %262, float %213, i64 1, !dbg !32
  %264 = insertelement <8 x float> %263, float %212, i64 2, !dbg !32
  %265 = insertelement <8 x float> %264, float %211, i64 3, !dbg !32
  %266 = insertelement <8 x float> %265, float %210, i64 4, !dbg !32
  %267 = insertelement <8 x float> %266, float %209, i64 5, !dbg !32
  %268 = insertelement <8 x float> %267, float %208, i64 6, !dbg !32
  %269 = insertelement <8 x float> %268, float %207, i64 7, !dbg !32
  %270 = fmul <8 x float> %243, %269, !dbg !32
  %271 = fmul <8 x float> %270, %261, !dbg !33
  %272 = fadd <8 x float> %271, %252, !dbg !34
  %273 = fcmp olt <8 x float> %272, zeroinitializer, !dbg !35
  %274 = extractelement <8 x i1> %273, i64 7, !dbg !39
  %275 = extractelement <8 x i1> %273, i64 6, !dbg !39
  %276 = extractelement <8 x i1> %273, i64 5, !dbg !39
  %277 = extractelement <8 x i1> %273, i64 4, !dbg !39
  %278 = extractelement <8 x i1> %273, i64 3, !dbg !39
  %279 = extractelement <8 x i1> %273, i64 2, !dbg !39
  %280 = extractelement <8 x i1> %273, i64 1, !dbg !39
  %281 = extractelement <8 x i1> %273, i64 0, !dbg !39
  %282 = getelementptr float, ptr addrspace(1) %6, i64 %19, !dbg !40
  %283 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !40
  %bc = bitcast <8 x float> %272 to <8 x i32>, !dbg !41
  %284 = extractelement <8 x i32> %bc, i64 7, !dbg !41
  %285 = select i1 %274, i32 0, i32 %284, !dbg !39
  %bc36 = bitcast <8 x float> %272 to <8 x i32>, !dbg !41
  %286 = extractelement <8 x i32> %bc36, i64 6, !dbg !41
  %287 = select i1 %275, i32 0, i32 %286, !dbg !39
  %bc37 = bitcast <8 x float> %272 to <8 x i32>, !dbg !41
  %288 = extractelement <8 x i32> %bc37, i64 5, !dbg !41
  %289 = select i1 %276, i32 0, i32 %288, !dbg !39
  %bc38 = bitcast <8 x float> %272 to <8 x i32>, !dbg !41
  %290 = extractelement <8 x i32> %bc38, i64 4, !dbg !41
  %291 = select i1 %277, i32 0, i32 %290, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %285, i32 %287, i32 %289, i32 %291, ptr addrspace(1) %282, i1 true) #3, !dbg !41
  %bc39 = bitcast <8 x float> %272 to <8 x i32>, !dbg !41
  %292 = extractelement <8 x i32> %bc39, i64 3, !dbg !41
  %293 = select i1 %278, i32 0, i32 %292, !dbg !39
  %bc40 = bitcast <8 x float> %272 to <8 x i32>, !dbg !41
  %294 = extractelement <8 x i32> %bc40, i64 2, !dbg !41
  %295 = select i1 %279, i32 0, i32 %294, !dbg !39
  %bc41 = bitcast <8 x float> %272 to <8 x i32>, !dbg !41
  %296 = extractelement <8 x i32> %bc41, i64 1, !dbg !41
  %297 = select i1 %280, i32 0, i32 %296, !dbg !39
  %bc42 = bitcast <8 x float> %272 to <8 x i32>, !dbg !41
  %298 = extractelement <8 x i32> %bc42, i64 0, !dbg !41
  %299 = select i1 %281, i32 0, i32 %298, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %293, i32 %295, i32 %297, i32 %299, ptr addrspace(1) %283, i1 true) #3, !dbg !41
  %300 = getelementptr float, ptr addrspace(1) %7, i64 %19, !dbg !42
  %301 = getelementptr float, ptr addrspace(1) %7, i64 %21, !dbg !42
  %bc43 = bitcast <8 x float> %243 to <8 x i32>, !dbg !43
  %302 = extractelement <8 x i32> %bc43, i64 7, !dbg !43
  %bc44 = bitcast <8 x float> %243 to <8 x i32>, !dbg !43
  %303 = extractelement <8 x i32> %bc44, i64 6, !dbg !43
  %bc45 = bitcast <8 x float> %243 to <8 x i32>, !dbg !43
  %304 = extractelement <8 x i32> %bc45, i64 5, !dbg !43
  %bc46 = bitcast <8 x float> %243 to <8 x i32>, !dbg !43
  %305 = extractelement <8 x i32> %bc46, i64 4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %302, i32 %303, i32 %304, i32 %305, ptr addrspace(1) %300, i1 true) #3, !dbg !43
  %bc47 = bitcast <8 x float> %243 to <8 x i32>, !dbg !43
  %306 = extractelement <8 x i32> %bc47, i64 3, !dbg !43
  %bc48 = bitcast <8 x float> %243 to <8 x i32>, !dbg !43
  %307 = extractelement <8 x i32> %bc48, i64 2, !dbg !43
  %bc49 = bitcast <8 x float> %243 to <8 x i32>, !dbg !43
  %308 = extractelement <8 x i32> %bc49, i64 1, !dbg !43
  %bc50 = bitcast <8 x float> %243 to <8 x i32>, !dbg !43
  %309 = extractelement <8 x i32> %bc50, i64 0, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %306, i32 %307, i32 %308, i32 %309, ptr addrspace(1) %301, i1 true) #3, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgzctmmdielowewprbbad4guwlm4y45moloxyc6ilojnsbtdgwk7.py", directory: "inductor_cache/gz")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_26", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 35, column: 18, scope: !7)
!28 = !DILocation(line: 36, column: 26, scope: !7)
!29 = !DILocation(line: 38, column: 19, scope: !7)
!30 = !DILocation(line: 32, column: 18, scope: !7)
!31 = !DILocation(line: 33, column: 18, scope: !7)
!32 = !DILocation(line: 41, column: 19, scope: !7)
!33 = !DILocation(line: 42, column: 20, scope: !7)
!34 = !DILocation(line: 43, column: 20, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 45, column: 42, scope: !7)
!39 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 46, column: 25, scope: !7)
!41 = !DILocation(line: 46, column: 37, scope: !7)
!42 = !DILocation(line: 47, column: 25, scope: !7)
!43 = !DILocation(line: 47, column: 36, scope: !7)
!44 = !DILocation(line: 47, column: 4, scope: !7)
