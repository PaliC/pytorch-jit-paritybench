; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_threshold_backward_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 4, !dbg !12
  %11 = and i32 %10, 48, !dbg !12
  %.lobit1 = lshr i32 %9, 6, !dbg !12
  %12 = and i32 %.lobit1, 3, !dbg !12
  %13 = or disjoint i32 %12, 4, !dbg !12
  %14 = or disjoint i32 %12, 8, !dbg !12
  %15 = or disjoint i32 %12, 12, !dbg !12
  %16 = or disjoint i32 %12, 16, !dbg !12
  %17 = or disjoint i32 %12, 20, !dbg !12
  %18 = or disjoint i32 %12, 24, !dbg !12
  %19 = or disjoint i32 %12, 28, !dbg !12
  %20 = or disjoint i32 %12, 32, !dbg !12
  %21 = or disjoint i32 %12, 36, !dbg !12
  %22 = or disjoint i32 %12, 40, !dbg !12
  %23 = or disjoint i32 %12, 44, !dbg !12
  %24 = or disjoint i32 %12, 48, !dbg !12
  %25 = or disjoint i32 %12, 52, !dbg !12
  %26 = or disjoint i32 %12, 56, !dbg !12
  %27 = or disjoint i32 %12, 60, !dbg !12
  %28 = or disjoint i32 %8, %11, !dbg !13
  %29 = or disjoint i32 %28, 4, !dbg !13
  %30 = or disjoint i32 %28, 8, !dbg !13
  %31 = or disjoint i32 %28, 12, !dbg !13
  %32 = or disjoint i32 %8, %12, !dbg !13
  %33 = or disjoint i32 %8, %13, !dbg !13
  %34 = or disjoint i32 %8, %14, !dbg !13
  %35 = or disjoint i32 %8, %15, !dbg !13
  %36 = or disjoint i32 %8, %16, !dbg !13
  %37 = or disjoint i32 %8, %17, !dbg !13
  %38 = or disjoint i32 %8, %18, !dbg !13
  %39 = or disjoint i32 %8, %19, !dbg !13
  %40 = or disjoint i32 %8, %20, !dbg !13
  %41 = or disjoint i32 %8, %21, !dbg !13
  %42 = or disjoint i32 %8, %22, !dbg !13
  %43 = or disjoint i32 %8, %23, !dbg !13
  %44 = or disjoint i32 %8, %24, !dbg !13
  %45 = or disjoint i32 %8, %25, !dbg !13
  %46 = or disjoint i32 %8, %26, !dbg !13
  %47 = or disjoint i32 %8, %27, !dbg !13
  %48 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %49 = shl i32 %48, 6, !dbg !15
  %50 = lshr i32 %9, 2, !dbg !16
  %51 = and i32 %50, 63, !dbg !16
  %52 = and i32 %9, 63, !dbg !16
  %53 = or disjoint i32 %49, %51, !dbg !17
  %54 = or disjoint i32 %49, %52, !dbg !17
  %55 = icmp slt i32 %53, 45, !dbg !18
  %56 = icmp slt i32 %54, 45, !dbg !18
  %.frozen = freeze i32 %28, !dbg !19
  %57 = sdiv i32 %.frozen, 512, !dbg !19
  %58 = mul i32 %57, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %58, !dbg !20
  %59 = srem i32 %29, 512, !dbg !20
  %60 = srem i32 %30, 512, !dbg !20
  %61 = srem i32 %31, 512, !dbg !20
  %62 = shl i32 %53, 9, !dbg !21
  %63 = mul i32 %57, 23040, !dbg !22
  %64 = add i32 %63, %62, !dbg !23
  %65 = add i32 %64, %.decomposed, !dbg !24
  %66 = add i32 %64, %59, !dbg !24
  %67 = add i32 %64, %60, !dbg !24
  %68 = add i32 %64, %61, !dbg !24
  %69 = sext i32 %65 to i64, !dbg !25
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !25
  %71 = sext i32 %66 to i64, !dbg !25
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !25
  %73 = sext i32 %67 to i64, !dbg !25
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !25
  %75 = sext i32 %68 to i64, !dbg !25
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !25
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 %55) #2, !dbg !26
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !26
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !26
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 %55) #2, !dbg !26
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !26
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !26
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !26
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 %55) #2, !dbg !26
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !26
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !26
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !26
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !26
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 %55) #2, !dbg !26
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !26
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !26
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !26
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !26
  %97 = sext i32 %.decomposed to i64, !dbg !27
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %97, !dbg !27
  %99 = sext i32 %59 to i64, !dbg !27
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !27
  %101 = sext i32 %60 to i64, !dbg !27
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !27
  %103 = sext i32 %61 to i64, !dbg !27
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !27
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %98, i1 true) #2, !dbg !28
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !28
  %107 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !28
  %108 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !28
  %109 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !28
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 true) #2, !dbg !28
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !28
  %112 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !28
  %113 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !28
  %114 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !28
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 true) #2, !dbg !28
  %116 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !28
  %117 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !28
  %118 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !28
  %119 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !28
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 true) #2, !dbg !28
  %121 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !28
  %122 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !28
  %123 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !28
  %124 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !28
  %125 = mul i32 %32, 45, !dbg !29
  %126 = mul i32 %33, 45, !dbg !29
  %127 = mul i32 %34, 45, !dbg !29
  %128 = mul i32 %35, 45, !dbg !29
  %129 = mul i32 %36, 45, !dbg !29
  %130 = mul i32 %37, 45, !dbg !29
  %131 = mul i32 %38, 45, !dbg !29
  %132 = mul i32 %39, 45, !dbg !29
  %133 = mul i32 %40, 45, !dbg !29
  %134 = mul i32 %41, 45, !dbg !29
  %135 = mul i32 %42, 45, !dbg !29
  %136 = mul i32 %43, 45, !dbg !29
  %137 = mul i32 %44, 45, !dbg !29
  %138 = mul i32 %45, 45, !dbg !29
  %139 = mul i32 %46, 45, !dbg !29
  %140 = mul i32 %47, 45, !dbg !29
  %141 = add i32 %54, %125, !dbg !30
  %142 = add i32 %54, %126, !dbg !30
  %143 = add i32 %54, %127, !dbg !30
  %144 = add i32 %54, %128, !dbg !30
  %145 = add i32 %54, %129, !dbg !30
  %146 = add i32 %54, %130, !dbg !30
  %147 = add i32 %54, %131, !dbg !30
  %148 = add i32 %54, %132, !dbg !30
  %149 = add i32 %54, %133, !dbg !30
  %150 = add i32 %54, %134, !dbg !30
  %151 = add i32 %54, %135, !dbg !30
  %152 = add i32 %54, %136, !dbg !30
  %153 = add i32 %54, %137, !dbg !30
  %154 = add i32 %54, %138, !dbg !30
  %155 = add i32 %54, %139, !dbg !30
  %156 = add i32 %54, %140, !dbg !30
  %157 = sext i32 %141 to i64, !dbg !31
  %158 = getelementptr float, ptr addrspace(1) %2, i64 %157, !dbg !31
  %159 = sext i32 %142 to i64, !dbg !31
  %160 = getelementptr float, ptr addrspace(1) %2, i64 %159, !dbg !31
  %161 = sext i32 %143 to i64, !dbg !31
  %162 = getelementptr float, ptr addrspace(1) %2, i64 %161, !dbg !31
  %163 = sext i32 %144 to i64, !dbg !31
  %164 = getelementptr float, ptr addrspace(1) %2, i64 %163, !dbg !31
  %165 = sext i32 %145 to i64, !dbg !31
  %166 = getelementptr float, ptr addrspace(1) %2, i64 %165, !dbg !31
  %167 = sext i32 %146 to i64, !dbg !31
  %168 = getelementptr float, ptr addrspace(1) %2, i64 %167, !dbg !31
  %169 = sext i32 %147 to i64, !dbg !31
  %170 = getelementptr float, ptr addrspace(1) %2, i64 %169, !dbg !31
  %171 = sext i32 %148 to i64, !dbg !31
  %172 = getelementptr float, ptr addrspace(1) %2, i64 %171, !dbg !31
  %173 = sext i32 %149 to i64, !dbg !31
  %174 = getelementptr float, ptr addrspace(1) %2, i64 %173, !dbg !31
  %175 = sext i32 %150 to i64, !dbg !31
  %176 = getelementptr float, ptr addrspace(1) %2, i64 %175, !dbg !31
  %177 = sext i32 %151 to i64, !dbg !31
  %178 = getelementptr float, ptr addrspace(1) %2, i64 %177, !dbg !31
  %179 = sext i32 %152 to i64, !dbg !31
  %180 = getelementptr float, ptr addrspace(1) %2, i64 %179, !dbg !31
  %181 = sext i32 %153 to i64, !dbg !31
  %182 = getelementptr float, ptr addrspace(1) %2, i64 %181, !dbg !31
  %183 = sext i32 %154 to i64, !dbg !31
  %184 = getelementptr float, ptr addrspace(1) %2, i64 %183, !dbg !31
  %185 = sext i32 %155 to i64, !dbg !31
  %186 = getelementptr float, ptr addrspace(1) %2, i64 %185, !dbg !31
  %187 = sext i32 %156 to i64, !dbg !31
  %188 = getelementptr float, ptr addrspace(1) %2, i64 %187, !dbg !31
  %189 = shl i32 %9, 10, !dbg !32
  %190 = and i32 %189, 3072, !dbg !32
  %191 = or disjoint i32 %190, %51, !dbg !32
  %192 = and i32 %9, 255, !dbg !32
  %193 = lshr exact i32 %190, 4, !dbg !32
  %194 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %193, !dbg !32
  %195 = getelementptr float, ptr addrspace(3) %194, i32 %191, !dbg !32
  %196 = or disjoint i32 %191, 64, !dbg !32
  %197 = lshr i32 %196, 6, !dbg !32
  %198 = getelementptr float, ptr addrspace(3) @global_smem, i32 %197, !dbg !32
  %199 = getelementptr float, ptr addrspace(3) %198, i32 %196, !dbg !32
  %200 = or disjoint i32 %191, 128, !dbg !32
  %201 = lshr i32 %200, 6, !dbg !32
  %202 = getelementptr float, ptr addrspace(3) @global_smem, i32 %201, !dbg !32
  %203 = getelementptr float, ptr addrspace(3) %202, i32 %200, !dbg !32
  %204 = or disjoint i32 %191, 192, !dbg !32
  %205 = lshr i32 %204, 6, !dbg !32
  %206 = getelementptr float, ptr addrspace(3) @global_smem, i32 %205, !dbg !32
  %207 = getelementptr float, ptr addrspace(3) %206, i32 %204, !dbg !32
  %208 = or disjoint i32 %191, 256, !dbg !32
  %209 = lshr i32 %208, 6, !dbg !32
  %210 = getelementptr float, ptr addrspace(3) @global_smem, i32 %209, !dbg !32
  %211 = getelementptr float, ptr addrspace(3) %210, i32 %208, !dbg !32
  %212 = or disjoint i32 %191, 320, !dbg !32
  %213 = lshr i32 %212, 6, !dbg !32
  %214 = getelementptr float, ptr addrspace(3) @global_smem, i32 %213, !dbg !32
  %215 = getelementptr float, ptr addrspace(3) %214, i32 %212, !dbg !32
  %216 = or disjoint i32 %191, 384, !dbg !32
  %217 = lshr i32 %216, 6, !dbg !32
  %218 = getelementptr float, ptr addrspace(3) @global_smem, i32 %217, !dbg !32
  %219 = getelementptr float, ptr addrspace(3) %218, i32 %216, !dbg !32
  %220 = or disjoint i32 %191, 448, !dbg !32
  %221 = lshr i32 %220, 6, !dbg !32
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i32 %221, !dbg !32
  %223 = getelementptr float, ptr addrspace(3) %222, i32 %220, !dbg !32
  %224 = or disjoint i32 %191, 512, !dbg !32
  %225 = lshr i32 %224, 6, !dbg !32
  %226 = getelementptr float, ptr addrspace(3) @global_smem, i32 %225, !dbg !32
  %227 = getelementptr float, ptr addrspace(3) %226, i32 %224, !dbg !32
  %228 = or disjoint i32 %191, 576, !dbg !32
  %229 = lshr i32 %228, 6, !dbg !32
  %230 = getelementptr float, ptr addrspace(3) @global_smem, i32 %229, !dbg !32
  %231 = getelementptr float, ptr addrspace(3) %230, i32 %228, !dbg !32
  %232 = or disjoint i32 %191, 640, !dbg !32
  %233 = lshr i32 %232, 6, !dbg !32
  %234 = getelementptr float, ptr addrspace(3) @global_smem, i32 %233, !dbg !32
  %235 = getelementptr float, ptr addrspace(3) %234, i32 %232, !dbg !32
  %236 = or disjoint i32 %191, 704, !dbg !32
  %237 = lshr i32 %236, 6, !dbg !32
  %238 = getelementptr float, ptr addrspace(3) @global_smem, i32 %237, !dbg !32
  %239 = getelementptr float, ptr addrspace(3) %238, i32 %236, !dbg !32
  %240 = or disjoint i32 %191, 768, !dbg !32
  %241 = lshr i32 %240, 6, !dbg !32
  %242 = getelementptr float, ptr addrspace(3) @global_smem, i32 %241, !dbg !32
  %243 = getelementptr float, ptr addrspace(3) %242, i32 %240, !dbg !32
  %244 = or disjoint i32 %191, 832, !dbg !32
  %245 = lshr i32 %244, 6, !dbg !32
  %246 = getelementptr float, ptr addrspace(3) @global_smem, i32 %245, !dbg !32
  %247 = getelementptr float, ptr addrspace(3) %246, i32 %244, !dbg !32
  %248 = or disjoint i32 %191, 896, !dbg !32
  %249 = lshr i32 %248, 6, !dbg !32
  %250 = getelementptr float, ptr addrspace(3) @global_smem, i32 %249, !dbg !32
  %251 = getelementptr float, ptr addrspace(3) %250, i32 %248, !dbg !32
  %252 = or disjoint i32 %191, 960, !dbg !32
  %253 = lshr i32 %252, 6, !dbg !32
  %254 = getelementptr float, ptr addrspace(3) @global_smem, i32 %253, !dbg !32
  %255 = getelementptr float, ptr addrspace(3) %254, i32 %252, !dbg !32
  %256 = lshr i32 %192, 6, !dbg !32
  %257 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %256, !dbg !32
  %258 = getelementptr inbounds float, ptr addrspace(3) %257, i32 %192, !dbg !32
  %259 = or disjoint i32 %192, 256, !dbg !32
  %260 = lshr i32 %259, 6, !dbg !32
  %261 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %260, !dbg !32
  %262 = getelementptr inbounds float, ptr addrspace(3) %261, i32 %259, !dbg !32
  %263 = or disjoint i32 %192, 512, !dbg !32
  %264 = lshr i32 %263, 6, !dbg !32
  %265 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %264, !dbg !32
  %266 = getelementptr inbounds float, ptr addrspace(3) %265, i32 %263, !dbg !32
  %267 = or disjoint i32 %192, 768, !dbg !32
  %268 = lshr i32 %267, 6, !dbg !32
  %269 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %268, !dbg !32
  %270 = getelementptr inbounds float, ptr addrspace(3) %269, i32 %267, !dbg !32
  %271 = or disjoint i32 %192, 1024, !dbg !32
  %272 = lshr i32 %271, 6, !dbg !32
  %273 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %272, !dbg !32
  %274 = getelementptr inbounds float, ptr addrspace(3) %273, i32 %271, !dbg !32
  %275 = or disjoint i32 %192, 1280, !dbg !32
  %276 = lshr i32 %275, 6, !dbg !32
  %277 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %276, !dbg !32
  %278 = getelementptr inbounds float, ptr addrspace(3) %277, i32 %275, !dbg !32
  %279 = or disjoint i32 %192, 1536, !dbg !32
  %280 = lshr i32 %279, 6, !dbg !32
  %281 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %280, !dbg !32
  %282 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %279, !dbg !32
  %283 = or disjoint i32 %192, 1792, !dbg !32
  %284 = lshr i32 %283, 6, !dbg !32
  %285 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %284, !dbg !32
  %286 = getelementptr inbounds float, ptr addrspace(3) %285, i32 %283, !dbg !32
  %287 = or disjoint i32 %192, 2048, !dbg !32
  %288 = lshr i32 %287, 6, !dbg !32
  %289 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %288, !dbg !32
  %290 = getelementptr inbounds float, ptr addrspace(3) %289, i32 %287, !dbg !32
  %291 = or disjoint i32 %192, 2304, !dbg !32
  %292 = lshr i32 %291, 6, !dbg !32
  %293 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %292, !dbg !32
  %294 = getelementptr inbounds float, ptr addrspace(3) %293, i32 %291, !dbg !32
  %295 = or disjoint i32 %192, 2560, !dbg !32
  %296 = lshr i32 %295, 6, !dbg !32
  %297 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %296, !dbg !32
  %298 = getelementptr inbounds float, ptr addrspace(3) %297, i32 %295, !dbg !32
  %299 = or disjoint i32 %192, 2816, !dbg !32
  %300 = lshr i32 %299, 6, !dbg !32
  %301 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %300, !dbg !32
  %302 = getelementptr inbounds float, ptr addrspace(3) %301, i32 %299, !dbg !32
  %303 = or disjoint i32 %192, 3072, !dbg !32
  %304 = lshr i32 %303, 6, !dbg !32
  %305 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %304, !dbg !32
  %306 = getelementptr inbounds float, ptr addrspace(3) %305, i32 %303, !dbg !32
  %307 = or disjoint i32 %192, 3328, !dbg !32
  %308 = lshr i32 %307, 6, !dbg !32
  %309 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %308, !dbg !32
  %310 = getelementptr inbounds float, ptr addrspace(3) %309, i32 %307, !dbg !32
  %311 = or disjoint i32 %192, 3584, !dbg !32
  %312 = lshr i32 %311, 6, !dbg !32
  %313 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %312, !dbg !32
  %314 = getelementptr inbounds float, ptr addrspace(3) %313, i32 %311, !dbg !32
  %315 = or disjoint i32 %192, 3840, !dbg !32
  %316 = lshr i32 %315, 6, !dbg !32
  %317 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %316, !dbg !32
  %318 = getelementptr inbounds float, ptr addrspace(3) %317, i32 %315, !dbg !32
  %319 = getelementptr i1, ptr addrspace(1) %3, i64 %69, !dbg !33
  %320 = insertelement <4 x i32> poison, i32 %78, i64 0, !dbg !26
  %321 = insertelement <4 x i32> %320, i32 %79, i64 1, !dbg !26
  %322 = insertelement <4 x i32> %321, i32 %80, i64 2, !dbg !26
  %323 = insertelement <4 x i32> %322, i32 %81, i64 3, !dbg !26
  %324 = bitcast <4 x i32> %323 to <4 x float>, !dbg !26
  %325 = insertelement <4 x i32> poison, i32 %106, i64 0, !dbg !28
  %326 = insertelement <4 x i32> %325, i32 %107, i64 1, !dbg !28
  %327 = insertelement <4 x i32> %326, i32 %108, i64 2, !dbg !28
  %328 = insertelement <4 x i32> %327, i32 %109, i64 3, !dbg !28
  %329 = bitcast <4 x i32> %328 to <4 x float>, !dbg !28
  %330 = fadd <4 x float> %324, %329, !dbg !34
  %331 = fcmp olt <4 x float> %330, zeroinitializer, !dbg !35
  %332 = select <4 x i1> %331, <4 x float> zeroinitializer, <4 x float> %330, !dbg !39
  %333 = fcmp ole <4 x float> %332, zeroinitializer, !dbg !40
  %334 = extractelement <4 x float> %332, i64 0, !dbg !32
  %335 = bitcast float %334 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %335, i1 true) #2, !dbg !32
  %336 = extractelement <4 x float> %332, i64 1, !dbg !32
  %337 = bitcast float %336 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %337, i1 true) #2, !dbg !32
  %338 = extractelement <4 x float> %332, i64 2, !dbg !32
  %339 = bitcast float %338 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %339, i1 true) #2, !dbg !32
  %340 = extractelement <4 x float> %332, i64 3, !dbg !32
  %341 = bitcast float %340 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %207, <1 x i32> %341, i1 true) #2, !dbg !32
  %342 = insertelement <4 x i32> poison, i32 %83, i64 0, !dbg !26
  %343 = insertelement <4 x i32> %342, i32 %84, i64 1, !dbg !26
  %344 = insertelement <4 x i32> %343, i32 %85, i64 2, !dbg !26
  %345 = insertelement <4 x i32> %344, i32 %86, i64 3, !dbg !26
  %346 = bitcast <4 x i32> %345 to <4 x float>, !dbg !26
  %347 = insertelement <4 x i32> poison, i32 %111, i64 0, !dbg !28
  %348 = insertelement <4 x i32> %347, i32 %112, i64 1, !dbg !28
  %349 = insertelement <4 x i32> %348, i32 %113, i64 2, !dbg !28
  %350 = insertelement <4 x i32> %349, i32 %114, i64 3, !dbg !28
  %351 = bitcast <4 x i32> %350 to <4 x float>, !dbg !28
  %352 = fadd <4 x float> %346, %351, !dbg !34
  %353 = fcmp olt <4 x float> %352, zeroinitializer, !dbg !35
  %354 = select <4 x i1> %353, <4 x float> zeroinitializer, <4 x float> %352, !dbg !39
  %355 = fcmp ole <4 x float> %354, zeroinitializer, !dbg !40
  %356 = extractelement <4 x float> %354, i64 0, !dbg !32
  %357 = bitcast float %356 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %357, i1 true) #2, !dbg !32
  %358 = extractelement <4 x float> %354, i64 1, !dbg !32
  %359 = bitcast float %358 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %359, i1 true) #2, !dbg !32
  %360 = extractelement <4 x float> %354, i64 2, !dbg !32
  %361 = bitcast float %360 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %361, i1 true) #2, !dbg !32
  %362 = extractelement <4 x float> %354, i64 3, !dbg !32
  %363 = bitcast float %362 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %363, i1 true) #2, !dbg !32
  %364 = insertelement <4 x i32> poison, i32 %88, i64 0, !dbg !26
  %365 = insertelement <4 x i32> %364, i32 %89, i64 1, !dbg !26
  %366 = insertelement <4 x i32> %365, i32 %90, i64 2, !dbg !26
  %367 = insertelement <4 x i32> %366, i32 %91, i64 3, !dbg !26
  %368 = bitcast <4 x i32> %367 to <4 x float>, !dbg !26
  %369 = insertelement <4 x i32> poison, i32 %116, i64 0, !dbg !28
  %370 = insertelement <4 x i32> %369, i32 %117, i64 1, !dbg !28
  %371 = insertelement <4 x i32> %370, i32 %118, i64 2, !dbg !28
  %372 = insertelement <4 x i32> %371, i32 %119, i64 3, !dbg !28
  %373 = bitcast <4 x i32> %372 to <4 x float>, !dbg !28
  %374 = fadd <4 x float> %368, %373, !dbg !34
  %375 = fcmp olt <4 x float> %374, zeroinitializer, !dbg !35
  %376 = select <4 x i1> %375, <4 x float> zeroinitializer, <4 x float> %374, !dbg !39
  %377 = fcmp ole <4 x float> %376, zeroinitializer, !dbg !40
  %378 = extractelement <4 x float> %376, i64 0, !dbg !32
  %379 = bitcast float %378 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, <1 x i32> %379, i1 true) #2, !dbg !32
  %380 = extractelement <4 x float> %376, i64 1, !dbg !32
  %381 = bitcast float %380 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %381, i1 true) #2, !dbg !32
  %382 = extractelement <4 x float> %376, i64 2, !dbg !32
  %383 = bitcast float %382 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %383, i1 true) #2, !dbg !32
  %384 = extractelement <4 x float> %376, i64 3, !dbg !32
  %385 = bitcast float %384 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %385, i1 true) #2, !dbg !32
  %386 = insertelement <4 x i32> poison, i32 %93, i64 0, !dbg !26
  %387 = insertelement <4 x i32> %386, i32 %94, i64 1, !dbg !26
  %388 = insertelement <4 x i32> %387, i32 %95, i64 2, !dbg !26
  %389 = insertelement <4 x i32> %388, i32 %96, i64 3, !dbg !26
  %390 = bitcast <4 x i32> %389 to <4 x float>, !dbg !26
  %391 = insertelement <4 x i32> poison, i32 %121, i64 0, !dbg !28
  %392 = insertelement <4 x i32> %391, i32 %122, i64 1, !dbg !28
  %393 = insertelement <4 x i32> %392, i32 %123, i64 2, !dbg !28
  %394 = insertelement <4 x i32> %393, i32 %124, i64 3, !dbg !28
  %395 = bitcast <4 x i32> %394 to <4 x float>, !dbg !28
  %396 = fadd <4 x float> %390, %395, !dbg !34
  %397 = fcmp olt <4 x float> %396, zeroinitializer, !dbg !35
  %398 = select <4 x i1> %397, <4 x float> zeroinitializer, <4 x float> %396, !dbg !39
  %399 = fcmp ole <4 x float> %398, zeroinitializer, !dbg !40
  %400 = extractelement <4 x float> %398, i64 0, !dbg !32
  %401 = bitcast float %400 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %401, i1 true) #2, !dbg !32
  %402 = extractelement <4 x float> %398, i64 1, !dbg !32
  %403 = bitcast float %402 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %403, i1 true) #2, !dbg !32
  %404 = extractelement <4 x float> %398, i64 2, !dbg !32
  %405 = bitcast float %404 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %251, <1 x i32> %405, i1 true) #2, !dbg !32
  %406 = extractelement <4 x float> %398, i64 3, !dbg !32
  %407 = bitcast float %406 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %407, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %408 = load i32, ptr addrspace(3) %258, align 4, !dbg !32
  %409 = load i32, ptr addrspace(3) %262, align 4, !dbg !32
  %410 = load i32, ptr addrspace(3) %266, align 4, !dbg !32
  %411 = load i32, ptr addrspace(3) %270, align 4, !dbg !32
  %412 = load i32, ptr addrspace(3) %274, align 4, !dbg !32
  %413 = load i32, ptr addrspace(3) %278, align 4, !dbg !32
  %414 = load i32, ptr addrspace(3) %282, align 4, !dbg !32
  %415 = load i32, ptr addrspace(3) %286, align 4, !dbg !32
  %416 = load i32, ptr addrspace(3) %290, align 4, !dbg !32
  %417 = load i32, ptr addrspace(3) %294, align 4, !dbg !32
  %418 = load i32, ptr addrspace(3) %298, align 4, !dbg !32
  %419 = load i32, ptr addrspace(3) %302, align 4, !dbg !32
  %420 = load i32, ptr addrspace(3) %306, align 4, !dbg !32
  %421 = load i32, ptr addrspace(3) %310, align 4, !dbg !32
  %422 = load i32, ptr addrspace(3) %314, align 4, !dbg !32
  %423 = load i32, ptr addrspace(3) %318, align 4, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %408, ptr addrspace(1) %158, i1 %56) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %409, ptr addrspace(1) %160, i1 %56) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %410, ptr addrspace(1) %162, i1 %56) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %411, ptr addrspace(1) %164, i1 %56) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %412, ptr addrspace(1) %166, i1 %56) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %413, ptr addrspace(1) %168, i1 %56) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %414, ptr addrspace(1) %170, i1 %56) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %415, ptr addrspace(1) %172, i1 %56) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %416, ptr addrspace(1) %174, i1 %56) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %417, ptr addrspace(1) %176, i1 %56) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %418, ptr addrspace(1) %178, i1 %56) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %419, ptr addrspace(1) %180, i1 %56) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %420, ptr addrspace(1) %182, i1 %56) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %421, ptr addrspace(1) %184, i1 %56) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %422, ptr addrspace(1) %186, i1 %56) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %423, ptr addrspace(1) %188, i1 %56) #2, !dbg !32
  %424 = zext <4 x i1> %333 to <4 x i8>, !dbg !41
  %425 = bitcast <4 x i8> %424 to i32, !dbg !41
  %426 = zext <4 x i1> %355 to <4 x i8>, !dbg !41
  %427 = bitcast <4 x i8> %426 to i32, !dbg !41
  %428 = zext <4 x i1> %377 to <4 x i8>, !dbg !41
  %429 = bitcast <4 x i8> %428 to i32, !dbg !41
  %430 = zext <4 x i1> %399 to <4 x i8>, !dbg !41
  %431 = bitcast <4 x i8> %430 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %425, i32 %427, i32 %429, i32 %431, ptr addrspace(1) %319, i1 %55) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdbauw2abvkxbtnbefegg7iyen3r3nc6erh6syh6lxwxyyegsm4v.py", directory: "inductor_cache/db")
!4 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_16, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_threshold_backward_16", linkageName: "triton_poi_fused_convolution_relu_threshold_backward_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 39, column: 33, scope: !7)
!30 = !DILocation(line: 39, column: 30, scope: !7)
!31 = !DILocation(line: 39, column: 25, scope: !7)
!32 = !DILocation(line: 39, column: 44, scope: !7)
!33 = !DILocation(line: 40, column: 25, scope: !7)
!34 = !DILocation(line: 34, column: 18, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 36, column: 40, scope: !7)
!39 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 38, column: 19, scope: !7)
!41 = !DILocation(line: 40, column: 56, scope: !7)
!42 = !DILocation(line: 40, column: 4, scope: !7)
