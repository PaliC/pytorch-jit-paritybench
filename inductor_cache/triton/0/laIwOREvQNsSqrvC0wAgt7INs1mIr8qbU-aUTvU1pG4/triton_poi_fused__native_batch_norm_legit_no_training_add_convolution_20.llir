; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %17 = shl i32 %16, 8, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = shl i32 %18, 1, !dbg !12
  %20 = and i32 %19, 254, !dbg !12
  %21 = or disjoint i32 %17, %20, !dbg !13
  %22 = icmp slt i32 %21, 3584, !dbg !14
  %23 = sdiv i32 %21, 16, !dbg !15
  %24 = srem i32 %23, 56, !dbg !16
  %25 = sext i32 %21 to i64, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !17
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %22) #3, !dbg !18
  %28 = sext i32 %24 to i64, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !19
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %22) #3, !dbg !20
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %22) #3, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !21
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %22) #3, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %22) #3, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %22) #3, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %22) #3, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %22) #3, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !27
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %22) #3, !dbg !28
  %42 = bitcast i32 %41 to float, !dbg !28
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %22) #3, !dbg !28
  %44 = bitcast i32 %43 to float, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %7, i64 %28, !dbg !29
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %22) #3, !dbg !30
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %22) #3, !dbg !30
  %48 = getelementptr float, ptr addrspace(1) %8, i64 %28, !dbg !31
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %22) #3, !dbg !32
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %22) #3, !dbg !32
  %51 = getelementptr float, ptr addrspace(1) %9, i64 %28, !dbg !33
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %22) #3, !dbg !34
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %22) #3, !dbg !34
  %54 = getelementptr float, ptr addrspace(1) %10, i64 %28, !dbg !35
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %22) #3, !dbg !36
  %56 = bitcast i32 %55 to float, !dbg !36
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %22) #3, !dbg !36
  %58 = bitcast i32 %57 to float, !dbg !36
  %59 = getelementptr float, ptr addrspace(1) %11, i64 %28, !dbg !37
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %22) #3, !dbg !38
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %22) #3, !dbg !38
  %62 = getelementptr float, ptr addrspace(1) %12, i64 %28, !dbg !39
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %22) #3, !dbg !40
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %22) #3, !dbg !40
  %65 = getelementptr float, ptr addrspace(1) %13, i64 %25, !dbg !41
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %65, i1 %22) #3, !dbg !42
  %67 = fadd float %42, 0x3EE4F8B580000000, !dbg !43
  %68 = fadd float %44, 0x3EE4F8B580000000, !dbg !43
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i = icmp eq i32 %69, 0, !dbg !44
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i = icmp eq i32 %70, 0, !dbg !44
  br i1 %.not.i, label %76, label %71, !dbg !44

71:                                               ; preds = %15
  br i1 %.not1.i, label %74, label %72, !dbg !44

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

76:                                               ; preds = %15
  br i1 %.not1.i, label %79, label %77, !dbg !44

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

__nv_sqrtf.exit:                                  ; preds = %72, %74, %77, %79
  %.0.i = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !44
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i1 = icmp eq i32 %81, 0, !dbg !44
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i4 = icmp eq i32 %82, 0, !dbg !44
  br i1 %.not.i1, label %88, label %83, !dbg !44

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %86, label %84, !dbg !44

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %91, label %89, !dbg !44

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

__nv_sqrtf.exit5:                                 ; preds = %84, %86, %89, %91
  %.0.i3 = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !44
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !45
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !45
  %95 = fadd float %56, 0x3EE4F8B580000000, !dbg !46
  %96 = fadd float %58, 0x3EE4F8B580000000, !dbg !46
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i6 = icmp eq i32 %97, 0, !dbg !47
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i9 = icmp eq i32 %98, 0, !dbg !47
  br i1 %.not.i6, label %104, label %99, !dbg !47

99:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %102, label %100, !dbg !47

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

104:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %107, label %105, !dbg !47

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

__nv_sqrtf.exit10:                                ; preds = %100, %102, %105, %107
  %.0.i8 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !47
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i11 = icmp eq i32 %109, 0, !dbg !47
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i14 = icmp eq i32 %110, 0, !dbg !47
  br i1 %.not.i11, label %116, label %111, !dbg !47

111:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %114, label %112, !dbg !47

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %96) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %96) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

116:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %119, label %117, !dbg !47

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.f(float %96) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.f(float %96) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

__nv_sqrtf.exit15:                                ; preds = %112, %114, %117, %119
  %.0.i13 = phi float [ %113, %112 ], [ %115, %114 ], [ %118, %117 ], [ %120, %119 ], !dbg !47
  %121 = extractvalue { i32, i32 } %33, 1, !dbg !22
  %122 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !20
  %123 = insertelement <2 x i32> %122, i32 %36, i64 1, !dbg !20
  %124 = bitcast <2 x i32> %123 to <2 x float>, !dbg !20
  %125 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !26
  %126 = insertelement <2 x i32> %125, i32 %53, i64 1, !dbg !26
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !26
  %128 = extractvalue { i32, i32 } %33, 0, !dbg !22
  %129 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !20
  %130 = insertelement <2 x i32> %129, i32 %35, i64 1, !dbg !20
  %131 = bitcast <2 x i32> %130 to <2 x float>, !dbg !20
  %132 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !26
  %133 = insertelement <2 x i32> %132, i32 %52, i64 1, !dbg !26
  %134 = bitcast <2 x i32> %133 to <2 x float>, !dbg !26
  %135 = extractvalue { i32, i32 } %27, 1, !dbg !18
  %136 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !30
  %137 = insertelement <2 x i32> %136, i32 %61, i64 1, !dbg !30
  %138 = bitcast <2 x i32> %137 to <2 x float>, !dbg !30
  %139 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !32
  %140 = insertelement <2 x i32> %139, i32 %64, i64 1, !dbg !32
  %141 = bitcast <2 x i32> %140 to <2 x float>, !dbg !32
  %142 = extractvalue { i32, i32 } %27, 0, !dbg !18
  %143 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !30
  %144 = insertelement <2 x i32> %143, i32 %60, i64 1, !dbg !30
  %145 = bitcast <2 x i32> %144 to <2 x float>, !dbg !30
  %146 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !32
  %147 = insertelement <2 x i32> %146, i32 %63, i64 1, !dbg !32
  %148 = bitcast <2 x i32> %147 to <2 x float>, !dbg !32
  %149 = extractvalue { i32, i32 } %66, 1, !dbg !42
  %150 = bitcast i32 %149 to float, !dbg !42
  %151 = extractvalue { i32, i32 } %66, 0, !dbg !42
  %152 = bitcast i32 %151 to float, !dbg !42
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !48
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !48
  %155 = insertelement <2 x i32> poison, i32 %142, i64 0, !dbg !18
  %156 = insertelement <2 x i32> %155, i32 %128, i64 1, !dbg !18
  %157 = bitcast <2 x i32> %156 to <2 x float>, !dbg !18
  %158 = fadd <2 x float> %157, %131, !dbg !49
  %159 = fsub <2 x float> %158, %134, !dbg !50
  %160 = insertelement <2 x float> poison, float %93, i64 0, !dbg !51
  %161 = insertelement <2 x float> %160, float %153, i64 1, !dbg !51
  %162 = fmul <2 x float> %159, %161, !dbg !51
  %163 = fmul <2 x float> %162, %145, !dbg !52
  %164 = fadd <2 x float> %163, %148, !dbg !53
  %165 = insertelement <2 x i32> poison, i32 %135, i64 0, !dbg !18
  %166 = insertelement <2 x i32> %165, i32 %121, i64 1, !dbg !18
  %167 = bitcast <2 x i32> %166 to <2 x float>, !dbg !18
  %168 = fadd <2 x float> %167, %124, !dbg !49
  %169 = fsub <2 x float> %168, %127, !dbg !50
  %170 = insertelement <2 x float> poison, float %94, i64 0, !dbg !51
  %171 = insertelement <2 x float> %170, float %154, i64 1, !dbg !51
  %172 = fmul <2 x float> %169, %171, !dbg !51
  %173 = fmul <2 x float> %172, %138, !dbg !52
  %174 = fadd <2 x float> %173, %141, !dbg !53
  %shift = shufflevector <2 x float> %164, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %175 = fadd <2 x float> %164, %shift, !dbg !54
  %176 = extractelement <2 x float> %175, i64 0, !dbg !54
  %shift16 = shufflevector <2 x float> %174, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %177 = fadd <2 x float> %174, %shift16, !dbg !54
  %178 = extractelement <2 x float> %177, i64 0, !dbg !54
  %179 = fadd float %176, %152, !dbg !55
  %180 = fadd float %178, %150, !dbg !55
  %bc = bitcast <2 x float> %158 to <2 x i32>, !dbg !56
  %181 = extractelement <2 x i32> %bc, i64 0, !dbg !56
  %bc17 = bitcast <2 x float> %168 to <2 x i32>, !dbg !56
  %182 = extractelement <2 x i32> %bc17, i64 0, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %181, i32 %182, ptr addrspace(1) %26, i1 %22) #3, !dbg !56
  %bc18 = bitcast <2 x float> %158 to <2 x i32>, !dbg !57
  %183 = extractelement <2 x i32> %bc18, i64 1, !dbg !57
  %bc19 = bitcast <2 x float> %168 to <2 x i32>, !dbg !57
  %184 = extractelement <2 x i32> %bc19, i64 1, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %183, i32 %184, ptr addrspace(1) %32, i1 %22) #3, !dbg !57
  %185 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !58
  %186 = bitcast float %179 to i32, !dbg !59
  %187 = bitcast float %180 to i32, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %186, i32 %187, ptr addrspace(1) %185, i1 %22) #3, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxaemctwaie6ztduzmqmceihf3r6ebi4pzrr4gop6aeckut4zfdt.py", directory: "inductor_cache/xa")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_20", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 34, scope: !7)
!18 = !DILocation(line: 26, column: 39, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 34, scope: !7)
!22 = !DILocation(line: 28, column: 39, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 35, scope: !7)
!27 = !DILocation(line: 31, column: 30, scope: !7)
!28 = !DILocation(line: 31, column: 35, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 33, column: 31, scope: !7)
!32 = !DILocation(line: 33, column: 36, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 31, scope: !7)
!38 = !DILocation(line: 36, column: 36, scope: !7)
!39 = !DILocation(line: 37, column: 31, scope: !7)
!40 = !DILocation(line: 37, column: 36, scope: !7)
!41 = !DILocation(line: 38, column: 32, scope: !7)
!42 = !DILocation(line: 38, column: 37, scope: !7)
!43 = !DILocation(line: 43, column: 19, scope: !7)
!44 = !DILocation(line: 44, column: 27, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 53, column: 20, scope: !7)
!47 = !DILocation(line: 54, column: 27, scope: !7)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 39, column: 18, scope: !7)
!50 = !DILocation(line: 41, column: 18, scope: !7)
!51 = !DILocation(line: 49, column: 19, scope: !7)
!52 = !DILocation(line: 50, column: 20, scope: !7)
!53 = !DILocation(line: 51, column: 20, scope: !7)
!54 = !DILocation(line: 60, column: 20, scope: !7)
!55 = !DILocation(line: 61, column: 20, scope: !7)
!56 = !DILocation(line: 62, column: 39, scope: !7)
!57 = !DILocation(line: 63, column: 39, scope: !7)
!58 = !DILocation(line: 64, column: 28, scope: !7)
!59 = !DILocation(line: 64, column: 40, scope: !7)
!60 = !DILocation(line: 64, column: 4, scope: !7)
