; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_div_exp_log_mean_neg_pow_rsub_sub_sum_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = shl i32 %5, 1, !dbg !10
  %7 = and i32 %6, 14, !dbg !10
  %8 = shl i32 %5, 3, !dbg !11
  %9 = and i32 %8, 448, !dbg !11
  %10 = or disjoint i32 %7, %9, !dbg !12
  %11 = zext nneg i32 %10 to i64, !dbg !13
  %12 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !13
  %13 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %12, i1 true) #4, !dbg !14
  %14 = extractvalue { i32, i32 } %13, 0, !dbg !14
  %15 = extractvalue { i32, i32 } %13, 1, !dbg !14
  %16 = bitcast i32 %14 to float, !dbg !14
  %17 = bitcast i32 %15 to float, !dbg !14
  %18 = or disjoint i32 %7, 16, !dbg !15
  %19 = or disjoint i32 %18, %9, !dbg !16
  %20 = zext nneg i32 %19 to i64, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !17
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #4, !dbg !18
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !18
  %24 = extractvalue { i32, i32 } %22, 1, !dbg !18
  %25 = bitcast i32 %23 to float, !dbg !18
  %26 = bitcast i32 %24 to float, !dbg !18
  %27 = or disjoint i32 %7, 32, !dbg !19
  %28 = or disjoint i32 %27, %9, !dbg !20
  %29 = zext nneg i32 %28 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !21
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #4, !dbg !22
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !22
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !22
  %34 = bitcast i32 %32 to float, !dbg !22
  %35 = bitcast i32 %33 to float, !dbg !22
  %36 = or disjoint i32 %7, 48, !dbg !23
  %37 = or disjoint i32 %36, %9, !dbg !24
  %38 = zext nneg i32 %37 to i64, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !25
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !26
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !26
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !26
  %43 = bitcast i32 %41 to float, !dbg !26
  %44 = bitcast i32 %42 to float, !dbg !26
  %45 = and i32 %8, 192, !dbg !27
  %46 = or disjoint i32 %7, %45, !dbg !28
  %47 = zext nneg i32 %46 to i64, !dbg !29
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !29
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #4, !dbg !30
  %50 = or disjoint i32 %18, %45, !dbg !31
  %51 = zext nneg i32 %50 to i64, !dbg !32
  %52 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !32
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #4, !dbg !33
  %54 = or disjoint i32 %27, %45, !dbg !34
  %55 = zext nneg i32 %54 to i64, !dbg !35
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !35
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #4, !dbg !36
  %58 = or disjoint i32 %36, %45, !dbg !37
  %59 = zext nneg i32 %58 to i64, !dbg !38
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !38
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !39
  %62 = fmul float %16, %16, !dbg !40
  %63 = fmul float %17, %17, !dbg !40
  %64 = fsub float 2.000000e+00, %62, !dbg !41
  %65 = fsub float 2.000000e+00, %63, !dbg !41
  %66 = fmul float %64, 5.000000e-01, !dbg !42
  %67 = fmul float %65, 5.000000e-01, !dbg !42
  %68 = fmul float %66, 2.500000e-01, !dbg !43
  %69 = fmul float %67, 2.500000e-01, !dbg !43
  %70 = fmul float %68, 0x3FF7154760000000, !dbg !44
  %71 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %70) #4, !dbg !44
  %72 = fmul float %69, 0x3FF7154760000000, !dbg !44
  %73 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %72) #4, !dbg !44
  %74 = fmul float %25, %25, !dbg !45
  %75 = fmul float %26, %26, !dbg !45
  %76 = fsub float 2.000000e+00, %74, !dbg !46
  %77 = fsub float 2.000000e+00, %75, !dbg !46
  %78 = fmul float %76, 5.000000e-01, !dbg !47
  %79 = fmul float %77, 5.000000e-01, !dbg !47
  %80 = fmul float %78, 2.500000e-01, !dbg !48
  %81 = fmul float %79, 2.500000e-01, !dbg !48
  %82 = fmul float %80, 0x3FF7154760000000, !dbg !49
  %83 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %82) #4, !dbg !49
  %84 = fmul float %81, 0x3FF7154760000000, !dbg !49
  %85 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %84) #4, !dbg !49
  %86 = fadd float %71, %83, !dbg !50
  %87 = fadd float %73, %85, !dbg !50
  %88 = fmul float %34, %34, !dbg !51
  %89 = fmul float %35, %35, !dbg !51
  %90 = fsub float 2.000000e+00, %88, !dbg !52
  %91 = fsub float 2.000000e+00, %89, !dbg !52
  %92 = fmul float %90, 5.000000e-01, !dbg !53
  %93 = fmul float %91, 5.000000e-01, !dbg !53
  %94 = fmul float %92, 2.500000e-01, !dbg !54
  %95 = fmul float %93, 2.500000e-01, !dbg !54
  %96 = fmul float %94, 0x3FF7154760000000, !dbg !55
  %97 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %96) #4, !dbg !55
  %98 = fmul float %95, 0x3FF7154760000000, !dbg !55
  %99 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %98) #4, !dbg !55
  %100 = fadd float %86, %97, !dbg !56
  %101 = fadd float %87, %99, !dbg !56
  %102 = fmul float %43, %43, !dbg !57
  %103 = fmul float %44, %44, !dbg !57
  %104 = fsub float 2.000000e+00, %102, !dbg !58
  %105 = fsub float 2.000000e+00, %103, !dbg !58
  %106 = fmul float %104, 5.000000e-01, !dbg !59
  %107 = fmul float %105, 5.000000e-01, !dbg !59
  %108 = fmul float %106, 2.500000e-01, !dbg !60
  %109 = fmul float %107, 2.500000e-01, !dbg !60
  %110 = fmul float %108, 0x3FF7154760000000, !dbg !61
  %111 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %110) #4, !dbg !61
  %112 = fmul float %109, 0x3FF7154760000000, !dbg !61
  %113 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %112) #4, !dbg !61
  %114 = fadd float %100, %111, !dbg !62
  %115 = fadd float %101, %113, !dbg !62
  %116 = fadd float %114, 0xBFF48B5E40000000, !dbg !63
  %117 = fadd float %115, 0xBFF48B5E40000000, !dbg !63
  %118 = fcmp olt float %116, 0x3810000000000000, !dbg !64
  %119 = fmul float %116, 0x4160000000000000, !dbg !64
  %.02.i = select i1 %118, float %119, float %116, !dbg !64
  %i.i.0.i = select i1 %118, float -2.300000e+01, float 0.000000e+00, !dbg !64
  %120 = bitcast float %.02.i to i32, !dbg !64
  %121 = add i32 %120, -1059760811, !dbg !64
  %122 = and i32 %121, -8388608, !dbg !64
  %123 = sub i32 %120, %122, !dbg !64
  %124 = bitcast i32 %123 to float, !dbg !64
  %125 = sitofp i32 %122 to float, !dbg !64
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not.i = icmp eq i32 %126, 0, !dbg !64
  %127 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %125, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !64
  %128 = tail call float @llvm.nvvm.fma.rn.f(float %125, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !64
  %.08.i = select i1 %.not.i, float %128, float %127, !dbg !64
  %129 = fadd float %124, -1.000000e+00, !dbg !64
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not1.i = icmp eq i32 %130, 0, !dbg !64
  %131 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %129, float 0x3FC2073EC0000000) #4, !dbg !64
  %132 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %129, float 0x3FC2073EC0000000) #4, !dbg !64
  %.010.i = select i1 %.not1.i, float %132, float %131, !dbg !64
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not2.i = icmp eq i32 %133, 0, !dbg !64
  %134 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %129, float 0xBFBF19B980000000) #4, !dbg !64
  %135 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %129, float 0xBFBF19B980000000) #4, !dbg !64
  %.011.i = select i1 %.not2.i, float %135, float %134, !dbg !64
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not3.i = icmp eq i32 %136, 0, !dbg !64
  %137 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %129, float 0x3FC1E52AA0000000) #4, !dbg !64
  %138 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %129, float 0x3FC1E52AA0000000) #4, !dbg !64
  %.012.i = select i1 %.not3.i, float %138, float %137, !dbg !64
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not4.i = icmp eq i32 %139, 0, !dbg !64
  %140 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %129, float 0xBFC55B1720000000) #4, !dbg !64
  %141 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %129, float 0xBFC55B1720000000) #4, !dbg !64
  %.09.i = select i1 %.not4.i, float %141, float %140, !dbg !64
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not5.i = icmp eq i32 %142, 0, !dbg !64
  %143 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %129, float 0x3FC99DA160000000) #4, !dbg !64
  %144 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %129, float 0x3FC99DA160000000) #4, !dbg !64
  %.05.i = select i1 %.not5.i, float %144, float %143, !dbg !64
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not6.i = icmp eq i32 %145, 0, !dbg !64
  %146 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %129, float 0xBFCFFFE440000000) #4, !dbg !64
  %147 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %129, float 0xBFCFFFE440000000) #4, !dbg !64
  %.01.i = select i1 %.not6.i, float %147, float %146, !dbg !64
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not7.i = icmp eq i32 %148, 0, !dbg !64
  %149 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %129, float 0x3FD5554F00000000) #4, !dbg !64
  %150 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %129, float 0x3FD5554F00000000) #4, !dbg !64
  %.0.i = select i1 %.not7.i, float %150, float %149, !dbg !64
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not8.i = icmp eq i32 %151, 0, !dbg !64
  %152 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %129, float -5.000000e-01) #4, !dbg !64
  %153 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %129, float -5.000000e-01) #4, !dbg !64
  %.07.i = select i1 %.not8.i, float %153, float %152, !dbg !64
  %154 = fmul float %129, %.07.i, !dbg !64
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not9.i = icmp eq i32 %155, 0, !dbg !64
  %156 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %154, float %129, float %129) #4, !dbg !64
  %157 = tail call float @llvm.nvvm.fma.rn.f(float %154, float %129, float %129) #4, !dbg !64
  %.06.i = select i1 %.not9.i, float %157, float %156, !dbg !64
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not10.i = icmp eq i32 %158, 0, !dbg !64
  %159 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !64
  %160 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !64
  %.04.i = select i1 %.not10.i, float %160, float %159, !dbg !64
  %161 = icmp ugt i32 %120, 2139095039, !dbg !64
  br i1 %161, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !64

__nv_fmaf_rn.exit.i.i:                            ; preds = %4
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not11.i = icmp eq i32 %162, 0, !dbg !64
  %163 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !64
  %164 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !64
  %.03.i = select i1 %.not11.i, float %164, float %163, !dbg !64
  br label %__nv_logf.exit, !dbg !64

__nv_logf.exit:                                   ; preds = %4, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %4 ], !dbg !64
  %165 = fcmp olt float %117, 0x3810000000000000, !dbg !64
  %166 = fmul float %117, 0x4160000000000000, !dbg !64
  %.02.i1 = select i1 %165, float %166, float %117, !dbg !64
  %i.i.0.i2 = select i1 %165, float -2.300000e+01, float 0.000000e+00, !dbg !64
  %167 = bitcast float %.02.i1 to i32, !dbg !64
  %168 = add i32 %167, -1059760811, !dbg !64
  %169 = and i32 %168, -8388608, !dbg !64
  %170 = sub i32 %167, %169, !dbg !64
  %171 = bitcast i32 %170 to float, !dbg !64
  %172 = sitofp i32 %169 to float, !dbg !64
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not.i3 = icmp eq i32 %173, 0, !dbg !64
  %174 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %172, float 0x3E80000000000000, float %i.i.0.i2) #4, !dbg !64
  %175 = tail call float @llvm.nvvm.fma.rn.f(float %172, float 0x3E80000000000000, float %i.i.0.i2) #4, !dbg !64
  %.08.i4 = select i1 %.not.i3, float %175, float %174, !dbg !64
  %176 = fadd float %171, -1.000000e+00, !dbg !64
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not1.i5 = icmp eq i32 %177, 0, !dbg !64
  %178 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %176, float 0x3FC2073EC0000000) #4, !dbg !64
  %179 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %176, float 0x3FC2073EC0000000) #4, !dbg !64
  %.010.i6 = select i1 %.not1.i5, float %179, float %178, !dbg !64
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not2.i7 = icmp eq i32 %180, 0, !dbg !64
  %181 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i6, float %176, float 0xBFBF19B980000000) #4, !dbg !64
  %182 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i6, float %176, float 0xBFBF19B980000000) #4, !dbg !64
  %.011.i8 = select i1 %.not2.i7, float %182, float %181, !dbg !64
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not3.i9 = icmp eq i32 %183, 0, !dbg !64
  %184 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i8, float %176, float 0x3FC1E52AA0000000) #4, !dbg !64
  %185 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i8, float %176, float 0x3FC1E52AA0000000) #4, !dbg !64
  %.012.i10 = select i1 %.not3.i9, float %185, float %184, !dbg !64
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not4.i11 = icmp eq i32 %186, 0, !dbg !64
  %187 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i10, float %176, float 0xBFC55B1720000000) #4, !dbg !64
  %188 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i10, float %176, float 0xBFC55B1720000000) #4, !dbg !64
  %.09.i12 = select i1 %.not4.i11, float %188, float %187, !dbg !64
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not5.i13 = icmp eq i32 %189, 0, !dbg !64
  %190 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i12, float %176, float 0x3FC99DA160000000) #4, !dbg !64
  %191 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i12, float %176, float 0x3FC99DA160000000) #4, !dbg !64
  %.05.i14 = select i1 %.not5.i13, float %191, float %190, !dbg !64
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not6.i15 = icmp eq i32 %192, 0, !dbg !64
  %193 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i14, float %176, float 0xBFCFFFE440000000) #4, !dbg !64
  %194 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i14, float %176, float 0xBFCFFFE440000000) #4, !dbg !64
  %.01.i16 = select i1 %.not6.i15, float %194, float %193, !dbg !64
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not7.i17 = icmp eq i32 %195, 0, !dbg !64
  %196 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i16, float %176, float 0x3FD5554F00000000) #4, !dbg !64
  %197 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i16, float %176, float 0x3FD5554F00000000) #4, !dbg !64
  %.0.i18 = select i1 %.not7.i17, float %197, float %196, !dbg !64
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not8.i19 = icmp eq i32 %198, 0, !dbg !64
  %199 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i18, float %176, float -5.000000e-01) #4, !dbg !64
  %200 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i18, float %176, float -5.000000e-01) #4, !dbg !64
  %.07.i20 = select i1 %.not8.i19, float %200, float %199, !dbg !64
  %201 = fmul float %176, %.07.i20, !dbg !64
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not9.i21 = icmp eq i32 %202, 0, !dbg !64
  %203 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %201, float %176, float %176) #4, !dbg !64
  %204 = tail call float @llvm.nvvm.fma.rn.f(float %201, float %176, float %176) #4, !dbg !64
  %.06.i22 = select i1 %.not9.i21, float %204, float %203, !dbg !64
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not10.i23 = icmp eq i32 %205, 0, !dbg !64
  %206 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i4, float 0x3FE62E4300000000, float %.06.i22) #4, !dbg !64
  %207 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i4, float 0x3FE62E4300000000, float %.06.i22) #4, !dbg !64
  %.04.i24 = select i1 %.not10.i23, float %207, float %206, !dbg !64
  %208 = icmp ugt i32 %167, 2139095039, !dbg !64
  br i1 %208, label %__nv_fmaf_rn.exit.i.i27, label %__nv_logf.exit30, !dbg !64

__nv_fmaf_rn.exit.i.i27:                          ; preds = %__nv_logf.exit
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not11.i28 = icmp eq i32 %209, 0, !dbg !64
  %210 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i1, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !64
  %211 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i1, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !64
  %.03.i29 = select i1 %.not11.i28, float %211, float %210, !dbg !64
  br label %__nv_logf.exit30, !dbg !64

__nv_logf.exit30:                                 ; preds = %__nv_logf.exit, %__nv_fmaf_rn.exit.i.i27
  %r.i.0.i25 = phi float [ %.03.i29, %__nv_fmaf_rn.exit.i.i27 ], [ %.04.i24, %__nv_logf.exit ], !dbg !64
  %212 = insertelement <2 x float> poison, float %.02.i, i64 0, !dbg !64
  %213 = insertelement <2 x float> %212, float %.02.i1, i64 1, !dbg !64
  %214 = fcmp oeq <2 x float> %213, zeroinitializer, !dbg !64
  %215 = extractvalue { i32, i32 } %49, 1, !dbg !30
  %216 = extractvalue { i32, i32 } %53, 1, !dbg !33
  %217 = extractvalue { i32, i32 } %57, 1, !dbg !36
  %218 = extractvalue { i32, i32 } %61, 1, !dbg !39
  %219 = extractvalue { i32, i32 } %49, 0, !dbg !30
  %220 = extractvalue { i32, i32 } %53, 0, !dbg !33
  %221 = extractvalue { i32, i32 } %57, 0, !dbg !36
  %222 = extractvalue { i32, i32 } %61, 0, !dbg !39
  %223 = lshr i32 %5, 5, !dbg !10
  %224 = and i32 %5, 31, !dbg !10
  %225 = insertelement <2 x i32> poison, i32 %219, i64 0, !dbg !30
  %226 = insertelement <2 x i32> %225, i32 %215, i64 1, !dbg !30
  %227 = bitcast <2 x i32> %226 to <2 x float>, !dbg !30
  %228 = insertelement <2 x i32> poison, i32 %220, i64 0, !dbg !33
  %229 = insertelement <2 x i32> %228, i32 %216, i64 1, !dbg !33
  %230 = bitcast <2 x i32> %229 to <2 x float>, !dbg !33
  %231 = fadd <2 x float> %227, %230, !dbg !65
  %232 = insertelement <2 x i32> poison, i32 %221, i64 0, !dbg !36
  %233 = insertelement <2 x i32> %232, i32 %217, i64 1, !dbg !36
  %234 = bitcast <2 x i32> %233 to <2 x float>, !dbg !36
  %235 = fadd <2 x float> %231, %234, !dbg !66
  %236 = insertelement <2 x i32> poison, i32 %222, i64 0, !dbg !39
  %237 = insertelement <2 x i32> %236, i32 %218, i64 1, !dbg !39
  %238 = bitcast <2 x i32> %237 to <2 x float>, !dbg !39
  %239 = fadd <2 x float> %235, %238, !dbg !67
  %240 = fmul <2 x float> %239, splat (float 2.500000e-01), !dbg !68
  %241 = fsub <2 x float> zeroinitializer, %240, !dbg !69
  %242 = insertelement <2 x float> poison, float %r.i.0.i, i64 0, !dbg !64
  %243 = insertelement <2 x float> %242, float %r.i.0.i25, i64 1, !dbg !64
  %244 = select <2 x i1> %214, <2 x float> splat (float 0xFFF0000000000000), <2 x float> %243, !dbg !64
  %245 = fadd <2 x float> %241, %244, !dbg !70
  %shift = shufflevector <2 x float> %245, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !71
  %246 = fadd <2 x float> %245, %shift, !dbg !71
  %247 = extractelement <2 x float> %246, i64 0, !dbg !71
  %248 = bitcast float %247 to i32, !dbg !76
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 16, i32 31), !dbg !76
  %250 = bitcast i32 %249 to float, !dbg !76
  %251 = fadd float %247, %250, !dbg !71
  %252 = bitcast float %251 to i32, !dbg !76
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 8, i32 31), !dbg !76
  %254 = bitcast i32 %253 to float, !dbg !76
  %255 = fadd float %251, %254, !dbg !71
  %256 = bitcast float %255 to i32, !dbg !76
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 4, i32 31), !dbg !76
  %258 = bitcast i32 %257 to float, !dbg !76
  %259 = fadd float %255, %258, !dbg !71
  %260 = bitcast float %259 to i32, !dbg !76
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 2, i32 31), !dbg !76
  %262 = bitcast i32 %261 to float, !dbg !76
  %263 = fadd float %259, %262, !dbg !71
  %264 = bitcast float %263 to i32, !dbg !76
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 1, i32 31), !dbg !76
  %266 = bitcast i32 %265 to float, !dbg !76
  %267 = fadd float %263, %266, !dbg !71
  %268 = icmp eq i32 %224, 0, !dbg !76
  %269 = and i32 %223, 1, !dbg !76
  %270 = getelementptr float, ptr addrspace(3) @global_smem, i32 %269, !dbg !76
  %271 = bitcast float %267 to <1 x i32>, !dbg !76
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %271, i1 %268) #4, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %272 = icmp slt i32 %5, 2, !dbg !76
  %273 = getelementptr float, ptr addrspace(3) @global_smem, i32 %5, !dbg !76
  %274 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %273, i1 %272) #4, !dbg !76
  %275 = bitcast i32 %274 to float, !dbg !76
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %274, i32 1, i32 31), !dbg !76
  %277 = bitcast i32 %276 to float, !dbg !76
  %278 = fadd float %275, %277, !dbg !71
  %279 = and i32 %5, 1, !dbg !76
  %280 = icmp eq i32 %279, 0, !dbg !76
  %281 = and i1 %272, %280, !dbg !76
  %282 = bitcast float %278 to <1 x i32>, !dbg !76
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %282, i1 %281) #4, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %283 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !76
  %284 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %283, float 1.280000e+02) #4, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %urem = and i32 %5, 63, !dbg !79
  %285 = icmp eq i32 %urem, 0, !dbg !79
  %286 = bitcast float %284 to i32, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %286, ptr addrspace(1) %0, i1 %285) #4, !dbg !79
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clynjrsxty36pfbzbhpplg4ze4s2qs3dwvvedpyupnk3zuid3r7e.py", directory: "inductor_cache/ly")
!4 = !{ptr @triton_per_fused_add_div_exp_log_mean_neg_pow_rsub_sub_sum_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_exp_log_mean_neg_pow_rsub_sub_sum_3, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_exp_log_mean_neg_pow_rsub_sub_sum_3", linkageName: "triton_per_fused_add_div_exp_log_mean_neg_pow_rsub_sub_sum_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 32, column: 38, scope: !7)
!12 = !DILocation(line: 32, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 30, scope: !7)
!14 = !DILocation(line: 32, column: 43, scope: !7)
!15 = !DILocation(line: 33, column: 35, scope: !7)
!16 = !DILocation(line: 33, column: 40, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 48, scope: !7)
!19 = !DILocation(line: 34, column: 36, scope: !7)
!20 = !DILocation(line: 34, column: 41, scope: !7)
!21 = !DILocation(line: 34, column: 31, scope: !7)
!22 = !DILocation(line: 34, column: 49, scope: !7)
!23 = !DILocation(line: 35, column: 36, scope: !7)
!24 = !DILocation(line: 35, column: 41, scope: !7)
!25 = !DILocation(line: 35, column: 31, scope: !7)
!26 = !DILocation(line: 35, column: 49, scope: !7)
!27 = !DILocation(line: 36, column: 41, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 31, scope: !7)
!30 = !DILocation(line: 36, column: 52, scope: !7)
!31 = !DILocation(line: 37, column: 41, scope: !7)
!32 = !DILocation(line: 37, column: 31, scope: !7)
!33 = !DILocation(line: 37, column: 57, scope: !7)
!34 = !DILocation(line: 38, column: 41, scope: !7)
!35 = !DILocation(line: 38, column: 31, scope: !7)
!36 = !DILocation(line: 38, column: 57, scope: !7)
!37 = !DILocation(line: 39, column: 41, scope: !7)
!38 = !DILocation(line: 39, column: 31, scope: !7)
!39 = !DILocation(line: 39, column: 57, scope: !7)
!40 = !DILocation(line: 40, column: 18, scope: !7)
!41 = !DILocation(line: 42, column: 18, scope: !7)
!42 = !DILocation(line: 44, column: 18, scope: !7)
!43 = !DILocation(line: 46, column: 18, scope: !7)
!44 = !DILocation(line: 47, column: 23, scope: !7)
!45 = !DILocation(line: 48, column: 19, scope: !7)
!46 = !DILocation(line: 49, column: 19, scope: !7)
!47 = !DILocation(line: 50, column: 20, scope: !7)
!48 = !DILocation(line: 51, column: 20, scope: !7)
!49 = !DILocation(line: 52, column: 24, scope: !7)
!50 = !DILocation(line: 53, column: 19, scope: !7)
!51 = !DILocation(line: 54, column: 20, scope: !7)
!52 = !DILocation(line: 55, column: 19, scope: !7)
!53 = !DILocation(line: 56, column: 20, scope: !7)
!54 = !DILocation(line: 57, column: 20, scope: !7)
!55 = !DILocation(line: 58, column: 24, scope: !7)
!56 = !DILocation(line: 59, column: 20, scope: !7)
!57 = !DILocation(line: 60, column: 20, scope: !7)
!58 = !DILocation(line: 61, column: 19, scope: !7)
!59 = !DILocation(line: 62, column: 20, scope: !7)
!60 = !DILocation(line: 63, column: 20, scope: !7)
!61 = !DILocation(line: 64, column: 24, scope: !7)
!62 = !DILocation(line: 65, column: 20, scope: !7)
!63 = !DILocation(line: 67, column: 20, scope: !7)
!64 = !DILocation(line: 73, column: 24, scope: !7)
!65 = !DILocation(line: 68, column: 20, scope: !7)
!66 = !DILocation(line: 69, column: 20, scope: !7)
!67 = !DILocation(line: 70, column: 20, scope: !7)
!68 = !DILocation(line: 71, column: 20, scope: !7)
!69 = !DILocation(line: 72, column: 13, scope: !7)
!70 = !DILocation(line: 74, column: 20, scope: !7)
!71 = !DILocation(line: 256, column: 15, scope: !72, inlinedAt: !75)
!72 = distinct !DILexicalBlockFile(scope: !74, file: !73, discriminator: 0)
!73 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!74 = distinct !DILexicalBlockFile(scope: !7, file: !73, discriminator: 0)
!75 = !DILocation(line: 76, column: 26, scope: !7)
!76 = !DILocation(line: 267, column: 36, scope: !74, inlinedAt: !75)
!77 = !DILocation(line: 78, column: 20, scope: !7)
!78 = !DILocation(line: 79, column: 4, scope: !7)
!79 = !DILocation(line: 80, column: 71, scope: !7)
!80 = !DILocation(line: 80, column: 4, scope: !7)
