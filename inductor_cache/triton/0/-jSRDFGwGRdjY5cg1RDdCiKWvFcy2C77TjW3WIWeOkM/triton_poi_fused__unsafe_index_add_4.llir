; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__unsafe_index_add_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 127, !dbg !12
  %11 = or disjoint i32 %10, 128, !dbg !12
  %12 = shl i32 %9, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %8, %10, !dbg !13
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %8, %13, !dbg !13
  %17 = icmp slt i32 %14, 512, !dbg !14
  %18 = icmp slt i32 %15, 512, !dbg !14
  %19 = icmp slt i32 %16, 512, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = icmp slt i32 %20, 16, !dbg !16
  %.frozen = freeze i32 %20, !dbg !17
  %22 = sdiv i32 %.frozen, 4, !dbg !17
  %23 = mul i32 %22, 4, !dbg !18
  %.decomposed = sub i32 %.frozen, %23, !dbg !18
  %.frozen3 = freeze i32 %16, !dbg !19
  %24 = sdiv i32 %.frozen3, 128, !dbg !19
  %25 = mul i32 %24, 128, !dbg !20
  %.decomposed4 = sub i32 %.frozen3, %25, !dbg !20
  %26 = sext i32 %22 to i64, !dbg !21
  %27 = getelementptr i64, ptr addrspace(1) %0, i64 %26, !dbg !21
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %21) #2, !dbg !22
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %21) #2, !dbg !22
  %30 = sext i32 %.decomposed to i64, !dbg !23
  %31 = getelementptr i64, ptr addrspace(1) %0, i64 %30, !dbg !23
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 %21) #2, !dbg !24
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 %21) #2, !dbg !24
  %34 = shl i32 %14, 4, !dbg !25
  %35 = shl i32 %15, 4, !dbg !25
  %36 = add i32 %34, %20, !dbg !26
  %37 = add i32 %35, %20, !dbg !26
  %38 = sext i32 %36 to i64, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !27
  %40 = sext i32 %37 to i64, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !27
  %42 = and i1 %21, %17, !dbg !28
  %43 = and i1 %21, %18, !dbg !28
  %44 = and i1 %21, %19, !dbg !28
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %42) #2, !dbg !29
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %43) #2, !dbg !29
  %47 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !29
  %48 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %48, i1 true) #2, !dbg !29
  %49 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !29
  %50 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %50, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !29
  %52 = load float, ptr addrspace(3) %51, align 8, !dbg !29
  %53 = getelementptr inbounds i8, ptr addrspace(3) %51, i32 4, !dbg !29
  %54 = load float, ptr addrspace(3) %53, align 4, !dbg !29
  %55 = lshr i64 %29, 57, !dbg !30
  %56 = and i64 %55, 64, !dbg !30
  %57 = add i64 %56, %29, !dbg !30
  %58 = lshr i64 %33, 57, !dbg !31
  %59 = and i64 %58, 64, !dbg !31
  %60 = add i64 %59, %33, !dbg !31
  %61 = sext i32 %.decomposed4 to i64, !dbg !32
  %62 = shl i32 %24, 19, !dbg !33
  %63 = sext i32 %62 to i64, !dbg !34
  %.idx = shl i64 %60, 9, !dbg !35
  %64 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx, !dbg !35
  %65 = getelementptr float, ptr addrspace(1) %64, i64 %61, !dbg !35
  %.idx2 = shl i64 %57, 15, !dbg !35
  %66 = getelementptr i8, ptr addrspace(1) %65, i64 %.idx2, !dbg !35
  %67 = getelementptr float, ptr addrspace(1) %66, i64 %63, !dbg !35
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %67, i1 %44) #2, !dbg !36
  %69 = extractvalue { i32, i32 } %68, 0, !dbg !36
  %70 = extractvalue { i32, i32 } %68, 1, !dbg !36
  %71 = bitcast i32 %69 to float, !dbg !36
  %72 = bitcast i32 %70 to float, !dbg !36
  %73 = fadd float %52, %71, !dbg !37
  %74 = fadd float %54, %72, !dbg !37
  %75 = shl i32 %20, 7, !dbg !38
  %76 = add i32 %.decomposed4, %75, !dbg !39
  %77 = shl i32 %24, 11, !dbg !40
  %78 = add i32 %76, %77, !dbg !41
  %79 = sext i32 %78 to i64, !dbg !42
  %80 = getelementptr float, ptr addrspace(1) %3, i64 %79, !dbg !42
  %81 = bitcast float %73 to i32, !dbg !43
  %82 = bitcast float %74 to i32, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %81, i32 %82, ptr addrspace(1) %80, i1 %44) #2, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cv5lqiyv2o7e3u2pkp4yb7derdn4hbss36shhmvaympeuv4wlue5.py", directory: "inductor_cache/v5")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_4", linkageName: "triton_poi_fused__unsafe_index_add_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 28, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 34, column: 30, scope: !7)
!22 = !DILocation(line: 34, column: 35, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 35, scope: !7)
!25 = !DILocation(line: 36, column: 39, scope: !7)
!26 = !DILocation(line: 36, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 52, scope: !7)
!29 = !DILocation(line: 36, column: 44, scope: !7)
!30 = !DILocation(line: 40, column: 32, scope: !7)
!31 = !DILocation(line: 43, column: 32, scope: !7)
!32 = !DILocation(line: 44, column: 35, scope: !7)
!33 = !DILocation(line: 44, column: 65, scope: !7)
!34 = !DILocation(line: 44, column: 58, scope: !7)
!35 = !DILocation(line: 44, column: 30, scope: !7)
!36 = !DILocation(line: 44, column: 70, scope: !7)
!37 = !DILocation(line: 45, column: 19, scope: !7)
!38 = !DILocation(line: 46, column: 34, scope: !7)
!39 = !DILocation(line: 46, column: 30, scope: !7)
!40 = !DILocation(line: 46, column: 44, scope: !7)
!41 = !DILocation(line: 46, column: 39, scope: !7)
!42 = !DILocation(line: 46, column: 25, scope: !7)
!43 = !DILocation(line: 46, column: 56, scope: !7)
!44 = !DILocation(line: 46, column: 4, scope: !7)
