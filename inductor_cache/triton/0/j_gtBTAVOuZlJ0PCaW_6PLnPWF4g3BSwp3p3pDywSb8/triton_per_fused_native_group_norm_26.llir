; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_group_norm_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %10, 16, !dbg !12
  %12 = and i32 %8, 31, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %11, !dbg !13
  %15 = icmp slt i32 %13, 128, !dbg !14
  %16 = icmp slt i32 %14, 128, !dbg !14
  %17 = shl i32 %8, 2, !dbg !15
  %18 = and i32 %17, 60, !dbg !15
  %19 = shl i32 %13, 6, !dbg !16
  %20 = shl i32 %14, 6, !dbg !16
  %21 = or disjoint i32 %19, %18, !dbg !17
  %22 = or disjoint i32 %20, %18, !dbg !17
  %23 = sext i32 %21 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !18
  %25 = sext i32 %22 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !18
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !19
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !19
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !19
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !19
  %32 = bitcast i32 %28 to float, !dbg !19
  %33 = bitcast i32 %29 to float, !dbg !19
  %34 = bitcast i32 %30 to float, !dbg !19
  %35 = bitcast i32 %31 to float, !dbg !19
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !19
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !19
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !19
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !19
  %41 = bitcast i32 %37 to float, !dbg !19
  %42 = bitcast i32 %38 to float, !dbg !19
  %43 = bitcast i32 %39 to float, !dbg !19
  %44 = bitcast i32 %40 to float, !dbg !19
  %45 = fadd float %32, %33, !dbg !20
  %46 = fadd float %45, %34, !dbg !20
  %47 = fadd float %46, %35, !dbg !20
  %48 = select i1 %15, float %47, float 0.000000e+00, !dbg !20
  %49 = fadd float %41, %42, !dbg !20
  %50 = fadd float %49, %43, !dbg !20
  %51 = fadd float %50, %44, !dbg !20
  %52 = select i1 %16, float %51, float 0.000000e+00, !dbg !20
  %53 = bitcast float %48 to i32, !dbg !25
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 8, i32 31), !dbg !25
  %55 = bitcast i32 %54 to float, !dbg !25
  %56 = fadd float %48, %55, !dbg !20
  %57 = bitcast float %56 to i32, !dbg !25
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 4, i32 31), !dbg !25
  %59 = bitcast i32 %58 to float, !dbg !25
  %60 = fadd float %56, %59, !dbg !20
  %61 = bitcast float %60 to i32, !dbg !25
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 2, i32 31), !dbg !25
  %63 = bitcast i32 %62 to float, !dbg !25
  %64 = fadd float %60, %63, !dbg !20
  %65 = bitcast float %64 to i32, !dbg !25
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 1, i32 31), !dbg !25
  %67 = bitcast i32 %66 to float, !dbg !25
  %68 = fadd float %64, %67, !dbg !20
  %69 = bitcast float %52 to i32, !dbg !25
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 8, i32 31), !dbg !25
  %71 = bitcast i32 %70 to float, !dbg !25
  %72 = fadd float %52, %71, !dbg !20
  %73 = bitcast float %72 to i32, !dbg !25
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 4, i32 31), !dbg !25
  %75 = bitcast i32 %74 to float, !dbg !25
  %76 = fadd float %72, %75, !dbg !20
  %77 = bitcast float %76 to i32, !dbg !25
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 2, i32 31), !dbg !25
  %79 = bitcast i32 %78 to float, !dbg !25
  %80 = fadd float %76, %79, !dbg !20
  %81 = bitcast float %80 to i32, !dbg !25
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 1, i32 31), !dbg !25
  %83 = bitcast i32 %82 to float, !dbg !25
  %84 = fadd float %80, %83, !dbg !20
  %85 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !26
  %86 = bitcast float %68 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #5, !dbg !26
  %87 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !26
  %88 = bitcast float %84 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %89 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !26
  %90 = load float, ptr addrspace(3) %89, align 4, !dbg !26
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float 6.400000e+01) #5, !dbg !26
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %68, float 6.400000e+01) #5, !dbg !26
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float 6.400000e+01) #5, !dbg !26
  %94 = fsub float %32, %92, !dbg !27
  %95 = fsub float %33, %92, !dbg !27
  %96 = fsub float %34, %92, !dbg !27
  %97 = fsub float %35, %92, !dbg !27
  %98 = fsub float %41, %93, !dbg !27
  %99 = fsub float %42, %93, !dbg !27
  %100 = fsub float %43, %93, !dbg !27
  %101 = fsub float %44, %93, !dbg !27
  %102 = fmul float %94, %94, !dbg !28
  %103 = fmul float %95, %95, !dbg !28
  %104 = fmul float %96, %96, !dbg !28
  %105 = fmul float %97, %97, !dbg !28
  %106 = fmul float %98, %98, !dbg !28
  %107 = fmul float %99, %99, !dbg !28
  %108 = fmul float %100, %100, !dbg !28
  %109 = fmul float %101, %101, !dbg !28
  %110 = fadd float %102, %103, !dbg !29
  %111 = fadd float %104, %110, !dbg !29
  %112 = fadd float %105, %111, !dbg !29
  %113 = select i1 %15, float %112, float 0.000000e+00, !dbg !29
  %114 = fadd float %106, %107, !dbg !29
  %115 = fadd float %108, %114, !dbg !29
  %116 = fadd float %109, %115, !dbg !29
  %117 = select i1 %16, float %116, float 0.000000e+00, !dbg !29
  %118 = bitcast float %113 to i32, !dbg !31
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 8, i32 31), !dbg !31
  %120 = bitcast i32 %119 to float, !dbg !31
  %121 = fadd float %113, %120, !dbg !29
  %122 = bitcast float %121 to i32, !dbg !31
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 4, i32 31), !dbg !31
  %124 = bitcast i32 %123 to float, !dbg !31
  %125 = fadd float %121, %124, !dbg !29
  %126 = bitcast float %125 to i32, !dbg !31
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 2, i32 31), !dbg !31
  %128 = bitcast i32 %127 to float, !dbg !31
  %129 = fadd float %125, %128, !dbg !29
  %130 = bitcast float %129 to i32, !dbg !31
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 1, i32 31), !dbg !31
  %132 = bitcast i32 %131 to float, !dbg !31
  %133 = fadd float %129, %132, !dbg !29
  %134 = bitcast float %117 to i32, !dbg !31
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 8, i32 31), !dbg !31
  %136 = bitcast i32 %135 to float, !dbg !31
  %137 = fadd float %117, %136, !dbg !29
  %138 = bitcast float %137 to i32, !dbg !31
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 4, i32 31), !dbg !31
  %140 = bitcast i32 %139 to float, !dbg !31
  %141 = fadd float %137, %140, !dbg !29
  %142 = bitcast float %141 to i32, !dbg !31
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 2, i32 31), !dbg !31
  %144 = bitcast i32 %143 to float, !dbg !31
  %145 = fadd float %141, %144, !dbg !29
  %146 = bitcast float %145 to i32, !dbg !31
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 1, i32 31), !dbg !31
  %148 = bitcast i32 %147 to float, !dbg !31
  %149 = fadd float %145, %148, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %150 = bitcast float %133 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %150, i1 true) #5, !dbg !32
  %151 = bitcast float %149 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %151, i1 true) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %152 = load float, ptr addrspace(3) %89, align 4, !dbg !32
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float 6.400000e+01) #5, !dbg !33
  %154 = fadd float %153, 0x3EE4F8B580000000, !dbg !34
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i = icmp eq i32 %155, 0, !dbg !32
  br i1 %.not.i, label %158, label %156, !dbg !32

156:                                              ; preds = %5
  %157 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %154), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

158:                                              ; preds = %5
  %159 = tail call float @llvm.nvvm.rsqrt.approx.f(float %154), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

__nv_rsqrtf.exit:                                 ; preds = %156, %158
  %.0.i = phi float [ %157, %156 ], [ %159, %158 ], !dbg !32
  %160 = or disjoint i32 %7, %12, !dbg !13
  %161 = icmp slt i32 %160, 128, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %162 = sext i32 %160 to i64, !dbg !36
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !36
  %164 = and i32 %8, 224, !dbg !37
  %165 = icmp eq i32 %164, 0, !dbg !37
  %166 = bitcast float %.0.i to i32, !dbg !37
  %167 = and i1 %165, %161, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %166, ptr addrspace(1) %163, i1 %167) #5, !dbg !37
  %168 = getelementptr float, ptr addrspace(1) %2, i64 %162, !dbg !38
  %169 = bitcast float %91 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %169, ptr addrspace(1) %168, i1 %167) #5, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciuk42hifdxpeeuzotxfy2sobk5o72kcuhiwtje6afjacjrwjh7c.py", directory: "inductor_cache/iu")
!4 = !{ptr @triton_per_fused_native_group_norm_26, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_26, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_26", linkageName: "triton_per_fused_native_group_norm_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 38, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 43, scope: !7)
!20 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 36, column: 24, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !24)
!26 = !DILocation(line: 39, column: 19, scope: !7)
!27 = !DILocation(line: 40, column: 19, scope: !7)
!28 = !DILocation(line: 41, column: 20, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !30)
!30 = !DILocation(line: 44, column: 26, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !30)
!32 = !DILocation(line: 49, column: 28, scope: !7)
!33 = !DILocation(line: 46, column: 20, scope: !7)
!34 = !DILocation(line: 48, column: 20, scope: !7)
!35 = !DILocation(line: 50, column: 4, scope: !7)
!36 = !DILocation(line: 51, column: 28, scope: !7)
!37 = !DILocation(line: 51, column: 40, scope: !7)
!38 = !DILocation(line: 52, column: 25, scope: !7)
!39 = !DILocation(line: 52, column: 37, scope: !7)
!40 = !DILocation(line: 52, column: 4, scope: !7)
