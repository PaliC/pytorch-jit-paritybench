; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %7, 1, !dbg !13
  %13 = or disjoint i32 %7, 2, !dbg !13
  %14 = or disjoint i32 %7, 3, !dbg !13
  %15 = or disjoint i32 %7, 4, !dbg !13
  %16 = or disjoint i32 %7, 5, !dbg !13
  %17 = or disjoint i32 %7, 6, !dbg !13
  %18 = or disjoint i32 %7, 7, !dbg !13
  %19 = or disjoint i32 %7, 8, !dbg !13
  %20 = or disjoint i32 %7, 9, !dbg !13
  %21 = or disjoint i32 %7, 10, !dbg !13
  %22 = or disjoint i32 %7, 11, !dbg !13
  %23 = or disjoint i32 %7, 12, !dbg !13
  %24 = or disjoint i32 %7, 13, !dbg !13
  %25 = or disjoint i32 %7, 14, !dbg !13
  %26 = or disjoint i32 %7, 15, !dbg !13
  %27 = icmp slt i32 %11, 256, !dbg !14
  %28 = icmp slt i32 %7, 256, !dbg !14
  %29 = icmp slt i32 %12, 256, !dbg !14
  %30 = icmp slt i32 %13, 256, !dbg !14
  %31 = icmp slt i32 %14, 256, !dbg !14
  %32 = icmp slt i32 %15, 256, !dbg !14
  %33 = icmp slt i32 %16, 256, !dbg !14
  %34 = icmp slt i32 %17, 256, !dbg !14
  %35 = icmp slt i32 %18, 256, !dbg !14
  %36 = icmp slt i32 %19, 256, !dbg !14
  %37 = icmp slt i32 %20, 256, !dbg !14
  %38 = icmp slt i32 %21, 256, !dbg !14
  %39 = icmp slt i32 %22, 256, !dbg !14
  %40 = icmp slt i32 %23, 256, !dbg !14
  %41 = icmp slt i32 %24, 256, !dbg !14
  %42 = icmp slt i32 %25, 256, !dbg !14
  %43 = icmp slt i32 %26, 256, !dbg !14
  %44 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %45 = shl i32 %44, 8, !dbg !16
  %46 = lshr i32 %8, 2, !dbg !17
  %47 = and i32 %46, 63, !dbg !17
  %48 = and i32 %8, 255, !dbg !17
  %49 = or disjoint i32 %45, %47, !dbg !18
  %50 = or disjoint i32 %49, 64, !dbg !18
  %51 = or disjoint i32 %49, 128, !dbg !18
  %52 = or disjoint i32 %49, 192, !dbg !18
  %53 = or disjoint i32 %45, %48, !dbg !18
  %54 = icmp slt i32 %49, 225, !dbg !19
  %55 = icmp slt i32 %50, 225, !dbg !19
  %56 = icmp slt i32 %51, 225, !dbg !19
  %57 = icmp slt i32 %52, 225, !dbg !19
  %58 = icmp slt i32 %53, 225, !dbg !19
  %.frozen = freeze i32 %11, !dbg !20
  %59 = sdiv i32 %.frozen, 64, !dbg !20
  %60 = mul i32 %59, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %60, !dbg !21
  %61 = shl i32 %49, 6, !dbg !22
  %62 = shl i32 %50, 6, !dbg !22
  %63 = shl i32 %51, 6, !dbg !22
  %64 = shl i32 %52, 6, !dbg !22
  %65 = mul i32 %59, 14400, !dbg !23
  %66 = add i32 %65, %.decomposed, !dbg !24
  %67 = add i32 %66, %61, !dbg !25
  %68 = add i32 %66, %62, !dbg !25
  %69 = add i32 %66, %63, !dbg !25
  %70 = add i32 %66, %64, !dbg !25
  %71 = sext i32 %67 to i64, !dbg !26
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !26
  %73 = sext i32 %68 to i64, !dbg !26
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !26
  %75 = sext i32 %69 to i64, !dbg !26
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !26
  %77 = sext i32 %70 to i64, !dbg !26
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !26
  %79 = and i1 %27, %54, !dbg !27
  %80 = and i1 %55, %27, !dbg !27
  %81 = and i1 %56, %27, !dbg !27
  %82 = and i1 %57, %27, !dbg !27
  %83 = and i1 %28, %58, !dbg !27
  %84 = and i1 %29, %58, !dbg !27
  %85 = and i1 %30, %58, !dbg !27
  %86 = and i1 %31, %58, !dbg !27
  %87 = and i1 %32, %58, !dbg !27
  %88 = and i1 %33, %58, !dbg !27
  %89 = and i1 %34, %58, !dbg !27
  %90 = and i1 %35, %58, !dbg !27
  %91 = and i1 %36, %58, !dbg !27
  %92 = and i1 %37, %58, !dbg !27
  %93 = and i1 %38, %58, !dbg !27
  %94 = and i1 %39, %58, !dbg !27
  %95 = and i1 %40, %58, !dbg !27
  %96 = and i1 %41, %58, !dbg !27
  %97 = and i1 %42, %58, !dbg !27
  %98 = and i1 %43, %58, !dbg !27
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 %79) #2, !dbg !28
  %100 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !28
  %101 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !28
  %102 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !28
  %103 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !28
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 %80) #2, !dbg !28
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !28
  %106 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !28
  %107 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !28
  %108 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !28
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 %81) #2, !dbg !28
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !28
  %111 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !28
  %112 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !28
  %113 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !28
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %78, i1 %82) #2, !dbg !28
  %115 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !28
  %116 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !28
  %117 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !28
  %118 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !28
  %119 = sext i32 %.decomposed to i64, !dbg !29
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %119, !dbg !29
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %120, i1 %27) #2, !dbg !30
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !30
  %123 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !30
  %124 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !30
  %125 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !30
  %126 = insertelement <16 x i32> poison, i32 %118, i64 0, !dbg !28
  %127 = insertelement <16 x i32> %126, i32 %117, i64 1, !dbg !28
  %128 = insertelement <16 x i32> %127, i32 %116, i64 2, !dbg !28
  %129 = insertelement <16 x i32> %128, i32 %115, i64 3, !dbg !28
  %130 = insertelement <16 x i32> %129, i32 %113, i64 4, !dbg !28
  %131 = insertelement <16 x i32> %130, i32 %112, i64 5, !dbg !28
  %132 = insertelement <16 x i32> %131, i32 %111, i64 6, !dbg !28
  %133 = insertelement <16 x i32> %132, i32 %110, i64 7, !dbg !28
  %134 = insertelement <16 x i32> %133, i32 %108, i64 8, !dbg !28
  %135 = insertelement <16 x i32> %134, i32 %107, i64 9, !dbg !28
  %136 = insertelement <16 x i32> %135, i32 %106, i64 10, !dbg !28
  %137 = insertelement <16 x i32> %136, i32 %105, i64 11, !dbg !28
  %138 = insertelement <16 x i32> %137, i32 %103, i64 12, !dbg !28
  %139 = insertelement <16 x i32> %138, i32 %102, i64 13, !dbg !28
  %140 = insertelement <16 x i32> %139, i32 %101, i64 14, !dbg !28
  %141 = insertelement <16 x i32> %140, i32 %100, i64 15, !dbg !28
  %142 = bitcast <16 x i32> %141 to <16 x float>, !dbg !28
  %143 = insertelement <4 x i32> poison, i32 %125, i64 0, !dbg !30
  %144 = insertelement <4 x i32> %143, i32 %124, i64 1, !dbg !30
  %145 = insertelement <4 x i32> %144, i32 %123, i64 2, !dbg !30
  %146 = insertelement <4 x i32> %145, i32 %122, i64 3, !dbg !30
  %147 = bitcast <4 x i32> %146 to <4 x float>, !dbg !30
  %148 = shufflevector <4 x float> %147, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !30
  %149 = fadd <16 x float> %148, %142, !dbg !31
  %150 = fcmp olt <16 x float> %149, zeroinitializer, !dbg !32
  %151 = extractelement <16 x i1> %150, i64 15, !dbg !36
  %152 = extractelement <16 x float> %149, i64 15, !dbg !36
  %153 = select i1 %151, float 0.000000e+00, float %152, !dbg !36
  %154 = extractelement <16 x i1> %150, i64 14, !dbg !36
  %155 = extractelement <16 x float> %149, i64 14, !dbg !36
  %156 = select i1 %154, float 0.000000e+00, float %155, !dbg !36
  %157 = extractelement <16 x i1> %150, i64 13, !dbg !36
  %158 = extractelement <16 x float> %149, i64 13, !dbg !36
  %159 = select i1 %157, float 0.000000e+00, float %158, !dbg !36
  %160 = extractelement <16 x i1> %150, i64 12, !dbg !36
  %161 = extractelement <16 x float> %149, i64 12, !dbg !36
  %162 = select i1 %160, float 0.000000e+00, float %161, !dbg !36
  %163 = extractelement <16 x i1> %150, i64 11, !dbg !36
  %164 = extractelement <16 x float> %149, i64 11, !dbg !36
  %165 = select i1 %163, float 0.000000e+00, float %164, !dbg !36
  %166 = extractelement <16 x i1> %150, i64 10, !dbg !36
  %167 = extractelement <16 x float> %149, i64 10, !dbg !36
  %168 = select i1 %166, float 0.000000e+00, float %167, !dbg !36
  %169 = extractelement <16 x i1> %150, i64 9, !dbg !36
  %170 = extractelement <16 x float> %149, i64 9, !dbg !36
  %171 = select i1 %169, float 0.000000e+00, float %170, !dbg !36
  %172 = extractelement <16 x i1> %150, i64 8, !dbg !36
  %173 = extractelement <16 x float> %149, i64 8, !dbg !36
  %174 = select i1 %172, float 0.000000e+00, float %173, !dbg !36
  %175 = extractelement <16 x i1> %150, i64 7, !dbg !36
  %176 = extractelement <16 x float> %149, i64 7, !dbg !36
  %177 = select i1 %175, float 0.000000e+00, float %176, !dbg !36
  %178 = extractelement <16 x i1> %150, i64 6, !dbg !36
  %179 = extractelement <16 x float> %149, i64 6, !dbg !36
  %180 = select i1 %178, float 0.000000e+00, float %179, !dbg !36
  %181 = extractelement <16 x i1> %150, i64 5, !dbg !36
  %182 = extractelement <16 x float> %149, i64 5, !dbg !36
  %183 = select i1 %181, float 0.000000e+00, float %182, !dbg !36
  %184 = extractelement <16 x i1> %150, i64 4, !dbg !36
  %185 = extractelement <16 x float> %149, i64 4, !dbg !36
  %186 = select i1 %184, float 0.000000e+00, float %185, !dbg !36
  %187 = extractelement <16 x i1> %150, i64 3, !dbg !36
  %188 = extractelement <16 x float> %149, i64 3, !dbg !36
  %189 = select i1 %187, float 0.000000e+00, float %188, !dbg !36
  %190 = extractelement <16 x i1> %150, i64 2, !dbg !36
  %191 = extractelement <16 x float> %149, i64 2, !dbg !36
  %192 = select i1 %190, float 0.000000e+00, float %191, !dbg !36
  %193 = extractelement <16 x i1> %150, i64 1, !dbg !36
  %194 = extractelement <16 x float> %149, i64 1, !dbg !36
  %195 = select i1 %193, float 0.000000e+00, float %194, !dbg !36
  %196 = extractelement <16 x i1> %150, i64 0, !dbg !36
  %197 = extractelement <16 x float> %149, i64 0, !dbg !36
  %198 = select i1 %196, float 0.000000e+00, float %197, !dbg !36
  %199 = mul i32 %6, 3600, !dbg !37
  %200 = mul i32 %12, 225, !dbg !37
  %201 = mul i32 %13, 225, !dbg !37
  %202 = mul i32 %14, 225, !dbg !37
  %203 = mul i32 %15, 225, !dbg !37
  %204 = mul i32 %16, 225, !dbg !37
  %205 = mul i32 %17, 225, !dbg !37
  %206 = mul i32 %18, 225, !dbg !37
  %207 = mul i32 %19, 225, !dbg !37
  %208 = mul i32 %20, 225, !dbg !37
  %209 = mul i32 %21, 225, !dbg !37
  %210 = mul i32 %22, 225, !dbg !37
  %211 = mul i32 %23, 225, !dbg !37
  %212 = mul i32 %24, 225, !dbg !37
  %213 = mul i32 %25, 225, !dbg !37
  %214 = mul i32 %26, 225, !dbg !37
  %215 = add i32 %53, %199, !dbg !38
  %216 = add i32 %53, %200, !dbg !38
  %217 = add i32 %53, %201, !dbg !38
  %218 = add i32 %53, %202, !dbg !38
  %219 = add i32 %53, %203, !dbg !38
  %220 = add i32 %53, %204, !dbg !38
  %221 = add i32 %53, %205, !dbg !38
  %222 = add i32 %53, %206, !dbg !38
  %223 = add i32 %53, %207, !dbg !38
  %224 = add i32 %53, %208, !dbg !38
  %225 = add i32 %53, %209, !dbg !38
  %226 = add i32 %53, %210, !dbg !38
  %227 = add i32 %53, %211, !dbg !38
  %228 = add i32 %53, %212, !dbg !38
  %229 = add i32 %53, %213, !dbg !38
  %230 = add i32 %53, %214, !dbg !38
  %231 = sext i32 %215 to i64, !dbg !39
  %232 = getelementptr float, ptr addrspace(1) %2, i64 %231, !dbg !39
  %233 = sext i32 %216 to i64, !dbg !39
  %234 = getelementptr float, ptr addrspace(1) %2, i64 %233, !dbg !39
  %235 = sext i32 %217 to i64, !dbg !39
  %236 = getelementptr float, ptr addrspace(1) %2, i64 %235, !dbg !39
  %237 = sext i32 %218 to i64, !dbg !39
  %238 = getelementptr float, ptr addrspace(1) %2, i64 %237, !dbg !39
  %239 = sext i32 %219 to i64, !dbg !39
  %240 = getelementptr float, ptr addrspace(1) %2, i64 %239, !dbg !39
  %241 = sext i32 %220 to i64, !dbg !39
  %242 = getelementptr float, ptr addrspace(1) %2, i64 %241, !dbg !39
  %243 = sext i32 %221 to i64, !dbg !39
  %244 = getelementptr float, ptr addrspace(1) %2, i64 %243, !dbg !39
  %245 = sext i32 %222 to i64, !dbg !39
  %246 = getelementptr float, ptr addrspace(1) %2, i64 %245, !dbg !39
  %247 = sext i32 %223 to i64, !dbg !39
  %248 = getelementptr float, ptr addrspace(1) %2, i64 %247, !dbg !39
  %249 = sext i32 %224 to i64, !dbg !39
  %250 = getelementptr float, ptr addrspace(1) %2, i64 %249, !dbg !39
  %251 = sext i32 %225 to i64, !dbg !39
  %252 = getelementptr float, ptr addrspace(1) %2, i64 %251, !dbg !39
  %253 = sext i32 %226 to i64, !dbg !39
  %254 = getelementptr float, ptr addrspace(1) %2, i64 %253, !dbg !39
  %255 = sext i32 %227 to i64, !dbg !39
  %256 = getelementptr float, ptr addrspace(1) %2, i64 %255, !dbg !39
  %257 = sext i32 %228 to i64, !dbg !39
  %258 = getelementptr float, ptr addrspace(1) %2, i64 %257, !dbg !39
  %259 = sext i32 %229 to i64, !dbg !39
  %260 = getelementptr float, ptr addrspace(1) %2, i64 %259, !dbg !39
  %261 = sext i32 %230 to i64, !dbg !39
  %262 = getelementptr float, ptr addrspace(1) %2, i64 %261, !dbg !39
  %263 = shl i32 %8, 10, !dbg !40
  %264 = and i32 %263, 3072, !dbg !40
  %265 = or disjoint i32 %264, %47, !dbg !40
  %266 = lshr exact i32 %264, 6, !dbg !40
  %267 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %266, !dbg !40
  %268 = getelementptr float, ptr addrspace(3) %267, i32 %265, !dbg !40
  %269 = bitcast float %153 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #2, !dbg !40
  %270 = or disjoint i32 %265, 256, !dbg !40
  %271 = lshr i32 %270, 8, !dbg !40
  %272 = getelementptr float, ptr addrspace(3) @global_smem, i32 %271, !dbg !40
  %273 = getelementptr float, ptr addrspace(3) %272, i32 %270, !dbg !40
  %274 = bitcast float %156 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #2, !dbg !40
  %275 = or disjoint i32 %265, 512, !dbg !40
  %276 = lshr i32 %275, 8, !dbg !40
  %277 = getelementptr float, ptr addrspace(3) @global_smem, i32 %276, !dbg !40
  %278 = getelementptr float, ptr addrspace(3) %277, i32 %275, !dbg !40
  %279 = bitcast float %159 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %278, <1 x i32> %279, i1 true) #2, !dbg !40
  %280 = or disjoint i32 %265, 768, !dbg !40
  %281 = lshr i32 %280, 8, !dbg !40
  %282 = getelementptr float, ptr addrspace(3) @global_smem, i32 %281, !dbg !40
  %283 = getelementptr float, ptr addrspace(3) %282, i32 %280, !dbg !40
  %284 = bitcast float %162 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %283, <1 x i32> %284, i1 true) #2, !dbg !40
  %285 = or disjoint i32 %265, 64, !dbg !40
  %286 = getelementptr float, ptr addrspace(3) %267, i32 %285, !dbg !40
  %287 = bitcast float %165 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 true) #2, !dbg !40
  %288 = or disjoint i32 %265, 320, !dbg !40
  %289 = lshr i32 %288, 8, !dbg !40
  %290 = getelementptr float, ptr addrspace(3) @global_smem, i32 %289, !dbg !40
  %291 = getelementptr float, ptr addrspace(3) %290, i32 %288, !dbg !40
  %292 = bitcast float %168 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, <1 x i32> %292, i1 true) #2, !dbg !40
  %293 = or disjoint i32 %265, 576, !dbg !40
  %294 = lshr i32 %293, 8, !dbg !40
  %295 = getelementptr float, ptr addrspace(3) @global_smem, i32 %294, !dbg !40
  %296 = getelementptr float, ptr addrspace(3) %295, i32 %293, !dbg !40
  %297 = bitcast float %171 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %297, i1 true) #2, !dbg !40
  %298 = or disjoint i32 %265, 832, !dbg !40
  %299 = lshr i32 %298, 8, !dbg !40
  %300 = getelementptr float, ptr addrspace(3) @global_smem, i32 %299, !dbg !40
  %301 = getelementptr float, ptr addrspace(3) %300, i32 %298, !dbg !40
  %302 = bitcast float %174 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %301, <1 x i32> %302, i1 true) #2, !dbg !40
  %303 = or disjoint i32 %265, 128, !dbg !40
  %304 = getelementptr float, ptr addrspace(3) %267, i32 %303, !dbg !40
  %305 = bitcast float %177 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %304, <1 x i32> %305, i1 true) #2, !dbg !40
  %306 = or disjoint i32 %265, 384, !dbg !40
  %307 = lshr i32 %306, 8, !dbg !40
  %308 = getelementptr float, ptr addrspace(3) @global_smem, i32 %307, !dbg !40
  %309 = getelementptr float, ptr addrspace(3) %308, i32 %306, !dbg !40
  %310 = bitcast float %180 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %310, i1 true) #2, !dbg !40
  %311 = or disjoint i32 %265, 640, !dbg !40
  %312 = lshr i32 %311, 8, !dbg !40
  %313 = getelementptr float, ptr addrspace(3) @global_smem, i32 %312, !dbg !40
  %314 = getelementptr float, ptr addrspace(3) %313, i32 %311, !dbg !40
  %315 = bitcast float %183 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %314, <1 x i32> %315, i1 true) #2, !dbg !40
  %316 = or disjoint i32 %265, 896, !dbg !40
  %317 = lshr i32 %316, 8, !dbg !40
  %318 = getelementptr float, ptr addrspace(3) @global_smem, i32 %317, !dbg !40
  %319 = getelementptr float, ptr addrspace(3) %318, i32 %316, !dbg !40
  %320 = bitcast float %186 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %319, <1 x i32> %320, i1 true) #2, !dbg !40
  %321 = or disjoint i32 %265, 192, !dbg !40
  %322 = getelementptr float, ptr addrspace(3) %267, i32 %321, !dbg !40
  %323 = bitcast float %189 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %322, <1 x i32> %323, i1 true) #2, !dbg !40
  %324 = or disjoint i32 %265, 448, !dbg !40
  %325 = lshr i32 %324, 8, !dbg !40
  %326 = getelementptr float, ptr addrspace(3) @global_smem, i32 %325, !dbg !40
  %327 = getelementptr float, ptr addrspace(3) %326, i32 %324, !dbg !40
  %328 = bitcast float %192 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %327, <1 x i32> %328, i1 true) #2, !dbg !40
  %329 = or disjoint i32 %265, 704, !dbg !40
  %330 = lshr i32 %329, 8, !dbg !40
  %331 = getelementptr float, ptr addrspace(3) @global_smem, i32 %330, !dbg !40
  %332 = getelementptr float, ptr addrspace(3) %331, i32 %329, !dbg !40
  %333 = bitcast float %195 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %332, <1 x i32> %333, i1 true) #2, !dbg !40
  %334 = or disjoint i32 %265, 960, !dbg !40
  %335 = lshr i32 %334, 8, !dbg !40
  %336 = getelementptr float, ptr addrspace(3) @global_smem, i32 %335, !dbg !40
  %337 = getelementptr float, ptr addrspace(3) %336, i32 %334, !dbg !40
  %338 = bitcast float %198 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %337, <1 x i32> %338, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %339 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %48, !dbg !40
  %340 = load i32, ptr addrspace(3) %339, align 4, !dbg !40
  %341 = getelementptr inbounds i8, ptr addrspace(3) %339, i32 1028, !dbg !40
  %342 = load i32, ptr addrspace(3) %341, align 4, !dbg !40
  %343 = getelementptr inbounds i8, ptr addrspace(3) %339, i32 2056, !dbg !40
  %344 = load i32, ptr addrspace(3) %343, align 4, !dbg !40
  %345 = getelementptr inbounds i8, ptr addrspace(3) %339, i32 3084, !dbg !40
  %346 = load i32, ptr addrspace(3) %345, align 4, !dbg !40
  %347 = getelementptr inbounds i8, ptr addrspace(3) %339, i32 4112, !dbg !40
  %348 = load i32, ptr addrspace(3) %347, align 4, !dbg !40
  %349 = getelementptr inbounds i8, ptr addrspace(3) %339, i32 5140, !dbg !40
  %350 = load i32, ptr addrspace(3) %349, align 4, !dbg !40
  %351 = getelementptr inbounds i8, ptr addrspace(3) %339, i32 6168, !dbg !40
  %352 = load i32, ptr addrspace(3) %351, align 4, !dbg !40
  %353 = getelementptr inbounds i8, ptr addrspace(3) %339, i32 7196, !dbg !40
  %354 = load i32, ptr addrspace(3) %353, align 4, !dbg !40
  %355 = getelementptr inbounds i8, ptr addrspace(3) %339, i32 8224, !dbg !40
  %356 = load i32, ptr addrspace(3) %355, align 4, !dbg !40
  %357 = getelementptr inbounds i8, ptr addrspace(3) %339, i32 9252, !dbg !40
  %358 = load i32, ptr addrspace(3) %357, align 4, !dbg !40
  %359 = getelementptr inbounds i8, ptr addrspace(3) %339, i32 10280, !dbg !40
  %360 = load i32, ptr addrspace(3) %359, align 4, !dbg !40
  %361 = getelementptr inbounds i8, ptr addrspace(3) %339, i32 11308, !dbg !40
  %362 = load i32, ptr addrspace(3) %361, align 4, !dbg !40
  %363 = getelementptr inbounds i8, ptr addrspace(3) %339, i32 12336, !dbg !40
  %364 = load i32, ptr addrspace(3) %363, align 4, !dbg !40
  %365 = getelementptr inbounds i8, ptr addrspace(3) %339, i32 13364, !dbg !40
  %366 = load i32, ptr addrspace(3) %365, align 4, !dbg !40
  %367 = getelementptr inbounds i8, ptr addrspace(3) %339, i32 14392, !dbg !40
  %368 = load i32, ptr addrspace(3) %367, align 4, !dbg !40
  %369 = getelementptr inbounds i8, ptr addrspace(3) %339, i32 15420, !dbg !40
  %370 = load i32, ptr addrspace(3) %369, align 4, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %340, ptr addrspace(1) %232, i1 %83) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %342, ptr addrspace(1) %234, i1 %84) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %344, ptr addrspace(1) %236, i1 %85) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %346, ptr addrspace(1) %238, i1 %86) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %348, ptr addrspace(1) %240, i1 %87) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %350, ptr addrspace(1) %242, i1 %88) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %352, ptr addrspace(1) %244, i1 %89) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %354, ptr addrspace(1) %246, i1 %90) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %356, ptr addrspace(1) %248, i1 %91) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %358, ptr addrspace(1) %250, i1 %92) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %360, ptr addrspace(1) %252, i1 %93) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %362, ptr addrspace(1) %254, i1 %94) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %364, ptr addrspace(1) %256, i1 %95) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %366, ptr addrspace(1) %258, i1 %96) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %368, ptr addrspace(1) %260, i1 %97) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %370, ptr addrspace(1) %262, i1 %98) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxmlycbhsncwmujypc5tym4lb4g6ejb6aftg33cgldfa4uw7amkv.py", directory: "inductor_cache/xm")
!4 = !{ptr @triton_poi_fused_convolution_relu_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_2, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_2", linkageName: "triton_poi_fused_convolution_relu_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 36, column: 40, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 37, column: 34, scope: !7)
!38 = !DILocation(line: 37, column: 30, scope: !7)
!39 = !DILocation(line: 37, column: 25, scope: !7)
!40 = !DILocation(line: 37, column: 45, scope: !7)
!41 = !DILocation(line: 37, column: 4, scope: !7)
