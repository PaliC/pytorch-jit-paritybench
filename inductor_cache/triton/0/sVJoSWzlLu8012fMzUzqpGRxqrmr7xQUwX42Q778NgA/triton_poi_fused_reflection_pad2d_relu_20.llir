; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_reflection_pad2d_relu_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = or disjoint i32 %13, 512, !dbg !13
  %18 = or disjoint i32 %13, 513, !dbg !13
  %19 = or disjoint i32 %13, 514, !dbg !13
  %20 = or disjoint i32 %13, 515, !dbg !13
  %21 = srem i32 %14, 72, !dbg !14
  %22 = srem i32 %15, 72, !dbg !14
  %23 = srem i32 %16, 72, !dbg !14
  %24 = srem i32 %18, 72, !dbg !14
  %25 = srem i32 %19, 72, !dbg !14
  %26 = srem i32 %20, 72, !dbg !14
  %27 = sdiv i32 %13, 72, !dbg !15
  %28 = sdiv i32 %17, 72, !dbg !15
  %29 = sdiv i32 %13, 5184, !dbg !16
  %30 = sdiv i32 %17, 5184, !dbg !16
  %31 = add nsw i32 %21, -4, !dbg !17
  %32 = add nsw i32 %22, -4, !dbg !17
  %33 = add nsw i32 %23, -4, !dbg !17
  %34 = add nsw i32 %24, -4, !dbg !17
  %35 = add nsw i32 %25, -4, !dbg !17
  %36 = add nsw i32 %26, -4, !dbg !17
  %37 = tail call i32 @llvm.abs.i32(i32 %31, i1 true), !dbg !18
  %38 = tail call i32 @llvm.abs.i32(i32 %32, i1 true), !dbg !18
  %39 = tail call i32 @llvm.abs.i32(i32 %33, i1 true), !dbg !18
  %40 = tail call i32 @llvm.abs.i32(i32 %34, i1 true), !dbg !18
  %41 = tail call i32 @llvm.abs.i32(i32 %35, i1 true), !dbg !18
  %42 = tail call i32 @llvm.abs.i32(i32 %36, i1 true), !dbg !18
  %43 = add nsw i32 %37, -63, !dbg !19
  %44 = add nsw i32 %38, -63, !dbg !19
  %45 = add nsw i32 %39, -63, !dbg !19
  %46 = add nsw i32 %40, -63, !dbg !19
  %47 = add nsw i32 %41, -63, !dbg !19
  %48 = add nsw i32 %42, -63, !dbg !19
  %49 = tail call i32 @llvm.abs.i32(i32 %43, i1 true), !dbg !20
  %50 = tail call i32 @llvm.abs.i32(i32 %44, i1 true), !dbg !20
  %51 = tail call i32 @llvm.abs.i32(i32 %45, i1 true), !dbg !20
  %52 = tail call i32 @llvm.abs.i32(i32 %46, i1 true), !dbg !20
  %53 = tail call i32 @llvm.abs.i32(i32 %47, i1 true), !dbg !20
  %54 = tail call i32 @llvm.abs.i32(i32 %48, i1 true), !dbg !20
  %55 = shl nsw i32 %29, 12, !dbg !21
  %56 = shl nsw i32 %30, 12, !dbg !21
  %reass.sub = or disjoint i32 %55, 4095, !dbg !22
  %57 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !14
  %58 = insertelement <2 x i32> %57, i32 %27, i64 1, !dbg !14
  %59 = srem <2 x i32> %58, splat (i32 72), !dbg !14
  %60 = add nsw <2 x i32> %59, splat (i32 -4), !dbg !17
  %61 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %60, i1 true), !dbg !18
  %62 = add nsw <2 x i32> %61, splat (i32 -63), !dbg !19
  %63 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %62, i1 true), !dbg !20
  %64 = extractelement <2 x i32> %63, i64 0, !dbg !23
  %65 = sub nuw i32 %reass.sub, %64, !dbg !23
  %66 = extractelement <2 x i32> %63, i64 1, !dbg !23
  %67 = mul nsw i32 %66, -64, !dbg !23
  %68 = add i32 %65, %67, !dbg !23
  %69 = sub nuw i32 %reass.sub, %49, !dbg !22
  %70 = add i32 %69, %67, !dbg !23
  %71 = sub nuw i32 %reass.sub, %50, !dbg !22
  %72 = add i32 %71, %67, !dbg !23
  %73 = sub nuw i32 %reass.sub, %51, !dbg !22
  %74 = add i32 %73, %67, !dbg !23
  %reass.sub4 = or disjoint i32 %56, 4095, !dbg !22
  %75 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !14
  %76 = insertelement <2 x i32> %75, i32 %28, i64 1, !dbg !14
  %77 = srem <2 x i32> %76, splat (i32 72), !dbg !14
  %78 = add nsw <2 x i32> %77, splat (i32 -4), !dbg !17
  %79 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %78, i1 true), !dbg !18
  %80 = add nsw <2 x i32> %79, splat (i32 -63), !dbg !19
  %81 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %80, i1 true), !dbg !20
  %82 = extractelement <2 x i32> %81, i64 0, !dbg !23
  %83 = sub nuw i32 %reass.sub4, %82, !dbg !23
  %84 = extractelement <2 x i32> %81, i64 1, !dbg !23
  %85 = mul nsw i32 %84, -64, !dbg !23
  %86 = add i32 %83, %85, !dbg !23
  %87 = sub nuw i32 %reass.sub4, %52, !dbg !22
  %88 = add i32 %87, %85, !dbg !23
  %89 = sub nuw i32 %reass.sub4, %53, !dbg !22
  %90 = add i32 %89, %85, !dbg !23
  %91 = sub nuw i32 %reass.sub4, %54, !dbg !22
  %92 = add i32 %91, %85, !dbg !23
  %93 = sext i32 %68 to i64, !dbg !24
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !24
  %95 = sext i32 %70 to i64, !dbg !24
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !24
  %97 = sext i32 %72 to i64, !dbg !24
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !24
  %99 = sext i32 %74 to i64, !dbg !24
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !24
  %101 = sext i32 %86 to i64, !dbg !24
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !24
  %103 = sext i32 %88 to i64, !dbg !24
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !24
  %105 = sext i32 %90 to i64, !dbg !24
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !24
  %107 = sext i32 %92 to i64, !dbg !24
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !24
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #2, !dbg !25
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #2, !dbg !25
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #2, !dbg !25
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 true) #2, !dbg !25
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #2, !dbg !25
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #2, !dbg !25
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #2, !dbg !25
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #2, !dbg !25
  %117 = sext i32 %29 to i64, !dbg !26
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !26
  %119 = sext i32 %30 to i64, !dbg !26
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %119, !dbg !26
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #2, !dbg !27
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #2, !dbg !27
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #2, !dbg !27
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #2, !dbg !27
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 true) #2, !dbg !27
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 true) #2, !dbg !27
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 true) #2, !dbg !27
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 true) #2, !dbg !27
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %117, !dbg !28
  %130 = getelementptr float, ptr addrspace(1) %2, i64 %119, !dbg !28
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #2, !dbg !29
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #2, !dbg !29
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #2, !dbg !29
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #2, !dbg !29
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #2, !dbg !29
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #2, !dbg !29
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #2, !dbg !29
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #2, !dbg !29
  %139 = getelementptr float, ptr addrspace(1) %3, i64 %117, !dbg !30
  %140 = getelementptr float, ptr addrspace(1) %3, i64 %119, !dbg !30
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 true) #2, !dbg !31
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 true) #2, !dbg !31
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 true) #2, !dbg !31
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 true) #2, !dbg !31
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 true) #2, !dbg !31
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 true) #2, !dbg !31
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 true) #2, !dbg !31
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 true) #2, !dbg !31
  %149 = getelementptr float, ptr addrspace(1) %4, i64 %117, !dbg !32
  %150 = getelementptr float, ptr addrspace(1) %4, i64 %119, !dbg !32
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 true) #2, !dbg !33
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 true) #2, !dbg !33
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 true) #2, !dbg !33
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 true) #2, !dbg !33
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 true) #2, !dbg !33
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 true) #2, !dbg !33
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 true) #2, !dbg !33
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 true) #2, !dbg !33
  %159 = insertelement <8 x i32> poison, i32 %116, i64 0, !dbg !25
  %160 = insertelement <8 x i32> %159, i32 %115, i64 1, !dbg !25
  %161 = insertelement <8 x i32> %160, i32 %114, i64 2, !dbg !25
  %162 = insertelement <8 x i32> %161, i32 %113, i64 3, !dbg !25
  %163 = insertelement <8 x i32> %162, i32 %112, i64 4, !dbg !25
  %164 = insertelement <8 x i32> %163, i32 %111, i64 5, !dbg !25
  %165 = insertelement <8 x i32> %164, i32 %110, i64 6, !dbg !25
  %166 = insertelement <8 x i32> %165, i32 %109, i64 7, !dbg !25
  %167 = bitcast <8 x i32> %166 to <8 x float>, !dbg !25
  %168 = insertelement <8 x i32> poison, i32 %128, i64 0, !dbg !27
  %169 = insertelement <8 x i32> %168, i32 %127, i64 1, !dbg !27
  %170 = insertelement <8 x i32> %169, i32 %126, i64 2, !dbg !27
  %171 = insertelement <8 x i32> %170, i32 %125, i64 3, !dbg !27
  %172 = insertelement <8 x i32> %171, i32 %124, i64 4, !dbg !27
  %173 = insertelement <8 x i32> %172, i32 %123, i64 5, !dbg !27
  %174 = insertelement <8 x i32> %173, i32 %122, i64 6, !dbg !27
  %175 = insertelement <8 x i32> %174, i32 %121, i64 7, !dbg !27
  %176 = bitcast <8 x i32> %175 to <8 x float>, !dbg !27
  %177 = insertelement <8 x i32> poison, i32 %138, i64 0, !dbg !29
  %178 = insertelement <8 x i32> %177, i32 %137, i64 1, !dbg !29
  %179 = insertelement <8 x i32> %178, i32 %136, i64 2, !dbg !29
  %180 = insertelement <8 x i32> %179, i32 %135, i64 3, !dbg !29
  %181 = insertelement <8 x i32> %180, i32 %134, i64 4, !dbg !29
  %182 = insertelement <8 x i32> %181, i32 %133, i64 5, !dbg !29
  %183 = insertelement <8 x i32> %182, i32 %132, i64 6, !dbg !29
  %184 = insertelement <8 x i32> %183, i32 %131, i64 7, !dbg !29
  %185 = bitcast <8 x i32> %184 to <8 x float>, !dbg !29
  %186 = insertelement <8 x i32> poison, i32 %148, i64 0, !dbg !31
  %187 = insertelement <8 x i32> %186, i32 %147, i64 1, !dbg !31
  %188 = insertelement <8 x i32> %187, i32 %146, i64 2, !dbg !31
  %189 = insertelement <8 x i32> %188, i32 %145, i64 3, !dbg !31
  %190 = insertelement <8 x i32> %189, i32 %144, i64 4, !dbg !31
  %191 = insertelement <8 x i32> %190, i32 %143, i64 5, !dbg !31
  %192 = insertelement <8 x i32> %191, i32 %142, i64 6, !dbg !31
  %193 = insertelement <8 x i32> %192, i32 %141, i64 7, !dbg !31
  %194 = bitcast <8 x i32> %193 to <8 x float>, !dbg !31
  %195 = insertelement <8 x i32> poison, i32 %158, i64 0, !dbg !33
  %196 = insertelement <8 x i32> %195, i32 %157, i64 1, !dbg !33
  %197 = insertelement <8 x i32> %196, i32 %156, i64 2, !dbg !33
  %198 = insertelement <8 x i32> %197, i32 %155, i64 3, !dbg !33
  %199 = insertelement <8 x i32> %198, i32 %154, i64 4, !dbg !33
  %200 = insertelement <8 x i32> %199, i32 %153, i64 5, !dbg !33
  %201 = insertelement <8 x i32> %200, i32 %152, i64 6, !dbg !33
  %202 = insertelement <8 x i32> %201, i32 %151, i64 7, !dbg !33
  %203 = bitcast <8 x i32> %202 to <8 x float>, !dbg !33
  %204 = fsub <8 x float> %167, %176, !dbg !34
  %205 = fmul <8 x float> %204, %185, !dbg !35
  %206 = fmul <8 x float> %205, %194, !dbg !36
  %207 = fadd <8 x float> %206, %203, !dbg !37
  %208 = fcmp olt <8 x float> %207, zeroinitializer, !dbg !38
  %209 = extractelement <8 x i1> %208, i64 7, !dbg !42
  %210 = extractelement <8 x i1> %208, i64 6, !dbg !42
  %211 = extractelement <8 x i1> %208, i64 5, !dbg !42
  %212 = extractelement <8 x i1> %208, i64 4, !dbg !42
  %213 = extractelement <8 x i1> %208, i64 3, !dbg !42
  %214 = extractelement <8 x i1> %208, i64 2, !dbg !42
  %215 = extractelement <8 x i1> %208, i64 1, !dbg !42
  %216 = extractelement <8 x i1> %208, i64 0, !dbg !42
  %217 = sext i32 %13 to i64, !dbg !43
  %218 = getelementptr float, ptr addrspace(1) %5, i64 %217, !dbg !43
  %219 = sext i32 %17 to i64, !dbg !43
  %220 = getelementptr float, ptr addrspace(1) %5, i64 %219, !dbg !43
  %bc = bitcast <8 x float> %207 to <8 x i32>, !dbg !44
  %221 = extractelement <8 x i32> %bc, i64 7, !dbg !44
  %222 = select i1 %209, i32 0, i32 %221, !dbg !42
  %bc15 = bitcast <8 x float> %207 to <8 x i32>, !dbg !44
  %223 = extractelement <8 x i32> %bc15, i64 6, !dbg !44
  %224 = select i1 %210, i32 0, i32 %223, !dbg !42
  %bc16 = bitcast <8 x float> %207 to <8 x i32>, !dbg !44
  %225 = extractelement <8 x i32> %bc16, i64 5, !dbg !44
  %226 = select i1 %211, i32 0, i32 %225, !dbg !42
  %bc17 = bitcast <8 x float> %207 to <8 x i32>, !dbg !44
  %227 = extractelement <8 x i32> %bc17, i64 4, !dbg !44
  %228 = select i1 %212, i32 0, i32 %227, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %222, i32 %224, i32 %226, i32 %228, ptr addrspace(1) %218, i1 true) #2, !dbg !44
  %bc18 = bitcast <8 x float> %207 to <8 x i32>, !dbg !44
  %229 = extractelement <8 x i32> %bc18, i64 3, !dbg !44
  %230 = select i1 %213, i32 0, i32 %229, !dbg !42
  %bc19 = bitcast <8 x float> %207 to <8 x i32>, !dbg !44
  %231 = extractelement <8 x i32> %bc19, i64 2, !dbg !44
  %232 = select i1 %214, i32 0, i32 %231, !dbg !42
  %bc20 = bitcast <8 x float> %207 to <8 x i32>, !dbg !44
  %233 = extractelement <8 x i32> %bc20, i64 1, !dbg !44
  %234 = select i1 %215, i32 0, i32 %233, !dbg !42
  %bc21 = bitcast <8 x float> %207 to <8 x i32>, !dbg !44
  %235 = extractelement <8 x i32> %bc21, i64 0, !dbg !44
  %236 = select i1 %216, i32 0, i32 %235, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %230, i32 %232, i32 %234, i32 %236, ptr addrspace(1) %220, i1 true) #2, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x i32> @llvm.abs.v2i32(<2 x i32>, i1 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cugcn5ogmygxmlbxjaav2oejdiyheom6rbabhqryzroqt2cwx5fo.py", directory: "inductor_cache/ug")
!4 = !{ptr @triton_poi_fused_reflection_pad2d_relu_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_reflection_pad2d_relu_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_reflection_pad2d_relu_20", linkageName: "triton_poi_fused_reflection_pad2d_relu_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 82, scope: !7)
!18 = !DILocation(line: 28, column: 75, scope: !7)
!19 = !DILocation(line: 28, column: 63, scope: !7)
!20 = !DILocation(line: 28, column: 55, scope: !7)
!21 = !DILocation(line: 28, column: 149, scope: !7)
!22 = !DILocation(line: 28, column: 91, scope: !7)
!23 = !DILocation(line: 28, column: 144, scope: !7)
!24 = !DILocation(line: 28, column: 30, scope: !7)
!25 = !DILocation(line: 28, column: 154, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 35, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 35, scope: !7)
!30 = !DILocation(line: 31, column: 30, scope: !7)
!31 = !DILocation(line: 31, column: 35, scope: !7)
!32 = !DILocation(line: 32, column: 30, scope: !7)
!33 = !DILocation(line: 32, column: 35, scope: !7)
!34 = !DILocation(line: 33, column: 18, scope: !7)
!35 = !DILocation(line: 34, column: 18, scope: !7)
!36 = !DILocation(line: 35, column: 18, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 38, column: 41, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 39, column: 25, scope: !7)
!44 = !DILocation(line: 39, column: 37, scope: !7)
!45 = !DILocation(line: 39, column: 4, scope: !7)
