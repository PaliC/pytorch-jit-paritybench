; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_pow_sub_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = icmp slt i32 %10, 512, !dbg !14
  %12 = lshr i32 %8, 5, !dbg !15
  %13 = and i32 %12, 7, !dbg !15
  %14 = or disjoint i32 %13, 8, !dbg !15
  %15 = or disjoint i32 %13, 16, !dbg !15
  %16 = or disjoint i32 %13, 24, !dbg !15
  %17 = or disjoint i32 %13, 32, !dbg !15
  %18 = or disjoint i32 %13, 40, !dbg !15
  %19 = or disjoint i32 %13, 48, !dbg !15
  %20 = or disjoint i32 %13, 56, !dbg !15
  %.frozen = freeze i32 %10, !dbg !16
  %21 = sdiv i32 %.frozen, 64, !dbg !16
  %22 = mul i32 %21, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %22, !dbg !17
  %23 = shl nuw nsw i32 %13, 9, !dbg !18
  %24 = shl nuw nsw i32 %14, 9, !dbg !18
  %25 = shl nuw nsw i32 %15, 9, !dbg !18
  %26 = shl nuw nsw i32 %16, 9, !dbg !18
  %27 = shl nuw nsw i32 %17, 9, !dbg !18
  %28 = shl nuw nsw i32 %18, 9, !dbg !18
  %29 = shl nuw nsw i32 %19, 9, !dbg !18
  %30 = shl nuw nsw i32 %20, 9, !dbg !18
  %31 = shl nsw i32 %.decomposed, 7, !dbg !19
  %32 = or disjoint i32 %31, %13, !dbg !20
  %33 = or disjoint i32 %31, %14, !dbg !20
  %34 = or disjoint i32 %31, %15, !dbg !20
  %35 = or disjoint i32 %31, %16, !dbg !20
  %36 = or disjoint i32 %31, %17, !dbg !20
  %37 = or disjoint i32 %31, %18, !dbg !20
  %38 = or disjoint i32 %31, %19, !dbg !20
  %39 = or disjoint i32 %31, %20, !dbg !20
  %40 = or disjoint i32 %32, 64, !dbg !20
  %41 = or disjoint i32 %32, 72, !dbg !20
  %42 = or disjoint i32 %32, 80, !dbg !20
  %43 = or disjoint i32 %32, 88, !dbg !20
  %44 = or disjoint i32 %32, 96, !dbg !20
  %45 = or disjoint i32 %32, 104, !dbg !20
  %46 = or disjoint i32 %32, 112, !dbg !20
  %47 = or disjoint i32 %32, 120, !dbg !20
  %48 = shl i32 %21, 13, !dbg !21
  %49 = add i32 %32, %48, !dbg !22
  %50 = add i32 %33, %48, !dbg !22
  %51 = add i32 %34, %48, !dbg !22
  %52 = add i32 %35, %48, !dbg !22
  %53 = add i32 %36, %48, !dbg !22
  %54 = add i32 %37, %48, !dbg !22
  %55 = add i32 %38, %48, !dbg !22
  %56 = add i32 %39, %48, !dbg !22
  %57 = add i32 %40, %48, !dbg !22
  %58 = add i32 %41, %48, !dbg !22
  %59 = add i32 %42, %48, !dbg !22
  %60 = add i32 %43, %48, !dbg !22
  %61 = add i32 %44, %48, !dbg !22
  %62 = add i32 %45, %48, !dbg !22
  %63 = add i32 %46, %48, !dbg !22
  %64 = add i32 %47, %48, !dbg !22
  %65 = sdiv i32 %49, 32768, !dbg !23
  %66 = sdiv i32 %50, 32768, !dbg !23
  %67 = sdiv i32 %51, 32768, !dbg !23
  %68 = sdiv i32 %52, 32768, !dbg !23
  %69 = sdiv i32 %53, 32768, !dbg !23
  %70 = sdiv i32 %54, 32768, !dbg !23
  %71 = sdiv i32 %55, 32768, !dbg !23
  %72 = sdiv i32 %56, 32768, !dbg !23
  %73 = sdiv i32 %57, 32768, !dbg !23
  %74 = sdiv i32 %58, 32768, !dbg !23
  %75 = sdiv i32 %59, 32768, !dbg !23
  %76 = sdiv i32 %60, 32768, !dbg !23
  %77 = sdiv i32 %61, 32768, !dbg !23
  %78 = sdiv i32 %62, 32768, !dbg !23
  %79 = sdiv i32 %63, 32768, !dbg !23
  %80 = sdiv i32 %64, 32768, !dbg !23
  %81 = shl nsw i32 %65, 15, !dbg !24
  %82 = shl nsw i32 %66, 15, !dbg !24
  %83 = shl nsw i32 %67, 15, !dbg !24
  %84 = shl nsw i32 %68, 15, !dbg !24
  %85 = shl nsw i32 %69, 15, !dbg !24
  %86 = shl nsw i32 %70, 15, !dbg !24
  %87 = shl nsw i32 %71, 15, !dbg !24
  %88 = shl nsw i32 %72, 15, !dbg !24
  %89 = shl nsw i32 %73, 15, !dbg !24
  %90 = shl nsw i32 %74, 15, !dbg !24
  %91 = shl nsw i32 %75, 15, !dbg !24
  %92 = shl nsw i32 %76, 15, !dbg !24
  %93 = shl nsw i32 %77, 15, !dbg !24
  %94 = shl nsw i32 %78, 15, !dbg !24
  %95 = shl nsw i32 %79, 15, !dbg !24
  %96 = shl nsw i32 %80, 15, !dbg !24
  %97 = or disjoint i32 %81, %23, !dbg !25
  %98 = or disjoint i32 %82, %24, !dbg !25
  %99 = or disjoint i32 %83, %25, !dbg !25
  %100 = or disjoint i32 %84, %26, !dbg !25
  %101 = or disjoint i32 %85, %27, !dbg !25
  %102 = or disjoint i32 %86, %28, !dbg !25
  %103 = or disjoint i32 %87, %29, !dbg !25
  %104 = or disjoint i32 %88, %30, !dbg !25
  %105 = or disjoint i32 %89, %23, !dbg !25
  %106 = or disjoint i32 %23, %90, !dbg !25
  %107 = or disjoint i32 %23, %91, !dbg !25
  %108 = or disjoint i32 %23, %92, !dbg !25
  %109 = or disjoint i32 %23, %93, !dbg !25
  %110 = or disjoint i32 %23, %94, !dbg !25
  %111 = or disjoint i32 %23, %95, !dbg !25
  %112 = or disjoint i32 %23, %96, !dbg !25
  %113 = sdiv i32 %49, 64, !dbg !26
  %114 = sdiv i32 %50, 64, !dbg !26
  %115 = sdiv i32 %51, 64, !dbg !26
  %116 = sdiv i32 %52, 64, !dbg !26
  %117 = sdiv i32 %53, 64, !dbg !26
  %118 = sdiv i32 %54, 64, !dbg !26
  %119 = sdiv i32 %55, 64, !dbg !26
  %120 = sdiv i32 %56, 64, !dbg !26
  %121 = sdiv i32 %57, 64, !dbg !26
  %122 = sdiv i32 %58, 64, !dbg !26
  %123 = sdiv i32 %59, 64, !dbg !26
  %124 = sdiv i32 %60, 64, !dbg !26
  %125 = sdiv i32 %61, 64, !dbg !26
  %126 = sdiv i32 %62, 64, !dbg !26
  %127 = sdiv i32 %63, 64, !dbg !26
  %128 = sdiv i32 %64, 64, !dbg !26
  %129 = srem i32 %113, 512, !dbg !27
  %130 = srem i32 %114, 512, !dbg !27
  %131 = srem i32 %115, 512, !dbg !27
  %132 = srem i32 %116, 512, !dbg !27
  %133 = srem i32 %117, 512, !dbg !27
  %134 = srem i32 %118, 512, !dbg !27
  %135 = srem i32 %119, 512, !dbg !27
  %136 = srem i32 %120, 512, !dbg !27
  %137 = srem i32 %121, 512, !dbg !27
  %138 = srem i32 %122, 512, !dbg !27
  %139 = srem i32 %123, 512, !dbg !27
  %140 = srem i32 %124, 512, !dbg !27
  %141 = srem i32 %125, 512, !dbg !27
  %142 = srem i32 %126, 512, !dbg !27
  %143 = srem i32 %127, 512, !dbg !27
  %144 = srem i32 %128, 512, !dbg !27
  %145 = add i32 %97, %129, !dbg !28
  %146 = add nsw i32 %98, %130, !dbg !28
  %147 = add nsw i32 %99, %131, !dbg !28
  %148 = add nsw i32 %100, %132, !dbg !28
  %149 = add nsw i32 %101, %133, !dbg !28
  %150 = add nsw i32 %102, %134, !dbg !28
  %151 = add nsw i32 %103, %135, !dbg !28
  %152 = add nsw i32 %104, %136, !dbg !28
  %153 = add i32 %105, %137, !dbg !28
  %154 = add nsw i32 %138, 4096, !dbg !25
  %155 = add i32 %154, %106, !dbg !28
  %156 = add nsw i32 %139, 8192, !dbg !25
  %157 = add i32 %156, %107, !dbg !28
  %158 = add nsw i32 %140, 12288, !dbg !25
  %159 = add i32 %158, %108, !dbg !28
  %160 = add nsw i32 %141, 16384, !dbg !25
  %161 = add i32 %160, %109, !dbg !28
  %162 = add nsw i32 %142, 20480, !dbg !25
  %163 = add i32 %162, %110, !dbg !28
  %164 = add nsw i32 %143, 24576, !dbg !25
  %165 = add i32 %164, %111, !dbg !28
  %166 = add nsw i32 %144, 28672, !dbg !25
  %167 = add i32 %166, %112, !dbg !28
  %168 = sext i32 %145 to i64, !dbg !29
  %169 = getelementptr float, ptr addrspace(1) %0, i64 %168, !dbg !29
  %170 = sext i32 %146 to i64, !dbg !29
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !29
  %172 = sext i32 %147 to i64, !dbg !29
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !29
  %174 = sext i32 %148 to i64, !dbg !29
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !29
  %176 = sext i32 %149 to i64, !dbg !29
  %177 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !29
  %178 = sext i32 %150 to i64, !dbg !29
  %179 = getelementptr float, ptr addrspace(1) %0, i64 %178, !dbg !29
  %180 = sext i32 %151 to i64, !dbg !29
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !29
  %182 = sext i32 %152 to i64, !dbg !29
  %183 = getelementptr float, ptr addrspace(1) %0, i64 %182, !dbg !29
  %184 = sext i32 %153 to i64, !dbg !29
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !29
  %186 = sext i32 %155 to i64, !dbg !29
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %186, !dbg !29
  %188 = sext i32 %157 to i64, !dbg !29
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %188, !dbg !29
  %190 = sext i32 %159 to i64, !dbg !29
  %191 = getelementptr float, ptr addrspace(1) %0, i64 %190, !dbg !29
  %192 = sext i32 %161 to i64, !dbg !29
  %193 = getelementptr float, ptr addrspace(1) %0, i64 %192, !dbg !29
  %194 = sext i32 %163 to i64, !dbg !29
  %195 = getelementptr float, ptr addrspace(1) %0, i64 %194, !dbg !29
  %196 = sext i32 %165 to i64, !dbg !29
  %197 = getelementptr float, ptr addrspace(1) %0, i64 %196, !dbg !29
  %198 = sext i32 %167 to i64, !dbg !29
  %199 = getelementptr float, ptr addrspace(1) %0, i64 %198, !dbg !29
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %169, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %201 = bitcast i32 %200 to float, !dbg !30
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %171, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %203 = bitcast i32 %202 to float, !dbg !30
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %173, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %205 = bitcast i32 %204 to float, !dbg !30
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %175, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %207 = bitcast i32 %206 to float, !dbg !30
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %177, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %209 = bitcast i32 %208 to float, !dbg !30
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %179, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %211 = bitcast i32 %210 to float, !dbg !30
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %183, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %185, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %187, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %189, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %191, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %193, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %195, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %197, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %199, i1 %11, i32 0, i1 %11) #3, !dbg !30
  %222 = sext i32 %129 to i64, !dbg !31
  %223 = getelementptr float, ptr addrspace(1) %1, i64 %222, !dbg !31
  %224 = sext i32 %130 to i64, !dbg !31
  %225 = getelementptr float, ptr addrspace(1) %1, i64 %224, !dbg !31
  %226 = sext i32 %131 to i64, !dbg !31
  %227 = getelementptr float, ptr addrspace(1) %1, i64 %226, !dbg !31
  %228 = sext i32 %132 to i64, !dbg !31
  %229 = getelementptr float, ptr addrspace(1) %1, i64 %228, !dbg !31
  %230 = sext i32 %133 to i64, !dbg !31
  %231 = getelementptr float, ptr addrspace(1) %1, i64 %230, !dbg !31
  %232 = sext i32 %134 to i64, !dbg !31
  %233 = getelementptr float, ptr addrspace(1) %1, i64 %232, !dbg !31
  %234 = sext i32 %135 to i64, !dbg !31
  %235 = getelementptr float, ptr addrspace(1) %1, i64 %234, !dbg !31
  %236 = sext i32 %136 to i64, !dbg !31
  %237 = getelementptr float, ptr addrspace(1) %1, i64 %236, !dbg !31
  %238 = sext i32 %137 to i64, !dbg !31
  %239 = getelementptr float, ptr addrspace(1) %1, i64 %238, !dbg !31
  %240 = sext i32 %138 to i64, !dbg !31
  %241 = getelementptr float, ptr addrspace(1) %1, i64 %240, !dbg !31
  %242 = sext i32 %139 to i64, !dbg !31
  %243 = getelementptr float, ptr addrspace(1) %1, i64 %242, !dbg !31
  %244 = sext i32 %140 to i64, !dbg !31
  %245 = getelementptr float, ptr addrspace(1) %1, i64 %244, !dbg !31
  %246 = sext i32 %141 to i64, !dbg !31
  %247 = getelementptr float, ptr addrspace(1) %1, i64 %246, !dbg !31
  %248 = sext i32 %142 to i64, !dbg !31
  %249 = getelementptr float, ptr addrspace(1) %1, i64 %248, !dbg !31
  %250 = sext i32 %143 to i64, !dbg !31
  %251 = getelementptr float, ptr addrspace(1) %1, i64 %250, !dbg !31
  %252 = sext i32 %144 to i64, !dbg !31
  %253 = getelementptr float, ptr addrspace(1) %1, i64 %252, !dbg !31
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %223, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %255 = bitcast i32 %254 to float, !dbg !32
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %225, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %257 = bitcast i32 %256 to float, !dbg !32
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %227, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %259 = bitcast i32 %258 to float, !dbg !32
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %229, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %261 = bitcast i32 %260 to float, !dbg !32
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %231, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %263 = bitcast i32 %262 to float, !dbg !32
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %233, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %265 = bitcast i32 %264 to float, !dbg !32
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %235, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %237, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %239, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %241, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %243, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %245, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %247, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %249, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %251, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %253, i1 %11, i32 0, i1 %11) #3, !dbg !32
  %276 = or disjoint i32 %23, 65536, !dbg !33
  %277 = or disjoint i32 %24, 65536, !dbg !33
  %278 = or disjoint i32 %25, 65536, !dbg !33
  %279 = or disjoint i32 %26, 65536, !dbg !33
  %280 = or disjoint i32 %27, 65536, !dbg !33
  %281 = or disjoint i32 %28, 65536, !dbg !33
  %282 = or disjoint i32 %29, 65536, !dbg !33
  %283 = or disjoint i32 %30, 65536, !dbg !33
  %284 = or disjoint i32 %23, 69632, !dbg !33
  %285 = or disjoint i32 %23, 73728, !dbg !33
  %286 = or disjoint i32 %23, 77824, !dbg !33
  %287 = or disjoint i32 %23, 81920, !dbg !33
  %288 = or disjoint i32 %23, 86016, !dbg !33
  %289 = or disjoint i32 %23, 90112, !dbg !33
  %290 = or disjoint i32 %23, 94208, !dbg !33
  %291 = add i32 %81, %276, !dbg !34
  %292 = add i32 %277, %82, !dbg !34
  %293 = add i32 %278, %83, !dbg !34
  %294 = add i32 %279, %84, !dbg !34
  %295 = add i32 %280, %85, !dbg !34
  %296 = add i32 %281, %86, !dbg !34
  %297 = add i32 %282, %87, !dbg !34
  %298 = add i32 %283, %88, !dbg !34
  %299 = add i32 %89, %276, !dbg !34
  %300 = add i32 %284, %90, !dbg !34
  %301 = add i32 %285, %91, !dbg !34
  %302 = add i32 %286, %92, !dbg !34
  %303 = add i32 %287, %93, !dbg !34
  %304 = add i32 %288, %94, !dbg !34
  %305 = add i32 %289, %95, !dbg !34
  %306 = add i32 %290, %96, !dbg !34
  %307 = add i32 %291, %129, !dbg !35
  %308 = add nsw i32 %292, %130, !dbg !35
  %309 = add nsw i32 %293, %131, !dbg !35
  %310 = add nsw i32 %294, %132, !dbg !35
  %311 = add nsw i32 %295, %133, !dbg !35
  %312 = add nsw i32 %296, %134, !dbg !35
  %313 = add nsw i32 %297, %135, !dbg !35
  %314 = add nsw i32 %298, %136, !dbg !35
  %315 = add i32 %299, %137, !dbg !35
  %316 = add nsw i32 %300, %138, !dbg !35
  %317 = add nsw i32 %301, %139, !dbg !35
  %318 = add nsw i32 %302, %140, !dbg !35
  %319 = add nsw i32 %303, %141, !dbg !35
  %320 = add nsw i32 %304, %142, !dbg !35
  %321 = add nsw i32 %305, %143, !dbg !35
  %322 = add nsw i32 %306, %144, !dbg !35
  %323 = sext i32 %307 to i64, !dbg !36
  %324 = getelementptr float, ptr addrspace(1) %0, i64 %323, !dbg !36
  %325 = sext i32 %308 to i64, !dbg !36
  %326 = getelementptr float, ptr addrspace(1) %0, i64 %325, !dbg !36
  %327 = sext i32 %309 to i64, !dbg !36
  %328 = getelementptr float, ptr addrspace(1) %0, i64 %327, !dbg !36
  %329 = sext i32 %310 to i64, !dbg !36
  %330 = getelementptr float, ptr addrspace(1) %0, i64 %329, !dbg !36
  %331 = sext i32 %311 to i64, !dbg !36
  %332 = getelementptr float, ptr addrspace(1) %0, i64 %331, !dbg !36
  %333 = sext i32 %312 to i64, !dbg !36
  %334 = getelementptr float, ptr addrspace(1) %0, i64 %333, !dbg !36
  %335 = sext i32 %313 to i64, !dbg !36
  %336 = getelementptr float, ptr addrspace(1) %0, i64 %335, !dbg !36
  %337 = sext i32 %314 to i64, !dbg !36
  %338 = getelementptr float, ptr addrspace(1) %0, i64 %337, !dbg !36
  %339 = sext i32 %315 to i64, !dbg !36
  %340 = getelementptr float, ptr addrspace(1) %0, i64 %339, !dbg !36
  %341 = sext i32 %316 to i64, !dbg !36
  %342 = getelementptr float, ptr addrspace(1) %0, i64 %341, !dbg !36
  %343 = sext i32 %317 to i64, !dbg !36
  %344 = getelementptr float, ptr addrspace(1) %0, i64 %343, !dbg !36
  %345 = sext i32 %318 to i64, !dbg !36
  %346 = getelementptr float, ptr addrspace(1) %0, i64 %345, !dbg !36
  %347 = sext i32 %319 to i64, !dbg !36
  %348 = getelementptr float, ptr addrspace(1) %0, i64 %347, !dbg !36
  %349 = sext i32 %320 to i64, !dbg !36
  %350 = getelementptr float, ptr addrspace(1) %0, i64 %349, !dbg !36
  %351 = sext i32 %321 to i64, !dbg !36
  %352 = getelementptr float, ptr addrspace(1) %0, i64 %351, !dbg !36
  %353 = sext i32 %322 to i64, !dbg !36
  %354 = getelementptr float, ptr addrspace(1) %0, i64 %353, !dbg !36
  %355 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %324, i1 %11, i32 0, i1 %11) #3, !dbg !37
  %356 = bitcast i32 %355 to float, !dbg !37
  %357 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %326, i1 %11, i32 0, i1 %11) #3, !dbg !37
  %358 = bitcast i32 %357 to float, !dbg !37
  %359 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %328, i1 %11, i32 0, i1 %11) #3, !dbg !37
  %360 = bitcast i32 %359 to float, !dbg !37
  %361 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %330, i1 %11, i32 0, i1 %11) #3, !dbg !37
  %362 = bitcast i32 %361 to float, !dbg !37
  %363 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %332, i1 %11, i32 0, i1 %11) #3, !dbg !37
  %364 = bitcast i32 %363 to float, !dbg !37
  %365 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %334, i1 %11, i32 0, i1 %11) #3, !dbg !37
  %366 = bitcast i32 %365 to float, !dbg !37
  %367 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %336, i1 %11, i32 0, i1 %11) #3, !dbg !37
  %368 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %338, i1 %11, i32 0, i1 %11) #3, !dbg !37
  %369 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %340, i1 %11, i32 0, i1 %11) #3, !dbg !37
  %370 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %342, i1 %11, i32 0, i1 %11) #3, !dbg !37
  %371 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %344, i1 %11, i32 0, i1 %11) #3, !dbg !37
  %372 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %346, i1 %11, i32 0, i1 %11) #3, !dbg !37
  %373 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %348, i1 %11, i32 0, i1 %11) #3, !dbg !37
  %374 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %350, i1 %11, i32 0, i1 %11) #3, !dbg !37
  %375 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %352, i1 %11, i32 0, i1 %11) #3, !dbg !37
  %376 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %354, i1 %11, i32 0, i1 %11) #3, !dbg !37
  %377 = fadd float %201, %255, !dbg !38
  %378 = fadd float %203, %257, !dbg !38
  %379 = fadd float %205, %259, !dbg !38
  %380 = fadd float %207, %261, !dbg !38
  %381 = fadd float %209, %263, !dbg !38
  %382 = fadd float %211, %265, !dbg !38
  %383 = fadd float %255, %356, !dbg !39
  %384 = fadd float %257, %358, !dbg !39
  %385 = fadd float %259, %360, !dbg !39
  %386 = fadd float %261, %362, !dbg !39
  %387 = fadd float %263, %364, !dbg !39
  %388 = fadd float %265, %366, !dbg !39
  %389 = fsub float %377, %383, !dbg !40
  %390 = fsub float %378, %384, !dbg !40
  %391 = fsub float %379, %385, !dbg !40
  %392 = fsub float %380, %386, !dbg !40
  %393 = fsub float %381, %387, !dbg !40
  %394 = fsub float %382, %388, !dbg !40
  %395 = fmul float %389, %389, !dbg !41
  %396 = fmul float %390, %390, !dbg !41
  %397 = fmul float %391, %391, !dbg !41
  %398 = fmul float %392, %392, !dbg !41
  %399 = fmul float %393, %393, !dbg !41
  %400 = fmul float %394, %394, !dbg !41
  %401 = insertelement <2 x i32> poison, i32 %212, i64 0, !dbg !30
  %402 = insertelement <2 x i32> %401, i32 %213, i64 1, !dbg !30
  %403 = bitcast <2 x i32> %402 to <2 x float>, !dbg !30
  %404 = insertelement <2 x i32> poison, i32 %266, i64 0, !dbg !32
  %405 = insertelement <2 x i32> %404, i32 %267, i64 1, !dbg !32
  %406 = bitcast <2 x i32> %405 to <2 x float>, !dbg !32
  %407 = insertelement <2 x i32> poison, i32 %367, i64 0, !dbg !37
  %408 = insertelement <2 x i32> %407, i32 %368, i64 1, !dbg !37
  %409 = bitcast <2 x i32> %408 to <2 x float>, !dbg !37
  %410 = fadd <2 x float> %403, %406, !dbg !38
  %411 = fadd <2 x float> %406, %409, !dbg !39
  %412 = fsub <2 x float> %410, %411, !dbg !40
  %413 = fmul <2 x float> %412, %412, !dbg !41
  %414 = insertelement <2 x i32> poison, i32 %214, i64 0, !dbg !30
  %415 = insertelement <2 x i32> %414, i32 %215, i64 1, !dbg !30
  %416 = bitcast <2 x i32> %415 to <2 x float>, !dbg !30
  %417 = insertelement <2 x i32> poison, i32 %268, i64 0, !dbg !32
  %418 = insertelement <2 x i32> %417, i32 %269, i64 1, !dbg !32
  %419 = bitcast <2 x i32> %418 to <2 x float>, !dbg !32
  %420 = insertelement <2 x i32> poison, i32 %369, i64 0, !dbg !37
  %421 = insertelement <2 x i32> %420, i32 %370, i64 1, !dbg !37
  %422 = bitcast <2 x i32> %421 to <2 x float>, !dbg !37
  %423 = fadd <2 x float> %416, %419, !dbg !38
  %424 = fadd <2 x float> %419, %422, !dbg !39
  %425 = fsub <2 x float> %423, %424, !dbg !40
  %426 = fmul <2 x float> %425, %425, !dbg !41
  %427 = insertelement <2 x i32> poison, i32 %216, i64 0, !dbg !30
  %428 = insertelement <2 x i32> %427, i32 %217, i64 1, !dbg !30
  %429 = bitcast <2 x i32> %428 to <2 x float>, !dbg !30
  %430 = insertelement <2 x i32> poison, i32 %270, i64 0, !dbg !32
  %431 = insertelement <2 x i32> %430, i32 %271, i64 1, !dbg !32
  %432 = bitcast <2 x i32> %431 to <2 x float>, !dbg !32
  %433 = insertelement <2 x i32> poison, i32 %371, i64 0, !dbg !37
  %434 = insertelement <2 x i32> %433, i32 %372, i64 1, !dbg !37
  %435 = bitcast <2 x i32> %434 to <2 x float>, !dbg !37
  %436 = fadd <2 x float> %429, %432, !dbg !38
  %437 = fadd <2 x float> %432, %435, !dbg !39
  %438 = fsub <2 x float> %436, %437, !dbg !40
  %439 = fmul <2 x float> %438, %438, !dbg !41
  %440 = insertelement <2 x i32> poison, i32 %218, i64 0, !dbg !30
  %441 = insertelement <2 x i32> %440, i32 %219, i64 1, !dbg !30
  %442 = bitcast <2 x i32> %441 to <2 x float>, !dbg !30
  %443 = insertelement <2 x i32> poison, i32 %272, i64 0, !dbg !32
  %444 = insertelement <2 x i32> %443, i32 %273, i64 1, !dbg !32
  %445 = bitcast <2 x i32> %444 to <2 x float>, !dbg !32
  %446 = insertelement <2 x i32> poison, i32 %373, i64 0, !dbg !37
  %447 = insertelement <2 x i32> %446, i32 %374, i64 1, !dbg !37
  %448 = bitcast <2 x i32> %447 to <2 x float>, !dbg !37
  %449 = fadd <2 x float> %442, %445, !dbg !38
  %450 = fadd <2 x float> %445, %448, !dbg !39
  %451 = fsub <2 x float> %449, %450, !dbg !40
  %452 = fmul <2 x float> %451, %451, !dbg !41
  %453 = insertelement <2 x i32> poison, i32 %220, i64 0, !dbg !30
  %454 = insertelement <2 x i32> %453, i32 %221, i64 1, !dbg !30
  %455 = bitcast <2 x i32> %454 to <2 x float>, !dbg !30
  %456 = insertelement <2 x i32> poison, i32 %274, i64 0, !dbg !32
  %457 = insertelement <2 x i32> %456, i32 %275, i64 1, !dbg !32
  %458 = bitcast <2 x i32> %457 to <2 x float>, !dbg !32
  %459 = insertelement <2 x i32> poison, i32 %375, i64 0, !dbg !37
  %460 = insertelement <2 x i32> %459, i32 %376, i64 1, !dbg !37
  %461 = bitcast <2 x i32> %460 to <2 x float>, !dbg !37
  %462 = fadd <2 x float> %455, %458, !dbg !38
  %463 = fadd <2 x float> %458, %461, !dbg !39
  %464 = fsub <2 x float> %462, %463, !dbg !40
  %465 = fmul <2 x float> %464, %464, !dbg !41
  %466 = fadd float %395, %396, !dbg !42
  %467 = fadd float %466, %397, !dbg !42
  %468 = fadd float %467, %398, !dbg !42
  %469 = fadd float %468, %399, !dbg !42
  %470 = fadd float %469, %400, !dbg !42
  %471 = extractelement <2 x float> %413, i64 0, !dbg !42
  %472 = fadd float %470, %471, !dbg !42
  %473 = extractelement <2 x float> %413, i64 1, !dbg !42
  %474 = fadd float %472, %473, !dbg !42
  %475 = extractelement <2 x float> %426, i64 0, !dbg !42
  %476 = fadd float %474, %475, !dbg !42
  %477 = extractelement <2 x float> %426, i64 1, !dbg !42
  %478 = fadd float %476, %477, !dbg !42
  %479 = extractelement <2 x float> %439, i64 0, !dbg !42
  %480 = fadd float %478, %479, !dbg !42
  %481 = extractelement <2 x float> %439, i64 1, !dbg !42
  %482 = fadd float %480, %481, !dbg !42
  %483 = extractelement <2 x float> %452, i64 0, !dbg !42
  %484 = fadd float %482, %483, !dbg !42
  %485 = extractelement <2 x float> %452, i64 1, !dbg !42
  %486 = fadd float %484, %485, !dbg !42
  %487 = extractelement <2 x float> %465, i64 0, !dbg !42
  %488 = fadd float %486, %487, !dbg !42
  %489 = extractelement <2 x float> %465, i64 1, !dbg !42
  %490 = fadd float %488, %489, !dbg !42
  %491 = shl nuw nsw i32 %9, 3, !dbg !47
  %492 = or disjoint i32 %491, %13, !dbg !47
  %493 = getelementptr float, ptr addrspace(3) @global_smem, i32 %492, !dbg !47
  %494 = bitcast float %490 to i32, !dbg !47
  %495 = select i1 %11, i32 %494, i32 0, !dbg !42
  %496 = insertelement <1 x i32> poison, i32 %495, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %493, <1 x i32> %496, i1 true) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %497 = icmp slt i32 %8, 256, !dbg !47
  %498 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !47
  %499 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %498, i1 %497) #3, !dbg !47
  %500 = bitcast i32 %499 to float, !dbg !47
  %501 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %499, i32 4, i32 31), !dbg !47
  %502 = bitcast i32 %501 to float, !dbg !47
  %503 = fadd float %500, %502, !dbg !42
  %504 = bitcast float %503 to i32, !dbg !47
  %505 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %504, i32 2, i32 31), !dbg !47
  %506 = bitcast i32 %505 to float, !dbg !47
  %507 = fadd float %503, %506, !dbg !42
  %508 = bitcast float %507 to i32, !dbg !47
  %509 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %508, i32 1, i32 31), !dbg !47
  %510 = bitcast i32 %509 to float, !dbg !47
  %511 = fadd float %507, %510, !dbg !42
  %512 = and i32 %8, 7, !dbg !47
  %513 = icmp eq i32 %512, 0, !dbg !47
  %514 = and i1 %497, %513, !dbg !47
  %515 = bitcast float %511 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %498, <1 x i32> %515, i1 %514) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %516 = getelementptr float, ptr addrspace(3) @global_smem, i32 %491, !dbg !47
  %517 = load i32, ptr addrspace(3) %516, align 16, !dbg !47
  %518 = sext i32 %10 to i64, !dbg !48
  %519 = getelementptr float, ptr addrspace(1) %2, i64 %518, !dbg !48
  %520 = icmp eq i32 %13, 0, !dbg !49
  %521 = and i1 %520, %11, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %517, ptr addrspace(1) %519, i1 %521) #3, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccj2bfphtlqytgmy6peisyxga2w52nowpwdwmy3g3tkh2oy5pgme.py", directory: "inductor_cache/cj")
!4 = !{ptr @triton_per_fused_mean_pow_sub_23, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_pow_sub_23, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_pow_sub_23", linkageName: "triton_per_fused_mean_pow_sub_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 36, scope: !7)
!19 = !DILocation(line: 33, column: 65, scope: !7)
!20 = !DILocation(line: 33, column: 61, scope: !7)
!21 = !DILocation(line: 33, column: 75, scope: !7)
!22 = !DILocation(line: 33, column: 70, scope: !7)
!23 = !DILocation(line: 33, column: 82, scope: !7)
!24 = !DILocation(line: 33, column: 55, scope: !7)
!25 = !DILocation(line: 33, column: 48, scope: !7)
!26 = !DILocation(line: 33, column: 121, scope: !7)
!27 = !DILocation(line: 33, column: 127, scope: !7)
!28 = !DILocation(line: 33, column: 93, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 135, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 72, scope: !7)
!33 = !DILocation(line: 35, column: 38, scope: !7)
!34 = !DILocation(line: 35, column: 56, scope: !7)
!35 = !DILocation(line: 35, column: 101, scope: !7)
!36 = !DILocation(line: 35, column: 30, scope: !7)
!37 = !DILocation(line: 35, column: 143, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 38, column: 18, scope: !7)
!41 = !DILocation(line: 39, column: 18, scope: !7)
!42 = !DILocation(line: 256, column: 15, scope: !43, inlinedAt: !46)
!43 = distinct !DILexicalBlockFile(scope: !45, file: !44, discriminator: 0)
!44 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!45 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!46 = !DILocation(line: 42, column: 25, scope: !7)
!47 = !DILocation(line: 267, column: 36, scope: !45, inlinedAt: !46)
!48 = !DILocation(line: 43, column: 25, scope: !7)
!49 = !DILocation(line: 43, column: 37, scope: !7)
!50 = !DILocation(line: 43, column: 4, scope: !7)
