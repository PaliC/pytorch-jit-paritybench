; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 2, !dbg !13
  %17 = or disjoint i32 %15, 512, !dbg !13
  %.frozen45 = freeze i32 %15, !dbg !14
  %18 = sdiv i32 %.frozen45, 1024, !dbg !14
  %.frozen43 = freeze i32 %17, !dbg !14
  %19 = sdiv i32 %.frozen43, 1024, !dbg !14
  %20 = srem i32 %18, 384, !dbg !15
  %21 = srem i32 %19, 384, !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %22 = sdiv i32 %.frozen, 32, !dbg !16
  %23 = sdiv i32 %17, 32, !dbg !16
  %24 = srem i32 %22, 32, !dbg !17
  %25 = srem i32 %23, 32, !dbg !17
  %26 = mul i32 %22, 32, !dbg !18
  %.decomposed = sub i32 %.frozen, %26, !dbg !18
  %27 = srem i32 %16, 32, !dbg !18
  %28 = sdiv i32 %15, 393216, !dbg !19
  %29 = sdiv i32 %17, 393216, !dbg !19
  %30 = icmp slt i32 %20, 256, !dbg !20
  %31 = icmp slt i32 %21, 256, !dbg !20
  %32 = sext i32 %24 to i64, !dbg !21
  %33 = getelementptr i64, ptr addrspace(1) %0, i64 %32, !dbg !21
  %34 = sext i32 %25 to i64, !dbg !21
  %35 = getelementptr i64, ptr addrspace(1) %0, i64 %34, !dbg !21
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %33, i1 %30, i1 %30) #3, !dbg !22
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %33, i1 %30, i1 %30) #3, !dbg !22
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %33, i1 %30, i1 %30) #3, !dbg !22
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %33, i1 %30, i1 %30) #3, !dbg !22
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %35, i1 %31, i1 %31) #3, !dbg !22
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %35, i1 %31, i1 %31) #3, !dbg !22
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %35, i1 %31, i1 %31) #3, !dbg !22
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %35, i1 %31, i1 %31) #3, !dbg !22
  %44 = lshr i64 %36, 59, !dbg !23
  %45 = and i64 %44, 16, !dbg !23
  %46 = add i64 %45, %36, !dbg !23
  %47 = lshr i64 %40, 59, !dbg !23
  %48 = and i64 %47, 16, !dbg !23
  %49 = add i64 %48, %40, !dbg !23
  %50 = sext i32 %.decomposed to i64, !dbg !24
  %51 = getelementptr i64, ptr addrspace(1) %0, i64 %50, !dbg !24
  %52 = sext i32 %27 to i64, !dbg !24
  %53 = getelementptr i64, ptr addrspace(1) %0, i64 %52, !dbg !24
  %54 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %51, i1 %30, i1 %30, i1 %30) #3, !dbg !25
  %55 = extractvalue { i64, i64 } %54, 0, !dbg !25
  %56 = extractvalue { i64, i64 } %54, 1, !dbg !25
  %57 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %53, i1 %30, i1 %30, i1 %30) #3, !dbg !25
  %58 = extractvalue { i64, i64 } %57, 0, !dbg !25
  %59 = extractvalue { i64, i64 } %57, 1, !dbg !25
  %60 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %51, i1 %31, i1 %31, i1 %31) #3, !dbg !25
  %61 = extractvalue { i64, i64 } %60, 0, !dbg !25
  %62 = extractvalue { i64, i64 } %60, 1, !dbg !25
  %63 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %53, i1 %31, i1 %31, i1 %31) #3, !dbg !25
  %64 = extractvalue { i64, i64 } %63, 0, !dbg !25
  %65 = extractvalue { i64, i64 } %63, 1, !dbg !25
  %66 = lshr i64 %55, 59, !dbg !26
  %67 = and i64 %66, 16, !dbg !26
  %68 = lshr i64 %56, 59, !dbg !26
  %69 = and i64 %68, 16, !dbg !26
  %70 = lshr i64 %58, 59, !dbg !26
  %71 = and i64 %70, 16, !dbg !26
  %72 = lshr i64 %59, 59, !dbg !26
  %73 = and i64 %72, 16, !dbg !26
  %74 = lshr i64 %61, 59, !dbg !26
  %75 = and i64 %74, 16, !dbg !26
  %76 = lshr i64 %62, 59, !dbg !26
  %77 = and i64 %76, 16, !dbg !26
  %78 = lshr i64 %64, 59, !dbg !26
  %79 = and i64 %78, 16, !dbg !26
  %80 = lshr i64 %65, 59, !dbg !26
  %81 = and i64 %80, 16, !dbg !26
  %82 = shl i64 %46, 4, !dbg !27
  %83 = shl i64 %49, 4, !dbg !27
  %84 = shl nsw i32 %20, 8, !dbg !28
  %85 = shl nsw i32 %21, 8, !dbg !28
  %86 = sext i32 %84 to i64, !dbg !29
  %87 = sext i32 %85 to i64, !dbg !29
  %88 = shl nsw i32 %28, 16, !dbg !30
  %89 = shl nsw i32 %29, 16, !dbg !30
  %90 = sext i32 %88 to i64, !dbg !31
  %91 = sext i32 %89 to i64, !dbg !31
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !32
  %93 = getelementptr float, ptr addrspace(1) %92, i64 %67, !dbg !32
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %82, !dbg !32
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %86, !dbg !32
  %96 = getelementptr float, ptr addrspace(1) %95, i64 %90, !dbg !32
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !32
  %98 = getelementptr float, ptr addrspace(1) %97, i64 %69, !dbg !32
  %99 = getelementptr float, ptr addrspace(1) %98, i64 %82, !dbg !32
  %100 = getelementptr float, ptr addrspace(1) %99, i64 %86, !dbg !32
  %101 = getelementptr float, ptr addrspace(1) %100, i64 %90, !dbg !32
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !32
  %103 = getelementptr float, ptr addrspace(1) %102, i64 %71, !dbg !32
  %104 = getelementptr float, ptr addrspace(1) %103, i64 %82, !dbg !32
  %105 = getelementptr float, ptr addrspace(1) %104, i64 %86, !dbg !32
  %106 = getelementptr float, ptr addrspace(1) %105, i64 %90, !dbg !32
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !32
  %108 = getelementptr float, ptr addrspace(1) %107, i64 %73, !dbg !32
  %109 = getelementptr float, ptr addrspace(1) %108, i64 %82, !dbg !32
  %110 = getelementptr float, ptr addrspace(1) %109, i64 %86, !dbg !32
  %111 = getelementptr float, ptr addrspace(1) %110, i64 %90, !dbg !32
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !32
  %113 = getelementptr float, ptr addrspace(1) %112, i64 %75, !dbg !32
  %114 = getelementptr float, ptr addrspace(1) %113, i64 %83, !dbg !32
  %115 = getelementptr float, ptr addrspace(1) %114, i64 %87, !dbg !32
  %116 = getelementptr float, ptr addrspace(1) %115, i64 %91, !dbg !32
  %117 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !32
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %77, !dbg !32
  %119 = getelementptr float, ptr addrspace(1) %118, i64 %83, !dbg !32
  %120 = getelementptr float, ptr addrspace(1) %119, i64 %87, !dbg !32
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %91, !dbg !32
  %122 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !32
  %123 = getelementptr float, ptr addrspace(1) %122, i64 %79, !dbg !32
  %124 = getelementptr float, ptr addrspace(1) %123, i64 %83, !dbg !32
  %125 = getelementptr float, ptr addrspace(1) %124, i64 %87, !dbg !32
  %126 = getelementptr float, ptr addrspace(1) %125, i64 %91, !dbg !32
  %127 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !32
  %128 = getelementptr float, ptr addrspace(1) %127, i64 %81, !dbg !32
  %129 = getelementptr float, ptr addrspace(1) %128, i64 %83, !dbg !32
  %130 = getelementptr float, ptr addrspace(1) %129, i64 %87, !dbg !32
  %131 = getelementptr float, ptr addrspace(1) %130, i64 %91, !dbg !32
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %30, i32 0, i1 %30) #3, !dbg !33
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %30, i32 0, i1 %30) #3, !dbg !33
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %30, i32 0, i1 %30) #3, !dbg !33
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %30, i32 0, i1 %30) #3, !dbg !33
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %31, i32 0, i1 %31) #3, !dbg !33
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %31, i32 0, i1 %31) #3, !dbg !33
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %31, i32 0, i1 %31) #3, !dbg !33
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %31, i32 0, i1 %31) #3, !dbg !33
  %140 = sext i32 %20 to i64, !dbg !34
  %141 = getelementptr float, ptr addrspace(1) %2, i64 %140, !dbg !34
  %142 = sext i32 %21 to i64, !dbg !34
  %143 = getelementptr float, ptr addrspace(1) %2, i64 %142, !dbg !34
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %30, i32 0, i1 %30) #3, !dbg !35
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %30, i32 0, i1 %30) #3, !dbg !35
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %30, i32 0, i1 %30) #3, !dbg !35
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %30, i32 0, i1 %30) #3, !dbg !35
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %31, i32 0, i1 %31) #3, !dbg !35
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %31, i32 0, i1 %31) #3, !dbg !35
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %31, i32 0, i1 %31) #3, !dbg !35
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %31, i32 0, i1 %31) #3, !dbg !35
  %152 = getelementptr float, ptr addrspace(1) %3, i64 %140, !dbg !36
  %153 = getelementptr float, ptr addrspace(1) %3, i64 %142, !dbg !36
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %152, i1 %30, i32 0, i1 %30) #3, !dbg !37
  %155 = bitcast i32 %154 to float, !dbg !37
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %152, i1 %30, i32 0, i1 %30) #3, !dbg !37
  %157 = bitcast i32 %156 to float, !dbg !37
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %152, i1 %30, i32 0, i1 %30) #3, !dbg !37
  %159 = bitcast i32 %158 to float, !dbg !37
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %152, i1 %30, i32 0, i1 %30) #3, !dbg !37
  %161 = bitcast i32 %160 to float, !dbg !37
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %31, i32 0, i1 %31) #3, !dbg !37
  %163 = bitcast i32 %162 to float, !dbg !37
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %31, i32 0, i1 %31) #3, !dbg !37
  %165 = bitcast i32 %164 to float, !dbg !37
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %31, i32 0, i1 %31) #3, !dbg !37
  %167 = bitcast i32 %166 to float, !dbg !37
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %31, i32 0, i1 %31) #3, !dbg !37
  %169 = bitcast i32 %168 to float, !dbg !37
  %170 = fadd float %155, 0x3EE4F8B580000000, !dbg !38
  %171 = fadd float %157, 0x3EE4F8B580000000, !dbg !38
  %172 = fadd float %159, 0x3EE4F8B580000000, !dbg !38
  %173 = fadd float %161, 0x3EE4F8B580000000, !dbg !38
  %174 = fadd float %163, 0x3EE4F8B580000000, !dbg !38
  %175 = fadd float %165, 0x3EE4F8B580000000, !dbg !38
  %176 = fadd float %167, 0x3EE4F8B580000000, !dbg !38
  %177 = fadd float %169, 0x3EE4F8B580000000, !dbg !38
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i = icmp eq i32 %178, 0, !dbg !39
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i = icmp eq i32 %179, 0, !dbg !39
  br i1 %.not.i, label %185, label %180, !dbg !39

180:                                              ; preds = %9
  br i1 %.not1.i, label %183, label %181, !dbg !39

181:                                              ; preds = %180
  %182 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %170) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

183:                                              ; preds = %180
  %184 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %170) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

185:                                              ; preds = %9
  br i1 %.not1.i, label %188, label %186, !dbg !39

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.f(float %170) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.f(float %170) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %181, %183, %186, %188
  %.0.i = phi float [ %182, %181 ], [ %184, %183 ], [ %187, %186 ], [ %189, %188 ], !dbg !39
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i1 = icmp eq i32 %190, 0, !dbg !39
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i4 = icmp eq i32 %191, 0, !dbg !39
  br i1 %.not.i1, label %197, label %192, !dbg !39

192:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %195, label %193, !dbg !39

193:                                              ; preds = %192
  %194 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %171) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

195:                                              ; preds = %192
  %196 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %171) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

197:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %200, label %198, !dbg !39

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.f(float %171) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.f(float %171) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

__nv_sqrtf.exit5:                                 ; preds = %193, %195, %198, %200
  %.0.i3 = phi float [ %194, %193 ], [ %196, %195 ], [ %199, %198 ], [ %201, %200 ], !dbg !39
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i6 = icmp eq i32 %202, 0, !dbg !39
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i9 = icmp eq i32 %203, 0, !dbg !39
  br i1 %.not.i6, label %209, label %204, !dbg !39

204:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %207, label %205, !dbg !39

205:                                              ; preds = %204
  %206 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %172) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

207:                                              ; preds = %204
  %208 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %172) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

209:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %212, label %210, !dbg !39

210:                                              ; preds = %209
  %211 = tail call float @llvm.nvvm.sqrt.rn.f(float %172) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

212:                                              ; preds = %209
  %213 = tail call float @llvm.nvvm.sqrt.approx.f(float %172) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

__nv_sqrtf.exit10:                                ; preds = %205, %207, %210, %212
  %.0.i8 = phi float [ %206, %205 ], [ %208, %207 ], [ %211, %210 ], [ %213, %212 ], !dbg !39
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i11 = icmp eq i32 %214, 0, !dbg !39
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i14 = icmp eq i32 %215, 0, !dbg !39
  br i1 %.not.i11, label %221, label %216, !dbg !39

216:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %219, label %217, !dbg !39

217:                                              ; preds = %216
  %218 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %173) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

219:                                              ; preds = %216
  %220 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %173) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

221:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %224, label %222, !dbg !39

222:                                              ; preds = %221
  %223 = tail call float @llvm.nvvm.sqrt.rn.f(float %173) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

224:                                              ; preds = %221
  %225 = tail call float @llvm.nvvm.sqrt.approx.f(float %173) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

__nv_sqrtf.exit15:                                ; preds = %217, %219, %222, %224
  %.0.i13 = phi float [ %218, %217 ], [ %220, %219 ], [ %223, %222 ], [ %225, %224 ], !dbg !39
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i16 = icmp eq i32 %226, 0, !dbg !39
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i19 = icmp eq i32 %227, 0, !dbg !39
  br i1 %.not.i16, label %233, label %228, !dbg !39

228:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %231, label %229, !dbg !39

229:                                              ; preds = %228
  %230 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %174) #3, !dbg !39
  br label %__nv_sqrtf.exit20, !dbg !39

231:                                              ; preds = %228
  %232 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %174) #3, !dbg !39
  br label %__nv_sqrtf.exit20, !dbg !39

233:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %236, label %234, !dbg !39

234:                                              ; preds = %233
  %235 = tail call float @llvm.nvvm.sqrt.rn.f(float %174) #3, !dbg !39
  br label %__nv_sqrtf.exit20, !dbg !39

236:                                              ; preds = %233
  %237 = tail call float @llvm.nvvm.sqrt.approx.f(float %174) #3, !dbg !39
  br label %__nv_sqrtf.exit20, !dbg !39

__nv_sqrtf.exit20:                                ; preds = %229, %231, %234, %236
  %.0.i18 = phi float [ %230, %229 ], [ %232, %231 ], [ %235, %234 ], [ %237, %236 ], !dbg !39
  %238 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i21 = icmp eq i32 %238, 0, !dbg !39
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i24 = icmp eq i32 %239, 0, !dbg !39
  br i1 %.not.i21, label %245, label %240, !dbg !39

240:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %243, label %241, !dbg !39

241:                                              ; preds = %240
  %242 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %175) #3, !dbg !39
  br label %__nv_sqrtf.exit25, !dbg !39

243:                                              ; preds = %240
  %244 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %175) #3, !dbg !39
  br label %__nv_sqrtf.exit25, !dbg !39

245:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %248, label %246, !dbg !39

246:                                              ; preds = %245
  %247 = tail call float @llvm.nvvm.sqrt.rn.f(float %175) #3, !dbg !39
  br label %__nv_sqrtf.exit25, !dbg !39

248:                                              ; preds = %245
  %249 = tail call float @llvm.nvvm.sqrt.approx.f(float %175) #3, !dbg !39
  br label %__nv_sqrtf.exit25, !dbg !39

__nv_sqrtf.exit25:                                ; preds = %241, %243, %246, %248
  %.0.i23 = phi float [ %242, %241 ], [ %244, %243 ], [ %247, %246 ], [ %249, %248 ], !dbg !39
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i26 = icmp eq i32 %250, 0, !dbg !39
  %251 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i29 = icmp eq i32 %251, 0, !dbg !39
  br i1 %.not.i26, label %257, label %252, !dbg !39

252:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %255, label %253, !dbg !39

253:                                              ; preds = %252
  %254 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %176) #3, !dbg !39
  br label %__nv_sqrtf.exit30, !dbg !39

255:                                              ; preds = %252
  %256 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %176) #3, !dbg !39
  br label %__nv_sqrtf.exit30, !dbg !39

257:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %260, label %258, !dbg !39

258:                                              ; preds = %257
  %259 = tail call float @llvm.nvvm.sqrt.rn.f(float %176) #3, !dbg !39
  br label %__nv_sqrtf.exit30, !dbg !39

260:                                              ; preds = %257
  %261 = tail call float @llvm.nvvm.sqrt.approx.f(float %176) #3, !dbg !39
  br label %__nv_sqrtf.exit30, !dbg !39

__nv_sqrtf.exit30:                                ; preds = %253, %255, %258, %260
  %.0.i28 = phi float [ %254, %253 ], [ %256, %255 ], [ %259, %258 ], [ %261, %260 ], !dbg !39
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i31 = icmp eq i32 %262, 0, !dbg !39
  %263 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i34 = icmp eq i32 %263, 0, !dbg !39
  br i1 %.not.i31, label %269, label %264, !dbg !39

264:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %267, label %265, !dbg !39

265:                                              ; preds = %264
  %266 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %177) #3, !dbg !39
  br label %__nv_sqrtf.exit35, !dbg !39

267:                                              ; preds = %264
  %268 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %177) #3, !dbg !39
  br label %__nv_sqrtf.exit35, !dbg !39

269:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %272, label %270, !dbg !39

270:                                              ; preds = %269
  %271 = tail call float @llvm.nvvm.sqrt.rn.f(float %177) #3, !dbg !39
  br label %__nv_sqrtf.exit35, !dbg !39

272:                                              ; preds = %269
  %273 = tail call float @llvm.nvvm.sqrt.approx.f(float %177) #3, !dbg !39
  br label %__nv_sqrtf.exit35, !dbg !39

__nv_sqrtf.exit35:                                ; preds = %265, %267, %270, %272
  %.0.i33 = phi float [ %266, %265 ], [ %268, %267 ], [ %271, %270 ], [ %273, %272 ], !dbg !39
  %274 = insertelement <8 x i32> poison, i32 %139, i64 0, !dbg !33
  %275 = insertelement <8 x i32> %274, i32 %138, i64 1, !dbg !33
  %276 = insertelement <8 x i32> %275, i32 %137, i64 2, !dbg !33
  %277 = insertelement <8 x i32> %276, i32 %136, i64 3, !dbg !33
  %278 = insertelement <8 x i32> %277, i32 %135, i64 4, !dbg !33
  %279 = insertelement <8 x i32> %278, i32 %134, i64 5, !dbg !33
  %280 = insertelement <8 x i32> %279, i32 %133, i64 6, !dbg !33
  %281 = insertelement <8 x i32> %280, i32 %132, i64 7, !dbg !33
  %282 = bitcast <8 x i32> %281 to <8 x float>, !dbg !33
  %283 = insertelement <8 x i32> poison, i32 %151, i64 0, !dbg !35
  %284 = insertelement <8 x i32> %283, i32 %150, i64 1, !dbg !35
  %285 = insertelement <8 x i32> %284, i32 %149, i64 2, !dbg !35
  %286 = insertelement <8 x i32> %285, i32 %148, i64 3, !dbg !35
  %287 = insertelement <8 x i32> %286, i32 %147, i64 4, !dbg !35
  %288 = insertelement <8 x i32> %287, i32 %146, i64 5, !dbg !35
  %289 = insertelement <8 x i32> %288, i32 %145, i64 6, !dbg !35
  %290 = insertelement <8 x i32> %289, i32 %144, i64 7, !dbg !35
  %291 = bitcast <8 x i32> %290 to <8 x float>, !dbg !35
  %292 = mul i32 %19, 1024, !dbg !40
  %.decomposed44 = sub i32 %.frozen43, %292, !dbg !40
  %293 = mul i32 %18, 1024, !dbg !40
  %.decomposed46 = sub i32 %.frozen45, %293, !dbg !40
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !41
  %295 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !41
  %296 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !41
  %297 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !41
  %298 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !41
  %299 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !41
  %300 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !41
  %301 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !41
  %302 = getelementptr float, ptr addrspace(1) %4, i64 %140, !dbg !42
  %303 = getelementptr float, ptr addrspace(1) %4, i64 %142, !dbg !42
  %304 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %302, i1 %30, i32 0, i1 %30) #3, !dbg !43
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %302, i1 %30, i32 0, i1 %30) #3, !dbg !43
  %306 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %302, i1 %30, i32 0, i1 %30) #3, !dbg !43
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %302, i1 %30, i32 0, i1 %30) #3, !dbg !43
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %303, i1 %31, i32 0, i1 %31) #3, !dbg !43
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %303, i1 %31, i32 0, i1 %31) #3, !dbg !43
  %310 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %303, i1 %31, i32 0, i1 %31) #3, !dbg !43
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %303, i1 %31, i32 0, i1 %31) #3, !dbg !43
  %312 = getelementptr float, ptr addrspace(1) %5, i64 %140, !dbg !44
  %313 = getelementptr float, ptr addrspace(1) %5, i64 %142, !dbg !44
  %314 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %312, i1 %30, i32 0, i1 %30) #3, !dbg !45
  %315 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %312, i1 %30, i32 0, i1 %30) #3, !dbg !45
  %316 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %312, i1 %30, i32 0, i1 %30) #3, !dbg !45
  %317 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %312, i1 %30, i32 0, i1 %30) #3, !dbg !45
  %318 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %313, i1 %31, i32 0, i1 %31) #3, !dbg !45
  %319 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %313, i1 %31, i32 0, i1 %31) #3, !dbg !45
  %320 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %313, i1 %31, i32 0, i1 %31) #3, !dbg !45
  %321 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %313, i1 %31, i32 0, i1 %31) #3, !dbg !45
  %322 = fsub <8 x float> %282, %291, !dbg !46
  %323 = insertelement <8 x float> poison, float %301, i64 0, !dbg !47
  %324 = insertelement <8 x float> %323, float %300, i64 1, !dbg !47
  %325 = insertelement <8 x float> %324, float %299, i64 2, !dbg !47
  %326 = insertelement <8 x float> %325, float %298, i64 3, !dbg !47
  %327 = insertelement <8 x float> %326, float %297, i64 4, !dbg !47
  %328 = insertelement <8 x float> %327, float %296, i64 5, !dbg !47
  %329 = insertelement <8 x float> %328, float %295, i64 6, !dbg !47
  %330 = insertelement <8 x float> %329, float %294, i64 7, !dbg !47
  %331 = fmul <8 x float> %322, %330, !dbg !47
  %332 = insertelement <8 x i32> poison, i32 %311, i64 0, !dbg !43
  %333 = insertelement <8 x i32> %332, i32 %310, i64 1, !dbg !43
  %334 = insertelement <8 x i32> %333, i32 %309, i64 2, !dbg !43
  %335 = insertelement <8 x i32> %334, i32 %308, i64 3, !dbg !43
  %336 = insertelement <8 x i32> %335, i32 %307, i64 4, !dbg !43
  %337 = insertelement <8 x i32> %336, i32 %306, i64 5, !dbg !43
  %338 = insertelement <8 x i32> %337, i32 %305, i64 6, !dbg !43
  %339 = insertelement <8 x i32> %338, i32 %304, i64 7, !dbg !43
  %340 = bitcast <8 x i32> %339 to <8 x float>, !dbg !43
  %341 = fmul <8 x float> %331, %340, !dbg !48
  %342 = insertelement <8 x i32> poison, i32 %321, i64 0, !dbg !45
  %343 = insertelement <8 x i32> %342, i32 %320, i64 1, !dbg !45
  %344 = insertelement <8 x i32> %343, i32 %319, i64 2, !dbg !45
  %345 = insertelement <8 x i32> %344, i32 %318, i64 3, !dbg !45
  %346 = insertelement <8 x i32> %345, i32 %317, i64 4, !dbg !45
  %347 = insertelement <8 x i32> %346, i32 %316, i64 5, !dbg !45
  %348 = insertelement <8 x i32> %347, i32 %315, i64 6, !dbg !45
  %349 = insertelement <8 x i32> %348, i32 %314, i64 7, !dbg !45
  %350 = bitcast <8 x i32> %349 to <8 x float>, !dbg !45
  %351 = fadd <8 x float> %341, %350, !dbg !49
  %352 = fcmp olt <8 x float> %351, zeroinitializer, !dbg !50
  %353 = extractelement <8 x i1> %352, i64 7, !dbg !54
  %354 = extractelement <8 x i1> %352, i64 6, !dbg !54
  %355 = extractelement <8 x i1> %352, i64 5, !dbg !54
  %356 = extractelement <8 x i1> %352, i64 4, !dbg !54
  %357 = extractelement <8 x i1> %352, i64 3, !dbg !54
  %358 = extractelement <8 x i1> %352, i64 2, !dbg !54
  %359 = extractelement <8 x i1> %352, i64 1, !dbg !54
  %360 = extractelement <8 x i1> %352, i64 0, !dbg !54
  %361 = icmp sgt i32 %20, 255, !dbg !55
  %362 = icmp sgt i32 %21, 255, !dbg !55
  %363 = shl nsw i32 %20, 10, !dbg !56
  %364 = shl nsw i32 %21, 10, !dbg !56
  %365 = shl nsw i32 %28, 17, !dbg !57
  %366 = shl nsw i32 %29, 17, !dbg !57
  %367 = add nsw i32 %.decomposed46, -262144, !dbg !56
  %368 = add nsw i32 %367, %365, !dbg !58
  %369 = add nsw i32 %368, %363, !dbg !59
  %370 = add nsw i32 %.decomposed44, -262144, !dbg !56
  %371 = add nsw i32 %370, %366, !dbg !58
  %372 = add nsw i32 %371, %364, !dbg !59
  %373 = sext i32 %369 to i64, !dbg !60
  %374 = getelementptr float, ptr addrspace(1) %6, i64 %373, !dbg !60
  %375 = sext i32 %372 to i64, !dbg !60
  %376 = getelementptr float, ptr addrspace(1) %6, i64 %375, !dbg !60
  %377 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %374, i1 %361, i32 0, i1 %361, i32 0, i1 %361, i32 0, i1 %361, i32 0, i1 %361) #3, !dbg !61
  %378 = extractvalue { i32, i32, i32, i32 } %377, 0, !dbg !61
  %379 = extractvalue { i32, i32, i32, i32 } %377, 1, !dbg !61
  %380 = extractvalue { i32, i32, i32, i32 } %377, 2, !dbg !61
  %381 = extractvalue { i32, i32, i32, i32 } %377, 3, !dbg !61
  %382 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %376, i1 %362, i32 0, i1 %362, i32 0, i1 %362, i32 0, i1 %362, i32 0, i1 %362) #3, !dbg !61
  %383 = extractvalue { i32, i32, i32, i32 } %382, 0, !dbg !61
  %384 = extractvalue { i32, i32, i32, i32 } %382, 1, !dbg !61
  %385 = extractvalue { i32, i32, i32, i32 } %382, 2, !dbg !61
  %386 = extractvalue { i32, i32, i32, i32 } %382, 3, !dbg !61
  %387 = sext i32 %15 to i64, !dbg !62
  %388 = getelementptr float, ptr addrspace(1) %7, i64 %387, !dbg !62
  %389 = sext i32 %17 to i64, !dbg !62
  %390 = getelementptr float, ptr addrspace(1) %7, i64 %389, !dbg !62
  %bc = bitcast <8 x float> %351 to <8 x i32>, !dbg !63
  %391 = extractelement <8 x i32> %bc, i64 7, !dbg !63
  %392 = select i1 %353, i32 0, i32 %391, !dbg !54
  %393 = select i1 %30, i32 %392, i32 %378, !dbg !64
  %bc36 = bitcast <8 x float> %351 to <8 x i32>, !dbg !63
  %394 = extractelement <8 x i32> %bc36, i64 6, !dbg !63
  %395 = select i1 %354, i32 0, i32 %394, !dbg !54
  %396 = select i1 %30, i32 %395, i32 %379, !dbg !64
  %bc37 = bitcast <8 x float> %351 to <8 x i32>, !dbg !63
  %397 = extractelement <8 x i32> %bc37, i64 5, !dbg !63
  %398 = select i1 %355, i32 0, i32 %397, !dbg !54
  %399 = select i1 %30, i32 %398, i32 %380, !dbg !64
  %bc38 = bitcast <8 x float> %351 to <8 x i32>, !dbg !63
  %400 = extractelement <8 x i32> %bc38, i64 4, !dbg !63
  %401 = select i1 %356, i32 0, i32 %400, !dbg !54
  %402 = select i1 %30, i32 %401, i32 %381, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %393, i32 %396, i32 %399, i32 %402, ptr addrspace(1) %388, i1 true) #3, !dbg !63
  %bc39 = bitcast <8 x float> %351 to <8 x i32>, !dbg !63
  %403 = extractelement <8 x i32> %bc39, i64 3, !dbg !63
  %404 = select i1 %357, i32 0, i32 %403, !dbg !54
  %405 = select i1 %31, i32 %404, i32 %383, !dbg !64
  %bc40 = bitcast <8 x float> %351 to <8 x i32>, !dbg !63
  %406 = extractelement <8 x i32> %bc40, i64 2, !dbg !63
  %407 = select i1 %358, i32 0, i32 %406, !dbg !54
  %408 = select i1 %31, i32 %407, i32 %384, !dbg !64
  %bc41 = bitcast <8 x float> %351 to <8 x i32>, !dbg !63
  %409 = extractelement <8 x i32> %bc41, i64 1, !dbg !63
  %410 = select i1 %359, i32 0, i32 %409, !dbg !54
  %411 = select i1 %31, i32 %410, i32 %385, !dbg !64
  %bc42 = bitcast <8 x float> %351 to <8 x i32>, !dbg !63
  %412 = extractelement <8 x i32> %bc42, i64 0, !dbg !63
  %413 = select i1 %360, i32 0, i32 %412, !dbg !54
  %414 = select i1 %31, i32 %413, i32 %386, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %405, i32 %408, i32 %411, i32 %414, ptr addrspace(1) %390, i1 true) #3, !dbg !63
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coresosuck3wu6eotquxuuktoctqqjbbpo54jtiz4pigj42jtos6.py", directory: "inductor_cache/or")
!4 = !{ptr @triton_poi_fused_cat_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_10", linkageName: "triton_poi_fused_cat_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 27, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 30, scope: !7)
!22 = !DILocation(line: 35, column: 35, scope: !7)
!23 = !DILocation(line: 39, column: 32, scope: !7)
!24 = !DILocation(line: 40, column: 31, scope: !7)
!25 = !DILocation(line: 40, column: 36, scope: !7)
!26 = !DILocation(line: 43, column: 35, scope: !7)
!27 = !DILocation(line: 44, column: 42, scope: !7)
!28 = !DILocation(line: 44, column: 54, scope: !7)
!29 = !DILocation(line: 44, column: 49, scope: !7)
!30 = !DILocation(line: 44, column: 66, scope: !7)
!31 = !DILocation(line: 44, column: 60, scope: !7)
!32 = !DILocation(line: 44, column: 31, scope: !7)
!33 = !DILocation(line: 44, column: 71, scope: !7)
!34 = !DILocation(line: 45, column: 31, scope: !7)
!35 = !DILocation(line: 45, column: 36, scope: !7)
!36 = !DILocation(line: 47, column: 31, scope: !7)
!37 = !DILocation(line: 47, column: 36, scope: !7)
!38 = !DILocation(line: 49, column: 20, scope: !7)
!39 = !DILocation(line: 50, column: 27, scope: !7)
!40 = !DILocation(line: 28, column: 19, scope: !7)
!41 = !DILocation(line: 52, column: 20, scope: !7)
!42 = !DILocation(line: 56, column: 31, scope: !7)
!43 = !DILocation(line: 56, column: 36, scope: !7)
!44 = !DILocation(line: 58, column: 31, scope: !7)
!45 = !DILocation(line: 58, column: 36, scope: !7)
!46 = !DILocation(line: 46, column: 20, scope: !7)
!47 = !DILocation(line: 55, column: 20, scope: !7)
!48 = !DILocation(line: 57, column: 20, scope: !7)
!49 = !DILocation(line: 59, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 61, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 64, column: 20, scope: !7)
!56 = !DILocation(line: 67, column: 42, scope: !7)
!57 = !DILocation(line: 67, column: 64, scope: !7)
!58 = !DILocation(line: 67, column: 36, scope: !7)
!59 = !DILocation(line: 67, column: 57, scope: !7)
!60 = !DILocation(line: 67, column: 31, scope: !7)
!61 = !DILocation(line: 67, column: 69, scope: !7)
!62 = !DILocation(line: 69, column: 25, scope: !7)
!63 = !DILocation(line: 69, column: 37, scope: !7)
!64 = !DILocation(line: 0, scope: !7)
!65 = !DILocation(line: 69, column: 4, scope: !7)
