; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_mul_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 62, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 64, !dbg !14
  %13 = srem i32 %11, 4, !dbg !15
  %14 = sdiv i32 %11, 16, !dbg !16
  %15 = sext i32 %11 to i64, !dbg !17
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !17
  %17 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %16, i1 %12) #1, !dbg !18
  %18 = extractvalue { i32, i32 } %17, 0, !dbg !18
  %19 = extractvalue { i32, i32 } %17, 1, !dbg !18
  %20 = bitcast i32 %18 to float, !dbg !18
  %21 = bitcast i32 %19 to float, !dbg !18
  %22 = shl nsw i32 %14, 4, !dbg !19
  %23 = add i32 %22, %13, !dbg !20
  %24 = sext i32 %23 to i64, !dbg !21
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !21
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 %12) #1, !dbg !22
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !22
  %28 = extractvalue { i32, i32 } %26, 1, !dbg !22
  %29 = bitcast i32 %27 to float, !dbg !22
  %30 = bitcast i32 %28 to float, !dbg !22
  %31 = add i32 %23, 4, !dbg !23
  %32 = sext i32 %31 to i64, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !24
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %12) #1, !dbg !25
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !25
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !25
  %37 = bitcast i32 %35 to float, !dbg !25
  %38 = bitcast i32 %36 to float, !dbg !25
  %39 = add i32 %23, 8, !dbg !26
  %40 = sext i32 %39 to i64, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !27
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %12) #1, !dbg !28
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !28
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !28
  %45 = bitcast i32 %43 to float, !dbg !28
  %46 = bitcast i32 %44 to float, !dbg !28
  %47 = add i32 %23, 12, !dbg !29
  %48 = sext i32 %47 to i64, !dbg !30
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !30
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 %12) #1, !dbg !31
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !31
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !31
  %53 = bitcast i32 %51 to float, !dbg !31
  %54 = bitcast i32 %52 to float, !dbg !31
  %55 = fmul float %20, %29, !dbg !32
  %56 = fmul float %21, %30, !dbg !32
  %57 = fmul float %20, %37, !dbg !33
  %58 = fmul float %21, %38, !dbg !33
  %59 = fcmp ogt float %55, %57, !dbg !34
  %60 = fcmp ogt float %56, %58, !dbg !34
  %61 = fcmp uno float %55, 0.000000e+00, !dbg !38
  %62 = fcmp uno float %56, 0.000000e+00, !dbg !38
  %63 = or i1 %61, %59, !dbg !39
  %64 = or i1 %62, %60, !dbg !39
  %65 = select i1 %63, float %55, float %57, !dbg !40
  %66 = select i1 %64, float %56, float %58, !dbg !40
  %67 = fmul float %20, %45, !dbg !41
  %68 = fmul float %21, %46, !dbg !41
  %69 = fcmp ogt float %65, %67, !dbg !42
  %70 = fcmp ogt float %66, %68, !dbg !42
  %71 = fcmp uno float %65, 0.000000e+00, !dbg !44
  %72 = fcmp uno float %66, 0.000000e+00, !dbg !44
  %73 = or i1 %69, %71, !dbg !45
  %74 = or i1 %70, %72, !dbg !45
  %75 = select i1 %73, float %65, float %67, !dbg !46
  %76 = select i1 %74, float %66, float %68, !dbg !46
  %77 = fmul float %20, %53, !dbg !47
  %78 = fmul float %21, %54, !dbg !47
  %79 = fcmp ogt float %75, %77, !dbg !48
  %80 = fcmp ogt float %76, %78, !dbg !48
  %81 = fcmp uno float %75, 0.000000e+00, !dbg !50
  %82 = fcmp uno float %76, 0.000000e+00, !dbg !50
  %83 = or i1 %79, %81, !dbg !51
  %84 = or i1 %80, %82, !dbg !51
  %85 = select i1 %83, float %75, float %77, !dbg !52
  %86 = select i1 %84, float %76, float %78, !dbg !52
  %87 = fsub float %55, %85, !dbg !53
  %88 = fsub float %56, %86, !dbg !53
  %89 = fmul float %87, 0x3FF7154760000000, !dbg !54
  %90 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %89) #1, !dbg !54
  %91 = fmul float %88, 0x3FF7154760000000, !dbg !54
  %92 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %91) #1, !dbg !54
  %93 = fsub float %57, %85, !dbg !55
  %94 = fsub float %58, %86, !dbg !55
  %95 = fmul float %93, 0x3FF7154760000000, !dbg !56
  %96 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %95) #1, !dbg !56
  %97 = fmul float %94, 0x3FF7154760000000, !dbg !56
  %98 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %97) #1, !dbg !56
  %99 = fadd float %90, %96, !dbg !57
  %100 = fadd float %92, %98, !dbg !57
  %101 = fsub float %67, %85, !dbg !58
  %102 = fsub float %68, %86, !dbg !58
  %103 = fmul float %101, 0x3FF7154760000000, !dbg !59
  %104 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %103) #1, !dbg !59
  %105 = fmul float %102, 0x3FF7154760000000, !dbg !59
  %106 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %105) #1, !dbg !59
  %107 = fadd float %99, %104, !dbg !60
  %108 = fadd float %100, %106, !dbg !60
  %109 = fsub float %77, %85, !dbg !61
  %110 = fsub float %78, %86, !dbg !61
  %111 = fmul float %109, 0x3FF7154760000000, !dbg !62
  %112 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %111) #1, !dbg !62
  %113 = fmul float %110, 0x3FF7154760000000, !dbg !62
  %114 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %113) #1, !dbg !62
  %115 = fadd float %107, %112, !dbg !63
  %116 = fadd float %108, %114, !dbg !63
  %117 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !64
  %118 = bitcast float %85 to i32, !dbg !65
  %119 = bitcast float %86 to i32, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %118, i32 %119, ptr addrspace(1) %117, i1 %12) #1, !dbg !65
  %120 = getelementptr float, ptr addrspace(1) %3, i64 %15, !dbg !66
  %121 = bitcast float %115 to i32, !dbg !67
  %122 = bitcast float %116 to i32, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %121, i32 %122, ptr addrspace(1) %120, i1 %12) #1, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cf26cbb4pqf2xn6ntsasuvlhkiqo6wua5a6m6x6wrjf5lput36oz.py", directory: "inductor_cache/f2")
!4 = !{ptr @triton_poi_fused__softmax_mul_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_mul_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_mul_0", linkageName: "triton_poi_fused__softmax_mul_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 38, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 43, scope: !7)
!23 = !DILocation(line: 29, column: 39, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 47, scope: !7)
!26 = !DILocation(line: 30, column: 39, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 47, scope: !7)
!29 = !DILocation(line: 31, column: 41, scope: !7)
!30 = !DILocation(line: 31, column: 31, scope: !7)
!31 = !DILocation(line: 31, column: 49, scope: !7)
!32 = !DILocation(line: 32, column: 18, scope: !7)
!33 = !DILocation(line: 35, column: 18, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 37, column: 40, scope: !7)
!38 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!41 = !DILocation(line: 38, column: 19, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !43)
!43 = !DILocation(line: 40, column: 41, scope: !7)
!44 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !43)
!45 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !43)
!46 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !43)
!47 = !DILocation(line: 41, column: 19, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !49)
!49 = !DILocation(line: 43, column: 42, scope: !7)
!50 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !49)
!51 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !49)
!52 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !49)
!53 = !DILocation(line: 44, column: 19, scope: !7)
!54 = !DILocation(line: 45, column: 24, scope: !7)
!55 = !DILocation(line: 46, column: 19, scope: !7)
!56 = !DILocation(line: 47, column: 24, scope: !7)
!57 = !DILocation(line: 48, column: 20, scope: !7)
!58 = !DILocation(line: 49, column: 20, scope: !7)
!59 = !DILocation(line: 50, column: 24, scope: !7)
!60 = !DILocation(line: 51, column: 20, scope: !7)
!61 = !DILocation(line: 52, column: 20, scope: !7)
!62 = !DILocation(line: 53, column: 24, scope: !7)
!63 = !DILocation(line: 54, column: 20, scope: !7)
!64 = !DILocation(line: 55, column: 25, scope: !7)
!65 = !DILocation(line: 55, column: 37, scope: !7)
!66 = !DILocation(line: 56, column: 25, scope: !7)
!67 = !DILocation(line: 56, column: 37, scope: !7)
!68 = !DILocation(line: 56, column: 4, scope: !7)
