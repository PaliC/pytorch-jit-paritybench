; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 512, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %12 = sdiv i32 %.frozen, 64, !dbg !14
  %13 = sdiv i32 %11, 64, !dbg !14
  %14 = srem i32 %12, 1024, !dbg !15
  %15 = srem i32 %13, 1024, !dbg !15
  %16 = mul i32 %12, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %.frozen9 = freeze i32 %10, !dbg !17
  %17 = sdiv i32 %.frozen9, 65536, !dbg !17
  %.frozen10 = freeze i32 %11, !dbg !17
  %18 = sdiv i32 %.frozen10, 65536, !dbg !17
  %19 = icmp slt i32 %14, 512, !dbg !18
  %20 = icmp slt i32 %15, 512, !dbg !18
  %21 = mul i32 %17, 65536, !dbg !19
  %srem.decomposed = sub i32 %.frozen9, %21, !dbg !19
  %22 = mul i32 %18, 65536, !dbg !19
  %srem1.decomposed = sub i32 %.frozen10, %22, !dbg !19
  %23 = shl nsw i32 %17, 15, !dbg !20
  %24 = shl nsw i32 %18, 15, !dbg !20
  %25 = add nsw i32 %23, %srem.decomposed, !dbg !21
  %26 = add nsw i32 %24, %srem1.decomposed, !dbg !21
  %27 = sext i32 %25 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = sext i32 %26 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #1, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !23
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #1, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %41 = icmp sgt i32 %14, 511, !dbg !24
  %42 = icmp sgt i32 %15, 511, !dbg !24
  %43 = shl nsw i32 %14, 6, !dbg !25
  %44 = shl nsw i32 %15, 6, !dbg !25
  %45 = add nsw i32 %.decomposed, -32768, !dbg !25
  %46 = add nsw i32 %45, %23, !dbg !26
  %47 = add nsw i32 %46, %43, !dbg !27
  %48 = add nsw i32 %45, %24, !dbg !26
  %49 = add nsw i32 %48, %44, !dbg !27
  %50 = sext i32 %47 to i64, !dbg !28
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !28
  %52 = sext i32 %49 to i64, !dbg !28
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !28
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 %41, i32 0, i1 %41, i32 0, i1 %41, i32 0, i1 %41, i32 0, i1 %41) #1, !dbg !29
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !29
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !29
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !29
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !29
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %53, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42) #1, !dbg !29
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !29
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !29
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !29
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !29
  %.v = select i1 %19, i32 %32, i32 %55, !dbg !30
  %.v2 = select i1 %19, i32 %33, i32 %56, !dbg !30
  %.v3 = select i1 %19, i32 %34, i32 %57, !dbg !30
  %.v4 = select i1 %19, i32 %35, i32 %58, !dbg !30
  %.v5 = select i1 %20, i32 %37, i32 %60, !dbg !30
  %.v6 = select i1 %20, i32 %38, i32 %61, !dbg !30
  %.v7 = select i1 %20, i32 %39, i32 %62, !dbg !30
  %.v8 = select i1 %20, i32 %40, i32 %63, !dbg !30
  %64 = sext i32 %10 to i64, !dbg !31
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !31
  %66 = sext i32 %11 to i64, !dbg !31
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.v, i32 %.v2, i32 %.v3, i32 %.v4, ptr addrspace(1) %65, i1 true) #1, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.v5, i32 %.v6, i32 %.v7, i32 %.v8, ptr addrspace(1) %67, i1 true) #1, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ce2jb2wgqsqoixcsc47c42u2n33tcwdu6r4zj3pcofozj7uyilla.py", directory: "inductor_cache/e2")
!4 = !{ptr @triton_poi_fused_cat_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_14", linkageName: "triton_poi_fused_cat_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 51, scope: !7)
!21 = !DILocation(line: 33, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 56, scope: !7)
!24 = !DILocation(line: 34, column: 19, scope: !7)
!25 = !DILocation(line: 37, column: 39, scope: !7)
!26 = !DILocation(line: 37, column: 35, scope: !7)
!27 = !DILocation(line: 37, column: 54, scope: !7)
!28 = !DILocation(line: 37, column: 30, scope: !7)
!29 = !DILocation(line: 37, column: 65, scope: !7)
!30 = !DILocation(line: 38, column: 33, scope: !7)
!31 = !DILocation(line: 39, column: 25, scope: !7)
!32 = !DILocation(line: 39, column: 37, scope: !7)
!33 = !DILocation(line: 39, column: 4, scope: !7)
