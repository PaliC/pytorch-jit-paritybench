; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 60, !dbg !12
  %11 = lshr i32 %8, 4, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %12, 16, !dbg !12
  %14 = or disjoint i32 %12, 32, !dbg !12
  %15 = or disjoint i32 %12, 48, !dbg !12
  %16 = or disjoint i32 %7, %10, !dbg !13
  %17 = or disjoint i32 %7, %12, !dbg !13
  %18 = or disjoint i32 %7, %13, !dbg !13
  %19 = or disjoint i32 %7, %14, !dbg !13
  %20 = or disjoint i32 %7, %15, !dbg !13
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %22 = shl i32 %21, 6, !dbg !15
  %23 = or disjoint i32 %22, %12, !dbg !16
  %24 = or disjoint i32 %22, %13, !dbg !16
  %25 = or disjoint i32 %22, %14, !dbg !16
  %26 = or disjoint i32 %22, %15, !dbg !16
  %27 = or disjoint i32 %22, %10, !dbg !16
  %28 = icmp slt i32 %23, 64, !dbg !17
  %29 = icmp slt i32 %24, 64, !dbg !17
  %30 = icmp slt i32 %25, 64, !dbg !17
  %31 = icmp slt i32 %26, 64, !dbg !17
  %32 = icmp slt i32 %27, 64, !dbg !17
  %.frozen = freeze i32 %16, !dbg !18
  %33 = sdiv i32 %.frozen, 256, !dbg !18
  %34 = mul i32 %33, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %34, !dbg !19
  %35 = shl i32 %23, 8, !dbg !20
  %36 = shl i32 %24, 8, !dbg !20
  %37 = shl i32 %25, 8, !dbg !20
  %38 = shl i32 %26, 8, !dbg !20
  %39 = shl i32 %33, 14, !dbg !21
  %40 = add i32 %39, %.decomposed, !dbg !22
  %41 = add i32 %40, %35, !dbg !23
  %42 = add i32 %40, %36, !dbg !23
  %43 = add i32 %40, %37, !dbg !23
  %44 = add i32 %40, %38, !dbg !23
  %45 = sext i32 %41 to i64, !dbg !24
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !24
  %47 = sext i32 %42 to i64, !dbg !24
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !24
  %49 = sext i32 %43 to i64, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !24
  %51 = sext i32 %44 to i64, !dbg !24
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !24
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %28) #2, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !25
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !25
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %29) #2, !dbg !25
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !25
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !25
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !25
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !25
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %30) #2, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !25
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !25
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %31) #2, !dbg !25
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !25
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !25
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !25
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !25
  %73 = shl i32 %17, 6, !dbg !26
  %74 = shl i32 %18, 6, !dbg !26
  %75 = shl i32 %19, 6, !dbg !26
  %76 = shl i32 %20, 6, !dbg !26
  %77 = add i32 %27, %73, !dbg !27
  %78 = add i32 %27, %74, !dbg !27
  %79 = add i32 %27, %75, !dbg !27
  %80 = add i32 %27, %76, !dbg !27
  %81 = sext i32 %77 to i64, !dbg !28
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !28
  %83 = sext i32 %78 to i64, !dbg !28
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !28
  %85 = sext i32 %79 to i64, !dbg !28
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %85, !dbg !28
  %87 = sext i32 %80 to i64, !dbg !28
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !28
  %89 = shl i32 %8, 8, !dbg !29
  %90 = and i32 %89, 3840, !dbg !29
  %91 = or disjoint i32 %90, %12, !dbg !29
  %92 = and i32 %9, 1020, !dbg !29
  %93 = lshr exact i32 %90, 4, !dbg !29
  %94 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %93, !dbg !29
  %95 = getelementptr float, ptr addrspace(3) %94, i32 %91, !dbg !29
  %96 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #2, !dbg !29
  %97 = or disjoint i32 %91, 64, !dbg !29
  %98 = lshr i32 %97, 6, !dbg !29
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i32 %98, !dbg !29
  %100 = getelementptr float, ptr addrspace(3) %99, i32 %97, !dbg !29
  %101 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #2, !dbg !29
  %102 = or disjoint i32 %91, 128, !dbg !29
  %103 = lshr i32 %102, 6, !dbg !29
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i32 %103, !dbg !29
  %105 = getelementptr float, ptr addrspace(3) %104, i32 %102, !dbg !29
  %106 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #2, !dbg !29
  %107 = or disjoint i32 %91, 192, !dbg !29
  %108 = lshr i32 %107, 6, !dbg !29
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i32 %108, !dbg !29
  %110 = getelementptr float, ptr addrspace(3) %109, i32 %107, !dbg !29
  %111 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #2, !dbg !29
  %112 = or disjoint i32 %91, 16, !dbg !29
  %113 = getelementptr float, ptr addrspace(3) %94, i32 %112, !dbg !29
  %114 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #2, !dbg !29
  %115 = or disjoint i32 %91, 80, !dbg !29
  %116 = lshr i32 %115, 6, !dbg !29
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i32 %116, !dbg !29
  %118 = getelementptr float, ptr addrspace(3) %117, i32 %115, !dbg !29
  %119 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #2, !dbg !29
  %120 = or disjoint i32 %91, 144, !dbg !29
  %121 = lshr i32 %120, 6, !dbg !29
  %122 = getelementptr float, ptr addrspace(3) @global_smem, i32 %121, !dbg !29
  %123 = getelementptr float, ptr addrspace(3) %122, i32 %120, !dbg !29
  %124 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #2, !dbg !29
  %125 = or disjoint i32 %91, 208, !dbg !29
  %126 = lshr i32 %125, 6, !dbg !29
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i32 %126, !dbg !29
  %128 = getelementptr float, ptr addrspace(3) %127, i32 %125, !dbg !29
  %129 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #2, !dbg !29
  %130 = or disjoint i32 %91, 32, !dbg !29
  %131 = getelementptr float, ptr addrspace(3) %94, i32 %130, !dbg !29
  %132 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #2, !dbg !29
  %133 = or disjoint i32 %91, 96, !dbg !29
  %134 = lshr i32 %133, 6, !dbg !29
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i32 %134, !dbg !29
  %136 = getelementptr float, ptr addrspace(3) %135, i32 %133, !dbg !29
  %137 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #2, !dbg !29
  %138 = or disjoint i32 %91, 160, !dbg !29
  %139 = lshr i32 %138, 6, !dbg !29
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %139, !dbg !29
  %141 = getelementptr float, ptr addrspace(3) %140, i32 %138, !dbg !29
  %142 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #2, !dbg !29
  %143 = or disjoint i32 %91, 224, !dbg !29
  %144 = lshr i32 %143, 6, !dbg !29
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i32 %144, !dbg !29
  %146 = getelementptr float, ptr addrspace(3) %145, i32 %143, !dbg !29
  %147 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #2, !dbg !29
  %148 = or disjoint i32 %91, 48, !dbg !29
  %149 = getelementptr float, ptr addrspace(3) %94, i32 %148, !dbg !29
  %150 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #2, !dbg !29
  %151 = or disjoint i32 %91, 112, !dbg !29
  %152 = lshr i32 %151, 6, !dbg !29
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !29
  %154 = getelementptr float, ptr addrspace(3) %153, i32 %151, !dbg !29
  %155 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 true) #2, !dbg !29
  %156 = or disjoint i32 %91, 176, !dbg !29
  %157 = lshr i32 %156, 6, !dbg !29
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %157, !dbg !29
  %159 = getelementptr float, ptr addrspace(3) %158, i32 %156, !dbg !29
  %160 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #2, !dbg !29
  %161 = or disjoint i32 %91, 240, !dbg !29
  %162 = lshr i32 %161, 6, !dbg !29
  %163 = getelementptr float, ptr addrspace(3) @global_smem, i32 %162, !dbg !29
  %164 = getelementptr float, ptr addrspace(3) %163, i32 %161, !dbg !29
  %165 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %165, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %166 = lshr i32 %92, 6, !dbg !29
  %167 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %166, !dbg !29
  %168 = getelementptr inbounds float, ptr addrspace(3) %167, i32 %92, !dbg !29
  %169 = load i32, ptr addrspace(3) %168, align 4, !dbg !29
  %170 = or disjoint i32 %92, 1, !dbg !29
  %171 = getelementptr inbounds float, ptr addrspace(3) %167, i32 %170, !dbg !29
  %172 = load i32, ptr addrspace(3) %171, align 4, !dbg !29
  %173 = or disjoint i32 %92, 2, !dbg !29
  %174 = getelementptr inbounds float, ptr addrspace(3) %167, i32 %173, !dbg !29
  %175 = load i32, ptr addrspace(3) %174, align 4, !dbg !29
  %176 = or disjoint i32 %92, 3, !dbg !29
  %177 = getelementptr inbounds float, ptr addrspace(3) %167, i32 %176, !dbg !29
  %178 = load i32, ptr addrspace(3) %177, align 4, !dbg !29
  %179 = or disjoint i32 %92, 1024, !dbg !29
  %180 = lshr i32 %179, 6, !dbg !29
  %181 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %180, !dbg !29
  %182 = getelementptr inbounds float, ptr addrspace(3) %181, i32 %179, !dbg !29
  %183 = load i32, ptr addrspace(3) %182, align 4, !dbg !29
  %184 = or disjoint i32 %92, 1025, !dbg !29
  %185 = lshr i32 %184, 6, !dbg !29
  %186 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %185, !dbg !29
  %187 = getelementptr inbounds float, ptr addrspace(3) %186, i32 %184, !dbg !29
  %188 = load i32, ptr addrspace(3) %187, align 4, !dbg !29
  %189 = or disjoint i32 %92, 1026, !dbg !29
  %190 = lshr i32 %189, 6, !dbg !29
  %191 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %190, !dbg !29
  %192 = getelementptr inbounds float, ptr addrspace(3) %191, i32 %189, !dbg !29
  %193 = load i32, ptr addrspace(3) %192, align 4, !dbg !29
  %194 = or disjoint i32 %92, 1027, !dbg !29
  %195 = lshr i32 %194, 6, !dbg !29
  %196 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %195, !dbg !29
  %197 = getelementptr inbounds float, ptr addrspace(3) %196, i32 %194, !dbg !29
  %198 = load i32, ptr addrspace(3) %197, align 4, !dbg !29
  %199 = or disjoint i32 %92, 2048, !dbg !29
  %200 = lshr i32 %199, 6, !dbg !29
  %201 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %200, !dbg !29
  %202 = getelementptr inbounds float, ptr addrspace(3) %201, i32 %199, !dbg !29
  %203 = load i32, ptr addrspace(3) %202, align 4, !dbg !29
  %204 = or disjoint i32 %92, 2049, !dbg !29
  %205 = lshr i32 %204, 6, !dbg !29
  %206 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %205, !dbg !29
  %207 = getelementptr inbounds float, ptr addrspace(3) %206, i32 %204, !dbg !29
  %208 = load i32, ptr addrspace(3) %207, align 4, !dbg !29
  %209 = or disjoint i32 %92, 2050, !dbg !29
  %210 = lshr i32 %209, 6, !dbg !29
  %211 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %210, !dbg !29
  %212 = getelementptr inbounds float, ptr addrspace(3) %211, i32 %209, !dbg !29
  %213 = load i32, ptr addrspace(3) %212, align 4, !dbg !29
  %214 = or disjoint i32 %92, 2051, !dbg !29
  %215 = lshr i32 %214, 6, !dbg !29
  %216 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %215, !dbg !29
  %217 = getelementptr inbounds float, ptr addrspace(3) %216, i32 %214, !dbg !29
  %218 = load i32, ptr addrspace(3) %217, align 4, !dbg !29
  %219 = or disjoint i32 %92, 3072, !dbg !29
  %220 = lshr i32 %219, 6, !dbg !29
  %221 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %220, !dbg !29
  %222 = getelementptr inbounds float, ptr addrspace(3) %221, i32 %219, !dbg !29
  %223 = load i32, ptr addrspace(3) %222, align 4, !dbg !29
  %224 = or disjoint i32 %92, 3073, !dbg !29
  %225 = lshr i32 %224, 6, !dbg !29
  %226 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %225, !dbg !29
  %227 = getelementptr inbounds float, ptr addrspace(3) %226, i32 %224, !dbg !29
  %228 = load i32, ptr addrspace(3) %227, align 4, !dbg !29
  %229 = or disjoint i32 %92, 3074, !dbg !29
  %230 = lshr i32 %229, 6, !dbg !29
  %231 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %230, !dbg !29
  %232 = getelementptr inbounds float, ptr addrspace(3) %231, i32 %229, !dbg !29
  %233 = load i32, ptr addrspace(3) %232, align 4, !dbg !29
  %234 = or disjoint i32 %92, 3075, !dbg !29
  %235 = lshr i32 %234, 6, !dbg !29
  %236 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %235, !dbg !29
  %237 = getelementptr inbounds float, ptr addrspace(3) %236, i32 %234, !dbg !29
  %238 = load i32, ptr addrspace(3) %237, align 4, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %169, i32 %172, i32 %175, i32 %178, ptr addrspace(1) %82, i1 %32) #2, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %183, i32 %188, i32 %193, i32 %198, ptr addrspace(1) %84, i1 %32) #2, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %203, i32 %208, i32 %213, i32 %218, ptr addrspace(1) %86, i1 %32) #2, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %223, i32 %228, i32 %233, i32 %238, ptr addrspace(1) %88, i1 %32) #2, !dbg !29
  %239 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !30
  %240 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !30
  %241 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !30
  %242 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %54, i32 %55, i32 %56, i32 %57, ptr addrspace(1) %239, i1 %28) #2, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %59, i32 %60, i32 %61, i32 %62, ptr addrspace(1) %240, i1 %29) #2, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %64, i32 %65, i32 %66, i32 %67, ptr addrspace(1) %241, i1 %30) #2, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %69, i32 %70, i32 %71, i32 %72, ptr addrspace(1) %242, i1 %31) #2, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccht6ubrmbqotb3zv775sxzftxx66evlufdcsip24duhmjqbra3k.py", directory: "inductor_cache/ch")
!4 = !{ptr @triton_poi_fused_convolution_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_9, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_9", linkageName: "triton_poi_fused_convolution_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 50, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 55, scope: !7)
!26 = !DILocation(line: 33, column: 33, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 25, scope: !7)
!29 = !DILocation(line: 33, column: 44, scope: !7)
!30 = !DILocation(line: 34, column: 25, scope: !7)
!31 = !DILocation(line: 34, column: 56, scope: !7)
!32 = !DILocation(line: 34, column: 4, scope: !7)
