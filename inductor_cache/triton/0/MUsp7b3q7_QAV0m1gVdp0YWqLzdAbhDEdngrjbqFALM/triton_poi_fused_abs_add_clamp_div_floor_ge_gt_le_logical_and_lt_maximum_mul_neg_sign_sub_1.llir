; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_abs_add_clamp_div_floor_ge_gt_le_logical_and_lt_maximum_mul_neg_sign_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %14 = shl i32 %13, 4, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = and i32 %15, 16, !dbg !12
  %17 = and i32 %15, 15, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = icmp slt i32 %18, 16, !dbg !14
  %20 = sdiv i32 %18, 4, !dbg !15
  %21 = sext i32 %18 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !16
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %19) #2, !dbg !17
  %24 = bitcast i32 %23 to float, !dbg !17
  %25 = sext i32 %20 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !18
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %19) #2, !dbg !19
  %28 = bitcast i32 %27 to float, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %19) #2, !dbg !21
  %31 = bitcast i32 %30 to float, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #2, !dbg !22
  %33 = bitcast i32 %32 to float, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %4, i1 true) #2, !dbg !23
  %35 = bitcast i32 %34 to float, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %19) #2, !dbg !25
  %38 = bitcast i32 %37 to float, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %19) #2, !dbg !27
  %41 = bitcast i32 %40 to float, !dbg !27
  %42 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %24, float %28) #2, !dbg !28
  %43 = fsub float %42, %31, !dbg !29
  %44 = fcmp ogt float %43, 0.000000e+00, !dbg !30
  %45 = zext i1 %44 to i8, !dbg !31
  %46 = fcmp olt float %43, 0.000000e+00, !dbg !32
  %.neg = sext i1 %46 to i8, !dbg !33
  %47 = add nsw i8 %.neg, %45, !dbg !34
  %48 = sitofp i8 %47 to float, !dbg !35
  %49 = tail call float @llvm.fabs.f32(float %43), !dbg !36
  %50 = fadd float %49, 5.000000e-01, !dbg !37
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !38
  %.not.i = icmp eq i32 %51, 0, !dbg !38
  %52 = tail call float @llvm.nvvm.floor.ftz.f(float %50), !dbg !38
  %53 = tail call float @llvm.nvvm.floor.f(float %50), !dbg !38
  %.0.i = select i1 %.not.i, float %53, float %52, !dbg !38
  %54 = fmul float %.0.i, %48, !dbg !39
  %55 = fcmp ogt float %54, %33, !dbg !40
  %56 = fcmp uno float %54, 0.000000e+00, !dbg !44
  %57 = or i1 %55, %56, !dbg !45
  %58 = select i1 %57, float %54, float %33, !dbg !46
  %59 = fcmp olt float %58, %35, !dbg !47
  %60 = fcmp uno float %58, 0.000000e+00, !dbg !49
  %61 = or i1 %59, %60, !dbg !50
  %62 = select i1 %61, float %58, float %35, !dbg !51
  %63 = fadd float %62, %31, !dbg !52
  %64 = fmul float %63, %28, !dbg !53
  %65 = fcmp oge float %54, %33, !dbg !54
  %66 = fcmp ole float %54, %35, !dbg !55
  %67 = and i1 %65, %66, !dbg !56
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %38, float %28) #2, !dbg !57
  %69 = fsub float %68, %31, !dbg !58
  %70 = tail call float @llvm.fabs.f32(float %69), !dbg !59
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %41, float %28) #2, !dbg !60
  %72 = fsub float %71, %31, !dbg !61
  %73 = tail call float @llvm.fabs.f32(float %72), !dbg !62
  %74 = fcmp ogt float %70, %73, !dbg !63
  %75 = fcmp uno float %69, 0.000000e+00, !dbg !65
  %76 = or i1 %75, %74, !dbg !66
  %77 = select i1 %76, float %70, float %73, !dbg !67
  %78 = fcmp ogt float %43, %77, !dbg !68
  %79 = fsub float 0.000000e+00, %77, !dbg !69
  %80 = fcmp olt float %43, %79, !dbg !70
  %81 = getelementptr float, ptr addrspace(1) %7, i64 %21, !dbg !71
  %82 = icmp eq i32 %16, 0, !dbg !72
  %83 = bitcast float %64 to i32, !dbg !72
  %84 = and i1 %82, %19, !dbg !72
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %83, ptr addrspace(1) %81, i1 %84) #2, !dbg !72
  %85 = getelementptr i1, ptr addrspace(1) %8, i64 %21, !dbg !73
  %86 = zext i1 %67 to i8, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %86, ptr addrspace(1) %85, i1 %84) #2, !dbg !74
  %87 = getelementptr i1, ptr addrspace(1) %9, i64 %21, !dbg !75
  %88 = zext i1 %78 to i8, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %88, ptr addrspace(1) %87, i1 %84) #2, !dbg !76
  %89 = getelementptr i1, ptr addrspace(1) %10, i64 %21, !dbg !77
  %90 = zext i1 %80 to i8, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %90, ptr addrspace(1) %89, i1 %84) #2, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciwejttrjtwegikvdjclrgfax7ehm4nnmifupvxzsivkd3aj3jb7.py", directory: "inductor_cache/iw")
!4 = !{ptr @triton_poi_fused_abs_add_clamp_div_floor_ge_gt_le_logical_and_lt_maximum_mul_neg_sign_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_abs_add_clamp_div_floor_ge_gt_le_logical_and_lt_maximum_mul_neg_sign_sub_1, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_abs_add_clamp_div_floor_ge_gt_le_logical_and_lt_maximum_mul_neg_sign_sub_1", linkageName: "triton_poi_fused_abs_add_clamp_div_floor_ge_gt_le_logical_and_lt_maximum_mul_neg_sign_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 20, scope: !7)
!23 = !DILocation(line: 31, column: 20, scope: !7)
!24 = !DILocation(line: 33, column: 31, scope: !7)
!25 = !DILocation(line: 33, column: 36, scope: !7)
!26 = !DILocation(line: 34, column: 31, scope: !7)
!27 = !DILocation(line: 34, column: 36, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 19, scope: !7)
!32 = !DILocation(line: 40, column: 18, scope: !7)
!33 = !DILocation(line: 41, column: 19, scope: !7)
!34 = !DILocation(line: 42, column: 19, scope: !7)
!35 = !DILocation(line: 43, column: 21, scope: !7)
!36 = !DILocation(line: 44, column: 24, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 28, scope: !7)
!39 = !DILocation(line: 48, column: 20, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 49, column: 42, scope: !7)
!44 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !43)
!46 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 110, column: 15, scope: !41, inlinedAt: !48)
!48 = !DILocation(line: 50, column: 42, scope: !7)
!49 = !DILocation(line: 112, column: 21, scope: !41, inlinedAt: !48)
!50 = !DILocation(line: 112, column: 16, scope: !41, inlinedAt: !48)
!51 = !DILocation(line: 113, column: 29, scope: !41, inlinedAt: !48)
!52 = !DILocation(line: 51, column: 20, scope: !7)
!53 = !DILocation(line: 52, column: 20, scope: !7)
!54 = !DILocation(line: 53, column: 21, scope: !7)
!55 = !DILocation(line: 54, column: 21, scope: !7)
!56 = !DILocation(line: 55, column: 20, scope: !7)
!57 = !DILocation(line: 56, column: 20, scope: !7)
!58 = !DILocation(line: 57, column: 20, scope: !7)
!59 = !DILocation(line: 58, column: 24, scope: !7)
!60 = !DILocation(line: 59, column: 20, scope: !7)
!61 = !DILocation(line: 60, column: 20, scope: !7)
!62 = !DILocation(line: 61, column: 24, scope: !7)
!63 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !64)
!64 = !DILocation(line: 62, column: 42, scope: !7)
!65 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !64)
!66 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !64)
!67 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !64)
!68 = !DILocation(line: 63, column: 19, scope: !7)
!69 = !DILocation(line: 64, column: 13, scope: !7)
!70 = !DILocation(line: 65, column: 19, scope: !7)
!71 = !DILocation(line: 66, column: 25, scope: !7)
!72 = !DILocation(line: 66, column: 37, scope: !7)
!73 = !DILocation(line: 67, column: 25, scope: !7)
!74 = !DILocation(line: 67, column: 37, scope: !7)
!75 = !DILocation(line: 68, column: 25, scope: !7)
!76 = !DILocation(line: 68, column: 37, scope: !7)
!77 = !DILocation(line: 69, column: 25, scope: !7)
!78 = !DILocation(line: 69, column: 37, scope: !7)
!79 = !DILocation(line: 69, column: 4, scope: !7)
