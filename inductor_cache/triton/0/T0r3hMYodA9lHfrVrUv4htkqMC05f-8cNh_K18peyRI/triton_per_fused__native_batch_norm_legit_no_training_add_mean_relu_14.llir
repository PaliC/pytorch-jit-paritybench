; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %15 = shl i32 %14, 5, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = lshr i32 %16, 4, !dbg !12
  %18 = and i32 %17, 15, !dbg !12
  %19 = or disjoint i32 %18, 16, !dbg !12
  %20 = or disjoint i32 %15, %18, !dbg !13
  %21 = or disjoint i32 %15, %19, !dbg !13
  %22 = icmp slt i32 %20, 2048, !dbg !14
  %23 = icmp slt i32 %21, 2048, !dbg !14
  %24 = shl i32 %16, 2, !dbg !15
  %25 = and i32 %24, 60, !dbg !15
  %26 = srem i32 %20, 512, !dbg !16
  %27 = srem i32 %21, 512, !dbg !16
  %28 = shl i32 %20, 6, !dbg !17
  %29 = shl i32 %21, 6, !dbg !17
  %30 = or disjoint i32 %28, %25, !dbg !18
  %31 = or disjoint i32 %29, %25, !dbg !18
  %32 = sext i32 %30 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !19
  %34 = sext i32 %31 to i64, !dbg !19
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !19
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !20
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #5, !dbg !20
  %38 = sext i32 %26 to i64, !dbg !21
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !21
  %40 = sext i32 %27 to i64, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !21
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %22) #5, !dbg !22
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %22) #5, !dbg !22
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %22) #5, !dbg !22
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %22) #5, !dbg !22
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !22
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !22
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !22
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !22
  %50 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !23
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %22) #5, !dbg !24
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %22) #5, !dbg !24
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %22) #5, !dbg !24
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %22) #5, !dbg !24
  %56 = bitcast i32 %55 to float, !dbg !24
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %23) #5, !dbg !24
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %23) #5, !dbg !24
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %23) #5, !dbg !24
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %23) #5, !dbg !24
  %61 = bitcast i32 %60 to float, !dbg !24
  %62 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !25
  %63 = getelementptr float, ptr addrspace(1) %5, i64 %40, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %22) #5, !dbg !26
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %22) #5, !dbg !26
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %22) #5, !dbg !26
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %22) #5, !dbg !26
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %23) #5, !dbg !26
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %23) #5, !dbg !26
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %23) #5, !dbg !26
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %23) #5, !dbg !26
  %72 = getelementptr float, ptr addrspace(1) %6, i64 %38, !dbg !27
  %73 = getelementptr float, ptr addrspace(1) %6, i64 %40, !dbg !27
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %22) #5, !dbg !28
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %22) #5, !dbg !28
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %22) #5, !dbg !28
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %22) #5, !dbg !28
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %23) #5, !dbg !28
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %23) #5, !dbg !28
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %23) #5, !dbg !28
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %23) #5, !dbg !28
  %82 = getelementptr float, ptr addrspace(1) %7, i64 %32, !dbg !29
  %83 = getelementptr float, ptr addrspace(1) %7, i64 %34, !dbg !29
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %82, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !30
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #5, !dbg !30
  %86 = getelementptr float, ptr addrspace(1) %8, i64 %38, !dbg !31
  %87 = getelementptr float, ptr addrspace(1) %8, i64 %40, !dbg !31
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %22) #5, !dbg !32
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %22) #5, !dbg !32
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %22) #5, !dbg !32
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %22) #5, !dbg !32
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %23) #5, !dbg !32
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %23) #5, !dbg !32
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %23) #5, !dbg !32
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %23) #5, !dbg !32
  %96 = getelementptr float, ptr addrspace(1) %9, i64 %38, !dbg !33
  %97 = getelementptr float, ptr addrspace(1) %9, i64 %40, !dbg !33
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %22) #5, !dbg !34
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %22) #5, !dbg !34
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %22) #5, !dbg !34
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %22) #5, !dbg !34
  %102 = bitcast i32 %101 to float, !dbg !34
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %23) #5, !dbg !34
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %23) #5, !dbg !34
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %23) #5, !dbg !34
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %23) #5, !dbg !34
  %107 = bitcast i32 %106 to float, !dbg !34
  %108 = getelementptr float, ptr addrspace(1) %10, i64 %38, !dbg !35
  %109 = getelementptr float, ptr addrspace(1) %10, i64 %40, !dbg !35
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %22) #5, !dbg !36
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %22) #5, !dbg !36
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %22) #5, !dbg !36
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %22) #5, !dbg !36
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %23) #5, !dbg !36
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %23) #5, !dbg !36
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %23) #5, !dbg !36
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %23) #5, !dbg !36
  %118 = getelementptr float, ptr addrspace(1) %11, i64 %38, !dbg !37
  %119 = getelementptr float, ptr addrspace(1) %11, i64 %40, !dbg !37
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %22) #5, !dbg !38
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %22) #5, !dbg !38
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %22) #5, !dbg !38
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %22) #5, !dbg !38
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %23) #5, !dbg !38
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %23) #5, !dbg !38
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %23) #5, !dbg !38
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %23) #5, !dbg !38
  %128 = fadd float %56, 0x3EE4F8B580000000, !dbg !39
  %129 = fadd float %61, 0x3EE4F8B580000000, !dbg !39
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !40
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !40
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !40
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i12 = icmp eq i32 %136, 0, !dbg !40
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !40
  %.not1.i15 = icmp eq i32 %137, 0, !dbg !40
  br i1 %.not.i12, label %143, label %138, !dbg !40

138:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i15, label %141, label %139, !dbg !40

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #5, !dbg !40
  br label %__nv_sqrtf.exit16, !dbg !40

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #5, !dbg !40
  br label %__nv_sqrtf.exit16, !dbg !40

143:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i15, label %146, label %144, !dbg !40

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #5, !dbg !40
  br label %__nv_sqrtf.exit16, !dbg !40

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #5, !dbg !40
  br label %__nv_sqrtf.exit16, !dbg !40

__nv_sqrtf.exit16:                                ; preds = %139, %141, %144, %146
  %.0.i14 = phi float [ %140, %139 ], [ %142, %141 ], [ %145, %144 ], [ %147, %146 ], !dbg !40
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !40
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !40
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !40
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i32 = icmp eq i32 %154, 0, !dbg !40
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !40
  %.not1.i35 = icmp eq i32 %155, 0, !dbg !40
  br i1 %.not.i32, label %161, label %156, !dbg !40

156:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i35, label %159, label %157, !dbg !40

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %129) #5, !dbg !40
  br label %__nv_sqrtf.exit36, !dbg !40

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %129) #5, !dbg !40
  br label %__nv_sqrtf.exit36, !dbg !40

161:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i35, label %164, label %162, !dbg !40

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.f(float %129) #5, !dbg !40
  br label %__nv_sqrtf.exit36, !dbg !40

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.f(float %129) #5, !dbg !40
  br label %__nv_sqrtf.exit36, !dbg !40

__nv_sqrtf.exit36:                                ; preds = %157, %159, %162, %164
  %.0.i34 = phi float [ %158, %157 ], [ %160, %159 ], [ %163, %162 ], [ %165, %164 ], !dbg !40
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #5, !dbg !41
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i34) #5, !dbg !41
  %168 = fadd float %102, 0x3EE4F8B580000000, !dbg !42
  %169 = fadd float %107, 0x3EE4F8B580000000, !dbg !42
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i52 = icmp eq i32 %176, 0, !dbg !43
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %.not1.i55 = icmp eq i32 %177, 0, !dbg !43
  br i1 %.not.i52, label %183, label %178, !dbg !43

178:                                              ; preds = %__nv_sqrtf.exit36
  br i1 %.not1.i55, label %181, label %179, !dbg !43

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %168) #5, !dbg !43
  br label %__nv_sqrtf.exit56, !dbg !43

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %168) #5, !dbg !43
  br label %__nv_sqrtf.exit56, !dbg !43

183:                                              ; preds = %__nv_sqrtf.exit36
  br i1 %.not1.i55, label %186, label %184, !dbg !43

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.f(float %168) #5, !dbg !43
  br label %__nv_sqrtf.exit56, !dbg !43

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.f(float %168) #5, !dbg !43
  br label %__nv_sqrtf.exit56, !dbg !43

__nv_sqrtf.exit56:                                ; preds = %179, %181, %184, %186
  %.0.i54 = phi float [ %180, %179 ], [ %182, %181 ], [ %185, %184 ], [ %187, %186 ], !dbg !43
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i72 = icmp eq i32 %194, 0, !dbg !43
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %.not1.i75 = icmp eq i32 %195, 0, !dbg !43
  br i1 %.not.i72, label %201, label %196, !dbg !43

196:                                              ; preds = %__nv_sqrtf.exit56
  br i1 %.not1.i75, label %199, label %197, !dbg !43

197:                                              ; preds = %196
  %198 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %169) #5, !dbg !43
  br label %__nv_sqrtf.exit76, !dbg !43

199:                                              ; preds = %196
  %200 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %169) #5, !dbg !43
  br label %__nv_sqrtf.exit76, !dbg !43

201:                                              ; preds = %__nv_sqrtf.exit56
  br i1 %.not1.i75, label %204, label %202, !dbg !43

202:                                              ; preds = %201
  %203 = tail call float @llvm.nvvm.sqrt.rn.f(float %169) #5, !dbg !43
  br label %__nv_sqrtf.exit76, !dbg !43

204:                                              ; preds = %201
  %205 = tail call float @llvm.nvvm.sqrt.approx.f(float %169) #5, !dbg !43
  br label %__nv_sqrtf.exit76, !dbg !43

__nv_sqrtf.exit76:                                ; preds = %197, %199, %202, %204
  %.0.i74 = phi float [ %198, %197 ], [ %200, %199 ], [ %203, %202 ], [ %205, %204 ], !dbg !43
  %206 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !30
  %207 = bitcast i32 %206 to float, !dbg !30
  %208 = bitcast i32 %95 to float, !dbg !32
  %209 = fsub float %207, %208, !dbg !44
  %210 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !30
  %211 = bitcast i32 %210 to float, !dbg !30
  %212 = fsub float %211, %208, !dbg !44
  %213 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !30
  %214 = bitcast i32 %213 to float, !dbg !30
  %215 = fsub float %214, %208, !dbg !44
  %216 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !30
  %217 = bitcast i32 %216 to float, !dbg !30
  %218 = fsub float %217, %208, !dbg !44
  %219 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !30
  %220 = bitcast i32 %219 to float, !dbg !30
  %221 = bitcast i32 %91 to float, !dbg !32
  %222 = fsub float %220, %221, !dbg !44
  %223 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !30
  %224 = bitcast i32 %223 to float, !dbg !30
  %225 = fsub float %224, %221, !dbg !44
  %226 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !30
  %227 = bitcast i32 %226 to float, !dbg !30
  %228 = fsub float %227, %221, !dbg !44
  %229 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !30
  %230 = bitcast i32 %229 to float, !dbg !30
  %231 = fsub float %230, %221, !dbg !44
  %232 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !20
  %233 = bitcast i32 %232 to float, !dbg !20
  %234 = bitcast i32 %49 to float, !dbg !22
  %235 = fsub float %233, %234, !dbg !45
  %236 = fmul float %235, %167, !dbg !46
  %237 = bitcast i32 %71 to float, !dbg !26
  %238 = fmul float %236, %237, !dbg !47
  %239 = bitcast i32 %81 to float, !dbg !28
  %240 = fadd float %238, %239, !dbg !48
  %241 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !20
  %242 = bitcast i32 %241 to float, !dbg !20
  %243 = fsub float %242, %234, !dbg !45
  %244 = fmul float %243, %167, !dbg !46
  %245 = fmul float %244, %237, !dbg !47
  %246 = fadd float %245, %239, !dbg !48
  %247 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !20
  %248 = bitcast i32 %247 to float, !dbg !20
  %249 = fsub float %248, %234, !dbg !45
  %250 = fmul float %249, %167, !dbg !46
  %251 = fmul float %250, %237, !dbg !47
  %252 = fadd float %251, %239, !dbg !48
  %253 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !20
  %254 = bitcast i32 %253 to float, !dbg !20
  %255 = fsub float %254, %234, !dbg !45
  %256 = fmul float %255, %167, !dbg !46
  %257 = fmul float %256, %237, !dbg !47
  %258 = fadd float %257, %239, !dbg !48
  %259 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !20
  %260 = bitcast i32 %259 to float, !dbg !20
  %261 = bitcast i32 %45 to float, !dbg !22
  %262 = fsub float %260, %261, !dbg !45
  %263 = fmul float %262, %166, !dbg !46
  %264 = bitcast i32 %67 to float, !dbg !26
  %265 = fmul float %263, %264, !dbg !47
  %266 = bitcast i32 %77 to float, !dbg !28
  %267 = fadd float %265, %266, !dbg !48
  %268 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !20
  %269 = bitcast i32 %268 to float, !dbg !20
  %270 = fsub float %269, %261, !dbg !45
  %271 = fmul float %270, %166, !dbg !46
  %272 = fmul float %271, %264, !dbg !47
  %273 = fadd float %272, %266, !dbg !48
  %274 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !20
  %275 = bitcast i32 %274 to float, !dbg !20
  %276 = fsub float %275, %261, !dbg !45
  %277 = fmul float %276, %166, !dbg !46
  %278 = fmul float %277, %264, !dbg !47
  %279 = fadd float %278, %266, !dbg !48
  %280 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !20
  %281 = bitcast i32 %280 to float, !dbg !20
  %282 = fsub float %281, %261, !dbg !45
  %283 = fmul float %282, %166, !dbg !46
  %284 = fmul float %283, %264, !dbg !47
  %285 = fadd float %284, %266, !dbg !48
  %286 = bitcast i32 %127 to float, !dbg !38
  %287 = bitcast i32 %123 to float, !dbg !38
  %288 = bitcast i32 %117 to float, !dbg !36
  %289 = bitcast i32 %113 to float, !dbg !36
  %290 = and i32 %16, 31, !dbg !12
  %291 = or disjoint i32 %15, %290, !dbg !13
  %292 = icmp slt i32 %291, 2048, !dbg !14
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i54) #5, !dbg !49
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i74) #5, !dbg !49
  %295 = fmul float %231, %293, !dbg !50
  %296 = fmul float %228, %293, !dbg !50
  %297 = fmul float %225, %293, !dbg !50
  %298 = fmul float %222, %293, !dbg !50
  %299 = fmul float %218, %294, !dbg !50
  %300 = fmul float %215, %294, !dbg !50
  %301 = fmul float %212, %294, !dbg !50
  %302 = fmul float %209, %294, !dbg !50
  %303 = fmul float %295, %289, !dbg !51
  %304 = fmul float %296, %289, !dbg !51
  %305 = fmul float %297, %289, !dbg !51
  %306 = fmul float %298, %289, !dbg !51
  %307 = fmul float %299, %288, !dbg !51
  %308 = fmul float %300, %288, !dbg !51
  %309 = fmul float %301, %288, !dbg !51
  %310 = fmul float %302, %288, !dbg !51
  %311 = fadd float %303, %287, !dbg !52
  %312 = fadd float %304, %287, !dbg !52
  %313 = fadd float %305, %287, !dbg !52
  %314 = fadd float %306, %287, !dbg !52
  %315 = fadd float %307, %286, !dbg !52
  %316 = fadd float %308, %286, !dbg !52
  %317 = fadd float %309, %286, !dbg !52
  %318 = fadd float %310, %286, !dbg !52
  %319 = fcmp olt float %311, 0.000000e+00, !dbg !53
  %320 = fcmp olt float %312, 0.000000e+00, !dbg !53
  %321 = fcmp olt float %313, 0.000000e+00, !dbg !53
  %322 = fcmp olt float %314, 0.000000e+00, !dbg !53
  %323 = fcmp olt float %315, 0.000000e+00, !dbg !53
  %324 = fcmp olt float %316, 0.000000e+00, !dbg !53
  %325 = fcmp olt float %317, 0.000000e+00, !dbg !53
  %326 = fcmp olt float %318, 0.000000e+00, !dbg !53
  %327 = select i1 %319, float 0.000000e+00, float %311, !dbg !57
  %328 = select i1 %320, float 0.000000e+00, float %312, !dbg !57
  %329 = select i1 %321, float 0.000000e+00, float %313, !dbg !57
  %330 = select i1 %322, float 0.000000e+00, float %314, !dbg !57
  %331 = select i1 %323, float 0.000000e+00, float %315, !dbg !57
  %332 = select i1 %324, float 0.000000e+00, float %316, !dbg !57
  %333 = select i1 %325, float 0.000000e+00, float %317, !dbg !57
  %334 = select i1 %326, float 0.000000e+00, float %318, !dbg !57
  %335 = fadd float %285, %327, !dbg !58
  %336 = fadd float %279, %328, !dbg !58
  %337 = fadd float %273, %329, !dbg !58
  %338 = fadd float %267, %330, !dbg !58
  %339 = fadd float %258, %331, !dbg !58
  %340 = fadd float %252, %332, !dbg !58
  %341 = fadd float %246, %333, !dbg !58
  %342 = fadd float %240, %334, !dbg !58
  %343 = fcmp olt float %335, 0.000000e+00, !dbg !59
  %344 = fcmp olt float %336, 0.000000e+00, !dbg !59
  %345 = fcmp olt float %337, 0.000000e+00, !dbg !59
  %346 = fcmp olt float %338, 0.000000e+00, !dbg !59
  %347 = fcmp olt float %339, 0.000000e+00, !dbg !59
  %348 = fcmp olt float %340, 0.000000e+00, !dbg !59
  %349 = fcmp olt float %341, 0.000000e+00, !dbg !59
  %350 = fcmp olt float %342, 0.000000e+00, !dbg !59
  %351 = select i1 %343, float 0.000000e+00, float %335, !dbg !61
  %352 = select i1 %344, float 0.000000e+00, float %336, !dbg !61
  %353 = select i1 %345, float 0.000000e+00, float %337, !dbg !61
  %354 = select i1 %346, float 0.000000e+00, float %338, !dbg !61
  %355 = select i1 %347, float 0.000000e+00, float %339, !dbg !61
  %356 = select i1 %348, float 0.000000e+00, float %340, !dbg !61
  %357 = select i1 %349, float 0.000000e+00, float %341, !dbg !61
  %358 = select i1 %350, float 0.000000e+00, float %342, !dbg !61
  %359 = fadd float %351, %352, !dbg !62
  %360 = fadd float %353, %359, !dbg !62
  %361 = fadd float %354, %360, !dbg !62
  %362 = select i1 %22, float %361, float 0.000000e+00, !dbg !62
  %363 = fadd float %355, %356, !dbg !62
  %364 = fadd float %357, %363, !dbg !62
  %365 = fadd float %358, %364, !dbg !62
  %366 = select i1 %23, float %365, float 0.000000e+00, !dbg !62
  %367 = bitcast float %362 to i32, !dbg !67
  %368 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %367, i32 8, i32 31), !dbg !67
  %369 = bitcast i32 %368 to float, !dbg !67
  %370 = fadd float %362, %369, !dbg !62
  %371 = bitcast float %370 to i32, !dbg !67
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 4, i32 31), !dbg !67
  %373 = bitcast i32 %372 to float, !dbg !67
  %374 = fadd float %370, %373, !dbg !62
  %375 = bitcast float %374 to i32, !dbg !67
  %376 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %375, i32 2, i32 31), !dbg !67
  %377 = bitcast i32 %376 to float, !dbg !67
  %378 = fadd float %374, %377, !dbg !62
  %379 = bitcast float %378 to i32, !dbg !67
  %380 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %379, i32 1, i32 31), !dbg !67
  %381 = bitcast i32 %380 to float, !dbg !67
  %382 = fadd float %378, %381, !dbg !62
  %383 = bitcast float %366 to i32, !dbg !67
  %384 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %383, i32 8, i32 31), !dbg !67
  %385 = bitcast i32 %384 to float, !dbg !67
  %386 = fadd float %366, %385, !dbg !62
  %387 = bitcast float %386 to i32, !dbg !67
  %388 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %387, i32 4, i32 31), !dbg !67
  %389 = bitcast i32 %388 to float, !dbg !67
  %390 = fadd float %386, %389, !dbg !62
  %391 = bitcast float %390 to i32, !dbg !67
  %392 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %391, i32 2, i32 31), !dbg !67
  %393 = bitcast i32 %392 to float, !dbg !67
  %394 = fadd float %390, %393, !dbg !62
  %395 = bitcast float %394 to i32, !dbg !67
  %396 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %395, i32 1, i32 31), !dbg !67
  %397 = bitcast i32 %396 to float, !dbg !67
  %398 = fadd float %394, %397, !dbg !62
  %399 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !68
  %400 = bitcast float %382 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %399, <1 x i32> %400, i1 true) #5, !dbg !68
  %401 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !68
  %402 = bitcast float %398 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %401, <1 x i32> %402, i1 true) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %403 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %290, !dbg !68
  %404 = load float, ptr addrspace(3) %403, align 4, !dbg !68
  %405 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %404, float 6.400000e+01) #5, !dbg !68
  %406 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !69
  %407 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !69
  %408 = bitcast float %351 to i32, !dbg !70
  %409 = bitcast float %352 to i32, !dbg !70
  %410 = bitcast float %353 to i32, !dbg !70
  %411 = bitcast float %354 to i32, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %408, i32 %409, i32 %410, i32 %411, ptr addrspace(1) %406, i1 %22) #5, !dbg !70
  %412 = bitcast float %355 to i32, !dbg !70
  %413 = bitcast float %356 to i32, !dbg !70
  %414 = bitcast float %357 to i32, !dbg !70
  %415 = bitcast float %358 to i32, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %412, i32 %413, i32 %414, i32 %415, ptr addrspace(1) %407, i1 %23) #5, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %416 = sext i32 %291 to i64, !dbg !72
  %417 = getelementptr float, ptr addrspace(1) %1, i64 %416, !dbg !72
  %418 = and i32 %16, 224, !dbg !73
  %419 = icmp eq i32 %418, 0, !dbg !73
  %420 = bitcast float %405 to i32, !dbg !73
  %421 = and i1 %419, %292, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %420, ptr addrspace(1) %417, i1 %421) #5, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py", directory: "inductor_cache/6h")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_14, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_14, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_14", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 38, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 31, scope: !7)
!26 = !DILocation(line: 35, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 44, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 31, scope: !7)
!36 = !DILocation(line: 40, column: 36, scope: !7)
!37 = !DILocation(line: 41, column: 31, scope: !7)
!38 = !DILocation(line: 41, column: 36, scope: !7)
!39 = !DILocation(line: 44, column: 18, scope: !7)
!40 = !DILocation(line: 45, column: 26, scope: !7)
!41 = !DILocation(line: 47, column: 18, scope: !7)
!42 = !DILocation(line: 54, column: 20, scope: !7)
!43 = !DILocation(line: 55, column: 27, scope: !7)
!44 = !DILocation(line: 53, column: 20, scope: !7)
!45 = !DILocation(line: 42, column: 18, scope: !7)
!46 = !DILocation(line: 50, column: 19, scope: !7)
!47 = !DILocation(line: 51, column: 20, scope: !7)
!48 = !DILocation(line: 52, column: 20, scope: !7)
!49 = !DILocation(line: 56, column: 19, scope: !7)
!50 = !DILocation(line: 58, column: 20, scope: !7)
!51 = !DILocation(line: 59, column: 20, scope: !7)
!52 = !DILocation(line: 60, column: 20, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !56)
!54 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!55 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!56 = !DILocation(line: 62, column: 42, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !56)
!58 = !DILocation(line: 63, column: 20, scope: !7)
!59 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !60)
!60 = !DILocation(line: 64, column: 42, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !60)
!62 = !DILocation(line: 256, column: 15, scope: !63, inlinedAt: !66)
!63 = distinct !DILexicalBlockFile(scope: !65, file: !64, discriminator: 0)
!64 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!65 = distinct !DILexicalBlockFile(scope: !7, file: !64, discriminator: 0)
!66 = !DILocation(line: 67, column: 26, scope: !7)
!67 = !DILocation(line: 267, column: 36, scope: !65, inlinedAt: !66)
!68 = !DILocation(line: 69, column: 20, scope: !7)
!69 = !DILocation(line: 70, column: 28, scope: !7)
!70 = !DILocation(line: 70, column: 48, scope: !7)
!71 = !DILocation(line: 71, column: 4, scope: !7)
!72 = !DILocation(line: 72, column: 28, scope: !7)
!73 = !DILocation(line: 72, column: 40, scope: !7)
!74 = !DILocation(line: 72, column: 4, scope: !7)
