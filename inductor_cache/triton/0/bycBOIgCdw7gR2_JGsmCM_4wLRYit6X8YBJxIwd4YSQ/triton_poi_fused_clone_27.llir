; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %11 = lshr i32 %8, 4, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = or disjoint i32 %14, 8, !dbg !13
  %16 = icmp slt i32 %13, 16, !dbg !14
  %17 = icmp slt i32 %14, 16, !dbg !14
  %18 = icmp slt i32 %15, 16, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 6, !dbg !16
  %21 = lshr i32 %8, 2, !dbg !17
  %22 = and i32 %21, 31, !dbg !17
  %23 = and i32 %9, 60, !dbg !17
  %24 = or disjoint i32 %20, %22, !dbg !18
  %25 = or disjoint i32 %24, 32, !dbg !18
  %26 = or disjoint i32 %20, %23, !dbg !18
  %.frozen = freeze i32 %24, !dbg !19
  %27 = sdiv i32 %.frozen, 64, !dbg !19
  %28 = mul i32 %27, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %28, !dbg !20
  %.frozen3 = freeze i32 %25, !dbg !19
  %29 = sdiv i32 %.frozen3, 64, !dbg !19
  %30 = mul i32 %29, 64, !dbg !20
  %.decomposed4 = sub i32 %.frozen3, %30, !dbg !20
  %31 = ashr exact i32 %13, 2, !dbg !21
  %32 = shl nsw i32 %.decomposed, 2, !dbg !22
  %33 = shl nsw i32 %.decomposed4, 2, !dbg !22
  %34 = mul i32 %27, 3872, !dbg !23
  %35 = mul i32 %29, 3872, !dbg !23
  %36 = mul i32 %31, 3748096, !dbg !24
  %37 = add i32 %36, 120156, !dbg !25
  %38 = add i32 %37, %32, !dbg !26
  %39 = add i32 %38, %34, !dbg !27
  %40 = add i32 %37, %33, !dbg !26
  %41 = add i32 %40, %35, !dbg !27
  %42 = sext i32 %39 to i64, !dbg !28
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !28
  %44 = sext i32 %41 to i64, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !28
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %16) #2, !dbg !29
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !29
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !29
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !29
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !29
  %51 = bitcast i32 %47 to float, !dbg !29
  %52 = bitcast i32 %48 to float, !dbg !29
  %53 = bitcast i32 %49 to float, !dbg !29
  %54 = bitcast i32 %50 to float, !dbg !29
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %16) #2, !dbg !29
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !29
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !29
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !29
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !29
  %60 = bitcast i32 %56 to float, !dbg !29
  %61 = bitcast i32 %57 to float, !dbg !29
  %62 = bitcast i32 %58 to float, !dbg !29
  %63 = bitcast i32 %59 to float, !dbg !29
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1, i1 %16) #2, !dbg !30
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !30
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !30
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !30
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !30
  %69 = bitcast i32 %65 to float, !dbg !30
  %70 = bitcast i32 %66 to float, !dbg !30
  %71 = bitcast i32 %67 to float, !dbg !30
  %72 = bitcast i32 %68 to float, !dbg !30
  %73 = fadd float %51, %69, !dbg !31
  %74 = fadd float %52, %70, !dbg !31
  %75 = fadd float %53, %71, !dbg !31
  %76 = fadd float %54, %72, !dbg !31
  %77 = fadd float %60, %69, !dbg !31
  %78 = fadd float %61, %70, !dbg !31
  %79 = fadd float %62, %71, !dbg !31
  %80 = fadd float %63, %72, !dbg !31
  %81 = shl i32 %14, 12, !dbg !32
  %82 = shl i32 %15, 12, !dbg !32
  %83 = add i32 %26, %81, !dbg !33
  %84 = add i32 %26, %82, !dbg !33
  %85 = sext i32 %83 to i64, !dbg !34
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !34
  %87 = sext i32 %84 to i64, !dbg !34
  %88 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !34
  %89 = shl i32 %8, 8, !dbg !35
  %90 = and i32 %89, 768, !dbg !35
  %91 = or disjoint i32 %90, %22, !dbg !35
  %92 = and i32 %9, 508, !dbg !35
  %93 = lshr exact i32 %90, 4, !dbg !35
  %94 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %93, !dbg !35
  %95 = getelementptr float, ptr addrspace(3) %94, i32 %91, !dbg !35
  %96 = bitcast float %73 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #2, !dbg !35
  %97 = or disjoint i32 %91, 64, !dbg !35
  %98 = lshr i32 %97, 6, !dbg !35
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i32 %98, !dbg !35
  %100 = getelementptr float, ptr addrspace(3) %99, i32 %97, !dbg !35
  %101 = bitcast float %74 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #2, !dbg !35
  %102 = or disjoint i32 %91, 128, !dbg !35
  %103 = lshr i32 %102, 6, !dbg !35
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i32 %103, !dbg !35
  %105 = getelementptr float, ptr addrspace(3) %104, i32 %102, !dbg !35
  %106 = bitcast float %75 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #2, !dbg !35
  %107 = or disjoint i32 %91, 192, !dbg !35
  %108 = lshr i32 %107, 6, !dbg !35
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i32 %108, !dbg !35
  %110 = getelementptr float, ptr addrspace(3) %109, i32 %107, !dbg !35
  %111 = bitcast float %76 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #2, !dbg !35
  %112 = or disjoint i32 %91, 32, !dbg !35
  %113 = getelementptr float, ptr addrspace(3) %94, i32 %112, !dbg !35
  %114 = bitcast float %77 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #2, !dbg !35
  %115 = or disjoint i32 %91, 96, !dbg !35
  %116 = lshr i32 %115, 6, !dbg !35
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i32 %116, !dbg !35
  %118 = getelementptr float, ptr addrspace(3) %117, i32 %115, !dbg !35
  %119 = bitcast float %78 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #2, !dbg !35
  %120 = or disjoint i32 %91, 160, !dbg !35
  %121 = lshr i32 %120, 6, !dbg !35
  %122 = getelementptr float, ptr addrspace(3) @global_smem, i32 %121, !dbg !35
  %123 = getelementptr float, ptr addrspace(3) %122, i32 %120, !dbg !35
  %124 = bitcast float %79 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #2, !dbg !35
  %125 = or disjoint i32 %91, 224, !dbg !35
  %126 = lshr i32 %125, 6, !dbg !35
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i32 %126, !dbg !35
  %128 = getelementptr float, ptr addrspace(3) %127, i32 %125, !dbg !35
  %129 = bitcast float %80 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %130 = lshr i32 %92, 6, !dbg !35
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %130, !dbg !35
  %132 = getelementptr inbounds float, ptr addrspace(3) %131, i32 %92, !dbg !35
  %133 = load i32, ptr addrspace(3) %132, align 4, !dbg !35
  %134 = or disjoint i32 %92, 1, !dbg !35
  %135 = getelementptr inbounds float, ptr addrspace(3) %131, i32 %134, !dbg !35
  %136 = load i32, ptr addrspace(3) %135, align 4, !dbg !35
  %137 = or disjoint i32 %92, 2, !dbg !35
  %138 = getelementptr inbounds float, ptr addrspace(3) %131, i32 %137, !dbg !35
  %139 = load i32, ptr addrspace(3) %138, align 4, !dbg !35
  %140 = or disjoint i32 %92, 3, !dbg !35
  %141 = getelementptr inbounds float, ptr addrspace(3) %131, i32 %140, !dbg !35
  %142 = load i32, ptr addrspace(3) %141, align 4, !dbg !35
  %143 = or disjoint i32 %92, 512, !dbg !35
  %144 = lshr i32 %143, 6, !dbg !35
  %145 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %144, !dbg !35
  %146 = getelementptr inbounds float, ptr addrspace(3) %145, i32 %143, !dbg !35
  %147 = load i32, ptr addrspace(3) %146, align 4, !dbg !35
  %148 = or disjoint i32 %92, 513, !dbg !35
  %149 = lshr i32 %148, 6, !dbg !35
  %150 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %149, !dbg !35
  %151 = getelementptr inbounds float, ptr addrspace(3) %150, i32 %148, !dbg !35
  %152 = load i32, ptr addrspace(3) %151, align 4, !dbg !35
  %153 = or disjoint i32 %92, 514, !dbg !35
  %154 = lshr i32 %153, 6, !dbg !35
  %155 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %154, !dbg !35
  %156 = getelementptr inbounds float, ptr addrspace(3) %155, i32 %153, !dbg !35
  %157 = load i32, ptr addrspace(3) %156, align 4, !dbg !35
  %158 = or disjoint i32 %92, 515, !dbg !35
  %159 = lshr i32 %158, 6, !dbg !35
  %160 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %159, !dbg !35
  %161 = getelementptr inbounds float, ptr addrspace(3) %160, i32 %158, !dbg !35
  %162 = load i32, ptr addrspace(3) %161, align 4, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %133, i32 %136, i32 %139, i32 %142, ptr addrspace(1) %86, i1 %17) #2, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %147, i32 %152, i32 %157, i32 %162, ptr addrspace(1) %88, i1 %18) #2, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cranobslbvgcvl472qjh27m24w3arqf7vczmtwet5b5uo3lvwhle.py", directory: "inductor_cache/ra")
!4 = !{ptr @triton_poi_fused_clone_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_27", linkageName: "triton_poi_fused_clone_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 46, scope: !7)
!23 = !DILocation(line: 34, column: 56, scope: !7)
!24 = !DILocation(line: 34, column: 69, scope: !7)
!25 = !DILocation(line: 34, column: 44, scope: !7)
!26 = !DILocation(line: 34, column: 51, scope: !7)
!27 = !DILocation(line: 34, column: 61, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 74, scope: !7)
!30 = !DILocation(line: 35, column: 35, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 37, column: 35, scope: !7)
!33 = !DILocation(line: 37, column: 30, scope: !7)
!34 = !DILocation(line: 37, column: 25, scope: !7)
!35 = !DILocation(line: 37, column: 46, scope: !7)
!36 = !DILocation(line: 37, column: 4, scope: !7)
