; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__prelu_kernel_convolution_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 512, !dbg !13
  %13 = icmp slt i32 %11, 153760, !dbg !14
  %14 = icmp slt i32 %12, 153760, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %15 = sdiv i32 %.frozen, 3844, !dbg !15
  %.frozen1 = freeze i32 %12, !dbg !15
  %16 = sdiv i32 %.frozen1, 3844, !dbg !15
  %17 = srem i32 %15, 10, !dbg !16
  %18 = srem i32 %16, 10, !dbg !16
  %19 = mul i32 %15, 3844, !dbg !17
  %.decomposed = sub i32 %.frozen, %19, !dbg !17
  %20 = mul i32 %16, 3844, !dbg !17
  %.decomposed2 = sub i32 %.frozen1, %20, !dbg !17
  %21 = sext i32 %11 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !18
  %23 = sext i32 %12 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !18
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 %13) #1, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !19
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !19
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 %14) #1, !dbg !19
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !19
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !19
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !19
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !19
  %35 = sext i32 %17 to i64, !dbg !20
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !20
  %37 = sext i32 %18 to i64, !dbg !20
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !20
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %13) #1, !dbg !21
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %13) #1, !dbg !21
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %13) #1, !dbg !21
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %13) #1, !dbg !21
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %14) #1, !dbg !21
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %14) #1, !dbg !21
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %14) #1, !dbg !21
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %14) #1, !dbg !21
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #1, !dbg !22
  %48 = bitcast i32 %47 to float, !dbg !22
  %49 = insertelement <8 x i32> poison, i32 %34, i64 0, !dbg !19
  %50 = insertelement <8 x i32> %49, i32 %33, i64 1, !dbg !19
  %51 = insertelement <8 x i32> %50, i32 %32, i64 2, !dbg !19
  %52 = insertelement <8 x i32> %51, i32 %31, i64 3, !dbg !19
  %53 = insertelement <8 x i32> %52, i32 %29, i64 4, !dbg !19
  %54 = insertelement <8 x i32> %53, i32 %28, i64 5, !dbg !19
  %55 = insertelement <8 x i32> %54, i32 %27, i64 6, !dbg !19
  %56 = insertelement <8 x i32> %55, i32 %26, i64 7, !dbg !19
  %57 = bitcast <8 x i32> %56 to <8 x float>, !dbg !19
  %58 = insertelement <8 x i32> poison, i32 %46, i64 0, !dbg !21
  %59 = insertelement <8 x i32> %58, i32 %45, i64 1, !dbg !21
  %60 = insertelement <8 x i32> %59, i32 %44, i64 2, !dbg !21
  %61 = insertelement <8 x i32> %60, i32 %43, i64 3, !dbg !21
  %62 = insertelement <8 x i32> %61, i32 %42, i64 4, !dbg !21
  %63 = insertelement <8 x i32> %62, i32 %41, i64 5, !dbg !21
  %64 = insertelement <8 x i32> %63, i32 %40, i64 6, !dbg !21
  %65 = insertelement <8 x i32> %64, i32 %39, i64 7, !dbg !21
  %66 = bitcast <8 x i32> %65 to <8 x float>, !dbg !21
  %67 = fadd <8 x float> %57, %66, !dbg !23
  %68 = fcmp ogt <8 x float> %67, zeroinitializer, !dbg !24
  %69 = extractelement <8 x float> %67, i64 7, !dbg !25
  %70 = fmul float %69, %48, !dbg !26
  %71 = extractelement <8 x float> %67, i64 6, !dbg !25
  %72 = fmul float %71, %48, !dbg !26
  %73 = extractelement <8 x float> %67, i64 5, !dbg !25
  %74 = fmul float %73, %48, !dbg !26
  %75 = extractelement <8 x float> %67, i64 4, !dbg !25
  %76 = fmul float %75, %48, !dbg !26
  %77 = extractelement <8 x float> %67, i64 3, !dbg !25
  %78 = fmul float %77, %48, !dbg !26
  %79 = extractelement <8 x float> %67, i64 2, !dbg !25
  %80 = fmul float %79, %48, !dbg !26
  %81 = extractelement <8 x float> %67, i64 1, !dbg !25
  %82 = fmul float %81, %48, !dbg !26
  %83 = extractelement <8 x float> %67, i64 0, !dbg !25
  %84 = fmul float %83, %48, !dbg !26
  %85 = extractelement <8 x i1> %68, i64 7, !dbg !27
  %86 = select i1 %85, float %69, float %70, !dbg !27
  %87 = extractelement <8 x i1> %68, i64 6, !dbg !27
  %88 = select i1 %87, float %71, float %72, !dbg !27
  %89 = extractelement <8 x i1> %68, i64 5, !dbg !27
  %90 = select i1 %89, float %73, float %74, !dbg !27
  %91 = extractelement <8 x i1> %68, i64 4, !dbg !27
  %92 = select i1 %91, float %75, float %76, !dbg !27
  %93 = extractelement <8 x i1> %68, i64 3, !dbg !27
  %94 = select i1 %93, float %77, float %78, !dbg !27
  %95 = extractelement <8 x i1> %68, i64 2, !dbg !27
  %96 = select i1 %95, float %79, float %80, !dbg !27
  %97 = extractelement <8 x i1> %68, i64 1, !dbg !27
  %98 = select i1 %97, float %81, float %82, !dbg !27
  %99 = extractelement <8 x i1> %68, i64 0, !dbg !27
  %100 = select i1 %99, float %83, float %84, !dbg !27
  %101 = bitcast float %69 to i32, !dbg !25
  %102 = bitcast float %71 to i32, !dbg !25
  %103 = bitcast float %73 to i32, !dbg !25
  %104 = bitcast float %75 to i32, !dbg !25
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %101, i32 %102, i32 %103, i32 %104, ptr addrspace(1) %22, i1 %13) #1, !dbg !25
  %105 = bitcast float %77 to i32, !dbg !25
  %106 = bitcast float %79 to i32, !dbg !25
  %107 = bitcast float %81 to i32, !dbg !25
  %108 = bitcast float %83 to i32, !dbg !25
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %105, i32 %106, i32 %107, i32 %108, ptr addrspace(1) %24, i1 %14) #1, !dbg !25
  %109 = mul i32 %15, 3872, !dbg !28
  %110 = mul i32 %16, 3872, !dbg !28
  %111 = add i32 %109, %.decomposed, !dbg !29
  %112 = add i32 %110, %.decomposed2, !dbg !29
  %113 = sext i32 %111 to i64, !dbg !30
  %114 = getelementptr float, ptr addrspace(1) %3, i64 %113, !dbg !30
  %115 = sext i32 %112 to i64, !dbg !30
  %116 = getelementptr float, ptr addrspace(1) %3, i64 %115, !dbg !30
  %117 = bitcast float %86 to i32, !dbg !31
  %118 = bitcast float %88 to i32, !dbg !31
  %119 = bitcast float %90 to i32, !dbg !31
  %120 = bitcast float %92 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %117, i32 %118, i32 %119, i32 %120, ptr addrspace(1) %114, i1 %13) #1, !dbg !31
  %121 = bitcast float %94 to i32, !dbg !31
  %122 = bitcast float %96 to i32, !dbg !31
  %123 = bitcast float %98 to i32, !dbg !31
  %124 = bitcast float %100 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %121, i32 %122, i32 %123, i32 %124, ptr addrspace(1) %116, i1 %14) #1, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceysbncmgp5tobwzocyhpe7vdvsdx5kpwp4nfsfmbnnsymkv3ljq.py", directory: "inductor_cache/ey")
!4 = !{ptr @triton_poi_fused__prelu_kernel_convolution_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__prelu_kernel_convolution_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__prelu_kernel_convolution_0", linkageName: "triton_poi_fused__prelu_kernel_convolution_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 29, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 34, scope: !7)
!19 = !DILocation(line: 28, column: 39, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 18, scope: !7)
!24 = !DILocation(line: 34, column: 18, scope: !7)
!25 = !DILocation(line: 37, column: 39, scope: !7)
!26 = !DILocation(line: 35, column: 18, scope: !7)
!27 = !DILocation(line: 36, column: 32, scope: !7)
!28 = !DILocation(line: 38, column: 35, scope: !7)
!29 = !DILocation(line: 38, column: 30, scope: !7)
!30 = !DILocation(line: 38, column: 25, scope: !7)
!31 = !DILocation(line: 38, column: 46, scope: !7)
!32 = !DILocation(line: 38, column: 4, scope: !7)
