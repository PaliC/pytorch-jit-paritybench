; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit1 = lshr i32 %12, 6, !dbg !12
  %13 = and i32 %.lobit1, 3, !dbg !12
  %14 = shl i32 %12, 2, !dbg !12
  %15 = or disjoint i32 %11, %13, !dbg !13
  %16 = or disjoint i32 %15, 4, !dbg !13
  %17 = or disjoint i32 %15, 8, !dbg !13
  %18 = or disjoint i32 %15, 12, !dbg !13
  %19 = icmp slt i32 %15, 16, !dbg !14
  %20 = icmp slt i32 %16, 16, !dbg !14
  %21 = icmp slt i32 %17, 16, !dbg !14
  %22 = icmp slt i32 %18, 16, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %24 = shl i32 %23, 8, !dbg !16
  %25 = and i32 %14, 252, !dbg !17
  %26 = and i32 %12, 255, !dbg !17
  %27 = or disjoint i32 %24, %25, !dbg !18
  %28 = or disjoint i32 %24, %26, !dbg !18
  %29 = icmp slt i32 %27, 512, !dbg !19
  %30 = icmp slt i32 %28, 512, !dbg !19
  %31 = shl i32 %15, 9, !dbg !20
  %32 = shl i32 %16, 9, !dbg !20
  %33 = shl i32 %17, 9, !dbg !20
  %34 = shl i32 %18, 9, !dbg !20
  %35 = add i32 %27, %31, !dbg !21
  %36 = add i32 %27, %32, !dbg !21
  %37 = add i32 %27, %33, !dbg !21
  %38 = add i32 %27, %34, !dbg !21
  %39 = sext i32 %35 to i64, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !22
  %41 = sext i32 %36 to i64, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !22
  %43 = sext i32 %37 to i64, !dbg !22
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !22
  %45 = sext i32 %38 to i64, !dbg !22
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !22
  %47 = and i1 %19, %29, !dbg !23
  %48 = and i1 %20, %29, !dbg !23
  %49 = and i1 %21, %29, !dbg !23
  %50 = and i1 %22, %29, !dbg !23
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %47) #4, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !24
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %48) #4, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !24
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !24
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !24
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %49) #4, !dbg !24
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !24
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !24
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %50) #4, !dbg !24
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !24
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !24
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !24
  %71 = and i32 %14, 1020, !dbg !24
  %72 = lshr i32 %71, 8, !dbg !24
  %73 = or disjoint i32 %72, %71, !dbg !24
  %74 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %73, !dbg !24
  %75 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 true) #4, !dbg !24
  %76 = or disjoint i32 %71, 1, !dbg !24
  %77 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %72, !dbg !24
  %78 = getelementptr inbounds float, ptr addrspace(3) %77, i32 %76, !dbg !24
  %79 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #4, !dbg !24
  %80 = or disjoint i32 %71, 2, !dbg !24
  %81 = getelementptr inbounds float, ptr addrspace(3) %77, i32 %80, !dbg !24
  %82 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #4, !dbg !24
  %83 = or disjoint i32 %71, 3, !dbg !24
  %84 = getelementptr inbounds float, ptr addrspace(3) %77, i32 %83, !dbg !24
  %85 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %85, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %86 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %26, !dbg !24
  %87 = load float, ptr addrspace(3) %86, align 4, !dbg !24
  %88 = getelementptr inbounds i8, ptr addrspace(3) %86, i32 1028, !dbg !24
  %89 = load float, ptr addrspace(3) %88, align 4, !dbg !24
  %90 = getelementptr inbounds i8, ptr addrspace(3) %86, i32 2056, !dbg !24
  %91 = load float, ptr addrspace(3) %90, align 4, !dbg !24
  %92 = getelementptr inbounds i8, ptr addrspace(3) %86, i32 3084, !dbg !24
  %93 = load float, ptr addrspace(3) %92, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %94 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %94, i1 true) #4, !dbg !24
  %95 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %95, i1 true) #4, !dbg !24
  %96 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %96, i1 true) #4, !dbg !24
  %97 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %97, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %98 = load float, ptr addrspace(3) %86, align 4, !dbg !24
  %99 = load float, ptr addrspace(3) %88, align 4, !dbg !24
  %100 = load float, ptr addrspace(3) %90, align 4, !dbg !24
  %101 = load float, ptr addrspace(3) %92, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %102 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %102, i1 true) #4, !dbg !24
  %103 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %103, i1 true) #4, !dbg !24
  %104 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %104, i1 true) #4, !dbg !24
  %105 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %105, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %106 = load float, ptr addrspace(3) %86, align 4, !dbg !24
  %107 = load float, ptr addrspace(3) %88, align 4, !dbg !24
  %108 = load float, ptr addrspace(3) %90, align 4, !dbg !24
  %109 = load float, ptr addrspace(3) %92, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %110 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %110, i1 true) #4, !dbg !24
  %111 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %111, i1 true) #4, !dbg !24
  %112 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %112, i1 true) #4, !dbg !24
  %113 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %113, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %114 = load float, ptr addrspace(3) %86, align 4, !dbg !24
  %115 = load float, ptr addrspace(3) %88, align 4, !dbg !24
  %116 = load float, ptr addrspace(3) %90, align 4, !dbg !24
  %117 = load float, ptr addrspace(3) %92, align 4, !dbg !24
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !25
  %119 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !25
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !25
  %121 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !25
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %118, i1 %47) #4, !dbg !26
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !26
  %124 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !26
  %125 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !26
  %126 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !26
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %119, i1 %48) #4, !dbg !26
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !26
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !26
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !26
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !26
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %120, i1 %49) #4, !dbg !26
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !26
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !26
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !26
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !26
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %121, i1 %50) #4, !dbg !26
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !26
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !26
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !26
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %142 = insertelement <1 x i32> poison, i32 %123, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %142, i1 true) #4, !dbg !26
  %143 = insertelement <1 x i32> poison, i32 %124, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %143, i1 true) #4, !dbg !26
  %144 = insertelement <1 x i32> poison, i32 %125, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %144, i1 true) #4, !dbg !26
  %145 = insertelement <1 x i32> poison, i32 %126, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %145, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %146 = load float, ptr addrspace(3) %86, align 4, !dbg !26
  %147 = load float, ptr addrspace(3) %88, align 4, !dbg !26
  %148 = load float, ptr addrspace(3) %90, align 4, !dbg !26
  %149 = load float, ptr addrspace(3) %92, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %150 = insertelement <1 x i32> poison, i32 %128, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %150, i1 true) #4, !dbg !26
  %151 = insertelement <1 x i32> poison, i32 %129, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %151, i1 true) #4, !dbg !26
  %152 = insertelement <1 x i32> poison, i32 %130, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %152, i1 true) #4, !dbg !26
  %153 = insertelement <1 x i32> poison, i32 %131, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %153, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %154 = load float, ptr addrspace(3) %86, align 4, !dbg !26
  %155 = load float, ptr addrspace(3) %88, align 4, !dbg !26
  %156 = load float, ptr addrspace(3) %90, align 4, !dbg !26
  %157 = load float, ptr addrspace(3) %92, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %158 = insertelement <1 x i32> poison, i32 %133, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %158, i1 true) #4, !dbg !26
  %159 = insertelement <1 x i32> poison, i32 %134, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %159, i1 true) #4, !dbg !26
  %160 = insertelement <1 x i32> poison, i32 %135, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %160, i1 true) #4, !dbg !26
  %161 = insertelement <1 x i32> poison, i32 %136, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %161, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %162 = load float, ptr addrspace(3) %86, align 4, !dbg !26
  %163 = load float, ptr addrspace(3) %88, align 4, !dbg !26
  %164 = load float, ptr addrspace(3) %90, align 4, !dbg !26
  %165 = load float, ptr addrspace(3) %92, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %166 = insertelement <1 x i32> poison, i32 %138, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %166, i1 true) #4, !dbg !26
  %167 = insertelement <1 x i32> poison, i32 %139, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %167, i1 true) #4, !dbg !26
  %168 = insertelement <1 x i32> poison, i32 %140, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %168, i1 true) #4, !dbg !26
  %169 = insertelement <1 x i32> poison, i32 %141, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %169, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %170 = load float, ptr addrspace(3) %86, align 4, !dbg !26
  %171 = load float, ptr addrspace(3) %88, align 4, !dbg !26
  %172 = load float, ptr addrspace(3) %90, align 4, !dbg !26
  %173 = load float, ptr addrspace(3) %92, align 4, !dbg !26
  %174 = sext i32 %28 to i64, !dbg !27
  %175 = getelementptr float, ptr addrspace(1) %2, i64 %174, !dbg !27
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 %30) #4, !dbg !28
  %177 = getelementptr float, ptr addrspace(1) %3, i64 %174, !dbg !29
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 %30) #4, !dbg !30
  %179 = bitcast i32 %178 to float, !dbg !30
  %180 = getelementptr float, ptr addrspace(1) %4, i64 %174, !dbg !31
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 %30) #4, !dbg !32
  %182 = getelementptr float, ptr addrspace(1) %5, i64 %174, !dbg !33
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 %30) #4, !dbg !34
  %184 = fadd float %179, 0x3EE4F8B580000000, !dbg !35
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %185, 0, !dbg !36
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %186, 0, !dbg !36
  br i1 %.not.i, label %192, label %187, !dbg !36

187:                                              ; preds = %9
  br i1 %.not1.i, label %190, label %188, !dbg !36

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %184) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %184) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

192:                                              ; preds = %9
  br i1 %.not1.i, label %195, label %193, !dbg !36

193:                                              ; preds = %192
  %194 = tail call float @llvm.nvvm.sqrt.rn.f(float %184) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

195:                                              ; preds = %192
  %196 = tail call float @llvm.nvvm.sqrt.approx.f(float %184) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %188, %190, %193, %195
  %.0.i = phi float [ %189, %188 ], [ %191, %190 ], [ %194, %193 ], [ %196, %195 ], !dbg !36
  %197 = lshr i32 %12, 2, !dbg !17
  %198 = and i32 %197, 63, !dbg !17
  %199 = or disjoint i32 %198, %24, !dbg !18
  %200 = or disjoint i32 %199, 192, !dbg !18
  %201 = icmp slt i32 %200, 512, !dbg !19
  %202 = and i32 %14, 12, !dbg !12
  %203 = or disjoint i32 %11, %202, !dbg !13
  %204 = icmp slt i32 %203, 16, !dbg !14
  %205 = and i1 %204, %201, !dbg !23
  %206 = or disjoint i32 %199, 128, !dbg !18
  %207 = icmp slt i32 %206, 512, !dbg !19
  %208 = and i1 %204, %207, !dbg !23
  %209 = or disjoint i32 %199, 64, !dbg !18
  %210 = icmp slt i32 %209, 512, !dbg !19
  %211 = and i1 %204, %210, !dbg !23
  %212 = icmp slt i32 %199, 512, !dbg !19
  %213 = and i1 %204, %212, !dbg !23
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %215 = insertelement <16 x float> poison, float %173, i64 0, !dbg !38
  %216 = insertelement <16 x float> %215, float %172, i64 1, !dbg !38
  %217 = insertelement <16 x float> %216, float %171, i64 2, !dbg !38
  %218 = insertelement <16 x float> %217, float %170, i64 3, !dbg !38
  %219 = insertelement <16 x float> %218, float %165, i64 4, !dbg !38
  %220 = insertelement <16 x float> %219, float %164, i64 5, !dbg !38
  %221 = insertelement <16 x float> %220, float %163, i64 6, !dbg !38
  %222 = insertelement <16 x float> %221, float %162, i64 7, !dbg !38
  %223 = insertelement <16 x float> %222, float %157, i64 8, !dbg !38
  %224 = insertelement <16 x float> %223, float %156, i64 9, !dbg !38
  %225 = insertelement <16 x float> %224, float %155, i64 10, !dbg !38
  %226 = insertelement <16 x float> %225, float %154, i64 11, !dbg !38
  %227 = insertelement <16 x float> %226, float %149, i64 12, !dbg !38
  %228 = insertelement <16 x float> %227, float %148, i64 13, !dbg !38
  %229 = insertelement <16 x float> %228, float %147, i64 14, !dbg !38
  %230 = insertelement <16 x float> %229, float %146, i64 15, !dbg !38
  %231 = insertelement <16 x i32> poison, i32 %176, i64 0, !dbg !38
  %232 = bitcast <16 x i32> %231 to <16 x float>, !dbg !38
  %233 = shufflevector <16 x float> %232, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !38
  %234 = fsub <16 x float> %230, %233, !dbg !38
  %235 = insertelement <16 x float> poison, float %214, i64 0, !dbg !39
  %236 = shufflevector <16 x float> %235, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !39
  %237 = fmul <16 x float> %234, %236, !dbg !39
  %238 = insertelement <16 x i32> poison, i32 %181, i64 0, !dbg !40
  %239 = bitcast <16 x i32> %238 to <16 x float>, !dbg !40
  %240 = shufflevector <16 x float> %239, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !40
  %241 = fmul <16 x float> %237, %240, !dbg !40
  %242 = insertelement <16 x i32> poison, i32 %183, i64 0, !dbg !41
  %243 = bitcast <16 x i32> %242 to <16 x float>, !dbg !41
  %244 = shufflevector <16 x float> %243, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !41
  %245 = fadd <16 x float> %241, %244, !dbg !41
  %246 = insertelement <16 x float> poison, float %117, i64 0, !dbg !42
  %247 = insertelement <16 x float> %246, float %116, i64 1, !dbg !42
  %248 = insertelement <16 x float> %247, float %115, i64 2, !dbg !42
  %249 = insertelement <16 x float> %248, float %114, i64 3, !dbg !42
  %250 = insertelement <16 x float> %249, float %109, i64 4, !dbg !42
  %251 = insertelement <16 x float> %250, float %108, i64 5, !dbg !42
  %252 = insertelement <16 x float> %251, float %107, i64 6, !dbg !42
  %253 = insertelement <16 x float> %252, float %106, i64 7, !dbg !42
  %254 = insertelement <16 x float> %253, float %101, i64 8, !dbg !42
  %255 = insertelement <16 x float> %254, float %100, i64 9, !dbg !42
  %256 = insertelement <16 x float> %255, float %99, i64 10, !dbg !42
  %257 = insertelement <16 x float> %256, float %98, i64 11, !dbg !42
  %258 = insertelement <16 x float> %257, float %93, i64 12, !dbg !42
  %259 = insertelement <16 x float> %258, float %91, i64 13, !dbg !42
  %260 = insertelement <16 x float> %259, float %89, i64 14, !dbg !42
  %261 = insertelement <16 x float> %260, float %87, i64 15, !dbg !42
  %262 = fadd <16 x float> %261, %245, !dbg !42
  %263 = fcmp olt <16 x float> %262, zeroinitializer, !dbg !43
  %264 = extractelement <16 x i1> %263, i64 15, !dbg !47
  %265 = extractelement <16 x float> %262, i64 15, !dbg !47
  %266 = select i1 %264, float 0.000000e+00, float %265, !dbg !47
  %267 = extractelement <16 x i1> %263, i64 14, !dbg !47
  %268 = extractelement <16 x float> %262, i64 14, !dbg !47
  %269 = select i1 %267, float 0.000000e+00, float %268, !dbg !47
  %270 = extractelement <16 x i1> %263, i64 13, !dbg !47
  %271 = extractelement <16 x float> %262, i64 13, !dbg !47
  %272 = select i1 %270, float 0.000000e+00, float %271, !dbg !47
  %273 = extractelement <16 x i1> %263, i64 12, !dbg !47
  %274 = extractelement <16 x float> %262, i64 12, !dbg !47
  %275 = select i1 %273, float 0.000000e+00, float %274, !dbg !47
  %276 = extractelement <16 x i1> %263, i64 11, !dbg !47
  %277 = extractelement <16 x float> %262, i64 11, !dbg !47
  %278 = select i1 %276, float 0.000000e+00, float %277, !dbg !47
  %279 = extractelement <16 x i1> %263, i64 10, !dbg !47
  %280 = extractelement <16 x float> %262, i64 10, !dbg !47
  %281 = select i1 %279, float 0.000000e+00, float %280, !dbg !47
  %282 = extractelement <16 x i1> %263, i64 9, !dbg !47
  %283 = extractelement <16 x float> %262, i64 9, !dbg !47
  %284 = select i1 %282, float 0.000000e+00, float %283, !dbg !47
  %285 = extractelement <16 x i1> %263, i64 8, !dbg !47
  %286 = extractelement <16 x float> %262, i64 8, !dbg !47
  %287 = select i1 %285, float 0.000000e+00, float %286, !dbg !47
  %288 = extractelement <16 x i1> %263, i64 7, !dbg !47
  %289 = extractelement <16 x float> %262, i64 7, !dbg !47
  %290 = select i1 %288, float 0.000000e+00, float %289, !dbg !47
  %291 = extractelement <16 x i1> %263, i64 6, !dbg !47
  %292 = extractelement <16 x float> %262, i64 6, !dbg !47
  %293 = select i1 %291, float 0.000000e+00, float %292, !dbg !47
  %294 = extractelement <16 x i1> %263, i64 5, !dbg !47
  %295 = extractelement <16 x float> %262, i64 5, !dbg !47
  %296 = select i1 %294, float 0.000000e+00, float %295, !dbg !47
  %297 = extractelement <16 x i1> %263, i64 4, !dbg !47
  %298 = extractelement <16 x float> %262, i64 4, !dbg !47
  %299 = select i1 %297, float 0.000000e+00, float %298, !dbg !47
  %300 = extractelement <16 x i1> %263, i64 3, !dbg !47
  %301 = extractelement <16 x float> %262, i64 3, !dbg !47
  %302 = select i1 %300, float 0.000000e+00, float %301, !dbg !47
  %303 = extractelement <16 x i1> %263, i64 2, !dbg !47
  %304 = extractelement <16 x float> %262, i64 2, !dbg !47
  %305 = select i1 %303, float 0.000000e+00, float %304, !dbg !47
  %306 = extractelement <16 x i1> %263, i64 1, !dbg !47
  %307 = extractelement <16 x float> %262, i64 1, !dbg !47
  %308 = select i1 %306, float 0.000000e+00, float %307, !dbg !47
  %309 = extractelement <16 x i1> %263, i64 0, !dbg !47
  %310 = extractelement <16 x float> %262, i64 0, !dbg !47
  %311 = select i1 %309, float 0.000000e+00, float %310, !dbg !47
  %312 = shl i32 %199, 2, !dbg !48
  %313 = shl i32 %209, 2, !dbg !48
  %314 = shl i32 %206, 2, !dbg !48
  %315 = shl i32 %200, 2, !dbg !48
  %316 = shl i32 %203, 9, !dbg !49
  %317 = add i32 %312, %316, !dbg !50
  %318 = add i32 %313, %316, !dbg !50
  %319 = add i32 %314, %316, !dbg !50
  %320 = add i32 %315, %316, !dbg !50
  %321 = sext i32 %317 to i64, !dbg !51
  %322 = getelementptr float, ptr addrspace(1) %6, i64 %321, !dbg !51
  %323 = sext i32 %318 to i64, !dbg !51
  %324 = getelementptr float, ptr addrspace(1) %6, i64 %323, !dbg !51
  %325 = sext i32 %319 to i64, !dbg !51
  %326 = getelementptr float, ptr addrspace(1) %6, i64 %325, !dbg !51
  %327 = sext i32 %320 to i64, !dbg !51
  %328 = getelementptr float, ptr addrspace(1) %6, i64 %327, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %329 = shl i32 %12, 4, !dbg !52
  %330 = and i32 %329, 4080, !dbg !52
  %331 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %330, !dbg !52
  %332 = getelementptr float, ptr addrspace(3) %331, i32 %330, !dbg !52
  %333 = bitcast float %266 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %332, <1 x i32> %333, i1 true) #4, !dbg !52
  %334 = or disjoint i32 %330, 1, !dbg !52
  %335 = getelementptr float, ptr addrspace(3) %331, i32 %334, !dbg !52
  %336 = bitcast float %269 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, <1 x i32> %336, i1 true) #4, !dbg !52
  %337 = or disjoint i32 %330, 2, !dbg !52
  %338 = getelementptr float, ptr addrspace(3) %331, i32 %337, !dbg !52
  %339 = bitcast float %272 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %338, <1 x i32> %339, i1 true) #4, !dbg !52
  %340 = or disjoint i32 %330, 3, !dbg !52
  %341 = getelementptr float, ptr addrspace(3) %331, i32 %340, !dbg !52
  %342 = bitcast float %275 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %341, <1 x i32> %342, i1 true) #4, !dbg !52
  %343 = or disjoint i32 %330, 4, !dbg !52
  %344 = getelementptr float, ptr addrspace(3) %331, i32 %343, !dbg !52
  %345 = bitcast float %278 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %344, <1 x i32> %345, i1 true) #4, !dbg !52
  %346 = or disjoint i32 %330, 5, !dbg !52
  %347 = getelementptr float, ptr addrspace(3) %331, i32 %346, !dbg !52
  %348 = bitcast float %281 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %347, <1 x i32> %348, i1 true) #4, !dbg !52
  %349 = or disjoint i32 %330, 6, !dbg !52
  %350 = getelementptr float, ptr addrspace(3) %331, i32 %349, !dbg !52
  %351 = bitcast float %284 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %350, <1 x i32> %351, i1 true) #4, !dbg !52
  %352 = or disjoint i32 %330, 7, !dbg !52
  %353 = getelementptr float, ptr addrspace(3) %331, i32 %352, !dbg !52
  %354 = bitcast float %287 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %353, <1 x i32> %354, i1 true) #4, !dbg !52
  %355 = or disjoint i32 %330, 8, !dbg !52
  %356 = getelementptr float, ptr addrspace(3) %331, i32 %355, !dbg !52
  %357 = bitcast float %290 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %356, <1 x i32> %357, i1 true) #4, !dbg !52
  %358 = or disjoint i32 %330, 9, !dbg !52
  %359 = getelementptr float, ptr addrspace(3) %331, i32 %358, !dbg !52
  %360 = bitcast float %293 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %359, <1 x i32> %360, i1 true) #4, !dbg !52
  %361 = or disjoint i32 %330, 10, !dbg !52
  %362 = getelementptr float, ptr addrspace(3) %331, i32 %361, !dbg !52
  %363 = bitcast float %296 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %362, <1 x i32> %363, i1 true) #4, !dbg !52
  %364 = or disjoint i32 %330, 11, !dbg !52
  %365 = getelementptr float, ptr addrspace(3) %331, i32 %364, !dbg !52
  %366 = bitcast float %299 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %365, <1 x i32> %366, i1 true) #4, !dbg !52
  %367 = or disjoint i32 %330, 12, !dbg !52
  %368 = getelementptr float, ptr addrspace(3) %331, i32 %367, !dbg !52
  %369 = bitcast float %302 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %368, <1 x i32> %369, i1 true) #4, !dbg !52
  %370 = or disjoint i32 %330, 13, !dbg !52
  %371 = getelementptr float, ptr addrspace(3) %331, i32 %370, !dbg !52
  %372 = bitcast float %305 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %371, <1 x i32> %372, i1 true) #4, !dbg !52
  %373 = or disjoint i32 %330, 14, !dbg !52
  %374 = getelementptr float, ptr addrspace(3) %331, i32 %373, !dbg !52
  %375 = bitcast float %308 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %374, <1 x i32> %375, i1 true) #4, !dbg !52
  %376 = or disjoint i32 %330, 15, !dbg !52
  %377 = getelementptr float, ptr addrspace(3) %331, i32 %376, !dbg !52
  %378 = bitcast float %311 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %377, <1 x i32> %378, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %379 = and i32 %12, 252, !dbg !52
  %380 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %379, !dbg !52
  %381 = getelementptr inbounds float, ptr addrspace(3) %380, i32 %71, !dbg !52
  %382 = or disjoint i32 %71, 1024, !dbg !52
  %383 = lshr exact i32 %382, 2, !dbg !52
  %384 = and i32 %383, 508, !dbg !52
  %385 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %384, !dbg !52
  %386 = getelementptr inbounds float, ptr addrspace(3) %385, i32 %382, !dbg !52
  %387 = load <4 x i32>, ptr addrspace(3) %386, align 16, !dbg !52
  %388 = or disjoint i32 %71, 2048, !dbg !52
  %389 = lshr exact i32 %388, 2, !dbg !52
  %390 = and i32 %389, 764, !dbg !52
  %391 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %390, !dbg !52
  %392 = getelementptr inbounds float, ptr addrspace(3) %391, i32 %388, !dbg !52
  %393 = load <4 x i32>, ptr addrspace(3) %392, align 16, !dbg !52
  %394 = or disjoint i32 %71, 3072, !dbg !52
  %395 = lshr exact i32 %394, 2, !dbg !52
  %396 = and i32 %395, 1020, !dbg !52
  %397 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %396, !dbg !52
  %398 = getelementptr inbounds float, ptr addrspace(3) %397, i32 %394, !dbg !52
  %399 = load <4 x i32>, ptr addrspace(3) %398, align 16, !dbg !52
  %.extract = load i32, ptr addrspace(3) %381, align 16, !dbg !52
  %400 = getelementptr inbounds i8, ptr addrspace(3) %381, i32 4, !dbg !52
  %.extract20 = load i32, ptr addrspace(3) %400, align 4, !dbg !52
  %401 = getelementptr inbounds i8, ptr addrspace(3) %381, i32 8, !dbg !52
  %.extract21 = load i32, ptr addrspace(3) %401, align 8, !dbg !52
  %402 = getelementptr inbounds i8, ptr addrspace(3) %381, i32 12, !dbg !52
  %.extract22 = load i32, ptr addrspace(3) %402, align 4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %322, i1 %213) #4, !dbg !52
  %.extract23 = extractelement <4 x i32> %387, i64 0, !dbg !52
  %.extract24 = extractelement <4 x i32> %387, i64 1, !dbg !52
  %.extract25 = extractelement <4 x i32> %387, i64 2, !dbg !52
  %.extract26 = extractelement <4 x i32> %387, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %324, i1 %211) #4, !dbg !52
  %.extract27 = extractelement <4 x i32> %393, i64 0, !dbg !52
  %.extract28 = extractelement <4 x i32> %393, i64 1, !dbg !52
  %.extract29 = extractelement <4 x i32> %393, i64 2, !dbg !52
  %.extract30 = extractelement <4 x i32> %393, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %326, i1 %208) #4, !dbg !52
  %.extract31 = extractelement <4 x i32> %399, i64 0, !dbg !52
  %.extract32 = extractelement <4 x i32> %399, i64 1, !dbg !52
  %.extract33 = extractelement <4 x i32> %399, i64 2, !dbg !52
  %.extract34 = extractelement <4 x i32> %399, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %328, i1 %205) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfatoxx45sr3nagt2ufcgvzuabeeb5odv3kk2dve5e4fjo5vsrka.py", directory: "inductor_cache/fa")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_23, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_23", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 52, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 44, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 35, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 37, column: 31, scope: !7)
!34 = !DILocation(line: 37, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 41, column: 26, scope: !7)
!37 = !DILocation(line: 43, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 18, scope: !7)
!39 = !DILocation(line: 46, column: 19, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 49, column: 19, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 51, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 52, column: 32, scope: !7)
!49 = !DILocation(line: 52, column: 42, scope: !7)
!50 = !DILocation(line: 52, column: 37, scope: !7)
!51 = !DILocation(line: 52, column: 25, scope: !7)
!52 = !DILocation(line: 52, column: 54, scope: !7)
!53 = !DILocation(line: 52, column: 4, scope: !7)
