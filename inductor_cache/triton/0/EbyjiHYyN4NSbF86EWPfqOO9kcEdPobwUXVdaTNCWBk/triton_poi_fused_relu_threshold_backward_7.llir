; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_relu_threshold_backward_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 3, !dbg !12
  %10 = and i32 %9, 24, !dbg !12
  %11 = lshr i32 %8, 3, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %12, 16, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %14, 4, !dbg !13
  %16 = or disjoint i32 %7, %12, !dbg !13
  %17 = or disjoint i32 %7, %13, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %19 = shl i32 %18, 5, !dbg !15
  %20 = lshr i32 %8, 2, !dbg !16
  %21 = and i32 %20, 31, !dbg !16
  %22 = shl i32 %8, 2, !dbg !16
  %23 = and i32 %22, 28, !dbg !16
  %24 = or disjoint i32 %19, %21, !dbg !17
  %25 = or disjoint i32 %19, %23, !dbg !17
  %.frozen = freeze i32 %14, !dbg !18
  %26 = sdiv i32 %.frozen, 2048, !dbg !18
  %27 = mul i32 %26, 2048, !dbg !19
  %.decomposed = sub i32 %.frozen, %27, !dbg !19
  %28 = srem i32 %15, 2048, !dbg !19
  %29 = shl i32 %24, 11, !dbg !20
  %30 = shl i32 %26, 23, !dbg !21
  %31 = add i32 %30, %29, !dbg !22
  %32 = add i32 %31, %.decomposed, !dbg !23
  %33 = add i32 %31, %28, !dbg !23
  %34 = sext i32 %32 to i64, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !24
  %36 = sext i32 %33 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !24
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #2, !dbg !25
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !25
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !25
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !25
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !25
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #2, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !25
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !25
  %48 = shl i32 %16, 12, !dbg !26
  %49 = shl i32 %17, 12, !dbg !26
  %50 = add i32 %25, %48, !dbg !27
  %51 = add i32 %25, %49, !dbg !27
  %52 = sext i32 %50 to i64, !dbg !28
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !28
  %54 = sext i32 %51 to i64, !dbg !28
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !28
  %56 = shl i32 %8, 8, !dbg !29
  %57 = and i32 %56, 768, !dbg !29
  %58 = or disjoint i32 %57, %21, !dbg !29
  %59 = and i32 %22, 508, !dbg !29
  %60 = lshr exact i32 %57, 3, !dbg !29
  %61 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %60, !dbg !29
  %62 = getelementptr float, ptr addrspace(3) %61, i32 %58, !dbg !29
  %63 = or disjoint i32 %58, 32, !dbg !29
  %64 = lshr i32 %63, 5, !dbg !29
  %65 = getelementptr float, ptr addrspace(3) @global_smem, i32 %64, !dbg !29
  %66 = getelementptr float, ptr addrspace(3) %65, i32 %63, !dbg !29
  %67 = or disjoint i32 %58, 64, !dbg !29
  %68 = lshr i32 %67, 5, !dbg !29
  %69 = getelementptr float, ptr addrspace(3) @global_smem, i32 %68, !dbg !29
  %70 = getelementptr float, ptr addrspace(3) %69, i32 %67, !dbg !29
  %71 = or disjoint i32 %58, 96, !dbg !29
  %72 = lshr i32 %71, 5, !dbg !29
  %73 = getelementptr float, ptr addrspace(3) @global_smem, i32 %72, !dbg !29
  %74 = getelementptr float, ptr addrspace(3) %73, i32 %71, !dbg !29
  %75 = or disjoint i32 %58, 128, !dbg !29
  %76 = lshr i32 %75, 5, !dbg !29
  %77 = getelementptr float, ptr addrspace(3) @global_smem, i32 %76, !dbg !29
  %78 = getelementptr float, ptr addrspace(3) %77, i32 %75, !dbg !29
  %79 = or disjoint i32 %58, 160, !dbg !29
  %80 = lshr i32 %79, 5, !dbg !29
  %81 = getelementptr float, ptr addrspace(3) @global_smem, i32 %80, !dbg !29
  %82 = getelementptr float, ptr addrspace(3) %81, i32 %79, !dbg !29
  %83 = or disjoint i32 %58, 192, !dbg !29
  %84 = lshr i32 %83, 5, !dbg !29
  %85 = getelementptr float, ptr addrspace(3) @global_smem, i32 %84, !dbg !29
  %86 = getelementptr float, ptr addrspace(3) %85, i32 %83, !dbg !29
  %87 = or disjoint i32 %58, 224, !dbg !29
  %88 = lshr i32 %87, 5, !dbg !29
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i32 %88, !dbg !29
  %90 = getelementptr float, ptr addrspace(3) %89, i32 %87, !dbg !29
  %91 = lshr i32 %59, 5, !dbg !29
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %91, !dbg !29
  %93 = getelementptr inbounds float, ptr addrspace(3) %92, i32 %59, !dbg !29
  %94 = or disjoint i32 %59, 1, !dbg !29
  %95 = getelementptr inbounds float, ptr addrspace(3) %92, i32 %94, !dbg !29
  %96 = or disjoint i32 %59, 2, !dbg !29
  %97 = getelementptr inbounds float, ptr addrspace(3) %92, i32 %96, !dbg !29
  %98 = or disjoint i32 %59, 3, !dbg !29
  %99 = getelementptr inbounds float, ptr addrspace(3) %92, i32 %98, !dbg !29
  %100 = or disjoint i32 %59, 512, !dbg !29
  %101 = lshr i32 %100, 5, !dbg !29
  %102 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %101, !dbg !29
  %103 = getelementptr inbounds float, ptr addrspace(3) %102, i32 %100, !dbg !29
  %104 = or disjoint i32 %59, 513, !dbg !29
  %105 = lshr i32 %104, 5, !dbg !29
  %106 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %105, !dbg !29
  %107 = getelementptr inbounds float, ptr addrspace(3) %106, i32 %104, !dbg !29
  %108 = or disjoint i32 %59, 514, !dbg !29
  %109 = lshr i32 %108, 5, !dbg !29
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %109, !dbg !29
  %111 = getelementptr inbounds float, ptr addrspace(3) %110, i32 %108, !dbg !29
  %112 = or disjoint i32 %59, 515, !dbg !29
  %113 = lshr i32 %112, 5, !dbg !29
  %114 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %113, !dbg !29
  %115 = getelementptr inbounds float, ptr addrspace(3) %114, i32 %112, !dbg !29
  %116 = getelementptr i1, ptr addrspace(1) %2, i64 %34, !dbg !30
  %117 = insertelement <4 x i32> poison, i32 %39, i64 0, !dbg !25
  %118 = insertelement <4 x i32> %117, i32 %40, i64 1, !dbg !25
  %119 = insertelement <4 x i32> %118, i32 %41, i64 2, !dbg !25
  %120 = insertelement <4 x i32> %119, i32 %42, i64 3, !dbg !25
  %121 = bitcast <4 x i32> %120 to <4 x float>, !dbg !25
  %122 = fcmp olt <4 x float> %121, zeroinitializer, !dbg !31
  %123 = select <4 x i1> %122, <4 x float> zeroinitializer, <4 x float> %121, !dbg !35
  %124 = fcmp ole <4 x float> %123, zeroinitializer, !dbg !36
  %125 = extractelement <4 x float> %123, i64 0, !dbg !29
  %126 = bitcast float %125 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %126, i1 true) #2, !dbg !29
  %127 = extractelement <4 x float> %123, i64 1, !dbg !29
  %128 = bitcast float %127 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %128, i1 true) #2, !dbg !29
  %129 = extractelement <4 x float> %123, i64 2, !dbg !29
  %130 = bitcast float %129 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %130, i1 true) #2, !dbg !29
  %131 = extractelement <4 x float> %123, i64 3, !dbg !29
  %132 = bitcast float %131 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %132, i1 true) #2, !dbg !29
  %133 = insertelement <4 x i32> poison, i32 %44, i64 0, !dbg !25
  %134 = insertelement <4 x i32> %133, i32 %45, i64 1, !dbg !25
  %135 = insertelement <4 x i32> %134, i32 %46, i64 2, !dbg !25
  %136 = insertelement <4 x i32> %135, i32 %47, i64 3, !dbg !25
  %137 = bitcast <4 x i32> %136 to <4 x float>, !dbg !25
  %138 = fcmp olt <4 x float> %137, zeroinitializer, !dbg !31
  %139 = select <4 x i1> %138, <4 x float> zeroinitializer, <4 x float> %137, !dbg !35
  %140 = fcmp ole <4 x float> %139, zeroinitializer, !dbg !36
  %141 = extractelement <4 x float> %139, i64 0, !dbg !29
  %142 = bitcast float %141 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %142, i1 true) #2, !dbg !29
  %143 = extractelement <4 x float> %139, i64 1, !dbg !29
  %144 = bitcast float %143 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %144, i1 true) #2, !dbg !29
  %145 = extractelement <4 x float> %139, i64 2, !dbg !29
  %146 = bitcast float %145 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %146, i1 true) #2, !dbg !29
  %147 = extractelement <4 x float> %139, i64 3, !dbg !29
  %148 = bitcast float %147 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %148, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %149 = load i32, ptr addrspace(3) %93, align 4, !dbg !29
  %150 = load i32, ptr addrspace(3) %95, align 4, !dbg !29
  %151 = load i32, ptr addrspace(3) %97, align 4, !dbg !29
  %152 = load i32, ptr addrspace(3) %99, align 4, !dbg !29
  %153 = load i32, ptr addrspace(3) %103, align 4, !dbg !29
  %154 = load i32, ptr addrspace(3) %107, align 4, !dbg !29
  %155 = load i32, ptr addrspace(3) %111, align 4, !dbg !29
  %156 = load i32, ptr addrspace(3) %115, align 4, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %149, i32 %150, i32 %151, i32 %152, ptr addrspace(1) %53, i1 true) #2, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %153, i32 %154, i32 %155, i32 %156, ptr addrspace(1) %55, i1 true) #2, !dbg !29
  %157 = zext <4 x i1> %124 to <4 x i8>, !dbg !37
  %158 = bitcast <4 x i8> %157 to i32, !dbg !37
  %159 = zext <4 x i1> %140 to <4 x i8>, !dbg !37
  %160 = bitcast <4 x i8> %159 to i32, !dbg !37
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %158, i32 %160, ptr addrspace(1) %116, i1 true) #2, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb5dtjabsabqbgplf6wn3ynnljv3wmucstpps3kyvp5d4cdvewdf.py", directory: "inductor_cache/b5")
!4 = !{ptr @triton_poi_fused_relu_threshold_backward_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_relu_threshold_backward_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_relu_threshold_backward_7", linkageName: "triton_poi_fused_relu_threshold_backward_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 53, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 45, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 58, scope: !7)
!26 = !DILocation(line: 37, column: 35, scope: !7)
!27 = !DILocation(line: 37, column: 30, scope: !7)
!28 = !DILocation(line: 37, column: 25, scope: !7)
!29 = !DILocation(line: 37, column: 46, scope: !7)
!30 = !DILocation(line: 38, column: 25, scope: !7)
!31 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 34, column: 40, scope: !7)
!35 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 36, column: 19, scope: !7)
!37 = !DILocation(line: 38, column: 59, scope: !7)
!38 = !DILocation(line: 38, column: 4, scope: !7)
