; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_add_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 3, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = shl i32 %10, 1, !dbg !12
  %13 = and i32 %12, 6, !dbg !12
  %14 = lshr i32 %10, 5, !dbg !12
  %.lobit12 = lshr i32 %10, 3, !dbg !12
  %15 = and i32 %.lobit12, 3, !dbg !12
  %16 = and i32 %10, 32, !dbg !12
  %17 = lshr exact i32 %16, 3, !dbg !12
  %18 = or disjoint i32 %15, %17, !dbg !12
  %19 = and i32 %10, 7, !dbg !12
  %20 = or disjoint i32 %9, %13, !dbg !13
  %21 = or disjoint i32 %18, %9, !dbg !13
  %22 = icmp slt i32 %20, 1024, !dbg !14
  %23 = icmp slt i32 %21, 1024, !dbg !14
  %24 = lshr i32 %10, 2, !dbg !15
  %.lobit2 = and i32 %24, 1, !dbg !15
  %25 = lshr i32 %10, 2, !dbg !15
  %26 = and i32 %25, 2, !dbg !15
  %27 = or disjoint i32 %.lobit2, %26, !dbg !15
  %28 = lshr i32 %10, 2, !dbg !15
  %29 = and i32 %28, 4, !dbg !15
  %30 = or disjoint i32 %27, %29, !dbg !15
  %31 = lshr exact i32 %16, 2, !dbg !15
  %32 = or disjoint i32 %30, %31, !dbg !15
  %33 = and i32 %12, 14, !dbg !15
  %.frozen = freeze i32 %20, !dbg !16
  %34 = sdiv i32 %.frozen, 256, !dbg !16
  %35 = mul i32 %34, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %35, !dbg !17
  %36 = shl nuw nsw i32 %32, 8, !dbg !18
  %37 = shl i32 %34, 12, !dbg !19
  %38 = add nsw i32 %.decomposed, %36, !dbg !20
  %39 = add i32 %38, %37, !dbg !21
  %40 = sext i32 %39 to i64, !dbg !22
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !22
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %41, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !23
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !23
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !23
  %45 = bitcast i32 %43 to float, !dbg !23
  %46 = bitcast i32 %44 to float, !dbg !23
  %47 = shl i32 %21, 4, !dbg !24
  %48 = or disjoint i32 %47, %33, !dbg !25
  %49 = sext i32 %48 to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !26
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %50, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #5, !dbg !27
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !27
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !27
  %54 = shl i32 %10, 4, !dbg !27
  %55 = and i32 %54, 112, !dbg !27
  %56 = or disjoint i32 %15, %55, !dbg !27
  %57 = or disjoint i32 %56, %17, !dbg !27
  %58 = and i32 %12, 126, !dbg !27
  %59 = lshr exact i32 %55, 1, !dbg !27
  %60 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %59, !dbg !27
  %61 = getelementptr inbounds float, ptr addrspace(3) %60, i32 %57, !dbg !27
  %62 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %62, i1 true) #5, !dbg !27
  %63 = or disjoint i32 %57, 8, !dbg !27
  %64 = lshr i32 %63, 3, !dbg !27
  %65 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %64, !dbg !27
  %66 = getelementptr inbounds float, ptr addrspace(3) %65, i32 %63, !dbg !27
  %67 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 true) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %68 = lshr i32 %58, 3, !dbg !27
  %69 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %68, !dbg !27
  %70 = getelementptr inbounds float, ptr addrspace(3) %69, i32 %58, !dbg !27
  %71 = load float, ptr addrspace(3) %70, align 4, !dbg !27
  %72 = or disjoint i32 %58, 1, !dbg !27
  %73 = getelementptr inbounds float, ptr addrspace(3) %69, i32 %72, !dbg !27
  %74 = load float, ptr addrspace(3) %73, align 4, !dbg !27
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %41, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !28
  %76 = select i1 %22, float %45, float 0.000000e+00, !dbg !29
  %77 = select i1 %22, float %46, float 0.000000e+00, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %78 = bitcast float %76 to i32, !dbg !30
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 16, i32 31), !dbg !30
  %80 = bitcast i32 %79 to float, !dbg !30
  %81 = fadd float %76, %80, !dbg !34
  %82 = bitcast float %81 to i32, !dbg !30
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 8, i32 31), !dbg !30
  %84 = bitcast i32 %83 to float, !dbg !30
  %85 = fadd float %81, %84, !dbg !34
  %86 = bitcast float %85 to i32, !dbg !30
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 4, i32 31), !dbg !30
  %88 = bitcast i32 %87 to float, !dbg !30
  %89 = fadd float %85, %88, !dbg !34
  %90 = bitcast float %77 to i32, !dbg !30
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 16, i32 31), !dbg !30
  %92 = bitcast i32 %91 to float, !dbg !30
  %93 = fadd float %77, %92, !dbg !34
  %94 = bitcast float %93 to i32, !dbg !30
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 8, i32 31), !dbg !30
  %96 = bitcast i32 %95 to float, !dbg !30
  %97 = fadd float %93, %96, !dbg !34
  %98 = bitcast float %97 to i32, !dbg !30
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 4, i32 31), !dbg !30
  %100 = bitcast i32 %99 to float, !dbg !30
  %101 = fadd float %97, %100, !dbg !34
  %102 = icmp samesign ult i32 %11, 4, !dbg !30
  %103 = and i32 %14, 1, !dbg !30
  %104 = shl nuw nsw i32 %13, 1, !dbg !30
  %105 = or disjoint i32 %104, %103, !dbg !30
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !30
  %107 = bitcast float %89 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 %102) #5, !dbg !30
  %108 = or disjoint i32 %104, 2, !dbg !30
  %109 = or disjoint i32 %108, %103, !dbg !30
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i32 %109, !dbg !30
  %111 = bitcast float %101 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 %102) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %112 = icmp slt i32 %10, 16, !dbg !30
  %113 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !30
  %114 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %113, i1 %112) #5, !dbg !30
  %115 = bitcast i32 %114 to float, !dbg !30
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 1, i32 31), !dbg !30
  %117 = bitcast i32 %116 to float, !dbg !30
  %118 = fadd float %115, %117, !dbg !34
  %119 = and i32 %10, 1, !dbg !30
  %120 = icmp eq i32 %119, 0, !dbg !30
  %121 = and i1 %112, %120, !dbg !30
  %122 = bitcast float %118 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %122, i1 %121) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %123 = getelementptr float, ptr addrspace(3) @global_smem, i32 %104, !dbg !30
  %124 = load float, ptr addrspace(3) %123, align 16, !dbg !30
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i32 %108, !dbg !30
  %126 = load float, ptr addrspace(3) %125, align 8, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !36
  %128 = bitcast float %124 to i32, !dbg !36
  %129 = bitcast float %126 to i32, !dbg !36
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %127, i32 %128, i32 %129, i1 true) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !36
  %131 = load float, ptr addrspace(3) %130, align 4, !dbg !36
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float 1.600000e+01) #5, !dbg !36
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %124, float 1.600000e+01) #5, !dbg !36
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float 1.600000e+01) #5, !dbg !36
  %135 = fsub float %45, %133, !dbg !37
  %136 = fsub float %46, %134, !dbg !37
  %137 = fmul float %135, %135, !dbg !38
  %138 = fmul float %136, %136, !dbg !38
  %139 = select i1 %22, float %137, float 0.000000e+00, !dbg !39
  %140 = select i1 %22, float %138, float 0.000000e+00, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %141 = bitcast float %139 to i32, !dbg !40
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 16, i32 31), !dbg !40
  %143 = bitcast i32 %142 to float, !dbg !40
  %144 = fadd float %139, %143, !dbg !42
  %145 = bitcast float %144 to i32, !dbg !40
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 8, i32 31), !dbg !40
  %147 = bitcast i32 %146 to float, !dbg !40
  %148 = fadd float %144, %147, !dbg !42
  %149 = bitcast float %148 to i32, !dbg !40
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 4, i32 31), !dbg !40
  %151 = bitcast i32 %150 to float, !dbg !40
  %152 = fadd float %148, %151, !dbg !42
  %153 = bitcast float %140 to i32, !dbg !40
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 16, i32 31), !dbg !40
  %155 = bitcast i32 %154 to float, !dbg !40
  %156 = fadd float %140, %155, !dbg !42
  %157 = bitcast float %156 to i32, !dbg !40
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 8, i32 31), !dbg !40
  %159 = bitcast i32 %158 to float, !dbg !40
  %160 = fadd float %156, %159, !dbg !42
  %161 = bitcast float %160 to i32, !dbg !40
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 4, i32 31), !dbg !40
  %163 = bitcast i32 %162 to float, !dbg !40
  %164 = fadd float %160, %163, !dbg !42
  %165 = bitcast float %152 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %165, i1 %102) #5, !dbg !40
  %166 = bitcast float %164 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %166, i1 %102) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %167 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %113, i1 %112) #5, !dbg !40
  %168 = bitcast i32 %167 to float, !dbg !40
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 1, i32 31), !dbg !40
  %170 = bitcast i32 %169 to float, !dbg !40
  %171 = fadd float %168, %170, !dbg !42
  %172 = bitcast float %171 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %172, i1 %121) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %173 = load float, ptr addrspace(3) %123, align 16, !dbg !40
  %174 = load float, ptr addrspace(3) %125, align 8, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %175 = bitcast float %173 to i32, !dbg !43
  %176 = bitcast float %174 to i32, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %127, i32 %175, i32 %176, i1 true) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %177 = load float, ptr addrspace(3) %130, align 4, !dbg !43
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %177, float 1.600000e+01) #5, !dbg !44
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %173, float 1.600000e+01) #5, !dbg !44
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %174, float 1.600000e+01) #5, !dbg !44
  %181 = fadd float %178, 0x3EE4F8B580000000, !dbg !45
  %182 = fadd float %179, 0x3EE4F8B580000000, !dbg !45
  %183 = fadd float %180, 0x3EE4F8B580000000, !dbg !45
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i = icmp eq i32 %184, 0, !dbg !43
  br i1 %.not.i, label %187, label %185, !dbg !43

185:                                              ; preds = %7
  %186 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %181), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

187:                                              ; preds = %7
  %188 = tail call float @llvm.nvvm.rsqrt.approx.f(float %181), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

__nv_rsqrtf.exit:                                 ; preds = %185, %187
  %.0.i = phi float [ %186, %185 ], [ %188, %187 ], !dbg !43
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i6 = icmp eq i32 %189, 0, !dbg !43
  br i1 %.not.i6, label %192, label %190, !dbg !43

190:                                              ; preds = %__nv_rsqrtf.exit
  %191 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %182), !dbg !43
  br label %__nv_rsqrtf.exit8, !dbg !43

192:                                              ; preds = %__nv_rsqrtf.exit
  %193 = tail call float @llvm.nvvm.rsqrt.approx.f(float %182), !dbg !43
  br label %__nv_rsqrtf.exit8, !dbg !43

__nv_rsqrtf.exit8:                                ; preds = %190, %192
  %.0.i7 = phi float [ %191, %190 ], [ %193, %192 ], !dbg !43
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i9 = icmp eq i32 %194, 0, !dbg !43
  br i1 %.not.i9, label %197, label %195, !dbg !43

195:                                              ; preds = %__nv_rsqrtf.exit8
  %196 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %183), !dbg !43
  br label %__nv_rsqrtf.exit11, !dbg !43

197:                                              ; preds = %__nv_rsqrtf.exit8
  %198 = tail call float @llvm.nvvm.rsqrt.approx.f(float %183), !dbg !43
  br label %__nv_rsqrtf.exit11, !dbg !43

__nv_rsqrtf.exit11:                               ; preds = %195, %197
  %.0.i10 = phi float [ %196, %195 ], [ %198, %197 ], !dbg !43
  %199 = extractvalue { i32, i32 } %75, 1, !dbg !28
  %200 = bitcast i32 %199 to float, !dbg !28
  %201 = extractvalue { i32, i32 } %75, 0, !dbg !28
  %202 = bitcast i32 %201 to float, !dbg !28
  %203 = or disjoint i32 %9, %19, !dbg !13
  %204 = icmp slt i32 %203, 1024, !dbg !14
  %205 = fsub float %202, %133, !dbg !46
  %206 = fsub float %200, %134, !dbg !46
  %207 = fmul float %205, %.0.i7, !dbg !47
  %208 = fmul float %206, %.0.i10, !dbg !47
  %209 = fadd float %71, %207, !dbg !48
  %210 = fadd float %74, %208, !dbg !48
  %211 = sext i32 %203 to i64, !dbg !49
  %212 = getelementptr float, ptr addrspace(1) %3, i64 %211, !dbg !49
  %213 = lshr i32 %11, 3, !dbg !50
  %214 = shl nuw nsw i32 %103, 2, !dbg !50
  %215 = or disjoint i32 %214, %213, !dbg !50
  %216 = icmp eq i32 %215, 0, !dbg !50
  %217 = bitcast float %.0.i to i32, !dbg !50
  %218 = and i1 %216, %204, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %217, ptr addrspace(1) %212, i1 %218) #5, !dbg !50
  %219 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %220 = shl i32 %10, 5, !dbg !52
  %221 = and i32 %220, 96, !dbg !52
  %222 = or disjoint i32 %221, %.lobit2, !dbg !52
  %223 = or disjoint i32 %222, %26, !dbg !52
  %224 = or disjoint i32 %223, %29, !dbg !52
  %225 = or disjoint i32 %224, %31, !dbg !52
  %226 = lshr exact i32 %221, 1, !dbg !52
  %227 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %226, !dbg !52
  %228 = getelementptr inbounds float, ptr addrspace(3) %227, i32 %225, !dbg !52
  %229 = bitcast float %209 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 true) #5, !dbg !52
  %230 = or disjoint i32 %225, 16, !dbg !52
  %231 = lshr i32 %230, 3, !dbg !52
  %232 = and i32 %231, 536870910, !dbg !52
  %233 = getelementptr float, ptr addrspace(3) @global_smem, i32 %232, !dbg !52
  %234 = getelementptr float, ptr addrspace(3) %233, i32 %230, !dbg !52
  %235 = bitcast float %210 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %235, i1 true) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %236 = lshr i32 %12, 3, !dbg !52
  %237 = and i32 %236, 14, !dbg !52
  %238 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %237, !dbg !52
  %239 = getelementptr inbounds float, ptr addrspace(3) %238, i32 %58, !dbg !52
  %.extract = load i32, ptr addrspace(3) %239, align 8, !dbg !52
  %240 = getelementptr inbounds i8, ptr addrspace(3) %239, i32 4, !dbg !52
  %.extract5 = load i32, ptr addrspace(3) %240, align 4, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract5, ptr addrspace(1) %219, i1 %23) #5, !dbg !52
  %241 = getelementptr float, ptr addrspace(1) %2, i64 %211, !dbg !53
  %242 = bitcast float %132 to i32, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %242, ptr addrspace(1) %241, i1 %218) #5, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py", directory: "inductor_cache/mj")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_add_6, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_add_6, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_add_6", linkageName: "triton_per_fused__native_batch_norm_legit_add_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 34, scope: !7)
!19 = !DILocation(line: 33, column: 45, scope: !7)
!20 = !DILocation(line: 33, column: 39, scope: !7)
!21 = !DILocation(line: 33, column: 60, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 73, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 36, scope: !7)
!26 = !DILocation(line: 34, column: 31, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 35, column: 55, scope: !7)
!29 = !DILocation(line: 39, column: 33, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!33 = !DILocation(line: 40, column: 24, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !33)
!35 = distinct !DILexicalBlockFile(scope: !31, file: !32, discriminator: 0)
!36 = !DILocation(line: 43, column: 19, scope: !7)
!37 = !DILocation(line: 44, column: 19, scope: !7)
!38 = !DILocation(line: 45, column: 20, scope: !7)
!39 = !DILocation(line: 47, column: 35, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !41)
!41 = !DILocation(line: 48, column: 26, scope: !7)
!42 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !41)
!43 = !DILocation(line: 53, column: 28, scope: !7)
!44 = !DILocation(line: 50, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 20, scope: !7)
!46 = !DILocation(line: 54, column: 20, scope: !7)
!47 = !DILocation(line: 55, column: 20, scope: !7)
!48 = !DILocation(line: 56, column: 20, scope: !7)
!49 = !DILocation(line: 57, column: 25, scope: !7)
!50 = !DILocation(line: 57, column: 37, scope: !7)
!51 = !DILocation(line: 58, column: 25, scope: !7)
!52 = !DILocation(line: 58, column: 45, scope: !7)
!53 = !DILocation(line: 59, column: 25, scope: !7)
!54 = !DILocation(line: 59, column: 37, scope: !7)
!55 = !DILocation(line: 59, column: 4, scope: !7)
