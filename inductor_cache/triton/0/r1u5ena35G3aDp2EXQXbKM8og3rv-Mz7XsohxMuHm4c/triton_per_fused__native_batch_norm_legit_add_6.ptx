//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_per_fused__native_batch_norm_legit_add_6 // -- Begin function triton_per_fused__native_batch_norm_legit_add_6
.extern .shared .align 16 .b8 global_smem[];
.global .align 1 .b8 _$_str[11] = {95, 95, 67, 85, 68, 65, 95, 70, 84, 90};
                                        // @triton_per_fused__native_batch_norm_legit_add_6
.visible .entry triton_per_fused__native_batch_norm_legit_add_6(
	.param .u64 .ptr .global .align 1 triton_per_fused__native_batch_norm_legit_add_6_param_0,
	.param .u64 .ptr .global .align 1 triton_per_fused__native_batch_norm_legit_add_6_param_1,
	.param .u64 .ptr .global .align 1 triton_per_fused__native_batch_norm_legit_add_6_param_2,
	.param .u64 .ptr .global .align 1 triton_per_fused__native_batch_norm_legit_add_6_param_3,
	.param .u64 .ptr .global .align 1 triton_per_fused__native_batch_norm_legit_add_6_param_4,
	.param .u32 triton_per_fused__native_batch_norm_legit_add_6_param_5,
	.param .u32 triton_per_fused__native_batch_norm_legit_add_6_param_6
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<31>;
	.reg .b32 	%r<162>;
	.reg .f32 	%f<60>;
	.reg .b64 	%rd<15>;
	.loc	1 19 0                          // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:19:0
$L__func_begin0:
	.loc	1 19 0                          // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:19:0

// %bb.0:                               // %__nv_rsqrtf.exit
	ld.param.u64 	%rd7, [triton_per_fused__native_batch_norm_legit_add_6_param_0];
	ld.param.u64 	%rd8, [triton_per_fused__native_batch_norm_legit_add_6_param_1];
$L__tmp0:
	.loc	1 23 28                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:23:28
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	.loc	1 23 33                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:23:33
	shl.b32 	%r66, %r1, 3;
	ld.param.u64 	%rd9, [triton_per_fused__native_batch_norm_legit_add_6_param_2];
	ld.param.u64 	%rd10, [triton_per_fused__native_batch_norm_legit_add_6_param_3];
	.loc	1 24 44                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:24:44
	mov.u32 	%r67, %tid.x;
	and.b32  	%r68, %r67, 31;
	ld.param.u64 	%rd11, [triton_per_fused__native_batch_norm_legit_add_6_param_4];
	shl.b32 	%r69, %r67, 1;
	and.b32  	%r70, %r69, 6;
	shr.u32 	%r71, %r67, 3;
	bfe.u32 	%r72, %r67, 3, 2;
	and.b32  	%r73, %r67, 32;
	shr.u32 	%r74, %r73, 3;
	or.b32  	%r75, %r72, %r74;
	and.b32  	%r76, %r67, 7;
	.loc	1 24 23                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:24:23
	or.b32  	%r77, %r66, %r70;
	or.b32  	%r78, %r75, %r66;
	.loc	1 25 21                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:25:21
	setp.lt.s32 	%p1, %r77, 1024;
	setp.lt.s32 	%p4, %r78, 1024;
	.loc	1 26 34                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:26:34
	bfe.u32 	%r79, %r67, 2, 3;
	shr.u32 	%r80, %r73, 2;
	or.b32  	%r81, %r79, %r80;
	and.b32  	%r82, %r69, 14;
	.loc	1 32 19                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:32:19
	shr.s32 	%r84, %r77, 31;
	shr.u32 	%r85, %r84, 24;
	add.s32 	%r86, %r77, %r85;
	.loc	1 31 19                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:31:19
	and.b32  	%r87, %r86, -256;
	sub.s32 	%r88, %r77, %r87;
	.loc	1 33 34                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:33:34
	shl.b32 	%r89, %r81, 8;
	.loc	1 33 45                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:33:45
	shl.b32 	%r90, %r86, 4;
	and.b32  	%r91, %r90, -4096;
	.loc	1 33 39                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:33:39
	add.s32 	%r92, %r88, %r89;
	.loc	1 33 60                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:33:60
	add.s32 	%r93, %r92, %r91;
	.loc	1 33 30                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:33:30
	mul.wide.s32 	%rd12, %r93, 4;
	add.s64 	%rd1, %rd7, %rd12;
	mov.b32 	%r4, 0;
	.loc	1 33 73                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:33:73
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	@%p1 ld.global.v2.b32 { %r2, %r3 }, [ %rd1 + 0 ];
	@!%p1 mov.u32 %r2, %r4;
	@!%p1 mov.u32 %r3, %r4;
	// end inline asm
	mov.b32 	%f1, %r2;
	mov.b32 	%f2, %r3;
	.loc	1 34 39                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:34:39
	shl.b32 	%r94, %r78, 4;
	.loc	1 34 36                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:34:36
	or.b32  	%r95, %r94, %r82;
	.loc	1 34 31                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:34:31
	mul.wide.s32 	%rd13, %r95, 4;
	add.s64 	%rd2, %rd8, %rd13;
	.loc	1 34 44                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:34:44
	// begin inline asm
	mov.u32 %r11, 0x0;
	mov.u32 %r13, 0x0;
	@%p4 ld.global.v2.b32 { %r11, %r13 }, [ %rd2 + 0 ];
	@!%p4 mov.u32 %r11, %r4;
	@!%p4 mov.u32 %r13, %r4;
	// end inline asm
	shl.b32 	%r96, %r67, 4;
	and.b32  	%r97, %r96, 112;
	or.b32  	%r98, %r75, %r97;
	shr.u32 	%r99, %r97, 1;
	mov.u32 	%r100, global_smem;
	add.s32 	%r101, %r100, %r99;
	shl.b32 	%r102, %r98, 2;
	add.s32 	%r10, %r101, %r102;
	mov.pred 	%p7, -1;
	// begin inline asm
	@%p7 st.shared.b32 [ %r10 + 0 ], %r11;
	// end inline asm
	or.b32  	%r103, %r97, 8;
	shr.u32 	%r104, %r103, 1;
	add.s32 	%r105, %r100, %r104;
	add.s32 	%r106, %r105, %r102;
	add.s32 	%r12, %r106, 32;
	// begin inline asm
	@%p7 st.shared.b32 [ %r12 + 0 ], %r13;
	// end inline asm
	bar.sync 	0;
	and.b32  	%r107, %r67, 60;
	add.s32 	%r108, %r100, %r107;
	shl.b32 	%r109, %r67, 3;
	and.b32  	%r110, %r109, 504;
	add.s32 	%r111, %r108, %r110;
	ld.shared.f32 	%f3, [%r111];
	ld.shared.f32 	%f4, [%r111+4];
	.loc	1 35 55                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:35:55
	// begin inline asm
	mov.u32 %r14, 0x0;
	mov.u32 %r15, 0x0;
	@%p1 ld.global.v2.b32 { %r14, %r15 }, [ %rd1 + 0 ];
	@!%p1 mov.u32 %r14, %r4;
	@!%p1 mov.u32 %r15, %r4;
	// end inline asm
	.loc	1 39 33                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:39:33
	selp.f32 	%f5, %f1, 0f00000000, %p1;
	selp.f32 	%f6, %f2, 0f00000000, %p1;
$L__tmp1:
	.loc	2 267 36                        // standard.py:267:36
	bar.sync 	0;
	mov.b32 	%r112, %f5;
	shfl.sync.bfly.b32	%r113, %r112, 16, 31, -1;
	mov.b32 	%f7, %r113;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f8, %f5, %f7;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r114, %f8;
	shfl.sync.bfly.b32	%r115, %r114, 8, 31, -1;
	mov.b32 	%f9, %r115;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f10, %f8, %f9;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r116, %f10;
	shfl.sync.bfly.b32	%r117, %r116, 4, 31, -1;
	mov.b32 	%f11, %r117;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f12, %f10, %f11;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r118, %f6;
	shfl.sync.bfly.b32	%r119, %r118, 16, 31, -1;
	mov.b32 	%f13, %r119;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f14, %f6, %f13;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r120, %f14;
	shfl.sync.bfly.b32	%r121, %r120, 8, 31, -1;
	mov.b32 	%f15, %r121;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f16, %f14, %f15;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r122, %f16;
	shfl.sync.bfly.b32	%r123, %r122, 4, 31, -1;
	mov.b32 	%f17, %r123;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f18, %f16, %f17;
	.loc	2 267 36                        // standard.py:267:36
	setp.lt.u32 	%p12, %r68, 4;
	shl.b32 	%r124, %r70, 3;
	and.b32  	%r125, %r71, 4;
	or.b32  	%r126, %r124, %r125;
	add.s32 	%r18, %r100, %r126;
	mov.b32 	%r19, %f12;
	// begin inline asm
	@%p12 st.shared.b32 [ %r18 + 0 ], %r19;
	// end inline asm
	add.s32 	%r20, %r18, 8;
	mov.b32 	%r21, %f18;
	// begin inline asm
	@%p12 st.shared.b32 [ %r20 + 0 ], %r21;
	// end inline asm
	bar.sync 	0;
	setp.lt.s32 	%p14, %r67, 16;
	shl.b32 	%r127, %r67, 2;
	add.s32 	%r23, %r100, %r127;
	// begin inline asm
	@%p14 ld.shared.b32 %r22, [ %r23 + 0 ];
	// end inline asm
	mov.b32 	%f19, %r22;
	shfl.sync.bfly.b32	%r128, %r22, 1, 31, -1;
	mov.b32 	%f20, %r128;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f21, %f19, %f20;
	.loc	2 267 36                        // standard.py:267:36
	and.b32  	%r129, %r67, 1;
	setp.eq.b32 	%p27, %r129, 1;
	not.pred 	%p28, %p27;
	and.pred  	%p15, %p14, %p28;
	mov.b32 	%r25, %f21;
	// begin inline asm
	@%p15 st.shared.b32 [ %r23 + 0 ], %r25;
	// end inline asm
	bar.sync 	0;
	add.s32 	%r130, %r100, %r124;
$L__tmp2:
	.loc	1 43 19                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:43:19
	ld.shared.u32 	%r27, [%r130];
	ld.shared.u32 	%r28, [%r130+8];
	bar.sync 	0;
	shl.b32 	%r131, %r70, 2;
	sub.s32 	%r46, %r130, %r131;
	// begin inline asm
	@%p7 st.shared.v2.b32 [ %r46 + 0 ], { %r27, %r28 };
	// end inline asm
	bar.sync 	0;
	shl.b32 	%r132, %r76, 2;
	add.s32 	%r133, %r100, %r132;
	ld.shared.u32 	%r30, [%r133];
	mov.b32 	%r31, 1098907648;
	// begin inline asm
	div.full.f32 %r65, %r30, %r31;
	// end inline asm
	// begin inline asm
	div.full.f32 %r32, %r27, %r31;
	// end inline asm
	mov.b32 	%f22, %r32;
	// begin inline asm
	div.full.f32 %r35, %r28, %r31;
	// end inline asm
	mov.b32 	%f23, %r35;
	.loc	1 44 19                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:44:19
	sub.f32 	%f24, %f1, %f22;
	sub.f32 	%f25, %f2, %f23;
	.loc	1 45 20                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:45:20
	mul.f32 	%f26, %f24, %f24;
	mul.f32 	%f27, %f25, %f25;
	.loc	1 47 35                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:47:35
	selp.f32 	%f28, %f26, 0f00000000, %p1;
	selp.f32 	%f29, %f27, 0f00000000, %p1;
$L__tmp3:
	.loc	2 267 36                        // standard.py:267:36
	bar.sync 	0;
	mov.b32 	%r134, %f28;
	shfl.sync.bfly.b32	%r135, %r134, 16, 31, -1;
	mov.b32 	%f30, %r135;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f31, %f28, %f30;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r136, %f31;
	shfl.sync.bfly.b32	%r137, %r136, 8, 31, -1;
	mov.b32 	%f32, %r137;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f33, %f31, %f32;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r138, %f33;
	shfl.sync.bfly.b32	%r139, %r138, 4, 31, -1;
	mov.b32 	%f34, %r139;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f35, %f33, %f34;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r140, %f29;
	shfl.sync.bfly.b32	%r141, %r140, 16, 31, -1;
	mov.b32 	%f36, %r141;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f37, %f29, %f36;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r142, %f37;
	shfl.sync.bfly.b32	%r143, %r142, 8, 31, -1;
	mov.b32 	%f38, %r143;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f39, %f37, %f38;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r144, %f39;
	shfl.sync.bfly.b32	%r145, %r144, 4, 31, -1;
	mov.b32 	%f40, %r145;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f41, %f39, %f40;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r39, %f35;
	// begin inline asm
	@%p12 st.shared.b32 [ %r18 + 0 ], %r39;
	// end inline asm
	mov.b32 	%r41, %f41;
	// begin inline asm
	@%p12 st.shared.b32 [ %r20 + 0 ], %r41;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p14 ld.shared.b32 %r42, [ %r23 + 0 ];
	// end inline asm
	mov.b32 	%f42, %r42;
	shfl.sync.bfly.b32	%r146, %r42, 1, 31, -1;
	mov.b32 	%f43, %r146;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f44, %f42, %f43;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r45, %f44;
	// begin inline asm
	@%p15 st.shared.b32 [ %r23 + 0 ], %r45;
	// end inline asm
	bar.sync 	0;
$L__tmp4:
	.loc	1 53 28                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:53:28
	ld.shared.u32 	%r47, [%r130];
	ld.shared.u32 	%r48, [%r130+8];
	bar.sync 	0;
	// begin inline asm
	@%p7 st.shared.v2.b32 [ %r46 + 0 ], { %r47, %r48 };
	// end inline asm
	bar.sync 	0;
	.loc	1 50 20                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:50:20
	ld.shared.u32 	%r50, [%r133];
	// begin inline asm
	div.full.f32 %r49, %r50, %r31;
	// end inline asm
	mov.b32 	%f45, %r49;
	// begin inline asm
	div.full.f32 %r52, %r47, %r31;
	// end inline asm
	mov.b32 	%f46, %r52;
	// begin inline asm
	div.full.f32 %r55, %r48, %r31;
	// end inline asm
	mov.b32 	%f47, %r55;
	.loc	1 52 20                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:52:20
	add.f32 	%f48, %f45, 0f3727C5AC;
	add.f32 	%f49, %f46, 0f3727C5AC;
	add.f32 	%f50, %f47, 0f3727C5AC;
	.loc	1 53 28                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:53:28
	rsqrt.approx.ftz.f32 	%f51, %f48;
	rsqrt.approx.ftz.f32 	%f52, %f49;
	rsqrt.approx.ftz.f32 	%f53, %f50;
	.loc	1 35 55                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:35:55
	mov.b32 	%f54, %r15;
	mov.b32 	%f55, %r14;
	.loc	1 24 23                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:24:23
	or.b32  	%r147, %r66, %r76;
	.loc	1 25 21                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:25:21
	setp.lt.s32 	%p29, %r147, 1024;
	.loc	1 54 20                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:54:20
	sub.f32 	%f56, %f55, %f22;
	sub.f32 	%f57, %f54, %f23;
	.loc	1 56 20                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:56:20
	fma.rn.f32 	%f58, %f56, %f52, %f3;
	fma.rn.f32 	%f59, %f57, %f53, %f4;
	.loc	1 57 25                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:57:25
	mul.wide.s32 	%rd14, %r147, 4;
	add.s64 	%rd4, %rd10, %rd14;
	.loc	1 57 37                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:57:37
	or.b32  	%r148, %r125, %r72;
	setp.eq.s32 	%p30, %r148, 0;
	mov.b32 	%r58, %f51;
	and.pred  	%p22, %p30, %p29;
	// begin inline asm
	@%p22 st.global.b32 [ %rd4 + 0 ], { %r58 };
	// end inline asm
	.loc	1 58 25                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:58:25
	add.s64 	%rd5, %rd11, %rd13;
	.loc	1 58 45                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:58:45
	bar.sync 	0;
	shl.b32 	%r149, %r67, 5;
	and.b32  	%r150, %r149, 96;
	or.b32  	%r151, %r81, %r150;
	shr.u32 	%r152, %r150, 1;
	add.s32 	%r153, %r100, %r152;
	shl.b32 	%r154, %r151, 2;
	add.s32 	%r59, %r153, %r154;
	mov.b32 	%r60, %f58;
	// begin inline asm
	@%p7 st.shared.b32 [ %r59 + 0 ], %r60;
	// end inline asm
	or.b32  	%r155, %r150, 16;
	shr.u32 	%r156, %r155, 1;
	add.s32 	%r157, %r100, %r156;
	add.s32 	%r158, %r157, %r154;
	add.s32 	%r61, %r158, 64;
	mov.b32 	%r62, %f59;
	// begin inline asm
	@%p7 st.shared.b32 [ %r61 + 0 ], %r62;
	// end inline asm
	bar.sync 	0;
	and.b32  	%r159, %r67, 56;
	add.s32 	%r160, %r100, %r159;
	add.s32 	%r161, %r160, %r110;
	ld.shared.v2.u32 	{%r63, %r64}, [%r161];
	// begin inline asm
	@%p4 st.global.v2.b32 [ %rd5 + 0 ], { %r63, %r64 };
	// end inline asm
	.loc	1 59 25                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:59:25
	add.s64 	%rd6, %rd9, %rd14;
	.loc	1 59 37                         // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:59:37
	// begin inline asm
	@%p22 st.global.b32 [ %rd6 + 0 ], { %r65 };
	// end inline asm
	.loc	1 59 4                          // cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py:59:4
	ret;
$L__tmp5:
$L__func_end0:
                                        // -- End function
}
	.file	1 "inductor_cache/mj/cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py"
	.file	2 "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 216                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0xd1 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 109
.b8 106
.b8 113
.b8 52
.b8 105
.b8 50
.b8 101
.b8 114
.b8 55
.b8 115
.b8 100
.b8 110
.b8 52
.b8 101
.b8 54
.b8 117
.b8 112
.b8 53
.b8 97
.b8 100
.b8 53
.b8 106
.b8 105
.b8 111
.b8 55
.b8 119
.b8 106
.b8 110
.b8 52
.b8 110
.b8 101
.b8 119
.b8 50
.b8 122
.b8 100
.b8 115
.b8 97
.b8 101
.b8 99
.b8 119
.b8 100
.b8 122
.b8 114
.b8 100
.b8 97
.b8 104
.b8 103
.b8 104
.b8 109
.b8 97
.b8 106
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 105                                 // DW_AT_comp_dir
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 109
.b8 106
.b8 0
.b8 2                                   // Abbrev [2] 0x63:0x32 DW_TAG_subprogram
.b8 116                                 // DW_AT_name
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 112
.b8 101
.b8 114
.b8 95
.b8 102
.b8 117
.b8 115
.b8 101
.b8 100
.b8 95
.b8 95
.b8 110
.b8 97
.b8 116
.b8 105
.b8 118
.b8 101
.b8 95
.b8 98
.b8 97
.b8 116
.b8 99
.b8 104
.b8 95
.b8 110
.b8 111
.b8 114
.b8 109
.b8 95
.b8 108
.b8 101
.b8 103
.b8 105
.b8 116
.b8 95
.b8 97
.b8 100
.b8 100
.b8 95
.b8 54
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x95:0x46 DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 99                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0xaa:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 40                                  // DW_AT_call_line
.b8 24                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0xc2:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp3                           // DW_AT_low_pc
.b64 $L__tmp4                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 48                                  // DW_AT_call_line
.b8 26                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
