; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 1, !dbg !13
  %18 = icmp slt i32 %16, 784, !dbg !14
  %19 = sdiv i32 %16, 7, !dbg !15
  %20 = sdiv i32 %17, 7, !dbg !15
  %21 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !16
  %22 = insertelement <2 x i32> %21, i32 %16, i64 1, !dbg !16
  %23 = srem <2 x i32> %22, splat (i32 7), !dbg !16
  %24 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !16
  %25 = insertelement <2 x i32> %24, i32 %17, i64 1, !dbg !16
  %26 = srem <2 x i32> %25, splat (i32 7), !dbg !16
  %27 = sdiv i32 %16, 49, !dbg !17
  %28 = sdiv i32 %17, 49, !dbg !17
  %29 = srem i32 %27, 4, !dbg !18
  %30 = srem i32 %28, 4, !dbg !18
  %31 = sext i32 %29 to i64, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !19
  %33 = sext i32 %30 to i64, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %18) #3, !dbg !20
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %18) #3, !dbg !20
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !21
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !21
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %18) #3, !dbg !22
  %40 = bitcast i32 %39 to float, !dbg !22
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %18) #3, !dbg !22
  %42 = bitcast i32 %41 to float, !dbg !22
  %43 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !23
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %18) #3, !dbg !24
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %18) #3, !dbg !24
  %47 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !25
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %18) #3, !dbg !26
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %18) #3, !dbg !26
  %51 = extractelement <2 x i32> %23, i64 0, !dbg !27
  %52 = icmp sgt i32 %51, 0, !dbg !28
  %53 = extractelement <2 x i32> %26, i64 0, !dbg !27
  %54 = icmp sgt i32 %53, 0, !dbg !28
  %55 = extractelement <2 x i32> %23, i64 1, !dbg !27
  %56 = shl nsw i32 %55, 1, !dbg !29
  %57 = extractelement <2 x i32> %26, i64 1, !dbg !27
  %58 = shl nsw i32 %57, 1, !dbg !29
  %59 = icmp sgt i32 %55, 0, !dbg !30
  %60 = icmp sgt i32 %57, 0, !dbg !30
  %61 = and i1 %59, %52, !dbg !31
  %62 = and i1 %60, %54, !dbg !31
  %63 = mul i32 %19, 28, !dbg !32
  %64 = mul i32 %20, 28, !dbg !32
  %65 = add i32 %63, %56, !dbg !33
  %66 = add i32 %65, -15, !dbg !34
  %67 = add i32 %64, %58, !dbg !33
  %68 = add i32 %67, -15, !dbg !34
  %69 = sext i32 %66 to i64, !dbg !35
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !35
  %71 = sext i32 %68 to i64, !dbg !35
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !35
  %73 = and i1 %18, %61, !dbg !36
  %74 = and i1 %62, %18, !dbg !36
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %73, i32 -8388608, i1 %73) #3, !dbg !37
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %74, i32 -8388608, i1 %74) #3, !dbg !37
  %77 = icmp sgt i32 %55, -1, !dbg !38
  %78 = icmp sgt i32 %57, -1, !dbg !38
  %79 = and i1 %77, %52, !dbg !39
  %80 = and i1 %78, %54, !dbg !39
  %81 = add i32 %65, -14, !dbg !40
  %82 = add i32 %67, -14, !dbg !40
  %83 = sext i32 %81 to i64, !dbg !41
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !41
  %85 = sext i32 %82 to i64, !dbg !41
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !41
  %87 = and i1 %18, %79, !dbg !42
  %88 = and i1 %80, %18, !dbg !42
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %87, i32 -8388608, i1 %87) #3, !dbg !43
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %88, i32 -8388608, i1 %88) #3, !dbg !43
  %91 = add i32 %65, -13, !dbg !44
  %92 = add i32 %67, -13, !dbg !44
  %93 = sext i32 %91 to i64, !dbg !45
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !45
  %95 = sext i32 %92 to i64, !dbg !45
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !45
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %87, i32 -8388608, i1 %87) #3, !dbg !46
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %88, i32 -8388608, i1 %88) #3, !dbg !46
  %99 = icmp sgt i32 %51, -1, !dbg !47
  %100 = icmp sgt i32 %53, -1, !dbg !47
  %101 = and i1 %59, %99, !dbg !48
  %102 = and i1 %60, %100, !dbg !48
  %103 = add i32 %65, -1, !dbg !49
  %104 = add i32 %67, -1, !dbg !49
  %105 = sext i32 %103 to i64, !dbg !50
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !50
  %107 = sext i32 %104 to i64, !dbg !50
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !50
  %109 = and i1 %18, %101, !dbg !51
  %110 = and i1 %102, %18, !dbg !51
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %109, i32 -8388608, i1 %109) #3, !dbg !52
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %110, i32 -8388608, i1 %110) #3, !dbg !52
  %113 = or i32 %51, %55, !dbg !27
  %114 = icmp sgt i32 %113, -1, !dbg !27
  %115 = or i32 %53, %57, !dbg !27
  %116 = icmp sgt i32 %115, -1, !dbg !27
  %117 = sext i32 %65 to i64, !dbg !53
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !53
  %119 = sext i32 %67 to i64, !dbg !53
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !53
  %121 = and i1 %18, %114, !dbg !54
  %122 = and i1 %116, %18, !dbg !54
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %121, i32 -8388608, i1 %121) #3, !dbg !55
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %122, i32 -8388608, i1 %122) #3, !dbg !55
  %125 = or disjoint i32 %65, 1, !dbg !56
  %126 = or disjoint i32 %67, 1, !dbg !56
  %127 = sext i32 %125 to i64, !dbg !57
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !57
  %129 = sext i32 %126 to i64, !dbg !57
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !57
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %121, i32 -8388608, i1 %121) #3, !dbg !58
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %122, i32 -8388608, i1 %122) #3, !dbg !58
  %133 = add i32 %65, 13, !dbg !59
  %134 = add i32 %67, 13, !dbg !59
  %135 = sext i32 %133 to i64, !dbg !60
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !60
  %137 = sext i32 %134 to i64, !dbg !60
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !60
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %109, i32 -8388608, i1 %109) #3, !dbg !61
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %110, i32 -8388608, i1 %110) #3, !dbg !61
  %141 = add i32 %65, 14, !dbg !62
  %142 = add i32 %67, 14, !dbg !62
  %143 = sext i32 %141 to i64, !dbg !63
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !63
  %145 = sext i32 %142 to i64, !dbg !63
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !63
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 %121, i32 -8388608, i1 %121) #3, !dbg !64
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 %122, i32 -8388608, i1 %122) #3, !dbg !64
  %149 = add i32 %65, 15, !dbg !65
  %150 = add i32 %67, 15, !dbg !65
  %151 = sext i32 %149 to i64, !dbg !66
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !66
  %153 = sext i32 %150 to i64, !dbg !66
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !66
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %152, i1 %121, i32 -8388608, i1 %121) #3, !dbg !67
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %154, i1 %122, i32 -8388608, i1 %122) #3, !dbg !67
  %157 = fadd float %40, 0x3EE4F8B580000000, !dbg !68
  %158 = fadd float %42, 0x3EE4F8B580000000, !dbg !68
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i = icmp eq i32 %159, 0, !dbg !69
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i = icmp eq i32 %160, 0, !dbg !69
  br i1 %.not.i, label %166, label %161, !dbg !69

161:                                              ; preds = %10
  br i1 %.not1.i, label %164, label %162, !dbg !69

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %157) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %157) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

166:                                              ; preds = %10
  br i1 %.not1.i, label %169, label %167, !dbg !69

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.f(float %157) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.f(float %157) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

__nv_sqrtf.exit:                                  ; preds = %162, %164, %167, %169
  %.0.i = phi float [ %163, %162 ], [ %165, %164 ], [ %168, %167 ], [ %170, %169 ], !dbg !69
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i1 = icmp eq i32 %171, 0, !dbg !69
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i4 = icmp eq i32 %172, 0, !dbg !69
  br i1 %.not.i1, label %178, label %173, !dbg !69

173:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %176, label %174, !dbg !69

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %158) #3, !dbg !69
  br label %__nv_sqrtf.exit5, !dbg !69

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %158) #3, !dbg !69
  br label %__nv_sqrtf.exit5, !dbg !69

178:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %181, label %179, !dbg !69

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.f(float %158) #3, !dbg !69
  br label %__nv_sqrtf.exit5, !dbg !69

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.f(float %158) #3, !dbg !69
  br label %__nv_sqrtf.exit5, !dbg !69

__nv_sqrtf.exit5:                                 ; preds = %174, %176, %179, %181
  %.0.i3 = phi float [ %175, %174 ], [ %177, %176 ], [ %180, %179 ], [ %182, %181 ], !dbg !69
  %183 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !43
  %184 = insertelement <2 x i32> %183, i32 %90, i64 1, !dbg !43
  %185 = bitcast <2 x i32> %184 to <2 x float>, !dbg !43
  %186 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !37
  %187 = insertelement <2 x i32> %186, i32 %76, i64 1, !dbg !37
  %188 = bitcast <2 x i32> %187 to <2 x float>, !dbg !37
  %189 = insertelement <2 x i32> poison, i32 %97, i64 0, !dbg !46
  %190 = insertelement <2 x i32> %189, i32 %98, i64 1, !dbg !46
  %191 = bitcast <2 x i32> %190 to <2 x float>, !dbg !46
  %192 = insertelement <2 x i32> poison, i32 %111, i64 0, !dbg !52
  %193 = insertelement <2 x i32> %192, i32 %112, i64 1, !dbg !52
  %194 = bitcast <2 x i32> %193 to <2 x float>, !dbg !52
  %195 = insertelement <2 x i32> poison, i32 %123, i64 0, !dbg !55
  %196 = insertelement <2 x i32> %195, i32 %124, i64 1, !dbg !55
  %197 = bitcast <2 x i32> %196 to <2 x float>, !dbg !55
  %198 = insertelement <2 x i32> poison, i32 %131, i64 0, !dbg !58
  %199 = insertelement <2 x i32> %198, i32 %132, i64 1, !dbg !58
  %200 = bitcast <2 x i32> %199 to <2 x float>, !dbg !58
  %201 = insertelement <2 x i32> poison, i32 %139, i64 0, !dbg !61
  %202 = insertelement <2 x i32> %201, i32 %140, i64 1, !dbg !61
  %203 = bitcast <2 x i32> %202 to <2 x float>, !dbg !61
  %204 = insertelement <2 x i32> poison, i32 %147, i64 0, !dbg !64
  %205 = insertelement <2 x i32> %204, i32 %148, i64 1, !dbg !64
  %206 = bitcast <2 x i32> %205 to <2 x float>, !dbg !64
  %207 = insertelement <2 x i32> poison, i32 %155, i64 0, !dbg !67
  %208 = insertelement <2 x i32> %207, i32 %156, i64 1, !dbg !67
  %209 = bitcast <2 x i32> %208 to <2 x float>, !dbg !67
  %210 = bitcast i32 %156 to float, !dbg !70
  %211 = fcmp uno float %210, 0.000000e+00, !dbg !70
  %212 = bitcast i32 %36 to float, !dbg !20
  %213 = fcmp uno <2 x float> %197, zeroinitializer, !dbg !74
  %214 = bitcast i32 %155 to float, !dbg !70
  %215 = fcmp uno float %214, 0.000000e+00, !dbg !70
  %216 = bitcast i32 %35 to float, !dbg !20
  %217 = fcmp ogt <2 x float> %185, %188, !dbg !76
  %218 = fcmp uno <2 x float> %185, zeroinitializer, !dbg !78
  %219 = or <2 x i1> %217, %218, !dbg !79
  %.v = select <2 x i1> %219, <2 x i32> %184, <2 x i32> %187, !dbg !80
  %220 = bitcast <2 x i32> %.v to <2 x float>, !dbg !80
  %221 = fcmp olt <2 x float> %220, %191, !dbg !81
  %222 = fcmp uno <2 x float> %191, zeroinitializer, !dbg !83
  %223 = or <2 x i1> %222, %221, !dbg !84
  %.v6 = select <2 x i1> %223, <2 x i32> %190, <2 x i32> %.v, !dbg !85
  %224 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !85
  %225 = fcmp olt <2 x float> %224, %194, !dbg !86
  %226 = fcmp uno <2 x float> %194, zeroinitializer, !dbg !88
  %227 = or <2 x i1> %226, %225, !dbg !89
  %.v7 = select <2 x i1> %227, <2 x i32> %193, <2 x i32> %.v6, !dbg !90
  %228 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !90
  %229 = fcmp olt <2 x float> %228, %197, !dbg !91
  %230 = or <2 x i1> %213, %229, !dbg !92
  %.v8 = select <2 x i1> %230, <2 x i32> %196, <2 x i32> %.v7, !dbg !93
  %231 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !93
  %232 = fcmp olt <2 x float> %231, %200, !dbg !94
  %233 = fcmp uno <2 x float> %200, zeroinitializer, !dbg !96
  %234 = or <2 x i1> %233, %232, !dbg !97
  %.v9 = select <2 x i1> %234, <2 x i32> %199, <2 x i32> %.v8, !dbg !98
  %235 = bitcast <2 x i32> %.v9 to <2 x float>, !dbg !98
  %236 = fcmp olt <2 x float> %235, %203, !dbg !99
  %237 = fcmp uno <2 x float> %203, zeroinitializer, !dbg !101
  %238 = or <2 x i1> %237, %236, !dbg !102
  %.v10 = select <2 x i1> %238, <2 x i32> %202, <2 x i32> %.v9, !dbg !103
  %239 = bitcast <2 x i32> %.v10 to <2 x float>, !dbg !103
  %240 = fcmp olt <2 x float> %239, %206, !dbg !104
  %241 = fcmp uno <2 x float> %206, zeroinitializer, !dbg !106
  %242 = or <2 x i1> %241, %240, !dbg !107
  %.v11 = select <2 x i1> %242, <2 x i32> %205, <2 x i32> %.v10, !dbg !108
  %243 = bitcast <2 x i32> %.v11 to <2 x float>, !dbg !108
  %244 = fcmp olt <2 x float> %243, %209, !dbg !109
  %245 = extractelement <2 x i1> %244, i64 1, !dbg !110
  %246 = or i1 %211, %245, !dbg !110
  %247 = extractelement <2 x float> %243, i64 1, !dbg !111
  %248 = select i1 %246, float %210, float %247, !dbg !111
  %249 = fsub float %248, %212, !dbg !112
  %250 = extractelement <2 x i1> %244, i64 0, !dbg !110
  %251 = or i1 %215, %250, !dbg !110
  %252 = extractelement <2 x float> %243, i64 0, !dbg !111
  %253 = select i1 %251, float %214, float %252, !dbg !111
  %254 = fsub float %253, %216, !dbg !112
  %255 = zext <2 x i1> %217 to <2 x i8>, !dbg !113
  %256 = select <2 x i1> %221, <2 x i8> splat (i8 2), <2 x i8> %255, !dbg !114
  %257 = select <2 x i1> %225, <2 x i8> splat (i8 3), <2 x i8> %256, !dbg !115
  %258 = select <2 x i1> %229, <2 x i8> splat (i8 4), <2 x i8> %257, !dbg !116
  %259 = select <2 x i1> %232, <2 x i8> splat (i8 5), <2 x i8> %258, !dbg !117
  %260 = select <2 x i1> %236, <2 x i8> splat (i8 6), <2 x i8> %259, !dbg !118
  %261 = select <2 x i1> %240, <2 x i8> splat (i8 7), <2 x i8> %260, !dbg !119
  %262 = select <2 x i1> %244, <2 x i8> splat (i8 8), <2 x i8> %261, !dbg !120
  %263 = bitcast i32 %50 to float, !dbg !26
  %264 = bitcast i32 %49 to float, !dbg !26
  %265 = bitcast i32 %46 to float, !dbg !24
  %266 = bitcast i32 %45 to float, !dbg !24
  %267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !121
  %268 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !121
  %269 = fmul float %254, %267, !dbg !122
  %270 = fmul float %249, %268, !dbg !122
  %271 = fmul float %269, %266, !dbg !123
  %272 = fmul float %270, %265, !dbg !123
  %273 = fadd float %271, %264, !dbg !124
  %274 = fadd float %272, %263, !dbg !124
  %275 = fcmp olt float %273, 0.000000e+00, !dbg !125
  %276 = fcmp olt float %274, 0.000000e+00, !dbg !125
  %277 = select i1 %275, float 0.000000e+00, float %273, !dbg !127
  %278 = select i1 %276, float 0.000000e+00, float %274, !dbg !127
  %279 = sext i32 %16 to i64, !dbg !128
  %280 = getelementptr float, ptr addrspace(1) %5, i64 %279, !dbg !128
  %281 = bitcast float %253 to i32, !dbg !129
  %282 = bitcast float %248 to i32, !dbg !129
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %281, i32 %282, ptr addrspace(1) %280, i1 %18) #3, !dbg !129
  %283 = getelementptr i8, ptr addrspace(1) %6, i64 %279, !dbg !130
  %284 = bitcast <2 x i8> %262 to i16, !dbg !131
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %284, ptr addrspace(1) %283, i1 %18) #3, !dbg !131
  %285 = getelementptr float, ptr addrspace(1) %7, i64 %279, !dbg !132
  %286 = bitcast float %277 to i32, !dbg !133
  %287 = bitcast float %278 to i32, !dbg !133
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %286, i32 %287, ptr addrspace(1) %285, i1 %18) #3, !dbg !133
  %288 = getelementptr float, ptr addrspace(1) %8, i64 %279, !dbg !134
  %289 = bitcast float %254 to i32, !dbg !135
  %290 = bitcast float %249 to i32, !dbg !135
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %289, i32 %290, ptr addrspace(1) %288, i1 %18) #3, !dbg !135
  ret void, !dbg !136
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czxn3whxgs7wkjxdkmhthumnxp5pyrezyl5nit4mkx2w3yy6qubv.py", directory: "inductor_cache/zx")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 28, column: 21, scope: !7)
!18 = !DILocation(line: 28, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 31, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 30, column: 31, scope: !7)
!22 = !DILocation(line: 30, column: 36, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 66, column: 20, scope: !7)
!28 = !DILocation(line: 35, column: 19, scope: !7)
!29 = !DILocation(line: 39, column: 20, scope: !7)
!30 = !DILocation(line: 40, column: 19, scope: !7)
!31 = !DILocation(line: 43, column: 19, scope: !7)
!32 = !DILocation(line: 44, column: 49, scope: !7)
!33 = !DILocation(line: 44, column: 39, scope: !7)
!34 = !DILocation(line: 44, column: 46, scope: !7)
!35 = !DILocation(line: 44, column: 31, scope: !7)
!36 = !DILocation(line: 44, column: 62, scope: !7)
!37 = !DILocation(line: 44, column: 54, scope: !7)
!38 = !DILocation(line: 46, column: 21, scope: !7)
!39 = !DILocation(line: 49, column: 19, scope: !7)
!40 = !DILocation(line: 50, column: 46, scope: !7)
!41 = !DILocation(line: 50, column: 31, scope: !7)
!42 = !DILocation(line: 50, column: 62, scope: !7)
!43 = !DILocation(line: 50, column: 54, scope: !7)
!44 = !DILocation(line: 57, column: 46, scope: !7)
!45 = !DILocation(line: 57, column: 31, scope: !7)
!46 = !DILocation(line: 57, column: 54, scope: !7)
!47 = !DILocation(line: 60, column: 21, scope: !7)
!48 = !DILocation(line: 63, column: 20, scope: !7)
!49 = !DILocation(line: 64, column: 45, scope: !7)
!50 = !DILocation(line: 64, column: 31, scope: !7)
!51 = !DILocation(line: 64, column: 61, scope: !7)
!52 = !DILocation(line: 64, column: 53, scope: !7)
!53 = !DILocation(line: 67, column: 31, scope: !7)
!54 = !DILocation(line: 67, column: 54, scope: !7)
!55 = !DILocation(line: 67, column: 46, scope: !7)
!56 = !DILocation(line: 70, column: 42, scope: !7)
!57 = !DILocation(line: 70, column: 31, scope: !7)
!58 = !DILocation(line: 70, column: 50, scope: !7)
!59 = !DILocation(line: 77, column: 43, scope: !7)
!60 = !DILocation(line: 77, column: 31, scope: !7)
!61 = !DILocation(line: 77, column: 51, scope: !7)
!62 = !DILocation(line: 80, column: 43, scope: !7)
!63 = !DILocation(line: 80, column: 31, scope: !7)
!64 = !DILocation(line: 80, column: 51, scope: !7)
!65 = !DILocation(line: 83, column: 43, scope: !7)
!66 = !DILocation(line: 83, column: 31, scope: !7)
!67 = !DILocation(line: 83, column: 51, scope: !7)
!68 = !DILocation(line: 112, column: 20, scope: !7)
!69 = !DILocation(line: 113, column: 27, scope: !7)
!70 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !73)
!71 = distinct !DILexicalBlockFile(scope: !7, file: !72, discriminator: 0)
!72 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!73 = !DILocation(line: 84, column: 42, scope: !7)
!74 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !75)
!75 = !DILocation(line: 68, column: 42, scope: !7)
!76 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !77)
!77 = !DILocation(line: 51, column: 42, scope: !7)
!78 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !77)
!79 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !77)
!80 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !77)
!81 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !82)
!82 = !DILocation(line: 58, column: 42, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !82)
!86 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !87)
!87 = !DILocation(line: 65, column: 42, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !87)
!91 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !75)
!92 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !75)
!93 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !75)
!94 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !95)
!95 = !DILocation(line: 71, column: 42, scope: !7)
!96 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !95)
!97 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !95)
!98 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !95)
!99 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !100)
!100 = !DILocation(line: 78, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !100)
!103 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !100)
!104 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !105)
!105 = !DILocation(line: 81, column: 42, scope: !7)
!106 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !105)
!107 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !105)
!108 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !105)
!109 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !73)
!110 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !73)
!111 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !73)
!112 = !DILocation(line: 110, column: 20, scope: !7)
!113 = !DILocation(line: 88, column: 35, scope: !7)
!114 = !DILocation(line: 91, column: 35, scope: !7)
!115 = !DILocation(line: 94, column: 35, scope: !7)
!116 = !DILocation(line: 97, column: 35, scope: !7)
!117 = !DILocation(line: 100, column: 35, scope: !7)
!118 = !DILocation(line: 103, column: 35, scope: !7)
!119 = !DILocation(line: 106, column: 35, scope: !7)
!120 = !DILocation(line: 109, column: 35, scope: !7)
!121 = !DILocation(line: 115, column: 20, scope: !7)
!122 = !DILocation(line: 118, column: 20, scope: !7)
!123 = !DILocation(line: 119, column: 20, scope: !7)
!124 = !DILocation(line: 120, column: 20, scope: !7)
!125 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !126)
!126 = !DILocation(line: 122, column: 42, scope: !7)
!127 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !126)
!128 = !DILocation(line: 123, column: 25, scope: !7)
!129 = !DILocation(line: 123, column: 37, scope: !7)
!130 = !DILocation(line: 124, column: 25, scope: !7)
!131 = !DILocation(line: 124, column: 37, scope: !7)
!132 = !DILocation(line: 125, column: 25, scope: !7)
!133 = !DILocation(line: 125, column: 37, scope: !7)
!134 = !DILocation(line: 126, column: 25, scope: !7)
!135 = !DILocation(line: 126, column: 37, scope: !7)
!136 = !DILocation(line: 126, column: 4, scope: !7)
