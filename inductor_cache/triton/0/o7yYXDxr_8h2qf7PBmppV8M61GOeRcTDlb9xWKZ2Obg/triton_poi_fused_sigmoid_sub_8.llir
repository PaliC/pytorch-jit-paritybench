; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_sigmoid_sub_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 256, !dbg !14
  %13 = sdiv i32 %11, 64, !dbg !15
  %14 = srem i32 %11, 16, !dbg !16
  %15 = srem i32 %11, 4, !dbg !17
  %16 = shl nsw i32 %13, 4, !dbg !18
  %17 = add nsw i32 %16, %14, !dbg !19
  %18 = sext i32 %17 to i64, !dbg !20
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !20
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 %12) #1, !dbg !21
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !21
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !21
  %23 = sext i32 %15 to i64, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !22
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 %12) #1, !dbg !23
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !23
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !23
  %28 = sext i32 %11 to i64, !dbg !24
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !24
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %12) #1, !dbg !25
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !25
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !25
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !26
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %12) #1, !dbg !27
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !27
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !27
  %37 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !25
  %38 = insertelement <2 x i32> %37, i32 %21, i64 1, !dbg !25
  %39 = bitcast <2 x i32> %38 to <2 x float>, !dbg !25
  %40 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !27
  %41 = insertelement <2 x i32> %40, i32 %26, i64 1, !dbg !27
  %42 = bitcast <2 x i32> %41 to <2 x float>, !dbg !27
  %43 = fadd <2 x float> %39, %42, !dbg !28
  %44 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !25
  %45 = insertelement <2 x i32> %44, i32 %22, i64 1, !dbg !25
  %46 = bitcast <2 x i32> %45 to <2 x float>, !dbg !25
  %47 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !27
  %48 = insertelement <2 x i32> %47, i32 %27, i64 1, !dbg !27
  %49 = bitcast <2 x i32> %48 to <2 x float>, !dbg !27
  %50 = fadd <2 x float> %46, %49, !dbg !28
  %shift = shufflevector <2 x float> %43, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !29
  %51 = fsub <2 x float> %43, %shift, !dbg !29
  %52 = extractelement <2 x float> %51, i64 0, !dbg !29
  %53 = fadd float %52, 0.000000e+00, !dbg !29
  %shift1 = shufflevector <2 x float> %50, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !29
  %54 = fsub <2 x float> %50, %shift1, !dbg !29
  %55 = extractelement <2 x float> %54, i64 0, !dbg !29
  %56 = fadd float %55, 0.000000e+00, !dbg !29
  %57 = fmul float %53, 0x3FF7154760000000, !dbg !33
  %58 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %57) #1, !dbg !33
  %59 = fmul float %56, 0x3FF7154760000000, !dbg !33
  %60 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %59) #1, !dbg !33
  %61 = fadd float %58, 1.000000e+00, !dbg !34
  %62 = fadd float %60, 1.000000e+00, !dbg !34
  %63 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %61) #1, !dbg !35
  %64 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %62) #1, !dbg !35
  %65 = bitcast float %63 to i32, !dbg !36
  %66 = bitcast float %64 to i32, !dbg !36
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %65, i32 %66, ptr addrspace(1) %29, i1 %12) #1, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvsmxfkfci6qgfflogljif5gmek3lmydecataji5pgbrbd4un2fn.py", directory: "inductor_cache/vs")
!4 = !{ptr @triton_poi_fused_sigmoid_sub_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_sigmoid_sub_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_sigmoid_sub_8", linkageName: "triton_poi_fused_sigmoid_sub_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 38, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 43, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 34, scope: !7)
!25 = !DILocation(line: 30, column: 39, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 18, scope: !7)
!29 = !DILocation(line: 47, column: 30, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = !DILocation(line: 35, column: 22, scope: !7)
!33 = !DILocation(line: 47, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 47, column: 20, scope: !30, inlinedAt: !32)
!35 = !DILocation(line: 47, column: 16, scope: !30, inlinedAt: !32)
!36 = !DILocation(line: 36, column: 39, scope: !7)
!37 = !DILocation(line: 36, column: 4, scope: !7)
