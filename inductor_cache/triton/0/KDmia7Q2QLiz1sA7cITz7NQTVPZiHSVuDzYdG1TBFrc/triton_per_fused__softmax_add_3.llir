; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/ir/cir2ogqxdnfch7jghg3mhfqn4tzwovovbt25pdbdcl5htua4vjjl.py\00"
@assertMessage_0 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp5 < 343\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_per_fused__softmax_add_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !11 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %7 = shl i32 %6, 5, !dbg !13
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %9 = lshr i32 %8, 3, !dbg !14
  %10 = and i32 %9, 3, !dbg !14
  %11 = and i32 %8, 32, !dbg !14
  %12 = lshr exact i32 %11, 3, !dbg !14
  %13 = or disjoint i32 %10, %12, !dbg !14
  %14 = and i32 %9, 8, !dbg !14
  %15 = or disjoint i32 %13, %14, !dbg !14
  %16 = and i32 %9, 16, !dbg !14
  %17 = or disjoint i32 %15, %16, !dbg !14
  %18 = or disjoint i32 %17, %7, !dbg !15
  %19 = icmp slt i32 %18, 512, !dbg !16
  %20 = shl i32 %8, 2, !dbg !17
  %21 = and i32 %20, 28, !dbg !17
  %.frozen = freeze i32 %18, !dbg !18
  %22 = sdiv i32 %.frozen, 32, !dbg !18
  %23 = mul i32 %22, 32, !dbg !19
  %.decomposed = sub i32 %.frozen, %23, !dbg !19
  %24 = shl i32 %18, 5, !dbg !20
  %25 = or disjoint i32 %24, %21, !dbg !21
  %26 = sext i32 %25 to i64, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !22
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #4, !dbg !23
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !23
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !23
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !23
  %33 = shl i32 %8, 7, !dbg !23
  %34 = and i32 %33, 896, !dbg !23
  %35 = or disjoint i32 %10, %34, !dbg !23
  %36 = or disjoint i32 %35, %12, !dbg !23
  %37 = or disjoint i32 %36, %14, !dbg !23
  %38 = or disjoint i32 %37, %16, !dbg !23
  %39 = and i32 %8, 255, !dbg !23
  %40 = lshr exact i32 %34, 5, !dbg !23
  %41 = add nuw nsw i32 %38, %40, !dbg !23
  %42 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %41, !dbg !23
  %43 = insertelement <1 x i32> poison, i32 %29, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, <1 x i32> %43, i1 true) #4, !dbg !23
  %44 = or disjoint i32 %38, 32, !dbg !23
  %45 = lshr i32 %44, 5, !dbg !23
  %46 = add nuw nsw i32 %45, %44, !dbg !23
  %47 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %46, !dbg !23
  %48 = insertelement <1 x i32> poison, i32 %30, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %48, i1 true) #4, !dbg !23
  %49 = or disjoint i32 %38, 64, !dbg !23
  %50 = lshr i32 %49, 5, !dbg !23
  %51 = add nuw nsw i32 %50, %49, !dbg !23
  %52 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %51, !dbg !23
  %53 = insertelement <1 x i32> poison, i32 %31, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %53, i1 true) #4, !dbg !23
  %54 = or disjoint i32 %38, 96, !dbg !23
  %55 = lshr i32 %54, 5, !dbg !23
  %56 = add nuw nsw i32 %55, %54, !dbg !23
  %57 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %56, !dbg !23
  %58 = insertelement <1 x i32> poison, i32 %32, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %58, i1 true) #4, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %59 = lshr i32 %39, 5, !dbg !23
  %60 = add nuw nsw i32 %59, %39, !dbg !23
  %61 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %60, !dbg !23
  %62 = load float, ptr addrspace(3) %61, align 4, !dbg !23
  %63 = or disjoint i32 %39, 256, !dbg !23
  %64 = lshr i32 %63, 5, !dbg !23
  %65 = add nuw nsw i32 %64, %63, !dbg !23
  %66 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %65, !dbg !23
  %67 = load float, ptr addrspace(3) %66, align 4, !dbg !23
  %68 = or disjoint i32 %39, 512, !dbg !23
  %69 = lshr i32 %68, 5, !dbg !23
  %70 = add nuw nsw i32 %69, %68, !dbg !23
  %71 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %70, !dbg !23
  %72 = load float, ptr addrspace(3) %71, align 4, !dbg !23
  %73 = or disjoint i32 %39, 768, !dbg !23
  %74 = lshr i32 %73, 5, !dbg !23
  %75 = add nuw nsw i32 %74, %73, !dbg !23
  %76 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %75, !dbg !23
  %77 = load float, ptr addrspace(3) %76, align 4, !dbg !23
  %78 = shl nsw i32 %.decomposed, 5, !dbg !24
  %79 = or disjoint i32 %78, %21, !dbg !25
  %80 = or disjoint i32 %79, 2, !dbg !25
  %81 = sext i32 %79 to i64, !dbg !26
  %82 = getelementptr i64, ptr addrspace(1) %1, i64 %81, !dbg !26
  %83 = sext i32 %80 to i64, !dbg !26
  %84 = getelementptr i64, ptr addrspace(1) %1, i64 %83, !dbg !26
  %85 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %82, i1 %19, i1 %19, i1 %19) #4, !dbg !27
  %86 = extractvalue { i64, i64 } %85, 0, !dbg !27
  %87 = extractvalue { i64, i64 } %85, 1, !dbg !27
  %88 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %84, i1 %19, i1 %19, i1 %19) #4, !dbg !27
  %89 = extractvalue { i64, i64 } %88, 0, !dbg !27
  %90 = extractvalue { i64, i64 } %88, 1, !dbg !27
  %91 = insertelement <4 x i64> poison, i64 %86, i64 0, !dbg !28
  %92 = insertelement <4 x i64> %91, i64 %87, i64 1, !dbg !28
  %93 = insertelement <4 x i64> %92, i64 %89, i64 2, !dbg !28
  %94 = insertelement <4 x i64> %93, i64 %90, i64 3, !dbg !28
  %95 = add <4 x i64> %94, splat (i64 343), !dbg !28
  %96 = icmp slt <4 x i64> %94, zeroinitializer, !dbg !29
  %97 = select <4 x i1> %96, <4 x i64> %95, <4 x i64> %94, !dbg !30
  %98 = icmp ugt <4 x i64> %97, splat (i64 342), !dbg !31
  %99 = bitcast <4 x i1> %98 to i4, !dbg !32
  %100 = icmp ne i4 %99, 0, !dbg !32
  %101 = and i1 %19, %100, !dbg !32
  br i1 %101, label %102, label %103, !dbg !32

102:                                              ; preds = %5
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 39, ptr nonnull @assertFunc_0, i64 1), !dbg !32
  unreachable, !dbg !32

103:                                              ; preds = %5
  %104 = and i32 %8, 31, !dbg !14
  %105 = srem i32 %22, 4, !dbg !33
  %106 = or disjoint i32 %7, %104, !dbg !15
  %107 = icmp slt i32 %106, 512, !dbg !16
  %108 = lshr i32 %8, 5, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %109 = sext i32 %105 to i64, !dbg !34
  %110 = extractelement <4 x i64> %97, i64 0, !dbg !35
  %.idx = shl i64 %110, 4, !dbg !35
  %111 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx, !dbg !35
  %112 = getelementptr float, ptr addrspace(1) %111, i64 %109, !dbg !35
  %113 = extractelement <4 x i64> %97, i64 1, !dbg !35
  %.idx11 = shl i64 %113, 4, !dbg !35
  %114 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx11, !dbg !35
  %115 = getelementptr float, ptr addrspace(1) %114, i64 %109, !dbg !35
  %116 = extractelement <4 x i64> %97, i64 2, !dbg !35
  %.idx12 = shl i64 %116, 4, !dbg !35
  %117 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx12, !dbg !35
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %109, !dbg !35
  %119 = extractelement <4 x i64> %97, i64 3, !dbg !35
  %.idx13 = shl i64 %119, 4, !dbg !35
  %120 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx13, !dbg !35
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %109, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %122 = ptrtoint ptr addrspace(1) %112 to i64, !dbg !36
  %123 = ptrtoint ptr addrspace(1) %115 to i64, !dbg !36
  %124 = ptrtoint ptr addrspace(1) %118 to i64, !dbg !36
  %125 = ptrtoint ptr addrspace(1) %121 to i64, !dbg !36
  %126 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %41, !dbg !36
  %127 = insertelement <1 x i64> poison, i64 %122, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %126, <1 x i64> %127, i1 true) #4, !dbg !36
  %128 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %46, !dbg !36
  %129 = insertelement <1 x i64> poison, i64 %123, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %128, <1 x i64> %129, i1 true) #4, !dbg !36
  %130 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %51, !dbg !36
  %131 = insertelement <1 x i64> poison, i64 %124, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %130, <1 x i64> %131, i1 true) #4, !dbg !36
  %132 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %56, !dbg !36
  %133 = insertelement <1 x i64> poison, i64 %125, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %132, <1 x i64> %133, i1 true) #4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %134 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %60, !dbg !36
  %135 = load i64, ptr addrspace(3) %134, align 8, !dbg !36
  %136 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %65, !dbg !36
  %137 = load i64, ptr addrspace(3) %136, align 8, !dbg !36
  %138 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %70, !dbg !36
  %139 = load i64, ptr addrspace(3) %138, align 8, !dbg !36
  %140 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %75, !dbg !36
  %141 = load i64, ptr addrspace(3) %140, align 8, !dbg !36
  %142 = inttoptr i64 %135 to ptr addrspace(1), !dbg !36
  %143 = inttoptr i64 %137 to ptr addrspace(1), !dbg !36
  %144 = inttoptr i64 %139 to ptr addrspace(1), !dbg !36
  %145 = inttoptr i64 %141 to ptr addrspace(1), !dbg !36
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %107) #4, !dbg !36
  %147 = bitcast i32 %146 to float, !dbg !36
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %107) #4, !dbg !36
  %149 = bitcast i32 %148 to float, !dbg !36
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %107) #4, !dbg !36
  %151 = bitcast i32 %150 to float, !dbg !36
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 %107) #4, !dbg !36
  %153 = bitcast i32 %152 to float, !dbg !36
  %154 = fadd float %62, %147, !dbg !37
  %155 = fadd float %67, %149, !dbg !37
  %156 = fadd float %72, %151, !dbg !37
  %157 = fadd float %77, %153, !dbg !37
  %158 = select i1 %107, float %154, float 0xFFF0000000000000, !dbg !38
  %159 = select i1 %107, float %155, float 0xFFF0000000000000, !dbg !38
  %160 = select i1 %107, float %156, float 0xFFF0000000000000, !dbg !38
  %161 = select i1 %107, float %157, float 0xFFF0000000000000, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %162 = fcmp ogt float %158, %159, !dbg !43
  %163 = fcmp uno float %158, 0.000000e+00, !dbg !45
  %164 = or i1 %163, %162, !dbg !46
  %165 = select i1 %164, float %158, float %159, !dbg !47
  %166 = fcmp ogt float %165, %160, !dbg !43
  %167 = fcmp uno float %165, 0.000000e+00, !dbg !45
  %168 = or i1 %166, %167, !dbg !46
  %169 = select i1 %168, float %165, float %160, !dbg !47
  %170 = fcmp ogt float %169, %161, !dbg !43
  %171 = fcmp uno float %169, 0.000000e+00, !dbg !45
  %172 = or i1 %170, %171, !dbg !46
  %173 = select i1 %172, float %169, float %161, !dbg !47
  %174 = and i32 %108, 7, !dbg !39
  %175 = shl nuw nsw i32 %104, 3, !dbg !39
  %176 = or disjoint i32 %175, %174, !dbg !39
  %177 = getelementptr float, ptr addrspace(3) @global_smem, i32 %176, !dbg !39
  %178 = bitcast float %173 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %178, i1 true) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %179 = icmp slt i32 %8, 256, !dbg !39
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !39
  %181 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %180, i1 %179) #4, !dbg !39
  %182 = bitcast i32 %181 to float, !dbg !39
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 4, i32 31), !dbg !39
  %184 = bitcast i32 %183 to float, !dbg !39
  %185 = fcmp ogt float %182, %184, !dbg !43
  %186 = fcmp uno float %182, 0.000000e+00, !dbg !45
  %187 = or i1 %186, %185, !dbg !46
  %188 = select i1 %187, float %182, float %184, !dbg !47
  %189 = bitcast float %188 to i32, !dbg !39
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 2, i32 31), !dbg !39
  %191 = bitcast i32 %190 to float, !dbg !39
  %192 = fcmp ogt float %188, %191, !dbg !43
  %193 = fcmp uno float %188, 0.000000e+00, !dbg !45
  %194 = or i1 %192, %193, !dbg !46
  %195 = select i1 %194, float %188, float %191, !dbg !47
  %196 = bitcast float %195 to i32, !dbg !39
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 1, i32 31), !dbg !39
  %198 = bitcast i32 %197 to float, !dbg !39
  %199 = fcmp ogt float %195, %198, !dbg !43
  %200 = fcmp uno float %195, 0.000000e+00, !dbg !45
  %201 = or i1 %199, %200, !dbg !46
  %202 = and i32 %8, 7, !dbg !39
  %203 = icmp eq i32 %202, 0, !dbg !39
  %204 = and i1 %179, %203, !dbg !39
  %205 = select i1 %201, i32 %196, i32 %197, !dbg !47
  %206 = insertelement <1 x i32> poison, i32 %205, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %206, i1 %204) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %207 = getelementptr float, ptr addrspace(3) @global_smem, i32 %175, !dbg !39
  %208 = load float, ptr addrspace(3) %207, align 16, !dbg !39
  %209 = fsub float %154, %208, !dbg !48
  %210 = fsub float %155, %208, !dbg !48
  %211 = fsub float %156, %208, !dbg !48
  %212 = fsub float %157, %208, !dbg !48
  %213 = fmul float %209, 0x3FF7154760000000, !dbg !49
  %214 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %213) #4, !dbg !49
  %215 = fmul float %210, 0x3FF7154760000000, !dbg !49
  %216 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %215) #4, !dbg !49
  %217 = fmul float %211, 0x3FF7154760000000, !dbg !49
  %218 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %217) #4, !dbg !49
  %219 = fmul float %212, 0x3FF7154760000000, !dbg !49
  %220 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %219) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %221 = fadd float %214, %216, !dbg !54
  %222 = fadd float %221, %218, !dbg !54
  %223 = fadd float %222, %220, !dbg !54
  %224 = bitcast float %223 to i32, !dbg !50
  %225 = select i1 %107, i32 %224, i32 0, !dbg !54
  %226 = insertelement <1 x i32> poison, i32 %225, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %226, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %227 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %180, i1 %179) #4, !dbg !50
  %228 = bitcast i32 %227 to float, !dbg !50
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 4, i32 31), !dbg !50
  %230 = bitcast i32 %229 to float, !dbg !50
  %231 = fadd float %228, %230, !dbg !54
  %232 = bitcast float %231 to i32, !dbg !50
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 2, i32 31), !dbg !50
  %234 = bitcast i32 %233 to float, !dbg !50
  %235 = fadd float %231, %234, !dbg !54
  %236 = bitcast float %235 to i32, !dbg !50
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 1, i32 31), !dbg !50
  %238 = bitcast i32 %237 to float, !dbg !50
  %239 = fadd float %235, %238, !dbg !54
  %240 = bitcast float %239 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %240, i1 %204) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %241 = load float, ptr addrspace(3) %207, align 16, !dbg !50
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %214, float %241) #4, !dbg !56
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %216, float %241) #4, !dbg !56
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %218, float %241) #4, !dbg !56
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %220, float %241) #4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %246 = shl i32 %8, 5, !dbg !57
  %247 = and i32 %246, 992, !dbg !57
  %.lobit14 = lshr exact i32 %11, 5, !dbg !57
  %248 = and i32 %108, 6, !dbg !57
  %249 = or disjoint i32 %.lobit14, %248, !dbg !57
  %250 = or disjoint i32 %249, %247, !dbg !57
  %251 = and i32 %20, 1020, !dbg !57
  %252 = lshr exact i32 %247, 1, !dbg !57
  %253 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %252, !dbg !57
  %254 = getelementptr float, ptr addrspace(3) %253, i32 %250, !dbg !57
  %255 = bitcast float %242 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %255, i1 true) #4, !dbg !57
  %256 = or disjoint i32 %250, 8, !dbg !57
  %257 = getelementptr float, ptr addrspace(3) %253, i32 %256, !dbg !57
  %258 = bitcast float %243 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, <1 x i32> %258, i1 true) #4, !dbg !57
  %259 = or disjoint i32 %250, 16, !dbg !57
  %260 = getelementptr float, ptr addrspace(3) %253, i32 %259, !dbg !57
  %261 = bitcast float %244 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %261, i1 true) #4, !dbg !57
  %262 = or disjoint i32 %250, 24, !dbg !57
  %263 = getelementptr float, ptr addrspace(3) %253, i32 %262, !dbg !57
  %264 = bitcast float %245 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #4, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %265 = lshr i32 %20, 3, !dbg !57
  %266 = and i32 %265, 124, !dbg !57
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %266, !dbg !57
  %268 = getelementptr inbounds float, ptr addrspace(3) %267, i32 %251, !dbg !57
  %.extract = load i32, ptr addrspace(3) %268, align 16, !dbg !57
  %269 = getelementptr inbounds i8, ptr addrspace(3) %268, i32 4, !dbg !57
  %.extract19 = load i32, ptr addrspace(3) %269, align 4, !dbg !57
  %270 = getelementptr inbounds i8, ptr addrspace(3) %268, i32 8, !dbg !57
  %.extract20 = load i32, ptr addrspace(3) %270, align 8, !dbg !57
  %271 = getelementptr inbounds i8, ptr addrspace(3) %268, i32 12, !dbg !57
  %.extract21 = load i32, ptr addrspace(3) %271, align 4, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %27, i1 %19) #4, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cir2ogqxdnfch7jghg3mhfqn4tzwovovbt25pdbdcl5htua4vjjl.py", directory: "inductor_cache/ir")
!4 = !{ptr @triton_per_fused__softmax_add_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_add_3, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_per_fused__softmax_add_3", linkageName: "triton_per_fused__softmax_add_3", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 23, column: 28, scope: !11)
!13 = !DILocation(line: 23, column: 33, scope: !11)
!14 = !DILocation(line: 24, column: 44, scope: !11)
!15 = !DILocation(line: 24, column: 23, scope: !11)
!16 = !DILocation(line: 25, column: 21, scope: !11)
!17 = !DILocation(line: 26, column: 34, scope: !11)
!18 = !DILocation(line: 32, column: 21, scope: !11)
!19 = !DILocation(line: 31, column: 19, scope: !11)
!20 = !DILocation(line: 33, column: 42, scope: !11)
!21 = !DILocation(line: 33, column: 39, scope: !11)
!22 = !DILocation(line: 33, column: 34, scope: !11)
!23 = !DILocation(line: 33, column: 47, scope: !11)
!24 = !DILocation(line: 34, column: 38, scope: !11)
!25 = !DILocation(line: 34, column: 35, scope: !11)
!26 = !DILocation(line: 34, column: 30, scope: !11)
!27 = !DILocation(line: 34, column: 43, scope: !11)
!28 = !DILocation(line: 36, column: 18, scope: !11)
!29 = !DILocation(line: 37, column: 18, scope: !11)
!30 = !DILocation(line: 38, column: 32, scope: !11)
!31 = !DILocation(line: 39, column: 37, scope: !11)
!32 = !DILocation(line: 39, column: 62, scope: !11)
!33 = !DILocation(line: 32, column: 27, scope: !11)
!34 = !DILocation(line: 40, column: 35, scope: !11)
!35 = !DILocation(line: 40, column: 30, scope: !11)
!36 = !DILocation(line: 40, column: 44, scope: !11)
!37 = !DILocation(line: 41, column: 18, scope: !11)
!38 = !DILocation(line: 43, column: 34, scope: !11)
!39 = !DILocation(line: 131, column: 29, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !11, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 44, column: 39, scope: !11)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !42)
!44 = distinct !DILexicalBlockFile(scope: !40, file: !41, discriminator: 0)
!45 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !42)
!46 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !42)
!47 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !42)
!48 = !DILocation(line: 45, column: 19, scope: !11)
!49 = !DILocation(line: 46, column: 24, scope: !11)
!50 = !DILocation(line: 267, column: 36, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !11, file: !52, discriminator: 0)
!52 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!53 = !DILocation(line: 49, column: 26, scope: !11)
!54 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !53)
!55 = distinct !DILexicalBlockFile(scope: !51, file: !52, discriminator: 0)
!56 = !DILocation(line: 50, column: 20, scope: !11)
!57 = !DILocation(line: 51, column: 48, scope: !11)
!58 = !DILocation(line: 51, column: 4, scope: !11)
