; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 28, !dbg !12
  %12 = lshr i32 %9, 3, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %13, 16, !dbg !12
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %8, %13, !dbg !13
  %17 = or disjoint i32 %8, %14, !dbg !13
  %18 = icmp slt i32 %15, 512, !dbg !14
  %19 = icmp slt i32 %16, 512, !dbg !14
  %20 = icmp slt i32 %17, 512, !dbg !14
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %22 = shl i32 %21, 5, !dbg !16
  %23 = or disjoint i32 %22, %13, !dbg !17
  %24 = or disjoint i32 %22, %14, !dbg !17
  %25 = or disjoint i32 %22, %11, !dbg !17
  %26 = icmp slt i32 %23, 144, !dbg !18
  %27 = icmp slt i32 %24, 144, !dbg !18
  %28 = icmp slt i32 %25, 144, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %29 = sdiv i32 %.frozen, 128, !dbg !19
  %30 = mul i32 %29, 128, !dbg !20
  %.decomposed = sub i32 %.frozen, %30, !dbg !20
  %31 = shl i32 %23, 7, !dbg !21
  %32 = shl i32 %24, 7, !dbg !21
  %33 = mul i32 %29, 18432, !dbg !22
  %34 = add i32 %33, %.decomposed, !dbg !23
  %35 = add i32 %34, %31, !dbg !24
  %36 = add i32 %34, %32, !dbg !24
  %37 = sext i32 %35 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = sext i32 %36 to i64, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !25
  %41 = and i1 %18, %26, !dbg !26
  %42 = and i1 %18, %27, !dbg !26
  %43 = and i1 %19, %28, !dbg !26
  %44 = and i1 %20, %28, !dbg !26
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %41) #2, !dbg !27
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !27
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !27
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !27
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !27
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %42) #2, !dbg !27
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !27
  %55 = sext i32 %.decomposed to i64, !dbg !28
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !28
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %18) #2, !dbg !29
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !29
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !29
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !29
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !29
  %62 = insertelement <8 x i32> poison, i32 %54, i64 0, !dbg !27
  %63 = insertelement <8 x i32> %62, i32 %53, i64 1, !dbg !27
  %64 = insertelement <8 x i32> %63, i32 %52, i64 2, !dbg !27
  %65 = insertelement <8 x i32> %64, i32 %51, i64 3, !dbg !27
  %66 = insertelement <8 x i32> %65, i32 %49, i64 4, !dbg !27
  %67 = insertelement <8 x i32> %66, i32 %48, i64 5, !dbg !27
  %68 = insertelement <8 x i32> %67, i32 %47, i64 6, !dbg !27
  %69 = insertelement <8 x i32> %68, i32 %46, i64 7, !dbg !27
  %70 = bitcast <8 x i32> %69 to <8 x float>, !dbg !27
  %71 = insertelement <4 x i32> poison, i32 %61, i64 0, !dbg !29
  %72 = insertelement <4 x i32> %71, i32 %60, i64 1, !dbg !29
  %73 = insertelement <4 x i32> %72, i32 %59, i64 2, !dbg !29
  %74 = insertelement <4 x i32> %73, i32 %58, i64 3, !dbg !29
  %75 = bitcast <4 x i32> %74 to <4 x float>, !dbg !29
  %76 = shufflevector <4 x float> %75, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !29
  %77 = fadd <8 x float> %76, %70, !dbg !30
  %78 = fcmp olt <8 x float> %77, zeroinitializer, !dbg !31
  %79 = extractelement <8 x i1> %78, i64 7, !dbg !35
  %80 = extractelement <8 x float> %77, i64 7, !dbg !35
  %81 = select i1 %79, float 0.000000e+00, float %80, !dbg !35
  %82 = extractelement <8 x i1> %78, i64 6, !dbg !35
  %83 = extractelement <8 x float> %77, i64 6, !dbg !35
  %84 = select i1 %82, float 0.000000e+00, float %83, !dbg !35
  %85 = extractelement <8 x i1> %78, i64 5, !dbg !35
  %86 = extractelement <8 x float> %77, i64 5, !dbg !35
  %87 = select i1 %85, float 0.000000e+00, float %86, !dbg !35
  %88 = extractelement <8 x i1> %78, i64 4, !dbg !35
  %89 = extractelement <8 x float> %77, i64 4, !dbg !35
  %90 = select i1 %88, float 0.000000e+00, float %89, !dbg !35
  %91 = extractelement <8 x i1> %78, i64 3, !dbg !35
  %92 = extractelement <8 x float> %77, i64 3, !dbg !35
  %93 = select i1 %91, float 0.000000e+00, float %92, !dbg !35
  %94 = extractelement <8 x i1> %78, i64 2, !dbg !35
  %95 = extractelement <8 x float> %77, i64 2, !dbg !35
  %96 = select i1 %94, float 0.000000e+00, float %95, !dbg !35
  %97 = extractelement <8 x i1> %78, i64 1, !dbg !35
  %98 = extractelement <8 x float> %77, i64 1, !dbg !35
  %99 = select i1 %97, float 0.000000e+00, float %98, !dbg !35
  %100 = extractelement <8 x i1> %78, i64 0, !dbg !35
  %101 = extractelement <8 x float> %77, i64 0, !dbg !35
  %102 = select i1 %100, float 0.000000e+00, float %101, !dbg !35
  %103 = mul i32 %16, 144, !dbg !36
  %104 = mul i32 %17, 144, !dbg !36
  %105 = add i32 %25, %103, !dbg !37
  %106 = add i32 %25, %104, !dbg !37
  %107 = sext i32 %105 to i64, !dbg !38
  %108 = getelementptr float, ptr addrspace(1) %2, i64 %107, !dbg !38
  %109 = sext i32 %106 to i64, !dbg !38
  %110 = getelementptr float, ptr addrspace(1) %2, i64 %109, !dbg !38
  %111 = shl i32 %9, 7, !dbg !39
  %112 = and i32 %111, 896, !dbg !39
  %113 = or disjoint i32 %112, %13, !dbg !39
  %114 = and i32 %10, 508, !dbg !39
  %115 = lshr exact i32 %112, 5, !dbg !39
  %116 = add nuw nsw i32 %115, %113, !dbg !39
  %117 = zext nneg i32 %116 to i64, !dbg !39
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %117, !dbg !39
  %119 = bitcast float %81 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #2, !dbg !39
  %120 = or disjoint i32 %113, 32, !dbg !39
  %121 = lshr i32 %120, 5, !dbg !39
  %122 = add nuw nsw i32 %121, %120, !dbg !39
  %123 = zext nneg i32 %122 to i64, !dbg !39
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %123, !dbg !39
  %125 = bitcast float %84 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 true) #2, !dbg !39
  %126 = or disjoint i32 %113, 64, !dbg !39
  %127 = lshr i32 %126, 5, !dbg !39
  %128 = add nuw nsw i32 %127, %126, !dbg !39
  %129 = zext nneg i32 %128 to i64, !dbg !39
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %129, !dbg !39
  %131 = bitcast float %87 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #2, !dbg !39
  %132 = or disjoint i32 %113, 96, !dbg !39
  %133 = lshr i32 %132, 5, !dbg !39
  %134 = add nuw nsw i32 %133, %132, !dbg !39
  %135 = zext nneg i32 %134 to i64, !dbg !39
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %135, !dbg !39
  %137 = bitcast float %90 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #2, !dbg !39
  %138 = or disjoint i32 %113, 16, !dbg !39
  %139 = add nuw nsw i32 %138, %115, !dbg !39
  %140 = zext nneg i32 %139 to i64, !dbg !39
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %140, !dbg !39
  %142 = bitcast float %93 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #2, !dbg !39
  %143 = or disjoint i32 %113, 48, !dbg !39
  %144 = lshr i32 %143, 5, !dbg !39
  %145 = add nuw nsw i32 %144, %143, !dbg !39
  %146 = zext nneg i32 %145 to i64, !dbg !39
  %147 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %146, !dbg !39
  %148 = bitcast float %96 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #2, !dbg !39
  %149 = or disjoint i32 %113, 80, !dbg !39
  %150 = lshr i32 %149, 5, !dbg !39
  %151 = add nuw nsw i32 %150, %149, !dbg !39
  %152 = zext nneg i32 %151 to i64, !dbg !39
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %152, !dbg !39
  %154 = bitcast float %99 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #2, !dbg !39
  %155 = or disjoint i32 %113, 112, !dbg !39
  %156 = lshr i32 %155, 5, !dbg !39
  %157 = add nuw nsw i32 %156, %155, !dbg !39
  %158 = zext nneg i32 %157 to i64, !dbg !39
  %159 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %158, !dbg !39
  %160 = bitcast float %102 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %161 = lshr i32 %114, 5, !dbg !39
  %162 = add nuw nsw i32 %161, %114, !dbg !39
  %163 = zext nneg i32 %162 to i64, !dbg !39
  %164 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %163, !dbg !39
  %165 = load i32, ptr addrspace(3) %164, align 4, !dbg !39
  %166 = or disjoint i32 %114, 1, !dbg !39
  %167 = add nuw nsw i32 %166, %161, !dbg !39
  %168 = zext nneg i32 %167 to i64, !dbg !39
  %169 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %168, !dbg !39
  %170 = load i32, ptr addrspace(3) %169, align 4, !dbg !39
  %171 = or disjoint i32 %114, 2, !dbg !39
  %172 = add nuw nsw i32 %171, %161, !dbg !39
  %173 = zext nneg i32 %172 to i64, !dbg !39
  %174 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %173, !dbg !39
  %175 = load i32, ptr addrspace(3) %174, align 4, !dbg !39
  %176 = or disjoint i32 %114, 3, !dbg !39
  %177 = add nuw nsw i32 %176, %161, !dbg !39
  %178 = zext nneg i32 %177 to i64, !dbg !39
  %179 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %178, !dbg !39
  %180 = load i32, ptr addrspace(3) %179, align 4, !dbg !39
  %181 = or disjoint i32 %114, 512, !dbg !39
  %182 = lshr i32 %181, 5, !dbg !39
  %183 = add nuw nsw i32 %182, %181, !dbg !39
  %184 = zext nneg i32 %183 to i64, !dbg !39
  %185 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %184, !dbg !39
  %186 = load i32, ptr addrspace(3) %185, align 4, !dbg !39
  %187 = or disjoint i32 %114, 513, !dbg !39
  %188 = lshr i32 %187, 5, !dbg !39
  %189 = add nuw nsw i32 %188, %187, !dbg !39
  %190 = zext nneg i32 %189 to i64, !dbg !39
  %191 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %190, !dbg !39
  %192 = load i32, ptr addrspace(3) %191, align 4, !dbg !39
  %193 = or disjoint i32 %114, 514, !dbg !39
  %194 = lshr i32 %193, 5, !dbg !39
  %195 = add nuw nsw i32 %194, %193, !dbg !39
  %196 = zext nneg i32 %195 to i64, !dbg !39
  %197 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %196, !dbg !39
  %198 = load i32, ptr addrspace(3) %197, align 4, !dbg !39
  %199 = or disjoint i32 %114, 515, !dbg !39
  %200 = lshr i32 %199, 5, !dbg !39
  %201 = add nuw nsw i32 %200, %199, !dbg !39
  %202 = zext nneg i32 %201 to i64, !dbg !39
  %203 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %202, !dbg !39
  %204 = load i32, ptr addrspace(3) %203, align 4, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %165, i32 %170, i32 %175, i32 %180, ptr addrspace(1) %108, i1 %43) #2, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %186, i32 %192, i32 %198, i32 %204, ptr addrspace(1) %110, i1 %44) #2, !dbg !39
  %205 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !40
  %206 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !40
  %207 = bitcast float %81 to i32, !dbg !41
  %208 = bitcast float %84 to i32, !dbg !41
  %209 = bitcast float %87 to i32, !dbg !41
  %210 = bitcast float %90 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %207, i32 %208, i32 %209, i32 %210, ptr addrspace(1) %205, i1 %41) #2, !dbg !41
  %211 = bitcast float %93 to i32, !dbg !41
  %212 = bitcast float %96 to i32, !dbg !41
  %213 = bitcast float %99 to i32, !dbg !41
  %214 = bitcast float %102 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %211, i32 %212, i32 %213, i32 %214, ptr addrspace(1) %206, i1 %42) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmxitogs3hkzn4p2biygujjpfjfevuwpybp2gb6lby5xcbhyjmca.py", directory: "inductor_cache/mx")
!4 = !{ptr @triton_poi_fused_convolution_relu_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_9", linkageName: "triton_poi_fused_convolution_relu_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 63, scope: !7)
!27 = !DILocation(line: 32, column: 55, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 36, column: 40, scope: !7)
!35 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 37, column: 34, scope: !7)
!37 = !DILocation(line: 37, column: 30, scope: !7)
!38 = !DILocation(line: 37, column: 25, scope: !7)
!39 = !DILocation(line: 37, column: 45, scope: !7)
!40 = !DILocation(line: 38, column: 25, scope: !7)
!41 = !DILocation(line: 38, column: 56, scope: !7)
!42 = !DILocation(line: 38, column: 4, scope: !7)
