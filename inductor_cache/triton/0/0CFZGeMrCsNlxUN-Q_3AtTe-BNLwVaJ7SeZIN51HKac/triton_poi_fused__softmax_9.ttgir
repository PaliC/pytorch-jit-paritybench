#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused__softmax_9(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<6144> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<4096> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<2048> : tensor<128xi32, #blocked> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<128xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<128xi32, #blocked> loc(#loc5)
    %5 = arith.remsi %4, %cst_1 : tensor<128xi32, #blocked> loc(#loc6)
    %6 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc7)
    %7 = tt.addptr %6, %4 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc7)
    %8 = tt.load %7 : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc8)
    %9 = tt.addptr %6, %5 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc9)
    %10 = tt.load %9 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc10)
    %11 = arith.addi %5, %cst_1 : tensor<128xi32, #blocked> loc(#loc11)
    %12 = tt.addptr %6, %11 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc12)
    %13 = tt.load %12 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc13)
    %14 = arith.addi %5, %cst_0 : tensor<128xi32, #blocked> loc(#loc14)
    %15 = tt.addptr %6, %14 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc15)
    %16 = tt.load %15 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc16)
    %17 = arith.addi %5, %cst : tensor<128xi32, #blocked> loc(#loc17)
    %18 = tt.addptr %6, %17 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc18)
    %19 = tt.load %18 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc19)
    %20 = arith.cmpf ogt, %10, %13 : tensor<128xf32, #blocked> loc(#loc32)
    %21 = arith.cmpf une, %10, %10 : tensor<128xf32, #blocked> loc(#loc33)
    %22 = arith.ori %20, %21 : tensor<128xi1, #blocked> loc(#loc34)
    %23 = arith.select %22, %10, %13 : tensor<128xi1, #blocked>, tensor<128xf32, #blocked> loc(#loc35)
    %24 = arith.cmpf ogt, %23, %16 : tensor<128xf32, #blocked> loc(#loc36)
    %25 = arith.cmpf une, %23, %23 : tensor<128xf32, #blocked> loc(#loc37)
    %26 = arith.ori %24, %25 : tensor<128xi1, #blocked> loc(#loc38)
    %27 = arith.select %26, %23, %16 : tensor<128xi1, #blocked>, tensor<128xf32, #blocked> loc(#loc39)
    %28 = arith.cmpf ogt, %27, %19 : tensor<128xf32, #blocked> loc(#loc40)
    %29 = arith.cmpf une, %27, %27 : tensor<128xf32, #blocked> loc(#loc41)
    %30 = arith.ori %28, %29 : tensor<128xi1, #blocked> loc(#loc42)
    %31 = arith.select %30, %27, %19 : tensor<128xi1, #blocked>, tensor<128xf32, #blocked> loc(#loc43)
    %32 = arith.subf %8, %31 : tensor<128xf32, #blocked> loc(#loc27)
    %33 = math.exp %32 : tensor<128xf32, #blocked> loc(#loc28)
    %34 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc29)
    %35 = tt.addptr %34, %4 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc29)
    tt.store %35, %33 : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc30)
    tt.return loc(#loc31)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":21:28)
#loc3 = loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":21:33)
#loc4 = loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":22:36)
#loc5 = loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":22:23)
#loc6 = loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":25:19)
#loc7 = loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":26:30)
#loc8 = loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":26:35)
#loc9 = loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":27:30)
#loc10 = loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":27:35)
#loc11 = loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":28:37)
#loc12 = loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":28:30)
#loc13 = loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":28:42)
#loc14 = loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":29:37)
#loc15 = loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":29:30)
#loc16 = loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":29:42)
#loc17 = loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":30:37)
#loc18 = loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":30:30)
#loc19 = loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":30:42)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc21 = loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":31:40)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc25 = loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":32:40)
#loc26 = loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":33:40)
#loc27 = loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":34:18)
#loc28 = loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":35:23)
#loc29 = loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":36:25)
#loc30 = loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":36:36)
#loc31 = loc("inductor_cache/xh/cxhywhdoibdrp3v4yzhbou3y3vhmf6byu5c2ufjrnoh3a25wmkf2.py":36:4)
#loc32 = loc(callsite(#loc20 at #loc21))
#loc33 = loc(callsite(#loc22 at #loc21))
#loc34 = loc(callsite(#loc23 at #loc21))
#loc35 = loc(callsite(#loc24 at #loc21))
#loc36 = loc(callsite(#loc20 at #loc25))
#loc37 = loc(callsite(#loc22 at #loc25))
#loc38 = loc(callsite(#loc23 at #loc25))
#loc39 = loc(callsite(#loc24 at #loc25))
#loc40 = loc(callsite(#loc20 at #loc26))
#loc41 = loc(callsite(#loc22 at #loc26))
#loc42 = loc(callsite(#loc23 at #loc26))
#loc43 = loc(callsite(#loc24 at #loc26))
