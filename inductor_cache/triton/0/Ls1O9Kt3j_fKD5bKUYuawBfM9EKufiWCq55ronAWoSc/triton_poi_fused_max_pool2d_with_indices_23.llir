; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = srem i32 %10, 192, !dbg !14
  %12 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !15
  %13 = shufflevector <2 x i32> %12, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !15
  %14 = sdiv <2 x i32> %13, <i32 1536, i32 192>, !dbg !15
  %15 = srem <2 x i32> %14, splat (i32 8), !dbg !16
  %16 = extractelement <2 x i32> %15, i64 0, !dbg !17
  %17 = icmp sgt i32 %16, -1, !dbg !18
  %18 = extractelement <2 x i32> %15, i64 1, !dbg !17
  %19 = icmp sgt i32 %18, -1, !dbg !19
  %20 = or i32 %16, %18, !dbg !17
  %21 = icmp sgt i32 %20, -1, !dbg !17
  %22 = mul nsw i32 %18, 384, !dbg !20
  %23 = extractelement <2 x i32> %14, i64 0, !dbg !21
  %24 = mul i32 %23, 6144, !dbg !21
  %25 = add i32 %24, %11, !dbg !22
  %26 = add i32 %25, %22, !dbg !23
  %27 = sext i32 %26 to i64, !dbg !24
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !24
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %21, i32 -8388608, i1 %21, i32 -8388608, i1 %21, i32 -8388608, i1 %21, i32 -8388608, i1 %21) #1, !dbg !25
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !25
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !25
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !25
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !25
  %34 = add i32 %25, 192, !dbg !26
  %35 = add i32 %34, %22, !dbg !27
  %36 = sext i32 %35 to i64, !dbg !28
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !28
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %21, i32 -8388608, i1 %21, i32 -8388608, i1 %21, i32 -8388608, i1 %21, i32 -8388608, i1 %21) #1, !dbg !29
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !29
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !29
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !29
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !29
  %43 = add nsw <2 x i32> %15, splat (i32 1), !dbg !30
  %44 = extractelement <2 x i32> %43, i64 1, !dbg !31
  %45 = icmp ult i32 %44, 8, !dbg !32
  %46 = and i1 %17, %45, !dbg !33
  %47 = add i32 %25, 384, !dbg !34
  %48 = add i32 %47, %22, !dbg !35
  %49 = sext i32 %48 to i64, !dbg !36
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !36
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 %46, i32 -8388608, i1 %46, i32 -8388608, i1 %46, i32 -8388608, i1 %46, i32 -8388608, i1 %46) #1, !dbg !37
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !37
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !37
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !37
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !37
  %56 = add i32 %25, 3072, !dbg !38
  %57 = add i32 %56, %22, !dbg !39
  %58 = sext i32 %57 to i64, !dbg !40
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !40
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 %21, i32 -8388608, i1 %21, i32 -8388608, i1 %21, i32 -8388608, i1 %21, i32 -8388608, i1 %21) #1, !dbg !41
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !41
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !41
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !41
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !41
  %65 = add i32 %25, 3264, !dbg !42
  %66 = add i32 %65, %22, !dbg !43
  %67 = sext i32 %66 to i64, !dbg !44
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !44
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %68, i1 %21, i32 -8388608, i1 %21, i32 -8388608, i1 %21, i32 -8388608, i1 %21, i32 -8388608, i1 %21) #1, !dbg !45
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !45
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !45
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !45
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !45
  %74 = add i32 %25, 3456, !dbg !46
  %75 = add i32 %74, %22, !dbg !47
  %76 = sext i32 %75 to i64, !dbg !48
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !48
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %77, i1 %46, i32 -8388608, i1 %46, i32 -8388608, i1 %46, i32 -8388608, i1 %46, i32 -8388608, i1 %46) #1, !dbg !49
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !49
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !49
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !49
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !49
  %83 = extractelement <2 x i32> %43, i64 0, !dbg !31
  %84 = icmp ult i32 %83, 8, !dbg !30
  %85 = and i1 %19, %84, !dbg !50
  %86 = add i32 %25, 6144, !dbg !51
  %87 = add i32 %86, %22, !dbg !52
  %88 = sext i32 %87 to i64, !dbg !53
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !53
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %89, i1 %85, i32 -8388608, i1 %85, i32 -8388608, i1 %85, i32 -8388608, i1 %85, i32 -8388608, i1 %85) #1, !dbg !54
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !54
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !54
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !54
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !54
  %95 = add i32 %25, 6336, !dbg !55
  %96 = add i32 %95, %22, !dbg !56
  %97 = sext i32 %96 to i64, !dbg !57
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !57
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %98, i1 %85, i32 -8388608, i1 %85, i32 -8388608, i1 %85, i32 -8388608, i1 %85, i32 -8388608, i1 %85) #1, !dbg !58
  %100 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !58
  %101 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !58
  %102 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !58
  %103 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !58
  %104 = or i32 %83, %44, !dbg !31
  %105 = icmp ult i32 %104, 8, !dbg !31
  %106 = add i32 %25, 6528, !dbg !59
  %107 = add i32 %106, %22, !dbg !60
  %108 = sext i32 %107 to i64, !dbg !61
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !61
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %109, i1 %105, i32 -8388608, i1 %105, i32 -8388608, i1 %105, i32 -8388608, i1 %105, i32 -8388608, i1 %105) #1, !dbg !62
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !62
  %112 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !62
  %113 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !62
  %114 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !62
  %115 = insertelement <4 x i32> poison, i32 %30, i64 0, !dbg !25
  %116 = insertelement <4 x i32> %115, i32 %31, i64 1, !dbg !25
  %117 = insertelement <4 x i32> %116, i32 %32, i64 2, !dbg !25
  %118 = insertelement <4 x i32> %117, i32 %33, i64 3, !dbg !25
  %119 = bitcast <4 x i32> %118 to <4 x float>, !dbg !25
  %120 = insertelement <4 x i32> poison, i32 %39, i64 0, !dbg !29
  %121 = insertelement <4 x i32> %120, i32 %40, i64 1, !dbg !29
  %122 = insertelement <4 x i32> %121, i32 %41, i64 2, !dbg !29
  %123 = insertelement <4 x i32> %122, i32 %42, i64 3, !dbg !29
  %124 = bitcast <4 x i32> %123 to <4 x float>, !dbg !29
  %125 = fcmp ogt <4 x float> %124, %119, !dbg !63
  %126 = fcmp uno <4 x float> %124, zeroinitializer, !dbg !67
  %127 = or <4 x i1> %125, %126, !dbg !68
  %.v = select <4 x i1> %127, <4 x i32> %123, <4 x i32> %118, !dbg !69
  %128 = bitcast <4 x i32> %.v to <4 x float>, !dbg !69
  %129 = insertelement <4 x i32> poison, i32 %52, i64 0, !dbg !37
  %130 = insertelement <4 x i32> %129, i32 %53, i64 1, !dbg !37
  %131 = insertelement <4 x i32> %130, i32 %54, i64 2, !dbg !37
  %132 = insertelement <4 x i32> %131, i32 %55, i64 3, !dbg !37
  %133 = bitcast <4 x i32> %132 to <4 x float>, !dbg !37
  %134 = fcmp olt <4 x float> %128, %133, !dbg !70
  %135 = fcmp uno <4 x float> %133, zeroinitializer, !dbg !72
  %136 = or <4 x i1> %135, %134, !dbg !73
  %.v1 = select <4 x i1> %136, <4 x i32> %132, <4 x i32> %.v, !dbg !74
  %137 = bitcast <4 x i32> %.v1 to <4 x float>, !dbg !74
  %138 = insertelement <4 x i32> poison, i32 %61, i64 0, !dbg !41
  %139 = insertelement <4 x i32> %138, i32 %62, i64 1, !dbg !41
  %140 = insertelement <4 x i32> %139, i32 %63, i64 2, !dbg !41
  %141 = insertelement <4 x i32> %140, i32 %64, i64 3, !dbg !41
  %142 = bitcast <4 x i32> %141 to <4 x float>, !dbg !41
  %143 = fcmp olt <4 x float> %137, %142, !dbg !75
  %144 = fcmp uno <4 x float> %142, zeroinitializer, !dbg !77
  %145 = or <4 x i1> %144, %143, !dbg !78
  %.v2 = select <4 x i1> %145, <4 x i32> %141, <4 x i32> %.v1, !dbg !79
  %146 = bitcast <4 x i32> %.v2 to <4 x float>, !dbg !79
  %147 = insertelement <4 x i32> poison, i32 %70, i64 0, !dbg !45
  %148 = insertelement <4 x i32> %147, i32 %71, i64 1, !dbg !45
  %149 = insertelement <4 x i32> %148, i32 %72, i64 2, !dbg !45
  %150 = insertelement <4 x i32> %149, i32 %73, i64 3, !dbg !45
  %151 = bitcast <4 x i32> %150 to <4 x float>, !dbg !45
  %152 = fcmp olt <4 x float> %146, %151, !dbg !80
  %153 = fcmp uno <4 x float> %151, zeroinitializer, !dbg !82
  %154 = or <4 x i1> %153, %152, !dbg !83
  %.v3 = select <4 x i1> %154, <4 x i32> %150, <4 x i32> %.v2, !dbg !84
  %155 = bitcast <4 x i32> %.v3 to <4 x float>, !dbg !84
  %156 = insertelement <4 x i32> poison, i32 %79, i64 0, !dbg !49
  %157 = insertelement <4 x i32> %156, i32 %80, i64 1, !dbg !49
  %158 = insertelement <4 x i32> %157, i32 %81, i64 2, !dbg !49
  %159 = insertelement <4 x i32> %158, i32 %82, i64 3, !dbg !49
  %160 = bitcast <4 x i32> %159 to <4 x float>, !dbg !49
  %161 = fcmp olt <4 x float> %155, %160, !dbg !85
  %162 = fcmp uno <4 x float> %160, zeroinitializer, !dbg !87
  %163 = or <4 x i1> %162, %161, !dbg !88
  %.v4 = select <4 x i1> %163, <4 x i32> %159, <4 x i32> %.v3, !dbg !89
  %164 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !89
  %165 = insertelement <4 x i32> poison, i32 %91, i64 0, !dbg !54
  %166 = insertelement <4 x i32> %165, i32 %92, i64 1, !dbg !54
  %167 = insertelement <4 x i32> %166, i32 %93, i64 2, !dbg !54
  %168 = insertelement <4 x i32> %167, i32 %94, i64 3, !dbg !54
  %169 = bitcast <4 x i32> %168 to <4 x float>, !dbg !54
  %170 = fcmp olt <4 x float> %164, %169, !dbg !90
  %171 = fcmp uno <4 x float> %169, zeroinitializer, !dbg !92
  %172 = or <4 x i1> %171, %170, !dbg !93
  %.v5 = select <4 x i1> %172, <4 x i32> %168, <4 x i32> %.v4, !dbg !94
  %173 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !94
  %174 = insertelement <4 x i32> poison, i32 %100, i64 0, !dbg !58
  %175 = insertelement <4 x i32> %174, i32 %101, i64 1, !dbg !58
  %176 = insertelement <4 x i32> %175, i32 %102, i64 2, !dbg !58
  %177 = insertelement <4 x i32> %176, i32 %103, i64 3, !dbg !58
  %178 = bitcast <4 x i32> %177 to <4 x float>, !dbg !58
  %179 = fcmp olt <4 x float> %173, %178, !dbg !95
  %180 = fcmp uno <4 x float> %178, zeroinitializer, !dbg !97
  %181 = or <4 x i1> %180, %179, !dbg !98
  %.v6 = select <4 x i1> %181, <4 x i32> %177, <4 x i32> %.v5, !dbg !99
  %182 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !99
  %183 = insertelement <4 x i32> poison, i32 %111, i64 0, !dbg !62
  %184 = insertelement <4 x i32> %183, i32 %112, i64 1, !dbg !62
  %185 = insertelement <4 x i32> %184, i32 %113, i64 2, !dbg !62
  %186 = insertelement <4 x i32> %185, i32 %114, i64 3, !dbg !62
  %187 = bitcast <4 x i32> %186 to <4 x float>, !dbg !62
  %188 = fcmp olt <4 x float> %182, %187, !dbg !100
  %189 = fcmp uno <4 x float> %187, zeroinitializer, !dbg !102
  %190 = or <4 x i1> %189, %188, !dbg !103
  %191 = extractelement <4 x i1> %190, i64 0, !dbg !103
  %192 = or <4 x i1> %189, %188, !dbg !103
  %193 = extractelement <4 x i1> %192, i64 1, !dbg !103
  %194 = or <4 x i1> %189, %188, !dbg !103
  %195 = extractelement <4 x i1> %194, i64 2, !dbg !103
  %196 = or <4 x i1> %189, %188, !dbg !103
  %197 = extractelement <4 x i1> %196, i64 3, !dbg !103
  %198 = zext <4 x i1> %125 to <4 x i8>, !dbg !104
  %199 = select <4 x i1> %134, <4 x i8> splat (i8 2), <4 x i8> %198, !dbg !105
  %200 = select <4 x i1> %143, <4 x i8> splat (i8 3), <4 x i8> %199, !dbg !106
  %201 = select <4 x i1> %152, <4 x i8> splat (i8 4), <4 x i8> %200, !dbg !107
  %202 = select <4 x i1> %161, <4 x i8> splat (i8 5), <4 x i8> %201, !dbg !108
  %203 = select <4 x i1> %170, <4 x i8> splat (i8 6), <4 x i8> %202, !dbg !109
  %204 = select <4 x i1> %179, <4 x i8> splat (i8 7), <4 x i8> %203, !dbg !110
  %205 = select <4 x i1> %188, <4 x i8> splat (i8 8), <4 x i8> %204, !dbg !111
  %206 = sext i32 %10 to i64, !dbg !112
  %207 = getelementptr float, ptr addrspace(1) %1, i64 %206, !dbg !112
  %208 = extractelement <4 x i32> %.v6, i64 0, !dbg !113
  %209 = select i1 %191, i32 %111, i32 %208, !dbg !114
  %210 = extractelement <4 x i32> %.v6, i64 1, !dbg !113
  %211 = select i1 %193, i32 %112, i32 %210, !dbg !114
  %212 = extractelement <4 x i32> %.v6, i64 2, !dbg !113
  %213 = select i1 %195, i32 %113, i32 %212, !dbg !114
  %214 = extractelement <4 x i32> %.v6, i64 3, !dbg !113
  %215 = select i1 %197, i32 %114, i32 %214, !dbg !114
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %209, i32 %211, i32 %213, i32 %215, ptr addrspace(1) %207, i1 true) #1, !dbg !113
  %216 = getelementptr i8, ptr addrspace(1) %2, i64 %206, !dbg !115
  %217 = bitcast <4 x i8> %205 to i32, !dbg !116
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %217, ptr addrspace(1) %216, i1 true) #1, !dbg !116
  ret void, !dbg !117
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c34ifp2wgiz4jdd6mhnxkh43drfe2w7qvcsekerwpkxxqxwhizuv.py", directory: "inductor_cache/34")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_23", linkageName: "triton_poi_fused_max_pool2d_with_indices_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 29, scope: !7)
!17 = !DILocation(line: 39, column: 19, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 36, column: 19, scope: !7)
!20 = !DILocation(line: 40, column: 40, scope: !7)
!21 = !DILocation(line: 40, column: 50, scope: !7)
!22 = !DILocation(line: 40, column: 36, scope: !7)
!23 = !DILocation(line: 40, column: 45, scope: !7)
!24 = !DILocation(line: 40, column: 31, scope: !7)
!25 = !DILocation(line: 40, column: 55, scope: !7)
!26 = !DILocation(line: 46, column: 42, scope: !7)
!27 = !DILocation(line: 46, column: 51, scope: !7)
!28 = !DILocation(line: 46, column: 31, scope: !7)
!29 = !DILocation(line: 46, column: 61, scope: !7)
!30 = !DILocation(line: 71, column: 20, scope: !7)
!31 = !DILocation(line: 78, column: 20, scope: !7)
!32 = !DILocation(line: 51, column: 20, scope: !7)
!33 = !DILocation(line: 52, column: 19, scope: !7)
!34 = !DILocation(line: 53, column: 42, scope: !7)
!35 = !DILocation(line: 53, column: 51, scope: !7)
!36 = !DILocation(line: 53, column: 31, scope: !7)
!37 = !DILocation(line: 53, column: 61, scope: !7)
!38 = !DILocation(line: 60, column: 43, scope: !7)
!39 = !DILocation(line: 60, column: 52, scope: !7)
!40 = !DILocation(line: 60, column: 31, scope: !7)
!41 = !DILocation(line: 60, column: 62, scope: !7)
!42 = !DILocation(line: 63, column: 43, scope: !7)
!43 = !DILocation(line: 63, column: 52, scope: !7)
!44 = !DILocation(line: 63, column: 31, scope: !7)
!45 = !DILocation(line: 63, column: 62, scope: !7)
!46 = !DILocation(line: 66, column: 43, scope: !7)
!47 = !DILocation(line: 66, column: 52, scope: !7)
!48 = !DILocation(line: 66, column: 31, scope: !7)
!49 = !DILocation(line: 66, column: 62, scope: !7)
!50 = !DILocation(line: 72, column: 20, scope: !7)
!51 = !DILocation(line: 73, column: 43, scope: !7)
!52 = !DILocation(line: 73, column: 52, scope: !7)
!53 = !DILocation(line: 73, column: 31, scope: !7)
!54 = !DILocation(line: 73, column: 62, scope: !7)
!55 = !DILocation(line: 76, column: 43, scope: !7)
!56 = !DILocation(line: 76, column: 52, scope: !7)
!57 = !DILocation(line: 76, column: 31, scope: !7)
!58 = !DILocation(line: 76, column: 62, scope: !7)
!59 = !DILocation(line: 79, column: 43, scope: !7)
!60 = !DILocation(line: 79, column: 52, scope: !7)
!61 = !DILocation(line: 79, column: 31, scope: !7)
!62 = !DILocation(line: 79, column: 62, scope: !7)
!63 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !66)
!64 = distinct !DILexicalBlockFile(scope: !7, file: !65, discriminator: 0)
!65 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!66 = !DILocation(line: 47, column: 42, scope: !7)
!67 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !66)
!68 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !66)
!69 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !66)
!70 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !71)
!71 = !DILocation(line: 54, column: 42, scope: !7)
!72 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !71)
!73 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !71)
!74 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !71)
!75 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !76)
!76 = !DILocation(line: 61, column: 42, scope: !7)
!77 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !76)
!78 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !76)
!79 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !76)
!80 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !81)
!81 = !DILocation(line: 64, column: 42, scope: !7)
!82 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !81)
!83 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !81)
!84 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !81)
!85 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !86)
!86 = !DILocation(line: 67, column: 42, scope: !7)
!87 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !86)
!88 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !86)
!89 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !86)
!90 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !91)
!91 = !DILocation(line: 74, column: 42, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !91)
!95 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !96)
!96 = !DILocation(line: 77, column: 42, scope: !7)
!97 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !96)
!98 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !96)
!99 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !96)
!100 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !101)
!101 = !DILocation(line: 80, column: 42, scope: !7)
!102 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !101)
!103 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !101)
!104 = !DILocation(line: 84, column: 35, scope: !7)
!105 = !DILocation(line: 87, column: 35, scope: !7)
!106 = !DILocation(line: 90, column: 35, scope: !7)
!107 = !DILocation(line: 93, column: 35, scope: !7)
!108 = !DILocation(line: 96, column: 35, scope: !7)
!109 = !DILocation(line: 99, column: 35, scope: !7)
!110 = !DILocation(line: 102, column: 35, scope: !7)
!111 = !DILocation(line: 105, column: 35, scope: !7)
!112 = !DILocation(line: 106, column: 25, scope: !7)
!113 = !DILocation(line: 106, column: 37, scope: !7)
!114 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !101)
!115 = !DILocation(line: 107, column: 25, scope: !7)
!116 = !DILocation(line: 107, column: 37, scope: !7)
!117 = !DILocation(line: 107, column: 4, scope: !7)
