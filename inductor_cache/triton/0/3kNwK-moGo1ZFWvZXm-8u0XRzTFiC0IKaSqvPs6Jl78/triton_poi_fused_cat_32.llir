; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 2, !dbg !13
  %19 = or disjoint i32 %17, 512, !dbg !13
  %20 = or disjoint i32 %17, 514, !dbg !13
  %21 = sdiv i32 %17, 1600, !dbg !14
  %22 = sdiv i32 %19, 1600, !dbg !14
  %.frozen4 = freeze i32 %17, !dbg !15
  %23 = sdiv i32 %.frozen4, 409600, !dbg !15
  %.frozen5 = freeze i32 %19, !dbg !15
  %24 = sdiv i32 %.frozen5, 409600, !dbg !15
  %.frozen = freeze i32 %17, !dbg !16
  %25 = sdiv i32 %.frozen, 40, !dbg !16
  %.frozen2 = freeze i32 %19, !dbg !16
  %26 = sdiv i32 %.frozen2, 40, !dbg !16
  %27 = srem i32 %25, 40, !dbg !17
  %28 = srem i32 %26, 40, !dbg !17
  %29 = mul i32 %25, 40, !dbg !18
  %.decomposed = sub i32 %.frozen, %29, !dbg !18
  %30 = srem i32 %18, 40, !dbg !18
  %31 = mul i32 %26, 40, !dbg !18
  %.decomposed3 = sub i32 %.frozen2, %31, !dbg !18
  %32 = srem i32 %20, 40, !dbg !18
  %33 = mul i32 %23, 409600, !dbg !19
  %srem.decomposed = sub i32 %.frozen4, %33, !dbg !19
  %34 = mul i32 %24, 409600, !dbg !19
  %srem1.decomposed = sub i32 %.frozen5, %34, !dbg !19
  %35 = mul nsw i32 %23, 204800, !dbg !20
  %36 = mul nsw i32 %24, 204800, !dbg !20
  %37 = add nsw i32 %35, %srem.decomposed, !dbg !21
  %38 = add nsw i32 %36, %srem1.decomposed, !dbg !21
  %39 = sext i32 %37 to i64, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !22
  %41 = sext i32 %38 to i64, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !22
  %43 = sext i32 %27 to i64, !dbg !23
  %44 = getelementptr i64, ptr addrspace(1) %1, i64 %43, !dbg !23
  %45 = sext i32 %28 to i64, !dbg !23
  %46 = getelementptr i64, ptr addrspace(1) %1, i64 %45, !dbg !23
  %47 = sext i32 %.decomposed to i64, !dbg !24
  %48 = getelementptr i64, ptr addrspace(1) %2, i64 %47, !dbg !24
  %49 = sext i32 %30 to i64, !dbg !24
  %50 = getelementptr i64, ptr addrspace(1) %2, i64 %49, !dbg !24
  %51 = sext i32 %.decomposed3 to i64, !dbg !24
  %52 = getelementptr i64, ptr addrspace(1) %2, i64 %51, !dbg !24
  %53 = sext i32 %32 to i64, !dbg !24
  %54 = getelementptr i64, ptr addrspace(1) %2, i64 %53, !dbg !24
  %55 = mul i32 %23, 1905152, !dbg !25
  %56 = mul i32 %24, 1905152, !dbg !25
  %57 = sext i32 %55 to i64, !dbg !26
  %58 = sext i32 %56 to i64, !dbg !26
  %59 = getelementptr i64, ptr addrspace(1) %4, i64 %47, !dbg !27
  %60 = getelementptr i64, ptr addrspace(1) %4, i64 %49, !dbg !27
  %61 = getelementptr i64, ptr addrspace(1) %4, i64 %51, !dbg !27
  %62 = getelementptr i64, ptr addrspace(1) %4, i64 %53, !dbg !27
  %63 = getelementptr float, ptr addrspace(1) %5, i64 %47, !dbg !28
  %64 = getelementptr float, ptr addrspace(1) %5, i64 %51, !dbg !28
  %65 = getelementptr float, ptr addrspace(1) %6, i64 %43, !dbg !29
  %66 = getelementptr float, ptr addrspace(1) %6, i64 %45, !dbg !29
  %67 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !30
  %68 = insertelement <2 x i32> %67, i32 %21, i64 1, !dbg !30
  %69 = srem <2 x i32> %68, <i32 1600, i32 256>, !dbg !30
  %70 = extractelement <2 x i32> %69, i64 1, !dbg !31
  %71 = icmp slt i32 %70, 128, !dbg !32
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %71, i32 0, i1 %71, i32 0, i1 %71, i32 0, i1 %71, i32 0, i1 %71) #1, !dbg !33
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !33
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !33
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !33
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !33
  %77 = bitcast i32 %73 to float, !dbg !33
  %78 = bitcast i32 %74 to float, !dbg !33
  %79 = bitcast i32 %75 to float, !dbg !33
  %80 = bitcast i32 %76 to float, !dbg !33
  %81 = mul nsw i32 %70, 14884, !dbg !34
  %82 = sext i32 %81 to i64, !dbg !35
  %83 = icmp sgt i32 %70, 127, !dbg !31
  %84 = insertelement <2 x i32> <i32 poison, i32 -128>, i32 %35, i64 0, !dbg !36
  %85 = add nsw <2 x i32> %84, %69, !dbg !36
  %86 = extractelement <2 x i32> %85, i64 1, !dbg !37
  %87 = mul nsw i32 %86, 1600, !dbg !38
  %88 = extractelement <2 x i32> %85, i64 0, !dbg !39
  %89 = add nsw i32 %88, %87, !dbg !39
  %90 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !30
  %91 = insertelement <2 x i32> %90, i32 %22, i64 1, !dbg !30
  %92 = srem <2 x i32> %91, <i32 1600, i32 256>, !dbg !30
  %93 = extractelement <2 x i32> %92, i64 1, !dbg !31
  %94 = icmp slt i32 %93, 128, !dbg !32
  %95 = mul nsw i32 %93, 14884, !dbg !34
  %96 = sext i32 %95 to i64, !dbg !35
  %97 = icmp sgt i32 %93, 127, !dbg !31
  %98 = insertelement <2 x i32> <i32 poison, i32 -128>, i32 %36, i64 0, !dbg !36
  %99 = add nsw <2 x i32> %98, %92, !dbg !36
  %100 = extractelement <2 x i32> %99, i64 1, !dbg !37
  %101 = mul nsw i32 %100, 1600, !dbg !38
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %94, i32 0, i1 %94, i32 0, i1 %94, i32 0, i1 %94, i32 0, i1 %94) #1, !dbg !33
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !33
  %104 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !33
  %105 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !33
  %106 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !33
  %107 = bitcast i32 %103 to float, !dbg !33
  %108 = bitcast i32 %104 to float, !dbg !33
  %109 = bitcast i32 %105 to float, !dbg !33
  %110 = bitcast i32 %106 to float, !dbg !33
  %111 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %44, i1 %71, i1 %71) #1, !dbg !40
  %112 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %44, i1 %71, i1 %71) #1, !dbg !40
  %113 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %44, i1 %71, i1 %71) #1, !dbg !40
  %114 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %44, i1 %71, i1 %71) #1, !dbg !40
  %115 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %46, i1 %94, i1 %94) #1, !dbg !40
  %116 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %46, i1 %94, i1 %94) #1, !dbg !40
  %117 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %46, i1 %94, i1 %94) #1, !dbg !40
  %118 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %46, i1 %94, i1 %94) #1, !dbg !40
  %119 = add i64 %111, 122, !dbg !41
  %120 = add i64 %115, 122, !dbg !41
  %121 = icmp slt i64 %111, 0, !dbg !42
  %122 = icmp slt i64 %115, 0, !dbg !42
  %123 = select i1 %121, i64 %119, i64 %111, !dbg !43
  %124 = select i1 %122, i64 %120, i64 %115, !dbg !43
  %125 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %48, i1 %71, i1 %71, i1 %71) #1, !dbg !44
  %126 = extractvalue { i64, i64 } %125, 0, !dbg !44
  %127 = extractvalue { i64, i64 } %125, 1, !dbg !44
  %128 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %50, i1 %71, i1 %71, i1 %71) #1, !dbg !44
  %129 = extractvalue { i64, i64 } %128, 0, !dbg !44
  %130 = extractvalue { i64, i64 } %128, 1, !dbg !44
  %131 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %52, i1 %94, i1 %94, i1 %94) #1, !dbg !44
  %132 = extractvalue { i64, i64 } %131, 0, !dbg !44
  %133 = extractvalue { i64, i64 } %131, 1, !dbg !44
  %134 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %54, i1 %94, i1 %94, i1 %94) #1, !dbg !44
  %135 = extractvalue { i64, i64 } %134, 0, !dbg !44
  %136 = extractvalue { i64, i64 } %134, 1, !dbg !44
  %137 = add i64 %126, 122, !dbg !45
  %138 = add i64 %127, 122, !dbg !45
  %139 = add i64 %129, 122, !dbg !45
  %140 = add i64 %130, 122, !dbg !45
  %141 = add i64 %132, 122, !dbg !45
  %142 = add i64 %133, 122, !dbg !45
  %143 = add i64 %135, 122, !dbg !45
  %144 = add i64 %136, 122, !dbg !45
  %145 = icmp slt i64 %126, 0, !dbg !46
  %146 = icmp slt i64 %127, 0, !dbg !46
  %147 = icmp slt i64 %129, 0, !dbg !46
  %148 = icmp slt i64 %130, 0, !dbg !46
  %149 = icmp slt i64 %132, 0, !dbg !46
  %150 = icmp slt i64 %133, 0, !dbg !46
  %151 = icmp slt i64 %135, 0, !dbg !46
  %152 = icmp slt i64 %136, 0, !dbg !46
  %153 = select i1 %145, i64 %137, i64 %126, !dbg !47
  %154 = select i1 %146, i64 %138, i64 %127, !dbg !47
  %155 = select i1 %147, i64 %139, i64 %129, !dbg !47
  %156 = select i1 %148, i64 %140, i64 %130, !dbg !47
  %157 = select i1 %149, i64 %141, i64 %132, !dbg !47
  %158 = select i1 %150, i64 %142, i64 %133, !dbg !47
  %159 = select i1 %151, i64 %143, i64 %135, !dbg !47
  %160 = select i1 %152, i64 %144, i64 %136, !dbg !47
  %161 = mul i64 %123, 122, !dbg !48
  %162 = mul i64 %124, 122, !dbg !48
  %163 = getelementptr float, ptr addrspace(1) %3, i64 %153, !dbg !49
  %164 = getelementptr float, ptr addrspace(1) %163, i64 %161, !dbg !49
  %165 = getelementptr float, ptr addrspace(1) %164, i64 %82, !dbg !49
  %166 = getelementptr float, ptr addrspace(1) %165, i64 %57, !dbg !49
  %167 = getelementptr float, ptr addrspace(1) %3, i64 %154, !dbg !49
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %161, !dbg !49
  %169 = getelementptr float, ptr addrspace(1) %168, i64 %82, !dbg !49
  %170 = getelementptr float, ptr addrspace(1) %169, i64 %57, !dbg !49
  %171 = getelementptr float, ptr addrspace(1) %3, i64 %155, !dbg !49
  %172 = getelementptr float, ptr addrspace(1) %171, i64 %161, !dbg !49
  %173 = getelementptr float, ptr addrspace(1) %172, i64 %82, !dbg !49
  %174 = getelementptr float, ptr addrspace(1) %173, i64 %57, !dbg !49
  %175 = getelementptr float, ptr addrspace(1) %3, i64 %156, !dbg !49
  %176 = getelementptr float, ptr addrspace(1) %175, i64 %161, !dbg !49
  %177 = getelementptr float, ptr addrspace(1) %176, i64 %82, !dbg !49
  %178 = getelementptr float, ptr addrspace(1) %177, i64 %57, !dbg !49
  %179 = getelementptr float, ptr addrspace(1) %3, i64 %157, !dbg !49
  %180 = getelementptr float, ptr addrspace(1) %179, i64 %162, !dbg !49
  %181 = getelementptr float, ptr addrspace(1) %180, i64 %96, !dbg !49
  %182 = getelementptr float, ptr addrspace(1) %181, i64 %58, !dbg !49
  %183 = getelementptr float, ptr addrspace(1) %3, i64 %158, !dbg !49
  %184 = getelementptr float, ptr addrspace(1) %183, i64 %162, !dbg !49
  %185 = getelementptr float, ptr addrspace(1) %184, i64 %96, !dbg !49
  %186 = getelementptr float, ptr addrspace(1) %185, i64 %58, !dbg !49
  %187 = getelementptr float, ptr addrspace(1) %3, i64 %159, !dbg !49
  %188 = getelementptr float, ptr addrspace(1) %187, i64 %162, !dbg !49
  %189 = getelementptr float, ptr addrspace(1) %188, i64 %96, !dbg !49
  %190 = getelementptr float, ptr addrspace(1) %189, i64 %58, !dbg !49
  %191 = getelementptr float, ptr addrspace(1) %3, i64 %160, !dbg !49
  %192 = getelementptr float, ptr addrspace(1) %191, i64 %162, !dbg !49
  %193 = getelementptr float, ptr addrspace(1) %192, i64 %96, !dbg !49
  %194 = getelementptr float, ptr addrspace(1) %193, i64 %58, !dbg !49
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %166, i1 %71, i32 0, i1 %71) #1, !dbg !50
  %196 = bitcast i32 %195 to float, !dbg !50
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %170, i1 %71, i32 0, i1 %71) #1, !dbg !50
  %198 = bitcast i32 %197 to float, !dbg !50
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %174, i1 %71, i32 0, i1 %71) #1, !dbg !50
  %200 = bitcast i32 %199 to float, !dbg !50
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %178, i1 %71, i32 0, i1 %71) #1, !dbg !50
  %202 = bitcast i32 %201 to float, !dbg !50
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %182, i1 %94, i32 0, i1 %94) #1, !dbg !50
  %204 = bitcast i32 %203 to float, !dbg !50
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %94, i32 0, i1 %94) #1, !dbg !50
  %206 = bitcast i32 %205 to float, !dbg !50
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %190, i1 %94, i32 0, i1 %94) #1, !dbg !50
  %208 = bitcast i32 %207 to float, !dbg !50
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %194, i1 %94, i32 0, i1 %94) #1, !dbg !50
  %210 = bitcast i32 %209 to float, !dbg !50
  %211 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %59, i1 %71, i1 %71, i1 %71) #1, !dbg !51
  %212 = extractvalue { i64, i64 } %211, 0, !dbg !51
  %213 = extractvalue { i64, i64 } %211, 1, !dbg !51
  %214 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %60, i1 %71, i1 %71, i1 %71) #1, !dbg !51
  %215 = extractvalue { i64, i64 } %214, 0, !dbg !51
  %216 = extractvalue { i64, i64 } %214, 1, !dbg !51
  %217 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %61, i1 %94, i1 %94, i1 %94) #1, !dbg !51
  %218 = extractvalue { i64, i64 } %217, 0, !dbg !51
  %219 = extractvalue { i64, i64 } %217, 1, !dbg !51
  %220 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %62, i1 %94, i1 %94, i1 %94) #1, !dbg !51
  %221 = extractvalue { i64, i64 } %220, 0, !dbg !51
  %222 = extractvalue { i64, i64 } %220, 1, !dbg !51
  %223 = add i64 %212, 122, !dbg !52
  %224 = add i64 %213, 122, !dbg !52
  %225 = add i64 %215, 122, !dbg !52
  %226 = add i64 %216, 122, !dbg !52
  %227 = add i64 %218, 122, !dbg !52
  %228 = add i64 %219, 122, !dbg !52
  %229 = add i64 %221, 122, !dbg !52
  %230 = add i64 %222, 122, !dbg !52
  %231 = icmp slt i64 %212, 0, !dbg !53
  %232 = icmp slt i64 %213, 0, !dbg !53
  %233 = icmp slt i64 %215, 0, !dbg !53
  %234 = icmp slt i64 %216, 0, !dbg !53
  %235 = icmp slt i64 %218, 0, !dbg !53
  %236 = icmp slt i64 %219, 0, !dbg !53
  %237 = icmp slt i64 %221, 0, !dbg !53
  %238 = icmp slt i64 %222, 0, !dbg !53
  %239 = select i1 %231, i64 %223, i64 %212, !dbg !54
  %240 = select i1 %232, i64 %224, i64 %213, !dbg !54
  %241 = select i1 %233, i64 %225, i64 %215, !dbg !54
  %242 = select i1 %234, i64 %226, i64 %216, !dbg !54
  %243 = select i1 %235, i64 %227, i64 %218, !dbg !54
  %244 = select i1 %236, i64 %228, i64 %219, !dbg !54
  %245 = select i1 %237, i64 %229, i64 %221, !dbg !54
  %246 = select i1 %238, i64 %230, i64 %222, !dbg !54
  %247 = getelementptr float, ptr addrspace(1) %3, i64 %239, !dbg !55
  %248 = getelementptr float, ptr addrspace(1) %247, i64 %161, !dbg !55
  %249 = getelementptr float, ptr addrspace(1) %248, i64 %82, !dbg !55
  %250 = getelementptr float, ptr addrspace(1) %249, i64 %57, !dbg !55
  %251 = getelementptr float, ptr addrspace(1) %3, i64 %240, !dbg !55
  %252 = getelementptr float, ptr addrspace(1) %251, i64 %161, !dbg !55
  %253 = getelementptr float, ptr addrspace(1) %252, i64 %82, !dbg !55
  %254 = getelementptr float, ptr addrspace(1) %253, i64 %57, !dbg !55
  %255 = getelementptr float, ptr addrspace(1) %3, i64 %241, !dbg !55
  %256 = getelementptr float, ptr addrspace(1) %255, i64 %161, !dbg !55
  %257 = getelementptr float, ptr addrspace(1) %256, i64 %82, !dbg !55
  %258 = getelementptr float, ptr addrspace(1) %257, i64 %57, !dbg !55
  %259 = getelementptr float, ptr addrspace(1) %3, i64 %242, !dbg !55
  %260 = getelementptr float, ptr addrspace(1) %259, i64 %161, !dbg !55
  %261 = getelementptr float, ptr addrspace(1) %260, i64 %82, !dbg !55
  %262 = getelementptr float, ptr addrspace(1) %261, i64 %57, !dbg !55
  %263 = getelementptr float, ptr addrspace(1) %3, i64 %243, !dbg !55
  %264 = getelementptr float, ptr addrspace(1) %263, i64 %162, !dbg !55
  %265 = getelementptr float, ptr addrspace(1) %264, i64 %96, !dbg !55
  %266 = getelementptr float, ptr addrspace(1) %265, i64 %58, !dbg !55
  %267 = getelementptr float, ptr addrspace(1) %3, i64 %244, !dbg !55
  %268 = getelementptr float, ptr addrspace(1) %267, i64 %162, !dbg !55
  %269 = getelementptr float, ptr addrspace(1) %268, i64 %96, !dbg !55
  %270 = getelementptr float, ptr addrspace(1) %269, i64 %58, !dbg !55
  %271 = getelementptr float, ptr addrspace(1) %3, i64 %245, !dbg !55
  %272 = getelementptr float, ptr addrspace(1) %271, i64 %162, !dbg !55
  %273 = getelementptr float, ptr addrspace(1) %272, i64 %96, !dbg !55
  %274 = getelementptr float, ptr addrspace(1) %273, i64 %58, !dbg !55
  %275 = getelementptr float, ptr addrspace(1) %3, i64 %246, !dbg !55
  %276 = getelementptr float, ptr addrspace(1) %275, i64 %162, !dbg !55
  %277 = getelementptr float, ptr addrspace(1) %276, i64 %96, !dbg !55
  %278 = getelementptr float, ptr addrspace(1) %277, i64 %58, !dbg !55
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %250, i1 %71, i32 0, i1 %71) #1, !dbg !56
  %280 = bitcast i32 %279 to float, !dbg !56
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %254, i1 %71, i32 0, i1 %71) #1, !dbg !56
  %282 = bitcast i32 %281 to float, !dbg !56
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %258, i1 %71, i32 0, i1 %71) #1, !dbg !56
  %284 = bitcast i32 %283 to float, !dbg !56
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %262, i1 %71, i32 0, i1 %71) #1, !dbg !56
  %286 = bitcast i32 %285 to float, !dbg !56
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %266, i1 %94, i32 0, i1 %94) #1, !dbg !56
  %288 = bitcast i32 %287 to float, !dbg !56
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %270, i1 %94, i32 0, i1 %94) #1, !dbg !56
  %290 = bitcast i32 %289 to float, !dbg !56
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %274, i1 %94, i32 0, i1 %94) #1, !dbg !56
  %292 = bitcast i32 %291 to float, !dbg !56
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %278, i1 %94, i32 0, i1 %94) #1, !dbg !56
  %294 = bitcast i32 %293 to float, !dbg !56
  %295 = fsub float %280, %196, !dbg !57
  %296 = fsub float %282, %198, !dbg !57
  %297 = fsub float %284, %200, !dbg !57
  %298 = fsub float %286, %202, !dbg !57
  %299 = fsub float %288, %204, !dbg !57
  %300 = fsub float %290, %206, !dbg !57
  %301 = fsub float %292, %208, !dbg !57
  %302 = fsub float %294, %210, !dbg !57
  %303 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %63, i1 %71, i32 0, i1 %71, i32 0, i1 %71, i32 0, i1 %71, i32 0, i1 %71) #1, !dbg !58
  %304 = extractvalue { i32, i32, i32, i32 } %303, 0, !dbg !58
  %305 = extractvalue { i32, i32, i32, i32 } %303, 1, !dbg !58
  %306 = extractvalue { i32, i32, i32, i32 } %303, 2, !dbg !58
  %307 = extractvalue { i32, i32, i32, i32 } %303, 3, !dbg !58
  %308 = bitcast i32 %304 to float, !dbg !58
  %309 = bitcast i32 %305 to float, !dbg !58
  %310 = bitcast i32 %306 to float, !dbg !58
  %311 = bitcast i32 %307 to float, !dbg !58
  %312 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %64, i1 %94, i32 0, i1 %94, i32 0, i1 %94, i32 0, i1 %94, i32 0, i1 %94) #1, !dbg !58
  %313 = extractvalue { i32, i32, i32, i32 } %312, 0, !dbg !58
  %314 = extractvalue { i32, i32, i32, i32 } %312, 1, !dbg !58
  %315 = extractvalue { i32, i32, i32, i32 } %312, 2, !dbg !58
  %316 = extractvalue { i32, i32, i32, i32 } %312, 3, !dbg !58
  %317 = bitcast i32 %313 to float, !dbg !58
  %318 = bitcast i32 %314 to float, !dbg !58
  %319 = bitcast i32 %315 to float, !dbg !58
  %320 = bitcast i32 %316 to float, !dbg !58
  %321 = fmul float %295, %308, !dbg !59
  %322 = fmul float %296, %309, !dbg !59
  %323 = fmul float %297, %310, !dbg !59
  %324 = fmul float %298, %311, !dbg !59
  %325 = fmul float %299, %317, !dbg !59
  %326 = fmul float %300, %318, !dbg !59
  %327 = fmul float %301, %319, !dbg !59
  %328 = fmul float %302, %320, !dbg !59
  %329 = fadd float %321, %196, !dbg !60
  %330 = fadd float %322, %198, !dbg !60
  %331 = fadd float %323, %200, !dbg !60
  %332 = fadd float %324, %202, !dbg !60
  %333 = fadd float %325, %204, !dbg !60
  %334 = fadd float %326, %206, !dbg !60
  %335 = fadd float %327, %208, !dbg !60
  %336 = fadd float %328, %210, !dbg !60
  %337 = fsub float %329, %77, !dbg !61
  %338 = fsub float %330, %78, !dbg !61
  %339 = fsub float %331, %79, !dbg !61
  %340 = fsub float %332, %80, !dbg !61
  %341 = fsub float %333, %107, !dbg !61
  %342 = fsub float %334, %108, !dbg !61
  %343 = fsub float %335, %109, !dbg !61
  %344 = fsub float %336, %110, !dbg !61
  %345 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %71, i32 0, i1 %71) #1, !dbg !62
  %346 = bitcast i32 %345 to float, !dbg !62
  %347 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %71, i32 0, i1 %71) #1, !dbg !62
  %348 = bitcast i32 %347 to float, !dbg !62
  %349 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %71, i32 0, i1 %71) #1, !dbg !62
  %350 = bitcast i32 %349 to float, !dbg !62
  %351 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %71, i32 0, i1 %71) #1, !dbg !62
  %352 = bitcast i32 %351 to float, !dbg !62
  %353 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %94, i32 0, i1 %94) #1, !dbg !62
  %354 = bitcast i32 %353 to float, !dbg !62
  %355 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %94, i32 0, i1 %94) #1, !dbg !62
  %356 = bitcast i32 %355 to float, !dbg !62
  %357 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %94, i32 0, i1 %94) #1, !dbg !62
  %358 = bitcast i32 %357 to float, !dbg !62
  %359 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %94, i32 0, i1 %94) #1, !dbg !62
  %360 = bitcast i32 %359 to float, !dbg !62
  %361 = fmul float %337, %346, !dbg !63
  %362 = fmul float %338, %348, !dbg !63
  %363 = fmul float %339, %350, !dbg !63
  %364 = fmul float %340, %352, !dbg !63
  %365 = fmul float %341, %354, !dbg !63
  %366 = fmul float %342, %356, !dbg !63
  %367 = fmul float %343, %358, !dbg !63
  %368 = fmul float %344, %360, !dbg !63
  %369 = fadd float %361, %77, !dbg !64
  %370 = fadd float %362, %78, !dbg !64
  %371 = fadd float %363, %79, !dbg !64
  %372 = fadd float %364, %80, !dbg !64
  %373 = fadd float %365, %107, !dbg !64
  %374 = fadd float %366, %108, !dbg !64
  %375 = fadd float %367, %109, !dbg !64
  %376 = fadd float %368, %110, !dbg !64
  %377 = extractelement <2 x i32> %99, i64 0, !dbg !39
  %378 = add nsw i32 %377, %101, !dbg !39
  %379 = sext i32 %89 to i64, !dbg !65
  %380 = getelementptr float, ptr addrspace(1) %7, i64 %379, !dbg !65
  %381 = sext i32 %378 to i64, !dbg !65
  %382 = getelementptr float, ptr addrspace(1) %7, i64 %381, !dbg !65
  %383 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %380, i1 %83, i32 0, i1 %83, i32 0, i1 %83, i32 0, i1 %83, i32 0, i1 %83) #1, !dbg !66
  %384 = extractvalue { i32, i32, i32, i32 } %383, 0, !dbg !66
  %385 = extractvalue { i32, i32, i32, i32 } %383, 1, !dbg !66
  %386 = extractvalue { i32, i32, i32, i32 } %383, 2, !dbg !66
  %387 = extractvalue { i32, i32, i32, i32 } %383, 3, !dbg !66
  %388 = bitcast i32 %384 to float, !dbg !66
  %389 = bitcast i32 %385 to float, !dbg !66
  %390 = bitcast i32 %386 to float, !dbg !66
  %391 = bitcast i32 %387 to float, !dbg !66
  %392 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %382, i1 %97, i32 0, i1 %97, i32 0, i1 %97, i32 0, i1 %97, i32 0, i1 %97) #1, !dbg !66
  %393 = extractvalue { i32, i32, i32, i32 } %392, 0, !dbg !66
  %394 = extractvalue { i32, i32, i32, i32 } %392, 1, !dbg !66
  %395 = extractvalue { i32, i32, i32, i32 } %392, 2, !dbg !66
  %396 = extractvalue { i32, i32, i32, i32 } %392, 3, !dbg !66
  %397 = bitcast i32 %393 to float, !dbg !66
  %398 = bitcast i32 %394 to float, !dbg !66
  %399 = bitcast i32 %395 to float, !dbg !66
  %400 = bitcast i32 %396 to float, !dbg !66
  %401 = sext i32 %86 to i64, !dbg !37
  %402 = getelementptr float, ptr addrspace(1) %8, i64 %401, !dbg !37
  %403 = sext i32 %100 to i64, !dbg !37
  %404 = getelementptr float, ptr addrspace(1) %8, i64 %403, !dbg !37
  %405 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %402, i1 %83, i32 0, i1 %83) #1, !dbg !67
  %406 = bitcast i32 %405 to float, !dbg !67
  %407 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %402, i1 %83, i32 0, i1 %83) #1, !dbg !67
  %408 = bitcast i32 %407 to float, !dbg !67
  %409 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %402, i1 %83, i32 0, i1 %83) #1, !dbg !67
  %410 = bitcast i32 %409 to float, !dbg !67
  %411 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %402, i1 %83, i32 0, i1 %83) #1, !dbg !67
  %412 = bitcast i32 %411 to float, !dbg !67
  %413 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %404, i1 %97, i32 0, i1 %97) #1, !dbg !67
  %414 = bitcast i32 %413 to float, !dbg !67
  %415 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %404, i1 %97, i32 0, i1 %97) #1, !dbg !67
  %416 = bitcast i32 %415 to float, !dbg !67
  %417 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %404, i1 %97, i32 0, i1 %97) #1, !dbg !67
  %418 = bitcast i32 %417 to float, !dbg !67
  %419 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %404, i1 %97, i32 0, i1 %97) #1, !dbg !67
  %420 = bitcast i32 %419 to float, !dbg !67
  %421 = fadd float %388, %406, !dbg !68
  %422 = fadd float %389, %408, !dbg !68
  %423 = fadd float %390, %410, !dbg !68
  %424 = fadd float %391, %412, !dbg !68
  %425 = fadd float %397, %414, !dbg !68
  %426 = fadd float %398, %416, !dbg !68
  %427 = fadd float %399, %418, !dbg !68
  %428 = fadd float %400, %420, !dbg !68
  %429 = select i1 %71, float %369, float %421, !dbg !69
  %430 = select i1 %71, float %370, float %422, !dbg !69
  %431 = select i1 %71, float %371, float %423, !dbg !69
  %432 = select i1 %71, float %372, float %424, !dbg !69
  %433 = select i1 %94, float %373, float %425, !dbg !69
  %434 = select i1 %94, float %374, float %426, !dbg !69
  %435 = select i1 %94, float %375, float %427, !dbg !69
  %436 = select i1 %94, float %376, float %428, !dbg !69
  %437 = sext i32 %17 to i64, !dbg !70
  %438 = getelementptr float, ptr addrspace(1) %9, i64 %437, !dbg !70
  %439 = sext i32 %19 to i64, !dbg !70
  %440 = getelementptr float, ptr addrspace(1) %9, i64 %439, !dbg !70
  %441 = bitcast float %429 to i32, !dbg !71
  %442 = bitcast float %430 to i32, !dbg !71
  %443 = bitcast float %431 to i32, !dbg !71
  %444 = bitcast float %432 to i32, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %441, i32 %442, i32 %443, i32 %444, ptr addrspace(1) %438, i1 true) #1, !dbg !71
  %445 = bitcast float %433 to i32, !dbg !71
  %446 = bitcast float %434 to i32, !dbg !71
  %447 = bitcast float %435 to i32, !dbg !71
  %448 = bitcast float %436 to i32, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %445, i32 %446, i32 %447, i32 %448, ptr addrspace(1) %440, i1 true) #1, !dbg !71
  ret void, !dbg !72
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2az5snssdsfh3d7iugbyctr6ejsb2wqioagyp54pp24hbc7dzvt.py", directory: "inductor_cache/2a")
!4 = !{ptr @triton_poi_fused_cat_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_32, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_32", linkageName: "triton_poi_fused_cat_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 27, column: 27, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 35, column: 35, scope: !7)
!20 = !DILocation(line: 35, column: 54, scope: !7)
!21 = !DILocation(line: 35, column: 47, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 36, column: 30, scope: !7)
!24 = !DILocation(line: 41, column: 31, scope: !7)
!25 = !DILocation(line: 45, column: 72, scope: !7)
!26 = !DILocation(line: 45, column: 64, scope: !7)
!27 = !DILocation(line: 46, column: 31, scope: !7)
!28 = !DILocation(line: 52, column: 31, scope: !7)
!29 = !DILocation(line: 56, column: 31, scope: !7)
!30 = !DILocation(line: 26, column: 19, scope: !7)
!31 = !DILocation(line: 61, column: 20, scope: !7)
!32 = !DILocation(line: 34, column: 18, scope: !7)
!33 = !DILocation(line: 35, column: 59, scope: !7)
!34 = !DILocation(line: 45, column: 58, scope: !7)
!35 = !DILocation(line: 45, column: 51, scope: !7)
!36 = !DILocation(line: 64, column: 36, scope: !7)
!37 = !DILocation(line: 65, column: 31, scope: !7)
!38 = !DILocation(line: 64, column: 42, scope: !7)
!39 = !DILocation(line: 64, column: 57, scope: !7)
!40 = !DILocation(line: 36, column: 35, scope: !7)
!41 = !DILocation(line: 38, column: 18, scope: !7)
!42 = !DILocation(line: 39, column: 18, scope: !7)
!43 = !DILocation(line: 40, column: 33, scope: !7)
!44 = !DILocation(line: 41, column: 36, scope: !7)
!45 = !DILocation(line: 42, column: 20, scope: !7)
!46 = !DILocation(line: 43, column: 20, scope: !7)
!47 = !DILocation(line: 44, column: 35, scope: !7)
!48 = !DILocation(line: 45, column: 43, scope: !7)
!49 = !DILocation(line: 45, column: 31, scope: !7)
!50 = !DILocation(line: 45, column: 77, scope: !7)
!51 = !DILocation(line: 46, column: 36, scope: !7)
!52 = !DILocation(line: 47, column: 20, scope: !7)
!53 = !DILocation(line: 48, column: 20, scope: !7)
!54 = !DILocation(line: 49, column: 35, scope: !7)
!55 = !DILocation(line: 50, column: 31, scope: !7)
!56 = !DILocation(line: 50, column: 77, scope: !7)
!57 = !DILocation(line: 51, column: 20, scope: !7)
!58 = !DILocation(line: 52, column: 36, scope: !7)
!59 = !DILocation(line: 53, column: 20, scope: !7)
!60 = !DILocation(line: 54, column: 20, scope: !7)
!61 = !DILocation(line: 55, column: 20, scope: !7)
!62 = !DILocation(line: 56, column: 36, scope: !7)
!63 = !DILocation(line: 57, column: 20, scope: !7)
!64 = !DILocation(line: 58, column: 19, scope: !7)
!65 = !DILocation(line: 64, column: 31, scope: !7)
!66 = !DILocation(line: 64, column: 69, scope: !7)
!67 = !DILocation(line: 65, column: 45, scope: !7)
!68 = !DILocation(line: 66, column: 20, scope: !7)
!69 = !DILocation(line: 0, scope: !7)
!70 = !DILocation(line: 70, column: 25, scope: !7)
!71 = !DILocation(line: 70, column: 37, scope: !7)
!72 = !DILocation(line: 70, column: 4, scope: !7)
