#blocked = #triton_gpu.blocked<{sizePerThread = [4, 1], threadsPerWarp = [32, 1], warpsPerCTA = [2, 2], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [2, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_32(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":19:0), %arg10: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":19:0), %arg11: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":19:0), %arg12: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":19:0), %arg13: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<256x2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<9.99999974E-6> : tensor<256x1xf32, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<256x1xf32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<256x2xf32, #blocked> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<256> : tensor<1x2xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<256> : tensor<1x2xi32, #blocked2> loc(#loc1)
    %cst_5 = arith.constant dense<256> : tensor<256x1xi32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<256> : tensor<256x1xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<256> : tensor<256x1xi32, #blocked2> loc(#loc1)
    %cst_8 = arith.constant dense<64> : tensor<1x2xi32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<64> : tensor<1x2xi32, #blocked2> loc(#loc1)
    %cst_10 = arith.constant dense<128> : tensor<256x1xi64, #blocked> loc(#loc1)
    %cst_11 = arith.constant dense<128> : tensor<1x2xi32, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<-128> : tensor<256x1xi32, #blocked> loc(#loc1)
    %cst_13 = arith.constant dense<64> : tensor<256x1xi32, #blocked2> loc(#loc1)
    %cst_14 = arith.constant dense<16384> : tensor<1x2xi32, #blocked2> loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x2xi32, #blocked2> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<1x2xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<1x2xi32, #blocked2> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<1x2xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<1x2xi32, #blocked2> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_3 : tensor<1x2xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_4 : tensor<1x2xi32, #blocked2> loc(#loc6)
    %12 = tt.get_program_id x : i32 loc(#loc7)
    %13 = arith.muli %12, %c256_i32 : i32 loc(#loc8)
    %14 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc9)
    %15 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc9)
    %16 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc9)
    %17 = tt.expand_dims %14 {axis = 1 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<256x1xi32, #blocked1> loc(#loc9)
    %18 = tt.expand_dims %15 {axis = 1 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<256x1xi32, #blocked> loc(#loc9)
    %19 = tt.expand_dims %16 {axis = 1 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> -> tensor<256x1xi32, #blocked2> loc(#loc9)
    %20 = tt.splat %13 : i32 -> tensor<256x1xi32, #blocked1> loc(#loc10)
    %21 = tt.splat %13 : i32 -> tensor<256x1xi32, #blocked> loc(#loc10)
    %22 = tt.splat %13 : i32 -> tensor<256x1xi32, #blocked2> loc(#loc10)
    %23 = arith.addi %20, %17 : tensor<256x1xi32, #blocked1> loc(#loc10)
    %24 = arith.addi %21, %18 : tensor<256x1xi32, #blocked> loc(#loc10)
    %25 = arith.addi %22, %19 : tensor<256x1xi32, #blocked2> loc(#loc10)
    %26 = arith.cmpi slt, %23, %cst_5 : tensor<256x1xi32, #blocked1> loc(#loc11)
    %27 = arith.cmpi slt, %24, %cst_6 : tensor<256x1xi32, #blocked> loc(#loc11)
    %28 = arith.cmpi slt, %25, %cst_7 : tensor<256x1xi32, #blocked2> loc(#loc11)
    %29 = arith.divsi %8, %cst_8 : tensor<1x2xi32, #blocked> loc(#loc12)
    %30 = arith.divsi %9, %cst_9 : tensor<1x2xi32, #blocked2> loc(#loc12)
    %31 = arith.remsi %9, %cst_9 : tensor<1x2xi32, #blocked2> loc(#loc13)
    %32 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<256x1x!tt.ptr<f32>, #blocked1> loc(#loc14)
    %33 = tt.addptr %32, %23 : tensor<256x1x!tt.ptr<f32>, #blocked1>, tensor<256x1xi32, #blocked1> loc(#loc14)
    %34 = tt.load %33, %26 evictionPolicy = evict_last : tensor<256x1x!tt.ptr<f32>, #blocked1> loc(#loc15)
    %35 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<256x1x!tt.ptr<f32>, #blocked1> loc(#loc16)
    %36 = tt.addptr %35, %23 : tensor<256x1x!tt.ptr<f32>, #blocked1>, tensor<256x1xi32, #blocked1> loc(#loc16)
    %37 = tt.load %36, %26 evictionPolicy = evict_last : tensor<256x1x!tt.ptr<f32>, #blocked1> loc(#loc17)
    %38 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<256x1x!tt.ptr<f32>, #blocked1> loc(#loc18)
    %39 = tt.addptr %38, %23 : tensor<256x1x!tt.ptr<f32>, #blocked1>, tensor<256x1xi32, #blocked1> loc(#loc18)
    %40 = tt.load %39, %26 evictionPolicy = evict_last : tensor<256x1x!tt.ptr<f32>, #blocked1> loc(#loc19)
    %41 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<256x1x!tt.ptr<f32>, #blocked1> loc(#loc20)
    %42 = tt.addptr %41, %23 : tensor<256x1x!tt.ptr<f32>, #blocked1>, tensor<256x1xi32, #blocked1> loc(#loc20)
    %43 = tt.load %42, %26 evictionPolicy = evict_last : tensor<256x1x!tt.ptr<f32>, #blocked1> loc(#loc21)
    %44 = tt.splat %arg9 : !tt.ptr<f32> -> tensor<256x1x!tt.ptr<f32>, #blocked1> loc(#loc22)
    %45 = tt.addptr %44, %23 : tensor<256x1x!tt.ptr<f32>, #blocked1>, tensor<256x1xi32, #blocked1> loc(#loc22)
    %46 = tt.load %45, %26 evictionPolicy = evict_last : tensor<256x1x!tt.ptr<f32>, #blocked1> loc(#loc23)
    %47 = arith.extsi %24 : tensor<256x1xi32, #blocked> to tensor<256x1xi64, #blocked> loc(#loc24)
    %48 = arith.cmpi slt, %47, %cst_10 : tensor<256x1xi64, #blocked> loc(#loc24)
    %49 = arith.muli %8, %cst_11 : tensor<1x2xi32, #blocked> loc(#loc25)
    %50 = tt.broadcast %49 : tensor<1x2xi32, #blocked> -> tensor<256x2xi32, #blocked> loc(#loc26)
    %51 = tt.broadcast %24 : tensor<256x1xi32, #blocked> -> tensor<256x2xi32, #blocked> loc(#loc26)
    %52 = arith.addi %50, %51 : tensor<256x2xi32, #blocked> loc(#loc26)
    %53 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x2x!tt.ptr<f32>, #blocked> loc(#loc27)
    %54 = tt.addptr %53, %52 : tensor<256x2x!tt.ptr<f32>, #blocked>, tensor<256x2xi32, #blocked> loc(#loc27)
    %55 = arith.andi %48, %27 : tensor<256x1xi1, #blocked> loc(#loc28)
    %56 = tt.broadcast %55 : tensor<256x1xi1, #blocked> -> tensor<256x2xi1, #blocked> loc(#loc29)
    %57 = tt.broadcast %10 : tensor<1x2xi1, #blocked> -> tensor<256x2xi1, #blocked> loc(#loc29)
    %58 = tt.broadcast %11 : tensor<1x2xi1, #blocked2> -> tensor<256x2xi1, #blocked2> loc(#loc29)
    %59 = arith.andi %56, %57 : tensor<256x2xi1, #blocked> loc(#loc29)
    %60 = tt.load %54, %59, %cst evictionPolicy = evict_last : tensor<256x2x!tt.ptr<f32>, #blocked> loc(#loc30)
    %61 = arith.cmpi sge, %47, %cst_10 : tensor<256x1xi64, #blocked> loc(#loc31)
    %62 = arith.addi %24, %cst_12 : tensor<256x1xi32, #blocked> loc(#loc32)
    %63 = tt.broadcast %62 : tensor<256x1xi32, #blocked> -> tensor<256x2xi32, #blocked> loc(#loc33)
    %64 = arith.addi %50, %63 : tensor<256x2xi32, #blocked> loc(#loc33)
    %65 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x2x!tt.ptr<f32>, #blocked> loc(#loc34)
    %66 = tt.addptr %65, %64 : tensor<256x2x!tt.ptr<f32>, #blocked>, tensor<256x2xi32, #blocked> loc(#loc34)
    %67 = arith.andi %61, %27 : tensor<256x1xi1, #blocked> loc(#loc35)
    %68 = tt.broadcast %67 : tensor<256x1xi1, #blocked> -> tensor<256x2xi1, #blocked> loc(#loc36)
    %69 = arith.andi %68, %57 : tensor<256x2xi1, #blocked> loc(#loc36)
    %70 = tt.load %66, %69, %cst evictionPolicy = evict_last : tensor<256x2x!tt.ptr<f32>, #blocked> loc(#loc37)
    %71 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x2x!tt.ptr<f32>, #blocked> loc(#loc38)
    %72 = tt.addptr %71, %64 : tensor<256x2x!tt.ptr<f32>, #blocked>, tensor<256x2xi32, #blocked> loc(#loc38)
    %73 = tt.load %72, %69, %cst evictionPolicy = evict_last : tensor<256x2x!tt.ptr<f32>, #blocked> loc(#loc39)
    %74 = arith.cmpf ogt, %73, %cst : tensor<256x2xf32, #blocked> loc(#loc40)
    %75 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<256x1x!tt.ptr<f32>, #blocked> loc(#loc41)
    %76 = tt.addptr %75, %62 : tensor<256x1x!tt.ptr<f32>, #blocked>, tensor<256x1xi32, #blocked> loc(#loc41)
    %77 = tt.broadcast %76 : tensor<256x1x!tt.ptr<f32>, #blocked> -> tensor<256x2x!tt.ptr<f32>, #blocked> loc(#loc41)
    %78 = tt.load %77, %69, %cst evictionPolicy = evict_last : tensor<256x2x!tt.ptr<f32>, #blocked> loc(#loc42)
    %79 = arith.mulf %78, %73 : tensor<256x2xf32, #blocked> loc(#loc43)
    %80 = arith.select %74, %73, %79 : tensor<256x2xi1, #blocked>, tensor<256x2xf32, #blocked> loc(#loc44)
    %81 = arith.muli %29, %cst_11 : tensor<1x2xi32, #blocked> loc(#loc45)
    %82 = tt.broadcast %81 : tensor<1x2xi32, #blocked> -> tensor<256x2xi32, #blocked> loc(#loc46)
    %83 = arith.addi %82, %63 : tensor<256x2xi32, #blocked> loc(#loc46)
    %84 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<256x2x!tt.ptr<f32>, #blocked> loc(#loc47)
    %85 = tt.addptr %84, %83 : tensor<256x2x!tt.ptr<f32>, #blocked>, tensor<256x2xi32, #blocked> loc(#loc47)
    %86 = tt.load %85, %69, %cst evictionPolicy = evict_last : tensor<256x2x!tt.ptr<f32>, #blocked> loc(#loc48)
    %87 = arith.subf %cst, %86 : tensor<256x2xf32, #blocked> loc(#loc80)
    %88 = math.exp %87 : tensor<256x2xf32, #blocked> loc(#loc81)
    %89 = arith.addf %88, %cst_2 : tensor<256x2xf32, #blocked> loc(#loc82)
    %90 = arith.divf %cst_2, %89 : tensor<256x2xf32, #blocked> loc(#loc83)
    %91 = arith.mulf %80, %90 : tensor<256x2xf32, #blocked> loc(#loc54)
    %92 = arith.addf %70, %91 : tensor<256x2xf32, #blocked> loc(#loc55)
    %93 = tt.broadcast %61 : tensor<256x1xi1, #blocked> -> tensor<256x2xi1, #blocked> loc(#loc56)
    %94 = arith.select %93, %92, %cst : tensor<256x2xi1, #blocked>, tensor<256x2xf32, #blocked> loc(#loc56)
    %95 = tt.broadcast %48 : tensor<256x1xi1, #blocked> -> tensor<256x2xi1, #blocked> loc(#loc57)
    %96 = arith.select %95, %60, %94 : tensor<256x2xi1, #blocked>, tensor<256x2xf32, #blocked> loc(#loc57)
    %97 = triton_gpu.convert_layout %34 : tensor<256x1xf32, #blocked1> -> tensor<256x1xf32, #blocked> loc(#loc58)
    %98 = tt.broadcast %97 : tensor<256x1xf32, #blocked> -> tensor<256x2xf32, #blocked> loc(#loc58)
    %99 = arith.subf %96, %98 : tensor<256x2xf32, #blocked> loc(#loc58)
    %100 = arith.addf %37, %cst_0 : tensor<256x1xf32, #blocked1> loc(#loc59)
    %101 = tt.extern_elementwise %100 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<256x1xf32, #blocked1>) -> tensor<256x1xf32, #blocked1> loc(#loc60)
    %102 = arith.divf %cst_1, %101 : tensor<256x1xf32, #blocked1> loc(#loc61)
    %103 = triton_gpu.convert_layout %102 : tensor<256x1xf32, #blocked1> -> tensor<256x1xf32, #blocked> loc(#loc62)
    %104 = tt.broadcast %103 : tensor<256x1xf32, #blocked> -> tensor<256x2xf32, #blocked> loc(#loc62)
    %105 = arith.mulf %99, %104 : tensor<256x2xf32, #blocked> loc(#loc62)
    %106 = triton_gpu.convert_layout %40 : tensor<256x1xf32, #blocked1> -> tensor<256x1xf32, #blocked> loc(#loc63)
    %107 = tt.broadcast %106 : tensor<256x1xf32, #blocked> -> tensor<256x2xf32, #blocked> loc(#loc63)
    %108 = arith.mulf %105, %107 : tensor<256x2xf32, #blocked> loc(#loc63)
    %109 = triton_gpu.convert_layout %43 : tensor<256x1xf32, #blocked1> -> tensor<256x1xf32, #blocked> loc(#loc64)
    %110 = tt.broadcast %109 : tensor<256x1xf32, #blocked> -> tensor<256x2xf32, #blocked> loc(#loc64)
    %111 = arith.addf %108, %110 : tensor<256x2xf32, #blocked> loc(#loc64)
    %112 = arith.cmpf ogt, %111, %cst : tensor<256x2xf32, #blocked> loc(#loc65)
    %113 = triton_gpu.convert_layout %46 : tensor<256x1xf32, #blocked1> -> tensor<256x1xf32, #blocked> loc(#loc66)
    %114 = tt.broadcast %113 : tensor<256x1xf32, #blocked> -> tensor<256x2xf32, #blocked> loc(#loc66)
    %115 = arith.mulf %114, %111 : tensor<256x2xf32, #blocked> loc(#loc66)
    %116 = arith.select %112, %111, %115 : tensor<256x2xi1, #blocked>, tensor<256x2xf32, #blocked> loc(#loc67)
    %117 = arith.muli %8, %cst_3 : tensor<1x2xi32, #blocked> loc(#loc68)
    %118 = tt.broadcast %117 : tensor<1x2xi32, #blocked> -> tensor<256x2xi32, #blocked> loc(#loc69)
    %119 = arith.addi %51, %118 : tensor<256x2xi32, #blocked> loc(#loc69)
    %120 = tt.splat %arg10 : !tt.ptr<f32> -> tensor<256x2x!tt.ptr<f32>, #blocked> loc(#loc70)
    %121 = tt.addptr %120, %119 : tensor<256x2x!tt.ptr<f32>, #blocked>, tensor<256x2xi32, #blocked> loc(#loc70)
    %122 = tt.broadcast %27 : tensor<256x1xi1, #blocked> -> tensor<256x2xi1, #blocked> loc(#loc71)
    %123 = tt.broadcast %28 : tensor<256x1xi1, #blocked2> -> tensor<256x2xi1, #blocked2> loc(#loc71)
    %124 = arith.andi %122, %57 : tensor<256x2xi1, #blocked> loc(#loc71)
    %125 = arith.andi %123, %58 : tensor<256x2xi1, #blocked2> loc(#loc71)
    tt.store %121, %96, %124 : tensor<256x2x!tt.ptr<f32>, #blocked> loc(#loc72)
    %126 = arith.muli %25, %cst_13 : tensor<256x1xi32, #blocked2> loc(#loc73)
    %127 = tt.broadcast %31 : tensor<1x2xi32, #blocked2> -> tensor<256x2xi32, #blocked2> loc(#loc74)
    %128 = tt.broadcast %126 : tensor<256x1xi32, #blocked2> -> tensor<256x2xi32, #blocked2> loc(#loc74)
    %129 = arith.addi %127, %128 : tensor<256x2xi32, #blocked2> loc(#loc74)
    %130 = arith.muli %30, %cst_14 : tensor<1x2xi32, #blocked2> loc(#loc75)
    %131 = tt.broadcast %130 : tensor<1x2xi32, #blocked2> -> tensor<256x2xi32, #blocked2> loc(#loc76)
    %132 = arith.addi %129, %131 : tensor<256x2xi32, #blocked2> loc(#loc76)
    %133 = tt.splat %arg11 : !tt.ptr<f32> -> tensor<256x2x!tt.ptr<f32>, #blocked2> loc(#loc77)
    %134 = tt.addptr %133, %132 : tensor<256x2x!tt.ptr<f32>, #blocked2>, tensor<256x2xi32, #blocked2> loc(#loc77)
    %135 = triton_gpu.convert_layout %116 : tensor<256x2xf32, #blocked> -> tensor<256x2xf32, #blocked2> loc(#loc78)
    tt.store %134, %135, %125 : tensor<256x2x!tt.ptr<f32>, #blocked2> loc(#loc78)
    tt.return loc(#loc79)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":22:28)
#loc3 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":22:33)
#loc4 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":23:44)
#loc5 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":23:23)
#loc6 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":24:21)
#loc7 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":25:28)
#loc8 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":25:33)
#loc9 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":26:44)
#loc10 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":26:23)
#loc11 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":27:21)
#loc12 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":30:19)
#loc13 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":31:19)
#loc14 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":32:31)
#loc15 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":32:36)
#loc16 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":33:31)
#loc17 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":33:36)
#loc18 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":34:31)
#loc19 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":34:36)
#loc20 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":35:31)
#loc21 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":35:36)
#loc22 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":36:31)
#loc23 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":36:36)
#loc24 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":41:18)
#loc25 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":42:34)
#loc26 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":42:40)
#loc27 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":42:30)
#loc28 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":42:53)
#loc29 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":42:61)
#loc30 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":42:46)
#loc31 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":43:19)
#loc32 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":46:49)
#loc33 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":46:40)
#loc34 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":46:30)
#loc35 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":46:62)
#loc36 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":46:70)
#loc37 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":46:55)
#loc38 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":47:31)
#loc39 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":47:56)
#loc40 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":49:20)
#loc41 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":50:31)
#loc42 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":50:80)
#loc43 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":51:20)
#loc44 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":52:35)
#loc45 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":53:35)
#loc46 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":53:41)
#loc47 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":53:31)
#loc48 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":53:56)
#loc49 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:30)
#loc50 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":54:23)
#loc51 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:29)
#loc52 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:20)
#loc53 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:16)
#loc54 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":55:20)
#loc55 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":56:19)
#loc56 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":58:34)
#loc57 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":59:33)
#loc58 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":60:20)
#loc59 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":62:20)
#loc60 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":63:27)
#loc61 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":65:20)
#loc62 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":68:20)
#loc63 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":69:20)
#loc64 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":70:20)
#loc65 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":72:20)
#loc66 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":73:20)
#loc67 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":74:35)
#loc68 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":75:34)
#loc69 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":75:30)
#loc70 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":75:25)
#loc71 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":75:54)
#loc72 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":75:46)
#loc73 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":76:33)
#loc74 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":76:30)
#loc75 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":76:44)
#loc76 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":76:38)
#loc77 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":76:25)
#loc78 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":76:56)
#loc79 = loc("inductor_cache/6s/c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py":76:4)
#loc80 = loc(callsite(#loc49 at #loc50))
#loc81 = loc(callsite(#loc51 at #loc50))
#loc82 = loc(callsite(#loc52 at #loc50))
#loc83 = loc(callsite(#loc53 at #loc50))
