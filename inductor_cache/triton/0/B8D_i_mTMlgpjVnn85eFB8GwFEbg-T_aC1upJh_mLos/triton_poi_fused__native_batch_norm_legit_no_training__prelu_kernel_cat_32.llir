; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %16 = shl i32 %15, 1, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = lshr i32 %17, 6, !dbg !12
  %.lobit = and i32 %18, 1, !dbg !12
  %19 = or disjoint i32 %16, %.lobit, !dbg !13
  %20 = icmp slt i32 %19, 256, !dbg !14
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %22 = shl i32 %21, 8, !dbg !16
  %23 = shl i32 %17, 1, !dbg !17
  %24 = and i32 %23, 254, !dbg !17
  %25 = shl i32 %17, 2, !dbg !17
  %26 = and i32 %25, 252, !dbg !17
  %27 = or disjoint i32 %22, %24, !dbg !18
  %28 = or disjoint i32 %22, %26, !dbg !18
  %29 = icmp slt i32 %27, 256, !dbg !19
  %30 = sdiv i32 %19, 64, !dbg !20
  %31 = sext i32 %27 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !21
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %29) #4, !dbg !22
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !22
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !23
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 %29) #4, !dbg !24
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !24
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !24
  %40 = bitcast i32 %38 to float, !dbg !24
  %41 = bitcast i32 %39 to float, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %7, i64 %31, !dbg !25
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %29) #4, !dbg !26
  %44 = getelementptr float, ptr addrspace(1) %8, i64 %31, !dbg !27
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %29) #4, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %9, i64 %31, !dbg !29
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %29) #4, !dbg !30
  %48 = icmp slt i32 %28, 128, !dbg !31
  %49 = shl i32 %19, 7, !dbg !32
  %50 = add i32 %49, %28, !dbg !33
  %51 = sext i32 %50 to i64, !dbg !34
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !34
  %53 = and i1 %20, %48, !dbg !35
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %53, i32 0, i1 %53, i32 0, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #4, !dbg !36
  %55 = add i32 %28, -128, !dbg !37
  %56 = add i32 %55, %49, !dbg !38
  %57 = sext i32 %56 to i64, !dbg !39
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !39
  %59 = and i32 %28, -128, !dbg !40
  %60 = icmp eq i32 %59, 128, !dbg !40
  %61 = and i1 %20, %60, !dbg !41
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61) #4, !dbg !42
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !43
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %63, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61) #4, !dbg !44
  %65 = sext i32 %55 to i64, !dbg !45
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %65, !dbg !45
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %66, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61) #4, !dbg !46
  %68 = shl i32 %30, 7, !dbg !47
  %69 = add i32 %68, %55, !dbg !48
  %70 = sext i32 %69 to i64, !dbg !49
  %71 = getelementptr float, ptr addrspace(1) %4, i64 %70, !dbg !49
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %71, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61) #4, !dbg !50
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !50
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !50
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !50
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !50
  %77 = bitcast i32 %73 to float, !dbg !50
  %78 = bitcast i32 %74 to float, !dbg !50
  %79 = bitcast i32 %75 to float, !dbg !50
  %80 = bitcast i32 %76 to float, !dbg !50
  %81 = fsub float 0.000000e+00, %77, !dbg !51
  %82 = fsub float 0.000000e+00, %78, !dbg !51
  %83 = fsub float 0.000000e+00, %79, !dbg !51
  %84 = fsub float 0.000000e+00, %80, !dbg !51
  %85 = fmul float %81, 0x3FF7154760000000, !dbg !55
  %86 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %85) #4, !dbg !55
  %87 = fmul float %82, 0x3FF7154760000000, !dbg !55
  %88 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %87) #4, !dbg !55
  %89 = fmul float %83, 0x3FF7154760000000, !dbg !55
  %90 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %89) #4, !dbg !55
  %91 = fmul float %84, 0x3FF7154760000000, !dbg !55
  %92 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %91) #4, !dbg !55
  %93 = fadd float %86, 1.000000e+00, !dbg !56
  %94 = fadd float %88, 1.000000e+00, !dbg !56
  %95 = fadd float %90, 1.000000e+00, !dbg !56
  %96 = fadd float %92, 1.000000e+00, !dbg !56
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %93) #4, !dbg !57
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %94) #4, !dbg !57
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %95) #4, !dbg !57
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %96) #4, !dbg !57
  %101 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %24, !dbg !58
  %102 = insertelement <1 x i32> poison, i32 %34, i64 0, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #4, !dbg !58
  %103 = or disjoint i32 %24, 1, !dbg !58
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %103, !dbg !58
  %105 = insertelement <1 x i32> poison, i32 %35, i64 0, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %106 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %26, !dbg !58
  %107 = load <4 x float>, ptr addrspace(3) %106, align 16, !dbg !58
  %108 = fadd float %40, 0x3EE4F8B580000000, !dbg !59
  %109 = fadd float %41, 0x3EE4F8B580000000, !dbg !59
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !60
  %.not.i = icmp eq i32 %110, 0, !dbg !60
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !60
  %.not1.i = icmp eq i32 %111, 0, !dbg !60
  br i1 %.not.i, label %117, label %112, !dbg !60

112:                                              ; preds = %14
  br i1 %.not1.i, label %115, label %113, !dbg !60

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %108) #4, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %108) #4, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

117:                                              ; preds = %14
  br i1 %.not1.i, label %120, label %118, !dbg !60

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.f(float %108) #4, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.f(float %108) #4, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

__nv_sqrtf.exit:                                  ; preds = %113, %115, %118, %120
  %.0.i = phi float [ %114, %113 ], [ %116, %115 ], [ %119, %118 ], [ %121, %120 ], !dbg !60
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !60
  %.not.i8 = icmp eq i32 %122, 0, !dbg !60
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !60
  %.not1.i11 = icmp eq i32 %123, 0, !dbg !60
  br i1 %.not.i8, label %129, label %124, !dbg !60

124:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %127, label %125, !dbg !60

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %109) #4, !dbg !60
  br label %__nv_sqrtf.exit12, !dbg !60

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %109) #4, !dbg !60
  br label %__nv_sqrtf.exit12, !dbg !60

129:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %132, label %130, !dbg !60

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.f(float %109) #4, !dbg !60
  br label %__nv_sqrtf.exit12, !dbg !60

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.f(float %109) #4, !dbg !60
  br label %__nv_sqrtf.exit12, !dbg !60

__nv_sqrtf.exit12:                                ; preds = %125, %127, %130, %132
  %.0.i10 = phi float [ %126, %125 ], [ %128, %127 ], [ %131, %130 ], [ %133, %132 ], !dbg !60
  %134 = or disjoint i32 %26, 3, !dbg !58
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %134, !dbg !58
  %136 = or disjoint i32 %26, 2, !dbg !58
  %137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %136, !dbg !58
  %138 = or disjoint i32 %26, 1, !dbg !58
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %138, !dbg !58
  %140 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !36
  %141 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !44
  %142 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !46
  %143 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !42
  %144 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !36
  %145 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !44
  %146 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !46
  %147 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !42
  %148 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !36
  %149 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !44
  %150 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !46
  %151 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !42
  %152 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !36
  %153 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !44
  %154 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !46
  %155 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !42
  %156 = extractvalue { i32, i32 } %47, 1, !dbg !30
  %157 = extractvalue { i32, i32 } %47, 0, !dbg !30
  %158 = extractvalue { i32, i32 } %45, 1, !dbg !28
  %159 = extractvalue { i32, i32 } %45, 0, !dbg !28
  %160 = extractvalue { i32, i32 } %43, 1, !dbg !26
  %161 = extractvalue { i32, i32 } %43, 0, !dbg !26
  %.frozen = freeze i32 %16, !dbg !20
  %162 = sdiv i32 %.frozen, 64, !dbg !20
  %163 = mul i32 %162, 64, !dbg !61
  %.decomposed = sub i32 %.frozen, %163, !dbg !61
  %164 = and i32 %17, 127, !dbg !17
  %165 = or disjoint i32 %164, %22, !dbg !18
  %166 = or disjoint i32 %165, 128, !dbg !18
  %167 = icmp slt i32 %166, 256, !dbg !19
  %168 = icmp slt i32 %165, 256, !dbg !19
  %169 = icmp slt i32 %28, 256, !dbg !19
  %170 = icmp slt i32 %16, 256, !dbg !14
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !62
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #4, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %173 = bitcast float %171 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %173, i1 true) #4, !dbg !63
  %174 = bitcast float %172 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %174, i1 true) #4, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %175 = insertelement <1 x i32> poison, i32 %161, i64 0, !dbg !64
  %176 = insertelement <1 x i32> poison, i32 %160, i64 0, !dbg !64
  %177 = insertelement <1 x i32> poison, i32 %159, i64 0, !dbg !65
  %178 = insertelement <1 x i32> poison, i32 %158, i64 0, !dbg !65
  %179 = insertelement <4 x i32> poison, i32 %152, i64 0, !dbg !36
  %180 = insertelement <4 x i32> %179, i32 %148, i64 1, !dbg !36
  %181 = insertelement <4 x i32> %180, i32 %144, i64 2, !dbg !36
  %182 = insertelement <4 x i32> %181, i32 %140, i64 3, !dbg !36
  %183 = bitcast <4 x i32> %182 to <4 x float>, !dbg !36
  %184 = insertelement <4 x i32> poison, i32 %153, i64 0, !dbg !44
  %185 = insertelement <4 x i32> %184, i32 %149, i64 1, !dbg !44
  %186 = insertelement <4 x i32> %185, i32 %145, i64 2, !dbg !44
  %187 = insertelement <4 x i32> %186, i32 %141, i64 3, !dbg !44
  %188 = bitcast <4 x i32> %187 to <4 x float>, !dbg !44
  %189 = fcmp ogt <4 x float> %188, zeroinitializer, !dbg !66
  %190 = insertelement <4 x i32> poison, i32 %154, i64 0, !dbg !46
  %191 = insertelement <4 x i32> %190, i32 %150, i64 1, !dbg !46
  %192 = insertelement <4 x i32> %191, i32 %146, i64 2, !dbg !46
  %193 = insertelement <4 x i32> %192, i32 %142, i64 3, !dbg !46
  %194 = bitcast <4 x i32> %193 to <4 x float>, !dbg !46
  %195 = fmul <4 x float> %188, %194, !dbg !67
  %196 = select <4 x i1> %189, <4 x float> %188, <4 x float> %195, !dbg !68
  %197 = insertelement <4 x float> poison, float %97, i64 0, !dbg !69
  %198 = insertelement <4 x float> %197, float %98, i64 1, !dbg !69
  %199 = insertelement <4 x float> %198, float %99, i64 2, !dbg !69
  %200 = insertelement <4 x float> %199, float %100, i64 3, !dbg !69
  %201 = fmul <4 x float> %196, %200, !dbg !69
  %202 = insertelement <4 x i32> poison, i32 %155, i64 0, !dbg !42
  %203 = insertelement <4 x i32> %202, i32 %151, i64 1, !dbg !42
  %204 = insertelement <4 x i32> %203, i32 %147, i64 2, !dbg !42
  %205 = insertelement <4 x i32> %204, i32 %143, i64 3, !dbg !42
  %206 = bitcast <4 x i32> %205 to <4 x float>, !dbg !42
  %207 = fadd <4 x float> %201, %206, !dbg !70
  %208 = insertelement <4 x i1> poison, i1 %48, i64 0, !dbg !71
  %209 = shufflevector <4 x i1> %208, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !71
  %210 = select <4 x i1> %209, <4 x float> %183, <4 x float> %207, !dbg !71
  %211 = fsub <4 x float> %210, %107, !dbg !58
  %212 = load <4 x float>, ptr addrspace(3) %106, align 16, !dbg !63
  %213 = fmul <4 x float> %211, %212, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %175, i1 true) #4, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %176, i1 true) #4, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %214 = load <4 x float>, ptr addrspace(3) %106, align 16, !dbg !64
  %215 = fmul <4 x float> %213, %214, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %177, i1 true) #4, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %178, i1 true) #4, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %216 = load <4 x float>, ptr addrspace(3) %106, align 16, !dbg !65
  %217 = fadd <4 x float> %215, %216, !dbg !65
  %218 = fcmp ogt <4 x float> %217, zeroinitializer, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %219 = insertelement <1 x i32> poison, i32 %157, i64 0, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %219, i1 true) #4, !dbg !73
  %220 = insertelement <1 x i32> poison, i32 %156, i64 0, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %220, i1 true) #4, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %221 = load float, ptr addrspace(3) %106, align 16, !dbg !73
  %222 = load float, ptr addrspace(3) %139, align 4, !dbg !73
  %223 = load float, ptr addrspace(3) %137, align 8, !dbg !73
  %224 = load float, ptr addrspace(3) %135, align 4, !dbg !73
  %225 = extractelement <4 x float> %217, i64 0, !dbg !74
  %226 = fmul float %225, %221, !dbg !73
  %227 = extractelement <4 x float> %217, i64 1, !dbg !74
  %228 = fmul float %227, %222, !dbg !73
  %229 = extractelement <4 x float> %217, i64 2, !dbg !74
  %230 = fmul float %229, %223, !dbg !73
  %231 = extractelement <4 x float> %217, i64 3, !dbg !74
  %232 = fmul float %231, %224, !dbg !73
  %233 = extractelement <4 x i1> %218, i64 0, !dbg !74
  %234 = select i1 %233, float %225, float %226, !dbg !74
  %235 = extractelement <4 x i1> %218, i64 1, !dbg !74
  %236 = select i1 %235, float %227, float %228, !dbg !74
  %237 = extractelement <4 x i1> %218, i64 2, !dbg !74
  %238 = select i1 %237, float %229, float %230, !dbg !74
  %239 = extractelement <4 x i1> %218, i64 3, !dbg !74
  %240 = select i1 %239, float %231, float %232, !dbg !74
  %241 = shl i32 %19, 8, !dbg !75
  %242 = add i32 %28, %241, !dbg !76
  %243 = sext i32 %242 to i64, !dbg !77
  %244 = getelementptr float, ptr addrspace(1) %10, i64 %243, !dbg !77
  %245 = and i1 %20, %169, !dbg !78
  %246 = and i1 %170, %168, !dbg !78
  %247 = and i1 %170, %167, !dbg !78
  %bc = bitcast <4 x float> %210 to <4 x i32>, !dbg !79
  %248 = extractelement <4 x i32> %bc, i64 0, !dbg !79
  %bc13 = bitcast <4 x float> %210 to <4 x i32>, !dbg !79
  %249 = extractelement <4 x i32> %bc13, i64 1, !dbg !79
  %bc14 = bitcast <4 x float> %210 to <4 x i32>, !dbg !79
  %250 = extractelement <4 x i32> %bc14, i64 2, !dbg !79
  %bc15 = bitcast <4 x float> %210 to <4 x i32>, !dbg !79
  %251 = extractelement <4 x i32> %bc15, i64 3, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %248, i32 %249, i32 %250, i32 %251, ptr addrspace(1) %244, i1 %245) #4, !dbg !79
  %252 = shl i32 %165, 6, !dbg !80
  %253 = shl i32 %166, 6, !dbg !80
  %254 = shl i32 %162, 14, !dbg !81
  %255 = add i32 %254, %.decomposed, !dbg !82
  %256 = add i32 %255, %252, !dbg !83
  %257 = add i32 %255, %253, !dbg !83
  %258 = sext i32 %256 to i64, !dbg !84
  %259 = getelementptr float, ptr addrspace(1) %11, i64 %258, !dbg !84
  %260 = sext i32 %257 to i64, !dbg !84
  %261 = getelementptr float, ptr addrspace(1) %11, i64 %260, !dbg !84
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %262 = shl i32 %17, 3, !dbg !85
  %263 = and i32 %262, 504, !dbg !85
  %264 = or disjoint i32 %263, %.lobit, !dbg !85
  %265 = getelementptr float, ptr addrspace(3) @global_smem, i32 %263, !dbg !85
  %266 = getelementptr float, ptr addrspace(3) %265, i32 %264, !dbg !85
  %267 = bitcast float %234 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %267, i1 true) #4, !dbg !85
  %268 = or disjoint i32 %264, 2, !dbg !85
  %269 = or disjoint i32 %263, 2, !dbg !85
  %270 = getelementptr float, ptr addrspace(3) @global_smem, i32 %269, !dbg !85
  %271 = getelementptr float, ptr addrspace(3) %270, i32 %268, !dbg !85
  %272 = bitcast float %236 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #4, !dbg !85
  %273 = or disjoint i32 %264, 4, !dbg !85
  %274 = or disjoint i32 %263, 4, !dbg !85
  %275 = getelementptr float, ptr addrspace(3) @global_smem, i32 %274, !dbg !85
  %276 = getelementptr float, ptr addrspace(3) %275, i32 %273, !dbg !85
  %277 = bitcast float %238 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %277, i1 true) #4, !dbg !85
  %278 = or disjoint i32 %264, 6, !dbg !85
  %279 = or disjoint i32 %263, 6, !dbg !85
  %280 = getelementptr float, ptr addrspace(3) @global_smem, i32 %279, !dbg !85
  %281 = getelementptr float, ptr addrspace(3) %280, i32 %278, !dbg !85
  %282 = bitcast float %240 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %281, <1 x i32> %282, i1 true) #4, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %.idx = shl nuw nsw i32 %24, 3, !dbg !85
  %283 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !85
  %284 = shl nuw nsw i32 %24, 1, !dbg !85
  %285 = or disjoint i32 %284, 512, !dbg !85
  %286 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %285, !dbg !85
  %287 = load <2 x i32>, ptr addrspace(3) %286, align 16, !dbg !85
  %.extract = load i32, ptr addrspace(3) %283, align 16, !dbg !85
  %288 = getelementptr inbounds i8, ptr addrspace(3) %283, i32 4, !dbg !85
  %.extract5 = load i32, ptr addrspace(3) %288, align 4, !dbg !85
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract5, ptr addrspace(1) %259, i1 %246) #4, !dbg !85
  %.extract6 = extractelement <2 x i32> %287, i64 0, !dbg !85
  %.extract7 = extractelement <2 x i32> %287, i64 1, !dbg !85
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract6, i32 %.extract7, ptr addrspace(1) %261, i1 %247) #4, !dbg !85
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py", directory: "inductor_cache/6s")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_32, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_32", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 31, scope: !7)
!22 = !DILocation(line: 32, column: 36, scope: !7)
!23 = !DILocation(line: 33, column: 31, scope: !7)
!24 = !DILocation(line: 33, column: 36, scope: !7)
!25 = !DILocation(line: 34, column: 31, scope: !7)
!26 = !DILocation(line: 34, column: 36, scope: !7)
!27 = !DILocation(line: 35, column: 31, scope: !7)
!28 = !DILocation(line: 35, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 31, scope: !7)
!30 = !DILocation(line: 36, column: 36, scope: !7)
!31 = !DILocation(line: 41, column: 18, scope: !7)
!32 = !DILocation(line: 42, column: 34, scope: !7)
!33 = !DILocation(line: 42, column: 40, scope: !7)
!34 = !DILocation(line: 42, column: 30, scope: !7)
!35 = !DILocation(line: 42, column: 61, scope: !7)
!36 = !DILocation(line: 42, column: 46, scope: !7)
!37 = !DILocation(line: 46, column: 49, scope: !7)
!38 = !DILocation(line: 46, column: 40, scope: !7)
!39 = !DILocation(line: 46, column: 30, scope: !7)
!40 = !DILocation(line: 46, column: 62, scope: !7)
!41 = !DILocation(line: 46, column: 70, scope: !7)
!42 = !DILocation(line: 46, column: 55, scope: !7)
!43 = !DILocation(line: 47, column: 31, scope: !7)
!44 = !DILocation(line: 47, column: 56, scope: !7)
!45 = !DILocation(line: 50, column: 31, scope: !7)
!46 = !DILocation(line: 50, column: 80, scope: !7)
!47 = !DILocation(line: 53, column: 35, scope: !7)
!48 = !DILocation(line: 53, column: 41, scope: !7)
!49 = !DILocation(line: 53, column: 31, scope: !7)
!50 = !DILocation(line: 53, column: 56, scope: !7)
!51 = !DILocation(line: 47, column: 30, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!54 = !DILocation(line: 54, column: 23, scope: !7)
!55 = !DILocation(line: 47, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 47, column: 20, scope: !52, inlinedAt: !54)
!57 = !DILocation(line: 47, column: 16, scope: !52, inlinedAt: !54)
!58 = !DILocation(line: 60, column: 20, scope: !7)
!59 = !DILocation(line: 62, column: 20, scope: !7)
!60 = !DILocation(line: 63, column: 27, scope: !7)
!61 = !DILocation(line: 31, column: 19, scope: !7)
!62 = !DILocation(line: 65, column: 20, scope: !7)
!63 = !DILocation(line: 68, column: 20, scope: !7)
!64 = !DILocation(line: 69, column: 20, scope: !7)
!65 = !DILocation(line: 70, column: 20, scope: !7)
!66 = !DILocation(line: 49, column: 20, scope: !7)
!67 = !DILocation(line: 51, column: 20, scope: !7)
!68 = !DILocation(line: 52, column: 35, scope: !7)
!69 = !DILocation(line: 55, column: 20, scope: !7)
!70 = !DILocation(line: 56, column: 19, scope: !7)
!71 = !DILocation(line: 59, column: 33, scope: !7)
!72 = !DILocation(line: 72, column: 20, scope: !7)
!73 = !DILocation(line: 73, column: 20, scope: !7)
!74 = !DILocation(line: 74, column: 35, scope: !7)
!75 = !DILocation(line: 75, column: 34, scope: !7)
!76 = !DILocation(line: 75, column: 30, scope: !7)
!77 = !DILocation(line: 75, column: 25, scope: !7)
!78 = !DILocation(line: 75, column: 54, scope: !7)
!79 = !DILocation(line: 75, column: 46, scope: !7)
!80 = !DILocation(line: 76, column: 33, scope: !7)
!81 = !DILocation(line: 76, column: 44, scope: !7)
!82 = !DILocation(line: 76, column: 30, scope: !7)
!83 = !DILocation(line: 76, column: 38, scope: !7)
!84 = !DILocation(line: 76, column: 25, scope: !7)
!85 = !DILocation(line: 76, column: 56, scope: !7)
!86 = !DILocation(line: 76, column: 4, scope: !7)
