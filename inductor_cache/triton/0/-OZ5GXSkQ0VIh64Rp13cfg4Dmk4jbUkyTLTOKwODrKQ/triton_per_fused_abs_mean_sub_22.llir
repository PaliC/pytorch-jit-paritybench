; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_mean_sub_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = and i32 %8, 7, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 2048, !dbg !14
  %13 = lshr i32 %8, 5, !dbg !15
  %14 = lshr i32 %8, 3, !dbg !15
  %15 = and i32 %14, 31, !dbg !15
  %.frozen = freeze i32 %11, !dbg !16
  %16 = sdiv i32 %.frozen, 32, !dbg !16
  %17 = mul i32 %16, 32, !dbg !17
  %.decomposed = sub i32 %.frozen, %17, !dbg !17
  %18 = shl i32 %14, 8, !dbg !18
  %19 = and i32 %18, 3840, !dbg !18
  %20 = shl i32 %16, 7, !dbg !19
  %21 = or disjoint i32 %20, %15, !dbg !20
  %22 = or disjoint i32 %21, 32, !dbg !20
  %23 = or disjoint i32 %21, 64, !dbg !20
  %24 = or disjoint i32 %21, 96, !dbg !20
  %25 = sdiv i32 %21, 16, !dbg !21
  %26 = sdiv i32 %22, 16, !dbg !21
  %27 = sdiv i32 %23, 16, !dbg !21
  %28 = sdiv i32 %24, 16, !dbg !21
  %29 = srem i32 %25, 16, !dbg !22
  %30 = srem i32 %26, 16, !dbg !22
  %31 = srem i32 %27, 16, !dbg !22
  %32 = srem i32 %28, 16, !dbg !22
  %33 = shl nsw i32 %29, 12, !dbg !23
  %34 = shl nsw i32 %30, 12, !dbg !23
  %35 = shl nsw i32 %31, 12, !dbg !23
  %36 = shl nsw i32 %32, 12, !dbg !23
  %37 = or disjoint i32 %33, %19, !dbg !24
  %38 = or disjoint i32 %34, %19, !dbg !24
  %39 = or disjoint i32 %35, %19, !dbg !24
  %40 = or disjoint i32 %36, %19, !dbg !24
  %41 = shl nsw i32 %.decomposed, 13, !dbg !25
  %42 = add i32 %21, %41, !dbg !26
  %43 = add i32 %22, %41, !dbg !26
  %44 = add i32 %23, %41, !dbg !26
  %45 = add i32 %24, %41, !dbg !26
  %46 = sdiv i32 %42, 65536, !dbg !27
  %47 = sdiv i32 %43, 65536, !dbg !27
  %48 = sdiv i32 %44, 65536, !dbg !27
  %49 = sdiv i32 %45, 65536, !dbg !27
  %50 = shl nsw i32 %46, 16, !dbg !28
  %51 = shl nsw i32 %47, 16, !dbg !28
  %52 = shl nsw i32 %48, 16, !dbg !28
  %53 = shl nsw i32 %49, 16, !dbg !28
  %54 = add i32 %37, %50, !dbg !29
  %55 = add i32 %38, %51, !dbg !29
  %56 = add i32 %39, %52, !dbg !29
  %57 = add i32 %40, %53, !dbg !29
  %58 = sdiv i32 %42, 256, !dbg !30
  %59 = sdiv i32 %43, 256, !dbg !30
  %60 = sdiv i32 %44, 256, !dbg !30
  %61 = sdiv i32 %45, 256, !dbg !30
  %62 = srem i32 %58, 256, !dbg !31
  %63 = srem i32 %59, 256, !dbg !31
  %64 = srem i32 %60, 256, !dbg !31
  %65 = srem i32 %61, 256, !dbg !31
  %66 = add i32 %54, %62, !dbg !32
  %67 = add i32 %55, %63, !dbg !32
  %68 = add i32 %56, %64, !dbg !32
  %69 = add i32 %57, %65, !dbg !32
  %70 = sext i32 %66 to i64, !dbg !33
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !33
  %72 = sext i32 %67 to i64, !dbg !33
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !33
  %74 = sext i32 %68 to i64, !dbg !33
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !33
  %76 = sext i32 %69 to i64, !dbg !33
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !33
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %12, i32 0, i1 %12) #4, !dbg !34
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %12, i32 0, i1 %12) #4, !dbg !34
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %12, i32 0, i1 %12) #4, !dbg !34
  %81 = bitcast i32 %80 to float, !dbg !34
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %12, i32 0, i1 %12) #4, !dbg !34
  %83 = bitcast i32 %82 to float, !dbg !34
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !35
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !35
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !35
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !35
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %12, i32 0, i1 %12) #4, !dbg !36
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %12, i32 0, i1 %12) #4, !dbg !36
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %12, i32 0, i1 %12) #4, !dbg !36
  %91 = bitcast i32 %90 to float, !dbg !36
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %12, i32 0, i1 %12) #4, !dbg !36
  %93 = bitcast i32 %92 to float, !dbg !36
  %94 = fsub float %81, %91, !dbg !37
  %95 = fsub float %83, %93, !dbg !37
  %96 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !34
  %97 = insertelement <2 x i32> %96, i32 %79, i64 1, !dbg !34
  %98 = bitcast <2 x i32> %97 to <2 x float>, !dbg !34
  %99 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !36
  %100 = insertelement <2 x i32> %99, i32 %89, i64 1, !dbg !36
  %101 = bitcast <2 x i32> %100 to <2 x float>, !dbg !36
  %102 = fsub <2 x float> %98, %101, !dbg !37
  %103 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %102), !dbg !38
  %104 = tail call float @llvm.fabs.f32(float %94), !dbg !38
  %105 = tail call float @llvm.fabs.f32(float %95), !dbg !38
  %shift = shufflevector <2 x float> %103, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !39
  %106 = fadd <2 x float> %103, %shift, !dbg !39
  %107 = extractelement <2 x float> %106, i64 0, !dbg !39
  %108 = fadd float %107, %104, !dbg !39
  %109 = fadd float %108, %105, !dbg !39
  %110 = select i1 %12, float %109, float 0.000000e+00, !dbg !39
  %111 = bitcast float %110 to i32, !dbg !44
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 16, i32 31), !dbg !44
  %113 = bitcast i32 %112 to float, !dbg !44
  %114 = fadd float %110, %113, !dbg !39
  %115 = bitcast float %114 to i32, !dbg !44
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 8, i32 31), !dbg !44
  %117 = bitcast i32 %116 to float, !dbg !44
  %118 = fadd float %114, %117, !dbg !39
  %119 = lshr i32 %9, 3, !dbg !44
  %120 = icmp samesign ult i32 %9, 8, !dbg !44
  %121 = and i32 %13, 7, !dbg !44
  %122 = shl nuw nsw i32 %10, 3, !dbg !44
  %123 = or disjoint i32 %122, %121, !dbg !44
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %123, !dbg !44
  %125 = bitcast float %118 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 %120) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %126 = icmp slt i32 %8, 64, !dbg !44
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !44
  %128 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %127, i1 %126) #4, !dbg !44
  %129 = bitcast i32 %128 to float, !dbg !44
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 4, i32 31), !dbg !44
  %131 = bitcast i32 %130 to float, !dbg !44
  %132 = fadd float %129, %131, !dbg !39
  %133 = bitcast float %132 to i32, !dbg !44
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 2, i32 31), !dbg !44
  %135 = bitcast i32 %134 to float, !dbg !44
  %136 = fadd float %132, %135, !dbg !39
  %137 = bitcast float %136 to i32, !dbg !44
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 1, i32 31), !dbg !44
  %139 = bitcast i32 %138 to float, !dbg !44
  %140 = fadd float %136, %139, !dbg !39
  %141 = icmp eq i32 %10, 0, !dbg !44
  %142 = and i1 %126, %141, !dbg !44
  %143 = bitcast float %140 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %143, i1 %142) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %144 = getelementptr float, ptr addrspace(3) @global_smem, i32 %122, !dbg !44
  %145 = load i32, ptr addrspace(3) %144, align 16, !dbg !44
  %146 = sext i32 %11 to i64, !dbg !45
  %147 = getelementptr float, ptr addrspace(1) %2, i64 %146, !dbg !45
  %148 = shl nuw nsw i32 %121, 2, !dbg !46
  %149 = or disjoint i32 %148, %119, !dbg !46
  %150 = icmp eq i32 %149, 0, !dbg !46
  %151 = and i1 %150, %12, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %145, ptr addrspace(1) %147, i1 %151) #4, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caqotpjvy2cocnuhcu2krmeas7hy4ikt4beygh2f5edl4igpajav.py", directory: "inductor_cache/aq")
!4 = !{ptr @triton_per_fused_abs_mean_sub_22, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_mean_sub_22, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_mean_sub_22", linkageName: "triton_per_fused_abs_mean_sub_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 36, scope: !7)
!19 = !DILocation(line: 33, column: 66, scope: !7)
!20 = !DILocation(line: 33, column: 62, scope: !7)
!21 = !DILocation(line: 33, column: 73, scope: !7)
!22 = !DILocation(line: 33, column: 79, scope: !7)
!23 = !DILocation(line: 33, column: 55, scope: !7)
!24 = !DILocation(line: 33, column: 48, scope: !7)
!25 = !DILocation(line: 33, column: 113, scope: !7)
!26 = !DILocation(line: 33, column: 108, scope: !7)
!27 = !DILocation(line: 33, column: 120, scope: !7)
!28 = !DILocation(line: 33, column: 93, scope: !7)
!29 = !DILocation(line: 33, column: 86, scope: !7)
!30 = !DILocation(line: 33, column: 159, scope: !7)
!31 = !DILocation(line: 33, column: 166, scope: !7)
!32 = !DILocation(line: 33, column: 131, scope: !7)
!33 = !DILocation(line: 33, column: 30, scope: !7)
!34 = !DILocation(line: 33, column: 174, scope: !7)
!35 = !DILocation(line: 34, column: 30, scope: !7)
!36 = !DILocation(line: 34, column: 174, scope: !7)
!37 = !DILocation(line: 35, column: 18, scope: !7)
!38 = !DILocation(line: 36, column: 23, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !40, inlinedAt: !43)
!40 = distinct !DILexicalBlockFile(scope: !42, file: !41, discriminator: 0)
!41 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!42 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!43 = !DILocation(line: 39, column: 24, scope: !7)
!44 = !DILocation(line: 267, column: 36, scope: !42, inlinedAt: !43)
!45 = !DILocation(line: 40, column: 25, scope: !7)
!46 = !DILocation(line: 40, column: 36, scope: !7)
!47 = !DILocation(line: 40, column: 4, scope: !7)
