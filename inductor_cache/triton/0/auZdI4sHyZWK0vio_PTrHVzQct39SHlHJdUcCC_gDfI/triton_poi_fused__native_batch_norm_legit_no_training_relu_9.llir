; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 1280, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %17 = shl i32 %16, 5, !dbg !16
  %18 = lshr i32 %11, 3, !dbg !17
  %19 = and i32 %18, 15, !dbg !17
  %20 = or disjoint i32 %17, %19, !dbg !18
  %21 = or disjoint i32 %20, 16, !dbg !18
  %22 = icmp slt i32 %20, 961, !dbg !19
  %23 = icmp slt i32 %21, 961, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %24 = sdiv i32 %.frozen, 320, !dbg !20
  %25 = mul i32 %24, 320, !dbg !21
  %.decomposed = sub i32 %.frozen, %25, !dbg !21
  %26 = mul i32 %20, 320, !dbg !22
  %27 = mul i32 %21, 320, !dbg !22
  %28 = mul i32 %24, 307520, !dbg !23
  %29 = add i32 %28, %.decomposed, !dbg !24
  %30 = add i32 %29, %26, !dbg !25
  %31 = add i32 %29, %27, !dbg !25
  %32 = sext i32 %30 to i64, !dbg !26
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !26
  %34 = sext i32 %31 to i64, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !26
  %36 = and i1 %15, %22, !dbg !27
  %37 = and i1 %23, %15, !dbg !27
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %36) #4, !dbg !28
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %37) #4, !dbg !28
  %40 = sext i32 %.decomposed to i64, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !29
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %15) #4, !dbg !30
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !31
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %15) #4, !dbg !32
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !32
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !32
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !32
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !32
  %49 = bitcast i32 %45 to float, !dbg !32
  %50 = bitcast i32 %46 to float, !dbg !32
  %51 = bitcast i32 %47 to float, !dbg !32
  %52 = bitcast i32 %48 to float, !dbg !32
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !33
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %15) #4, !dbg !34
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !35
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %15) #4, !dbg !36
  %57 = fadd float %49, 0x3F50624DE0000000, !dbg !37
  %58 = fadd float %50, 0x3F50624DE0000000, !dbg !37
  %59 = fadd float %51, 0x3F50624DE0000000, !dbg !37
  %60 = fadd float %52, 0x3F50624DE0000000, !dbg !37
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %61, 0, !dbg !38
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %62, 0, !dbg !38
  br i1 %.not.i, label %68, label %63, !dbg !38

63:                                               ; preds = %8
  br i1 %.not1.i, label %66, label %64, !dbg !38

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

68:                                               ; preds = %8
  br i1 %.not1.i, label %71, label %69, !dbg !38

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %64, %66, %69, %71
  %.0.i = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !38
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i4 = icmp eq i32 %73, 0, !dbg !38
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i7 = icmp eq i32 %74, 0, !dbg !38
  br i1 %.not.i4, label %80, label %75, !dbg !38

75:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %78, label %76, !dbg !38

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !38
  br label %__nv_sqrtf.exit8, !dbg !38

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !38
  br label %__nv_sqrtf.exit8, !dbg !38

80:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %83, label %81, !dbg !38

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !38
  br label %__nv_sqrtf.exit8, !dbg !38

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !38
  br label %__nv_sqrtf.exit8, !dbg !38

__nv_sqrtf.exit8:                                 ; preds = %76, %78, %81, %83
  %.0.i6 = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !38
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i9 = icmp eq i32 %85, 0, !dbg !38
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i12 = icmp eq i32 %86, 0, !dbg !38
  br i1 %.not.i9, label %92, label %87, !dbg !38

87:                                               ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %90, label %88, !dbg !38

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #4, !dbg !38
  br label %__nv_sqrtf.exit13, !dbg !38

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #4, !dbg !38
  br label %__nv_sqrtf.exit13, !dbg !38

92:                                               ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %95, label %93, !dbg !38

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #4, !dbg !38
  br label %__nv_sqrtf.exit13, !dbg !38

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #4, !dbg !38
  br label %__nv_sqrtf.exit13, !dbg !38

__nv_sqrtf.exit13:                                ; preds = %88, %90, %93, %95
  %.0.i11 = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !38
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i14 = icmp eq i32 %97, 0, !dbg !38
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i17 = icmp eq i32 %98, 0, !dbg !38
  br i1 %.not.i14, label %104, label %99, !dbg !38

99:                                               ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %102, label %100, !dbg !38

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #4, !dbg !38
  br label %__nv_sqrtf.exit18, !dbg !38

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #4, !dbg !38
  br label %__nv_sqrtf.exit18, !dbg !38

104:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %107, label %105, !dbg !38

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #4, !dbg !38
  br label %__nv_sqrtf.exit18, !dbg !38

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #4, !dbg !38
  br label %__nv_sqrtf.exit18, !dbg !38

__nv_sqrtf.exit18:                                ; preds = %100, %102, %105, %107
  %.0.i16 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !38
  %109 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !28
  %110 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !30
  %111 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !28
  %112 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !30
  %113 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !28
  %114 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !30
  %115 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !28
  %116 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !30
  %117 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !28
  %118 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !28
  %119 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !28
  %120 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !28
  %121 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !36
  %122 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !36
  %123 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !36
  %124 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !36
  %125 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !34
  %126 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !34
  %127 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !34
  %128 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !34
  %129 = and i32 %11, 31, !dbg !17
  %130 = or disjoint i32 %17, %129, !dbg !18
  %131 = icmp slt i32 %130, 961, !dbg !19
  %.lobit1 = lshr i32 %11, 5, !dbg !12
  %132 = and i32 %.lobit1, 3, !dbg !12
  %133 = or disjoint i32 %132, %10, !dbg !13
  %134 = or disjoint i32 %133, 28, !dbg !13
  %135 = icmp slt i32 %134, 1280, !dbg !14
  %136 = and i1 %135, %131, !dbg !27
  %137 = or disjoint i32 %133, 24, !dbg !13
  %138 = icmp slt i32 %137, 1280, !dbg !14
  %139 = and i1 %138, %131, !dbg !27
  %140 = or disjoint i32 %133, 20, !dbg !13
  %141 = icmp slt i32 %140, 1280, !dbg !14
  %142 = and i1 %141, %131, !dbg !27
  %143 = or disjoint i32 %133, 16, !dbg !13
  %144 = icmp slt i32 %143, 1280, !dbg !14
  %145 = and i1 %144, %131, !dbg !27
  %146 = or disjoint i32 %133, 12, !dbg !13
  %147 = icmp slt i32 %146, 1280, !dbg !14
  %148 = and i1 %147, %131, !dbg !27
  %149 = or disjoint i32 %133, 8, !dbg !13
  %150 = icmp slt i32 %149, 1280, !dbg !14
  %151 = and i1 %150, %131, !dbg !27
  %152 = or disjoint i32 %133, 4, !dbg !13
  %153 = icmp slt i32 %152, 1280, !dbg !14
  %154 = and i1 %153, %131, !dbg !27
  %155 = icmp slt i32 %133, 1280, !dbg !14
  %156 = and i1 %155, %131, !dbg !27
  %.frozen19 = freeze i32 %134, !dbg !20
  %157 = sdiv i32 %.frozen19, 320, !dbg !20
  %.frozen21 = freeze i32 %137, !dbg !20
  %158 = sdiv i32 %.frozen21, 320, !dbg !20
  %.frozen23 = freeze i32 %140, !dbg !20
  %159 = sdiv i32 %.frozen23, 320, !dbg !20
  %.frozen25 = freeze i32 %143, !dbg !20
  %160 = sdiv i32 %.frozen25, 320, !dbg !20
  %.frozen27 = freeze i32 %146, !dbg !20
  %161 = sdiv i32 %.frozen27, 320, !dbg !20
  %.frozen29 = freeze i32 %149, !dbg !20
  %162 = sdiv i32 %.frozen29, 320, !dbg !20
  %.frozen31 = freeze i32 %152, !dbg !20
  %163 = sdiv i32 %.frozen31, 320, !dbg !20
  %.frozen33 = freeze i32 %133, !dbg !20
  %164 = sdiv i32 %.frozen33, 320, !dbg !20
  %165 = mul i32 %157, 320, !dbg !21
  %.decomposed20 = sub i32 %.frozen19, %165, !dbg !21
  %166 = mul i32 %158, 320, !dbg !21
  %.decomposed22 = sub i32 %.frozen21, %166, !dbg !21
  %167 = mul i32 %159, 320, !dbg !21
  %.decomposed24 = sub i32 %.frozen23, %167, !dbg !21
  %168 = mul i32 %160, 320, !dbg !21
  %.decomposed26 = sub i32 %.frozen25, %168, !dbg !21
  %169 = mul i32 %161, 320, !dbg !21
  %.decomposed28 = sub i32 %.frozen27, %169, !dbg !21
  %170 = mul i32 %162, 320, !dbg !21
  %.decomposed30 = sub i32 %.frozen29, %170, !dbg !21
  %171 = mul i32 %163, 320, !dbg !21
  %.decomposed32 = sub i32 %.frozen31, %171, !dbg !21
  %172 = mul i32 %164, 320, !dbg !21
  %.decomposed34 = sub i32 %.frozen33, %172, !dbg !21
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #4, !dbg !39
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #4, !dbg !39
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #4, !dbg !39
  %177 = insertelement <4 x i32> poison, i32 %110, i64 0, !dbg !30
  %178 = insertelement <4 x i32> %177, i32 %112, i64 1, !dbg !30
  %179 = insertelement <4 x i32> %178, i32 %114, i64 2, !dbg !30
  %180 = insertelement <4 x i32> %179, i32 %116, i64 3, !dbg !30
  %181 = bitcast <4 x i32> %180 to <4 x float>, !dbg !30
  %182 = shufflevector <4 x float> %181, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !30
  %183 = insertelement <8 x i32> poison, i32 %109, i64 0, !dbg !28
  %184 = insertelement <8 x i32> %183, i32 %111, i64 1, !dbg !28
  %185 = insertelement <8 x i32> %184, i32 %113, i64 2, !dbg !28
  %186 = insertelement <8 x i32> %185, i32 %115, i64 3, !dbg !28
  %187 = insertelement <8 x i32> %186, i32 %117, i64 4, !dbg !28
  %188 = insertelement <8 x i32> %187, i32 %118, i64 5, !dbg !28
  %189 = insertelement <8 x i32> %188, i32 %119, i64 6, !dbg !28
  %190 = insertelement <8 x i32> %189, i32 %120, i64 7, !dbg !28
  %191 = bitcast <8 x i32> %190 to <8 x float>, !dbg !28
  %192 = fsub <8 x float> %191, %182, !dbg !40
  %193 = insertelement <4 x i32> poison, i32 %121, i64 0, !dbg !36
  %194 = insertelement <4 x i32> %193, i32 %122, i64 1, !dbg !36
  %195 = insertelement <4 x i32> %194, i32 %123, i64 2, !dbg !36
  %196 = insertelement <4 x i32> %195, i32 %124, i64 3, !dbg !36
  %197 = bitcast <4 x i32> %196 to <4 x float>, !dbg !36
  %198 = shufflevector <4 x float> %197, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !36
  %199 = insertelement <4 x i32> poison, i32 %125, i64 0, !dbg !34
  %200 = insertelement <4 x i32> %199, i32 %126, i64 1, !dbg !34
  %201 = insertelement <4 x i32> %200, i32 %127, i64 2, !dbg !34
  %202 = insertelement <4 x i32> %201, i32 %128, i64 3, !dbg !34
  %203 = bitcast <4 x i32> %202 to <4 x float>, !dbg !34
  %204 = shufflevector <4 x float> %203, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %205 = insertelement <8 x float> poison, float %176, i64 0, !dbg !41
  %206 = insertelement <8 x float> %205, float %175, i64 1, !dbg !41
  %207 = insertelement <8 x float> %206, float %174, i64 2, !dbg !41
  %208 = insertelement <8 x float> %207, float %173, i64 3, !dbg !41
  %209 = shufflevector <8 x float> %208, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !41
  %210 = fmul <8 x float> %192, %209, !dbg !41
  %211 = fmul <8 x float> %210, %204, !dbg !42
  %212 = fadd <8 x float> %211, %198, !dbg !43
  %213 = fcmp olt <8 x float> %212, zeroinitializer, !dbg !44
  %214 = extractelement <8 x i1> %213, i64 7, !dbg !48
  %215 = extractelement <8 x float> %212, i64 7, !dbg !48
  %216 = select i1 %214, float 0.000000e+00, float %215, !dbg !48
  %217 = extractelement <8 x i1> %213, i64 6, !dbg !48
  %218 = extractelement <8 x float> %212, i64 6, !dbg !48
  %219 = select i1 %217, float 0.000000e+00, float %218, !dbg !48
  %220 = extractelement <8 x i1> %213, i64 5, !dbg !48
  %221 = extractelement <8 x float> %212, i64 5, !dbg !48
  %222 = select i1 %220, float 0.000000e+00, float %221, !dbg !48
  %223 = extractelement <8 x i1> %213, i64 4, !dbg !48
  %224 = extractelement <8 x float> %212, i64 4, !dbg !48
  %225 = select i1 %223, float 0.000000e+00, float %224, !dbg !48
  %226 = extractelement <8 x i1> %213, i64 3, !dbg !48
  %227 = extractelement <8 x float> %212, i64 3, !dbg !48
  %228 = select i1 %226, float 0.000000e+00, float %227, !dbg !48
  %229 = extractelement <8 x i1> %213, i64 2, !dbg !48
  %230 = extractelement <8 x float> %212, i64 2, !dbg !48
  %231 = select i1 %229, float 0.000000e+00, float %230, !dbg !48
  %232 = extractelement <8 x i1> %213, i64 1, !dbg !48
  %233 = extractelement <8 x float> %212, i64 1, !dbg !48
  %234 = select i1 %232, float 0.000000e+00, float %233, !dbg !48
  %235 = extractelement <8 x i1> %213, i64 0, !dbg !48
  %236 = extractelement <8 x float> %212, i64 0, !dbg !48
  %237 = select i1 %235, float 0.000000e+00, float %236, !dbg !48
  %238 = mul nsw i32 %.decomposed34, 961, !dbg !49
  %239 = mul nsw i32 %.decomposed32, 961, !dbg !49
  %240 = mul nsw i32 %.decomposed30, 961, !dbg !49
  %241 = mul nsw i32 %.decomposed28, 961, !dbg !49
  %242 = mul nsw i32 %.decomposed26, 961, !dbg !49
  %243 = mul nsw i32 %.decomposed24, 961, !dbg !49
  %244 = mul nsw i32 %.decomposed22, 961, !dbg !49
  %245 = mul nsw i32 %.decomposed20, 961, !dbg !49
  %246 = add i32 %238, %130, !dbg !50
  %247 = add i32 %239, %130, !dbg !50
  %248 = add i32 %240, %130, !dbg !50
  %249 = add i32 %241, %130, !dbg !50
  %250 = add i32 %242, %130, !dbg !50
  %251 = add i32 %243, %130, !dbg !50
  %252 = add i32 %244, %130, !dbg !50
  %253 = add i32 %245, %130, !dbg !50
  %254 = mul i32 %164, 1998880, !dbg !51
  %255 = mul i32 %163, 1998880, !dbg !51
  %256 = mul i32 %162, 1998880, !dbg !51
  %257 = mul i32 %161, 1998880, !dbg !51
  %258 = mul i32 %160, 1998880, !dbg !51
  %259 = mul i32 %159, 1998880, !dbg !51
  %260 = mul i32 %158, 1998880, !dbg !51
  %261 = mul i32 %157, 1998880, !dbg !51
  %262 = add i32 %246, %254, !dbg !52
  %263 = add i32 %247, %255, !dbg !52
  %264 = add i32 %248, %256, !dbg !52
  %265 = add i32 %249, %257, !dbg !52
  %266 = add i32 %250, %258, !dbg !52
  %267 = add i32 %251, %259, !dbg !52
  %268 = add i32 %252, %260, !dbg !52
  %269 = add i32 %253, %261, !dbg !52
  %270 = sext i32 %262 to i64, !dbg !53
  %271 = getelementptr float, ptr addrspace(1) %5, i64 %270, !dbg !53
  %272 = sext i32 %263 to i64, !dbg !53
  %273 = getelementptr float, ptr addrspace(1) %5, i64 %272, !dbg !53
  %274 = sext i32 %264 to i64, !dbg !53
  %275 = getelementptr float, ptr addrspace(1) %5, i64 %274, !dbg !53
  %276 = sext i32 %265 to i64, !dbg !53
  %277 = getelementptr float, ptr addrspace(1) %5, i64 %276, !dbg !53
  %278 = sext i32 %266 to i64, !dbg !53
  %279 = getelementptr float, ptr addrspace(1) %5, i64 %278, !dbg !53
  %280 = sext i32 %267 to i64, !dbg !53
  %281 = getelementptr float, ptr addrspace(1) %5, i64 %280, !dbg !53
  %282 = sext i32 %268 to i64, !dbg !53
  %283 = getelementptr float, ptr addrspace(1) %5, i64 %282, !dbg !53
  %284 = sext i32 %269 to i64, !dbg !53
  %285 = getelementptr float, ptr addrspace(1) %5, i64 %284, !dbg !53
  %286 = shl i32 %11, 7, !dbg !54
  %287 = and i32 %286, 896, !dbg !54
  %288 = or disjoint i32 %287, %19, !dbg !54
  %289 = and i32 %11, 127, !dbg !54
  %290 = lshr exact i32 %287, 3, !dbg !54
  %291 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %290, !dbg !54
  %292 = getelementptr float, ptr addrspace(3) %291, i32 %288, !dbg !54
  %293 = bitcast float %216 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %293, i1 true) #4, !dbg !54
  %294 = or disjoint i32 %288, 32, !dbg !54
  %295 = lshr i32 %294, 5, !dbg !54
  %296 = getelementptr float, ptr addrspace(3) @global_smem, i32 %295, !dbg !54
  %297 = getelementptr float, ptr addrspace(3) %296, i32 %294, !dbg !54
  %298 = bitcast float %219 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %298, i1 true) #4, !dbg !54
  %299 = or disjoint i32 %288, 64, !dbg !54
  %300 = lshr i32 %299, 5, !dbg !54
  %301 = getelementptr float, ptr addrspace(3) @global_smem, i32 %300, !dbg !54
  %302 = getelementptr float, ptr addrspace(3) %301, i32 %299, !dbg !54
  %303 = bitcast float %222 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %302, <1 x i32> %303, i1 true) #4, !dbg !54
  %304 = or disjoint i32 %288, 96, !dbg !54
  %305 = lshr i32 %304, 5, !dbg !54
  %306 = getelementptr float, ptr addrspace(3) @global_smem, i32 %305, !dbg !54
  %307 = getelementptr float, ptr addrspace(3) %306, i32 %304, !dbg !54
  %308 = bitcast float %225 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %307, <1 x i32> %308, i1 true) #4, !dbg !54
  %309 = or disjoint i32 %288, 16, !dbg !54
  %310 = getelementptr float, ptr addrspace(3) %291, i32 %309, !dbg !54
  %311 = bitcast float %228 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %310, <1 x i32> %311, i1 true) #4, !dbg !54
  %312 = or disjoint i32 %288, 48, !dbg !54
  %313 = lshr i32 %312, 5, !dbg !54
  %314 = getelementptr float, ptr addrspace(3) @global_smem, i32 %313, !dbg !54
  %315 = getelementptr float, ptr addrspace(3) %314, i32 %312, !dbg !54
  %316 = bitcast float %231 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %315, <1 x i32> %316, i1 true) #4, !dbg !54
  %317 = or disjoint i32 %288, 80, !dbg !54
  %318 = lshr i32 %317, 5, !dbg !54
  %319 = getelementptr float, ptr addrspace(3) @global_smem, i32 %318, !dbg !54
  %320 = getelementptr float, ptr addrspace(3) %319, i32 %317, !dbg !54
  %321 = bitcast float %234 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %320, <1 x i32> %321, i1 true) #4, !dbg !54
  %322 = or disjoint i32 %288, 112, !dbg !54
  %323 = lshr i32 %322, 5, !dbg !54
  %324 = getelementptr float, ptr addrspace(3) @global_smem, i32 %323, !dbg !54
  %325 = getelementptr float, ptr addrspace(3) %324, i32 %322, !dbg !54
  %326 = bitcast float %237 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %325, <1 x i32> %326, i1 true) #4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %327 = lshr i32 %289, 5, !dbg !54
  %328 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %327, !dbg !54
  %329 = getelementptr inbounds float, ptr addrspace(3) %328, i32 %289, !dbg !54
  %330 = load i32, ptr addrspace(3) %329, align 4, !dbg !54
  %331 = or disjoint i32 %289, 128, !dbg !54
  %332 = lshr i32 %331, 5, !dbg !54
  %333 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %332, !dbg !54
  %334 = getelementptr inbounds float, ptr addrspace(3) %333, i32 %331, !dbg !54
  %335 = load i32, ptr addrspace(3) %334, align 4, !dbg !54
  %336 = or disjoint i32 %289, 256, !dbg !54
  %337 = lshr i32 %336, 5, !dbg !54
  %338 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %337, !dbg !54
  %339 = getelementptr inbounds float, ptr addrspace(3) %338, i32 %336, !dbg !54
  %340 = load i32, ptr addrspace(3) %339, align 4, !dbg !54
  %341 = or disjoint i32 %289, 384, !dbg !54
  %342 = lshr i32 %341, 5, !dbg !54
  %343 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %342, !dbg !54
  %344 = getelementptr inbounds float, ptr addrspace(3) %343, i32 %341, !dbg !54
  %345 = load i32, ptr addrspace(3) %344, align 4, !dbg !54
  %346 = or disjoint i32 %289, 512, !dbg !54
  %347 = lshr i32 %346, 5, !dbg !54
  %348 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %347, !dbg !54
  %349 = getelementptr inbounds float, ptr addrspace(3) %348, i32 %346, !dbg !54
  %350 = load i32, ptr addrspace(3) %349, align 4, !dbg !54
  %351 = or disjoint i32 %289, 640, !dbg !54
  %352 = lshr i32 %351, 5, !dbg !54
  %353 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %352, !dbg !54
  %354 = getelementptr inbounds float, ptr addrspace(3) %353, i32 %351, !dbg !54
  %355 = load i32, ptr addrspace(3) %354, align 4, !dbg !54
  %356 = or disjoint i32 %289, 768, !dbg !54
  %357 = lshr i32 %356, 5, !dbg !54
  %358 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %357, !dbg !54
  %359 = getelementptr inbounds float, ptr addrspace(3) %358, i32 %356, !dbg !54
  %360 = load i32, ptr addrspace(3) %359, align 4, !dbg !54
  %361 = or disjoint i32 %289, 896, !dbg !54
  %362 = lshr i32 %361, 5, !dbg !54
  %363 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %362, !dbg !54
  %364 = getelementptr inbounds float, ptr addrspace(3) %363, i32 %361, !dbg !54
  %365 = load i32, ptr addrspace(3) %364, align 4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %330, ptr addrspace(1) %271, i1 %156) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %335, ptr addrspace(1) %273, i1 %154) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %340, ptr addrspace(1) %275, i1 %151) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %345, ptr addrspace(1) %277, i1 %148) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %350, ptr addrspace(1) %279, i1 %145) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %355, ptr addrspace(1) %281, i1 %142) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %360, ptr addrspace(1) %283, i1 %139) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %365, ptr addrspace(1) %285, i1 %136) #4, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfk473ktptjvloyj665x5dm5yjdf72mpssd2ub27s5ywednrfqbs.py", directory: "inductor_cache/fk")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_9", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 39, scope: !7)
!23 = !DILocation(line: 31, column: 51, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 44, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 64, scope: !7)
!28 = !DILocation(line: 31, column: 56, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 35, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 18, scope: !7)
!38 = !DILocation(line: 39, column: 26, scope: !7)
!39 = !DILocation(line: 41, column: 18, scope: !7)
!40 = !DILocation(line: 36, column: 18, scope: !7)
!41 = !DILocation(line: 44, column: 19, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 46, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 48, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 49, column: 34, scope: !7)
!50 = !DILocation(line: 49, column: 30, scope: !7)
!51 = !DILocation(line: 49, column: 47, scope: !7)
!52 = !DILocation(line: 49, column: 39, scope: !7)
!53 = !DILocation(line: 49, column: 25, scope: !7)
!54 = !DILocation(line: 49, column: 59, scope: !7)
!55 = !DILocation(line: 49, column: 4, scope: !7)
