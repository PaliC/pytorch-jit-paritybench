; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_sqrt_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %11 = lshr i32 %8, 4, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = or disjoint i32 %14, 8, !dbg !13
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %17 = shl i32 %16, 6, !dbg !15
  %18 = lshr i32 %8, 2, !dbg !16
  %19 = and i32 %18, 31, !dbg !16
  %20 = and i32 %9, 60, !dbg !16
  %21 = or disjoint i32 %17, %19, !dbg !17
  %22 = or disjoint i32 %21, 32, !dbg !17
  %23 = or disjoint i32 %17, %20, !dbg !17
  %24 = icmp slt i32 %21, 64, !dbg !18
  %25 = icmp slt i32 %22, 64, !dbg !18
  %26 = icmp slt i32 %23, 64, !dbg !18
  %.frozen = freeze i32 %13, !dbg !19
  %27 = sdiv i32 %.frozen, 512, !dbg !19
  %28 = mul i32 %27, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %28, !dbg !20
  %29 = sdiv i32 %14, 512, !dbg !19
  %30 = sdiv i32 %15, 512, !dbg !19
  %31 = shl i32 %21, 9, !dbg !21
  %32 = shl i32 %22, 9, !dbg !21
  %33 = shl i32 %27, 15, !dbg !22
  %34 = add i32 %33, %.decomposed, !dbg !23
  %35 = add i32 %34, %31, !dbg !24
  %36 = add i32 %34, %32, !dbg !24
  %37 = sext i32 %35 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = sext i32 %36 to i64, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !25
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %24) #4, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !26
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %25) #4, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !26
  %51 = shl i32 %8, 8, !dbg !26
  %52 = and i32 %51, 768, !dbg !26
  %53 = or disjoint i32 %52, %19, !dbg !26
  %54 = and i32 %9, 508, !dbg !26
  %55 = lshr exact i32 %52, 4, !dbg !26
  %56 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %55, !dbg !26
  %57 = getelementptr float, ptr addrspace(3) %56, i32 %53, !dbg !26
  %58 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %58, i1 true) #4, !dbg !26
  %59 = or disjoint i32 %53, 64, !dbg !26
  %60 = lshr i32 %59, 6, !dbg !26
  %61 = getelementptr float, ptr addrspace(3) @global_smem, i32 %60, !dbg !26
  %62 = getelementptr float, ptr addrspace(3) %61, i32 %59, !dbg !26
  %63 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %63, i1 true) #4, !dbg !26
  %64 = or disjoint i32 %53, 128, !dbg !26
  %65 = lshr i32 %64, 6, !dbg !26
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i32 %65, !dbg !26
  %67 = getelementptr float, ptr addrspace(3) %66, i32 %64, !dbg !26
  %68 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %68, i1 true) #4, !dbg !26
  %69 = or disjoint i32 %53, 192, !dbg !26
  %70 = lshr i32 %69, 6, !dbg !26
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i32 %70, !dbg !26
  %72 = getelementptr float, ptr addrspace(3) %71, i32 %69, !dbg !26
  %73 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %73, i1 true) #4, !dbg !26
  %74 = or disjoint i32 %53, 32, !dbg !26
  %75 = getelementptr float, ptr addrspace(3) %56, i32 %74, !dbg !26
  %76 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 true) #4, !dbg !26
  %77 = or disjoint i32 %53, 96, !dbg !26
  %78 = lshr i32 %77, 6, !dbg !26
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i32 %78, !dbg !26
  %80 = getelementptr float, ptr addrspace(3) %79, i32 %77, !dbg !26
  %81 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 true) #4, !dbg !26
  %82 = or disjoint i32 %53, 160, !dbg !26
  %83 = lshr i32 %82, 6, !dbg !26
  %84 = getelementptr float, ptr addrspace(3) @global_smem, i32 %83, !dbg !26
  %85 = getelementptr float, ptr addrspace(3) %84, i32 %82, !dbg !26
  %86 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #4, !dbg !26
  %87 = or disjoint i32 %53, 224, !dbg !26
  %88 = lshr i32 %87, 6, !dbg !26
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i32 %88, !dbg !26
  %90 = getelementptr float, ptr addrspace(3) %89, i32 %87, !dbg !26
  %91 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %92 = lshr i32 %54, 6, !dbg !26
  %93 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %92, !dbg !26
  %94 = getelementptr inbounds float, ptr addrspace(3) %93, i32 %54, !dbg !26
  %95 = load float, ptr addrspace(3) %94, align 4, !dbg !26
  %96 = or disjoint i32 %54, 1, !dbg !26
  %97 = getelementptr inbounds float, ptr addrspace(3) %93, i32 %96, !dbg !26
  %98 = load float, ptr addrspace(3) %97, align 4, !dbg !26
  %99 = or disjoint i32 %54, 2, !dbg !26
  %100 = getelementptr inbounds float, ptr addrspace(3) %93, i32 %99, !dbg !26
  %101 = load float, ptr addrspace(3) %100, align 4, !dbg !26
  %102 = or disjoint i32 %54, 3, !dbg !26
  %103 = getelementptr inbounds float, ptr addrspace(3) %93, i32 %102, !dbg !26
  %104 = load float, ptr addrspace(3) %103, align 4, !dbg !26
  %105 = or disjoint i32 %54, 512, !dbg !26
  %106 = lshr i32 %105, 6, !dbg !26
  %107 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %106, !dbg !26
  %108 = getelementptr inbounds float, ptr addrspace(3) %107, i32 %105, !dbg !26
  %109 = load float, ptr addrspace(3) %108, align 4, !dbg !26
  %110 = or disjoint i32 %54, 513, !dbg !26
  %111 = lshr i32 %110, 6, !dbg !26
  %112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %111, !dbg !26
  %113 = getelementptr inbounds float, ptr addrspace(3) %112, i32 %110, !dbg !26
  %114 = load float, ptr addrspace(3) %113, align 4, !dbg !26
  %115 = or disjoint i32 %54, 514, !dbg !26
  %116 = lshr i32 %115, 6, !dbg !26
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %116, !dbg !26
  %118 = getelementptr inbounds float, ptr addrspace(3) %117, i32 %115, !dbg !26
  %119 = load float, ptr addrspace(3) %118, align 4, !dbg !26
  %120 = or disjoint i32 %54, 515, !dbg !26
  %121 = lshr i32 %120, 6, !dbg !26
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %121, !dbg !26
  %123 = getelementptr inbounds float, ptr addrspace(3) %122, i32 %120, !dbg !26
  %124 = load float, ptr addrspace(3) %123, align 4, !dbg !26
  %125 = shl nsw i32 %29, 6, !dbg !27
  %126 = shl nsw i32 %30, 6, !dbg !27
  %127 = add i32 %125, %23, !dbg !28
  %128 = add i32 %23, %126, !dbg !28
  %129 = sext i32 %127 to i64, !dbg !29
  %130 = getelementptr float, ptr addrspace(1) %1, i64 %129, !dbg !29
  %131 = sext i32 %128 to i64, !dbg !29
  %132 = getelementptr float, ptr addrspace(1) %1, i64 %131, !dbg !29
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %130, i1 %26) #4, !dbg !30
  %134 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !30
  %135 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !30
  %136 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !30
  %137 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !30
  %138 = bitcast i32 %134 to float, !dbg !30
  %139 = bitcast i32 %135 to float, !dbg !30
  %140 = bitcast i32 %136 to float, !dbg !30
  %141 = bitcast i32 %137 to float, !dbg !30
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %132, i1 %26) #4, !dbg !30
  %143 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !30
  %144 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !30
  %145 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !30
  %146 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !30
  %147 = bitcast i32 %143 to float, !dbg !30
  %148 = bitcast i32 %144 to float, !dbg !30
  %149 = bitcast i32 %145 to float, !dbg !30
  %150 = bitcast i32 %146 to float, !dbg !30
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i = icmp eq i32 %151, 0, !dbg !31
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i = icmp eq i32 %152, 0, !dbg !31
  br i1 %.not.i, label %158, label %153, !dbg !31

153:                                              ; preds = %5
  br i1 %.not1.i, label %156, label %154, !dbg !31

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %138) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %138) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

158:                                              ; preds = %5
  br i1 %.not1.i, label %161, label %159, !dbg !31

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.f(float %138) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.f(float %138) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %154, %156, %159, %161
  %.0.i = phi float [ %155, %154 ], [ %157, %156 ], [ %160, %159 ], [ %162, %161 ], !dbg !31
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i3 = icmp eq i32 %163, 0, !dbg !31
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i6 = icmp eq i32 %164, 0, !dbg !31
  br i1 %.not.i3, label %170, label %165, !dbg !31

165:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %168, label %166, !dbg !31

166:                                              ; preds = %165
  %167 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %139) #4, !dbg !31
  br label %__nv_sqrtf.exit7, !dbg !31

168:                                              ; preds = %165
  %169 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %139) #4, !dbg !31
  br label %__nv_sqrtf.exit7, !dbg !31

170:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %173, label %171, !dbg !31

171:                                              ; preds = %170
  %172 = tail call float @llvm.nvvm.sqrt.rn.f(float %139) #4, !dbg !31
  br label %__nv_sqrtf.exit7, !dbg !31

173:                                              ; preds = %170
  %174 = tail call float @llvm.nvvm.sqrt.approx.f(float %139) #4, !dbg !31
  br label %__nv_sqrtf.exit7, !dbg !31

__nv_sqrtf.exit7:                                 ; preds = %166, %168, %171, %173
  %.0.i5 = phi float [ %167, %166 ], [ %169, %168 ], [ %172, %171 ], [ %174, %173 ], !dbg !31
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i8 = icmp eq i32 %175, 0, !dbg !31
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i11 = icmp eq i32 %176, 0, !dbg !31
  br i1 %.not.i8, label %182, label %177, !dbg !31

177:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %180, label %178, !dbg !31

178:                                              ; preds = %177
  %179 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %140) #4, !dbg !31
  br label %__nv_sqrtf.exit12, !dbg !31

180:                                              ; preds = %177
  %181 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %140) #4, !dbg !31
  br label %__nv_sqrtf.exit12, !dbg !31

182:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %185, label %183, !dbg !31

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.f(float %140) #4, !dbg !31
  br label %__nv_sqrtf.exit12, !dbg !31

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.f(float %140) #4, !dbg !31
  br label %__nv_sqrtf.exit12, !dbg !31

__nv_sqrtf.exit12:                                ; preds = %178, %180, %183, %185
  %.0.i10 = phi float [ %179, %178 ], [ %181, %180 ], [ %184, %183 ], [ %186, %185 ], !dbg !31
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i13 = icmp eq i32 %187, 0, !dbg !31
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i16 = icmp eq i32 %188, 0, !dbg !31
  br i1 %.not.i13, label %194, label %189, !dbg !31

189:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %192, label %190, !dbg !31

190:                                              ; preds = %189
  %191 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %141) #4, !dbg !31
  br label %__nv_sqrtf.exit17, !dbg !31

192:                                              ; preds = %189
  %193 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %141) #4, !dbg !31
  br label %__nv_sqrtf.exit17, !dbg !31

194:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %197, label %195, !dbg !31

195:                                              ; preds = %194
  %196 = tail call float @llvm.nvvm.sqrt.rn.f(float %141) #4, !dbg !31
  br label %__nv_sqrtf.exit17, !dbg !31

197:                                              ; preds = %194
  %198 = tail call float @llvm.nvvm.sqrt.approx.f(float %141) #4, !dbg !31
  br label %__nv_sqrtf.exit17, !dbg !31

__nv_sqrtf.exit17:                                ; preds = %190, %192, %195, %197
  %.0.i15 = phi float [ %191, %190 ], [ %193, %192 ], [ %196, %195 ], [ %198, %197 ], !dbg !31
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i18 = icmp eq i32 %199, 0, !dbg !31
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i21 = icmp eq i32 %200, 0, !dbg !31
  br i1 %.not.i18, label %206, label %201, !dbg !31

201:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %204, label %202, !dbg !31

202:                                              ; preds = %201
  %203 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %147) #4, !dbg !31
  br label %__nv_sqrtf.exit22, !dbg !31

204:                                              ; preds = %201
  %205 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %147) #4, !dbg !31
  br label %__nv_sqrtf.exit22, !dbg !31

206:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %209, label %207, !dbg !31

207:                                              ; preds = %206
  %208 = tail call float @llvm.nvvm.sqrt.rn.f(float %147) #4, !dbg !31
  br label %__nv_sqrtf.exit22, !dbg !31

209:                                              ; preds = %206
  %210 = tail call float @llvm.nvvm.sqrt.approx.f(float %147) #4, !dbg !31
  br label %__nv_sqrtf.exit22, !dbg !31

__nv_sqrtf.exit22:                                ; preds = %202, %204, %207, %209
  %.0.i20 = phi float [ %203, %202 ], [ %205, %204 ], [ %208, %207 ], [ %210, %209 ], !dbg !31
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i23 = icmp eq i32 %211, 0, !dbg !31
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i26 = icmp eq i32 %212, 0, !dbg !31
  br i1 %.not.i23, label %218, label %213, !dbg !31

213:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %216, label %214, !dbg !31

214:                                              ; preds = %213
  %215 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %148) #4, !dbg !31
  br label %__nv_sqrtf.exit27, !dbg !31

216:                                              ; preds = %213
  %217 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %148) #4, !dbg !31
  br label %__nv_sqrtf.exit27, !dbg !31

218:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %221, label %219, !dbg !31

219:                                              ; preds = %218
  %220 = tail call float @llvm.nvvm.sqrt.rn.f(float %148) #4, !dbg !31
  br label %__nv_sqrtf.exit27, !dbg !31

221:                                              ; preds = %218
  %222 = tail call float @llvm.nvvm.sqrt.approx.f(float %148) #4, !dbg !31
  br label %__nv_sqrtf.exit27, !dbg !31

__nv_sqrtf.exit27:                                ; preds = %214, %216, %219, %221
  %.0.i25 = phi float [ %215, %214 ], [ %217, %216 ], [ %220, %219 ], [ %222, %221 ], !dbg !31
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i28 = icmp eq i32 %223, 0, !dbg !31
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i31 = icmp eq i32 %224, 0, !dbg !31
  br i1 %.not.i28, label %230, label %225, !dbg !31

225:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %228, label %226, !dbg !31

226:                                              ; preds = %225
  %227 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %149) #4, !dbg !31
  br label %__nv_sqrtf.exit32, !dbg !31

228:                                              ; preds = %225
  %229 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %149) #4, !dbg !31
  br label %__nv_sqrtf.exit32, !dbg !31

230:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %233, label %231, !dbg !31

231:                                              ; preds = %230
  %232 = tail call float @llvm.nvvm.sqrt.rn.f(float %149) #4, !dbg !31
  br label %__nv_sqrtf.exit32, !dbg !31

233:                                              ; preds = %230
  %234 = tail call float @llvm.nvvm.sqrt.approx.f(float %149) #4, !dbg !31
  br label %__nv_sqrtf.exit32, !dbg !31

__nv_sqrtf.exit32:                                ; preds = %226, %228, %231, %233
  %.0.i30 = phi float [ %227, %226 ], [ %229, %228 ], [ %232, %231 ], [ %234, %233 ], !dbg !31
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i33 = icmp eq i32 %235, 0, !dbg !31
  %236 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i36 = icmp eq i32 %236, 0, !dbg !31
  br i1 %.not.i33, label %242, label %237, !dbg !31

237:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %240, label %238, !dbg !31

238:                                              ; preds = %237
  %239 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %150) #4, !dbg !31
  br label %__nv_sqrtf.exit37, !dbg !31

240:                                              ; preds = %237
  %241 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %150) #4, !dbg !31
  br label %__nv_sqrtf.exit37, !dbg !31

242:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %245, label %243, !dbg !31

243:                                              ; preds = %242
  %244 = tail call float @llvm.nvvm.sqrt.rn.f(float %150) #4, !dbg !31
  br label %__nv_sqrtf.exit37, !dbg !31

245:                                              ; preds = %242
  %246 = tail call float @llvm.nvvm.sqrt.approx.f(float %150) #4, !dbg !31
  br label %__nv_sqrtf.exit37, !dbg !31

__nv_sqrtf.exit37:                                ; preds = %238, %240, %243, %245
  %.0.i35 = phi float [ %239, %238 ], [ %241, %240 ], [ %244, %243 ], [ %246, %245 ], !dbg !31
  %247 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !32
  %248 = fadd float %.0.i5, 0x3DDB7CDFE0000000, !dbg !32
  %249 = fadd float %.0.i10, 0x3DDB7CDFE0000000, !dbg !32
  %250 = fadd float %.0.i15, 0x3DDB7CDFE0000000, !dbg !32
  %251 = fadd float %.0.i20, 0x3DDB7CDFE0000000, !dbg !32
  %252 = fadd float %.0.i25, 0x3DDB7CDFE0000000, !dbg !32
  %253 = fadd float %.0.i30, 0x3DDB7CDFE0000000, !dbg !32
  %254 = fadd float %.0.i35, 0x3DDB7CDFE0000000, !dbg !32
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float %247) #4, !dbg !33
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float %248) #4, !dbg !33
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float %249) #4, !dbg !33
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float %250) #4, !dbg !33
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float %251) #4, !dbg !33
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %114, float %252) #4, !dbg !33
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %253) #4, !dbg !33
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %124, float %254) #4, !dbg !33
  %263 = shl i32 %14, 6, !dbg !34
  %264 = shl i32 %15, 6, !dbg !34
  %265 = add i32 %23, %263, !dbg !35
  %266 = add i32 %23, %264, !dbg !35
  %267 = sext i32 %265 to i64, !dbg !36
  %268 = getelementptr float, ptr addrspace(1) %2, i64 %267, !dbg !36
  %269 = sext i32 %266 to i64, !dbg !36
  %270 = getelementptr float, ptr addrspace(1) %2, i64 %269, !dbg !36
  %271 = bitcast float %255 to i32, !dbg !37
  %272 = bitcast float %256 to i32, !dbg !37
  %273 = bitcast float %257 to i32, !dbg !37
  %274 = bitcast float %258 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %271, i32 %272, i32 %273, i32 %274, ptr addrspace(1) %268, i1 %26) #4, !dbg !37
  %275 = bitcast float %259 to i32, !dbg !37
  %276 = bitcast float %260 to i32, !dbg !37
  %277 = bitcast float %261 to i32, !dbg !37
  %278 = bitcast float %262 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %275, i32 %276, i32 %277, i32 %278, ptr addrspace(1) %270, i1 %26) #4, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cn5pnvsgw2h6q6vxpg64tcrpoyf2wx75vyy4id5fhett7ruefsw7.py", directory: "inductor_cache/n5")
!4 = !{ptr @triton_poi_fused_add_div_sqrt_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_sqrt_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_sqrt_24", linkageName: "triton_poi_fused_add_div_sqrt_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 38, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 43, scope: !7)
!31 = !DILocation(line: 34, column: 26, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 18, scope: !7)
!34 = !DILocation(line: 38, column: 33, scope: !7)
!35 = !DILocation(line: 38, column: 30, scope: !7)
!36 = !DILocation(line: 38, column: 25, scope: !7)
!37 = !DILocation(line: 38, column: 44, scope: !7)
!38 = !DILocation(line: 38, column: 4, scope: !7)
