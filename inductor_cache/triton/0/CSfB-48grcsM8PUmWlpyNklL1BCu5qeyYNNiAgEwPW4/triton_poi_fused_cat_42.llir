; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_42(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 512, !dbg !13
  %18 = sdiv i32 %16, 256, !dbg !14
  %19 = sdiv i32 %17, 256, !dbg !14
  %20 = srem i32 %19, 512, !dbg !15
  %.frozen = freeze i32 %16, !dbg !16
  %21 = sdiv i32 %.frozen, 131072, !dbg !16
  %.frozen2 = freeze i32 %17, !dbg !16
  %22 = sdiv i32 %.frozen2, 131072, !dbg !16
  %23 = icmp slt i32 %20, 128, !dbg !17
  %24 = mul i32 %21, 131072, !dbg !18
  %srem.decomposed = sub i32 %.frozen, %24, !dbg !18
  %25 = mul i32 %22, 131072, !dbg !18
  %srem1.decomposed = sub i32 %.frozen2, %25, !dbg !18
  %26 = shl nsw i32 %21, 15, !dbg !19
  %27 = shl nsw i32 %22, 15, !dbg !19
  %28 = add nsw i32 %26, %srem.decomposed, !dbg !20
  %29 = add nsw i32 %27, %srem1.decomposed, !dbg !20
  %30 = sext i32 %28 to i64, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !21
  %32 = sext i32 %29 to i64, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !22
  %36 = and i32 %20, -128, !dbg !23
  %37 = icmp eq i32 %36, 128, !dbg !23
  %38 = shl nsw i32 %20, 8, !dbg !24
  %39 = icmp eq i32 %36, 256, !dbg !25
  %40 = icmp sgt i32 %20, 383, !dbg !26
  %41 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !27
  %42 = insertelement <2 x i32> %41, i32 %18, i64 1, !dbg !27
  %43 = srem <2 x i32> %42, <i32 256, i32 512>, !dbg !27
  %44 = extractelement <2 x i32> %43, i64 1, !dbg !26
  %45 = icmp slt i32 %44, 128, !dbg !17
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #1, !dbg !28
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !28
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !28
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !28
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !28
  %51 = bitcast i32 %47 to float, !dbg !28
  %52 = bitcast i32 %48 to float, !dbg !28
  %53 = bitcast i32 %49 to float, !dbg !28
  %54 = bitcast i32 %50 to float, !dbg !28
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #1, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !28
  %60 = bitcast i32 %56 to float, !dbg !28
  %61 = bitcast i32 %57 to float, !dbg !28
  %62 = bitcast i32 %58 to float, !dbg !28
  %63 = bitcast i32 %59 to float, !dbg !28
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #1, !dbg !29
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !29
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !29
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !29
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !29
  %69 = bitcast i32 %65 to float, !dbg !29
  %70 = bitcast i32 %66 to float, !dbg !29
  %71 = bitcast i32 %67 to float, !dbg !29
  %72 = bitcast i32 %68 to float, !dbg !29
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #1, !dbg !29
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !29
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !29
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !29
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !29
  %78 = bitcast i32 %74 to float, !dbg !29
  %79 = bitcast i32 %75 to float, !dbg !29
  %80 = bitcast i32 %76 to float, !dbg !29
  %81 = bitcast i32 %77 to float, !dbg !29
  %82 = fadd float %51, %69, !dbg !30
  %83 = fadd float %52, %70, !dbg !30
  %84 = fadd float %53, %71, !dbg !30
  %85 = fadd float %54, %72, !dbg !30
  %86 = fadd float %60, %78, !dbg !30
  %87 = fadd float %61, %79, !dbg !30
  %88 = fadd float %62, %80, !dbg !30
  %89 = fadd float %63, %81, !dbg !30
  %90 = and i32 %44, -128, !dbg !23
  %91 = icmp eq i32 %90, 128, !dbg !23
  %92 = shl nsw i32 %44, 8, !dbg !24
  %93 = insertelement <2 x i32> <i32 poison, i32 -384>, i32 %26, i64 0, !dbg !24
  %94 = add nsw <2 x i32> %93, %43, !dbg !24
  %95 = extractelement <2 x i32> %94, i64 0, !dbg !31
  %96 = add nsw i32 %95, -32768, !dbg !32
  %97 = add nsw i32 %96, %92, !dbg !33
  %98 = extractelement <2 x i32> %43, i64 0, !dbg !24
  %99 = add nsw i32 %27, %98, !dbg !24
  %100 = add nsw i32 %99, -32768, !dbg !32
  %101 = add nsw i32 %100, %38, !dbg !33
  %102 = sext i32 %97 to i64, !dbg !34
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !34
  %104 = sext i32 %101 to i64, !dbg !34
  %105 = getelementptr float, ptr addrspace(1) %2, i64 %104, !dbg !34
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %103, i1 %91, i32 0, i1 %91, i32 0, i1 %91, i32 0, i1 %91, i32 0, i1 %91) #1, !dbg !35
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !35
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !35
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !35
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !35
  %111 = bitcast i32 %107 to float, !dbg !35
  %112 = bitcast i32 %108 to float, !dbg !35
  %113 = bitcast i32 %109 to float, !dbg !35
  %114 = bitcast i32 %110 to float, !dbg !35
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %105, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #1, !dbg !35
  %116 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !35
  %117 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !35
  %118 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !35
  %119 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !35
  %120 = bitcast i32 %116 to float, !dbg !35
  %121 = bitcast i32 %117 to float, !dbg !35
  %122 = bitcast i32 %118 to float, !dbg !35
  %123 = bitcast i32 %119 to float, !dbg !35
  %124 = getelementptr float, ptr addrspace(1) %3, i64 %102, !dbg !36
  %125 = getelementptr float, ptr addrspace(1) %3, i64 %104, !dbg !36
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %124, i1 %91, i32 0, i1 %91, i32 0, i1 %91, i32 0, i1 %91, i32 0, i1 %91) #1, !dbg !37
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !37
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !37
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !37
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !37
  %131 = bitcast i32 %127 to float, !dbg !37
  %132 = bitcast i32 %128 to float, !dbg !37
  %133 = bitcast i32 %129 to float, !dbg !37
  %134 = bitcast i32 %130 to float, !dbg !37
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %125, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #1, !dbg !37
  %136 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !37
  %137 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !37
  %138 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !37
  %139 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !37
  %140 = bitcast i32 %136 to float, !dbg !37
  %141 = bitcast i32 %137 to float, !dbg !37
  %142 = bitcast i32 %138 to float, !dbg !37
  %143 = bitcast i32 %139 to float, !dbg !37
  %144 = fadd float %111, %131, !dbg !38
  %145 = fadd float %112, %132, !dbg !38
  %146 = fadd float %113, %133, !dbg !38
  %147 = fadd float %114, %134, !dbg !38
  %148 = fadd float %120, %140, !dbg !38
  %149 = fadd float %121, %141, !dbg !38
  %150 = fadd float %122, %142, !dbg !38
  %151 = fadd float %123, %143, !dbg !38
  %152 = icmp eq i32 %90, 256, !dbg !25
  %153 = add nsw i32 %95, -65536, !dbg !39
  %154 = add nsw i32 %153, %92, !dbg !40
  %155 = add nsw i32 %99, -65536, !dbg !39
  %156 = add nsw i32 %155, %38, !dbg !40
  %157 = sext i32 %154 to i64, !dbg !41
  %158 = getelementptr float, ptr addrspace(1) %4, i64 %157, !dbg !41
  %159 = sext i32 %156 to i64, !dbg !41
  %160 = getelementptr float, ptr addrspace(1) %4, i64 %159, !dbg !41
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %158, i1 %152, i32 0, i1 %152, i32 0, i1 %152, i32 0, i1 %152, i32 0, i1 %152) #1, !dbg !42
  %162 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !42
  %163 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !42
  %164 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !42
  %165 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !42
  %166 = bitcast i32 %162 to float, !dbg !42
  %167 = bitcast i32 %163 to float, !dbg !42
  %168 = bitcast i32 %164 to float, !dbg !42
  %169 = bitcast i32 %165 to float, !dbg !42
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %160, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #1, !dbg !42
  %171 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !42
  %172 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !42
  %173 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !42
  %174 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !42
  %175 = bitcast i32 %171 to float, !dbg !42
  %176 = bitcast i32 %172 to float, !dbg !42
  %177 = bitcast i32 %173 to float, !dbg !42
  %178 = bitcast i32 %174 to float, !dbg !42
  %179 = getelementptr float, ptr addrspace(1) %5, i64 %157, !dbg !43
  %180 = getelementptr float, ptr addrspace(1) %5, i64 %159, !dbg !43
  %181 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %179, i1 %152, i32 0, i1 %152, i32 0, i1 %152, i32 0, i1 %152, i32 0, i1 %152) #1, !dbg !44
  %182 = extractvalue { i32, i32, i32, i32 } %181, 0, !dbg !44
  %183 = extractvalue { i32, i32, i32, i32 } %181, 1, !dbg !44
  %184 = extractvalue { i32, i32, i32, i32 } %181, 2, !dbg !44
  %185 = extractvalue { i32, i32, i32, i32 } %181, 3, !dbg !44
  %186 = bitcast i32 %182 to float, !dbg !44
  %187 = bitcast i32 %183 to float, !dbg !44
  %188 = bitcast i32 %184 to float, !dbg !44
  %189 = bitcast i32 %185 to float, !dbg !44
  %190 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %180, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #1, !dbg !44
  %191 = extractvalue { i32, i32, i32, i32 } %190, 0, !dbg !44
  %192 = extractvalue { i32, i32, i32, i32 } %190, 1, !dbg !44
  %193 = extractvalue { i32, i32, i32, i32 } %190, 2, !dbg !44
  %194 = extractvalue { i32, i32, i32, i32 } %190, 3, !dbg !44
  %195 = bitcast i32 %191 to float, !dbg !44
  %196 = bitcast i32 %192 to float, !dbg !44
  %197 = bitcast i32 %193 to float, !dbg !44
  %198 = bitcast i32 %194 to float, !dbg !44
  %199 = fadd float %166, %186, !dbg !45
  %200 = fadd float %167, %187, !dbg !45
  %201 = fadd float %168, %188, !dbg !45
  %202 = fadd float %169, %189, !dbg !45
  %203 = fadd float %175, %195, !dbg !45
  %204 = fadd float %176, %196, !dbg !45
  %205 = fadd float %177, %197, !dbg !45
  %206 = fadd float %178, %198, !dbg !45
  %207 = icmp sgt i32 %44, 383, !dbg !26
  %208 = add nsw i32 %20, -384, !dbg !46
  %209 = extractelement <2 x i32> %94, i64 1, !dbg !47
  %210 = shl nsw i32 %209, 8, !dbg !47
  %211 = shl nsw i32 %208, 8, !dbg !47
  %212 = add nsw i32 %95, %210, !dbg !31
  %213 = add nsw i32 %99, %211, !dbg !31
  %214 = sext i32 %212 to i64, !dbg !48
  %215 = getelementptr float, ptr addrspace(1) %6, i64 %214, !dbg !48
  %216 = sext i32 %213 to i64, !dbg !48
  %217 = getelementptr float, ptr addrspace(1) %6, i64 %216, !dbg !48
  %218 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %215, i1 %207, i32 0, i1 %207, i32 0, i1 %207, i32 0, i1 %207, i32 0, i1 %207) #1, !dbg !49
  %219 = extractvalue { i32, i32, i32, i32 } %218, 0, !dbg !49
  %220 = extractvalue { i32, i32, i32, i32 } %218, 1, !dbg !49
  %221 = extractvalue { i32, i32, i32, i32 } %218, 2, !dbg !49
  %222 = extractvalue { i32, i32, i32, i32 } %218, 3, !dbg !49
  %223 = bitcast i32 %219 to float, !dbg !49
  %224 = bitcast i32 %220 to float, !dbg !49
  %225 = bitcast i32 %221 to float, !dbg !49
  %226 = bitcast i32 %222 to float, !dbg !49
  %227 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %217, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #1, !dbg !49
  %228 = extractvalue { i32, i32, i32, i32 } %227, 0, !dbg !49
  %229 = extractvalue { i32, i32, i32, i32 } %227, 1, !dbg !49
  %230 = extractvalue { i32, i32, i32, i32 } %227, 2, !dbg !49
  %231 = extractvalue { i32, i32, i32, i32 } %227, 3, !dbg !49
  %232 = bitcast i32 %228 to float, !dbg !49
  %233 = bitcast i32 %229 to float, !dbg !49
  %234 = bitcast i32 %230 to float, !dbg !49
  %235 = bitcast i32 %231 to float, !dbg !49
  %236 = sext i32 %209 to i64, !dbg !50
  %237 = getelementptr float, ptr addrspace(1) %7, i64 %236, !dbg !50
  %238 = sext i32 %208 to i64, !dbg !50
  %239 = getelementptr float, ptr addrspace(1) %7, i64 %238, !dbg !50
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %237, i1 %207, i32 0, i1 %207) #1, !dbg !51
  %241 = bitcast i32 %240 to float, !dbg !51
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %237, i1 %207, i32 0, i1 %207) #1, !dbg !51
  %243 = bitcast i32 %242 to float, !dbg !51
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %237, i1 %207, i32 0, i1 %207) #1, !dbg !51
  %245 = bitcast i32 %244 to float, !dbg !51
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %237, i1 %207, i32 0, i1 %207) #1, !dbg !51
  %247 = bitcast i32 %246 to float, !dbg !51
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %239, i1 %40, i32 0, i1 %40) #1, !dbg !51
  %249 = bitcast i32 %248 to float, !dbg !51
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %239, i1 %40, i32 0, i1 %40) #1, !dbg !51
  %251 = bitcast i32 %250 to float, !dbg !51
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %239, i1 %40, i32 0, i1 %40) #1, !dbg !51
  %253 = bitcast i32 %252 to float, !dbg !51
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %239, i1 %40, i32 0, i1 %40) #1, !dbg !51
  %255 = bitcast i32 %254 to float, !dbg !51
  %256 = fadd float %223, %241, !dbg !52
  %257 = fadd float %224, %243, !dbg !52
  %258 = fadd float %225, %245, !dbg !52
  %259 = fadd float %226, %247, !dbg !52
  %260 = fadd float %232, %249, !dbg !52
  %261 = fadd float %233, %251, !dbg !52
  %262 = fadd float %234, %253, !dbg !52
  %263 = fadd float %235, %255, !dbg !52
  %264 = select i1 %207, float %256, float 0.000000e+00, !dbg !53
  %265 = select i1 %207, float %257, float 0.000000e+00, !dbg !53
  %266 = select i1 %207, float %258, float 0.000000e+00, !dbg !53
  %267 = select i1 %207, float %259, float 0.000000e+00, !dbg !53
  %268 = select i1 %40, float %260, float 0.000000e+00, !dbg !53
  %269 = select i1 %40, float %261, float 0.000000e+00, !dbg !53
  %270 = select i1 %40, float %262, float 0.000000e+00, !dbg !53
  %271 = select i1 %40, float %263, float 0.000000e+00, !dbg !53
  %272 = select i1 %152, float %199, float %264, !dbg !54
  %273 = select i1 %152, float %200, float %265, !dbg !54
  %274 = select i1 %152, float %201, float %266, !dbg !54
  %275 = select i1 %152, float %202, float %267, !dbg !54
  %276 = select i1 %39, float %203, float %268, !dbg !54
  %277 = select i1 %39, float %204, float %269, !dbg !54
  %278 = select i1 %39, float %205, float %270, !dbg !54
  %279 = select i1 %39, float %206, float %271, !dbg !54
  %280 = select i1 %91, float %144, float %272, !dbg !54
  %281 = select i1 %91, float %145, float %273, !dbg !54
  %282 = select i1 %91, float %146, float %274, !dbg !54
  %283 = select i1 %91, float %147, float %275, !dbg !54
  %284 = select i1 %37, float %148, float %276, !dbg !54
  %285 = select i1 %37, float %149, float %277, !dbg !54
  %286 = select i1 %37, float %150, float %278, !dbg !54
  %287 = select i1 %37, float %151, float %279, !dbg !54
  %288 = select i1 %45, float %82, float %280, !dbg !54
  %289 = select i1 %45, float %83, float %281, !dbg !54
  %290 = select i1 %45, float %84, float %282, !dbg !54
  %291 = select i1 %45, float %85, float %283, !dbg !54
  %292 = select i1 %23, float %86, float %284, !dbg !54
  %293 = select i1 %23, float %87, float %285, !dbg !54
  %294 = select i1 %23, float %88, float %286, !dbg !54
  %295 = select i1 %23, float %89, float %287, !dbg !54
  %296 = sext i32 %16 to i64, !dbg !55
  %297 = getelementptr float, ptr addrspace(1) %8, i64 %296, !dbg !55
  %298 = sext i32 %17 to i64, !dbg !55
  %299 = getelementptr float, ptr addrspace(1) %8, i64 %298, !dbg !55
  %300 = bitcast float %288 to i32, !dbg !56
  %301 = bitcast float %289 to i32, !dbg !56
  %302 = bitcast float %290 to i32, !dbg !56
  %303 = bitcast float %291 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %300, i32 %301, i32 %302, i32 %303, ptr addrspace(1) %297, i1 true) #1, !dbg !56
  %304 = bitcast float %292 to i32, !dbg !56
  %305 = bitcast float %293 to i32, !dbg !56
  %306 = bitcast float %294 to i32, !dbg !56
  %307 = bitcast float %295 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %304, i32 %305, i32 %306, i32 %307, ptr addrspace(1) %299, i1 true) #1, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5ajslzdddban342oxngfhfn45v5yl3k4shgabylzte4rys7pkxj.py", directory: "inductor_cache/5a")
!4 = !{ptr @triton_poi_fused_cat_42, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_42, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_42", linkageName: "triton_poi_fused_cat_42", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 18, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 52, scope: !7)
!20 = !DILocation(line: 33, column: 46, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 41, column: 20, scope: !7)
!24 = !DILocation(line: 42, column: 41, scope: !7)
!25 = !DILocation(line: 50, column: 20, scope: !7)
!26 = !DILocation(line: 56, column: 20, scope: !7)
!27 = !DILocation(line: 25, column: 19, scope: !7)
!28 = !DILocation(line: 33, column: 57, scope: !7)
!29 = !DILocation(line: 34, column: 57, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 59, column: 56, scope: !7)
!32 = !DILocation(line: 42, column: 36, scope: !7)
!33 = !DILocation(line: 42, column: 56, scope: !7)
!34 = !DILocation(line: 42, column: 31, scope: !7)
!35 = !DILocation(line: 42, column: 67, scope: !7)
!36 = !DILocation(line: 43, column: 31, scope: !7)
!37 = !DILocation(line: 43, column: 67, scope: !7)
!38 = !DILocation(line: 44, column: 20, scope: !7)
!39 = !DILocation(line: 51, column: 36, scope: !7)
!40 = !DILocation(line: 51, column: 56, scope: !7)
!41 = !DILocation(line: 51, column: 31, scope: !7)
!42 = !DILocation(line: 51, column: 67, scope: !7)
!43 = !DILocation(line: 52, column: 31, scope: !7)
!44 = !DILocation(line: 52, column: 67, scope: !7)
!45 = !DILocation(line: 53, column: 20, scope: !7)
!46 = !DILocation(line: 59, column: 50, scope: !7)
!47 = !DILocation(line: 59, column: 41, scope: !7)
!48 = !DILocation(line: 59, column: 31, scope: !7)
!49 = !DILocation(line: 59, column: 67, scope: !7)
!50 = !DILocation(line: 60, column: 31, scope: !7)
!51 = !DILocation(line: 60, column: 45, scope: !7)
!52 = !DILocation(line: 61, column: 20, scope: !7)
!53 = !DILocation(line: 63, column: 35, scope: !7)
!54 = !DILocation(line: 0, scope: !7)
!55 = !DILocation(line: 67, column: 25, scope: !7)
!56 = !DILocation(line: 67, column: 37, scope: !7)
!57 = !DILocation(line: 67, column: 4, scope: !7)
