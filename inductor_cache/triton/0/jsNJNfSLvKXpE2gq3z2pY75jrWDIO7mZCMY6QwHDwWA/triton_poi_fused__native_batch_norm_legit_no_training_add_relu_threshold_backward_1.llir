; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 7, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = and i32 %16, 127, !dbg !12
  %18 = or disjoint i32 %15, %17, !dbg !13
  %19 = icmp slt i32 %18, 256, !dbg !14
  %20 = sdiv i32 %18, 16, !dbg !15
  %21 = srem i32 %20, 4, !dbg !16
  %22 = sext i32 %18 to i64, !dbg !17
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !17
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %19) #3, !dbg !18
  %25 = sext i32 %21 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %19) #3, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %19) #3, !dbg !22
  %30 = bitcast i32 %29 to float, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !23
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %19) #3, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !25
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %19) #3, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !27
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %19) #3, !dbg !28
  %37 = getelementptr float, ptr addrspace(1) %7, i64 %25, !dbg !29
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %19) #3, !dbg !30
  %39 = getelementptr float, ptr addrspace(1) %8, i64 %25, !dbg !31
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %19) #3, !dbg !32
  %41 = bitcast i32 %40 to float, !dbg !32
  %42 = getelementptr float, ptr addrspace(1) %9, i64 %25, !dbg !33
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %19) #3, !dbg !34
  %44 = getelementptr float, ptr addrspace(1) %10, i64 %25, !dbg !35
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %19) #3, !dbg !36
  %46 = fadd float %30, 0x3EE4F8B580000000, !dbg !37
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i = icmp eq i32 %47, 0, !dbg !38
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i = icmp eq i32 %48, 0, !dbg !38
  br i1 %.not.i, label %54, label %49, !dbg !38

49:                                               ; preds = %13
  br i1 %.not1.i, label %52, label %50, !dbg !38

50:                                               ; preds = %49
  %51 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

52:                                               ; preds = %49
  %53 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

54:                                               ; preds = %13
  br i1 %.not1.i, label %57, label %55, !dbg !38

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %50, %52, %55, %57
  %.0.i = phi float [ %51, %50 ], [ %53, %52 ], [ %56, %55 ], [ %58, %57 ], !dbg !38
  %59 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !39
  %60 = fadd float %41, 0x3EE4F8B580000000, !dbg !40
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i1 = icmp eq i32 %61, 0, !dbg !41
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i4 = icmp eq i32 %62, 0, !dbg !41
  br i1 %.not.i1, label %68, label %63, !dbg !41

63:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %66, label %64, !dbg !41

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

68:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %71, label %69, !dbg !41

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

__nv_sqrtf.exit5:                                 ; preds = %64, %66, %69, %71
  %.0.i3 = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !41
  %73 = bitcast i32 %36 to float, !dbg !28
  %74 = bitcast i32 %38 to float, !dbg !30
  %75 = fsub float %73, %74, !dbg !42
  %76 = bitcast i32 %24 to float, !dbg !18
  %77 = bitcast i32 %27 to float, !dbg !20
  %78 = fsub float %76, %77, !dbg !43
  %79 = fmul float %78, %59, !dbg !44
  %80 = bitcast i32 %32 to float, !dbg !24
  %81 = fmul float %79, %80, !dbg !45
  %82 = bitcast i32 %34 to float, !dbg !26
  %83 = fadd float %81, %82, !dbg !46
  %84 = bitcast i32 %45 to float, !dbg !36
  %85 = bitcast i32 %43 to float, !dbg !34
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !47
  %87 = fmul float %75, %86, !dbg !48
  %88 = fmul float %87, %85, !dbg !49
  %89 = fadd float %88, %84, !dbg !50
  %90 = fcmp olt float %89, 0.000000e+00, !dbg !51
  %91 = select i1 %90, float 0.000000e+00, float %89, !dbg !55
  %92 = fadd float %83, %91, !dbg !56
  %93 = fcmp olt float %92, 0.000000e+00, !dbg !57
  %94 = select i1 %93, float 0.000000e+00, float %92, !dbg !59
  %95 = fcmp ole float %94, 0.000000e+00, !dbg !60
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !61
  %97 = bitcast float %94 to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %97, ptr addrspace(1) %96, i1 %19) #3, !dbg !62
  %98 = getelementptr i1, ptr addrspace(1) %11, i64 %22, !dbg !63
  %99 = zext i1 %95 to i8, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %99, ptr addrspace(1) %98, i1 %19) #3, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxzymmxwjefqsknkw6j72kyks6tbztljpgq5gfeweheoapwwunq6.py", directory: "inductor_cache/xz")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_1", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 31, scope: !7)
!24 = !DILocation(line: 29, column: 36, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 33, column: 31, scope: !7)
!32 = !DILocation(line: 33, column: 36, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 18, scope: !7)
!38 = !DILocation(line: 39, column: 26, scope: !7)
!39 = !DILocation(line: 41, column: 18, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 49, column: 27, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 36, column: 18, scope: !7)
!44 = !DILocation(line: 44, column: 19, scope: !7)
!45 = !DILocation(line: 45, column: 20, scope: !7)
!46 = !DILocation(line: 46, column: 20, scope: !7)
!47 = !DILocation(line: 50, column: 19, scope: !7)
!48 = !DILocation(line: 52, column: 20, scope: !7)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 54, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 56, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 57, column: 20, scope: !7)
!57 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !58)
!58 = !DILocation(line: 58, column: 42, scope: !7)
!59 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !58)
!60 = !DILocation(line: 60, column: 21, scope: !7)
!61 = !DILocation(line: 61, column: 28, scope: !7)
!62 = !DILocation(line: 61, column: 40, scope: !7)
!63 = !DILocation(line: 62, column: 25, scope: !7)
!64 = !DILocation(line: 62, column: 37, scope: !7)
!65 = !DILocation(line: 62, column: 4, scope: !7)
