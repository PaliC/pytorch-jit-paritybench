; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 2, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 6, !dbg !12
  %.lobit = and i32 %10, 1, !dbg !12
  %11 = or disjoint i32 %8, %.lobit, !dbg !13
  %12 = or disjoint i32 %11, 2, !dbg !13
  %13 = icmp slt i32 %8, 512, !dbg !14
  %14 = icmp slt i32 %11, 512, !dbg !14
  %15 = icmp slt i32 %12, 512, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %17 = shl i32 %16, 8, !dbg !16
  %18 = and i32 %9, 127, !dbg !17
  %19 = or disjoint i32 %18, 128, !dbg !17
  %20 = shl i32 %9, 2, !dbg !17
  %21 = and i32 %20, 252, !dbg !17
  %22 = or disjoint i32 %17, %18, !dbg !18
  %23 = or disjoint i32 %17, %19, !dbg !18
  %24 = or disjoint i32 %17, %21, !dbg !18
  %25 = icmp slt i32 %22, 144, !dbg !19
  %26 = icmp slt i32 %23, 144, !dbg !19
  %27 = icmp slt i32 %24, 144, !dbg !19
  %.frozen = freeze i32 %8, !dbg !20
  %28 = sdiv i32 %.frozen, 128, !dbg !20
  %29 = mul i32 %28, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %29, !dbg !21
  %30 = shl i32 %22, 7, !dbg !22
  %31 = shl i32 %23, 7, !dbg !22
  %32 = mul i32 %28, 18432, !dbg !23
  %33 = add i32 %32, %.decomposed, !dbg !24
  %34 = add i32 %33, %30, !dbg !25
  %35 = add i32 %33, %31, !dbg !25
  %36 = sext i32 %34 to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !26
  %38 = sext i32 %35 to i64, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !26
  %40 = and i1 %13, %25, !dbg !27
  %41 = and i1 %13, %26, !dbg !27
  %42 = and i1 %14, %27, !dbg !27
  %43 = and i1 %15, %27, !dbg !27
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %40) #2, !dbg !28
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !28
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !28
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !28
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !28
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %41) #2, !dbg !28
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !28
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !28
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !28
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !28
  %54 = sext i32 %.decomposed to i64, !dbg !29
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !29
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %13) #2, !dbg !30
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !30
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !30
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !30
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !30
  %61 = insertelement <8 x i32> poison, i32 %53, i64 0, !dbg !28
  %62 = insertelement <8 x i32> %61, i32 %52, i64 1, !dbg !28
  %63 = insertelement <8 x i32> %62, i32 %51, i64 2, !dbg !28
  %64 = insertelement <8 x i32> %63, i32 %50, i64 3, !dbg !28
  %65 = insertelement <8 x i32> %64, i32 %48, i64 4, !dbg !28
  %66 = insertelement <8 x i32> %65, i32 %47, i64 5, !dbg !28
  %67 = insertelement <8 x i32> %66, i32 %46, i64 6, !dbg !28
  %68 = insertelement <8 x i32> %67, i32 %45, i64 7, !dbg !28
  %69 = bitcast <8 x i32> %68 to <8 x float>, !dbg !28
  %70 = insertelement <4 x i32> poison, i32 %60, i64 0, !dbg !30
  %71 = insertelement <4 x i32> %70, i32 %59, i64 1, !dbg !30
  %72 = insertelement <4 x i32> %71, i32 %58, i64 2, !dbg !30
  %73 = insertelement <4 x i32> %72, i32 %57, i64 3, !dbg !30
  %74 = bitcast <4 x i32> %73 to <4 x float>, !dbg !30
  %75 = shufflevector <4 x float> %74, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !30
  %76 = fadd <8 x float> %75, %69, !dbg !31
  %77 = fcmp olt <8 x float> %76, zeroinitializer, !dbg !32
  %78 = extractelement <8 x i1> %77, i64 7, !dbg !36
  %79 = extractelement <8 x float> %76, i64 7, !dbg !36
  %80 = select i1 %78, float 0.000000e+00, float %79, !dbg !36
  %81 = extractelement <8 x i1> %77, i64 6, !dbg !36
  %82 = extractelement <8 x float> %76, i64 6, !dbg !36
  %83 = select i1 %81, float 0.000000e+00, float %82, !dbg !36
  %84 = extractelement <8 x i1> %77, i64 5, !dbg !36
  %85 = extractelement <8 x float> %76, i64 5, !dbg !36
  %86 = select i1 %84, float 0.000000e+00, float %85, !dbg !36
  %87 = extractelement <8 x i1> %77, i64 4, !dbg !36
  %88 = extractelement <8 x float> %76, i64 4, !dbg !36
  %89 = select i1 %87, float 0.000000e+00, float %88, !dbg !36
  %90 = extractelement <8 x i1> %77, i64 3, !dbg !36
  %91 = extractelement <8 x float> %76, i64 3, !dbg !36
  %92 = select i1 %90, float 0.000000e+00, float %91, !dbg !36
  %93 = extractelement <8 x i1> %77, i64 2, !dbg !36
  %94 = extractelement <8 x float> %76, i64 2, !dbg !36
  %95 = select i1 %93, float 0.000000e+00, float %94, !dbg !36
  %96 = extractelement <8 x i1> %77, i64 1, !dbg !36
  %97 = extractelement <8 x float> %76, i64 1, !dbg !36
  %98 = select i1 %96, float 0.000000e+00, float %97, !dbg !36
  %99 = extractelement <8 x i1> %77, i64 0, !dbg !36
  %100 = extractelement <8 x float> %76, i64 0, !dbg !36
  %101 = select i1 %99, float 0.000000e+00, float %100, !dbg !36
  %102 = mul i32 %11, 144, !dbg !37
  %103 = mul i32 %12, 144, !dbg !37
  %104 = add i32 %24, %102, !dbg !38
  %105 = add i32 %24, %103, !dbg !38
  %106 = sext i32 %104 to i64, !dbg !39
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !39
  %108 = sext i32 %105 to i64, !dbg !39
  %109 = getelementptr float, ptr addrspace(1) %2, i64 %108, !dbg !39
  %110 = and i32 %20, 508, !dbg !40
  %111 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !40
  %112 = bitcast float %80 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 true) #2, !dbg !40
  %113 = getelementptr inbounds i8, ptr addrspace(3) %111, i32 1028, !dbg !40
  %114 = bitcast float %83 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #2, !dbg !40
  %115 = getelementptr inbounds i8, ptr addrspace(3) %111, i32 2056, !dbg !40
  %116 = bitcast float %86 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #2, !dbg !40
  %117 = getelementptr inbounds i8, ptr addrspace(3) %111, i32 3084, !dbg !40
  %118 = bitcast float %89 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 true) #2, !dbg !40
  %119 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !40
  %120 = bitcast float %92 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #2, !dbg !40
  %121 = getelementptr inbounds i8, ptr addrspace(3) %111, i32 1540, !dbg !40
  %122 = bitcast float %95 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #2, !dbg !40
  %123 = getelementptr inbounds i8, ptr addrspace(3) %111, i32 2568, !dbg !40
  %124 = bitcast float %98 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #2, !dbg !40
  %125 = getelementptr inbounds i8, ptr addrspace(3) %111, i32 3596, !dbg !40
  %126 = bitcast float %101 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %127 = lshr i32 %110, 8, !dbg !40
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i32 %127, !dbg !40
  %129 = getelementptr float, ptr addrspace(3) %128, i32 %110, !dbg !40
  %130 = load i32, ptr addrspace(3) %129, align 4, !dbg !40
  %131 = or disjoint i32 %110, 1, !dbg !40
  %132 = getelementptr float, ptr addrspace(3) %128, i32 %131, !dbg !40
  %133 = load i32, ptr addrspace(3) %132, align 4, !dbg !40
  %134 = or disjoint i32 %110, 2, !dbg !40
  %135 = getelementptr float, ptr addrspace(3) %128, i32 %134, !dbg !40
  %136 = load i32, ptr addrspace(3) %135, align 4, !dbg !40
  %137 = or disjoint i32 %110, 3, !dbg !40
  %138 = getelementptr float, ptr addrspace(3) %128, i32 %137, !dbg !40
  %139 = load i32, ptr addrspace(3) %138, align 4, !dbg !40
  %140 = or disjoint i32 %110, 512, !dbg !40
  %141 = lshr i32 %140, 8, !dbg !40
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i32 %141, !dbg !40
  %143 = getelementptr float, ptr addrspace(3) %142, i32 %140, !dbg !40
  %144 = load i32, ptr addrspace(3) %143, align 4, !dbg !40
  %145 = or disjoint i32 %110, 513, !dbg !40
  %146 = lshr i32 %145, 8, !dbg !40
  %147 = getelementptr float, ptr addrspace(3) @global_smem, i32 %146, !dbg !40
  %148 = getelementptr float, ptr addrspace(3) %147, i32 %145, !dbg !40
  %149 = load i32, ptr addrspace(3) %148, align 4, !dbg !40
  %150 = or disjoint i32 %110, 514, !dbg !40
  %151 = lshr i32 %150, 8, !dbg !40
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i32 %151, !dbg !40
  %153 = getelementptr float, ptr addrspace(3) %152, i32 %150, !dbg !40
  %154 = load i32, ptr addrspace(3) %153, align 4, !dbg !40
  %155 = or disjoint i32 %110, 515, !dbg !40
  %156 = lshr i32 %155, 8, !dbg !40
  %157 = getelementptr float, ptr addrspace(3) @global_smem, i32 %156, !dbg !40
  %158 = getelementptr float, ptr addrspace(3) %157, i32 %155, !dbg !40
  %159 = load i32, ptr addrspace(3) %158, align 4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %130, i32 %133, i32 %136, i32 %139, ptr addrspace(1) %107, i1 %42) #2, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %144, i32 %149, i32 %154, i32 %159, ptr addrspace(1) %109, i1 %43) #2, !dbg !40
  %160 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !41
  %161 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !41
  %162 = bitcast float %80 to i32, !dbg !42
  %163 = bitcast float %83 to i32, !dbg !42
  %164 = bitcast float %86 to i32, !dbg !42
  %165 = bitcast float %89 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %162, i32 %163, i32 %164, i32 %165, ptr addrspace(1) %160, i1 %40) #2, !dbg !42
  %166 = bitcast float %92 to i32, !dbg !42
  %167 = bitcast float %95 to i32, !dbg !42
  %168 = bitcast float %98 to i32, !dbg !42
  %169 = bitcast float %101 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %166, i32 %167, i32 %168, i32 %169, ptr addrspace(1) %161, i1 %41) #2, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmxitogs3hkzn4p2biygujjpfjfevuwpybp2gb6lby5xcbhyjmca.py", directory: "inductor_cache/mx")
!4 = !{ptr @triton_poi_fused_convolution_relu_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_9", linkageName: "triton_poi_fused_convolution_relu_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 50, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 63, scope: !7)
!28 = !DILocation(line: 32, column: 55, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 36, column: 40, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 37, column: 34, scope: !7)
!38 = !DILocation(line: 37, column: 30, scope: !7)
!39 = !DILocation(line: 37, column: 25, scope: !7)
!40 = !DILocation(line: 37, column: 45, scope: !7)
!41 = !DILocation(line: 38, column: 25, scope: !7)
!42 = !DILocation(line: 38, column: 56, scope: !7)
!43 = !DILocation(line: 38, column: 4, scope: !7)
