; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 4, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %13, 16, !dbg !12
  %15 = or disjoint i32 %13, 32, !dbg !12
  %16 = or disjoint i32 %13, 48, !dbg !12
  %17 = shl i32 %11, 2, !dbg !12
  %18 = and i32 %17, 60, !dbg !12
  %19 = or disjoint i32 %10, %13, !dbg !13
  %20 = or disjoint i32 %10, %14, !dbg !13
  %21 = or disjoint i32 %10, %15, !dbg !13
  %22 = or disjoint i32 %10, %16, !dbg !13
  %23 = or disjoint i32 %10, %18, !dbg !13
  %24 = icmp slt i32 %19, 128, !dbg !14
  %25 = icmp slt i32 %20, 128, !dbg !14
  %26 = icmp slt i32 %21, 128, !dbg !14
  %27 = icmp slt i32 %22, 128, !dbg !14
  %28 = icmp slt i32 %23, 128, !dbg !14
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %30 = shl i32 %29, 6, !dbg !16
  %31 = or disjoint i32 %30, %18, !dbg !17
  %32 = or disjoint i32 %30, %13, !dbg !17
  %33 = or disjoint i32 %30, %14, !dbg !17
  %34 = or disjoint i32 %30, %15, !dbg !17
  %35 = or disjoint i32 %30, %16, !dbg !17
  %36 = icmp slt i32 %31, 64, !dbg !18
  %37 = icmp slt i32 %32, 64, !dbg !18
  %38 = icmp slt i32 %33, 64, !dbg !18
  %39 = icmp slt i32 %34, 64, !dbg !18
  %40 = icmp slt i32 %35, 64, !dbg !18
  %.frozen = freeze i32 %23, !dbg !19
  %41 = sdiv i32 %.frozen, 32, !dbg !19
  %42 = mul i32 %41, 32, !dbg !20
  %.decomposed = sub i32 %.frozen, %42, !dbg !20
  %43 = shl i32 %19, 6, !dbg !21
  %44 = shl i32 %20, 6, !dbg !21
  %45 = shl i32 %21, 6, !dbg !21
  %46 = shl i32 %22, 6, !dbg !21
  %47 = add i32 %31, %43, !dbg !22
  %48 = add i32 %31, %44, !dbg !22
  %49 = add i32 %31, %45, !dbg !22
  %50 = add i32 %31, %46, !dbg !22
  %51 = sext i32 %47 to i64, !dbg !23
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !23
  %53 = sext i32 %48 to i64, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !23
  %55 = sext i32 %49 to i64, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !23
  %57 = sext i32 %50 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !23
  %59 = and i1 %24, %36, !dbg !24
  %60 = and i1 %25, %36, !dbg !24
  %61 = and i1 %26, %36, !dbg !24
  %62 = and i1 %27, %36, !dbg !24
  %63 = and i1 %28, %37, !dbg !24
  %64 = and i1 %28, %38, !dbg !24
  %65 = and i1 %28, %39, !dbg !24
  %66 = and i1 %28, %40, !dbg !24
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %59) #2, !dbg !25
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !25
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !25
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !25
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !25
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %60) #2, !dbg !25
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !25
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !25
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !25
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !25
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %61) #2, !dbg !25
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !25
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !25
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !25
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !25
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %62) #2, !dbg !25
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !25
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !25
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !25
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !25
  %87 = shl i32 %11, 8, !dbg !25
  %88 = and i32 %87, 3840, !dbg !25
  %89 = or disjoint i32 %88, %13, !dbg !25
  %90 = and i32 %17, 1020, !dbg !25
  %91 = lshr exact i32 %88, 2, !dbg !25
  %92 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %91, !dbg !25
  %93 = getelementptr float, ptr addrspace(3) %92, i32 %89, !dbg !25
  %94 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #2, !dbg !25
  %95 = or disjoint i32 %89, 64, !dbg !25
  %96 = lshr i32 %95, 6, !dbg !25
  %.idx = shl nuw nsw i32 %96, 4, !dbg !25
  %97 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !25
  %98 = getelementptr float, ptr addrspace(3) %97, i32 %95, !dbg !25
  %99 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #2, !dbg !25
  %100 = or disjoint i32 %89, 128, !dbg !25
  %101 = lshr i32 %100, 6, !dbg !25
  %.idx1 = shl nuw nsw i32 %101, 4, !dbg !25
  %102 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !25
  %103 = getelementptr float, ptr addrspace(3) %102, i32 %100, !dbg !25
  %104 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 true) #2, !dbg !25
  %105 = or disjoint i32 %89, 192, !dbg !25
  %106 = lshr i32 %105, 6, !dbg !25
  %.idx2 = shl nuw nsw i32 %106, 4, !dbg !25
  %107 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !25
  %108 = getelementptr float, ptr addrspace(3) %107, i32 %105, !dbg !25
  %109 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !25
  %110 = or disjoint i32 %89, 16, !dbg !25
  %111 = getelementptr float, ptr addrspace(3) %92, i32 %110, !dbg !25
  %112 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 true) #2, !dbg !25
  %113 = or disjoint i32 %89, 80, !dbg !25
  %114 = lshr i32 %113, 6, !dbg !25
  %.idx3 = shl nuw nsw i32 %114, 4, !dbg !25
  %115 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !25
  %116 = getelementptr float, ptr addrspace(3) %115, i32 %113, !dbg !25
  %117 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 true) #2, !dbg !25
  %118 = or disjoint i32 %89, 144, !dbg !25
  %119 = lshr i32 %118, 6, !dbg !25
  %.idx4 = shl nuw nsw i32 %119, 4, !dbg !25
  %120 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !25
  %121 = getelementptr float, ptr addrspace(3) %120, i32 %118, !dbg !25
  %122 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #2, !dbg !25
  %123 = or disjoint i32 %89, 208, !dbg !25
  %124 = lshr i32 %123, 6, !dbg !25
  %.idx5 = shl nuw nsw i32 %124, 4, !dbg !25
  %125 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !25
  %126 = getelementptr float, ptr addrspace(3) %125, i32 %123, !dbg !25
  %127 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #2, !dbg !25
  %128 = or disjoint i32 %89, 32, !dbg !25
  %129 = getelementptr float, ptr addrspace(3) %92, i32 %128, !dbg !25
  %130 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #2, !dbg !25
  %131 = or disjoint i32 %89, 96, !dbg !25
  %132 = lshr i32 %131, 6, !dbg !25
  %.idx6 = shl nuw nsw i32 %132, 4, !dbg !25
  %133 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !25
  %134 = getelementptr float, ptr addrspace(3) %133, i32 %131, !dbg !25
  %135 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 true) #2, !dbg !25
  %136 = or disjoint i32 %89, 160, !dbg !25
  %137 = lshr i32 %136, 6, !dbg !25
  %.idx7 = shl nuw nsw i32 %137, 4, !dbg !25
  %138 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !25
  %139 = getelementptr float, ptr addrspace(3) %138, i32 %136, !dbg !25
  %140 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #2, !dbg !25
  %141 = or disjoint i32 %89, 224, !dbg !25
  %142 = lshr i32 %141, 6, !dbg !25
  %.idx8 = shl nuw nsw i32 %142, 4, !dbg !25
  %143 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx8, !dbg !25
  %144 = getelementptr float, ptr addrspace(3) %143, i32 %141, !dbg !25
  %145 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #2, !dbg !25
  %146 = or disjoint i32 %89, 48, !dbg !25
  %147 = getelementptr float, ptr addrspace(3) %92, i32 %146, !dbg !25
  %148 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #2, !dbg !25
  %149 = or disjoint i32 %89, 112, !dbg !25
  %150 = lshr i32 %149, 6, !dbg !25
  %.idx9 = shl nuw nsw i32 %150, 4, !dbg !25
  %151 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx9, !dbg !25
  %152 = getelementptr float, ptr addrspace(3) %151, i32 %149, !dbg !25
  %153 = insertelement <1 x i32> poison, i32 %84, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 true) #2, !dbg !25
  %154 = or disjoint i32 %89, 176, !dbg !25
  %155 = lshr i32 %154, 6, !dbg !25
  %.idx10 = shl nuw nsw i32 %155, 4, !dbg !25
  %156 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx10, !dbg !25
  %157 = getelementptr float, ptr addrspace(3) %156, i32 %154, !dbg !25
  %158 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %158, i1 true) #2, !dbg !25
  %159 = or disjoint i32 %89, 240, !dbg !25
  %160 = lshr i32 %159, 6, !dbg !25
  %.idx11 = shl nuw nsw i32 %160, 4, !dbg !25
  %161 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx11, !dbg !25
  %162 = getelementptr float, ptr addrspace(3) %161, i32 %159, !dbg !25
  %163 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %163, i1 true) #2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %164 = lshr i32 %90, 6, !dbg !25
  %165 = and i32 %11, 255, !dbg !25
  %166 = add nuw nsw i32 %164, %165, !dbg !25
  %.idx12 = shl nuw nsw i32 %166, 4, !dbg !25
  %167 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx12, !dbg !25
  %168 = load float, ptr addrspace(3) %167, align 16, !dbg !25
  %169 = getelementptr inbounds i8, ptr addrspace(3) %167, i32 4, !dbg !25
  %170 = load float, ptr addrspace(3) %169, align 4, !dbg !25
  %171 = getelementptr inbounds i8, ptr addrspace(3) %167, i32 8, !dbg !25
  %172 = load float, ptr addrspace(3) %171, align 8, !dbg !25
  %173 = getelementptr inbounds i8, ptr addrspace(3) %167, i32 12, !dbg !25
  %174 = load float, ptr addrspace(3) %173, align 4, !dbg !25
  %175 = or disjoint i32 %90, 1024, !dbg !25
  %176 = lshr i32 %175, 6, !dbg !25
  %.idx16 = shl nuw nsw i32 %176, 4, !dbg !25
  %177 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx16, !dbg !25
  %178 = getelementptr inbounds float, ptr addrspace(3) %177, i32 %175, !dbg !25
  %179 = load float, ptr addrspace(3) %178, align 16, !dbg !25
  %180 = getelementptr inbounds i8, ptr addrspace(3) %178, i32 4, !dbg !25
  %181 = load float, ptr addrspace(3) %180, align 4, !dbg !25
  %182 = getelementptr inbounds i8, ptr addrspace(3) %178, i32 8, !dbg !25
  %183 = load float, ptr addrspace(3) %182, align 8, !dbg !25
  %184 = getelementptr inbounds i8, ptr addrspace(3) %178, i32 12, !dbg !25
  %185 = load float, ptr addrspace(3) %184, align 4, !dbg !25
  %186 = or disjoint i32 %90, 2048, !dbg !25
  %187 = lshr i32 %186, 6, !dbg !25
  %.idx21 = shl nuw nsw i32 %187, 4, !dbg !25
  %188 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx21, !dbg !25
  %189 = getelementptr inbounds float, ptr addrspace(3) %188, i32 %186, !dbg !25
  %190 = load float, ptr addrspace(3) %189, align 16, !dbg !25
  %191 = getelementptr inbounds i8, ptr addrspace(3) %189, i32 4, !dbg !25
  %192 = load float, ptr addrspace(3) %191, align 4, !dbg !25
  %193 = getelementptr inbounds i8, ptr addrspace(3) %189, i32 8, !dbg !25
  %194 = load float, ptr addrspace(3) %193, align 8, !dbg !25
  %195 = getelementptr inbounds i8, ptr addrspace(3) %189, i32 12, !dbg !25
  %196 = load float, ptr addrspace(3) %195, align 4, !dbg !25
  %197 = or disjoint i32 %90, 3072, !dbg !25
  %198 = lshr i32 %197, 6, !dbg !25
  %.idx26 = shl nuw nsw i32 %198, 4, !dbg !25
  %199 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx26, !dbg !25
  %200 = getelementptr inbounds float, ptr addrspace(3) %199, i32 %197, !dbg !25
  %201 = load float, ptr addrspace(3) %200, align 16, !dbg !25
  %202 = getelementptr inbounds i8, ptr addrspace(3) %200, i32 4, !dbg !25
  %203 = load float, ptr addrspace(3) %202, align 4, !dbg !25
  %204 = getelementptr inbounds i8, ptr addrspace(3) %200, i32 8, !dbg !25
  %205 = load float, ptr addrspace(3) %204, align 8, !dbg !25
  %206 = getelementptr inbounds i8, ptr addrspace(3) %200, i32 12, !dbg !25
  %207 = load float, ptr addrspace(3) %206, align 4, !dbg !25
  %208 = shl i32 %32, 5, !dbg !26
  %209 = shl i32 %33, 5, !dbg !26
  %210 = shl i32 %34, 5, !dbg !26
  %211 = shl i32 %35, 5, !dbg !26
  %212 = shl i32 %41, 11, !dbg !27
  %213 = add i32 %212, %.decomposed, !dbg !28
  %214 = add i32 %213, %208, !dbg !29
  %215 = add i32 %213, %209, !dbg !29
  %216 = add i32 %213, %210, !dbg !29
  %217 = add i32 %213, %211, !dbg !29
  %218 = sext i32 %214 to i64, !dbg !30
  %219 = getelementptr float, ptr addrspace(1) %1, i64 %218, !dbg !30
  %220 = sext i32 %215 to i64, !dbg !30
  %221 = getelementptr float, ptr addrspace(1) %1, i64 %220, !dbg !30
  %222 = sext i32 %216 to i64, !dbg !30
  %223 = getelementptr float, ptr addrspace(1) %1, i64 %222, !dbg !30
  %224 = sext i32 %217 to i64, !dbg !30
  %225 = getelementptr float, ptr addrspace(1) %1, i64 %224, !dbg !30
  %226 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %219, i1 %63) #2, !dbg !31
  %227 = extractvalue { i32, i32, i32, i32 } %226, 0, !dbg !31
  %228 = extractvalue { i32, i32, i32, i32 } %226, 1, !dbg !31
  %229 = extractvalue { i32, i32, i32, i32 } %226, 2, !dbg !31
  %230 = extractvalue { i32, i32, i32, i32 } %226, 3, !dbg !31
  %231 = bitcast i32 %227 to float, !dbg !31
  %232 = bitcast i32 %228 to float, !dbg !31
  %233 = bitcast i32 %229 to float, !dbg !31
  %234 = bitcast i32 %230 to float, !dbg !31
  %235 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %221, i1 %64) #2, !dbg !31
  %236 = extractvalue { i32, i32, i32, i32 } %235, 0, !dbg !31
  %237 = extractvalue { i32, i32, i32, i32 } %235, 1, !dbg !31
  %238 = extractvalue { i32, i32, i32, i32 } %235, 2, !dbg !31
  %239 = extractvalue { i32, i32, i32, i32 } %235, 3, !dbg !31
  %240 = bitcast i32 %236 to float, !dbg !31
  %241 = bitcast i32 %237 to float, !dbg !31
  %242 = bitcast i32 %238 to float, !dbg !31
  %243 = bitcast i32 %239 to float, !dbg !31
  %244 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %223, i1 %65) #2, !dbg !31
  %245 = extractvalue { i32, i32, i32, i32 } %244, 0, !dbg !31
  %246 = extractvalue { i32, i32, i32, i32 } %244, 1, !dbg !31
  %247 = extractvalue { i32, i32, i32, i32 } %244, 2, !dbg !31
  %248 = extractvalue { i32, i32, i32, i32 } %244, 3, !dbg !31
  %249 = bitcast i32 %245 to float, !dbg !31
  %250 = bitcast i32 %246 to float, !dbg !31
  %251 = bitcast i32 %247 to float, !dbg !31
  %252 = bitcast i32 %248 to float, !dbg !31
  %253 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %225, i1 %66) #2, !dbg !31
  %254 = extractvalue { i32, i32, i32, i32 } %253, 0, !dbg !31
  %255 = extractvalue { i32, i32, i32, i32 } %253, 1, !dbg !31
  %256 = extractvalue { i32, i32, i32, i32 } %253, 2, !dbg !31
  %257 = extractvalue { i32, i32, i32, i32 } %253, 3, !dbg !31
  %258 = bitcast i32 %254 to float, !dbg !31
  %259 = bitcast i32 %255 to float, !dbg !31
  %260 = bitcast i32 %256 to float, !dbg !31
  %261 = bitcast i32 %257 to float, !dbg !31
  %262 = sext i32 %.decomposed to i64, !dbg !32
  %263 = getelementptr float, ptr addrspace(1) %2, i64 %262, !dbg !32
  %264 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %263, i1 %28) #2, !dbg !33
  %265 = extractvalue { i32, i32, i32, i32 } %264, 0, !dbg !33
  %266 = extractvalue { i32, i32, i32, i32 } %264, 1, !dbg !33
  %267 = extractvalue { i32, i32, i32, i32 } %264, 2, !dbg !33
  %268 = extractvalue { i32, i32, i32, i32 } %264, 3, !dbg !33
  %269 = bitcast i32 %265 to float, !dbg !33
  %270 = bitcast i32 %266 to float, !dbg !33
  %271 = bitcast i32 %267 to float, !dbg !33
  %272 = bitcast i32 %268 to float, !dbg !33
  %273 = getelementptr float, ptr addrspace(1) %3, i64 %218, !dbg !34
  %274 = getelementptr float, ptr addrspace(1) %3, i64 %220, !dbg !34
  %275 = getelementptr float, ptr addrspace(1) %3, i64 %222, !dbg !34
  %276 = getelementptr float, ptr addrspace(1) %3, i64 %224, !dbg !34
  %277 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %273, i1 %63) #2, !dbg !35
  %278 = extractvalue { i32, i32, i32, i32 } %277, 0, !dbg !35
  %279 = extractvalue { i32, i32, i32, i32 } %277, 1, !dbg !35
  %280 = extractvalue { i32, i32, i32, i32 } %277, 2, !dbg !35
  %281 = extractvalue { i32, i32, i32, i32 } %277, 3, !dbg !35
  %282 = bitcast i32 %278 to float, !dbg !35
  %283 = bitcast i32 %279 to float, !dbg !35
  %284 = bitcast i32 %280 to float, !dbg !35
  %285 = bitcast i32 %281 to float, !dbg !35
  %286 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %274, i1 %64) #2, !dbg !35
  %287 = extractvalue { i32, i32, i32, i32 } %286, 0, !dbg !35
  %288 = extractvalue { i32, i32, i32, i32 } %286, 1, !dbg !35
  %289 = extractvalue { i32, i32, i32, i32 } %286, 2, !dbg !35
  %290 = extractvalue { i32, i32, i32, i32 } %286, 3, !dbg !35
  %291 = bitcast i32 %287 to float, !dbg !35
  %292 = bitcast i32 %288 to float, !dbg !35
  %293 = bitcast i32 %289 to float, !dbg !35
  %294 = bitcast i32 %290 to float, !dbg !35
  %295 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %275, i1 %65) #2, !dbg !35
  %296 = extractvalue { i32, i32, i32, i32 } %295, 0, !dbg !35
  %297 = extractvalue { i32, i32, i32, i32 } %295, 1, !dbg !35
  %298 = extractvalue { i32, i32, i32, i32 } %295, 2, !dbg !35
  %299 = extractvalue { i32, i32, i32, i32 } %295, 3, !dbg !35
  %300 = bitcast i32 %296 to float, !dbg !35
  %301 = bitcast i32 %297 to float, !dbg !35
  %302 = bitcast i32 %298 to float, !dbg !35
  %303 = bitcast i32 %299 to float, !dbg !35
  %304 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %276, i1 %66) #2, !dbg !35
  %305 = extractvalue { i32, i32, i32, i32 } %304, 0, !dbg !35
  %306 = extractvalue { i32, i32, i32, i32 } %304, 1, !dbg !35
  %307 = extractvalue { i32, i32, i32, i32 } %304, 2, !dbg !35
  %308 = extractvalue { i32, i32, i32, i32 } %304, 3, !dbg !35
  %309 = bitcast i32 %305 to float, !dbg !35
  %310 = bitcast i32 %306 to float, !dbg !35
  %311 = bitcast i32 %307 to float, !dbg !35
  %312 = bitcast i32 %308 to float, !dbg !35
  %313 = getelementptr float, ptr addrspace(1) %4, i64 %262, !dbg !36
  %314 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %313, i1 %28) #2, !dbg !37
  %315 = extractvalue { i32, i32, i32, i32 } %314, 0, !dbg !37
  %316 = extractvalue { i32, i32, i32, i32 } %314, 1, !dbg !37
  %317 = extractvalue { i32, i32, i32, i32 } %314, 2, !dbg !37
  %318 = extractvalue { i32, i32, i32, i32 } %314, 3, !dbg !37
  %319 = bitcast i32 %315 to float, !dbg !37
  %320 = bitcast i32 %316 to float, !dbg !37
  %321 = bitcast i32 %317 to float, !dbg !37
  %322 = bitcast i32 %318 to float, !dbg !37
  %323 = fadd float %231, %269, !dbg !38
  %324 = fadd float %232, %270, !dbg !38
  %325 = fadd float %233, %271, !dbg !38
  %326 = fadd float %234, %272, !dbg !38
  %327 = fadd float %240, %269, !dbg !38
  %328 = fadd float %241, %270, !dbg !38
  %329 = fadd float %242, %271, !dbg !38
  %330 = fadd float %243, %272, !dbg !38
  %331 = fadd float %249, %269, !dbg !38
  %332 = fadd float %250, %270, !dbg !38
  %333 = fadd float %251, %271, !dbg !38
  %334 = fadd float %252, %272, !dbg !38
  %335 = fadd float %258, %269, !dbg !38
  %336 = fadd float %259, %270, !dbg !38
  %337 = fadd float %260, %271, !dbg !38
  %338 = fadd float %261, %272, !dbg !38
  %339 = fadd float %168, %323, !dbg !39
  %340 = fadd float %170, %324, !dbg !39
  %341 = fadd float %172, %325, !dbg !39
  %342 = fadd float %174, %326, !dbg !39
  %343 = fadd float %179, %327, !dbg !39
  %344 = fadd float %181, %328, !dbg !39
  %345 = fadd float %183, %329, !dbg !39
  %346 = fadd float %185, %330, !dbg !39
  %347 = fadd float %190, %331, !dbg !39
  %348 = fadd float %192, %332, !dbg !39
  %349 = fadd float %194, %333, !dbg !39
  %350 = fadd float %196, %334, !dbg !39
  %351 = fadd float %201, %335, !dbg !39
  %352 = fadd float %203, %336, !dbg !39
  %353 = fadd float %205, %337, !dbg !39
  %354 = fadd float %207, %338, !dbg !39
  %355 = fadd float %282, %319, !dbg !40
  %356 = fadd float %283, %320, !dbg !40
  %357 = fadd float %284, %321, !dbg !40
  %358 = fadd float %285, %322, !dbg !40
  %359 = fadd float %291, %319, !dbg !40
  %360 = fadd float %292, %320, !dbg !40
  %361 = fadd float %293, %321, !dbg !40
  %362 = fadd float %294, %322, !dbg !40
  %363 = fadd float %300, %319, !dbg !40
  %364 = fadd float %301, %320, !dbg !40
  %365 = fadd float %302, %321, !dbg !40
  %366 = fadd float %303, %322, !dbg !40
  %367 = fadd float %309, %319, !dbg !40
  %368 = fadd float %310, %320, !dbg !40
  %369 = fadd float %311, %321, !dbg !40
  %370 = fadd float %312, %322, !dbg !40
  %371 = fadd float %339, %355, !dbg !41
  %372 = fadd float %340, %356, !dbg !41
  %373 = fadd float %341, %357, !dbg !41
  %374 = fadd float %342, %358, !dbg !41
  %375 = fadd float %343, %359, !dbg !41
  %376 = fadd float %344, %360, !dbg !41
  %377 = fadd float %345, %361, !dbg !41
  %378 = fadd float %346, %362, !dbg !41
  %379 = fadd float %347, %363, !dbg !41
  %380 = fadd float %348, %364, !dbg !41
  %381 = fadd float %349, %365, !dbg !41
  %382 = fadd float %350, %366, !dbg !41
  %383 = fadd float %351, %367, !dbg !41
  %384 = fadd float %352, %368, !dbg !41
  %385 = fadd float %353, %369, !dbg !41
  %386 = fadd float %354, %370, !dbg !41
  %387 = getelementptr float, ptr addrspace(1) %5, i64 %51, !dbg !42
  %388 = getelementptr float, ptr addrspace(1) %5, i64 %53, !dbg !42
  %389 = getelementptr float, ptr addrspace(1) %5, i64 %55, !dbg !42
  %390 = getelementptr float, ptr addrspace(1) %5, i64 %57, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %391 = lshr exact i32 %88, 4, !dbg !43
  %392 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %391, !dbg !43
  %393 = getelementptr float, ptr addrspace(3) %392, i32 %89, !dbg !43
  %394 = bitcast float %371 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %393, <1 x i32> %394, i1 true) #2, !dbg !43
  %395 = getelementptr float, ptr addrspace(3) @global_smem, i32 %96, !dbg !43
  %396 = getelementptr float, ptr addrspace(3) %395, i32 %95, !dbg !43
  %397 = bitcast float %372 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %396, <1 x i32> %397, i1 true) #2, !dbg !43
  %398 = getelementptr float, ptr addrspace(3) @global_smem, i32 %101, !dbg !43
  %399 = getelementptr float, ptr addrspace(3) %398, i32 %100, !dbg !43
  %400 = bitcast float %373 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %399, <1 x i32> %400, i1 true) #2, !dbg !43
  %401 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !43
  %402 = getelementptr float, ptr addrspace(3) %401, i32 %105, !dbg !43
  %403 = bitcast float %374 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %402, <1 x i32> %403, i1 true) #2, !dbg !43
  %404 = getelementptr float, ptr addrspace(3) %392, i32 %110, !dbg !43
  %405 = bitcast float %375 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %404, <1 x i32> %405, i1 true) #2, !dbg !43
  %406 = getelementptr float, ptr addrspace(3) @global_smem, i32 %114, !dbg !43
  %407 = getelementptr float, ptr addrspace(3) %406, i32 %113, !dbg !43
  %408 = bitcast float %376 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %407, <1 x i32> %408, i1 true) #2, !dbg !43
  %409 = getelementptr float, ptr addrspace(3) @global_smem, i32 %119, !dbg !43
  %410 = getelementptr float, ptr addrspace(3) %409, i32 %118, !dbg !43
  %411 = bitcast float %377 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %410, <1 x i32> %411, i1 true) #2, !dbg !43
  %412 = getelementptr float, ptr addrspace(3) @global_smem, i32 %124, !dbg !43
  %413 = getelementptr float, ptr addrspace(3) %412, i32 %123, !dbg !43
  %414 = bitcast float %378 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %413, <1 x i32> %414, i1 true) #2, !dbg !43
  %415 = getelementptr float, ptr addrspace(3) %392, i32 %128, !dbg !43
  %416 = bitcast float %379 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %415, <1 x i32> %416, i1 true) #2, !dbg !43
  %417 = getelementptr float, ptr addrspace(3) @global_smem, i32 %132, !dbg !43
  %418 = getelementptr float, ptr addrspace(3) %417, i32 %131, !dbg !43
  %419 = bitcast float %380 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %418, <1 x i32> %419, i1 true) #2, !dbg !43
  %420 = getelementptr float, ptr addrspace(3) @global_smem, i32 %137, !dbg !43
  %421 = getelementptr float, ptr addrspace(3) %420, i32 %136, !dbg !43
  %422 = bitcast float %381 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %421, <1 x i32> %422, i1 true) #2, !dbg !43
  %423 = getelementptr float, ptr addrspace(3) @global_smem, i32 %142, !dbg !43
  %424 = getelementptr float, ptr addrspace(3) %423, i32 %141, !dbg !43
  %425 = bitcast float %382 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %424, <1 x i32> %425, i1 true) #2, !dbg !43
  %426 = getelementptr float, ptr addrspace(3) %392, i32 %146, !dbg !43
  %427 = bitcast float %383 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %426, <1 x i32> %427, i1 true) #2, !dbg !43
  %428 = getelementptr float, ptr addrspace(3) @global_smem, i32 %150, !dbg !43
  %429 = getelementptr float, ptr addrspace(3) %428, i32 %149, !dbg !43
  %430 = bitcast float %384 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %429, <1 x i32> %430, i1 true) #2, !dbg !43
  %431 = getelementptr float, ptr addrspace(3) @global_smem, i32 %155, !dbg !43
  %432 = getelementptr float, ptr addrspace(3) %431, i32 %154, !dbg !43
  %433 = bitcast float %385 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %432, <1 x i32> %433, i1 true) #2, !dbg !43
  %434 = getelementptr float, ptr addrspace(3) @global_smem, i32 %160, !dbg !43
  %435 = getelementptr float, ptr addrspace(3) %434, i32 %159, !dbg !43
  %436 = bitcast float %386 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %435, <1 x i32> %436, i1 true) #2, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %437 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %164, !dbg !43
  %438 = getelementptr inbounds float, ptr addrspace(3) %437, i32 %90, !dbg !43
  %439 = load i32, ptr addrspace(3) %438, align 4, !dbg !43
  %440 = or disjoint i32 %90, 1, !dbg !43
  %441 = getelementptr inbounds float, ptr addrspace(3) %437, i32 %440, !dbg !43
  %442 = load i32, ptr addrspace(3) %441, align 4, !dbg !43
  %443 = or disjoint i32 %90, 2, !dbg !43
  %444 = getelementptr inbounds float, ptr addrspace(3) %437, i32 %443, !dbg !43
  %445 = load i32, ptr addrspace(3) %444, align 4, !dbg !43
  %446 = or disjoint i32 %90, 3, !dbg !43
  %447 = getelementptr inbounds float, ptr addrspace(3) %437, i32 %446, !dbg !43
  %448 = load i32, ptr addrspace(3) %447, align 4, !dbg !43
  %449 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %176, !dbg !43
  %450 = getelementptr inbounds float, ptr addrspace(3) %449, i32 %175, !dbg !43
  %451 = load i32, ptr addrspace(3) %450, align 4, !dbg !43
  %452 = or disjoint i32 %90, 1025, !dbg !43
  %453 = lshr i32 %452, 6, !dbg !43
  %454 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %453, !dbg !43
  %455 = getelementptr inbounds float, ptr addrspace(3) %454, i32 %452, !dbg !43
  %456 = load i32, ptr addrspace(3) %455, align 4, !dbg !43
  %457 = or disjoint i32 %90, 1026, !dbg !43
  %458 = lshr i32 %457, 6, !dbg !43
  %459 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %458, !dbg !43
  %460 = getelementptr inbounds float, ptr addrspace(3) %459, i32 %457, !dbg !43
  %461 = load i32, ptr addrspace(3) %460, align 4, !dbg !43
  %462 = or disjoint i32 %90, 1027, !dbg !43
  %463 = lshr i32 %462, 6, !dbg !43
  %464 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %463, !dbg !43
  %465 = getelementptr inbounds float, ptr addrspace(3) %464, i32 %462, !dbg !43
  %466 = load i32, ptr addrspace(3) %465, align 4, !dbg !43
  %467 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %187, !dbg !43
  %468 = getelementptr inbounds float, ptr addrspace(3) %467, i32 %186, !dbg !43
  %469 = load i32, ptr addrspace(3) %468, align 4, !dbg !43
  %470 = or disjoint i32 %90, 2049, !dbg !43
  %471 = lshr i32 %470, 6, !dbg !43
  %472 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %471, !dbg !43
  %473 = getelementptr inbounds float, ptr addrspace(3) %472, i32 %470, !dbg !43
  %474 = load i32, ptr addrspace(3) %473, align 4, !dbg !43
  %475 = or disjoint i32 %90, 2050, !dbg !43
  %476 = lshr i32 %475, 6, !dbg !43
  %477 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %476, !dbg !43
  %478 = getelementptr inbounds float, ptr addrspace(3) %477, i32 %475, !dbg !43
  %479 = load i32, ptr addrspace(3) %478, align 4, !dbg !43
  %480 = or disjoint i32 %90, 2051, !dbg !43
  %481 = lshr i32 %480, 6, !dbg !43
  %482 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %481, !dbg !43
  %483 = getelementptr inbounds float, ptr addrspace(3) %482, i32 %480, !dbg !43
  %484 = load i32, ptr addrspace(3) %483, align 4, !dbg !43
  %485 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %198, !dbg !43
  %486 = getelementptr inbounds float, ptr addrspace(3) %485, i32 %197, !dbg !43
  %487 = load i32, ptr addrspace(3) %486, align 4, !dbg !43
  %488 = or disjoint i32 %90, 3073, !dbg !43
  %489 = lshr i32 %488, 6, !dbg !43
  %490 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %489, !dbg !43
  %491 = getelementptr inbounds float, ptr addrspace(3) %490, i32 %488, !dbg !43
  %492 = load i32, ptr addrspace(3) %491, align 4, !dbg !43
  %493 = or disjoint i32 %90, 3074, !dbg !43
  %494 = lshr i32 %493, 6, !dbg !43
  %495 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %494, !dbg !43
  %496 = getelementptr inbounds float, ptr addrspace(3) %495, i32 %493, !dbg !43
  %497 = load i32, ptr addrspace(3) %496, align 4, !dbg !43
  %498 = or disjoint i32 %90, 3075, !dbg !43
  %499 = lshr i32 %498, 6, !dbg !43
  %500 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %499, !dbg !43
  %501 = getelementptr inbounds float, ptr addrspace(3) %500, i32 %498, !dbg !43
  %502 = load i32, ptr addrspace(3) %501, align 4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %439, i32 %442, i32 %445, i32 %448, ptr addrspace(1) %387, i1 %59) #2, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %451, i32 %456, i32 %461, i32 %466, ptr addrspace(1) %388, i1 %60) #2, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %469, i32 %474, i32 %479, i32 %484, ptr addrspace(1) %389, i1 %61) #2, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %487, i32 %492, i32 %497, i32 %502, ptr addrspace(1) %390, i1 %62) #2, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccd3mvbs22v22xl5ejhz3m4nyb7hbhl3ntbbllxkaxg3peysftux.py", directory: "inductor_cache/cd")
!4 = !{ptr @triton_poi_fused_clone_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_7", linkageName: "triton_poi_fused_clone_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 51, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 33, column: 38, scope: !7)
!27 = !DILocation(line: 33, column: 48, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 43, scope: !7)
!30 = !DILocation(line: 33, column: 30, scope: !7)
!31 = !DILocation(line: 33, column: 53, scope: !7)
!32 = !DILocation(line: 34, column: 30, scope: !7)
!33 = !DILocation(line: 34, column: 35, scope: !7)
!34 = !DILocation(line: 35, column: 30, scope: !7)
!35 = !DILocation(line: 35, column: 53, scope: !7)
!36 = !DILocation(line: 36, column: 30, scope: !7)
!37 = !DILocation(line: 36, column: 35, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 38, column: 18, scope: !7)
!40 = !DILocation(line: 39, column: 18, scope: !7)
!41 = !DILocation(line: 40, column: 18, scope: !7)
!42 = !DILocation(line: 41, column: 25, scope: !7)
!43 = !DILocation(line: 41, column: 44, scope: !7)
!44 = !DILocation(line: 41, column: 4, scope: !7)
