; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_relu_threshold_backward_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 4, !dbg !12
  %10 = and i32 %9, 48, !dbg !12
  %.lobit1 = lshr i32 %8, 6, !dbg !12
  %11 = and i32 %.lobit1, 3, !dbg !12
  %12 = or disjoint i32 %11, 4, !dbg !12
  %13 = or disjoint i32 %11, 8, !dbg !12
  %14 = or disjoint i32 %11, 12, !dbg !12
  %15 = or disjoint i32 %11, 16, !dbg !12
  %16 = or disjoint i32 %11, 20, !dbg !12
  %17 = or disjoint i32 %11, 24, !dbg !12
  %18 = or disjoint i32 %11, 28, !dbg !12
  %19 = or disjoint i32 %11, 32, !dbg !12
  %20 = or disjoint i32 %11, 36, !dbg !12
  %21 = or disjoint i32 %11, 40, !dbg !12
  %22 = or disjoint i32 %11, 44, !dbg !12
  %23 = or disjoint i32 %11, 48, !dbg !12
  %24 = or disjoint i32 %11, 52, !dbg !12
  %25 = or disjoint i32 %11, 56, !dbg !12
  %26 = or disjoint i32 %11, 60, !dbg !12
  %27 = or disjoint i32 %7, %10, !dbg !13
  %28 = or disjoint i32 %27, 4, !dbg !13
  %29 = or disjoint i32 %27, 8, !dbg !13
  %30 = or disjoint i32 %27, 12, !dbg !13
  %31 = or disjoint i32 %7, %11, !dbg !13
  %32 = or disjoint i32 %7, %12, !dbg !13
  %33 = or disjoint i32 %7, %13, !dbg !13
  %34 = or disjoint i32 %7, %14, !dbg !13
  %35 = or disjoint i32 %7, %15, !dbg !13
  %36 = or disjoint i32 %7, %16, !dbg !13
  %37 = or disjoint i32 %7, %17, !dbg !13
  %38 = or disjoint i32 %7, %18, !dbg !13
  %39 = or disjoint i32 %7, %19, !dbg !13
  %40 = or disjoint i32 %7, %20, !dbg !13
  %41 = or disjoint i32 %7, %21, !dbg !13
  %42 = or disjoint i32 %7, %22, !dbg !13
  %43 = or disjoint i32 %7, %23, !dbg !13
  %44 = or disjoint i32 %7, %24, !dbg !13
  %45 = or disjoint i32 %7, %25, !dbg !13
  %46 = or disjoint i32 %7, %26, !dbg !13
  %47 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %48 = shl i32 %47, 6, !dbg !15
  %49 = lshr i32 %8, 2, !dbg !16
  %50 = and i32 %49, 63, !dbg !16
  %51 = and i32 %8, 63, !dbg !16
  %52 = or disjoint i32 %48, %50, !dbg !17
  %53 = or disjoint i32 %48, %51, !dbg !17
  %54 = icmp slt i32 %52, 3721, !dbg !18
  %55 = icmp slt i32 %53, 3721, !dbg !18
  %.frozen = freeze i32 %27, !dbg !19
  %56 = sdiv i32 %.frozen, 4096, !dbg !19
  %57 = mul i32 %56, 4096, !dbg !20
  %.decomposed = sub i32 %.frozen, %57, !dbg !20
  %58 = srem i32 %28, 4096, !dbg !20
  %59 = srem i32 %29, 4096, !dbg !20
  %60 = srem i32 %30, 4096, !dbg !20
  %61 = shl i32 %52, 12, !dbg !21
  %62 = mul i32 %56, 15241216, !dbg !22
  %63 = add i32 %62, %61, !dbg !23
  %64 = add i32 %63, %.decomposed, !dbg !24
  %65 = add i32 %63, %58, !dbg !24
  %66 = add i32 %63, %59, !dbg !24
  %67 = add i32 %63, %60, !dbg !24
  %68 = sext i32 %64 to i64, !dbg !25
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !25
  %70 = sext i32 %65 to i64, !dbg !25
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !25
  %72 = sext i32 %66 to i64, !dbg !25
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !25
  %74 = sext i32 %67 to i64, !dbg !25
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !25
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %54) #2, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !26
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !26
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !26
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %54) #2, !dbg !26
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !26
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !26
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !26
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 %54) #2, !dbg !26
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !26
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !26
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !26
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !26
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %54) #2, !dbg !26
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !26
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !26
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !26
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !26
  %96 = mul i32 %31, 3721, !dbg !27
  %97 = mul i32 %32, 3721, !dbg !27
  %98 = mul i32 %33, 3721, !dbg !27
  %99 = mul i32 %34, 3721, !dbg !27
  %100 = mul i32 %35, 3721, !dbg !27
  %101 = mul i32 %36, 3721, !dbg !27
  %102 = mul i32 %37, 3721, !dbg !27
  %103 = mul i32 %38, 3721, !dbg !27
  %104 = mul i32 %39, 3721, !dbg !27
  %105 = mul i32 %40, 3721, !dbg !27
  %106 = mul i32 %41, 3721, !dbg !27
  %107 = mul i32 %42, 3721, !dbg !27
  %108 = mul i32 %43, 3721, !dbg !27
  %109 = mul i32 %44, 3721, !dbg !27
  %110 = mul i32 %45, 3721, !dbg !27
  %111 = mul i32 %46, 3721, !dbg !27
  %112 = add i32 %53, %96, !dbg !28
  %113 = add i32 %53, %97, !dbg !28
  %114 = add i32 %53, %98, !dbg !28
  %115 = add i32 %53, %99, !dbg !28
  %116 = add i32 %53, %100, !dbg !28
  %117 = add i32 %53, %101, !dbg !28
  %118 = add i32 %53, %102, !dbg !28
  %119 = add i32 %53, %103, !dbg !28
  %120 = add i32 %53, %104, !dbg !28
  %121 = add i32 %53, %105, !dbg !28
  %122 = add i32 %53, %106, !dbg !28
  %123 = add i32 %53, %107, !dbg !28
  %124 = add i32 %53, %108, !dbg !28
  %125 = add i32 %53, %109, !dbg !28
  %126 = add i32 %53, %110, !dbg !28
  %127 = add i32 %53, %111, !dbg !28
  %128 = sext i32 %112 to i64, !dbg !29
  %129 = getelementptr float, ptr addrspace(1) %1, i64 %128, !dbg !29
  %130 = sext i32 %113 to i64, !dbg !29
  %131 = getelementptr float, ptr addrspace(1) %1, i64 %130, !dbg !29
  %132 = sext i32 %114 to i64, !dbg !29
  %133 = getelementptr float, ptr addrspace(1) %1, i64 %132, !dbg !29
  %134 = sext i32 %115 to i64, !dbg !29
  %135 = getelementptr float, ptr addrspace(1) %1, i64 %134, !dbg !29
  %136 = sext i32 %116 to i64, !dbg !29
  %137 = getelementptr float, ptr addrspace(1) %1, i64 %136, !dbg !29
  %138 = sext i32 %117 to i64, !dbg !29
  %139 = getelementptr float, ptr addrspace(1) %1, i64 %138, !dbg !29
  %140 = sext i32 %118 to i64, !dbg !29
  %141 = getelementptr float, ptr addrspace(1) %1, i64 %140, !dbg !29
  %142 = sext i32 %119 to i64, !dbg !29
  %143 = getelementptr float, ptr addrspace(1) %1, i64 %142, !dbg !29
  %144 = sext i32 %120 to i64, !dbg !29
  %145 = getelementptr float, ptr addrspace(1) %1, i64 %144, !dbg !29
  %146 = sext i32 %121 to i64, !dbg !29
  %147 = getelementptr float, ptr addrspace(1) %1, i64 %146, !dbg !29
  %148 = sext i32 %122 to i64, !dbg !29
  %149 = getelementptr float, ptr addrspace(1) %1, i64 %148, !dbg !29
  %150 = sext i32 %123 to i64, !dbg !29
  %151 = getelementptr float, ptr addrspace(1) %1, i64 %150, !dbg !29
  %152 = sext i32 %124 to i64, !dbg !29
  %153 = getelementptr float, ptr addrspace(1) %1, i64 %152, !dbg !29
  %154 = sext i32 %125 to i64, !dbg !29
  %155 = getelementptr float, ptr addrspace(1) %1, i64 %154, !dbg !29
  %156 = sext i32 %126 to i64, !dbg !29
  %157 = getelementptr float, ptr addrspace(1) %1, i64 %156, !dbg !29
  %158 = sext i32 %127 to i64, !dbg !29
  %159 = getelementptr float, ptr addrspace(1) %1, i64 %158, !dbg !29
  %160 = shl i32 %8, 10, !dbg !30
  %161 = and i32 %160, 3072, !dbg !30
  %162 = or disjoint i32 %161, %50, !dbg !30
  %163 = and i32 %8, 255, !dbg !30
  %164 = lshr exact i32 %161, 4, !dbg !30
  %165 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %164, !dbg !30
  %166 = getelementptr float, ptr addrspace(3) %165, i32 %162, !dbg !30
  %167 = or disjoint i32 %162, 64, !dbg !30
  %168 = lshr i32 %167, 6, !dbg !30
  %169 = getelementptr float, ptr addrspace(3) @global_smem, i32 %168, !dbg !30
  %170 = getelementptr float, ptr addrspace(3) %169, i32 %167, !dbg !30
  %171 = or disjoint i32 %162, 128, !dbg !30
  %172 = lshr i32 %171, 6, !dbg !30
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i32 %172, !dbg !30
  %174 = getelementptr float, ptr addrspace(3) %173, i32 %171, !dbg !30
  %175 = or disjoint i32 %162, 192, !dbg !30
  %176 = lshr i32 %175, 6, !dbg !30
  %177 = getelementptr float, ptr addrspace(3) @global_smem, i32 %176, !dbg !30
  %178 = getelementptr float, ptr addrspace(3) %177, i32 %175, !dbg !30
  %179 = or disjoint i32 %162, 256, !dbg !30
  %180 = lshr i32 %179, 6, !dbg !30
  %181 = getelementptr float, ptr addrspace(3) @global_smem, i32 %180, !dbg !30
  %182 = getelementptr float, ptr addrspace(3) %181, i32 %179, !dbg !30
  %183 = or disjoint i32 %162, 320, !dbg !30
  %184 = lshr i32 %183, 6, !dbg !30
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i32 %184, !dbg !30
  %186 = getelementptr float, ptr addrspace(3) %185, i32 %183, !dbg !30
  %187 = or disjoint i32 %162, 384, !dbg !30
  %188 = lshr i32 %187, 6, !dbg !30
  %189 = getelementptr float, ptr addrspace(3) @global_smem, i32 %188, !dbg !30
  %190 = getelementptr float, ptr addrspace(3) %189, i32 %187, !dbg !30
  %191 = or disjoint i32 %162, 448, !dbg !30
  %192 = lshr i32 %191, 6, !dbg !30
  %193 = getelementptr float, ptr addrspace(3) @global_smem, i32 %192, !dbg !30
  %194 = getelementptr float, ptr addrspace(3) %193, i32 %191, !dbg !30
  %195 = or disjoint i32 %162, 512, !dbg !30
  %196 = lshr i32 %195, 6, !dbg !30
  %197 = getelementptr float, ptr addrspace(3) @global_smem, i32 %196, !dbg !30
  %198 = getelementptr float, ptr addrspace(3) %197, i32 %195, !dbg !30
  %199 = or disjoint i32 %162, 576, !dbg !30
  %200 = lshr i32 %199, 6, !dbg !30
  %201 = getelementptr float, ptr addrspace(3) @global_smem, i32 %200, !dbg !30
  %202 = getelementptr float, ptr addrspace(3) %201, i32 %199, !dbg !30
  %203 = or disjoint i32 %162, 640, !dbg !30
  %204 = lshr i32 %203, 6, !dbg !30
  %205 = getelementptr float, ptr addrspace(3) @global_smem, i32 %204, !dbg !30
  %206 = getelementptr float, ptr addrspace(3) %205, i32 %203, !dbg !30
  %207 = or disjoint i32 %162, 704, !dbg !30
  %208 = lshr i32 %207, 6, !dbg !30
  %209 = getelementptr float, ptr addrspace(3) @global_smem, i32 %208, !dbg !30
  %210 = getelementptr float, ptr addrspace(3) %209, i32 %207, !dbg !30
  %211 = or disjoint i32 %162, 768, !dbg !30
  %212 = lshr i32 %211, 6, !dbg !30
  %213 = getelementptr float, ptr addrspace(3) @global_smem, i32 %212, !dbg !30
  %214 = getelementptr float, ptr addrspace(3) %213, i32 %211, !dbg !30
  %215 = or disjoint i32 %162, 832, !dbg !30
  %216 = lshr i32 %215, 6, !dbg !30
  %217 = getelementptr float, ptr addrspace(3) @global_smem, i32 %216, !dbg !30
  %218 = getelementptr float, ptr addrspace(3) %217, i32 %215, !dbg !30
  %219 = or disjoint i32 %162, 896, !dbg !30
  %220 = lshr i32 %219, 6, !dbg !30
  %221 = getelementptr float, ptr addrspace(3) @global_smem, i32 %220, !dbg !30
  %222 = getelementptr float, ptr addrspace(3) %221, i32 %219, !dbg !30
  %223 = or disjoint i32 %162, 960, !dbg !30
  %224 = lshr i32 %223, 6, !dbg !30
  %225 = getelementptr float, ptr addrspace(3) @global_smem, i32 %224, !dbg !30
  %226 = getelementptr float, ptr addrspace(3) %225, i32 %223, !dbg !30
  %227 = lshr i32 %163, 6, !dbg !30
  %228 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %227, !dbg !30
  %229 = getelementptr inbounds float, ptr addrspace(3) %228, i32 %163, !dbg !30
  %230 = or disjoint i32 %163, 256, !dbg !30
  %231 = lshr i32 %230, 6, !dbg !30
  %232 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %231, !dbg !30
  %233 = getelementptr inbounds float, ptr addrspace(3) %232, i32 %230, !dbg !30
  %234 = or disjoint i32 %163, 512, !dbg !30
  %235 = lshr i32 %234, 6, !dbg !30
  %236 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %235, !dbg !30
  %237 = getelementptr inbounds float, ptr addrspace(3) %236, i32 %234, !dbg !30
  %238 = or disjoint i32 %163, 768, !dbg !30
  %239 = lshr i32 %238, 6, !dbg !30
  %240 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %239, !dbg !30
  %241 = getelementptr inbounds float, ptr addrspace(3) %240, i32 %238, !dbg !30
  %242 = or disjoint i32 %163, 1024, !dbg !30
  %243 = lshr i32 %242, 6, !dbg !30
  %244 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %243, !dbg !30
  %245 = getelementptr inbounds float, ptr addrspace(3) %244, i32 %242, !dbg !30
  %246 = or disjoint i32 %163, 1280, !dbg !30
  %247 = lshr i32 %246, 6, !dbg !30
  %248 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %247, !dbg !30
  %249 = getelementptr inbounds float, ptr addrspace(3) %248, i32 %246, !dbg !30
  %250 = or disjoint i32 %163, 1536, !dbg !30
  %251 = lshr i32 %250, 6, !dbg !30
  %252 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %251, !dbg !30
  %253 = getelementptr inbounds float, ptr addrspace(3) %252, i32 %250, !dbg !30
  %254 = or disjoint i32 %163, 1792, !dbg !30
  %255 = lshr i32 %254, 6, !dbg !30
  %256 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %255, !dbg !30
  %257 = getelementptr inbounds float, ptr addrspace(3) %256, i32 %254, !dbg !30
  %258 = or disjoint i32 %163, 2048, !dbg !30
  %259 = lshr i32 %258, 6, !dbg !30
  %260 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %259, !dbg !30
  %261 = getelementptr inbounds float, ptr addrspace(3) %260, i32 %258, !dbg !30
  %262 = or disjoint i32 %163, 2304, !dbg !30
  %263 = lshr i32 %262, 6, !dbg !30
  %264 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %263, !dbg !30
  %265 = getelementptr inbounds float, ptr addrspace(3) %264, i32 %262, !dbg !30
  %266 = or disjoint i32 %163, 2560, !dbg !30
  %267 = lshr i32 %266, 6, !dbg !30
  %268 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %267, !dbg !30
  %269 = getelementptr inbounds float, ptr addrspace(3) %268, i32 %266, !dbg !30
  %270 = or disjoint i32 %163, 2816, !dbg !30
  %271 = lshr i32 %270, 6, !dbg !30
  %272 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %271, !dbg !30
  %273 = getelementptr inbounds float, ptr addrspace(3) %272, i32 %270, !dbg !30
  %274 = or disjoint i32 %163, 3072, !dbg !30
  %275 = lshr i32 %274, 6, !dbg !30
  %276 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %275, !dbg !30
  %277 = getelementptr inbounds float, ptr addrspace(3) %276, i32 %274, !dbg !30
  %278 = or disjoint i32 %163, 3328, !dbg !30
  %279 = lshr i32 %278, 6, !dbg !30
  %280 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %279, !dbg !30
  %281 = getelementptr inbounds float, ptr addrspace(3) %280, i32 %278, !dbg !30
  %282 = or disjoint i32 %163, 3584, !dbg !30
  %283 = lshr i32 %282, 6, !dbg !30
  %284 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %283, !dbg !30
  %285 = getelementptr inbounds float, ptr addrspace(3) %284, i32 %282, !dbg !30
  %286 = or disjoint i32 %163, 3840, !dbg !30
  %287 = lshr i32 %286, 6, !dbg !30
  %288 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %287, !dbg !30
  %289 = getelementptr inbounds float, ptr addrspace(3) %288, i32 %286, !dbg !30
  %290 = getelementptr i1, ptr addrspace(1) %2, i64 %68, !dbg !31
  %291 = insertelement <4 x i32> poison, i32 %77, i64 0, !dbg !26
  %292 = insertelement <4 x i32> %291, i32 %78, i64 1, !dbg !26
  %293 = insertelement <4 x i32> %292, i32 %79, i64 2, !dbg !26
  %294 = insertelement <4 x i32> %293, i32 %80, i64 3, !dbg !26
  %295 = bitcast <4 x i32> %294 to <4 x float>, !dbg !26
  %296 = fcmp olt <4 x float> %295, zeroinitializer, !dbg !32
  %297 = select <4 x i1> %296, <4 x float> zeroinitializer, <4 x float> %295, !dbg !36
  %298 = fcmp ole <4 x float> %297, zeroinitializer, !dbg !37
  %299 = extractelement <4 x float> %297, i64 0, !dbg !30
  %300 = bitcast float %299 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, <1 x i32> %300, i1 true) #2, !dbg !30
  %301 = extractelement <4 x float> %297, i64 1, !dbg !30
  %302 = bitcast float %301 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %302, i1 true) #2, !dbg !30
  %303 = extractelement <4 x float> %297, i64 2, !dbg !30
  %304 = bitcast float %303 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %304, i1 true) #2, !dbg !30
  %305 = extractelement <4 x float> %297, i64 3, !dbg !30
  %306 = bitcast float %305 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %178, <1 x i32> %306, i1 true) #2, !dbg !30
  %307 = insertelement <4 x i32> poison, i32 %82, i64 0, !dbg !26
  %308 = insertelement <4 x i32> %307, i32 %83, i64 1, !dbg !26
  %309 = insertelement <4 x i32> %308, i32 %84, i64 2, !dbg !26
  %310 = insertelement <4 x i32> %309, i32 %85, i64 3, !dbg !26
  %311 = bitcast <4 x i32> %310 to <4 x float>, !dbg !26
  %312 = fcmp olt <4 x float> %311, zeroinitializer, !dbg !32
  %313 = select <4 x i1> %312, <4 x float> zeroinitializer, <4 x float> %311, !dbg !36
  %314 = fcmp ole <4 x float> %313, zeroinitializer, !dbg !37
  %315 = extractelement <4 x float> %313, i64 0, !dbg !30
  %316 = bitcast float %315 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %316, i1 true) #2, !dbg !30
  %317 = extractelement <4 x float> %313, i64 1, !dbg !30
  %318 = bitcast float %317 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %318, i1 true) #2, !dbg !30
  %319 = extractelement <4 x float> %313, i64 2, !dbg !30
  %320 = bitcast float %319 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %320, i1 true) #2, !dbg !30
  %321 = extractelement <4 x float> %313, i64 3, !dbg !30
  %322 = bitcast float %321 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %322, i1 true) #2, !dbg !30
  %323 = insertelement <4 x i32> poison, i32 %87, i64 0, !dbg !26
  %324 = insertelement <4 x i32> %323, i32 %88, i64 1, !dbg !26
  %325 = insertelement <4 x i32> %324, i32 %89, i64 2, !dbg !26
  %326 = insertelement <4 x i32> %325, i32 %90, i64 3, !dbg !26
  %327 = bitcast <4 x i32> %326 to <4 x float>, !dbg !26
  %328 = fcmp olt <4 x float> %327, zeroinitializer, !dbg !32
  %329 = select <4 x i1> %328, <4 x float> zeroinitializer, <4 x float> %327, !dbg !36
  %330 = fcmp ole <4 x float> %329, zeroinitializer, !dbg !37
  %331 = extractelement <4 x float> %329, i64 0, !dbg !30
  %332 = bitcast float %331 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %332, i1 true) #2, !dbg !30
  %333 = extractelement <4 x float> %329, i64 1, !dbg !30
  %334 = bitcast float %333 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %334, i1 true) #2, !dbg !30
  %335 = extractelement <4 x float> %329, i64 2, !dbg !30
  %336 = bitcast float %335 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, <1 x i32> %336, i1 true) #2, !dbg !30
  %337 = extractelement <4 x float> %329, i64 3, !dbg !30
  %338 = bitcast float %337 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %338, i1 true) #2, !dbg !30
  %339 = insertelement <4 x i32> poison, i32 %92, i64 0, !dbg !26
  %340 = insertelement <4 x i32> %339, i32 %93, i64 1, !dbg !26
  %341 = insertelement <4 x i32> %340, i32 %94, i64 2, !dbg !26
  %342 = insertelement <4 x i32> %341, i32 %95, i64 3, !dbg !26
  %343 = bitcast <4 x i32> %342 to <4 x float>, !dbg !26
  %344 = fcmp olt <4 x float> %343, zeroinitializer, !dbg !32
  %345 = select <4 x i1> %344, <4 x float> zeroinitializer, <4 x float> %343, !dbg !36
  %346 = fcmp ole <4 x float> %345, zeroinitializer, !dbg !37
  %347 = extractelement <4 x float> %345, i64 0, !dbg !30
  %348 = bitcast float %347 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %348, i1 true) #2, !dbg !30
  %349 = extractelement <4 x float> %345, i64 1, !dbg !30
  %350 = bitcast float %349 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %350, i1 true) #2, !dbg !30
  %351 = extractelement <4 x float> %345, i64 2, !dbg !30
  %352 = bitcast float %351 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %352, i1 true) #2, !dbg !30
  %353 = extractelement <4 x float> %345, i64 3, !dbg !30
  %354 = bitcast float %353 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %354, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %355 = load i32, ptr addrspace(3) %229, align 4, !dbg !30
  %356 = load i32, ptr addrspace(3) %233, align 4, !dbg !30
  %357 = load i32, ptr addrspace(3) %237, align 4, !dbg !30
  %358 = load i32, ptr addrspace(3) %241, align 4, !dbg !30
  %359 = load i32, ptr addrspace(3) %245, align 4, !dbg !30
  %360 = load i32, ptr addrspace(3) %249, align 4, !dbg !30
  %361 = load i32, ptr addrspace(3) %253, align 4, !dbg !30
  %362 = load i32, ptr addrspace(3) %257, align 4, !dbg !30
  %363 = load i32, ptr addrspace(3) %261, align 4, !dbg !30
  %364 = load i32, ptr addrspace(3) %265, align 4, !dbg !30
  %365 = load i32, ptr addrspace(3) %269, align 4, !dbg !30
  %366 = load i32, ptr addrspace(3) %273, align 4, !dbg !30
  %367 = load i32, ptr addrspace(3) %277, align 4, !dbg !30
  %368 = load i32, ptr addrspace(3) %281, align 4, !dbg !30
  %369 = load i32, ptr addrspace(3) %285, align 4, !dbg !30
  %370 = load i32, ptr addrspace(3) %289, align 4, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %355, ptr addrspace(1) %129, i1 %55) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %356, ptr addrspace(1) %131, i1 %55) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %357, ptr addrspace(1) %133, i1 %55) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %358, ptr addrspace(1) %135, i1 %55) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %359, ptr addrspace(1) %137, i1 %55) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %360, ptr addrspace(1) %139, i1 %55) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %361, ptr addrspace(1) %141, i1 %55) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %362, ptr addrspace(1) %143, i1 %55) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %363, ptr addrspace(1) %145, i1 %55) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %364, ptr addrspace(1) %147, i1 %55) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %365, ptr addrspace(1) %149, i1 %55) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %366, ptr addrspace(1) %151, i1 %55) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %367, ptr addrspace(1) %153, i1 %55) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %368, ptr addrspace(1) %155, i1 %55) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %369, ptr addrspace(1) %157, i1 %55) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %370, ptr addrspace(1) %159, i1 %55) #2, !dbg !30
  %371 = zext <4 x i1> %298 to <4 x i8>, !dbg !38
  %372 = bitcast <4 x i8> %371 to i32, !dbg !38
  %373 = zext <4 x i1> %314 to <4 x i8>, !dbg !38
  %374 = bitcast <4 x i8> %373 to i32, !dbg !38
  %375 = zext <4 x i1> %330 to <4 x i8>, !dbg !38
  %376 = bitcast <4 x i8> %375 to i32, !dbg !38
  %377 = zext <4 x i1> %346 to <4 x i8>, !dbg !38
  %378 = bitcast <4 x i8> %377 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %372, i32 %374, i32 %376, i32 %378, ptr addrspace(1) %290, i1 %54) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdbuclcgsihuoleqvv56zaqbyoa447jzxe7coqyebbwpg27d6hqb.py", directory: "inductor_cache/db")
!4 = !{ptr @triton_poi_fused_relu_threshold_backward_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_relu_threshold_backward_5, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_relu_threshold_backward_5", linkageName: "triton_poi_fused_relu_threshold_backward_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 54, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 59, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 30, scope: !7)
!29 = !DILocation(line: 37, column: 25, scope: !7)
!30 = !DILocation(line: 37, column: 46, scope: !7)
!31 = !DILocation(line: 38, column: 25, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 34, column: 40, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 36, column: 19, scope: !7)
!38 = !DILocation(line: 38, column: 60, scope: !7)
!39 = !DILocation(line: 38, column: 4, scope: !7)
