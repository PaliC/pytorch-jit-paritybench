; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %16 = srem i32 %14, 32, !dbg !14
  %17 = sext i32 %14 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = sext i32 %15 to i64, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !16
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !18
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !18
  %27 = sext i32 %16 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !19
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !21
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !22
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !22
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !22
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !22
  %37 = bitcast i32 %33 to float, !dbg !22
  %38 = bitcast i32 %34 to float, !dbg !22
  %39 = bitcast i32 %35 to float, !dbg !22
  %40 = bitcast i32 %36 to float, !dbg !22
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !22
  %46 = bitcast i32 %42 to float, !dbg !22
  %47 = bitcast i32 %43 to float, !dbg !22
  %48 = bitcast i32 %44 to float, !dbg !22
  %49 = bitcast i32 %45 to float, !dbg !22
  %50 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !23
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !24
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !24
  %53 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !25
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !26
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !26
  %56 = fadd float %37, 0x3EE4F8B580000000, !dbg !27
  %57 = fadd float %38, 0x3EE4F8B580000000, !dbg !27
  %58 = fadd float %39, 0x3EE4F8B580000000, !dbg !27
  %59 = fadd float %40, 0x3EE4F8B580000000, !dbg !27
  %60 = fadd float %46, 0x3EE4F8B580000000, !dbg !27
  %61 = fadd float %47, 0x3EE4F8B580000000, !dbg !27
  %62 = fadd float %48, 0x3EE4F8B580000000, !dbg !27
  %63 = fadd float %49, 0x3EE4F8B580000000, !dbg !27
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %64, 0, !dbg !28
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %65, 0, !dbg !28
  br i1 %.not.i, label %71, label %66, !dbg !28

66:                                               ; preds = %8
  br i1 %.not1.i, label %69, label %67, !dbg !28

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

71:                                               ; preds = %8
  br i1 %.not1.i, label %74, label %72, !dbg !28

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %67, %69, %72, %74
  %.0.i = phi float [ %68, %67 ], [ %70, %69 ], [ %73, %72 ], [ %75, %74 ], !dbg !28
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i1 = icmp eq i32 %76, 0, !dbg !28
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i4 = icmp eq i32 %77, 0, !dbg !28
  br i1 %.not.i1, label %83, label %78, !dbg !28

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %81, label %79, !dbg !28

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %86, label %84, !dbg !28

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %79, %81, %84, %86
  %.0.i3 = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !28
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i6 = icmp eq i32 %88, 0, !dbg !28
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i9 = icmp eq i32 %89, 0, !dbg !28
  br i1 %.not.i6, label %95, label %90, !dbg !28

90:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %93, label %91, !dbg !28

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

95:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %98, label %96, !dbg !28

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

__nv_sqrtf.exit10:                                ; preds = %91, %93, %96, %98
  %.0.i8 = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !28
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i11 = icmp eq i32 %100, 0, !dbg !28
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i14 = icmp eq i32 %101, 0, !dbg !28
  br i1 %.not.i11, label %107, label %102, !dbg !28

102:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %105, label %103, !dbg !28

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

107:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %110, label %108, !dbg !28

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

__nv_sqrtf.exit15:                                ; preds = %103, %105, %108, %110
  %.0.i13 = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !28
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i16 = icmp eq i32 %112, 0, !dbg !28
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i19 = icmp eq i32 %113, 0, !dbg !28
  br i1 %.not.i16, label %119, label %114, !dbg !28

114:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %117, label %115, !dbg !28

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

119:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %122, label %120, !dbg !28

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

__nv_sqrtf.exit20:                                ; preds = %115, %117, %120, %122
  %.0.i18 = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !28
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i21 = icmp eq i32 %124, 0, !dbg !28
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i24 = icmp eq i32 %125, 0, !dbg !28
  br i1 %.not.i21, label %131, label %126, !dbg !28

126:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %129, label %127, !dbg !28

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

131:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %134, label %132, !dbg !28

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

__nv_sqrtf.exit25:                                ; preds = %127, %129, %132, %134
  %.0.i23 = phi float [ %128, %127 ], [ %130, %129 ], [ %133, %132 ], [ %135, %134 ], !dbg !28
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i26 = icmp eq i32 %136, 0, !dbg !28
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i29 = icmp eq i32 %137, 0, !dbg !28
  br i1 %.not.i26, label %143, label %138, !dbg !28

138:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %141, label %139, !dbg !28

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

143:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %146, label %144, !dbg !28

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

__nv_sqrtf.exit30:                                ; preds = %139, %141, %144, %146
  %.0.i28 = phi float [ %140, %139 ], [ %142, %141 ], [ %145, %144 ], [ %147, %146 ], !dbg !28
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i31 = icmp eq i32 %148, 0, !dbg !28
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i34 = icmp eq i32 %149, 0, !dbg !28
  br i1 %.not.i31, label %155, label %150, !dbg !28

150:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %153, label %151, !dbg !28

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

155:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %158, label %156, !dbg !28

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

__nv_sqrtf.exit35:                                ; preds = %151, %153, %156, %158
  %.0.i33 = phi float [ %152, %151 ], [ %154, %153 ], [ %157, %156 ], [ %159, %158 ], !dbg !28
  %160 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !18
  %161 = bitcast i32 %160 to float, !dbg !18
  %162 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !20
  %163 = bitcast i32 %162 to float, !dbg !20
  %164 = fsub float %161, %163, !dbg !29
  %165 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !18
  %166 = bitcast i32 %165 to float, !dbg !18
  %167 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !20
  %168 = bitcast i32 %167 to float, !dbg !20
  %169 = fsub float %166, %168, !dbg !29
  %170 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !18
  %171 = bitcast i32 %170 to float, !dbg !18
  %172 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !20
  %173 = bitcast i32 %172 to float, !dbg !20
  %174 = fsub float %171, %173, !dbg !29
  %175 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !18
  %176 = bitcast i32 %175 to float, !dbg !18
  %177 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !20
  %178 = bitcast i32 %177 to float, !dbg !20
  %179 = fsub float %176, %178, !dbg !29
  %180 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !18
  %181 = bitcast i32 %180 to float, !dbg !18
  %182 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !20
  %183 = bitcast i32 %182 to float, !dbg !20
  %184 = fsub float %181, %183, !dbg !29
  %185 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !18
  %186 = bitcast i32 %185 to float, !dbg !18
  %187 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !20
  %188 = bitcast i32 %187 to float, !dbg !20
  %189 = fsub float %186, %188, !dbg !29
  %190 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !18
  %191 = bitcast i32 %190 to float, !dbg !18
  %192 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !20
  %193 = bitcast i32 %192 to float, !dbg !20
  %194 = fsub float %191, %193, !dbg !29
  %195 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !18
  %196 = bitcast i32 %195 to float, !dbg !18
  %197 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !20
  %198 = bitcast i32 %197 to float, !dbg !20
  %199 = fsub float %196, %198, !dbg !29
  %200 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !26
  %201 = bitcast i32 %200 to float, !dbg !26
  %202 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !26
  %203 = bitcast i32 %202 to float, !dbg !26
  %204 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !26
  %205 = bitcast i32 %204 to float, !dbg !26
  %206 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !26
  %207 = bitcast i32 %206 to float, !dbg !26
  %208 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !26
  %209 = bitcast i32 %208 to float, !dbg !26
  %210 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !26
  %211 = bitcast i32 %210 to float, !dbg !26
  %212 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !26
  %213 = bitcast i32 %212 to float, !dbg !26
  %214 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !26
  %215 = bitcast i32 %214 to float, !dbg !26
  %216 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !24
  %217 = bitcast i32 %216 to float, !dbg !24
  %218 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !24
  %219 = bitcast i32 %218 to float, !dbg !24
  %220 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !24
  %221 = bitcast i32 %220 to float, !dbg !24
  %222 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !24
  %223 = bitcast i32 %222 to float, !dbg !24
  %224 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !24
  %225 = bitcast i32 %224 to float, !dbg !24
  %226 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !24
  %227 = bitcast i32 %226 to float, !dbg !24
  %228 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !24
  %229 = bitcast i32 %228 to float, !dbg !24
  %230 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !24
  %231 = bitcast i32 %230 to float, !dbg !24
  %232 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !16
  %233 = bitcast i32 %232 to float, !dbg !16
  %234 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !16
  %235 = bitcast i32 %234 to float, !dbg !16
  %236 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !16
  %237 = bitcast i32 %236 to float, !dbg !16
  %238 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !16
  %239 = bitcast i32 %238 to float, !dbg !16
  %240 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !16
  %241 = bitcast i32 %240 to float, !dbg !16
  %242 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !16
  %243 = bitcast i32 %242 to float, !dbg !16
  %244 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !16
  %245 = bitcast i32 %244 to float, !dbg !16
  %246 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !16
  %247 = bitcast i32 %246 to float, !dbg !16
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !30
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !30
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !30
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !30
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !30
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !30
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !30
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !30
  %256 = fmul float %199, %248, !dbg !31
  %257 = fmul float %194, %249, !dbg !31
  %258 = fmul float %189, %250, !dbg !31
  %259 = fmul float %184, %251, !dbg !31
  %260 = fmul float %179, %252, !dbg !31
  %261 = fmul float %174, %253, !dbg !31
  %262 = fmul float %169, %254, !dbg !31
  %263 = fmul float %164, %255, !dbg !31
  %264 = fmul float %256, %231, !dbg !32
  %265 = fmul float %257, %229, !dbg !32
  %266 = fmul float %258, %227, !dbg !32
  %267 = fmul float %259, %225, !dbg !32
  %268 = fmul float %260, %223, !dbg !32
  %269 = fmul float %261, %221, !dbg !32
  %270 = fmul float %262, %219, !dbg !32
  %271 = fmul float %263, %217, !dbg !32
  %272 = fadd float %264, %215, !dbg !33
  %273 = fadd float %265, %213, !dbg !33
  %274 = fadd float %266, %211, !dbg !33
  %275 = fadd float %267, %209, !dbg !33
  %276 = fadd float %268, %207, !dbg !33
  %277 = fadd float %269, %205, !dbg !33
  %278 = fadd float %270, %203, !dbg !33
  %279 = fadd float %271, %201, !dbg !33
  %280 = fadd float %272, %247, !dbg !34
  %281 = fadd float %273, %245, !dbg !34
  %282 = fadd float %274, %243, !dbg !34
  %283 = fadd float %275, %241, !dbg !34
  %284 = fadd float %276, %239, !dbg !34
  %285 = fadd float %277, %237, !dbg !34
  %286 = fadd float %278, %235, !dbg !34
  %287 = fadd float %279, %233, !dbg !34
  %288 = getelementptr float, ptr addrspace(1) %6, i64 %17, !dbg !35
  %289 = getelementptr float, ptr addrspace(1) %6, i64 %19, !dbg !35
  %290 = bitcast float %280 to i32, !dbg !36
  %291 = bitcast float %281 to i32, !dbg !36
  %292 = bitcast float %282 to i32, !dbg !36
  %293 = bitcast float %283 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %290, i32 %291, i32 %292, i32 %293, ptr addrspace(1) %288, i1 true) #3, !dbg !36
  %294 = bitcast float %284 to i32, !dbg !36
  %295 = bitcast float %285 to i32, !dbg !36
  %296 = bitcast float %286 to i32, !dbg !36
  %297 = bitcast float %287 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %294, i32 %295, i32 %296, i32 %297, ptr addrspace(1) %289, i1 true) #3, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctpxhwkbili3jviq3ivmvpg6z5k7y3nts75utf7t52squfflwrju.py", directory: "inductor_cache/tp")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 35, column: 26, scope: !7)
!29 = !DILocation(line: 32, column: 18, scope: !7)
!30 = !DILocation(line: 37, column: 18, scope: !7)
!31 = !DILocation(line: 40, column: 19, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 42, column: 20, scope: !7)
!34 = !DILocation(line: 43, column: 19, scope: !7)
!35 = !DILocation(line: 44, column: 25, scope: !7)
!36 = !DILocation(line: 44, column: 37, scope: !7)
!37 = !DILocation(line: 44, column: 4, scope: !7)
