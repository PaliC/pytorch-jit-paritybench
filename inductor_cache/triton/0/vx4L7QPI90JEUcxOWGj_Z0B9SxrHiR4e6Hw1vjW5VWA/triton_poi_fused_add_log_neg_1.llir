; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_log_neg_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = icmp slt i32 %13, 512, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %16 = sdiv i32 %.frozen, 64, !dbg !15
  %17 = mul i32 %16, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = srem i32 %14, 64, !dbg !16
  %19 = srem i32 %16, 2, !dbg !17
  %20 = sdiv i32 %13, 128, !dbg !18
  %21 = sext i32 %13 to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !19
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 %15) #3, !dbg !20
  %24 = shl nsw i32 %19, 3, !dbg !21
  %25 = shl nsw i32 %20, 4, !dbg !22
  %26 = add nsw i32 %24, %25, !dbg !23
  %.lhs.trunc = trunc nsw i32 %.decomposed to i8, !dbg !24
  %27 = sdiv i8 %.lhs.trunc, 8, !dbg !24
  %.sext = sext i8 %27 to i32, !dbg !24
  %.lhs.trunc36 = trunc nsw i32 %18 to i8, !dbg !24
  %28 = sdiv i8 %.lhs.trunc36, 8, !dbg !24
  %.sext37 = sext i8 %28 to i32, !dbg !24
  %29 = add nsw i32 %26, %.sext, !dbg !25
  %30 = add nsw i32 %26, %.sext37, !dbg !25
  %31 = sext i32 %29 to i64, !dbg !26
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !26
  %33 = sext i32 %30 to i64, !dbg !26
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !26
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %15) #3, !dbg !27
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %15) #3, !dbg !27
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !28
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !28
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %15) #3, !dbg !29
  %40 = bitcast i32 %39 to float, !dbg !29
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %15) #3, !dbg !29
  %42 = bitcast i32 %41 to float, !dbg !29
  %43 = srem i32 %13, 8, !dbg !30
  %44 = sext i32 %43 to i64, !dbg !31
  %45 = getelementptr float, ptr addrspace(1) %4, i64 %44, !dbg !31
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %15) #3, !dbg !32
  %47 = getelementptr float, ptr addrspace(1) %5, i64 %44, !dbg !33
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 %15) #3, !dbg !34
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !35
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 %15) #3, !dbg !36
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !36
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !36
  %53 = bitcast i32 %51 to float, !dbg !36
  %54 = bitcast i32 %52 to float, !dbg !36
  %55 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %40, float 8.000000e+00) #3, !dbg !37
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %42, float 8.000000e+00) #3, !dbg !37
  %57 = fadd float %55, 0x3EE4F8B580000000, !dbg !38
  %58 = fadd float %56, 0x3EE4F8B580000000, !dbg !38
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i = icmp eq i32 %59, 0, !dbg !39
  br i1 %.not.i, label %62, label %60, !dbg !39

60:                                               ; preds = %7
  %61 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %57), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

62:                                               ; preds = %7
  %63 = tail call float @llvm.nvvm.rsqrt.approx.f(float %57), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

__nv_rsqrtf.exit:                                 ; preds = %60, %62
  %.0.i = phi float [ %61, %60 ], [ %63, %62 ], !dbg !39
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i1 = icmp eq i32 %64, 0, !dbg !39
  br i1 %.not.i1, label %67, label %65, !dbg !39

65:                                               ; preds = %__nv_rsqrtf.exit
  %66 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %58), !dbg !39
  br label %__nv_rsqrtf.exit3, !dbg !39

67:                                               ; preds = %__nv_rsqrtf.exit
  %68 = tail call float @llvm.nvvm.rsqrt.approx.f(float %58), !dbg !39
  br label %__nv_rsqrtf.exit3, !dbg !39

__nv_rsqrtf.exit3:                                ; preds = %65, %67
  %.0.i2 = phi float [ %66, %65 ], [ %68, %67 ], !dbg !39
  %69 = fcmp olt float %53, 0x3810000000000000, !dbg !40
  %70 = fmul float %53, 0x4160000000000000, !dbg !40
  %.02.i = select i1 %69, float %70, float %53, !dbg !40
  %i.i.0.i = select i1 %69, float -2.300000e+01, float 0.000000e+00, !dbg !40
  %71 = bitcast float %.02.i to i32, !dbg !40
  %72 = add i32 %71, -1059760811, !dbg !40
  %73 = and i32 %72, -8388608, !dbg !40
  %74 = sub i32 %71, %73, !dbg !40
  %75 = bitcast i32 %74 to float, !dbg !40
  %76 = sitofp i32 %73 to float, !dbg !40
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i4 = icmp eq i32 %77, 0, !dbg !40
  %78 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %76, float 0x3E80000000000000, float %i.i.0.i) #3, !dbg !40
  %79 = tail call float @llvm.nvvm.fma.rn.f(float %76, float 0x3E80000000000000, float %i.i.0.i) #3, !dbg !40
  %.08.i = select i1 %.not.i4, float %79, float %78, !dbg !40
  %80 = fadd float %75, -1.000000e+00, !dbg !40
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not1.i = icmp eq i32 %81, 0, !dbg !40
  %82 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %80, float 0x3FC2073EC0000000) #3, !dbg !40
  %83 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %80, float 0x3FC2073EC0000000) #3, !dbg !40
  %.010.i = select i1 %.not1.i, float %83, float %82, !dbg !40
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not2.i = icmp eq i32 %84, 0, !dbg !40
  %85 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %80, float 0xBFBF19B980000000) #3, !dbg !40
  %86 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %80, float 0xBFBF19B980000000) #3, !dbg !40
  %.011.i = select i1 %.not2.i, float %86, float %85, !dbg !40
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not3.i = icmp eq i32 %87, 0, !dbg !40
  %88 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %80, float 0x3FC1E52AA0000000) #3, !dbg !40
  %89 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %80, float 0x3FC1E52AA0000000) #3, !dbg !40
  %.012.i = select i1 %.not3.i, float %89, float %88, !dbg !40
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not4.i = icmp eq i32 %90, 0, !dbg !40
  %91 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %80, float 0xBFC55B1720000000) #3, !dbg !40
  %92 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %80, float 0xBFC55B1720000000) #3, !dbg !40
  %.09.i = select i1 %.not4.i, float %92, float %91, !dbg !40
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not5.i = icmp eq i32 %93, 0, !dbg !40
  %94 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %80, float 0x3FC99DA160000000) #3, !dbg !40
  %95 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %80, float 0x3FC99DA160000000) #3, !dbg !40
  %.05.i = select i1 %.not5.i, float %95, float %94, !dbg !40
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not6.i = icmp eq i32 %96, 0, !dbg !40
  %97 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %80, float 0xBFCFFFE440000000) #3, !dbg !40
  %98 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %80, float 0xBFCFFFE440000000) #3, !dbg !40
  %.01.i = select i1 %.not6.i, float %98, float %97, !dbg !40
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not7.i = icmp eq i32 %99, 0, !dbg !40
  %100 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %80, float 0x3FD5554F00000000) #3, !dbg !40
  %101 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %80, float 0x3FD5554F00000000) #3, !dbg !40
  %.0.i5 = select i1 %.not7.i, float %101, float %100, !dbg !40
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not8.i = icmp eq i32 %102, 0, !dbg !40
  %103 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i5, float %80, float -5.000000e-01) #3, !dbg !40
  %104 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i5, float %80, float -5.000000e-01) #3, !dbg !40
  %.07.i = select i1 %.not8.i, float %104, float %103, !dbg !40
  %105 = fmul float %80, %.07.i, !dbg !40
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not9.i = icmp eq i32 %106, 0, !dbg !40
  %107 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %105, float %80, float %80) #3, !dbg !40
  %108 = tail call float @llvm.nvvm.fma.rn.f(float %105, float %80, float %80) #3, !dbg !40
  %.06.i = select i1 %.not9.i, float %108, float %107, !dbg !40
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not10.i = icmp eq i32 %109, 0, !dbg !40
  %110 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #3, !dbg !40
  %111 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #3, !dbg !40
  %.04.i = select i1 %.not10.i, float %111, float %110, !dbg !40
  %112 = icmp ugt i32 %71, 2139095039, !dbg !40
  br i1 %112, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !40

__nv_fmaf_rn.exit.i.i:                            ; preds = %__nv_rsqrtf.exit3
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not11.i = icmp eq i32 %113, 0, !dbg !40
  %114 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #3, !dbg !40
  %115 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #3, !dbg !40
  %.03.i = select i1 %.not11.i, float %115, float %114, !dbg !40
  br label %__nv_logf.exit, !dbg !40

__nv_logf.exit:                                   ; preds = %__nv_rsqrtf.exit3, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %__nv_rsqrtf.exit3 ], !dbg !40
  %116 = fcmp olt float %54, 0x3810000000000000, !dbg !40
  %117 = fmul float %54, 0x4160000000000000, !dbg !40
  %.02.i6 = select i1 %116, float %117, float %54, !dbg !40
  %i.i.0.i7 = select i1 %116, float -2.300000e+01, float 0.000000e+00, !dbg !40
  %118 = bitcast float %.02.i6 to i32, !dbg !40
  %119 = add i32 %118, -1059760811, !dbg !40
  %120 = and i32 %119, -8388608, !dbg !40
  %121 = sub i32 %118, %120, !dbg !40
  %122 = bitcast i32 %121 to float, !dbg !40
  %123 = sitofp i32 %120 to float, !dbg !40
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i8 = icmp eq i32 %124, 0, !dbg !40
  %125 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %123, float 0x3E80000000000000, float %i.i.0.i7) #3, !dbg !40
  %126 = tail call float @llvm.nvvm.fma.rn.f(float %123, float 0x3E80000000000000, float %i.i.0.i7) #3, !dbg !40
  %.08.i9 = select i1 %.not.i8, float %126, float %125, !dbg !40
  %127 = fadd float %122, -1.000000e+00, !dbg !40
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not1.i10 = icmp eq i32 %128, 0, !dbg !40
  %129 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %127, float 0x3FC2073EC0000000) #3, !dbg !40
  %130 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %127, float 0x3FC2073EC0000000) #3, !dbg !40
  %.010.i11 = select i1 %.not1.i10, float %130, float %129, !dbg !40
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not2.i12 = icmp eq i32 %131, 0, !dbg !40
  %132 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i11, float %127, float 0xBFBF19B980000000) #3, !dbg !40
  %133 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i11, float %127, float 0xBFBF19B980000000) #3, !dbg !40
  %.011.i13 = select i1 %.not2.i12, float %133, float %132, !dbg !40
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not3.i14 = icmp eq i32 %134, 0, !dbg !40
  %135 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i13, float %127, float 0x3FC1E52AA0000000) #3, !dbg !40
  %136 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i13, float %127, float 0x3FC1E52AA0000000) #3, !dbg !40
  %.012.i15 = select i1 %.not3.i14, float %136, float %135, !dbg !40
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not4.i16 = icmp eq i32 %137, 0, !dbg !40
  %138 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i15, float %127, float 0xBFC55B1720000000) #3, !dbg !40
  %139 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i15, float %127, float 0xBFC55B1720000000) #3, !dbg !40
  %.09.i17 = select i1 %.not4.i16, float %139, float %138, !dbg !40
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not5.i18 = icmp eq i32 %140, 0, !dbg !40
  %141 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i17, float %127, float 0x3FC99DA160000000) #3, !dbg !40
  %142 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i17, float %127, float 0x3FC99DA160000000) #3, !dbg !40
  %.05.i19 = select i1 %.not5.i18, float %142, float %141, !dbg !40
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not6.i20 = icmp eq i32 %143, 0, !dbg !40
  %144 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i19, float %127, float 0xBFCFFFE440000000) #3, !dbg !40
  %145 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i19, float %127, float 0xBFCFFFE440000000) #3, !dbg !40
  %.01.i21 = select i1 %.not6.i20, float %145, float %144, !dbg !40
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not7.i22 = icmp eq i32 %146, 0, !dbg !40
  %147 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i21, float %127, float 0x3FD5554F00000000) #3, !dbg !40
  %148 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i21, float %127, float 0x3FD5554F00000000) #3, !dbg !40
  %.0.i23 = select i1 %.not7.i22, float %148, float %147, !dbg !40
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not8.i24 = icmp eq i32 %149, 0, !dbg !40
  %150 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i23, float %127, float -5.000000e-01) #3, !dbg !40
  %151 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i23, float %127, float -5.000000e-01) #3, !dbg !40
  %.07.i25 = select i1 %.not8.i24, float %151, float %150, !dbg !40
  %152 = fmul float %127, %.07.i25, !dbg !40
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not9.i26 = icmp eq i32 %153, 0, !dbg !40
  %154 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %152, float %127, float %127) #3, !dbg !40
  %155 = tail call float @llvm.nvvm.fma.rn.f(float %152, float %127, float %127) #3, !dbg !40
  %.06.i27 = select i1 %.not9.i26, float %155, float %154, !dbg !40
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not10.i28 = icmp eq i32 %156, 0, !dbg !40
  %157 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i9, float 0x3FE62E4300000000, float %.06.i27) #3, !dbg !40
  %158 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i9, float 0x3FE62E4300000000, float %.06.i27) #3, !dbg !40
  %.04.i29 = select i1 %.not10.i28, float %158, float %157, !dbg !40
  %159 = icmp ugt i32 %118, 2139095039, !dbg !40
  br i1 %159, label %__nv_fmaf_rn.exit.i.i32, label %__nv_logf.exit35, !dbg !40

__nv_fmaf_rn.exit.i.i32:                          ; preds = %__nv_logf.exit
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not11.i33 = icmp eq i32 %160, 0, !dbg !40
  %161 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i6, float 0x7FF0000000000000, float 0x7FF0000000000000) #3, !dbg !40
  %162 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i6, float 0x7FF0000000000000, float 0x7FF0000000000000) #3, !dbg !40
  %.03.i34 = select i1 %.not11.i33, float %162, float %161, !dbg !40
  br label %__nv_logf.exit35, !dbg !40

__nv_logf.exit35:                                 ; preds = %__nv_logf.exit, %__nv_fmaf_rn.exit.i.i32
  %r.i.0.i30 = phi float [ %.03.i34, %__nv_fmaf_rn.exit.i.i32 ], [ %.04.i29, %__nv_logf.exit ], !dbg !40
  %163 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !40
  %164 = extractvalue { i32, i32 } %23, 1, !dbg !20
  %165 = bitcast i32 %164 to float, !dbg !20
  %166 = bitcast i32 %36 to float, !dbg !27
  %167 = fsub float %165, %166, !dbg !41
  %168 = fmul float %167, %.0.i2, !dbg !42
  %169 = extractvalue { i32, i32 } %46, 1, !dbg !32
  %170 = bitcast i32 %169 to float, !dbg !32
  %171 = fmul float %168, %170, !dbg !43
  %172 = extractvalue { i32, i32 } %48, 1, !dbg !34
  %173 = bitcast i32 %172 to float, !dbg !34
  %174 = fadd float %171, %173, !dbg !44
  %175 = fcmp olt float %174, 0.000000e+00, !dbg !45
  %176 = select i1 %175, float 0.000000e+00, float %174, !dbg !49
  %177 = extractvalue { i32, i32 } %23, 0, !dbg !20
  %178 = bitcast i32 %177 to float, !dbg !20
  %179 = bitcast i32 %35 to float, !dbg !27
  %180 = fsub float %178, %179, !dbg !41
  %181 = fmul float %180, %.0.i, !dbg !42
  %182 = extractvalue { i32, i32 } %46, 0, !dbg !32
  %183 = bitcast i32 %182 to float, !dbg !32
  %184 = fmul float %181, %183, !dbg !43
  %185 = extractvalue { i32, i32 } %48, 0, !dbg !34
  %186 = bitcast i32 %185 to float, !dbg !34
  %187 = fadd float %184, %186, !dbg !44
  %188 = fcmp olt float %187, 0.000000e+00, !dbg !45
  %189 = select i1 %188, float 0.000000e+00, float %187, !dbg !49
  %190 = fcmp oeq float %.02.i6, 0.000000e+00, !dbg !40
  %191 = fsub float 0.000000e+00, %r.i.0.i, !dbg !50
  %192 = select i1 %163, float 0x7FF0000000000000, float %191, !dbg !40
  %193 = fsub float 0.000000e+00, %r.i.0.i30, !dbg !50
  %194 = select i1 %190, float 0x7FF0000000000000, float %193, !dbg !40
  %195 = fadd float %189, %192, !dbg !51
  %196 = fadd float %176, %194, !dbg !51
  %197 = bitcast float %195 to i32, !dbg !52
  %198 = bitcast float %196 to i32, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %197, i32 %198, ptr addrspace(1) %49, i1 %15) #3, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxspdzx2g6qsktjlmj5we3kx2qeqtheqt77l6jyms75o4gmtuiuy.py", directory: "inductor_cache/xs")
!4 = !{ptr @triton_poi_fused_add_log_neg_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_log_neg_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_log_neg_1", linkageName: "triton_poi_fused_add_log_neg_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 27, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 32, scope: !7)
!22 = !DILocation(line: 29, column: 40, scope: !7)
!23 = !DILocation(line: 29, column: 37, scope: !7)
!24 = !DILocation(line: 29, column: 79, scope: !7)
!25 = !DILocation(line: 29, column: 73, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 84, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 84, scope: !7)
!30 = !DILocation(line: 31, column: 37, scope: !7)
!31 = !DILocation(line: 31, column: 32, scope: !7)
!32 = !DILocation(line: 31, column: 42, scope: !7)
!33 = !DILocation(line: 32, column: 32, scope: !7)
!34 = !DILocation(line: 32, column: 42, scope: !7)
!35 = !DILocation(line: 33, column: 35, scope: !7)
!36 = !DILocation(line: 33, column: 40, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 18, scope: !7)
!39 = !DILocation(line: 39, column: 27, scope: !7)
!40 = !DILocation(line: 45, column: 24, scope: !7)
!41 = !DILocation(line: 34, column: 18, scope: !7)
!42 = !DILocation(line: 40, column: 18, scope: !7)
!43 = !DILocation(line: 41, column: 19, scope: !7)
!44 = !DILocation(line: 42, column: 20, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 44, column: 42, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 46, column: 13, scope: !7)
!51 = !DILocation(line: 47, column: 20, scope: !7)
!52 = !DILocation(line: 50, column: 40, scope: !7)
!53 = !DILocation(line: 50, column: 4, scope: !7)
