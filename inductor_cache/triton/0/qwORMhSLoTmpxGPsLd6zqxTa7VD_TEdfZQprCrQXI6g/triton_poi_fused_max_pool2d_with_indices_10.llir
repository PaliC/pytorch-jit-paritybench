; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %11 = or disjoint i32 %7, 1, !dbg !13
  %12 = or disjoint i32 %7, 2, !dbg !13
  %13 = or disjoint i32 %7, 3, !dbg !13
  %14 = or disjoint i32 %7, 4, !dbg !13
  %15 = or disjoint i32 %7, 5, !dbg !13
  %16 = or disjoint i32 %7, 6, !dbg !13
  %17 = or disjoint i32 %7, 7, !dbg !13
  %18 = or disjoint i32 %7, 8, !dbg !13
  %19 = or disjoint i32 %7, 9, !dbg !13
  %20 = or disjoint i32 %7, 10, !dbg !13
  %21 = or disjoint i32 %7, 11, !dbg !13
  %22 = or disjoint i32 %7, 12, !dbg !13
  %23 = or disjoint i32 %7, 13, !dbg !13
  %24 = or disjoint i32 %7, 14, !dbg !13
  %25 = or disjoint i32 %7, 15, !dbg !13
  %26 = or disjoint i32 %7, %10, !dbg !13
  %27 = icmp slt i32 %7, 256, !dbg !14
  %28 = icmp slt i32 %11, 256, !dbg !14
  %29 = icmp slt i32 %12, 256, !dbg !14
  %30 = icmp slt i32 %13, 256, !dbg !14
  %31 = icmp slt i32 %14, 256, !dbg !14
  %32 = icmp slt i32 %15, 256, !dbg !14
  %33 = icmp slt i32 %16, 256, !dbg !14
  %34 = icmp slt i32 %17, 256, !dbg !14
  %35 = icmp slt i32 %18, 256, !dbg !14
  %36 = icmp slt i32 %19, 256, !dbg !14
  %37 = icmp slt i32 %20, 256, !dbg !14
  %38 = icmp slt i32 %21, 256, !dbg !14
  %39 = icmp slt i32 %22, 256, !dbg !14
  %40 = icmp slt i32 %23, 256, !dbg !14
  %41 = icmp slt i32 %24, 256, !dbg !14
  %42 = icmp slt i32 %25, 256, !dbg !14
  %43 = icmp slt i32 %26, 256, !dbg !14
  %44 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %45 = shl i32 %44, 8, !dbg !16
  %46 = and i32 %8, 255, !dbg !17
  %47 = lshr i32 %8, 2, !dbg !17
  %48 = and i32 %47, 63, !dbg !17
  %49 = or disjoint i32 %45, %46, !dbg !18
  %50 = or disjoint i32 %45, %48, !dbg !18
  %51 = or disjoint i32 %50, 64, !dbg !18
  %52 = or disjoint i32 %50, 128, !dbg !18
  %53 = or disjoint i32 %50, 192, !dbg !18
  %54 = icmp slt i32 %49, 256, !dbg !19
  %55 = icmp slt i32 %50, 256, !dbg !19
  %56 = icmp slt i32 %51, 256, !dbg !19
  %57 = icmp slt i32 %52, 256, !dbg !19
  %58 = icmp slt i32 %53, 256, !dbg !19
  %.frozen = freeze i32 %49, !dbg !20
  %59 = sdiv i32 %.frozen, 16, !dbg !20
  %60 = mul i32 %59, 16, !dbg !21
  %.decomposed = sub i32 %.frozen, %60, !dbg !21
  %.frozen60 = freeze i32 %26, !dbg !22
  %61 = sdiv i32 %.frozen60, 64, !dbg !22
  %62 = mul i32 %61, 64, !dbg !23
  %.decomposed61 = sub i32 %.frozen60, %62, !dbg !23
  %.frozen62 = freeze i32 %7, !dbg !22
  %63 = sdiv i32 %.frozen62, 64, !dbg !22
  %64 = mul i32 %63, 64, !dbg !23
  %.decomposed63 = sub i32 %.frozen62, %64, !dbg !23
  %65 = shl nsw i32 %59, 1, !dbg !24
  %66 = shl nsw i32 %.decomposed, 1, !dbg !25
  %67 = icmp sgt i32 %.decomposed, 0, !dbg !26
  %68 = shl i32 %59, 6, !dbg !27
  %69 = add i32 %68, %66, !dbg !28
  %70 = add i32 %69, -33, !dbg !29
  %71 = shl i32 %6, 14, !dbg !30
  %72 = shl i32 %11, 10, !dbg !30
  %73 = shl i32 %12, 10, !dbg !30
  %74 = shl i32 %13, 10, !dbg !30
  %75 = shl i32 %14, 10, !dbg !30
  %76 = shl i32 %15, 10, !dbg !30
  %77 = shl i32 %16, 10, !dbg !30
  %78 = shl i32 %17, 10, !dbg !30
  %79 = shl i32 %18, 10, !dbg !30
  %80 = shl i32 %19, 10, !dbg !30
  %81 = shl i32 %20, 10, !dbg !30
  %82 = shl i32 %21, 10, !dbg !30
  %83 = shl i32 %22, 10, !dbg !30
  %84 = shl i32 %23, 10, !dbg !30
  %85 = shl i32 %24, 10, !dbg !30
  %86 = shl i32 %25, 10, !dbg !30
  %87 = add i32 %70, %71, !dbg !31
  %88 = add i32 %70, %72, !dbg !31
  %89 = add i32 %70, %73, !dbg !31
  %90 = add i32 %70, %74, !dbg !31
  %91 = add i32 %70, %75, !dbg !31
  %92 = add i32 %70, %76, !dbg !31
  %93 = add i32 %70, %77, !dbg !31
  %94 = add i32 %70, %78, !dbg !31
  %95 = add i32 %70, %79, !dbg !31
  %96 = add i32 %70, %80, !dbg !31
  %97 = add i32 %70, %81, !dbg !31
  %98 = add i32 %70, %82, !dbg !31
  %99 = add i32 %70, %83, !dbg !31
  %100 = add i32 %70, %84, !dbg !31
  %101 = add i32 %70, %85, !dbg !31
  %102 = add i32 %70, %86, !dbg !31
  %103 = sext i32 %87 to i64, !dbg !32
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !32
  %105 = sext i32 %88 to i64, !dbg !32
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !32
  %107 = sext i32 %89 to i64, !dbg !32
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !32
  %109 = sext i32 %90 to i64, !dbg !32
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !32
  %111 = sext i32 %91 to i64, !dbg !32
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !32
  %113 = sext i32 %92 to i64, !dbg !32
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !32
  %115 = sext i32 %93 to i64, !dbg !32
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !32
  %117 = sext i32 %94 to i64, !dbg !32
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !32
  %119 = sext i32 %95 to i64, !dbg !32
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !32
  %121 = sext i32 %96 to i64, !dbg !32
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !32
  %123 = sext i32 %97 to i64, !dbg !32
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !32
  %125 = sext i32 %98 to i64, !dbg !32
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !32
  %127 = sext i32 %99 to i64, !dbg !32
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !32
  %129 = sext i32 %100 to i64, !dbg !32
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !32
  %131 = sext i32 %101 to i64, !dbg !32
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !32
  %133 = sext i32 %102 to i64, !dbg !32
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !32
  %135 = add i32 %49, -16, !dbg !33
  %136 = icmp ult i32 %135, 240, !dbg !33
  %137 = and i1 %136, %67, !dbg !33
  %138 = and i1 %27, %137, !dbg !34
  %139 = and i1 %28, %137, !dbg !34
  %140 = and i1 %29, %137, !dbg !34
  %141 = and i1 %30, %137, !dbg !34
  %142 = and i1 %31, %137, !dbg !34
  %143 = and i1 %32, %137, !dbg !34
  %144 = and i1 %33, %137, !dbg !34
  %145 = and i1 %34, %137, !dbg !34
  %146 = and i1 %35, %137, !dbg !34
  %147 = and i1 %36, %137, !dbg !34
  %148 = and i1 %37, %137, !dbg !34
  %149 = and i1 %38, %137, !dbg !34
  %150 = and i1 %39, %137, !dbg !34
  %151 = and i1 %40, %137, !dbg !34
  %152 = and i1 %41, %137, !dbg !34
  %153 = and i1 %42, %137, !dbg !34
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %138, i32 -8388608, i1 %138) #2, !dbg !35
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %139, i32 -8388608, i1 %139) #2, !dbg !35
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %140, i32 -8388608, i1 %140) #2, !dbg !35
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %141, i32 -8388608, i1 %141) #2, !dbg !35
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %142, i32 -8388608, i1 %142) #2, !dbg !35
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %143, i32 -8388608, i1 %143) #2, !dbg !35
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %144, i32 -8388608, i1 %144) #2, !dbg !35
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %145, i32 -8388608, i1 %145) #2, !dbg !35
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %146, i32 -8388608, i1 %146) #2, !dbg !35
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %147, i32 -8388608, i1 %147) #2, !dbg !35
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %148, i32 -8388608, i1 %148) #2, !dbg !35
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %149, i32 -8388608, i1 %149) #2, !dbg !35
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %150, i32 -8388608, i1 %150) #2, !dbg !35
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %151, i32 -8388608, i1 %151) #2, !dbg !35
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %152, i32 -8388608, i1 %152) #2, !dbg !35
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %153, i32 -8388608, i1 %153) #2, !dbg !35
  %170 = icmp sgt i32 %.decomposed, -1, !dbg !36
  %171 = add i32 %69, -32, !dbg !37
  %172 = add i32 %171, %71, !dbg !38
  %173 = add i32 %171, %72, !dbg !38
  %174 = add i32 %171, %73, !dbg !38
  %175 = add i32 %171, %74, !dbg !38
  %176 = add i32 %171, %75, !dbg !38
  %177 = add i32 %171, %76, !dbg !38
  %178 = add i32 %171, %77, !dbg !38
  %179 = add i32 %171, %78, !dbg !38
  %180 = add i32 %171, %79, !dbg !38
  %181 = add i32 %171, %80, !dbg !38
  %182 = add i32 %171, %81, !dbg !38
  %183 = add i32 %171, %82, !dbg !38
  %184 = add i32 %171, %83, !dbg !38
  %185 = add i32 %171, %84, !dbg !38
  %186 = add i32 %171, %85, !dbg !38
  %187 = add i32 %171, %86, !dbg !38
  %188 = sext i32 %172 to i64, !dbg !39
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %188, !dbg !39
  %190 = sext i32 %173 to i64, !dbg !39
  %191 = getelementptr float, ptr addrspace(1) %0, i64 %190, !dbg !39
  %192 = sext i32 %174 to i64, !dbg !39
  %193 = getelementptr float, ptr addrspace(1) %0, i64 %192, !dbg !39
  %194 = sext i32 %175 to i64, !dbg !39
  %195 = getelementptr float, ptr addrspace(1) %0, i64 %194, !dbg !39
  %196 = sext i32 %176 to i64, !dbg !39
  %197 = getelementptr float, ptr addrspace(1) %0, i64 %196, !dbg !39
  %198 = sext i32 %177 to i64, !dbg !39
  %199 = getelementptr float, ptr addrspace(1) %0, i64 %198, !dbg !39
  %200 = sext i32 %178 to i64, !dbg !39
  %201 = getelementptr float, ptr addrspace(1) %0, i64 %200, !dbg !39
  %202 = sext i32 %179 to i64, !dbg !39
  %203 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !39
  %204 = sext i32 %180 to i64, !dbg !39
  %205 = getelementptr float, ptr addrspace(1) %0, i64 %204, !dbg !39
  %206 = sext i32 %181 to i64, !dbg !39
  %207 = getelementptr float, ptr addrspace(1) %0, i64 %206, !dbg !39
  %208 = sext i32 %182 to i64, !dbg !39
  %209 = getelementptr float, ptr addrspace(1) %0, i64 %208, !dbg !39
  %210 = sext i32 %183 to i64, !dbg !39
  %211 = getelementptr float, ptr addrspace(1) %0, i64 %210, !dbg !39
  %212 = sext i32 %184 to i64, !dbg !39
  %213 = getelementptr float, ptr addrspace(1) %0, i64 %212, !dbg !39
  %214 = sext i32 %185 to i64, !dbg !39
  %215 = getelementptr float, ptr addrspace(1) %0, i64 %214, !dbg !39
  %216 = sext i32 %186 to i64, !dbg !39
  %217 = getelementptr float, ptr addrspace(1) %0, i64 %216, !dbg !39
  %218 = sext i32 %187 to i64, !dbg !39
  %219 = getelementptr float, ptr addrspace(1) %0, i64 %218, !dbg !39
  %220 = and i1 %136, %170, !dbg !40
  %221 = and i1 %27, %220, !dbg !41
  %222 = and i1 %28, %220, !dbg !41
  %223 = and i1 %29, %220, !dbg !41
  %224 = and i1 %30, %220, !dbg !41
  %225 = and i1 %31, %220, !dbg !41
  %226 = and i1 %32, %220, !dbg !41
  %227 = and i1 %33, %220, !dbg !41
  %228 = and i1 %34, %220, !dbg !41
  %229 = and i1 %35, %220, !dbg !41
  %230 = and i1 %36, %220, !dbg !41
  %231 = and i1 %37, %220, !dbg !41
  %232 = and i1 %38, %220, !dbg !41
  %233 = and i1 %39, %220, !dbg !41
  %234 = and i1 %40, %220, !dbg !41
  %235 = and i1 %41, %220, !dbg !41
  %236 = and i1 %42, %220, !dbg !41
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %189, i1 %221, i32 -8388608, i1 %221) #2, !dbg !42
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %191, i1 %222, i32 -8388608, i1 %222) #2, !dbg !42
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %193, i1 %223, i32 -8388608, i1 %223) #2, !dbg !42
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %195, i1 %224, i32 -8388608, i1 %224) #2, !dbg !42
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %197, i1 %225, i32 -8388608, i1 %225) #2, !dbg !42
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %199, i1 %226, i32 -8388608, i1 %226) #2, !dbg !42
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %201, i1 %227, i32 -8388608, i1 %227) #2, !dbg !42
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %203, i1 %228, i32 -8388608, i1 %228) #2, !dbg !42
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %205, i1 %229, i32 -8388608, i1 %229) #2, !dbg !42
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %207, i1 %230, i32 -8388608, i1 %230) #2, !dbg !42
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %209, i1 %231, i32 -8388608, i1 %231) #2, !dbg !42
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %211, i1 %232, i32 -8388608, i1 %232) #2, !dbg !42
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %213, i1 %233, i32 -8388608, i1 %233) #2, !dbg !42
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %215, i1 %234, i32 -8388608, i1 %234) #2, !dbg !42
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %217, i1 %235, i32 -8388608, i1 %235) #2, !dbg !42
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %219, i1 %236, i32 -8388608, i1 %236) #2, !dbg !42
  %253 = or disjoint i32 %66, 1, !dbg !43
  %254 = add i32 %69, -31, !dbg !44
  %255 = add i32 %254, %71, !dbg !45
  %256 = add i32 %254, %72, !dbg !45
  %257 = add i32 %254, %73, !dbg !45
  %258 = add i32 %254, %74, !dbg !45
  %259 = add i32 %254, %75, !dbg !45
  %260 = add i32 %254, %76, !dbg !45
  %261 = add i32 %254, %77, !dbg !45
  %262 = add i32 %254, %78, !dbg !45
  %263 = add i32 %254, %79, !dbg !45
  %264 = add i32 %254, %80, !dbg !45
  %265 = add i32 %254, %81, !dbg !45
  %266 = add i32 %254, %82, !dbg !45
  %267 = add i32 %254, %83, !dbg !45
  %268 = add i32 %254, %84, !dbg !45
  %269 = add i32 %254, %85, !dbg !45
  %270 = add i32 %254, %86, !dbg !45
  %271 = sext i32 %255 to i64, !dbg !46
  %272 = getelementptr float, ptr addrspace(1) %0, i64 %271, !dbg !46
  %273 = sext i32 %256 to i64, !dbg !46
  %274 = getelementptr float, ptr addrspace(1) %0, i64 %273, !dbg !46
  %275 = sext i32 %257 to i64, !dbg !46
  %276 = getelementptr float, ptr addrspace(1) %0, i64 %275, !dbg !46
  %277 = sext i32 %258 to i64, !dbg !46
  %278 = getelementptr float, ptr addrspace(1) %0, i64 %277, !dbg !46
  %279 = sext i32 %259 to i64, !dbg !46
  %280 = getelementptr float, ptr addrspace(1) %0, i64 %279, !dbg !46
  %281 = sext i32 %260 to i64, !dbg !46
  %282 = getelementptr float, ptr addrspace(1) %0, i64 %281, !dbg !46
  %283 = sext i32 %261 to i64, !dbg !46
  %284 = getelementptr float, ptr addrspace(1) %0, i64 %283, !dbg !46
  %285 = sext i32 %262 to i64, !dbg !46
  %286 = getelementptr float, ptr addrspace(1) %0, i64 %285, !dbg !46
  %287 = sext i32 %263 to i64, !dbg !46
  %288 = getelementptr float, ptr addrspace(1) %0, i64 %287, !dbg !46
  %289 = sext i32 %264 to i64, !dbg !46
  %290 = getelementptr float, ptr addrspace(1) %0, i64 %289, !dbg !46
  %291 = sext i32 %265 to i64, !dbg !46
  %292 = getelementptr float, ptr addrspace(1) %0, i64 %291, !dbg !46
  %293 = sext i32 %266 to i64, !dbg !46
  %294 = getelementptr float, ptr addrspace(1) %0, i64 %293, !dbg !46
  %295 = sext i32 %267 to i64, !dbg !46
  %296 = getelementptr float, ptr addrspace(1) %0, i64 %295, !dbg !46
  %297 = sext i32 %268 to i64, !dbg !46
  %298 = getelementptr float, ptr addrspace(1) %0, i64 %297, !dbg !46
  %299 = sext i32 %269 to i64, !dbg !46
  %300 = getelementptr float, ptr addrspace(1) %0, i64 %299, !dbg !46
  %301 = sext i32 %270 to i64, !dbg !46
  %302 = getelementptr float, ptr addrspace(1) %0, i64 %301, !dbg !46
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %272, i1 %221, i32 -8388608, i1 %221) #2, !dbg !47
  %304 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %274, i1 %222, i32 -8388608, i1 %222) #2, !dbg !47
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %276, i1 %223, i32 -8388608, i1 %223) #2, !dbg !47
  %306 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %278, i1 %224, i32 -8388608, i1 %224) #2, !dbg !47
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %280, i1 %225, i32 -8388608, i1 %225) #2, !dbg !47
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %282, i1 %226, i32 -8388608, i1 %226) #2, !dbg !47
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %284, i1 %227, i32 -8388608, i1 %227) #2, !dbg !47
  %310 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %286, i1 %228, i32 -8388608, i1 %228) #2, !dbg !47
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %288, i1 %229, i32 -8388608, i1 %229) #2, !dbg !47
  %312 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %290, i1 %230, i32 -8388608, i1 %230) #2, !dbg !47
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %292, i1 %231, i32 -8388608, i1 %231) #2, !dbg !47
  %314 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %294, i1 %232, i32 -8388608, i1 %232) #2, !dbg !47
  %315 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %296, i1 %233, i32 -8388608, i1 %233) #2, !dbg !47
  %316 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %298, i1 %234, i32 -8388608, i1 %234) #2, !dbg !47
  %317 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %300, i1 %235, i32 -8388608, i1 %235) #2, !dbg !47
  %318 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %302, i1 %236, i32 -8388608, i1 %236) #2, !dbg !47
  %319 = add i32 %69, -1, !dbg !48
  %320 = add i32 %319, %71, !dbg !49
  %321 = add i32 %319, %72, !dbg !49
  %322 = add i32 %319, %73, !dbg !49
  %323 = add i32 %319, %74, !dbg !49
  %324 = add i32 %319, %75, !dbg !49
  %325 = add i32 %319, %76, !dbg !49
  %326 = add i32 %319, %77, !dbg !49
  %327 = add i32 %319, %78, !dbg !49
  %328 = add i32 %319, %79, !dbg !49
  %329 = add i32 %319, %80, !dbg !49
  %330 = add i32 %319, %81, !dbg !49
  %331 = add i32 %319, %82, !dbg !49
  %332 = add i32 %319, %83, !dbg !49
  %333 = add i32 %319, %84, !dbg !49
  %334 = add i32 %319, %85, !dbg !49
  %335 = add i32 %319, %86, !dbg !49
  %336 = sext i32 %320 to i64, !dbg !50
  %337 = getelementptr float, ptr addrspace(1) %0, i64 %336, !dbg !50
  %338 = sext i32 %321 to i64, !dbg !50
  %339 = getelementptr float, ptr addrspace(1) %0, i64 %338, !dbg !50
  %340 = sext i32 %322 to i64, !dbg !50
  %341 = getelementptr float, ptr addrspace(1) %0, i64 %340, !dbg !50
  %342 = sext i32 %323 to i64, !dbg !50
  %343 = getelementptr float, ptr addrspace(1) %0, i64 %342, !dbg !50
  %344 = sext i32 %324 to i64, !dbg !50
  %345 = getelementptr float, ptr addrspace(1) %0, i64 %344, !dbg !50
  %346 = sext i32 %325 to i64, !dbg !50
  %347 = getelementptr float, ptr addrspace(1) %0, i64 %346, !dbg !50
  %348 = sext i32 %326 to i64, !dbg !50
  %349 = getelementptr float, ptr addrspace(1) %0, i64 %348, !dbg !50
  %350 = sext i32 %327 to i64, !dbg !50
  %351 = getelementptr float, ptr addrspace(1) %0, i64 %350, !dbg !50
  %352 = sext i32 %328 to i64, !dbg !50
  %353 = getelementptr float, ptr addrspace(1) %0, i64 %352, !dbg !50
  %354 = sext i32 %329 to i64, !dbg !50
  %355 = getelementptr float, ptr addrspace(1) %0, i64 %354, !dbg !50
  %356 = sext i32 %330 to i64, !dbg !50
  %357 = getelementptr float, ptr addrspace(1) %0, i64 %356, !dbg !50
  %358 = sext i32 %331 to i64, !dbg !50
  %359 = getelementptr float, ptr addrspace(1) %0, i64 %358, !dbg !50
  %360 = sext i32 %332 to i64, !dbg !50
  %361 = getelementptr float, ptr addrspace(1) %0, i64 %360, !dbg !50
  %362 = sext i32 %333 to i64, !dbg !50
  %363 = getelementptr float, ptr addrspace(1) %0, i64 %362, !dbg !50
  %364 = sext i32 %334 to i64, !dbg !50
  %365 = getelementptr float, ptr addrspace(1) %0, i64 %364, !dbg !50
  %366 = sext i32 %335 to i64, !dbg !50
  %367 = getelementptr float, ptr addrspace(1) %0, i64 %366, !dbg !50
  %368 = add i32 %49, 15, !dbg !51
  %369 = icmp ult i32 %368, 271, !dbg !51
  %370 = and i1 %369, %67, !dbg !51
  %371 = and i1 %27, %370, !dbg !52
  %372 = and i1 %28, %370, !dbg !52
  %373 = and i1 %29, %370, !dbg !52
  %374 = and i1 %30, %370, !dbg !52
  %375 = and i1 %31, %370, !dbg !52
  %376 = and i1 %32, %370, !dbg !52
  %377 = and i1 %33, %370, !dbg !52
  %378 = and i1 %34, %370, !dbg !52
  %379 = and i1 %35, %370, !dbg !52
  %380 = and i1 %36, %370, !dbg !52
  %381 = and i1 %37, %370, !dbg !52
  %382 = and i1 %38, %370, !dbg !52
  %383 = and i1 %39, %370, !dbg !52
  %384 = and i1 %40, %370, !dbg !52
  %385 = and i1 %41, %370, !dbg !52
  %386 = and i1 %42, %370, !dbg !52
  %387 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %337, i1 %371, i32 -8388608, i1 %371) #2, !dbg !53
  %388 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %339, i1 %372, i32 -8388608, i1 %372) #2, !dbg !53
  %389 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %341, i1 %373, i32 -8388608, i1 %373) #2, !dbg !53
  %390 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %343, i1 %374, i32 -8388608, i1 %374) #2, !dbg !53
  %391 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %345, i1 %375, i32 -8388608, i1 %375) #2, !dbg !53
  %392 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %347, i1 %376, i32 -8388608, i1 %376) #2, !dbg !53
  %393 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %349, i1 %377, i32 -8388608, i1 %377) #2, !dbg !53
  %394 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %351, i1 %378, i32 -8388608, i1 %378) #2, !dbg !53
  %395 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %353, i1 %379, i32 -8388608, i1 %379) #2, !dbg !53
  %396 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %355, i1 %380, i32 -8388608, i1 %380) #2, !dbg !53
  %397 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %357, i1 %381, i32 -8388608, i1 %381) #2, !dbg !53
  %398 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %359, i1 %382, i32 -8388608, i1 %382) #2, !dbg !53
  %399 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %361, i1 %383, i32 -8388608, i1 %383) #2, !dbg !53
  %400 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %363, i1 %384, i32 -8388608, i1 %384) #2, !dbg !53
  %401 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %365, i1 %385, i32 -8388608, i1 %385) #2, !dbg !53
  %402 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %367, i1 %386, i32 -8388608, i1 %386) #2, !dbg !53
  %403 = add i32 %69, %71, !dbg !54
  %404 = add i32 %69, %72, !dbg !54
  %405 = add i32 %69, %73, !dbg !54
  %406 = add i32 %69, %74, !dbg !54
  %407 = add i32 %69, %75, !dbg !54
  %408 = add i32 %69, %76, !dbg !54
  %409 = add i32 %69, %77, !dbg !54
  %410 = add i32 %69, %78, !dbg !54
  %411 = add i32 %69, %79, !dbg !54
  %412 = add i32 %69, %80, !dbg !54
  %413 = add i32 %69, %81, !dbg !54
  %414 = add i32 %69, %82, !dbg !54
  %415 = add i32 %69, %83, !dbg !54
  %416 = add i32 %69, %84, !dbg !54
  %417 = add i32 %69, %85, !dbg !54
  %418 = add i32 %69, %86, !dbg !54
  %419 = sext i32 %403 to i64, !dbg !55
  %420 = getelementptr float, ptr addrspace(1) %0, i64 %419, !dbg !55
  %421 = sext i32 %404 to i64, !dbg !55
  %422 = getelementptr float, ptr addrspace(1) %0, i64 %421, !dbg !55
  %423 = sext i32 %405 to i64, !dbg !55
  %424 = getelementptr float, ptr addrspace(1) %0, i64 %423, !dbg !55
  %425 = sext i32 %406 to i64, !dbg !55
  %426 = getelementptr float, ptr addrspace(1) %0, i64 %425, !dbg !55
  %427 = sext i32 %407 to i64, !dbg !55
  %428 = getelementptr float, ptr addrspace(1) %0, i64 %427, !dbg !55
  %429 = sext i32 %408 to i64, !dbg !55
  %430 = getelementptr float, ptr addrspace(1) %0, i64 %429, !dbg !55
  %431 = sext i32 %409 to i64, !dbg !55
  %432 = getelementptr float, ptr addrspace(1) %0, i64 %431, !dbg !55
  %433 = sext i32 %410 to i64, !dbg !55
  %434 = getelementptr float, ptr addrspace(1) %0, i64 %433, !dbg !55
  %435 = sext i32 %411 to i64, !dbg !55
  %436 = getelementptr float, ptr addrspace(1) %0, i64 %435, !dbg !55
  %437 = sext i32 %412 to i64, !dbg !55
  %438 = getelementptr float, ptr addrspace(1) %0, i64 %437, !dbg !55
  %439 = sext i32 %413 to i64, !dbg !55
  %440 = getelementptr float, ptr addrspace(1) %0, i64 %439, !dbg !55
  %441 = sext i32 %414 to i64, !dbg !55
  %442 = getelementptr float, ptr addrspace(1) %0, i64 %441, !dbg !55
  %443 = sext i32 %415 to i64, !dbg !55
  %444 = getelementptr float, ptr addrspace(1) %0, i64 %443, !dbg !55
  %445 = sext i32 %416 to i64, !dbg !55
  %446 = getelementptr float, ptr addrspace(1) %0, i64 %445, !dbg !55
  %447 = sext i32 %417 to i64, !dbg !55
  %448 = getelementptr float, ptr addrspace(1) %0, i64 %447, !dbg !55
  %449 = sext i32 %418 to i64, !dbg !55
  %450 = getelementptr float, ptr addrspace(1) %0, i64 %449, !dbg !55
  %451 = and i1 %369, %170, !dbg !56
  %452 = and i1 %27, %451, !dbg !57
  %453 = and i1 %28, %451, !dbg !57
  %454 = and i1 %29, %451, !dbg !57
  %455 = and i1 %30, %451, !dbg !57
  %456 = and i1 %31, %451, !dbg !57
  %457 = and i1 %32, %451, !dbg !57
  %458 = and i1 %33, %451, !dbg !57
  %459 = and i1 %34, %451, !dbg !57
  %460 = and i1 %35, %451, !dbg !57
  %461 = and i1 %36, %451, !dbg !57
  %462 = and i1 %37, %451, !dbg !57
  %463 = and i1 %38, %451, !dbg !57
  %464 = and i1 %39, %451, !dbg !57
  %465 = and i1 %40, %451, !dbg !57
  %466 = and i1 %41, %451, !dbg !57
  %467 = and i1 %42, %451, !dbg !57
  %468 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %420, i1 %452, i32 -8388608, i1 %452) #2, !dbg !58
  %469 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %422, i1 %453, i32 -8388608, i1 %453) #2, !dbg !58
  %470 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %424, i1 %454, i32 -8388608, i1 %454) #2, !dbg !58
  %471 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %426, i1 %455, i32 -8388608, i1 %455) #2, !dbg !58
  %472 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %428, i1 %456, i32 -8388608, i1 %456) #2, !dbg !58
  %473 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %430, i1 %457, i32 -8388608, i1 %457) #2, !dbg !58
  %474 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %432, i1 %458, i32 -8388608, i1 %458) #2, !dbg !58
  %475 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %434, i1 %459, i32 -8388608, i1 %459) #2, !dbg !58
  %476 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %436, i1 %460, i32 -8388608, i1 %460) #2, !dbg !58
  %477 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %438, i1 %461, i32 -8388608, i1 %461) #2, !dbg !58
  %478 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %440, i1 %462, i32 -8388608, i1 %462) #2, !dbg !58
  %479 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %442, i1 %463, i32 -8388608, i1 %463) #2, !dbg !58
  %480 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %444, i1 %464, i32 -8388608, i1 %464) #2, !dbg !58
  %481 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %446, i1 %465, i32 -8388608, i1 %465) #2, !dbg !58
  %482 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %448, i1 %466, i32 -8388608, i1 %466) #2, !dbg !58
  %483 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %450, i1 %467, i32 -8388608, i1 %467) #2, !dbg !58
  %484 = add i32 %253, %68, !dbg !59
  %485 = add i32 %484, %71, !dbg !60
  %486 = add i32 %484, %72, !dbg !60
  %487 = add i32 %484, %73, !dbg !60
  %488 = add i32 %484, %74, !dbg !60
  %489 = add i32 %484, %75, !dbg !60
  %490 = add i32 %484, %76, !dbg !60
  %491 = add i32 %484, %77, !dbg !60
  %492 = add i32 %484, %78, !dbg !60
  %493 = add i32 %484, %79, !dbg !60
  %494 = add i32 %484, %80, !dbg !60
  %495 = add i32 %484, %81, !dbg !60
  %496 = add i32 %484, %82, !dbg !60
  %497 = add i32 %484, %83, !dbg !60
  %498 = add i32 %484, %84, !dbg !60
  %499 = add i32 %484, %85, !dbg !60
  %500 = add i32 %484, %86, !dbg !60
  %501 = sext i32 %485 to i64, !dbg !61
  %502 = getelementptr float, ptr addrspace(1) %0, i64 %501, !dbg !61
  %503 = sext i32 %486 to i64, !dbg !61
  %504 = getelementptr float, ptr addrspace(1) %0, i64 %503, !dbg !61
  %505 = sext i32 %487 to i64, !dbg !61
  %506 = getelementptr float, ptr addrspace(1) %0, i64 %505, !dbg !61
  %507 = sext i32 %488 to i64, !dbg !61
  %508 = getelementptr float, ptr addrspace(1) %0, i64 %507, !dbg !61
  %509 = sext i32 %489 to i64, !dbg !61
  %510 = getelementptr float, ptr addrspace(1) %0, i64 %509, !dbg !61
  %511 = sext i32 %490 to i64, !dbg !61
  %512 = getelementptr float, ptr addrspace(1) %0, i64 %511, !dbg !61
  %513 = sext i32 %491 to i64, !dbg !61
  %514 = getelementptr float, ptr addrspace(1) %0, i64 %513, !dbg !61
  %515 = sext i32 %492 to i64, !dbg !61
  %516 = getelementptr float, ptr addrspace(1) %0, i64 %515, !dbg !61
  %517 = sext i32 %493 to i64, !dbg !61
  %518 = getelementptr float, ptr addrspace(1) %0, i64 %517, !dbg !61
  %519 = sext i32 %494 to i64, !dbg !61
  %520 = getelementptr float, ptr addrspace(1) %0, i64 %519, !dbg !61
  %521 = sext i32 %495 to i64, !dbg !61
  %522 = getelementptr float, ptr addrspace(1) %0, i64 %521, !dbg !61
  %523 = sext i32 %496 to i64, !dbg !61
  %524 = getelementptr float, ptr addrspace(1) %0, i64 %523, !dbg !61
  %525 = sext i32 %497 to i64, !dbg !61
  %526 = getelementptr float, ptr addrspace(1) %0, i64 %525, !dbg !61
  %527 = sext i32 %498 to i64, !dbg !61
  %528 = getelementptr float, ptr addrspace(1) %0, i64 %527, !dbg !61
  %529 = sext i32 %499 to i64, !dbg !61
  %530 = getelementptr float, ptr addrspace(1) %0, i64 %529, !dbg !61
  %531 = sext i32 %500 to i64, !dbg !61
  %532 = getelementptr float, ptr addrspace(1) %0, i64 %531, !dbg !61
  %533 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %502, i1 %452, i32 -8388608, i1 %452) #2, !dbg !62
  %534 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %504, i1 %453, i32 -8388608, i1 %453) #2, !dbg !62
  %535 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %506, i1 %454, i32 -8388608, i1 %454) #2, !dbg !62
  %536 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %508, i1 %455, i32 -8388608, i1 %455) #2, !dbg !62
  %537 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %510, i1 %456, i32 -8388608, i1 %456) #2, !dbg !62
  %538 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %512, i1 %457, i32 -8388608, i1 %457) #2, !dbg !62
  %539 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %514, i1 %458, i32 -8388608, i1 %458) #2, !dbg !62
  %540 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %516, i1 %459, i32 -8388608, i1 %459) #2, !dbg !62
  %541 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %518, i1 %460, i32 -8388608, i1 %460) #2, !dbg !62
  %542 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %520, i1 %461, i32 -8388608, i1 %461) #2, !dbg !62
  %543 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %522, i1 %462, i32 -8388608, i1 %462) #2, !dbg !62
  %544 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %524, i1 %463, i32 -8388608, i1 %463) #2, !dbg !62
  %545 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %526, i1 %464, i32 -8388608, i1 %464) #2, !dbg !62
  %546 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %528, i1 %465, i32 -8388608, i1 %465) #2, !dbg !62
  %547 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %530, i1 %466, i32 -8388608, i1 %466) #2, !dbg !62
  %548 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %532, i1 %467, i32 -8388608, i1 %467) #2, !dbg !62
  %549 = or disjoint i32 %65, 1, !dbg !63
  %550 = icmp sgt i32 %49, -16, !dbg !64
  %551 = icmp slt i32 %549, 32, !dbg !65
  %552 = and i1 %550, %551, !dbg !66
  %553 = and i1 %67, %552, !dbg !67
  %554 = add i32 %69, 31, !dbg !68
  %555 = add i32 %554, %71, !dbg !69
  %556 = add i32 %554, %72, !dbg !69
  %557 = add i32 %554, %73, !dbg !69
  %558 = add i32 %554, %74, !dbg !69
  %559 = add i32 %554, %75, !dbg !69
  %560 = add i32 %554, %76, !dbg !69
  %561 = add i32 %554, %77, !dbg !69
  %562 = add i32 %554, %78, !dbg !69
  %563 = add i32 %554, %79, !dbg !69
  %564 = add i32 %554, %80, !dbg !69
  %565 = add i32 %554, %81, !dbg !69
  %566 = add i32 %554, %82, !dbg !69
  %567 = add i32 %554, %83, !dbg !69
  %568 = add i32 %554, %84, !dbg !69
  %569 = add i32 %554, %85, !dbg !69
  %570 = add i32 %554, %86, !dbg !69
  %571 = sext i32 %555 to i64, !dbg !70
  %572 = getelementptr float, ptr addrspace(1) %0, i64 %571, !dbg !70
  %573 = sext i32 %556 to i64, !dbg !70
  %574 = getelementptr float, ptr addrspace(1) %0, i64 %573, !dbg !70
  %575 = sext i32 %557 to i64, !dbg !70
  %576 = getelementptr float, ptr addrspace(1) %0, i64 %575, !dbg !70
  %577 = sext i32 %558 to i64, !dbg !70
  %578 = getelementptr float, ptr addrspace(1) %0, i64 %577, !dbg !70
  %579 = sext i32 %559 to i64, !dbg !70
  %580 = getelementptr float, ptr addrspace(1) %0, i64 %579, !dbg !70
  %581 = sext i32 %560 to i64, !dbg !70
  %582 = getelementptr float, ptr addrspace(1) %0, i64 %581, !dbg !70
  %583 = sext i32 %561 to i64, !dbg !70
  %584 = getelementptr float, ptr addrspace(1) %0, i64 %583, !dbg !70
  %585 = sext i32 %562 to i64, !dbg !70
  %586 = getelementptr float, ptr addrspace(1) %0, i64 %585, !dbg !70
  %587 = sext i32 %563 to i64, !dbg !70
  %588 = getelementptr float, ptr addrspace(1) %0, i64 %587, !dbg !70
  %589 = sext i32 %564 to i64, !dbg !70
  %590 = getelementptr float, ptr addrspace(1) %0, i64 %589, !dbg !70
  %591 = sext i32 %565 to i64, !dbg !70
  %592 = getelementptr float, ptr addrspace(1) %0, i64 %591, !dbg !70
  %593 = sext i32 %566 to i64, !dbg !70
  %594 = getelementptr float, ptr addrspace(1) %0, i64 %593, !dbg !70
  %595 = sext i32 %567 to i64, !dbg !70
  %596 = getelementptr float, ptr addrspace(1) %0, i64 %595, !dbg !70
  %597 = sext i32 %568 to i64, !dbg !70
  %598 = getelementptr float, ptr addrspace(1) %0, i64 %597, !dbg !70
  %599 = sext i32 %569 to i64, !dbg !70
  %600 = getelementptr float, ptr addrspace(1) %0, i64 %599, !dbg !70
  %601 = sext i32 %570 to i64, !dbg !70
  %602 = getelementptr float, ptr addrspace(1) %0, i64 %601, !dbg !70
  %603 = and i1 %54, %553, !dbg !71
  %604 = and i1 %27, %603, !dbg !72
  %605 = and i1 %28, %603, !dbg !72
  %606 = and i1 %29, %603, !dbg !72
  %607 = and i1 %30, %603, !dbg !72
  %608 = and i1 %31, %603, !dbg !72
  %609 = and i1 %32, %603, !dbg !72
  %610 = and i1 %33, %603, !dbg !72
  %611 = and i1 %34, %603, !dbg !72
  %612 = and i1 %35, %603, !dbg !72
  %613 = and i1 %36, %603, !dbg !72
  %614 = and i1 %37, %603, !dbg !72
  %615 = and i1 %38, %603, !dbg !72
  %616 = and i1 %39, %603, !dbg !72
  %617 = and i1 %40, %603, !dbg !72
  %618 = and i1 %41, %603, !dbg !72
  %619 = and i1 %42, %603, !dbg !72
  %620 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %572, i1 %604, i32 -8388608, i1 %604) #2, !dbg !73
  %621 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %574, i1 %605, i32 -8388608, i1 %605) #2, !dbg !73
  %622 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %576, i1 %606, i32 -8388608, i1 %606) #2, !dbg !73
  %623 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %578, i1 %607, i32 -8388608, i1 %607) #2, !dbg !73
  %624 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %580, i1 %608, i32 -8388608, i1 %608) #2, !dbg !73
  %625 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %582, i1 %609, i32 -8388608, i1 %609) #2, !dbg !73
  %626 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %584, i1 %610, i32 -8388608, i1 %610) #2, !dbg !73
  %627 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %586, i1 %611, i32 -8388608, i1 %611) #2, !dbg !73
  %628 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %588, i1 %612, i32 -8388608, i1 %612) #2, !dbg !73
  %629 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %590, i1 %613, i32 -8388608, i1 %613) #2, !dbg !73
  %630 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %592, i1 %614, i32 -8388608, i1 %614) #2, !dbg !73
  %631 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %594, i1 %615, i32 -8388608, i1 %615) #2, !dbg !73
  %632 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %596, i1 %616, i32 -8388608, i1 %616) #2, !dbg !73
  %633 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %598, i1 %617, i32 -8388608, i1 %617) #2, !dbg !73
  %634 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %600, i1 %618, i32 -8388608, i1 %618) #2, !dbg !73
  %635 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %602, i1 %619, i32 -8388608, i1 %619) #2, !dbg !73
  %636 = and i1 %170, %552, !dbg !74
  %637 = add i32 %69, 32, !dbg !75
  %638 = add i32 %637, %71, !dbg !76
  %639 = add i32 %637, %72, !dbg !76
  %640 = add i32 %637, %73, !dbg !76
  %641 = add i32 %637, %74, !dbg !76
  %642 = add i32 %637, %75, !dbg !76
  %643 = add i32 %637, %76, !dbg !76
  %644 = add i32 %637, %77, !dbg !76
  %645 = add i32 %637, %78, !dbg !76
  %646 = add i32 %637, %79, !dbg !76
  %647 = add i32 %637, %80, !dbg !76
  %648 = add i32 %637, %81, !dbg !76
  %649 = add i32 %637, %82, !dbg !76
  %650 = add i32 %637, %83, !dbg !76
  %651 = add i32 %637, %84, !dbg !76
  %652 = add i32 %637, %85, !dbg !76
  %653 = add i32 %637, %86, !dbg !76
  %654 = sext i32 %638 to i64, !dbg !77
  %655 = getelementptr float, ptr addrspace(1) %0, i64 %654, !dbg !77
  %656 = sext i32 %639 to i64, !dbg !77
  %657 = getelementptr float, ptr addrspace(1) %0, i64 %656, !dbg !77
  %658 = sext i32 %640 to i64, !dbg !77
  %659 = getelementptr float, ptr addrspace(1) %0, i64 %658, !dbg !77
  %660 = sext i32 %641 to i64, !dbg !77
  %661 = getelementptr float, ptr addrspace(1) %0, i64 %660, !dbg !77
  %662 = sext i32 %642 to i64, !dbg !77
  %663 = getelementptr float, ptr addrspace(1) %0, i64 %662, !dbg !77
  %664 = sext i32 %643 to i64, !dbg !77
  %665 = getelementptr float, ptr addrspace(1) %0, i64 %664, !dbg !77
  %666 = sext i32 %644 to i64, !dbg !77
  %667 = getelementptr float, ptr addrspace(1) %0, i64 %666, !dbg !77
  %668 = sext i32 %645 to i64, !dbg !77
  %669 = getelementptr float, ptr addrspace(1) %0, i64 %668, !dbg !77
  %670 = sext i32 %646 to i64, !dbg !77
  %671 = getelementptr float, ptr addrspace(1) %0, i64 %670, !dbg !77
  %672 = sext i32 %647 to i64, !dbg !77
  %673 = getelementptr float, ptr addrspace(1) %0, i64 %672, !dbg !77
  %674 = sext i32 %648 to i64, !dbg !77
  %675 = getelementptr float, ptr addrspace(1) %0, i64 %674, !dbg !77
  %676 = sext i32 %649 to i64, !dbg !77
  %677 = getelementptr float, ptr addrspace(1) %0, i64 %676, !dbg !77
  %678 = sext i32 %650 to i64, !dbg !77
  %679 = getelementptr float, ptr addrspace(1) %0, i64 %678, !dbg !77
  %680 = sext i32 %651 to i64, !dbg !77
  %681 = getelementptr float, ptr addrspace(1) %0, i64 %680, !dbg !77
  %682 = sext i32 %652 to i64, !dbg !77
  %683 = getelementptr float, ptr addrspace(1) %0, i64 %682, !dbg !77
  %684 = sext i32 %653 to i64, !dbg !77
  %685 = getelementptr float, ptr addrspace(1) %0, i64 %684, !dbg !77
  %686 = and i1 %54, %636, !dbg !78
  %687 = and i1 %27, %686, !dbg !79
  %688 = and i1 %28, %686, !dbg !79
  %689 = and i1 %29, %686, !dbg !79
  %690 = and i1 %30, %686, !dbg !79
  %691 = and i1 %31, %686, !dbg !79
  %692 = and i1 %32, %686, !dbg !79
  %693 = and i1 %33, %686, !dbg !79
  %694 = and i1 %34, %686, !dbg !79
  %695 = and i1 %35, %686, !dbg !79
  %696 = and i1 %36, %686, !dbg !79
  %697 = and i1 %37, %686, !dbg !79
  %698 = and i1 %38, %686, !dbg !79
  %699 = and i1 %39, %686, !dbg !79
  %700 = and i1 %40, %686, !dbg !79
  %701 = and i1 %41, %686, !dbg !79
  %702 = and i1 %42, %686, !dbg !79
  %703 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %655, i1 %687, i32 -8388608, i1 %687) #2, !dbg !80
  %704 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %657, i1 %688, i32 -8388608, i1 %688) #2, !dbg !80
  %705 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %659, i1 %689, i32 -8388608, i1 %689) #2, !dbg !80
  %706 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %661, i1 %690, i32 -8388608, i1 %690) #2, !dbg !80
  %707 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %663, i1 %691, i32 -8388608, i1 %691) #2, !dbg !80
  %708 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %665, i1 %692, i32 -8388608, i1 %692) #2, !dbg !80
  %709 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %667, i1 %693, i32 -8388608, i1 %693) #2, !dbg !80
  %710 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %669, i1 %694, i32 -8388608, i1 %694) #2, !dbg !80
  %711 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %671, i1 %695, i32 -8388608, i1 %695) #2, !dbg !80
  %712 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %673, i1 %696, i32 -8388608, i1 %696) #2, !dbg !80
  %713 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %675, i1 %697, i32 -8388608, i1 %697) #2, !dbg !80
  %714 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %677, i1 %698, i32 -8388608, i1 %698) #2, !dbg !80
  %715 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %679, i1 %699, i32 -8388608, i1 %699) #2, !dbg !80
  %716 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %681, i1 %700, i32 -8388608, i1 %700) #2, !dbg !80
  %717 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %683, i1 %701, i32 -8388608, i1 %701) #2, !dbg !80
  %718 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %685, i1 %702, i32 -8388608, i1 %702) #2, !dbg !80
  %719 = add i32 %69, 33, !dbg !81
  %720 = add i32 %719, %71, !dbg !82
  %721 = add i32 %719, %72, !dbg !82
  %722 = add i32 %719, %73, !dbg !82
  %723 = add i32 %719, %74, !dbg !82
  %724 = add i32 %719, %75, !dbg !82
  %725 = add i32 %719, %76, !dbg !82
  %726 = add i32 %719, %77, !dbg !82
  %727 = add i32 %719, %78, !dbg !82
  %728 = add i32 %719, %79, !dbg !82
  %729 = add i32 %719, %80, !dbg !82
  %730 = add i32 %719, %81, !dbg !82
  %731 = add i32 %719, %82, !dbg !82
  %732 = add i32 %719, %83, !dbg !82
  %733 = add i32 %719, %84, !dbg !82
  %734 = add i32 %719, %85, !dbg !82
  %735 = add i32 %719, %86, !dbg !82
  %736 = sext i32 %720 to i64, !dbg !83
  %737 = getelementptr float, ptr addrspace(1) %0, i64 %736, !dbg !83
  %738 = sext i32 %721 to i64, !dbg !83
  %739 = getelementptr float, ptr addrspace(1) %0, i64 %738, !dbg !83
  %740 = sext i32 %722 to i64, !dbg !83
  %741 = getelementptr float, ptr addrspace(1) %0, i64 %740, !dbg !83
  %742 = sext i32 %723 to i64, !dbg !83
  %743 = getelementptr float, ptr addrspace(1) %0, i64 %742, !dbg !83
  %744 = sext i32 %724 to i64, !dbg !83
  %745 = getelementptr float, ptr addrspace(1) %0, i64 %744, !dbg !83
  %746 = sext i32 %725 to i64, !dbg !83
  %747 = getelementptr float, ptr addrspace(1) %0, i64 %746, !dbg !83
  %748 = sext i32 %726 to i64, !dbg !83
  %749 = getelementptr float, ptr addrspace(1) %0, i64 %748, !dbg !83
  %750 = sext i32 %727 to i64, !dbg !83
  %751 = getelementptr float, ptr addrspace(1) %0, i64 %750, !dbg !83
  %752 = sext i32 %728 to i64, !dbg !83
  %753 = getelementptr float, ptr addrspace(1) %0, i64 %752, !dbg !83
  %754 = sext i32 %729 to i64, !dbg !83
  %755 = getelementptr float, ptr addrspace(1) %0, i64 %754, !dbg !83
  %756 = sext i32 %730 to i64, !dbg !83
  %757 = getelementptr float, ptr addrspace(1) %0, i64 %756, !dbg !83
  %758 = sext i32 %731 to i64, !dbg !83
  %759 = getelementptr float, ptr addrspace(1) %0, i64 %758, !dbg !83
  %760 = sext i32 %732 to i64, !dbg !83
  %761 = getelementptr float, ptr addrspace(1) %0, i64 %760, !dbg !83
  %762 = sext i32 %733 to i64, !dbg !83
  %763 = getelementptr float, ptr addrspace(1) %0, i64 %762, !dbg !83
  %764 = sext i32 %734 to i64, !dbg !83
  %765 = getelementptr float, ptr addrspace(1) %0, i64 %764, !dbg !83
  %766 = sext i32 %735 to i64, !dbg !83
  %767 = getelementptr float, ptr addrspace(1) %0, i64 %766, !dbg !83
  %768 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %737, i1 %687, i32 -8388608, i1 %687) #2, !dbg !84
  %769 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %739, i1 %688, i32 -8388608, i1 %688) #2, !dbg !84
  %770 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %741, i1 %689, i32 -8388608, i1 %689) #2, !dbg !84
  %771 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %743, i1 %690, i32 -8388608, i1 %690) #2, !dbg !84
  %772 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %745, i1 %691, i32 -8388608, i1 %691) #2, !dbg !84
  %773 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %747, i1 %692, i32 -8388608, i1 %692) #2, !dbg !84
  %774 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %749, i1 %693, i32 -8388608, i1 %693) #2, !dbg !84
  %775 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %751, i1 %694, i32 -8388608, i1 %694) #2, !dbg !84
  %776 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %753, i1 %695, i32 -8388608, i1 %695) #2, !dbg !84
  %777 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %755, i1 %696, i32 -8388608, i1 %696) #2, !dbg !84
  %778 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %757, i1 %697, i32 -8388608, i1 %697) #2, !dbg !84
  %779 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %759, i1 %698, i32 -8388608, i1 %698) #2, !dbg !84
  %780 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %761, i1 %699, i32 -8388608, i1 %699) #2, !dbg !84
  %781 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %763, i1 %700, i32 -8388608, i1 %700) #2, !dbg !84
  %782 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %765, i1 %701, i32 -8388608, i1 %701) #2, !dbg !84
  %783 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %767, i1 %702, i32 -8388608, i1 %702) #2, !dbg !84
  %784 = insertelement <4 x i32> poison, i32 %154, i64 0, !dbg !35
  %785 = insertelement <4 x i32> %784, i32 %155, i64 1, !dbg !35
  %786 = insertelement <4 x i32> %785, i32 %156, i64 2, !dbg !35
  %787 = insertelement <4 x i32> %786, i32 %157, i64 3, !dbg !35
  %788 = bitcast <4 x i32> %787 to <4 x float>, !dbg !35
  %789 = insertelement <4 x i32> poison, i32 %237, i64 0, !dbg !42
  %790 = insertelement <4 x i32> %789, i32 %238, i64 1, !dbg !42
  %791 = insertelement <4 x i32> %790, i32 %239, i64 2, !dbg !42
  %792 = insertelement <4 x i32> %791, i32 %240, i64 3, !dbg !42
  %793 = bitcast <4 x i32> %792 to <4 x float>, !dbg !42
  %794 = fcmp ogt <4 x float> %793, %788, !dbg !85
  %795 = fcmp uno <4 x float> %793, zeroinitializer, !dbg !89
  %796 = or <4 x i1> %794, %795, !dbg !90
  %.v = select <4 x i1> %796, <4 x i32> %792, <4 x i32> %787, !dbg !91
  %797 = bitcast <4 x i32> %.v to <4 x float>, !dbg !91
  %798 = insertelement <4 x i32> poison, i32 %303, i64 0, !dbg !47
  %799 = insertelement <4 x i32> %798, i32 %304, i64 1, !dbg !47
  %800 = insertelement <4 x i32> %799, i32 %305, i64 2, !dbg !47
  %801 = insertelement <4 x i32> %800, i32 %306, i64 3, !dbg !47
  %802 = bitcast <4 x i32> %801 to <4 x float>, !dbg !47
  %803 = fcmp olt <4 x float> %797, %802, !dbg !92
  %804 = fcmp uno <4 x float> %802, zeroinitializer, !dbg !94
  %805 = or <4 x i1> %803, %804, !dbg !95
  %.v33 = select <4 x i1> %805, <4 x i32> %801, <4 x i32> %.v, !dbg !96
  %806 = bitcast <4 x i32> %.v33 to <4 x float>, !dbg !96
  %807 = insertelement <4 x i32> poison, i32 %387, i64 0, !dbg !53
  %808 = insertelement <4 x i32> %807, i32 %388, i64 1, !dbg !53
  %809 = insertelement <4 x i32> %808, i32 %389, i64 2, !dbg !53
  %810 = insertelement <4 x i32> %809, i32 %390, i64 3, !dbg !53
  %811 = bitcast <4 x i32> %810 to <4 x float>, !dbg !53
  %812 = fcmp olt <4 x float> %806, %811, !dbg !97
  %813 = fcmp uno <4 x float> %811, zeroinitializer, !dbg !99
  %814 = or <4 x i1> %812, %813, !dbg !100
  %.v34 = select <4 x i1> %814, <4 x i32> %810, <4 x i32> %.v33, !dbg !101
  %815 = bitcast <4 x i32> %.v34 to <4 x float>, !dbg !101
  %816 = insertelement <4 x i32> poison, i32 %468, i64 0, !dbg !58
  %817 = insertelement <4 x i32> %816, i32 %469, i64 1, !dbg !58
  %818 = insertelement <4 x i32> %817, i32 %470, i64 2, !dbg !58
  %819 = insertelement <4 x i32> %818, i32 %471, i64 3, !dbg !58
  %820 = bitcast <4 x i32> %819 to <4 x float>, !dbg !58
  %821 = fcmp olt <4 x float> %815, %820, !dbg !102
  %822 = fcmp uno <4 x float> %820, zeroinitializer, !dbg !104
  %823 = or <4 x i1> %821, %822, !dbg !105
  %.v35 = select <4 x i1> %823, <4 x i32> %819, <4 x i32> %.v34, !dbg !106
  %824 = bitcast <4 x i32> %.v35 to <4 x float>, !dbg !106
  %825 = insertelement <4 x i32> poison, i32 %533, i64 0, !dbg !62
  %826 = insertelement <4 x i32> %825, i32 %534, i64 1, !dbg !62
  %827 = insertelement <4 x i32> %826, i32 %535, i64 2, !dbg !62
  %828 = insertelement <4 x i32> %827, i32 %536, i64 3, !dbg !62
  %829 = bitcast <4 x i32> %828 to <4 x float>, !dbg !62
  %830 = fcmp olt <4 x float> %824, %829, !dbg !107
  %831 = fcmp uno <4 x float> %829, zeroinitializer, !dbg !109
  %832 = or <4 x i1> %830, %831, !dbg !110
  %.v36 = select <4 x i1> %832, <4 x i32> %828, <4 x i32> %.v35, !dbg !111
  %833 = bitcast <4 x i32> %.v36 to <4 x float>, !dbg !111
  %834 = insertelement <4 x i32> poison, i32 %620, i64 0, !dbg !73
  %835 = insertelement <4 x i32> %834, i32 %621, i64 1, !dbg !73
  %836 = insertelement <4 x i32> %835, i32 %622, i64 2, !dbg !73
  %837 = insertelement <4 x i32> %836, i32 %623, i64 3, !dbg !73
  %838 = bitcast <4 x i32> %837 to <4 x float>, !dbg !73
  %839 = fcmp olt <4 x float> %833, %838, !dbg !112
  %840 = fcmp uno <4 x float> %838, zeroinitializer, !dbg !114
  %841 = or <4 x i1> %839, %840, !dbg !115
  %.v37 = select <4 x i1> %841, <4 x i32> %837, <4 x i32> %.v36, !dbg !116
  %842 = bitcast <4 x i32> %.v37 to <4 x float>, !dbg !116
  %843 = insertelement <4 x i32> poison, i32 %703, i64 0, !dbg !80
  %844 = insertelement <4 x i32> %843, i32 %704, i64 1, !dbg !80
  %845 = insertelement <4 x i32> %844, i32 %705, i64 2, !dbg !80
  %846 = insertelement <4 x i32> %845, i32 %706, i64 3, !dbg !80
  %847 = bitcast <4 x i32> %846 to <4 x float>, !dbg !80
  %848 = fcmp olt <4 x float> %842, %847, !dbg !117
  %849 = fcmp uno <4 x float> %847, zeroinitializer, !dbg !119
  %850 = or <4 x i1> %848, %849, !dbg !120
  %.v38 = select <4 x i1> %850, <4 x i32> %846, <4 x i32> %.v37, !dbg !121
  %851 = bitcast <4 x i32> %.v38 to <4 x float>, !dbg !121
  %852 = insertelement <4 x i32> poison, i32 %768, i64 0, !dbg !84
  %853 = insertelement <4 x i32> %852, i32 %769, i64 1, !dbg !84
  %854 = insertelement <4 x i32> %853, i32 %770, i64 2, !dbg !84
  %855 = insertelement <4 x i32> %854, i32 %771, i64 3, !dbg !84
  %856 = bitcast <4 x i32> %855 to <4 x float>, !dbg !84
  %857 = fcmp olt <4 x float> %851, %856, !dbg !122
  %858 = bitcast i32 %768 to float, !dbg !124
  %859 = fcmp uno float %858, 0.000000e+00, !dbg !124
  %860 = bitcast i32 %769 to float, !dbg !124
  %861 = fcmp uno float %860, 0.000000e+00, !dbg !124
  %862 = bitcast i32 %770 to float, !dbg !124
  %863 = fcmp uno float %862, 0.000000e+00, !dbg !124
  %864 = bitcast i32 %771 to float, !dbg !124
  %865 = fcmp uno float %864, 0.000000e+00, !dbg !124
  %866 = extractelement <4 x i1> %857, i64 0, !dbg !125
  %867 = or i1 %866, %859, !dbg !125
  %868 = extractelement <4 x i1> %857, i64 1, !dbg !125
  %869 = or i1 %868, %861, !dbg !125
  %870 = extractelement <4 x i1> %857, i64 2, !dbg !125
  %871 = or i1 %870, %863, !dbg !125
  %872 = extractelement <4 x i1> %857, i64 3, !dbg !125
  %873 = or i1 %872, %865, !dbg !125
  %874 = zext <4 x i1> %794 to <4 x i8>, !dbg !126
  %875 = select <4 x i1> %803, <4 x i8> splat (i8 2), <4 x i8> %874, !dbg !127
  %876 = select <4 x i1> %812, <4 x i8> splat (i8 3), <4 x i8> %875, !dbg !128
  %877 = select <4 x i1> %821, <4 x i8> splat (i8 4), <4 x i8> %876, !dbg !129
  %878 = select <4 x i1> %830, <4 x i8> splat (i8 5), <4 x i8> %877, !dbg !130
  %879 = select <4 x i1> %839, <4 x i8> splat (i8 6), <4 x i8> %878, !dbg !131
  %880 = select <4 x i1> %848, <4 x i8> splat (i8 7), <4 x i8> %879, !dbg !132
  %881 = select <4 x i1> %857, <4 x i8> splat (i8 8), <4 x i8> %880, !dbg !133
  %882 = insertelement <4 x i32> poison, i32 %158, i64 0, !dbg !35
  %883 = insertelement <4 x i32> %882, i32 %159, i64 1, !dbg !35
  %884 = insertelement <4 x i32> %883, i32 %160, i64 2, !dbg !35
  %885 = insertelement <4 x i32> %884, i32 %161, i64 3, !dbg !35
  %886 = bitcast <4 x i32> %885 to <4 x float>, !dbg !35
  %887 = insertelement <4 x i32> poison, i32 %241, i64 0, !dbg !42
  %888 = insertelement <4 x i32> %887, i32 %242, i64 1, !dbg !42
  %889 = insertelement <4 x i32> %888, i32 %243, i64 2, !dbg !42
  %890 = insertelement <4 x i32> %889, i32 %244, i64 3, !dbg !42
  %891 = bitcast <4 x i32> %890 to <4 x float>, !dbg !42
  %892 = fcmp ogt <4 x float> %891, %886, !dbg !85
  %893 = fcmp uno <4 x float> %891, zeroinitializer, !dbg !89
  %894 = or <4 x i1> %892, %893, !dbg !90
  %.v39 = select <4 x i1> %894, <4 x i32> %890, <4 x i32> %885, !dbg !91
  %895 = bitcast <4 x i32> %.v39 to <4 x float>, !dbg !91
  %896 = insertelement <4 x i32> poison, i32 %307, i64 0, !dbg !47
  %897 = insertelement <4 x i32> %896, i32 %308, i64 1, !dbg !47
  %898 = insertelement <4 x i32> %897, i32 %309, i64 2, !dbg !47
  %899 = insertelement <4 x i32> %898, i32 %310, i64 3, !dbg !47
  %900 = bitcast <4 x i32> %899 to <4 x float>, !dbg !47
  %901 = fcmp olt <4 x float> %895, %900, !dbg !92
  %902 = fcmp uno <4 x float> %900, zeroinitializer, !dbg !94
  %903 = or <4 x i1> %901, %902, !dbg !95
  %.v40 = select <4 x i1> %903, <4 x i32> %899, <4 x i32> %.v39, !dbg !96
  %904 = bitcast <4 x i32> %.v40 to <4 x float>, !dbg !96
  %905 = insertelement <4 x i32> poison, i32 %391, i64 0, !dbg !53
  %906 = insertelement <4 x i32> %905, i32 %392, i64 1, !dbg !53
  %907 = insertelement <4 x i32> %906, i32 %393, i64 2, !dbg !53
  %908 = insertelement <4 x i32> %907, i32 %394, i64 3, !dbg !53
  %909 = bitcast <4 x i32> %908 to <4 x float>, !dbg !53
  %910 = fcmp olt <4 x float> %904, %909, !dbg !97
  %911 = fcmp uno <4 x float> %909, zeroinitializer, !dbg !99
  %912 = or <4 x i1> %910, %911, !dbg !100
  %.v41 = select <4 x i1> %912, <4 x i32> %908, <4 x i32> %.v40, !dbg !101
  %913 = bitcast <4 x i32> %.v41 to <4 x float>, !dbg !101
  %914 = insertelement <4 x i32> poison, i32 %472, i64 0, !dbg !58
  %915 = insertelement <4 x i32> %914, i32 %473, i64 1, !dbg !58
  %916 = insertelement <4 x i32> %915, i32 %474, i64 2, !dbg !58
  %917 = insertelement <4 x i32> %916, i32 %475, i64 3, !dbg !58
  %918 = bitcast <4 x i32> %917 to <4 x float>, !dbg !58
  %919 = fcmp olt <4 x float> %913, %918, !dbg !102
  %920 = fcmp uno <4 x float> %918, zeroinitializer, !dbg !104
  %921 = or <4 x i1> %919, %920, !dbg !105
  %.v42 = select <4 x i1> %921, <4 x i32> %917, <4 x i32> %.v41, !dbg !106
  %922 = bitcast <4 x i32> %.v42 to <4 x float>, !dbg !106
  %923 = insertelement <4 x i32> poison, i32 %537, i64 0, !dbg !62
  %924 = insertelement <4 x i32> %923, i32 %538, i64 1, !dbg !62
  %925 = insertelement <4 x i32> %924, i32 %539, i64 2, !dbg !62
  %926 = insertelement <4 x i32> %925, i32 %540, i64 3, !dbg !62
  %927 = bitcast <4 x i32> %926 to <4 x float>, !dbg !62
  %928 = fcmp olt <4 x float> %922, %927, !dbg !107
  %929 = fcmp uno <4 x float> %927, zeroinitializer, !dbg !109
  %930 = or <4 x i1> %928, %929, !dbg !110
  %.v43 = select <4 x i1> %930, <4 x i32> %926, <4 x i32> %.v42, !dbg !111
  %931 = bitcast <4 x i32> %.v43 to <4 x float>, !dbg !111
  %932 = insertelement <4 x i32> poison, i32 %624, i64 0, !dbg !73
  %933 = insertelement <4 x i32> %932, i32 %625, i64 1, !dbg !73
  %934 = insertelement <4 x i32> %933, i32 %626, i64 2, !dbg !73
  %935 = insertelement <4 x i32> %934, i32 %627, i64 3, !dbg !73
  %936 = bitcast <4 x i32> %935 to <4 x float>, !dbg !73
  %937 = fcmp olt <4 x float> %931, %936, !dbg !112
  %938 = fcmp uno <4 x float> %936, zeroinitializer, !dbg !114
  %939 = or <4 x i1> %937, %938, !dbg !115
  %.v44 = select <4 x i1> %939, <4 x i32> %935, <4 x i32> %.v43, !dbg !116
  %940 = bitcast <4 x i32> %.v44 to <4 x float>, !dbg !116
  %941 = insertelement <4 x i32> poison, i32 %707, i64 0, !dbg !80
  %942 = insertelement <4 x i32> %941, i32 %708, i64 1, !dbg !80
  %943 = insertelement <4 x i32> %942, i32 %709, i64 2, !dbg !80
  %944 = insertelement <4 x i32> %943, i32 %710, i64 3, !dbg !80
  %945 = bitcast <4 x i32> %944 to <4 x float>, !dbg !80
  %946 = fcmp olt <4 x float> %940, %945, !dbg !117
  %947 = fcmp uno <4 x float> %945, zeroinitializer, !dbg !119
  %948 = or <4 x i1> %946, %947, !dbg !120
  %.v45 = select <4 x i1> %948, <4 x i32> %944, <4 x i32> %.v44, !dbg !121
  %949 = bitcast <4 x i32> %.v45 to <4 x float>, !dbg !121
  %950 = insertelement <4 x i32> poison, i32 %772, i64 0, !dbg !84
  %951 = insertelement <4 x i32> %950, i32 %773, i64 1, !dbg !84
  %952 = insertelement <4 x i32> %951, i32 %774, i64 2, !dbg !84
  %953 = insertelement <4 x i32> %952, i32 %775, i64 3, !dbg !84
  %954 = bitcast <4 x i32> %953 to <4 x float>, !dbg !84
  %955 = fcmp olt <4 x float> %949, %954, !dbg !122
  %956 = bitcast i32 %772 to float, !dbg !124
  %957 = fcmp uno float %956, 0.000000e+00, !dbg !124
  %958 = bitcast i32 %773 to float, !dbg !124
  %959 = fcmp uno float %958, 0.000000e+00, !dbg !124
  %960 = bitcast i32 %774 to float, !dbg !124
  %961 = fcmp uno float %960, 0.000000e+00, !dbg !124
  %962 = bitcast i32 %775 to float, !dbg !124
  %963 = fcmp uno float %962, 0.000000e+00, !dbg !124
  %964 = extractelement <4 x i1> %955, i64 0, !dbg !125
  %965 = or i1 %964, %957, !dbg !125
  %966 = extractelement <4 x i1> %955, i64 1, !dbg !125
  %967 = or i1 %966, %959, !dbg !125
  %968 = extractelement <4 x i1> %955, i64 2, !dbg !125
  %969 = or i1 %968, %961, !dbg !125
  %970 = extractelement <4 x i1> %955, i64 3, !dbg !125
  %971 = or i1 %970, %963, !dbg !125
  %972 = zext <4 x i1> %892 to <4 x i8>, !dbg !126
  %973 = select <4 x i1> %901, <4 x i8> splat (i8 2), <4 x i8> %972, !dbg !127
  %974 = select <4 x i1> %910, <4 x i8> splat (i8 3), <4 x i8> %973, !dbg !128
  %975 = select <4 x i1> %919, <4 x i8> splat (i8 4), <4 x i8> %974, !dbg !129
  %976 = select <4 x i1> %928, <4 x i8> splat (i8 5), <4 x i8> %975, !dbg !130
  %977 = select <4 x i1> %937, <4 x i8> splat (i8 6), <4 x i8> %976, !dbg !131
  %978 = select <4 x i1> %946, <4 x i8> splat (i8 7), <4 x i8> %977, !dbg !132
  %979 = select <4 x i1> %955, <4 x i8> splat (i8 8), <4 x i8> %978, !dbg !133
  %980 = insertelement <4 x i32> poison, i32 %162, i64 0, !dbg !35
  %981 = insertelement <4 x i32> %980, i32 %163, i64 1, !dbg !35
  %982 = insertelement <4 x i32> %981, i32 %164, i64 2, !dbg !35
  %983 = insertelement <4 x i32> %982, i32 %165, i64 3, !dbg !35
  %984 = bitcast <4 x i32> %983 to <4 x float>, !dbg !35
  %985 = insertelement <4 x i32> poison, i32 %245, i64 0, !dbg !42
  %986 = insertelement <4 x i32> %985, i32 %246, i64 1, !dbg !42
  %987 = insertelement <4 x i32> %986, i32 %247, i64 2, !dbg !42
  %988 = insertelement <4 x i32> %987, i32 %248, i64 3, !dbg !42
  %989 = bitcast <4 x i32> %988 to <4 x float>, !dbg !42
  %990 = fcmp ogt <4 x float> %989, %984, !dbg !85
  %991 = fcmp uno <4 x float> %989, zeroinitializer, !dbg !89
  %992 = or <4 x i1> %990, %991, !dbg !90
  %.v46 = select <4 x i1> %992, <4 x i32> %988, <4 x i32> %983, !dbg !91
  %993 = bitcast <4 x i32> %.v46 to <4 x float>, !dbg !91
  %994 = insertelement <4 x i32> poison, i32 %311, i64 0, !dbg !47
  %995 = insertelement <4 x i32> %994, i32 %312, i64 1, !dbg !47
  %996 = insertelement <4 x i32> %995, i32 %313, i64 2, !dbg !47
  %997 = insertelement <4 x i32> %996, i32 %314, i64 3, !dbg !47
  %998 = bitcast <4 x i32> %997 to <4 x float>, !dbg !47
  %999 = fcmp olt <4 x float> %993, %998, !dbg !92
  %1000 = fcmp uno <4 x float> %998, zeroinitializer, !dbg !94
  %1001 = or <4 x i1> %999, %1000, !dbg !95
  %.v47 = select <4 x i1> %1001, <4 x i32> %997, <4 x i32> %.v46, !dbg !96
  %1002 = bitcast <4 x i32> %.v47 to <4 x float>, !dbg !96
  %1003 = insertelement <4 x i32> poison, i32 %395, i64 0, !dbg !53
  %1004 = insertelement <4 x i32> %1003, i32 %396, i64 1, !dbg !53
  %1005 = insertelement <4 x i32> %1004, i32 %397, i64 2, !dbg !53
  %1006 = insertelement <4 x i32> %1005, i32 %398, i64 3, !dbg !53
  %1007 = bitcast <4 x i32> %1006 to <4 x float>, !dbg !53
  %1008 = fcmp olt <4 x float> %1002, %1007, !dbg !97
  %1009 = fcmp uno <4 x float> %1007, zeroinitializer, !dbg !99
  %1010 = or <4 x i1> %1008, %1009, !dbg !100
  %.v48 = select <4 x i1> %1010, <4 x i32> %1006, <4 x i32> %.v47, !dbg !101
  %1011 = bitcast <4 x i32> %.v48 to <4 x float>, !dbg !101
  %1012 = insertelement <4 x i32> poison, i32 %476, i64 0, !dbg !58
  %1013 = insertelement <4 x i32> %1012, i32 %477, i64 1, !dbg !58
  %1014 = insertelement <4 x i32> %1013, i32 %478, i64 2, !dbg !58
  %1015 = insertelement <4 x i32> %1014, i32 %479, i64 3, !dbg !58
  %1016 = bitcast <4 x i32> %1015 to <4 x float>, !dbg !58
  %1017 = fcmp olt <4 x float> %1011, %1016, !dbg !102
  %1018 = fcmp uno <4 x float> %1016, zeroinitializer, !dbg !104
  %1019 = or <4 x i1> %1017, %1018, !dbg !105
  %.v49 = select <4 x i1> %1019, <4 x i32> %1015, <4 x i32> %.v48, !dbg !106
  %1020 = bitcast <4 x i32> %.v49 to <4 x float>, !dbg !106
  %1021 = insertelement <4 x i32> poison, i32 %541, i64 0, !dbg !62
  %1022 = insertelement <4 x i32> %1021, i32 %542, i64 1, !dbg !62
  %1023 = insertelement <4 x i32> %1022, i32 %543, i64 2, !dbg !62
  %1024 = insertelement <4 x i32> %1023, i32 %544, i64 3, !dbg !62
  %1025 = bitcast <4 x i32> %1024 to <4 x float>, !dbg !62
  %1026 = fcmp olt <4 x float> %1020, %1025, !dbg !107
  %1027 = fcmp uno <4 x float> %1025, zeroinitializer, !dbg !109
  %1028 = or <4 x i1> %1026, %1027, !dbg !110
  %.v50 = select <4 x i1> %1028, <4 x i32> %1024, <4 x i32> %.v49, !dbg !111
  %1029 = bitcast <4 x i32> %.v50 to <4 x float>, !dbg !111
  %1030 = insertelement <4 x i32> poison, i32 %628, i64 0, !dbg !73
  %1031 = insertelement <4 x i32> %1030, i32 %629, i64 1, !dbg !73
  %1032 = insertelement <4 x i32> %1031, i32 %630, i64 2, !dbg !73
  %1033 = insertelement <4 x i32> %1032, i32 %631, i64 3, !dbg !73
  %1034 = bitcast <4 x i32> %1033 to <4 x float>, !dbg !73
  %1035 = fcmp olt <4 x float> %1029, %1034, !dbg !112
  %1036 = fcmp uno <4 x float> %1034, zeroinitializer, !dbg !114
  %1037 = or <4 x i1> %1035, %1036, !dbg !115
  %.v51 = select <4 x i1> %1037, <4 x i32> %1033, <4 x i32> %.v50, !dbg !116
  %1038 = bitcast <4 x i32> %.v51 to <4 x float>, !dbg !116
  %1039 = insertelement <4 x i32> poison, i32 %711, i64 0, !dbg !80
  %1040 = insertelement <4 x i32> %1039, i32 %712, i64 1, !dbg !80
  %1041 = insertelement <4 x i32> %1040, i32 %713, i64 2, !dbg !80
  %1042 = insertelement <4 x i32> %1041, i32 %714, i64 3, !dbg !80
  %1043 = bitcast <4 x i32> %1042 to <4 x float>, !dbg !80
  %1044 = fcmp olt <4 x float> %1038, %1043, !dbg !117
  %1045 = fcmp uno <4 x float> %1043, zeroinitializer, !dbg !119
  %1046 = or <4 x i1> %1044, %1045, !dbg !120
  %.v52 = select <4 x i1> %1046, <4 x i32> %1042, <4 x i32> %.v51, !dbg !121
  %1047 = bitcast <4 x i32> %.v52 to <4 x float>, !dbg !121
  %1048 = insertelement <4 x i32> poison, i32 %776, i64 0, !dbg !84
  %1049 = insertelement <4 x i32> %1048, i32 %777, i64 1, !dbg !84
  %1050 = insertelement <4 x i32> %1049, i32 %778, i64 2, !dbg !84
  %1051 = insertelement <4 x i32> %1050, i32 %779, i64 3, !dbg !84
  %1052 = bitcast <4 x i32> %1051 to <4 x float>, !dbg !84
  %1053 = fcmp olt <4 x float> %1047, %1052, !dbg !122
  %1054 = bitcast i32 %776 to float, !dbg !124
  %1055 = fcmp uno float %1054, 0.000000e+00, !dbg !124
  %1056 = bitcast i32 %777 to float, !dbg !124
  %1057 = fcmp uno float %1056, 0.000000e+00, !dbg !124
  %1058 = bitcast i32 %778 to float, !dbg !124
  %1059 = fcmp uno float %1058, 0.000000e+00, !dbg !124
  %1060 = bitcast i32 %779 to float, !dbg !124
  %1061 = fcmp uno float %1060, 0.000000e+00, !dbg !124
  %1062 = extractelement <4 x i1> %1053, i64 0, !dbg !125
  %1063 = or i1 %1062, %1055, !dbg !125
  %1064 = extractelement <4 x i1> %1053, i64 1, !dbg !125
  %1065 = or i1 %1064, %1057, !dbg !125
  %1066 = extractelement <4 x i1> %1053, i64 2, !dbg !125
  %1067 = or i1 %1066, %1059, !dbg !125
  %1068 = extractelement <4 x i1> %1053, i64 3, !dbg !125
  %1069 = or i1 %1068, %1061, !dbg !125
  %1070 = zext <4 x i1> %990 to <4 x i8>, !dbg !126
  %1071 = select <4 x i1> %999, <4 x i8> splat (i8 2), <4 x i8> %1070, !dbg !127
  %1072 = select <4 x i1> %1008, <4 x i8> splat (i8 3), <4 x i8> %1071, !dbg !128
  %1073 = select <4 x i1> %1017, <4 x i8> splat (i8 4), <4 x i8> %1072, !dbg !129
  %1074 = select <4 x i1> %1026, <4 x i8> splat (i8 5), <4 x i8> %1073, !dbg !130
  %1075 = select <4 x i1> %1035, <4 x i8> splat (i8 6), <4 x i8> %1074, !dbg !131
  %1076 = select <4 x i1> %1044, <4 x i8> splat (i8 7), <4 x i8> %1075, !dbg !132
  %1077 = select <4 x i1> %1053, <4 x i8> splat (i8 8), <4 x i8> %1076, !dbg !133
  %1078 = insertelement <4 x i32> poison, i32 %166, i64 0, !dbg !35
  %1079 = insertelement <4 x i32> %1078, i32 %167, i64 1, !dbg !35
  %1080 = insertelement <4 x i32> %1079, i32 %168, i64 2, !dbg !35
  %1081 = insertelement <4 x i32> %1080, i32 %169, i64 3, !dbg !35
  %1082 = bitcast <4 x i32> %1081 to <4 x float>, !dbg !35
  %1083 = insertelement <4 x i32> poison, i32 %249, i64 0, !dbg !42
  %1084 = insertelement <4 x i32> %1083, i32 %250, i64 1, !dbg !42
  %1085 = insertelement <4 x i32> %1084, i32 %251, i64 2, !dbg !42
  %1086 = insertelement <4 x i32> %1085, i32 %252, i64 3, !dbg !42
  %1087 = bitcast <4 x i32> %1086 to <4 x float>, !dbg !42
  %1088 = fcmp ogt <4 x float> %1087, %1082, !dbg !85
  %1089 = fcmp uno <4 x float> %1087, zeroinitializer, !dbg !89
  %1090 = or <4 x i1> %1088, %1089, !dbg !90
  %.v53 = select <4 x i1> %1090, <4 x i32> %1086, <4 x i32> %1081, !dbg !91
  %1091 = bitcast <4 x i32> %.v53 to <4 x float>, !dbg !91
  %1092 = insertelement <4 x i32> poison, i32 %315, i64 0, !dbg !47
  %1093 = insertelement <4 x i32> %1092, i32 %316, i64 1, !dbg !47
  %1094 = insertelement <4 x i32> %1093, i32 %317, i64 2, !dbg !47
  %1095 = insertelement <4 x i32> %1094, i32 %318, i64 3, !dbg !47
  %1096 = bitcast <4 x i32> %1095 to <4 x float>, !dbg !47
  %1097 = fcmp olt <4 x float> %1091, %1096, !dbg !92
  %1098 = fcmp uno <4 x float> %1096, zeroinitializer, !dbg !94
  %1099 = or <4 x i1> %1097, %1098, !dbg !95
  %.v54 = select <4 x i1> %1099, <4 x i32> %1095, <4 x i32> %.v53, !dbg !96
  %1100 = bitcast <4 x i32> %.v54 to <4 x float>, !dbg !96
  %1101 = insertelement <4 x i32> poison, i32 %399, i64 0, !dbg !53
  %1102 = insertelement <4 x i32> %1101, i32 %400, i64 1, !dbg !53
  %1103 = insertelement <4 x i32> %1102, i32 %401, i64 2, !dbg !53
  %1104 = insertelement <4 x i32> %1103, i32 %402, i64 3, !dbg !53
  %1105 = bitcast <4 x i32> %1104 to <4 x float>, !dbg !53
  %1106 = fcmp olt <4 x float> %1100, %1105, !dbg !97
  %1107 = fcmp uno <4 x float> %1105, zeroinitializer, !dbg !99
  %1108 = or <4 x i1> %1106, %1107, !dbg !100
  %.v55 = select <4 x i1> %1108, <4 x i32> %1104, <4 x i32> %.v54, !dbg !101
  %1109 = bitcast <4 x i32> %.v55 to <4 x float>, !dbg !101
  %1110 = insertelement <4 x i32> poison, i32 %480, i64 0, !dbg !58
  %1111 = insertelement <4 x i32> %1110, i32 %481, i64 1, !dbg !58
  %1112 = insertelement <4 x i32> %1111, i32 %482, i64 2, !dbg !58
  %1113 = insertelement <4 x i32> %1112, i32 %483, i64 3, !dbg !58
  %1114 = bitcast <4 x i32> %1113 to <4 x float>, !dbg !58
  %1115 = fcmp olt <4 x float> %1109, %1114, !dbg !102
  %1116 = fcmp uno <4 x float> %1114, zeroinitializer, !dbg !104
  %1117 = or <4 x i1> %1115, %1116, !dbg !105
  %.v56 = select <4 x i1> %1117, <4 x i32> %1113, <4 x i32> %.v55, !dbg !106
  %1118 = bitcast <4 x i32> %.v56 to <4 x float>, !dbg !106
  %1119 = insertelement <4 x i32> poison, i32 %545, i64 0, !dbg !62
  %1120 = insertelement <4 x i32> %1119, i32 %546, i64 1, !dbg !62
  %1121 = insertelement <4 x i32> %1120, i32 %547, i64 2, !dbg !62
  %1122 = insertelement <4 x i32> %1121, i32 %548, i64 3, !dbg !62
  %1123 = bitcast <4 x i32> %1122 to <4 x float>, !dbg !62
  %1124 = fcmp olt <4 x float> %1118, %1123, !dbg !107
  %1125 = fcmp uno <4 x float> %1123, zeroinitializer, !dbg !109
  %1126 = or <4 x i1> %1124, %1125, !dbg !110
  %.v57 = select <4 x i1> %1126, <4 x i32> %1122, <4 x i32> %.v56, !dbg !111
  %1127 = bitcast <4 x i32> %.v57 to <4 x float>, !dbg !111
  %1128 = insertelement <4 x i32> poison, i32 %632, i64 0, !dbg !73
  %1129 = insertelement <4 x i32> %1128, i32 %633, i64 1, !dbg !73
  %1130 = insertelement <4 x i32> %1129, i32 %634, i64 2, !dbg !73
  %1131 = insertelement <4 x i32> %1130, i32 %635, i64 3, !dbg !73
  %1132 = bitcast <4 x i32> %1131 to <4 x float>, !dbg !73
  %1133 = fcmp olt <4 x float> %1127, %1132, !dbg !112
  %1134 = fcmp uno <4 x float> %1132, zeroinitializer, !dbg !114
  %1135 = or <4 x i1> %1133, %1134, !dbg !115
  %.v58 = select <4 x i1> %1135, <4 x i32> %1131, <4 x i32> %.v57, !dbg !116
  %1136 = bitcast <4 x i32> %.v58 to <4 x float>, !dbg !116
  %1137 = insertelement <4 x i32> poison, i32 %715, i64 0, !dbg !80
  %1138 = insertelement <4 x i32> %1137, i32 %716, i64 1, !dbg !80
  %1139 = insertelement <4 x i32> %1138, i32 %717, i64 2, !dbg !80
  %1140 = insertelement <4 x i32> %1139, i32 %718, i64 3, !dbg !80
  %1141 = bitcast <4 x i32> %1140 to <4 x float>, !dbg !80
  %1142 = fcmp olt <4 x float> %1136, %1141, !dbg !117
  %1143 = fcmp uno <4 x float> %1141, zeroinitializer, !dbg !119
  %1144 = or <4 x i1> %1142, %1143, !dbg !120
  %.v59 = select <4 x i1> %1144, <4 x i32> %1140, <4 x i32> %.v58, !dbg !121
  %1145 = bitcast <4 x i32> %.v59 to <4 x float>, !dbg !121
  %1146 = insertelement <4 x i32> poison, i32 %780, i64 0, !dbg !84
  %1147 = insertelement <4 x i32> %1146, i32 %781, i64 1, !dbg !84
  %1148 = insertelement <4 x i32> %1147, i32 %782, i64 2, !dbg !84
  %1149 = insertelement <4 x i32> %1148, i32 %783, i64 3, !dbg !84
  %1150 = bitcast <4 x i32> %1149 to <4 x float>, !dbg !84
  %1151 = fcmp olt <4 x float> %1145, %1150, !dbg !122
  %1152 = bitcast i32 %780 to float, !dbg !124
  %1153 = fcmp uno float %1152, 0.000000e+00, !dbg !124
  %1154 = bitcast i32 %781 to float, !dbg !124
  %1155 = fcmp uno float %1154, 0.000000e+00, !dbg !124
  %1156 = bitcast i32 %782 to float, !dbg !124
  %1157 = fcmp uno float %1156, 0.000000e+00, !dbg !124
  %1158 = bitcast i32 %783 to float, !dbg !124
  %1159 = fcmp uno float %1158, 0.000000e+00, !dbg !124
  %1160 = extractelement <4 x i1> %1151, i64 0, !dbg !125
  %1161 = or i1 %1160, %1153, !dbg !125
  %1162 = extractelement <4 x i1> %1151, i64 1, !dbg !125
  %1163 = or i1 %1162, %1155, !dbg !125
  %1164 = extractelement <4 x i1> %1151, i64 2, !dbg !125
  %1165 = or i1 %1164, %1157, !dbg !125
  %1166 = extractelement <4 x i1> %1151, i64 3, !dbg !125
  %1167 = or i1 %1166, %1159, !dbg !125
  %1168 = zext <4 x i1> %1088 to <4 x i8>, !dbg !126
  %1169 = select <4 x i1> %1097, <4 x i8> splat (i8 2), <4 x i8> %1168, !dbg !127
  %1170 = select <4 x i1> %1106, <4 x i8> splat (i8 3), <4 x i8> %1169, !dbg !128
  %1171 = select <4 x i1> %1115, <4 x i8> splat (i8 4), <4 x i8> %1170, !dbg !129
  %1172 = select <4 x i1> %1124, <4 x i8> splat (i8 5), <4 x i8> %1171, !dbg !130
  %1173 = select <4 x i1> %1133, <4 x i8> splat (i8 6), <4 x i8> %1172, !dbg !131
  %1174 = select <4 x i1> %1142, <4 x i8> splat (i8 7), <4 x i8> %1173, !dbg !132
  %1175 = select <4 x i1> %1151, <4 x i8> splat (i8 8), <4 x i8> %1174, !dbg !133
  %1176 = shl i32 %50, 6, !dbg !134
  %1177 = shl i32 %51, 6, !dbg !134
  %1178 = shl i32 %52, 6, !dbg !134
  %1179 = shl i32 %53, 6, !dbg !134
  %1180 = shl i32 %49, 6, !dbg !134
  %1181 = shl i32 %61, 14, !dbg !135
  %1182 = shl i32 %63, 14, !dbg !135
  %1183 = add i32 %1181, %.decomposed61, !dbg !136
  %1184 = add i32 %1183, %1176, !dbg !137
  %1185 = add i32 %1183, %1177, !dbg !137
  %1186 = add i32 %1183, %1178, !dbg !137
  %1187 = add i32 %1183, %1179, !dbg !137
  %1188 = add i32 %1182, %.decomposed63, !dbg !136
  %1189 = add i32 %1188, %1180, !dbg !137
  %1190 = sext i32 %1184 to i64, !dbg !138
  %1191 = getelementptr float, ptr addrspace(1) %1, i64 %1190, !dbg !138
  %1192 = sext i32 %1185 to i64, !dbg !138
  %1193 = getelementptr float, ptr addrspace(1) %1, i64 %1192, !dbg !138
  %1194 = sext i32 %1186 to i64, !dbg !138
  %1195 = getelementptr float, ptr addrspace(1) %1, i64 %1194, !dbg !138
  %1196 = sext i32 %1187 to i64, !dbg !138
  %1197 = getelementptr float, ptr addrspace(1) %1, i64 %1196, !dbg !138
  %1198 = and i1 %43, %55, !dbg !139
  %1199 = and i1 %56, %43, !dbg !139
  %1200 = and i1 %57, %43, !dbg !139
  %1201 = and i1 %58, %43, !dbg !139
  %1202 = and i1 %27, %54, !dbg !139
  %1203 = shl i32 %8, 4, !dbg !140
  %1204 = and i32 %1203, 4080, !dbg !140
  %1205 = and i32 %9, 1020, !dbg !140
  %1206 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %1204, !dbg !140
  %1207 = getelementptr float, ptr addrspace(3) %1206, i32 %1204, !dbg !140
  %1208 = extractelement <4 x i32> %.v38, i64 0, !dbg !140
  %1209 = select i1 %867, i32 %768, i32 %1208, !dbg !141
  %1210 = insertelement <1 x i32> poison, i32 %1209, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1207, <1 x i32> %1210, i1 true) #2, !dbg !140
  %1211 = or disjoint i32 %1204, 1, !dbg !140
  %1212 = getelementptr float, ptr addrspace(3) %1206, i32 %1211, !dbg !140
  %1213 = extractelement <4 x i32> %.v38, i64 1, !dbg !140
  %1214 = select i1 %869, i32 %769, i32 %1213, !dbg !141
  %1215 = insertelement <1 x i32> poison, i32 %1214, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1212, <1 x i32> %1215, i1 true) #2, !dbg !140
  %1216 = or disjoint i32 %1204, 2, !dbg !140
  %1217 = getelementptr float, ptr addrspace(3) %1206, i32 %1216, !dbg !140
  %1218 = extractelement <4 x i32> %.v38, i64 2, !dbg !140
  %1219 = select i1 %871, i32 %770, i32 %1218, !dbg !141
  %1220 = insertelement <1 x i32> poison, i32 %1219, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1217, <1 x i32> %1220, i1 true) #2, !dbg !140
  %1221 = or disjoint i32 %1204, 3, !dbg !140
  %1222 = getelementptr float, ptr addrspace(3) %1206, i32 %1221, !dbg !140
  %1223 = extractelement <4 x i32> %.v38, i64 3, !dbg !140
  %1224 = select i1 %873, i32 %771, i32 %1223, !dbg !141
  %1225 = insertelement <1 x i32> poison, i32 %1224, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1222, <1 x i32> %1225, i1 true) #2, !dbg !140
  %1226 = or disjoint i32 %1204, 4, !dbg !140
  %1227 = getelementptr float, ptr addrspace(3) %1206, i32 %1226, !dbg !140
  %1228 = extractelement <4 x i32> %.v45, i64 0, !dbg !140
  %1229 = select i1 %965, i32 %772, i32 %1228, !dbg !141
  %1230 = insertelement <1 x i32> poison, i32 %1229, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1227, <1 x i32> %1230, i1 true) #2, !dbg !140
  %1231 = or disjoint i32 %1204, 5, !dbg !140
  %1232 = getelementptr float, ptr addrspace(3) %1206, i32 %1231, !dbg !140
  %1233 = extractelement <4 x i32> %.v45, i64 1, !dbg !140
  %1234 = select i1 %967, i32 %773, i32 %1233, !dbg !141
  %1235 = insertelement <1 x i32> poison, i32 %1234, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1232, <1 x i32> %1235, i1 true) #2, !dbg !140
  %1236 = or disjoint i32 %1204, 6, !dbg !140
  %1237 = getelementptr float, ptr addrspace(3) %1206, i32 %1236, !dbg !140
  %1238 = extractelement <4 x i32> %.v45, i64 2, !dbg !140
  %1239 = select i1 %969, i32 %774, i32 %1238, !dbg !141
  %1240 = insertelement <1 x i32> poison, i32 %1239, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1237, <1 x i32> %1240, i1 true) #2, !dbg !140
  %1241 = or disjoint i32 %1204, 7, !dbg !140
  %1242 = getelementptr float, ptr addrspace(3) %1206, i32 %1241, !dbg !140
  %1243 = extractelement <4 x i32> %.v45, i64 3, !dbg !140
  %1244 = select i1 %971, i32 %775, i32 %1243, !dbg !141
  %1245 = insertelement <1 x i32> poison, i32 %1244, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1242, <1 x i32> %1245, i1 true) #2, !dbg !140
  %1246 = or disjoint i32 %1204, 8, !dbg !140
  %1247 = getelementptr float, ptr addrspace(3) %1206, i32 %1246, !dbg !140
  %1248 = extractelement <4 x i32> %.v52, i64 0, !dbg !140
  %1249 = select i1 %1063, i32 %776, i32 %1248, !dbg !141
  %1250 = insertelement <1 x i32> poison, i32 %1249, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1247, <1 x i32> %1250, i1 true) #2, !dbg !140
  %1251 = or disjoint i32 %1204, 9, !dbg !140
  %1252 = getelementptr float, ptr addrspace(3) %1206, i32 %1251, !dbg !140
  %1253 = extractelement <4 x i32> %.v52, i64 1, !dbg !140
  %1254 = select i1 %1065, i32 %777, i32 %1253, !dbg !141
  %1255 = insertelement <1 x i32> poison, i32 %1254, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1252, <1 x i32> %1255, i1 true) #2, !dbg !140
  %1256 = or disjoint i32 %1204, 10, !dbg !140
  %1257 = getelementptr float, ptr addrspace(3) %1206, i32 %1256, !dbg !140
  %1258 = extractelement <4 x i32> %.v52, i64 2, !dbg !140
  %1259 = select i1 %1067, i32 %778, i32 %1258, !dbg !141
  %1260 = insertelement <1 x i32> poison, i32 %1259, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1257, <1 x i32> %1260, i1 true) #2, !dbg !140
  %1261 = or disjoint i32 %1204, 11, !dbg !140
  %1262 = getelementptr float, ptr addrspace(3) %1206, i32 %1261, !dbg !140
  %1263 = extractelement <4 x i32> %.v52, i64 3, !dbg !140
  %1264 = select i1 %1069, i32 %779, i32 %1263, !dbg !141
  %1265 = insertelement <1 x i32> poison, i32 %1264, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1262, <1 x i32> %1265, i1 true) #2, !dbg !140
  %1266 = or disjoint i32 %1204, 12, !dbg !140
  %1267 = getelementptr float, ptr addrspace(3) %1206, i32 %1266, !dbg !140
  %1268 = extractelement <4 x i32> %.v59, i64 0, !dbg !140
  %1269 = select i1 %1161, i32 %780, i32 %1268, !dbg !141
  %1270 = insertelement <1 x i32> poison, i32 %1269, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1267, <1 x i32> %1270, i1 true) #2, !dbg !140
  %1271 = or disjoint i32 %1204, 13, !dbg !140
  %1272 = getelementptr float, ptr addrspace(3) %1206, i32 %1271, !dbg !140
  %1273 = extractelement <4 x i32> %.v59, i64 1, !dbg !140
  %1274 = select i1 %1163, i32 %781, i32 %1273, !dbg !141
  %1275 = insertelement <1 x i32> poison, i32 %1274, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1272, <1 x i32> %1275, i1 true) #2, !dbg !140
  %1276 = or disjoint i32 %1204, 14, !dbg !140
  %1277 = getelementptr float, ptr addrspace(3) %1206, i32 %1276, !dbg !140
  %1278 = extractelement <4 x i32> %.v59, i64 2, !dbg !140
  %1279 = select i1 %1165, i32 %782, i32 %1278, !dbg !141
  %1280 = insertelement <1 x i32> poison, i32 %1279, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1277, <1 x i32> %1280, i1 true) #2, !dbg !140
  %1281 = or disjoint i32 %1204, 15, !dbg !140
  %1282 = getelementptr float, ptr addrspace(3) %1206, i32 %1281, !dbg !140
  %1283 = extractelement <4 x i32> %.v59, i64 3, !dbg !140
  %1284 = select i1 %1167, i32 %783, i32 %1283, !dbg !141
  %1285 = insertelement <1 x i32> poison, i32 %1284, i64 0, !dbg !140
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1282, <1 x i32> %1285, i1 true) #2, !dbg !140
  tail call void @llvm.nvvm.barrier0(), !dbg !140
  %1286 = and i32 %8, 252, !dbg !140
  %1287 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1286, !dbg !140
  %1288 = getelementptr inbounds float, ptr addrspace(3) %1287, i32 %1205, !dbg !140
  %1289 = or disjoint i32 %1205, 1024, !dbg !140
  %1290 = lshr exact i32 %1289, 2, !dbg !140
  %1291 = and i32 %1290, 508, !dbg !140
  %1292 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1291, !dbg !140
  %1293 = getelementptr inbounds float, ptr addrspace(3) %1292, i32 %1289, !dbg !140
  %1294 = load <4 x i32>, ptr addrspace(3) %1293, align 16, !dbg !140
  %1295 = or disjoint i32 %1205, 2048, !dbg !140
  %1296 = lshr exact i32 %1295, 2, !dbg !140
  %1297 = and i32 %1296, 764, !dbg !140
  %1298 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1297, !dbg !140
  %1299 = getelementptr inbounds float, ptr addrspace(3) %1298, i32 %1295, !dbg !140
  %1300 = load <4 x i32>, ptr addrspace(3) %1299, align 16, !dbg !140
  %1301 = or disjoint i32 %1205, 3072, !dbg !140
  %1302 = lshr exact i32 %1301, 2, !dbg !140
  %1303 = and i32 %1302, 1020, !dbg !140
  %1304 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1303, !dbg !140
  %1305 = getelementptr inbounds float, ptr addrspace(3) %1304, i32 %1301, !dbg !140
  %1306 = load <4 x i32>, ptr addrspace(3) %1305, align 16, !dbg !140
  %.extract = load i32, ptr addrspace(3) %1288, align 16, !dbg !140
  %1307 = getelementptr inbounds i8, ptr addrspace(3) %1288, i32 4, !dbg !140
  %.extract18 = load i32, ptr addrspace(3) %1307, align 4, !dbg !140
  %1308 = getelementptr inbounds i8, ptr addrspace(3) %1288, i32 8, !dbg !140
  %.extract19 = load i32, ptr addrspace(3) %1308, align 8, !dbg !140
  %1309 = getelementptr inbounds i8, ptr addrspace(3) %1288, i32 12, !dbg !140
  %.extract20 = load i32, ptr addrspace(3) %1309, align 4, !dbg !140
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %1191, i1 %1198) #2, !dbg !140
  %.extract21 = extractelement <4 x i32> %1294, i64 0, !dbg !140
  %.extract22 = extractelement <4 x i32> %1294, i64 1, !dbg !140
  %.extract23 = extractelement <4 x i32> %1294, i64 2, !dbg !140
  %.extract24 = extractelement <4 x i32> %1294, i64 3, !dbg !140
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %1193, i1 %1199) #2, !dbg !140
  %.extract25 = extractelement <4 x i32> %1300, i64 0, !dbg !140
  %.extract26 = extractelement <4 x i32> %1300, i64 1, !dbg !140
  %.extract27 = extractelement <4 x i32> %1300, i64 2, !dbg !140
  %.extract28 = extractelement <4 x i32> %1300, i64 3, !dbg !140
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %1195, i1 %1200) #2, !dbg !140
  %.extract29 = extractelement <4 x i32> %1306, i64 0, !dbg !140
  %.extract30 = extractelement <4 x i32> %1306, i64 1, !dbg !140
  %.extract31 = extractelement <4 x i32> %1306, i64 2, !dbg !140
  %.extract32 = extractelement <4 x i32> %1306, i64 3, !dbg !140
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %1197, i1 %1201) #2, !dbg !140
  %1310 = sext i32 %1189 to i64, !dbg !142
  %1311 = getelementptr i8, ptr addrspace(1) %2, i64 %1310, !dbg !142
  %1312 = bitcast <4 x i8> %881 to i32, !dbg !143
  %1313 = bitcast <4 x i8> %979 to i32, !dbg !143
  %1314 = bitcast <4 x i8> %1077 to i32, !dbg !143
  %1315 = bitcast <4 x i8> %1175 to i32, !dbg !143
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1312, i32 %1313, i32 %1314, i32 %1315, ptr addrspace(1) %1311, i1 %1202) #2, !dbg !143
  ret void, !dbg !144
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyn6fla5jeci5v233g2u7refbb5qlf57yns46bihryzt5zefn6uk.py", directory: "inductor_cache/yn")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_10, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_10", linkageName: "triton_poi_fused_max_pool2d_with_indices_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 20, scope: !7)
!25 = !DILocation(line: 40, column: 20, scope: !7)
!26 = !DILocation(line: 41, column: 19, scope: !7)
!27 = !DILocation(line: 45, column: 49, scope: !7)
!28 = !DILocation(line: 45, column: 39, scope: !7)
!29 = !DILocation(line: 45, column: 46, scope: !7)
!30 = !DILocation(line: 45, column: 59, scope: !7)
!31 = !DILocation(line: 45, column: 54, scope: !7)
!32 = !DILocation(line: 45, column: 31, scope: !7)
!33 = !DILocation(line: 45, column: 72, scope: !7)
!34 = !DILocation(line: 45, column: 80, scope: !7)
!35 = !DILocation(line: 45, column: 64, scope: !7)
!36 = !DILocation(line: 47, column: 21, scope: !7)
!37 = !DILocation(line: 51, column: 46, scope: !7)
!38 = !DILocation(line: 51, column: 54, scope: !7)
!39 = !DILocation(line: 51, column: 31, scope: !7)
!40 = !DILocation(line: 51, column: 72, scope: !7)
!41 = !DILocation(line: 51, column: 80, scope: !7)
!42 = !DILocation(line: 51, column: 64, scope: !7)
!43 = !DILocation(line: 53, column: 16, scope: !7)
!44 = !DILocation(line: 58, column: 46, scope: !7)
!45 = !DILocation(line: 58, column: 54, scope: !7)
!46 = !DILocation(line: 58, column: 31, scope: !7)
!47 = !DILocation(line: 58, column: 64, scope: !7)
!48 = !DILocation(line: 65, column: 45, scope: !7)
!49 = !DILocation(line: 65, column: 53, scope: !7)
!50 = !DILocation(line: 65, column: 31, scope: !7)
!51 = !DILocation(line: 65, column: 71, scope: !7)
!52 = !DILocation(line: 65, column: 79, scope: !7)
!53 = !DILocation(line: 65, column: 63, scope: !7)
!54 = !DILocation(line: 68, column: 46, scope: !7)
!55 = !DILocation(line: 68, column: 31, scope: !7)
!56 = !DILocation(line: 68, column: 64, scope: !7)
!57 = !DILocation(line: 68, column: 72, scope: !7)
!58 = !DILocation(line: 68, column: 56, scope: !7)
!59 = !DILocation(line: 71, column: 42, scope: !7)
!60 = !DILocation(line: 71, column: 50, scope: !7)
!61 = !DILocation(line: 71, column: 31, scope: !7)
!62 = !DILocation(line: 71, column: 60, scope: !7)
!63 = !DILocation(line: 73, column: 16, scope: !7)
!64 = !DILocation(line: 74, column: 21, scope: !7)
!65 = !DILocation(line: 75, column: 20, scope: !7)
!66 = !DILocation(line: 76, column: 20, scope: !7)
!67 = !DILocation(line: 77, column: 20, scope: !7)
!68 = !DILocation(line: 78, column: 43, scope: !7)
!69 = !DILocation(line: 78, column: 51, scope: !7)
!70 = !DILocation(line: 78, column: 31, scope: !7)
!71 = !DILocation(line: 78, column: 69, scope: !7)
!72 = !DILocation(line: 78, column: 77, scope: !7)
!73 = !DILocation(line: 78, column: 61, scope: !7)
!74 = !DILocation(line: 80, column: 20, scope: !7)
!75 = !DILocation(line: 81, column: 43, scope: !7)
!76 = !DILocation(line: 81, column: 51, scope: !7)
!77 = !DILocation(line: 81, column: 31, scope: !7)
!78 = !DILocation(line: 81, column: 69, scope: !7)
!79 = !DILocation(line: 81, column: 77, scope: !7)
!80 = !DILocation(line: 81, column: 61, scope: !7)
!81 = !DILocation(line: 84, column: 43, scope: !7)
!82 = !DILocation(line: 84, column: 51, scope: !7)
!83 = !DILocation(line: 84, column: 31, scope: !7)
!84 = !DILocation(line: 84, column: 61, scope: !7)
!85 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !88)
!86 = distinct !DILexicalBlockFile(scope: !7, file: !87, discriminator: 0)
!87 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!88 = !DILocation(line: 52, column: 42, scope: !7)
!89 = !DILocation(line: 120, column: 21, scope: !86, inlinedAt: !88)
!90 = !DILocation(line: 120, column: 16, scope: !86, inlinedAt: !88)
!91 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !88)
!92 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !93)
!93 = !DILocation(line: 59, column: 42, scope: !7)
!94 = !DILocation(line: 120, column: 21, scope: !86, inlinedAt: !93)
!95 = !DILocation(line: 120, column: 16, scope: !86, inlinedAt: !93)
!96 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !93)
!97 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !98)
!98 = !DILocation(line: 66, column: 42, scope: !7)
!99 = !DILocation(line: 120, column: 21, scope: !86, inlinedAt: !98)
!100 = !DILocation(line: 120, column: 16, scope: !86, inlinedAt: !98)
!101 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !98)
!102 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !103)
!103 = !DILocation(line: 69, column: 42, scope: !7)
!104 = !DILocation(line: 120, column: 21, scope: !86, inlinedAt: !103)
!105 = !DILocation(line: 120, column: 16, scope: !86, inlinedAt: !103)
!106 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !103)
!107 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !108)
!108 = !DILocation(line: 72, column: 42, scope: !7)
!109 = !DILocation(line: 120, column: 21, scope: !86, inlinedAt: !108)
!110 = !DILocation(line: 120, column: 16, scope: !86, inlinedAt: !108)
!111 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !108)
!112 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !113)
!113 = !DILocation(line: 79, column: 42, scope: !7)
!114 = !DILocation(line: 120, column: 21, scope: !86, inlinedAt: !113)
!115 = !DILocation(line: 120, column: 16, scope: !86, inlinedAt: !113)
!116 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !113)
!117 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !118)
!118 = !DILocation(line: 82, column: 42, scope: !7)
!119 = !DILocation(line: 120, column: 21, scope: !86, inlinedAt: !118)
!120 = !DILocation(line: 120, column: 16, scope: !86, inlinedAt: !118)
!121 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !118)
!122 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !123)
!123 = !DILocation(line: 85, column: 42, scope: !7)
!124 = !DILocation(line: 120, column: 21, scope: !86, inlinedAt: !123)
!125 = !DILocation(line: 120, column: 16, scope: !86, inlinedAt: !123)
!126 = !DILocation(line: 89, column: 35, scope: !7)
!127 = !DILocation(line: 92, column: 35, scope: !7)
!128 = !DILocation(line: 95, column: 35, scope: !7)
!129 = !DILocation(line: 98, column: 35, scope: !7)
!130 = !DILocation(line: 101, column: 35, scope: !7)
!131 = !DILocation(line: 104, column: 35, scope: !7)
!132 = !DILocation(line: 107, column: 35, scope: !7)
!133 = !DILocation(line: 110, column: 35, scope: !7)
!134 = !DILocation(line: 111, column: 33, scope: !7)
!135 = !DILocation(line: 111, column: 44, scope: !7)
!136 = !DILocation(line: 111, column: 30, scope: !7)
!137 = !DILocation(line: 111, column: 38, scope: !7)
!138 = !DILocation(line: 111, column: 25, scope: !7)
!139 = !DILocation(line: 111, column: 64, scope: !7)
!140 = !DILocation(line: 111, column: 56, scope: !7)
!141 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !123)
!142 = !DILocation(line: 112, column: 25, scope: !7)
!143 = !DILocation(line: 112, column: 56, scope: !7)
!144 = !DILocation(line: 112, column: 4, scope: !7)
