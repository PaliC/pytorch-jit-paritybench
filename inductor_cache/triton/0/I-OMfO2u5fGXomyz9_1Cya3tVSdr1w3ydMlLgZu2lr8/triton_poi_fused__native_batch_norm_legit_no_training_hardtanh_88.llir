; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_88(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 2, !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = and i32 %11, 255, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = or disjoint i32 %15, 64, !dbg !13
  %17 = or disjoint i32 %15, 128, !dbg !13
  %18 = or disjoint i32 %15, 192, !dbg !13
  %19 = or disjoint i32 %10, %14, !dbg !13
  %20 = icmp slt i32 %15, 300, !dbg !14
  %21 = icmp slt i32 %16, 300, !dbg !14
  %22 = icmp slt i32 %17, 300, !dbg !14
  %23 = icmp slt i32 %18, 300, !dbg !14
  %24 = icmp slt i32 %19, 300, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %26 = shl i32 %25, 4, !dbg !16
  %27 = shl i32 %11, 2, !dbg !17
  %28 = and i32 %27, 12, !dbg !17
  %29 = or disjoint i32 %26, %28, !dbg !18
  %30 = icmp slt i32 %29, 16, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %31 = sdiv i32 %.frozen, 75, !dbg !20
  %32 = mul i32 %31, 75, !dbg !21
  %.decomposed = sub i32 %.frozen, %32, !dbg !21
  %.frozen18 = freeze i32 %16, !dbg !20
  %33 = sdiv i32 %.frozen18, 75, !dbg !20
  %34 = mul i32 %33, 75, !dbg !21
  %.decomposed19 = sub i32 %.frozen18, %34, !dbg !21
  %.frozen20 = freeze i32 %17, !dbg !20
  %35 = sdiv i32 %.frozen20, 75, !dbg !20
  %36 = mul i32 %35, 75, !dbg !21
  %.decomposed21 = sub i32 %.frozen20, %36, !dbg !21
  %.frozen22 = freeze i32 %18, !dbg !20
  %37 = sdiv i32 %.frozen22, 75, !dbg !20
  %38 = mul i32 %37, 75, !dbg !21
  %.decomposed23 = sub i32 %.frozen22, %38, !dbg !21
  %39 = srem i32 %19, 75, !dbg !21
  %40 = mul i32 %29, 75, !dbg !22
  %41 = add i32 %40, 75, !dbg !22
  %42 = add i32 %40, 150, !dbg !22
  %43 = add i32 %40, 225, !dbg !22
  %44 = mul i32 %31, 1200, !dbg !23
  %45 = mul i32 %33, 1200, !dbg !23
  %46 = mul i32 %35, 1200, !dbg !23
  %47 = mul i32 %37, 1200, !dbg !23
  %48 = add i32 %44, %.decomposed, !dbg !24
  %49 = add i32 %48, %40, !dbg !25
  %50 = add i32 %48, %41, !dbg !25
  %51 = add i32 %48, %42, !dbg !25
  %52 = add i32 %48, %43, !dbg !25
  %53 = add i32 %45, %.decomposed19, !dbg !24
  %54 = add i32 %53, %40, !dbg !25
  %55 = add i32 %53, %41, !dbg !25
  %56 = add i32 %53, %42, !dbg !25
  %57 = add i32 %53, %43, !dbg !25
  %58 = add i32 %46, %.decomposed21, !dbg !24
  %59 = add i32 %58, %40, !dbg !25
  %60 = add i32 %58, %41, !dbg !25
  %61 = add i32 %58, %42, !dbg !25
  %62 = add i32 %58, %43, !dbg !25
  %63 = add i32 %47, %.decomposed23, !dbg !24
  %64 = add i32 %63, %40, !dbg !25
  %65 = add i32 %63, %41, !dbg !25
  %66 = add i32 %63, %42, !dbg !25
  %67 = add i32 %63, %43, !dbg !25
  %68 = sext i32 %49 to i64, !dbg !26
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !26
  %70 = sext i32 %50 to i64, !dbg !26
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !26
  %72 = sext i32 %51 to i64, !dbg !26
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !26
  %74 = sext i32 %52 to i64, !dbg !26
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !26
  %76 = sext i32 %54 to i64, !dbg !26
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !26
  %78 = sext i32 %55 to i64, !dbg !26
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !26
  %80 = sext i32 %56 to i64, !dbg !26
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !26
  %82 = sext i32 %57 to i64, !dbg !26
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !26
  %84 = sext i32 %59 to i64, !dbg !26
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !26
  %86 = sext i32 %60 to i64, !dbg !26
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !26
  %88 = sext i32 %61 to i64, !dbg !26
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !26
  %90 = sext i32 %62 to i64, !dbg !26
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !26
  %92 = sext i32 %64 to i64, !dbg !26
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !26
  %94 = sext i32 %65 to i64, !dbg !26
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !26
  %96 = sext i32 %66 to i64, !dbg !26
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !26
  %98 = sext i32 %67 to i64, !dbg !26
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !26
  %100 = and i1 %20, %30, !dbg !27
  %101 = and i1 %21, %30, !dbg !27
  %102 = and i1 %22, %30, !dbg !27
  %103 = and i1 %23, %30, !dbg !27
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %100) #4, !dbg !28
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %100) #4, !dbg !28
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %100) #4, !dbg !28
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %100) #4, !dbg !28
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %101) #4, !dbg !28
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %101) #4, !dbg !28
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %101) #4, !dbg !28
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %101) #4, !dbg !28
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %102) #4, !dbg !28
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %102) #4, !dbg !28
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %102) #4, !dbg !28
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %102) #4, !dbg !28
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %103) #4, !dbg !28
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %103) #4, !dbg !28
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %103) #4, !dbg !28
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %103) #4, !dbg !28
  %120 = and i32 %27, 1020, !dbg !28
  %121 = shl i32 %11, 4, !dbg !28
  %122 = and i32 %121, 4080, !dbg !28
  %123 = lshr i32 %120, 4, !dbg !28
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %123, !dbg !28
  %125 = getelementptr inbounds float, ptr addrspace(3) %124, i32 %120, !dbg !28
  %126 = insertelement <1 x i32> poison, i32 %104, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #4, !dbg !28
  %127 = or disjoint i32 %120, 1, !dbg !28
  %128 = getelementptr inbounds float, ptr addrspace(3) %124, i32 %127, !dbg !28
  %129 = insertelement <1 x i32> poison, i32 %105, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #4, !dbg !28
  %130 = or disjoint i32 %120, 2, !dbg !28
  %131 = getelementptr inbounds float, ptr addrspace(3) %124, i32 %130, !dbg !28
  %132 = insertelement <1 x i32> poison, i32 %106, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #4, !dbg !28
  %133 = or disjoint i32 %120, 3, !dbg !28
  %134 = getelementptr inbounds float, ptr addrspace(3) %124, i32 %133, !dbg !28
  %135 = insertelement <1 x i32> poison, i32 %107, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 true) #4, !dbg !28
  %136 = or disjoint i32 %120, 1024, !dbg !28
  %137 = lshr i32 %136, 4, !dbg !28
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %137, !dbg !28
  %139 = getelementptr inbounds float, ptr addrspace(3) %138, i32 %136, !dbg !28
  %140 = insertelement <1 x i32> poison, i32 %108, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #4, !dbg !28
  %141 = or disjoint i32 %120, 1025, !dbg !28
  %142 = lshr i32 %141, 4, !dbg !28
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %142, !dbg !28
  %144 = getelementptr inbounds float, ptr addrspace(3) %143, i32 %141, !dbg !28
  %145 = insertelement <1 x i32> poison, i32 %109, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #4, !dbg !28
  %146 = or disjoint i32 %120, 1026, !dbg !28
  %147 = lshr i32 %146, 4, !dbg !28
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %147, !dbg !28
  %149 = getelementptr inbounds float, ptr addrspace(3) %148, i32 %146, !dbg !28
  %150 = insertelement <1 x i32> poison, i32 %110, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #4, !dbg !28
  %151 = or disjoint i32 %120, 1027, !dbg !28
  %152 = lshr i32 %151, 4, !dbg !28
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %152, !dbg !28
  %154 = getelementptr inbounds float, ptr addrspace(3) %153, i32 %151, !dbg !28
  %155 = insertelement <1 x i32> poison, i32 %111, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 true) #4, !dbg !28
  %156 = or disjoint i32 %120, 2048, !dbg !28
  %157 = lshr i32 %156, 4, !dbg !28
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %157, !dbg !28
  %159 = getelementptr inbounds float, ptr addrspace(3) %158, i32 %156, !dbg !28
  %160 = insertelement <1 x i32> poison, i32 %112, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #4, !dbg !28
  %161 = or disjoint i32 %120, 2049, !dbg !28
  %162 = lshr i32 %161, 4, !dbg !28
  %163 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %162, !dbg !28
  %164 = getelementptr inbounds float, ptr addrspace(3) %163, i32 %161, !dbg !28
  %165 = insertelement <1 x i32> poison, i32 %113, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %165, i1 true) #4, !dbg !28
  %166 = or disjoint i32 %120, 2050, !dbg !28
  %167 = lshr i32 %166, 4, !dbg !28
  %168 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %167, !dbg !28
  %169 = getelementptr inbounds float, ptr addrspace(3) %168, i32 %166, !dbg !28
  %170 = insertelement <1 x i32> poison, i32 %114, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %170, i1 true) #4, !dbg !28
  %171 = or disjoint i32 %120, 2051, !dbg !28
  %172 = lshr i32 %171, 4, !dbg !28
  %173 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %172, !dbg !28
  %174 = getelementptr inbounds float, ptr addrspace(3) %173, i32 %171, !dbg !28
  %175 = insertelement <1 x i32> poison, i32 %115, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 true) #4, !dbg !28
  %176 = or disjoint i32 %120, 3072, !dbg !28
  %177 = lshr i32 %176, 4, !dbg !28
  %178 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %177, !dbg !28
  %179 = getelementptr inbounds float, ptr addrspace(3) %178, i32 %176, !dbg !28
  %180 = insertelement <1 x i32> poison, i32 %116, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #4, !dbg !28
  %181 = or disjoint i32 %120, 3073, !dbg !28
  %182 = lshr i32 %181, 4, !dbg !28
  %183 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %182, !dbg !28
  %184 = getelementptr inbounds float, ptr addrspace(3) %183, i32 %181, !dbg !28
  %185 = insertelement <1 x i32> poison, i32 %117, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %185, i1 true) #4, !dbg !28
  %186 = or disjoint i32 %120, 3074, !dbg !28
  %187 = lshr i32 %186, 4, !dbg !28
  %188 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %187, !dbg !28
  %189 = getelementptr inbounds float, ptr addrspace(3) %188, i32 %186, !dbg !28
  %190 = insertelement <1 x i32> poison, i32 %118, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %189, <1 x i32> %190, i1 true) #4, !dbg !28
  %191 = or disjoint i32 %120, 3075, !dbg !28
  %192 = lshr i32 %191, 4, !dbg !28
  %193 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %192, !dbg !28
  %194 = getelementptr inbounds float, ptr addrspace(3) %193, i32 %191, !dbg !28
  %195 = insertelement <1 x i32> poison, i32 %119, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %195, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %196 = lshr exact i32 %122, 2, !dbg !28
  %197 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %196, !dbg !28
  %198 = getelementptr float, ptr addrspace(3) %197, i32 %122, !dbg !28
  %199 = load <16 x float>, ptr addrspace(3) %198, align 4, !dbg !28
  %200 = sext i32 %39 to i64, !dbg !29
  %201 = getelementptr float, ptr addrspace(1) %1, i64 %200, !dbg !29
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 %24) #4, !dbg !30
  %203 = getelementptr float, ptr addrspace(1) %2, i64 %200, !dbg !31
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %203, i1 %24) #4, !dbg !32
  %205 = bitcast i32 %204 to float, !dbg !32
  %206 = getelementptr float, ptr addrspace(1) %3, i64 %200, !dbg !33
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 %24) #4, !dbg !34
  %208 = getelementptr float, ptr addrspace(1) %4, i64 %200, !dbg !35
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 %24) #4, !dbg !36
  %210 = fadd float %205, 0x3EE4F8B580000000, !dbg !37
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %211, 0, !dbg !38
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %212, 0, !dbg !38
  br i1 %.not.i, label %218, label %213, !dbg !38

213:                                              ; preds = %8
  br i1 %.not1.i, label %216, label %214, !dbg !38

214:                                              ; preds = %213
  %215 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %210) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

216:                                              ; preds = %213
  %217 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %210) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

218:                                              ; preds = %8
  br i1 %.not1.i, label %221, label %219, !dbg !38

219:                                              ; preds = %218
  %220 = tail call float @llvm.nvvm.sqrt.rn.f(float %210) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

221:                                              ; preds = %218
  %222 = tail call float @llvm.nvvm.sqrt.approx.f(float %210) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %214, %216, %219, %221
  %.0.i = phi float [ %215, %214 ], [ %217, %216 ], [ %220, %219 ], [ %222, %221 ], !dbg !38
  %223 = or disjoint i32 %122, 15, !dbg !28
  %224 = getelementptr float, ptr addrspace(3) %197, i32 %223, !dbg !28
  %225 = or disjoint i32 %122, 14, !dbg !28
  %226 = getelementptr float, ptr addrspace(3) %197, i32 %225, !dbg !28
  %227 = or disjoint i32 %122, 13, !dbg !28
  %228 = getelementptr float, ptr addrspace(3) %197, i32 %227, !dbg !28
  %229 = or disjoint i32 %122, 12, !dbg !28
  %230 = getelementptr float, ptr addrspace(3) %197, i32 %229, !dbg !28
  %231 = or disjoint i32 %122, 11, !dbg !28
  %232 = getelementptr float, ptr addrspace(3) %197, i32 %231, !dbg !28
  %233 = or disjoint i32 %122, 10, !dbg !28
  %234 = getelementptr float, ptr addrspace(3) %197, i32 %233, !dbg !28
  %235 = or disjoint i32 %122, 9, !dbg !28
  %236 = getelementptr float, ptr addrspace(3) %197, i32 %235, !dbg !28
  %237 = or disjoint i32 %122, 8, !dbg !28
  %238 = getelementptr float, ptr addrspace(3) %197, i32 %237, !dbg !28
  %239 = or disjoint i32 %122, 7, !dbg !28
  %240 = getelementptr float, ptr addrspace(3) %197, i32 %239, !dbg !28
  %241 = or disjoint i32 %122, 6, !dbg !28
  %242 = getelementptr float, ptr addrspace(3) %197, i32 %241, !dbg !28
  %243 = or disjoint i32 %122, 5, !dbg !28
  %244 = getelementptr float, ptr addrspace(3) %197, i32 %243, !dbg !28
  %245 = or disjoint i32 %122, 4, !dbg !28
  %246 = getelementptr float, ptr addrspace(3) %197, i32 %245, !dbg !28
  %247 = or disjoint i32 %122, 3, !dbg !28
  %248 = getelementptr float, ptr addrspace(3) %197, i32 %247, !dbg !28
  %249 = or disjoint i32 %122, 2, !dbg !28
  %250 = getelementptr float, ptr addrspace(3) %197, i32 %249, !dbg !28
  %251 = or disjoint i32 %122, 1, !dbg !28
  %252 = getelementptr float, ptr addrspace(3) %197, i32 %251, !dbg !28
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %254 = insertelement <16 x i32> poison, i32 %202, i64 0, !dbg !40
  %255 = bitcast <16 x i32> %254 to <16 x float>, !dbg !40
  %256 = shufflevector <16 x float> %255, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !40
  %257 = fsub <16 x float> %199, %256, !dbg !40
  %258 = insertelement <16 x float> poison, float %253, i64 0, !dbg !41
  %259 = shufflevector <16 x float> %258, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !41
  %260 = fmul <16 x float> %257, %259, !dbg !41
  %261 = insertelement <16 x i32> poison, i32 %207, i64 0, !dbg !42
  %262 = bitcast <16 x i32> %261 to <16 x float>, !dbg !42
  %263 = shufflevector <16 x float> %262, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !42
  %264 = fmul <16 x float> %260, %263, !dbg !42
  %265 = insertelement <16 x i32> poison, i32 %209, i64 0, !dbg !43
  %266 = bitcast <16 x i32> %265 to <16 x float>, !dbg !43
  %267 = shufflevector <16 x float> %266, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !43
  %268 = fadd <16 x float> %264, %267, !dbg !43
  %269 = fcmp ole <16 x float> %268, zeroinitializer, !dbg !44
  %270 = select <16 x i1> %269, <16 x float> zeroinitializer, <16 x float> %268, !dbg !44
  %271 = fcmp olt <16 x float> %270, splat (float 6.000000e+00), !dbg !48
  %272 = extractelement <16 x float> %270, i64 0, !dbg !50
  %273 = fcmp uno float %272, 0.000000e+00, !dbg !51
  %274 = extractelement <16 x float> %270, i64 1, !dbg !50
  %275 = fcmp uno float %274, 0.000000e+00, !dbg !51
  %276 = extractelement <16 x float> %270, i64 2, !dbg !50
  %277 = fcmp uno float %276, 0.000000e+00, !dbg !51
  %278 = extractelement <16 x float> %270, i64 3, !dbg !50
  %279 = fcmp uno float %278, 0.000000e+00, !dbg !51
  %280 = extractelement <16 x float> %270, i64 4, !dbg !50
  %281 = fcmp uno float %280, 0.000000e+00, !dbg !51
  %282 = extractelement <16 x float> %270, i64 5, !dbg !50
  %283 = fcmp uno float %282, 0.000000e+00, !dbg !51
  %284 = extractelement <16 x float> %270, i64 6, !dbg !50
  %285 = fcmp uno float %284, 0.000000e+00, !dbg !51
  %286 = extractelement <16 x float> %270, i64 7, !dbg !50
  %287 = fcmp uno float %286, 0.000000e+00, !dbg !51
  %288 = extractelement <16 x float> %270, i64 8, !dbg !50
  %289 = fcmp uno float %288, 0.000000e+00, !dbg !51
  %290 = extractelement <16 x float> %270, i64 9, !dbg !50
  %291 = fcmp uno float %290, 0.000000e+00, !dbg !51
  %292 = extractelement <16 x float> %270, i64 10, !dbg !50
  %293 = fcmp uno float %292, 0.000000e+00, !dbg !51
  %294 = extractelement <16 x float> %270, i64 11, !dbg !50
  %295 = fcmp uno float %294, 0.000000e+00, !dbg !51
  %296 = extractelement <16 x float> %270, i64 12, !dbg !50
  %297 = fcmp uno float %296, 0.000000e+00, !dbg !51
  %298 = extractelement <16 x float> %270, i64 13, !dbg !50
  %299 = fcmp uno float %298, 0.000000e+00, !dbg !51
  %300 = extractelement <16 x float> %270, i64 14, !dbg !50
  %301 = fcmp uno float %300, 0.000000e+00, !dbg !51
  %302 = extractelement <16 x float> %270, i64 15, !dbg !50
  %303 = fcmp uno float %302, 0.000000e+00, !dbg !51
  %304 = extractelement <16 x i1> %271, i64 0, !dbg !52
  %305 = or i1 %304, %273, !dbg !52
  %306 = extractelement <16 x i1> %271, i64 1, !dbg !52
  %307 = or i1 %306, %275, !dbg !52
  %308 = extractelement <16 x i1> %271, i64 2, !dbg !52
  %309 = or i1 %308, %277, !dbg !52
  %310 = extractelement <16 x i1> %271, i64 3, !dbg !52
  %311 = or i1 %310, %279, !dbg !52
  %312 = extractelement <16 x i1> %271, i64 4, !dbg !52
  %313 = or i1 %312, %281, !dbg !52
  %314 = extractelement <16 x i1> %271, i64 5, !dbg !52
  %315 = or i1 %314, %283, !dbg !52
  %316 = extractelement <16 x i1> %271, i64 6, !dbg !52
  %317 = or i1 %316, %285, !dbg !52
  %318 = extractelement <16 x i1> %271, i64 7, !dbg !52
  %319 = or i1 %318, %287, !dbg !52
  %320 = extractelement <16 x i1> %271, i64 8, !dbg !52
  %321 = or i1 %320, %289, !dbg !52
  %322 = extractelement <16 x i1> %271, i64 9, !dbg !52
  %323 = or i1 %322, %291, !dbg !52
  %324 = extractelement <16 x i1> %271, i64 10, !dbg !52
  %325 = or i1 %324, %293, !dbg !52
  %326 = extractelement <16 x i1> %271, i64 11, !dbg !52
  %327 = or i1 %326, %295, !dbg !52
  %328 = extractelement <16 x i1> %271, i64 12, !dbg !52
  %329 = or i1 %328, %297, !dbg !52
  %330 = extractelement <16 x i1> %271, i64 13, !dbg !52
  %331 = or i1 %330, %299, !dbg !52
  %332 = extractelement <16 x i1> %271, i64 14, !dbg !52
  %333 = or i1 %332, %301, !dbg !52
  %334 = extractelement <16 x i1> %271, i64 15, !dbg !52
  %335 = or i1 %334, %303, !dbg !52
  %336 = shl i32 %15, 4, !dbg !53
  %337 = shl i32 %16, 4, !dbg !53
  %338 = shl i32 %17, 4, !dbg !53
  %339 = shl i32 %18, 4, !dbg !53
  %340 = add i32 %29, %336, !dbg !54
  %341 = add i32 %29, %337, !dbg !54
  %342 = add i32 %29, %338, !dbg !54
  %343 = add i32 %29, %339, !dbg !54
  %344 = sext i32 %340 to i64, !dbg !55
  %345 = getelementptr float, ptr addrspace(1) %5, i64 %344, !dbg !55
  %346 = sext i32 %341 to i64, !dbg !55
  %347 = getelementptr float, ptr addrspace(1) %5, i64 %346, !dbg !55
  %348 = sext i32 %342 to i64, !dbg !55
  %349 = getelementptr float, ptr addrspace(1) %5, i64 %348, !dbg !55
  %350 = sext i32 %343 to i64, !dbg !55
  %351 = getelementptr float, ptr addrspace(1) %5, i64 %350, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %352 = bitcast float %272 to i32, !dbg !50
  %353 = select i1 %305, i32 %352, i32 1086324736, !dbg !56
  %354 = insertelement <1 x i32> poison, i32 %353, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %354, i1 true) #4, !dbg !50
  %355 = bitcast float %274 to i32, !dbg !50
  %356 = select i1 %307, i32 %355, i32 1086324736, !dbg !56
  %357 = insertelement <1 x i32> poison, i32 %356, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %357, i1 true) #4, !dbg !50
  %358 = bitcast float %276 to i32, !dbg !50
  %359 = select i1 %309, i32 %358, i32 1086324736, !dbg !56
  %360 = insertelement <1 x i32> poison, i32 %359, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %360, i1 true) #4, !dbg !50
  %361 = bitcast float %278 to i32, !dbg !50
  %362 = select i1 %311, i32 %361, i32 1086324736, !dbg !56
  %363 = insertelement <1 x i32> poison, i32 %362, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %363, i1 true) #4, !dbg !50
  %364 = bitcast float %280 to i32, !dbg !50
  %365 = select i1 %313, i32 %364, i32 1086324736, !dbg !56
  %366 = insertelement <1 x i32> poison, i32 %365, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %366, i1 true) #4, !dbg !50
  %367 = bitcast float %282 to i32, !dbg !50
  %368 = select i1 %315, i32 %367, i32 1086324736, !dbg !56
  %369 = insertelement <1 x i32> poison, i32 %368, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %369, i1 true) #4, !dbg !50
  %370 = bitcast float %284 to i32, !dbg !50
  %371 = select i1 %317, i32 %370, i32 1086324736, !dbg !56
  %372 = insertelement <1 x i32> poison, i32 %371, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %242, <1 x i32> %372, i1 true) #4, !dbg !50
  %373 = bitcast float %286 to i32, !dbg !50
  %374 = select i1 %319, i32 %373, i32 1086324736, !dbg !56
  %375 = insertelement <1 x i32> poison, i32 %374, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %375, i1 true) #4, !dbg !50
  %376 = bitcast float %288 to i32, !dbg !50
  %377 = select i1 %321, i32 %376, i32 1086324736, !dbg !56
  %378 = insertelement <1 x i32> poison, i32 %377, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %378, i1 true) #4, !dbg !50
  %379 = bitcast float %290 to i32, !dbg !50
  %380 = select i1 %323, i32 %379, i32 1086324736, !dbg !56
  %381 = insertelement <1 x i32> poison, i32 %380, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %381, i1 true) #4, !dbg !50
  %382 = bitcast float %292 to i32, !dbg !50
  %383 = select i1 %325, i32 %382, i32 1086324736, !dbg !56
  %384 = insertelement <1 x i32> poison, i32 %383, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %384, i1 true) #4, !dbg !50
  %385 = bitcast float %294 to i32, !dbg !50
  %386 = select i1 %327, i32 %385, i32 1086324736, !dbg !56
  %387 = insertelement <1 x i32> poison, i32 %386, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %387, i1 true) #4, !dbg !50
  %388 = bitcast float %296 to i32, !dbg !50
  %389 = select i1 %329, i32 %388, i32 1086324736, !dbg !56
  %390 = insertelement <1 x i32> poison, i32 %389, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %390, i1 true) #4, !dbg !50
  %391 = bitcast float %298 to i32, !dbg !50
  %392 = select i1 %331, i32 %391, i32 1086324736, !dbg !56
  %393 = insertelement <1 x i32> poison, i32 %392, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %393, i1 true) #4, !dbg !50
  %394 = bitcast float %300 to i32, !dbg !50
  %395 = select i1 %333, i32 %394, i32 1086324736, !dbg !56
  %396 = insertelement <1 x i32> poison, i32 %395, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %396, i1 true) #4, !dbg !50
  %397 = bitcast float %302 to i32, !dbg !50
  %398 = select i1 %335, i32 %397, i32 1086324736, !dbg !56
  %399 = insertelement <1 x i32> poison, i32 %398, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %399, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %400 = load i32, ptr addrspace(3) %125, align 4, !dbg !50
  %401 = load i32, ptr addrspace(3) %128, align 4, !dbg !50
  %402 = load i32, ptr addrspace(3) %131, align 4, !dbg !50
  %403 = load i32, ptr addrspace(3) %134, align 4, !dbg !50
  %404 = load i32, ptr addrspace(3) %139, align 4, !dbg !50
  %405 = load i32, ptr addrspace(3) %144, align 4, !dbg !50
  %406 = load i32, ptr addrspace(3) %149, align 4, !dbg !50
  %407 = load i32, ptr addrspace(3) %154, align 4, !dbg !50
  %408 = load i32, ptr addrspace(3) %159, align 4, !dbg !50
  %409 = load i32, ptr addrspace(3) %164, align 4, !dbg !50
  %410 = load i32, ptr addrspace(3) %169, align 4, !dbg !50
  %411 = load i32, ptr addrspace(3) %174, align 4, !dbg !50
  %412 = load i32, ptr addrspace(3) %179, align 4, !dbg !50
  %413 = load i32, ptr addrspace(3) %184, align 4, !dbg !50
  %414 = load i32, ptr addrspace(3) %189, align 4, !dbg !50
  %415 = load i32, ptr addrspace(3) %194, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %400, i32 %401, i32 %402, i32 %403, ptr addrspace(1) %345, i1 %100) #4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %404, i32 %405, i32 %406, i32 %407, ptr addrspace(1) %347, i1 %101) #4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %408, i32 %409, i32 %410, i32 %411, ptr addrspace(1) %349, i1 %102) #4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %412, i32 %413, i32 %414, i32 %415, ptr addrspace(1) %351, i1 %103) #4, !dbg !50
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctbmu7w4uzhbrhwjcpetk3pooulbtcl2skdbpyjhfec7o3ntievy.py", directory: "inductor_cache/tb")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_88, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_88, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_88", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_88", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 48, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 61, scope: !7)
!28 = !DILocation(line: 32, column: 53, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 49, column: 42, scope: !7)
!48 = !DILocation(line: 110, column: 15, scope: !45, inlinedAt: !49)
!49 = !DILocation(line: 51, column: 42, scope: !7)
!50 = !DILocation(line: 52, column: 45, scope: !7)
!51 = !DILocation(line: 112, column: 21, scope: !45, inlinedAt: !49)
!52 = !DILocation(line: 112, column: 16, scope: !45, inlinedAt: !49)
!53 = !DILocation(line: 52, column: 33, scope: !7)
!54 = !DILocation(line: 52, column: 30, scope: !7)
!55 = !DILocation(line: 52, column: 25, scope: !7)
!56 = !DILocation(line: 113, column: 29, scope: !45, inlinedAt: !49)
!57 = !DILocation(line: 52, column: 4, scope: !7)
