; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, i32 %17) local_unnamed_addr !dbg !7 {
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %20 = shl i32 %19, 9, !dbg !11
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %22 = shl i32 %21, 1, !dbg !12
  %23 = and i32 %22, 510, !dbg !12
  %24 = or disjoint i32 %20, %23, !dbg !13
  %25 = srem i32 %24, 48, !dbg !14
  %26 = sext i32 %24 to i64, !dbg !15
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !15
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !16
  %29 = sext i32 %25 to i64, !dbg !17
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !17
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !19
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !20
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !20
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !20
  %36 = bitcast i32 %34 to float, !dbg !20
  %37 = bitcast i32 %35 to float, !dbg !20
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !21
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !23
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !25
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !26
  %44 = getelementptr float, ptr addrspace(1) %6, i64 %29, !dbg !27
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %7, i64 %29, !dbg !29
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !30
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !30
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !30
  %50 = bitcast i32 %48 to float, !dbg !30
  %51 = bitcast i32 %49 to float, !dbg !30
  %52 = getelementptr float, ptr addrspace(1) %8, i64 %29, !dbg !31
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !32
  %54 = getelementptr float, ptr addrspace(1) %9, i64 %29, !dbg !33
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !34
  %56 = getelementptr float, ptr addrspace(1) %10, i64 %29, !dbg !35
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !36
  %58 = getelementptr float, ptr addrspace(1) %11, i64 %29, !dbg !37
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !38
  %60 = extractvalue { i32, i32 } %59, 0, !dbg !38
  %61 = extractvalue { i32, i32 } %59, 1, !dbg !38
  %62 = bitcast i32 %60 to float, !dbg !38
  %63 = bitcast i32 %61 to float, !dbg !38
  %64 = getelementptr float, ptr addrspace(1) %12, i64 %29, !dbg !39
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !40
  %66 = getelementptr float, ptr addrspace(1) %13, i64 %29, !dbg !41
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !42
  %68 = fadd float %36, 0x3EE4F8B580000000, !dbg !43
  %69 = fadd float %37, 0x3EE4F8B580000000, !dbg !43
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i = icmp eq i32 %70, 0, !dbg !44
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i = icmp eq i32 %71, 0, !dbg !44
  br i1 %.not.i, label %77, label %72, !dbg !44

72:                                               ; preds = %18
  br i1 %.not1.i, label %75, label %73, !dbg !44

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

77:                                               ; preds = %18
  br i1 %.not1.i, label %80, label %78, !dbg !44

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

__nv_sqrtf.exit:                                  ; preds = %73, %75, %78, %80
  %.0.i = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !44
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i1 = icmp eq i32 %82, 0, !dbg !44
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i4 = icmp eq i32 %83, 0, !dbg !44
  br i1 %.not.i1, label %89, label %84, !dbg !44

84:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %87, label %85, !dbg !44

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

89:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %92, label %90, !dbg !44

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

__nv_sqrtf.exit5:                                 ; preds = %85, %87, %90, %92
  %.0.i3 = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !44
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !45
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !45
  %96 = fadd float %50, 0x3EE4F8B580000000, !dbg !46
  %97 = fadd float %51, 0x3EE4F8B580000000, !dbg !46
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i6 = icmp eq i32 %98, 0, !dbg !47
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i9 = icmp eq i32 %99, 0, !dbg !47
  br i1 %.not.i6, label %105, label %100, !dbg !47

100:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %103, label %101, !dbg !47

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %96) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %96) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

105:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %108, label %106, !dbg !47

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %96) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %96) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

__nv_sqrtf.exit10:                                ; preds = %101, %103, %106, %108
  %.0.i8 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !47
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i11 = icmp eq i32 %110, 0, !dbg !47
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i14 = icmp eq i32 %111, 0, !dbg !47
  br i1 %.not.i11, label %117, label %112, !dbg !47

112:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %115, label %113, !dbg !47

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %97) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %97) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

117:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %120, label %118, !dbg !47

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.f(float %97) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.f(float %97) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

__nv_sqrtf.exit15:                                ; preds = %113, %115, %118, %120
  %.0.i13 = phi float [ %114, %113 ], [ %116, %115 ], [ %119, %118 ], [ %121, %120 ], !dbg !47
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !48
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !48
  %124 = fadd float %62, 0x3EE4F8B580000000, !dbg !49
  %125 = fadd float %63, 0x3EE4F8B580000000, !dbg !49
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i16 = icmp eq i32 %126, 0, !dbg !50
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i19 = icmp eq i32 %127, 0, !dbg !50
  br i1 %.not.i16, label %133, label %128, !dbg !50

128:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %131, label %129, !dbg !50

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #3, !dbg !50
  br label %__nv_sqrtf.exit20, !dbg !50

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #3, !dbg !50
  br label %__nv_sqrtf.exit20, !dbg !50

133:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %136, label %134, !dbg !50

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #3, !dbg !50
  br label %__nv_sqrtf.exit20, !dbg !50

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #3, !dbg !50
  br label %__nv_sqrtf.exit20, !dbg !50

__nv_sqrtf.exit20:                                ; preds = %129, %131, %134, %136
  %.0.i18 = phi float [ %130, %129 ], [ %132, %131 ], [ %135, %134 ], [ %137, %136 ], !dbg !50
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i21 = icmp eq i32 %138, 0, !dbg !50
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i24 = icmp eq i32 %139, 0, !dbg !50
  br i1 %.not.i21, label %145, label %140, !dbg !50

140:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %143, label %141, !dbg !50

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #3, !dbg !50
  br label %__nv_sqrtf.exit25, !dbg !50

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #3, !dbg !50
  br label %__nv_sqrtf.exit25, !dbg !50

145:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %148, label %146, !dbg !50

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #3, !dbg !50
  br label %__nv_sqrtf.exit25, !dbg !50

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #3, !dbg !50
  br label %__nv_sqrtf.exit25, !dbg !50

__nv_sqrtf.exit25:                                ; preds = %141, %143, %146, %148
  %.0.i23 = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !50
  %150 = extractvalue { i32, i32 } %28, 1, !dbg !16
  %151 = extractvalue { i32, i32 } %31, 1, !dbg !18
  %152 = extractvalue { i32, i32 } %39, 1, !dbg !22
  %153 = extractvalue { i32, i32 } %41, 1, !dbg !24
  %154 = extractvalue { i32, i32 } %43, 1, !dbg !26
  %155 = extractvalue { i32, i32 } %45, 1, !dbg !28
  %156 = extractvalue { i32, i32 } %53, 1, !dbg !32
  %157 = extractvalue { i32, i32 } %55, 1, !dbg !34
  %158 = insertelement <2 x i32> poison, i32 %150, i64 0, !dbg !16
  %159 = insertelement <2 x i32> %158, i32 %154, i64 1, !dbg !16
  %160 = bitcast <2 x i32> %159 to <2 x float>, !dbg !16
  %161 = insertelement <2 x i32> poison, i32 %151, i64 0, !dbg !18
  %162 = insertelement <2 x i32> %161, i32 %155, i64 1, !dbg !18
  %163 = bitcast <2 x i32> %162 to <2 x float>, !dbg !18
  %164 = fsub <2 x float> %160, %163, !dbg !51
  %165 = insertelement <2 x float> poison, float %95, i64 0, !dbg !52
  %166 = insertelement <2 x float> %165, float %123, i64 1, !dbg !52
  %167 = fmul <2 x float> %164, %166, !dbg !52
  %168 = insertelement <2 x i32> poison, i32 %152, i64 0, !dbg !22
  %169 = insertelement <2 x i32> %168, i32 %156, i64 1, !dbg !22
  %170 = bitcast <2 x i32> %169 to <2 x float>, !dbg !22
  %171 = fmul <2 x float> %167, %170, !dbg !53
  %172 = insertelement <2 x i32> poison, i32 %153, i64 0, !dbg !24
  %173 = insertelement <2 x i32> %172, i32 %157, i64 1, !dbg !24
  %174 = bitcast <2 x i32> %173 to <2 x float>, !dbg !24
  %175 = fadd <2 x float> %171, %174, !dbg !54
  %shift = shufflevector <2 x float> %175, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !55
  %176 = fadd <2 x float> %175, %shift, !dbg !55
  %177 = extractelement <2 x float> %176, i64 0, !dbg !55
  %178 = extractvalue { i32, i32 } %57, 1, !dbg !36
  %179 = bitcast i32 %178 to float, !dbg !36
  %180 = fsub float %177, %179, !dbg !56
  %181 = extractvalue { i32, i32 } %28, 0, !dbg !16
  %182 = extractvalue { i32, i32 } %31, 0, !dbg !18
  %183 = extractvalue { i32, i32 } %39, 0, !dbg !22
  %184 = extractvalue { i32, i32 } %41, 0, !dbg !24
  %185 = extractvalue { i32, i32 } %43, 0, !dbg !26
  %186 = extractvalue { i32, i32 } %45, 0, !dbg !28
  %187 = extractvalue { i32, i32 } %53, 0, !dbg !32
  %188 = extractvalue { i32, i32 } %55, 0, !dbg !34
  %189 = insertelement <2 x i32> poison, i32 %181, i64 0, !dbg !16
  %190 = insertelement <2 x i32> %189, i32 %185, i64 1, !dbg !16
  %191 = bitcast <2 x i32> %190 to <2 x float>, !dbg !16
  %192 = insertelement <2 x i32> poison, i32 %182, i64 0, !dbg !18
  %193 = insertelement <2 x i32> %192, i32 %186, i64 1, !dbg !18
  %194 = bitcast <2 x i32> %193 to <2 x float>, !dbg !18
  %195 = fsub <2 x float> %191, %194, !dbg !51
  %196 = insertelement <2 x float> poison, float %94, i64 0, !dbg !52
  %197 = insertelement <2 x float> %196, float %122, i64 1, !dbg !52
  %198 = fmul <2 x float> %195, %197, !dbg !52
  %199 = insertelement <2 x i32> poison, i32 %183, i64 0, !dbg !22
  %200 = insertelement <2 x i32> %199, i32 %187, i64 1, !dbg !22
  %201 = bitcast <2 x i32> %200 to <2 x float>, !dbg !22
  %202 = fmul <2 x float> %198, %201, !dbg !53
  %203 = insertelement <2 x i32> poison, i32 %184, i64 0, !dbg !24
  %204 = insertelement <2 x i32> %203, i32 %188, i64 1, !dbg !24
  %205 = bitcast <2 x i32> %204 to <2 x float>, !dbg !24
  %206 = fadd <2 x float> %202, %205, !dbg !54
  %shift26 = shufflevector <2 x float> %206, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !55
  %207 = fadd <2 x float> %206, %shift26, !dbg !55
  %208 = extractelement <2 x float> %207, i64 0, !dbg !55
  %209 = extractvalue { i32, i32 } %57, 0, !dbg !36
  %210 = bitcast i32 %209 to float, !dbg !36
  %211 = fsub float %208, %210, !dbg !56
  %212 = extractvalue { i32, i32 } %67, 1, !dbg !42
  %213 = bitcast i32 %212 to float, !dbg !42
  %214 = extractvalue { i32, i32 } %67, 0, !dbg !42
  %215 = bitcast i32 %214 to float, !dbg !42
  %216 = extractvalue { i32, i32 } %65, 1, !dbg !40
  %217 = bitcast i32 %216 to float, !dbg !40
  %218 = extractvalue { i32, i32 } %65, 0, !dbg !40
  %219 = bitcast i32 %218 to float, !dbg !40
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !57
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !57
  %222 = fmul float %211, %220, !dbg !58
  %223 = fmul float %180, %221, !dbg !58
  %224 = fmul float %222, %219, !dbg !59
  %225 = fmul float %223, %217, !dbg !59
  %226 = fadd float %224, %215, !dbg !60
  %227 = fadd float %225, %213, !dbg !60
  %228 = getelementptr float, ptr addrspace(1) %14, i64 %26, !dbg !61
  %229 = bitcast float %208 to i32, !dbg !62
  %230 = bitcast float %177 to i32, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %229, i32 %230, ptr addrspace(1) %228, i1 true) #3, !dbg !62
  %231 = getelementptr i8, ptr addrspace(1) %15, i64 %26, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 0, ptr addrspace(1) %231, i1 true) #3, !dbg !64
  %232 = getelementptr float, ptr addrspace(1) %16, i64 %26, !dbg !65
  %233 = bitcast float %226 to i32, !dbg !66
  %234 = bitcast float %227 to i32, !dbg !66
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %233, i32 %234, ptr addrspace(1) %232, i1 true) #3, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cda2pygzuitexff7corgoqbsr7m76ivcmume4ko7i4yghklwnihe.py", directory: "inductor_cache/da")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_8", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 32, scope: !7)
!36 = !DILocation(line: 36, column: 37, scope: !7)
!37 = !DILocation(line: 37, column: 32, scope: !7)
!38 = !DILocation(line: 37, column: 37, scope: !7)
!39 = !DILocation(line: 38, column: 32, scope: !7)
!40 = !DILocation(line: 38, column: 37, scope: !7)
!41 = !DILocation(line: 39, column: 32, scope: !7)
!42 = !DILocation(line: 39, column: 37, scope: !7)
!43 = !DILocation(line: 42, column: 18, scope: !7)
!44 = !DILocation(line: 43, column: 26, scope: !7)
!45 = !DILocation(line: 45, column: 18, scope: !7)
!46 = !DILocation(line: 52, column: 20, scope: !7)
!47 = !DILocation(line: 53, column: 27, scope: !7)
!48 = !DILocation(line: 54, column: 19, scope: !7)
!49 = !DILocation(line: 62, column: 20, scope: !7)
!50 = !DILocation(line: 63, column: 27, scope: !7)
!51 = !DILocation(line: 40, column: 18, scope: !7)
!52 = !DILocation(line: 48, column: 19, scope: !7)
!53 = !DILocation(line: 49, column: 20, scope: !7)
!54 = !DILocation(line: 50, column: 20, scope: !7)
!55 = !DILocation(line: 59, column: 20, scope: !7)
!56 = !DILocation(line: 61, column: 20, scope: !7)
!57 = !DILocation(line: 64, column: 19, scope: !7)
!58 = !DILocation(line: 66, column: 20, scope: !7)
!59 = !DILocation(line: 67, column: 20, scope: !7)
!60 = !DILocation(line: 68, column: 20, scope: !7)
!61 = !DILocation(line: 69, column: 25, scope: !7)
!62 = !DILocation(line: 69, column: 37, scope: !7)
!63 = !DILocation(line: 70, column: 25, scope: !7)
!64 = !DILocation(line: 70, column: 37, scope: !7)
!65 = !DILocation(line: 71, column: 25, scope: !7)
!66 = !DILocation(line: 71, column: 37, scope: !7)
!67 = !DILocation(line: 71, column: 4, scope: !7)
