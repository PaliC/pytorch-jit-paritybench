; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_mul_stack_sub_sum_33(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %8 = icmp slt i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 7, !dbg !12
  %11 = shl i32 %7, 3, !dbg !13
  %12 = or disjoint i32 %11, %10, !dbg !14
  %13 = sext i32 %12 to i64, !dbg !15
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !15
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %14, i1 %8, i32 0, i1 %8) #4, !dbg !16
  %16 = bitcast i32 %15 to float, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !17
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %8, i32 0, i1 %8) #4, !dbg !18
  %19 = bitcast i32 %18 to float, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %2, i64 %13, !dbg !19
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %8, i32 0, i1 %8) #4, !dbg !20
  %22 = bitcast i32 %21 to float, !dbg !20
  %23 = select i1 %8, float %16, float 0.000000e+00, !dbg !21
  %24 = bitcast float %23 to i32, !dbg !22
  %25 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %24, i32 4, i32 31), !dbg !22
  %26 = bitcast i32 %25 to float, !dbg !22
  %27 = fadd float %23, %26, !dbg !26
  %28 = bitcast float %27 to i32, !dbg !22
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 2, i32 31), !dbg !22
  %30 = bitcast i32 %29 to float, !dbg !22
  %31 = fadd float %27, %30, !dbg !26
  %32 = bitcast float %31 to i32, !dbg !22
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 1, i32 31), !dbg !22
  %34 = select i1 %8, float %19, float 0.000000e+00, !dbg !28
  %35 = bitcast float %34 to i32, !dbg !29
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 4, i32 31), !dbg !29
  %37 = bitcast i32 %36 to float, !dbg !29
  %38 = fadd float %34, %37, !dbg !31
  %39 = bitcast float %38 to i32, !dbg !29
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 2, i32 31), !dbg !29
  %41 = bitcast i32 %40 to float, !dbg !29
  %42 = fadd float %38, %41, !dbg !31
  %43 = bitcast float %42 to i32, !dbg !29
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 1, i32 31), !dbg !29
  %45 = bitcast i32 %44 to float, !dbg !29
  %46 = fadd float %42, %45, !dbg !31
  %47 = select i1 %8, float %22, float 0.000000e+00, !dbg !32
  %48 = bitcast float %47 to i32, !dbg !33
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 4, i32 31), !dbg !33
  %50 = bitcast i32 %49 to float, !dbg !33
  %51 = fadd float %47, %50, !dbg !35
  %52 = bitcast float %51 to i32, !dbg !33
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 2, i32 31), !dbg !33
  %54 = bitcast i32 %53 to float, !dbg !33
  %55 = fadd float %51, %54, !dbg !35
  %56 = bitcast float %55 to i32, !dbg !33
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 1, i32 31), !dbg !33
  %58 = bitcast i32 %57 to float, !dbg !33
  %59 = fadd float %55, %58, !dbg !35
  %60 = fmul float %46, %59, !dbg !36
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %61, 0, !dbg !37
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i = icmp eq i32 %62, 0, !dbg !37
  br i1 %.not.i, label %68, label %63, !dbg !37

63:                                               ; preds = %6
  br i1 %.not1.i, label %66, label %64, !dbg !37

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

68:                                               ; preds = %6
  br i1 %.not1.i, label %71, label %69, !dbg !37

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %64, %66, %69, %71
  %.0.i = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !37
  %73 = bitcast i32 %33 to float, !dbg !22
  %74 = fadd float %31, %73, !dbg !26
  %75 = fadd float %74, 0x3EB0C6F7A0000000, !dbg !38
  %76 = fadd float %.0.i, 0x3EB0C6F7A0000000, !dbg !39
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float %76) #4, !dbg !40
  %78 = mul i32 %7, 5, !dbg !41
  %79 = sext i32 %78 to i64, !dbg !42
  %80 = getelementptr float, ptr addrspace(1) %3, i64 %79, !dbg !42
  %81 = and i32 %9, 63, !dbg !43
  %82 = icmp eq i32 %81, 0, !dbg !43
  %83 = bitcast float %77 to i32, !dbg !43
  %84 = and i1 %82, %8, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %83, ptr addrspace(1) %80, i1 %84) #4, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csbuxprofcvghtgzfrp4xmdzagkjd3mcy2dvptvxj6vyh3y2ajxb.py", directory: "inductor_cache/sb")
!4 = !{ptr @triton_per_fused_add_mul_stack_sub_sum_33, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mul_stack_sub_sum_33, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mul_stack_sub_sum_33", linkageName: "triton_per_fused_add_mul_stack_sub_sum_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 37, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 42, scope: !7)
!17 = !DILocation(line: 32, column: 30, scope: !7)
!18 = !DILocation(line: 32, column: 42, scope: !7)
!19 = !DILocation(line: 33, column: 31, scope: !7)
!20 = !DILocation(line: 33, column: 43, scope: !7)
!21 = !DILocation(line: 35, column: 33, scope: !7)
!22 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = !DILocation(line: 36, column: 24, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !25)
!27 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!28 = !DILocation(line: 38, column: 33, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !30)
!30 = !DILocation(line: 39, column: 24, scope: !7)
!31 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !30)
!32 = !DILocation(line: 41, column: 35, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !34)
!34 = !DILocation(line: 42, column: 26, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !34)
!36 = !DILocation(line: 45, column: 19, scope: !7)
!37 = !DILocation(line: 46, column: 27, scope: !7)
!38 = !DILocation(line: 44, column: 19, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 49, column: 27, scope: !7)
!42 = !DILocation(line: 49, column: 25, scope: !7)
!43 = !DILocation(line: 49, column: 39, scope: !7)
!44 = !DILocation(line: 49, column: 4, scope: !7)
