; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_mul_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %12 = shl i32 %11, 5, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 3, !dbg !12
  %15 = and i32 %14, 15, !dbg !12
  %16 = or disjoint i32 %15, 16, !dbg !12
  %17 = shl i32 %13, 2, !dbg !12
  %18 = and i32 %17, 28, !dbg !12
  %19 = or disjoint i32 %12, %15, !dbg !13
  %20 = or disjoint i32 %12, %16, !dbg !13
  %21 = or disjoint i32 %12, %18, !dbg !13
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %23 = shl i32 %22, 5, !dbg !15
  %24 = or disjoint i32 %23, %18, !dbg !16
  %25 = or disjoint i32 %23, %15, !dbg !16
  %26 = or disjoint i32 %23, %16, !dbg !16
  %27 = icmp slt i32 %24, 128, !dbg !17
  %28 = icmp slt i32 %25, 128, !dbg !17
  %29 = icmp slt i32 %26, 128, !dbg !17
  %.frozen = freeze i32 %21, !dbg !18
  %30 = sdiv i32 %.frozen, 1024, !dbg !18
  %31 = mul i32 %30, 1024, !dbg !19
  %.decomposed = sub i32 %.frozen, %31, !dbg !19
  %32 = shl i32 %19, 7, !dbg !20
  %33 = shl i32 %20, 7, !dbg !20
  %34 = add i32 %24, %32, !dbg !21
  %35 = add i32 %24, %33, !dbg !21
  %36 = sext i32 %34 to i64, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !22
  %38 = sext i32 %35 to i64, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !22
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %27) #2, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !23
  %45 = bitcast i32 %41 to float, !dbg !23
  %46 = bitcast i32 %42 to float, !dbg !23
  %47 = bitcast i32 %43 to float, !dbg !23
  %48 = bitcast i32 %44 to float, !dbg !23
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %27) #2, !dbg !23
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !23
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !23
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !23
  %54 = bitcast i32 %50 to float, !dbg !23
  %55 = bitcast i32 %51 to float, !dbg !23
  %56 = bitcast i32 %52 to float, !dbg !23
  %57 = bitcast i32 %53 to float, !dbg !23
  %58 = sext i32 %24 to i64, !dbg !24
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !24
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %27) #2, !dbg !25
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !25
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !25
  %65 = bitcast i32 %61 to float, !dbg !25
  %66 = bitcast i32 %62 to float, !dbg !25
  %67 = bitcast i32 %63 to float, !dbg !25
  %68 = bitcast i32 %64 to float, !dbg !25
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !26
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %27) #2, !dbg !27
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !27
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !27
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !27
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !27
  %75 = bitcast i32 %71 to float, !dbg !27
  %76 = bitcast i32 %72 to float, !dbg !27
  %77 = bitcast i32 %73 to float, !dbg !27
  %78 = bitcast i32 %74 to float, !dbg !27
  %79 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !28
  %80 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !28
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %27) #2, !dbg !29
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !29
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !29
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !29
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !29
  %86 = bitcast i32 %82 to float, !dbg !29
  %87 = bitcast i32 %83 to float, !dbg !29
  %88 = bitcast i32 %84 to float, !dbg !29
  %89 = bitcast i32 %85 to float, !dbg !29
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 %27) #2, !dbg !29
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !29
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !29
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !29
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !29
  %95 = bitcast i32 %91 to float, !dbg !29
  %96 = bitcast i32 %92 to float, !dbg !29
  %97 = bitcast i32 %93 to float, !dbg !29
  %98 = bitcast i32 %94 to float, !dbg !29
  %99 = getelementptr float, ptr addrspace(1) %4, i64 %58, !dbg !30
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %99, i1 %27) #2, !dbg !31
  %101 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !31
  %102 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !31
  %103 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !31
  %104 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !31
  %105 = bitcast i32 %101 to float, !dbg !31
  %106 = bitcast i32 %102 to float, !dbg !31
  %107 = bitcast i32 %103 to float, !dbg !31
  %108 = bitcast i32 %104 to float, !dbg !31
  %109 = getelementptr float, ptr addrspace(1) %5, i64 %58, !dbg !32
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %109, i1 %27) #2, !dbg !33
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !33
  %112 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !33
  %113 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !33
  %114 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !33
  %115 = bitcast i32 %111 to float, !dbg !33
  %116 = bitcast i32 %112 to float, !dbg !33
  %117 = bitcast i32 %113 to float, !dbg !33
  %118 = bitcast i32 %114 to float, !dbg !33
  %119 = getelementptr float, ptr addrspace(1) %6, i64 %58, !dbg !34
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %119, i1 %27) #2, !dbg !35
  %121 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !35
  %122 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !35
  %123 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !35
  %124 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !35
  %125 = bitcast i32 %121 to float, !dbg !35
  %126 = bitcast i32 %122 to float, !dbg !35
  %127 = bitcast i32 %123 to float, !dbg !35
  %128 = bitcast i32 %124 to float, !dbg !35
  %129 = fadd float %45, %65, !dbg !36
  %130 = fadd float %46, %66, !dbg !36
  %131 = fadd float %47, %67, !dbg !36
  %132 = fadd float %48, %68, !dbg !36
  %133 = fadd float %54, %65, !dbg !36
  %134 = fadd float %55, %66, !dbg !36
  %135 = fadd float %56, %67, !dbg !36
  %136 = fadd float %57, %68, !dbg !36
  %137 = fmul float %75, %86, !dbg !37
  %138 = fmul float %76, %87, !dbg !37
  %139 = fmul float %77, %88, !dbg !37
  %140 = fmul float %78, %89, !dbg !37
  %141 = fmul float %75, %95, !dbg !37
  %142 = fmul float %76, %96, !dbg !37
  %143 = fmul float %77, %97, !dbg !37
  %144 = fmul float %78, %98, !dbg !37
  %145 = fadd float %137, %105, !dbg !38
  %146 = fadd float %138, %106, !dbg !38
  %147 = fadd float %139, %107, !dbg !38
  %148 = fadd float %140, %108, !dbg !38
  %149 = fadd float %141, %105, !dbg !38
  %150 = fadd float %142, %106, !dbg !38
  %151 = fadd float %143, %107, !dbg !38
  %152 = fadd float %144, %108, !dbg !38
  %153 = fmul float %129, %115, !dbg !39
  %154 = fmul float %130, %116, !dbg !39
  %155 = fmul float %131, %117, !dbg !39
  %156 = fmul float %132, %118, !dbg !39
  %157 = fmul float %133, %115, !dbg !39
  %158 = fmul float %134, %116, !dbg !39
  %159 = fmul float %135, %117, !dbg !39
  %160 = fmul float %136, %118, !dbg !39
  %161 = fadd float %153, %125, !dbg !40
  %162 = fadd float %154, %126, !dbg !40
  %163 = fadd float %155, %127, !dbg !40
  %164 = fadd float %156, %128, !dbg !40
  %165 = fadd float %157, %125, !dbg !40
  %166 = fadd float %158, %126, !dbg !40
  %167 = fadd float %159, %127, !dbg !40
  %168 = fadd float %160, %128, !dbg !40
  %169 = fadd float %145, %161, !dbg !41
  %170 = fadd float %146, %162, !dbg !41
  %171 = fadd float %147, %163, !dbg !41
  %172 = fadd float %148, %164, !dbg !41
  %173 = fadd float %149, %165, !dbg !41
  %174 = fadd float %150, %166, !dbg !41
  %175 = fadd float %151, %167, !dbg !41
  %176 = fadd float %152, %168, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %177 = bitcast float %129 to i32, !dbg !43
  %178 = bitcast float %130 to i32, !dbg !43
  %179 = bitcast float %131 to i32, !dbg !43
  %180 = bitcast float %132 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %177, i32 %178, i32 %179, i32 %180, ptr addrspace(1) %37, i1 %27) #2, !dbg !43
  %181 = bitcast float %133 to i32, !dbg !43
  %182 = bitcast float %134 to i32, !dbg !43
  %183 = bitcast float %135 to i32, !dbg !43
  %184 = bitcast float %136 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %181, i32 %182, i32 %183, i32 %184, ptr addrspace(1) %39, i1 %27) #2, !dbg !43
  %185 = shl i32 %25, 10, !dbg !44
  %186 = shl i32 %26, 10, !dbg !44
  %187 = shl i32 %30, 17, !dbg !45
  %188 = add i32 %187, %.decomposed, !dbg !46
  %189 = add i32 %188, %185, !dbg !47
  %190 = add i32 %188, %186, !dbg !47
  %191 = sext i32 %189 to i64, !dbg !48
  %192 = getelementptr float, ptr addrspace(1) %7, i64 %191, !dbg !48
  %193 = sext i32 %190 to i64, !dbg !48
  %194 = getelementptr float, ptr addrspace(1) %7, i64 %193, !dbg !48
  %195 = shl i32 %13, 7, !dbg !49
  %196 = and i32 %195, 896, !dbg !49
  %197 = or disjoint i32 %196, %15, !dbg !49
  %198 = and i32 %17, 508, !dbg !49
  %199 = lshr exact i32 %196, 1, !dbg !49
  %200 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %199, !dbg !49
  %201 = getelementptr float, ptr addrspace(3) %200, i32 %197, !dbg !49
  %202 = bitcast float %169 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %202, i1 true) #2, !dbg !49
  %203 = or disjoint i32 %197, 32, !dbg !49
  %204 = lshr i32 %203, 3, !dbg !49
  %205 = and i32 %204, 116, !dbg !49
  %206 = getelementptr float, ptr addrspace(3) @global_smem, i32 %205, !dbg !49
  %207 = getelementptr float, ptr addrspace(3) %206, i32 %203, !dbg !49
  %208 = bitcast float %170 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %207, <1 x i32> %208, i1 true) #2, !dbg !49
  %209 = or disjoint i32 %197, 64, !dbg !49
  %210 = lshr i32 %209, 3, !dbg !49
  %211 = and i32 %210, 120, !dbg !49
  %212 = getelementptr float, ptr addrspace(3) @global_smem, i32 %211, !dbg !49
  %213 = getelementptr float, ptr addrspace(3) %212, i32 %209, !dbg !49
  %214 = bitcast float %171 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, <1 x i32> %214, i1 true) #2, !dbg !49
  %215 = or disjoint i32 %197, 96, !dbg !49
  %216 = lshr i32 %215, 3, !dbg !49
  %217 = and i32 %216, 124, !dbg !49
  %218 = getelementptr float, ptr addrspace(3) @global_smem, i32 %217, !dbg !49
  %219 = getelementptr float, ptr addrspace(3) %218, i32 %215, !dbg !49
  %220 = bitcast float %172 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %220, i1 true) #2, !dbg !49
  %221 = or disjoint i32 %197, 16, !dbg !49
  %222 = getelementptr float, ptr addrspace(3) %200, i32 %221, !dbg !49
  %223 = bitcast float %173 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %223, i1 true) #2, !dbg !49
  %224 = or disjoint i32 %197, 48, !dbg !49
  %225 = lshr i32 %224, 3, !dbg !49
  %226 = and i32 %225, 116, !dbg !49
  %227 = getelementptr float, ptr addrspace(3) @global_smem, i32 %226, !dbg !49
  %228 = getelementptr float, ptr addrspace(3) %227, i32 %224, !dbg !49
  %229 = bitcast float %174 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 true) #2, !dbg !49
  %230 = or disjoint i32 %197, 80, !dbg !49
  %231 = lshr i32 %230, 3, !dbg !49
  %232 = and i32 %231, 120, !dbg !49
  %233 = getelementptr float, ptr addrspace(3) @global_smem, i32 %232, !dbg !49
  %234 = getelementptr float, ptr addrspace(3) %233, i32 %230, !dbg !49
  %235 = bitcast float %175 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %235, i1 true) #2, !dbg !49
  %236 = or disjoint i32 %197, 112, !dbg !49
  %237 = lshr i32 %236, 3, !dbg !49
  %238 = and i32 %237, 124, !dbg !49
  %239 = getelementptr float, ptr addrspace(3) @global_smem, i32 %238, !dbg !49
  %240 = getelementptr float, ptr addrspace(3) %239, i32 %236, !dbg !49
  %241 = bitcast float %176 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 true) #2, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %242 = lshr i32 %17, 3, !dbg !49
  %243 = and i32 %242, 60, !dbg !49
  %244 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %243, !dbg !49
  %245 = getelementptr inbounds float, ptr addrspace(3) %244, i32 %198, !dbg !49
  %246 = or disjoint i32 %198, 512, !dbg !49
  %247 = lshr i32 %246, 3, !dbg !49
  %248 = and i32 %247, 124, !dbg !49
  %249 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %248, !dbg !49
  %250 = getelementptr inbounds float, ptr addrspace(3) %249, i32 %246, !dbg !49
  %251 = load <4 x i32>, ptr addrspace(3) %250, align 16, !dbg !49
  %.extract = load i32, ptr addrspace(3) %245, align 16, !dbg !49
  %252 = getelementptr inbounds i8, ptr addrspace(3) %245, i32 4, !dbg !49
  %.extract8 = load i32, ptr addrspace(3) %252, align 4, !dbg !49
  %253 = getelementptr inbounds i8, ptr addrspace(3) %245, i32 8, !dbg !49
  %.extract9 = load i32, ptr addrspace(3) %253, align 8, !dbg !49
  %254 = getelementptr inbounds i8, ptr addrspace(3) %245, i32 12, !dbg !49
  %.extract10 = load i32, ptr addrspace(3) %254, align 4, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %192, i1 %28) #2, !dbg !49
  %.extract11 = extractelement <4 x i32> %251, i64 0, !dbg !49
  %.extract12 = extractelement <4 x i32> %251, i64 1, !dbg !49
  %.extract13 = extractelement <4 x i32> %251, i64 2, !dbg !49
  %.extract14 = extractelement <4 x i32> %251, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %194, i1 %29) #2, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ct7uvtjgkgkfacsvs7wgbp6upmzkfflzf2c72n7bif547y773bu3.py", directory: "inductor_cache/t7")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_18", linkageName: "triton_poi_fused_add_convolution_mul_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 34, scope: !7)
!23 = !DILocation(line: 32, column: 48, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 44, scope: !7)
!30 = !DILocation(line: 36, column: 30, scope: !7)
!31 = !DILocation(line: 36, column: 35, scope: !7)
!32 = !DILocation(line: 37, column: 30, scope: !7)
!33 = !DILocation(line: 37, column: 35, scope: !7)
!34 = !DILocation(line: 38, column: 31, scope: !7)
!35 = !DILocation(line: 38, column: 36, scope: !7)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 18, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 43, column: 19, scope: !7)
!41 = !DILocation(line: 44, column: 19, scope: !7)
!42 = !DILocation(line: 45, column: 4, scope: !7)
!43 = !DILocation(line: 46, column: 48, scope: !7)
!44 = !DILocation(line: 47, column: 35, scope: !7)
!45 = !DILocation(line: 47, column: 47, scope: !7)
!46 = !DILocation(line: 47, column: 30, scope: !7)
!47 = !DILocation(line: 47, column: 40, scope: !7)
!48 = !DILocation(line: 47, column: 25, scope: !7)
!49 = !DILocation(line: 47, column: 59, scope: !7)
!50 = !DILocation(line: 47, column: 4, scope: !7)
