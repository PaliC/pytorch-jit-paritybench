; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 7, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 7, !dbg !12
  %10 = and i32 %8, 127, !dbg !12
  %11 = lshr i32 %8, 3, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = or disjoint i32 %14, 16, !dbg !13
  %16 = or disjoint i32 %14, 32, !dbg !13
  %17 = or disjoint i32 %14, 48, !dbg !13
  %18 = or disjoint i32 %14, 64, !dbg !13
  %19 = or disjoint i32 %14, 80, !dbg !13
  %20 = or disjoint i32 %14, 96, !dbg !13
  %21 = or disjoint i32 %14, 112, !dbg !13
  %22 = icmp slt i32 %13, 100, !dbg !14
  %23 = icmp slt i32 %14, 100, !dbg !14
  %24 = icmp slt i32 %15, 100, !dbg !14
  %25 = icmp slt i32 %16, 100, !dbg !14
  %26 = icmp slt i32 %17, 100, !dbg !14
  %27 = icmp slt i32 %18, 100, !dbg !14
  %28 = icmp slt i32 %19, 100, !dbg !14
  %29 = icmp slt i32 %20, 100, !dbg !14
  %30 = icmp slt i32 %7, 0, !dbg !14
  %31 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %32 = shl i32 %31, 3, !dbg !16
  %33 = or disjoint i32 %32, %9, !dbg !17
  %34 = icmp slt i32 %32, 1024, !dbg !18
  %35 = icmp slt i32 %33, 1024, !dbg !18
  %36 = sdiv i32 %13, 5, !dbg !19
  %37 = sdiv i32 %13, 25, !dbg !20
  %.frozen = freeze i32 %14, !dbg !20
  %38 = sdiv i32 %.frozen, 25, !dbg !20
  %.frozen16 = freeze i32 %15, !dbg !20
  %39 = sdiv i32 %.frozen16, 25, !dbg !20
  %.frozen18 = freeze i32 %16, !dbg !20
  %40 = sdiv i32 %.frozen18, 25, !dbg !20
  %.frozen20 = freeze i32 %17, !dbg !20
  %41 = sdiv i32 %.frozen20, 25, !dbg !20
  %.frozen22 = freeze i32 %18, !dbg !20
  %42 = sdiv i32 %.frozen22, 25, !dbg !20
  %.frozen24 = freeze i32 %19, !dbg !20
  %43 = sdiv i32 %.frozen24, 25, !dbg !20
  %.frozen26 = freeze i32 %20, !dbg !20
  %44 = sdiv i32 %.frozen26, 25, !dbg !20
  %.frozen28 = freeze i32 %21, !dbg !20
  %45 = sdiv i32 %.frozen28, 25, !dbg !20
  %46 = mul i32 %38, 25, !dbg !21
  %.decomposed = sub i32 %.frozen, %46, !dbg !21
  %47 = mul i32 %39, 25, !dbg !21
  %.decomposed17 = sub i32 %.frozen16, %47, !dbg !21
  %48 = mul i32 %40, 25, !dbg !21
  %.decomposed19 = sub i32 %.frozen18, %48, !dbg !21
  %49 = mul i32 %41, 25, !dbg !21
  %.decomposed21 = sub i32 %.frozen20, %49, !dbg !21
  %50 = mul i32 %42, 25, !dbg !21
  %.decomposed23 = sub i32 %.frozen22, %50, !dbg !21
  %51 = mul i32 %43, 25, !dbg !21
  %.decomposed25 = sub i32 %.frozen24, %51, !dbg !21
  %52 = mul i32 %44, 25, !dbg !21
  %.decomposed27 = sub i32 %.frozen26, %52, !dbg !21
  %53 = mul i32 %45, 25, !dbg !21
  %.decomposed29 = sub i32 %.frozen28, %53, !dbg !21
  %54 = mul i32 %37, 82944, !dbg !22
  %55 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !23
  %56 = insertelement <2 x i32> %55, i32 %36, i64 1, !dbg !23
  %57 = srem <2 x i32> %56, splat (i32 5), !dbg !23
  %58 = extractelement <2 x i32> %57, i64 1, !dbg !24
  %59 = icmp sgt i32 %58, 0, !dbg !25
  %60 = shl nsw <2 x i32> %57, splat (i32 1), !dbg !26
  %61 = extractelement <2 x i32> %57, i64 0, !dbg !24
  %62 = icmp sgt i32 %61, 0, !dbg !27
  %63 = and i1 %62, %59, !dbg !28
  %64 = shl nsw i32 %61, 11, !dbg !29
  %65 = mul nsw i32 %58, 18432, !dbg !30
  %66 = add i32 %54, %64, !dbg !31
  %67 = add i32 %66, -10240, !dbg !32
  %68 = add i32 %67, %32, !dbg !33
  %69 = add i32 %68, %65, !dbg !34
  %70 = add i32 %66, -10236, !dbg !32
  %71 = add i32 %70, %32, !dbg !33
  %72 = add i32 %71, %65, !dbg !34
  %73 = sext i32 %69 to i64, !dbg !35
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !35
  %75 = sext i32 %72 to i64, !dbg !35
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !35
  %77 = and i1 %34, %63, !dbg !36
  %78 = and i1 %22, %77, !dbg !37
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %74, i1 %78, i32 -8388608, i1 %78, i32 -8388608, i1 %78, i32 -8388608, i1 %78, i32 -8388608, i1 %78) #2, !dbg !38
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !38
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !38
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !38
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !38
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %76, i1 %78, i32 -8388608, i1 %78, i32 -8388608, i1 %78, i32 -8388608, i1 %78, i32 -8388608, i1 %78) #2, !dbg !38
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !38
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !38
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !38
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !38
  %89 = icmp sgt <2 x i32> %57, splat (i32 -1), !dbg !39
  %90 = extractelement <2 x i1> %89, i64 0, !dbg !40
  %91 = and i1 %90, %59, !dbg !40
  %92 = add i32 %66, -9216, !dbg !41
  %93 = add i32 %92, %32, !dbg !42
  %94 = add i32 %93, %65, !dbg !43
  %95 = add i32 %66, -9212, !dbg !41
  %96 = add i32 %95, %32, !dbg !42
  %97 = add i32 %96, %65, !dbg !43
  %98 = sext i32 %94 to i64, !dbg !44
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !44
  %100 = sext i32 %97 to i64, !dbg !44
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !44
  %102 = and i1 %34, %91, !dbg !45
  %103 = and i1 %22, %102, !dbg !46
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %99, i1 %103, i32 -8388608, i1 %103, i32 -8388608, i1 %103, i32 -8388608, i1 %103, i32 -8388608, i1 %103) #2, !dbg !47
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !47
  %106 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !47
  %107 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !47
  %108 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !47
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %101, i1 %103, i32 -8388608, i1 %103, i32 -8388608, i1 %103, i32 -8388608, i1 %103, i32 -8388608, i1 %103) #2, !dbg !47
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !47
  %111 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !47
  %112 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !47
  %113 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !47
  %114 = or disjoint <2 x i32> %60, splat (i32 1), !dbg !48
  %115 = icmp slt <2 x i32> %114, splat (i32 9), !dbg !49
  %116 = and <2 x i1> %89, %115, !dbg !50
  %117 = extractelement <2 x i1> %116, i64 0, !dbg !51
  %118 = and i1 %59, %117, !dbg !52
  %119 = add i32 %66, -8192, !dbg !53
  %120 = add i32 %119, %32, !dbg !54
  %121 = add i32 %120, %65, !dbg !55
  %122 = add i32 %66, -8188, !dbg !53
  %123 = add i32 %122, %32, !dbg !54
  %124 = add i32 %123, %65, !dbg !55
  %125 = sext i32 %121 to i64, !dbg !56
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !56
  %127 = sext i32 %124 to i64, !dbg !56
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !56
  %129 = and i1 %34, %118, !dbg !57
  %130 = and i1 %22, %129, !dbg !58
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %126, i1 %130, i32 -8388608, i1 %130, i32 -8388608, i1 %130, i32 -8388608, i1 %130, i32 -8388608, i1 %130) #2, !dbg !59
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !59
  %133 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !59
  %134 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !59
  %135 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !59
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %128, i1 %130, i32 -8388608, i1 %130, i32 -8388608, i1 %130, i32 -8388608, i1 %130, i32 -8388608, i1 %130) #2, !dbg !59
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !59
  %138 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !59
  %139 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !59
  %140 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !59
  %141 = extractelement <2 x i1> %89, i64 1, !dbg !60
  %142 = and i1 %62, %141, !dbg !60
  %143 = add i32 %66, -1024, !dbg !61
  %144 = add i32 %143, %32, !dbg !62
  %145 = add i32 %144, %65, !dbg !63
  %146 = add i32 %66, -1020, !dbg !61
  %147 = add i32 %146, %32, !dbg !62
  %148 = add i32 %147, %65, !dbg !63
  %149 = sext i32 %145 to i64, !dbg !64
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !64
  %151 = sext i32 %148 to i64, !dbg !64
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !64
  %153 = and i1 %34, %142, !dbg !65
  %154 = and i1 %22, %153, !dbg !66
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %150, i1 %154, i32 -8388608, i1 %154, i32 -8388608, i1 %154, i32 -8388608, i1 %154, i32 -8388608, i1 %154) #2, !dbg !67
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !67
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !67
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !67
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !67
  %160 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %152, i1 %154, i32 -8388608, i1 %154, i32 -8388608, i1 %154, i32 -8388608, i1 %154, i32 -8388608, i1 %154) #2, !dbg !67
  %161 = extractvalue { i32, i32, i32, i32 } %160, 0, !dbg !67
  %162 = extractvalue { i32, i32, i32, i32 } %160, 1, !dbg !67
  %163 = extractvalue { i32, i32, i32, i32 } %160, 2, !dbg !67
  %164 = extractvalue { i32, i32, i32, i32 } %160, 3, !dbg !67
  %165 = or i32 %58, %61, !dbg !24
  %166 = icmp sgt i32 %165, -1, !dbg !24
  %167 = add i32 %66, %32, !dbg !68
  %168 = add i32 %167, %65, !dbg !69
  %169 = or disjoint i32 %66, 4, !dbg !70
  %170 = add i32 %169, %32, !dbg !68
  %171 = add i32 %170, %65, !dbg !69
  %172 = sext i32 %168 to i64, !dbg !71
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !71
  %174 = sext i32 %171 to i64, !dbg !71
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !71
  %176 = and i1 %34, %166, !dbg !72
  %177 = and i1 %22, %176, !dbg !73
  %178 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %173, i1 %177, i32 -8388608, i1 %177, i32 -8388608, i1 %177, i32 -8388608, i1 %177, i32 -8388608, i1 %177) #2, !dbg !74
  %179 = extractvalue { i32, i32, i32, i32 } %178, 0, !dbg !74
  %180 = extractvalue { i32, i32, i32, i32 } %178, 1, !dbg !74
  %181 = extractvalue { i32, i32, i32, i32 } %178, 2, !dbg !74
  %182 = extractvalue { i32, i32, i32, i32 } %178, 3, !dbg !74
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %175, i1 %177, i32 -8388608, i1 %177, i32 -8388608, i1 %177, i32 -8388608, i1 %177, i32 -8388608, i1 %177) #2, !dbg !74
  %184 = extractvalue { i32, i32, i32, i32 } %183, 0, !dbg !74
  %185 = extractvalue { i32, i32, i32, i32 } %183, 1, !dbg !74
  %186 = extractvalue { i32, i32, i32, i32 } %183, 2, !dbg !74
  %187 = extractvalue { i32, i32, i32, i32 } %183, 3, !dbg !74
  %188 = and i1 %141, %117, !dbg !75
  %189 = add i32 %66, 1024, !dbg !76
  %190 = add i32 %189, %32, !dbg !77
  %191 = add i32 %190, %65, !dbg !78
  %192 = add i32 %66, 1028, !dbg !76
  %193 = add i32 %192, %32, !dbg !77
  %194 = add i32 %193, %65, !dbg !78
  %195 = sext i32 %191 to i64, !dbg !79
  %196 = getelementptr float, ptr addrspace(1) %0, i64 %195, !dbg !79
  %197 = sext i32 %194 to i64, !dbg !79
  %198 = getelementptr float, ptr addrspace(1) %0, i64 %197, !dbg !79
  %199 = and i1 %34, %188, !dbg !80
  %200 = and i1 %22, %199, !dbg !81
  %201 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %196, i1 %200, i32 -8388608, i1 %200, i32 -8388608, i1 %200, i32 -8388608, i1 %200, i32 -8388608, i1 %200) #2, !dbg !82
  %202 = extractvalue { i32, i32, i32, i32 } %201, 0, !dbg !82
  %203 = extractvalue { i32, i32, i32, i32 } %201, 1, !dbg !82
  %204 = extractvalue { i32, i32, i32, i32 } %201, 2, !dbg !82
  %205 = extractvalue { i32, i32, i32, i32 } %201, 3, !dbg !82
  %206 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %198, i1 %200, i32 -8388608, i1 %200, i32 -8388608, i1 %200, i32 -8388608, i1 %200, i32 -8388608, i1 %200) #2, !dbg !82
  %207 = extractvalue { i32, i32, i32, i32 } %206, 0, !dbg !82
  %208 = extractvalue { i32, i32, i32, i32 } %206, 1, !dbg !82
  %209 = extractvalue { i32, i32, i32, i32 } %206, 2, !dbg !82
  %210 = extractvalue { i32, i32, i32, i32 } %206, 3, !dbg !82
  %211 = extractelement <2 x i1> %116, i64 1, !dbg !51
  %212 = and i1 %62, %211, !dbg !83
  %213 = add i32 %66, 8192, !dbg !84
  %214 = add i32 %213, %32, !dbg !85
  %215 = add i32 %214, %65, !dbg !86
  %216 = add i32 %66, 8196, !dbg !84
  %217 = add i32 %216, %32, !dbg !85
  %218 = add i32 %217, %65, !dbg !86
  %219 = sext i32 %215 to i64, !dbg !87
  %220 = getelementptr float, ptr addrspace(1) %0, i64 %219, !dbg !87
  %221 = sext i32 %218 to i64, !dbg !87
  %222 = getelementptr float, ptr addrspace(1) %0, i64 %221, !dbg !87
  %223 = and i1 %34, %212, !dbg !88
  %224 = and i1 %22, %223, !dbg !89
  %225 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %220, i1 %224, i32 -8388608, i1 %224, i32 -8388608, i1 %224, i32 -8388608, i1 %224, i32 -8388608, i1 %224) #2, !dbg !90
  %226 = extractvalue { i32, i32, i32, i32 } %225, 0, !dbg !90
  %227 = extractvalue { i32, i32, i32, i32 } %225, 1, !dbg !90
  %228 = extractvalue { i32, i32, i32, i32 } %225, 2, !dbg !90
  %229 = extractvalue { i32, i32, i32, i32 } %225, 3, !dbg !90
  %230 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %222, i1 %224, i32 -8388608, i1 %224, i32 -8388608, i1 %224, i32 -8388608, i1 %224, i32 -8388608, i1 %224) #2, !dbg !90
  %231 = extractvalue { i32, i32, i32, i32 } %230, 0, !dbg !90
  %232 = extractvalue { i32, i32, i32, i32 } %230, 1, !dbg !90
  %233 = extractvalue { i32, i32, i32, i32 } %230, 2, !dbg !90
  %234 = extractvalue { i32, i32, i32, i32 } %230, 3, !dbg !90
  %235 = and i1 %90, %211, !dbg !91
  %236 = add i32 %66, 9216, !dbg !92
  %237 = add i32 %236, %32, !dbg !93
  %238 = add i32 %237, %65, !dbg !94
  %239 = add i32 %66, 9220, !dbg !92
  %240 = add i32 %239, %32, !dbg !93
  %241 = add i32 %240, %65, !dbg !94
  %242 = sext i32 %238 to i64, !dbg !95
  %243 = getelementptr float, ptr addrspace(1) %0, i64 %242, !dbg !95
  %244 = sext i32 %241 to i64, !dbg !95
  %245 = getelementptr float, ptr addrspace(1) %0, i64 %244, !dbg !95
  %246 = and i1 %34, %235, !dbg !96
  %247 = and i1 %22, %246, !dbg !97
  %248 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %243, i1 %247, i32 -8388608, i1 %247, i32 -8388608, i1 %247, i32 -8388608, i1 %247, i32 -8388608, i1 %247) #2, !dbg !98
  %249 = extractvalue { i32, i32, i32, i32 } %248, 0, !dbg !98
  %250 = extractvalue { i32, i32, i32, i32 } %248, 1, !dbg !98
  %251 = extractvalue { i32, i32, i32, i32 } %248, 2, !dbg !98
  %252 = extractvalue { i32, i32, i32, i32 } %248, 3, !dbg !98
  %253 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %245, i1 %247, i32 -8388608, i1 %247, i32 -8388608, i1 %247, i32 -8388608, i1 %247, i32 -8388608, i1 %247) #2, !dbg !98
  %254 = extractvalue { i32, i32, i32, i32 } %253, 0, !dbg !98
  %255 = extractvalue { i32, i32, i32, i32 } %253, 1, !dbg !98
  %256 = extractvalue { i32, i32, i32, i32 } %253, 2, !dbg !98
  %257 = extractvalue { i32, i32, i32, i32 } %253, 3, !dbg !98
  %258 = and i1 %117, %211, !dbg !51
  %259 = add i32 %66, 10240, !dbg !99
  %260 = add i32 %259, %32, !dbg !100
  %261 = add i32 %260, %65, !dbg !101
  %262 = add i32 %66, 10244, !dbg !99
  %263 = add i32 %262, %32, !dbg !100
  %264 = add i32 %263, %65, !dbg !101
  %265 = sext i32 %261 to i64, !dbg !102
  %266 = getelementptr float, ptr addrspace(1) %0, i64 %265, !dbg !102
  %267 = sext i32 %264 to i64, !dbg !102
  %268 = getelementptr float, ptr addrspace(1) %0, i64 %267, !dbg !102
  %269 = and i1 %34, %258, !dbg !103
  %270 = and i1 %22, %269, !dbg !104
  %271 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %266, i1 %270, i32 -8388608, i1 %270, i32 -8388608, i1 %270, i32 -8388608, i1 %270, i32 -8388608, i1 %270) #2, !dbg !105
  %272 = extractvalue { i32, i32, i32, i32 } %271, 0, !dbg !105
  %273 = extractvalue { i32, i32, i32, i32 } %271, 1, !dbg !105
  %274 = extractvalue { i32, i32, i32, i32 } %271, 2, !dbg !105
  %275 = extractvalue { i32, i32, i32, i32 } %271, 3, !dbg !105
  %276 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %268, i1 %270, i32 -8388608, i1 %270, i32 -8388608, i1 %270, i32 -8388608, i1 %270, i32 -8388608, i1 %270) #2, !dbg !105
  %277 = extractvalue { i32, i32, i32, i32 } %276, 0, !dbg !105
  %278 = extractvalue { i32, i32, i32, i32 } %276, 1, !dbg !105
  %279 = extractvalue { i32, i32, i32, i32 } %276, 2, !dbg !105
  %280 = extractvalue { i32, i32, i32, i32 } %276, 3, !dbg !105
  %281 = insertelement <4 x i32> poison, i32 %80, i64 0, !dbg !38
  %282 = insertelement <4 x i32> %281, i32 %81, i64 1, !dbg !38
  %283 = insertelement <4 x i32> %282, i32 %82, i64 2, !dbg !38
  %284 = insertelement <4 x i32> %283, i32 %83, i64 3, !dbg !38
  %285 = bitcast <4 x i32> %284 to <4 x float>, !dbg !38
  %286 = insertelement <4 x i32> poison, i32 %105, i64 0, !dbg !47
  %287 = insertelement <4 x i32> %286, i32 %106, i64 1, !dbg !47
  %288 = insertelement <4 x i32> %287, i32 %107, i64 2, !dbg !47
  %289 = insertelement <4 x i32> %288, i32 %108, i64 3, !dbg !47
  %290 = bitcast <4 x i32> %289 to <4 x float>, !dbg !47
  %291 = fcmp ogt <4 x float> %290, %285, !dbg !106
  %292 = fcmp uno <4 x float> %290, zeroinitializer, !dbg !110
  %293 = or <4 x i1> %291, %292, !dbg !111
  %.v = select <4 x i1> %293, <4 x i32> %289, <4 x i32> %284, !dbg !112
  %294 = bitcast <4 x i32> %.v to <4 x float>, !dbg !112
  %295 = insertelement <4 x i32> poison, i32 %132, i64 0, !dbg !59
  %296 = insertelement <4 x i32> %295, i32 %133, i64 1, !dbg !59
  %297 = insertelement <4 x i32> %296, i32 %134, i64 2, !dbg !59
  %298 = insertelement <4 x i32> %297, i32 %135, i64 3, !dbg !59
  %299 = bitcast <4 x i32> %298 to <4 x float>, !dbg !59
  %300 = fcmp olt <4 x float> %294, %299, !dbg !113
  %301 = fcmp uno <4 x float> %299, zeroinitializer, !dbg !115
  %302 = or <4 x i1> %301, %300, !dbg !116
  %.v3 = select <4 x i1> %302, <4 x i32> %298, <4 x i32> %.v, !dbg !117
  %303 = bitcast <4 x i32> %.v3 to <4 x float>, !dbg !117
  %304 = insertelement <4 x i32> poison, i32 %156, i64 0, !dbg !67
  %305 = insertelement <4 x i32> %304, i32 %157, i64 1, !dbg !67
  %306 = insertelement <4 x i32> %305, i32 %158, i64 2, !dbg !67
  %307 = insertelement <4 x i32> %306, i32 %159, i64 3, !dbg !67
  %308 = bitcast <4 x i32> %307 to <4 x float>, !dbg !67
  %309 = fcmp olt <4 x float> %303, %308, !dbg !118
  %310 = fcmp uno <4 x float> %308, zeroinitializer, !dbg !120
  %311 = or <4 x i1> %310, %309, !dbg !121
  %.v4 = select <4 x i1> %311, <4 x i32> %307, <4 x i32> %.v3, !dbg !122
  %312 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !122
  %313 = insertelement <4 x i32> poison, i32 %179, i64 0, !dbg !74
  %314 = insertelement <4 x i32> %313, i32 %180, i64 1, !dbg !74
  %315 = insertelement <4 x i32> %314, i32 %181, i64 2, !dbg !74
  %316 = insertelement <4 x i32> %315, i32 %182, i64 3, !dbg !74
  %317 = bitcast <4 x i32> %316 to <4 x float>, !dbg !74
  %318 = fcmp olt <4 x float> %312, %317, !dbg !123
  %319 = fcmp uno <4 x float> %317, zeroinitializer, !dbg !125
  %320 = or <4 x i1> %319, %318, !dbg !126
  %.v5 = select <4 x i1> %320, <4 x i32> %316, <4 x i32> %.v4, !dbg !127
  %321 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !127
  %322 = insertelement <4 x i32> poison, i32 %202, i64 0, !dbg !82
  %323 = insertelement <4 x i32> %322, i32 %203, i64 1, !dbg !82
  %324 = insertelement <4 x i32> %323, i32 %204, i64 2, !dbg !82
  %325 = insertelement <4 x i32> %324, i32 %205, i64 3, !dbg !82
  %326 = bitcast <4 x i32> %325 to <4 x float>, !dbg !82
  %327 = fcmp olt <4 x float> %321, %326, !dbg !128
  %328 = fcmp uno <4 x float> %326, zeroinitializer, !dbg !130
  %329 = or <4 x i1> %328, %327, !dbg !131
  %.v6 = select <4 x i1> %329, <4 x i32> %325, <4 x i32> %.v5, !dbg !132
  %330 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !132
  %331 = insertelement <4 x i32> poison, i32 %226, i64 0, !dbg !90
  %332 = insertelement <4 x i32> %331, i32 %227, i64 1, !dbg !90
  %333 = insertelement <4 x i32> %332, i32 %228, i64 2, !dbg !90
  %334 = insertelement <4 x i32> %333, i32 %229, i64 3, !dbg !90
  %335 = bitcast <4 x i32> %334 to <4 x float>, !dbg !90
  %336 = fcmp olt <4 x float> %330, %335, !dbg !133
  %337 = fcmp uno <4 x float> %335, zeroinitializer, !dbg !135
  %338 = or <4 x i1> %337, %336, !dbg !136
  %.v7 = select <4 x i1> %338, <4 x i32> %334, <4 x i32> %.v6, !dbg !137
  %339 = bitcast <4 x i32> %.v7 to <4 x float>, !dbg !137
  %340 = insertelement <4 x i32> poison, i32 %249, i64 0, !dbg !98
  %341 = insertelement <4 x i32> %340, i32 %250, i64 1, !dbg !98
  %342 = insertelement <4 x i32> %341, i32 %251, i64 2, !dbg !98
  %343 = insertelement <4 x i32> %342, i32 %252, i64 3, !dbg !98
  %344 = bitcast <4 x i32> %343 to <4 x float>, !dbg !98
  %345 = fcmp olt <4 x float> %339, %344, !dbg !138
  %346 = fcmp uno <4 x float> %344, zeroinitializer, !dbg !140
  %347 = or <4 x i1> %346, %345, !dbg !141
  %.v8 = select <4 x i1> %347, <4 x i32> %343, <4 x i32> %.v7, !dbg !142
  %348 = bitcast <4 x i32> %.v8 to <4 x float>, !dbg !142
  %349 = insertelement <4 x i32> poison, i32 %272, i64 0, !dbg !105
  %350 = insertelement <4 x i32> %349, i32 %273, i64 1, !dbg !105
  %351 = insertelement <4 x i32> %350, i32 %274, i64 2, !dbg !105
  %352 = insertelement <4 x i32> %351, i32 %275, i64 3, !dbg !105
  %353 = bitcast <4 x i32> %352 to <4 x float>, !dbg !105
  %354 = fcmp olt <4 x float> %348, %353, !dbg !143
  %355 = extractelement <4 x i1> %354, i64 0, !dbg !145
  %356 = extractelement <4 x i1> %354, i64 1, !dbg !145
  %357 = extractelement <4 x i1> %354, i64 2, !dbg !145
  %358 = extractelement <4 x i1> %354, i64 3, !dbg !145
  %359 = zext <4 x i1> %291 to <4 x i8>, !dbg !146
  %360 = select <4 x i1> %300, <4 x i8> splat (i8 2), <4 x i8> %359, !dbg !147
  %361 = select <4 x i1> %309, <4 x i8> splat (i8 3), <4 x i8> %360, !dbg !148
  %362 = select <4 x i1> %318, <4 x i8> splat (i8 4), <4 x i8> %361, !dbg !149
  %363 = select <4 x i1> %327, <4 x i8> splat (i8 5), <4 x i8> %362, !dbg !150
  %364 = select <4 x i1> %336, <4 x i8> splat (i8 6), <4 x i8> %363, !dbg !151
  %365 = select <4 x i1> %345, <4 x i8> splat (i8 7), <4 x i8> %364, !dbg !152
  %366 = select <4 x i1> %354, <4 x i8> splat (i8 8), <4 x i8> %365, !dbg !153
  %367 = insertelement <4 x i32> poison, i32 %85, i64 0, !dbg !38
  %368 = insertelement <4 x i32> %367, i32 %86, i64 1, !dbg !38
  %369 = insertelement <4 x i32> %368, i32 %87, i64 2, !dbg !38
  %370 = insertelement <4 x i32> %369, i32 %88, i64 3, !dbg !38
  %371 = bitcast <4 x i32> %370 to <4 x float>, !dbg !38
  %372 = insertelement <4 x i32> poison, i32 %110, i64 0, !dbg !47
  %373 = insertelement <4 x i32> %372, i32 %111, i64 1, !dbg !47
  %374 = insertelement <4 x i32> %373, i32 %112, i64 2, !dbg !47
  %375 = insertelement <4 x i32> %374, i32 %113, i64 3, !dbg !47
  %376 = bitcast <4 x i32> %375 to <4 x float>, !dbg !47
  %377 = fcmp ogt <4 x float> %376, %371, !dbg !106
  %378 = fcmp uno <4 x float> %376, zeroinitializer, !dbg !110
  %379 = or <4 x i1> %377, %378, !dbg !111
  %.v9 = select <4 x i1> %379, <4 x i32> %375, <4 x i32> %370, !dbg !112
  %380 = bitcast <4 x i32> %.v9 to <4 x float>, !dbg !112
  %381 = insertelement <4 x i32> poison, i32 %137, i64 0, !dbg !59
  %382 = insertelement <4 x i32> %381, i32 %138, i64 1, !dbg !59
  %383 = insertelement <4 x i32> %382, i32 %139, i64 2, !dbg !59
  %384 = insertelement <4 x i32> %383, i32 %140, i64 3, !dbg !59
  %385 = bitcast <4 x i32> %384 to <4 x float>, !dbg !59
  %386 = fcmp olt <4 x float> %380, %385, !dbg !113
  %387 = fcmp uno <4 x float> %385, zeroinitializer, !dbg !115
  %388 = or <4 x i1> %387, %386, !dbg !116
  %.v10 = select <4 x i1> %388, <4 x i32> %384, <4 x i32> %.v9, !dbg !117
  %389 = bitcast <4 x i32> %.v10 to <4 x float>, !dbg !117
  %390 = insertelement <4 x i32> poison, i32 %161, i64 0, !dbg !67
  %391 = insertelement <4 x i32> %390, i32 %162, i64 1, !dbg !67
  %392 = insertelement <4 x i32> %391, i32 %163, i64 2, !dbg !67
  %393 = insertelement <4 x i32> %392, i32 %164, i64 3, !dbg !67
  %394 = bitcast <4 x i32> %393 to <4 x float>, !dbg !67
  %395 = fcmp olt <4 x float> %389, %394, !dbg !118
  %396 = fcmp uno <4 x float> %394, zeroinitializer, !dbg !120
  %397 = or <4 x i1> %396, %395, !dbg !121
  %.v11 = select <4 x i1> %397, <4 x i32> %393, <4 x i32> %.v10, !dbg !122
  %398 = bitcast <4 x i32> %.v11 to <4 x float>, !dbg !122
  %399 = insertelement <4 x i32> poison, i32 %184, i64 0, !dbg !74
  %400 = insertelement <4 x i32> %399, i32 %185, i64 1, !dbg !74
  %401 = insertelement <4 x i32> %400, i32 %186, i64 2, !dbg !74
  %402 = insertelement <4 x i32> %401, i32 %187, i64 3, !dbg !74
  %403 = bitcast <4 x i32> %402 to <4 x float>, !dbg !74
  %404 = fcmp olt <4 x float> %398, %403, !dbg !123
  %405 = fcmp uno <4 x float> %403, zeroinitializer, !dbg !125
  %406 = or <4 x i1> %405, %404, !dbg !126
  %.v12 = select <4 x i1> %406, <4 x i32> %402, <4 x i32> %.v11, !dbg !127
  %407 = bitcast <4 x i32> %.v12 to <4 x float>, !dbg !127
  %408 = insertelement <4 x i32> poison, i32 %207, i64 0, !dbg !82
  %409 = insertelement <4 x i32> %408, i32 %208, i64 1, !dbg !82
  %410 = insertelement <4 x i32> %409, i32 %209, i64 2, !dbg !82
  %411 = insertelement <4 x i32> %410, i32 %210, i64 3, !dbg !82
  %412 = bitcast <4 x i32> %411 to <4 x float>, !dbg !82
  %413 = fcmp olt <4 x float> %407, %412, !dbg !128
  %414 = fcmp uno <4 x float> %412, zeroinitializer, !dbg !130
  %415 = or <4 x i1> %414, %413, !dbg !131
  %.v13 = select <4 x i1> %415, <4 x i32> %411, <4 x i32> %.v12, !dbg !132
  %416 = bitcast <4 x i32> %.v13 to <4 x float>, !dbg !132
  %417 = insertelement <4 x i32> poison, i32 %231, i64 0, !dbg !90
  %418 = insertelement <4 x i32> %417, i32 %232, i64 1, !dbg !90
  %419 = insertelement <4 x i32> %418, i32 %233, i64 2, !dbg !90
  %420 = insertelement <4 x i32> %419, i32 %234, i64 3, !dbg !90
  %421 = bitcast <4 x i32> %420 to <4 x float>, !dbg !90
  %422 = fcmp olt <4 x float> %416, %421, !dbg !133
  %423 = fcmp uno <4 x float> %421, zeroinitializer, !dbg !135
  %424 = or <4 x i1> %423, %422, !dbg !136
  %.v14 = select <4 x i1> %424, <4 x i32> %420, <4 x i32> %.v13, !dbg !137
  %425 = bitcast <4 x i32> %.v14 to <4 x float>, !dbg !137
  %426 = insertelement <4 x i32> poison, i32 %254, i64 0, !dbg !98
  %427 = insertelement <4 x i32> %426, i32 %255, i64 1, !dbg !98
  %428 = insertelement <4 x i32> %427, i32 %256, i64 2, !dbg !98
  %429 = insertelement <4 x i32> %428, i32 %257, i64 3, !dbg !98
  %430 = bitcast <4 x i32> %429 to <4 x float>, !dbg !98
  %431 = fcmp olt <4 x float> %425, %430, !dbg !138
  %432 = fcmp uno <4 x float> %430, zeroinitializer, !dbg !140
  %433 = or <4 x i1> %432, %431, !dbg !141
  %.v15 = select <4 x i1> %433, <4 x i32> %429, <4 x i32> %.v14, !dbg !142
  %434 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !142
  %435 = insertelement <4 x i32> poison, i32 %277, i64 0, !dbg !105
  %436 = insertelement <4 x i32> %435, i32 %278, i64 1, !dbg !105
  %437 = insertelement <4 x i32> %436, i32 %279, i64 2, !dbg !105
  %438 = insertelement <4 x i32> %437, i32 %280, i64 3, !dbg !105
  %439 = bitcast <4 x i32> %438 to <4 x float>, !dbg !105
  %440 = fcmp olt <4 x float> %434, %439, !dbg !143
  %441 = shufflevector <4 x float> %439, <4 x float> %353, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !154
  %442 = fcmp uno <8 x float> %441, zeroinitializer, !dbg !154
  %443 = extractelement <8 x i1> %442, i64 7, !dbg !145
  %444 = or i1 %443, %355, !dbg !145
  %445 = extractelement <8 x i1> %442, i64 6, !dbg !145
  %446 = or i1 %445, %356, !dbg !145
  %447 = extractelement <8 x i1> %442, i64 5, !dbg !145
  %448 = or i1 %447, %357, !dbg !145
  %449 = extractelement <8 x i1> %442, i64 4, !dbg !145
  %450 = or i1 %449, %358, !dbg !145
  %451 = extractelement <4 x i1> %440, i64 0, !dbg !145
  %452 = extractelement <8 x i1> %442, i64 3, !dbg !145
  %453 = or i1 %452, %451, !dbg !145
  %454 = extractelement <4 x i1> %440, i64 1, !dbg !145
  %455 = extractelement <8 x i1> %442, i64 2, !dbg !145
  %456 = or i1 %455, %454, !dbg !145
  %457 = extractelement <4 x i1> %440, i64 2, !dbg !145
  %458 = extractelement <8 x i1> %442, i64 1, !dbg !145
  %459 = or i1 %458, %457, !dbg !145
  %460 = extractelement <4 x i1> %440, i64 3, !dbg !145
  %461 = extractelement <8 x i1> %442, i64 0, !dbg !145
  %462 = or i1 %461, %460, !dbg !145
  %463 = zext <4 x i1> %377 to <4 x i8>, !dbg !146
  %464 = select <4 x i1> %386, <4 x i8> splat (i8 2), <4 x i8> %463, !dbg !147
  %465 = select <4 x i1> %395, <4 x i8> splat (i8 3), <4 x i8> %464, !dbg !148
  %466 = select <4 x i1> %404, <4 x i8> splat (i8 4), <4 x i8> %465, !dbg !149
  %467 = select <4 x i1> %413, <4 x i8> splat (i8 5), <4 x i8> %466, !dbg !150
  %468 = select <4 x i1> %422, <4 x i8> splat (i8 6), <4 x i8> %467, !dbg !151
  %469 = select <4 x i1> %431, <4 x i8> splat (i8 7), <4 x i8> %468, !dbg !152
  %470 = select <4 x i1> %440, <4 x i8> splat (i8 8), <4 x i8> %469, !dbg !153
  %471 = mul i32 %33, 25, !dbg !155
  %472 = add i32 %471, %.decomposed, !dbg !156
  %473 = mul i32 %38, 38400, !dbg !157
  %474 = mul i32 %39, 38400, !dbg !157
  %475 = mul i32 %40, 38400, !dbg !157
  %476 = mul i32 %41, 38400, !dbg !157
  %477 = mul i32 %42, 38400, !dbg !157
  %478 = mul i32 %43, 38400, !dbg !157
  %479 = mul i32 %44, 38400, !dbg !157
  %480 = mul i32 %45, 38400, !dbg !157
  %481 = add i32 %472, %473, !dbg !158
  %482 = add i32 %474, %.decomposed17, !dbg !156
  %483 = add i32 %482, %471, !dbg !158
  %484 = add i32 %475, %.decomposed19, !dbg !156
  %485 = add i32 %484, %471, !dbg !158
  %486 = add i32 %476, %.decomposed21, !dbg !156
  %487 = add i32 %486, %471, !dbg !158
  %488 = add i32 %477, %.decomposed23, !dbg !156
  %489 = add i32 %488, %471, !dbg !158
  %490 = add i32 %478, %.decomposed25, !dbg !156
  %491 = add i32 %490, %471, !dbg !158
  %492 = add i32 %479, %.decomposed27, !dbg !156
  %493 = add i32 %492, %471, !dbg !158
  %494 = add i32 %480, %.decomposed29, !dbg !156
  %495 = add i32 %494, %471, !dbg !158
  %496 = sext i32 %481 to i64, !dbg !159
  %497 = getelementptr float, ptr addrspace(1) %1, i64 %496, !dbg !159
  %498 = sext i32 %483 to i64, !dbg !159
  %499 = getelementptr float, ptr addrspace(1) %1, i64 %498, !dbg !159
  %500 = sext i32 %485 to i64, !dbg !159
  %501 = getelementptr float, ptr addrspace(1) %1, i64 %500, !dbg !159
  %502 = sext i32 %487 to i64, !dbg !159
  %503 = getelementptr float, ptr addrspace(1) %1, i64 %502, !dbg !159
  %504 = sext i32 %489 to i64, !dbg !159
  %505 = getelementptr float, ptr addrspace(1) %1, i64 %504, !dbg !159
  %506 = sext i32 %491 to i64, !dbg !159
  %507 = getelementptr float, ptr addrspace(1) %1, i64 %506, !dbg !159
  %508 = sext i32 %493 to i64, !dbg !159
  %509 = getelementptr float, ptr addrspace(1) %1, i64 %508, !dbg !159
  %510 = sext i32 %495 to i64, !dbg !159
  %511 = getelementptr float, ptr addrspace(1) %1, i64 %510, !dbg !159
  %512 = and i1 %23, %35, !dbg !160
  %513 = and i1 %24, %35, !dbg !160
  %514 = and i1 %25, %35, !dbg !160
  %515 = and i1 %26, %35, !dbg !160
  %516 = and i1 %27, %35, !dbg !160
  %517 = and i1 %28, %35, !dbg !160
  %518 = and i1 %29, %35, !dbg !160
  %519 = and i1 %30, %35, !dbg !160
  %520 = and i1 %34, %22, !dbg !160
  %521 = shl i32 %8, 3, !dbg !161
  %522 = and i32 %521, 1016, !dbg !161
  %523 = lshr exact i32 %522, 1, !dbg !161
  %524 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %523, !dbg !161
  %525 = getelementptr float, ptr addrspace(3) %524, i32 %522, !dbg !161
  %526 = extractelement <4 x i32> %.v8, i64 0, !dbg !161
  %527 = select i1 %444, i32 %272, i32 %526, !dbg !162
  %528 = insertelement <1 x i32> poison, i32 %527, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %525, <1 x i32> %528, i1 true) #2, !dbg !161
  %529 = or disjoint i32 %522, 1, !dbg !161
  %530 = getelementptr float, ptr addrspace(3) %524, i32 %529, !dbg !161
  %531 = extractelement <4 x i32> %.v8, i64 1, !dbg !161
  %532 = select i1 %446, i32 %273, i32 %531, !dbg !162
  %533 = insertelement <1 x i32> poison, i32 %532, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %530, <1 x i32> %533, i1 true) #2, !dbg !161
  %534 = or disjoint i32 %522, 2, !dbg !161
  %535 = getelementptr float, ptr addrspace(3) %524, i32 %534, !dbg !161
  %536 = extractelement <4 x i32> %.v8, i64 2, !dbg !161
  %537 = select i1 %448, i32 %274, i32 %536, !dbg !162
  %538 = insertelement <1 x i32> poison, i32 %537, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %535, <1 x i32> %538, i1 true) #2, !dbg !161
  %539 = or disjoint i32 %522, 3, !dbg !161
  %540 = getelementptr float, ptr addrspace(3) %524, i32 %539, !dbg !161
  %541 = extractelement <4 x i32> %.v8, i64 3, !dbg !161
  %542 = select i1 %450, i32 %275, i32 %541, !dbg !162
  %543 = insertelement <1 x i32> poison, i32 %542, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %540, <1 x i32> %543, i1 true) #2, !dbg !161
  %544 = or disjoint i32 %522, 4, !dbg !161
  %545 = getelementptr float, ptr addrspace(3) %524, i32 %544, !dbg !161
  %546 = extractelement <4 x i32> %.v15, i64 0, !dbg !161
  %547 = select i1 %453, i32 %277, i32 %546, !dbg !162
  %548 = insertelement <1 x i32> poison, i32 %547, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %545, <1 x i32> %548, i1 true) #2, !dbg !161
  %549 = or disjoint i32 %522, 5, !dbg !161
  %550 = getelementptr float, ptr addrspace(3) %524, i32 %549, !dbg !161
  %551 = extractelement <4 x i32> %.v15, i64 1, !dbg !161
  %552 = select i1 %456, i32 %278, i32 %551, !dbg !162
  %553 = insertelement <1 x i32> poison, i32 %552, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %550, <1 x i32> %553, i1 true) #2, !dbg !161
  %554 = or disjoint i32 %522, 6, !dbg !161
  %555 = getelementptr float, ptr addrspace(3) %524, i32 %554, !dbg !161
  %556 = extractelement <4 x i32> %.v15, i64 2, !dbg !161
  %557 = select i1 %459, i32 %279, i32 %556, !dbg !162
  %558 = insertelement <1 x i32> poison, i32 %557, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %555, <1 x i32> %558, i1 true) #2, !dbg !161
  %559 = or disjoint i32 %522, 7, !dbg !161
  %560 = getelementptr float, ptr addrspace(3) %524, i32 %559, !dbg !161
  %561 = extractelement <4 x i32> %.v15, i64 3, !dbg !161
  %562 = select i1 %462, i32 %280, i32 %561, !dbg !162
  %563 = insertelement <1 x i32> poison, i32 %562, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %560, <1 x i32> %563, i1 true) #2, !dbg !161
  tail call void @llvm.nvvm.barrier0(), !dbg !161
  %564 = lshr i32 %10, 3, !dbg !161
  %565 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %564, !dbg !161
  %566 = getelementptr inbounds float, ptr addrspace(3) %565, i32 %10, !dbg !161
  %567 = load i32, ptr addrspace(3) %566, align 4, !dbg !161
  %568 = or disjoint i32 %10, 128, !dbg !161
  %569 = lshr i32 %568, 3, !dbg !161
  %570 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %569, !dbg !161
  %571 = getelementptr inbounds float, ptr addrspace(3) %570, i32 %568, !dbg !161
  %572 = load i32, ptr addrspace(3) %571, align 4, !dbg !161
  %573 = or disjoint i32 %10, 256, !dbg !161
  %574 = lshr i32 %573, 3, !dbg !161
  %575 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %574, !dbg !161
  %576 = getelementptr inbounds float, ptr addrspace(3) %575, i32 %573, !dbg !161
  %577 = load i32, ptr addrspace(3) %576, align 4, !dbg !161
  %578 = or disjoint i32 %10, 384, !dbg !161
  %579 = lshr i32 %578, 3, !dbg !161
  %580 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %579, !dbg !161
  %581 = getelementptr inbounds float, ptr addrspace(3) %580, i32 %578, !dbg !161
  %582 = load i32, ptr addrspace(3) %581, align 4, !dbg !161
  %583 = or disjoint i32 %10, 512, !dbg !161
  %584 = lshr i32 %583, 3, !dbg !161
  %585 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %584, !dbg !161
  %586 = getelementptr inbounds float, ptr addrspace(3) %585, i32 %583, !dbg !161
  %587 = load i32, ptr addrspace(3) %586, align 4, !dbg !161
  %588 = or disjoint i32 %10, 640, !dbg !161
  %589 = lshr i32 %588, 3, !dbg !161
  %590 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %589, !dbg !161
  %591 = getelementptr inbounds float, ptr addrspace(3) %590, i32 %588, !dbg !161
  %592 = load i32, ptr addrspace(3) %591, align 4, !dbg !161
  %593 = or disjoint i32 %10, 768, !dbg !161
  %594 = lshr i32 %593, 3, !dbg !161
  %595 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %594, !dbg !161
  %596 = getelementptr inbounds float, ptr addrspace(3) %595, i32 %593, !dbg !161
  %597 = load i32, ptr addrspace(3) %596, align 4, !dbg !161
  %598 = or disjoint i32 %10, 896, !dbg !161
  %599 = lshr i32 %598, 3, !dbg !161
  %600 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %599, !dbg !161
  %601 = getelementptr inbounds float, ptr addrspace(3) %600, i32 %598, !dbg !161
  %602 = load i32, ptr addrspace(3) %601, align 4, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %567, ptr addrspace(1) %497, i1 %512) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %572, ptr addrspace(1) %499, i1 %513) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %577, ptr addrspace(1) %501, i1 %514) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %582, ptr addrspace(1) %503, i1 %515) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %587, ptr addrspace(1) %505, i1 %516) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %592, ptr addrspace(1) %507, i1 %517) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %597, ptr addrspace(1) %509, i1 %518) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %602, ptr addrspace(1) %511, i1 %519) #2, !dbg !161
  %603 = shl i32 %13, 10, !dbg !163
  %604 = add i32 %603, %32, !dbg !164
  %605 = sext i32 %604 to i64, !dbg !165
  %606 = getelementptr i8, ptr addrspace(1) %2, i64 %605, !dbg !165
  %607 = bitcast <4 x i8> %366 to i32, !dbg !166
  %608 = bitcast <4 x i8> %470 to i32, !dbg !166
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %607, i32 %608, ptr addrspace(1) %606, i1 %520) #2, !dbg !166
  ret void, !dbg !167
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cktktawpzp2exjyp7m5ioszbh7nekfib55m7xbsaaq4lnm3lnoa5.py", directory: "inductor_cache/kt")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_23", linkageName: "triton_poi_fused_max_pool2d_with_indices_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 45, column: 74, scope: !7)
!23 = !DILocation(line: 29, column: 19, scope: !7)
!24 = !DILocation(line: 67, column: 20, scope: !7)
!25 = !DILocation(line: 36, column: 19, scope: !7)
!26 = !DILocation(line: 40, column: 20, scope: !7)
!27 = !DILocation(line: 41, column: 19, scope: !7)
!28 = !DILocation(line: 44, column: 19, scope: !7)
!29 = !DILocation(line: 45, column: 52, scope: !7)
!30 = !DILocation(line: 45, column: 63, scope: !7)
!31 = !DILocation(line: 45, column: 42, scope: !7)
!32 = !DILocation(line: 45, column: 47, scope: !7)
!33 = !DILocation(line: 45, column: 57, scope: !7)
!34 = !DILocation(line: 45, column: 68, scope: !7)
!35 = !DILocation(line: 45, column: 31, scope: !7)
!36 = !DILocation(line: 45, column: 87, scope: !7)
!37 = !DILocation(line: 45, column: 95, scope: !7)
!38 = !DILocation(line: 45, column: 79, scope: !7)
!39 = !DILocation(line: 47, column: 21, scope: !7)
!40 = !DILocation(line: 50, column: 19, scope: !7)
!41 = !DILocation(line: 51, column: 46, scope: !7)
!42 = !DILocation(line: 51, column: 56, scope: !7)
!43 = !DILocation(line: 51, column: 67, scope: !7)
!44 = !DILocation(line: 51, column: 31, scope: !7)
!45 = !DILocation(line: 51, column: 86, scope: !7)
!46 = !DILocation(line: 51, column: 94, scope: !7)
!47 = !DILocation(line: 51, column: 78, scope: !7)
!48 = !DILocation(line: 53, column: 16, scope: !7)
!49 = !DILocation(line: 55, column: 20, scope: !7)
!50 = !DILocation(line: 56, column: 20, scope: !7)
!51 = !DILocation(line: 83, column: 20, scope: !7)
!52 = !DILocation(line: 57, column: 19, scope: !7)
!53 = !DILocation(line: 58, column: 46, scope: !7)
!54 = !DILocation(line: 58, column: 56, scope: !7)
!55 = !DILocation(line: 58, column: 67, scope: !7)
!56 = !DILocation(line: 58, column: 31, scope: !7)
!57 = !DILocation(line: 58, column: 86, scope: !7)
!58 = !DILocation(line: 58, column: 94, scope: !7)
!59 = !DILocation(line: 58, column: 78, scope: !7)
!60 = !DILocation(line: 64, column: 20, scope: !7)
!61 = !DILocation(line: 65, column: 46, scope: !7)
!62 = !DILocation(line: 65, column: 56, scope: !7)
!63 = !DILocation(line: 65, column: 67, scope: !7)
!64 = !DILocation(line: 65, column: 31, scope: !7)
!65 = !DILocation(line: 65, column: 86, scope: !7)
!66 = !DILocation(line: 65, column: 94, scope: !7)
!67 = !DILocation(line: 65, column: 78, scope: !7)
!68 = !DILocation(line: 68, column: 46, scope: !7)
!69 = !DILocation(line: 68, column: 57, scope: !7)
!70 = !DILocation(line: 68, column: 36, scope: !7)
!71 = !DILocation(line: 68, column: 31, scope: !7)
!72 = !DILocation(line: 68, column: 76, scope: !7)
!73 = !DILocation(line: 68, column: 84, scope: !7)
!74 = !DILocation(line: 68, column: 68, scope: !7)
!75 = !DILocation(line: 70, column: 20, scope: !7)
!76 = !DILocation(line: 71, column: 43, scope: !7)
!77 = !DILocation(line: 71, column: 53, scope: !7)
!78 = !DILocation(line: 71, column: 64, scope: !7)
!79 = !DILocation(line: 71, column: 31, scope: !7)
!80 = !DILocation(line: 71, column: 83, scope: !7)
!81 = !DILocation(line: 71, column: 91, scope: !7)
!82 = !DILocation(line: 71, column: 75, scope: !7)
!83 = !DILocation(line: 77, column: 20, scope: !7)
!84 = !DILocation(line: 78, column: 43, scope: !7)
!85 = !DILocation(line: 78, column: 53, scope: !7)
!86 = !DILocation(line: 78, column: 64, scope: !7)
!87 = !DILocation(line: 78, column: 31, scope: !7)
!88 = !DILocation(line: 78, column: 83, scope: !7)
!89 = !DILocation(line: 78, column: 91, scope: !7)
!90 = !DILocation(line: 78, column: 75, scope: !7)
!91 = !DILocation(line: 80, column: 20, scope: !7)
!92 = !DILocation(line: 81, column: 43, scope: !7)
!93 = !DILocation(line: 81, column: 53, scope: !7)
!94 = !DILocation(line: 81, column: 64, scope: !7)
!95 = !DILocation(line: 81, column: 31, scope: !7)
!96 = !DILocation(line: 81, column: 83, scope: !7)
!97 = !DILocation(line: 81, column: 91, scope: !7)
!98 = !DILocation(line: 81, column: 75, scope: !7)
!99 = !DILocation(line: 84, column: 44, scope: !7)
!100 = !DILocation(line: 84, column: 54, scope: !7)
!101 = !DILocation(line: 84, column: 65, scope: !7)
!102 = !DILocation(line: 84, column: 31, scope: !7)
!103 = !DILocation(line: 84, column: 84, scope: !7)
!104 = !DILocation(line: 84, column: 92, scope: !7)
!105 = !DILocation(line: 84, column: 76, scope: !7)
!106 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !109)
!107 = distinct !DILexicalBlockFile(scope: !7, file: !108, discriminator: 0)
!108 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!109 = !DILocation(line: 52, column: 42, scope: !7)
!110 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !109)
!111 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !109)
!112 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !109)
!113 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !114)
!114 = !DILocation(line: 59, column: 42, scope: !7)
!115 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !114)
!116 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !114)
!117 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !114)
!118 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !119)
!119 = !DILocation(line: 66, column: 42, scope: !7)
!120 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !119)
!121 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !119)
!122 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !119)
!123 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !124)
!124 = !DILocation(line: 69, column: 42, scope: !7)
!125 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !124)
!126 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !124)
!127 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !124)
!128 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !129)
!129 = !DILocation(line: 72, column: 42, scope: !7)
!130 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !129)
!131 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !129)
!132 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !129)
!133 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !134)
!134 = !DILocation(line: 79, column: 42, scope: !7)
!135 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !134)
!136 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !134)
!137 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !134)
!138 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !139)
!139 = !DILocation(line: 82, column: 42, scope: !7)
!140 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !139)
!141 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !139)
!142 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !139)
!143 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !144)
!144 = !DILocation(line: 85, column: 42, scope: !7)
!145 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !144)
!146 = !DILocation(line: 89, column: 35, scope: !7)
!147 = !DILocation(line: 92, column: 35, scope: !7)
!148 = !DILocation(line: 95, column: 35, scope: !7)
!149 = !DILocation(line: 98, column: 35, scope: !7)
!150 = !DILocation(line: 101, column: 35, scope: !7)
!151 = !DILocation(line: 104, column: 35, scope: !7)
!152 = !DILocation(line: 107, column: 35, scope: !7)
!153 = !DILocation(line: 110, column: 35, scope: !7)
!154 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !144)
!155 = !DILocation(line: 111, column: 33, scope: !7)
!156 = !DILocation(line: 111, column: 30, scope: !7)
!157 = !DILocation(line: 111, column: 44, scope: !7)
!158 = !DILocation(line: 111, column: 38, scope: !7)
!159 = !DILocation(line: 111, column: 25, scope: !7)
!160 = !DILocation(line: 111, column: 64, scope: !7)
!161 = !DILocation(line: 111, column: 56, scope: !7)
!162 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !144)
!163 = !DILocation(line: 112, column: 35, scope: !7)
!164 = !DILocation(line: 112, column: 30, scope: !7)
!165 = !DILocation(line: 112, column: 25, scope: !7)
!166 = !DILocation(line: 112, column: 47, scope: !7)
!167 = !DILocation(line: 112, column: 4, scope: !7)
