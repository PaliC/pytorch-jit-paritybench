; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 512, !dbg !13
  %15 = srem i32 %13, 1536, !dbg !14
  %16 = srem i32 %14, 1536, !dbg !14
  %17 = sext i32 %13 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = sext i32 %14 to i64, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !16
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !16
  %23 = sext i32 %15 to i64, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !17
  %25 = sext i32 %16 to i64, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !17
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !18
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !19
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !20
  %36 = bitcast i32 %32 to float, !dbg !20
  %37 = bitcast i32 %33 to float, !dbg !20
  %38 = bitcast i32 %34 to float, !dbg !20
  %39 = bitcast i32 %35 to float, !dbg !20
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !20
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !20
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !20
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !20
  %45 = bitcast i32 %41 to float, !dbg !20
  %46 = bitcast i32 %42 to float, !dbg !20
  %47 = bitcast i32 %43 to float, !dbg !20
  %48 = bitcast i32 %44 to float, !dbg !20
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !21
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !21
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !22
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !22
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !23
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !24
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !24
  %57 = fadd float %36, 0x3EE4F8B580000000, !dbg !25
  %58 = fadd float %37, 0x3EE4F8B580000000, !dbg !25
  %59 = fadd float %38, 0x3EE4F8B580000000, !dbg !25
  %60 = fadd float %39, 0x3EE4F8B580000000, !dbg !25
  %61 = fadd float %45, 0x3EE4F8B580000000, !dbg !25
  %62 = fadd float %46, 0x3EE4F8B580000000, !dbg !25
  %63 = fadd float %47, 0x3EE4F8B580000000, !dbg !25
  %64 = fadd float %48, 0x3EE4F8B580000000, !dbg !25
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i = icmp eq i32 %65, 0, !dbg !26
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i = icmp eq i32 %66, 0, !dbg !26
  br i1 %.not.i, label %72, label %67, !dbg !26

67:                                               ; preds = %7
  br i1 %.not1.i, label %70, label %68, !dbg !26

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

72:                                               ; preds = %7
  br i1 %.not1.i, label %75, label %73, !dbg !26

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

__nv_sqrtf.exit:                                  ; preds = %68, %70, %73, %75
  %.0.i = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !26
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i1 = icmp eq i32 %77, 0, !dbg !26
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i4 = icmp eq i32 %78, 0, !dbg !26
  br i1 %.not.i1, label %84, label %79, !dbg !26

79:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %82, label %80, !dbg !26

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

84:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %87, label %85, !dbg !26

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

__nv_sqrtf.exit5:                                 ; preds = %80, %82, %85, %87
  %.0.i3 = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !26
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i6 = icmp eq i32 %89, 0, !dbg !26
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i9 = icmp eq i32 %90, 0, !dbg !26
  br i1 %.not.i6, label %96, label %91, !dbg !26

91:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %94, label %92, !dbg !26

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

96:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %99, label %97, !dbg !26

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

__nv_sqrtf.exit10:                                ; preds = %92, %94, %97, %99
  %.0.i8 = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !26
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i11 = icmp eq i32 %101, 0, !dbg !26
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i14 = icmp eq i32 %102, 0, !dbg !26
  br i1 %.not.i11, label %108, label %103, !dbg !26

103:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %106, label %104, !dbg !26

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

108:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %111, label %109, !dbg !26

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

__nv_sqrtf.exit15:                                ; preds = %104, %106, %109, %111
  %.0.i13 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !26
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i16 = icmp eq i32 %113, 0, !dbg !26
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i19 = icmp eq i32 %114, 0, !dbg !26
  br i1 %.not.i16, label %120, label %115, !dbg !26

115:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %118, label %116, !dbg !26

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

120:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %123, label %121, !dbg !26

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

__nv_sqrtf.exit20:                                ; preds = %116, %118, %121, %123
  %.0.i18 = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !26
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i21 = icmp eq i32 %125, 0, !dbg !26
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i24 = icmp eq i32 %126, 0, !dbg !26
  br i1 %.not.i21, label %132, label %127, !dbg !26

127:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %130, label %128, !dbg !26

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !26
  br label %__nv_sqrtf.exit25, !dbg !26

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !26
  br label %__nv_sqrtf.exit25, !dbg !26

132:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %135, label %133, !dbg !26

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !26
  br label %__nv_sqrtf.exit25, !dbg !26

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !26
  br label %__nv_sqrtf.exit25, !dbg !26

__nv_sqrtf.exit25:                                ; preds = %128, %130, %133, %135
  %.0.i23 = phi float [ %129, %128 ], [ %131, %130 ], [ %134, %133 ], [ %136, %135 ], !dbg !26
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i26 = icmp eq i32 %137, 0, !dbg !26
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i29 = icmp eq i32 %138, 0, !dbg !26
  br i1 %.not.i26, label %144, label %139, !dbg !26

139:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %142, label %140, !dbg !26

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #3, !dbg !26
  br label %__nv_sqrtf.exit30, !dbg !26

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #3, !dbg !26
  br label %__nv_sqrtf.exit30, !dbg !26

144:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %147, label %145, !dbg !26

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #3, !dbg !26
  br label %__nv_sqrtf.exit30, !dbg !26

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #3, !dbg !26
  br label %__nv_sqrtf.exit30, !dbg !26

__nv_sqrtf.exit30:                                ; preds = %140, %142, %145, %147
  %.0.i28 = phi float [ %141, %140 ], [ %143, %142 ], [ %146, %145 ], [ %148, %147 ], !dbg !26
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i31 = icmp eq i32 %149, 0, !dbg !26
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i34 = icmp eq i32 %150, 0, !dbg !26
  br i1 %.not.i31, label %156, label %151, !dbg !26

151:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %154, label %152, !dbg !26

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !26
  br label %__nv_sqrtf.exit35, !dbg !26

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !26
  br label %__nv_sqrtf.exit35, !dbg !26

156:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %159, label %157, !dbg !26

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !26
  br label %__nv_sqrtf.exit35, !dbg !26

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !26
  br label %__nv_sqrtf.exit35, !dbg !26

__nv_sqrtf.exit35:                                ; preds = %152, %154, %157, %159
  %.0.i33 = phi float [ %153, %152 ], [ %155, %154 ], [ %158, %157 ], [ %160, %159 ], !dbg !26
  %161 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !16
  %162 = bitcast i32 %161 to float, !dbg !16
  %163 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !18
  %164 = bitcast i32 %163 to float, !dbg !18
  %165 = fsub float %162, %164, !dbg !27
  %166 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !16
  %167 = bitcast i32 %166 to float, !dbg !16
  %168 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !18
  %169 = bitcast i32 %168 to float, !dbg !18
  %170 = fsub float %167, %169, !dbg !27
  %171 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !16
  %172 = bitcast i32 %171 to float, !dbg !16
  %173 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !18
  %174 = bitcast i32 %173 to float, !dbg !18
  %175 = fsub float %172, %174, !dbg !27
  %176 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !16
  %177 = bitcast i32 %176 to float, !dbg !16
  %178 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !18
  %179 = bitcast i32 %178 to float, !dbg !18
  %180 = fsub float %177, %179, !dbg !27
  %181 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !16
  %182 = bitcast i32 %181 to float, !dbg !16
  %183 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !18
  %184 = bitcast i32 %183 to float, !dbg !18
  %185 = fsub float %182, %184, !dbg !27
  %186 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !16
  %187 = bitcast i32 %186 to float, !dbg !16
  %188 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !18
  %189 = bitcast i32 %188 to float, !dbg !18
  %190 = fsub float %187, %189, !dbg !27
  %191 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !16
  %192 = bitcast i32 %191 to float, !dbg !16
  %193 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !18
  %194 = bitcast i32 %193 to float, !dbg !18
  %195 = fsub float %192, %194, !dbg !27
  %196 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !16
  %197 = bitcast i32 %196 to float, !dbg !16
  %198 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !18
  %199 = bitcast i32 %198 to float, !dbg !18
  %200 = fsub float %197, %199, !dbg !27
  %201 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !24
  %202 = bitcast i32 %201 to float, !dbg !24
  %203 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !24
  %204 = bitcast i32 %203 to float, !dbg !24
  %205 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !24
  %206 = bitcast i32 %205 to float, !dbg !24
  %207 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !24
  %208 = bitcast i32 %207 to float, !dbg !24
  %209 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !24
  %210 = bitcast i32 %209 to float, !dbg !24
  %211 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !24
  %212 = bitcast i32 %211 to float, !dbg !24
  %213 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !24
  %214 = bitcast i32 %213 to float, !dbg !24
  %215 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !24
  %216 = bitcast i32 %215 to float, !dbg !24
  %217 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !22
  %218 = bitcast i32 %217 to float, !dbg !22
  %219 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !22
  %220 = bitcast i32 %219 to float, !dbg !22
  %221 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !22
  %222 = bitcast i32 %221 to float, !dbg !22
  %223 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !22
  %224 = bitcast i32 %223 to float, !dbg !22
  %225 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !22
  %226 = bitcast i32 %225 to float, !dbg !22
  %227 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !22
  %228 = bitcast i32 %227 to float, !dbg !22
  %229 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !22
  %230 = bitcast i32 %229 to float, !dbg !22
  %231 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !22
  %232 = bitcast i32 %231 to float, !dbg !22
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !28
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !28
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !28
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !28
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !28
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !28
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !28
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !28
  %241 = fmul float %200, %233, !dbg !29
  %242 = fmul float %195, %234, !dbg !29
  %243 = fmul float %190, %235, !dbg !29
  %244 = fmul float %185, %236, !dbg !29
  %245 = fmul float %180, %237, !dbg !29
  %246 = fmul float %175, %238, !dbg !29
  %247 = fmul float %170, %239, !dbg !29
  %248 = fmul float %165, %240, !dbg !29
  %249 = fmul float %241, %232, !dbg !30
  %250 = fmul float %242, %230, !dbg !30
  %251 = fmul float %243, %228, !dbg !30
  %252 = fmul float %244, %226, !dbg !30
  %253 = fmul float %245, %224, !dbg !30
  %254 = fmul float %246, %222, !dbg !30
  %255 = fmul float %247, %220, !dbg !30
  %256 = fmul float %248, %218, !dbg !30
  %257 = fadd float %249, %216, !dbg !31
  %258 = fadd float %250, %214, !dbg !31
  %259 = fadd float %251, %212, !dbg !31
  %260 = fadd float %252, %210, !dbg !31
  %261 = fadd float %253, %208, !dbg !31
  %262 = fadd float %254, %206, !dbg !31
  %263 = fadd float %255, %204, !dbg !31
  %264 = fadd float %256, %202, !dbg !31
  %265 = getelementptr float, ptr addrspace(1) %5, i64 %17, !dbg !32
  %266 = getelementptr float, ptr addrspace(1) %5, i64 %19, !dbg !32
  %267 = bitcast float %257 to i32, !dbg !33
  %268 = bitcast float %258 to i32, !dbg !33
  %269 = bitcast float %259 to i32, !dbg !33
  %270 = bitcast float %260 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %267, i32 %268, i32 %269, i32 %270, ptr addrspace(1) %265, i1 true) #3, !dbg !33
  %271 = bitcast float %261 to i32, !dbg !33
  %272 = bitcast float %262 to i32, !dbg !33
  %273 = bitcast float %263 to i32, !dbg !33
  %274 = bitcast float %264 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %271, i32 %272, i32 %273, i32 %274, ptr addrspace(1) %266, i1 true) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctbfljpx4367dvmmkettqxtluowyk62kemsi4werkonddgo6d7uw.py", directory: "inductor_cache/tb")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_36, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_36, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_36", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 33, column: 18, scope: !7)
!26 = !DILocation(line: 34, column: 26, scope: !7)
!27 = !DILocation(line: 31, column: 18, scope: !7)
!28 = !DILocation(line: 36, column: 18, scope: !7)
!29 = !DILocation(line: 39, column: 19, scope: !7)
!30 = !DILocation(line: 40, column: 20, scope: !7)
!31 = !DILocation(line: 41, column: 20, scope: !7)
!32 = !DILocation(line: 42, column: 25, scope: !7)
!33 = !DILocation(line: 42, column: 37, scope: !7)
!34 = !DILocation(line: 42, column: 4, scope: !7)
