; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_div_mean_mul_pow_rsub_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = and i32 %5, 15, !dbg !11
  %9 = shl i32 %5, 2, !dbg !12
  %10 = and i32 %9, 192, !dbg !12
  %11 = or disjoint i32 %10, %8, !dbg !13
  %12 = or disjoint i32 %11, 32, !dbg !13
  %13 = zext nneg i32 %12 to i64, !dbg !14
  %14 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !14
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 true) #3, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %2, i64 %13, !dbg !16
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 true) #3, !dbg !17
  %18 = zext nneg i32 %11 to i64, !dbg !18
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !18
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 true) #3, !dbg !19
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !20
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !21
  %23 = or disjoint i32 %11, 48, !dbg !22
  %24 = zext nneg i32 %23 to i64, !dbg !23
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !23
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !24
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !25
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !26
  %29 = or disjoint i32 %11, 16, !dbg !27
  %30 = zext nneg i32 %29 to i64, !dbg !28
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !28
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !29
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !30
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !31
  %35 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !15
  %36 = insertelement <2 x i32> %35, i32 %26, i64 1, !dbg !15
  %37 = bitcast <2 x i32> %36 to <2 x float>, !dbg !15
  %38 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !17
  %39 = insertelement <2 x i32> %38, i32 %28, i64 1, !dbg !17
  %40 = bitcast <2 x i32> %39 to <2 x float>, !dbg !17
  %41 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !19
  %42 = insertelement <2 x i32> %41, i32 %32, i64 1, !dbg !19
  %43 = bitcast <2 x i32> %42 to <2 x float>, !dbg !19
  %44 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !21
  %45 = insertelement <2 x i32> %44, i32 %34, i64 1, !dbg !21
  %46 = bitcast <2 x i32> %45 to <2 x float>, !dbg !21
  %47 = fcmp olt <2 x float> %37, %40, !dbg !32
  %48 = fcmp uno <2 x float> %37, zeroinitializer, !dbg !36
  %49 = or <2 x i1> %48, %47, !dbg !37
  %.v = select <2 x i1> %49, <2 x i32> %36, <2 x i32> %39, !dbg !38
  %50 = bitcast <2 x i32> %.v to <2 x float>, !dbg !38
  %51 = fcmp ogt <2 x float> %43, %46, !dbg !39
  %52 = fcmp uno <2 x float> %43, zeroinitializer, !dbg !41
  %53 = or <2 x i1> %52, %51, !dbg !42
  %.v5 = select <2 x i1> %53, <2 x i32> %42, <2 x i32> %45, !dbg !43
  %54 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !43
  %55 = fsub <2 x float> %50, %54, !dbg !44
  %56 = fcmp ole <2 x float> %55, zeroinitializer, !dbg !45
  %57 = select <2 x i1> %56, <2 x float> zeroinitializer, <2 x float> %55, !dbg !45
  %shift = shufflevector <2 x float> %57, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !47
  %58 = fmul <2 x float> %57, %shift, !dbg !47
  %59 = extractelement <2 x float> %58, i64 0, !dbg !47
  %60 = bitcast i32 %15 to float, !dbg !48
  %61 = bitcast i32 %20 to float, !dbg !48
  %62 = fsub float %60, %61, !dbg !49
  %63 = bitcast i32 %26 to float, !dbg !50
  %64 = bitcast i32 %32 to float, !dbg !50
  %65 = fsub float %63, %64, !dbg !51
  %66 = fmul float %62, %65, !dbg !52
  %67 = bitcast i32 %17 to float, !dbg !53
  %68 = bitcast i32 %22 to float, !dbg !53
  %69 = fsub float %67, %68, !dbg !54
  %70 = bitcast i32 %28 to float, !dbg !55
  %71 = bitcast i32 %34 to float, !dbg !55
  %72 = fsub float %70, %71, !dbg !56
  %73 = fmul float %69, %72, !dbg !57
  %74 = fadd float %66, %73, !dbg !58
  %75 = fsub float %74, %59, !dbg !59
  %76 = fadd float %67, %68, !dbg !53
  %77 = fadd float %60, %61, !dbg !48
  %78 = fsub float %76, %77, !dbg !60
  %79 = fmul float %78, %78, !dbg !61
  %80 = fmul float %79, 2.500000e-01, !dbg !62
  %81 = fadd float %70, %71, !dbg !55
  %82 = fadd float %63, %64, !dbg !50
  %83 = fsub float %81, %82, !dbg !63
  %84 = fmul float %83, %83, !dbg !64
  %85 = fmul float %84, 2.500000e-01, !dbg !65
  %86 = fadd float %80, %85, !dbg !66
  %87 = fcmp ogt <2 x float> %37, %40, !dbg !67
  %88 = or <2 x i1> %48, %87, !dbg !69
  %.v6 = select <2 x i1> %88, <2 x i32> %36, <2 x i32> %39, !dbg !70
  %89 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !70
  %90 = fcmp olt <2 x float> %43, %46, !dbg !71
  %91 = or <2 x i1> %52, %90, !dbg !73
  %.v7 = select <2 x i1> %91, <2 x i32> %42, <2 x i32> %45, !dbg !74
  %92 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !74
  %93 = fsub <2 x float> %89, %92, !dbg !75
  %94 = fcmp ole <2 x float> %93, zeroinitializer, !dbg !76
  %95 = select <2 x i1> %94, <2 x float> zeroinitializer, <2 x float> %93, !dbg !76
  %96 = fmul <2 x float> %95, %95, !dbg !78
  %shift4 = shufflevector <2 x float> %96, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !79
  %97 = fadd <2 x float> %96, %shift4, !dbg !79
  %98 = extractelement <2 x float> %97, i64 0, !dbg !79
  %99 = fadd float %98, 0x3EB0C6F7A0000000, !dbg !80
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float %99) #3, !dbg !81
  %101 = fadd float %75, 0x3EB0C6F7A0000000, !dbg !82
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float %101) #3, !dbg !83
  %103 = fsub float %100, %102, !dbg !84
  %104 = fadd float %103, 1.000000e+00, !dbg !84
  %105 = bitcast float %104 to i32, !dbg !85
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 16, i32 31), !dbg !85
  %107 = bitcast i32 %106 to float, !dbg !85
  %108 = fadd float %104, %107, !dbg !89
  %109 = bitcast float %108 to i32, !dbg !85
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 8, i32 31), !dbg !85
  %111 = bitcast i32 %110 to float, !dbg !85
  %112 = fadd float %108, %111, !dbg !89
  %113 = bitcast float %112 to i32, !dbg !85
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 4, i32 31), !dbg !85
  %115 = bitcast i32 %114 to float, !dbg !85
  %116 = fadd float %112, %115, !dbg !89
  %117 = bitcast float %116 to i32, !dbg !85
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 2, i32 31), !dbg !85
  %119 = bitcast i32 %118 to float, !dbg !85
  %120 = fadd float %116, %119, !dbg !89
  %121 = bitcast float %120 to i32, !dbg !85
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 1, i32 31), !dbg !85
  %123 = bitcast i32 %122 to float, !dbg !85
  %124 = fadd float %120, %123, !dbg !89
  %125 = icmp eq i32 %6, 0, !dbg !85
  %126 = and i32 %7, 1, !dbg !85
  %127 = zext nneg i32 %126 to i64, !dbg !85
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i64 %127, !dbg !85
  %129 = bitcast float %124 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 %125) #3, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %130 = icmp slt i32 %5, 2, !dbg !85
  %131 = sext i32 %5 to i64, !dbg !85
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i64 %131, !dbg !85
  %133 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %132, i1 %130) #3, !dbg !85
  %134 = bitcast i32 %133 to float, !dbg !85
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 1, i32 31), !dbg !85
  %136 = bitcast i32 %135 to float, !dbg !85
  %137 = fadd float %134, %136, !dbg !89
  %138 = and i32 %5, 1, !dbg !85
  %139 = icmp eq i32 %138, 0, !dbg !85
  %140 = and i1 %130, %139, !dbg !85
  %141 = bitcast float %137 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %141, i1 %140) #3, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %142 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !85
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float 6.400000e+01) #3, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %urem = and i32 %5, 63, !dbg !93
  %144 = icmp eq i32 %urem, 0, !dbg !93
  %145 = bitcast float %143 to i32, !dbg !93
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %145, ptr addrspace(1) %0, i1 %144) #3, !dbg !93
  ret void, !dbg !94
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cur4fmtg4ivdf5pgip5klclyjcrtht6jzcfnfvkpjwzpgy2cx4nc.py", directory: "inductor_cache/ur")
!4 = !{ptr @triton_per_fused_add_div_mean_mul_pow_rsub_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_mean_mul_pow_rsub_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_mean_mul_pow_rsub_sub_0", linkageName: "triton_per_fused_add_div_mean_mul_pow_rsub_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 29, column: 19, scope: !7)
!12 = !DILocation(line: 32, column: 43, scope: !7)
!13 = !DILocation(line: 32, column: 40, scope: !7)
!14 = !DILocation(line: 32, column: 30, scope: !7)
!15 = !DILocation(line: 32, column: 48, scope: !7)
!16 = !DILocation(line: 33, column: 30, scope: !7)
!17 = !DILocation(line: 33, column: 48, scope: !7)
!18 = !DILocation(line: 34, column: 30, scope: !7)
!19 = !DILocation(line: 34, column: 43, scope: !7)
!20 = !DILocation(line: 35, column: 30, scope: !7)
!21 = !DILocation(line: 35, column: 43, scope: !7)
!22 = !DILocation(line: 36, column: 40, scope: !7)
!23 = !DILocation(line: 36, column: 30, scope: !7)
!24 = !DILocation(line: 36, column: 48, scope: !7)
!25 = !DILocation(line: 37, column: 31, scope: !7)
!26 = !DILocation(line: 37, column: 49, scope: !7)
!27 = !DILocation(line: 38, column: 41, scope: !7)
!28 = !DILocation(line: 38, column: 31, scope: !7)
!29 = !DILocation(line: 38, column: 49, scope: !7)
!30 = !DILocation(line: 39, column: 31, scope: !7)
!31 = !DILocation(line: 39, column: 49, scope: !7)
!32 = !DILocation(line: 110, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 40, column: 40, scope: !7)
!36 = !DILocation(line: 112, column: 21, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 112, column: 16, scope: !33, inlinedAt: !35)
!38 = !DILocation(line: 113, column: 29, scope: !33, inlinedAt: !35)
!39 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !40)
!40 = !DILocation(line: 41, column: 40, scope: !7)
!41 = !DILocation(line: 120, column: 21, scope: !33, inlinedAt: !40)
!42 = !DILocation(line: 120, column: 16, scope: !33, inlinedAt: !40)
!43 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !40)
!44 = !DILocation(line: 42, column: 18, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !46)
!46 = !DILocation(line: 44, column: 40, scope: !7)
!47 = !DILocation(line: 49, column: 19, scope: !7)
!48 = !DILocation(line: 59, column: 19, scope: !7)
!49 = !DILocation(line: 50, column: 19, scope: !7)
!50 = !DILocation(line: 65, column: 20, scope: !7)
!51 = !DILocation(line: 51, column: 19, scope: !7)
!52 = !DILocation(line: 52, column: 20, scope: !7)
!53 = !DILocation(line: 58, column: 19, scope: !7)
!54 = !DILocation(line: 53, column: 19, scope: !7)
!55 = !DILocation(line: 64, column: 20, scope: !7)
!56 = !DILocation(line: 54, column: 20, scope: !7)
!57 = !DILocation(line: 55, column: 20, scope: !7)
!58 = !DILocation(line: 56, column: 20, scope: !7)
!59 = !DILocation(line: 57, column: 20, scope: !7)
!60 = !DILocation(line: 60, column: 20, scope: !7)
!61 = !DILocation(line: 61, column: 20, scope: !7)
!62 = !DILocation(line: 63, column: 20, scope: !7)
!63 = !DILocation(line: 66, column: 20, scope: !7)
!64 = !DILocation(line: 67, column: 20, scope: !7)
!65 = !DILocation(line: 68, column: 20, scope: !7)
!66 = !DILocation(line: 69, column: 20, scope: !7)
!67 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !68)
!68 = !DILocation(line: 70, column: 41, scope: !7)
!69 = !DILocation(line: 120, column: 16, scope: !33, inlinedAt: !68)
!70 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !68)
!71 = !DILocation(line: 110, column: 15, scope: !33, inlinedAt: !72)
!72 = !DILocation(line: 71, column: 41, scope: !7)
!73 = !DILocation(line: 112, column: 16, scope: !33, inlinedAt: !72)
!74 = !DILocation(line: 113, column: 29, scope: !33, inlinedAt: !72)
!75 = !DILocation(line: 72, column: 20, scope: !7)
!76 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !77)
!77 = !DILocation(line: 73, column: 42, scope: !7)
!78 = !DILocation(line: 74, column: 20, scope: !7)
!79 = !DILocation(line: 80, column: 20, scope: !7)
!80 = !DILocation(line: 82, column: 20, scope: !7)
!81 = !DILocation(line: 83, column: 20, scope: !7)
!82 = !DILocation(line: 84, column: 20, scope: !7)
!83 = !DILocation(line: 85, column: 20, scope: !7)
!84 = !DILocation(line: 88, column: 20, scope: !7)
!85 = !DILocation(line: 267, column: 36, scope: !86, inlinedAt: !88)
!86 = distinct !DILexicalBlockFile(scope: !7, file: !87, discriminator: 0)
!87 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!88 = !DILocation(line: 90, column: 26, scope: !7)
!89 = !DILocation(line: 256, column: 15, scope: !90, inlinedAt: !88)
!90 = distinct !DILexicalBlockFile(scope: !86, file: !87, discriminator: 0)
!91 = !DILocation(line: 92, column: 20, scope: !7)
!92 = !DILocation(line: 94, column: 4, scope: !7)
!93 = !DILocation(line: 95, column: 71, scope: !7)
!94 = !DILocation(line: 95, column: 4, scope: !7)
