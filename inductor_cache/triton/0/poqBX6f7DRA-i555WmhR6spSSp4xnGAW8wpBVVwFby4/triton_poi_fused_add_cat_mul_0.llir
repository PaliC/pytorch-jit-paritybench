; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_cat_mul_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 256, !dbg !14
  %15 = srem i32 %13, 16, !dbg !15
  %.frozen = freeze i32 %13, !dbg !16
  %16 = sdiv i32 %.frozen, 4, !dbg !16
  %17 = mul i32 %16, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %17, !dbg !17
  %18 = sext i32 %13 to i64, !dbg !18
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !18
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 %14) #1, !dbg !19
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !19
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !19
  %23 = bitcast i32 %21 to float, !dbg !19
  %24 = bitcast i32 %22 to float, !dbg !19
  %25 = sext i32 %15 to i64, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !20
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %14) #1, !dbg !21
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !21
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !21
  %30 = bitcast i32 %28 to float, !dbg !21
  %31 = bitcast i32 %29 to float, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !22
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %14) #1, !dbg !23
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !23
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !23
  %36 = bitcast i32 %34 to float, !dbg !23
  %37 = bitcast i32 %35 to float, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !24
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %14) #1, !dbg !25
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !25
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !25
  %42 = bitcast i32 %40 to float, !dbg !25
  %43 = bitcast i32 %41 to float, !dbg !25
  %44 = fmul float %23, %30, !dbg !26
  %45 = fmul float %24, %31, !dbg !26
  %46 = icmp slt i32 %.decomposed, 2, !dbg !27
  %47 = shl nsw i32 %16, 2, !dbg !28
  %48 = add nsw i32 %.decomposed, 2, !dbg !29
  %49 = add i32 %48, %47, !dbg !30
  %50 = sext i32 %49 to i64, !dbg !31
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !31
  %52 = and i1 %14, %46, !dbg !32
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %51, i1 %52, i32 0, i1 %52, i32 0, i1 %52) #1, !dbg !33
  %54 = extractvalue { i32, i32 } %53, 0, !dbg !33
  %55 = extractvalue { i32, i32 } %53, 1, !dbg !33
  %56 = bitcast i32 %54 to float, !dbg !33
  %57 = bitcast i32 %55 to float, !dbg !33
  %58 = fsub float 0.000000e+00, %56, !dbg !34
  %59 = fsub float 0.000000e+00, %57, !dbg !34
  %60 = icmp sgt i32 %.decomposed, 1, !dbg !35
  %61 = add nsw i32 %.decomposed, -2, !dbg !36
  %62 = add i32 %61, %47, !dbg !37
  %63 = sext i32 %62 to i64, !dbg !38
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !38
  %65 = and i1 %14, %60, !dbg !39
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %64, i1 %65, i32 0, i1 %65, i32 0, i1 %65) #1, !dbg !40
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !40
  %68 = extractvalue { i32, i32 } %66, 1, !dbg !40
  %69 = bitcast i32 %67 to float, !dbg !40
  %70 = bitcast i32 %68 to float, !dbg !40
  %71 = select i1 %46, float %58, float %69, !dbg !41
  %72 = select i1 %46, float %59, float %70, !dbg !41
  %73 = fmul float %71, %36, !dbg !42
  %74 = fmul float %72, %37, !dbg !42
  %75 = fadd float %44, %73, !dbg !43
  %76 = fadd float %45, %74, !dbg !43
  %77 = fmul float %30, %42, !dbg !44
  %78 = fmul float %31, %43, !dbg !44
  %79 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !45
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %79, i1 %52, i32 0, i1 %52, i32 0, i1 %52) #1, !dbg !46
  %81 = extractvalue { i32, i32 } %80, 0, !dbg !46
  %82 = extractvalue { i32, i32 } %80, 1, !dbg !46
  %83 = bitcast i32 %81 to float, !dbg !46
  %84 = bitcast i32 %82 to float, !dbg !46
  %85 = fsub float 0.000000e+00, %83, !dbg !47
  %86 = fsub float 0.000000e+00, %84, !dbg !47
  %87 = getelementptr float, ptr addrspace(1) %3, i64 %63, !dbg !48
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %87, i1 %65, i32 0, i1 %65, i32 0, i1 %65) #1, !dbg !49
  %89 = extractvalue { i32, i32 } %88, 0, !dbg !49
  %90 = extractvalue { i32, i32 } %88, 1, !dbg !49
  %91 = bitcast i32 %89 to float, !dbg !49
  %92 = bitcast i32 %90 to float, !dbg !49
  %93 = select i1 %46, float %85, float %91, !dbg !41
  %94 = select i1 %46, float %86, float %92, !dbg !41
  %95 = fmul float %93, %36, !dbg !50
  %96 = fmul float %94, %37, !dbg !50
  %97 = fadd float %77, %95, !dbg !51
  %98 = fadd float %78, %96, !dbg !51
  %99 = getelementptr float, ptr addrspace(1) %4, i64 %18, !dbg !52
  %100 = bitcast float %75 to i32, !dbg !53
  %101 = bitcast float %76 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %100, i32 %101, ptr addrspace(1) %99, i1 %14) #1, !dbg !53
  %102 = getelementptr float, ptr addrspace(1) %5, i64 %18, !dbg !54
  %103 = bitcast float %97 to i32, !dbg !55
  %104 = bitcast float %98 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %103, i32 %104, ptr addrspace(1) %102, i1 %14) #1, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cicxv7zcx23wer3lq6gjckyohjyjufoovng57i3cawoizakmvtu5.py", directory: "inductor_cache/ic")
!4 = !{ptr @triton_poi_fused_add_cat_mul_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_cat_mul_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_cat_mul_0", linkageName: "triton_poi_fused_add_cat_mul_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 18, scope: !7)
!28 = !DILocation(line: 38, column: 36, scope: !7)
!29 = !DILocation(line: 38, column: 34, scope: !7)
!30 = !DILocation(line: 38, column: 42, scope: !7)
!31 = !DILocation(line: 38, column: 30, scope: !7)
!32 = !DILocation(line: 38, column: 55, scope: !7)
!33 = !DILocation(line: 38, column: 48, scope: !7)
!34 = !DILocation(line: 39, column: 12, scope: !7)
!35 = !DILocation(line: 42, column: 20, scope: !7)
!36 = !DILocation(line: 45, column: 46, scope: !7)
!37 = !DILocation(line: 45, column: 39, scope: !7)
!38 = !DILocation(line: 45, column: 31, scope: !7)
!39 = !DILocation(line: 45, column: 60, scope: !7)
!40 = !DILocation(line: 45, column: 52, scope: !7)
!41 = !DILocation(line: 0, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 19, scope: !7)
!44 = !DILocation(line: 49, column: 20, scope: !7)
!45 = !DILocation(line: 50, column: 31, scope: !7)
!46 = !DILocation(line: 50, column: 49, scope: !7)
!47 = !DILocation(line: 51, column: 13, scope: !7)
!48 = !DILocation(line: 54, column: 31, scope: !7)
!49 = !DILocation(line: 54, column: 52, scope: !7)
!50 = !DILocation(line: 56, column: 20, scope: !7)
!51 = !DILocation(line: 57, column: 20, scope: !7)
!52 = !DILocation(line: 58, column: 25, scope: !7)
!53 = !DILocation(line: 58, column: 37, scope: !7)
!54 = !DILocation(line: 59, column: 25, scope: !7)
!55 = !DILocation(line: 59, column: 37, scope: !7)
!56 = !DILocation(line: 59, column: 4, scope: !7)
