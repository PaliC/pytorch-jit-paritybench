; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 254, !dbg !12
  %17 = and i32 %14, 127, !dbg !12
  %18 = or disjoint i32 %17, 128, !dbg !12
  %19 = or disjoint i32 %13, %16, !dbg !13
  %20 = or disjoint i32 %13, %17, !dbg !13
  %21 = or disjoint i32 %13, %18, !dbg !13
  %22 = icmp slt i32 %19, 512, !dbg !14
  %23 = icmp slt i32 %20, 512, !dbg !14
  %24 = icmp slt i32 %21, 512, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %26 = icmp slt i32 %25, 16, !dbg !16
  %.frozen = freeze i32 %25, !dbg !17
  %27 = sdiv i32 %.frozen, 4, !dbg !17
  %28 = mul i32 %27, 4, !dbg !18
  %.decomposed = sub i32 %.frozen, %28, !dbg !18
  %.frozen11 = freeze i32 %19, !dbg !19
  %29 = sdiv i32 %.frozen11, 128, !dbg !19
  %30 = mul i32 %29, 128, !dbg !20
  %.decomposed12 = sub i32 %.frozen11, %30, !dbg !20
  %31 = sext i32 %27 to i64, !dbg !21
  %32 = getelementptr i64, ptr addrspace(1) %0, i64 %31, !dbg !21
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %26) #4, !dbg !22
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 %26) #4, !dbg !22
  %35 = sext i32 %.decomposed to i64, !dbg !23
  %36 = getelementptr i64, ptr addrspace(1) %0, i64 %35, !dbg !23
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 %26) #4, !dbg !24
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 %26) #4, !dbg !24
  %39 = sext i32 %.decomposed12 to i64, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !25
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %22) #4, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !27
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %22) #4, !dbg !28
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !28
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !28
  %46 = bitcast i32 %44 to float, !dbg !28
  %47 = bitcast i32 %45 to float, !dbg !28
  %48 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !29
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %22) #4, !dbg !30
  %50 = getelementptr float, ptr addrspace(1) %5, i64 %39, !dbg !31
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %22) #4, !dbg !32
  %52 = shl i32 %20, 4, !dbg !33
  %53 = shl i32 %21, 4, !dbg !33
  %54 = add i32 %52, %25, !dbg !34
  %55 = add i32 %53, %25, !dbg !34
  %56 = sext i32 %54 to i64, !dbg !35
  %57 = getelementptr float, ptr addrspace(1) %6, i64 %56, !dbg !35
  %58 = sext i32 %55 to i64, !dbg !35
  %59 = getelementptr float, ptr addrspace(1) %6, i64 %58, !dbg !35
  %60 = and i1 %26, %23, !dbg !36
  %61 = and i1 %26, %24, !dbg !36
  %62 = and i1 %26, %22, !dbg !36
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %60) #4, !dbg !37
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %61) #4, !dbg !37
  %65 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !37
  %66 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 true) #4, !dbg !37
  %67 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !37
  %68 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %68, i1 true) #4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %69 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !37
  %70 = load <2 x float>, ptr addrspace(3) %69, align 8, !dbg !37
  %71 = lshr i64 %34, 61, !dbg !38
  %72 = and i64 %71, 4, !dbg !38
  %73 = add i64 %72, %34, !dbg !38
  %74 = lshr i64 %38, 61, !dbg !39
  %75 = and i64 %74, 4, !dbg !39
  %76 = add i64 %75, %38, !dbg !39
  %77 = shl i32 %29, 11, !dbg !40
  %78 = sext i32 %77 to i64, !dbg !41
  %.idx = shl i64 %76, 9, !dbg !42
  %79 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx, !dbg !42
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %39, !dbg !42
  %.idx2 = shl i64 %73, 11, !dbg !42
  %81 = getelementptr i8, ptr addrspace(1) %80, i64 %.idx2, !dbg !42
  %82 = getelementptr float, ptr addrspace(1) %81, i64 %78, !dbg !42
  %83 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %82, i1 %62) #4, !dbg !43
  %84 = fadd float %46, 0x3EE4F8B580000000, !dbg !44
  %85 = fadd float %47, 0x3EE4F8B580000000, !dbg !44
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i = icmp eq i32 %86, 0, !dbg !45
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i = icmp eq i32 %87, 0, !dbg !45
  br i1 %.not.i, label %93, label %88, !dbg !45

88:                                               ; preds = %11
  br i1 %.not1.i, label %91, label %89, !dbg !45

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

93:                                               ; preds = %11
  br i1 %.not1.i, label %96, label %94, !dbg !45

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %89, %91, %94, %96
  %.0.i = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !45
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i6 = icmp eq i32 %98, 0, !dbg !45
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i9 = icmp eq i32 %99, 0, !dbg !45
  br i1 %.not.i6, label %105, label %100, !dbg !45

100:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %103, label %101, !dbg !45

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #4, !dbg !45
  br label %__nv_sqrtf.exit10, !dbg !45

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #4, !dbg !45
  br label %__nv_sqrtf.exit10, !dbg !45

105:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %108, label %106, !dbg !45

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #4, !dbg !45
  br label %__nv_sqrtf.exit10, !dbg !45

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #4, !dbg !45
  br label %__nv_sqrtf.exit10, !dbg !45

__nv_sqrtf.exit10:                                ; preds = %101, %103, %106, %108
  %.0.i8 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !45
  %110 = extractvalue { i32, i32 } %83, 1, !dbg !43
  %111 = bitcast i32 %110 to float, !dbg !43
  %112 = extractvalue { i32, i32 } %41, 1, !dbg !26
  %113 = bitcast i32 %112 to float, !dbg !26
  %114 = fsub float %111, %113, !dbg !46
  %115 = extractvalue { i32, i32 } %83, 0, !dbg !43
  %116 = bitcast i32 %115 to float, !dbg !43
  %117 = extractvalue { i32, i32 } %41, 0, !dbg !26
  %118 = bitcast i32 %117 to float, !dbg !26
  %119 = fsub float %116, %118, !dbg !46
  %120 = extractelement <2 x float> %70, i64 1, !dbg !37
  %121 = extractelement <2 x float> %70, i64 0, !dbg !37
  %122 = extractvalue { i32, i32 } %51, 1, !dbg !32
  %123 = bitcast i32 %122 to float, !dbg !32
  %124 = extractvalue { i32, i32 } %51, 0, !dbg !32
  %125 = bitcast i32 %124 to float, !dbg !32
  %126 = extractvalue { i32, i32 } %49, 1, !dbg !30
  %127 = bitcast i32 %126 to float, !dbg !30
  %128 = extractvalue { i32, i32 } %49, 0, !dbg !30
  %129 = bitcast i32 %128 to float, !dbg !30
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !47
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !47
  %132 = fmul float %119, %130, !dbg !48
  %133 = fmul float %114, %131, !dbg !48
  %134 = fmul float %132, %129, !dbg !49
  %135 = fmul float %133, %127, !dbg !49
  %136 = fadd float %134, %125, !dbg !50
  %137 = fadd float %135, %123, !dbg !50
  %138 = fcmp olt float %136, 0.000000e+00, !dbg !51
  %139 = fcmp olt float %137, 0.000000e+00, !dbg !51
  %140 = select i1 %138, float 0.000000e+00, float %136, !dbg !55
  %141 = select i1 %139, float 0.000000e+00, float %137, !dbg !55
  %142 = fadd float %121, %140, !dbg !56
  %143 = fadd float %120, %141, !dbg !56
  %144 = getelementptr float, ptr addrspace(1) %7, i64 %56, !dbg !57
  %145 = getelementptr float, ptr addrspace(1) %7, i64 %58, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %.idx3 = shl nuw nsw i32 %16, 3, !dbg !58
  %146 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !58
  %147 = bitcast float %140 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #4, !dbg !58
  %148 = shl nuw nsw i32 %16, 1, !dbg !58
  %149 = or disjoint i32 %148, 2, !dbg !58
  %150 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %149, !dbg !58
  %151 = bitcast float %141 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %.idx4 = shl nuw nsw i32 %17, 3, !dbg !58
  %152 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !58
  %153 = load i32, ptr addrspace(3) %152, align 8, !dbg !58
  %.idx5 = shl nuw nsw i32 %18, 3, !dbg !58
  %154 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !58
  %155 = load i32, ptr addrspace(3) %154, align 8, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %153, ptr addrspace(1) %144, i1 %60) #4, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %155, ptr addrspace(1) %145, i1 %61) #4, !dbg !58
  %156 = shl i32 %25, 7, !dbg !59
  %157 = add i32 %.decomposed12, %156, !dbg !60
  %158 = add i32 %157, %77, !dbg !61
  %159 = sext i32 %158 to i64, !dbg !62
  %160 = getelementptr float, ptr addrspace(1) %8, i64 %159, !dbg !62
  %161 = bitcast float %142 to i32, !dbg !63
  %162 = bitcast float %143 to i32, !dbg !63
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %161, i32 %162, ptr addrspace(1) %160, i1 %62) #4, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbm65p4dyc2lwasdlfcily27avpivtj5opnjqhnspf5a2ppsdkpn.py", directory: "inductor_cache/bm")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 28, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 34, column: 30, scope: !7)
!22 = !DILocation(line: 34, column: 35, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 35, scope: !7)
!25 = !DILocation(line: 36, column: 31, scope: !7)
!26 = !DILocation(line: 36, column: 36, scope: !7)
!27 = !DILocation(line: 37, column: 31, scope: !7)
!28 = !DILocation(line: 37, column: 36, scope: !7)
!29 = !DILocation(line: 38, column: 31, scope: !7)
!30 = !DILocation(line: 38, column: 36, scope: !7)
!31 = !DILocation(line: 39, column: 31, scope: !7)
!32 = !DILocation(line: 39, column: 36, scope: !7)
!33 = !DILocation(line: 40, column: 39, scope: !7)
!34 = !DILocation(line: 40, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 31, scope: !7)
!36 = !DILocation(line: 40, column: 52, scope: !7)
!37 = !DILocation(line: 40, column: 44, scope: !7)
!38 = !DILocation(line: 44, column: 32, scope: !7)
!39 = !DILocation(line: 47, column: 32, scope: !7)
!40 = !DILocation(line: 48, column: 62, scope: !7)
!41 = !DILocation(line: 48, column: 57, scope: !7)
!42 = !DILocation(line: 48, column: 30, scope: !7)
!43 = !DILocation(line: 48, column: 67, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 27, scope: !7)
!46 = !DILocation(line: 49, column: 19, scope: !7)
!47 = !DILocation(line: 54, column: 20, scope: !7)
!48 = !DILocation(line: 57, column: 20, scope: !7)
!49 = !DILocation(line: 58, column: 20, scope: !7)
!50 = !DILocation(line: 59, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 61, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 62, column: 20, scope: !7)
!57 = !DILocation(line: 63, column: 25, scope: !7)
!58 = !DILocation(line: 63, column: 45, scope: !7)
!59 = !DILocation(line: 64, column: 34, scope: !7)
!60 = !DILocation(line: 64, column: 30, scope: !7)
!61 = !DILocation(line: 64, column: 39, scope: !7)
!62 = !DILocation(line: 64, column: 25, scope: !7)
!63 = !DILocation(line: 64, column: 56, scope: !7)
!64 = !DILocation(line: 64, column: 4, scope: !7)
