; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_42(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 510, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = sdiv i32 %16, 256, !dbg !14
  %.frozen = freeze i32 %16, !dbg !15
  %18 = sdiv i32 %.frozen, 131072, !dbg !15
  %19 = mul i32 %18, 131072, !dbg !16
  %srem.decomposed = sub i32 %.frozen, %19, !dbg !16
  %20 = shl nsw i32 %18, 15, !dbg !17
  %21 = add nsw i32 %20, %srem.decomposed, !dbg !18
  %22 = sext i32 %21 to i64, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !20
  %25 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !21
  %26 = insertelement <2 x i32> %25, i32 %17, i64 1, !dbg !21
  %27 = srem <2 x i32> %26, <i32 256, i32 512>, !dbg !21
  %28 = extractelement <2 x i32> %27, i64 1, !dbg !22
  %29 = icmp slt i32 %28, 128, !dbg !23
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %23, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #1, !dbg !24
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !24
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !24
  %33 = bitcast i32 %31 to float, !dbg !24
  %34 = bitcast i32 %32 to float, !dbg !24
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #1, !dbg !25
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !25
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !25
  %38 = bitcast i32 %36 to float, !dbg !25
  %39 = bitcast i32 %37 to float, !dbg !25
  %40 = fadd float %33, %38, !dbg !26
  %41 = fadd float %34, %39, !dbg !26
  %42 = and i32 %28, -128, !dbg !27
  %43 = icmp eq i32 %42, 128, !dbg !27
  %44 = shl nsw i32 %28, 8, !dbg !28
  %45 = insertelement <2 x i32> <i32 poison, i32 -384>, i32 %20, i64 0, !dbg !28
  %46 = add nsw <2 x i32> %45, %27, !dbg !28
  %47 = extractelement <2 x i32> %46, i64 0, !dbg !29
  %48 = add nsw i32 %47, -32768, !dbg !30
  %49 = add nsw i32 %48, %44, !dbg !31
  %50 = sext i32 %49 to i64, !dbg !32
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !32
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %51, i1 %43, i32 0, i1 %43, i32 0, i1 %43) #1, !dbg !33
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !33
  %54 = extractvalue { i32, i32 } %52, 1, !dbg !33
  %55 = bitcast i32 %53 to float, !dbg !33
  %56 = bitcast i32 %54 to float, !dbg !33
  %57 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !34
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %57, i1 %43, i32 0, i1 %43, i32 0, i1 %43) #1, !dbg !35
  %59 = extractvalue { i32, i32 } %58, 0, !dbg !35
  %60 = extractvalue { i32, i32 } %58, 1, !dbg !35
  %61 = bitcast i32 %59 to float, !dbg !35
  %62 = bitcast i32 %60 to float, !dbg !35
  %63 = fadd float %55, %61, !dbg !36
  %64 = fadd float %56, %62, !dbg !36
  %65 = icmp eq i32 %42, 256, !dbg !37
  %66 = add nsw i32 %47, -65536, !dbg !38
  %67 = add nsw i32 %66, %44, !dbg !39
  %68 = sext i32 %67 to i64, !dbg !40
  %69 = getelementptr float, ptr addrspace(1) %4, i64 %68, !dbg !40
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %69, i1 %65, i32 0, i1 %65, i32 0, i1 %65) #1, !dbg !41
  %71 = extractvalue { i32, i32 } %70, 0, !dbg !41
  %72 = extractvalue { i32, i32 } %70, 1, !dbg !41
  %73 = bitcast i32 %71 to float, !dbg !41
  %74 = bitcast i32 %72 to float, !dbg !41
  %75 = getelementptr float, ptr addrspace(1) %5, i64 %68, !dbg !42
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %75, i1 %65, i32 0, i1 %65, i32 0, i1 %65) #1, !dbg !43
  %77 = extractvalue { i32, i32 } %76, 0, !dbg !43
  %78 = extractvalue { i32, i32 } %76, 1, !dbg !43
  %79 = bitcast i32 %77 to float, !dbg !43
  %80 = bitcast i32 %78 to float, !dbg !43
  %81 = fadd float %73, %79, !dbg !44
  %82 = fadd float %74, %80, !dbg !44
  %83 = icmp sgt i32 %28, 383, !dbg !22
  %84 = extractelement <2 x i32> %46, i64 1, !dbg !45
  %85 = shl nsw i32 %84, 8, !dbg !45
  %86 = add nsw i32 %47, %85, !dbg !29
  %87 = sext i32 %86 to i64, !dbg !46
  %88 = getelementptr float, ptr addrspace(1) %6, i64 %87, !dbg !46
  %89 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %88, i1 %83, i32 0, i1 %83, i32 0, i1 %83) #1, !dbg !47
  %90 = extractvalue { i32, i32 } %89, 0, !dbg !47
  %91 = extractvalue { i32, i32 } %89, 1, !dbg !47
  %92 = bitcast i32 %90 to float, !dbg !47
  %93 = bitcast i32 %91 to float, !dbg !47
  %94 = sext i32 %84 to i64, !dbg !48
  %95 = getelementptr float, ptr addrspace(1) %7, i64 %94, !dbg !48
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %83, i32 0, i1 %83) #1, !dbg !49
  %97 = bitcast i32 %96 to float, !dbg !49
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %83, i32 0, i1 %83) #1, !dbg !49
  %99 = bitcast i32 %98 to float, !dbg !49
  %100 = fadd float %92, %97, !dbg !50
  %101 = fadd float %93, %99, !dbg !50
  %102 = select i1 %83, float %100, float 0.000000e+00, !dbg !51
  %103 = select i1 %83, float %101, float 0.000000e+00, !dbg !51
  %104 = select i1 %65, float %81, float %102, !dbg !52
  %105 = select i1 %65, float %82, float %103, !dbg !52
  %106 = select i1 %43, float %63, float %104, !dbg !52
  %107 = select i1 %43, float %64, float %105, !dbg !52
  %108 = select i1 %29, float %40, float %106, !dbg !52
  %109 = select i1 %29, float %41, float %107, !dbg !52
  %110 = sext i32 %16 to i64, !dbg !53
  %111 = getelementptr float, ptr addrspace(1) %8, i64 %110, !dbg !53
  %112 = bitcast float %108 to i32, !dbg !54
  %113 = bitcast float %109 to i32, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %112, i32 %113, ptr addrspace(1) %111, i1 true) #1, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5ajslzdddban342oxngfhfn45v5yl3k4shgabylzte4rys7pkxj.py", directory: "inductor_cache/5a")
!4 = !{ptr @triton_poi_fused_cat_42, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_42, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_42", linkageName: "triton_poi_fused_cat_42", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 33, column: 52, scope: !7)
!18 = !DILocation(line: 33, column: 46, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 25, column: 19, scope: !7)
!22 = !DILocation(line: 56, column: 20, scope: !7)
!23 = !DILocation(line: 32, column: 18, scope: !7)
!24 = !DILocation(line: 33, column: 57, scope: !7)
!25 = !DILocation(line: 34, column: 57, scope: !7)
!26 = !DILocation(line: 35, column: 18, scope: !7)
!27 = !DILocation(line: 41, column: 20, scope: !7)
!28 = !DILocation(line: 42, column: 41, scope: !7)
!29 = !DILocation(line: 59, column: 56, scope: !7)
!30 = !DILocation(line: 42, column: 36, scope: !7)
!31 = !DILocation(line: 42, column: 56, scope: !7)
!32 = !DILocation(line: 42, column: 31, scope: !7)
!33 = !DILocation(line: 42, column: 67, scope: !7)
!34 = !DILocation(line: 43, column: 31, scope: !7)
!35 = !DILocation(line: 43, column: 67, scope: !7)
!36 = !DILocation(line: 44, column: 20, scope: !7)
!37 = !DILocation(line: 50, column: 20, scope: !7)
!38 = !DILocation(line: 51, column: 36, scope: !7)
!39 = !DILocation(line: 51, column: 56, scope: !7)
!40 = !DILocation(line: 51, column: 31, scope: !7)
!41 = !DILocation(line: 51, column: 67, scope: !7)
!42 = !DILocation(line: 52, column: 31, scope: !7)
!43 = !DILocation(line: 52, column: 67, scope: !7)
!44 = !DILocation(line: 53, column: 20, scope: !7)
!45 = !DILocation(line: 59, column: 41, scope: !7)
!46 = !DILocation(line: 59, column: 31, scope: !7)
!47 = !DILocation(line: 59, column: 67, scope: !7)
!48 = !DILocation(line: 60, column: 31, scope: !7)
!49 = !DILocation(line: 60, column: 45, scope: !7)
!50 = !DILocation(line: 61, column: 20, scope: !7)
!51 = !DILocation(line: 63, column: 35, scope: !7)
!52 = !DILocation(line: 0, scope: !7)
!53 = !DILocation(line: 67, column: 25, scope: !7)
!54 = !DILocation(line: 67, column: 37, scope: !7)
!55 = !DILocation(line: 67, column: 4, scope: !7)
