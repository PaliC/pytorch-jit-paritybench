#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 8], order = [0, 1]}>
#loc = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":19:0)
#loc1 = loc(unknown)
#loc26 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":40:24)
#loc33 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":47:26)
#loc50 = loc(callsite(#loc1 at #loc26))
#loc53 = loc(callsite(#loc1 at #loc33))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_div_mean_mul_pow_sqrt_sub_10(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":19:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<9.600000e+01> : tensor<8x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<8x128xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1x128xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<96> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<96> : tensor<1x128xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<1024> : tensor<8x1xi32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<1024> : tensor<8x1xi32, #blocked> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst_6 = arith.constant dense<9.99999997E-7> : tensor<8x1xf32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<9.99999997E-7> : tensor<8x1xf32, #blocked1> loc(#loc1)
    %cst_8 = arith.constant dense<9.600000e+01> : tensor<8x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<8x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<8x1xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_5 : tensor<8x1xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_4 : tensor<8x1xi32, #blocked1> loc(#loc6)
    %12 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi32, #blocked> loc(#loc7)
    %14 = arith.cmpi slt, %13, %cst_3 : tensor<1x128xi32, #blocked> loc(#loc8)
    %15 = arith.muli %8, %cst_2 : tensor<8x1xi32, #blocked> loc(#loc9)
    %16 = tt.broadcast %13 : tensor<1x128xi32, #blocked> -> tensor<8x128xi32, #blocked> loc(#loc10)
    %17 = tt.broadcast %15 : tensor<8x1xi32, #blocked> -> tensor<8x128xi32, #blocked> loc(#loc10)
    %18 = arith.addi %16, %17 : tensor<8x128xi32, #blocked> loc(#loc10)
    %19 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc11)
    %20 = tt.addptr %19, %18 : tensor<8x128x!tt.ptr<f32>, #blocked>, tensor<8x128xi32, #blocked> loc(#loc11)
    %21 = tt.broadcast %14 : tensor<1x128xi1, #blocked> -> tensor<8x128xi1, #blocked> loc(#loc12)
    %22 = tt.broadcast %10 : tensor<8x1xi1, #blocked> -> tensor<8x128xi1, #blocked> loc(#loc12)
    %23 = arith.andi %21, %22 : tensor<8x128xi1, #blocked> loc(#loc12)
    %24 = tt.load %20, %23, %cst_0 : tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc13)
    %25 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc14)
    %26 = tt.addptr %25, %13 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc14)
    %27 = tt.load %26, %14, %cst_1 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc15)
    %28 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc16)
    %29 = tt.addptr %28, %18 : tensor<8x128x!tt.ptr<f32>, #blocked>, tensor<8x128xi32, #blocked> loc(#loc16)
    %30 = tt.load %29, %23, %cst_0 : tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc17)
    %31 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc18)
    %32 = tt.addptr %31, %13 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc18)
    %33 = tt.load %32, %14, %cst_1 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc19)
    %34 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc20)
    %35 = tt.addptr %34, %13 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc20)
    %36 = tt.load %35, %14, %cst_1 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc21)
    %37 = tt.broadcast %27 : tensor<1x128xf32, #blocked> -> tensor<8x128xf32, #blocked> loc(#loc22)
    %38 = arith.mulf %37, %30 : tensor<8x128xf32, #blocked> loc(#loc22)
    %39 = arith.addf %24, %38 : tensor<8x128xf32, #blocked> loc(#loc23)
    %40 = arith.select %23, %39, %cst_0 : tensor<8x128xi1, #blocked>, tensor<8x128xf32, #blocked> loc(#loc24)
    %41 = "tt.reduce"(%40) <{axis = 1 : i32}> ({
    ^bb0(%arg10: f32 loc(callsite(#loc1 at #loc26)), %arg11: f32 loc(callsite(#loc1 at #loc26))):
      %70 = arith.addf %arg10, %arg11 : f32 loc(#loc54)
      tt.reduce.return %70 : f32 loc(#loc49)
    }) : (tensor<8x128xf32, #blocked>) -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc49)
    %42 = tt.expand_dims %41 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xf32, #blocked> loc(#loc28)
    %43 = arith.divf %42, %cst : tensor<8x1xf32, #blocked> loc(#loc29)
    %44 = tt.broadcast %43 : tensor<8x1xf32, #blocked> -> tensor<8x128xf32, #blocked> loc(#loc30)
    %45 = arith.subf %39, %44 : tensor<8x128xf32, #blocked> loc(#loc30)
    %46 = arith.mulf %45, %45 : tensor<8x128xf32, #blocked> loc(#loc31)
    %47 = arith.select %23, %46, %cst_0 : tensor<8x128xi1, #blocked>, tensor<8x128xf32, #blocked> loc(#loc32)
    %48 = "tt.reduce"(%47) <{axis = 1 : i32}> ({
    ^bb0(%arg10: f32 loc(callsite(#loc1 at #loc33)), %arg11: f32 loc(callsite(#loc1 at #loc33))):
      %70 = arith.addf %arg10, %arg11 : f32 loc(#loc55)
      tt.reduce.return %70 : f32 loc(#loc52)
    }) : (tensor<8x128xf32, #blocked>) -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc52)
    %49 = triton_gpu.convert_layout %48 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc34)
    %50 = tt.expand_dims %49 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xf32, #blocked1> loc(#loc35)
    %51 = tt.expand_dims %48 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xf32, #blocked> loc(#loc35)
    %52 = arith.divf %50, %cst_8 : tensor<8x1xf32, #blocked1> loc(#loc36)
    %53 = arith.divf %51, %cst : tensor<8x1xf32, #blocked> loc(#loc36)
    %54 = arith.addf %52, %cst_7 : tensor<8x1xf32, #blocked1> loc(#loc37)
    %55 = arith.addf %53, %cst_6 : tensor<8x1xf32, #blocked> loc(#loc37)
    %56 = tt.extern_elementwise %54 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<8x1xf32, #blocked1>) -> tensor<8x1xf32, #blocked1> loc(#loc34)
    %57 = tt.extern_elementwise %55 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<8x1xf32, #blocked>) -> tensor<8x1xf32, #blocked> loc(#loc34)
    %58 = tt.broadcast %57 : tensor<8x1xf32, #blocked> -> tensor<8x128xf32, #blocked> loc(#loc38)
    %59 = arith.divf %45, %58 : tensor<8x128xf32, #blocked> loc(#loc38)
    %60 = tt.broadcast %33 : tensor<1x128xf32, #blocked> -> tensor<8x128xf32, #blocked> loc(#loc39)
    %61 = arith.mulf %60, %59 : tensor<8x128xf32, #blocked> loc(#loc39)
    %62 = tt.broadcast %36 : tensor<1x128xf32, #blocked> -> tensor<8x128xf32, #blocked> loc(#loc40)
    %63 = arith.addf %61, %62 : tensor<8x128xf32, #blocked> loc(#loc40)
    %64 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc41)
    %65 = tt.addptr %64, %18 : tensor<8x128x!tt.ptr<f32>, #blocked>, tensor<8x128xi32, #blocked> loc(#loc41)
    tt.store %65, %45, %23 : tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc42)
    gpu.barrier loc(#loc43)
    %66 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc44)
    %67 = tt.addptr %66, %9 : tensor<8x1x!tt.ptr<f32>, #blocked1>, tensor<8x1xi32, #blocked1> loc(#loc44)
    tt.store %67, %56, %11 : tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc45)
    %68 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc46)
    %69 = tt.addptr %68, %18 : tensor<8x128x!tt.ptr<f32>, #blocked>, tensor<8x128xi32, #blocked> loc(#loc46)
    tt.store %69, %63, %23 : tensor<8x128x!tt.ptr<f32>, #blocked> loc(#loc47)
    tt.return loc(#loc48)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":23:28)
#loc3 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":23:33)
#loc4 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":24:44)
#loc5 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":24:23)
#loc6 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":25:21)
#loc7 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":26:34)
#loc8 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":28:21)
#loc9 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":31:38)
#loc10 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":31:35)
#loc11 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":31:30)
#loc12 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":31:51)
#loc13 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":31:43)
#loc14 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":32:30)
#loc15 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":32:35)
#loc16 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":33:30)
#loc17 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":33:43)
#loc18 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":34:31)
#loc19 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":34:36)
#loc20 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":35:31)
#loc21 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":35:36)
#loc22 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":36:18)
#loc23 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":37:18)
#loc24 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":39:41)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc27 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc28 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":40:27)
#loc29 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":42:19)
#loc30 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":43:19)
#loc31 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":44:20)
#loc32 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":46:43)
#loc34 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":51:27)
#loc35 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":47:29)
#loc36 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":48:20)
#loc37 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":50:20)
#loc38 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":52:20)
#loc39 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":53:20)
#loc40 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":54:20)
#loc41 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":55:25)
#loc42 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":55:45)
#loc43 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":56:4)
#loc44 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":57:28)
#loc45 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":57:40)
#loc46 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":58:25)
#loc47 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":58:45)
#loc48 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":58:4)
#loc49 = loc(callsite(#loc25 at #loc26))
#loc51 = loc(callsite(#loc27 at #loc25))
#loc52 = loc(callsite(#loc25 at #loc33))
#loc54 = loc(callsite(#loc51 at #loc26))
#loc55 = loc(callsite(#loc51 at #loc33))
