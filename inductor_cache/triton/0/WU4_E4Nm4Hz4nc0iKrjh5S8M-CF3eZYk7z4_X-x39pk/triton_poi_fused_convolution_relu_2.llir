; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 60, !dbg !12
  %12 = lshr i32 %9, 4, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %13, 16, !dbg !12
  %15 = or disjoint i32 %13, 32, !dbg !12
  %16 = or disjoint i32 %13, 48, !dbg !12
  %17 = or disjoint i32 %8, %11, !dbg !13
  %18 = or disjoint i32 %8, %13, !dbg !13
  %19 = or disjoint i32 %8, %14, !dbg !13
  %20 = or disjoint i32 %8, %15, !dbg !13
  %21 = or disjoint i32 %8, %16, !dbg !13
  %22 = icmp slt i32 %17, 256, !dbg !14
  %23 = icmp slt i32 %18, 256, !dbg !14
  %24 = icmp slt i32 %19, 256, !dbg !14
  %25 = icmp slt i32 %20, 256, !dbg !14
  %26 = icmp slt i32 %21, 256, !dbg !14
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %28 = shl i32 %27, 6, !dbg !16
  %29 = or disjoint i32 %28, %13, !dbg !17
  %30 = or disjoint i32 %28, %14, !dbg !17
  %31 = or disjoint i32 %28, %15, !dbg !17
  %32 = or disjoint i32 %28, %16, !dbg !17
  %33 = or disjoint i32 %28, %11, !dbg !17
  %.frozen = freeze i32 %17, !dbg !18
  %34 = sdiv i32 %.frozen, 64, !dbg !18
  %35 = mul i32 %34, 64, !dbg !19
  %.decomposed = sub i32 %.frozen, %35, !dbg !19
  %36 = shl i32 %29, 6, !dbg !20
  %37 = shl i32 %30, 6, !dbg !20
  %38 = shl i32 %31, 6, !dbg !20
  %39 = shl i32 %32, 6, !dbg !20
  %40 = shl i32 %34, 18, !dbg !21
  %41 = add i32 %40, %.decomposed, !dbg !22
  %42 = add i32 %41, %36, !dbg !23
  %43 = add i32 %41, %37, !dbg !23
  %44 = add i32 %41, %38, !dbg !23
  %45 = add i32 %41, %39, !dbg !23
  %46 = sext i32 %42 to i64, !dbg !24
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !24
  %48 = sext i32 %43 to i64, !dbg !24
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !24
  %50 = sext i32 %44 to i64, !dbg !24
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !24
  %52 = sext i32 %45 to i64, !dbg !24
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !24
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %22) #2, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !25
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !25
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !25
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %22) #2, !dbg !25
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !25
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !25
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !25
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %22) #2, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !25
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !25
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !25
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %22) #2, !dbg !25
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !25
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !25
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !25
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !25
  %74 = sext i32 %.decomposed to i64, !dbg !26
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !26
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %22) #2, !dbg !27
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !27
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !27
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !27
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !27
  %81 = insertelement <16 x i32> poison, i32 %73, i64 0, !dbg !25
  %82 = insertelement <16 x i32> %81, i32 %72, i64 1, !dbg !25
  %83 = insertelement <16 x i32> %82, i32 %71, i64 2, !dbg !25
  %84 = insertelement <16 x i32> %83, i32 %70, i64 3, !dbg !25
  %85 = insertelement <16 x i32> %84, i32 %68, i64 4, !dbg !25
  %86 = insertelement <16 x i32> %85, i32 %67, i64 5, !dbg !25
  %87 = insertelement <16 x i32> %86, i32 %66, i64 6, !dbg !25
  %88 = insertelement <16 x i32> %87, i32 %65, i64 7, !dbg !25
  %89 = insertelement <16 x i32> %88, i32 %63, i64 8, !dbg !25
  %90 = insertelement <16 x i32> %89, i32 %62, i64 9, !dbg !25
  %91 = insertelement <16 x i32> %90, i32 %61, i64 10, !dbg !25
  %92 = insertelement <16 x i32> %91, i32 %60, i64 11, !dbg !25
  %93 = insertelement <16 x i32> %92, i32 %58, i64 12, !dbg !25
  %94 = insertelement <16 x i32> %93, i32 %57, i64 13, !dbg !25
  %95 = insertelement <16 x i32> %94, i32 %56, i64 14, !dbg !25
  %96 = insertelement <16 x i32> %95, i32 %55, i64 15, !dbg !25
  %97 = bitcast <16 x i32> %96 to <16 x float>, !dbg !25
  %98 = insertelement <4 x i32> poison, i32 %80, i64 0, !dbg !27
  %99 = insertelement <4 x i32> %98, i32 %79, i64 1, !dbg !27
  %100 = insertelement <4 x i32> %99, i32 %78, i64 2, !dbg !27
  %101 = insertelement <4 x i32> %100, i32 %77, i64 3, !dbg !27
  %102 = bitcast <4 x i32> %101 to <4 x float>, !dbg !27
  %103 = shufflevector <4 x float> %102, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !27
  %104 = fadd <16 x float> %103, %97, !dbg !28
  %105 = fcmp olt <16 x float> %104, zeroinitializer, !dbg !29
  %106 = extractelement <16 x i1> %105, i64 15, !dbg !33
  %107 = extractelement <16 x float> %104, i64 15, !dbg !33
  %108 = select i1 %106, float 0.000000e+00, float %107, !dbg !33
  %109 = extractelement <16 x i1> %105, i64 14, !dbg !33
  %110 = extractelement <16 x float> %104, i64 14, !dbg !33
  %111 = select i1 %109, float 0.000000e+00, float %110, !dbg !33
  %112 = extractelement <16 x i1> %105, i64 13, !dbg !33
  %113 = extractelement <16 x float> %104, i64 13, !dbg !33
  %114 = select i1 %112, float 0.000000e+00, float %113, !dbg !33
  %115 = extractelement <16 x i1> %105, i64 12, !dbg !33
  %116 = extractelement <16 x float> %104, i64 12, !dbg !33
  %117 = select i1 %115, float 0.000000e+00, float %116, !dbg !33
  %118 = extractelement <16 x i1> %105, i64 11, !dbg !33
  %119 = extractelement <16 x float> %104, i64 11, !dbg !33
  %120 = select i1 %118, float 0.000000e+00, float %119, !dbg !33
  %121 = extractelement <16 x i1> %105, i64 10, !dbg !33
  %122 = extractelement <16 x float> %104, i64 10, !dbg !33
  %123 = select i1 %121, float 0.000000e+00, float %122, !dbg !33
  %124 = extractelement <16 x i1> %105, i64 9, !dbg !33
  %125 = extractelement <16 x float> %104, i64 9, !dbg !33
  %126 = select i1 %124, float 0.000000e+00, float %125, !dbg !33
  %127 = extractelement <16 x i1> %105, i64 8, !dbg !33
  %128 = extractelement <16 x float> %104, i64 8, !dbg !33
  %129 = select i1 %127, float 0.000000e+00, float %128, !dbg !33
  %130 = extractelement <16 x i1> %105, i64 7, !dbg !33
  %131 = extractelement <16 x float> %104, i64 7, !dbg !33
  %132 = select i1 %130, float 0.000000e+00, float %131, !dbg !33
  %133 = extractelement <16 x i1> %105, i64 6, !dbg !33
  %134 = extractelement <16 x float> %104, i64 6, !dbg !33
  %135 = select i1 %133, float 0.000000e+00, float %134, !dbg !33
  %136 = extractelement <16 x i1> %105, i64 5, !dbg !33
  %137 = extractelement <16 x float> %104, i64 5, !dbg !33
  %138 = select i1 %136, float 0.000000e+00, float %137, !dbg !33
  %139 = extractelement <16 x i1> %105, i64 4, !dbg !33
  %140 = extractelement <16 x float> %104, i64 4, !dbg !33
  %141 = select i1 %139, float 0.000000e+00, float %140, !dbg !33
  %142 = extractelement <16 x i1> %105, i64 3, !dbg !33
  %143 = extractelement <16 x float> %104, i64 3, !dbg !33
  %144 = select i1 %142, float 0.000000e+00, float %143, !dbg !33
  %145 = extractelement <16 x i1> %105, i64 2, !dbg !33
  %146 = extractelement <16 x float> %104, i64 2, !dbg !33
  %147 = select i1 %145, float 0.000000e+00, float %146, !dbg !33
  %148 = extractelement <16 x i1> %105, i64 1, !dbg !33
  %149 = extractelement <16 x float> %104, i64 1, !dbg !33
  %150 = select i1 %148, float 0.000000e+00, float %149, !dbg !33
  %151 = extractelement <16 x i1> %105, i64 0, !dbg !33
  %152 = extractelement <16 x float> %104, i64 0, !dbg !33
  %153 = select i1 %151, float 0.000000e+00, float %152, !dbg !33
  %154 = shl i32 %18, 12, !dbg !34
  %155 = shl i32 %19, 12, !dbg !34
  %156 = shl i32 %20, 12, !dbg !34
  %157 = shl i32 %21, 12, !dbg !34
  %158 = add i32 %33, %154, !dbg !35
  %159 = add i32 %33, %155, !dbg !35
  %160 = add i32 %33, %156, !dbg !35
  %161 = add i32 %33, %157, !dbg !35
  %162 = sext i32 %158 to i64, !dbg !36
  %163 = getelementptr float, ptr addrspace(1) %2, i64 %162, !dbg !36
  %164 = sext i32 %159 to i64, !dbg !36
  %165 = getelementptr float, ptr addrspace(1) %2, i64 %164, !dbg !36
  %166 = sext i32 %160 to i64, !dbg !36
  %167 = getelementptr float, ptr addrspace(1) %2, i64 %166, !dbg !36
  %168 = sext i32 %161 to i64, !dbg !36
  %169 = getelementptr float, ptr addrspace(1) %2, i64 %168, !dbg !36
  %170 = shl i32 %9, 8, !dbg !37
  %171 = and i32 %170, 3840, !dbg !37
  %172 = or disjoint i32 %171, %13, !dbg !37
  %173 = and i32 %10, 1020, !dbg !37
  %174 = lshr exact i32 %171, 4, !dbg !37
  %175 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %174, !dbg !37
  %176 = getelementptr float, ptr addrspace(3) %175, i32 %172, !dbg !37
  %177 = bitcast float %108 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %177, i1 true) #2, !dbg !37
  %178 = or disjoint i32 %172, 64, !dbg !37
  %179 = lshr i32 %178, 6, !dbg !37
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i32 %179, !dbg !37
  %181 = getelementptr float, ptr addrspace(3) %180, i32 %178, !dbg !37
  %182 = bitcast float %111 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %182, i1 true) #2, !dbg !37
  %183 = or disjoint i32 %172, 128, !dbg !37
  %184 = lshr i32 %183, 6, !dbg !37
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i32 %184, !dbg !37
  %186 = getelementptr float, ptr addrspace(3) %185, i32 %183, !dbg !37
  %187 = bitcast float %114 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %187, i1 true) #2, !dbg !37
  %188 = or disjoint i32 %172, 192, !dbg !37
  %189 = lshr i32 %188, 6, !dbg !37
  %190 = getelementptr float, ptr addrspace(3) @global_smem, i32 %189, !dbg !37
  %191 = getelementptr float, ptr addrspace(3) %190, i32 %188, !dbg !37
  %192 = bitcast float %117 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %192, i1 true) #2, !dbg !37
  %193 = or disjoint i32 %172, 16, !dbg !37
  %194 = getelementptr float, ptr addrspace(3) %175, i32 %193, !dbg !37
  %195 = bitcast float %120 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %195, i1 true) #2, !dbg !37
  %196 = or disjoint i32 %172, 80, !dbg !37
  %197 = lshr i32 %196, 6, !dbg !37
  %198 = getelementptr float, ptr addrspace(3) @global_smem, i32 %197, !dbg !37
  %199 = getelementptr float, ptr addrspace(3) %198, i32 %196, !dbg !37
  %200 = bitcast float %123 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %200, i1 true) #2, !dbg !37
  %201 = or disjoint i32 %172, 144, !dbg !37
  %202 = lshr i32 %201, 6, !dbg !37
  %203 = getelementptr float, ptr addrspace(3) @global_smem, i32 %202, !dbg !37
  %204 = getelementptr float, ptr addrspace(3) %203, i32 %201, !dbg !37
  %205 = bitcast float %126 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %205, i1 true) #2, !dbg !37
  %206 = or disjoint i32 %172, 208, !dbg !37
  %207 = lshr i32 %206, 6, !dbg !37
  %208 = getelementptr float, ptr addrspace(3) @global_smem, i32 %207, !dbg !37
  %209 = getelementptr float, ptr addrspace(3) %208, i32 %206, !dbg !37
  %210 = bitcast float %129 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %209, <1 x i32> %210, i1 true) #2, !dbg !37
  %211 = or disjoint i32 %172, 32, !dbg !37
  %212 = getelementptr float, ptr addrspace(3) %175, i32 %211, !dbg !37
  %213 = bitcast float %132 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %212, <1 x i32> %213, i1 true) #2, !dbg !37
  %214 = or disjoint i32 %172, 96, !dbg !37
  %215 = lshr i32 %214, 6, !dbg !37
  %216 = getelementptr float, ptr addrspace(3) @global_smem, i32 %215, !dbg !37
  %217 = getelementptr float, ptr addrspace(3) %216, i32 %214, !dbg !37
  %218 = bitcast float %135 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %218, i1 true) #2, !dbg !37
  %219 = or disjoint i32 %172, 160, !dbg !37
  %220 = lshr i32 %219, 6, !dbg !37
  %221 = getelementptr float, ptr addrspace(3) @global_smem, i32 %220, !dbg !37
  %222 = getelementptr float, ptr addrspace(3) %221, i32 %219, !dbg !37
  %223 = bitcast float %138 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %223, i1 true) #2, !dbg !37
  %224 = or disjoint i32 %172, 224, !dbg !37
  %225 = lshr i32 %224, 6, !dbg !37
  %226 = getelementptr float, ptr addrspace(3) @global_smem, i32 %225, !dbg !37
  %227 = getelementptr float, ptr addrspace(3) %226, i32 %224, !dbg !37
  %228 = bitcast float %141 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, <1 x i32> %228, i1 true) #2, !dbg !37
  %229 = or disjoint i32 %172, 48, !dbg !37
  %230 = getelementptr float, ptr addrspace(3) %175, i32 %229, !dbg !37
  %231 = bitcast float %144 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 true) #2, !dbg !37
  %232 = or disjoint i32 %172, 112, !dbg !37
  %233 = lshr i32 %232, 6, !dbg !37
  %234 = getelementptr float, ptr addrspace(3) @global_smem, i32 %233, !dbg !37
  %235 = getelementptr float, ptr addrspace(3) %234, i32 %232, !dbg !37
  %236 = bitcast float %147 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %236, i1 true) #2, !dbg !37
  %237 = or disjoint i32 %172, 176, !dbg !37
  %238 = lshr i32 %237, 6, !dbg !37
  %239 = getelementptr float, ptr addrspace(3) @global_smem, i32 %238, !dbg !37
  %240 = getelementptr float, ptr addrspace(3) %239, i32 %237, !dbg !37
  %241 = bitcast float %150 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 true) #2, !dbg !37
  %242 = or disjoint i32 %172, 240, !dbg !37
  %243 = lshr i32 %242, 6, !dbg !37
  %244 = getelementptr float, ptr addrspace(3) @global_smem, i32 %243, !dbg !37
  %245 = getelementptr float, ptr addrspace(3) %244, i32 %242, !dbg !37
  %246 = bitcast float %153 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %246, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %247 = lshr i32 %173, 6, !dbg !37
  %248 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %247, !dbg !37
  %249 = getelementptr inbounds float, ptr addrspace(3) %248, i32 %173, !dbg !37
  %250 = load i32, ptr addrspace(3) %249, align 4, !dbg !37
  %251 = or disjoint i32 %173, 1, !dbg !37
  %252 = getelementptr inbounds float, ptr addrspace(3) %248, i32 %251, !dbg !37
  %253 = load i32, ptr addrspace(3) %252, align 4, !dbg !37
  %254 = or disjoint i32 %173, 2, !dbg !37
  %255 = getelementptr inbounds float, ptr addrspace(3) %248, i32 %254, !dbg !37
  %256 = load i32, ptr addrspace(3) %255, align 4, !dbg !37
  %257 = or disjoint i32 %173, 3, !dbg !37
  %258 = getelementptr inbounds float, ptr addrspace(3) %248, i32 %257, !dbg !37
  %259 = load i32, ptr addrspace(3) %258, align 4, !dbg !37
  %260 = or disjoint i32 %173, 1024, !dbg !37
  %261 = lshr i32 %260, 6, !dbg !37
  %262 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %261, !dbg !37
  %263 = getelementptr inbounds float, ptr addrspace(3) %262, i32 %260, !dbg !37
  %264 = load i32, ptr addrspace(3) %263, align 4, !dbg !37
  %265 = or disjoint i32 %173, 1025, !dbg !37
  %266 = lshr i32 %265, 6, !dbg !37
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %266, !dbg !37
  %268 = getelementptr inbounds float, ptr addrspace(3) %267, i32 %265, !dbg !37
  %269 = load i32, ptr addrspace(3) %268, align 4, !dbg !37
  %270 = or disjoint i32 %173, 1026, !dbg !37
  %271 = lshr i32 %270, 6, !dbg !37
  %272 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %271, !dbg !37
  %273 = getelementptr inbounds float, ptr addrspace(3) %272, i32 %270, !dbg !37
  %274 = load i32, ptr addrspace(3) %273, align 4, !dbg !37
  %275 = or disjoint i32 %173, 1027, !dbg !37
  %276 = lshr i32 %275, 6, !dbg !37
  %277 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %276, !dbg !37
  %278 = getelementptr inbounds float, ptr addrspace(3) %277, i32 %275, !dbg !37
  %279 = load i32, ptr addrspace(3) %278, align 4, !dbg !37
  %280 = or disjoint i32 %173, 2048, !dbg !37
  %281 = lshr i32 %280, 6, !dbg !37
  %282 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %281, !dbg !37
  %283 = getelementptr inbounds float, ptr addrspace(3) %282, i32 %280, !dbg !37
  %284 = load i32, ptr addrspace(3) %283, align 4, !dbg !37
  %285 = or disjoint i32 %173, 2049, !dbg !37
  %286 = lshr i32 %285, 6, !dbg !37
  %287 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %286, !dbg !37
  %288 = getelementptr inbounds float, ptr addrspace(3) %287, i32 %285, !dbg !37
  %289 = load i32, ptr addrspace(3) %288, align 4, !dbg !37
  %290 = or disjoint i32 %173, 2050, !dbg !37
  %291 = lshr i32 %290, 6, !dbg !37
  %292 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %291, !dbg !37
  %293 = getelementptr inbounds float, ptr addrspace(3) %292, i32 %290, !dbg !37
  %294 = load i32, ptr addrspace(3) %293, align 4, !dbg !37
  %295 = or disjoint i32 %173, 2051, !dbg !37
  %296 = lshr i32 %295, 6, !dbg !37
  %297 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %296, !dbg !37
  %298 = getelementptr inbounds float, ptr addrspace(3) %297, i32 %295, !dbg !37
  %299 = load i32, ptr addrspace(3) %298, align 4, !dbg !37
  %300 = or disjoint i32 %173, 3072, !dbg !37
  %301 = lshr i32 %300, 6, !dbg !37
  %302 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %301, !dbg !37
  %303 = getelementptr inbounds float, ptr addrspace(3) %302, i32 %300, !dbg !37
  %304 = load i32, ptr addrspace(3) %303, align 4, !dbg !37
  %305 = or disjoint i32 %173, 3073, !dbg !37
  %306 = lshr i32 %305, 6, !dbg !37
  %307 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %306, !dbg !37
  %308 = getelementptr inbounds float, ptr addrspace(3) %307, i32 %305, !dbg !37
  %309 = load i32, ptr addrspace(3) %308, align 4, !dbg !37
  %310 = or disjoint i32 %173, 3074, !dbg !37
  %311 = lshr i32 %310, 6, !dbg !37
  %312 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %311, !dbg !37
  %313 = getelementptr inbounds float, ptr addrspace(3) %312, i32 %310, !dbg !37
  %314 = load i32, ptr addrspace(3) %313, align 4, !dbg !37
  %315 = or disjoint i32 %173, 3075, !dbg !37
  %316 = lshr i32 %315, 6, !dbg !37
  %317 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %316, !dbg !37
  %318 = getelementptr inbounds float, ptr addrspace(3) %317, i32 %315, !dbg !37
  %319 = load i32, ptr addrspace(3) %318, align 4, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %250, i32 %253, i32 %256, i32 %259, ptr addrspace(1) %163, i1 %23) #2, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %264, i32 %269, i32 %274, i32 %279, ptr addrspace(1) %165, i1 %24) #2, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %284, i32 %289, i32 %294, i32 %299, ptr addrspace(1) %167, i1 %25) #2, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %304, i32 %309, i32 %314, i32 %319, ptr addrspace(1) %169, i1 %26) #2, !dbg !37
  %320 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !38
  %321 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !38
  %322 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !38
  %323 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !38
  %324 = bitcast float %108 to i32, !dbg !39
  %325 = bitcast float %111 to i32, !dbg !39
  %326 = bitcast float %114 to i32, !dbg !39
  %327 = bitcast float %117 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %324, i32 %325, i32 %326, i32 %327, ptr addrspace(1) %320, i1 %22) #2, !dbg !39
  %328 = bitcast float %120 to i32, !dbg !39
  %329 = bitcast float %123 to i32, !dbg !39
  %330 = bitcast float %126 to i32, !dbg !39
  %331 = bitcast float %129 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %328, i32 %329, i32 %330, i32 %331, ptr addrspace(1) %321, i1 %22) #2, !dbg !39
  %332 = bitcast float %132 to i32, !dbg !39
  %333 = bitcast float %135 to i32, !dbg !39
  %334 = bitcast float %138 to i32, !dbg !39
  %335 = bitcast float %141 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %332, i32 %333, i32 %334, i32 %335, ptr addrspace(1) %322, i1 %22) #2, !dbg !39
  %336 = bitcast float %144 to i32, !dbg !39
  %337 = bitcast float %147 to i32, !dbg !39
  %338 = bitcast float %150 to i32, !dbg !39
  %339 = bitcast float %153 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %336, i32 %337, i32 %338, i32 %339, ptr addrspace(1) %323, i1 %22) #2, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnhbubmay6gysu5sj3tgcerevn2veamzbwo52ado56uwax2c7z3n.py", directory: "inductor_cache/nh")
!4 = !{ptr @triton_poi_fused_convolution_relu_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_2, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_2", linkageName: "triton_poi_fused_convolution_relu_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 38, scope: !7)
!21 = !DILocation(line: 32, column: 50, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 43, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 55, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 36, column: 40, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 37, column: 35, scope: !7)
!35 = !DILocation(line: 37, column: 30, scope: !7)
!36 = !DILocation(line: 37, column: 25, scope: !7)
!37 = !DILocation(line: 37, column: 46, scope: !7)
!38 = !DILocation(line: 38, column: 25, scope: !7)
!39 = !DILocation(line: 38, column: 56, scope: !7)
!40 = !DILocation(line: 38, column: 4, scope: !7)
