; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_avg_pool2d_convolution_53(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 5, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 3, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %12, 16, !dbg !12
  %14 = shl i32 %10, 2, !dbg !12
  %15 = and i32 %14, 28, !dbg !12
  %16 = or disjoint i32 %9, %12, !dbg !13
  %17 = or disjoint i32 %9, %13, !dbg !13
  %18 = or disjoint i32 %9, %15, !dbg !13
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !14
  %20 = shl i32 %19, 5, !dbg !15
  %21 = or disjoint i32 %20, %12, !dbg !16
  %22 = or disjoint i32 %20, %13, !dbg !16
  %23 = icmp slt i32 %21, 64, !dbg !17
  %24 = icmp slt i32 %22, 64, !dbg !17
  %.frozen = freeze i32 %18, !dbg !18
  %25 = sdiv i32 %.frozen, 2048, !dbg !18
  %26 = mul i32 %25, 2048, !dbg !19
  %.decomposed = sub i32 %.frozen, %26, !dbg !19
  %27 = shl i32 %16, 6, !dbg !20
  %28 = shl i32 %17, 6, !dbg !20
  %29 = or disjoint i32 %20, %15, !dbg !16
  %30 = or disjoint i32 %29, 1, !dbg !16
  %31 = or disjoint i32 %29, 2, !dbg !16
  %32 = or disjoint i32 %29, 3, !dbg !16
  %33 = icmp slt i32 %29, 64, !dbg !17
  %34 = sdiv i32 %29, 8, !dbg !21
  %35 = insertelement <4 x i32> poison, i32 %32, i64 0, !dbg !22
  %36 = insertelement <4 x i32> %35, i32 %31, i64 1, !dbg !22
  %37 = insertelement <4 x i32> %36, i32 %29, i64 2, !dbg !22
  %38 = insertelement <4 x i32> %37, i32 %30, i64 3, !dbg !22
  %39 = srem <4 x i32> %38, splat (i32 8), !dbg !22
  %40 = shufflevector <4 x i32> %39, <4 x i32> poison, <8 x i32> <i32 0, i32 1, i32 1, i32 2, i32 0, i32 1, i32 3, i32 2>, !dbg !22
  %41 = add i32 %29, %27, !dbg !23
  %42 = add i32 %29, %28, !dbg !23
  %43 = sext i32 %41 to i64, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !24
  %45 = sext i32 %42 to i64, !dbg !24
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !24
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %33) #3, !dbg !25
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !25
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !25
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !25
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !25
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %33) #3, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !25
  %57 = add i32 %29, -9, !dbg !26
  %58 = add i32 %29, -8, !dbg !26
  %59 = add i32 %29, -7, !dbg !26
  %60 = add i32 %29, -6, !dbg !26
  %61 = add i32 %57, %27, !dbg !27
  %62 = add i32 %27, %58, !dbg !27
  %63 = add i32 %27, %59, !dbg !27
  %64 = add i32 %27, %60, !dbg !27
  %65 = add i32 %57, %28, !dbg !27
  %66 = add i32 %28, %58, !dbg !27
  %67 = add i32 %28, %59, !dbg !27
  %68 = add i32 %28, %60, !dbg !27
  %69 = sext i32 %61 to i64, !dbg !28
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !28
  %71 = sext i32 %62 to i64, !dbg !28
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !28
  %73 = sext i32 %63 to i64, !dbg !28
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !28
  %75 = sext i32 %64 to i64, !dbg !28
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !28
  %77 = sext i32 %65 to i64, !dbg !28
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !28
  %79 = sext i32 %66 to i64, !dbg !28
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !28
  %81 = sext i32 %67 to i64, !dbg !28
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !28
  %83 = sext i32 %68 to i64, !dbg !28
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !28
  %85 = icmp ult i32 %58, 56, !dbg !29
  %86 = icmp sgt <8 x i32> %40, <i32 6, i32 6, i32 -1, i32 -1, i32 0, i32 0, i32 0, i32 0>, !dbg !30
  %87 = extractelement <8 x i1> %86, i64 7, !dbg !31
  %88 = and i1 %85, %87, !dbg !29
  %89 = extractelement <8 x i1> %86, i64 6, !dbg !31
  %90 = and i1 %89, %85, !dbg !29
  %91 = extractelement <8 x i1> %86, i64 5, !dbg !31
  %92 = and i1 %91, %85, !dbg !29
  %93 = extractelement <8 x i1> %86, i64 4, !dbg !31
  %94 = and i1 %93, %85, !dbg !29
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %88, i32 0, i1 %88) #3, !dbg !32
  %96 = bitcast i32 %95 to float, !dbg !32
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %90, i32 0, i1 %90) #3, !dbg !32
  %98 = bitcast i32 %97 to float, !dbg !32
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %92, i32 0, i1 %92) #3, !dbg !32
  %100 = bitcast i32 %99 to float, !dbg !32
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %94, i32 0, i1 %94) #3, !dbg !32
  %102 = bitcast i32 %101 to float, !dbg !32
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %88, i32 0, i1 %88) #3, !dbg !32
  %104 = bitcast i32 %103 to float, !dbg !32
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %90, i32 0, i1 %90) #3, !dbg !32
  %106 = bitcast i32 %105 to float, !dbg !32
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %92, i32 0, i1 %92) #3, !dbg !32
  %108 = bitcast i32 %107 to float, !dbg !32
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %94, i32 0, i1 %94) #3, !dbg !32
  %110 = bitcast i32 %109 to float, !dbg !32
  %111 = extractelement <8 x i1> %86, i64 3, !dbg !33
  %112 = and i1 %85, %111, !dbg !34
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %72, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112) #3, !dbg !35
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !35
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !35
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !35
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !35
  %118 = bitcast i32 %114 to float, !dbg !35
  %119 = bitcast i32 %115 to float, !dbg !35
  %120 = bitcast i32 %116 to float, !dbg !35
  %121 = bitcast i32 %117 to float, !dbg !35
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %80, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112) #3, !dbg !35
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !35
  %124 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !35
  %125 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !35
  %126 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !35
  %127 = bitcast i32 %123 to float, !dbg !35
  %128 = bitcast i32 %124 to float, !dbg !35
  %129 = bitcast i32 %125 to float, !dbg !35
  %130 = bitcast i32 %126 to float, !dbg !35
  %131 = fadd float %96, %118, !dbg !36
  %132 = fadd float %98, %119, !dbg !36
  %133 = fadd float %100, %120, !dbg !36
  %134 = fadd float %102, %121, !dbg !36
  %135 = fadd float %104, %127, !dbg !36
  %136 = fadd float %106, %128, !dbg !36
  %137 = fadd float %108, %129, !dbg !36
  %138 = fadd float %110, %130, !dbg !36
  %139 = extractelement <4 x i32> %39, i64 2, !dbg !37
  %140 = or disjoint i32 %139, 1, !dbg !38
  %141 = extractelement <4 x i32> %39, i64 1, !dbg !39
  %142 = or disjoint i32 %141, 1, !dbg !38
  %143 = icmp slt i32 %140, 8, !dbg !40
  %144 = icmp slt i32 %142, 8, !dbg !40
  %145 = and i1 %111, %143, !dbg !33
  %146 = extractelement <4 x i32> %39, i64 3, !dbg !37
  %147 = icmp ult i32 %146, 7, !dbg !33
  %148 = extractelement <8 x i1> %86, i64 2, !dbg !33
  %149 = and i1 %148, %144, !dbg !33
  %150 = extractelement <4 x i32> %39, i64 0, !dbg !39
  %151 = add nsw i32 %150, 1, !dbg !33
  %152 = icmp ult i32 %151, 8, !dbg !33
  %153 = add i32 %29, -5, !dbg !41
  %154 = add i32 %29, -4, !dbg !41
  %155 = add i32 %27, %153, !dbg !42
  %156 = add i32 %27, %154, !dbg !42
  %157 = add i32 %28, %153, !dbg !42
  %158 = add i32 %28, %154, !dbg !42
  %159 = sext i32 %155 to i64, !dbg !43
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !43
  %161 = sext i32 %156 to i64, !dbg !43
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !43
  %163 = sext i32 %157 to i64, !dbg !43
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !43
  %165 = sext i32 %158 to i64, !dbg !43
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !43
  %167 = and i1 %85, %145, !dbg !44
  %168 = and i1 %147, %85, !dbg !44
  %169 = and i1 %149, %85, !dbg !44
  %170 = and i1 %152, %85, !dbg !44
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %167, i32 0, i1 %167) #3, !dbg !45
  %172 = bitcast i32 %171 to float, !dbg !45
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %168, i32 0, i1 %168) #3, !dbg !45
  %174 = bitcast i32 %173 to float, !dbg !45
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %169, i32 0, i1 %169) #3, !dbg !45
  %176 = bitcast i32 %175 to float, !dbg !45
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %162, i1 %170, i32 0, i1 %170) #3, !dbg !45
  %178 = bitcast i32 %177 to float, !dbg !45
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %167, i32 0, i1 %167) #3, !dbg !45
  %180 = bitcast i32 %179 to float, !dbg !45
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %168, i32 0, i1 %168) #3, !dbg !45
  %182 = bitcast i32 %181 to float, !dbg !45
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %164, i1 %169, i32 0, i1 %169) #3, !dbg !45
  %184 = bitcast i32 %183 to float, !dbg !45
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %166, i1 %170, i32 0, i1 %170) #3, !dbg !45
  %186 = bitcast i32 %185 to float, !dbg !45
  %187 = fadd float %131, %172, !dbg !46
  %188 = fadd float %132, %174, !dbg !46
  %189 = fadd float %133, %176, !dbg !46
  %190 = fadd float %134, %178, !dbg !46
  %191 = fadd float %135, %180, !dbg !46
  %192 = fadd float %136, %182, !dbg !46
  %193 = fadd float %137, %184, !dbg !46
  %194 = fadd float %138, %186, !dbg !46
  %195 = add i32 %29, -1, !dbg !47
  %196 = add i32 %195, %27, !dbg !48
  %197 = add i32 %27, %30, !dbg !48
  %198 = add i32 %27, %31, !dbg !48
  %199 = add i32 %195, %28, !dbg !48
  %200 = add i32 %28, %30, !dbg !48
  %201 = add i32 %28, %31, !dbg !48
  %202 = sext i32 %196 to i64, !dbg !49
  %203 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !49
  %204 = sext i32 %197 to i64, !dbg !49
  %205 = getelementptr float, ptr addrspace(1) %0, i64 %204, !dbg !49
  %206 = sext i32 %198 to i64, !dbg !49
  %207 = getelementptr float, ptr addrspace(1) %0, i64 %206, !dbg !49
  %208 = sext i32 %199 to i64, !dbg !49
  %209 = getelementptr float, ptr addrspace(1) %0, i64 %208, !dbg !49
  %210 = sext i32 %200 to i64, !dbg !49
  %211 = getelementptr float, ptr addrspace(1) %0, i64 %210, !dbg !49
  %212 = sext i32 %201 to i64, !dbg !49
  %213 = getelementptr float, ptr addrspace(1) %0, i64 %212, !dbg !49
  %214 = add i32 %29, 7, !dbg !50
  %215 = icmp ult i32 %214, 71, !dbg !50
  %216 = and i1 %215, %87, !dbg !50
  %217 = and i1 %89, %215, !dbg !50
  %218 = and i1 %91, %215, !dbg !50
  %219 = and i1 %93, %215, !dbg !50
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %203, i1 %216, i32 0, i1 %216) #3, !dbg !51
  %221 = bitcast i32 %220 to float, !dbg !51
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %217, i32 0, i1 %217) #3, !dbg !51
  %223 = bitcast i32 %222 to float, !dbg !51
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %205, i1 %218, i32 0, i1 %218) #3, !dbg !51
  %225 = bitcast i32 %224 to float, !dbg !51
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %207, i1 %219, i32 0, i1 %219) #3, !dbg !51
  %227 = bitcast i32 %226 to float, !dbg !51
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %209, i1 %216, i32 0, i1 %216) #3, !dbg !51
  %229 = bitcast i32 %228 to float, !dbg !51
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %217, i32 0, i1 %217) #3, !dbg !51
  %231 = bitcast i32 %230 to float, !dbg !51
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %211, i1 %218, i32 0, i1 %218) #3, !dbg !51
  %233 = bitcast i32 %232 to float, !dbg !51
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %213, i1 %219, i32 0, i1 %219) #3, !dbg !51
  %235 = bitcast i32 %234 to float, !dbg !51
  %236 = fadd float %187, %221, !dbg !52
  %237 = fadd float %188, %223, !dbg !52
  %238 = fadd float %189, %225, !dbg !52
  %239 = fadd float %190, %227, !dbg !52
  %240 = fadd float %191, %229, !dbg !52
  %241 = fadd float %192, %231, !dbg !52
  %242 = fadd float %193, %233, !dbg !52
  %243 = fadd float %194, %235, !dbg !52
  %244 = and i1 %215, %111, !dbg !53
  %245 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 %244, i32 0, i1 %244, i32 0, i1 %244, i32 0, i1 %244, i32 0, i1 %244) #3, !dbg !54
  %246 = extractvalue { i32, i32, i32, i32 } %245, 0, !dbg !54
  %247 = extractvalue { i32, i32, i32, i32 } %245, 1, !dbg !54
  %248 = extractvalue { i32, i32, i32, i32 } %245, 2, !dbg !54
  %249 = extractvalue { i32, i32, i32, i32 } %245, 3, !dbg !54
  %250 = bitcast i32 %246 to float, !dbg !54
  %251 = bitcast i32 %247 to float, !dbg !54
  %252 = bitcast i32 %248 to float, !dbg !54
  %253 = bitcast i32 %249 to float, !dbg !54
  %254 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 %244, i32 0, i1 %244, i32 0, i1 %244, i32 0, i1 %244, i32 0, i1 %244) #3, !dbg !54
  %255 = extractvalue { i32, i32, i32, i32 } %254, 0, !dbg !54
  %256 = extractvalue { i32, i32, i32, i32 } %254, 1, !dbg !54
  %257 = extractvalue { i32, i32, i32, i32 } %254, 2, !dbg !54
  %258 = extractvalue { i32, i32, i32, i32 } %254, 3, !dbg !54
  %259 = bitcast i32 %255 to float, !dbg !54
  %260 = bitcast i32 %256 to float, !dbg !54
  %261 = bitcast i32 %257 to float, !dbg !54
  %262 = bitcast i32 %258 to float, !dbg !54
  %263 = fadd float %236, %250, !dbg !55
  %264 = fadd float %237, %251, !dbg !55
  %265 = fadd float %238, %252, !dbg !55
  %266 = fadd float %239, %253, !dbg !55
  %267 = fadd float %240, %259, !dbg !55
  %268 = fadd float %241, %260, !dbg !55
  %269 = fadd float %242, %261, !dbg !55
  %270 = fadd float %243, %262, !dbg !55
  %271 = add i32 %29, 4, !dbg !56
  %272 = add i32 %27, %32, !dbg !57
  %273 = add i32 %27, %271, !dbg !57
  %274 = add i32 %28, %32, !dbg !57
  %275 = add i32 %28, %271, !dbg !57
  %276 = sext i32 %272 to i64, !dbg !58
  %277 = getelementptr float, ptr addrspace(1) %0, i64 %276, !dbg !58
  %278 = sext i32 %273 to i64, !dbg !58
  %279 = getelementptr float, ptr addrspace(1) %0, i64 %278, !dbg !58
  %280 = sext i32 %274 to i64, !dbg !58
  %281 = getelementptr float, ptr addrspace(1) %0, i64 %280, !dbg !58
  %282 = sext i32 %275 to i64, !dbg !58
  %283 = getelementptr float, ptr addrspace(1) %0, i64 %282, !dbg !58
  %284 = and i1 %215, %145, !dbg !59
  %285 = and i1 %147, %215, !dbg !59
  %286 = and i1 %149, %215, !dbg !59
  %287 = and i1 %152, %215, !dbg !59
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %205, i1 %284, i32 0, i1 %284) #3, !dbg !60
  %289 = bitcast i32 %288 to float, !dbg !60
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %207, i1 %285, i32 0, i1 %285) #3, !dbg !60
  %291 = bitcast i32 %290 to float, !dbg !60
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %277, i1 %286, i32 0, i1 %286) #3, !dbg !60
  %293 = bitcast i32 %292 to float, !dbg !60
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %279, i1 %287, i32 0, i1 %287) #3, !dbg !60
  %295 = bitcast i32 %294 to float, !dbg !60
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %211, i1 %284, i32 0, i1 %284) #3, !dbg !60
  %297 = bitcast i32 %296 to float, !dbg !60
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %213, i1 %285, i32 0, i1 %285) #3, !dbg !60
  %299 = bitcast i32 %298 to float, !dbg !60
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %281, i1 %286, i32 0, i1 %286) #3, !dbg !60
  %301 = bitcast i32 %300 to float, !dbg !60
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %283, i1 %287, i32 0, i1 %287) #3, !dbg !60
  %303 = bitcast i32 %302 to float, !dbg !60
  %304 = fadd float %263, %289, !dbg !61
  %305 = fadd float %264, %291, !dbg !61
  %306 = fadd float %265, %293, !dbg !61
  %307 = fadd float %266, %295, !dbg !61
  %308 = fadd float %267, %297, !dbg !61
  %309 = fadd float %268, %299, !dbg !61
  %310 = fadd float %269, %301, !dbg !61
  %311 = fadd float %270, %303, !dbg !61
  %312 = add i32 %29, 8, !dbg !62
  %313 = add i32 %29, 9, !dbg !62
  %314 = add i32 %29, 10, !dbg !62
  %315 = add i32 %214, %27, !dbg !63
  %316 = add i32 %27, %312, !dbg !63
  %317 = add i32 %27, %313, !dbg !63
  %318 = add i32 %27, %314, !dbg !63
  %319 = add i32 %214, %28, !dbg !63
  %320 = add i32 %28, %312, !dbg !63
  %321 = add i32 %28, %313, !dbg !63
  %322 = add i32 %28, %314, !dbg !63
  %323 = sext i32 %315 to i64, !dbg !64
  %324 = getelementptr float, ptr addrspace(1) %0, i64 %323, !dbg !64
  %325 = sext i32 %316 to i64, !dbg !64
  %326 = getelementptr float, ptr addrspace(1) %0, i64 %325, !dbg !64
  %327 = sext i32 %317 to i64, !dbg !64
  %328 = getelementptr float, ptr addrspace(1) %0, i64 %327, !dbg !64
  %329 = sext i32 %318 to i64, !dbg !64
  %330 = getelementptr float, ptr addrspace(1) %0, i64 %329, !dbg !64
  %331 = sext i32 %319 to i64, !dbg !64
  %332 = getelementptr float, ptr addrspace(1) %0, i64 %331, !dbg !64
  %333 = sext i32 %320 to i64, !dbg !64
  %334 = getelementptr float, ptr addrspace(1) %0, i64 %333, !dbg !64
  %335 = sext i32 %321 to i64, !dbg !64
  %336 = getelementptr float, ptr addrspace(1) %0, i64 %335, !dbg !64
  %337 = sext i32 %322 to i64, !dbg !64
  %338 = getelementptr float, ptr addrspace(1) %0, i64 %337, !dbg !64
  %339 = add i32 %29, 15, !dbg !31
  %340 = icmp ult i32 %339, 71, !dbg !31
  %341 = and i1 %340, %87, !dbg !31
  %342 = and i1 %89, %340, !dbg !31
  %343 = and i1 %91, %340, !dbg !31
  %344 = and i1 %93, %340, !dbg !31
  %345 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %324, i1 %341, i32 0, i1 %341) #3, !dbg !65
  %346 = bitcast i32 %345 to float, !dbg !65
  %347 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %326, i1 %342, i32 0, i1 %342) #3, !dbg !65
  %348 = bitcast i32 %347 to float, !dbg !65
  %349 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %328, i1 %343, i32 0, i1 %343) #3, !dbg !65
  %350 = bitcast i32 %349 to float, !dbg !65
  %351 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %330, i1 %344, i32 0, i1 %344) #3, !dbg !65
  %352 = bitcast i32 %351 to float, !dbg !65
  %353 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %332, i1 %341, i32 0, i1 %341) #3, !dbg !65
  %354 = bitcast i32 %353 to float, !dbg !65
  %355 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %334, i1 %342, i32 0, i1 %342) #3, !dbg !65
  %356 = bitcast i32 %355 to float, !dbg !65
  %357 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %336, i1 %343, i32 0, i1 %343) #3, !dbg !65
  %358 = bitcast i32 %357 to float, !dbg !65
  %359 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %338, i1 %344, i32 0, i1 %344) #3, !dbg !65
  %360 = bitcast i32 %359 to float, !dbg !65
  %361 = fadd float %304, %346, !dbg !66
  %362 = fadd float %305, %348, !dbg !66
  %363 = fadd float %306, %350, !dbg !66
  %364 = fadd float %307, %352, !dbg !66
  %365 = fadd float %308, %354, !dbg !66
  %366 = fadd float %309, %356, !dbg !66
  %367 = fadd float %310, %358, !dbg !66
  %368 = fadd float %311, %360, !dbg !66
  %369 = and i1 %340, %111, !dbg !67
  %370 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %326, i1 %369, i32 0, i1 %369, i32 0, i1 %369, i32 0, i1 %369, i32 0, i1 %369) #3, !dbg !68
  %371 = extractvalue { i32, i32, i32, i32 } %370, 0, !dbg !68
  %372 = extractvalue { i32, i32, i32, i32 } %370, 1, !dbg !68
  %373 = extractvalue { i32, i32, i32, i32 } %370, 2, !dbg !68
  %374 = extractvalue { i32, i32, i32, i32 } %370, 3, !dbg !68
  %375 = bitcast i32 %371 to float, !dbg !68
  %376 = bitcast i32 %372 to float, !dbg !68
  %377 = bitcast i32 %373 to float, !dbg !68
  %378 = bitcast i32 %374 to float, !dbg !68
  %379 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %334, i1 %369, i32 0, i1 %369, i32 0, i1 %369, i32 0, i1 %369, i32 0, i1 %369) #3, !dbg !68
  %380 = extractvalue { i32, i32, i32, i32 } %379, 0, !dbg !68
  %381 = extractvalue { i32, i32, i32, i32 } %379, 1, !dbg !68
  %382 = extractvalue { i32, i32, i32, i32 } %379, 2, !dbg !68
  %383 = extractvalue { i32, i32, i32, i32 } %379, 3, !dbg !68
  %384 = bitcast i32 %380 to float, !dbg !68
  %385 = bitcast i32 %381 to float, !dbg !68
  %386 = bitcast i32 %382 to float, !dbg !68
  %387 = bitcast i32 %383 to float, !dbg !68
  %388 = fadd float %361, %375, !dbg !69
  %389 = fadd float %362, %376, !dbg !69
  %390 = fadd float %363, %377, !dbg !69
  %391 = fadd float %364, %378, !dbg !69
  %392 = fadd float %365, %384, !dbg !69
  %393 = fadd float %366, %385, !dbg !69
  %394 = fadd float %367, %386, !dbg !69
  %395 = fadd float %368, %387, !dbg !69
  %396 = add i32 %29, 11, !dbg !70
  %397 = add i32 %29, 12, !dbg !70
  %398 = add i32 %27, %396, !dbg !71
  %399 = add i32 %27, %397, !dbg !71
  %400 = add i32 %28, %396, !dbg !71
  %401 = add i32 %28, %397, !dbg !71
  %402 = sext i32 %398 to i64, !dbg !72
  %403 = getelementptr float, ptr addrspace(1) %0, i64 %402, !dbg !72
  %404 = sext i32 %399 to i64, !dbg !72
  %405 = getelementptr float, ptr addrspace(1) %0, i64 %404, !dbg !72
  %406 = sext i32 %400 to i64, !dbg !72
  %407 = getelementptr float, ptr addrspace(1) %0, i64 %406, !dbg !72
  %408 = sext i32 %401 to i64, !dbg !72
  %409 = getelementptr float, ptr addrspace(1) %0, i64 %408, !dbg !72
  %410 = and i1 %340, %145, !dbg !73
  %411 = and i1 %147, %340, !dbg !73
  %412 = and i1 %149, %340, !dbg !73
  %413 = and i1 %152, %340, !dbg !73
  %414 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %328, i1 %410, i32 0, i1 %410) #3, !dbg !74
  %415 = bitcast i32 %414 to float, !dbg !74
  %416 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %330, i1 %411, i32 0, i1 %411) #3, !dbg !74
  %417 = bitcast i32 %416 to float, !dbg !74
  %418 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %403, i1 %412, i32 0, i1 %412) #3, !dbg !74
  %419 = bitcast i32 %418 to float, !dbg !74
  %420 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %405, i1 %413, i32 0, i1 %413) #3, !dbg !74
  %421 = bitcast i32 %420 to float, !dbg !74
  %422 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %336, i1 %410, i32 0, i1 %410) #3, !dbg !74
  %423 = bitcast i32 %422 to float, !dbg !74
  %424 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %338, i1 %411, i32 0, i1 %411) #3, !dbg !74
  %425 = bitcast i32 %424 to float, !dbg !74
  %426 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %407, i1 %412, i32 0, i1 %412) #3, !dbg !74
  %427 = bitcast i32 %426 to float, !dbg !74
  %428 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %409, i1 %413, i32 0, i1 %413) #3, !dbg !74
  %429 = bitcast i32 %428 to float, !dbg !74
  %430 = fadd float %388, %415, !dbg !75
  %431 = fadd float %389, %417, !dbg !75
  %432 = fadd float %390, %419, !dbg !75
  %433 = fadd float %391, %421, !dbg !75
  %434 = fadd float %392, %423, !dbg !75
  %435 = fadd float %393, %425, !dbg !75
  %436 = fadd float %394, %427, !dbg !75
  %437 = fadd float %395, %429, !dbg !75
  %438 = or disjoint i32 %139, 2, !dbg !76
  %439 = or disjoint i32 %146, 2, !dbg !76
  %440 = add nsw i32 %141, 2, !dbg !76
  %441 = add nsw i32 %150, 2, !dbg !76
  %442 = extractelement <8 x i1> %86, i64 1, !dbg !77
  %443 = select i1 %442, i32 9, i32 0, !dbg !77
  %444 = extractelement <8 x i1> %86, i64 0, !dbg !77
  %445 = select i1 %444, i32 9, i32 0, !dbg !77
  %446 = icmp slt i32 %141, 7, !dbg !78
  %447 = icmp slt i32 %150, 7, !dbg !78
  %448 = select i1 %446, i32 %440, i32 0, !dbg !79
  %449 = select i1 %447, i32 %441, i32 0, !dbg !79
  %450 = tail call i32 @llvm.smin.i32(i32 %438, i32 9), !dbg !80
  %451 = tail call i32 @llvm.smin.i32(i32 %439, i32 9), !dbg !80
  %452 = add nsw i32 %443, %448, !dbg !80
  %453 = add nsw i32 %445, %449, !dbg !80
  %454 = add nsw i32 %34, 2, !dbg !81
  %455 = icmp sgt i32 %29, 55, !dbg !82
  %456 = select i1 %455, i32 9, i32 0, !dbg !83
  %457 = icmp slt i32 %29, 56, !dbg !84
  %458 = select i1 %457, i32 %454, i32 0, !dbg !85
  %459 = add nsw i32 %458, %456, !dbg !86
  %reass.add = sub nsw i32 %459, %34
  %reass.mul = mul i32 %reass.add, %450
  %reass.add51 = sub nsw i32 %34, %459
  %reass.mul52 = mul i32 %reass.add51, %139
  %460 = add nsw i32 %34, %139, !dbg !37
  %reass.sub = sub i32 %450, %460, !dbg !39
  %461 = add i32 %reass.sub, 1, !dbg !39
  %462 = add i32 %461, %459, !dbg !87
  %463 = add i32 %462, %reass.mul, !dbg !88
  %464 = add i32 %463, %reass.mul52, !dbg !89
  %reass.mul46 = mul i32 %reass.add, %451
  %reass.mul54 = mul i32 %reass.add51, %146
  %reass.sub59 = sub i32 %451, %146, !dbg !37
  %465 = or disjoint i32 %reass.sub59, 1, !dbg !37
  %466 = sub i32 %465, %34, !dbg !39
  %467 = add i32 %466, %459, !dbg !87
  %468 = add i32 %467, %reass.mul46, !dbg !88
  %469 = add i32 %468, %reass.mul54, !dbg !89
  %reass.mul48 = mul i32 %reass.add, %452
  %reass.mul56 = mul i32 %reass.add51, %141
  %470 = add nsw i32 %452, 1, !dbg !39
  %471 = add nsw i32 %141, %34, !dbg !39
  %472 = sub nsw i32 %470, %471, !dbg !39
  %473 = add nsw i32 %472, %459, !dbg !87
  %474 = add i32 %473, %reass.mul48, !dbg !88
  %475 = add i32 %474, %reass.mul56, !dbg !89
  %reass.mul50 = mul i32 %reass.add, %453
  %reass.mul58 = mul i32 %reass.add51, %150
  %476 = add nsw i32 %453, 1, !dbg !39
  %477 = add nsw i32 %150, %34, !dbg !39
  %478 = sub nsw i32 %476, %477, !dbg !39
  %479 = add nsw i32 %478, %459, !dbg !87
  %480 = add i32 %479, %reass.mul50, !dbg !88
  %481 = add i32 %480, %reass.mul58, !dbg !89
  %482 = sitofp i32 %464 to float, !dbg !90
  %483 = sitofp i32 %469 to float, !dbg !90
  %484 = sitofp i32 %475 to float, !dbg !90
  %485 = sitofp i32 %481 to float, !dbg !90
  %486 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %430, float %482) #3, !dbg !90
  %487 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %431, float %483) #3, !dbg !90
  %488 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %432, float %484) #3, !dbg !90
  %489 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %433, float %485) #3, !dbg !90
  %490 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %434, float %482) #3, !dbg !90
  %491 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %435, float %483) #3, !dbg !90
  %492 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %436, float %484) #3, !dbg !90
  %493 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %437, float %485) #3, !dbg !90
  %494 = shl i32 %21, 11, !dbg !91
  %495 = shl i32 %22, 11, !dbg !91
  %496 = shl i32 %25, 17, !dbg !92
  %497 = add i32 %496, %.decomposed, !dbg !93
  %498 = add i32 %497, %494, !dbg !94
  %499 = add i32 %497, %495, !dbg !94
  %500 = sext i32 %498 to i64, !dbg !95
  %501 = getelementptr float, ptr addrspace(1) %1, i64 %500, !dbg !95
  %502 = sext i32 %499 to i64, !dbg !95
  %503 = getelementptr float, ptr addrspace(1) %1, i64 %502, !dbg !95
  %504 = shl i32 %10, 7, !dbg !96
  %505 = and i32 %504, 896, !dbg !96
  %506 = or disjoint i32 %505, %12, !dbg !96
  %507 = and i32 %14, 508, !dbg !96
  %508 = lshr exact i32 %505, 1, !dbg !96
  %509 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %508, !dbg !96
  %510 = getelementptr float, ptr addrspace(3) %509, i32 %506, !dbg !96
  %511 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %510, <1 x i32> %511, i1 true) #3, !dbg !96
  %512 = or disjoint i32 %506, 32, !dbg !96
  %513 = lshr i32 %512, 3, !dbg !96
  %514 = and i32 %513, 116, !dbg !96
  %515 = getelementptr float, ptr addrspace(3) @global_smem, i32 %514, !dbg !96
  %516 = getelementptr float, ptr addrspace(3) %515, i32 %512, !dbg !96
  %517 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %516, <1 x i32> %517, i1 true) #3, !dbg !96
  %518 = or disjoint i32 %506, 64, !dbg !96
  %519 = lshr i32 %518, 3, !dbg !96
  %520 = and i32 %519, 120, !dbg !96
  %521 = getelementptr float, ptr addrspace(3) @global_smem, i32 %520, !dbg !96
  %522 = getelementptr float, ptr addrspace(3) %521, i32 %518, !dbg !96
  %523 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %522, <1 x i32> %523, i1 true) #3, !dbg !96
  %524 = or disjoint i32 %506, 96, !dbg !96
  %525 = lshr i32 %524, 3, !dbg !96
  %526 = and i32 %525, 124, !dbg !96
  %527 = getelementptr float, ptr addrspace(3) @global_smem, i32 %526, !dbg !96
  %528 = getelementptr float, ptr addrspace(3) %527, i32 %524, !dbg !96
  %529 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %528, <1 x i32> %529, i1 true) #3, !dbg !96
  %530 = or disjoint i32 %506, 16, !dbg !96
  %531 = getelementptr float, ptr addrspace(3) %509, i32 %530, !dbg !96
  %532 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %531, <1 x i32> %532, i1 true) #3, !dbg !96
  %533 = or disjoint i32 %506, 48, !dbg !96
  %534 = lshr i32 %533, 3, !dbg !96
  %535 = and i32 %534, 116, !dbg !96
  %536 = getelementptr float, ptr addrspace(3) @global_smem, i32 %535, !dbg !96
  %537 = getelementptr float, ptr addrspace(3) %536, i32 %533, !dbg !96
  %538 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %537, <1 x i32> %538, i1 true) #3, !dbg !96
  %539 = or disjoint i32 %506, 80, !dbg !96
  %540 = lshr i32 %539, 3, !dbg !96
  %541 = and i32 %540, 120, !dbg !96
  %542 = getelementptr float, ptr addrspace(3) @global_smem, i32 %541, !dbg !96
  %543 = getelementptr float, ptr addrspace(3) %542, i32 %539, !dbg !96
  %544 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %543, <1 x i32> %544, i1 true) #3, !dbg !96
  %545 = or disjoint i32 %506, 112, !dbg !96
  %546 = lshr i32 %545, 3, !dbg !96
  %547 = and i32 %546, 124, !dbg !96
  %548 = getelementptr float, ptr addrspace(3) @global_smem, i32 %547, !dbg !96
  %549 = getelementptr float, ptr addrspace(3) %548, i32 %545, !dbg !96
  %550 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %549, <1 x i32> %550, i1 true) #3, !dbg !96
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %551 = lshr i32 %14, 3, !dbg !96
  %552 = and i32 %551, 60, !dbg !96
  %553 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %552, !dbg !96
  %554 = getelementptr inbounds float, ptr addrspace(3) %553, i32 %507, !dbg !96
  %555 = or disjoint i32 %507, 512, !dbg !96
  %556 = lshr i32 %555, 3, !dbg !96
  %557 = and i32 %556, 124, !dbg !96
  %558 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %557, !dbg !96
  %559 = getelementptr inbounds float, ptr addrspace(3) %558, i32 %555, !dbg !96
  %560 = load <4 x i32>, ptr addrspace(3) %559, align 16, !dbg !96
  %.extract = load i32, ptr addrspace(3) %554, align 16, !dbg !96
  %561 = getelementptr inbounds i8, ptr addrspace(3) %554, i32 4, !dbg !96
  %.extract12 = load i32, ptr addrspace(3) %561, align 4, !dbg !96
  %562 = getelementptr inbounds i8, ptr addrspace(3) %554, i32 8, !dbg !96
  %.extract13 = load i32, ptr addrspace(3) %562, align 8, !dbg !96
  %563 = getelementptr inbounds i8, ptr addrspace(3) %554, i32 12, !dbg !96
  %.extract14 = load i32, ptr addrspace(3) %563, align 4, !dbg !96
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %501, i1 %23) #3, !dbg !96
  %.extract15 = extractelement <4 x i32> %560, i64 0, !dbg !96
  %.extract16 = extractelement <4 x i32> %560, i64 1, !dbg !96
  %.extract17 = extractelement <4 x i32> %560, i64 2, !dbg !96
  %.extract18 = extractelement <4 x i32> %560, i64 3, !dbg !96
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %503, i1 %24) #3, !dbg !96
  %564 = getelementptr float, ptr addrspace(1) %2, i64 %500, !dbg !97
  %565 = getelementptr float, ptr addrspace(1) %2, i64 %502, !dbg !97
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %564, i1 %23) #3, !dbg !98
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %565, i1 %24) #3, !dbg !98
  %566 = getelementptr float, ptr addrspace(1) %3, i64 %500, !dbg !99
  %567 = getelementptr float, ptr addrspace(1) %3, i64 %502, !dbg !99
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %566, i1 %23) #3, !dbg !100
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %567, i1 %24) #3, !dbg !100
  %568 = getelementptr float, ptr addrspace(1) %4, i64 %500, !dbg !101
  %569 = getelementptr float, ptr addrspace(1) %4, i64 %502, !dbg !101
  tail call void @llvm.nvvm.barrier0(), !dbg !102
  %570 = bitcast float %486 to <1 x i32>, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %510, <1 x i32> %570, i1 true) #3, !dbg !102
  %571 = bitcast float %487 to <1 x i32>, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %516, <1 x i32> %571, i1 true) #3, !dbg !102
  %572 = bitcast float %488 to <1 x i32>, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %522, <1 x i32> %572, i1 true) #3, !dbg !102
  %573 = bitcast float %489 to <1 x i32>, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %528, <1 x i32> %573, i1 true) #3, !dbg !102
  %574 = bitcast float %490 to <1 x i32>, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %531, <1 x i32> %574, i1 true) #3, !dbg !102
  %575 = bitcast float %491 to <1 x i32>, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %537, <1 x i32> %575, i1 true) #3, !dbg !102
  %576 = bitcast float %492 to <1 x i32>, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %543, <1 x i32> %576, i1 true) #3, !dbg !102
  %577 = bitcast float %493 to <1 x i32>, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %549, <1 x i32> %577, i1 true) #3, !dbg !102
  tail call void @llvm.nvvm.barrier0(), !dbg !102
  %578 = load <4 x i32>, ptr addrspace(3) %559, align 16, !dbg !102
  %.extract26 = load i32, ptr addrspace(3) %554, align 16, !dbg !102
  %.extract27 = load i32, ptr addrspace(3) %561, align 4, !dbg !102
  %.extract28 = load i32, ptr addrspace(3) %562, align 8, !dbg !102
  %.extract29 = load i32, ptr addrspace(3) %563, align 4, !dbg !102
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %568, i1 %23) #3, !dbg !102
  %.extract30 = extractelement <4 x i32> %578, i64 0, !dbg !102
  %.extract31 = extractelement <4 x i32> %578, i64 1, !dbg !102
  %.extract32 = extractelement <4 x i32> %578, i64 2, !dbg !102
  %.extract33 = extractelement <4 x i32> %578, i64 3, !dbg !102
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %569, i1 %24) #3, !dbg !102
  ret void, !dbg !103
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czqpaohorn336szp7eaqcmk6opgxjio5vqavqxu5udfeidarmx32.py", directory: "inductor_cache/zq")
!4 = !{ptr @triton_poi_fused_avg_pool2d_convolution_53, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_convolution_53, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_convolution_53", linkageName: "triton_poi_fused_avg_pool2d_convolution_53", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 38, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 43, scope: !7)
!26 = !DILocation(line: 46, column: 38, scope: !7)
!27 = !DILocation(line: 46, column: 43, scope: !7)
!28 = !DILocation(line: 46, column: 31, scope: !7)
!29 = !DILocation(line: 46, column: 59, scope: !7)
!30 = !DILocation(line: 87, column: 64, scope: !7)
!31 = !DILocation(line: 79, column: 56, scope: !7)
!32 = !DILocation(line: 46, column: 51, scope: !7)
!33 = !DILocation(line: 57, column: 20, scope: !7)
!34 = !DILocation(line: 52, column: 59, scope: !7)
!35 = !DILocation(line: 52, column: 51, scope: !7)
!36 = !DILocation(line: 53, column: 20, scope: !7)
!37 = !DILocation(line: 87, column: 48, scope: !7)
!38 = !DILocation(line: 54, column: 16, scope: !7)
!39 = !DILocation(line: 87, column: 163, scope: !7)
!40 = !DILocation(line: 56, column: 20, scope: !7)
!41 = !DILocation(line: 59, column: 38, scope: !7)
!42 = !DILocation(line: 59, column: 43, scope: !7)
!43 = !DILocation(line: 59, column: 31, scope: !7)
!44 = !DILocation(line: 59, column: 59, scope: !7)
!45 = !DILocation(line: 59, column: 51, scope: !7)
!46 = !DILocation(line: 60, column: 20, scope: !7)
!47 = !DILocation(line: 66, column: 38, scope: !7)
!48 = !DILocation(line: 66, column: 43, scope: !7)
!49 = !DILocation(line: 66, column: 31, scope: !7)
!50 = !DILocation(line: 66, column: 59, scope: !7)
!51 = !DILocation(line: 66, column: 51, scope: !7)
!52 = !DILocation(line: 67, column: 20, scope: !7)
!53 = !DILocation(line: 69, column: 52, scope: !7)
!54 = !DILocation(line: 69, column: 44, scope: !7)
!55 = !DILocation(line: 70, column: 20, scope: !7)
!56 = !DILocation(line: 72, column: 35, scope: !7)
!57 = !DILocation(line: 72, column: 40, scope: !7)
!58 = !DILocation(line: 72, column: 31, scope: !7)
!59 = !DILocation(line: 72, column: 56, scope: !7)
!60 = !DILocation(line: 72, column: 48, scope: !7)
!61 = !DILocation(line: 73, column: 20, scope: !7)
!62 = !DILocation(line: 79, column: 35, scope: !7)
!63 = !DILocation(line: 79, column: 40, scope: !7)
!64 = !DILocation(line: 79, column: 31, scope: !7)
!65 = !DILocation(line: 79, column: 48, scope: !7)
!66 = !DILocation(line: 80, column: 20, scope: !7)
!67 = !DILocation(line: 82, column: 56, scope: !7)
!68 = !DILocation(line: 82, column: 48, scope: !7)
!69 = !DILocation(line: 83, column: 20, scope: !7)
!70 = !DILocation(line: 85, column: 35, scope: !7)
!71 = !DILocation(line: 85, column: 40, scope: !7)
!72 = !DILocation(line: 85, column: 31, scope: !7)
!73 = !DILocation(line: 85, column: 56, scope: !7)
!74 = !DILocation(line: 85, column: 48, scope: !7)
!75 = !DILocation(line: 86, column: 20, scope: !7)
!76 = !DILocation(line: 87, column: 68, scope: !7)
!77 = !DILocation(line: 87, column: 56, scope: !7)
!78 = !DILocation(line: 87, column: 99, scope: !7)
!79 = !DILocation(line: 87, column: 87, scope: !7)
!80 = !DILocation(line: 87, column: 75, scope: !7)
!81 = !DILocation(line: 87, column: 124, scope: !7)
!82 = !DILocation(line: 87, column: 120, scope: !7)
!83 = !DILocation(line: 87, column: 112, scope: !7)
!84 = !DILocation(line: 87, column: 155, scope: !7)
!85 = !DILocation(line: 87, column: 143, scope: !7)
!86 = !DILocation(line: 87, column: 131, scope: !7)
!87 = !DILocation(line: 87, column: 231, scope: !7)
!88 = !DILocation(line: 87, column: 299, scope: !7)
!89 = !DILocation(line: 87, column: 357, scope: !7)
!90 = !DILocation(line: 88, column: 20, scope: !7)
!91 = !DILocation(line: 89, column: 35, scope: !7)
!92 = !DILocation(line: 89, column: 47, scope: !7)
!93 = !DILocation(line: 89, column: 30, scope: !7)
!94 = !DILocation(line: 89, column: 40, scope: !7)
!95 = !DILocation(line: 89, column: 25, scope: !7)
!96 = !DILocation(line: 89, column: 58, scope: !7)
!97 = !DILocation(line: 90, column: 25, scope: !7)
!98 = !DILocation(line: 90, column: 58, scope: !7)
!99 = !DILocation(line: 91, column: 25, scope: !7)
!100 = !DILocation(line: 91, column: 58, scope: !7)
!101 = !DILocation(line: 92, column: 25, scope: !7)
!102 = !DILocation(line: 92, column: 59, scope: !7)
!103 = !DILocation(line: 92, column: 4, scope: !7)
