#blocked = #triton_gpu.blocked<{sizePerThread = [2, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#loc = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_10(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":19:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<256x1xf32, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %c16384_i32 = arith.constant 16384 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<256> : tensor<256x1xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<256> : tensor<256x1xi32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<16> : tensor<256x1xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<16> : tensor<256x1xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<8192> : tensor<256x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<1.000000e+00> : tensor<1x1xf32, #blocked> loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.get_program_id x : i32 loc(#loc4)
    %3 = arith.muli %2, %c256_i32 : i32 loc(#loc5)
    %4 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %5 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %6 = tt.expand_dims %4 {axis = 1 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<256x1xi32, #blocked> loc(#loc6)
    %7 = tt.expand_dims %5 {axis = 1 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<256x1xi32, #blocked1> loc(#loc6)
    %8 = tt.splat %3 : i32 -> tensor<256x1xi32, #blocked> loc(#loc7)
    %9 = tt.splat %3 : i32 -> tensor<256x1xi32, #blocked1> loc(#loc7)
    %10 = arith.addi %8, %6 : tensor<256x1xi32, #blocked> loc(#loc7)
    %11 = arith.addi %9, %7 : tensor<256x1xi32, #blocked1> loc(#loc7)
    %12 = arith.cmpi slt, %10, %cst_0 : tensor<256x1xi32, #blocked> loc(#loc8)
    %13 = arith.cmpi slt, %11, %cst_1 : tensor<256x1xi32, #blocked1> loc(#loc8)
    %14 = arith.remsi %0, %c16_i32 : i32 loc(#loc9)
    %15 = arith.divsi %0, %c16_i32 : i32 loc(#loc10)
    %16 = arith.muli %10, %cst_2 : tensor<256x1xi32, #blocked> loc(#loc11)
    %17 = arith.muli %11, %cst_3 : tensor<256x1xi32, #blocked1> loc(#loc11)
    %18 = tt.splat %14 : i32 -> tensor<256x1xi32, #blocked> loc(#loc12)
    %19 = tt.splat %14 : i32 -> tensor<256x1xi32, #blocked1> loc(#loc12)
    %20 = arith.addi %18, %16 : tensor<256x1xi32, #blocked> loc(#loc12)
    %21 = arith.addi %19, %17 : tensor<256x1xi32, #blocked1> loc(#loc12)
    %22 = arith.muli %15, %c4096_i32 : i32 loc(#loc13)
    %23 = tt.splat %22 : i32 -> tensor<256x1xi32, #blocked> loc(#loc14)
    %24 = tt.splat %22 : i32 -> tensor<256x1xi32, #blocked1> loc(#loc14)
    %25 = arith.addi %20, %23 : tensor<256x1xi32, #blocked> loc(#loc14)
    %26 = arith.addi %21, %24 : tensor<256x1xi32, #blocked1> loc(#loc14)
    %27 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x1x!tt.ptr<f32>, #blocked> loc(#loc15)
    %28 = tt.addptr %27, %25 : tensor<256x1x!tt.ptr<f32>, #blocked>, tensor<256x1xi32, #blocked> loc(#loc15)
    %29 = tt.splat %1 : i1 -> tensor<256x1xi1, #blocked> loc(#loc16)
    %30 = tt.splat %1 : i1 -> tensor<256x1xi1, #blocked1> loc(#loc16)
    %31 = arith.andi %12, %29 : tensor<256x1xi1, #blocked> loc(#loc16)
    %32 = arith.andi %13, %30 : tensor<256x1xi1, #blocked1> loc(#loc16)
    %33 = tt.load %28, %31 evictionPolicy = evict_last : tensor<256x1x!tt.ptr<f32>, #blocked> loc(#loc17)
    %34 = tt.addptr %arg1, %14 : !tt.ptr<f32>, i32 loc(#loc18)
    %35 = tt.splat %34 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc19)
    %36 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc19)
    %37 = tt.load %35, %36 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc19)
    %38 = tt.addptr %arg2, %14 : !tt.ptr<f32>, i32 loc(#loc20)
    %39 = tt.splat %38 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc21)
    %40 = tt.load %39, %36 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc21)
    %41 = tt.addptr %arg3, %14 : !tt.ptr<f32>, i32 loc(#loc22)
    %42 = tt.splat %41 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc23)
    %43 = tt.load %42, %36 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc23)
    %44 = tt.addptr %arg4, %14 : !tt.ptr<f32>, i32 loc(#loc24)
    %45 = tt.splat %44 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc25)
    %46 = tt.load %45, %36 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc25)
    %47 = arith.addi %10, %cst_4 : tensor<256x1xi32, #blocked> loc(#loc26)
    %48 = arith.muli %14, %c256_i32 : i32 loc(#loc27)
    %49 = tt.splat %48 : i32 -> tensor<256x1xi32, #blocked> loc(#loc28)
    %50 = arith.addi %47, %49 : tensor<256x1xi32, #blocked> loc(#loc28)
    %51 = arith.muli %15, %c16384_i32 : i32 loc(#loc29)
    %52 = tt.splat %51 : i32 -> tensor<256x1xi32, #blocked> loc(#loc30)
    %53 = arith.addi %50, %52 : tensor<256x1xi32, #blocked> loc(#loc30)
    %54 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<256x1x!tt.ptr<f32>, #blocked> loc(#loc31)
    %55 = tt.addptr %54, %53 : tensor<256x1x!tt.ptr<f32>, #blocked>, tensor<256x1xi32, #blocked> loc(#loc31)
    %56 = tt.load %55, %31 evictionPolicy = evict_last : tensor<256x1x!tt.ptr<f32>, #blocked> loc(#loc32)
    %57 = tt.broadcast %37 : tensor<1x1xf32, #blocked> -> tensor<256x1xf32, #blocked> loc(#loc33)
    %58 = arith.subf %33, %57 : tensor<256x1xf32, #blocked> loc(#loc33)
    %59 = arith.addf %40, %cst_5 : tensor<1x1xf32, #blocked> loc(#loc34)
    %60 = tt.extern_elementwise %59 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc35)
    %61 = arith.divf %cst_6, %60 : tensor<1x1xf32, #blocked> loc(#loc36)
    %62 = tt.broadcast %61 : tensor<1x1xf32, #blocked> -> tensor<256x1xf32, #blocked> loc(#loc37)
    %63 = arith.mulf %58, %62 : tensor<256x1xf32, #blocked> loc(#loc37)
    %64 = tt.broadcast %43 : tensor<1x1xf32, #blocked> -> tensor<256x1xf32, #blocked> loc(#loc38)
    %65 = arith.mulf %63, %64 : tensor<256x1xf32, #blocked> loc(#loc38)
    %66 = tt.broadcast %46 : tensor<1x1xf32, #blocked> -> tensor<256x1xf32, #blocked> loc(#loc39)
    %67 = arith.addf %65, %66 : tensor<256x1xf32, #blocked> loc(#loc39)
    %68 = arith.cmpf ogt, %cst, %67 : tensor<256x1xf32, #blocked> loc(#loc51)
    %69 = arith.select %68, %cst, %67 : tensor<256x1xi1, #blocked>, tensor<256x1xf32, #blocked> loc(#loc52)
    %70 = arith.addf %56, %69 : tensor<256x1xf32, #blocked> loc(#loc43)
    %71 = arith.addi %10, %49 : tensor<256x1xi32, #blocked> loc(#loc44)
    %72 = arith.addi %71, %52 : tensor<256x1xi32, #blocked> loc(#loc45)
    %73 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<256x1x!tt.ptr<f32>, #blocked> loc(#loc46)
    %74 = tt.addptr %73, %72 : tensor<256x1x!tt.ptr<f32>, #blocked>, tensor<256x1xi32, #blocked> loc(#loc46)
    tt.store %74, %69, %31 : tensor<256x1x!tt.ptr<f32>, #blocked> loc(#loc47)
    %75 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<256x1x!tt.ptr<f32>, #blocked1> loc(#loc48)
    %76 = tt.addptr %75, %26 : tensor<256x1x!tt.ptr<f32>, #blocked1>, tensor<256x1xi32, #blocked1> loc(#loc48)
    %77 = triton_gpu.convert_layout %70 : tensor<256x1xf32, #blocked> -> tensor<256x1xf32, #blocked1> loc(#loc49)
    tt.store %76, %77, %32 : tensor<256x1x!tt.ptr<f32>, #blocked1> loc(#loc49)
    tt.return loc(#loc50)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":22:28)
#loc3 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":24:21)
#loc4 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":25:28)
#loc5 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":25:33)
#loc6 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":26:44)
#loc7 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":26:23)
#loc8 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":27:21)
#loc9 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":29:19)
#loc10 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":30:19)
#loc11 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":31:38)
#loc12 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":31:35)
#loc13 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":31:48)
#loc14 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":31:43)
#loc15 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":31:30)
#loc16 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":31:61)
#loc17 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":31:53)
#loc18 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":32:30)
#loc19 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":32:35)
#loc20 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":33:30)
#loc21 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":33:35)
#loc22 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":34:31)
#loc23 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":34:36)
#loc24 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":35:31)
#loc25 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":35:36)
#loc26 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":36:38)
#loc27 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":36:47)
#loc28 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":36:43)
#loc29 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":36:58)
#loc30 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":36:52)
#loc31 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":36:31)
#loc32 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":36:63)
#loc33 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":37:18)
#loc34 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":39:18)
#loc35 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":40:26)
#loc36 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":42:18)
#loc37 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":45:19)
#loc38 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":46:20)
#loc39 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":47:20)
#loc40 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc41 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":49:42)
#loc42 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc43 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":50:20)
#loc44 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":51:30)
#loc45 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":51:39)
#loc46 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":51:25)
#loc47 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":51:57)
#loc48 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":52:25)
#loc49 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":52:55)
#loc50 = loc("inductor_cache/ug/cugztyts3t4wxbav2sikrhs5jubbhenujb6x32kowbtkl5dnvt5q.py":52:4)
#loc51 = loc(callsite(#loc40 at #loc41))
#loc52 = loc(callsite(#loc42 at #loc41))
