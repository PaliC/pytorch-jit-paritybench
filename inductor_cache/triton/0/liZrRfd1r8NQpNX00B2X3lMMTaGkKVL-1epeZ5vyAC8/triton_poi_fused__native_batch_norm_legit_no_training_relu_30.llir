; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_30(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %14 = sdiv i32 %.frozen, 8, !dbg !14
  %15 = mul i32 %14, 8, !dbg !15
  %.decomposed = sub i32 %.frozen, %15, !dbg !15
  %16 = srem i32 %14, 8, !dbg !16
  %17 = sdiv i32 %13, 64, !dbg !17
  %18 = srem i32 %17, 256, !dbg !18
  %.lhs.trunc = trunc nsw i32 %16 to i8, !dbg !19
  %19 = sdiv i8 %.lhs.trunc, 2, !dbg !19
  %.sext = sext i8 %19 to i32, !dbg !19
  %20 = shl nsw i32 %.sext, 3, !dbg !20
  %21 = mul i8 %19, 2, !dbg !21
  %.decomposed21 = sub i8 %.lhs.trunc, %21, !dbg !21
  %.sext17 = sext i8 %.decomposed21 to i32, !dbg !21
  %22 = shl nsw i32 %.sext17, 5, !dbg !22
  %23 = shl nsw i32 %17, 6, !dbg !23
  %24 = add i32 %23, %.decomposed, !dbg !24
  %25 = add i32 %24, %20, !dbg !25
  %26 = add i32 %25, %22, !dbg !26
  %27 = sext i32 %26 to i64, !dbg !27
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !27
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !28
  %30 = sext i32 %18 to i64, !dbg !29
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !29
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !30
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !30
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !30
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !30
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !31
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !32
  %38 = bitcast i32 %37 to float, !dbg !32
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !32
  %40 = bitcast i32 %39 to float, !dbg !32
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !32
  %42 = bitcast i32 %41 to float, !dbg !32
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !32
  %44 = bitcast i32 %43 to float, !dbg !32
  %45 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !33
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !34
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !34
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !34
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !34
  %50 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !35
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !36
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !36
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !36
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !36
  %55 = fadd float %38, 0x3EE4F8B580000000, !dbg !37
  %56 = fadd float %40, 0x3EE4F8B580000000, !dbg !37
  %57 = fadd float %42, 0x3EE4F8B580000000, !dbg !37
  %58 = fadd float %44, 0x3EE4F8B580000000, !dbg !37
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i = icmp eq i32 %59, 0, !dbg !38
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i = icmp eq i32 %60, 0, !dbg !38
  br i1 %.not.i, label %66, label %61, !dbg !38

61:                                               ; preds = %7
  br i1 %.not1.i, label %64, label %62, !dbg !38

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

66:                                               ; preds = %7
  br i1 %.not1.i, label %69, label %67, !dbg !38

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %62, %64, %67, %69
  %.0.i = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !38
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i1 = icmp eq i32 %71, 0, !dbg !38
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i4 = icmp eq i32 %72, 0, !dbg !38
  br i1 %.not.i1, label %78, label %73, !dbg !38

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %76, label %74, !dbg !38

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %81, label %79, !dbg !38

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

__nv_sqrtf.exit5:                                 ; preds = %74, %76, %79, %81
  %.0.i3 = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !38
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i6 = icmp eq i32 %83, 0, !dbg !38
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i9 = icmp eq i32 %84, 0, !dbg !38
  br i1 %.not.i6, label %90, label %85, !dbg !38

85:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %88, label %86, !dbg !38

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #3, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #3, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

90:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %93, label %91, !dbg !38

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #3, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #3, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

__nv_sqrtf.exit10:                                ; preds = %86, %88, %91, %93
  %.0.i8 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !38
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i11 = icmp eq i32 %95, 0, !dbg !38
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i14 = icmp eq i32 %96, 0, !dbg !38
  br i1 %.not.i11, label %102, label %97, !dbg !38

97:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %100, label %98, !dbg !38

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

102:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %105, label %103, !dbg !38

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

__nv_sqrtf.exit15:                                ; preds = %98, %100, %103, %105
  %.0.i13 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !38
  %107 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !28
  %108 = insertelement <4 x i32> poison, i32 %35, i64 0, !dbg !30
  %109 = insertelement <4 x i32> %108, i32 %34, i64 1, !dbg !30
  %110 = insertelement <4 x i32> %109, i32 %33, i64 2, !dbg !30
  %111 = insertelement <4 x i32> %110, i32 %32, i64 3, !dbg !30
  %112 = bitcast <4 x i32> %111 to <4 x float>, !dbg !30
  %113 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !28
  %114 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !28
  %115 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !28
  %116 = insertelement <4 x i32> poison, i32 %54, i64 0, !dbg !36
  %117 = insertelement <4 x i32> %116, i32 %53, i64 1, !dbg !36
  %118 = insertelement <4 x i32> %117, i32 %52, i64 2, !dbg !36
  %119 = insertelement <4 x i32> %118, i32 %51, i64 3, !dbg !36
  %120 = bitcast <4 x i32> %119 to <4 x float>, !dbg !36
  %121 = insertelement <4 x i32> poison, i32 %49, i64 0, !dbg !34
  %122 = insertelement <4 x i32> %121, i32 %48, i64 1, !dbg !34
  %123 = insertelement <4 x i32> %122, i32 %47, i64 2, !dbg !34
  %124 = insertelement <4 x i32> %123, i32 %46, i64 3, !dbg !34
  %125 = bitcast <4 x i32> %124 to <4 x float>, !dbg !34
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !39
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !39
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !39
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !39
  %130 = insertelement <4 x i32> poison, i32 %107, i64 0, !dbg !28
  %131 = insertelement <4 x i32> %130, i32 %113, i64 1, !dbg !28
  %132 = insertelement <4 x i32> %131, i32 %114, i64 2, !dbg !28
  %133 = insertelement <4 x i32> %132, i32 %115, i64 3, !dbg !28
  %134 = bitcast <4 x i32> %133 to <4 x float>, !dbg !28
  %135 = fsub <4 x float> %134, %112, !dbg !40
  %136 = insertelement <4 x float> poison, float %129, i64 0, !dbg !41
  %137 = insertelement <4 x float> %136, float %128, i64 1, !dbg !41
  %138 = insertelement <4 x float> %137, float %127, i64 2, !dbg !41
  %139 = insertelement <4 x float> %138, float %126, i64 3, !dbg !41
  %140 = fmul <4 x float> %135, %139, !dbg !41
  %141 = fmul <4 x float> %140, %125, !dbg !42
  %142 = fadd <4 x float> %141, %120, !dbg !43
  %143 = fcmp olt <4 x float> %142, zeroinitializer, !dbg !44
  %144 = extractelement <4 x i1> %143, i64 3, !dbg !48
  %145 = extractelement <4 x i1> %143, i64 2, !dbg !48
  %146 = extractelement <4 x i1> %143, i64 1, !dbg !48
  %147 = extractelement <4 x i1> %143, i64 0, !dbg !48
  %148 = sext i32 %13 to i64, !dbg !49
  %149 = getelementptr float, ptr addrspace(1) %5, i64 %148, !dbg !49
  %bc = bitcast <4 x float> %142 to <4 x i32>, !dbg !50
  %150 = extractelement <4 x i32> %bc, i64 3, !dbg !50
  %151 = select i1 %144, i32 0, i32 %150, !dbg !48
  %bc18 = bitcast <4 x float> %142 to <4 x i32>, !dbg !50
  %152 = extractelement <4 x i32> %bc18, i64 2, !dbg !50
  %153 = select i1 %145, i32 0, i32 %152, !dbg !48
  %bc19 = bitcast <4 x float> %142 to <4 x i32>, !dbg !50
  %154 = extractelement <4 x i32> %bc19, i64 1, !dbg !50
  %155 = select i1 %146, i32 0, i32 %154, !dbg !48
  %bc20 = bitcast <4 x float> %142 to <4 x i32>, !dbg !50
  %156 = extractelement <4 x i32> %bc20, i64 0, !dbg !50
  %157 = select i1 %147, i32 0, i32 %156, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %151, i32 %153, i32 %155, i32 %157, ptr addrspace(1) %149, i1 true) #3, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csfeszoefdk22cgfpfmf75tsoy6djet3dylytq7ugkbomlbieuf3.py", directory: "inductor_cache/sf")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_30, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_30, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_30", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 26, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 44, scope: !7)
!20 = !DILocation(line: 29, column: 38, scope: !7)
!21 = !DILocation(line: 29, column: 59, scope: !7)
!22 = !DILocation(line: 29, column: 54, scope: !7)
!23 = !DILocation(line: 29, column: 68, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 29, column: 49, scope: !7)
!26 = !DILocation(line: 29, column: 65, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 73, scope: !7)
!29 = !DILocation(line: 30, column: 30, scope: !7)
!30 = !DILocation(line: 30, column: 35, scope: !7)
!31 = !DILocation(line: 31, column: 30, scope: !7)
!32 = !DILocation(line: 31, column: 35, scope: !7)
!33 = !DILocation(line: 32, column: 31, scope: !7)
!34 = !DILocation(line: 32, column: 36, scope: !7)
!35 = !DILocation(line: 33, column: 31, scope: !7)
!36 = !DILocation(line: 33, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 26, scope: !7)
!39 = !DILocation(line: 39, column: 18, scope: !7)
!40 = !DILocation(line: 34, column: 18, scope: !7)
!41 = !DILocation(line: 42, column: 19, scope: !7)
!42 = !DILocation(line: 43, column: 20, scope: !7)
!43 = !DILocation(line: 44, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 46, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 47, column: 25, scope: !7)
!50 = !DILocation(line: 47, column: 37, scope: !7)
!51 = !DILocation(line: 47, column: 4, scope: !7)
