; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_view_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %11 = and i32 %9, 252, !dbg !12
  %12 = lshr i32 %8, 2, !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = or disjoint i32 %13, 64, !dbg !12
  %15 = or disjoint i32 %13, 128, !dbg !12
  %16 = or disjoint i32 %13, 192, !dbg !12
  %17 = or disjoint i32 %7, %11, !dbg !13
  %18 = or disjoint i32 %7, %13, !dbg !13
  %19 = or disjoint i32 %7, %14, !dbg !13
  %20 = or disjoint i32 %7, %15, !dbg !13
  %21 = or disjoint i32 %7, %16, !dbg !13
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %23 = shl i32 %22, 4, !dbg !15
  %24 = lshr i32 %8, 6, !dbg !16
  %25 = and i32 %24, 3, !dbg !16
  %26 = or disjoint i32 %23, %25, !dbg !17
  %27 = or disjoint i32 %26, 4, !dbg !17
  %28 = or disjoint i32 %26, 8, !dbg !17
  %29 = or disjoint i32 %26, 12, !dbg !17
  %30 = or disjoint i32 %23, %10, !dbg !17
  %31 = icmp slt i32 %26, 12, !dbg !18
  %32 = icmp slt i32 %27, 12, !dbg !18
  %33 = icmp slt i32 %28, 12, !dbg !18
  %34 = icmp slt i32 %23, 0, !dbg !18
  %35 = icmp slt i32 %30, 12, !dbg !18
  %.frozen = freeze i32 %17, !dbg !19
  %36 = sdiv i32 %.frozen, 4096, !dbg !19
  %37 = mul i32 %36, 4096, !dbg !20
  %.decomposed = sub i32 %.frozen, %37, !dbg !20
  %38 = shl i32 %26, 12, !dbg !21
  %39 = shl i32 %27, 12, !dbg !21
  %40 = shl i32 %28, 12, !dbg !21
  %41 = shl i32 %29, 12, !dbg !21
  %42 = mul i32 %36, 49152, !dbg !22
  %43 = add i32 %42, %.decomposed, !dbg !23
  %44 = add i32 %43, %38, !dbg !24
  %45 = add i32 %43, %39, !dbg !24
  %46 = add i32 %43, %40, !dbg !24
  %47 = add i32 %43, %41, !dbg !24
  %48 = sext i32 %44 to i64, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !25
  %50 = sext i32 %45 to i64, !dbg !25
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !25
  %52 = sext i32 %46 to i64, !dbg !25
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !25
  %54 = sext i32 %47 to i64, !dbg !25
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !25
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %31) #2, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !26
  %61 = bitcast i32 %57 to float, !dbg !26
  %62 = bitcast i32 %58 to float, !dbg !26
  %63 = bitcast i32 %59 to float, !dbg !26
  %64 = bitcast i32 %60 to float, !dbg !26
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %32) #2, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !26
  %70 = bitcast i32 %66 to float, !dbg !26
  %71 = bitcast i32 %67 to float, !dbg !26
  %72 = bitcast i32 %68 to float, !dbg !26
  %73 = bitcast i32 %69 to float, !dbg !26
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %33) #2, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !26
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !26
  %79 = bitcast i32 %75 to float, !dbg !26
  %80 = bitcast i32 %76 to float, !dbg !26
  %81 = bitcast i32 %77 to float, !dbg !26
  %82 = bitcast i32 %78 to float, !dbg !26
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %34) #2, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !26
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !26
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !26
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !26
  %88 = bitcast i32 %84 to float, !dbg !26
  %89 = bitcast i32 %85 to float, !dbg !26
  %90 = bitcast i32 %86 to float, !dbg !26
  %91 = bitcast i32 %87 to float, !dbg !26
  %92 = sext i32 %26 to i64, !dbg !27
  %93 = getelementptr float, ptr addrspace(1) %2, i64 %92, !dbg !27
  %94 = sext i32 %27 to i64, !dbg !27
  %95 = getelementptr float, ptr addrspace(1) %2, i64 %94, !dbg !27
  %96 = sext i32 %28 to i64, !dbg !27
  %97 = getelementptr float, ptr addrspace(1) %2, i64 %96, !dbg !27
  %98 = sext i32 %29 to i64, !dbg !27
  %99 = getelementptr float, ptr addrspace(1) %2, i64 %98, !dbg !27
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %31) #2, !dbg !28
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %31) #2, !dbg !28
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %31) #2, !dbg !28
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %31) #2, !dbg !28
  %104 = bitcast i32 %103 to float, !dbg !28
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %32) #2, !dbg !28
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %32) #2, !dbg !28
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %32) #2, !dbg !28
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %32) #2, !dbg !28
  %109 = bitcast i32 %108 to float, !dbg !28
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %33) #2, !dbg !28
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %33) #2, !dbg !28
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %33) #2, !dbg !28
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %33) #2, !dbg !28
  %114 = bitcast i32 %113 to float, !dbg !28
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %34) #2, !dbg !28
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %34) #2, !dbg !28
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %34) #2, !dbg !28
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %34) #2, !dbg !28
  %119 = bitcast i32 %118 to float, !dbg !28
  %120 = fadd float %61, %104, !dbg !29
  %121 = fadd float %62, %104, !dbg !29
  %122 = fadd float %63, %104, !dbg !29
  %123 = fadd float %64, %104, !dbg !29
  %124 = fadd float %70, %109, !dbg !29
  %125 = fadd float %71, %109, !dbg !29
  %126 = fadd float %72, %109, !dbg !29
  %127 = fadd float %73, %109, !dbg !29
  %128 = fadd float %79, %114, !dbg !29
  %129 = fadd float %80, %114, !dbg !29
  %130 = fadd float %81, %114, !dbg !29
  %131 = fadd float %82, %114, !dbg !29
  %132 = fadd float %88, %119, !dbg !29
  %133 = fadd float %89, %119, !dbg !29
  %134 = fadd float %90, %119, !dbg !29
  %135 = fadd float %91, %119, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %136 = mul i32 %18, 12, !dbg !31
  %137 = mul i32 %19, 12, !dbg !31
  %138 = mul i32 %20, 12, !dbg !31
  %139 = mul i32 %21, 12, !dbg !31
  %140 = add i32 %30, %136, !dbg !32
  %141 = add i32 %30, %137, !dbg !32
  %142 = add i32 %30, %138, !dbg !32
  %143 = add i32 %30, %139, !dbg !32
  %144 = sext i32 %140 to i64, !dbg !33
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %144, !dbg !33
  %146 = sext i32 %141 to i64, !dbg !33
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !33
  %148 = sext i32 %142 to i64, !dbg !33
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !33
  %150 = sext i32 %143 to i64, !dbg !33
  %151 = getelementptr float, ptr addrspace(1) %0, i64 %150, !dbg !33
  %152 = shl i32 %8, 6, !dbg !34
  %153 = and i32 %152, 4032, !dbg !34
  %154 = or disjoint i32 %153, %25, !dbg !34
  %155 = and i32 %9, 1020, !dbg !34
  %156 = lshr exact i32 %153, 2, !dbg !34
  %157 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %156, !dbg !34
  %158 = getelementptr float, ptr addrspace(3) %157, i32 %154, !dbg !34
  %159 = bitcast float %120 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 true) #2, !dbg !34
  %160 = or disjoint i32 %154, 16, !dbg !34
  %161 = lshr i32 %160, 4, !dbg !34
  %162 = getelementptr float, ptr addrspace(3) @global_smem, i32 %161, !dbg !34
  %163 = getelementptr float, ptr addrspace(3) %162, i32 %160, !dbg !34
  %164 = bitcast float %121 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %164, i1 true) #2, !dbg !34
  %165 = or disjoint i32 %154, 32, !dbg !34
  %166 = lshr i32 %165, 4, !dbg !34
  %167 = getelementptr float, ptr addrspace(3) @global_smem, i32 %166, !dbg !34
  %168 = getelementptr float, ptr addrspace(3) %167, i32 %165, !dbg !34
  %169 = bitcast float %122 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, <1 x i32> %169, i1 true) #2, !dbg !34
  %170 = or disjoint i32 %154, 48, !dbg !34
  %171 = lshr i32 %170, 4, !dbg !34
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i32 %171, !dbg !34
  %173 = getelementptr float, ptr addrspace(3) %172, i32 %170, !dbg !34
  %174 = bitcast float %123 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 true) #2, !dbg !34
  %175 = or disjoint i32 %154, 4, !dbg !34
  %176 = getelementptr float, ptr addrspace(3) %157, i32 %175, !dbg !34
  %177 = bitcast float %124 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %177, i1 true) #2, !dbg !34
  %178 = or disjoint i32 %154, 20, !dbg !34
  %179 = lshr i32 %178, 4, !dbg !34
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i32 %179, !dbg !34
  %181 = getelementptr float, ptr addrspace(3) %180, i32 %178, !dbg !34
  %182 = bitcast float %125 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %182, i1 true) #2, !dbg !34
  %183 = or disjoint i32 %154, 36, !dbg !34
  %184 = lshr i32 %183, 4, !dbg !34
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i32 %184, !dbg !34
  %186 = getelementptr float, ptr addrspace(3) %185, i32 %183, !dbg !34
  %187 = bitcast float %126 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %187, i1 true) #2, !dbg !34
  %188 = or disjoint i32 %154, 52, !dbg !34
  %189 = lshr i32 %188, 4, !dbg !34
  %190 = getelementptr float, ptr addrspace(3) @global_smem, i32 %189, !dbg !34
  %191 = getelementptr float, ptr addrspace(3) %190, i32 %188, !dbg !34
  %192 = bitcast float %127 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %192, i1 true) #2, !dbg !34
  %193 = or disjoint i32 %154, 8, !dbg !34
  %194 = getelementptr float, ptr addrspace(3) %157, i32 %193, !dbg !34
  %195 = bitcast float %128 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %195, i1 true) #2, !dbg !34
  %196 = or disjoint i32 %154, 24, !dbg !34
  %197 = lshr i32 %196, 4, !dbg !34
  %198 = getelementptr float, ptr addrspace(3) @global_smem, i32 %197, !dbg !34
  %199 = getelementptr float, ptr addrspace(3) %198, i32 %196, !dbg !34
  %200 = bitcast float %129 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %200, i1 true) #2, !dbg !34
  %201 = or disjoint i32 %154, 40, !dbg !34
  %202 = lshr i32 %201, 4, !dbg !34
  %203 = getelementptr float, ptr addrspace(3) @global_smem, i32 %202, !dbg !34
  %204 = getelementptr float, ptr addrspace(3) %203, i32 %201, !dbg !34
  %205 = bitcast float %130 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %205, i1 true) #2, !dbg !34
  %206 = or disjoint i32 %154, 56, !dbg !34
  %207 = lshr i32 %206, 4, !dbg !34
  %208 = getelementptr float, ptr addrspace(3) @global_smem, i32 %207, !dbg !34
  %209 = getelementptr float, ptr addrspace(3) %208, i32 %206, !dbg !34
  %210 = bitcast float %131 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %209, <1 x i32> %210, i1 true) #2, !dbg !34
  %211 = or disjoint i32 %154, 12, !dbg !34
  %212 = getelementptr float, ptr addrspace(3) %157, i32 %211, !dbg !34
  %213 = bitcast float %132 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %212, <1 x i32> %213, i1 true) #2, !dbg !34
  %214 = or disjoint i32 %154, 28, !dbg !34
  %215 = lshr i32 %214, 4, !dbg !34
  %216 = getelementptr float, ptr addrspace(3) @global_smem, i32 %215, !dbg !34
  %217 = getelementptr float, ptr addrspace(3) %216, i32 %214, !dbg !34
  %218 = bitcast float %133 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %218, i1 true) #2, !dbg !34
  %219 = or disjoint i32 %154, 44, !dbg !34
  %220 = lshr i32 %219, 4, !dbg !34
  %221 = getelementptr float, ptr addrspace(3) @global_smem, i32 %220, !dbg !34
  %222 = getelementptr float, ptr addrspace(3) %221, i32 %219, !dbg !34
  %223 = bitcast float %134 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %223, i1 true) #2, !dbg !34
  %224 = or disjoint i32 %154, 60, !dbg !34
  %225 = lshr i32 %224, 4, !dbg !34
  %226 = getelementptr float, ptr addrspace(3) @global_smem, i32 %225, !dbg !34
  %227 = getelementptr float, ptr addrspace(3) %226, i32 %224, !dbg !34
  %228 = bitcast float %135 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, <1 x i32> %228, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %229 = lshr i32 %155, 4, !dbg !34
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %229, !dbg !34
  %231 = getelementptr inbounds float, ptr addrspace(3) %230, i32 %155, !dbg !34
  %232 = load i32, ptr addrspace(3) %231, align 4, !dbg !34
  %233 = or disjoint i32 %155, 1, !dbg !34
  %234 = getelementptr inbounds float, ptr addrspace(3) %230, i32 %233, !dbg !34
  %235 = load i32, ptr addrspace(3) %234, align 4, !dbg !34
  %236 = or disjoint i32 %155, 2, !dbg !34
  %237 = getelementptr inbounds float, ptr addrspace(3) %230, i32 %236, !dbg !34
  %238 = load i32, ptr addrspace(3) %237, align 4, !dbg !34
  %239 = or disjoint i32 %155, 3, !dbg !34
  %240 = getelementptr inbounds float, ptr addrspace(3) %230, i32 %239, !dbg !34
  %241 = load i32, ptr addrspace(3) %240, align 4, !dbg !34
  %242 = or disjoint i32 %155, 1024, !dbg !34
  %243 = lshr i32 %242, 4, !dbg !34
  %244 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %243, !dbg !34
  %245 = getelementptr inbounds float, ptr addrspace(3) %244, i32 %242, !dbg !34
  %246 = load i32, ptr addrspace(3) %245, align 4, !dbg !34
  %247 = or disjoint i32 %155, 1025, !dbg !34
  %248 = lshr i32 %247, 4, !dbg !34
  %249 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %248, !dbg !34
  %250 = getelementptr inbounds float, ptr addrspace(3) %249, i32 %247, !dbg !34
  %251 = load i32, ptr addrspace(3) %250, align 4, !dbg !34
  %252 = or disjoint i32 %155, 1026, !dbg !34
  %253 = lshr i32 %252, 4, !dbg !34
  %254 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %253, !dbg !34
  %255 = getelementptr inbounds float, ptr addrspace(3) %254, i32 %252, !dbg !34
  %256 = load i32, ptr addrspace(3) %255, align 4, !dbg !34
  %257 = or disjoint i32 %155, 1027, !dbg !34
  %258 = lshr i32 %257, 4, !dbg !34
  %259 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %258, !dbg !34
  %260 = getelementptr inbounds float, ptr addrspace(3) %259, i32 %257, !dbg !34
  %261 = load i32, ptr addrspace(3) %260, align 4, !dbg !34
  %262 = or disjoint i32 %155, 2048, !dbg !34
  %263 = lshr i32 %262, 4, !dbg !34
  %264 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %263, !dbg !34
  %265 = getelementptr inbounds float, ptr addrspace(3) %264, i32 %262, !dbg !34
  %266 = load i32, ptr addrspace(3) %265, align 4, !dbg !34
  %267 = or disjoint i32 %155, 2049, !dbg !34
  %268 = lshr i32 %267, 4, !dbg !34
  %269 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %268, !dbg !34
  %270 = getelementptr inbounds float, ptr addrspace(3) %269, i32 %267, !dbg !34
  %271 = load i32, ptr addrspace(3) %270, align 4, !dbg !34
  %272 = or disjoint i32 %155, 2050, !dbg !34
  %273 = lshr i32 %272, 4, !dbg !34
  %274 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %273, !dbg !34
  %275 = getelementptr inbounds float, ptr addrspace(3) %274, i32 %272, !dbg !34
  %276 = load i32, ptr addrspace(3) %275, align 4, !dbg !34
  %277 = or disjoint i32 %155, 2051, !dbg !34
  %278 = lshr i32 %277, 4, !dbg !34
  %279 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %278, !dbg !34
  %280 = getelementptr inbounds float, ptr addrspace(3) %279, i32 %277, !dbg !34
  %281 = load i32, ptr addrspace(3) %280, align 4, !dbg !34
  %282 = or disjoint i32 %155, 3072, !dbg !34
  %283 = lshr i32 %282, 4, !dbg !34
  %284 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %283, !dbg !34
  %285 = getelementptr inbounds float, ptr addrspace(3) %284, i32 %282, !dbg !34
  %286 = load i32, ptr addrspace(3) %285, align 4, !dbg !34
  %287 = or disjoint i32 %155, 3073, !dbg !34
  %288 = lshr i32 %287, 4, !dbg !34
  %289 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %288, !dbg !34
  %290 = getelementptr inbounds float, ptr addrspace(3) %289, i32 %287, !dbg !34
  %291 = load i32, ptr addrspace(3) %290, align 4, !dbg !34
  %292 = or disjoint i32 %155, 3074, !dbg !34
  %293 = lshr i32 %292, 4, !dbg !34
  %294 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %293, !dbg !34
  %295 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %292, !dbg !34
  %296 = load i32, ptr addrspace(3) %295, align 4, !dbg !34
  %297 = or disjoint i32 %155, 3075, !dbg !34
  %298 = lshr i32 %297, 4, !dbg !34
  %299 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %298, !dbg !34
  %300 = getelementptr inbounds float, ptr addrspace(3) %299, i32 %297, !dbg !34
  %301 = load i32, ptr addrspace(3) %300, align 4, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %232, i32 %235, i32 %238, i32 %241, ptr addrspace(1) %145, i1 %35) #2, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %246, i32 %251, i32 %256, i32 %261, ptr addrspace(1) %147, i1 %35) #2, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %266, i32 %271, i32 %276, i32 %281, ptr addrspace(1) %149, i1 %35) #2, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %286, i32 %291, i32 %296, i32 %301, ptr addrspace(1) %151, i1 %35) #2, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czqas2oazah46pm7zdzvx6oxnqibpi3hbnsf7k64sfimy4qnlgua.py", directory: "inductor_cache/zq")
!4 = !{ptr @triton_poi_fused_clone_view_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_view_0, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_view_0", linkageName: "triton_poi_fused_clone_view_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 51, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 56, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 4, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 33, scope: !7)
!33 = !DILocation(line: 36, column: 28, scope: !7)
!34 = !DILocation(line: 36, column: 47, scope: !7)
!35 = !DILocation(line: 36, column: 4, scope: !7)
