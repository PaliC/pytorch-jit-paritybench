; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 255, !dbg !12
  %10 = shl i32 %8, 2, !dbg !12
  %11 = and i32 %10, 252, !dbg !12
  %12 = or disjoint i32 %7, %9, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = icmp slt i32 %12, 784, !dbg !14
  %15 = icmp slt i32 %13, 784, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %17 = shl i32 %16, 4, !dbg !16
  %.lobit1 = lshr i32 %8, 6, !dbg !17
  %18 = and i32 %.lobit1, 3, !dbg !17
  %19 = or disjoint i32 %17, %18, !dbg !18
  %20 = or disjoint i32 %19, 4, !dbg !18
  %21 = or disjoint i32 %19, 8, !dbg !18
  %22 = or disjoint i32 %19, 12, !dbg !18
  %23 = icmp slt i32 %17, 64, !dbg !19
  %24 = icmp slt i32 %19, 64, !dbg !19
  %25 = icmp slt i32 %20, 64, !dbg !19
  %26 = icmp slt i32 %21, 64, !dbg !19
  %27 = icmp slt i32 %22, 64, !dbg !19
  %.frozen = freeze i32 %12, !dbg !20
  %28 = sdiv i32 %.frozen, 14, !dbg !20
  %29 = mul i32 %28, 14, !dbg !21
  %.decomposed = sub i32 %.frozen, %29, !dbg !21
  %.frozen39 = freeze i32 %13, !dbg !22
  %30 = sdiv i32 %.frozen39, 196, !dbg !22
  %31 = mul i32 %30, 196, !dbg !23
  %.decomposed40 = sub i32 %.frozen39, %31, !dbg !23
  %32 = shl nsw i32 %.decomposed, 7, !dbg !24
  %33 = mul i32 %28, 3584, !dbg !25
  %34 = add i32 %33, %32, !dbg !26
  %35 = add i32 %34, %17, !dbg !27
  %36 = or disjoint i32 %34, 4, !dbg !26
  %37 = add i32 %36, %17, !dbg !27
  %38 = or disjoint i32 %34, 8, !dbg !26
  %39 = add i32 %38, %17, !dbg !27
  %40 = or disjoint i32 %34, 12, !dbg !26
  %41 = add i32 %40, %17, !dbg !27
  %42 = sext i32 %35 to i64, !dbg !28
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !28
  %44 = sext i32 %37 to i64, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !28
  %46 = sext i32 %39 to i64, !dbg !28
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !28
  %48 = sext i32 %41 to i64, !dbg !28
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !28
  %50 = and i1 %23, %14, !dbg !29
  %51 = and i1 %15, %24, !dbg !29
  %52 = and i1 %25, %15, !dbg !29
  %53 = and i1 %26, %15, !dbg !29
  %54 = and i1 %27, %15, !dbg !29
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %50) #2, !dbg !30
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !30
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !30
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !30
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !30
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %50) #2, !dbg !30
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !30
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !30
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !30
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !30
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %50) #2, !dbg !30
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !30
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !30
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !30
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !30
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %50) #2, !dbg !30
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !30
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !30
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !30
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !30
  %75 = or disjoint i32 %34, 64, !dbg !31
  %76 = add i32 %75, %17, !dbg !32
  %77 = or disjoint i32 %34, 68, !dbg !31
  %78 = add i32 %77, %17, !dbg !32
  %79 = or disjoint i32 %34, 72, !dbg !31
  %80 = add i32 %79, %17, !dbg !32
  %81 = or disjoint i32 %34, 76, !dbg !31
  %82 = add i32 %81, %17, !dbg !32
  %83 = sext i32 %76 to i64, !dbg !33
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !33
  %85 = sext i32 %78 to i64, !dbg !33
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !33
  %87 = sext i32 %80 to i64, !dbg !33
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !33
  %89 = sext i32 %82 to i64, !dbg !33
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !33
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %84, i1 %50) #2, !dbg !34
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !34
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !34
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !34
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !34
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 %50) #2, !dbg !34
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !34
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !34
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !34
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !34
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %88, i1 %50) #2, !dbg !34
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !34
  %103 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !34
  %104 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !34
  %105 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !34
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %90, i1 %50) #2, !dbg !34
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !34
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !34
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !34
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !34
  %111 = add i32 %34, 1792, !dbg !35
  %112 = add i32 %111, %17, !dbg !36
  %113 = add i32 %34, 1796, !dbg !35
  %114 = add i32 %113, %17, !dbg !36
  %115 = add i32 %34, 1800, !dbg !35
  %116 = add i32 %115, %17, !dbg !36
  %117 = add i32 %34, 1804, !dbg !35
  %118 = add i32 %117, %17, !dbg !36
  %119 = sext i32 %112 to i64, !dbg !37
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !37
  %121 = sext i32 %114 to i64, !dbg !37
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !37
  %123 = sext i32 %116 to i64, !dbg !37
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !37
  %125 = sext i32 %118 to i64, !dbg !37
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !37
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %120, i1 %50) #2, !dbg !38
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !38
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !38
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !38
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !38
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %122, i1 %50) #2, !dbg !38
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !38
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !38
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !38
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !38
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %124, i1 %50) #2, !dbg !38
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !38
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !38
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !38
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !38
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %126, i1 %50) #2, !dbg !38
  %143 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !38
  %144 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !38
  %145 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !38
  %146 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !38
  %147 = add i32 %34, 1856, !dbg !39
  %148 = add i32 %147, %17, !dbg !40
  %149 = add i32 %34, 1860, !dbg !39
  %150 = add i32 %149, %17, !dbg !40
  %151 = add i32 %34, 1864, !dbg !39
  %152 = add i32 %151, %17, !dbg !40
  %153 = add i32 %34, 1868, !dbg !39
  %154 = add i32 %153, %17, !dbg !40
  %155 = sext i32 %148 to i64, !dbg !41
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !41
  %157 = sext i32 %150 to i64, !dbg !41
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !41
  %159 = sext i32 %152 to i64, !dbg !41
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !41
  %161 = sext i32 %154 to i64, !dbg !41
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !41
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %156, i1 %50) #2, !dbg !42
  %164 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !42
  %165 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !42
  %166 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !42
  %167 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !42
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %158, i1 %50) #2, !dbg !42
  %169 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !42
  %170 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !42
  %171 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !42
  %172 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !42
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %160, i1 %50) #2, !dbg !42
  %174 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !42
  %175 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !42
  %176 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !42
  %177 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !42
  %178 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %162, i1 %50) #2, !dbg !42
  %179 = extractvalue { i32, i32, i32, i32 } %178, 0, !dbg !42
  %180 = extractvalue { i32, i32, i32, i32 } %178, 1, !dbg !42
  %181 = extractvalue { i32, i32, i32, i32 } %178, 2, !dbg !42
  %182 = extractvalue { i32, i32, i32, i32 } %178, 3, !dbg !42
  %183 = insertelement <4 x i32> poison, i32 %56, i64 0, !dbg !30
  %184 = insertelement <4 x i32> %183, i32 %57, i64 1, !dbg !30
  %185 = insertelement <4 x i32> %184, i32 %58, i64 2, !dbg !30
  %186 = insertelement <4 x i32> %185, i32 %59, i64 3, !dbg !30
  %187 = bitcast <4 x i32> %186 to <4 x float>, !dbg !30
  %188 = insertelement <4 x i32> poison, i32 %92, i64 0, !dbg !34
  %189 = insertelement <4 x i32> %188, i32 %93, i64 1, !dbg !34
  %190 = insertelement <4 x i32> %189, i32 %94, i64 2, !dbg !34
  %191 = insertelement <4 x i32> %190, i32 %95, i64 3, !dbg !34
  %192 = bitcast <4 x i32> %191 to <4 x float>, !dbg !34
  %193 = insertelement <4 x i32> poison, i32 %128, i64 0, !dbg !38
  %194 = insertelement <4 x i32> %193, i32 %129, i64 1, !dbg !38
  %195 = insertelement <4 x i32> %194, i32 %130, i64 2, !dbg !38
  %196 = insertelement <4 x i32> %195, i32 %131, i64 3, !dbg !38
  %197 = bitcast <4 x i32> %196 to <4 x float>, !dbg !38
  %198 = insertelement <4 x i32> poison, i32 %164, i64 0, !dbg !42
  %199 = insertelement <4 x i32> %198, i32 %165, i64 1, !dbg !42
  %200 = insertelement <4 x i32> %199, i32 %166, i64 2, !dbg !42
  %201 = insertelement <4 x i32> %200, i32 %167, i64 3, !dbg !42
  %202 = bitcast <4 x i32> %201 to <4 x float>, !dbg !42
  %203 = fcmp ogt <4 x float> %192, %187, !dbg !43
  %204 = zext <4 x i1> %203 to <4 x i8>, !dbg !44
  %205 = fcmp uno <4 x float> %192, zeroinitializer, !dbg !45
  %206 = or <4 x i1> %203, %205, !dbg !49
  %.v = select <4 x i1> %206, <4 x i32> %191, <4 x i32> %186, !dbg !50
  %207 = bitcast <4 x i32> %.v to <4 x float>, !dbg !50
  %208 = fcmp olt <4 x float> %207, %197, !dbg !51
  %209 = select <4 x i1> %208, <4 x i8> splat (i8 2), <4 x i8> %204, !dbg !52
  %210 = fcmp uno <4 x float> %197, zeroinitializer, !dbg !53
  %211 = or <4 x i1> %208, %210, !dbg !55
  %.v32 = select <4 x i1> %211, <4 x i32> %196, <4 x i32> %.v, !dbg !56
  %212 = bitcast <4 x i32> %.v32 to <4 x float>, !dbg !56
  %213 = shufflevector <4 x float> %212, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %214 = fcmp olt <4 x float> %212, %202, !dbg !57
  %215 = shufflevector <4 x i1> %214, <4 x i1> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %216 = select <4 x i1> %214, <4 x i8> splat (i8 3), <4 x i8> %209, !dbg !58
  %217 = insertelement <4 x i32> poison, i32 %61, i64 0, !dbg !30
  %218 = insertelement <4 x i32> %217, i32 %62, i64 1, !dbg !30
  %219 = insertelement <4 x i32> %218, i32 %63, i64 2, !dbg !30
  %220 = insertelement <4 x i32> %219, i32 %64, i64 3, !dbg !30
  %221 = bitcast <4 x i32> %220 to <4 x float>, !dbg !30
  %222 = insertelement <4 x i32> poison, i32 %97, i64 0, !dbg !34
  %223 = insertelement <4 x i32> %222, i32 %98, i64 1, !dbg !34
  %224 = insertelement <4 x i32> %223, i32 %99, i64 2, !dbg !34
  %225 = insertelement <4 x i32> %224, i32 %100, i64 3, !dbg !34
  %226 = bitcast <4 x i32> %225 to <4 x float>, !dbg !34
  %227 = insertelement <4 x i32> poison, i32 %133, i64 0, !dbg !38
  %228 = insertelement <4 x i32> %227, i32 %134, i64 1, !dbg !38
  %229 = insertelement <4 x i32> %228, i32 %135, i64 2, !dbg !38
  %230 = insertelement <4 x i32> %229, i32 %136, i64 3, !dbg !38
  %231 = bitcast <4 x i32> %230 to <4 x float>, !dbg !38
  %232 = insertelement <4 x i32> poison, i32 %169, i64 0, !dbg !42
  %233 = insertelement <4 x i32> %232, i32 %170, i64 1, !dbg !42
  %234 = insertelement <4 x i32> %233, i32 %171, i64 2, !dbg !42
  %235 = insertelement <4 x i32> %234, i32 %172, i64 3, !dbg !42
  %236 = bitcast <4 x i32> %235 to <4 x float>, !dbg !42
  %237 = fcmp ogt <4 x float> %226, %221, !dbg !43
  %238 = zext <4 x i1> %237 to <4 x i8>, !dbg !44
  %239 = fcmp uno <4 x float> %226, zeroinitializer, !dbg !45
  %240 = or <4 x i1> %237, %239, !dbg !49
  %.v33 = select <4 x i1> %240, <4 x i32> %225, <4 x i32> %220, !dbg !50
  %241 = bitcast <4 x i32> %.v33 to <4 x float>, !dbg !50
  %242 = fcmp olt <4 x float> %241, %231, !dbg !51
  %243 = select <4 x i1> %242, <4 x i8> splat (i8 2), <4 x i8> %238, !dbg !52
  %244 = fcmp uno <4 x float> %231, zeroinitializer, !dbg !53
  %245 = or <4 x i1> %242, %244, !dbg !55
  %.v34 = select <4 x i1> %245, <4 x i32> %230, <4 x i32> %.v33, !dbg !56
  %246 = bitcast <4 x i32> %.v34 to <4 x float>, !dbg !56
  %247 = shufflevector <4 x float> %246, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %248 = fcmp olt <4 x float> %246, %236, !dbg !57
  %249 = shufflevector <4 x i1> %248, <4 x i1> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %250 = select <4 x i1> %248, <4 x i8> splat (i8 3), <4 x i8> %243, !dbg !58
  %251 = insertelement <4 x i32> poison, i32 %66, i64 0, !dbg !30
  %252 = insertelement <4 x i32> %251, i32 %67, i64 1, !dbg !30
  %253 = insertelement <4 x i32> %252, i32 %68, i64 2, !dbg !30
  %254 = insertelement <4 x i32> %253, i32 %69, i64 3, !dbg !30
  %255 = bitcast <4 x i32> %254 to <4 x float>, !dbg !30
  %256 = insertelement <4 x i32> poison, i32 %102, i64 0, !dbg !34
  %257 = insertelement <4 x i32> %256, i32 %103, i64 1, !dbg !34
  %258 = insertelement <4 x i32> %257, i32 %104, i64 2, !dbg !34
  %259 = insertelement <4 x i32> %258, i32 %105, i64 3, !dbg !34
  %260 = bitcast <4 x i32> %259 to <4 x float>, !dbg !34
  %261 = insertelement <4 x i32> poison, i32 %138, i64 0, !dbg !38
  %262 = insertelement <4 x i32> %261, i32 %139, i64 1, !dbg !38
  %263 = insertelement <4 x i32> %262, i32 %140, i64 2, !dbg !38
  %264 = insertelement <4 x i32> %263, i32 %141, i64 3, !dbg !38
  %265 = bitcast <4 x i32> %264 to <4 x float>, !dbg !38
  %266 = insertelement <4 x i32> poison, i32 %174, i64 0, !dbg !42
  %267 = insertelement <4 x i32> %266, i32 %175, i64 1, !dbg !42
  %268 = insertelement <4 x i32> %267, i32 %176, i64 2, !dbg !42
  %269 = insertelement <4 x i32> %268, i32 %177, i64 3, !dbg !42
  %270 = bitcast <4 x i32> %269 to <4 x float>, !dbg !42
  %271 = fcmp ogt <4 x float> %260, %255, !dbg !43
  %272 = zext <4 x i1> %271 to <4 x i8>, !dbg !44
  %273 = fcmp uno <4 x float> %260, zeroinitializer, !dbg !45
  %274 = or <4 x i1> %271, %273, !dbg !49
  %.v35 = select <4 x i1> %274, <4 x i32> %259, <4 x i32> %254, !dbg !50
  %275 = bitcast <4 x i32> %.v35 to <4 x float>, !dbg !50
  %276 = fcmp olt <4 x float> %275, %265, !dbg !51
  %277 = select <4 x i1> %276, <4 x i8> splat (i8 2), <4 x i8> %272, !dbg !52
  %278 = fcmp uno <4 x float> %265, zeroinitializer, !dbg !53
  %279 = or <4 x i1> %276, %278, !dbg !55
  %.v36 = select <4 x i1> %279, <4 x i32> %264, <4 x i32> %.v35, !dbg !56
  %280 = bitcast <4 x i32> %.v36 to <4 x float>, !dbg !56
  %281 = fcmp olt <4 x float> %280, %270, !dbg !57
  %282 = select <4 x i1> %281, <4 x i8> splat (i8 3), <4 x i8> %277, !dbg !58
  %283 = insertelement <4 x i32> poison, i32 %71, i64 0, !dbg !30
  %284 = insertelement <4 x i32> %283, i32 %72, i64 1, !dbg !30
  %285 = insertelement <4 x i32> %284, i32 %73, i64 2, !dbg !30
  %286 = insertelement <4 x i32> %285, i32 %74, i64 3, !dbg !30
  %287 = bitcast <4 x i32> %286 to <4 x float>, !dbg !30
  %288 = insertelement <4 x i32> poison, i32 %107, i64 0, !dbg !34
  %289 = insertelement <4 x i32> %288, i32 %108, i64 1, !dbg !34
  %290 = insertelement <4 x i32> %289, i32 %109, i64 2, !dbg !34
  %291 = insertelement <4 x i32> %290, i32 %110, i64 3, !dbg !34
  %292 = bitcast <4 x i32> %291 to <4 x float>, !dbg !34
  %293 = insertelement <4 x i32> poison, i32 %143, i64 0, !dbg !38
  %294 = insertelement <4 x i32> %293, i32 %144, i64 1, !dbg !38
  %295 = insertelement <4 x i32> %294, i32 %145, i64 2, !dbg !38
  %296 = insertelement <4 x i32> %295, i32 %146, i64 3, !dbg !38
  %297 = bitcast <4 x i32> %296 to <4 x float>, !dbg !38
  %298 = insertelement <4 x i32> poison, i32 %179, i64 0, !dbg !42
  %299 = insertelement <4 x i32> %298, i32 %180, i64 1, !dbg !42
  %300 = insertelement <4 x i32> %299, i32 %181, i64 2, !dbg !42
  %301 = insertelement <4 x i32> %300, i32 %182, i64 3, !dbg !42
  %302 = bitcast <4 x i32> %301 to <4 x float>, !dbg !42
  %303 = fcmp ogt <4 x float> %292, %287, !dbg !43
  %304 = zext <4 x i1> %303 to <4 x i8>, !dbg !44
  %305 = fcmp uno <4 x float> %292, zeroinitializer, !dbg !45
  %306 = or <4 x i1> %303, %305, !dbg !49
  %.v37 = select <4 x i1> %306, <4 x i32> %291, <4 x i32> %286, !dbg !50
  %307 = bitcast <4 x i32> %.v37 to <4 x float>, !dbg !50
  %308 = fcmp olt <4 x float> %307, %297, !dbg !51
  %309 = select <4 x i1> %308, <4 x i8> splat (i8 2), <4 x i8> %304, !dbg !52
  %310 = fcmp uno <4 x float> %297, zeroinitializer, !dbg !53
  %311 = or <4 x i1> %308, %310, !dbg !55
  %.v38 = select <4 x i1> %311, <4 x i32> %296, <4 x i32> %.v37, !dbg !56
  %312 = bitcast <4 x i32> %.v38 to <4 x float>, !dbg !56
  %313 = fcmp olt <4 x float> %312, %302, !dbg !57
  %314 = select <4 x i1> %313, <4 x i8> splat (i8 3), <4 x i8> %309, !dbg !58
  %315 = bitcast i32 %164 to float, !dbg !59
  %316 = bitcast i32 %165 to float, !dbg !59
  %317 = bitcast i32 %166 to float, !dbg !59
  %318 = bitcast i32 %167 to float, !dbg !59
  %319 = bitcast i32 %169 to float, !dbg !59
  %320 = bitcast i32 %170 to float, !dbg !59
  %321 = bitcast i32 %171 to float, !dbg !59
  %322 = bitcast i32 %172 to float, !dbg !59
  %323 = shufflevector <4 x float> %302, <4 x float> %270, <16 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !59
  %324 = insertelement <16 x float> %323, float %322, i64 8, !dbg !59
  %325 = insertelement <16 x float> %324, float %321, i64 9, !dbg !59
  %326 = insertelement <16 x float> %325, float %320, i64 10, !dbg !59
  %327 = insertelement <16 x float> %326, float %319, i64 11, !dbg !59
  %328 = insertelement <16 x float> %327, float %318, i64 12, !dbg !59
  %329 = insertelement <16 x float> %328, float %317, i64 13, !dbg !59
  %330 = insertelement <16 x float> %329, float %316, i64 14, !dbg !59
  %331 = insertelement <16 x float> %330, float %315, i64 15, !dbg !59
  %332 = fcmp uno <16 x float> %331, zeroinitializer, !dbg !59
  %333 = shufflevector <4 x i1> %313, <4 x i1> %281, <16 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !61
  %334 = shufflevector <16 x i1> %333, <16 x i1> %249, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 19, i32 18, i32 17, i32 16, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !61
  %335 = shufflevector <16 x i1> %334, <16 x i1> %215, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 19, i32 18, i32 17, i32 16>, !dbg !61
  %336 = or <16 x i1> %335, %332, !dbg !61
  %337 = shufflevector <4 x float> %312, <4 x float> %280, <16 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %338 = shufflevector <16 x float> %337, <16 x float> %247, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 19, i32 18, i32 17, i32 16, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !62
  %339 = shufflevector <16 x float> %338, <16 x float> %213, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 19, i32 18, i32 17, i32 16>, !dbg !62
  %340 = select <16 x i1> %336, <16 x float> %331, <16 x float> %339, !dbg !62
  %341 = fcmp olt <16 x float> %340, zeroinitializer, !dbg !63
  %342 = extractelement <16 x i1> %341, i64 15, !dbg !65
  %343 = extractelement <16 x float> %340, i64 15, !dbg !65
  %344 = select i1 %342, float 0.000000e+00, float %343, !dbg !65
  %345 = extractelement <16 x i1> %341, i64 14, !dbg !65
  %346 = extractelement <16 x float> %340, i64 14, !dbg !65
  %347 = select i1 %345, float 0.000000e+00, float %346, !dbg !65
  %348 = extractelement <16 x i1> %341, i64 13, !dbg !65
  %349 = extractelement <16 x float> %340, i64 13, !dbg !65
  %350 = select i1 %348, float 0.000000e+00, float %349, !dbg !65
  %351 = extractelement <16 x i1> %341, i64 12, !dbg !65
  %352 = extractelement <16 x float> %340, i64 12, !dbg !65
  %353 = select i1 %351, float 0.000000e+00, float %352, !dbg !65
  %354 = extractelement <16 x i1> %341, i64 11, !dbg !65
  %355 = extractelement <16 x float> %340, i64 11, !dbg !65
  %356 = select i1 %354, float 0.000000e+00, float %355, !dbg !65
  %357 = extractelement <16 x i1> %341, i64 10, !dbg !65
  %358 = extractelement <16 x float> %340, i64 10, !dbg !65
  %359 = select i1 %357, float 0.000000e+00, float %358, !dbg !65
  %360 = extractelement <16 x i1> %341, i64 9, !dbg !65
  %361 = extractelement <16 x float> %340, i64 9, !dbg !65
  %362 = select i1 %360, float 0.000000e+00, float %361, !dbg !65
  %363 = extractelement <16 x i1> %341, i64 8, !dbg !65
  %364 = extractelement <16 x float> %340, i64 8, !dbg !65
  %365 = select i1 %363, float 0.000000e+00, float %364, !dbg !65
  %366 = extractelement <16 x i1> %341, i64 7, !dbg !65
  %367 = extractelement <16 x float> %340, i64 7, !dbg !65
  %368 = select i1 %366, float 0.000000e+00, float %367, !dbg !65
  %369 = extractelement <16 x i1> %341, i64 6, !dbg !65
  %370 = extractelement <16 x float> %340, i64 6, !dbg !65
  %371 = select i1 %369, float 0.000000e+00, float %370, !dbg !65
  %372 = extractelement <16 x i1> %341, i64 5, !dbg !65
  %373 = extractelement <16 x float> %340, i64 5, !dbg !65
  %374 = select i1 %372, float 0.000000e+00, float %373, !dbg !65
  %375 = extractelement <16 x i1> %341, i64 4, !dbg !65
  %376 = extractelement <16 x float> %340, i64 4, !dbg !65
  %377 = select i1 %375, float 0.000000e+00, float %376, !dbg !65
  %378 = extractelement <16 x i1> %341, i64 3, !dbg !65
  %379 = extractelement <16 x float> %340, i64 3, !dbg !65
  %380 = select i1 %378, float 0.000000e+00, float %379, !dbg !65
  %381 = extractelement <16 x i1> %341, i64 2, !dbg !65
  %382 = extractelement <16 x float> %340, i64 2, !dbg !65
  %383 = select i1 %381, float 0.000000e+00, float %382, !dbg !65
  %384 = extractelement <16 x i1> %341, i64 1, !dbg !65
  %385 = extractelement <16 x float> %340, i64 1, !dbg !65
  %386 = select i1 %384, float 0.000000e+00, float %385, !dbg !65
  %387 = extractelement <16 x i1> %341, i64 0, !dbg !65
  %388 = extractelement <16 x float> %340, i64 0, !dbg !65
  %389 = select i1 %387, float 0.000000e+00, float %388, !dbg !65
  %390 = shl i32 %12, 6, !dbg !66
  %391 = add i32 %390, %17, !dbg !67
  %392 = sext i32 %391 to i64, !dbg !68
  %393 = getelementptr i8, ptr addrspace(1) %1, i64 %392, !dbg !68
  %394 = bitcast <4 x i8> %216 to i32, !dbg !69
  %395 = bitcast <4 x i8> %250 to i32, !dbg !69
  %396 = bitcast <4 x i8> %282 to i32, !dbg !69
  %397 = bitcast <4 x i8> %314 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %394, i32 %395, i32 %396, i32 %397, ptr addrspace(1) %393, i1 %50) #2, !dbg !69
  %398 = mul i32 %19, 196, !dbg !70
  %399 = mul i32 %20, 196, !dbg !70
  %400 = mul i32 %21, 196, !dbg !70
  %401 = mul i32 %22, 196, !dbg !70
  %402 = mul i32 %30, 12544, !dbg !71
  %403 = add i32 %402, %.decomposed40, !dbg !72
  %404 = add i32 %403, %398, !dbg !73
  %405 = add i32 %403, %399, !dbg !73
  %406 = add i32 %403, %400, !dbg !73
  %407 = add i32 %403, %401, !dbg !73
  %408 = sext i32 %404 to i64, !dbg !74
  %409 = getelementptr float, ptr addrspace(1) %2, i64 %408, !dbg !74
  %410 = sext i32 %405 to i64, !dbg !74
  %411 = getelementptr float, ptr addrspace(1) %2, i64 %410, !dbg !74
  %412 = sext i32 %406 to i64, !dbg !74
  %413 = getelementptr float, ptr addrspace(1) %2, i64 %412, !dbg !74
  %414 = sext i32 %407 to i64, !dbg !74
  %415 = getelementptr float, ptr addrspace(1) %2, i64 %414, !dbg !74
  %416 = and i32 %10, 1020, !dbg !75
  %417 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !75
  %418 = bitcast float %344 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %417, <1 x i32> %418, i1 true) #2, !dbg !75
  %419 = getelementptr inbounds i8, ptr addrspace(3) %417, i32 1040, !dbg !75
  %420 = bitcast float %347 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %419, <1 x i32> %420, i1 true) #2, !dbg !75
  %421 = getelementptr inbounds i8, ptr addrspace(3) %417, i32 2080, !dbg !75
  %422 = bitcast float %350 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %421, <1 x i32> %422, i1 true) #2, !dbg !75
  %423 = getelementptr inbounds i8, ptr addrspace(3) %417, i32 3120, !dbg !75
  %424 = bitcast float %353 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %423, <1 x i32> %424, i1 true) #2, !dbg !75
  %425 = getelementptr inbounds i8, ptr addrspace(3) %417, i32 4160, !dbg !75
  %426 = bitcast float %356 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %425, <1 x i32> %426, i1 true) #2, !dbg !75
  %427 = getelementptr inbounds i8, ptr addrspace(3) %417, i32 5200, !dbg !75
  %428 = bitcast float %359 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %427, <1 x i32> %428, i1 true) #2, !dbg !75
  %429 = getelementptr inbounds i8, ptr addrspace(3) %417, i32 6240, !dbg !75
  %430 = bitcast float %362 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %429, <1 x i32> %430, i1 true) #2, !dbg !75
  %431 = getelementptr inbounds i8, ptr addrspace(3) %417, i32 7280, !dbg !75
  %432 = bitcast float %365 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %431, <1 x i32> %432, i1 true) #2, !dbg !75
  %433 = getelementptr inbounds i8, ptr addrspace(3) %417, i32 8320, !dbg !75
  %434 = bitcast float %368 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %433, <1 x i32> %434, i1 true) #2, !dbg !75
  %435 = getelementptr inbounds i8, ptr addrspace(3) %417, i32 9360, !dbg !75
  %436 = bitcast float %371 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %435, <1 x i32> %436, i1 true) #2, !dbg !75
  %437 = getelementptr inbounds i8, ptr addrspace(3) %417, i32 10400, !dbg !75
  %438 = bitcast float %374 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %437, <1 x i32> %438, i1 true) #2, !dbg !75
  %439 = getelementptr inbounds i8, ptr addrspace(3) %417, i32 11440, !dbg !75
  %440 = bitcast float %377 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %439, <1 x i32> %440, i1 true) #2, !dbg !75
  %441 = getelementptr inbounds i8, ptr addrspace(3) %417, i32 12480, !dbg !75
  %442 = bitcast float %380 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %441, <1 x i32> %442, i1 true) #2, !dbg !75
  %443 = getelementptr inbounds i8, ptr addrspace(3) %417, i32 13520, !dbg !75
  %444 = bitcast float %383 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %443, <1 x i32> %444, i1 true) #2, !dbg !75
  %445 = getelementptr inbounds i8, ptr addrspace(3) %417, i32 14560, !dbg !75
  %446 = bitcast float %386 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %445, <1 x i32> %446, i1 true) #2, !dbg !75
  %447 = getelementptr inbounds i8, ptr addrspace(3) %417, i32 15600, !dbg !75
  %448 = bitcast float %389 to <1 x i32>, !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %447, <1 x i32> %448, i1 true) #2, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %449 = lshr i32 %10, 6, !dbg !75
  %450 = and i32 %449, 12, !dbg !75
  %451 = getelementptr float, ptr addrspace(3) @global_smem, i32 %450, !dbg !75
  %452 = getelementptr float, ptr addrspace(3) %451, i32 %416, !dbg !75
  %453 = or disjoint i32 %416, 1024, !dbg !75
  %454 = lshr i32 %453, 6, !dbg !75
  %455 = and i32 %454, 28, !dbg !75
  %456 = getelementptr float, ptr addrspace(3) @global_smem, i32 %455, !dbg !75
  %457 = getelementptr float, ptr addrspace(3) %456, i32 %453, !dbg !75
  %458 = load <4 x i32>, ptr addrspace(3) %457, align 16, !dbg !75
  %459 = or disjoint i32 %416, 2048, !dbg !75
  %460 = lshr i32 %459, 6, !dbg !75
  %461 = and i32 %460, 44, !dbg !75
  %462 = getelementptr float, ptr addrspace(3) @global_smem, i32 %461, !dbg !75
  %463 = getelementptr float, ptr addrspace(3) %462, i32 %459, !dbg !75
  %464 = load <4 x i32>, ptr addrspace(3) %463, align 16, !dbg !75
  %465 = or disjoint i32 %416, 3072, !dbg !75
  %466 = lshr i32 %465, 6, !dbg !75
  %467 = and i32 %466, 60, !dbg !75
  %468 = getelementptr float, ptr addrspace(3) @global_smem, i32 %467, !dbg !75
  %469 = getelementptr float, ptr addrspace(3) %468, i32 %465, !dbg !75
  %470 = load <4 x i32>, ptr addrspace(3) %469, align 16, !dbg !75
  %.extract = load i32, ptr addrspace(3) %452, align 16, !dbg !75
  %471 = getelementptr inbounds i8, ptr addrspace(3) %452, i32 4, !dbg !75
  %.extract17 = load i32, ptr addrspace(3) %471, align 4, !dbg !75
  %472 = getelementptr inbounds i8, ptr addrspace(3) %452, i32 8, !dbg !75
  %.extract18 = load i32, ptr addrspace(3) %472, align 8, !dbg !75
  %473 = getelementptr inbounds i8, ptr addrspace(3) %452, i32 12, !dbg !75
  %.extract19 = load i32, ptr addrspace(3) %473, align 4, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract17, i32 %.extract18, i32 %.extract19, ptr addrspace(1) %409, i1 %51) #2, !dbg !75
  %.extract20 = extractelement <4 x i32> %458, i64 0, !dbg !75
  %.extract21 = extractelement <4 x i32> %458, i64 1, !dbg !75
  %.extract22 = extractelement <4 x i32> %458, i64 2, !dbg !75
  %.extract23 = extractelement <4 x i32> %458, i64 3, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract20, i32 %.extract21, i32 %.extract22, i32 %.extract23, ptr addrspace(1) %411, i1 %52) #2, !dbg !75
  %.extract24 = extractelement <4 x i32> %464, i64 0, !dbg !75
  %.extract25 = extractelement <4 x i32> %464, i64 1, !dbg !75
  %.extract26 = extractelement <4 x i32> %464, i64 2, !dbg !75
  %.extract27 = extractelement <4 x i32> %464, i64 3, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract24, i32 %.extract25, i32 %.extract26, i32 %.extract27, ptr addrspace(1) %413, i1 %53) #2, !dbg !75
  %.extract28 = extractelement <4 x i32> %470, i64 0, !dbg !75
  %.extract29 = extractelement <4 x i32> %470, i64 1, !dbg !75
  %.extract30 = extractelement <4 x i32> %470, i64 2, !dbg !75
  %.extract31 = extractelement <4 x i32> %470, i64 3, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract28, i32 %.extract29, i32 %.extract30, i32 %.extract31, ptr addrspace(1) %415, i1 %54) #2, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdyhrp4t2kxpjbmmpk3riujudyxfsk2phaotj7nw5cefgsu26a4u.py", directory: "inductor_cache/dy")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_relu_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_relu_7", linkageName: "triton_poi_fused_max_pool2d_with_indices_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 33, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 49, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 62, scope: !7)
!30 = !DILocation(line: 34, column: 54, scope: !7)
!31 = !DILocation(line: 35, column: 40, scope: !7)
!32 = !DILocation(line: 35, column: 49, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 59, scope: !7)
!35 = !DILocation(line: 36, column: 42, scope: !7)
!36 = !DILocation(line: 36, column: 51, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 61, scope: !7)
!39 = !DILocation(line: 37, column: 43, scope: !7)
!40 = !DILocation(line: 37, column: 52, scope: !7)
!41 = !DILocation(line: 37, column: 31, scope: !7)
!42 = !DILocation(line: 37, column: 62, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 41, column: 32, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 42, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!51 = !DILocation(line: 43, column: 18, scope: !7)
!52 = !DILocation(line: 45, column: 33, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !54)
!54 = !DILocation(line: 46, column: 41, scope: !7)
!55 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !54)
!56 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !54)
!57 = !DILocation(line: 47, column: 20, scope: !7)
!58 = !DILocation(line: 49, column: 35, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !60)
!60 = !DILocation(line: 50, column: 42, scope: !7)
!61 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !60)
!62 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !60)
!63 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !64)
!64 = !DILocation(line: 52, column: 42, scope: !7)
!65 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !64)
!66 = !DILocation(line: 53, column: 33, scope: !7)
!67 = !DILocation(line: 53, column: 30, scope: !7)
!68 = !DILocation(line: 53, column: 25, scope: !7)
!69 = !DILocation(line: 53, column: 45, scope: !7)
!70 = !DILocation(line: 54, column: 34, scope: !7)
!71 = !DILocation(line: 54, column: 45, scope: !7)
!72 = !DILocation(line: 54, column: 30, scope: !7)
!73 = !DILocation(line: 54, column: 39, scope: !7)
!74 = !DILocation(line: 54, column: 25, scope: !7)
!75 = !DILocation(line: 54, column: 57, scope: !7)
!76 = !DILocation(line: 54, column: 4, scope: !7)
