; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_mul_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 62, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 64, !dbg !14
  %14 = sext i32 %12 to i64, !dbg !15
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !15
  %16 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %15, i1 %13) #1, !dbg !16
  %17 = extractvalue { i32, i32 } %16, 0, !dbg !16
  %18 = extractvalue { i32, i32 } %16, 1, !dbg !16
  %19 = bitcast i32 %17 to float, !dbg !16
  %20 = bitcast i32 %18 to float, !dbg !16
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #1, !dbg !17
  %22 = bitcast i32 %21 to float, !dbg !17
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #1, !dbg !18
  %24 = bitcast i32 %23 to float, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #1, !dbg !19
  %26 = bitcast i32 %25 to float, !dbg !19
  %27 = add i32 %12, 64, !dbg !20
  %28 = sext i32 %27 to i64, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !21
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %13) #1, !dbg !22
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !22
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !22
  %33 = bitcast i32 %31 to float, !dbg !22
  %34 = bitcast i32 %32 to float, !dbg !22
  %35 = getelementptr i8, ptr addrspace(1) %1, i64 4, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !24
  %37 = bitcast i32 %36 to float, !dbg !24
  %38 = add i32 %12, 128, !dbg !25
  %39 = sext i32 %38 to i64, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !26
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %13) #1, !dbg !27
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !27
  %43 = extractvalue { i32, i32 } %41, 1, !dbg !27
  %44 = bitcast i32 %42 to float, !dbg !27
  %45 = bitcast i32 %43 to float, !dbg !27
  %46 = getelementptr i8, ptr addrspace(1) %1, i64 8, !dbg !28
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !29
  %48 = bitcast i32 %47 to float, !dbg !29
  %49 = add i32 %12, 192, !dbg !30
  %50 = sext i32 %49 to i64, !dbg !31
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !31
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 %13) #1, !dbg !32
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !32
  %54 = extractvalue { i32, i32 } %52, 1, !dbg !32
  %55 = bitcast i32 %53 to float, !dbg !32
  %56 = bitcast i32 %54 to float, !dbg !32
  %57 = getelementptr i8, ptr addrspace(1) %1, i64 12, !dbg !33
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !34
  %59 = bitcast i32 %58 to float, !dbg !34
  %60 = fsub float %22, %24, !dbg !35
  %61 = fmul float %60, 0x3FF7154760000000, !dbg !36
  %62 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %61) #1, !dbg !36
  %63 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float %26) #1, !dbg !37
  %64 = fmul float %63, %19, !dbg !38
  %65 = fmul float %63, %20, !dbg !38
  %66 = fadd float %64, 0.000000e+00, !dbg !39
  %67 = fadd float %65, 0.000000e+00, !dbg !39
  %68 = fsub float %37, %24, !dbg !40
  %69 = fmul float %68, 0x3FF7154760000000, !dbg !41
  %70 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %69) #1, !dbg !41
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %70, float %26) #1, !dbg !42
  %72 = fmul float %71, %33, !dbg !43
  %73 = fmul float %71, %34, !dbg !43
  %74 = fadd float %66, %72, !dbg !44
  %75 = fadd float %67, %73, !dbg !44
  %76 = fsub float %48, %24, !dbg !45
  %77 = fmul float %76, 0x3FF7154760000000, !dbg !46
  %78 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %77) #1, !dbg !46
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %78, float %26) #1, !dbg !47
  %80 = fmul float %79, %44, !dbg !48
  %81 = fmul float %79, %45, !dbg !48
  %82 = fadd float %74, %80, !dbg !49
  %83 = fadd float %75, %81, !dbg !49
  %84 = fsub float %59, %24, !dbg !50
  %85 = fmul float %84, 0x3FF7154760000000, !dbg !51
  %86 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %85) #1, !dbg !51
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float %26) #1, !dbg !52
  %88 = fmul float %87, %55, !dbg !53
  %89 = fmul float %87, %56, !dbg !53
  %90 = fadd float %82, %88, !dbg !54
  %91 = fadd float %83, %89, !dbg !54
  %92 = getelementptr float, ptr addrspace(1) %4, i64 %14, !dbg !55
  %93 = bitcast float %90 to i32, !dbg !56
  %94 = bitcast float %91 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %93, i32 %94, ptr addrspace(1) %92, i1 %13) #1, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfbzo2h27b76mduyfbx6vssh6yblqnfedqhby7r6cnvezjbwpx5x.py", directory: "inductor_cache/fb")
!4 = !{ptr @triton_poi_fused_add_mul_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_2, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_2", linkageName: "triton_poi_fused_add_mul_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 30, scope: !7)
!16 = !DILocation(line: 25, column: 35, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 36, scope: !7)
!21 = !DILocation(line: 32, column: 31, scope: !7)
!22 = !DILocation(line: 32, column: 41, scope: !7)
!23 = !DILocation(line: 33, column: 31, scope: !7)
!24 = !DILocation(line: 33, column: 20, scope: !7)
!25 = !DILocation(line: 35, column: 37, scope: !7)
!26 = !DILocation(line: 35, column: 31, scope: !7)
!27 = !DILocation(line: 35, column: 42, scope: !7)
!28 = !DILocation(line: 36, column: 31, scope: !7)
!29 = !DILocation(line: 36, column: 20, scope: !7)
!30 = !DILocation(line: 38, column: 37, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 42, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 20, scope: !7)
!35 = !DILocation(line: 41, column: 18, scope: !7)
!36 = !DILocation(line: 42, column: 23, scope: !7)
!37 = !DILocation(line: 43, column: 18, scope: !7)
!38 = !DILocation(line: 44, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 24, scope: !7)
!42 = !DILocation(line: 49, column: 20, scope: !7)
!43 = !DILocation(line: 50, column: 20, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 20, scope: !7)
!46 = !DILocation(line: 53, column: 24, scope: !7)
!47 = !DILocation(line: 54, column: 20, scope: !7)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 57, column: 20, scope: !7)
!51 = !DILocation(line: 58, column: 24, scope: !7)
!52 = !DILocation(line: 59, column: 20, scope: !7)
!53 = !DILocation(line: 60, column: 20, scope: !7)
!54 = !DILocation(line: 61, column: 20, scope: !7)
!55 = !DILocation(line: 62, column: 25, scope: !7)
!56 = !DILocation(line: 62, column: 37, scope: !7)
!57 = !DILocation(line: 62, column: 4, scope: !7)
