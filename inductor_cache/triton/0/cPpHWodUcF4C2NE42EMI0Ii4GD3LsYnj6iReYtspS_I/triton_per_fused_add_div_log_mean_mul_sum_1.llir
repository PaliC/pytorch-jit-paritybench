; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_div_log_mean_mul_sum_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 15, !dbg !10
  %7 = and i32 %5, 12, !dbg !11
  %8 = zext nneg i32 %6 to i64, !dbg !12
  %9 = getelementptr float, ptr addrspace(1) %1, i64 %8, !dbg !12
  %10 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %9, i1 true) #4, !dbg !13
  %11 = bitcast i32 %10 to float, !dbg !13
  %12 = zext nneg i32 %7 to i64, !dbg !14
  %13 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !14
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 true) #4, !dbg !15
  %15 = or disjoint i32 %7, 1, !dbg !16
  %16 = zext nneg i32 %15 to i64, !dbg !17
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !17
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #4, !dbg !18
  %19 = or disjoint i32 %7, 2, !dbg !19
  %20 = zext nneg i32 %19 to i64, !dbg !20
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !20
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #4, !dbg !21
  %23 = or disjoint i32 %7, 3, !dbg !22
  %24 = zext nneg i32 %23 to i64, !dbg !23
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !23
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #4, !dbg !24
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %8, !dbg !25
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #4, !dbg !26
  %29 = bitcast i32 %28 to float, !dbg !26
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %12, !dbg !27
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #4, !dbg !28
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !29
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #4, !dbg !30
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !31
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #4, !dbg !32
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !33
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !34
  %38 = fadd float %11, 1.000000e+00, !dbg !35
  %39 = fmul float %38, 5.000000e-01, !dbg !36
  %40 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !15
  %41 = insertelement <2 x i32> %40, i32 %18, i64 1, !dbg !15
  %42 = bitcast <2 x i32> %41 to <2 x float>, !dbg !15
  %43 = fadd <2 x float> %42, splat (float 1.000000e+00), !dbg !37
  %44 = fmul <2 x float> %43, splat (float 5.000000e-01), !dbg !38
  %shift = shufflevector <2 x float> %44, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !39
  %45 = fadd <2 x float> %44, %shift, !dbg !39
  %46 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !21
  %47 = insertelement <2 x i32> %46, i32 %26, i64 1, !dbg !21
  %48 = bitcast <2 x i32> %47 to <2 x float>, !dbg !21
  %49 = fadd <2 x float> %48, splat (float 1.000000e+00), !dbg !40
  %50 = fmul <2 x float> %49, splat (float 5.000000e-01), !dbg !41
  %51 = fadd <2 x float> %45, %50, !dbg !42
  %shift1 = shufflevector <2 x float> %50, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !43
  %52 = fadd <2 x float> %51, %shift1, !dbg !43
  %53 = extractelement <2 x float> %52, i64 0, !dbg !43
  %54 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %39, float %53) #4, !dbg !44
  %55 = fadd float %54, 0x3EB0C6F7A0000000, !dbg !45
  %56 = fadd float %29, 1.000000e+00, !dbg !46
  %57 = fmul float %56, 5.000000e-01, !dbg !47
  %58 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !28
  %59 = insertelement <2 x i32> %58, i32 %33, i64 1, !dbg !28
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !28
  %61 = fadd <2 x float> %60, splat (float 1.000000e+00), !dbg !48
  %62 = fmul <2 x float> %61, splat (float 5.000000e-01), !dbg !49
  %shift2 = shufflevector <2 x float> %62, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !50
  %63 = fadd <2 x float> %62, %shift2, !dbg !50
  %64 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !32
  %65 = insertelement <2 x i32> %64, i32 %37, i64 1, !dbg !32
  %66 = bitcast <2 x i32> %65 to <2 x float>, !dbg !32
  %67 = fadd <2 x float> %66, splat (float 1.000000e+00), !dbg !51
  %68 = fmul <2 x float> %67, splat (float 5.000000e-01), !dbg !52
  %69 = fadd <2 x float> %63, %68, !dbg !53
  %shift3 = shufflevector <2 x float> %68, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %70 = fadd <2 x float> %69, %shift3, !dbg !54
  %71 = extractelement <2 x float> %70, i64 0, !dbg !54
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float %71) #4, !dbg !55
  %73 = fadd float %72, 0x3EB0C6F7A0000000, !dbg !56
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float %73) #4, !dbg !57
  %75 = fcmp olt float %74, 0x3810000000000000, !dbg !58
  %76 = fmul float %74, 0x4160000000000000, !dbg !58
  %.02.i = select i1 %75, float %76, float %74, !dbg !58
  %i.i.0.i = select i1 %75, float -2.300000e+01, float 0.000000e+00, !dbg !58
  %77 = bitcast float %.02.i to i32, !dbg !58
  %78 = add i32 %77, -1059760811, !dbg !58
  %79 = and i32 %78, -8388608, !dbg !58
  %80 = sub i32 %77, %79, !dbg !58
  %81 = bitcast i32 %80 to float, !dbg !58
  %82 = sitofp i32 %79 to float, !dbg !58
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !58
  %.not.i = icmp eq i32 %83, 0, !dbg !58
  %84 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %82, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !58
  %85 = tail call float @llvm.nvvm.fma.rn.f(float %82, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !58
  %.08.i = select i1 %.not.i, float %85, float %84, !dbg !58
  %86 = fadd float %81, -1.000000e+00, !dbg !58
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !58
  %.not1.i = icmp eq i32 %87, 0, !dbg !58
  %88 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %86, float 0x3FC2073EC0000000) #4, !dbg !58
  %89 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %86, float 0x3FC2073EC0000000) #4, !dbg !58
  %.010.i = select i1 %.not1.i, float %89, float %88, !dbg !58
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !58
  %.not2.i = icmp eq i32 %90, 0, !dbg !58
  %91 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %86, float 0xBFBF19B980000000) #4, !dbg !58
  %92 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %86, float 0xBFBF19B980000000) #4, !dbg !58
  %.011.i = select i1 %.not2.i, float %92, float %91, !dbg !58
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !58
  %.not3.i = icmp eq i32 %93, 0, !dbg !58
  %94 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %86, float 0x3FC1E52AA0000000) #4, !dbg !58
  %95 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %86, float 0x3FC1E52AA0000000) #4, !dbg !58
  %.012.i = select i1 %.not3.i, float %95, float %94, !dbg !58
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !58
  %.not4.i = icmp eq i32 %96, 0, !dbg !58
  %97 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %86, float 0xBFC55B1720000000) #4, !dbg !58
  %98 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %86, float 0xBFC55B1720000000) #4, !dbg !58
  %.09.i = select i1 %.not4.i, float %98, float %97, !dbg !58
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !58
  %.not5.i = icmp eq i32 %99, 0, !dbg !58
  %100 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %86, float 0x3FC99DA160000000) #4, !dbg !58
  %101 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %86, float 0x3FC99DA160000000) #4, !dbg !58
  %.05.i = select i1 %.not5.i, float %101, float %100, !dbg !58
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !58
  %.not6.i = icmp eq i32 %102, 0, !dbg !58
  %103 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %86, float 0xBFCFFFE440000000) #4, !dbg !58
  %104 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %86, float 0xBFCFFFE440000000) #4, !dbg !58
  %.01.i = select i1 %.not6.i, float %104, float %103, !dbg !58
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !58
  %.not7.i = icmp eq i32 %105, 0, !dbg !58
  %106 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %86, float 0x3FD5554F00000000) #4, !dbg !58
  %107 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %86, float 0x3FD5554F00000000) #4, !dbg !58
  %.0.i = select i1 %.not7.i, float %107, float %106, !dbg !58
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !58
  %.not8.i = icmp eq i32 %108, 0, !dbg !58
  %109 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %86, float -5.000000e-01) #4, !dbg !58
  %110 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %86, float -5.000000e-01) #4, !dbg !58
  %.07.i = select i1 %.not8.i, float %110, float %109, !dbg !58
  %111 = fmul float %86, %.07.i, !dbg !58
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !58
  %.not9.i = icmp eq i32 %112, 0, !dbg !58
  %113 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %111, float %86, float %86) #4, !dbg !58
  %114 = tail call float @llvm.nvvm.fma.rn.f(float %111, float %86, float %86) #4, !dbg !58
  %.06.i = select i1 %.not9.i, float %114, float %113, !dbg !58
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !58
  %.not10.i = icmp eq i32 %115, 0, !dbg !58
  %116 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !58
  %117 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !58
  %.04.i = select i1 %.not10.i, float %117, float %116, !dbg !58
  %118 = icmp ugt i32 %77, 2139095039, !dbg !58
  br i1 %118, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !58

__nv_fmaf_rn.exit.i.i:                            ; preds = %4
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !58
  %.not11.i = icmp eq i32 %119, 0, !dbg !58
  %120 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !58
  %121 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !58
  %.03.i = select i1 %.not11.i, float %121, float %120, !dbg !58
  br label %__nv_logf.exit, !dbg !58

__nv_logf.exit:                                   ; preds = %4, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %4 ], !dbg !58
  %122 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !58
  %r.i.1.i = select i1 %122, float 0xFFF0000000000000, float %r.i.0.i, !dbg !58
  %123 = fmul float %54, %r.i.1.i, !dbg !59
  %124 = bitcast float %123 to i32, !dbg !60
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 8, i32 31), !dbg !60
  %126 = bitcast i32 %125 to float, !dbg !60
  %127 = fadd float %123, %126, !dbg !64
  %128 = bitcast float %127 to i32, !dbg !60
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 4, i32 31), !dbg !60
  %130 = bitcast i32 %129 to float, !dbg !60
  %131 = fadd float %127, %130, !dbg !64
  %132 = bitcast float %131 to i32, !dbg !60
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 2, i32 31), !dbg !60
  %134 = bitcast i32 %133 to float, !dbg !60
  %135 = fadd float %131, %134, !dbg !64
  %136 = bitcast float %135 to i32, !dbg !60
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 1, i32 31), !dbg !60
  %138 = bitcast i32 %137 to float, !dbg !60
  %139 = fadd float %135, %138, !dbg !64
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float 1.600000e+01) #4, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %141 = and i32 %5, 63, !dbg !68
  %142 = icmp eq i32 %141, 0, !dbg !68
  %143 = bitcast float %140 to i32, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %143, ptr addrspace(1) %0, i1 %142) #4, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvp5pwcgmvaiq2tthqlm3wvavxodrb7hbluyfz3jomul5y4hzukd.py", directory: "inductor_cache/vp")
!4 = !{ptr @triton_per_fused_add_div_log_mean_mul_sum_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_log_mean_mul_sum_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_log_mean_mul_sum_1", linkageName: "triton_per_fused_add_div_log_mean_mul_sum_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 32, column: 32, scope: !7)
!12 = !DILocation(line: 31, column: 30, scope: !7)
!13 = !DILocation(line: 31, column: 35, scope: !7)
!14 = !DILocation(line: 32, column: 30, scope: !7)
!15 = !DILocation(line: 32, column: 37, scope: !7)
!16 = !DILocation(line: 33, column: 34, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 41, scope: !7)
!19 = !DILocation(line: 34, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 31, scope: !7)
!21 = !DILocation(line: 34, column: 42, scope: !7)
!22 = !DILocation(line: 35, column: 35, scope: !7)
!23 = !DILocation(line: 35, column: 31, scope: !7)
!24 = !DILocation(line: 35, column: 42, scope: !7)
!25 = !DILocation(line: 36, column: 31, scope: !7)
!26 = !DILocation(line: 36, column: 36, scope: !7)
!27 = !DILocation(line: 37, column: 31, scope: !7)
!28 = !DILocation(line: 37, column: 38, scope: !7)
!29 = !DILocation(line: 38, column: 31, scope: !7)
!30 = !DILocation(line: 38, column: 42, scope: !7)
!31 = !DILocation(line: 39, column: 31, scope: !7)
!32 = !DILocation(line: 39, column: 42, scope: !7)
!33 = !DILocation(line: 40, column: 31, scope: !7)
!34 = !DILocation(line: 40, column: 42, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 44, column: 18, scope: !7)
!37 = !DILocation(line: 45, column: 18, scope: !7)
!38 = !DILocation(line: 46, column: 18, scope: !7)
!39 = !DILocation(line: 49, column: 19, scope: !7)
!40 = !DILocation(line: 50, column: 20, scope: !7)
!41 = !DILocation(line: 51, column: 20, scope: !7)
!42 = !DILocation(line: 52, column: 20, scope: !7)
!43 = !DILocation(line: 55, column: 20, scope: !7)
!44 = !DILocation(line: 56, column: 19, scope: !7)
!45 = !DILocation(line: 58, column: 20, scope: !7)
!46 = !DILocation(line: 59, column: 20, scope: !7)
!47 = !DILocation(line: 60, column: 20, scope: !7)
!48 = !DILocation(line: 61, column: 20, scope: !7)
!49 = !DILocation(line: 62, column: 20, scope: !7)
!50 = !DILocation(line: 65, column: 20, scope: !7)
!51 = !DILocation(line: 66, column: 20, scope: !7)
!52 = !DILocation(line: 67, column: 20, scope: !7)
!53 = !DILocation(line: 68, column: 20, scope: !7)
!54 = !DILocation(line: 71, column: 20, scope: !7)
!55 = !DILocation(line: 72, column: 20, scope: !7)
!56 = !DILocation(line: 73, column: 20, scope: !7)
!57 = !DILocation(line: 74, column: 20, scope: !7)
!58 = !DILocation(line: 75, column: 24, scope: !7)
!59 = !DILocation(line: 76, column: 20, scope: !7)
!60 = !DILocation(line: 267, column: 36, scope: !61, inlinedAt: !63)
!61 = distinct !DILexicalBlockFile(scope: !7, file: !62, discriminator: 0)
!62 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!63 = !DILocation(line: 78, column: 26, scope: !7)
!64 = !DILocation(line: 256, column: 15, scope: !65, inlinedAt: !63)
!65 = distinct !DILexicalBlockFile(scope: !61, file: !62, discriminator: 0)
!66 = !DILocation(line: 80, column: 20, scope: !7)
!67 = !DILocation(line: 81, column: 4, scope: !7)
!68 = !DILocation(line: 82, column: 71, scope: !7)
!69 = !DILocation(line: 82, column: 4, scope: !7)
