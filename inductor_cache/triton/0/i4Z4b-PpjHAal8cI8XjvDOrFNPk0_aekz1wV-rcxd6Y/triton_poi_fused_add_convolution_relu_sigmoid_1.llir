; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_relu_sigmoid_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 2, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 6, !dbg !12
  %.lobit = and i32 %9, 1, !dbg !12
  %10 = or disjoint i32 %.lobit, 2, !dbg !12
  %11 = or disjoint i32 %7, %.lobit, !dbg !13
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %14 = shl i32 %13, 8, !dbg !15
  %15 = shl i32 %8, 2, !dbg !16
  %16 = and i32 %15, 252, !dbg !16
  %17 = and i32 %8, 127, !dbg !16
  %18 = or disjoint i32 %17, 128, !dbg !16
  %19 = shl i32 %8, 1, !dbg !16
  %20 = and i32 %19, 254, !dbg !16
  %21 = or disjoint i32 %14, %16, !dbg !17
  %22 = or disjoint i32 %14, %17, !dbg !17
  %23 = or disjoint i32 %14, %18, !dbg !17
  %24 = or disjoint i32 %14, %20, !dbg !17
  %25 = icmp slt i32 %21, 256, !dbg !18
  %26 = icmp slt i32 %24, 256, !dbg !18
  %27 = icmp slt i32 %22, 256, !dbg !18
  %28 = icmp slt i32 %23, 256, !dbg !18
  %.frozen = freeze i32 %7, !dbg !19
  %29 = sdiv i32 %.frozen, 4096, !dbg !19
  %30 = mul i32 %29, 4096, !dbg !20
  %.decomposed = sub i32 %.frozen, %30, !dbg !20
  %31 = shl i32 %11, 8, !dbg !21
  %32 = shl i32 %12, 8, !dbg !21
  %33 = add i32 %21, %31, !dbg !22
  %34 = add i32 %21, %32, !dbg !22
  %35 = sext i32 %33 to i64, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !23
  %37 = sext i32 %34 to i64, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !23
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %25) #2, !dbg !24
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !24
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !24
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !24
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !24
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %25) #2, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !24
  %49 = shl i32 %8, 4, !dbg !24
  %50 = and i32 %49, 1008, !dbg !24
  %51 = or disjoint i32 %50, %.lobit, !dbg !24
  %52 = and i32 %15, 508, !dbg !24
  %53 = getelementptr float, ptr addrspace(3) @global_smem, i32 %50, !dbg !24
  %54 = getelementptr float, ptr addrspace(3) %53, i32 %51, !dbg !24
  %55 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %55, i1 true) #2, !dbg !24
  %56 = or disjoint i32 %51, 4, !dbg !24
  %57 = or disjoint i32 %50, 4, !dbg !24
  %58 = getelementptr float, ptr addrspace(3) @global_smem, i32 %57, !dbg !24
  %59 = getelementptr float, ptr addrspace(3) %58, i32 %56, !dbg !24
  %60 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 true) #2, !dbg !24
  %61 = or disjoint i32 %51, 8, !dbg !24
  %62 = or disjoint i32 %50, 8, !dbg !24
  %63 = getelementptr float, ptr addrspace(3) @global_smem, i32 %62, !dbg !24
  %64 = getelementptr float, ptr addrspace(3) %63, i32 %61, !dbg !24
  %65 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %65, i1 true) #2, !dbg !24
  %66 = or disjoint i32 %51, 12, !dbg !24
  %67 = or disjoint i32 %50, 12, !dbg !24
  %68 = getelementptr float, ptr addrspace(3) @global_smem, i32 %67, !dbg !24
  %69 = getelementptr float, ptr addrspace(3) %68, i32 %66, !dbg !24
  %70 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #2, !dbg !24
  %71 = or disjoint i32 %51, 2, !dbg !24
  %72 = getelementptr float, ptr addrspace(3) %53, i32 %71, !dbg !24
  %73 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %73, i1 true) #2, !dbg !24
  %74 = or disjoint i32 %51, 6, !dbg !24
  %75 = getelementptr float, ptr addrspace(3) %58, i32 %74, !dbg !24
  %76 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 true) #2, !dbg !24
  %77 = or disjoint i32 %51, 10, !dbg !24
  %78 = getelementptr float, ptr addrspace(3) %63, i32 %77, !dbg !24
  %79 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #2, !dbg !24
  %80 = or disjoint i32 %51, 14, !dbg !24
  %81 = getelementptr float, ptr addrspace(3) %68, i32 %80, !dbg !24
  %82 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #2, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %.idx = shl nuw nsw i32 %52, 3, !dbg !24
  %83 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !24
  %84 = or disjoint i32 %52, 512, !dbg !24
  %.idx5 = shl nuw nsw i32 %84, 3, !dbg !24
  %85 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !24
  %86 = sext i32 %24 to i64, !dbg !25
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !25
  %88 = shl i32 %22, 12, !dbg !26
  %89 = shl i32 %23, 12, !dbg !26
  %90 = shl i32 %29, 20, !dbg !27
  %91 = add i32 %90, %.decomposed, !dbg !28
  %92 = add i32 %91, %88, !dbg !29
  %93 = add i32 %91, %89, !dbg !29
  %94 = sext i32 %92 to i64, !dbg !30
  %95 = getelementptr float, ptr addrspace(1) %2, i64 %94, !dbg !30
  %96 = sext i32 %93 to i64, !dbg !30
  %97 = getelementptr float, ptr addrspace(1) %2, i64 %96, !dbg !30
  %.idx10 = shl nuw nsw i32 %20, 3, !dbg !31
  %98 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx10, !dbg !31
  %99 = shl nuw nsw i32 %20, 1, !dbg !31
  %100 = or disjoint i32 %99, 2, !dbg !31
  %101 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %100, !dbg !31
  %.idx11 = shl nuw nsw i32 %17, 3, !dbg !31
  %102 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx11, !dbg !31
  %.idx12 = shl nuw nsw i32 %18, 3, !dbg !31
  %103 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx12, !dbg !31
  %104 = load <4 x float>, ptr addrspace(3) %83, align 16, !dbg !24
  %105 = shufflevector <4 x float> %104, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !24
  %106 = load <4 x float>, ptr addrspace(3) %85, align 16, !dbg !24
  %107 = shufflevector <4 x float> %106, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !24
  %108 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %87, i1 %26) #2, !dbg !32
  %109 = extractvalue { i32, i32 } %108, 0, !dbg !32
  %110 = extractvalue { i32, i32 } %108, 1, !dbg !32
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %95, i1 %27) #2, !dbg !33
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !33
  %113 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !33
  %114 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !33
  %115 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !33
  %116 = bitcast i32 %112 to float, !dbg !33
  %117 = bitcast i32 %113 to float, !dbg !33
  %118 = bitcast i32 %114 to float, !dbg !33
  %119 = bitcast i32 %115 to float, !dbg !33
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %97, i1 %28) #2, !dbg !33
  %121 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !33
  %122 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !33
  %123 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !33
  %124 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !33
  %125 = bitcast i32 %121 to float, !dbg !33
  %126 = bitcast i32 %122 to float, !dbg !33
  %127 = bitcast i32 %123 to float, !dbg !33
  %128 = bitcast i32 %124 to float, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %129 = insertelement <1 x i32> poison, i32 %109, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %129, i1 true) #2, !dbg !31
  %130 = insertelement <1 x i32> poison, i32 %110, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %130, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %131 = load float, ptr addrspace(3) %102, align 8, !dbg !31
  %132 = load float, ptr addrspace(3) %103, align 8, !dbg !31
  %133 = shufflevector <4 x float> %107, <4 x float> %105, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !31
  %134 = insertelement <8 x float> poison, float %132, i64 0, !dbg !31
  %135 = insertelement <8 x float> %134, float %131, i64 1, !dbg !31
  %136 = shufflevector <8 x float> %135, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !31
  %137 = fadd <8 x float> %133, %136, !dbg !31
  %138 = fsub float 0.000000e+00, %116, !dbg !34
  %139 = fsub float 0.000000e+00, %117, !dbg !34
  %140 = fsub float 0.000000e+00, %118, !dbg !34
  %141 = fsub float 0.000000e+00, %119, !dbg !34
  %142 = fsub float 0.000000e+00, %125, !dbg !34
  %143 = fsub float 0.000000e+00, %126, !dbg !34
  %144 = fsub float 0.000000e+00, %127, !dbg !34
  %145 = fsub float 0.000000e+00, %128, !dbg !34
  %146 = fmul float %138, 0x3FF7154760000000, !dbg !38
  %147 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %146) #2, !dbg !38
  %148 = fmul float %139, 0x3FF7154760000000, !dbg !38
  %149 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %148) #2, !dbg !38
  %150 = fmul float %140, 0x3FF7154760000000, !dbg !38
  %151 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %150) #2, !dbg !38
  %152 = fmul float %141, 0x3FF7154760000000, !dbg !38
  %153 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %152) #2, !dbg !38
  %154 = fmul float %142, 0x3FF7154760000000, !dbg !38
  %155 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %154) #2, !dbg !38
  %156 = fmul float %143, 0x3FF7154760000000, !dbg !38
  %157 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %156) #2, !dbg !38
  %158 = fmul float %144, 0x3FF7154760000000, !dbg !38
  %159 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %158) #2, !dbg !38
  %160 = fmul float %145, 0x3FF7154760000000, !dbg !38
  %161 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %160) #2, !dbg !38
  %162 = fadd float %147, 1.000000e+00, !dbg !39
  %163 = fadd float %149, 1.000000e+00, !dbg !39
  %164 = fadd float %151, 1.000000e+00, !dbg !39
  %165 = fadd float %153, 1.000000e+00, !dbg !39
  %166 = fadd float %155, 1.000000e+00, !dbg !39
  %167 = fadd float %157, 1.000000e+00, !dbg !39
  %168 = fadd float %159, 1.000000e+00, !dbg !39
  %169 = fadd float %161, 1.000000e+00, !dbg !39
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %162) #2, !dbg !40
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %163) #2, !dbg !40
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %164) #2, !dbg !40
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %165) #2, !dbg !40
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %166) #2, !dbg !40
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %167) #2, !dbg !40
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %168) #2, !dbg !40
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %169) #2, !dbg !40
  %178 = insertelement <8 x float> poison, float %177, i64 0, !dbg !41
  %179 = insertelement <8 x float> %178, float %176, i64 1, !dbg !41
  %180 = insertelement <8 x float> %179, float %175, i64 2, !dbg !41
  %181 = insertelement <8 x float> %180, float %174, i64 3, !dbg !41
  %182 = insertelement <8 x float> %181, float %173, i64 4, !dbg !41
  %183 = insertelement <8 x float> %182, float %172, i64 5, !dbg !41
  %184 = insertelement <8 x float> %183, float %171, i64 6, !dbg !41
  %185 = insertelement <8 x float> %184, float %170, i64 7, !dbg !41
  %186 = fcmp olt <8 x float> %185, zeroinitializer, !dbg !41
  %187 = select <8 x i1> %186, <8 x float> zeroinitializer, <8 x float> %185, !dbg !45
  %188 = fadd <8 x float> %137, %187, !dbg !46
  %189 = fcmp olt <8 x float> %188, zeroinitializer, !dbg !47
  %190 = extractelement <8 x i1> %189, i64 7, !dbg !49
  %191 = extractelement <8 x float> %188, i64 7, !dbg !49
  %192 = select i1 %190, float 0.000000e+00, float %191, !dbg !49
  %193 = extractelement <8 x i1> %189, i64 6, !dbg !49
  %194 = extractelement <8 x float> %188, i64 6, !dbg !49
  %195 = select i1 %193, float 0.000000e+00, float %194, !dbg !49
  %196 = extractelement <8 x i1> %189, i64 5, !dbg !49
  %197 = extractelement <8 x float> %188, i64 5, !dbg !49
  %198 = select i1 %196, float 0.000000e+00, float %197, !dbg !49
  %199 = extractelement <8 x i1> %189, i64 4, !dbg !49
  %200 = extractelement <8 x float> %188, i64 4, !dbg !49
  %201 = select i1 %199, float 0.000000e+00, float %200, !dbg !49
  %202 = extractelement <8 x i1> %189, i64 3, !dbg !49
  %203 = extractelement <8 x float> %188, i64 3, !dbg !49
  %204 = select i1 %202, float 0.000000e+00, float %203, !dbg !49
  %205 = extractelement <8 x i1> %189, i64 2, !dbg !49
  %206 = extractelement <8 x float> %188, i64 2, !dbg !49
  %207 = select i1 %205, float 0.000000e+00, float %206, !dbg !49
  %208 = extractelement <8 x i1> %189, i64 1, !dbg !49
  %209 = extractelement <8 x float> %188, i64 1, !dbg !49
  %210 = select i1 %208, float 0.000000e+00, float %209, !dbg !49
  %211 = extractelement <8 x i1> %189, i64 0, !dbg !49
  %212 = extractelement <8 x float> %188, i64 0, !dbg !49
  %213 = select i1 %211, float 0.000000e+00, float %212, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %214 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !51
  %215 = bitcast float %192 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %215, i1 true) #2, !dbg !51
  %216 = getelementptr inbounds i8, ptr addrspace(3) %214, i32 1028, !dbg !51
  %217 = bitcast float %195 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, <1 x i32> %217, i1 true) #2, !dbg !51
  %218 = getelementptr inbounds i8, ptr addrspace(3) %214, i32 2056, !dbg !51
  %219 = bitcast float %198 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %219, i1 true) #2, !dbg !51
  %220 = getelementptr inbounds i8, ptr addrspace(3) %214, i32 3084, !dbg !51
  %221 = bitcast float %201 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %221, i1 true) #2, !dbg !51
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !51
  %223 = bitcast float %204 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %223, i1 true) #2, !dbg !51
  %224 = getelementptr inbounds i8, ptr addrspace(3) %214, i32 1540, !dbg !51
  %225 = bitcast float %207 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %225, i1 true) #2, !dbg !51
  %226 = getelementptr inbounds i8, ptr addrspace(3) %214, i32 2568, !dbg !51
  %227 = bitcast float %210 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %227, i1 true) #2, !dbg !51
  %228 = getelementptr inbounds i8, ptr addrspace(3) %214, i32 3596, !dbg !51
  %229 = bitcast float %213 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 true) #2, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %230 = lshr i32 %52, 8, !dbg !51
  %231 = or disjoint i32 %230, %52, !dbg !51
  %232 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %231, !dbg !51
  %233 = load i32, ptr addrspace(3) %232, align 4, !dbg !51
  %234 = or disjoint i32 %52, 1, !dbg !51
  %235 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %230, !dbg !51
  %236 = getelementptr inbounds float, ptr addrspace(3) %235, i32 %234, !dbg !51
  %237 = load i32, ptr addrspace(3) %236, align 4, !dbg !51
  %238 = or disjoint i32 %231, 2, !dbg !51
  %239 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %238, !dbg !51
  %240 = load i32, ptr addrspace(3) %239, align 4, !dbg !51
  %241 = or disjoint i32 %52, 3, !dbg !51
  %242 = getelementptr inbounds float, ptr addrspace(3) %235, i32 %241, !dbg !51
  %243 = load i32, ptr addrspace(3) %242, align 4, !dbg !51
  %244 = lshr i32 %84, 8, !dbg !51
  %245 = or disjoint i32 %244, %84, !dbg !51
  %246 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %245, !dbg !51
  %247 = load i32, ptr addrspace(3) %246, align 4, !dbg !51
  %248 = or disjoint i32 %52, 513, !dbg !51
  %249 = lshr i32 %248, 8, !dbg !51
  %250 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %249, !dbg !51
  %251 = getelementptr inbounds float, ptr addrspace(3) %250, i32 %248, !dbg !51
  %252 = load i32, ptr addrspace(3) %251, align 4, !dbg !51
  %253 = or disjoint i32 %52, 514, !dbg !51
  %254 = lshr i32 %253, 8, !dbg !51
  %255 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %254, !dbg !51
  %256 = getelementptr inbounds float, ptr addrspace(3) %255, i32 %253, !dbg !51
  %257 = load i32, ptr addrspace(3) %256, align 4, !dbg !51
  %258 = or disjoint i32 %52, 515, !dbg !51
  %259 = lshr i32 %258, 8, !dbg !51
  %260 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %259, !dbg !51
  %261 = getelementptr inbounds float, ptr addrspace(3) %260, i32 %258, !dbg !51
  %262 = load i32, ptr addrspace(3) %261, align 4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %233, i32 %237, i32 %240, i32 %243, ptr addrspace(1) %36, i1 %25) #2, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %247, i32 %252, i32 %257, i32 %262, ptr addrspace(1) %38, i1 %25) #2, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crzkju7pxyalzapwjamrwxfxoddye4j5mhcsmqoji2u3nzuyt5t2.py", directory: "inductor_cache/rz")
!4 = !{ptr @triton_poi_fused_add_convolution_relu_sigmoid_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_relu_sigmoid_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_relu_sigmoid_1", linkageName: "triton_poi_fused_add_convolution_relu_sigmoid_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 43, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 34, scope: !7)
!24 = !DILocation(line: 32, column: 48, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 40, scope: !7)
!27 = !DILocation(line: 34, column: 53, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 45, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 33, column: 35, scope: !7)
!33 = !DILocation(line: 34, column: 58, scope: !7)
!34 = !DILocation(line: 47, column: 30, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!37 = !DILocation(line: 36, column: 22, scope: !7)
!38 = !DILocation(line: 47, column: 29, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 47, column: 20, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 47, column: 16, scope: !35, inlinedAt: !37)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 38, column: 40, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 39, column: 18, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !48)
!48 = !DILocation(line: 40, column: 40, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !48)
!50 = !DILocation(line: 41, column: 4, scope: !7)
!51 = !DILocation(line: 42, column: 48, scope: !7)
!52 = !DILocation(line: 42, column: 4, scope: !7)
