#loc = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":19:0)
#loc1 = loc(unknown)
#loc25 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":47:26)
#loc42 = loc(callsite(#loc1 at #loc25))
module {
  tt.func public @triton_per_fused_add_clamp_min_mean_mul_pow_reciprocal_softplus_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant 1.000000e+00 : f32 loc(#loc1)
    %cst_0 = arith.constant 2.000000e+01 : f32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<9.99999997E-7> : tensor<1x16xf32> loc(#loc1)
    %cst_2 = arith.constant dense<1.600000e+01> : tensor<1x1xf32> loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<1x16xf32> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.splat %1 : i1 -> tensor<1x1xi1> loc(#loc3)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc4)
    %4 = tt.expand_dims %3 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc5)
    %5 = arith.muli %0, %c16_i32 : i32 loc(#loc6)
    %6 = tt.splat %5 : i32 -> tensor<1x16xi32> loc(#loc7)
    %7 = arith.addi %4, %6 : tensor<1x16xi32> loc(#loc7)
    %8 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>> loc(#loc8)
    %9 = tt.addptr %8, %7 : tensor<1x16x!tt.ptr<f32>>, tensor<1x16xi32> loc(#loc8)
    %10 = tt.splat %1 : i1 -> tensor<1x16xi1> loc(#loc9)
    %11 = tt.load %9, %10, %cst_3 : tensor<1x16x!tt.ptr<f32>> loc(#loc9)
    %12 = tt.addptr %arg2, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc10)
    %13 = tt.load %12 : !tt.ptr<f32> loc(#loc11)
    %14 = arith.cmpf ogt, %11, %cst_1 : tensor<1x16xf32> loc(#loc37)
    %15 = arith.cmpf une, %11, %11 : tensor<1x16xf32> loc(#loc38)
    %16 = arith.ori %14, %15 : tensor<1x16xi1> loc(#loc39)
    %17 = arith.select %16, %11, %cst_1 : tensor<1x16xi1>, tensor<1x16xf32> loc(#loc40)
    %18 = arith.cmpf ogt, %13, %cst_0 : f32 loc(#loc17)
    %19 = math.exp %13 : f32 loc(#loc18)
    %20 = tt.extern_elementwise %19 {libname = "", libpath = "", pure = true, symbol = "__nv_log1pf"} : (f32) -> f32 loc(#loc19)
    %21 = arith.select %18, %13, %20 : f32 loc(#loc20)
    %22 = arith.addf %21, %cst : f32 loc(#loc21)
    %23 = tt.splat %22 : f32 -> tensor<1x16xf32> loc(#loc21)
    %24 = tt.extern_elementwise %17, %23 {libname = "", libpath = "", pure = true, symbol = "__nv_powf"} : (tensor<1x16xf32>, tensor<1x16xf32>) -> tensor<1x16xf32> loc(#loc22)
    %25 = arith.select %10, %24, %cst_3 : tensor<1x16xi1>, tensor<1x16xf32> loc(#loc23)
    %26 = "tt.reduce"(%25) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc25)), %arg7: f32 loc(callsite(#loc1 at #loc25))):
      %36 = arith.addf %arg6, %arg7 : f32 loc(#loc44)
      tt.reduce.return %36 : f32 loc(#loc41)
    }) : (tensor<1x16xf32>) -> tensor<1xf32> loc(#loc41)
    %27 = tt.expand_dims %26 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc27)
    %28 = arith.divf %27, %cst_2 : tensor<1x1xf32> loc(#loc28)
    %29 = arith.divf %cst, %22 : f32 loc(#loc29)
    %30 = tt.splat %29 : f32 -> tensor<1x1xf32> loc(#loc29)
    %31 = tt.extern_elementwise %28, %30 {libname = "", libpath = "", pure = true, symbol = "__nv_powf"} : (tensor<1x1xf32>, tensor<1x1xf32>) -> tensor<1x1xf32> loc(#loc30)
    gpu.barrier loc(#loc31)
    %32 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc32)
    %33 = tt.splat %32 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc32)
    tt.store %33, %28, %2 : tensor<1x1x!tt.ptr<f32>> loc(#loc33)
    %34 = tt.addptr %arg3, %0 : !tt.ptr<f32>, i32 loc(#loc34)
    %35 = tt.splat %34 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc34)
    tt.store %35, %31, %2 : tensor<1x1x!tt.ptr<f32>> loc(#loc35)
    tt.return loc(#loc36)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":23:28)
#loc3 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":25:21)
#loc4 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":26:26)
#loc5 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":26:34)
#loc6 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":31:38)
#loc7 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":31:35)
#loc8 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":31:30)
#loc9 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":31:43)
#loc10 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":32:30)
#loc11 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":32:19)
#loc12 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc13 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":36:40)
#loc14 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc15 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc16 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc17 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":38:18)
#loc18 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":39:23)
#loc19 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":40:27)
#loc20 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":41:32)
#loc21 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":43:19)
#loc22 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":44:32)
#loc23 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":46:35)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc27 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":47:29)
#loc28 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":49:20)
#loc29 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":56:20)
#loc30 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":58:33)
#loc31 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":59:4)
#loc32 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":60:28)
#loc33 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":60:40)
#loc34 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":61:25)
#loc35 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":61:37)
#loc36 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":61:4)
#loc37 = loc(callsite(#loc12 at #loc13))
#loc38 = loc(callsite(#loc14 at #loc13))
#loc39 = loc(callsite(#loc15 at #loc13))
#loc40 = loc(callsite(#loc16 at #loc13))
#loc41 = loc(callsite(#loc24 at #loc25))
#loc43 = loc(callsite(#loc26 at #loc24))
#loc44 = loc(callsite(#loc43 at #loc25))
