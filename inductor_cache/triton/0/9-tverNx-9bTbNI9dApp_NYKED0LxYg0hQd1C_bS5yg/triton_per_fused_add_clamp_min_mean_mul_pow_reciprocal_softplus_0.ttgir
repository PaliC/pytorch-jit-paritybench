#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":19:0)
#loc1 = loc(unknown)
#loc24 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":47:26)
#loc41 = loc(callsite(#loc1 at #loc24))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_clamp_min_mean_mul_pow_reciprocal_softplus_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant 1.000000e+00 : f32 loc(#loc1)
    %cst_0 = arith.constant 2.000000e+01 : f32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<9.99999997E-7> : tensor<1x16xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1.600000e+01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc4)
    %4 = arith.muli %0, %c16_i32 : i32 loc(#loc5)
    %5 = tt.splat %4 : i32 -> tensor<1x16xi32, #blocked> loc(#loc6)
    %6 = arith.addi %3, %5 : tensor<1x16xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %6 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc7)
    %9 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked> loc(#loc8)
    %10 = tt.load %8, %9, %cst_3 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc8)
    %11 = tt.addptr %arg2, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc9)
    %12 = tt.load %11 : !tt.ptr<f32> loc(#loc10)
    %13 = arith.cmpf ogt, %10, %cst_1 : tensor<1x16xf32, #blocked> loc(#loc36)
    %14 = arith.cmpf une, %10, %10 : tensor<1x16xf32, #blocked> loc(#loc37)
    %15 = arith.ori %13, %14 : tensor<1x16xi1, #blocked> loc(#loc38)
    %16 = arith.select %15, %10, %cst_1 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc39)
    %17 = arith.cmpf ogt, %12, %cst_0 : f32 loc(#loc16)
    %18 = math.exp %12 : f32 loc(#loc17)
    %19 = tt.extern_elementwise %18 {libname = "", libpath = "", pure = true, symbol = "__nv_log1pf"} : (f32) -> f32 loc(#loc18)
    %20 = arith.select %17, %12, %19 : f32 loc(#loc19)
    %21 = arith.addf %20, %cst : f32 loc(#loc20)
    %22 = tt.splat %21 : f32 -> tensor<1x16xf32, #blocked> loc(#loc20)
    %23 = tt.extern_elementwise %16, %22 {libname = "", libpath = "", pure = true, symbol = "__nv_powf"} : (tensor<1x16xf32, #blocked>, tensor<1x16xf32, #blocked>) -> tensor<1x16xf32, #blocked> loc(#loc21)
    %24 = arith.select %9, %23, %cst_3 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc22)
    %25 = "tt.reduce"(%24) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc24)), %arg7: f32 loc(callsite(#loc1 at #loc24))):
      %36 = arith.addf %arg6, %arg7 : f32 loc(#loc43)
      tt.reduce.return %36 : f32 loc(#loc40)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc40)
    %26 = tt.expand_dims %25 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc26)
    %27 = arith.divf %26, %cst_2 : tensor<1x1xf32, #blocked> loc(#loc27)
    %28 = arith.divf %cst, %21 : f32 loc(#loc28)
    %29 = tt.splat %28 : f32 -> tensor<1x1xf32, #blocked> loc(#loc28)
    %30 = tt.extern_elementwise %27, %29 {libname = "", libpath = "", pure = true, symbol = "__nv_powf"} : (tensor<1x1xf32, #blocked>, tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc29)
    gpu.barrier loc(#loc30)
    %31 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc31)
    %32 = tt.splat %31 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc32)
    %33 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc32)
    tt.store %32, %27, %33 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc32)
    %34 = tt.addptr %arg3, %0 : !tt.ptr<f32>, i32 loc(#loc33)
    %35 = tt.splat %34 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc34)
    tt.store %35, %30, %33 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc34)
    tt.return loc(#loc35)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":23:28)
#loc3 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":25:21)
#loc4 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":26:34)
#loc5 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":31:38)
#loc6 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":31:35)
#loc7 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":31:30)
#loc8 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":31:43)
#loc9 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":32:30)
#loc10 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":32:19)
#loc11 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc12 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":36:40)
#loc13 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc14 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc15 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc16 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":38:18)
#loc17 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":39:23)
#loc18 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":40:27)
#loc19 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":41:32)
#loc20 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":43:19)
#loc21 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":44:32)
#loc22 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":46:35)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc26 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":47:29)
#loc27 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":49:20)
#loc28 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":56:20)
#loc29 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":58:33)
#loc30 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":59:4)
#loc31 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":60:28)
#loc32 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":60:40)
#loc33 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":61:25)
#loc34 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":61:37)
#loc35 = loc("inductor_cache/ho/chohr2hjkik3pbi3u4iuw55ttotpr5ytkw3pf2apmgah7cu34njx.py":61:4)
#loc36 = loc(callsite(#loc11 at #loc12))
#loc37 = loc(callsite(#loc13 at #loc12))
#loc38 = loc(callsite(#loc14 at #loc12))
#loc39 = loc(callsite(#loc15 at #loc12))
#loc40 = loc(callsite(#loc23 at #loc24))
#loc42 = loc(callsite(#loc25 at #loc23))
#loc43 = loc(callsite(#loc42 at #loc24))
