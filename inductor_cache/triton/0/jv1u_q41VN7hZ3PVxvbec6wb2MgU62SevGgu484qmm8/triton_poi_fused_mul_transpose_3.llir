; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_mul_transpose_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 14, !dbg !12
  %14 = lshr i32 %11, 4, !dbg !12
  %15 = and i32 %14, 7, !dbg !12
  %16 = or disjoint i32 %10, %13, !dbg !13
  %17 = or disjoint i32 %10, %15, !dbg !13
  %18 = or disjoint i32 %17, 8, !dbg !13
  %19 = icmp slt i32 %16, 16, !dbg !14
  %20 = icmp slt i32 %17, 16, !dbg !14
  %21 = icmp slt i32 %18, 16, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %23 = shl i32 %22, 4, !dbg !16
  %24 = lshr i32 %11, 3, !dbg !17
  %25 = and i32 %24, 15, !dbg !17
  %26 = and i32 %11, 15, !dbg !17
  %27 = or disjoint i32 %23, %25, !dbg !18
  %28 = or disjoint i32 %23, %26, !dbg !18
  %29 = icmp slt i32 %27, 17, !dbg !19
  %30 = icmp slt i32 %28, 17, !dbg !19
  %31 = srem i32 %16, 4, !dbg !20
  %32 = shl i32 %27, 4, !dbg !21
  %33 = add i32 %32, %16, !dbg !22
  %34 = sext i32 %33 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !23
  %36 = and i1 %19, %29, !dbg !24
  %37 = and i1 %20, %30, !dbg !24
  %38 = and i1 %21, %30, !dbg !24
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %36) #2, !dbg !25
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !25
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !25
  %42 = bitcast i32 %40 to float, !dbg !25
  %43 = bitcast i32 %41 to float, !dbg !25
  %44 = sext i32 %31 to i64, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !26
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %45, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #2, !dbg !27
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !27
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !27
  %49 = bitcast i32 %47 to float, !dbg !27
  %50 = bitcast i32 %48 to float, !dbg !27
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !28
  %52 = getelementptr i8, ptr addrspace(1) %51, i64 -16, !dbg !28
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %52, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !29
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !30
  %55 = getelementptr i8, ptr addrspace(1) %54, i64 -32, !dbg !30
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %55, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !31
  %57 = fadd float %42, %49, !dbg !32
  %58 = fadd float %43, %50, !dbg !32
  %59 = mul i32 %17, 17, !dbg !33
  %60 = mul i32 %18, 17, !dbg !33
  %61 = add i32 %28, %59, !dbg !34
  %62 = add i32 %28, %60, !dbg !34
  %63 = sext i32 %61 to i64, !dbg !35
  %64 = getelementptr float, ptr addrspace(1) %4, i64 %63, !dbg !35
  %65 = sext i32 %62 to i64, !dbg !35
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %65, !dbg !35
  %67 = shl i32 %11, 5, !dbg !36
  %68 = and i32 %67, 224, !dbg !36
  %69 = or disjoint i32 %68, %25, !dbg !36
  %70 = and i32 %11, 127, !dbg !36
  %71 = lshr exact i32 %68, 2, !dbg !36
  %72 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %71, !dbg !36
  %73 = getelementptr float, ptr addrspace(3) %72, i32 %69, !dbg !36
  %74 = bitcast float %57 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 true) #2, !dbg !36
  %75 = or disjoint i32 %69, 16, !dbg !36
  %76 = lshr i32 %75, 4, !dbg !36
  %77 = getelementptr float, ptr addrspace(3) @global_smem, i32 %76, !dbg !36
  %78 = getelementptr float, ptr addrspace(3) %77, i32 %75, !dbg !36
  %79 = bitcast float %58 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %80 = lshr i32 %70, 4, !dbg !36
  %81 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %80, !dbg !36
  %82 = getelementptr inbounds float, ptr addrspace(3) %81, i32 %70, !dbg !36
  %83 = load i32, ptr addrspace(3) %82, align 4, !dbg !36
  %84 = or disjoint i32 %70, 128, !dbg !36
  %85 = lshr i32 %84, 4, !dbg !36
  %86 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %85, !dbg !36
  %87 = getelementptr inbounds float, ptr addrspace(3) %86, i32 %84, !dbg !36
  %88 = load i32, ptr addrspace(3) %87, align 4, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %83, ptr addrspace(1) %64, i1 %37) #2, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %88, ptr addrspace(1) %66, i1 %38) #2, !dbg !36
  %89 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !37
  %90 = bitcast float %57 to i32, !dbg !38
  %91 = bitcast float %58 to i32, !dbg !38
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %90, i32 %91, ptr addrspace(1) %89, i1 %36) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwwgsrp2azrmbd7utsadkpcw4nqy5vcm4qyxczwrqxprmcu2yfhk.py", directory: "inductor_cache/ww")
!4 = !{ptr @triton_poi_fused_mul_transpose_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_transpose_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_transpose_3", linkageName: "triton_poi_fused_mul_transpose_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 38, scope: !7)
!22 = !DILocation(line: 31, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 51, scope: !7)
!25 = !DILocation(line: 31, column: 43, scope: !7)
!26 = !DILocation(line: 37, column: 30, scope: !7)
!27 = !DILocation(line: 37, column: 70, scope: !7)
!28 = !DILocation(line: 42, column: 31, scope: !7)
!29 = !DILocation(line: 42, column: 78, scope: !7)
!30 = !DILocation(line: 46, column: 31, scope: !7)
!31 = !DILocation(line: 46, column: 78, scope: !7)
!32 = !DILocation(line: 49, column: 19, scope: !7)
!33 = !DILocation(line: 52, column: 33, scope: !7)
!34 = !DILocation(line: 52, column: 30, scope: !7)
!35 = !DILocation(line: 52, column: 25, scope: !7)
!36 = !DILocation(line: 52, column: 45, scope: !7)
!37 = !DILocation(line: 53, column: 25, scope: !7)
!38 = !DILocation(line: 53, column: 45, scope: !7)
!39 = !DILocation(line: 53, column: 4, scope: !7)
