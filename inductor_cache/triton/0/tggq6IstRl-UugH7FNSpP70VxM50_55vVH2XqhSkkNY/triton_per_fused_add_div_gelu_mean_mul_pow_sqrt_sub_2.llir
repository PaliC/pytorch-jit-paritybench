; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_div_gelu_mean_mul_pow_sqrt_sub_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 3, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 3, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = and i32 %11, 7, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = icmp slt i32 %15, 1024, !dbg !14
  %17 = shl i32 %11, 1, !dbg !15
  %18 = and i32 %17, 14, !dbg !15
  %19 = shl i32 %15, 4, !dbg !16
  %20 = or disjoint i32 %19, %18, !dbg !17
  %21 = sext i32 %20 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !18
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !19
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !19
  %25 = extractvalue { i32, i32 } %23, 1, !dbg !19
  %26 = bitcast i32 %24 to float, !dbg !19
  %27 = bitcast i32 %25 to float, !dbg !19
  %28 = zext nneg i32 %18 to i64, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !20
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !21
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !21
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !21
  %33 = bitcast i32 %31 to float, !dbg !21
  %34 = bitcast i32 %32 to float, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !22
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !23
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !23
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !23
  %39 = bitcast i32 %37 to float, !dbg !23
  %40 = bitcast i32 %38 to float, !dbg !23
  %41 = fadd float %26, %27, !dbg !24
  %42 = select i1 %16, float %41, float 0.000000e+00, !dbg !24
  %43 = bitcast float %42 to i32, !dbg !29
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 4, i32 31), !dbg !29
  %45 = bitcast i32 %44 to float, !dbg !29
  %46 = fadd float %42, %45, !dbg !24
  %47 = bitcast float %46 to i32, !dbg !29
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 2, i32 31), !dbg !29
  %49 = bitcast i32 %48 to float, !dbg !29
  %50 = fadd float %46, %49, !dbg !24
  %51 = bitcast float %50 to i32, !dbg !29
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 1, i32 31), !dbg !29
  %53 = bitcast i32 %52 to float, !dbg !29
  %54 = fadd float %50, %53, !dbg !24
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !30
  %56 = bitcast float %54 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %56, i1 true) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %57 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !30
  %58 = load float, ptr addrspace(3) %57, align 4, !dbg !30
  %59 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float 1.600000e+01) #5, !dbg !30
  %60 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %54, float 1.600000e+01) #5, !dbg !30
  %61 = fsub float %26, %60, !dbg !31
  %62 = fsub float %27, %60, !dbg !31
  %63 = fmul float %61, %61, !dbg !32
  %64 = fmul float %62, %62, !dbg !32
  %65 = fadd float %63, %64, !dbg !33
  %66 = select i1 %16, float %65, float 0.000000e+00, !dbg !33
  %67 = bitcast float %66 to i32, !dbg !35
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 4, i32 31), !dbg !35
  %69 = bitcast i32 %68 to float, !dbg !35
  %70 = fadd float %66, %69, !dbg !33
  %71 = bitcast float %70 to i32, !dbg !35
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 2, i32 31), !dbg !35
  %73 = bitcast i32 %72 to float, !dbg !35
  %74 = fadd float %70, %73, !dbg !33
  %75 = bitcast float %74 to i32, !dbg !35
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 1, i32 31), !dbg !35
  %77 = bitcast i32 %76 to float, !dbg !35
  %78 = fadd float %74, %77, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %79 = bitcast float %78 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %79, i1 true) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %80 = load float, ptr addrspace(3) %57, align 4, !dbg !36
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float 1.600000e+01) #5, !dbg !37
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %78, float 1.600000e+01) #5, !dbg !37
  %83 = fadd float %81, 0x3EB0C6F7A0000000, !dbg !38
  %84 = fadd float %82, 0x3EB0C6F7A0000000, !dbg !38
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i = icmp eq i32 %85, 0, !dbg !36
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %.not1.i = icmp eq i32 %86, 0, !dbg !36
  br i1 %.not.i, label %92, label %87, !dbg !36

87:                                               ; preds = %8
  br i1 %.not1.i, label %90, label %88, !dbg !36

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #5, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #5, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

92:                                               ; preds = %8
  br i1 %.not1.i, label %95, label %93, !dbg !36

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #5, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #5, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %88, %90, %93, %95
  %.0.i = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !36
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i6 = icmp eq i32 %99, 0, !dbg !36
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %.not1.i9 = icmp eq i32 %100, 0, !dbg !36
  br i1 %.not.i6, label %106, label %101, !dbg !36

101:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %104, label %102, !dbg !36

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #5, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #5, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

106:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %109, label %107, !dbg !36

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #5, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #5, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

__nv_sqrtf.exit10:                                ; preds = %102, %104, %107, %109
  %.0.i8 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !36
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float %.0.i8) #5, !dbg !39
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float %.0.i8) #5, !dbg !39
  %113 = fmul float %111, %33, !dbg !40
  %114 = fmul float %112, %34, !dbg !40
  %115 = fadd float %113, %39, !dbg !41
  %116 = fadd float %114, %40, !dbg !41
  %117 = fmul float %115, 0x3FE6A09E60000000, !dbg !42
  %118 = fmul float %116, 0x3FE6A09E60000000, !dbg !42
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i11 = icmp eq i32 %119, 0, !dbg !43
  %120 = tail call float @llvm.nvvm.fabs.ftz.f(float %117) #5, !dbg !43
  %121 = tail call float @llvm.nvvm.fabs.f(float %117) #5, !dbg !43
  %.0.i12 = select i1 %.not.i11, float %121, float %120, !dbg !43
  %122 = fcmp oge float %.0.i12, 0x3FF00C1FC0000000, !dbg !43
  br i1 %122, label %__nv_fabsf.exit1.i, label %124, !dbg !43

__nv_fabsf.exit1.i:                               ; preds = %__nv_sqrtf.exit10
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not1.i14 = icmp eq i32 %123, 0, !dbg !43
  %.01.i = select i1 %.not1.i14, float %121, float %120, !dbg !43
  br label %__internal_fmad.exit.i, !dbg !43

124:                                              ; preds = %__nv_sqrtf.exit10
  %125 = fmul float %117, %117, !dbg !43
  br label %__internal_fmad.exit.i, !dbg !43

__internal_fmad.exit.i:                           ; preds = %124, %__nv_fabsf.exit1.i
  %126 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i ], [ 0x3FC06EBA60000000, %124 ], !dbg !43
  %127 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i ], [ 0xBFD8127580000000, %124 ], !dbg !43
  %128 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i ], [ 0x3FBCE315E0000000, %124 ], !dbg !43
  %129 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i ], [ 0xBF9B837CE0000000, %124 ], !dbg !43
  %130 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i ], [ 0x3F755ABD40000000, %124 ], !dbg !43
  %131 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i ], [ 0xBF4AE9A400000000, %124 ], !dbg !43
  %132 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i ], [ 0x3F163D2D40000000, %124 ], !dbg !43
  %133 = phi float [ %.01.i, %__nv_fabsf.exit1.i ], [ %125, %124 ], !dbg !43
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not2.i13 = icmp eq i32 %134, 0, !dbg !43
  %135 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %132, float %133, float %131) #5, !dbg !43
  %136 = tail call float @llvm.nvvm.fma.rn.f(float %132, float %133, float %131) #5, !dbg !43
  %.02.i = select i1 %.not2.i13, float %136, float %135, !dbg !43
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not3.i = icmp eq i32 %137, 0, !dbg !43
  %138 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float %133, float %130) #5, !dbg !43
  %139 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float %133, float %130) #5, !dbg !43
  %.03.i = select i1 %.not3.i, float %139, float %138, !dbg !43
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not4.i = icmp eq i32 %140, 0, !dbg !43
  %141 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i, float %133, float %129) #5, !dbg !43
  %142 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i, float %133, float %129) #5, !dbg !43
  %.04.i = select i1 %.not4.i, float %142, float %141, !dbg !43
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not5.i = icmp eq i32 %143, 0, !dbg !43
  %144 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %133, float %128) #5, !dbg !43
  %145 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %133, float %128) #5, !dbg !43
  %.05.i = select i1 %.not5.i, float %145, float %144, !dbg !43
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not6.i = icmp eq i32 %146, 0, !dbg !43
  %147 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %133, float %127) #5, !dbg !43
  %148 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %133, float %127) #5, !dbg !43
  %.06.i = select i1 %.not6.i, float %148, float %147, !dbg !43
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not7.i = icmp eq i32 %149, 0, !dbg !43
  %150 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %133, float %126) #5, !dbg !43
  %151 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %133, float %126) #5, !dbg !43
  %.07.i = select i1 %.not7.i, float %151, float %150, !dbg !43
  %152 = fneg float %133, !dbg !43
  %153 = select i1 %122, float %152, float %117, !dbg !43
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not8.i = icmp eq i32 %154, 0, !dbg !43
  %155 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %153, float %153) #5, !dbg !43
  %156 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %153, float %153) #5, !dbg !43
  %.08.i = select i1 %.not8.i, float %156, float %155, !dbg !43
  br i1 %122, label %157, label %__nv_erff.exit, !dbg !43

157:                                              ; preds = %__internal_fmad.exit.i
  %158 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i) #5, !dbg !43
  %159 = fsub float 1.000000e+00, %158, !dbg !43
  %160 = bitcast float %159 to i32, !dbg !43
  %161 = bitcast float %117 to i32, !dbg !43
  %162 = and i32 %161, -2147483648, !dbg !43
  %163 = or i32 %162, %160, !dbg !43
  %164 = bitcast i32 %163 to float, !dbg !43
  br label %__nv_erff.exit, !dbg !43

__nv_erff.exit:                                   ; preds = %__internal_fmad.exit.i, %157
  %r.0.i = phi float [ %164, %157 ], [ %.08.i, %__internal_fmad.exit.i ], !dbg !43
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i15 = icmp eq i32 %165, 0, !dbg !43
  %166 = tail call float @llvm.nvvm.fabs.ftz.f(float %118) #5, !dbg !43
  %167 = tail call float @llvm.nvvm.fabs.f(float %118) #5, !dbg !43
  %.0.i16 = select i1 %.not.i15, float %167, float %166, !dbg !43
  %168 = fcmp oge float %.0.i16, 0x3FF00C1FC0000000, !dbg !43
  br i1 %168, label %__nv_fabsf.exit1.i33, label %170, !dbg !43

__nv_fabsf.exit1.i33:                             ; preds = %__nv_erff.exit
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not1.i34 = icmp eq i32 %169, 0, !dbg !43
  %.01.i35 = select i1 %.not1.i34, float %167, float %166, !dbg !43
  br label %__internal_fmad.exit.i17, !dbg !43

170:                                              ; preds = %__nv_erff.exit
  %171 = fmul float %118, %118, !dbg !43
  br label %__internal_fmad.exit.i17, !dbg !43

__internal_fmad.exit.i17:                         ; preds = %170, %__nv_fabsf.exit1.i33
  %172 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i33 ], [ 0x3FC06EBA60000000, %170 ], !dbg !43
  %173 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i33 ], [ 0xBFD8127580000000, %170 ], !dbg !43
  %174 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i33 ], [ 0x3FBCE315E0000000, %170 ], !dbg !43
  %175 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i33 ], [ 0xBF9B837CE0000000, %170 ], !dbg !43
  %176 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i33 ], [ 0x3F755ABD40000000, %170 ], !dbg !43
  %177 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i33 ], [ 0xBF4AE9A400000000, %170 ], !dbg !43
  %178 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i33 ], [ 0x3F163D2D40000000, %170 ], !dbg !43
  %179 = phi float [ %.01.i35, %__nv_fabsf.exit1.i33 ], [ %171, %170 ], !dbg !43
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not2.i18 = icmp eq i32 %180, 0, !dbg !43
  %181 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %178, float %179, float %177) #5, !dbg !43
  %182 = tail call float @llvm.nvvm.fma.rn.f(float %178, float %179, float %177) #5, !dbg !43
  %.02.i19 = select i1 %.not2.i18, float %182, float %181, !dbg !43
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not3.i20 = icmp eq i32 %183, 0, !dbg !43
  %184 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i19, float %179, float %176) #5, !dbg !43
  %185 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i19, float %179, float %176) #5, !dbg !43
  %.03.i21 = select i1 %.not3.i20, float %185, float %184, !dbg !43
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not4.i22 = icmp eq i32 %186, 0, !dbg !43
  %187 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i21, float %179, float %175) #5, !dbg !43
  %188 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i21, float %179, float %175) #5, !dbg !43
  %.04.i23 = select i1 %.not4.i22, float %188, float %187, !dbg !43
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not5.i24 = icmp eq i32 %189, 0, !dbg !43
  %190 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i23, float %179, float %174) #5, !dbg !43
  %191 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i23, float %179, float %174) #5, !dbg !43
  %.05.i25 = select i1 %.not5.i24, float %191, float %190, !dbg !43
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not6.i26 = icmp eq i32 %192, 0, !dbg !43
  %193 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i25, float %179, float %173) #5, !dbg !43
  %194 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i25, float %179, float %173) #5, !dbg !43
  %.06.i27 = select i1 %.not6.i26, float %194, float %193, !dbg !43
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not7.i28 = icmp eq i32 %195, 0, !dbg !43
  %196 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i27, float %179, float %172) #5, !dbg !43
  %197 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i27, float %179, float %172) #5, !dbg !43
  %.07.i29 = select i1 %.not7.i28, float %197, float %196, !dbg !43
  %198 = fneg float %179, !dbg !43
  %199 = select i1 %168, float %198, float %118, !dbg !43
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not8.i30 = icmp eq i32 %200, 0, !dbg !43
  %201 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i29, float %199, float %199) #5, !dbg !43
  %202 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i29, float %199, float %199) #5, !dbg !43
  %.08.i31 = select i1 %.not8.i30, float %202, float %201, !dbg !43
  br i1 %168, label %203, label %__nv_erff.exit36, !dbg !43

203:                                              ; preds = %__internal_fmad.exit.i17
  %204 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i31) #5, !dbg !43
  %205 = fsub float 1.000000e+00, %204, !dbg !43
  %206 = bitcast float %205 to i32, !dbg !43
  %207 = bitcast float %118 to i32, !dbg !43
  %208 = and i32 %207, -2147483648, !dbg !43
  %209 = or i32 %208, %206, !dbg !43
  %210 = bitcast i32 %209 to float, !dbg !43
  br label %__nv_erff.exit36, !dbg !43

__nv_erff.exit36:                                 ; preds = %__internal_fmad.exit.i17, %203
  %r.0.i32 = phi float [ %210, %203 ], [ %.08.i31, %__internal_fmad.exit.i17 ], !dbg !43
  %211 = fmul float %116, 5.000000e-01, !dbg !44
  %212 = fmul float %115, 5.000000e-01, !dbg !44
  %213 = or disjoint i32 %10, %14, !dbg !13
  %214 = icmp slt i32 %213, 1024, !dbg !14
  %215 = fadd float %r.0.i, 1.000000e+00, !dbg !45
  %216 = fadd float %r.0.i32, 1.000000e+00, !dbg !45
  %217 = fmul float %212, %215, !dbg !46
  %218 = fmul float %211, %216, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %219 = sext i32 %213 to i64, !dbg !48
  %220 = getelementptr float, ptr addrspace(1) %0, i64 %219, !dbg !48
  %221 = and i32 %11, 56, !dbg !49
  %222 = icmp eq i32 %221, 0, !dbg !49
  %223 = bitcast float %59 to i32, !dbg !49
  %224 = and i1 %222, %214, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %223, ptr addrspace(1) %220, i1 %224) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %225 = getelementptr float, ptr addrspace(1) %1, i64 %219, !dbg !51
  %226 = bitcast float %.0.i to i32, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %226, ptr addrspace(1) %225, i1 %224) #5, !dbg !52
  %227 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !53
  %228 = bitcast float %217 to i32, !dbg !54
  %229 = bitcast float %218 to i32, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %228, i32 %229, ptr addrspace(1) %227, i1 %16) #5, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7tef54z25uumihhncepm2cyxrnfh6jcgraxkmxn54dlydxrqgmb.py", directory: "inductor_cache/7t")
!4 = !{ptr @triton_per_fused_add_div_gelu_mean_mul_pow_sqrt_sub_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_gelu_mean_mul_pow_sqrt_sub_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_gelu_mean_mul_pow_sqrt_sub_2", linkageName: "triton_per_fused_add_div_gelu_mean_mul_pow_sqrt_sub_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 38, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 43, scope: !7)
!20 = !DILocation(line: 32, column: 31, scope: !7)
!21 = !DILocation(line: 32, column: 36, scope: !7)
!22 = !DILocation(line: 33, column: 31, scope: !7)
!23 = !DILocation(line: 33, column: 36, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 36, column: 24, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 18, scope: !7)
!33 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !34)
!34 = !DILocation(line: 43, column: 26, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !34)
!36 = !DILocation(line: 47, column: 27, scope: !7)
!37 = !DILocation(line: 44, column: 20, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 48, column: 19, scope: !7)
!40 = !DILocation(line: 49, column: 20, scope: !7)
!41 = !DILocation(line: 50, column: 20, scope: !7)
!42 = !DILocation(line: 54, column: 20, scope: !7)
!43 = !DILocation(line: 55, column: 26, scope: !7)
!44 = !DILocation(line: 52, column: 20, scope: !7)
!45 = !DILocation(line: 57, column: 20, scope: !7)
!46 = !DILocation(line: 58, column: 20, scope: !7)
!47 = !DILocation(line: 59, column: 4, scope: !7)
!48 = !DILocation(line: 60, column: 28, scope: !7)
!49 = !DILocation(line: 60, column: 39, scope: !7)
!50 = !DILocation(line: 61, column: 4, scope: !7)
!51 = !DILocation(line: 62, column: 28, scope: !7)
!52 = !DILocation(line: 62, column: 40, scope: !7)
!53 = !DILocation(line: 63, column: 28, scope: !7)
!54 = !DILocation(line: 63, column: 48, scope: !7)
!55 = !DILocation(line: 63, column: 4, scope: !7)
