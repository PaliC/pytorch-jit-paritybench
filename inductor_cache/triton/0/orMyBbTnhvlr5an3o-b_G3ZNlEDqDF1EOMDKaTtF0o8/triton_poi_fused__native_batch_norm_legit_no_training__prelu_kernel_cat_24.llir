; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %17 = sdiv i32 %.frozen, 256, !dbg !14
  %18 = mul i32 %17, 256, !dbg !15
  %.decomposed = sub i32 %.frozen, %18, !dbg !15
  %19 = sext i32 %.decomposed to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !16
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %4, i64 %19, !dbg !18
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !19
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !19
  %25 = extractvalue { i32, i32 } %23, 1, !dbg !19
  %26 = bitcast i32 %24 to float, !dbg !19
  %27 = bitcast i32 %25 to float, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %5, i64 %19, !dbg !20
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %6, i64 %19, !dbg !22
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %7, i64 %19, !dbg !24
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !25
  %34 = icmp slt i32 %.decomposed, 128, !dbg !26
  %35 = shl nsw i32 %17, 7, !dbg !27
  %36 = add nsw i32 %35, %.decomposed, !dbg !28
  %37 = sext i32 %36 to i64, !dbg !29
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !29
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %38, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #3, !dbg !30
  %40 = icmp sgt i32 %.decomposed, 127, !dbg !31
  %41 = sext i32 %36 to i64, !dbg !32
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !32
  %43 = getelementptr i8, ptr addrspace(1) %42, i64 -512, !dbg !32
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %43, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #3, !dbg !33
  %45 = fadd float %26, 0x3EE4F8B580000000, !dbg !34
  %46 = fadd float %27, 0x3EE4F8B580000000, !dbg !34
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i = icmp eq i32 %47, 0, !dbg !35
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i = icmp eq i32 %48, 0, !dbg !35
  br i1 %.not.i, label %54, label %49, !dbg !35

49:                                               ; preds = %10
  br i1 %.not1.i, label %52, label %50, !dbg !35

50:                                               ; preds = %49
  %51 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

52:                                               ; preds = %49
  %53 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

54:                                               ; preds = %10
  br i1 %.not1.i, label %57, label %55, !dbg !35

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %50, %52, %55, %57
  %.0.i = phi float [ %51, %50 ], [ %53, %52 ], [ %56, %55 ], [ %58, %57 ], !dbg !35
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i2 = icmp eq i32 %59, 0, !dbg !35
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i5 = icmp eq i32 %60, 0, !dbg !35
  br i1 %.not.i2, label %66, label %61, !dbg !35

61:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %64, label %62, !dbg !35

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #3, !dbg !35
  br label %__nv_sqrtf.exit6, !dbg !35

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #3, !dbg !35
  br label %__nv_sqrtf.exit6, !dbg !35

66:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %69, label %67, !dbg !35

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #3, !dbg !35
  br label %__nv_sqrtf.exit6, !dbg !35

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #3, !dbg !35
  br label %__nv_sqrtf.exit6, !dbg !35

__nv_sqrtf.exit6:                                 ; preds = %62, %64, %67, %69
  %.0.i4 = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !35
  %71 = extractvalue { i32, i32 } %39, 1, !dbg !30
  %72 = extractvalue { i32, i32 } %44, 1, !dbg !33
  %.v1 = select i1 %34, i32 %71, i32 %72, !dbg !36
  %73 = bitcast i32 %.v1 to float, !dbg !36
  %74 = extractvalue { i32, i32 } %21, 1, !dbg !17
  %75 = bitcast i32 %74 to float, !dbg !17
  %76 = fsub float %73, %75, !dbg !37
  %77 = extractvalue { i32, i32 } %39, 0, !dbg !30
  %78 = extractvalue { i32, i32 } %44, 0, !dbg !33
  %.v = select i1 %34, i32 %77, i32 %78, !dbg !36
  %79 = bitcast i32 %.v to float, !dbg !36
  %80 = extractvalue { i32, i32 } %21, 0, !dbg !17
  %81 = bitcast i32 %80 to float, !dbg !17
  %82 = fsub float %79, %81, !dbg !37
  %83 = extractvalue { i32, i32 } %33, 1, !dbg !25
  %84 = bitcast i32 %83 to float, !dbg !25
  %85 = extractvalue { i32, i32 } %33, 0, !dbg !25
  %86 = bitcast i32 %85 to float, !dbg !25
  %87 = extractvalue { i32, i32 } %31, 1, !dbg !23
  %88 = bitcast i32 %87 to float, !dbg !23
  %89 = extractvalue { i32, i32 } %31, 0, !dbg !23
  %90 = bitcast i32 %89 to float, !dbg !23
  %91 = extractvalue { i32, i32 } %29, 1, !dbg !21
  %92 = bitcast i32 %91 to float, !dbg !21
  %93 = extractvalue { i32, i32 } %29, 0, !dbg !21
  %94 = bitcast i32 %93 to float, !dbg !21
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !38
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !38
  %97 = fmul float %82, %95, !dbg !39
  %98 = fmul float %76, %96, !dbg !39
  %99 = fmul float %97, %94, !dbg !40
  %100 = fmul float %98, %92, !dbg !40
  %101 = fadd float %99, %90, !dbg !41
  %102 = fadd float %100, %88, !dbg !41
  %103 = fcmp ogt float %101, 0.000000e+00, !dbg !42
  %104 = fcmp ogt float %102, 0.000000e+00, !dbg !42
  %105 = fmul float %101, %86, !dbg !43
  %106 = fmul float %102, %84, !dbg !43
  %107 = select i1 %103, float %101, float %105, !dbg !44
  %108 = select i1 %104, float %102, float %106, !dbg !44
  %109 = sext i32 %16 to i64, !dbg !45
  %110 = getelementptr float, ptr addrspace(1) %8, i64 %109, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.v, i32 %.v1, ptr addrspace(1) %110, i1 true) #3, !dbg !46
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !47
  %112 = bitcast float %107 to i32, !dbg !48
  %113 = bitcast float %108 to i32, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %112, i32 %113, ptr addrspace(1) %111, i1 true) #3, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnldhvmshxhl4i5frf43n2lwfhkizai4lyfytcnhthimgyrjfsn6.py", directory: "inductor_cache/nl")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_24", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 31, scope: !7)
!17 = !DILocation(line: 27, column: 36, scope: !7)
!18 = !DILocation(line: 28, column: 31, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 31, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 34, scope: !7)
!28 = !DILocation(line: 37, column: 40, scope: !7)
!29 = !DILocation(line: 37, column: 30, scope: !7)
!30 = !DILocation(line: 37, column: 46, scope: !7)
!31 = !DILocation(line: 38, column: 19, scope: !7)
!32 = !DILocation(line: 41, column: 30, scope: !7)
!33 = !DILocation(line: 41, column: 55, scope: !7)
!34 = !DILocation(line: 45, column: 20, scope: !7)
!35 = !DILocation(line: 46, column: 27, scope: !7)
!36 = !DILocation(line: 42, column: 33, scope: !7)
!37 = !DILocation(line: 43, column: 20, scope: !7)
!38 = !DILocation(line: 48, column: 20, scope: !7)
!39 = !DILocation(line: 51, column: 20, scope: !7)
!40 = !DILocation(line: 52, column: 20, scope: !7)
!41 = !DILocation(line: 53, column: 20, scope: !7)
!42 = !DILocation(line: 55, column: 20, scope: !7)
!43 = !DILocation(line: 56, column: 20, scope: !7)
!44 = !DILocation(line: 57, column: 35, scope: !7)
!45 = !DILocation(line: 58, column: 25, scope: !7)
!46 = !DILocation(line: 58, column: 37, scope: !7)
!47 = !DILocation(line: 59, column: 28, scope: !7)
!48 = !DILocation(line: 59, column: 40, scope: !7)
!49 = !DILocation(line: 59, column: 4, scope: !7)
