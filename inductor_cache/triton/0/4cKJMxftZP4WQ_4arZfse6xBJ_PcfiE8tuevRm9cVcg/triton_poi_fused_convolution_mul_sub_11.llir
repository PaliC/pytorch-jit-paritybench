; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_mul_sub_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = lshr i32 %7, 4, !dbg !11
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !12
  %10 = shl i32 %7, 2, !dbg !13
  %11 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !14
  %12 = insertelement <2 x i32> %11, i32 %6, i64 1, !dbg !14
  %13 = shl <2 x i32> %12, <i32 6, i32 4>, !dbg !14
  %14 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !13
  %15 = insertelement <2 x i32> %14, i32 %8, i64 1, !dbg !13
  %16 = and <2 x i32> %15, <i32 60, i32 7>, !dbg !13
  %17 = or disjoint <2 x i32> %13, %16, !dbg !15
  %18 = extractelement <2 x i32> %17, i64 1, !dbg !16
  %19 = or disjoint i32 %18, 8, !dbg !16
  %20 = icmp slt i32 %18, 12, !dbg !17
  %21 = icmp slt i32 %19, 12, !dbg !17
  %.frozen = freeze i32 %18, !dbg !18
  %22 = sdiv i32 %.frozen, 3, !dbg !18
  %23 = mul i32 %22, 3, !dbg !19
  %.decomposed = sub i32 %.frozen, %23, !dbg !19
  %.frozen1 = freeze i32 %19, !dbg !18
  %24 = sdiv i32 %.frozen1, 3, !dbg !18
  %25 = mul i32 %24, 3, !dbg !19
  %.decomposed2 = sub i32 %.frozen1, %25, !dbg !19
  %26 = extractelement <2 x i32> %17, i64 0, !dbg !20
  %27 = mul i32 %26, 3, !dbg !20
  %28 = or disjoint i32 %27, 3, !dbg !20
  %29 = add i32 %27, 6, !dbg !20
  %30 = add i32 %27, 9, !dbg !20
  %31 = mul i32 %22, 786432, !dbg !21
  %32 = mul i32 %24, 786432, !dbg !21
  %33 = add i32 %31, %.decomposed, !dbg !22
  %34 = add i32 %33, %27, !dbg !23
  %35 = add i32 %33, %28, !dbg !23
  %36 = add i32 %33, %29, !dbg !23
  %37 = add i32 %33, %30, !dbg !23
  %38 = add i32 %32, %.decomposed2, !dbg !22
  %39 = add i32 %38, %27, !dbg !23
  %40 = add i32 %38, %28, !dbg !23
  %41 = add i32 %38, %29, !dbg !23
  %42 = add i32 %38, %30, !dbg !23
  %43 = sext i32 %34 to i64, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !24
  %45 = sext i32 %35 to i64, !dbg !24
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !24
  %47 = sext i32 %36 to i64, !dbg !24
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !24
  %49 = sext i32 %37 to i64, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !24
  %51 = sext i32 %39 to i64, !dbg !24
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !24
  %53 = sext i32 %40 to i64, !dbg !24
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !24
  %55 = sext i32 %41 to i64, !dbg !24
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !24
  %57 = sext i32 %42 to i64, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !24
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %20) #1, !dbg !25
  %60 = bitcast i32 %59 to float, !dbg !25
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %20) #1, !dbg !25
  %62 = bitcast i32 %61 to float, !dbg !25
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %20) #1, !dbg !25
  %64 = bitcast i32 %63 to float, !dbg !25
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %20) #1, !dbg !25
  %66 = bitcast i32 %65 to float, !dbg !25
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %21) #1, !dbg !25
  %68 = bitcast i32 %67 to float, !dbg !25
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %21) #1, !dbg !25
  %70 = bitcast i32 %69 to float, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %21) #1, !dbg !25
  %72 = bitcast i32 %71 to float, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %21) #1, !dbg !25
  %74 = bitcast i32 %73 to float, !dbg !25
  %75 = sext i32 %.decomposed to i64, !dbg !26
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !26
  %77 = sext i32 %.decomposed2 to i64, !dbg !26
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !26
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %20) #1, !dbg !27
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %20) #1, !dbg !27
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %20) #1, !dbg !27
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %20) #1, !dbg !27
  %83 = bitcast i32 %82 to float, !dbg !27
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %21) #1, !dbg !27
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %21) #1, !dbg !27
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %21) #1, !dbg !27
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %21) #1, !dbg !27
  %88 = bitcast i32 %87 to float, !dbg !27
  %89 = fadd float %60, %83, !dbg !28
  %90 = fadd float %62, %83, !dbg !28
  %91 = fadd float %64, %83, !dbg !28
  %92 = fadd float %66, %83, !dbg !28
  %93 = fadd float %68, %88, !dbg !28
  %94 = fadd float %70, %88, !dbg !28
  %95 = fadd float %72, %88, !dbg !28
  %96 = fadd float %74, %88, !dbg !28
  %97 = fadd float %89, -5.000000e-01, !dbg !29
  %98 = fadd float %90, -5.000000e-01, !dbg !29
  %99 = fadd float %91, -5.000000e-01, !dbg !29
  %100 = fadd float %92, -5.000000e-01, !dbg !29
  %101 = fadd float %93, -5.000000e-01, !dbg !29
  %102 = fadd float %94, -5.000000e-01, !dbg !29
  %103 = fadd float %95, -5.000000e-01, !dbg !29
  %104 = fadd float %96, -5.000000e-01, !dbg !29
  %105 = fmul float %97, 2.000000e+00, !dbg !30
  %106 = fmul float %98, 2.000000e+00, !dbg !30
  %107 = fmul float %99, 2.000000e+00, !dbg !30
  %108 = fmul float %100, 2.000000e+00, !dbg !30
  %109 = fmul float %101, 2.000000e+00, !dbg !30
  %110 = fmul float %102, 2.000000e+00, !dbg !30
  %111 = fmul float %103, 2.000000e+00, !dbg !30
  %112 = fmul float %104, 2.000000e+00, !dbg !30
  %113 = shl i32 %18, 18, !dbg !31
  %114 = shl i32 %19, 18, !dbg !31
  %115 = add i32 %26, %113, !dbg !32
  %116 = add i32 %26, %114, !dbg !32
  %117 = sext i32 %115 to i64, !dbg !33
  %118 = getelementptr float, ptr addrspace(1) %2, i64 %117, !dbg !33
  %119 = sext i32 %116 to i64, !dbg !33
  %120 = getelementptr float, ptr addrspace(1) %2, i64 %119, !dbg !33
  %121 = bitcast float %105 to i32, !dbg !34
  %122 = bitcast float %106 to i32, !dbg !34
  %123 = bitcast float %107 to i32, !dbg !34
  %124 = bitcast float %108 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %121, i32 %122, i32 %123, i32 %124, ptr addrspace(1) %118, i1 %20) #1, !dbg !34
  %125 = bitcast float %109 to i32, !dbg !34
  %126 = bitcast float %110 to i32, !dbg !34
  %127 = bitcast float %111 to i32, !dbg !34
  %128 = bitcast float %112 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %125, i32 %126, i32 %127, i32 %128, ptr addrspace(1) %120, i1 %21) #1, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqbw43ra7cmljlymtproauihxgj6vjh76f6oq3e7fptje6mic7xo.py", directory: "inductor_cache/qb")
!4 = !{ptr @triton_poi_fused_convolution_mul_sub_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_mul_sub_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_mul_sub_11", linkageName: "triton_poi_fused_convolution_mul_sub_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 44, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 26, column: 44, scope: !7)
!14 = !DILocation(line: 25, column: 33, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 23, column: 23, scope: !7)
!17 = !DILocation(line: 24, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 37, scope: !7)
!21 = !DILocation(line: 32, column: 49, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 42, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 37, scope: !7)
!32 = !DILocation(line: 39, column: 30, scope: !7)
!33 = !DILocation(line: 39, column: 25, scope: !7)
!34 = !DILocation(line: 39, column: 48, scope: !7)
!35 = !DILocation(line: 39, column: 4, scope: !7)
