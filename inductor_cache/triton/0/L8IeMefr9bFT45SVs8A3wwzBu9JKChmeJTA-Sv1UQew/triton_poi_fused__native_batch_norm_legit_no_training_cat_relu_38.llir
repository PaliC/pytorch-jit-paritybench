; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_38(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 2, !dbg !13
  %19 = or disjoint i32 %17, 512, !dbg !13
  %20 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !14
  %21 = insertelement <2 x i32> %20, i32 %17, i64 1, !dbg !14
  %22 = sdiv <2 x i32> %21, splat (i32 4096), !dbg !14
  %23 = srem <2 x i32> %22, splat (i32 80), !dbg !15
  %.frozen = freeze i32 %17, !dbg !16
  %24 = sdiv i32 %.frozen, 64, !dbg !16
  %25 = sdiv i32 %19, 64, !dbg !16
  %26 = srem i32 %24, 64, !dbg !17
  %27 = srem i32 %25, 64, !dbg !17
  %28 = mul i32 %24, 64, !dbg !18
  %.decomposed = sub i32 %.frozen, %28, !dbg !18
  %29 = srem i32 %18, 64, !dbg !18
  %30 = sdiv i32 %17, 327680, !dbg !19
  %31 = sdiv i32 %19, 327680, !dbg !19
  %32 = srem i32 %17, 4096, !dbg !20
  %33 = srem i32 %19, 4096, !dbg !20
  %34 = extractelement <2 x i32> %23, i64 1, !dbg !21
  %35 = sext i32 %34 to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !22
  %37 = extractelement <2 x i32> %23, i64 0, !dbg !21
  %38 = sext i32 %37 to i64, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !22
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !23
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !23
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !23
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !23
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !23
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !23
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !23
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !23
  %48 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !24
  %49 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !24
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !25
  %51 = bitcast i32 %50 to float, !dbg !25
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !25
  %53 = bitcast i32 %52 to float, !dbg !25
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !25
  %55 = bitcast i32 %54 to float, !dbg !25
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !25
  %57 = bitcast i32 %56 to float, !dbg !25
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !25
  %59 = bitcast i32 %58 to float, !dbg !25
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !25
  %61 = bitcast i32 %60 to float, !dbg !25
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !25
  %63 = bitcast i32 %62 to float, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !25
  %65 = bitcast i32 %64 to float, !dbg !25
  %66 = getelementptr float, ptr addrspace(1) %6, i64 %35, !dbg !26
  %67 = getelementptr float, ptr addrspace(1) %6, i64 %38, !dbg !26
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !27
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !27
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !27
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !27
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !27
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !27
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !27
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !27
  %76 = getelementptr float, ptr addrspace(1) %7, i64 %35, !dbg !28
  %77 = getelementptr float, ptr addrspace(1) %7, i64 %38, !dbg !28
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !29
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !29
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !29
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !29
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !29
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !29
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !29
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !29
  %86 = icmp slt <2 x i32> %23, splat (i32 64), !dbg !30
  %87 = sext i32 %26 to i64, !dbg !31
  %88 = getelementptr i64, ptr addrspace(1) %0, i64 %87, !dbg !31
  %89 = sext i32 %27 to i64, !dbg !31
  %90 = getelementptr i64, ptr addrspace(1) %0, i64 %89, !dbg !31
  %91 = extractelement <2 x i1> %86, i64 1, !dbg !32
  %92 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %88, i1 %91, i1 %91) #3, !dbg !32
  %93 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %88, i1 %91, i1 %91) #3, !dbg !32
  %94 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %88, i1 %91, i1 %91) #3, !dbg !32
  %95 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %88, i1 %91, i1 %91) #3, !dbg !32
  %96 = extractelement <2 x i1> %86, i64 0, !dbg !32
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %90, i1 %96, i1 %96) #3, !dbg !32
  %98 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %90, i1 %96, i1 %96) #3, !dbg !32
  %99 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %90, i1 %96, i1 %96) #3, !dbg !32
  %100 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %90, i1 %96, i1 %96) #3, !dbg !32
  %101 = lshr i64 %92, 58, !dbg !33
  %102 = and i64 %101, 32, !dbg !33
  %103 = add i64 %102, %92, !dbg !33
  %104 = lshr i64 %97, 58, !dbg !33
  %105 = and i64 %104, 32, !dbg !33
  %106 = add i64 %105, %97, !dbg !33
  %107 = sext i32 %.decomposed to i64, !dbg !34
  %108 = getelementptr i64, ptr addrspace(1) %0, i64 %107, !dbg !34
  %109 = sext i32 %29 to i64, !dbg !34
  %110 = getelementptr i64, ptr addrspace(1) %0, i64 %109, !dbg !34
  %111 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %108, i1 %91, i1 %91, i1 %91) #3, !dbg !35
  %112 = extractvalue { i64, i64 } %111, 0, !dbg !35
  %113 = extractvalue { i64, i64 } %111, 1, !dbg !35
  %114 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %110, i1 %91, i1 %91, i1 %91) #3, !dbg !35
  %115 = extractvalue { i64, i64 } %114, 0, !dbg !35
  %116 = extractvalue { i64, i64 } %114, 1, !dbg !35
  %117 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %108, i1 %96, i1 %96, i1 %96) #3, !dbg !35
  %118 = extractvalue { i64, i64 } %117, 0, !dbg !35
  %119 = extractvalue { i64, i64 } %117, 1, !dbg !35
  %120 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %110, i1 %96, i1 %96, i1 %96) #3, !dbg !35
  %121 = extractvalue { i64, i64 } %120, 0, !dbg !35
  %122 = extractvalue { i64, i64 } %120, 1, !dbg !35
  %123 = lshr i64 %112, 58, !dbg !36
  %124 = and i64 %123, 32, !dbg !36
  %125 = lshr i64 %113, 58, !dbg !36
  %126 = and i64 %125, 32, !dbg !36
  %127 = lshr i64 %115, 58, !dbg !36
  %128 = and i64 %127, 32, !dbg !36
  %129 = lshr i64 %116, 58, !dbg !36
  %130 = and i64 %129, 32, !dbg !36
  %131 = lshr i64 %118, 58, !dbg !36
  %132 = and i64 %131, 32, !dbg !36
  %133 = lshr i64 %119, 58, !dbg !36
  %134 = and i64 %133, 32, !dbg !36
  %135 = lshr i64 %121, 58, !dbg !36
  %136 = and i64 %135, 32, !dbg !36
  %137 = lshr i64 %122, 58, !dbg !36
  %138 = and i64 %137, 32, !dbg !36
  %139 = shl i64 %103, 5, !dbg !37
  %140 = shl i64 %106, 5, !dbg !37
  %141 = shl nsw i32 %34, 10, !dbg !38
  %142 = shl nsw i32 %37, 10, !dbg !38
  %143 = shl nsw i32 %30, 16, !dbg !39
  %144 = shl nsw i32 %31, 16, !dbg !39
  %narrow = add nsw i32 %141, %143, !dbg !36
  %145 = sext i32 %narrow to i64, !dbg !36
  %146 = add i64 %139, %145, !dbg !40
  %147 = add i64 %146, %112, !dbg !41
  %148 = add i64 %147, %124, !dbg !42
  %149 = add i64 %146, %113, !dbg !41
  %150 = add i64 %149, %126, !dbg !42
  %151 = add i64 %146, %115, !dbg !41
  %152 = add i64 %151, %128, !dbg !42
  %153 = add i64 %146, %116, !dbg !41
  %154 = add i64 %153, %130, !dbg !42
  %narrow36 = add nsw i32 %142, %144, !dbg !36
  %155 = sext i32 %narrow36 to i64, !dbg !36
  %156 = add i64 %140, %155, !dbg !40
  %157 = add i64 %156, %118, !dbg !41
  %158 = add i64 %157, %132, !dbg !42
  %159 = add i64 %156, %119, !dbg !41
  %160 = add i64 %159, %134, !dbg !42
  %161 = add i64 %156, %121, !dbg !41
  %162 = add i64 %161, %136, !dbg !42
  %163 = add i64 %156, %122, !dbg !41
  %164 = add i64 %163, %138, !dbg !42
  %165 = getelementptr float, ptr addrspace(1) %1, i64 %148, !dbg !43
  %166 = getelementptr float, ptr addrspace(1) %1, i64 %150, !dbg !43
  %167 = getelementptr float, ptr addrspace(1) %1, i64 %152, !dbg !43
  %168 = getelementptr float, ptr addrspace(1) %1, i64 %154, !dbg !43
  %169 = getelementptr float, ptr addrspace(1) %1, i64 %158, !dbg !43
  %170 = getelementptr float, ptr addrspace(1) %1, i64 %160, !dbg !43
  %171 = getelementptr float, ptr addrspace(1) %1, i64 %162, !dbg !43
  %172 = getelementptr float, ptr addrspace(1) %1, i64 %164, !dbg !43
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %165, i1 %91, i32 0, i1 %91) #3, !dbg !44
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %166, i1 %91, i32 0, i1 %91) #3, !dbg !44
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %167, i1 %91, i32 0, i1 %91) #3, !dbg !44
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %168, i1 %91, i32 0, i1 %91) #3, !dbg !44
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %169, i1 %96, i32 0, i1 %96) #3, !dbg !44
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %170, i1 %96, i32 0, i1 %96) #3, !dbg !44
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %171, i1 %96, i32 0, i1 %96) #3, !dbg !44
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %172, i1 %96, i32 0, i1 %96) #3, !dbg !44
  %181 = getelementptr float, ptr addrspace(1) %2, i64 %148, !dbg !45
  %182 = getelementptr float, ptr addrspace(1) %2, i64 %150, !dbg !45
  %183 = getelementptr float, ptr addrspace(1) %2, i64 %152, !dbg !45
  %184 = getelementptr float, ptr addrspace(1) %2, i64 %154, !dbg !45
  %185 = getelementptr float, ptr addrspace(1) %2, i64 %158, !dbg !45
  %186 = getelementptr float, ptr addrspace(1) %2, i64 %160, !dbg !45
  %187 = getelementptr float, ptr addrspace(1) %2, i64 %162, !dbg !45
  %188 = getelementptr float, ptr addrspace(1) %2, i64 %164, !dbg !45
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %91, i32 0, i1 %91) #3, !dbg !46
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %182, i1 %91, i32 0, i1 %91) #3, !dbg !46
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %183, i1 %91, i32 0, i1 %91) #3, !dbg !46
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %184, i1 %91, i32 0, i1 %91) #3, !dbg !46
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %185, i1 %96, i32 0, i1 %96) #3, !dbg !46
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %96, i32 0, i1 %96) #3, !dbg !46
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %187, i1 %96, i32 0, i1 %96) #3, !dbg !46
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %188, i1 %96, i32 0, i1 %96) #3, !dbg !46
  %197 = icmp sgt i32 %34, 63, !dbg !47
  %198 = icmp sgt i32 %37, 63, !dbg !47
  %199 = shl nsw i32 %34, 12, !dbg !21
  %200 = shl nsw i32 %37, 12, !dbg !21
  %201 = add nsw i32 %32, -262144, !dbg !21
  %202 = add nsw i32 %201, %143, !dbg !48
  %203 = add nsw i32 %202, %199, !dbg !49
  %204 = add nsw i32 %33, -262144, !dbg !21
  %205 = add nsw i32 %204, %144, !dbg !48
  %206 = add nsw i32 %205, %200, !dbg !49
  %207 = sext i32 %203 to i64, !dbg !50
  %208 = getelementptr float, ptr addrspace(1) %3, i64 %207, !dbg !50
  %209 = sext i32 %206 to i64, !dbg !50
  %210 = getelementptr float, ptr addrspace(1) %3, i64 %209, !dbg !50
  %211 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %208, i1 %197, i32 0, i1 %197, i32 0, i1 %197, i32 0, i1 %197, i32 0, i1 %197) #3, !dbg !51
  %212 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %210, i1 %198, i32 0, i1 %198, i32 0, i1 %198, i32 0, i1 %198, i32 0, i1 %198) #3, !dbg !51
  %213 = fadd float %51, 0x3EE4F8B580000000, !dbg !52
  %214 = fadd float %53, 0x3EE4F8B580000000, !dbg !52
  %215 = fadd float %55, 0x3EE4F8B580000000, !dbg !52
  %216 = fadd float %57, 0x3EE4F8B580000000, !dbg !52
  %217 = fadd float %59, 0x3EE4F8B580000000, !dbg !52
  %218 = fadd float %61, 0x3EE4F8B580000000, !dbg !52
  %219 = fadd float %63, 0x3EE4F8B580000000, !dbg !52
  %220 = fadd float %65, 0x3EE4F8B580000000, !dbg !52
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i = icmp eq i32 %221, 0, !dbg !53
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i = icmp eq i32 %222, 0, !dbg !53
  br i1 %.not.i, label %228, label %223, !dbg !53

223:                                              ; preds = %11
  br i1 %.not1.i, label %226, label %224, !dbg !53

224:                                              ; preds = %223
  %225 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %213) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

226:                                              ; preds = %223
  %227 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %213) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

228:                                              ; preds = %11
  br i1 %.not1.i, label %231, label %229, !dbg !53

229:                                              ; preds = %228
  %230 = tail call float @llvm.nvvm.sqrt.rn.f(float %213) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

231:                                              ; preds = %228
  %232 = tail call float @llvm.nvvm.sqrt.approx.f(float %213) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

__nv_sqrtf.exit:                                  ; preds = %224, %226, %229, %231
  %.0.i = phi float [ %225, %224 ], [ %227, %226 ], [ %230, %229 ], [ %232, %231 ], !dbg !53
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i1 = icmp eq i32 %233, 0, !dbg !53
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i4 = icmp eq i32 %234, 0, !dbg !53
  br i1 %.not.i1, label %240, label %235, !dbg !53

235:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %238, label %236, !dbg !53

236:                                              ; preds = %235
  %237 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %214) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

238:                                              ; preds = %235
  %239 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %214) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

240:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %243, label %241, !dbg !53

241:                                              ; preds = %240
  %242 = tail call float @llvm.nvvm.sqrt.rn.f(float %214) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

243:                                              ; preds = %240
  %244 = tail call float @llvm.nvvm.sqrt.approx.f(float %214) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

__nv_sqrtf.exit5:                                 ; preds = %236, %238, %241, %243
  %.0.i3 = phi float [ %237, %236 ], [ %239, %238 ], [ %242, %241 ], [ %244, %243 ], !dbg !53
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i6 = icmp eq i32 %245, 0, !dbg !53
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i9 = icmp eq i32 %246, 0, !dbg !53
  br i1 %.not.i6, label %252, label %247, !dbg !53

247:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %250, label %248, !dbg !53

248:                                              ; preds = %247
  %249 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %215) #3, !dbg !53
  br label %__nv_sqrtf.exit10, !dbg !53

250:                                              ; preds = %247
  %251 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %215) #3, !dbg !53
  br label %__nv_sqrtf.exit10, !dbg !53

252:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %255, label %253, !dbg !53

253:                                              ; preds = %252
  %254 = tail call float @llvm.nvvm.sqrt.rn.f(float %215) #3, !dbg !53
  br label %__nv_sqrtf.exit10, !dbg !53

255:                                              ; preds = %252
  %256 = tail call float @llvm.nvvm.sqrt.approx.f(float %215) #3, !dbg !53
  br label %__nv_sqrtf.exit10, !dbg !53

__nv_sqrtf.exit10:                                ; preds = %248, %250, %253, %255
  %.0.i8 = phi float [ %249, %248 ], [ %251, %250 ], [ %254, %253 ], [ %256, %255 ], !dbg !53
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i11 = icmp eq i32 %257, 0, !dbg !53
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i14 = icmp eq i32 %258, 0, !dbg !53
  br i1 %.not.i11, label %264, label %259, !dbg !53

259:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %262, label %260, !dbg !53

260:                                              ; preds = %259
  %261 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %216) #3, !dbg !53
  br label %__nv_sqrtf.exit15, !dbg !53

262:                                              ; preds = %259
  %263 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %216) #3, !dbg !53
  br label %__nv_sqrtf.exit15, !dbg !53

264:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %267, label %265, !dbg !53

265:                                              ; preds = %264
  %266 = tail call float @llvm.nvvm.sqrt.rn.f(float %216) #3, !dbg !53
  br label %__nv_sqrtf.exit15, !dbg !53

267:                                              ; preds = %264
  %268 = tail call float @llvm.nvvm.sqrt.approx.f(float %216) #3, !dbg !53
  br label %__nv_sqrtf.exit15, !dbg !53

__nv_sqrtf.exit15:                                ; preds = %260, %262, %265, %267
  %.0.i13 = phi float [ %261, %260 ], [ %263, %262 ], [ %266, %265 ], [ %268, %267 ], !dbg !53
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i16 = icmp eq i32 %269, 0, !dbg !53
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i19 = icmp eq i32 %270, 0, !dbg !53
  br i1 %.not.i16, label %276, label %271, !dbg !53

271:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %274, label %272, !dbg !53

272:                                              ; preds = %271
  %273 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %217) #3, !dbg !53
  br label %__nv_sqrtf.exit20, !dbg !53

274:                                              ; preds = %271
  %275 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %217) #3, !dbg !53
  br label %__nv_sqrtf.exit20, !dbg !53

276:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %279, label %277, !dbg !53

277:                                              ; preds = %276
  %278 = tail call float @llvm.nvvm.sqrt.rn.f(float %217) #3, !dbg !53
  br label %__nv_sqrtf.exit20, !dbg !53

279:                                              ; preds = %276
  %280 = tail call float @llvm.nvvm.sqrt.approx.f(float %217) #3, !dbg !53
  br label %__nv_sqrtf.exit20, !dbg !53

__nv_sqrtf.exit20:                                ; preds = %272, %274, %277, %279
  %.0.i18 = phi float [ %273, %272 ], [ %275, %274 ], [ %278, %277 ], [ %280, %279 ], !dbg !53
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i21 = icmp eq i32 %281, 0, !dbg !53
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i24 = icmp eq i32 %282, 0, !dbg !53
  br i1 %.not.i21, label %288, label %283, !dbg !53

283:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %286, label %284, !dbg !53

284:                                              ; preds = %283
  %285 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %218) #3, !dbg !53
  br label %__nv_sqrtf.exit25, !dbg !53

286:                                              ; preds = %283
  %287 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %218) #3, !dbg !53
  br label %__nv_sqrtf.exit25, !dbg !53

288:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %291, label %289, !dbg !53

289:                                              ; preds = %288
  %290 = tail call float @llvm.nvvm.sqrt.rn.f(float %218) #3, !dbg !53
  br label %__nv_sqrtf.exit25, !dbg !53

291:                                              ; preds = %288
  %292 = tail call float @llvm.nvvm.sqrt.approx.f(float %218) #3, !dbg !53
  br label %__nv_sqrtf.exit25, !dbg !53

__nv_sqrtf.exit25:                                ; preds = %284, %286, %289, %291
  %.0.i23 = phi float [ %285, %284 ], [ %287, %286 ], [ %290, %289 ], [ %292, %291 ], !dbg !53
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i26 = icmp eq i32 %293, 0, !dbg !53
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i29 = icmp eq i32 %294, 0, !dbg !53
  br i1 %.not.i26, label %300, label %295, !dbg !53

295:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %298, label %296, !dbg !53

296:                                              ; preds = %295
  %297 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %219) #3, !dbg !53
  br label %__nv_sqrtf.exit30, !dbg !53

298:                                              ; preds = %295
  %299 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %219) #3, !dbg !53
  br label %__nv_sqrtf.exit30, !dbg !53

300:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %303, label %301, !dbg !53

301:                                              ; preds = %300
  %302 = tail call float @llvm.nvvm.sqrt.rn.f(float %219) #3, !dbg !53
  br label %__nv_sqrtf.exit30, !dbg !53

303:                                              ; preds = %300
  %304 = tail call float @llvm.nvvm.sqrt.approx.f(float %219) #3, !dbg !53
  br label %__nv_sqrtf.exit30, !dbg !53

__nv_sqrtf.exit30:                                ; preds = %296, %298, %301, %303
  %.0.i28 = phi float [ %297, %296 ], [ %299, %298 ], [ %302, %301 ], [ %304, %303 ], !dbg !53
  %305 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i31 = icmp eq i32 %305, 0, !dbg !53
  %306 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i34 = icmp eq i32 %306, 0, !dbg !53
  br i1 %.not.i31, label %312, label %307, !dbg !53

307:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %310, label %308, !dbg !53

308:                                              ; preds = %307
  %309 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %220) #3, !dbg !53
  br label %__nv_sqrtf.exit35, !dbg !53

310:                                              ; preds = %307
  %311 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %220) #3, !dbg !53
  br label %__nv_sqrtf.exit35, !dbg !53

312:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %315, label %313, !dbg !53

313:                                              ; preds = %312
  %314 = tail call float @llvm.nvvm.sqrt.rn.f(float %220) #3, !dbg !53
  br label %__nv_sqrtf.exit35, !dbg !53

315:                                              ; preds = %312
  %316 = tail call float @llvm.nvvm.sqrt.approx.f(float %220) #3, !dbg !53
  br label %__nv_sqrtf.exit35, !dbg !53

__nv_sqrtf.exit35:                                ; preds = %308, %310, %313, %315
  %.0.i33 = phi float [ %309, %308 ], [ %311, %310 ], [ %314, %313 ], [ %316, %315 ], !dbg !53
  %317 = shufflevector <2 x i1> %86, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !30
  %318 = insertelement <8 x i32> poison, i32 %180, i64 0, !dbg !44
  %319 = insertelement <8 x i32> %318, i32 %179, i64 1, !dbg !44
  %320 = insertelement <8 x i32> %319, i32 %178, i64 2, !dbg !44
  %321 = insertelement <8 x i32> %320, i32 %177, i64 3, !dbg !44
  %322 = insertelement <8 x i32> %321, i32 %176, i64 4, !dbg !44
  %323 = insertelement <8 x i32> %322, i32 %175, i64 5, !dbg !44
  %324 = insertelement <8 x i32> %323, i32 %174, i64 6, !dbg !44
  %325 = insertelement <8 x i32> %324, i32 %173, i64 7, !dbg !44
  %326 = bitcast <8 x i32> %325 to <8 x float>, !dbg !44
  %327 = insertelement <8 x i32> poison, i32 %196, i64 0, !dbg !46
  %328 = insertelement <8 x i32> %327, i32 %195, i64 1, !dbg !46
  %329 = insertelement <8 x i32> %328, i32 %194, i64 2, !dbg !46
  %330 = insertelement <8 x i32> %329, i32 %193, i64 3, !dbg !46
  %331 = insertelement <8 x i32> %330, i32 %192, i64 4, !dbg !46
  %332 = insertelement <8 x i32> %331, i32 %191, i64 5, !dbg !46
  %333 = insertelement <8 x i32> %332, i32 %190, i64 6, !dbg !46
  %334 = insertelement <8 x i32> %333, i32 %189, i64 7, !dbg !46
  %335 = bitcast <8 x i32> %334 to <8 x float>, !dbg !46
  %336 = extractvalue { i32, i32, i32, i32 } %212, 3, !dbg !51
  %337 = insertelement <8 x i32> poison, i32 %47, i64 0, !dbg !23
  %338 = insertelement <8 x i32> %337, i32 %46, i64 1, !dbg !23
  %339 = insertelement <8 x i32> %338, i32 %45, i64 2, !dbg !23
  %340 = insertelement <8 x i32> %339, i32 %44, i64 3, !dbg !23
  %341 = insertelement <8 x i32> %340, i32 %43, i64 4, !dbg !23
  %342 = insertelement <8 x i32> %341, i32 %42, i64 5, !dbg !23
  %343 = insertelement <8 x i32> %342, i32 %41, i64 6, !dbg !23
  %344 = insertelement <8 x i32> %343, i32 %40, i64 7, !dbg !23
  %345 = bitcast <8 x i32> %344 to <8 x float>, !dbg !23
  %346 = extractvalue { i32, i32, i32, i32 } %212, 2, !dbg !51
  %347 = extractvalue { i32, i32, i32, i32 } %212, 1, !dbg !51
  %348 = extractvalue { i32, i32, i32, i32 } %212, 0, !dbg !51
  %349 = extractvalue { i32, i32, i32, i32 } %211, 3, !dbg !51
  %350 = extractvalue { i32, i32, i32, i32 } %211, 2, !dbg !51
  %351 = extractvalue { i32, i32, i32, i32 } %211, 1, !dbg !51
  %352 = extractvalue { i32, i32, i32, i32 } %211, 0, !dbg !51
  %353 = insertelement <8 x i32> poison, i32 %85, i64 0, !dbg !29
  %354 = insertelement <8 x i32> %353, i32 %84, i64 1, !dbg !29
  %355 = insertelement <8 x i32> %354, i32 %83, i64 2, !dbg !29
  %356 = insertelement <8 x i32> %355, i32 %82, i64 3, !dbg !29
  %357 = insertelement <8 x i32> %356, i32 %81, i64 4, !dbg !29
  %358 = insertelement <8 x i32> %357, i32 %80, i64 5, !dbg !29
  %359 = insertelement <8 x i32> %358, i32 %79, i64 6, !dbg !29
  %360 = insertelement <8 x i32> %359, i32 %78, i64 7, !dbg !29
  %361 = bitcast <8 x i32> %360 to <8 x float>, !dbg !29
  %362 = insertelement <8 x i32> poison, i32 %75, i64 0, !dbg !27
  %363 = insertelement <8 x i32> %362, i32 %74, i64 1, !dbg !27
  %364 = insertelement <8 x i32> %363, i32 %73, i64 2, !dbg !27
  %365 = insertelement <8 x i32> %364, i32 %72, i64 3, !dbg !27
  %366 = insertelement <8 x i32> %365, i32 %71, i64 4, !dbg !27
  %367 = insertelement <8 x i32> %366, i32 %70, i64 5, !dbg !27
  %368 = insertelement <8 x i32> %367, i32 %69, i64 6, !dbg !27
  %369 = insertelement <8 x i32> %368, i32 %68, i64 7, !dbg !27
  %370 = bitcast <8 x i32> %369 to <8 x float>, !dbg !27
  %371 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !54
  %372 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !54
  %373 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !54
  %374 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !54
  %375 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !54
  %376 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !54
  %377 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !54
  %378 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !54
  %379 = fmul <8 x float> %326, %335, !dbg !55
  %380 = insertelement <8 x i32> poison, i32 %336, i64 0, !dbg !51
  %381 = insertelement <8 x i32> %380, i32 %346, i64 1, !dbg !51
  %382 = insertelement <8 x i32> %381, i32 %347, i64 2, !dbg !51
  %383 = insertelement <8 x i32> %382, i32 %348, i64 3, !dbg !51
  %384 = insertelement <8 x i32> %383, i32 %349, i64 4, !dbg !51
  %385 = insertelement <8 x i32> %384, i32 %350, i64 5, !dbg !51
  %386 = insertelement <8 x i32> %385, i32 %351, i64 6, !dbg !51
  %387 = insertelement <8 x i32> %386, i32 %352, i64 7, !dbg !51
  %388 = bitcast <8 x i32> %387 to <8 x float>, !dbg !51
  %389 = select <8 x i1> %317, <8 x float> %379, <8 x float> %388, !dbg !56
  %390 = fsub <8 x float> %389, %345, !dbg !57
  %391 = insertelement <8 x float> poison, float %378, i64 0, !dbg !58
  %392 = insertelement <8 x float> %391, float %377, i64 1, !dbg !58
  %393 = insertelement <8 x float> %392, float %376, i64 2, !dbg !58
  %394 = insertelement <8 x float> %393, float %375, i64 3, !dbg !58
  %395 = insertelement <8 x float> %394, float %374, i64 4, !dbg !58
  %396 = insertelement <8 x float> %395, float %373, i64 5, !dbg !58
  %397 = insertelement <8 x float> %396, float %372, i64 6, !dbg !58
  %398 = insertelement <8 x float> %397, float %371, i64 7, !dbg !58
  %399 = fmul <8 x float> %390, %398, !dbg !58
  %400 = fmul <8 x float> %399, %370, !dbg !59
  %401 = fadd <8 x float> %400, %361, !dbg !60
  %402 = fcmp olt <8 x float> %401, zeroinitializer, !dbg !61
  %403 = extractelement <8 x i1> %402, i64 7, !dbg !65
  %404 = extractelement <8 x i1> %402, i64 6, !dbg !65
  %405 = extractelement <8 x i1> %402, i64 5, !dbg !65
  %406 = extractelement <8 x i1> %402, i64 4, !dbg !65
  %407 = extractelement <8 x i1> %402, i64 3, !dbg !65
  %408 = extractelement <8 x i1> %402, i64 2, !dbg !65
  %409 = extractelement <8 x i1> %402, i64 1, !dbg !65
  %410 = extractelement <8 x i1> %402, i64 0, !dbg !65
  %411 = sext i32 %17 to i64, !dbg !66
  %412 = getelementptr float, ptr addrspace(1) %8, i64 %411, !dbg !66
  %413 = sext i32 %19 to i64, !dbg !66
  %414 = getelementptr float, ptr addrspace(1) %8, i64 %413, !dbg !66
  %bc = bitcast <8 x float> %389 to <8 x i32>, !dbg !67
  %415 = extractelement <8 x i32> %bc, i64 7, !dbg !67
  %bc37 = bitcast <8 x float> %389 to <8 x i32>, !dbg !67
  %416 = extractelement <8 x i32> %bc37, i64 6, !dbg !67
  %bc38 = bitcast <8 x float> %389 to <8 x i32>, !dbg !67
  %417 = extractelement <8 x i32> %bc38, i64 5, !dbg !67
  %bc39 = bitcast <8 x float> %389 to <8 x i32>, !dbg !67
  %418 = extractelement <8 x i32> %bc39, i64 4, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %415, i32 %416, i32 %417, i32 %418, ptr addrspace(1) %412, i1 true) #3, !dbg !67
  %bc40 = bitcast <8 x float> %389 to <8 x i32>, !dbg !67
  %419 = extractelement <8 x i32> %bc40, i64 3, !dbg !67
  %bc41 = bitcast <8 x float> %389 to <8 x i32>, !dbg !67
  %420 = extractelement <8 x i32> %bc41, i64 2, !dbg !67
  %bc42 = bitcast <8 x float> %389 to <8 x i32>, !dbg !67
  %421 = extractelement <8 x i32> %bc42, i64 1, !dbg !67
  %bc43 = bitcast <8 x float> %389 to <8 x i32>, !dbg !67
  %422 = extractelement <8 x i32> %bc43, i64 0, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %419, i32 %420, i32 %421, i32 %422, ptr addrspace(1) %414, i1 true) #3, !dbg !67
  %423 = getelementptr float, ptr addrspace(1) %9, i64 %411, !dbg !68
  %424 = getelementptr float, ptr addrspace(1) %9, i64 %413, !dbg !68
  %bc44 = bitcast <8 x float> %401 to <8 x i32>, !dbg !69
  %425 = extractelement <8 x i32> %bc44, i64 7, !dbg !69
  %426 = select i1 %403, i32 0, i32 %425, !dbg !65
  %bc45 = bitcast <8 x float> %401 to <8 x i32>, !dbg !69
  %427 = extractelement <8 x i32> %bc45, i64 6, !dbg !69
  %428 = select i1 %404, i32 0, i32 %427, !dbg !65
  %bc46 = bitcast <8 x float> %401 to <8 x i32>, !dbg !69
  %429 = extractelement <8 x i32> %bc46, i64 5, !dbg !69
  %430 = select i1 %405, i32 0, i32 %429, !dbg !65
  %bc47 = bitcast <8 x float> %401 to <8 x i32>, !dbg !69
  %431 = extractelement <8 x i32> %bc47, i64 4, !dbg !69
  %432 = select i1 %406, i32 0, i32 %431, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %426, i32 %428, i32 %430, i32 %432, ptr addrspace(1) %423, i1 true) #3, !dbg !69
  %bc48 = bitcast <8 x float> %401 to <8 x i32>, !dbg !69
  %433 = extractelement <8 x i32> %bc48, i64 3, !dbg !69
  %434 = select i1 %407, i32 0, i32 %433, !dbg !65
  %bc49 = bitcast <8 x float> %401 to <8 x i32>, !dbg !69
  %435 = extractelement <8 x i32> %bc49, i64 2, !dbg !69
  %436 = select i1 %408, i32 0, i32 %435, !dbg !65
  %bc50 = bitcast <8 x float> %401 to <8 x i32>, !dbg !69
  %437 = extractelement <8 x i32> %bc50, i64 1, !dbg !69
  %438 = select i1 %409, i32 0, i32 %437, !dbg !65
  %bc51 = bitcast <8 x float> %401 to <8 x i32>, !dbg !69
  %439 = extractelement <8 x i32> %bc51, i64 0, !dbg !69
  %440 = select i1 %410, i32 0, i32 %439, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %434, i32 %436, i32 %438, i32 %440, ptr addrspace(1) %424, i1 true) #3, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cygi5av5mv6f7nvgguqgdu5acb7mgcbi5t75mp26r7u67twq4kph.py", directory: "inductor_cache/yg")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_38, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_38, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_38", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_38", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 27, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 56, column: 42, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 30, scope: !7)
!32 = !DILocation(line: 39, column: 35, scope: !7)
!33 = !DILocation(line: 43, column: 32, scope: !7)
!34 = !DILocation(line: 44, column: 31, scope: !7)
!35 = !DILocation(line: 44, column: 36, scope: !7)
!36 = !DILocation(line: 47, column: 35, scope: !7)
!37 = !DILocation(line: 48, column: 42, scope: !7)
!38 = !DILocation(line: 48, column: 55, scope: !7)
!39 = !DILocation(line: 48, column: 67, scope: !7)
!40 = !DILocation(line: 48, column: 39, scope: !7)
!41 = !DILocation(line: 48, column: 49, scope: !7)
!42 = !DILocation(line: 48, column: 61, scope: !7)
!43 = !DILocation(line: 48, column: 31, scope: !7)
!44 = !DILocation(line: 48, column: 72, scope: !7)
!45 = !DILocation(line: 49, column: 31, scope: !7)
!46 = !DILocation(line: 49, column: 72, scope: !7)
!47 = !DILocation(line: 53, column: 20, scope: !7)
!48 = !DILocation(line: 56, column: 36, scope: !7)
!49 = !DILocation(line: 56, column: 56, scope: !7)
!50 = !DILocation(line: 56, column: 31, scope: !7)
!51 = !DILocation(line: 56, column: 67, scope: !7)
!52 = !DILocation(line: 60, column: 20, scope: !7)
!53 = !DILocation(line: 61, column: 27, scope: !7)
!54 = !DILocation(line: 63, column: 20, scope: !7)
!55 = !DILocation(line: 50, column: 20, scope: !7)
!56 = !DILocation(line: 0, scope: !7)
!57 = !DILocation(line: 58, column: 20, scope: !7)
!58 = !DILocation(line: 66, column: 20, scope: !7)
!59 = !DILocation(line: 67, column: 20, scope: !7)
!60 = !DILocation(line: 68, column: 20, scope: !7)
!61 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !64)
!62 = distinct !DILexicalBlockFile(scope: !7, file: !63, discriminator: 0)
!63 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!64 = !DILocation(line: 70, column: 42, scope: !7)
!65 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !64)
!66 = !DILocation(line: 71, column: 25, scope: !7)
!67 = !DILocation(line: 71, column: 37, scope: !7)
!68 = !DILocation(line: 72, column: 25, scope: !7)
!69 = !DILocation(line: 72, column: 37, scope: !7)
!70 = !DILocation(line: 72, column: 4, scope: !7)
