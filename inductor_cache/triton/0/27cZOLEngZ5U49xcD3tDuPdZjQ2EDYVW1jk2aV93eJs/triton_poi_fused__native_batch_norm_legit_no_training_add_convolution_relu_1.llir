; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 10, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 2, !dbg !12
  %18 = and i32 %17, 508, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = or disjoint i32 %19, 512, !dbg !13
  %21 = sdiv i32 %19, 262144, !dbg !14
  %22 = sdiv i32 %20, 262144, !dbg !14
  %.lhs.trunc = trunc nsw i32 %21 to i16, !dbg !15
  %23 = srem i16 %.lhs.trunc, 16, !dbg !15
  %.lhs.trunc76 = trunc nsw i32 %22 to i16, !dbg !15
  %24 = srem i16 %.lhs.trunc76, 16, !dbg !15
  %25 = sext i32 %19 to i64, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !16
  %27 = sext i32 %20 to i64, !dbg !16
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !16
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !17
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !17
  %31 = sext i16 %23 to i64, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !18
  %33 = sext i16 %24 to i64, !dbg !18
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !18
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !19
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !19
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !19
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !19
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !19
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !19
  %43 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !20
  %44 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !20
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !21
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !21
  %47 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !22
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !23
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !23
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !23
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !23
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !23
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !23
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !23
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !23
  %57 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !24
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !25
  %60 = bitcast i32 %59 to float, !dbg !25
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !25
  %62 = bitcast i32 %61 to float, !dbg !25
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !25
  %64 = bitcast i32 %63 to float, !dbg !25
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !25
  %66 = bitcast i32 %65 to float, !dbg !25
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !25
  %68 = bitcast i32 %67 to float, !dbg !25
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !25
  %70 = bitcast i32 %69 to float, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !25
  %72 = bitcast i32 %71 to float, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !25
  %74 = bitcast i32 %73 to float, !dbg !25
  %75 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !26
  %76 = getelementptr float, ptr addrspace(1) %6, i64 %33, !dbg !26
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !27
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !27
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !27
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !27
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !27
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !27
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !27
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !27
  %85 = getelementptr float, ptr addrspace(1) %7, i64 %31, !dbg !28
  %86 = getelementptr float, ptr addrspace(1) %7, i64 %33, !dbg !28
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !29
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !29
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !29
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !29
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !29
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !29
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !29
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !29
  %95 = getelementptr float, ptr addrspace(1) %8, i64 %31, !dbg !30
  %96 = getelementptr float, ptr addrspace(1) %8, i64 %33, !dbg !30
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #3, !dbg !31
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #3, !dbg !31
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #3, !dbg !31
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #3, !dbg !31
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #3, !dbg !31
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #3, !dbg !31
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #3, !dbg !31
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #3, !dbg !31
  %105 = getelementptr float, ptr addrspace(1) %9, i64 %31, !dbg !32
  %106 = getelementptr float, ptr addrspace(1) %9, i64 %33, !dbg !32
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #3, !dbg !33
  %108 = bitcast i32 %107 to float, !dbg !33
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #3, !dbg !33
  %110 = bitcast i32 %109 to float, !dbg !33
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #3, !dbg !33
  %112 = bitcast i32 %111 to float, !dbg !33
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #3, !dbg !33
  %114 = bitcast i32 %113 to float, !dbg !33
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #3, !dbg !33
  %116 = bitcast i32 %115 to float, !dbg !33
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #3, !dbg !33
  %118 = bitcast i32 %117 to float, !dbg !33
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #3, !dbg !33
  %120 = bitcast i32 %119 to float, !dbg !33
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #3, !dbg !33
  %122 = bitcast i32 %121 to float, !dbg !33
  %123 = getelementptr float, ptr addrspace(1) %10, i64 %31, !dbg !34
  %124 = getelementptr float, ptr addrspace(1) %10, i64 %33, !dbg !34
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #3, !dbg !35
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #3, !dbg !35
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #3, !dbg !35
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #3, !dbg !35
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 true) #3, !dbg !35
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 true) #3, !dbg !35
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 true) #3, !dbg !35
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 true) #3, !dbg !35
  %133 = getelementptr float, ptr addrspace(1) %11, i64 %31, !dbg !36
  %134 = getelementptr float, ptr addrspace(1) %11, i64 %33, !dbg !36
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 true) #3, !dbg !37
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 true) #3, !dbg !37
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 true) #3, !dbg !37
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 true) #3, !dbg !37
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #3, !dbg !37
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #3, !dbg !37
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #3, !dbg !37
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #3, !dbg !37
  %143 = fadd float %60, 0x3EE4F8B580000000, !dbg !38
  %144 = fadd float %62, 0x3EE4F8B580000000, !dbg !38
  %145 = fadd float %64, 0x3EE4F8B580000000, !dbg !38
  %146 = fadd float %66, 0x3EE4F8B580000000, !dbg !38
  %147 = fadd float %68, 0x3EE4F8B580000000, !dbg !38
  %148 = fadd float %70, 0x3EE4F8B580000000, !dbg !38
  %149 = fadd float %72, 0x3EE4F8B580000000, !dbg !38
  %150 = fadd float %74, 0x3EE4F8B580000000, !dbg !38
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i = icmp eq i32 %151, 0, !dbg !39
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i = icmp eq i32 %152, 0, !dbg !39
  br i1 %.not.i, label %158, label %153, !dbg !39

153:                                              ; preds = %13
  br i1 %.not1.i, label %156, label %154, !dbg !39

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %143) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %143) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

158:                                              ; preds = %13
  br i1 %.not1.i, label %161, label %159, !dbg !39

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.f(float %143) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.f(float %143) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %154, %156, %159, %161
  %.0.i = phi float [ %155, %154 ], [ %157, %156 ], [ %160, %159 ], [ %162, %161 ], !dbg !39
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i1 = icmp eq i32 %163, 0, !dbg !39
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i4 = icmp eq i32 %164, 0, !dbg !39
  br i1 %.not.i1, label %170, label %165, !dbg !39

165:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %168, label %166, !dbg !39

166:                                              ; preds = %165
  %167 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %144) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

168:                                              ; preds = %165
  %169 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %144) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

170:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %173, label %171, !dbg !39

171:                                              ; preds = %170
  %172 = tail call float @llvm.nvvm.sqrt.rn.f(float %144) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

173:                                              ; preds = %170
  %174 = tail call float @llvm.nvvm.sqrt.approx.f(float %144) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

__nv_sqrtf.exit5:                                 ; preds = %166, %168, %171, %173
  %.0.i3 = phi float [ %167, %166 ], [ %169, %168 ], [ %172, %171 ], [ %174, %173 ], !dbg !39
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i6 = icmp eq i32 %175, 0, !dbg !39
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i9 = icmp eq i32 %176, 0, !dbg !39
  br i1 %.not.i6, label %182, label %177, !dbg !39

177:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %180, label %178, !dbg !39

178:                                              ; preds = %177
  %179 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %145) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

180:                                              ; preds = %177
  %181 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %145) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

182:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %185, label %183, !dbg !39

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.f(float %145) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.f(float %145) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

__nv_sqrtf.exit10:                                ; preds = %178, %180, %183, %185
  %.0.i8 = phi float [ %179, %178 ], [ %181, %180 ], [ %184, %183 ], [ %186, %185 ], !dbg !39
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i11 = icmp eq i32 %187, 0, !dbg !39
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i14 = icmp eq i32 %188, 0, !dbg !39
  br i1 %.not.i11, label %194, label %189, !dbg !39

189:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %192, label %190, !dbg !39

190:                                              ; preds = %189
  %191 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %146) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

192:                                              ; preds = %189
  %193 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %146) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

194:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %197, label %195, !dbg !39

195:                                              ; preds = %194
  %196 = tail call float @llvm.nvvm.sqrt.rn.f(float %146) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

197:                                              ; preds = %194
  %198 = tail call float @llvm.nvvm.sqrt.approx.f(float %146) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

__nv_sqrtf.exit15:                                ; preds = %190, %192, %195, %197
  %.0.i13 = phi float [ %191, %190 ], [ %193, %192 ], [ %196, %195 ], [ %198, %197 ], !dbg !39
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i16 = icmp eq i32 %199, 0, !dbg !39
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i19 = icmp eq i32 %200, 0, !dbg !39
  br i1 %.not.i16, label %206, label %201, !dbg !39

201:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %204, label %202, !dbg !39

202:                                              ; preds = %201
  %203 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %147) #3, !dbg !39
  br label %__nv_sqrtf.exit20, !dbg !39

204:                                              ; preds = %201
  %205 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %147) #3, !dbg !39
  br label %__nv_sqrtf.exit20, !dbg !39

206:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %209, label %207, !dbg !39

207:                                              ; preds = %206
  %208 = tail call float @llvm.nvvm.sqrt.rn.f(float %147) #3, !dbg !39
  br label %__nv_sqrtf.exit20, !dbg !39

209:                                              ; preds = %206
  %210 = tail call float @llvm.nvvm.sqrt.approx.f(float %147) #3, !dbg !39
  br label %__nv_sqrtf.exit20, !dbg !39

__nv_sqrtf.exit20:                                ; preds = %202, %204, %207, %209
  %.0.i18 = phi float [ %203, %202 ], [ %205, %204 ], [ %208, %207 ], [ %210, %209 ], !dbg !39
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i21 = icmp eq i32 %211, 0, !dbg !39
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i24 = icmp eq i32 %212, 0, !dbg !39
  br i1 %.not.i21, label %218, label %213, !dbg !39

213:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %216, label %214, !dbg !39

214:                                              ; preds = %213
  %215 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %148) #3, !dbg !39
  br label %__nv_sqrtf.exit25, !dbg !39

216:                                              ; preds = %213
  %217 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %148) #3, !dbg !39
  br label %__nv_sqrtf.exit25, !dbg !39

218:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %221, label %219, !dbg !39

219:                                              ; preds = %218
  %220 = tail call float @llvm.nvvm.sqrt.rn.f(float %148) #3, !dbg !39
  br label %__nv_sqrtf.exit25, !dbg !39

221:                                              ; preds = %218
  %222 = tail call float @llvm.nvvm.sqrt.approx.f(float %148) #3, !dbg !39
  br label %__nv_sqrtf.exit25, !dbg !39

__nv_sqrtf.exit25:                                ; preds = %214, %216, %219, %221
  %.0.i23 = phi float [ %215, %214 ], [ %217, %216 ], [ %220, %219 ], [ %222, %221 ], !dbg !39
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i26 = icmp eq i32 %223, 0, !dbg !39
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i29 = icmp eq i32 %224, 0, !dbg !39
  br i1 %.not.i26, label %230, label %225, !dbg !39

225:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %228, label %226, !dbg !39

226:                                              ; preds = %225
  %227 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %149) #3, !dbg !39
  br label %__nv_sqrtf.exit30, !dbg !39

228:                                              ; preds = %225
  %229 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %149) #3, !dbg !39
  br label %__nv_sqrtf.exit30, !dbg !39

230:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %233, label %231, !dbg !39

231:                                              ; preds = %230
  %232 = tail call float @llvm.nvvm.sqrt.rn.f(float %149) #3, !dbg !39
  br label %__nv_sqrtf.exit30, !dbg !39

233:                                              ; preds = %230
  %234 = tail call float @llvm.nvvm.sqrt.approx.f(float %149) #3, !dbg !39
  br label %__nv_sqrtf.exit30, !dbg !39

__nv_sqrtf.exit30:                                ; preds = %226, %228, %231, %233
  %.0.i28 = phi float [ %227, %226 ], [ %229, %228 ], [ %232, %231 ], [ %234, %233 ], !dbg !39
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i31 = icmp eq i32 %235, 0, !dbg !39
  %236 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i34 = icmp eq i32 %236, 0, !dbg !39
  br i1 %.not.i31, label %242, label %237, !dbg !39

237:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %240, label %238, !dbg !39

238:                                              ; preds = %237
  %239 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %150) #3, !dbg !39
  br label %__nv_sqrtf.exit35, !dbg !39

240:                                              ; preds = %237
  %241 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %150) #3, !dbg !39
  br label %__nv_sqrtf.exit35, !dbg !39

242:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %245, label %243, !dbg !39

243:                                              ; preds = %242
  %244 = tail call float @llvm.nvvm.sqrt.rn.f(float %150) #3, !dbg !39
  br label %__nv_sqrtf.exit35, !dbg !39

245:                                              ; preds = %242
  %246 = tail call float @llvm.nvvm.sqrt.approx.f(float %150) #3, !dbg !39
  br label %__nv_sqrtf.exit35, !dbg !39

__nv_sqrtf.exit35:                                ; preds = %238, %240, %243, %245
  %.0.i33 = phi float [ %239, %238 ], [ %241, %240 ], [ %244, %243 ], [ %246, %245 ], !dbg !39
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !40
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !40
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !40
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !40
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !40
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !40
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !40
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !40
  %255 = fadd float %108, 0x3EE4F8B580000000, !dbg !41
  %256 = fadd float %110, 0x3EE4F8B580000000, !dbg !41
  %257 = fadd float %112, 0x3EE4F8B580000000, !dbg !41
  %258 = fadd float %114, 0x3EE4F8B580000000, !dbg !41
  %259 = fadd float %116, 0x3EE4F8B580000000, !dbg !41
  %260 = fadd float %118, 0x3EE4F8B580000000, !dbg !41
  %261 = fadd float %120, 0x3EE4F8B580000000, !dbg !41
  %262 = fadd float %122, 0x3EE4F8B580000000, !dbg !41
  %263 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i36 = icmp eq i32 %263, 0, !dbg !42
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i39 = icmp eq i32 %264, 0, !dbg !42
  br i1 %.not.i36, label %270, label %265, !dbg !42

265:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %268, label %266, !dbg !42

266:                                              ; preds = %265
  %267 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %255) #3, !dbg !42
  br label %__nv_sqrtf.exit40, !dbg !42

268:                                              ; preds = %265
  %269 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %255) #3, !dbg !42
  br label %__nv_sqrtf.exit40, !dbg !42

270:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %273, label %271, !dbg !42

271:                                              ; preds = %270
  %272 = tail call float @llvm.nvvm.sqrt.rn.f(float %255) #3, !dbg !42
  br label %__nv_sqrtf.exit40, !dbg !42

273:                                              ; preds = %270
  %274 = tail call float @llvm.nvvm.sqrt.approx.f(float %255) #3, !dbg !42
  br label %__nv_sqrtf.exit40, !dbg !42

__nv_sqrtf.exit40:                                ; preds = %266, %268, %271, %273
  %.0.i38 = phi float [ %267, %266 ], [ %269, %268 ], [ %272, %271 ], [ %274, %273 ], !dbg !42
  %275 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i41 = icmp eq i32 %275, 0, !dbg !42
  %276 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i44 = icmp eq i32 %276, 0, !dbg !42
  br i1 %.not.i41, label %282, label %277, !dbg !42

277:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %280, label %278, !dbg !42

278:                                              ; preds = %277
  %279 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %256) #3, !dbg !42
  br label %__nv_sqrtf.exit45, !dbg !42

280:                                              ; preds = %277
  %281 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %256) #3, !dbg !42
  br label %__nv_sqrtf.exit45, !dbg !42

282:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %285, label %283, !dbg !42

283:                                              ; preds = %282
  %284 = tail call float @llvm.nvvm.sqrt.rn.f(float %256) #3, !dbg !42
  br label %__nv_sqrtf.exit45, !dbg !42

285:                                              ; preds = %282
  %286 = tail call float @llvm.nvvm.sqrt.approx.f(float %256) #3, !dbg !42
  br label %__nv_sqrtf.exit45, !dbg !42

__nv_sqrtf.exit45:                                ; preds = %278, %280, %283, %285
  %.0.i43 = phi float [ %279, %278 ], [ %281, %280 ], [ %284, %283 ], [ %286, %285 ], !dbg !42
  %287 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i46 = icmp eq i32 %287, 0, !dbg !42
  %288 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i49 = icmp eq i32 %288, 0, !dbg !42
  br i1 %.not.i46, label %294, label %289, !dbg !42

289:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %292, label %290, !dbg !42

290:                                              ; preds = %289
  %291 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %257) #3, !dbg !42
  br label %__nv_sqrtf.exit50, !dbg !42

292:                                              ; preds = %289
  %293 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %257) #3, !dbg !42
  br label %__nv_sqrtf.exit50, !dbg !42

294:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %297, label %295, !dbg !42

295:                                              ; preds = %294
  %296 = tail call float @llvm.nvvm.sqrt.rn.f(float %257) #3, !dbg !42
  br label %__nv_sqrtf.exit50, !dbg !42

297:                                              ; preds = %294
  %298 = tail call float @llvm.nvvm.sqrt.approx.f(float %257) #3, !dbg !42
  br label %__nv_sqrtf.exit50, !dbg !42

__nv_sqrtf.exit50:                                ; preds = %290, %292, %295, %297
  %.0.i48 = phi float [ %291, %290 ], [ %293, %292 ], [ %296, %295 ], [ %298, %297 ], !dbg !42
  %299 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i51 = icmp eq i32 %299, 0, !dbg !42
  %300 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i54 = icmp eq i32 %300, 0, !dbg !42
  br i1 %.not.i51, label %306, label %301, !dbg !42

301:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %304, label %302, !dbg !42

302:                                              ; preds = %301
  %303 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %258) #3, !dbg !42
  br label %__nv_sqrtf.exit55, !dbg !42

304:                                              ; preds = %301
  %305 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %258) #3, !dbg !42
  br label %__nv_sqrtf.exit55, !dbg !42

306:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %309, label %307, !dbg !42

307:                                              ; preds = %306
  %308 = tail call float @llvm.nvvm.sqrt.rn.f(float %258) #3, !dbg !42
  br label %__nv_sqrtf.exit55, !dbg !42

309:                                              ; preds = %306
  %310 = tail call float @llvm.nvvm.sqrt.approx.f(float %258) #3, !dbg !42
  br label %__nv_sqrtf.exit55, !dbg !42

__nv_sqrtf.exit55:                                ; preds = %302, %304, %307, %309
  %.0.i53 = phi float [ %303, %302 ], [ %305, %304 ], [ %308, %307 ], [ %310, %309 ], !dbg !42
  %311 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i56 = icmp eq i32 %311, 0, !dbg !42
  %312 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i59 = icmp eq i32 %312, 0, !dbg !42
  br i1 %.not.i56, label %318, label %313, !dbg !42

313:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %316, label %314, !dbg !42

314:                                              ; preds = %313
  %315 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %259) #3, !dbg !42
  br label %__nv_sqrtf.exit60, !dbg !42

316:                                              ; preds = %313
  %317 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %259) #3, !dbg !42
  br label %__nv_sqrtf.exit60, !dbg !42

318:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %321, label %319, !dbg !42

319:                                              ; preds = %318
  %320 = tail call float @llvm.nvvm.sqrt.rn.f(float %259) #3, !dbg !42
  br label %__nv_sqrtf.exit60, !dbg !42

321:                                              ; preds = %318
  %322 = tail call float @llvm.nvvm.sqrt.approx.f(float %259) #3, !dbg !42
  br label %__nv_sqrtf.exit60, !dbg !42

__nv_sqrtf.exit60:                                ; preds = %314, %316, %319, %321
  %.0.i58 = phi float [ %315, %314 ], [ %317, %316 ], [ %320, %319 ], [ %322, %321 ], !dbg !42
  %323 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i61 = icmp eq i32 %323, 0, !dbg !42
  %324 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i64 = icmp eq i32 %324, 0, !dbg !42
  br i1 %.not.i61, label %330, label %325, !dbg !42

325:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %328, label %326, !dbg !42

326:                                              ; preds = %325
  %327 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %260) #3, !dbg !42
  br label %__nv_sqrtf.exit65, !dbg !42

328:                                              ; preds = %325
  %329 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %260) #3, !dbg !42
  br label %__nv_sqrtf.exit65, !dbg !42

330:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %333, label %331, !dbg !42

331:                                              ; preds = %330
  %332 = tail call float @llvm.nvvm.sqrt.rn.f(float %260) #3, !dbg !42
  br label %__nv_sqrtf.exit65, !dbg !42

333:                                              ; preds = %330
  %334 = tail call float @llvm.nvvm.sqrt.approx.f(float %260) #3, !dbg !42
  br label %__nv_sqrtf.exit65, !dbg !42

__nv_sqrtf.exit65:                                ; preds = %326, %328, %331, %333
  %.0.i63 = phi float [ %327, %326 ], [ %329, %328 ], [ %332, %331 ], [ %334, %333 ], !dbg !42
  %335 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i66 = icmp eq i32 %335, 0, !dbg !42
  %336 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i69 = icmp eq i32 %336, 0, !dbg !42
  br i1 %.not.i66, label %342, label %337, !dbg !42

337:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %340, label %338, !dbg !42

338:                                              ; preds = %337
  %339 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %261) #3, !dbg !42
  br label %__nv_sqrtf.exit70, !dbg !42

340:                                              ; preds = %337
  %341 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %261) #3, !dbg !42
  br label %__nv_sqrtf.exit70, !dbg !42

342:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %345, label %343, !dbg !42

343:                                              ; preds = %342
  %344 = tail call float @llvm.nvvm.sqrt.rn.f(float %261) #3, !dbg !42
  br label %__nv_sqrtf.exit70, !dbg !42

345:                                              ; preds = %342
  %346 = tail call float @llvm.nvvm.sqrt.approx.f(float %261) #3, !dbg !42
  br label %__nv_sqrtf.exit70, !dbg !42

__nv_sqrtf.exit70:                                ; preds = %338, %340, %343, %345
  %.0.i68 = phi float [ %339, %338 ], [ %341, %340 ], [ %344, %343 ], [ %346, %345 ], !dbg !42
  %347 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i71 = icmp eq i32 %347, 0, !dbg !42
  %348 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i74 = icmp eq i32 %348, 0, !dbg !42
  br i1 %.not.i71, label %354, label %349, !dbg !42

349:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %352, label %350, !dbg !42

350:                                              ; preds = %349
  %351 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %262) #3, !dbg !42
  br label %__nv_sqrtf.exit75, !dbg !42

352:                                              ; preds = %349
  %353 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %262) #3, !dbg !42
  br label %__nv_sqrtf.exit75, !dbg !42

354:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %357, label %355, !dbg !42

355:                                              ; preds = %354
  %356 = tail call float @llvm.nvvm.sqrt.rn.f(float %262) #3, !dbg !42
  br label %__nv_sqrtf.exit75, !dbg !42

357:                                              ; preds = %354
  %358 = tail call float @llvm.nvvm.sqrt.approx.f(float %262) #3, !dbg !42
  br label %__nv_sqrtf.exit75, !dbg !42

__nv_sqrtf.exit75:                                ; preds = %350, %352, %355, %357
  %.0.i73 = phi float [ %351, %350 ], [ %353, %352 ], [ %356, %355 ], [ %358, %357 ], !dbg !42
  %359 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !17
  %360 = bitcast i32 %359 to float, !dbg !17
  %361 = bitcast i32 %42 to float, !dbg !19
  %362 = fadd float %360, %361, !dbg !43
  %363 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !21
  %364 = bitcast i32 %363 to float, !dbg !21
  %365 = bitcast i32 %56 to float, !dbg !23
  %366 = fsub float %364, %365, !dbg !44
  %367 = fmul float %366, %254, !dbg !45
  %368 = bitcast i32 %84 to float, !dbg !27
  %369 = fmul float %367, %368, !dbg !46
  %370 = bitcast i32 %94 to float, !dbg !29
  %371 = fadd float %369, %370, !dbg !47
  %372 = fcmp olt float %371, 0.000000e+00, !dbg !48
  %373 = select i1 %372, float 0.000000e+00, float %371, !dbg !52
  %374 = fadd float %362, %373, !dbg !53
  %375 = bitcast i32 %104 to float, !dbg !31
  %376 = fsub float %374, %375, !dbg !54
  %377 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !17
  %378 = bitcast i32 %377 to float, !dbg !17
  %379 = bitcast i32 %41 to float, !dbg !19
  %380 = fadd float %378, %379, !dbg !43
  %381 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !21
  %382 = bitcast i32 %381 to float, !dbg !21
  %383 = bitcast i32 %55 to float, !dbg !23
  %384 = fsub float %382, %383, !dbg !44
  %385 = fmul float %384, %253, !dbg !45
  %386 = bitcast i32 %83 to float, !dbg !27
  %387 = fmul float %385, %386, !dbg !46
  %388 = bitcast i32 %93 to float, !dbg !29
  %389 = fadd float %387, %388, !dbg !47
  %390 = fcmp olt float %389, 0.000000e+00, !dbg !48
  %391 = select i1 %390, float 0.000000e+00, float %389, !dbg !52
  %392 = fadd float %380, %391, !dbg !53
  %393 = bitcast i32 %103 to float, !dbg !31
  %394 = fsub float %392, %393, !dbg !54
  %395 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !17
  %396 = bitcast i32 %395 to float, !dbg !17
  %397 = bitcast i32 %40 to float, !dbg !19
  %398 = fadd float %396, %397, !dbg !43
  %399 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !21
  %400 = bitcast i32 %399 to float, !dbg !21
  %401 = bitcast i32 %54 to float, !dbg !23
  %402 = fsub float %400, %401, !dbg !44
  %403 = fmul float %402, %252, !dbg !45
  %404 = bitcast i32 %82 to float, !dbg !27
  %405 = fmul float %403, %404, !dbg !46
  %406 = bitcast i32 %92 to float, !dbg !29
  %407 = fadd float %405, %406, !dbg !47
  %408 = fcmp olt float %407, 0.000000e+00, !dbg !48
  %409 = select i1 %408, float 0.000000e+00, float %407, !dbg !52
  %410 = fadd float %398, %409, !dbg !53
  %411 = bitcast i32 %102 to float, !dbg !31
  %412 = fsub float %410, %411, !dbg !54
  %413 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !17
  %414 = bitcast i32 %413 to float, !dbg !17
  %415 = bitcast i32 %39 to float, !dbg !19
  %416 = fadd float %414, %415, !dbg !43
  %417 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !21
  %418 = bitcast i32 %417 to float, !dbg !21
  %419 = bitcast i32 %53 to float, !dbg !23
  %420 = fsub float %418, %419, !dbg !44
  %421 = fmul float %420, %251, !dbg !45
  %422 = bitcast i32 %81 to float, !dbg !27
  %423 = fmul float %421, %422, !dbg !46
  %424 = bitcast i32 %91 to float, !dbg !29
  %425 = fadd float %423, %424, !dbg !47
  %426 = fcmp olt float %425, 0.000000e+00, !dbg !48
  %427 = select i1 %426, float 0.000000e+00, float %425, !dbg !52
  %428 = fadd float %416, %427, !dbg !53
  %429 = bitcast i32 %101 to float, !dbg !31
  %430 = fsub float %428, %429, !dbg !54
  %431 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !17
  %432 = bitcast i32 %431 to float, !dbg !17
  %433 = bitcast i32 %38 to float, !dbg !19
  %434 = fadd float %432, %433, !dbg !43
  %435 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !21
  %436 = bitcast i32 %435 to float, !dbg !21
  %437 = bitcast i32 %52 to float, !dbg !23
  %438 = fsub float %436, %437, !dbg !44
  %439 = fmul float %438, %250, !dbg !45
  %440 = bitcast i32 %80 to float, !dbg !27
  %441 = fmul float %439, %440, !dbg !46
  %442 = bitcast i32 %90 to float, !dbg !29
  %443 = fadd float %441, %442, !dbg !47
  %444 = fcmp olt float %443, 0.000000e+00, !dbg !48
  %445 = select i1 %444, float 0.000000e+00, float %443, !dbg !52
  %446 = fadd float %434, %445, !dbg !53
  %447 = bitcast i32 %100 to float, !dbg !31
  %448 = fsub float %446, %447, !dbg !54
  %449 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !17
  %450 = bitcast i32 %449 to float, !dbg !17
  %451 = bitcast i32 %37 to float, !dbg !19
  %452 = fadd float %450, %451, !dbg !43
  %453 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !21
  %454 = bitcast i32 %453 to float, !dbg !21
  %455 = bitcast i32 %51 to float, !dbg !23
  %456 = fsub float %454, %455, !dbg !44
  %457 = fmul float %456, %249, !dbg !45
  %458 = bitcast i32 %79 to float, !dbg !27
  %459 = fmul float %457, %458, !dbg !46
  %460 = bitcast i32 %89 to float, !dbg !29
  %461 = fadd float %459, %460, !dbg !47
  %462 = fcmp olt float %461, 0.000000e+00, !dbg !48
  %463 = select i1 %462, float 0.000000e+00, float %461, !dbg !52
  %464 = fadd float %452, %463, !dbg !53
  %465 = bitcast i32 %99 to float, !dbg !31
  %466 = fsub float %464, %465, !dbg !54
  %467 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !17
  %468 = bitcast i32 %467 to float, !dbg !17
  %469 = bitcast i32 %36 to float, !dbg !19
  %470 = fadd float %468, %469, !dbg !43
  %471 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !21
  %472 = bitcast i32 %471 to float, !dbg !21
  %473 = bitcast i32 %50 to float, !dbg !23
  %474 = fsub float %472, %473, !dbg !44
  %475 = fmul float %474, %248, !dbg !45
  %476 = bitcast i32 %78 to float, !dbg !27
  %477 = fmul float %475, %476, !dbg !46
  %478 = bitcast i32 %88 to float, !dbg !29
  %479 = fadd float %477, %478, !dbg !47
  %480 = fcmp olt float %479, 0.000000e+00, !dbg !48
  %481 = select i1 %480, float 0.000000e+00, float %479, !dbg !52
  %482 = fadd float %470, %481, !dbg !53
  %483 = bitcast i32 %98 to float, !dbg !31
  %484 = fsub float %482, %483, !dbg !54
  %485 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !17
  %486 = bitcast i32 %485 to float, !dbg !17
  %487 = bitcast i32 %35 to float, !dbg !19
  %488 = fadd float %486, %487, !dbg !43
  %489 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !21
  %490 = bitcast i32 %489 to float, !dbg !21
  %491 = bitcast i32 %49 to float, !dbg !23
  %492 = fsub float %490, %491, !dbg !44
  %493 = fmul float %492, %247, !dbg !45
  %494 = bitcast i32 %77 to float, !dbg !27
  %495 = fmul float %493, %494, !dbg !46
  %496 = bitcast i32 %87 to float, !dbg !29
  %497 = fadd float %495, %496, !dbg !47
  %498 = fcmp olt float %497, 0.000000e+00, !dbg !48
  %499 = select i1 %498, float 0.000000e+00, float %497, !dbg !52
  %500 = fadd float %488, %499, !dbg !53
  %501 = bitcast i32 %97 to float, !dbg !31
  %502 = fsub float %500, %501, !dbg !54
  %503 = bitcast i32 %142 to float, !dbg !37
  %504 = bitcast i32 %141 to float, !dbg !37
  %505 = bitcast i32 %140 to float, !dbg !37
  %506 = bitcast i32 %139 to float, !dbg !37
  %507 = bitcast i32 %138 to float, !dbg !37
  %508 = bitcast i32 %137 to float, !dbg !37
  %509 = bitcast i32 %136 to float, !dbg !37
  %510 = bitcast i32 %135 to float, !dbg !37
  %511 = bitcast i32 %132 to float, !dbg !35
  %512 = bitcast i32 %131 to float, !dbg !35
  %513 = bitcast i32 %130 to float, !dbg !35
  %514 = bitcast i32 %129 to float, !dbg !35
  %515 = bitcast i32 %128 to float, !dbg !35
  %516 = bitcast i32 %127 to float, !dbg !35
  %517 = bitcast i32 %126 to float, !dbg !35
  %518 = bitcast i32 %125 to float, !dbg !35
  %519 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !55
  %520 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !55
  %521 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !55
  %522 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !55
  %523 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !55
  %524 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !55
  %525 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !55
  %526 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !55
  %527 = fmul float %502, %519, !dbg !56
  %528 = fmul float %484, %520, !dbg !56
  %529 = fmul float %466, %521, !dbg !56
  %530 = fmul float %448, %522, !dbg !56
  %531 = fmul float %430, %523, !dbg !56
  %532 = fmul float %412, %524, !dbg !56
  %533 = fmul float %394, %525, !dbg !56
  %534 = fmul float %376, %526, !dbg !56
  %535 = fmul float %527, %518, !dbg !57
  %536 = fmul float %528, %517, !dbg !57
  %537 = fmul float %529, %516, !dbg !57
  %538 = fmul float %530, %515, !dbg !57
  %539 = fmul float %531, %514, !dbg !57
  %540 = fmul float %532, %513, !dbg !57
  %541 = fmul float %533, %512, !dbg !57
  %542 = fmul float %534, %511, !dbg !57
  %543 = fadd float %535, %510, !dbg !58
  %544 = fadd float %536, %509, !dbg !58
  %545 = fadd float %537, %508, !dbg !58
  %546 = fadd float %538, %507, !dbg !58
  %547 = fadd float %539, %506, !dbg !58
  %548 = fadd float %540, %505, !dbg !58
  %549 = fadd float %541, %504, !dbg !58
  %550 = fadd float %542, %503, !dbg !58
  %551 = fcmp olt float %543, 0.000000e+00, !dbg !59
  %552 = fcmp olt float %544, 0.000000e+00, !dbg !59
  %553 = fcmp olt float %545, 0.000000e+00, !dbg !59
  %554 = fcmp olt float %546, 0.000000e+00, !dbg !59
  %555 = fcmp olt float %547, 0.000000e+00, !dbg !59
  %556 = fcmp olt float %548, 0.000000e+00, !dbg !59
  %557 = fcmp olt float %549, 0.000000e+00, !dbg !59
  %558 = fcmp olt float %550, 0.000000e+00, !dbg !59
  %559 = select i1 %551, float 0.000000e+00, float %543, !dbg !61
  %560 = select i1 %552, float 0.000000e+00, float %544, !dbg !61
  %561 = select i1 %553, float 0.000000e+00, float %545, !dbg !61
  %562 = select i1 %554, float 0.000000e+00, float %546, !dbg !61
  %563 = select i1 %555, float 0.000000e+00, float %547, !dbg !61
  %564 = select i1 %556, float 0.000000e+00, float %548, !dbg !61
  %565 = select i1 %557, float 0.000000e+00, float %549, !dbg !61
  %566 = select i1 %558, float 0.000000e+00, float %550, !dbg !61
  %567 = bitcast float %488 to i32, !dbg !62
  %568 = bitcast float %470 to i32, !dbg !62
  %569 = bitcast float %452 to i32, !dbg !62
  %570 = bitcast float %434 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %567, i32 %568, i32 %569, i32 %570, ptr addrspace(1) %26, i1 true) #3, !dbg !62
  %571 = bitcast float %416 to i32, !dbg !62
  %572 = bitcast float %398 to i32, !dbg !62
  %573 = bitcast float %380 to i32, !dbg !62
  %574 = bitcast float %362 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %571, i32 %572, i32 %573, i32 %574, ptr addrspace(1) %28, i1 true) #3, !dbg !62
  %575 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !63
  %576 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !63
  %577 = bitcast float %559 to i32, !dbg !64
  %578 = bitcast float %560 to i32, !dbg !64
  %579 = bitcast float %561 to i32, !dbg !64
  %580 = bitcast float %562 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %577, i32 %578, i32 %579, i32 %580, ptr addrspace(1) %575, i1 true) #3, !dbg !64
  %581 = bitcast float %563 to i32, !dbg !64
  %582 = bitcast float %564 to i32, !dbg !64
  %583 = bitcast float %565 to i32, !dbg !64
  %584 = bitcast float %566 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %581, i32 %582, i32 %583, i32 %584, ptr addrspace(1) %576, i1 true) #3, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cojfyx3ll5i3t5qbhp7zimf7bwxlssh7kiplediilz2bfqykjlkc.py", directory: "inductor_cache/oj")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_1", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 31, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 35, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 31, scope: !7)
!37 = !DILocation(line: 36, column: 36, scope: !7)
!38 = !DILocation(line: 40, column: 18, scope: !7)
!39 = !DILocation(line: 41, column: 26, scope: !7)
!40 = !DILocation(line: 43, column: 20, scope: !7)
!41 = !DILocation(line: 53, column: 20, scope: !7)
!42 = !DILocation(line: 54, column: 27, scope: !7)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 38, column: 18, scope: !7)
!45 = !DILocation(line: 46, column: 19, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 48, column: 20, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 50, column: 42, scope: !7)
!52 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 51, column: 19, scope: !7)
!54 = !DILocation(line: 52, column: 20, scope: !7)
!55 = !DILocation(line: 55, column: 20, scope: !7)
!56 = !DILocation(line: 57, column: 20, scope: !7)
!57 = !DILocation(line: 58, column: 20, scope: !7)
!58 = !DILocation(line: 59, column: 20, scope: !7)
!59 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !60)
!60 = !DILocation(line: 60, column: 42, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !60)
!62 = !DILocation(line: 61, column: 39, scope: !7)
!63 = !DILocation(line: 62, column: 28, scope: !7)
!64 = !DILocation(line: 62, column: 40, scope: !7)
!65 = !DILocation(line: 62, column: 4, scope: !7)
