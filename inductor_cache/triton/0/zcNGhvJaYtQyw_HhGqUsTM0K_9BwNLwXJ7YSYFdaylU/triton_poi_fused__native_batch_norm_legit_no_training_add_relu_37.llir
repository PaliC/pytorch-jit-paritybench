; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_37(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 252, !dbg !12
  %16 = shl i32 %13, 1, !dbg !12
  %17 = and i32 %16, 254, !dbg !12
  %18 = and i32 %13, 127, !dbg !12
  %19 = or disjoint i32 %18, 128, !dbg !12
  %20 = or disjoint i32 %12, %15, !dbg !13
  %21 = or disjoint i32 %12, %17, !dbg !13
  %22 = or disjoint i32 %12, %18, !dbg !13
  %23 = or disjoint i32 %12, %19, !dbg !13
  %24 = icmp slt i32 %20, 512, !dbg !14
  %25 = icmp slt i32 %21, 512, !dbg !14
  %26 = icmp slt i32 %22, 512, !dbg !14
  %27 = icmp slt i32 %23, 512, !dbg !14
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %29 = shl i32 %28, 2, !dbg !16
  %30 = lshr i32 %13, 6, !dbg !17
  %.lobit = and i32 %30, 1, !dbg !17
  %31 = or disjoint i32 %29, %.lobit, !dbg !18
  %32 = or disjoint i32 %31, 2, !dbg !18
  %33 = icmp slt i32 %31, 4, !dbg !19
  %34 = icmp slt i32 %32, 4, !dbg !19
  %35 = icmp slt i32 %29, 4, !dbg !19
  %.frozen = freeze i32 %20, !dbg !20
  %36 = sdiv i32 %.frozen, 128, !dbg !20
  %37 = mul i32 %36, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %37, !dbg !21
  %38 = srem i32 %21, 128, !dbg !21
  %.frozen29 = freeze i32 %22, !dbg !20
  %39 = sdiv i32 %.frozen29, 128, !dbg !20
  %40 = mul i32 %39, 128, !dbg !21
  %.decomposed30 = sub i32 %.frozen29, %40, !dbg !21
  %.frozen31 = freeze i32 %23, !dbg !20
  %41 = sdiv i32 %.frozen31, 128, !dbg !20
  %42 = mul i32 %41, 128, !dbg !21
  %.decomposed32 = sub i32 %.frozen31, %42, !dbg !21
  %43 = shl i32 %31, 7, !dbg !22
  %44 = shl i32 %32, 7, !dbg !22
  %45 = shl i32 %36, 9, !dbg !23
  %46 = add i32 %45, %.decomposed, !dbg !24
  %47 = add i32 %46, %43, !dbg !25
  %48 = add i32 %46, %44, !dbg !25
  %49 = sext i32 %47 to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !26
  %51 = sext i32 %48 to i64, !dbg !26
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !26
  %53 = and i1 %24, %33, !dbg !27
  %54 = and i1 %34, %24, !dbg !27
  %55 = and i1 %35, %26, !dbg !27
  %56 = and i1 %35, %27, !dbg !27
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %53) #4, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !28
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !28
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !28
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %54) #4, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !28
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !28
  %67 = and i32 %14, 508, !dbg !28
  %68 = lshr i32 %14, 6, !dbg !28
  %69 = and i32 %68, 4, !dbg !28
  %70 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %69, !dbg !28
  %71 = getelementptr inbounds float, ptr addrspace(3) %70, i32 %67, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %71, i32 %58, i32 %59, i32 %60, i32 %61, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %72 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !28
  %73 = load <2 x float>, ptr addrspace(3) %72, align 8, !dbg !28
  %74 = getelementptr inbounds i8, ptr addrspace(3) %72, i32 1040, !dbg !28
  %75 = load <2 x float>, ptr addrspace(3) %74, align 8, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %71, i32 %63, i32 %64, i32 %65, i32 %66, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %76 = load <2 x float>, ptr addrspace(3) %72, align 8, !dbg !28
  %77 = load <2 x float>, ptr addrspace(3) %74, align 8, !dbg !28
  %78 = sext i32 %38 to i64, !dbg !29
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !29
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %79, i1 %25) #4, !dbg !30
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %78, !dbg !31
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %81, i1 %25) #4, !dbg !32
  %83 = extractvalue { i32, i32 } %82, 0, !dbg !32
  %84 = extractvalue { i32, i32 } %82, 1, !dbg !32
  %85 = bitcast i32 %83 to float, !dbg !32
  %86 = bitcast i32 %84 to float, !dbg !32
  %87 = getelementptr float, ptr addrspace(1) %3, i64 %78, !dbg !33
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %87, i1 %25) #4, !dbg !34
  %89 = getelementptr float, ptr addrspace(1) %4, i64 %78, !dbg !35
  %90 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %89, i1 %25) #4, !dbg !36
  %91 = add i32 %29, 1024, !dbg !37
  %92 = shl nsw i32 %.decomposed30, 2, !dbg !38
  %93 = shl nsw i32 %.decomposed32, 2, !dbg !38
  %94 = shl i32 %39, 11, !dbg !39
  %95 = shl i32 %41, 11, !dbg !39
  %96 = add i32 %94, %92, !dbg !40
  %97 = add i32 %96, %91, !dbg !41
  %98 = add i32 %95, %93, !dbg !40
  %99 = add i32 %98, %91, !dbg !41
  %100 = sext i32 %97 to i64, !dbg !42
  %101 = getelementptr float, ptr addrspace(1) %5, i64 %100, !dbg !42
  %102 = sext i32 %99 to i64, !dbg !42
  %103 = getelementptr float, ptr addrspace(1) %5, i64 %102, !dbg !42
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 %55) #4, !dbg !43
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %103, i1 %56) #4, !dbg !43
  %106 = fadd float %85, 0x3EE4F8B580000000, !dbg !44
  %107 = fadd float %86, 0x3EE4F8B580000000, !dbg !44
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i = icmp eq i32 %108, 0, !dbg !45
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i = icmp eq i32 %109, 0, !dbg !45
  br i1 %.not.i, label %115, label %110, !dbg !45

110:                                              ; preds = %10
  br i1 %.not1.i, label %113, label %111, !dbg !45

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %106) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %106) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

115:                                              ; preds = %10
  br i1 %.not1.i, label %118, label %116, !dbg !45

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %106) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %106) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %111, %113, %116, %118
  %.0.i = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !45
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i24 = icmp eq i32 %120, 0, !dbg !45
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i27 = icmp eq i32 %121, 0, !dbg !45
  br i1 %.not.i24, label %127, label %122, !dbg !45

122:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i27, label %125, label %123, !dbg !45

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %107) #4, !dbg !45
  br label %__nv_sqrtf.exit28, !dbg !45

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %107) #4, !dbg !45
  br label %__nv_sqrtf.exit28, !dbg !45

127:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i27, label %130, label %128, !dbg !45

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.f(float %107) #4, !dbg !45
  br label %__nv_sqrtf.exit28, !dbg !45

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.f(float %107) #4, !dbg !45
  br label %__nv_sqrtf.exit28, !dbg !45

__nv_sqrtf.exit28:                                ; preds = %123, %125, %128, %130
  %.0.i26 = phi float [ %124, %123 ], [ %126, %125 ], [ %129, %128 ], [ %131, %130 ], !dbg !45
  %132 = extractvalue { i32, i32 } %80, 1, !dbg !30
  %133 = extractvalue { i32, i32 } %80, 0, !dbg !30
  %134 = extractelement <2 x float> %75, i64 1, !dbg !28
  %135 = extractelement <2 x float> %75, i64 0, !dbg !28
  %136 = extractelement <2 x float> %73, i64 1, !dbg !28
  %137 = extractelement <2 x float> %73, i64 0, !dbg !28
  %138 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !43
  %139 = bitcast i32 %138 to float, !dbg !43
  %140 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !43
  %141 = bitcast i32 %140 to float, !dbg !43
  %142 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !43
  %143 = bitcast i32 %142 to float, !dbg !43
  %144 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !43
  %145 = bitcast i32 %144 to float, !dbg !43
  %146 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !43
  %147 = bitcast i32 %146 to float, !dbg !43
  %148 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !43
  %149 = bitcast i32 %148 to float, !dbg !43
  %150 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !43
  %151 = bitcast i32 %150 to float, !dbg !43
  %152 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !43
  %153 = bitcast i32 %152 to float, !dbg !43
  %154 = extractvalue { i32, i32 } %90, 1, !dbg !36
  %155 = extractvalue { i32, i32 } %90, 0, !dbg !36
  %156 = extractvalue { i32, i32 } %88, 1, !dbg !34
  %157 = extractvalue { i32, i32 } %88, 0, !dbg !34
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !46
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i26) #4, !dbg !46
  %160 = insertelement <2 x i32> poison, i32 %132, i64 0, !dbg !30
  %161 = insertelement <2 x i32> %160, i32 %133, i64 1, !dbg !30
  %162 = bitcast <2 x i32> %161 to <2 x float>, !dbg !30
  %163 = shufflevector <2 x float> %162, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !30
  %164 = shufflevector <2 x float> %77, <2 x float> %76, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !47
  %165 = insertelement <8 x float> %164, float %134, i64 4, !dbg !47
  %166 = insertelement <8 x float> %165, float %135, i64 5, !dbg !47
  %167 = insertelement <8 x float> %166, float %136, i64 6, !dbg !47
  %168 = insertelement <8 x float> %167, float %137, i64 7, !dbg !47
  %169 = fsub <8 x float> %168, %163, !dbg !47
  %170 = insertelement <2 x i32> poison, i32 %154, i64 0, !dbg !36
  %171 = insertelement <2 x i32> %170, i32 %155, i64 1, !dbg !36
  %172 = bitcast <2 x i32> %171 to <2 x float>, !dbg !36
  %173 = shufflevector <2 x float> %172, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !36
  %174 = insertelement <2 x i32> poison, i32 %156, i64 0, !dbg !34
  %175 = insertelement <2 x i32> %174, i32 %157, i64 1, !dbg !34
  %176 = bitcast <2 x i32> %175 to <2 x float>, !dbg !34
  %177 = shufflevector <2 x float> %176, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !34
  %178 = insertelement <8 x float> poison, float %159, i64 0, !dbg !48
  %179 = insertelement <8 x float> %178, float %158, i64 1, !dbg !48
  %180 = shufflevector <8 x float> %179, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !48
  %181 = fmul <8 x float> %169, %180, !dbg !48
  %182 = fmul <8 x float> %181, %177, !dbg !49
  %183 = fadd <8 x float> %182, %173, !dbg !50
  %184 = fcmp olt <8 x float> %183, zeroinitializer, !dbg !51
  %185 = extractelement <8 x i1> %184, i64 7, !dbg !55
  %186 = extractelement <8 x float> %183, i64 7, !dbg !55
  %187 = select i1 %185, float 0.000000e+00, float %186, !dbg !55
  %188 = extractelement <8 x i1> %184, i64 6, !dbg !55
  %189 = extractelement <8 x float> %183, i64 6, !dbg !55
  %190 = select i1 %188, float 0.000000e+00, float %189, !dbg !55
  %191 = extractelement <8 x i1> %184, i64 5, !dbg !55
  %192 = extractelement <8 x float> %183, i64 5, !dbg !55
  %193 = select i1 %191, float 0.000000e+00, float %192, !dbg !55
  %194 = extractelement <8 x i1> %184, i64 4, !dbg !55
  %195 = extractelement <8 x float> %183, i64 4, !dbg !55
  %196 = select i1 %194, float 0.000000e+00, float %195, !dbg !55
  %197 = extractelement <8 x i1> %184, i64 3, !dbg !55
  %198 = extractelement <8 x float> %183, i64 3, !dbg !55
  %199 = select i1 %197, float 0.000000e+00, float %198, !dbg !55
  %200 = extractelement <8 x i1> %184, i64 2, !dbg !55
  %201 = extractelement <8 x float> %183, i64 2, !dbg !55
  %202 = select i1 %200, float 0.000000e+00, float %201, !dbg !55
  %203 = extractelement <8 x i1> %184, i64 1, !dbg !55
  %204 = extractelement <8 x float> %183, i64 1, !dbg !55
  %205 = select i1 %203, float 0.000000e+00, float %204, !dbg !55
  %206 = extractelement <8 x i1> %184, i64 0, !dbg !55
  %207 = extractelement <8 x float> %183, i64 0, !dbg !55
  %208 = select i1 %206, float 0.000000e+00, float %207, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %209 = shl i32 %13, 3, !dbg !55
  %210 = and i32 %209, 1016, !dbg !55
  %211 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %210, !dbg !55
  %212 = getelementptr float, ptr addrspace(3) %211, i32 %210, !dbg !55
  %213 = bitcast float %187 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %212, <1 x i32> %213, i1 true) #4, !dbg !55
  %214 = or disjoint i32 %210, 4, !dbg !55
  %215 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %214, !dbg !55
  %216 = getelementptr float, ptr addrspace(3) %215, i32 %214, !dbg !55
  %217 = bitcast float %190 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, <1 x i32> %217, i1 true) #4, !dbg !55
  %218 = or disjoint i32 %210, 1, !dbg !55
  %219 = getelementptr float, ptr addrspace(3) %211, i32 %218, !dbg !55
  %220 = bitcast float %193 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %220, i1 true) #4, !dbg !55
  %221 = or disjoint i32 %210, 5, !dbg !55
  %222 = lshr i32 %221, 2, !dbg !55
  %223 = getelementptr float, ptr addrspace(3) @global_smem, i32 %222, !dbg !55
  %224 = getelementptr float, ptr addrspace(3) %223, i32 %221, !dbg !55
  %225 = bitcast float %196 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %225, i1 true) #4, !dbg !55
  %226 = or disjoint i32 %210, 2, !dbg !55
  %227 = getelementptr float, ptr addrspace(3) %211, i32 %226, !dbg !55
  %228 = bitcast float %199 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, <1 x i32> %228, i1 true) #4, !dbg !55
  %229 = or disjoint i32 %210, 6, !dbg !55
  %230 = lshr i32 %229, 2, !dbg !55
  %231 = getelementptr float, ptr addrspace(3) @global_smem, i32 %230, !dbg !55
  %232 = getelementptr float, ptr addrspace(3) %231, i32 %229, !dbg !55
  %233 = bitcast float %202 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %233, i1 true) #4, !dbg !55
  %234 = or disjoint i32 %210, 3, !dbg !55
  %235 = getelementptr float, ptr addrspace(3) %211, i32 %234, !dbg !55
  %236 = bitcast float %205 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %236, i1 true) #4, !dbg !55
  %237 = or disjoint i32 %210, 7, !dbg !55
  %238 = lshr i32 %237, 2, !dbg !55
  %239 = getelementptr float, ptr addrspace(3) @global_smem, i32 %238, !dbg !55
  %240 = getelementptr float, ptr addrspace(3) %239, i32 %237, !dbg !55
  %241 = bitcast float %208 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %242 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %67, !dbg !55
  %243 = getelementptr inbounds float, ptr addrspace(3) %242, i32 %67, !dbg !55
  %244 = load float, ptr addrspace(3) %243, align 4, !dbg !55
  %245 = or disjoint i32 %67, 1, !dbg !55
  %246 = getelementptr inbounds float, ptr addrspace(3) %242, i32 %245, !dbg !55
  %247 = load float, ptr addrspace(3) %246, align 4, !dbg !55
  %248 = or disjoint i32 %67, 2, !dbg !55
  %249 = getelementptr inbounds float, ptr addrspace(3) %242, i32 %248, !dbg !55
  %250 = load float, ptr addrspace(3) %249, align 4, !dbg !55
  %251 = or disjoint i32 %67, 3, !dbg !55
  %252 = getelementptr inbounds float, ptr addrspace(3) %242, i32 %251, !dbg !55
  %253 = load float, ptr addrspace(3) %252, align 4, !dbg !55
  %254 = or disjoint i32 %67, 512, !dbg !55
  %255 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %254, !dbg !55
  %256 = getelementptr inbounds float, ptr addrspace(3) %255, i32 %254, !dbg !55
  %257 = load float, ptr addrspace(3) %256, align 4, !dbg !55
  %258 = or disjoint i32 %67, 513, !dbg !55
  %259 = lshr i32 %258, 2, !dbg !55
  %260 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %259, !dbg !55
  %261 = getelementptr inbounds float, ptr addrspace(3) %260, i32 %258, !dbg !55
  %262 = load float, ptr addrspace(3) %261, align 4, !dbg !55
  %263 = or disjoint i32 %67, 514, !dbg !55
  %264 = lshr i32 %263, 2, !dbg !55
  %265 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %264, !dbg !55
  %266 = getelementptr inbounds float, ptr addrspace(3) %265, i32 %263, !dbg !55
  %267 = load float, ptr addrspace(3) %266, align 4, !dbg !55
  %268 = or disjoint i32 %67, 515, !dbg !55
  %269 = lshr i32 %268, 2, !dbg !55
  %270 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %269, !dbg !55
  %271 = getelementptr inbounds float, ptr addrspace(3) %270, i32 %268, !dbg !55
  %272 = load float, ptr addrspace(3) %271, align 4, !dbg !55
  %273 = fadd float %244, %153, !dbg !56
  %274 = fadd float %247, %151, !dbg !56
  %275 = fadd float %250, %149, !dbg !56
  %276 = fadd float %253, %147, !dbg !56
  %277 = fadd float %257, %145, !dbg !56
  %278 = fadd float %262, %143, !dbg !56
  %279 = fadd float %267, %141, !dbg !56
  %280 = fadd float %272, %139, !dbg !56
  %281 = add i32 %96, %29, !dbg !57
  %282 = add i32 %98, %29, !dbg !57
  %283 = sext i32 %281 to i64, !dbg !58
  %284 = getelementptr float, ptr addrspace(1) %6, i64 %283, !dbg !58
  %285 = sext i32 %282 to i64, !dbg !58
  %286 = getelementptr float, ptr addrspace(1) %6, i64 %285, !dbg !58
  %287 = bitcast float %244 to i32, !dbg !59
  %288 = bitcast float %247 to i32, !dbg !59
  %289 = bitcast float %250 to i32, !dbg !59
  %290 = bitcast float %253 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %287, i32 %288, i32 %289, i32 %290, ptr addrspace(1) %284, i1 %55) #4, !dbg !59
  %291 = bitcast float %257 to i32, !dbg !59
  %292 = bitcast float %262 to i32, !dbg !59
  %293 = bitcast float %267 to i32, !dbg !59
  %294 = bitcast float %272 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %291, i32 %292, i32 %293, i32 %294, ptr addrspace(1) %286, i1 %56) #4, !dbg !59
  %295 = getelementptr float, ptr addrspace(1) %7, i64 %49, !dbg !60
  %296 = getelementptr float, ptr addrspace(1) %7, i64 %51, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %297 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !61
  %298 = bitcast float %273 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %298, i1 true) #4, !dbg !61
  %299 = getelementptr inbounds i8, ptr addrspace(3) %297, i32 1040, !dbg !61
  %300 = bitcast float %274 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %300, i1 true) #4, !dbg !61
  %301 = getelementptr inbounds i8, ptr addrspace(3) %297, i32 2080, !dbg !61
  %302 = bitcast float %275 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %301, <1 x i32> %302, i1 true) #4, !dbg !61
  %303 = getelementptr inbounds i8, ptr addrspace(3) %297, i32 3120, !dbg !61
  %304 = bitcast float %276 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %304, i1 true) #4, !dbg !61
  %305 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !61
  %306 = bitcast float %277 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %305, <1 x i32> %306, i1 true) #4, !dbg !61
  %307 = getelementptr inbounds i8, ptr addrspace(3) %297, i32 1552, !dbg !61
  %308 = bitcast float %278 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %307, <1 x i32> %308, i1 true) #4, !dbg !61
  %309 = getelementptr inbounds i8, ptr addrspace(3) %297, i32 2592, !dbg !61
  %310 = bitcast float %279 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %310, i1 true) #4, !dbg !61
  %311 = getelementptr inbounds i8, ptr addrspace(3) %297, i32 3632, !dbg !61
  %312 = bitcast float %280 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %312, i1 true) #4, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %313 = lshr i32 %254, 6, !dbg !61
  %314 = and i32 %313, 12, !dbg !61
  %315 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %314, !dbg !61
  %316 = getelementptr inbounds float, ptr addrspace(3) %315, i32 %254, !dbg !61
  %317 = load <4 x i32>, ptr addrspace(3) %316, align 16, !dbg !61
  %.extract = load i32, ptr addrspace(3) %71, align 16, !dbg !61
  %318 = getelementptr inbounds i8, ptr addrspace(3) %71, i32 4, !dbg !61
  %.extract17 = load i32, ptr addrspace(3) %318, align 4, !dbg !61
  %319 = getelementptr inbounds i8, ptr addrspace(3) %71, i32 8, !dbg !61
  %.extract18 = load i32, ptr addrspace(3) %319, align 8, !dbg !61
  %320 = getelementptr inbounds i8, ptr addrspace(3) %71, i32 12, !dbg !61
  %.extract19 = load i32, ptr addrspace(3) %320, align 4, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract17, i32 %.extract18, i32 %.extract19, ptr addrspace(1) %295, i1 %53) #4, !dbg !61
  %.extract20 = extractelement <4 x i32> %317, i64 0, !dbg !61
  %.extract21 = extractelement <4 x i32> %317, i64 1, !dbg !61
  %.extract22 = extractelement <4 x i32> %317, i64 2, !dbg !61
  %.extract23 = extractelement <4 x i32> %317, i64 3, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract20, i32 %.extract21, i32 %.extract22, i32 %.extract23, ptr addrspace(1) %296, i1 %54) #4, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "calvfon6apc3ap2fkx3bne7whf4lxfv6k43vkdufdgm2paqbj3zs.py", directory: "inductor_cache/al")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_37, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_37, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_37", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_37", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 39, scope: !7)
!23 = !DILocation(line: 31, column: 48, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 44, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 61, scope: !7)
!28 = !DILocation(line: 31, column: 53, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 35, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 38, scope: !7)
!38 = !DILocation(line: 36, column: 45, scope: !7)
!39 = !DILocation(line: 36, column: 55, scope: !7)
!40 = !DILocation(line: 36, column: 43, scope: !7)
!41 = !DILocation(line: 36, column: 50, scope: !7)
!42 = !DILocation(line: 36, column: 31, scope: !7)
!43 = !DILocation(line: 36, column: 60, scope: !7)
!44 = !DILocation(line: 39, column: 18, scope: !7)
!45 = !DILocation(line: 40, column: 26, scope: !7)
!46 = !DILocation(line: 42, column: 18, scope: !7)
!47 = !DILocation(line: 37, column: 18, scope: !7)
!48 = !DILocation(line: 45, column: 19, scope: !7)
!49 = !DILocation(line: 46, column: 20, scope: !7)
!50 = !DILocation(line: 47, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 49, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 50, column: 20, scope: !7)
!57 = !DILocation(line: 51, column: 37, scope: !7)
!58 = !DILocation(line: 51, column: 25, scope: !7)
!59 = !DILocation(line: 51, column: 54, scope: !7)
!60 = !DILocation(line: 52, column: 25, scope: !7)
!61 = !DILocation(line: 52, column: 55, scope: !7)
!62 = !DILocation(line: 52, column: 4, scope: !7)
