; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_div_relu_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %11 = and i32 %9, 60, !dbg !12
  %12 = lshr i32 %8, 2, !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = or disjoint i32 %7, %11, !dbg !13
  %15 = or disjoint i32 %7, %13, !dbg !13
  %16 = or disjoint i32 %15, 32, !dbg !13
  %17 = icmp slt i32 %14, 64, !dbg !14
  %18 = icmp slt i32 %15, 64, !dbg !14
  %19 = icmp slt i32 %16, 64, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = shl i32 %20, 4, !dbg !16
  %22 = lshr i32 %8, 4, !dbg !17
  %23 = and i32 %22, 7, !dbg !17
  %24 = or disjoint i32 %21, %23, !dbg !18
  %25 = or disjoint i32 %24, 8, !dbg !18
  %26 = or disjoint i32 %21, %10, !dbg !18
  %27 = icmp slt i32 %24, 16, !dbg !19
  %28 = icmp slt i32 %25, 16, !dbg !19
  %29 = icmp slt i32 %26, 16, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %30 = sdiv i32 %.frozen, 16, !dbg !20
  %31 = mul i32 %30, 16, !dbg !21
  %.decomposed = sub i32 %.frozen, %31, !dbg !21
  %32 = sdiv i32 %15, 16, !dbg !20
  %33 = sdiv i32 %16, 16, !dbg !20
  %34 = shl i32 %24, 4, !dbg !22
  %35 = shl i32 %25, 4, !dbg !22
  %36 = shl i32 %30, 8, !dbg !23
  %37 = add i32 %36, %.decomposed, !dbg !24
  %38 = add i32 %37, %34, !dbg !25
  %39 = add i32 %37, %35, !dbg !25
  %40 = sext i32 %38 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !26
  %42 = sext i32 %39 to i64, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !26
  %44 = and i1 %17, %27, !dbg !27
  %45 = and i1 %28, %17, !dbg !27
  %46 = and i1 %18, %29, !dbg !27
  %47 = and i1 %19, %29, !dbg !27
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %44) #2, !dbg !28
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !28
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !28
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !28
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !28
  %53 = bitcast i32 %49 to float, !dbg !28
  %54 = bitcast i32 %50 to float, !dbg !28
  %55 = bitcast i32 %51 to float, !dbg !28
  %56 = bitcast i32 %52 to float, !dbg !28
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %45) #2, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !28
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !28
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !28
  %62 = bitcast i32 %58 to float, !dbg !28
  %63 = bitcast i32 %59 to float, !dbg !28
  %64 = bitcast i32 %60 to float, !dbg !28
  %65 = bitcast i32 %61 to float, !dbg !28
  %66 = shl nsw i32 %32, 4, !dbg !29
  %67 = shl nsw i32 %33, 4, !dbg !29
  %68 = add i32 %66, %26, !dbg !30
  %69 = add i32 %26, %67, !dbg !30
  %70 = sext i32 %68 to i64, !dbg !31
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !31
  %72 = sext i32 %69 to i64, !dbg !31
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !31
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %46) #2, !dbg !32
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !32
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !32
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !32
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !32
  %79 = bitcast i32 %75 to float, !dbg !32
  %80 = bitcast i32 %76 to float, !dbg !32
  %81 = bitcast i32 %77 to float, !dbg !32
  %82 = bitcast i32 %78 to float, !dbg !32
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 %47) #2, !dbg !32
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !32
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !32
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !32
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !32
  %88 = bitcast i32 %84 to float, !dbg !32
  %89 = bitcast i32 %85 to float, !dbg !32
  %90 = bitcast i32 %86 to float, !dbg !32
  %91 = bitcast i32 %87 to float, !dbg !32
  %92 = fcmp olt float %53, 0.000000e+00, !dbg !33
  %93 = fcmp olt float %54, 0.000000e+00, !dbg !33
  %94 = fcmp olt float %55, 0.000000e+00, !dbg !33
  %95 = fcmp olt float %56, 0.000000e+00, !dbg !33
  %96 = fcmp olt float %62, 0.000000e+00, !dbg !33
  %97 = fcmp olt float %63, 0.000000e+00, !dbg !33
  %98 = fcmp olt float %64, 0.000000e+00, !dbg !33
  %99 = fcmp olt float %65, 0.000000e+00, !dbg !33
  %100 = select i1 %92, float 0.000000e+00, float %53, !dbg !37
  %101 = select i1 %93, float 0.000000e+00, float %54, !dbg !37
  %102 = select i1 %94, float 0.000000e+00, float %55, !dbg !37
  %103 = select i1 %95, float 0.000000e+00, float %56, !dbg !37
  %104 = select i1 %96, float 0.000000e+00, float %62, !dbg !37
  %105 = select i1 %97, float 0.000000e+00, float %63, !dbg !37
  %106 = select i1 %98, float 0.000000e+00, float %64, !dbg !37
  %107 = select i1 %99, float 0.000000e+00, float %65, !dbg !37
  %108 = fadd float %100, 0x3F50624DE0000000, !dbg !38
  %109 = fadd float %101, 0x3F50624DE0000000, !dbg !38
  %110 = fadd float %102, 0x3F50624DE0000000, !dbg !38
  %111 = fadd float %103, 0x3F50624DE0000000, !dbg !38
  %112 = fadd float %104, 0x3F50624DE0000000, !dbg !38
  %113 = fadd float %105, 0x3F50624DE0000000, !dbg !38
  %114 = fadd float %106, 0x3F50624DE0000000, !dbg !38
  %115 = fadd float %107, 0x3F50624DE0000000, !dbg !38
  %116 = shl i32 %8, 6, !dbg !38
  %117 = and i32 %116, 960, !dbg !38
  %118 = or disjoint i32 %117, %23, !dbg !38
  %119 = and i32 %9, 508, !dbg !38
  %120 = lshr exact i32 %117, 2, !dbg !38
  %121 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %120, !dbg !38
  %122 = getelementptr float, ptr addrspace(3) %121, i32 %118, !dbg !38
  %123 = bitcast float %108 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #2, !dbg !38
  %124 = or disjoint i32 %118, 16, !dbg !38
  %125 = lshr i32 %124, 4, !dbg !38
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i32 %125, !dbg !38
  %127 = getelementptr float, ptr addrspace(3) %126, i32 %124, !dbg !38
  %128 = bitcast float %109 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %128, i1 true) #2, !dbg !38
  %129 = or disjoint i32 %118, 32, !dbg !38
  %130 = lshr i32 %129, 4, !dbg !38
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i32 %130, !dbg !38
  %132 = getelementptr float, ptr addrspace(3) %131, i32 %129, !dbg !38
  %133 = bitcast float %110 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #2, !dbg !38
  %134 = or disjoint i32 %118, 48, !dbg !38
  %135 = lshr i32 %134, 4, !dbg !38
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %135, !dbg !38
  %137 = getelementptr float, ptr addrspace(3) %136, i32 %134, !dbg !38
  %138 = bitcast float %111 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #2, !dbg !38
  %139 = or disjoint i32 %118, 8, !dbg !38
  %140 = getelementptr float, ptr addrspace(3) %121, i32 %139, !dbg !38
  %141 = bitcast float %112 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %141, i1 true) #2, !dbg !38
  %142 = or disjoint i32 %118, 24, !dbg !38
  %143 = lshr i32 %142, 4, !dbg !38
  %144 = getelementptr float, ptr addrspace(3) @global_smem, i32 %143, !dbg !38
  %145 = getelementptr float, ptr addrspace(3) %144, i32 %142, !dbg !38
  %146 = bitcast float %113 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 true) #2, !dbg !38
  %147 = or disjoint i32 %118, 40, !dbg !38
  %148 = lshr i32 %147, 4, !dbg !38
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !38
  %150 = getelementptr float, ptr addrspace(3) %149, i32 %147, !dbg !38
  %151 = bitcast float %114 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #2, !dbg !38
  %152 = or disjoint i32 %118, 56, !dbg !38
  %153 = lshr i32 %152, 4, !dbg !38
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %153, !dbg !38
  %155 = getelementptr float, ptr addrspace(3) %154, i32 %152, !dbg !38
  %156 = bitcast float %115 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %157 = lshr i32 %119, 4, !dbg !38
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %157, !dbg !38
  %159 = getelementptr inbounds float, ptr addrspace(3) %158, i32 %119, !dbg !38
  %160 = load float, ptr addrspace(3) %159, align 4, !dbg !38
  %161 = or disjoint i32 %119, 1, !dbg !38
  %162 = getelementptr inbounds float, ptr addrspace(3) %158, i32 %161, !dbg !38
  %163 = load float, ptr addrspace(3) %162, align 4, !dbg !38
  %164 = or disjoint i32 %119, 2, !dbg !38
  %165 = getelementptr inbounds float, ptr addrspace(3) %158, i32 %164, !dbg !38
  %166 = load float, ptr addrspace(3) %165, align 4, !dbg !38
  %167 = or disjoint i32 %119, 3, !dbg !38
  %168 = getelementptr inbounds float, ptr addrspace(3) %158, i32 %167, !dbg !38
  %169 = load float, ptr addrspace(3) %168, align 4, !dbg !38
  %170 = or disjoint i32 %119, 512, !dbg !38
  %171 = lshr i32 %170, 4, !dbg !38
  %172 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %171, !dbg !38
  %173 = getelementptr inbounds float, ptr addrspace(3) %172, i32 %170, !dbg !38
  %174 = load float, ptr addrspace(3) %173, align 4, !dbg !38
  %175 = or disjoint i32 %119, 513, !dbg !38
  %176 = lshr i32 %175, 4, !dbg !38
  %177 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %176, !dbg !38
  %178 = getelementptr inbounds float, ptr addrspace(3) %177, i32 %175, !dbg !38
  %179 = load float, ptr addrspace(3) %178, align 4, !dbg !38
  %180 = or disjoint i32 %119, 514, !dbg !38
  %181 = lshr i32 %180, 4, !dbg !38
  %182 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %181, !dbg !38
  %183 = getelementptr inbounds float, ptr addrspace(3) %182, i32 %180, !dbg !38
  %184 = load float, ptr addrspace(3) %183, align 4, !dbg !38
  %185 = or disjoint i32 %119, 515, !dbg !38
  %186 = lshr i32 %185, 4, !dbg !38
  %187 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %186, !dbg !38
  %188 = getelementptr inbounds float, ptr addrspace(3) %187, i32 %185, !dbg !38
  %189 = load float, ptr addrspace(3) %188, align 4, !dbg !38
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %160, float %79) #2, !dbg !39
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %163, float %80) #2, !dbg !39
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %166, float %81) #2, !dbg !39
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %169, float %82) #2, !dbg !39
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %174, float %88) #2, !dbg !39
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %179, float %89) #2, !dbg !39
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %184, float %90) #2, !dbg !39
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %189, float %91) #2, !dbg !39
  %198 = shl i32 %15, 4, !dbg !40
  %199 = shl i32 %16, 4, !dbg !40
  %200 = add i32 %26, %198, !dbg !41
  %201 = add i32 %26, %199, !dbg !41
  %202 = sext i32 %200 to i64, !dbg !42
  %203 = getelementptr float, ptr addrspace(1) %2, i64 %202, !dbg !42
  %204 = sext i32 %201 to i64, !dbg !42
  %205 = getelementptr float, ptr addrspace(1) %2, i64 %204, !dbg !42
  %206 = bitcast float %190 to i32, !dbg !43
  %207 = bitcast float %191 to i32, !dbg !43
  %208 = bitcast float %192 to i32, !dbg !43
  %209 = bitcast float %193 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %206, i32 %207, i32 %208, i32 %209, ptr addrspace(1) %203, i1 %46) #2, !dbg !43
  %210 = bitcast float %194 to i32, !dbg !43
  %211 = bitcast float %195 to i32, !dbg !43
  %212 = bitcast float %196 to i32, !dbg !43
  %213 = bitcast float %197 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %210, i32 %211, i32 %212, i32 %213, ptr addrspace(1) %205, i1 %47) #2, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3ecwei2rataoseyblexmybp46ybodalvyngfnstjm27fe34lihf.py", directory: "inductor_cache/3e")
!4 = !{ptr @triton_poi_fused_add_div_relu_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_relu_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_relu_3", linkageName: "triton_poi_fused_add_div_relu_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 47, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 60, scope: !7)
!28 = !DILocation(line: 32, column: 52, scope: !7)
!29 = !DILocation(line: 33, column: 38, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 43, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 35, column: 40, scope: !7)
!37 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 38, column: 18, scope: !7)
!40 = !DILocation(line: 39, column: 33, scope: !7)
!41 = !DILocation(line: 39, column: 30, scope: !7)
!42 = !DILocation(line: 39, column: 25, scope: !7)
!43 = !DILocation(line: 39, column: 44, scope: !7)
!44 = !DILocation(line: 39, column: 4, scope: !7)
