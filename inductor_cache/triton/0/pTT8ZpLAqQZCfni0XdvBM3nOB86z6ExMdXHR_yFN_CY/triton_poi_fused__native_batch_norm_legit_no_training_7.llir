; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %9 = icmp slt i32 %8, 1536, !dbg !11
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %11 = shl i32 %10, 10, !dbg !13
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %13 = shl i32 %12, 2, !dbg !14
  %14 = and i32 %13, 508, !dbg !14
  %15 = or disjoint i32 %14, 1, !dbg !14
  %16 = or disjoint i32 %14, 2, !dbg !14
  %17 = or disjoint i32 %14, 3, !dbg !14
  %18 = or disjoint i32 %14, 513, !dbg !14
  %19 = or disjoint i32 %14, 514, !dbg !14
  %20 = or disjoint i32 %14, 515, !dbg !14
  %21 = or disjoint i32 %11, %14, !dbg !15
  %22 = or disjoint i32 %11, %15, !dbg !15
  %23 = or disjoint i32 %11, %16, !dbg !15
  %24 = or disjoint i32 %11, %17, !dbg !15
  %25 = or disjoint i32 %21, 512, !dbg !15
  %26 = or disjoint i32 %11, %18, !dbg !15
  %27 = or disjoint i32 %11, %19, !dbg !15
  %28 = or disjoint i32 %11, %20, !dbg !15
  %.frozen = freeze i32 %8, !dbg !16
  %29 = sdiv i32 %.frozen, 384, !dbg !16
  %30 = mul i32 %29, 384, !dbg !17
  %.decomposed = sub i32 %.frozen, %30, !dbg !17
  %31 = mul i32 %21, 384, !dbg !18
  %32 = mul i32 %22, 384, !dbg !18
  %33 = mul i32 %23, 384, !dbg !18
  %34 = mul i32 %24, 384, !dbg !18
  %35 = mul i32 %25, 384, !dbg !18
  %36 = mul i32 %26, 384, !dbg !18
  %37 = mul i32 %27, 384, !dbg !18
  %38 = mul i32 %28, 384, !dbg !18
  %39 = mul i32 %29, 1572864, !dbg !19
  %40 = add i32 %39, %.decomposed, !dbg !20
  %41 = add i32 %40, %31, !dbg !21
  %42 = add i32 %40, %32, !dbg !21
  %43 = add i32 %40, %33, !dbg !21
  %44 = add i32 %40, %34, !dbg !21
  %45 = add i32 %40, %35, !dbg !21
  %46 = add i32 %40, %36, !dbg !21
  %47 = add i32 %40, %37, !dbg !21
  %48 = add i32 %40, %38, !dbg !21
  %49 = sext i32 %41 to i64, !dbg !22
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !22
  %51 = sext i32 %42 to i64, !dbg !22
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !22
  %53 = sext i32 %43 to i64, !dbg !22
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !22
  %55 = sext i32 %44 to i64, !dbg !22
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !22
  %57 = sext i32 %45 to i64, !dbg !22
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !22
  %59 = sext i32 %46 to i64, !dbg !22
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !22
  %61 = sext i32 %47 to i64, !dbg !22
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !22
  %63 = sext i32 %48 to i64, !dbg !22
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !22
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %9) #3, !dbg !23
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %9) #3, !dbg !23
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %9) #3, !dbg !23
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %9) #3, !dbg !23
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %9) #3, !dbg !23
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %9) #3, !dbg !23
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %9) #3, !dbg !23
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %9) #3, !dbg !23
  %73 = sext i32 %.decomposed to i64, !dbg !24
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !24
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %9) #3, !dbg !25
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %9) #3, !dbg !25
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %9) #3, !dbg !25
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %9) #3, !dbg !25
  %79 = getelementptr float, ptr addrspace(1) %2, i64 %73, !dbg !26
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %9) #3, !dbg !27
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %9) #3, !dbg !27
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %9) #3, !dbg !27
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %9) #3, !dbg !27
  %84 = bitcast i32 %83 to float, !dbg !27
  %85 = getelementptr float, ptr addrspace(1) %3, i64 %73, !dbg !28
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %9) #3, !dbg !29
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %9) #3, !dbg !29
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %9) #3, !dbg !29
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %9) #3, !dbg !29
  %90 = getelementptr float, ptr addrspace(1) %4, i64 %73, !dbg !30
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %9) #3, !dbg !31
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %9) #3, !dbg !31
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %9) #3, !dbg !31
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %9) #3, !dbg !31
  %95 = fadd float %84, 0x3EE4F8B580000000, !dbg !32
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !33
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !33
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !33
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i11 = icmp eq i32 %102, 0, !dbg !33
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !33
  %.not1.i14 = icmp eq i32 %103, 0, !dbg !33
  br i1 %.not.i11, label %109, label %104, !dbg !33

104:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %107, label %105, !dbg !33

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #3, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #3, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

109:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %112, label %110, !dbg !33

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #3, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #3, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

__nv_sqrtf.exit15:                                ; preds = %105, %107, %110, %112
  %.0.i13 = phi float [ %106, %105 ], [ %108, %107 ], [ %111, %110 ], [ %113, %112 ], !dbg !33
  %114 = bitcast i32 %72 to float, !dbg !23
  %115 = bitcast i32 %78 to float, !dbg !25
  %116 = fsub float %114, %115, !dbg !34
  %117 = bitcast i32 %71 to float, !dbg !23
  %118 = fsub float %117, %115, !dbg !34
  %119 = bitcast i32 %70 to float, !dbg !23
  %120 = fsub float %119, %115, !dbg !34
  %121 = bitcast i32 %69 to float, !dbg !23
  %122 = fsub float %121, %115, !dbg !34
  %123 = bitcast i32 %68 to float, !dbg !23
  %124 = fsub float %123, %115, !dbg !34
  %125 = bitcast i32 %67 to float, !dbg !23
  %126 = fsub float %125, %115, !dbg !34
  %127 = bitcast i32 %66 to float, !dbg !23
  %128 = fsub float %127, %115, !dbg !34
  %129 = bitcast i32 %65 to float, !dbg !23
  %130 = fsub float %129, %115, !dbg !34
  %131 = bitcast i32 %94 to float, !dbg !31
  %132 = bitcast i32 %89 to float, !dbg !29
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !35
  %134 = fmul float %130, %133, !dbg !36
  %135 = fmul float %128, %133, !dbg !36
  %136 = fmul float %126, %133, !dbg !36
  %137 = fmul float %124, %133, !dbg !36
  %138 = fmul float %122, %133, !dbg !36
  %139 = fmul float %120, %133, !dbg !36
  %140 = fmul float %118, %133, !dbg !36
  %141 = fmul float %116, %133, !dbg !36
  %142 = fmul float %134, %132, !dbg !37
  %143 = fmul float %135, %132, !dbg !37
  %144 = fmul float %136, %132, !dbg !37
  %145 = fmul float %137, %132, !dbg !37
  %146 = fmul float %138, %132, !dbg !37
  %147 = fmul float %139, %132, !dbg !37
  %148 = fmul float %140, %132, !dbg !37
  %149 = fmul float %141, %132, !dbg !37
  %150 = fadd float %142, %131, !dbg !38
  %151 = fadd float %143, %131, !dbg !38
  %152 = fadd float %144, %131, !dbg !38
  %153 = fadd float %145, %131, !dbg !38
  %154 = fadd float %146, %131, !dbg !38
  %155 = fadd float %147, %131, !dbg !38
  %156 = fadd float %148, %131, !dbg !38
  %157 = fadd float %149, %131, !dbg !38
  %158 = shl i32 %8, 12, !dbg !39
  %159 = add i32 %21, %158, !dbg !40
  %160 = add i32 %158, %25, !dbg !40
  %161 = sext i32 %159 to i64, !dbg !41
  %162 = getelementptr float, ptr addrspace(1) %5, i64 %161, !dbg !41
  %163 = sext i32 %160 to i64, !dbg !41
  %164 = getelementptr float, ptr addrspace(1) %5, i64 %163, !dbg !41
  %165 = bitcast float %150 to i32, !dbg !42
  %166 = bitcast float %151 to i32, !dbg !42
  %167 = bitcast float %152 to i32, !dbg !42
  %168 = bitcast float %153 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %165, i32 %166, i32 %167, i32 %168, ptr addrspace(1) %162, i1 %9) #3, !dbg !42
  %169 = bitcast float %154 to i32, !dbg !42
  %170 = bitcast float %155 to i32, !dbg !42
  %171 = bitcast float %156 to i32, !dbg !42
  %172 = bitcast float %157 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %169, i32 %170, i32 %171, i32 %172, ptr addrspace(1) %164, i1 %9) #3, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cinz3witx34b5tvl22bbdugotjqzpbks763jfoldmqcggfipcmaj.py", directory: "inductor_cache/in")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 52, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 44, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 57, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 31, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 26, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 45, column: 19, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 48, column: 35, scope: !7)
!40 = !DILocation(line: 48, column: 30, scope: !7)
!41 = !DILocation(line: 48, column: 25, scope: !7)
!42 = !DILocation(line: 48, column: 47, scope: !7)
!43 = !DILocation(line: 48, column: 4, scope: !7)
