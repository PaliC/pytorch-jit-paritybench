; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_11(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 512, !dbg !13
  %.frozen = freeze i32 %9, !dbg !14
  %11 = sdiv i32 %.frozen, 64, !dbg !14
  %12 = mul i32 %11, 64, !dbg !15
  %.decomposed = sub i32 %.frozen, %12, !dbg !15
  %13 = sdiv i32 %10, 64, !dbg !14
  %14 = srem i32 %11, 32, !dbg !16
  %15 = srem i32 %13, 32, !dbg !16
  %16 = sdiv i32 %9, 2048, !dbg !17
  %17 = sdiv i32 %10, 2048, !dbg !17
  %18 = shl nsw i32 %14, 7, !dbg !18
  %19 = shl nsw i32 %15, 7, !dbg !18
  %20 = shl i32 %16, 13, !dbg !19
  %21 = shl i32 %17, 13, !dbg !19
  %22 = add i32 %20, %.decomposed, !dbg !20
  %23 = add i32 %22, %18, !dbg !21
  %24 = add i32 %21, %.decomposed, !dbg !20
  %25 = add i32 %24, %19, !dbg !21
  %26 = sext i32 %23 to i64, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !22
  %28 = sext i32 %25 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !22
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !23
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !23
  %35 = bitcast i32 %31 to float, !dbg !23
  %36 = bitcast i32 %32 to float, !dbg !23
  %37 = bitcast i32 %33 to float, !dbg !23
  %38 = bitcast i32 %34 to float, !dbg !23
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !23
  %44 = bitcast i32 %40 to float, !dbg !23
  %45 = bitcast i32 %41 to float, !dbg !23
  %46 = bitcast i32 %42 to float, !dbg !23
  %47 = bitcast i32 %43 to float, !dbg !23
  %48 = add i32 %22, 64, !dbg !24
  %49 = add i32 %48, %18, !dbg !25
  %50 = add i32 %24, 64, !dbg !24
  %51 = add i32 %50, %19, !dbg !25
  %52 = sext i32 %49 to i64, !dbg !26
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !26
  %54 = sext i32 %51 to i64, !dbg !26
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !26
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !27
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !27
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !27
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !27
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !27
  %61 = bitcast i32 %57 to float, !dbg !27
  %62 = bitcast i32 %58 to float, !dbg !27
  %63 = bitcast i32 %59 to float, !dbg !27
  %64 = bitcast i32 %60 to float, !dbg !27
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !27
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !27
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !27
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !27
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !27
  %70 = bitcast i32 %66 to float, !dbg !27
  %71 = bitcast i32 %67 to float, !dbg !27
  %72 = bitcast i32 %68 to float, !dbg !27
  %73 = bitcast i32 %69 to float, !dbg !27
  %74 = add i32 %22, 4096, !dbg !28
  %75 = add i32 %74, %18, !dbg !29
  %76 = add i32 %24, 4096, !dbg !28
  %77 = add i32 %76, %19, !dbg !29
  %78 = sext i32 %75 to i64, !dbg !30
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !30
  %80 = sext i32 %77 to i64, !dbg !30
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !30
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 true) #1, !dbg !31
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !31
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !31
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !31
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !31
  %87 = bitcast i32 %83 to float, !dbg !31
  %88 = bitcast i32 %84 to float, !dbg !31
  %89 = bitcast i32 %85 to float, !dbg !31
  %90 = bitcast i32 %86 to float, !dbg !31
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !31
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !31
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !31
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !31
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !31
  %96 = bitcast i32 %92 to float, !dbg !31
  %97 = bitcast i32 %93 to float, !dbg !31
  %98 = bitcast i32 %94 to float, !dbg !31
  %99 = bitcast i32 %95 to float, !dbg !31
  %100 = add i32 %22, 4160, !dbg !32
  %101 = add i32 %100, %18, !dbg !33
  %102 = add i32 %24, 4160, !dbg !32
  %103 = add i32 %102, %19, !dbg !33
  %104 = sext i32 %101 to i64, !dbg !34
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !34
  %106 = sext i32 %103 to i64, !dbg !34
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !34
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !35
  %109 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !35
  %110 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !35
  %111 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !35
  %112 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !35
  %113 = bitcast i32 %109 to float, !dbg !35
  %114 = bitcast i32 %110 to float, !dbg !35
  %115 = bitcast i32 %111 to float, !dbg !35
  %116 = bitcast i32 %112 to float, !dbg !35
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !35
  %118 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !35
  %119 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !35
  %120 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !35
  %121 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !35
  %122 = bitcast i32 %118 to float, !dbg !35
  %123 = bitcast i32 %119 to float, !dbg !35
  %124 = bitcast i32 %120 to float, !dbg !35
  %125 = bitcast i32 %121 to float, !dbg !35
  %126 = fadd float %35, %61, !dbg !36
  %127 = fadd float %36, %62, !dbg !36
  %128 = fadd float %37, %63, !dbg !36
  %129 = fadd float %38, %64, !dbg !36
  %130 = fadd float %44, %70, !dbg !36
  %131 = fadd float %45, %71, !dbg !36
  %132 = fadd float %46, %72, !dbg !36
  %133 = fadd float %47, %73, !dbg !36
  %134 = fadd float %126, %87, !dbg !37
  %135 = fadd float %127, %88, !dbg !37
  %136 = fadd float %128, %89, !dbg !37
  %137 = fadd float %129, %90, !dbg !37
  %138 = fadd float %130, %96, !dbg !37
  %139 = fadd float %131, %97, !dbg !37
  %140 = fadd float %132, %98, !dbg !37
  %141 = fadd float %133, %99, !dbg !37
  %142 = fadd float %134, %113, !dbg !38
  %143 = fadd float %135, %114, !dbg !38
  %144 = fadd float %136, %115, !dbg !38
  %145 = fadd float %137, %116, !dbg !38
  %146 = fadd float %138, %122, !dbg !38
  %147 = fadd float %139, %123, !dbg !38
  %148 = fadd float %140, %124, !dbg !38
  %149 = fadd float %141, %125, !dbg !38
  %150 = fmul float %142, 2.500000e-01, !dbg !39
  %151 = fmul float %143, 2.500000e-01, !dbg !39
  %152 = fmul float %144, 2.500000e-01, !dbg !39
  %153 = fmul float %145, 2.500000e-01, !dbg !39
  %154 = fmul float %146, 2.500000e-01, !dbg !39
  %155 = fmul float %147, 2.500000e-01, !dbg !39
  %156 = fmul float %148, 2.500000e-01, !dbg !39
  %157 = fmul float %149, 2.500000e-01, !dbg !39
  %158 = sext i32 %9 to i64, !dbg !40
  %159 = getelementptr float, ptr addrspace(1) %1, i64 %158, !dbg !40
  %160 = sext i32 %10 to i64, !dbg !40
  %161 = getelementptr float, ptr addrspace(1) %1, i64 %160, !dbg !40
  %162 = bitcast float %150 to i32, !dbg !41
  %163 = bitcast float %151 to i32, !dbg !41
  %164 = bitcast float %152 to i32, !dbg !41
  %165 = bitcast float %153 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %162, i32 %163, i32 %164, i32 %165, ptr addrspace(1) %159, i1 true) #1, !dbg !41
  %166 = bitcast float %154 to i32, !dbg !41
  %167 = bitcast float %155 to i32, !dbg !41
  %168 = bitcast float %156 to i32, !dbg !41
  %169 = bitcast float %157 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %166, i32 %167, i32 %168, i32 %169, ptr addrspace(1) %161, i1 true) #1, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgxjmo3mti36v4i2vr4kpbwdzawyvkehk7l42ptdzxnvgy52ru25.py", directory: "inductor_cache/gx")
!4 = !{ptr @triton_poi_fused_avg_pool2d_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_11", linkageName: "triton_poi_fused_avg_pool2d_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 49, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 44, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 54, scope: !7)
!24 = !DILocation(line: 29, column: 40, scope: !7)
!25 = !DILocation(line: 29, column: 49, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 59, scope: !7)
!28 = !DILocation(line: 30, column: 42, scope: !7)
!29 = !DILocation(line: 30, column: 51, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 61, scope: !7)
!32 = !DILocation(line: 31, column: 42, scope: !7)
!33 = !DILocation(line: 31, column: 51, scope: !7)
!34 = !DILocation(line: 31, column: 30, scope: !7)
!35 = !DILocation(line: 31, column: 61, scope: !7)
!36 = !DILocation(line: 32, column: 18, scope: !7)
!37 = !DILocation(line: 33, column: 18, scope: !7)
!38 = !DILocation(line: 34, column: 18, scope: !7)
!39 = !DILocation(line: 36, column: 18, scope: !7)
!40 = !DILocation(line: 37, column: 25, scope: !7)
!41 = !DILocation(line: 37, column: 36, scope: !7)
!42 = !DILocation(line: 37, column: 4, scope: !7)
