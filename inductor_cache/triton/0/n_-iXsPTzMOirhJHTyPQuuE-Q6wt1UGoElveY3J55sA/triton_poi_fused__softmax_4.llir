; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__softmax_4(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 3, !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = shl i32 %7, 1, !dbg !12
  %11 = and i32 %10, 14, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = icmp slt i32 %12, 16, !dbg !14
  %15 = icmp slt i32 %13, 16, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %17 = shl i32 %16, 4, !dbg !16
  %18 = or disjoint i32 %17, %11, !dbg !17
  %19 = or disjoint i32 %17, %9, !dbg !17
  %20 = icmp slt i32 %18, 16, !dbg !18
  %21 = icmp slt i32 %19, 16, !dbg !18
  %22 = sdiv i32 %18, 4, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %23 = sdiv i32 %.frozen, 4, !dbg !20
  %24 = mul i32 %23, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %24, !dbg !21
  %25 = shl i32 %12, 4, !dbg !22
  %26 = add i32 %18, %25, !dbg !23
  %27 = sext i32 %26 to i64, !dbg !24
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !24
  %29 = and i1 %14, %20, !dbg !25
  %30 = and i1 %15, %21, !dbg !25
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 %29) #2, !dbg !26
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !26
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !26
  %34 = bitcast i32 %32 to float, !dbg !26
  %35 = bitcast i32 %33 to float, !dbg !26
  %36 = shl nsw i32 %22, 2, !dbg !27
  %37 = add i32 %36, %25, !dbg !28
  %38 = sext i32 %37 to i64, !dbg !29
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !29
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %29) #2, !dbg !30
  %41 = bitcast i32 %40 to float, !dbg !30
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %29) #2, !dbg !30
  %43 = bitcast i32 %42 to float, !dbg !30
  %44 = or disjoint i32 %25, 1, !dbg !31
  %45 = add i32 %44, %36, !dbg !32
  %46 = sext i32 %45 to i64, !dbg !33
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !33
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %29) #2, !dbg !34
  %49 = bitcast i32 %48 to float, !dbg !34
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %29) #2, !dbg !34
  %51 = bitcast i32 %50 to float, !dbg !34
  %52 = or disjoint i32 %25, 2, !dbg !35
  %53 = add i32 %52, %36, !dbg !36
  %54 = sext i32 %53 to i64, !dbg !37
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !37
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %29) #2, !dbg !38
  %57 = bitcast i32 %56 to float, !dbg !38
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %29) #2, !dbg !38
  %59 = bitcast i32 %58 to float, !dbg !38
  %60 = or disjoint i32 %25, 3, !dbg !39
  %61 = add i32 %60, %36, !dbg !40
  %62 = sext i32 %61 to i64, !dbg !41
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !41
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %29) #2, !dbg !42
  %65 = bitcast i32 %64 to float, !dbg !42
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %29) #2, !dbg !42
  %67 = bitcast i32 %66 to float, !dbg !42
  %68 = fadd float %41, %49, !dbg !43
  %69 = fadd float %43, %51, !dbg !43
  %70 = fadd float %68, %57, !dbg !44
  %71 = fadd float %69, %59, !dbg !44
  %72 = fadd float %70, %65, !dbg !45
  %73 = fadd float %71, %67, !dbg !45
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %34, float %72) #2, !dbg !46
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %35, float %73) #2, !dbg !46
  %76 = shl i32 %19, 2, !dbg !47
  %77 = add i32 %76, %.decomposed, !dbg !48
  %78 = shl i32 %23, 6, !dbg !49
  %79 = add i32 %77, %78, !dbg !50
  %80 = sext i32 %79 to i64, !dbg !51
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !51
  %82 = shl i32 %7, 5, !dbg !52
  %83 = and i32 %82, 224, !dbg !52
  %84 = or disjoint i32 %83, %9, !dbg !52
  %85 = and i32 %10, 254, !dbg !52
  %86 = lshr exact i32 %83, 3, !dbg !52
  %87 = add nuw nsw i32 %86, %84, !dbg !52
  %88 = zext nneg i32 %87 to i64, !dbg !52
  %89 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %88, !dbg !52
  %90 = bitcast float %74 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #2, !dbg !52
  %91 = or disjoint i32 %84, 16, !dbg !52
  %92 = lshr i32 %91, 3, !dbg !52
  %93 = and i32 %92, 30, !dbg !52
  %94 = add nuw nsw i32 %93, %91, !dbg !52
  %95 = zext nneg i32 %94 to i64, !dbg !52
  %96 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %95, !dbg !52
  %97 = bitcast float %75 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #2, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %98 = lshr i32 %10, 3, !dbg !52
  %99 = and i32 %98, 30, !dbg !52
  %100 = add nuw nsw i32 %99, %85, !dbg !52
  %101 = zext nneg i32 %100 to i64, !dbg !52
  %102 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %101, !dbg !52
  %.extract = load i32, ptr addrspace(3) %102, align 8, !dbg !52
  %103 = getelementptr inbounds i8, ptr addrspace(3) %102, i64 4, !dbg !52
  %.extract2 = load i32, ptr addrspace(3) %103, align 4, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract2, ptr addrspace(1) %81, i1 %30) #2, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbgyoscrxgzjt7rqvox3dievtltgrlzcxhpzb3kwk6h4icozdhog.py", directory: "inductor_cache/bg")
!4 = !{ptr @triton_poi_fused__softmax_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_4", linkageName: "triton_poi_fused__softmax_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 38, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 51, scope: !7)
!26 = !DILocation(line: 33, column: 43, scope: !7)
!27 = !DILocation(line: 34, column: 32, scope: !7)
!28 = !DILocation(line: 34, column: 37, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 45, scope: !7)
!31 = !DILocation(line: 35, column: 34, scope: !7)
!32 = !DILocation(line: 35, column: 41, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 49, scope: !7)
!35 = !DILocation(line: 36, column: 34, scope: !7)
!36 = !DILocation(line: 36, column: 41, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 49, scope: !7)
!39 = !DILocation(line: 37, column: 34, scope: !7)
!40 = !DILocation(line: 37, column: 41, scope: !7)
!41 = !DILocation(line: 37, column: 30, scope: !7)
!42 = !DILocation(line: 37, column: 49, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 39, column: 18, scope: !7)
!45 = !DILocation(line: 40, column: 18, scope: !7)
!46 = !DILocation(line: 41, column: 18, scope: !7)
!47 = !DILocation(line: 42, column: 32, scope: !7)
!48 = !DILocation(line: 42, column: 30, scope: !7)
!49 = !DILocation(line: 42, column: 40, scope: !7)
!50 = !DILocation(line: 42, column: 37, scope: !7)
!51 = !DILocation(line: 42, column: 25, scope: !7)
!52 = !DILocation(line: 42, column: 51, scope: !7)
!53 = !DILocation(line: 42, column: 4, scope: !7)
