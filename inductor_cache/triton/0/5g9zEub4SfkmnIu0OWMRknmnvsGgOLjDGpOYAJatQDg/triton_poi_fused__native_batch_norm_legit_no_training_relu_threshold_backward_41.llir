; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_41(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = icmp slt i32 %9, 8, !dbg !11
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %12 = shl i32 %11, 8, !dbg !13
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %14 = shl i32 %13, 1, !dbg !14
  %15 = and i32 %14, 254, !dbg !14
  %16 = or disjoint i32 %15, 1, !dbg !14
  %17 = or disjoint i32 %12, %15, !dbg !15
  %18 = or disjoint i32 %12, %16, !dbg !15
  %.frozen = freeze i32 %9, !dbg !16
  %19 = sdiv i32 %.frozen, 2, !dbg !16
  %20 = mul i32 %19, 2, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %21 = shl i32 %17, 1, !dbg !18
  %22 = shl i32 %18, 1, !dbg !18
  %23 = shl i32 %19, 13, !dbg !19
  %24 = add i32 %23, %.decomposed, !dbg !20
  %25 = add i32 %24, %21, !dbg !21
  %26 = add i32 %24, %22, !dbg !21
  %27 = sext i32 %25 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = sext i32 %26 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %10) #4, !dbg !23
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %10) #4, !dbg !23
  %33 = sext i32 %.decomposed to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %10) #4, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %10) #4, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %10) #4, !dbg !27
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %10) #4, !dbg !27
  %40 = bitcast i32 %39 to float, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !28
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %10) #4, !dbg !29
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %10) #4, !dbg !29
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !30
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %10) #4, !dbg !31
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %10) #4, !dbg !31
  %47 = fadd float %40, 0x3EE4F8B580000000, !dbg !32
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i1 = icmp eq i32 %50, 0, !dbg !33
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i4 = icmp eq i32 %51, 0, !dbg !33
  br i1 %.not.i1, label %57, label %52, !dbg !33

52:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %55, label %53, !dbg !33

53:                                               ; preds = %52
  %54 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #4, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

55:                                               ; preds = %52
  %56 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #4, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

57:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %60, label %58, !dbg !33

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #4, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #4, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

__nv_sqrtf.exit5:                                 ; preds = %53, %55, %58, %60
  %.0.i3 = phi float [ %54, %53 ], [ %56, %55 ], [ %59, %58 ], [ %61, %60 ], !dbg !33
  %62 = bitcast i32 %32 to float, !dbg !23
  %63 = bitcast i32 %36 to float, !dbg !25
  %64 = fsub float %62, %63, !dbg !34
  %65 = bitcast i32 %31 to float, !dbg !23
  %66 = fsub float %65, %63, !dbg !34
  %67 = bitcast i32 %46 to float, !dbg !31
  %68 = bitcast i32 %43 to float, !dbg !29
  %69 = and i32 %13, 127, !dbg !14
  %70 = or disjoint i32 %69, 128, !dbg !14
  %71 = or disjoint i32 %12, %70, !dbg !15
  %72 = shl i32 %71, 1, !dbg !18
  %73 = add i32 %24, %72, !dbg !21
  %74 = or disjoint i32 %12, %69, !dbg !15
  %75 = shl i32 %74, 1, !dbg !18
  %76 = add i32 %24, %75, !dbg !21
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !35
  %78 = fmul float %66, %77, !dbg !36
  %79 = fmul float %64, %77, !dbg !36
  %80 = fmul float %78, %68, !dbg !37
  %81 = fmul float %79, %68, !dbg !37
  %82 = fadd float %80, %67, !dbg !38
  %83 = fadd float %81, %67, !dbg !38
  %84 = fcmp olt float %82, 0.000000e+00, !dbg !39
  %85 = fcmp olt float %83, 0.000000e+00, !dbg !39
  %86 = select i1 %84, float 0.000000e+00, float %82, !dbg !43
  %87 = select i1 %85, float 0.000000e+00, float %83, !dbg !43
  %88 = fcmp ole float %86, 0.000000e+00, !dbg !44
  %89 = fcmp ole float %87, 0.000000e+00, !dbg !44
  %90 = shl i32 %9, 12, !dbg !45
  %91 = add i32 %17, %90, !dbg !46
  %92 = sext i32 %91 to i64, !dbg !47
  %93 = getelementptr float, ptr addrspace(1) %5, i64 %92, !dbg !47
  %94 = bitcast float %86 to i32, !dbg !48
  %95 = bitcast float %87 to i32, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %94, i32 %95, ptr addrspace(1) %93, i1 %10) #4, !dbg !48
  %96 = sext i32 %76 to i64, !dbg !49
  %97 = getelementptr i1, ptr addrspace(1) %6, i64 %96, !dbg !49
  %98 = sext i32 %73 to i64, !dbg !49
  %99 = getelementptr i1, ptr addrspace(1) %6, i64 %98, !dbg !49
  %100 = zext i1 %88 to i8, !dbg !50
  %101 = zext i1 %89 to i8, !dbg !50
  %102 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %15, !dbg !50
  %103 = insertelement <1 x i8> poison, i8 %100, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %102, <1 x i8> %103, i1 true) #4, !dbg !50
  %104 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %16, !dbg !50
  %105 = insertelement <1 x i8> poison, i8 %101, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %104, <1 x i8> %105, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %106 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %69, !dbg !50
  %107 = load i8, ptr addrspace(3) %106, align 1, !dbg !50
  %108 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %70, !dbg !50
  %109 = load i8, ptr addrspace(3) %108, align 1, !dbg !50
  %110 = and i8 %107, 1, !dbg !50
  %111 = and i8 %109, 1, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %110, ptr addrspace(1) %97, i1 %10) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %111, ptr addrspace(1) %99, i1 %10) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm2bzjaawz4kie6xaips5j6hqukrgmbf37w3n7lkja33zonu4o42.py", directory: "inductor_cache/m2")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_41, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_41, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_41", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_41", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 37, scope: !7)
!19 = !DILocation(line: 32, column: 47, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 42, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 52, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 31, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 26, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 45, column: 19, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 49, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 51, column: 21, scope: !7)
!45 = !DILocation(line: 52, column: 35, scope: !7)
!46 = !DILocation(line: 52, column: 30, scope: !7)
!47 = !DILocation(line: 52, column: 25, scope: !7)
!48 = !DILocation(line: 52, column: 47, scope: !7)
!49 = !DILocation(line: 53, column: 25, scope: !7)
!50 = !DILocation(line: 53, column: 54, scope: !7)
!51 = !DILocation(line: 53, column: 4, scope: !7)
