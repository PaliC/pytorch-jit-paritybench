; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_threshold_backward_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 3, !dbg !12
  %15 = and i32 %14, 1016, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 4, !dbg !13
  %18 = sdiv i32 %16, 256, !dbg !14
  %19 = srem i32 %18, 256, !dbg !15
  %20 = sext i32 %16 to i64, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !16
  %22 = sext i32 %17 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !16
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #4, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #4, !dbg !17
  %26 = sext i32 %19 to i64, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !18
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #4, !dbg !19
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #4, !dbg !19
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #4, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #4, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #4, !dbg !19
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #4, !dbg !19
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #4, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #4, !dbg !19
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !20
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !21
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !21
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !21
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !21
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !21
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !21
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !21
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !21
  %45 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !22
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #4, !dbg !23
  %47 = bitcast i32 %46 to float, !dbg !23
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #4, !dbg !23
  %49 = bitcast i32 %48 to float, !dbg !23
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #4, !dbg !23
  %51 = bitcast i32 %50 to float, !dbg !23
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #4, !dbg !23
  %53 = bitcast i32 %52 to float, !dbg !23
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #4, !dbg !23
  %55 = bitcast i32 %54 to float, !dbg !23
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #4, !dbg !23
  %57 = bitcast i32 %56 to float, !dbg !23
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #4, !dbg !23
  %59 = bitcast i32 %58 to float, !dbg !23
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #4, !dbg !23
  %61 = bitcast i32 %60 to float, !dbg !23
  %62 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !24
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !25
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !25
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !25
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !25
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !25
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !25
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !25
  %71 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !26
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #4, !dbg !27
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #4, !dbg !27
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #4, !dbg !27
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #4, !dbg !27
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #4, !dbg !27
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #4, !dbg !27
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #4, !dbg !27
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #4, !dbg !27
  %80 = getelementptr float, ptr addrspace(1) %6, i64 %20, !dbg !28
  %81 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !28
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 true) #4, !dbg !29
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 true) #4, !dbg !29
  %84 = fadd float %47, 0x3EE4F8B580000000, !dbg !30
  %85 = fadd float %49, 0x3EE4F8B580000000, !dbg !30
  %86 = fadd float %51, 0x3EE4F8B580000000, !dbg !30
  %87 = fadd float %53, 0x3EE4F8B580000000, !dbg !30
  %88 = fadd float %55, 0x3EE4F8B580000000, !dbg !30
  %89 = fadd float %57, 0x3EE4F8B580000000, !dbg !30
  %90 = fadd float %59, 0x3EE4F8B580000000, !dbg !30
  %91 = fadd float %61, 0x3EE4F8B580000000, !dbg !30
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i = icmp eq i32 %92, 0, !dbg !31
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i = icmp eq i32 %93, 0, !dbg !31
  br i1 %.not.i, label %99, label %94, !dbg !31

94:                                               ; preds = %10
  br i1 %.not1.i, label %97, label %95, !dbg !31

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

99:                                               ; preds = %10
  br i1 %.not1.i, label %102, label %100, !dbg !31

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %95, %97, %100, %102
  %.0.i = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !31
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i30 = icmp eq i32 %104, 0, !dbg !31
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i33 = icmp eq i32 %105, 0, !dbg !31
  br i1 %.not.i30, label %111, label %106, !dbg !31

106:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i33, label %109, label %107, !dbg !31

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #4, !dbg !31
  br label %__nv_sqrtf.exit34, !dbg !31

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #4, !dbg !31
  br label %__nv_sqrtf.exit34, !dbg !31

111:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i33, label %114, label %112, !dbg !31

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #4, !dbg !31
  br label %__nv_sqrtf.exit34, !dbg !31

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #4, !dbg !31
  br label %__nv_sqrtf.exit34, !dbg !31

__nv_sqrtf.exit34:                                ; preds = %107, %109, %112, %114
  %.0.i32 = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !31
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i35 = icmp eq i32 %116, 0, !dbg !31
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i38 = icmp eq i32 %117, 0, !dbg !31
  br i1 %.not.i35, label %123, label %118, !dbg !31

118:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %121, label %119, !dbg !31

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #4, !dbg !31
  br label %__nv_sqrtf.exit39, !dbg !31

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #4, !dbg !31
  br label %__nv_sqrtf.exit39, !dbg !31

123:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %126, label %124, !dbg !31

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #4, !dbg !31
  br label %__nv_sqrtf.exit39, !dbg !31

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #4, !dbg !31
  br label %__nv_sqrtf.exit39, !dbg !31

__nv_sqrtf.exit39:                                ; preds = %119, %121, %124, %126
  %.0.i37 = phi float [ %120, %119 ], [ %122, %121 ], [ %125, %124 ], [ %127, %126 ], !dbg !31
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i40 = icmp eq i32 %128, 0, !dbg !31
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i43 = icmp eq i32 %129, 0, !dbg !31
  br i1 %.not.i40, label %135, label %130, !dbg !31

130:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %133, label %131, !dbg !31

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #4, !dbg !31
  br label %__nv_sqrtf.exit44, !dbg !31

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #4, !dbg !31
  br label %__nv_sqrtf.exit44, !dbg !31

135:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %138, label %136, !dbg !31

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #4, !dbg !31
  br label %__nv_sqrtf.exit44, !dbg !31

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #4, !dbg !31
  br label %__nv_sqrtf.exit44, !dbg !31

__nv_sqrtf.exit44:                                ; preds = %131, %133, %136, %138
  %.0.i42 = phi float [ %132, %131 ], [ %134, %133 ], [ %137, %136 ], [ %139, %138 ], !dbg !31
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i45 = icmp eq i32 %140, 0, !dbg !31
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i48 = icmp eq i32 %141, 0, !dbg !31
  br i1 %.not.i45, label %147, label %142, !dbg !31

142:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %145, label %143, !dbg !31

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #4, !dbg !31
  br label %__nv_sqrtf.exit49, !dbg !31

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #4, !dbg !31
  br label %__nv_sqrtf.exit49, !dbg !31

147:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %150, label %148, !dbg !31

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #4, !dbg !31
  br label %__nv_sqrtf.exit49, !dbg !31

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #4, !dbg !31
  br label %__nv_sqrtf.exit49, !dbg !31

__nv_sqrtf.exit49:                                ; preds = %143, %145, %148, %150
  %.0.i47 = phi float [ %144, %143 ], [ %146, %145 ], [ %149, %148 ], [ %151, %150 ], !dbg !31
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i50 = icmp eq i32 %152, 0, !dbg !31
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i53 = icmp eq i32 %153, 0, !dbg !31
  br i1 %.not.i50, label %159, label %154, !dbg !31

154:                                              ; preds = %__nv_sqrtf.exit49
  br i1 %.not1.i53, label %157, label %155, !dbg !31

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %89) #4, !dbg !31
  br label %__nv_sqrtf.exit54, !dbg !31

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %89) #4, !dbg !31
  br label %__nv_sqrtf.exit54, !dbg !31

159:                                              ; preds = %__nv_sqrtf.exit49
  br i1 %.not1.i53, label %162, label %160, !dbg !31

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.f(float %89) #4, !dbg !31
  br label %__nv_sqrtf.exit54, !dbg !31

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.f(float %89) #4, !dbg !31
  br label %__nv_sqrtf.exit54, !dbg !31

__nv_sqrtf.exit54:                                ; preds = %155, %157, %160, %162
  %.0.i52 = phi float [ %156, %155 ], [ %158, %157 ], [ %161, %160 ], [ %163, %162 ], !dbg !31
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i55 = icmp eq i32 %164, 0, !dbg !31
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i58 = icmp eq i32 %165, 0, !dbg !31
  br i1 %.not.i55, label %171, label %166, !dbg !31

166:                                              ; preds = %__nv_sqrtf.exit54
  br i1 %.not1.i58, label %169, label %167, !dbg !31

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #4, !dbg !31
  br label %__nv_sqrtf.exit59, !dbg !31

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #4, !dbg !31
  br label %__nv_sqrtf.exit59, !dbg !31

171:                                              ; preds = %__nv_sqrtf.exit54
  br i1 %.not1.i58, label %174, label %172, !dbg !31

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #4, !dbg !31
  br label %__nv_sqrtf.exit59, !dbg !31

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #4, !dbg !31
  br label %__nv_sqrtf.exit59, !dbg !31

__nv_sqrtf.exit59:                                ; preds = %167, %169, %172, %174
  %.0.i57 = phi float [ %168, %167 ], [ %170, %169 ], [ %173, %172 ], [ %175, %174 ], !dbg !31
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i60 = icmp eq i32 %176, 0, !dbg !31
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i63 = icmp eq i32 %177, 0, !dbg !31
  br i1 %.not.i60, label %183, label %178, !dbg !31

178:                                              ; preds = %__nv_sqrtf.exit59
  br i1 %.not1.i63, label %181, label %179, !dbg !31

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #4, !dbg !31
  br label %__nv_sqrtf.exit64, !dbg !31

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #4, !dbg !31
  br label %__nv_sqrtf.exit64, !dbg !31

183:                                              ; preds = %__nv_sqrtf.exit59
  br i1 %.not1.i63, label %186, label %184, !dbg !31

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #4, !dbg !31
  br label %__nv_sqrtf.exit64, !dbg !31

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #4, !dbg !31
  br label %__nv_sqrtf.exit64, !dbg !31

__nv_sqrtf.exit64:                                ; preds = %179, %181, %184, %186
  %.0.i62 = phi float [ %180, %179 ], [ %182, %181 ], [ %185, %184 ], [ %187, %186 ], !dbg !31
  %188 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !17
  %189 = insertelement <4 x i32> poison, i32 %32, i64 0, !dbg !19
  %190 = insertelement <4 x i32> %189, i32 %33, i64 1, !dbg !19
  %191 = insertelement <4 x i32> %190, i32 %34, i64 2, !dbg !19
  %192 = insertelement <4 x i32> %191, i32 %35, i64 3, !dbg !19
  %193 = bitcast <4 x i32> %192 to <4 x float>, !dbg !19
  %194 = insertelement <4 x i32> poison, i32 %41, i64 0, !dbg !21
  %195 = insertelement <4 x i32> %194, i32 %42, i64 1, !dbg !21
  %196 = insertelement <4 x i32> %195, i32 %43, i64 2, !dbg !21
  %197 = insertelement <4 x i32> %196, i32 %44, i64 3, !dbg !21
  %198 = bitcast <4 x i32> %197 to <4 x float>, !dbg !21
  %199 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !17
  %200 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !17
  %201 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !17
  %202 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !17
  %203 = insertelement <4 x i32> poison, i32 %28, i64 0, !dbg !19
  %204 = insertelement <4 x i32> %203, i32 %29, i64 1, !dbg !19
  %205 = insertelement <4 x i32> %204, i32 %30, i64 2, !dbg !19
  %206 = insertelement <4 x i32> %205, i32 %31, i64 3, !dbg !19
  %207 = bitcast <4 x i32> %206 to <4 x float>, !dbg !19
  %208 = insertelement <4 x i32> poison, i32 %37, i64 0, !dbg !21
  %209 = insertelement <4 x i32> %208, i32 %38, i64 1, !dbg !21
  %210 = insertelement <4 x i32> %209, i32 %39, i64 2, !dbg !21
  %211 = insertelement <4 x i32> %210, i32 %40, i64 3, !dbg !21
  %212 = bitcast <4 x i32> %211 to <4 x float>, !dbg !21
  %213 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !17
  %214 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !17
  %215 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !17
  %216 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !29
  %217 = bitcast i32 %216 to float, !dbg !29
  %218 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !29
  %219 = bitcast i32 %218 to float, !dbg !29
  %220 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !29
  %221 = bitcast i32 %220 to float, !dbg !29
  %222 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !29
  %223 = bitcast i32 %222 to float, !dbg !29
  %224 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !29
  %225 = bitcast i32 %224 to float, !dbg !29
  %226 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !29
  %227 = bitcast i32 %226 to float, !dbg !29
  %228 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !29
  %229 = bitcast i32 %228 to float, !dbg !29
  %230 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !29
  %231 = bitcast i32 %230 to float, !dbg !29
  %232 = insertelement <4 x i32> poison, i32 %76, i64 0, !dbg !27
  %233 = insertelement <4 x i32> %232, i32 %77, i64 1, !dbg !27
  %234 = insertelement <4 x i32> %233, i32 %78, i64 2, !dbg !27
  %235 = insertelement <4 x i32> %234, i32 %79, i64 3, !dbg !27
  %236 = bitcast <4 x i32> %235 to <4 x float>, !dbg !27
  %237 = insertelement <4 x i32> poison, i32 %72, i64 0, !dbg !27
  %238 = insertelement <4 x i32> %237, i32 %73, i64 1, !dbg !27
  %239 = insertelement <4 x i32> %238, i32 %74, i64 2, !dbg !27
  %240 = insertelement <4 x i32> %239, i32 %75, i64 3, !dbg !27
  %241 = bitcast <4 x i32> %240 to <4 x float>, !dbg !27
  %242 = insertelement <4 x i32> poison, i32 %67, i64 0, !dbg !25
  %243 = insertelement <4 x i32> %242, i32 %68, i64 1, !dbg !25
  %244 = insertelement <4 x i32> %243, i32 %69, i64 2, !dbg !25
  %245 = insertelement <4 x i32> %244, i32 %70, i64 3, !dbg !25
  %246 = bitcast <4 x i32> %245 to <4 x float>, !dbg !25
  %247 = insertelement <4 x i32> poison, i32 %63, i64 0, !dbg !25
  %248 = insertelement <4 x i32> %247, i32 %64, i64 1, !dbg !25
  %249 = insertelement <4 x i32> %248, i32 %65, i64 2, !dbg !25
  %250 = insertelement <4 x i32> %249, i32 %66, i64 3, !dbg !25
  %251 = bitcast <4 x i32> %250 to <4 x float>, !dbg !25
  %252 = shl i32 %13, 2, !dbg !12
  %253 = and i32 %252, 508, !dbg !12
  %254 = or disjoint i32 %253, 512, !dbg !12
  %255 = or disjoint i32 %12, %254, !dbg !13
  %256 = sext i32 %255 to i64, !dbg !16
  %257 = getelementptr float, ptr addrspace(1) %0, i64 %256, !dbg !16
  %258 = or disjoint i32 %12, %253, !dbg !13
  %259 = sext i32 %258 to i64, !dbg !16
  %260 = getelementptr float, ptr addrspace(1) %0, i64 %259, !dbg !16
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !32
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !32
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !32
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i42) #4, !dbg !32
  %265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i47) #4, !dbg !32
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i52) #4, !dbg !32
  %267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i57) #4, !dbg !32
  %268 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i62) #4, !dbg !32
  %269 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !33
  %270 = getelementptr inbounds i8, ptr addrspace(3) %269, i32 16, !dbg !33
  %271 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %253, !dbg !33
  %272 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %254, !dbg !33
  %273 = getelementptr inbounds i8, ptr addrspace(3) %271, i32 4, !dbg !33
  %274 = getelementptr inbounds i8, ptr addrspace(3) %271, i32 8, !dbg !33
  %275 = getelementptr inbounds i8, ptr addrspace(3) %271, i32 12, !dbg !33
  %276 = getelementptr float, ptr addrspace(1) %7, i64 %259, !dbg !34
  %277 = getelementptr float, ptr addrspace(1) %7, i64 %256, !dbg !34
  %278 = getelementptr i1, ptr addrspace(1) %8, i64 %20, !dbg !35
  %279 = insertelement <4 x i32> poison, i32 %215, i64 0, !dbg !17
  %280 = insertelement <4 x i32> %279, i32 %214, i64 1, !dbg !17
  %281 = insertelement <4 x i32> %280, i32 %213, i64 2, !dbg !17
  %282 = insertelement <4 x i32> %281, i32 %202, i64 3, !dbg !17
  %283 = bitcast <4 x i32> %282 to <4 x float>, !dbg !17
  %284 = fadd <4 x float> %283, %207, !dbg !36
  %285 = fsub <4 x float> %284, %212, !dbg !37
  %286 = insertelement <4 x float> poison, float %261, i64 0, !dbg !38
  %287 = insertelement <4 x float> %286, float %262, i64 1, !dbg !38
  %288 = insertelement <4 x float> %287, float %263, i64 2, !dbg !38
  %289 = insertelement <4 x float> %288, float %264, i64 3, !dbg !38
  %290 = fmul <4 x float> %285, %289, !dbg !38
  %291 = fmul <4 x float> %290, %251, !dbg !39
  %292 = fadd <4 x float> %291, %241, !dbg !40
  %293 = fcmp olt <4 x float> %292, zeroinitializer, !dbg !41
  %294 = select <4 x i1> %293, <4 x float> zeroinitializer, <4 x float> %292, !dbg !45
  %295 = extractelement <4 x float> %294, i64 0, !dbg !46
  %296 = fadd float %295, %231, !dbg !46
  %297 = extractelement <4 x float> %294, i64 1, !dbg !46
  %298 = fadd float %297, %229, !dbg !46
  %299 = extractelement <4 x float> %294, i64 2, !dbg !46
  %300 = fadd float %299, %227, !dbg !46
  %301 = extractelement <4 x float> %294, i64 3, !dbg !46
  %302 = fadd float %301, %225, !dbg !46
  %303 = fcmp ole <4 x float> %294, zeroinitializer, !dbg !47
  %bc = bitcast <4 x float> %284 to <4 x i32>, !dbg !33
  %304 = extractelement <4 x i32> %bc, i64 0, !dbg !33
  %bc65 = bitcast <4 x float> %284 to <4 x i32>, !dbg !33
  %305 = extractelement <4 x i32> %bc65, i64 1, !dbg !33
  %bc66 = bitcast <4 x float> %284 to <4 x i32>, !dbg !33
  %306 = extractelement <4 x i32> %bc66, i64 2, !dbg !33
  %bc67 = bitcast <4 x float> %284 to <4 x i32>, !dbg !33
  %307 = extractelement <4 x i32> %bc67, i64 3, !dbg !33
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %269, i32 %304, i32 %305, i32 %306, i32 %307, i1 true) #4, !dbg !33
  %308 = bitcast float %296 to i32, !dbg !48
  %309 = bitcast float %298 to i32, !dbg !48
  %310 = bitcast float %300 to i32, !dbg !48
  %311 = bitcast float %302 to i32, !dbg !48
  %312 = insertelement <4 x i32> poison, i32 %201, i64 0, !dbg !17
  %313 = insertelement <4 x i32> %312, i32 %200, i64 1, !dbg !17
  %314 = insertelement <4 x i32> %313, i32 %199, i64 2, !dbg !17
  %315 = insertelement <4 x i32> %314, i32 %188, i64 3, !dbg !17
  %316 = bitcast <4 x i32> %315 to <4 x float>, !dbg !17
  %317 = fadd <4 x float> %316, %193, !dbg !36
  %318 = fsub <4 x float> %317, %198, !dbg !37
  %319 = insertelement <4 x float> poison, float %265, i64 0, !dbg !38
  %320 = insertelement <4 x float> %319, float %266, i64 1, !dbg !38
  %321 = insertelement <4 x float> %320, float %267, i64 2, !dbg !38
  %322 = insertelement <4 x float> %321, float %268, i64 3, !dbg !38
  %323 = fmul <4 x float> %318, %322, !dbg !38
  %324 = fmul <4 x float> %323, %246, !dbg !39
  %325 = fadd <4 x float> %324, %236, !dbg !40
  %326 = fcmp olt <4 x float> %325, zeroinitializer, !dbg !41
  %327 = select <4 x i1> %326, <4 x float> zeroinitializer, <4 x float> %325, !dbg !45
  %328 = extractelement <4 x float> %327, i64 0, !dbg !46
  %329 = fadd float %328, %223, !dbg !46
  %330 = extractelement <4 x float> %327, i64 1, !dbg !46
  %331 = fadd float %330, %221, !dbg !46
  %332 = extractelement <4 x float> %327, i64 2, !dbg !46
  %333 = fadd float %332, %219, !dbg !46
  %334 = extractelement <4 x float> %327, i64 3, !dbg !46
  %335 = fadd float %334, %217, !dbg !46
  %336 = fcmp ole <4 x float> %327, zeroinitializer, !dbg !47
  %bc68 = bitcast <4 x float> %317 to <4 x i32>, !dbg !33
  %337 = extractelement <4 x i32> %bc68, i64 0, !dbg !33
  %bc69 = bitcast <4 x float> %317 to <4 x i32>, !dbg !33
  %338 = extractelement <4 x i32> %bc69, i64 1, !dbg !33
  %bc70 = bitcast <4 x float> %317 to <4 x i32>, !dbg !33
  %339 = extractelement <4 x i32> %bc70, i64 2, !dbg !33
  %bc71 = bitcast <4 x float> %317 to <4 x i32>, !dbg !33
  %340 = extractelement <4 x i32> %bc71, i64 3, !dbg !33
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %270, i32 %337, i32 %338, i32 %339, i32 %340, i1 true) #4, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %341 = load <4 x i32>, ptr addrspace(3) %272, align 16, !dbg !33
  %.extract = load i32, ptr addrspace(3) %271, align 16, !dbg !33
  %.extract8 = load i32, ptr addrspace(3) %273, align 4, !dbg !33
  %.extract9 = load i32, ptr addrspace(3) %274, align 8, !dbg !33
  %.extract10 = load i32, ptr addrspace(3) %275, align 4, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %260, i1 true) #4, !dbg !33
  %.extract11 = extractelement <4 x i32> %341, i64 0, !dbg !33
  %.extract12 = extractelement <4 x i32> %341, i64 1, !dbg !33
  %.extract13 = extractelement <4 x i32> %341, i64 2, !dbg !33
  %.extract14 = extractelement <4 x i32> %341, i64 3, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %257, i1 true) #4, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %342 = bitcast float %329 to i32, !dbg !48
  %343 = bitcast float %331 to i32, !dbg !48
  %344 = bitcast float %333 to i32, !dbg !48
  %345 = bitcast float %335 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %269, i32 %308, i32 %309, i32 %310, i32 %311, i1 true) #4, !dbg !48
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %270, i32 %342, i32 %343, i32 %344, i32 %345, i1 true) #4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %346 = load <4 x i32>, ptr addrspace(3) %272, align 16, !dbg !48
  %.extract22 = load i32, ptr addrspace(3) %271, align 16, !dbg !48
  %.extract23 = load i32, ptr addrspace(3) %273, align 4, !dbg !48
  %.extract24 = load i32, ptr addrspace(3) %274, align 8, !dbg !48
  %.extract25 = load i32, ptr addrspace(3) %275, align 4, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %276, i1 true) #4, !dbg !48
  %.extract26 = extractelement <4 x i32> %346, i64 0, !dbg !48
  %.extract27 = extractelement <4 x i32> %346, i64 1, !dbg !48
  %.extract28 = extractelement <4 x i32> %346, i64 2, !dbg !48
  %.extract29 = extractelement <4 x i32> %346, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %277, i1 true) #4, !dbg !48
  %347 = zext <4 x i1> %303 to <4 x i8>, !dbg !49
  %348 = bitcast <4 x i8> %347 to i32, !dbg !49
  %349 = zext <4 x i1> %336 to <4 x i8>, !dbg !49
  %350 = bitcast <4 x i8> %349 to i32, !dbg !49
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %348, i32 %350, ptr addrspace(1) %278, i1 true) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqlf5synh2ilam5vul2wgjydwrjttwmqexgpx3y7ufhbuyf2rybx.py", directory: "inductor_cache/ql")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_threshold_backward_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_threshold_backward_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_threshold_backward_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_threshold_backward_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 26, scope: !7)
!32 = !DILocation(line: 39, column: 19, scope: !7)
!33 = !DILocation(line: 50, column: 39, scope: !7)
!34 = !DILocation(line: 51, column: 25, scope: !7)
!35 = !DILocation(line: 52, column: 25, scope: !7)
!36 = !DILocation(line: 33, column: 18, scope: !7)
!37 = !DILocation(line: 34, column: 18, scope: !7)
!38 = !DILocation(line: 42, column: 19, scope: !7)
!39 = !DILocation(line: 43, column: 20, scope: !7)
!40 = !DILocation(line: 44, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 46, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 49, column: 21, scope: !7)
!48 = !DILocation(line: 51, column: 37, scope: !7)
!49 = !DILocation(line: 52, column: 37, scope: !7)
!50 = !DILocation(line: 52, column: 4, scope: !7)
