#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_clamp_div_gather_mul_pow_rsub_sqrt_sub_2(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":19:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<128xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<128xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<4> : tensor<128xi64, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<128xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<true> : tensor<128xi1, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<1> : tensor<128xi64, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<4> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<256> : tensor<128xi32, #blocked> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<128xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<128xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_6 : tensor<128xi32, #blocked> loc(#loc6)
    %6 = arith.divsi %4, %cst_5 : tensor<128xi32, #blocked> loc(#loc7)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc8)
    %8 = tt.addptr %7, %4 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc8)
    %9 = tt.load %8, %5 : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc9)
    %10 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<128x!tt.ptr<i64>, #blocked> loc(#loc10)
    %11 = tt.addptr %10, %6 : tensor<128x!tt.ptr<i64>, #blocked>, tensor<128xi32, #blocked> loc(#loc10)
    %12 = tt.load %11, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<i64>, #blocked> loc(#loc11)
    %13 = arith.subi %12, %cst_4 : tensor<128xi64, #blocked> loc(#loc12)
    %14 = arith.addi %13, %cst_1 : tensor<128xi64, #blocked> loc(#loc13)
    %15 = arith.cmpi slt, %13, %cst_0 : tensor<128xi64, #blocked> loc(#loc14)
    %16 = arith.select %15, %14, %13 : tensor<128xi1, #blocked>, tensor<128xi64, #blocked> loc(#loc15)
    %17 = arith.cmpi sge, %16, %cst_0 : tensor<128xi64, #blocked> loc(#loc16)
    %18 = arith.cmpi slt, %16, %cst_1 : tensor<128xi64, #blocked> loc(#loc17)
    %19 = arith.andi %17, %18 : tensor<128xi1, #blocked> loc(#loc18)
    %20 = arith.xori %5, %cst_3 : tensor<128xi1, #blocked> loc(#loc19)
    %21 = arith.ori %19, %20 : tensor<128xi1, #blocked> loc(#loc20)
    tt.assert %21, "index out of bounds: 0 <= tmp7 < 4" : tensor<128xi1, #blocked> loc(#loc21)
    %22 = arith.muli %6, %cst_5 : tensor<128xi32, #blocked> loc(#loc22)
    %23 = arith.extsi %22 : tensor<128xi32, #blocked> to tensor<128xi64, #blocked> loc(#loc23)
    %24 = arith.addi %16, %23 : tensor<128xi64, #blocked> loc(#loc23)
    %25 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc24)
    %26 = tt.addptr %25, %24 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi64, #blocked> loc(#loc24)
    %27 = tt.load %26, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc25)
    %28 = arith.addi %16, %cst_4 : tensor<128xi64, #blocked> loc(#loc26)
    %29 = arith.sitofp %28 : tensor<128xi64, #blocked> to tensor<128xf32, #blocked> loc(#loc27)
    %30 = arith.divf %27, %29 : tensor<128xf32, #blocked> loc(#loc28)
    %31 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc29)
    %32 = tt.addptr %31, %24 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi64, #blocked> loc(#loc29)
    %33 = tt.load %32, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc30)
    %34 = arith.divf %33, %29 : tensor<128xf32, #blocked> loc(#loc31)
    %35 = arith.mulf %30, %30 : tensor<128xf32, #blocked> loc(#loc32)
    %36 = arith.subf %34, %35 : tensor<128xf32, #blocked> loc(#loc33)
    %37 = arith.mulf %29, %36 : tensor<128xf32, #blocked> loc(#loc34)
    %38 = arith.subf %cst_2, %37 : tensor<128xf32, #blocked> loc(#loc35)
    %39 = arith.divf %38, %29 : tensor<128xf32, #blocked> loc(#loc36)
    %40 = arith.cmpf ogt, %39, %cst : tensor<128xf32, #blocked> loc(#loc49)
    %41 = arith.cmpf une, %39, %39 : tensor<128xf32, #blocked> loc(#loc50)
    %42 = arith.ori %40, %41 : tensor<128xi1, #blocked> loc(#loc51)
    %43 = arith.select %42, %39, %cst : tensor<128xi1, #blocked>, tensor<128xf32, #blocked> loc(#loc52)
    %44 = tt.extern_elementwise %43 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<128xf32, #blocked>) -> tensor<128xf32, #blocked> loc(#loc42)
    %45 = arith.subf %30, %44 : tensor<128xf32, #blocked> loc(#loc43)
    %46 = arith.subf %9, %45 : tensor<128xf32, #blocked> loc(#loc44)
    %47 = arith.cmpf ogt, %46, %cst : tensor<128xf32, #blocked> loc(#loc53)
    %48 = arith.cmpf une, %46, %46 : tensor<128xf32, #blocked> loc(#loc54)
    %49 = arith.ori %47, %48 : tensor<128xi1, #blocked> loc(#loc55)
    %50 = arith.select %49, %46, %cst : tensor<128xi1, #blocked>, tensor<128xf32, #blocked> loc(#loc56)
    %51 = arith.mulf %50, %50 : tensor<128xf32, #blocked> loc(#loc46)
    tt.store %8, %51, %5 : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc47)
    tt.return loc(#loc48)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":21:28)
#loc3 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":21:33)
#loc4 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":22:36)
#loc5 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":22:23)
#loc6 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":23:21)
#loc7 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":25:19)
#loc8 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":26:34)
#loc9 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":26:39)
#loc10 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":27:30)
#loc11 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":27:35)
#loc12 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":29:18)
#loc13 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":31:18)
#loc14 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":32:18)
#loc15 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":33:32)
#loc16 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":34:28)
#loc17 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":34:44)
#loc18 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":34:37)
#loc19 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":34:52)
#loc20 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":34:50)
#loc21 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":34:60)
#loc22 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":35:39)
#loc23 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":35:37)
#loc24 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":35:30)
#loc25 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":35:44)
#loc26 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":36:16)
#loc27 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":37:21)
#loc28 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":38:19)
#loc29 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":39:31)
#loc30 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":39:45)
#loc31 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":40:20)
#loc32 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":41:20)
#loc33 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":42:20)
#loc34 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":43:20)
#loc35 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":45:20)
#loc36 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":46:20)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc38 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":48:42)
#loc39 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc40 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc41 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc42 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":49:27)
#loc43 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":50:20)
#loc44 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":51:19)
#loc45 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":52:42)
#loc46 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":53:20)
#loc47 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":54:40)
#loc48 = loc("inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py":54:4)
#loc49 = loc(callsite(#loc37 at #loc38))
#loc50 = loc(callsite(#loc39 at #loc38))
#loc51 = loc(callsite(#loc40 at #loc38))
#loc52 = loc(callsite(#loc41 at #loc38))
#loc53 = loc(callsite(#loc37 at #loc45))
#loc54 = loc(callsite(#loc39 at #loc45))
#loc55 = loc(callsite(#loc40 at #loc45))
#loc56 = loc(callsite(#loc41 at #loc45))
