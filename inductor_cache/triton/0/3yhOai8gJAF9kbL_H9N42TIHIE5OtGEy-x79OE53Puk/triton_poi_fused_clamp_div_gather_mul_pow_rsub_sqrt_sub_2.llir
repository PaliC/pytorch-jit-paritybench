; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp7 < 4\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_clamp_div_gather_mul_pow_rsub_sqrt_sub_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !11 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !12
  %7 = shl i32 %6, 7, !dbg !13
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %9 = and i32 %8, 127, !dbg !14
  %10 = or disjoint i32 %7, %9, !dbg !15
  %11 = icmp slt i32 %10, 256, !dbg !16
  %12 = sdiv i32 %10, 4, !dbg !17
  %13 = sext i32 %10 to i64, !dbg !18
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !18
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 %11) #5, !dbg !19
  %16 = sext i32 %12 to i64, !dbg !20
  %17 = getelementptr i64, ptr addrspace(1) %1, i64 %16, !dbg !20
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 %11) #5, !dbg !21
  %19 = add i64 %18, -1, !dbg !22
  %20 = add i64 %18, 3, !dbg !23
  %21 = icmp slt i64 %19, 0, !dbg !24
  %22 = select i1 %21, i64 %20, i64 %19, !dbg !25
  %23 = icmp ugt i64 %22, 3, !dbg !26
  %.not1 = and i1 %11, %23, !dbg !27
  br i1 %.not1, label %24, label %25, !dbg !27

24:                                               ; preds = %5
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 34, ptr nonnull @assertFunc_0, i64 1), !dbg !27
  unreachable, !dbg !27

25:                                               ; preds = %5
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %26 = shl nsw i32 %12, 2, !dbg !28
  %27 = sext i32 %26 to i64, !dbg !29
  %28 = add i64 %22, %27, !dbg !29
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !30
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %11) #5, !dbg !31
  %31 = bitcast i32 %30 to float, !dbg !31
  %32 = add i64 %22, 1, !dbg !32
  %33 = sitofp i64 %32 to float, !dbg !33
  %34 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %31, float %33) #5, !dbg !34
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !35
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %11) #5, !dbg !36
  %37 = bitcast i32 %36 to float, !dbg !36
  %38 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %37, float %33) #5, !dbg !37
  %39 = fmul float %34, %34, !dbg !38
  %40 = fsub float %38, %39, !dbg !39
  %41 = fmul float %40, %33, !dbg !40
  %42 = fsub float 1.000000e+00, %41, !dbg !41
  %43 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %42, float %33) #5, !dbg !42
  %.inv = fcmp ole float %43, 0.000000e+00, !dbg !43
  %44 = select i1 %.inv, float 0.000000e+00, float %43, !dbg !43
  %45 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not.i = icmp eq i32 %45, 0, !dbg !47
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !47
  %.not1.i = icmp eq i32 %46, 0, !dbg !47
  br i1 %.not.i, label %52, label %47, !dbg !47

47:                                               ; preds = %25
  br i1 %.not1.i, label %50, label %48, !dbg !47

48:                                               ; preds = %47
  %49 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %44) #5, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

50:                                               ; preds = %47
  %51 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %44) #5, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

52:                                               ; preds = %25
  br i1 %.not1.i, label %55, label %53, !dbg !47

53:                                               ; preds = %52
  %54 = tail call float @llvm.nvvm.sqrt.rn.f(float %44) #5, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

55:                                               ; preds = %52
  %56 = tail call float @llvm.nvvm.sqrt.approx.f(float %44) #5, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

__nv_sqrtf.exit:                                  ; preds = %48, %50, %53, %55
  %.0.i = phi float [ %49, %48 ], [ %51, %50 ], [ %54, %53 ], [ %56, %55 ], !dbg !47
  %57 = bitcast i32 %15 to float, !dbg !19
  %58 = fsub float %34, %.0.i, !dbg !48
  %59 = fsub float %57, %58, !dbg !49
  %.inv2 = fcmp ole float %59, 0.000000e+00, !dbg !50
  %60 = select i1 %.inv2, float 0.000000e+00, float %59, !dbg !50
  %61 = fmul float %60, %60, !dbg !52
  %62 = bitcast float %61 to i32, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %62, ptr addrspace(1) %14, i1 %11) #5, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py", directory: "inductor_cache/wc")
!4 = !{ptr @triton_poi_fused_clamp_div_gather_mul_pow_rsub_sqrt_sub_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clamp_div_gather_mul_pow_rsub_sqrt_sub_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_clamp_div_gather_mul_pow_rsub_sqrt_sub_2", linkageName: "triton_poi_fused_clamp_div_gather_mul_pow_rsub_sqrt_sub_2", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 23, column: 21, scope: !11)
!17 = !DILocation(line: 25, column: 19, scope: !11)
!18 = !DILocation(line: 26, column: 34, scope: !11)
!19 = !DILocation(line: 26, column: 39, scope: !11)
!20 = !DILocation(line: 27, column: 30, scope: !11)
!21 = !DILocation(line: 27, column: 35, scope: !11)
!22 = !DILocation(line: 29, column: 18, scope: !11)
!23 = !DILocation(line: 31, column: 18, scope: !11)
!24 = !DILocation(line: 32, column: 18, scope: !11)
!25 = !DILocation(line: 33, column: 32, scope: !11)
!26 = !DILocation(line: 34, column: 37, scope: !11)
!27 = !DILocation(line: 34, column: 60, scope: !11)
!28 = !DILocation(line: 35, column: 39, scope: !11)
!29 = !DILocation(line: 35, column: 37, scope: !11)
!30 = !DILocation(line: 35, column: 30, scope: !11)
!31 = !DILocation(line: 35, column: 44, scope: !11)
!32 = !DILocation(line: 36, column: 16, scope: !11)
!33 = !DILocation(line: 37, column: 21, scope: !11)
!34 = !DILocation(line: 38, column: 19, scope: !11)
!35 = !DILocation(line: 39, column: 31, scope: !11)
!36 = !DILocation(line: 39, column: 45, scope: !11)
!37 = !DILocation(line: 40, column: 20, scope: !11)
!38 = !DILocation(line: 41, column: 20, scope: !11)
!39 = !DILocation(line: 42, column: 20, scope: !11)
!40 = !DILocation(line: 43, column: 20, scope: !11)
!41 = !DILocation(line: 45, column: 20, scope: !11)
!42 = !DILocation(line: 46, column: 20, scope: !11)
!43 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !11, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 48, column: 42, scope: !11)
!47 = !DILocation(line: 49, column: 27, scope: !11)
!48 = !DILocation(line: 50, column: 20, scope: !11)
!49 = !DILocation(line: 51, column: 19, scope: !11)
!50 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !51)
!51 = !DILocation(line: 52, column: 42, scope: !11)
!52 = !DILocation(line: 53, column: 20, scope: !11)
!53 = !DILocation(line: 54, column: 40, scope: !11)
!54 = !DILocation(line: 54, column: 4, scope: !11)
