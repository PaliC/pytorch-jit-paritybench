; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused__softmax_add_log_neg_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 7, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 127, !dbg !12
  %11 = or disjoint i32 %8, %10, !dbg !13
  %12 = icmp slt i32 %11, 256, !dbg !14
  %13 = srem i32 %11, 16, !dbg !15
  %14 = sdiv i32 %11, 64, !dbg !16
  %15 = sext i32 %11 to i64, !dbg !17
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !17
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %12) #2, !dbg !18
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !19
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %12) #2, !dbg !20
  %20 = bitcast i32 %19 to float, !dbg !20
  %21 = shl nsw i32 %14, 4, !dbg !21
  %22 = add nsw i32 %21, %13, !dbg !22
  %23 = sext i32 %22 to i64, !dbg !23
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !23
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %12) #2, !dbg !24
  %26 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !25
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %12) #2, !dbg !26
  %28 = shl nsw i32 %14, 6, !dbg !27
  %29 = add i32 %28, %13, !dbg !28
  %30 = sext i32 %29 to i64, !dbg !29
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !29
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %12) #2, !dbg !30
  %33 = add i32 %29, 16, !dbg !31
  %34 = sext i32 %33 to i64, !dbg !32
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !32
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %12) #2, !dbg !33
  %37 = add i32 %29, 32, !dbg !34
  %38 = sext i32 %37 to i64, !dbg !35
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !35
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %12) #2, !dbg !36
  %41 = add i32 %29, 48, !dbg !37
  %42 = sext i32 %41 to i64, !dbg !38
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !38
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %12) #2, !dbg !39
  %45 = fcmp olt float %20, 0x3810000000000000, !dbg !40
  %46 = fmul float %20, 0x4160000000000000, !dbg !40
  %.02.i = select i1 %45, float %46, float %20, !dbg !40
  %i.i.0.i = select i1 %45, float -2.300000e+01, float 0.000000e+00, !dbg !40
  %47 = bitcast float %.02.i to i32, !dbg !40
  %48 = add i32 %47, -1059760811, !dbg !40
  %49 = and i32 %48, -8388608, !dbg !40
  %50 = sub i32 %47, %49, !dbg !40
  %51 = bitcast i32 %50 to float, !dbg !40
  %52 = sitofp i32 %49 to float, !dbg !40
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not.i = icmp eq i32 %53, 0, !dbg !40
  %54 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %52, float 0x3E80000000000000, float %i.i.0.i) #2, !dbg !40
  %55 = tail call float @llvm.nvvm.fma.rn.f(float %52, float 0x3E80000000000000, float %i.i.0.i) #2, !dbg !40
  %.08.i = select i1 %.not.i, float %55, float %54, !dbg !40
  %56 = fadd float %51, -1.000000e+00, !dbg !40
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not1.i = icmp eq i32 %57, 0, !dbg !40
  %58 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %56, float 0x3FC2073EC0000000) #2, !dbg !40
  %59 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %56, float 0x3FC2073EC0000000) #2, !dbg !40
  %.010.i = select i1 %.not1.i, float %59, float %58, !dbg !40
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not2.i = icmp eq i32 %60, 0, !dbg !40
  %61 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %56, float 0xBFBF19B980000000) #2, !dbg !40
  %62 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %56, float 0xBFBF19B980000000) #2, !dbg !40
  %.011.i = select i1 %.not2.i, float %62, float %61, !dbg !40
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not3.i = icmp eq i32 %63, 0, !dbg !40
  %64 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %56, float 0x3FC1E52AA0000000) #2, !dbg !40
  %65 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %56, float 0x3FC1E52AA0000000) #2, !dbg !40
  %.012.i = select i1 %.not3.i, float %65, float %64, !dbg !40
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not4.i = icmp eq i32 %66, 0, !dbg !40
  %67 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %56, float 0xBFC55B1720000000) #2, !dbg !40
  %68 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %56, float 0xBFC55B1720000000) #2, !dbg !40
  %.09.i = select i1 %.not4.i, float %68, float %67, !dbg !40
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not5.i = icmp eq i32 %69, 0, !dbg !40
  %70 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %56, float 0x3FC99DA160000000) #2, !dbg !40
  %71 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %56, float 0x3FC99DA160000000) #2, !dbg !40
  %.05.i = select i1 %.not5.i, float %71, float %70, !dbg !40
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not6.i = icmp eq i32 %72, 0, !dbg !40
  %73 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %56, float 0xBFCFFFE440000000) #2, !dbg !40
  %74 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %56, float 0xBFCFFFE440000000) #2, !dbg !40
  %.01.i = select i1 %.not6.i, float %74, float %73, !dbg !40
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not7.i = icmp eq i32 %75, 0, !dbg !40
  %76 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %56, float 0x3FD5554F00000000) #2, !dbg !40
  %77 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %56, float 0x3FD5554F00000000) #2, !dbg !40
  %.0.i = select i1 %.not7.i, float %77, float %76, !dbg !40
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not8.i = icmp eq i32 %78, 0, !dbg !40
  %79 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %56, float -5.000000e-01) #2, !dbg !40
  %80 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %56, float -5.000000e-01) #2, !dbg !40
  %.07.i = select i1 %.not8.i, float %80, float %79, !dbg !40
  %81 = fmul float %56, %.07.i, !dbg !40
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not9.i = icmp eq i32 %82, 0, !dbg !40
  %83 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %81, float %56, float %56) #2, !dbg !40
  %84 = tail call float @llvm.nvvm.fma.rn.f(float %81, float %56, float %56) #2, !dbg !40
  %.06.i = select i1 %.not9.i, float %84, float %83, !dbg !40
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not10.i = icmp eq i32 %85, 0, !dbg !40
  %86 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #2, !dbg !40
  %87 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #2, !dbg !40
  %.04.i = select i1 %.not10.i, float %87, float %86, !dbg !40
  %88 = icmp ugt i32 %47, 2139095039, !dbg !40
  br i1 %88, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !40

__nv_fmaf_rn.exit.i.i:                            ; preds = %6
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !40
  %.not11.i = icmp eq i32 %89, 0, !dbg !40
  %90 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !40
  %91 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !40
  %.03.i = select i1 %.not11.i, float %91, float %90, !dbg !40
  br label %__nv_logf.exit, !dbg !40

__nv_logf.exit:                                   ; preds = %6, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %6 ], !dbg !40
  %92 = bitcast i32 %44 to float, !dbg !39
  %93 = bitcast i32 %40 to float, !dbg !36
  %94 = bitcast i32 %36 to float, !dbg !33
  %95 = bitcast i32 %32 to float, !dbg !30
  %96 = bitcast i32 %27 to float, !dbg !26
  %97 = bitcast i32 %25 to float, !dbg !24
  %98 = bitcast i32 %17 to float, !dbg !18
  %99 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !40
  %100 = fsub float 0.000000e+00, %r.i.0.i, !dbg !41
  %101 = select i1 %99, float 0x7FF0000000000000, float %100, !dbg !40
  %102 = fadd float %101, %98, !dbg !42
  %103 = fsub float %102, %97, !dbg !43
  %104 = fmul float %103, 0x3FF7154760000000, !dbg !44
  %105 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %104) #2, !dbg !44
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %96) #2, !dbg !45
  %107 = fcmp ogt float %95, %94, !dbg !46
  %108 = fcmp uno float %95, 0.000000e+00, !dbg !50
  %109 = or i1 %108, %107, !dbg !51
  %110 = select i1 %109, float %95, float %94, !dbg !52
  %111 = fcmp ogt float %110, %93, !dbg !53
  %112 = fcmp uno float %110, 0.000000e+00, !dbg !55
  %113 = or i1 %111, %112, !dbg !56
  %114 = select i1 %113, float %110, float %93, !dbg !57
  %115 = fcmp ogt float %114, %92, !dbg !58
  %116 = fcmp uno float %114, 0.000000e+00, !dbg !60
  %117 = or i1 %115, %116, !dbg !61
  %118 = select i1 %117, float %114, float %92, !dbg !62
  %119 = fsub float %98, %118, !dbg !63
  %120 = fmul float %119, 0x3FF7154760000000, !dbg !64
  %121 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %120) #2, !dbg !64
  %122 = bitcast float %106 to i32, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %122, ptr addrspace(1) %18, i1 %12) #2, !dbg !65
  %123 = getelementptr float, ptr addrspace(1) %4, i64 %15, !dbg !66
  %124 = bitcast float %121 to i32, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %124, ptr addrspace(1) %123, i1 %12) #2, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2dygcrgojnyyxerb53iarjyqe3m3qdlc252tfxl3ypg77vltwvx.py", directory: "inductor_cache/2d")
!4 = !{ptr @triton_poi_fused__softmax_add_log_neg_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_add_log_neg_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_add_log_neg_2", linkageName: "triton_poi_fused__softmax_add_log_neg_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 34, scope: !7)
!20 = !DILocation(line: 28, column: 39, scope: !7)
!21 = !DILocation(line: 29, column: 38, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 43, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 44, scope: !7)
!27 = !DILocation(line: 31, column: 39, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 31, column: 31, scope: !7)
!30 = !DILocation(line: 31, column: 44, scope: !7)
!31 = !DILocation(line: 32, column: 41, scope: !7)
!32 = !DILocation(line: 32, column: 31, scope: !7)
!33 = !DILocation(line: 32, column: 49, scope: !7)
!34 = !DILocation(line: 33, column: 41, scope: !7)
!35 = !DILocation(line: 33, column: 31, scope: !7)
!36 = !DILocation(line: 33, column: 49, scope: !7)
!37 = !DILocation(line: 34, column: 41, scope: !7)
!38 = !DILocation(line: 34, column: 31, scope: !7)
!39 = !DILocation(line: 34, column: 49, scope: !7)
!40 = !DILocation(line: 35, column: 23, scope: !7)
!41 = !DILocation(line: 36, column: 12, scope: !7)
!42 = !DILocation(line: 37, column: 18, scope: !7)
!43 = !DILocation(line: 40, column: 18, scope: !7)
!44 = !DILocation(line: 42, column: 24, scope: !7)
!45 = !DILocation(line: 43, column: 20, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 44, column: 42, scope: !7)
!50 = !DILocation(line: 120, column: 21, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 120, column: 16, scope: !47, inlinedAt: !49)
!52 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!53 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !54)
!54 = !DILocation(line: 45, column: 42, scope: !7)
!55 = !DILocation(line: 120, column: 21, scope: !47, inlinedAt: !54)
!56 = !DILocation(line: 120, column: 16, scope: !47, inlinedAt: !54)
!57 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !54)
!58 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !59)
!59 = !DILocation(line: 46, column: 42, scope: !7)
!60 = !DILocation(line: 120, column: 21, scope: !47, inlinedAt: !59)
!61 = !DILocation(line: 120, column: 16, scope: !47, inlinedAt: !59)
!62 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !59)
!63 = !DILocation(line: 47, column: 19, scope: !7)
!64 = !DILocation(line: 48, column: 24, scope: !7)
!65 = !DILocation(line: 49, column: 40, scope: !7)
!66 = !DILocation(line: 50, column: 25, scope: !7)
!67 = !DILocation(line: 50, column: 37, scope: !7)
!68 = !DILocation(line: 50, column: 4, scope: !7)
