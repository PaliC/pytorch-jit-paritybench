; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_73(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 7, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 127, !dbg !12
  %13 = or disjoint i32 %10, %12, !dbg !13
  %14 = icmp slt i32 %13, 300, !dbg !14
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %16 = shl i32 %15, 2, !dbg !16
  %17 = icmp slt i32 %16, 4, !dbg !17
  %.frozen = freeze i32 %13, !dbg !18
  %18 = sdiv i32 %.frozen, 75, !dbg !18
  %19 = mul i32 %18, 75, !dbg !19
  %.decomposed = sub i32 %.frozen, %19, !dbg !19
  %20 = mul i32 %15, 300, !dbg !20
  %21 = add i32 %.decomposed, %20, !dbg !21
  %22 = mul i32 %18, 300, !dbg !22
  %23 = add i32 %21, %22, !dbg !23
  %24 = add i32 %21, 75, !dbg !21
  %25 = add i32 %24, %22, !dbg !23
  %26 = add i32 %21, 150, !dbg !21
  %27 = add i32 %26, %22, !dbg !23
  %28 = add i32 %21, 225, !dbg !21
  %29 = add i32 %28, %22, !dbg !23
  %30 = sext i32 %23 to i64, !dbg !24
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !24
  %32 = sext i32 %25 to i64, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !24
  %34 = sext i32 %27 to i64, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !24
  %36 = sext i32 %29 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !24
  %38 = and i1 %17, %14, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %38) #3, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %38) #3, !dbg !26
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %38) #3, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %38) #3, !dbg !26
  %43 = sext i32 %.decomposed to i64, !dbg !27
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !27
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %14) #3, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !29
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %14) #3, !dbg !30
  %48 = bitcast i32 %47 to float, !dbg !30
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %43, !dbg !31
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %14) #3, !dbg !32
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %43, !dbg !33
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %14) #3, !dbg !34
  %53 = fadd float %48, 0x3EE4F8B580000000, !dbg !35
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %54, 0, !dbg !36
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %55, 0, !dbg !36
  br i1 %.not.i, label %61, label %56, !dbg !36

56:                                               ; preds = %8
  br i1 %.not1.i, label %59, label %57, !dbg !36

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

61:                                               ; preds = %8
  br i1 %.not1.i, label %64, label %62, !dbg !36

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %57, %59, %62, %64
  %.0.i = phi float [ %58, %57 ], [ %60, %59 ], [ %63, %62 ], [ %65, %64 ], !dbg !36
  %66 = insertelement <4 x i32> poison, i32 %42, i64 0, !dbg !26
  %67 = insertelement <4 x i32> %66, i32 %41, i64 1, !dbg !26
  %68 = insertelement <4 x i32> %67, i32 %40, i64 2, !dbg !26
  %69 = insertelement <4 x i32> %68, i32 %39, i64 3, !dbg !26
  %70 = bitcast <4 x i32> %69 to <4 x float>, !dbg !26
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %72 = insertelement <4 x i32> poison, i32 %45, i64 0, !dbg !38
  %73 = bitcast <4 x i32> %72 to <4 x float>, !dbg !38
  %74 = shufflevector <4 x float> %73, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %75 = fsub <4 x float> %70, %74, !dbg !38
  %76 = insertelement <4 x float> poison, float %71, i64 0, !dbg !39
  %77 = shufflevector <4 x float> %76, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !39
  %78 = fmul <4 x float> %75, %77, !dbg !39
  %79 = insertelement <4 x i32> poison, i32 %50, i64 0, !dbg !40
  %80 = bitcast <4 x i32> %79 to <4 x float>, !dbg !40
  %81 = shufflevector <4 x float> %80, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %82 = fmul <4 x float> %78, %81, !dbg !40
  %83 = insertelement <4 x i32> poison, i32 %52, i64 0, !dbg !41
  %84 = bitcast <4 x i32> %83 to <4 x float>, !dbg !41
  %85 = shufflevector <4 x float> %84, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !41
  %86 = fadd <4 x float> %82, %85, !dbg !41
  %87 = fcmp ole <4 x float> %86, zeroinitializer, !dbg !42
  %88 = select <4 x i1> %87, <4 x float> zeroinitializer, <4 x float> %86, !dbg !42
  %89 = fcmp olt <4 x float> %88, splat (float 6.000000e+00), !dbg !46
  %90 = extractelement <4 x float> %88, i64 3, !dbg !48
  %91 = fcmp uno float %90, 0.000000e+00, !dbg !49
  %92 = extractelement <4 x float> %88, i64 2, !dbg !48
  %93 = fcmp uno float %92, 0.000000e+00, !dbg !49
  %94 = extractelement <4 x float> %88, i64 1, !dbg !48
  %95 = fcmp uno float %94, 0.000000e+00, !dbg !49
  %96 = extractelement <4 x float> %88, i64 0, !dbg !48
  %97 = fcmp uno float %96, 0.000000e+00, !dbg !49
  %98 = extractelement <4 x i1> %89, i64 3, !dbg !50
  %99 = or i1 %98, %91, !dbg !50
  %100 = extractelement <4 x i1> %89, i64 2, !dbg !50
  %101 = or i1 %100, %93, !dbg !50
  %102 = extractelement <4 x i1> %89, i64 1, !dbg !50
  %103 = or i1 %102, %95, !dbg !50
  %104 = extractelement <4 x i1> %89, i64 0, !dbg !50
  %105 = or i1 %104, %97, !dbg !50
  %106 = add i32 %13, %15, !dbg !51
  %107 = shl i32 %106, 2, !dbg !51
  %108 = sext i32 %107 to i64, !dbg !52
  %109 = getelementptr float, ptr addrspace(1) %5, i64 %108, !dbg !52
  %110 = bitcast float %90 to i32, !dbg !48
  %111 = select i1 %99, i32 %110, i32 1086324736, !dbg !53
  %112 = bitcast float %92 to i32, !dbg !48
  %113 = select i1 %101, i32 %112, i32 1086324736, !dbg !53
  %114 = bitcast float %94 to i32, !dbg !48
  %115 = select i1 %103, i32 %114, i32 1086324736, !dbg !53
  %116 = bitcast float %96 to i32, !dbg !48
  %117 = select i1 %105, i32 %116, i32 1086324736, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %111, i32 %113, i32 %115, i32 %117, ptr addrspace(1) %109, i1 %38) #3, !dbg !48
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp4eii4lrrcyvxbunrdtov4ghtp4jpwkm4vgl4mr73jsiyujrzwg.py", directory: "inductor_cache/p4")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_73, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_73, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_73", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_73", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 38, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 47, scope: !7)
!23 = !DILocation(line: 32, column: 43, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 60, scope: !7)
!26 = !DILocation(line: 32, column: 52, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 26, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 49, column: 42, scope: !7)
!46 = !DILocation(line: 110, column: 15, scope: !43, inlinedAt: !47)
!47 = !DILocation(line: 51, column: 42, scope: !7)
!48 = !DILocation(line: 52, column: 44, scope: !7)
!49 = !DILocation(line: 112, column: 21, scope: !43, inlinedAt: !47)
!50 = !DILocation(line: 112, column: 16, scope: !43, inlinedAt: !47)
!51 = !DILocation(line: 52, column: 30, scope: !7)
!52 = !DILocation(line: 52, column: 25, scope: !7)
!53 = !DILocation(line: 113, column: 29, scope: !43, inlinedAt: !47)
!54 = !DILocation(line: 52, column: 4, scope: !7)
