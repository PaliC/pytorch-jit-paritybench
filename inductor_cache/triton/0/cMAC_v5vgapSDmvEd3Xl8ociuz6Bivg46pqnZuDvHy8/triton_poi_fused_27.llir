; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_27(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = srem i32 %9, 4096, !dbg !14
  %11 = sdiv i32 %9, 16384, !dbg !15
  %12 = sext i32 %9 to i64, !dbg !16
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !16
  %14 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %13, i1 true) #1, !dbg !17
  %15 = extractvalue { i32, i32, i32, i32 } %14, 0, !dbg !17
  %16 = extractvalue { i32, i32, i32, i32 } %14, 1, !dbg !17
  %17 = extractvalue { i32, i32, i32, i32 } %14, 2, !dbg !17
  %18 = extractvalue { i32, i32, i32, i32 } %14, 3, !dbg !17
  %19 = bitcast i32 %15 to float, !dbg !17
  %20 = bitcast i32 %16 to float, !dbg !17
  %21 = bitcast i32 %17 to float, !dbg !17
  %22 = bitcast i32 %18 to float, !dbg !17
  %23 = shl nsw i32 %11, 14, !dbg !18
  %24 = add i32 %23, %10, !dbg !19
  %25 = sext i32 %24 to i64, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !20
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !21
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !21
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !21
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !21
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !21
  %32 = bitcast i32 %28 to float, !dbg !21
  %33 = bitcast i32 %29 to float, !dbg !21
  %34 = bitcast i32 %30 to float, !dbg !21
  %35 = bitcast i32 %31 to float, !dbg !21
  %36 = add i32 %24, 4096, !dbg !22
  %37 = sext i32 %36 to i64, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !23
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !24
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !24
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !24
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !24
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !24
  %44 = bitcast i32 %40 to float, !dbg !24
  %45 = bitcast i32 %41 to float, !dbg !24
  %46 = bitcast i32 %42 to float, !dbg !24
  %47 = bitcast i32 %43 to float, !dbg !24
  %48 = add i32 %24, 8192, !dbg !25
  %49 = sext i32 %48 to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !26
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !27
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !27
  %56 = bitcast i32 %52 to float, !dbg !27
  %57 = bitcast i32 %53 to float, !dbg !27
  %58 = bitcast i32 %54 to float, !dbg !27
  %59 = bitcast i32 %55 to float, !dbg !27
  %60 = add i32 %24, 12288, !dbg !28
  %61 = sext i32 %60 to i64, !dbg !29
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !29
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !30
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !30
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !30
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !30
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !30
  %68 = bitcast i32 %64 to float, !dbg !30
  %69 = bitcast i32 %65 to float, !dbg !30
  %70 = bitcast i32 %66 to float, !dbg !30
  %71 = bitcast i32 %67 to float, !dbg !30
  %72 = fcmp ogt float %32, %44, !dbg !31
  %73 = fcmp ogt float %33, %45, !dbg !31
  %74 = fcmp ogt float %34, %46, !dbg !31
  %75 = fcmp ogt float %35, %47, !dbg !31
  %76 = fcmp uno float %32, 0.000000e+00, !dbg !35
  %77 = fcmp uno float %33, 0.000000e+00, !dbg !35
  %78 = fcmp uno float %34, 0.000000e+00, !dbg !35
  %79 = fcmp uno float %35, 0.000000e+00, !dbg !35
  %80 = or i1 %76, %72, !dbg !36
  %81 = or i1 %77, %73, !dbg !36
  %82 = or i1 %78, %74, !dbg !36
  %83 = or i1 %79, %75, !dbg !36
  %84 = select i1 %80, float %32, float %44, !dbg !37
  %85 = select i1 %81, float %33, float %45, !dbg !37
  %86 = select i1 %82, float %34, float %46, !dbg !37
  %87 = select i1 %83, float %35, float %47, !dbg !37
  %88 = fcmp ogt float %84, %56, !dbg !38
  %89 = fcmp ogt float %85, %57, !dbg !38
  %90 = fcmp ogt float %86, %58, !dbg !38
  %91 = fcmp ogt float %87, %59, !dbg !38
  %92 = fcmp uno float %84, 0.000000e+00, !dbg !40
  %93 = fcmp uno float %85, 0.000000e+00, !dbg !40
  %94 = fcmp uno float %86, 0.000000e+00, !dbg !40
  %95 = fcmp uno float %87, 0.000000e+00, !dbg !40
  %96 = or i1 %88, %92, !dbg !41
  %97 = or i1 %89, %93, !dbg !41
  %98 = or i1 %90, %94, !dbg !41
  %99 = or i1 %91, %95, !dbg !41
  %100 = select i1 %96, float %84, float %56, !dbg !42
  %101 = select i1 %97, float %85, float %57, !dbg !42
  %102 = select i1 %98, float %86, float %58, !dbg !42
  %103 = select i1 %99, float %87, float %59, !dbg !42
  %104 = fcmp ogt float %100, %68, !dbg !43
  %105 = fcmp ogt float %101, %69, !dbg !43
  %106 = fcmp ogt float %102, %70, !dbg !43
  %107 = fcmp ogt float %103, %71, !dbg !43
  %108 = fcmp uno float %100, 0.000000e+00, !dbg !45
  %109 = fcmp uno float %101, 0.000000e+00, !dbg !45
  %110 = fcmp uno float %102, 0.000000e+00, !dbg !45
  %111 = fcmp uno float %103, 0.000000e+00, !dbg !45
  %112 = or i1 %104, %108, !dbg !46
  %113 = or i1 %105, %109, !dbg !46
  %114 = or i1 %106, %110, !dbg !46
  %115 = or i1 %107, %111, !dbg !46
  %116 = select i1 %112, float %100, float %68, !dbg !47
  %117 = select i1 %113, float %101, float %69, !dbg !47
  %118 = select i1 %114, float %102, float %70, !dbg !47
  %119 = select i1 %115, float %103, float %71, !dbg !47
  %120 = fsub float %19, %116, !dbg !48
  %121 = fsub float %20, %117, !dbg !48
  %122 = fsub float %21, %118, !dbg !48
  %123 = fsub float %22, %119, !dbg !48
  %124 = fmul float %120, 2.500000e-01, !dbg !49
  %125 = fmul float %121, 2.500000e-01, !dbg !49
  %126 = fmul float %122, 2.500000e-01, !dbg !49
  %127 = fmul float %123, 2.500000e-01, !dbg !49
  %128 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !50
  %129 = bitcast float %124 to i32, !dbg !51
  %130 = bitcast float %125 to i32, !dbg !51
  %131 = bitcast float %126 to i32, !dbg !51
  %132 = bitcast float %127 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %129, i32 %130, i32 %131, i32 %132, ptr addrspace(1) %128, i1 true) #1, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cv5zofgjdtywiujcaqqw4qbhapcsemzyajn6a72rbyhgzep56afq.py", directory: "inductor_cache/v5")
!4 = !{ptr @triton_poi_fused_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_27", linkageName: "triton_poi_fused_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 41, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 46, scope: !7)
!22 = !DILocation(line: 29, column: 42, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 53, scope: !7)
!25 = !DILocation(line: 30, column: 42, scope: !7)
!26 = !DILocation(line: 30, column: 30, scope: !7)
!27 = !DILocation(line: 30, column: 53, scope: !7)
!28 = !DILocation(line: 31, column: 43, scope: !7)
!29 = !DILocation(line: 31, column: 30, scope: !7)
!30 = !DILocation(line: 31, column: 54, scope: !7)
!31 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 32, column: 40, scope: !7)
!35 = !DILocation(line: 120, column: 21, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 120, column: 16, scope: !32, inlinedAt: !34)
!37 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!38 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !39)
!39 = !DILocation(line: 33, column: 40, scope: !7)
!40 = !DILocation(line: 120, column: 21, scope: !32, inlinedAt: !39)
!41 = !DILocation(line: 120, column: 16, scope: !32, inlinedAt: !39)
!42 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !39)
!43 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !44)
!44 = !DILocation(line: 34, column: 40, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !32, inlinedAt: !44)
!46 = !DILocation(line: 120, column: 16, scope: !32, inlinedAt: !44)
!47 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !44)
!48 = !DILocation(line: 35, column: 18, scope: !7)
!49 = !DILocation(line: 37, column: 19, scope: !7)
!50 = !DILocation(line: 38, column: 25, scope: !7)
!51 = !DILocation(line: 38, column: 37, scope: !7)
!52 = !DILocation(line: 38, column: 4, scope: !7)
