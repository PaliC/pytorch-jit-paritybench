; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_leaky_relu_pixel_shuffle_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 9, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 127, !dbg !12
  %11 = or disjoint i32 %10, 128, !dbg !12
  %12 = or disjoint i32 %10, 256, !dbg !12
  %13 = or disjoint i32 %10, 384, !dbg !12
  %14 = shl i32 %9, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = shl i32 %9, 1, !dbg !12
  %17 = and i32 %16, 254, !dbg !12
  %18 = or disjoint i32 %17, 256, !dbg !12
  %19 = or disjoint i32 %8, %10, !dbg !13
  %20 = or disjoint i32 %8, %11, !dbg !13
  %21 = or disjoint i32 %8, %12, !dbg !13
  %22 = or disjoint i32 %8, %13, !dbg !13
  %23 = or disjoint i32 %8, %15, !dbg !13
  %24 = or disjoint i32 %8, %17, !dbg !13
  %25 = or disjoint i32 %8, %18, !dbg !13
  %26 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %27 = icmp slt i32 %26, 64, !dbg !15
  %28 = srem i32 %23, 256, !dbg !16
  %.frozen = freeze i32 %26, !dbg !17
  %29 = sdiv i32 %.frozen, 8, !dbg !17
  %30 = mul i32 %29, 8, !dbg !18
  %.decomposed = sub i32 %.frozen, %30, !dbg !18
  %31 = ashr exact i32 %24, 1, !dbg !19
  %32 = ashr exact i32 %25, 1, !dbg !19
  %33 = srem i32 %31, 2, !dbg !20
  %34 = srem i32 %32, 2, !dbg !20
  %35 = sdiv i32 %24, 4, !dbg !21
  %36 = sdiv i32 %25, 4, !dbg !21
  %37 = shl i32 %19, 6, !dbg !22
  %38 = shl i32 %20, 6, !dbg !22
  %39 = shl i32 %21, 6, !dbg !22
  %40 = shl i32 %22, 6, !dbg !22
  %41 = add i32 %37, %26, !dbg !23
  %42 = add i32 %38, %26, !dbg !23
  %43 = add i32 %39, %26, !dbg !23
  %44 = add i32 %40, %26, !dbg !23
  %45 = sext i32 %41 to i64, !dbg !24
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !24
  %47 = sext i32 %42 to i64, !dbg !24
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !24
  %49 = sext i32 %43 to i64, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !24
  %51 = sext i32 %44 to i64, !dbg !24
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !24
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %27) #2, !dbg !25
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %27) #2, !dbg !25
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %27) #2, !dbg !25
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %27) #2, !dbg !25
  %57 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !25
  %58 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %58, i1 true) #2, !dbg !25
  %59 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !25
  %60 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 true) #2, !dbg !25
  %61 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !25
  %62 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %62, i1 true) #2, !dbg !25
  %63 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !25
  %64 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %64, i1 true) #2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %65 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !25
  %66 = sext i32 %28 to i64, !dbg !26
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !26
  %68 = load <4 x float>, ptr addrspace(3) %65, align 16, !dbg !25
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 true) #2, !dbg !27
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !27
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !27
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !27
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !27
  %74 = insertelement <4 x i32> poison, i32 %70, i64 0, !dbg !27
  %75 = insertelement <4 x i32> %74, i32 %71, i64 1, !dbg !27
  %76 = insertelement <4 x i32> %75, i32 %72, i64 2, !dbg !27
  %77 = insertelement <4 x i32> %76, i32 %73, i64 3, !dbg !27
  %78 = bitcast <4 x i32> %77 to <4 x float>, !dbg !27
  %79 = fadd <4 x float> %68, %78, !dbg !28
  %80 = fcmp ogt <4 x float> %79, zeroinitializer, !dbg !29
  %81 = extractelement <4 x float> %79, i64 0, !dbg !30
  %82 = fmul float %81, 0x3F847AE140000000, !dbg !31
  %83 = extractelement <4 x float> %79, i64 1, !dbg !30
  %84 = fmul float %83, 0x3F847AE140000000, !dbg !31
  %85 = extractelement <4 x float> %79, i64 2, !dbg !30
  %86 = fmul float %85, 0x3F847AE140000000, !dbg !31
  %87 = extractelement <4 x float> %79, i64 3, !dbg !30
  %88 = fmul float %87, 0x3F847AE140000000, !dbg !31
  %89 = extractelement <4 x i1> %80, i64 0, !dbg !32
  %90 = select i1 %89, float %81, float %82, !dbg !30
  %91 = extractelement <4 x i1> %80, i64 1, !dbg !32
  %92 = select i1 %91, float %83, float %84, !dbg !30
  %93 = extractelement <4 x i1> %80, i64 2, !dbg !32
  %94 = select i1 %93, float %85, float %86, !dbg !30
  %95 = extractelement <4 x i1> %80, i64 3, !dbg !32
  %96 = select i1 %95, float %87, float %88, !dbg !30
  %97 = getelementptr i1, ptr addrspace(1) %2, i64 %45, !dbg !33
  %98 = getelementptr i1, ptr addrspace(1) %2, i64 %47, !dbg !33
  %99 = getelementptr i1, ptr addrspace(1) %2, i64 %49, !dbg !33
  %100 = getelementptr i1, ptr addrspace(1) %2, i64 %51, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %101 = zext i1 %89 to i8, !dbg !32
  %102 = zext i1 %91 to i8, !dbg !32
  %103 = zext i1 %93 to i8, !dbg !32
  %104 = zext i1 %95 to i8, !dbg !32
  %105 = shl nuw nsw i32 %15, 1, !dbg !32
  %106 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %105, !dbg !32
  %107 = insertelement <1 x i8> poison, i8 %101, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %106, <1 x i8> %107, i1 true) #2, !dbg !32
  %108 = or disjoint i32 %105, 2, !dbg !32
  %109 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %108, !dbg !32
  %110 = insertelement <1 x i8> poison, i8 %102, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %109, <1 x i8> %110, i1 true) #2, !dbg !32
  %111 = or disjoint i32 %105, 4, !dbg !32
  %112 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %111, !dbg !32
  %113 = insertelement <1 x i8> poison, i8 %103, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %112, <1 x i8> %113, i1 true) #2, !dbg !32
  %114 = or disjoint i32 %105, 6, !dbg !32
  %115 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %114, !dbg !32
  %116 = insertelement <1 x i8> poison, i8 %104, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %115, <1 x i8> %116, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %117 = shl nuw nsw i32 %10, 1, !dbg !32
  %118 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %117, !dbg !32
  %119 = load i8, ptr addrspace(3) %118, align 2, !dbg !32
  %120 = shl nuw nsw i32 %11, 1, !dbg !32
  %121 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %120, !dbg !32
  %122 = load i8, ptr addrspace(3) %121, align 2, !dbg !32
  %123 = shl nuw nsw i32 %12, 1, !dbg !32
  %124 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %123, !dbg !32
  %125 = load i8, ptr addrspace(3) %124, align 2, !dbg !32
  %126 = shl nuw nsw i32 %13, 1, !dbg !32
  %127 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %126, !dbg !32
  %128 = load i8, ptr addrspace(3) %127, align 2, !dbg !32
  %129 = and i8 %119, 1, !dbg !32
  %130 = and i8 %122, 1, !dbg !32
  %131 = and i8 %125, 1, !dbg !32
  %132 = and i8 %128, 1, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %129, ptr addrspace(1) %97, i1 %27) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %130, ptr addrspace(1) %98, i1 %27) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %131, ptr addrspace(1) %99, i1 %27) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %132, ptr addrspace(1) %100, i1 %27) #2, !dbg !32
  %133 = shl nsw i32 %.decomposed, 1, !dbg !34
  %134 = shl nsw i32 %33, 4, !dbg !35
  %135 = shl nsw i32 %34, 4, !dbg !35
  %136 = shl i32 %29, 5, !dbg !36
  %137 = shl i32 %35, 8, !dbg !37
  %138 = shl i32 %36, 8, !dbg !37
  %139 = add i32 %136, %133, !dbg !38
  %140 = add i32 %139, %137, !dbg !39
  %141 = add i32 %140, %134, !dbg !40
  %142 = add i32 %139, %138, !dbg !39
  %143 = add i32 %142, %135, !dbg !40
  %144 = sext i32 %141 to i64, !dbg !41
  %145 = getelementptr float, ptr addrspace(1) %3, i64 %144, !dbg !41
  %146 = sext i32 %143 to i64, !dbg !41
  %147 = getelementptr float, ptr addrspace(1) %3, i64 %146, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %148 = bitcast float %90 to i32, !dbg !42
  %149 = bitcast float %92 to i32, !dbg !42
  %150 = bitcast float %94 to i32, !dbg !42
  %151 = bitcast float %96 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %65, i32 %148, i32 %149, i32 %150, i32 %151, i1 true) #2, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %152 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !42
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !42
  %154 = load <2 x i32>, ptr addrspace(3) %153, align 8, !dbg !42
  %.extract = load i32, ptr addrspace(3) %152, align 8, !dbg !42
  %155 = getelementptr inbounds i8, ptr addrspace(3) %152, i32 4, !dbg !42
  %.extract8 = load i32, ptr addrspace(3) %155, align 4, !dbg !42
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract8, ptr addrspace(1) %145, i1 %27) #2, !dbg !42
  %.extract9 = extractelement <2 x i32> %154, i64 0, !dbg !42
  %.extract10 = extractelement <2 x i32> %154, i64 1, !dbg !42
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract9, i32 %.extract10, ptr addrspace(1) %147, i1 %27) #2, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjq7fqozuqqoevvjxwtrriuldvdd2aplp322qhxzxhlleuxrvre3.py", directory: "inductor_cache/jq")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_pixel_shuffle_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_pixel_shuffle_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_pixel_shuffle_10", linkageName: "triton_poi_fused_convolution_leaky_relu_pixel_shuffle_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 19, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 34, column: 21, scope: !7)
!20 = !DILocation(line: 34, column: 26, scope: !7)
!21 = !DILocation(line: 35, column: 19, scope: !7)
!22 = !DILocation(line: 36, column: 38, scope: !7)
!23 = !DILocation(line: 36, column: 35, scope: !7)
!24 = !DILocation(line: 36, column: 30, scope: !7)
!25 = !DILocation(line: 36, column: 43, scope: !7)
!26 = !DILocation(line: 37, column: 30, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 38, column: 18, scope: !7)
!29 = !DILocation(line: 40, column: 18, scope: !7)
!30 = !DILocation(line: 43, column: 32, scope: !7)
!31 = !DILocation(line: 42, column: 18, scope: !7)
!32 = !DILocation(line: 44, column: 44, scope: !7)
!33 = !DILocation(line: 44, column: 25, scope: !7)
!34 = !DILocation(line: 45, column: 32, scope: !7)
!35 = !DILocation(line: 45, column: 40, scope: !7)
!36 = !DILocation(line: 45, column: 48, scope: !7)
!37 = !DILocation(line: 45, column: 57, scope: !7)
!38 = !DILocation(line: 45, column: 37, scope: !7)
!39 = !DILocation(line: 45, column: 45, scope: !7)
!40 = !DILocation(line: 45, column: 53, scope: !7)
!41 = !DILocation(line: 45, column: 25, scope: !7)
!42 = !DILocation(line: 45, column: 68, scope: !7)
!43 = !DILocation(line: 45, column: 4, scope: !7)
