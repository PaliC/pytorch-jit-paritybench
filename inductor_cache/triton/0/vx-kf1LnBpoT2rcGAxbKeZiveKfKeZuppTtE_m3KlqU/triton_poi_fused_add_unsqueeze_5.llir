; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_unsqueeze_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %12 = shl i32 %11, 4, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 4, !dbg !12
  %15 = and i32 %14, 7, !dbg !12
  %16 = shl i32 %13, 2, !dbg !12
  %17 = and i32 %16, 12, !dbg !12
  %18 = or disjoint i32 %12, %15, !dbg !13
  %19 = or disjoint i32 %18, 8, !dbg !13
  %20 = or disjoint i32 %12, %17, !dbg !13
  %21 = icmp slt i32 %18, 16, !dbg !14
  %22 = icmp slt i32 %19, 16, !dbg !14
  %23 = icmp slt i32 %20, 16, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %25 = shl i32 %24, 6, !dbg !16
  %26 = and i32 %16, 60, !dbg !17
  %27 = lshr i32 %13, 2, !dbg !17
  %28 = and i32 %27, 31, !dbg !17
  %29 = or disjoint i32 %25, %26, !dbg !18
  %30 = or disjoint i32 %25, %28, !dbg !18
  %31 = or disjoint i32 %30, 32, !dbg !18
  %32 = icmp slt i32 %29, 256, !dbg !19
  %33 = icmp slt i32 %30, 256, !dbg !19
  %34 = icmp slt i32 %31, 256, !dbg !19
  %35 = shl i32 %18, 8, !dbg !20
  %36 = shl i32 %19, 8, !dbg !20
  %37 = add i32 %29, %35, !dbg !21
  %38 = add i32 %29, %36, !dbg !21
  %39 = sext i32 %37 to i64, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !22
  %41 = sext i32 %38 to i64, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !22
  %43 = and i1 %21, %32, !dbg !23
  %44 = and i1 %22, %32, !dbg !23
  %45 = and i1 %23, %33, !dbg !23
  %46 = and i1 %34, %23, !dbg !23
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %43) #2, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !24
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !24
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !24
  %52 = bitcast i32 %48 to float, !dbg !24
  %53 = bitcast i32 %49 to float, !dbg !24
  %54 = bitcast i32 %50 to float, !dbg !24
  %55 = bitcast i32 %51 to float, !dbg !24
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %44) #2, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !24
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !24
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !24
  %61 = bitcast i32 %57 to float, !dbg !24
  %62 = bitcast i32 %58 to float, !dbg !24
  %63 = bitcast i32 %59 to float, !dbg !24
  %64 = bitcast i32 %60 to float, !dbg !24
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !25
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !25
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %43) #2, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !26
  %72 = bitcast i32 %68 to float, !dbg !26
  %73 = bitcast i32 %69 to float, !dbg !26
  %74 = bitcast i32 %70 to float, !dbg !26
  %75 = bitcast i32 %71 to float, !dbg !26
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %44) #2, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !26
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !26
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !26
  %81 = bitcast i32 %77 to float, !dbg !26
  %82 = bitcast i32 %78 to float, !dbg !26
  %83 = bitcast i32 %79 to float, !dbg !26
  %84 = bitcast i32 %80 to float, !dbg !26
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !27
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !27
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %85, i1 %43) #2, !dbg !28
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !28
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !28
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !28
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !28
  %92 = bitcast i32 %88 to float, !dbg !28
  %93 = bitcast i32 %89 to float, !dbg !28
  %94 = bitcast i32 %90 to float, !dbg !28
  %95 = bitcast i32 %91 to float, !dbg !28
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 %44) #2, !dbg !28
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !28
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !28
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !28
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !28
  %101 = bitcast i32 %97 to float, !dbg !28
  %102 = bitcast i32 %98 to float, !dbg !28
  %103 = bitcast i32 %99 to float, !dbg !28
  %104 = bitcast i32 %100 to float, !dbg !28
  %105 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !29
  %106 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !29
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 %43) #2, !dbg !30
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !30
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !30
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !30
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !30
  %112 = bitcast i32 %108 to float, !dbg !30
  %113 = bitcast i32 %109 to float, !dbg !30
  %114 = bitcast i32 %110 to float, !dbg !30
  %115 = bitcast i32 %111 to float, !dbg !30
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %44) #2, !dbg !30
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !30
  %118 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !30
  %119 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !30
  %120 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !30
  %121 = bitcast i32 %117 to float, !dbg !30
  %122 = bitcast i32 %118 to float, !dbg !30
  %123 = bitcast i32 %119 to float, !dbg !30
  %124 = bitcast i32 %120 to float, !dbg !30
  %125 = fadd float %52, %72, !dbg !31
  %126 = fadd float %53, %73, !dbg !31
  %127 = fadd float %54, %74, !dbg !31
  %128 = fadd float %55, %75, !dbg !31
  %129 = fadd float %61, %81, !dbg !31
  %130 = fadd float %62, %82, !dbg !31
  %131 = fadd float %63, %83, !dbg !31
  %132 = fadd float %64, %84, !dbg !31
  %133 = fadd float %125, %92, !dbg !32
  %134 = fadd float %126, %93, !dbg !32
  %135 = fadd float %127, %94, !dbg !32
  %136 = fadd float %128, %95, !dbg !32
  %137 = fadd float %129, %101, !dbg !32
  %138 = fadd float %130, %102, !dbg !32
  %139 = fadd float %131, %103, !dbg !32
  %140 = fadd float %132, %104, !dbg !32
  %141 = fadd float %133, %112, !dbg !33
  %142 = fadd float %134, %113, !dbg !33
  %143 = fadd float %135, %114, !dbg !33
  %144 = fadd float %136, %115, !dbg !33
  %145 = fadd float %137, %121, !dbg !33
  %146 = fadd float %138, %122, !dbg !33
  %147 = fadd float %139, %123, !dbg !33
  %148 = fadd float %140, %124, !dbg !33
  %149 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !34
  %150 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %48, i32 %49, i32 %50, i32 %51, ptr addrspace(1) %149, i1 %43) #2, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %57, i32 %58, i32 %59, i32 %60, ptr addrspace(1) %150, i1 %44) #2, !dbg !35
  %151 = shl i32 %30, 4, !dbg !36
  %152 = shl i32 %31, 4, !dbg !36
  %153 = add i32 %151, %20, !dbg !37
  %154 = add i32 %20, %152, !dbg !37
  %155 = sext i32 %153 to i64, !dbg !38
  %156 = getelementptr float, ptr addrspace(1) %5, i64 %155, !dbg !38
  %157 = sext i32 %154 to i64, !dbg !38
  %158 = getelementptr float, ptr addrspace(1) %5, i64 %157, !dbg !38
  %159 = shl i32 %13, 6, !dbg !39
  %160 = and i32 %159, 960, !dbg !39
  %161 = or disjoint i32 %160, %15, !dbg !39
  %162 = and i32 %16, 508, !dbg !39
  %163 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %160, !dbg !39
  %164 = getelementptr float, ptr addrspace(3) %163, i32 %161, !dbg !39
  %165 = bitcast float %125 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %165, i1 true) #2, !dbg !39
  %166 = or disjoint i32 %161, 16, !dbg !39
  %167 = lshr i32 %166, 2, !dbg !39
  %168 = and i32 %167, 244, !dbg !39
  %169 = getelementptr float, ptr addrspace(3) @global_smem, i32 %168, !dbg !39
  %170 = getelementptr float, ptr addrspace(3) %169, i32 %166, !dbg !39
  %171 = bitcast float %126 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %171, i1 true) #2, !dbg !39
  %172 = or disjoint i32 %161, 32, !dbg !39
  %173 = lshr i32 %172, 2, !dbg !39
  %174 = and i32 %173, 248, !dbg !39
  %175 = getelementptr float, ptr addrspace(3) @global_smem, i32 %174, !dbg !39
  %176 = getelementptr float, ptr addrspace(3) %175, i32 %172, !dbg !39
  %177 = bitcast float %127 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %177, i1 true) #2, !dbg !39
  %178 = or disjoint i32 %161, 48, !dbg !39
  %179 = lshr i32 %178, 2, !dbg !39
  %180 = and i32 %179, 252, !dbg !39
  %181 = getelementptr float, ptr addrspace(3) @global_smem, i32 %180, !dbg !39
  %182 = getelementptr float, ptr addrspace(3) %181, i32 %178, !dbg !39
  %183 = bitcast float %128 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %183, i1 true) #2, !dbg !39
  %184 = or disjoint i32 %161, 8, !dbg !39
  %185 = getelementptr float, ptr addrspace(3) %163, i32 %184, !dbg !39
  %186 = bitcast float %129 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %186, i1 true) #2, !dbg !39
  %187 = or disjoint i32 %161, 24, !dbg !39
  %188 = lshr i32 %187, 2, !dbg !39
  %189 = and i32 %188, 244, !dbg !39
  %190 = getelementptr float, ptr addrspace(3) @global_smem, i32 %189, !dbg !39
  %191 = getelementptr float, ptr addrspace(3) %190, i32 %187, !dbg !39
  %192 = bitcast float %130 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %192, i1 true) #2, !dbg !39
  %193 = or disjoint i32 %161, 40, !dbg !39
  %194 = lshr i32 %193, 2, !dbg !39
  %195 = and i32 %194, 248, !dbg !39
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i32 %195, !dbg !39
  %197 = getelementptr float, ptr addrspace(3) %196, i32 %193, !dbg !39
  %198 = bitcast float %131 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 true) #2, !dbg !39
  %199 = or disjoint i32 %161, 56, !dbg !39
  %200 = lshr i32 %199, 2, !dbg !39
  %201 = and i32 %200, 252, !dbg !39
  %202 = getelementptr float, ptr addrspace(3) @global_smem, i32 %201, !dbg !39
  %203 = getelementptr float, ptr addrspace(3) %202, i32 %199, !dbg !39
  %204 = bitcast float %132 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %204, i1 true) #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %205 = and i32 %13, 124, !dbg !39
  %206 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %205, !dbg !39
  %207 = getelementptr inbounds float, ptr addrspace(3) %206, i32 %162, !dbg !39
  %208 = or disjoint i32 %162, 512, !dbg !39
  %209 = lshr exact i32 %208, 2, !dbg !39
  %210 = and i32 %209, 252, !dbg !39
  %211 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %210, !dbg !39
  %212 = getelementptr inbounds float, ptr addrspace(3) %211, i32 %208, !dbg !39
  %213 = load <4 x i32>, ptr addrspace(3) %212, align 16, !dbg !39
  %.extract = load i32, ptr addrspace(3) %207, align 16, !dbg !39
  %214 = getelementptr inbounds i8, ptr addrspace(3) %207, i32 4, !dbg !39
  %.extract11 = load i32, ptr addrspace(3) %214, align 4, !dbg !39
  %215 = getelementptr inbounds i8, ptr addrspace(3) %207, i32 8, !dbg !39
  %.extract12 = load i32, ptr addrspace(3) %215, align 8, !dbg !39
  %216 = getelementptr inbounds i8, ptr addrspace(3) %207, i32 12, !dbg !39
  %.extract13 = load i32, ptr addrspace(3) %216, align 4, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %156, i1 %45) #2, !dbg !39
  %.extract14 = extractelement <4 x i32> %213, i64 0, !dbg !39
  %.extract15 = extractelement <4 x i32> %213, i64 1, !dbg !39
  %.extract16 = extractelement <4 x i32> %213, i64 2, !dbg !39
  %.extract17 = extractelement <4 x i32> %213, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract14, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %158, i1 %46) #2, !dbg !39
  %217 = getelementptr float, ptr addrspace(1) %6, i64 %155, !dbg !40
  %218 = getelementptr float, ptr addrspace(1) %6, i64 %157, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %219 = bitcast float %133 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %219, i1 true) #2, !dbg !41
  %220 = bitcast float %134 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %220, i1 true) #2, !dbg !41
  %221 = bitcast float %135 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %221, i1 true) #2, !dbg !41
  %222 = bitcast float %136 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %222, i1 true) #2, !dbg !41
  %223 = bitcast float %137 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %223, i1 true) #2, !dbg !41
  %224 = bitcast float %138 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %224, i1 true) #2, !dbg !41
  %225 = bitcast float %139 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %225, i1 true) #2, !dbg !41
  %226 = bitcast float %140 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %226, i1 true) #2, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %227 = load <4 x i32>, ptr addrspace(3) %212, align 16, !dbg !41
  %.extract25 = load i32, ptr addrspace(3) %207, align 16, !dbg !41
  %.extract26 = load i32, ptr addrspace(3) %214, align 4, !dbg !41
  %.extract27 = load i32, ptr addrspace(3) %215, align 8, !dbg !41
  %.extract28 = load i32, ptr addrspace(3) %216, align 4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %217, i1 %45) #2, !dbg !41
  %.extract29 = extractelement <4 x i32> %227, i64 0, !dbg !41
  %.extract30 = extractelement <4 x i32> %227, i64 1, !dbg !41
  %.extract31 = extractelement <4 x i32> %227, i64 2, !dbg !41
  %.extract32 = extractelement <4 x i32> %227, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %218, i1 %46) #2, !dbg !41
  %228 = getelementptr float, ptr addrspace(1) %7, i64 %155, !dbg !42
  %229 = getelementptr float, ptr addrspace(1) %7, i64 %157, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %230 = bitcast float %141 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %230, i1 true) #2, !dbg !43
  %231 = bitcast float %142 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %231, i1 true) #2, !dbg !43
  %232 = bitcast float %143 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %232, i1 true) #2, !dbg !43
  %233 = bitcast float %144 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %233, i1 true) #2, !dbg !43
  %234 = bitcast float %145 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %234, i1 true) #2, !dbg !43
  %235 = bitcast float %146 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %235, i1 true) #2, !dbg !43
  %236 = bitcast float %147 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %236, i1 true) #2, !dbg !43
  %237 = bitcast float %148 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %237, i1 true) #2, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %238 = load <4 x i32>, ptr addrspace(3) %212, align 16, !dbg !43
  %.extract40 = load i32, ptr addrspace(3) %207, align 16, !dbg !43
  %.extract41 = load i32, ptr addrspace(3) %214, align 4, !dbg !43
  %.extract42 = load i32, ptr addrspace(3) %215, align 8, !dbg !43
  %.extract43 = load i32, ptr addrspace(3) %216, align 4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract40, i32 %.extract41, i32 %.extract42, i32 %.extract43, ptr addrspace(1) %228, i1 %45) #2, !dbg !43
  %.extract44 = extractelement <4 x i32> %238, i64 0, !dbg !43
  %.extract45 = extractelement <4 x i32> %238, i64 1, !dbg !43
  %.extract46 = extractelement <4 x i32> %238, i64 2, !dbg !43
  %.extract47 = extractelement <4 x i32> %238, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract44, i32 %.extract45, i32 %.extract46, i32 %.extract47, ptr addrspace(1) %229, i1 %46) #2, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c46lohvunymdxqfk57ycmydw243fgfzyorvbxmbieje5o7tmqgdu.py", directory: "inductor_cache/46")
!4 = !{ptr @triton_poi_fused_add_unsqueeze_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_unsqueeze_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_unsqueeze_5", linkageName: "triton_poi_fused_add_unsqueeze_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 39, scope: !7)
!21 = !DILocation(line: 30, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 52, scope: !7)
!24 = !DILocation(line: 30, column: 44, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 44, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 44, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 44, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 35, column: 18, scope: !7)
!33 = !DILocation(line: 36, column: 18, scope: !7)
!34 = !DILocation(line: 37, column: 25, scope: !7)
!35 = !DILocation(line: 37, column: 45, scope: !7)
!36 = !DILocation(line: 38, column: 33, scope: !7)
!37 = !DILocation(line: 38, column: 30, scope: !7)
!38 = !DILocation(line: 38, column: 25, scope: !7)
!39 = !DILocation(line: 38, column: 44, scope: !7)
!40 = !DILocation(line: 39, column: 25, scope: !7)
!41 = !DILocation(line: 39, column: 44, scope: !7)
!42 = !DILocation(line: 40, column: 25, scope: !7)
!43 = !DILocation(line: 40, column: 44, scope: !7)
!44 = !DILocation(line: 40, column: 4, scope: !7)
