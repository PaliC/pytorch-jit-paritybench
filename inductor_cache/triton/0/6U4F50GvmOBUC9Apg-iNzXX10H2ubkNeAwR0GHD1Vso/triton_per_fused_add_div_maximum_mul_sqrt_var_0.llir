; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_div_maximum_mul_sqrt_var_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = icmp slt i32 %10, 16, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = srem i32 %10, 4, !dbg !13
  %15 = shl i32 %10, 4, !dbg !14
  %16 = or disjoint i32 %15, %13, !dbg !15
  %17 = sext i32 %16 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !16
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %11, i32 0, i1 %11) #5, !dbg !17
  %20 = bitcast i32 %19 to float, !dbg !17
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %11, i32 0, i1 %11) #5, !dbg !17
  %22 = bitcast i32 %21 to float, !dbg !17
  %23 = sext i32 %14 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %11) #5, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !20
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %11) #5, !dbg !21
  %28 = bitcast i32 %27 to float, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !22
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %11) #5, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !24
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %11) #5, !dbg !25
  %33 = select i1 %11, float %20, float 0.000000e+00, !dbg !26
  %34 = select i1 %11, float %22, float 0.000000e+00, !dbg !26
  %35 = bitcast float %33 to i32, !dbg !27
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 8, i32 31), !dbg !27
  %37 = bitcast i32 %36 to float, !dbg !27
  %38 = fadd float %33, %37, !dbg !31
  %39 = bitcast float %38 to i32, !dbg !27
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 4, i32 31), !dbg !27
  %41 = bitcast i32 %40 to float, !dbg !27
  %42 = fadd float %38, %41, !dbg !31
  %43 = bitcast float %42 to i32, !dbg !27
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 2, i32 31), !dbg !27
  %45 = bitcast i32 %44 to float, !dbg !27
  %46 = fadd float %42, %45, !dbg !31
  %47 = bitcast float %46 to i32, !dbg !27
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 1, i32 31), !dbg !27
  %49 = bitcast i32 %48 to float, !dbg !27
  %50 = fadd float %46, %49, !dbg !31
  %51 = bitcast float %34 to i32, !dbg !27
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 8, i32 31), !dbg !27
  %53 = bitcast i32 %52 to float, !dbg !27
  %54 = fadd float %34, %53, !dbg !31
  %55 = bitcast float %54 to i32, !dbg !27
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 4, i32 31), !dbg !27
  %57 = bitcast i32 %56 to float, !dbg !27
  %58 = fadd float %54, %57, !dbg !31
  %59 = bitcast float %58 to i32, !dbg !27
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 2, i32 31), !dbg !27
  %61 = bitcast i32 %60 to float, !dbg !27
  %62 = fadd float %58, %61, !dbg !31
  %63 = bitcast float %62 to i32, !dbg !27
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 1, i32 31), !dbg !27
  %65 = bitcast i32 %64 to float, !dbg !27
  %66 = fadd float %62, %65, !dbg !31
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %50, float 1.600000e+01) #5, !dbg !33
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %66, float 1.600000e+01) #5, !dbg !33
  %69 = fsub float %20, %67, !dbg !34
  %70 = fsub float %22, %68, !dbg !34
  %71 = fmul float %69, %69, !dbg !35
  %72 = fmul float %70, %70, !dbg !35
  %73 = select i1 %11, float %71, float 0.000000e+00, !dbg !36
  %74 = select i1 %11, float %72, float 0.000000e+00, !dbg !36
  %75 = bitcast float %73 to i32, !dbg !37
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 8, i32 31), !dbg !37
  %77 = bitcast i32 %76 to float, !dbg !37
  %78 = fadd float %73, %77, !dbg !39
  %79 = bitcast float %78 to i32, !dbg !37
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 4, i32 31), !dbg !37
  %81 = bitcast i32 %80 to float, !dbg !37
  %82 = fadd float %78, %81, !dbg !39
  %83 = bitcast float %82 to i32, !dbg !37
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 2, i32 31), !dbg !37
  %85 = bitcast i32 %84 to float, !dbg !37
  %86 = fadd float %82, %85, !dbg !39
  %87 = bitcast float %86 to i32, !dbg !37
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 1, i32 31), !dbg !37
  %89 = bitcast i32 %88 to float, !dbg !37
  %90 = fadd float %86, %89, !dbg !39
  %91 = bitcast float %74 to i32, !dbg !37
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 8, i32 31), !dbg !37
  %93 = bitcast i32 %92 to float, !dbg !37
  %94 = fadd float %74, %93, !dbg !39
  %95 = bitcast float %94 to i32, !dbg !37
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 4, i32 31), !dbg !37
  %97 = bitcast i32 %96 to float, !dbg !37
  %98 = fadd float %94, %97, !dbg !39
  %99 = bitcast float %98 to i32, !dbg !37
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 2, i32 31), !dbg !37
  %101 = bitcast i32 %100 to float, !dbg !37
  %102 = fadd float %98, %101, !dbg !39
  %103 = bitcast float %102 to i32, !dbg !37
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 1, i32 31), !dbg !37
  %105 = bitcast i32 %104 to float, !dbg !37
  %106 = fadd float %102, %105, !dbg !39
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float 1.600000e+01) #5, !dbg !40
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float 1.600000e+01) #5, !dbg !40
  %109 = fadd float %107, 0x3EE4F8B580000000, !dbg !41
  %110 = fadd float %108, 0x3EE4F8B580000000, !dbg !41
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i = icmp eq i32 %111, 0, !dbg !42
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %.not1.i = icmp eq i32 %112, 0, !dbg !42
  br i1 %.not.i, label %118, label %113, !dbg !42

113:                                              ; preds = %9
  br i1 %.not1.i, label %116, label %114, !dbg !42

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %109) #5, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %109) #5, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

118:                                              ; preds = %9
  br i1 %.not1.i, label %121, label %119, !dbg !42

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %109) #5, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %109) #5, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %114, %116, %119, %121
  %.0.i = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !42
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i1 = icmp eq i32 %123, 0, !dbg !42
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %.not1.i4 = icmp eq i32 %124, 0, !dbg !42
  br i1 %.not.i1, label %130, label %125, !dbg !42

125:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %128, label %126, !dbg !42

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %110) #5, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %110) #5, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

130:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %133, label %131, !dbg !42

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.f(float %110) #5, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.f(float %110) #5, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

__nv_sqrtf.exit5:                                 ; preds = %126, %128, %131, %133
  %.0.i3 = phi float [ %127, %126 ], [ %129, %128 ], [ %132, %131 ], [ %134, %133 ], !dbg !42
  %135 = fadd float %28, 0x3EE4F8B580000000, !dbg !43
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i6 = icmp eq i32 %136, 0, !dbg !44
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !44
  %.not1.i9 = icmp eq i32 %137, 0, !dbg !44
  br i1 %.not.i6, label %143, label %138, !dbg !44

138:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %141, label %139, !dbg !44

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %135) #5, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %135) #5, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

143:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %146, label %144, !dbg !44

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.f(float %135) #5, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.f(float %135) #5, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

__nv_sqrtf.exit10:                                ; preds = %139, %141, %144, %146
  %.0.i8 = phi float [ %140, %139 ], [ %142, %141 ], [ %145, %144 ], [ %147, %146 ], !dbg !44
  %148 = bitcast i32 %25 to float, !dbg !19
  %149 = fmul float %20, %148, !dbg !45
  %150 = fadd float %149, %.0.i, !dbg !46
  %151 = bitcast i32 %32 to float, !dbg !25
  %152 = bitcast i32 %30 to float, !dbg !23
  %153 = fcmp ogt float %150, %.0.i8, !dbg !47
  %154 = fcmp uno float %150, 0.000000e+00, !dbg !51
  %155 = or i1 %154, %153, !dbg !52
  %156 = select i1 %155, float %150, float %.0.i8, !dbg !53
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %20, float %156) #5, !dbg !54
  %158 = fmul float %157, %152, !dbg !55
  %159 = fadd float %158, %151, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %160 = sext i32 %10 to i64, !dbg !58
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !58
  %urem = and i32 %12, 63, !dbg !59
  %162 = icmp eq i32 %urem, 0, !dbg !59
  %163 = bitcast float %.0.i3 to i32, !dbg !59
  %164 = and i1 %162, %11, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %163, ptr addrspace(1) %161, i1 %164) #5, !dbg !59
  %165 = getelementptr float, ptr addrspace(1) %6, i64 %17, !dbg !60
  %166 = and i32 %12, 48, !dbg !61
  %167 = icmp eq i32 %166, 0, !dbg !61
  %168 = bitcast float %159 to i32, !dbg !61
  %169 = and i1 %167, %11, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %168, ptr addrspace(1) %165, i1 %169) #5, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2rwuwgd7cmleqgadi2arr3sfvhibr56haczpblko22wur7o4m7q.py", directory: "inductor_cache/2r")
!4 = !{ptr @triton_per_fused_add_div_maximum_mul_sqrt_var_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_maximum_mul_sqrt_var_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_maximum_mul_sqrt_var_0", linkageName: "triton_per_fused_add_div_maximum_mul_sqrt_var_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 38, scope: !7)
!15 = !DILocation(line: 32, column: 35, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 43, scope: !7)
!18 = !DILocation(line: 33, column: 31, scope: !7)
!19 = !DILocation(line: 33, column: 36, scope: !7)
!20 = !DILocation(line: 34, column: 31, scope: !7)
!21 = !DILocation(line: 34, column: 36, scope: !7)
!22 = !DILocation(line: 35, column: 31, scope: !7)
!23 = !DILocation(line: 35, column: 36, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 36, column: 36, scope: !7)
!26 = !DILocation(line: 40, column: 33, scope: !7)
!27 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!30 = !DILocation(line: 41, column: 24, scope: !7)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !30)
!32 = distinct !DILexicalBlockFile(scope: !28, file: !29, discriminator: 0)
!33 = !DILocation(line: 44, column: 19, scope: !7)
!34 = !DILocation(line: 45, column: 19, scope: !7)
!35 = !DILocation(line: 46, column: 20, scope: !7)
!36 = !DILocation(line: 48, column: 35, scope: !7)
!37 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !38)
!38 = !DILocation(line: 49, column: 26, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !38)
!40 = !DILocation(line: 51, column: 20, scope: !7)
!41 = !DILocation(line: 53, column: 20, scope: !7)
!42 = !DILocation(line: 54, column: 27, scope: !7)
!43 = !DILocation(line: 57, column: 20, scope: !7)
!44 = !DILocation(line: 58, column: 27, scope: !7)
!45 = !DILocation(line: 55, column: 19, scope: !7)
!46 = !DILocation(line: 56, column: 20, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 59, column: 42, scope: !7)
!51 = !DILocation(line: 120, column: 21, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 120, column: 16, scope: !48, inlinedAt: !50)
!53 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!54 = !DILocation(line: 60, column: 19, scope: !7)
!55 = !DILocation(line: 61, column: 20, scope: !7)
!56 = !DILocation(line: 62, column: 20, scope: !7)
!57 = !DILocation(line: 63, column: 4, scope: !7)
!58 = !DILocation(line: 64, column: 28, scope: !7)
!59 = !DILocation(line: 64, column: 40, scope: !7)
!60 = !DILocation(line: 65, column: 25, scope: !7)
!61 = !DILocation(line: 65, column: 45, scope: !7)
!62 = !DILocation(line: 65, column: 4, scope: !7)
