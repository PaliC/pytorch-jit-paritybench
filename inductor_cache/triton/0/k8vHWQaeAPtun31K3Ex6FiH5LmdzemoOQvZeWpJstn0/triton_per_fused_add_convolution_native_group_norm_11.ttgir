#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 2], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#loc = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":19:0)
#loc1 = loc(unknown)
#loc22 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":43:26)
#loc29 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":51:26)
#loc46 = loc(callsite(#loc1 at #loc22))
#loc49 = loc(callsite(#loc1 at #loc29))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_convolution_native_group_norm_11(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":19:0), %arg8: i32 loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":19:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x128xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1.280000e+02> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked> loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<1x128xf32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<16> : tensor<1x128xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c4_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %3 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x128xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi32, #blocked> loc(#loc4)
    %6 = arith.divsi %5, %cst_3 : tensor<1x128xi32, #blocked> loc(#loc5)
    %7 = arith.muli %0, %c128_i32 : i32 loc(#loc6)
    %8 = tt.splat %7 : i32 -> tensor<1x128xi32, #blocked1> loc(#loc7)
    %9 = arith.addi %4, %8 : tensor<1x128xi32, #blocked1> loc(#loc7)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %11 = tt.addptr %10, %9 : tensor<1x128x!tt.ptr<f32>, #blocked1>, tensor<1x128xi32, #blocked1> loc(#loc8)
    %12 = tt.splat %1 : i1 -> tensor<1x128xi1, #blocked> loc(#loc9)
    %13 = tt.splat %1 : i1 -> tensor<1x128xi1, #blocked1> loc(#loc9)
    %14 = tt.load %11, %13, %cst_2 : tensor<1x128x!tt.ptr<f32>, #blocked1> loc(#loc9)
    %15 = triton_gpu.convert_layout %14 : tensor<1x128xf32, #blocked1> -> tensor<1x128xf32, #blocked> loc(#loc9)
    %16 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %17 = tt.addptr %16, %9 : tensor<1x128x!tt.ptr<f32>, #blocked1>, tensor<1x128xi32, #blocked1> loc(#loc10)
    %18 = tt.load %17, %13, %cst_2 : tensor<1x128x!tt.ptr<f32>, #blocked1> loc(#loc11)
    %19 = triton_gpu.convert_layout %18 : tensor<1x128xf32, #blocked1> -> tensor<1x128xf32, #blocked> loc(#loc11)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc12)
    %21 = tt.addptr %20, %6 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc12)
    %22 = tt.load %21 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc13)
    %23 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc14)
    %24 = tt.addptr %23, %6 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc14)
    %25 = tt.load %24 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc15)
    %26 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc16)
    %27 = tt.addptr %26, %6 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc16)
    %28 = tt.load %27 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc17)
    %29 = arith.addf %19, %22 : tensor<1x128xf32, #blocked> loc(#loc18)
    %30 = arith.addf %15, %29 : tensor<1x128xf32, #blocked> loc(#loc19)
    %31 = arith.select %12, %30, %cst : tensor<1x128xi1, #blocked>, tensor<1x128xf32, #blocked> loc(#loc20)
    %32 = "tt.reduce"(%31) <{axis = 1 : i32}> ({
    ^bb0(%arg10: f32 loc(callsite(#loc1 at #loc22)), %arg11: f32 loc(callsite(#loc1 at #loc22))):
      %57 = arith.addf %arg10, %arg11 : f32 loc(#loc50)
      tt.reduce.return %57 : f32 loc(#loc45)
    }) : (tensor<1x128xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc45)
    %33 = tt.expand_dims %32 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc24)
    %34 = arith.divf %33, %cst_0 : tensor<1x1xf32, #blocked> loc(#loc25)
    %35 = tt.broadcast %34 : tensor<1x1xf32, #blocked> -> tensor<1x128xf32, #blocked> loc(#loc26)
    %36 = arith.subf %30, %35 : tensor<1x128xf32, #blocked> loc(#loc26)
    %37 = arith.mulf %36, %36 : tensor<1x128xf32, #blocked> loc(#loc27)
    %38 = arith.select %12, %37, %cst : tensor<1x128xi1, #blocked>, tensor<1x128xf32, #blocked> loc(#loc28)
    %39 = "tt.reduce"(%38) <{axis = 1 : i32}> ({
    ^bb0(%arg10: f32 loc(callsite(#loc1 at #loc29)), %arg11: f32 loc(callsite(#loc1 at #loc29))):
      %57 = arith.addf %arg10, %arg11 : f32 loc(#loc51)
      tt.reduce.return %57 : f32 loc(#loc48)
    }) : (tensor<1x128xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc48)
    %40 = tt.expand_dims %39 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc30)
    %41 = arith.divf %40, %cst_0 : tensor<1x1xf32, #blocked> loc(#loc31)
    %42 = arith.addf %41, %cst_1 : tensor<1x1xf32, #blocked> loc(#loc32)
    %43 = tt.extern_elementwise %42 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc33)
    %44 = tt.broadcast %43 : tensor<1x1xf32, #blocked> -> tensor<1x128xf32, #blocked> loc(#loc34)
    %45 = arith.mulf %36, %44 : tensor<1x128xf32, #blocked> loc(#loc34)
    %46 = arith.mulf %45, %25 : tensor<1x128xf32, #blocked> loc(#loc35)
    %47 = arith.addf %46, %28 : tensor<1x128xf32, #blocked> loc(#loc36)
    %48 = triton_gpu.convert_layout %30 : tensor<1x128xf32, #blocked> -> tensor<1x128xf32, #blocked1> loc(#loc37)
    tt.store %17, %48, %13 : tensor<1x128x!tt.ptr<f32>, #blocked1> loc(#loc37)
    %49 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked1> loc(#loc38)
    %50 = tt.addptr %49, %9 : tensor<1x128x!tt.ptr<f32>, #blocked1>, tensor<1x128xi32, #blocked1> loc(#loc38)
    %51 = triton_gpu.convert_layout %47 : tensor<1x128xf32, #blocked> -> tensor<1x128xf32, #blocked1> loc(#loc39)
    tt.store %50, %51, %13 : tensor<1x128x!tt.ptr<f32>, #blocked1> loc(#loc39)
    %52 = tt.addptr %arg7, %0 : !tt.ptr<f32>, i32 loc(#loc40)
    %53 = tt.splat %52 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc41)
    %54 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc41)
    tt.store %53, %43, %54 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc41)
    %55 = tt.addptr %arg5, %0 : !tt.ptr<f32>, i32 loc(#loc42)
    %56 = tt.splat %55 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc43)
    tt.store %56, %34, %54 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc43)
    tt.return loc(#loc44)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":23:28)
#loc3 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":25:21)
#loc4 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":26:34)
#loc5 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":31:19)
#loc6 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":32:39)
#loc7 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":32:35)
#loc8 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":32:30)
#loc9 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":32:44)
#loc10 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":33:34)
#loc11 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":33:48)
#loc12 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":34:30)
#loc13 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":34:35)
#loc14 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":35:31)
#loc15 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":35:36)
#loc16 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":36:31)
#loc17 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":36:36)
#loc18 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":37:18)
#loc19 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":38:18)
#loc20 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":42:34)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc24 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":43:29)
#loc25 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":46:20)
#loc26 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":47:19)
#loc27 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":48:20)
#loc28 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":50:35)
#loc30 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":51:29)
#loc31 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":54:20)
#loc32 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":56:20)
#loc33 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":57:28)
#loc34 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":58:20)
#loc35 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":59:20)
#loc36 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":60:20)
#loc37 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":61:48)
#loc38 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":62:25)
#loc39 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":62:46)
#loc40 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":63:25)
#loc41 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":63:37)
#loc42 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":64:25)
#loc43 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":64:37)
#loc44 = loc("inductor_cache/y3/cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py":64:4)
#loc45 = loc(callsite(#loc21 at #loc22))
#loc47 = loc(callsite(#loc23 at #loc21))
#loc48 = loc(callsite(#loc21 at #loc29))
#loc50 = loc(callsite(#loc47 at #loc22))
#loc51 = loc(callsite(#loc47 at #loc29))
