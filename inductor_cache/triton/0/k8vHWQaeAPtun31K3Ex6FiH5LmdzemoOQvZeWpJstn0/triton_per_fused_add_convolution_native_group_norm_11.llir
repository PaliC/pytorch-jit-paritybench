; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_convolution_native_group_norm_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = icmp slt i32 %11, 4, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 31, !dbg !12
  %15 = lshr i32 %13, 5, !dbg !12
  %16 = shl i32 %13, 1, !dbg !12
  %17 = and i32 %16, 126, !dbg !12
  %18 = and i32 %13, 63, !dbg !12
  %19 = or disjoint i32 %18, 64, !dbg !12
  %20 = lshr i32 %18, 4, !dbg !13
  %21 = lshr i32 %19, 4, !dbg !13
  %22 = shl i32 %11, 7, !dbg !14
  %23 = or disjoint i32 %22, %17, !dbg !15
  %24 = sext i32 %23 to i64, !dbg !16
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !16
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %25, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #5, !dbg !17
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !17
  %28 = extractvalue { i32, i32 } %26, 1, !dbg !17
  %.idx = shl nuw nsw i32 %17, 3, !dbg !17
  %29 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !17
  %30 = insertelement <1 x i32> poison, i32 %27, i64 0, !dbg !17
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %29, <1 x i32> %30, i1 true) #5, !dbg !17
  %31 = shl nuw nsw i32 %17, 1, !dbg !17
  %32 = or disjoint i32 %31, 2, !dbg !17
  %33 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %32, !dbg !17
  %34 = insertelement <1 x i32> poison, i32 %28, i64 0, !dbg !17
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %33, <1 x i32> %34, i1 true) #5, !dbg !17
  tail call void @llvm.nvvm.barrier0(), !dbg !17
  %.idx1 = shl nuw nsw i32 %18, 3, !dbg !17
  %35 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !17
  %36 = load float, ptr addrspace(3) %35, align 8, !dbg !17
  %.idx2 = shl nuw nsw i32 %19, 3, !dbg !17
  %37 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !17
  %38 = load float, ptr addrspace(3) %37, align 8, !dbg !17
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !18
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %39, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #5, !dbg !19
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !19
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %43 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %29, <1 x i32> %43, i1 true) #5, !dbg !19
  %44 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %33, <1 x i32> %44, i1 true) #5, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %45 = load float, ptr addrspace(3) %35, align 8, !dbg !19
  %46 = load float, ptr addrspace(3) %37, align 8, !dbg !19
  %47 = zext nneg i32 %20 to i64, !dbg !20
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !20
  %49 = zext nneg i32 %21 to i64, !dbg !20
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !20
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !21
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #5, !dbg !21
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !22
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !22
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #5, !dbg !23
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #5, !dbg !23
  %57 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !24
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #5, !dbg !25
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #5, !dbg !25
  %61 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !21
  %62 = insertelement <2 x i32> %61, i32 %52, i64 1, !dbg !21
  %63 = bitcast <2 x i32> %62 to <2 x float>, !dbg !21
  %64 = insertelement <2 x float> poison, float %45, i64 0, !dbg !26
  %65 = insertelement <2 x float> %64, float %46, i64 1, !dbg !26
  %66 = fadd <2 x float> %65, %63, !dbg !26
  %67 = insertelement <2 x float> poison, float %36, i64 0, !dbg !27
  %68 = insertelement <2 x float> %67, float %38, i64 1, !dbg !27
  %69 = fadd <2 x float> %68, %66, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %70 = extractelement <2 x float> %69, i64 0, !dbg !32
  %71 = extractelement <2 x float> %69, i64 1, !dbg !32
  %72 = fadd float %70, %71, !dbg !32
  %73 = select i1 %12, float %72, float 0.000000e+00, !dbg !32
  %74 = bitcast float %73 to i32, !dbg !28
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 16, i32 31), !dbg !28
  %76 = bitcast i32 %75 to float, !dbg !28
  %77 = fadd float %73, %76, !dbg !32
  %78 = bitcast float %77 to i32, !dbg !28
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 8, i32 31), !dbg !28
  %80 = bitcast i32 %79 to float, !dbg !28
  %81 = fadd float %77, %80, !dbg !32
  %82 = bitcast float %81 to i32, !dbg !28
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 4, i32 31), !dbg !28
  %84 = bitcast i32 %83 to float, !dbg !28
  %85 = fadd float %81, %84, !dbg !32
  %86 = bitcast float %85 to i32, !dbg !28
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 2, i32 31), !dbg !28
  %88 = bitcast i32 %87 to float, !dbg !28
  %89 = fadd float %85, %88, !dbg !32
  %90 = bitcast float %89 to i32, !dbg !28
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 1, i32 31), !dbg !28
  %92 = bitcast i32 %91 to float, !dbg !28
  %93 = fadd float %89, %92, !dbg !32
  %94 = icmp eq i32 %14, 0, !dbg !28
  %95 = and i32 %15, 1, !dbg !28
  %96 = getelementptr float, ptr addrspace(3) @global_smem, i32 %95, !dbg !28
  %97 = bitcast float %93 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 %94) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %98 = icmp slt i32 %13, 2, !dbg !28
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i32 %13, !dbg !28
  %100 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %99, i1 %98) #5, !dbg !28
  %101 = bitcast i32 %100 to float, !dbg !28
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 1, i32 31), !dbg !28
  %103 = bitcast i32 %102 to float, !dbg !28
  %104 = fadd float %101, %103, !dbg !32
  %105 = and i32 %13, 1, !dbg !28
  %106 = icmp eq i32 %105, 0, !dbg !28
  %107 = and i1 %98, %106, !dbg !28
  %108 = bitcast float %104 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %108, i1 %107) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %109 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !28
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float 1.280000e+02) #5, !dbg !34
  %111 = fsub float %70, %110, !dbg !35
  %112 = fsub float %71, %110, !dbg !35
  %113 = fmul float %111, %111, !dbg !36
  %114 = fmul float %112, %112, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %115 = fadd float %113, %114, !dbg !39
  %116 = select i1 %12, float %115, float 0.000000e+00, !dbg !39
  %117 = bitcast float %116 to i32, !dbg !37
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 16, i32 31), !dbg !37
  %119 = bitcast i32 %118 to float, !dbg !37
  %120 = fadd float %116, %119, !dbg !39
  %121 = bitcast float %120 to i32, !dbg !37
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 8, i32 31), !dbg !37
  %123 = bitcast i32 %122 to float, !dbg !37
  %124 = fadd float %120, %123, !dbg !39
  %125 = bitcast float %124 to i32, !dbg !37
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 4, i32 31), !dbg !37
  %127 = bitcast i32 %126 to float, !dbg !37
  %128 = fadd float %124, %127, !dbg !39
  %129 = bitcast float %128 to i32, !dbg !37
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 2, i32 31), !dbg !37
  %131 = bitcast i32 %130 to float, !dbg !37
  %132 = fadd float %128, %131, !dbg !39
  %133 = bitcast float %132 to i32, !dbg !37
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 1, i32 31), !dbg !37
  %135 = bitcast i32 %134 to float, !dbg !37
  %136 = fadd float %132, %135, !dbg !39
  %137 = bitcast float %136 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %137, i1 %94) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %138 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %99, i1 %98) #5, !dbg !37
  %139 = bitcast i32 %138 to float, !dbg !37
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 1, i32 31), !dbg !37
  %141 = bitcast i32 %140 to float, !dbg !37
  %142 = fadd float %139, %141, !dbg !39
  %143 = bitcast float %142 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %143, i1 %107) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %144 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !37
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float 1.280000e+02) #5, !dbg !40
  %146 = fadd float %145, 0x3EE4F8B580000000, !dbg !41
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i = icmp eq i32 %147, 0, !dbg !42
  br i1 %.not.i, label %150, label %148, !dbg !42

148:                                              ; preds = %10
  %149 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %146), !dbg !42
  br label %__nv_rsqrtf.exit, !dbg !42

150:                                              ; preds = %10
  %151 = tail call float @llvm.nvvm.rsqrt.approx.f(float %146), !dbg !42
  br label %__nv_rsqrtf.exit, !dbg !42

__nv_rsqrtf.exit:                                 ; preds = %148, %150
  %.0.i = phi float [ %149, %148 ], [ %151, %150 ], !dbg !42
  %152 = bitcast i32 %60 to float, !dbg !25
  %153 = bitcast i32 %59 to float, !dbg !25
  %154 = bitcast i32 %56 to float, !dbg !23
  %155 = bitcast i32 %55 to float, !dbg !23
  %156 = fmul float %111, %.0.i, !dbg !43
  %157 = fmul float %112, %.0.i, !dbg !43
  %158 = fmul float %156, %155, !dbg !44
  %159 = fmul float %157, %154, !dbg !44
  %160 = fadd float %158, %153, !dbg !45
  %161 = fadd float %159, %152, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %162 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !46
  %163 = bitcast float %70 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %163, i1 true) #5, !dbg !46
  %164 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !46
  %165 = bitcast float %71 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %165, i1 true) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %166 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !46
  %.extract = load i32, ptr addrspace(3) %166, align 8, !dbg !46
  %167 = getelementptr inbounds i8, ptr addrspace(3) %166, i32 4, !dbg !46
  %.extract4 = load i32, ptr addrspace(3) %167, align 4, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract4, ptr addrspace(1) %39, i1 %12) #5, !dbg !46
  %168 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %169 = bitcast float %160 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %169, i1 true) #5, !dbg !48
  %170 = bitcast float %161 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %170, i1 true) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %.extract6 = load i32, ptr addrspace(3) %166, align 8, !dbg !48
  %.extract7 = load i32, ptr addrspace(3) %167, align 4, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract6, i32 %.extract7, ptr addrspace(1) %168, i1 %12) #5, !dbg !48
  %171 = sext i32 %11 to i64, !dbg !49
  %172 = getelementptr float, ptr addrspace(1) %7, i64 %171, !dbg !49
  %173 = icmp eq i32 %18, 0, !dbg !50
  %174 = bitcast float %.0.i to i32, !dbg !50
  %175 = and i1 %173, %12, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %174, ptr addrspace(1) %172, i1 %175) #5, !dbg !50
  %176 = getelementptr float, ptr addrspace(1) %5, i64 %171, !dbg !51
  %177 = bitcast float %110 to i32, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %177, ptr addrspace(1) %176, i1 %175) #5, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cy3k4gf4duj65dfobuhkihbhxt4wygnu5fl572jhidcle7xb6xp5.py", directory: "inductor_cache/y3")
!4 = !{ptr @triton_per_fused_add_convolution_native_group_norm_11, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_convolution_native_group_norm_11, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_convolution_native_group_norm_11", linkageName: "triton_per_fused_add_convolution_native_group_norm_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 39, scope: !7)
!15 = !DILocation(line: 32, column: 35, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 44, scope: !7)
!18 = !DILocation(line: 33, column: 34, scope: !7)
!19 = !DILocation(line: 33, column: 48, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 35, scope: !7)
!22 = !DILocation(line: 35, column: 31, scope: !7)
!23 = !DILocation(line: 35, column: 36, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 36, column: 36, scope: !7)
!26 = !DILocation(line: 37, column: 18, scope: !7)
!27 = !DILocation(line: 38, column: 18, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!31 = !DILocation(line: 43, column: 26, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !31)
!33 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!34 = !DILocation(line: 46, column: 20, scope: !7)
!35 = !DILocation(line: 47, column: 19, scope: !7)
!36 = !DILocation(line: 48, column: 20, scope: !7)
!37 = !DILocation(line: 267, column: 36, scope: !29, inlinedAt: !38)
!38 = !DILocation(line: 51, column: 26, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !38)
!40 = !DILocation(line: 54, column: 20, scope: !7)
!41 = !DILocation(line: 56, column: 20, scope: !7)
!42 = !DILocation(line: 57, column: 28, scope: !7)
!43 = !DILocation(line: 58, column: 20, scope: !7)
!44 = !DILocation(line: 59, column: 20, scope: !7)
!45 = !DILocation(line: 60, column: 20, scope: !7)
!46 = !DILocation(line: 61, column: 48, scope: !7)
!47 = !DILocation(line: 62, column: 25, scope: !7)
!48 = !DILocation(line: 62, column: 46, scope: !7)
!49 = !DILocation(line: 63, column: 25, scope: !7)
!50 = !DILocation(line: 63, column: 37, scope: !7)
!51 = !DILocation(line: 64, column: 25, scope: !7)
!52 = !DILocation(line: 64, column: 37, scope: !7)
!53 = !DILocation(line: 64, column: 4, scope: !7)
