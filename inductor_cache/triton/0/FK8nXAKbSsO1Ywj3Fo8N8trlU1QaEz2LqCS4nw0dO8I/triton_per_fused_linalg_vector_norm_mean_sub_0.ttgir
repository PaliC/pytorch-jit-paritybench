#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":19:0)
#loc1 = loc(unknown)
#loc42 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":52:26)
#loc58 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":66:26)
#loc69 = loc(callsite(#loc1 at #loc42))
#loc72 = loc(callsite(#loc1 at #loc58))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_linalg_vector_norm_mean_sub_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<16> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<64> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<32> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<48> : tensor<1x64xi32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<6.400000e+01> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc2)
    %2 = arith.remsi %1, %cst : tensor<1x64xi32, #blocked> loc(#loc3)
    %3 = arith.divsi %1, %cst : tensor<1x64xi32, #blocked> loc(#loc4)
    %4 = arith.muli %3, %cst_0 : tensor<1x64xi32, #blocked> loc(#loc5)
    %5 = arith.addi %2, %4 : tensor<1x64xi32, #blocked> loc(#loc6)
    %6 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc7)
    %7 = tt.addptr %6, %5 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc7)
    %8 = tt.load %7 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc8)
    %9 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc9)
    %10 = tt.addptr %9, %5 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc9)
    %11 = tt.load %10 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc10)
    %12 = arith.addi %2, %cst : tensor<1x64xi32, #blocked> loc(#loc11)
    %13 = arith.addi %12, %4 : tensor<1x64xi32, #blocked> loc(#loc12)
    %14 = tt.addptr %6, %13 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc13)
    %15 = tt.load %14 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc14)
    %16 = tt.addptr %9, %13 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc15)
    %17 = tt.load %16 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = arith.addi %2, %cst_1 : tensor<1x64xi32, #blocked> loc(#loc17)
    %19 = arith.addi %18, %4 : tensor<1x64xi32, #blocked> loc(#loc18)
    %20 = tt.addptr %6, %19 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc19)
    %21 = tt.load %20 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc20)
    %22 = tt.addptr %9, %19 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc21)
    %23 = tt.load %22 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc22)
    %24 = arith.addi %2, %cst_2 : tensor<1x64xi32, #blocked> loc(#loc23)
    %25 = arith.addi %24, %4 : tensor<1x64xi32, #blocked> loc(#loc24)
    %26 = tt.addptr %6, %25 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc25)
    %27 = tt.load %26 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc26)
    %28 = tt.addptr %9, %25 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc27)
    %29 = tt.load %28 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc28)
    %30 = arith.subf %8, %11 : tensor<1x64xf32, #blocked> loc(#loc29)
    %31 = arith.mulf %30, %30 : tensor<1x64xf32, #blocked> loc(#loc30)
    %32 = arith.subf %15, %17 : tensor<1x64xf32, #blocked> loc(#loc31)
    %33 = arith.mulf %32, %32 : tensor<1x64xf32, #blocked> loc(#loc32)
    %34 = arith.addf %31, %33 : tensor<1x64xf32, #blocked> loc(#loc33)
    %35 = arith.subf %21, %23 : tensor<1x64xf32, #blocked> loc(#loc34)
    %36 = arith.mulf %35, %35 : tensor<1x64xf32, #blocked> loc(#loc35)
    %37 = arith.addf %34, %36 : tensor<1x64xf32, #blocked> loc(#loc36)
    %38 = arith.subf %27, %29 : tensor<1x64xf32, #blocked> loc(#loc37)
    %39 = arith.mulf %38, %38 : tensor<1x64xf32, #blocked> loc(#loc38)
    %40 = arith.addf %37, %39 : tensor<1x64xf32, #blocked> loc(#loc39)
    %41 = tt.extern_elementwise %40 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x64xf32, #blocked>) -> tensor<1x64xf32, #blocked> loc(#loc40)
    %42 = "tt.reduce"(%41) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc42)), %arg6: f32 loc(callsite(#loc1 at #loc42))):
      %66 = arith.addf %arg5, %arg6 : f32 loc(#loc73)
      tt.reduce.return %66 : f32 loc(#loc68)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc68)
    %43 = triton_gpu.convert_layout %42 {fastmath = #arith.fastmath<none>} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc44)
    %44 = tt.expand_dims %43 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc45)
    %45 = arith.subf %11, %8 : tensor<1x64xf32, #blocked> loc(#loc46)
    %46 = arith.mulf %45, %45 : tensor<1x64xf32, #blocked> loc(#loc47)
    %47 = arith.subf %17, %15 : tensor<1x64xf32, #blocked> loc(#loc48)
    %48 = arith.mulf %47, %47 : tensor<1x64xf32, #blocked> loc(#loc49)
    %49 = arith.addf %46, %48 : tensor<1x64xf32, #blocked> loc(#loc50)
    %50 = arith.subf %23, %21 : tensor<1x64xf32, #blocked> loc(#loc51)
    %51 = arith.mulf %50, %50 : tensor<1x64xf32, #blocked> loc(#loc52)
    %52 = arith.addf %49, %51 : tensor<1x64xf32, #blocked> loc(#loc53)
    %53 = arith.subf %29, %27 : tensor<1x64xf32, #blocked> loc(#loc54)
    %54 = arith.mulf %53, %53 : tensor<1x64xf32, #blocked> loc(#loc55)
    %55 = arith.addf %52, %54 : tensor<1x64xf32, #blocked> loc(#loc56)
    %56 = tt.extern_elementwise %55 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x64xf32, #blocked>) -> tensor<1x64xf32, #blocked> loc(#loc57)
    %57 = "tt.reduce"(%56) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc58)), %arg6: f32 loc(callsite(#loc1 at #loc58))):
      %66 = arith.addf %arg5, %arg6 : f32 loc(#loc74)
      tt.reduce.return %66 : f32 loc(#loc71)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc71)
    %58 = triton_gpu.convert_layout %57 {fastmath = #arith.fastmath<none>} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc59)
    %59 = tt.expand_dims %58 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc60)
    %60 = arith.divf %44, %cst_3 : tensor<1x1xf32, #blocked1> loc(#loc44)
    %61 = arith.divf %59, %cst_3 : tensor<1x1xf32, #blocked1> loc(#loc59)
    gpu.barrier loc(#loc61)
    %62 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc62)
    %63 = tt.splat %62 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc63)
    tt.store %63, %60 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc63)
    gpu.barrier loc(#loc64)
    %64 = tt.addptr %arg1, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc65)
    %65 = tt.splat %64 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc66)
    tt.store %65, %61 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc66)
    tt.return loc(#loc67)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":26:34)
#loc3 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":29:19)
#loc4 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":30:19)
#loc5 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":31:38)
#loc6 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":31:35)
#loc7 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":31:30)
#loc8 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":31:43)
#loc9 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":32:30)
#loc10 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":32:43)
#loc11 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":33:35)
#loc12 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":33:40)
#loc13 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":33:30)
#loc14 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":33:48)
#loc15 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":34:30)
#loc16 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":34:48)
#loc17 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":35:35)
#loc18 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":35:40)
#loc19 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":35:30)
#loc20 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":35:48)
#loc21 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":36:31)
#loc22 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":36:49)
#loc23 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":37:36)
#loc24 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":37:41)
#loc25 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":37:31)
#loc26 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":37:49)
#loc27 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":38:31)
#loc28 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":38:49)
#loc29 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":39:18)
#loc30 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":40:18)
#loc31 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":41:18)
#loc32 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":42:18)
#loc33 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":43:18)
#loc34 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":44:19)
#loc35 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":45:20)
#loc36 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":46:19)
#loc37 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":47:20)
#loc38 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":48:20)
#loc39 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":49:20)
#loc40 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":50:27)
#loc41 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc43 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc44 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":68:20)
#loc45 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":52:29)
#loc46 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":53:19)
#loc47 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":54:20)
#loc48 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":55:19)
#loc49 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":56:20)
#loc50 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":57:20)
#loc51 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":58:20)
#loc52 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":59:20)
#loc53 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":60:20)
#loc54 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":61:20)
#loc55 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":62:20)
#loc56 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":63:20)
#loc57 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":64:27)
#loc59 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":69:20)
#loc60 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":66:29)
#loc61 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":70:4)
#loc62 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":71:28)
#loc63 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":71:71)
#loc64 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":72:4)
#loc65 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":73:28)
#loc66 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":73:71)
#loc67 = loc("inductor_cache/3j/c3jlvi5xy6ptfqf6lkntp6jivhszktrop73gjt36hc25txoftg6b.py":73:4)
#loc68 = loc(callsite(#loc41 at #loc42))
#loc70 = loc(callsite(#loc43 at #loc41))
#loc71 = loc(callsite(#loc41 at #loc58))
#loc73 = loc(callsite(#loc70 at #loc42))
#loc74 = loc(callsite(#loc70 at #loc58))
