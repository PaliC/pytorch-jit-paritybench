; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_cat_native_group_norm_30(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = shl i32 %11, 3, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 5, !dbg !12
  %15 = and i32 %14, 7, !dbg !12
  %16 = and i32 %13, 7, !dbg !12
  %17 = or disjoint i32 %12, %15, !dbg !13
  %18 = icmp slt i32 %17, 128, !dbg !14
  %19 = shl i32 %13, 2, !dbg !15
  %20 = and i32 %19, 12, !dbg !15
  %21 = and i32 %19, 124, !dbg !15
  %22 = lshr i32 %21, 4, !dbg !16
  %.frozen = freeze i32 %17, !dbg !17
  %23 = sdiv i32 %.frozen, 32, !dbg !17
  %24 = mul i32 %23, 32, !dbg !18
  %.decomposed = sub i32 %.frozen, %24, !dbg !18
  %25 = shl i32 %17, 7, !dbg !19
  %26 = or disjoint i32 %25, %21, !dbg !20
  %27 = sext i32 %26 to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !21
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !22
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !22
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !22
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !22
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !22
  %34 = bitcast i32 %30 to float, !dbg !22
  %35 = bitcast i32 %31 to float, !dbg !22
  %36 = bitcast i32 %32 to float, !dbg !22
  %37 = bitcast i32 %33 to float, !dbg !22
  %38 = shl nsw i32 %.decomposed, 3, !dbg !23
  %39 = or disjoint i32 %38, %22, !dbg !24
  %40 = icmp slt i32 %39, 128, !dbg !25
  %41 = shl nsw i32 %39, 4, !dbg !26
  %42 = shl i32 %23, 11, !dbg !27
  %43 = or disjoint i32 %42, %20, !dbg !28
  %44 = add i32 %43, %41, !dbg !29
  %45 = sext i32 %44 to i64, !dbg !30
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !30
  %47 = and i1 %18, %40, !dbg !31
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #5, !dbg !32
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !32
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !32
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !32
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !32
  %53 = and i32 %.decomposed, 536870904, !dbg !33
  %54 = icmp eq i32 %53, 16, !dbg !33
  %55 = or disjoint i32 %22, -128, !dbg !34
  %56 = add nsw i32 %55, %38, !dbg !35
  %57 = shl nsw i32 %56, 4, !dbg !36
  %58 = shl i32 %23, 10, !dbg !37
  %59 = or disjoint i32 %58, %20, !dbg !38
  %60 = add i32 %59, %57, !dbg !39
  %61 = sext i32 %60 to i64, !dbg !40
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !40
  %63 = and i1 %18, %54, !dbg !41
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %62, i1 %63, i32 0, i1 %63, i32 0, i1 %63, i32 0, i1 %63, i32 0, i1 %63) #5, !dbg !42
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !42
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !42
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !42
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !42
  %69 = icmp sgt i32 %39, 191, !dbg !43
  %70 = or disjoint i32 %22, -192, !dbg !44
  %71 = add nsw i32 %70, %38, !dbg !45
  %72 = shl nsw i32 %71, 4, !dbg !46
  %73 = add i32 %59, %72, !dbg !47
  %74 = sext i32 %73 to i64, !dbg !48
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %74, !dbg !48
  %76 = and i1 %18, %69, !dbg !49
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %75, i1 %76, i32 0, i1 %76, i32 0, i1 %76, i32 0, i1 %76, i32 0, i1 %76) #5, !dbg !50
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !50
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !50
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !50
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !50
  %.v = select i1 %54, i32 %65, i32 %78, !dbg !51
  %.v1 = select i1 %54, i32 %66, i32 %79, !dbg !51
  %.v2 = select i1 %54, i32 %67, i32 %80, !dbg !51
  %.v3 = select i1 %54, i32 %68, i32 %81, !dbg !51
  %.v4 = select i1 %40, i32 %49, i32 %.v, !dbg !52
  %82 = bitcast i32 %.v4 to float, !dbg !52
  %.v5 = select i1 %40, i32 %50, i32 %.v1, !dbg !52
  %83 = bitcast i32 %.v5 to float, !dbg !52
  %.v6 = select i1 %40, i32 %51, i32 %.v2, !dbg !52
  %84 = bitcast i32 %.v6 to float, !dbg !52
  %.v7 = select i1 %40, i32 %52, i32 %.v3, !dbg !52
  %85 = bitcast i32 %.v7 to float, !dbg !52
  %86 = fadd float %34, %82, !dbg !53
  %87 = fadd float %35, %83, !dbg !53
  %88 = fadd float %36, %84, !dbg !53
  %89 = fadd float %37, %85, !dbg !53
  %90 = fadd float %86, %87, !dbg !54
  %91 = fadd float %88, %90, !dbg !54
  %92 = fadd float %89, %91, !dbg !54
  %93 = select i1 %18, float %92, float 0.000000e+00, !dbg !54
  %94 = bitcast float %93 to i32, !dbg !59
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 16, i32 31), !dbg !59
  %96 = bitcast i32 %95 to float, !dbg !59
  %97 = fadd float %93, %96, !dbg !54
  %98 = bitcast float %97 to i32, !dbg !59
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 8, i32 31), !dbg !59
  %100 = bitcast i32 %99 to float, !dbg !59
  %101 = fadd float %97, %100, !dbg !54
  %102 = bitcast float %101 to i32, !dbg !59
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 4, i32 31), !dbg !59
  %104 = bitcast i32 %103 to float, !dbg !59
  %105 = fadd float %101, %104, !dbg !54
  %106 = bitcast float %105 to i32, !dbg !59
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 2, i32 31), !dbg !59
  %108 = bitcast i32 %107 to float, !dbg !59
  %109 = fadd float %105, %108, !dbg !54
  %110 = bitcast float %109 to i32, !dbg !59
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 1, i32 31), !dbg !59
  %112 = bitcast i32 %111 to float, !dbg !59
  %113 = fadd float %109, %112, !dbg !54
  %114 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !60
  %115 = bitcast float %113 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #5, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !60
  %117 = load float, ptr addrspace(3) %116, align 4, !dbg !60
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float 1.280000e+02) #5, !dbg !60
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float 1.280000e+02) #5, !dbg !60
  %120 = fsub float %86, %119, !dbg !61
  %121 = fsub float %87, %119, !dbg !61
  %122 = fsub float %88, %119, !dbg !61
  %123 = fsub float %89, %119, !dbg !61
  %124 = fmul float %120, %120, !dbg !62
  %125 = fmul float %121, %121, !dbg !62
  %126 = fmul float %122, %122, !dbg !62
  %127 = fmul float %123, %123, !dbg !62
  %128 = fadd float %124, %125, !dbg !63
  %129 = fadd float %126, %128, !dbg !63
  %130 = fadd float %127, %129, !dbg !63
  %131 = select i1 %18, float %130, float 0.000000e+00, !dbg !63
  %132 = bitcast float %131 to i32, !dbg !65
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 16, i32 31), !dbg !65
  %134 = bitcast i32 %133 to float, !dbg !65
  %135 = fadd float %131, %134, !dbg !63
  %136 = bitcast float %135 to i32, !dbg !65
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 8, i32 31), !dbg !65
  %138 = bitcast i32 %137 to float, !dbg !65
  %139 = fadd float %135, %138, !dbg !63
  %140 = bitcast float %139 to i32, !dbg !65
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 4, i32 31), !dbg !65
  %142 = bitcast i32 %141 to float, !dbg !65
  %143 = fadd float %139, %142, !dbg !63
  %144 = bitcast float %143 to i32, !dbg !65
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 2, i32 31), !dbg !65
  %146 = bitcast i32 %145 to float, !dbg !65
  %147 = fadd float %143, %146, !dbg !63
  %148 = bitcast float %147 to i32, !dbg !65
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 1, i32 31), !dbg !65
  %150 = bitcast i32 %149 to float, !dbg !65
  %151 = fadd float %147, %150, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %152 = bitcast float %151 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %152, i1 true) #5, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %153 = load float, ptr addrspace(3) %116, align 4, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %152, i1 true) #5, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %154 = load i32, ptr addrspace(3) %116, align 4, !dbg !67
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %153, float 1.280000e+02) #5, !dbg !68
  %156 = fadd float %155, 0x3EE4F8B580000000, !dbg !69
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !66
  %.not.i = icmp eq i32 %157, 0, !dbg !66
  br i1 %.not.i, label %160, label %158, !dbg !66

158:                                              ; preds = %10
  %159 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %156), !dbg !66
  br label %__nv_rsqrtf.exit, !dbg !66

160:                                              ; preds = %10
  %161 = tail call float @llvm.nvvm.rsqrt.approx.f(float %156), !dbg !66
  br label %__nv_rsqrtf.exit, !dbg !66

__nv_rsqrtf.exit:                                 ; preds = %158, %160
  %.0.i = phi float [ %159, %158 ], [ %161, %160 ], !dbg !66
  %162 = or disjoint i32 %12, %16, !dbg !13
  %163 = icmp slt i32 %162, 128, !dbg !14
  %164 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.v4, i32 %.v5, i32 %.v6, i32 %.v7, ptr addrspace(1) %164, i1 %18) #5, !dbg !71
  %165 = sext i32 %162 to i64, !dbg !72
  %166 = getelementptr float, ptr addrspace(1) %7, i64 %165, !dbg !72
  %167 = and i32 %13, 248, !dbg !73
  %168 = icmp eq i32 %167, 0, !dbg !73
  %169 = bitcast float %.0.i to i32, !dbg !73
  %170 = and i1 %168, %163, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %169, ptr addrspace(1) %166, i1 %170) #5, !dbg !73
  %171 = getelementptr float, ptr addrspace(1) %5, i64 %165, !dbg !74
  %172 = bitcast float %118 to i32, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %172, ptr addrspace(1) %171, i1 %170) #5, !dbg !75
  %173 = getelementptr float, ptr addrspace(1) %6, i64 %165, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %154, ptr addrspace(1) %173, i1 %170) #5, !dbg !77
  ret void, !dbg !78
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3y3yz5sfk7oz6kcvh2rrfcgq3jb3b42pko7ublpe6cptugbwbcj.py", directory: "inductor_cache/3y")
!4 = !{ptr @triton_per_fused_cat_native_group_norm_30, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_cat_native_group_norm_30, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_cat_native_group_norm_30", linkageName: "triton_per_fused_cat_native_group_norm_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 29, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 35, column: 40, scope: !7)
!20 = !DILocation(line: 35, column: 36, scope: !7)
!21 = !DILocation(line: 35, column: 31, scope: !7)
!22 = !DILocation(line: 35, column: 45, scope: !7)
!23 = !DILocation(line: 36, column: 18, scope: !7)
!24 = !DILocation(line: 36, column: 16, scope: !7)
!25 = !DILocation(line: 40, column: 18, scope: !7)
!26 = !DILocation(line: 41, column: 39, scope: !7)
!27 = !DILocation(line: 41, column: 57, scope: !7)
!28 = !DILocation(line: 41, column: 35, scope: !7)
!29 = !DILocation(line: 41, column: 52, scope: !7)
!30 = !DILocation(line: 41, column: 30, scope: !7)
!31 = !DILocation(line: 41, column: 69, scope: !7)
!32 = !DILocation(line: 41, column: 62, scope: !7)
!33 = !DILocation(line: 45, column: 18, scope: !7)
!34 = !DILocation(line: 46, column: 49, scope: !7)
!35 = !DILocation(line: 46, column: 54, scope: !7)
!36 = !DILocation(line: 46, column: 40, scope: !7)
!37 = !DILocation(line: 46, column: 67, scope: !7)
!38 = !DILocation(line: 46, column: 36, scope: !7)
!39 = !DILocation(line: 46, column: 62, scope: !7)
!40 = !DILocation(line: 46, column: 31, scope: !7)
!41 = !DILocation(line: 46, column: 79, scope: !7)
!42 = !DILocation(line: 46, column: 72, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 50, column: 49, scope: !7)
!45 = !DILocation(line: 50, column: 54, scope: !7)
!46 = !DILocation(line: 50, column: 40, scope: !7)
!47 = !DILocation(line: 50, column: 62, scope: !7)
!48 = !DILocation(line: 50, column: 31, scope: !7)
!49 = !DILocation(line: 50, column: 80, scope: !7)
!50 = !DILocation(line: 50, column: 72, scope: !7)
!51 = !DILocation(line: 51, column: 34, scope: !7)
!52 = !DILocation(line: 52, column: 33, scope: !7)
!53 = !DILocation(line: 53, column: 20, scope: !7)
!54 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !58)
!55 = distinct !DILexicalBlockFile(scope: !57, file: !56, discriminator: 0)
!56 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!57 = distinct !DILexicalBlockFile(scope: !7, file: !56, discriminator: 0)
!58 = !DILocation(line: 58, column: 26, scope: !7)
!59 = !DILocation(line: 267, column: 36, scope: !57, inlinedAt: !58)
!60 = !DILocation(line: 61, column: 20, scope: !7)
!61 = !DILocation(line: 62, column: 20, scope: !7)
!62 = !DILocation(line: 63, column: 20, scope: !7)
!63 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !64)
!64 = !DILocation(line: 66, column: 26, scope: !7)
!65 = !DILocation(line: 267, column: 36, scope: !57, inlinedAt: !64)
!66 = !DILocation(line: 71, column: 28, scope: !7)
!67 = !DILocation(line: 66, column: 29, scope: !7)
!68 = !DILocation(line: 68, column: 20, scope: !7)
!69 = !DILocation(line: 70, column: 20, scope: !7)
!70 = !DILocation(line: 72, column: 25, scope: !7)
!71 = !DILocation(line: 72, column: 46, scope: !7)
!72 = !DILocation(line: 73, column: 25, scope: !7)
!73 = !DILocation(line: 73, column: 37, scope: !7)
!74 = !DILocation(line: 74, column: 25, scope: !7)
!75 = !DILocation(line: 74, column: 37, scope: !7)
!76 = !DILocation(line: 75, column: 25, scope: !7)
!77 = !DILocation(line: 75, column: 37, scope: !7)
!78 = !DILocation(line: 75, column: 4, scope: !7)
