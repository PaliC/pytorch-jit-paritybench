; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_convolution_mean_31(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 7, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 2, !dbg !12
  %12 = and i32 %11, 63, !dbg !12
  %13 = or disjoint i32 %12, 64, !dbg !12
  %14 = and i32 %10, 127, !dbg !12
  %15 = or disjoint i32 %9, %12, !dbg !13
  %16 = or disjoint i32 %9, %13, !dbg !13
  %17 = shl i32 %10, 2, !dbg !14
  %18 = and i32 %17, 12, !dbg !14
  %19 = srem i32 %15, 1024, !dbg !15
  %20 = srem i32 %16, 1024, !dbg !15
  %21 = shl i32 %15, 4, !dbg !16
  %22 = shl i32 %16, 4, !dbg !16
  %23 = or disjoint i32 %21, %18, !dbg !17
  %24 = or disjoint i32 %22, %18, !dbg !17
  %25 = sext i32 %23 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !18
  %27 = sext i32 %24 to i64, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !18
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #5, !dbg !19
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !19
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !19
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !19
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !19
  %34 = bitcast i32 %30 to float, !dbg !19
  %35 = bitcast i32 %31 to float, !dbg !19
  %36 = bitcast i32 %32 to float, !dbg !19
  %37 = bitcast i32 %33 to float, !dbg !19
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !19
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !19
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !19
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !19
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !19
  %43 = bitcast i32 %39 to float, !dbg !19
  %44 = bitcast i32 %40 to float, !dbg !19
  %45 = bitcast i32 %41 to float, !dbg !19
  %46 = bitcast i32 %42 to float, !dbg !19
  %47 = sext i32 %19 to i64, !dbg !20
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !20
  %49 = sext i32 %20 to i64, !dbg !20
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !20
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !21
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !21
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !21
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !21
  %55 = bitcast i32 %54 to float, !dbg !21
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #5, !dbg !21
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #5, !dbg !21
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #5, !dbg !21
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #5, !dbg !21
  %60 = bitcast i32 %59 to float, !dbg !21
  %61 = fadd float %34, %55, !dbg !22
  %62 = fadd float %35, %55, !dbg !22
  %63 = fadd float %36, %55, !dbg !22
  %64 = fadd float %37, %55, !dbg !22
  %65 = fadd float %43, %60, !dbg !22
  %66 = fadd float %44, %60, !dbg !22
  %67 = fadd float %45, %60, !dbg !22
  %68 = fadd float %46, %60, !dbg !22
  %69 = fadd float %61, %62, !dbg !23
  %70 = fadd float %63, %69, !dbg !23
  %71 = fadd float %64, %70, !dbg !23
  %72 = fadd float %65, %66, !dbg !23
  %73 = fadd float %67, %72, !dbg !23
  %74 = fadd float %68, %73, !dbg !23
  %75 = bitcast float %71 to i32, !dbg !28
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 2, i32 31), !dbg !28
  %77 = bitcast i32 %76 to float, !dbg !28
  %78 = fadd float %71, %77, !dbg !23
  %79 = bitcast float %78 to i32, !dbg !28
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 1, i32 31), !dbg !28
  %81 = bitcast i32 %80 to float, !dbg !28
  %82 = fadd float %78, %81, !dbg !23
  %83 = bitcast float %74 to i32, !dbg !28
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 2, i32 31), !dbg !28
  %85 = bitcast i32 %84 to float, !dbg !28
  %86 = fadd float %74, %85, !dbg !23
  %87 = bitcast float %86 to i32, !dbg !28
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 1, i32 31), !dbg !28
  %89 = bitcast i32 %88 to float, !dbg !28
  %90 = fadd float %86, %89, !dbg !23
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !29
  %92 = bitcast float %82 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 true) #5, !dbg !29
  %93 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !29
  %94 = bitcast float %90 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %95 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !29
  %96 = load float, ptr addrspace(3) %95, align 4, !dbg !29
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float 1.600000e+01) #5, !dbg !29
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float 1.600000e+01) #5, !dbg !29
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float 1.600000e+01) #5, !dbg !29
  %100 = fsub float %61, %98, !dbg !30
  %101 = fsub float %62, %98, !dbg !30
  %102 = fsub float %63, %98, !dbg !30
  %103 = fsub float %64, %98, !dbg !30
  %104 = fsub float %65, %99, !dbg !30
  %105 = fsub float %66, %99, !dbg !30
  %106 = fsub float %67, %99, !dbg !30
  %107 = fsub float %68, %99, !dbg !30
  %108 = fmul float %100, %100, !dbg !31
  %109 = fmul float %101, %101, !dbg !31
  %110 = fmul float %102, %102, !dbg !31
  %111 = fmul float %103, %103, !dbg !31
  %112 = fmul float %104, %104, !dbg !31
  %113 = fmul float %105, %105, !dbg !31
  %114 = fmul float %106, %106, !dbg !31
  %115 = fmul float %107, %107, !dbg !31
  %116 = fadd float %108, %109, !dbg !32
  %117 = fadd float %110, %116, !dbg !32
  %118 = fadd float %111, %117, !dbg !32
  %119 = fadd float %112, %113, !dbg !32
  %120 = fadd float %114, %119, !dbg !32
  %121 = fadd float %115, %120, !dbg !32
  %122 = bitcast float %118 to i32, !dbg !34
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 2, i32 31), !dbg !34
  %124 = bitcast i32 %123 to float, !dbg !34
  %125 = fadd float %118, %124, !dbg !32
  %126 = bitcast float %125 to i32, !dbg !34
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 1, i32 31), !dbg !34
  %128 = bitcast i32 %127 to float, !dbg !34
  %129 = fadd float %125, %128, !dbg !32
  %130 = bitcast float %121 to i32, !dbg !34
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 2, i32 31), !dbg !34
  %132 = bitcast i32 %131 to float, !dbg !34
  %133 = fadd float %121, %132, !dbg !32
  %134 = bitcast float %133 to i32, !dbg !34
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 1, i32 31), !dbg !34
  %136 = bitcast i32 %135 to float, !dbg !34
  %137 = fadd float %133, %136, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %138 = bitcast float %129 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %138, i1 true) #5, !dbg !35
  %139 = bitcast float %137 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %139, i1 true) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %140 = load float, ptr addrspace(3) %95, align 4, !dbg !35
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float 1.600000e+01) #5, !dbg !36
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %129, float 1.600000e+01) #5, !dbg !36
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %137, float 1.600000e+01) #5, !dbg !36
  %144 = fadd float %141, 0x3EE4F8B580000000, !dbg !37
  %145 = fadd float %142, 0x3EE4F8B580000000, !dbg !37
  %146 = fadd float %143, 0x3EE4F8B580000000, !dbg !37
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i = icmp eq i32 %147, 0, !dbg !35
  br i1 %.not.i, label %150, label %148, !dbg !35

148:                                              ; preds = %7
  %149 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %144), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

150:                                              ; preds = %7
  %151 = tail call float @llvm.nvvm.rsqrt.approx.f(float %144), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

__nv_rsqrtf.exit:                                 ; preds = %148, %150
  %.0.i = phi float [ %149, %148 ], [ %151, %150 ], !dbg !35
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i12 = icmp eq i32 %155, 0, !dbg !35
  br i1 %.not.i12, label %158, label %156, !dbg !35

156:                                              ; preds = %__nv_rsqrtf.exit
  %157 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %145), !dbg !35
  br label %__nv_rsqrtf.exit14, !dbg !35

158:                                              ; preds = %__nv_rsqrtf.exit
  %159 = tail call float @llvm.nvvm.rsqrt.approx.f(float %145), !dbg !35
  br label %__nv_rsqrtf.exit14, !dbg !35

__nv_rsqrtf.exit14:                               ; preds = %156, %158
  %.0.i13 = phi float [ %157, %156 ], [ %159, %158 ], !dbg !35
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i24 = icmp eq i32 %163, 0, !dbg !35
  br i1 %.not.i24, label %166, label %164, !dbg !35

164:                                              ; preds = %__nv_rsqrtf.exit14
  %165 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %146), !dbg !35
  br label %__nv_rsqrtf.exit26, !dbg !35

166:                                              ; preds = %__nv_rsqrtf.exit14
  %167 = tail call float @llvm.nvvm.rsqrt.approx.f(float %146), !dbg !35
  br label %__nv_rsqrtf.exit26, !dbg !35

__nv_rsqrtf.exit26:                               ; preds = %164, %166
  %.0.i25 = phi float [ %165, %164 ], [ %167, %166 ], !dbg !35
  %168 = or disjoint i32 %9, %14, !dbg !13
  %169 = fmul float %100, %.0.i13, !dbg !38
  %170 = fmul float %101, %.0.i13, !dbg !38
  %171 = fmul float %102, %.0.i13, !dbg !38
  %172 = fmul float %103, %.0.i13, !dbg !38
  %173 = fmul float %104, %.0.i25, !dbg !38
  %174 = fmul float %105, %.0.i25, !dbg !38
  %175 = fmul float %106, %.0.i25, !dbg !38
  %176 = fmul float %107, %.0.i25, !dbg !38
  %177 = fadd float %169, %170, !dbg !39
  %178 = fadd float %171, %177, !dbg !39
  %179 = fadd float %172, %178, !dbg !39
  %180 = fadd float %173, %174, !dbg !39
  %181 = fadd float %175, %180, !dbg !39
  %182 = fadd float %176, %181, !dbg !39
  %183 = bitcast float %179 to i32, !dbg !41
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 2, i32 31), !dbg !41
  %185 = bitcast i32 %184 to float, !dbg !41
  %186 = fadd float %179, %185, !dbg !39
  %187 = bitcast float %186 to i32, !dbg !41
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 1, i32 31), !dbg !41
  %189 = bitcast i32 %188 to float, !dbg !41
  %190 = fadd float %186, %189, !dbg !39
  %191 = bitcast float %182 to i32, !dbg !41
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 2, i32 31), !dbg !41
  %193 = bitcast i32 %192 to float, !dbg !41
  %194 = fadd float %182, %193, !dbg !39
  %195 = bitcast float %194 to i32, !dbg !41
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 1, i32 31), !dbg !41
  %197 = bitcast i32 %196 to float, !dbg !41
  %198 = fadd float %194, %197, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %199 = bitcast float %190 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %199, i1 true) #5, !dbg !42
  %200 = bitcast float %198 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %200, i1 true) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %201 = load float, ptr addrspace(3) %95, align 4, !dbg !42
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %201, float 1.600000e+01) #5, !dbg !42
  %203 = bitcast float %61 to i32, !dbg !43
  %204 = bitcast float %62 to i32, !dbg !43
  %205 = bitcast float %63 to i32, !dbg !43
  %206 = bitcast float %64 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %203, i32 %204, i32 %205, i32 %206, ptr addrspace(1) %26, i1 true) #5, !dbg !43
  %207 = bitcast float %65 to i32, !dbg !43
  %208 = bitcast float %66 to i32, !dbg !43
  %209 = bitcast float %67 to i32, !dbg !43
  %210 = bitcast float %68 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %207, i32 %208, i32 %209, i32 %210, ptr addrspace(1) %28, i1 true) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %211 = sext i32 %168 to i64, !dbg !45
  %212 = getelementptr float, ptr addrspace(1) %1, i64 %211, !dbg !45
  %213 = and i32 %10, 128, !dbg !46
  %214 = icmp eq i32 %213, 0, !dbg !46
  %215 = bitcast float %.0.i to i32, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %215, ptr addrspace(1) %212, i1 %214) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %216 = getelementptr float, ptr addrspace(1) %2, i64 %211, !dbg !48
  %217 = bitcast float %202 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %217, ptr addrspace(1) %216, i1 %214) #5, !dbg !49
  %218 = getelementptr float, ptr addrspace(1) %4, i64 %211, !dbg !50
  %219 = bitcast float %97 to i32, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %219, ptr addrspace(1) %218, i1 %214) #5, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqqre2r7c5ic6nk7cusb7fvguymgf62c5dr4nizcwxiqyjh5yiau.py", directory: "inductor_cache/qq")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_mean_31, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_mean_31, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_convolution_mean_31", linkageName: "triton_per_fused__native_batch_norm_legit_convolution_mean_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 32, column: 42, scope: !7)
!17 = !DILocation(line: 32, column: 39, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 47, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 18, scope: !7)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 37, column: 24, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !27)
!29 = !DILocation(line: 40, column: 19, scope: !7)
!30 = !DILocation(line: 41, column: 19, scope: !7)
!31 = !DILocation(line: 42, column: 20, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !33)
!33 = !DILocation(line: 44, column: 26, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !33)
!35 = !DILocation(line: 49, column: 28, scope: !7)
!36 = !DILocation(line: 46, column: 20, scope: !7)
!37 = !DILocation(line: 48, column: 20, scope: !7)
!38 = !DILocation(line: 51, column: 20, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !40)
!40 = !DILocation(line: 53, column: 26, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !40)
!42 = !DILocation(line: 54, column: 20, scope: !7)
!43 = !DILocation(line: 55, column: 47, scope: !7)
!44 = !DILocation(line: 56, column: 4, scope: !7)
!45 = !DILocation(line: 57, column: 28, scope: !7)
!46 = !DILocation(line: 57, column: 40, scope: !7)
!47 = !DILocation(line: 58, column: 4, scope: !7)
!48 = !DILocation(line: 59, column: 28, scope: !7)
!49 = !DILocation(line: 59, column: 40, scope: !7)
!50 = !DILocation(line: 60, column: 25, scope: !7)
!51 = !DILocation(line: 60, column: 37, scope: !7)
!52 = !DILocation(line: 60, column: 4, scope: !7)
