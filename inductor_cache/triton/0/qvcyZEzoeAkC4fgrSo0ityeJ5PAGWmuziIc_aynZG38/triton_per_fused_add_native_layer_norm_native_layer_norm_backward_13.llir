; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = and i32 %13, 31, !dbg !11
  %15 = lshr i32 %13, 5, !dbg !11
  %16 = shl i32 %13, 2, !dbg !11
  %17 = and i32 %16, 1020, !dbg !11
  %18 = icmp samesign ult i32 %17, 768, !dbg !12
  %19 = srem i32 %12, 17, !dbg !13
  %20 = mul i32 %12, 768, !dbg !14
  %21 = add i32 %20, %17, !dbg !15
  %22 = sext i32 %21 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !16
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !17
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !17
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !17
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !17
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !17
  %29 = mul nsw i32 %19, 768, !dbg !18
  %30 = add nsw i32 %29, %17, !dbg !19
  %31 = sext i32 %30 to i64, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !20
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !21
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !21
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !21
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !21
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !21
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !22
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !23
  %44 = zext nneg i32 %17 to i64, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !24
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !25
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !25
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !25
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !25
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !25
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %44, !dbg !26
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !27
  %53 = getelementptr float, ptr addrspace(1) %5, i64 %44, !dbg !28
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %53, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !29
  %55 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !17
  %56 = insertelement <2 x i32> %55, i32 %42, i64 1, !dbg !17
  %57 = bitcast <2 x i32> %56 to <2 x float>, !dbg !17
  %58 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !21
  %59 = insertelement <2 x i32> %58, i32 %49, i64 1, !dbg !21
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !21
  %61 = fadd <2 x float> %57, %60, !dbg !30
  %62 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !17
  %63 = insertelement <2 x i32> %62, i32 %43, i64 1, !dbg !17
  %64 = bitcast <2 x i32> %63 to <2 x float>, !dbg !17
  %65 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !21
  %66 = insertelement <2 x i32> %65, i32 %50, i64 1, !dbg !21
  %67 = bitcast <2 x i32> %66 to <2 x float>, !dbg !21
  %68 = fadd <2 x float> %64, %67, !dbg !30
  %69 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !17
  %70 = insertelement <2 x i32> %69, i32 %26, i64 1, !dbg !17
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !17
  %72 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !21
  %73 = insertelement <2 x i32> %72, i32 %35, i64 1, !dbg !21
  %74 = bitcast <2 x i32> %73 to <2 x float>, !dbg !21
  %75 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !23
  %76 = insertelement <2 x i32> %75, i32 %41, i64 1, !dbg !23
  %77 = bitcast <2 x i32> %76 to <2 x float>, !dbg !23
  %78 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !25
  %79 = insertelement <2 x i32> %78, i32 %48, i64 1, !dbg !25
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !25
  %81 = fadd <2 x float> %71, %74, !dbg !30
  %82 = fadd <2 x float> %77, %80, !dbg !31
  %83 = fadd <2 x float> %81, %82, !dbg !32
  %shift = shufflevector <2 x float> %61, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !32
  %84 = fadd <2 x float> %61, %shift, !dbg !32
  %85 = extractelement <2 x float> %84, i64 0, !dbg !32
  %shift1 = shufflevector <2 x float> %68, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !32
  %86 = fadd <2 x float> %68, %shift1, !dbg !32
  %87 = extractelement <2 x float> %86, i64 0, !dbg !32
  %88 = extractelement <2 x float> %83, i64 0, !dbg !33
  %89 = extractelement <2 x float> %83, i64 1, !dbg !33
  %90 = fadd float %88, %89, !dbg !33
  %91 = fadd float %85, %90, !dbg !33
  %92 = fadd float %87, %91, !dbg !33
  %93 = select i1 %18, float %92, float 0.000000e+00, !dbg !33
  %94 = bitcast float %93 to i32, !dbg !38
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 16, i32 31), !dbg !38
  %96 = bitcast i32 %95 to float, !dbg !38
  %97 = fadd float %93, %96, !dbg !33
  %98 = bitcast float %97 to i32, !dbg !38
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 8, i32 31), !dbg !38
  %100 = bitcast i32 %99 to float, !dbg !38
  %101 = fadd float %97, %100, !dbg !33
  %102 = bitcast float %101 to i32, !dbg !38
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 4, i32 31), !dbg !38
  %104 = bitcast i32 %103 to float, !dbg !38
  %105 = fadd float %101, %104, !dbg !33
  %106 = bitcast float %105 to i32, !dbg !38
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 2, i32 31), !dbg !38
  %108 = bitcast i32 %107 to float, !dbg !38
  %109 = fadd float %105, %108, !dbg !33
  %110 = bitcast float %109 to i32, !dbg !38
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 1, i32 31), !dbg !38
  %112 = bitcast i32 %111 to float, !dbg !38
  %113 = fadd float %109, %112, !dbg !33
  %114 = icmp eq i32 %14, 0, !dbg !38
  %115 = and i32 %15, 7, !dbg !38
  %116 = zext nneg i32 %115 to i64, !dbg !38
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i64 %116, !dbg !38
  %118 = bitcast float %113 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 %114) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %119 = icmp slt i32 %13, 8, !dbg !38
  %120 = sext i32 %13 to i64, !dbg !38
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i64 %120, !dbg !38
  %122 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %121, i1 %119) #5, !dbg !38
  %123 = bitcast i32 %122 to float, !dbg !38
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 4, i32 31), !dbg !38
  %125 = bitcast i32 %124 to float, !dbg !38
  %126 = fadd float %123, %125, !dbg !33
  %127 = bitcast float %126 to i32, !dbg !38
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 2, i32 31), !dbg !38
  %129 = bitcast i32 %128 to float, !dbg !38
  %130 = fadd float %126, %129, !dbg !33
  %131 = bitcast float %130 to i32, !dbg !38
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 1, i32 31), !dbg !38
  %133 = bitcast i32 %132 to float, !dbg !38
  %134 = fadd float %130, %133, !dbg !33
  %135 = and i32 %13, 7, !dbg !38
  %136 = icmp eq i32 %135, 0, !dbg !38
  %137 = and i1 %119, %136, !dbg !38
  %138 = bitcast float %134 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %138, i1 %137) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %139 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !38
  %140 = fadd float %139, 0.000000e+00, !dbg !39
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float 7.680000e+02) #5, !dbg !43
  %142 = fsub float %88, %141, !dbg !44
  %143 = fsub float %89, %141, !dbg !44
  %144 = fsub float %85, %141, !dbg !44
  %145 = fsub float %87, %141, !dbg !44
  %146 = fmul float %142, %142, !dbg !45
  %147 = fmul float %143, %143, !dbg !45
  %148 = fmul float %144, %144, !dbg !45
  %149 = fmul float %145, %145, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %150 = fadd float %146, %147, !dbg !48
  %151 = fadd float %148, %150, !dbg !48
  %152 = fadd float %149, %151, !dbg !48
  %153 = select i1 %18, float %152, float 0.000000e+00, !dbg !48
  %154 = bitcast float %153 to i32, !dbg !46
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 16, i32 31), !dbg !46
  %156 = bitcast i32 %155 to float, !dbg !46
  %157 = fadd float %153, %156, !dbg !48
  %158 = bitcast float %157 to i32, !dbg !46
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 8, i32 31), !dbg !46
  %160 = bitcast i32 %159 to float, !dbg !46
  %161 = fadd float %157, %160, !dbg !48
  %162 = bitcast float %161 to i32, !dbg !46
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 4, i32 31), !dbg !46
  %164 = bitcast i32 %163 to float, !dbg !46
  %165 = fadd float %161, %164, !dbg !48
  %166 = bitcast float %165 to i32, !dbg !46
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 2, i32 31), !dbg !46
  %168 = bitcast i32 %167 to float, !dbg !46
  %169 = fadd float %165, %168, !dbg !48
  %170 = bitcast float %169 to i32, !dbg !46
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 1, i32 31), !dbg !46
  %172 = bitcast i32 %171 to float, !dbg !46
  %173 = fadd float %169, %172, !dbg !48
  %174 = bitcast float %173 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %174, i1 %114) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %175 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %121, i1 %119) #5, !dbg !46
  %176 = bitcast i32 %175 to float, !dbg !46
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 4, i32 31), !dbg !46
  %178 = bitcast i32 %177 to float, !dbg !46
  %179 = fadd float %176, %178, !dbg !48
  %180 = bitcast float %179 to i32, !dbg !46
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 2, i32 31), !dbg !46
  %182 = bitcast i32 %181 to float, !dbg !46
  %183 = fadd float %179, %182, !dbg !48
  %184 = bitcast float %183 to i32, !dbg !46
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 1, i32 31), !dbg !46
  %186 = bitcast i32 %185 to float, !dbg !46
  %187 = fadd float %183, %186, !dbg !48
  %188 = bitcast float %187 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %188, i1 %137) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %189 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !46
  %190 = fadd float %189, 0.000000e+00, !dbg !49
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %190, float 7.680000e+02) #5, !dbg !51
  %192 = fadd float %191, 0x3EE4F8B580000000, !dbg !52
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i = icmp eq i32 %193, 0, !dbg !53
  br i1 %.not.i, label %196, label %194, !dbg !53

194:                                              ; preds = %11
  %195 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %192), !dbg !53
  br label %__nv_rsqrtf.exit, !dbg !53

196:                                              ; preds = %11
  %197 = tail call float @llvm.nvvm.rsqrt.approx.f(float %192), !dbg !53
  br label %__nv_rsqrtf.exit, !dbg !53

__nv_rsqrtf.exit:                                 ; preds = %194, %196
  %.0.i = phi float [ %195, %194 ], [ %197, %196 ], !dbg !53
  %198 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !29
  %199 = bitcast i32 %198 to float, !dbg !29
  %200 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !29
  %201 = bitcast i32 %200 to float, !dbg !29
  %202 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !29
  %203 = bitcast i32 %202 to float, !dbg !29
  %204 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !29
  %205 = bitcast i32 %204 to float, !dbg !29
  %206 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !27
  %207 = bitcast i32 %206 to float, !dbg !27
  %208 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !27
  %209 = bitcast i32 %208 to float, !dbg !27
  %210 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !27
  %211 = bitcast i32 %210 to float, !dbg !27
  %212 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !27
  %213 = bitcast i32 %212 to float, !dbg !27
  %214 = fmul float %142, %.0.i, !dbg !54
  %215 = fmul float %143, %.0.i, !dbg !54
  %216 = fmul float %144, %.0.i, !dbg !54
  %217 = fmul float %145, %.0.i, !dbg !54
  %218 = fmul float %214, %213, !dbg !55
  %219 = fmul float %215, %211, !dbg !55
  %220 = fmul float %216, %209, !dbg !55
  %221 = fmul float %217, %207, !dbg !55
  %222 = fadd float %218, %205, !dbg !56
  %223 = fadd float %219, %203, !dbg !56
  %224 = fadd float %220, %201, !dbg !56
  %225 = fadd float %221, %199, !dbg !56
  %226 = fmul float %.0.i, 0x3F55555560000000, !dbg !57
  %227 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !58
  %228 = bitcast float %214 to i32, !dbg !59
  %229 = bitcast float %215 to i32, !dbg !59
  %230 = bitcast float %216 to i32, !dbg !59
  %231 = bitcast float %217 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %228, i32 %229, i32 %230, i32 %231, ptr addrspace(1) %227, i1 %18) #5, !dbg !59
  %232 = getelementptr float, ptr addrspace(1) %7, i64 %22, !dbg !60
  %233 = bitcast float %222 to i32, !dbg !61
  %234 = bitcast float %223 to i32, !dbg !61
  %235 = bitcast float %224 to i32, !dbg !61
  %236 = bitcast float %225 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %233, i32 %234, i32 %235, i32 %236, ptr addrspace(1) %232, i1 %18) #5, !dbg !61
  %237 = sext i32 %12 to i64, !dbg !62
  %238 = getelementptr float, ptr addrspace(1) %8, i64 %237, !dbg !62
  %urem = and i32 %13, 255, !dbg !63
  %239 = icmp eq i32 %urem, 0, !dbg !63
  %240 = bitcast float %226 to i32, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %240, ptr addrspace(1) %238, i1 %239) #5, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgkyjmi2dki36atb72mm5qpj7rcwyhtfpgzzmbu2a73zlawbvh7l.py", directory: "inductor_cache/gk")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_13, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_13, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_13", linkageName: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 29, column: 21, scope: !7)
!13 = !DILocation(line: 32, column: 19, scope: !7)
!14 = !DILocation(line: 33, column: 39, scope: !7)
!15 = !DILocation(line: 33, column: 35, scope: !7)
!16 = !DILocation(line: 33, column: 30, scope: !7)
!17 = !DILocation(line: 33, column: 44, scope: !7)
!18 = !DILocation(line: 34, column: 39, scope: !7)
!19 = !DILocation(line: 34, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 44, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 35, column: 44, scope: !7)
!24 = !DILocation(line: 36, column: 30, scope: !7)
!25 = !DILocation(line: 36, column: 35, scope: !7)
!26 = !DILocation(line: 37, column: 31, scope: !7)
!27 = !DILocation(line: 37, column: 36, scope: !7)
!28 = !DILocation(line: 38, column: 31, scope: !7)
!29 = !DILocation(line: 38, column: 36, scope: !7)
!30 = !DILocation(line: 39, column: 18, scope: !7)
!31 = !DILocation(line: 40, column: 18, scope: !7)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !37)
!34 = distinct !DILexicalBlockFile(scope: !36, file: !35, discriminator: 0)
!35 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!36 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!37 = !DILocation(line: 46, column: 59, scope: !7)
!38 = !DILocation(line: 267, column: 36, scope: !36, inlinedAt: !37)
!39 = !DILocation(line: 73, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 46, column: 45, scope: !7)
!43 = !DILocation(line: 49, column: 20, scope: !7)
!44 = !DILocation(line: 50, column: 19, scope: !7)
!45 = !DILocation(line: 51, column: 20, scope: !7)
!46 = !DILocation(line: 267, column: 36, scope: !36, inlinedAt: !47)
!47 = !DILocation(line: 54, column: 59, scope: !7)
!48 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !47)
!49 = !DILocation(line: 73, column: 15, scope: !40, inlinedAt: !50)
!50 = !DILocation(line: 54, column: 45, scope: !7)
!51 = !DILocation(line: 57, column: 20, scope: !7)
!52 = !DILocation(line: 59, column: 20, scope: !7)
!53 = !DILocation(line: 60, column: 28, scope: !7)
!54 = !DILocation(line: 61, column: 20, scope: !7)
!55 = !DILocation(line: 62, column: 20, scope: !7)
!56 = !DILocation(line: 63, column: 20, scope: !7)
!57 = !DILocation(line: 65, column: 20, scope: !7)
!58 = !DILocation(line: 66, column: 25, scope: !7)
!59 = !DILocation(line: 66, column: 46, scope: !7)
!60 = !DILocation(line: 67, column: 25, scope: !7)
!61 = !DILocation(line: 67, column: 46, scope: !7)
!62 = !DILocation(line: 68, column: 25, scope: !7)
!63 = !DILocation(line: 68, column: 37, scope: !7)
!64 = !DILocation(line: 68, column: 4, scope: !7)
