; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 7, !dbg !12
  %11 = or disjoint i32 %10, 8, !dbg !12
  %12 = or disjoint i32 %10, 16, !dbg !12
  %13 = or disjoint i32 %10, 24, !dbg !12
  %14 = or disjoint i32 %10, 32, !dbg !12
  %15 = or disjoint i32 %10, 40, !dbg !12
  %16 = or disjoint i32 %10, 48, !dbg !12
  %17 = or disjoint i32 %10, 56, !dbg !12
  %18 = shl i32 %8, 2, !dbg !12
  %19 = and i32 %18, 60, !dbg !12
  %20 = or disjoint i32 %7, %10, !dbg !13
  %21 = or disjoint i32 %7, %11, !dbg !13
  %22 = or disjoint i32 %7, %12, !dbg !13
  %23 = or disjoint i32 %7, %13, !dbg !13
  %24 = or disjoint i32 %7, %14, !dbg !13
  %25 = or disjoint i32 %7, %15, !dbg !13
  %26 = or disjoint i32 %7, %16, !dbg !13
  %27 = or disjoint i32 %7, %17, !dbg !13
  %28 = or disjoint i32 %7, %19, !dbg !13
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %30 = shl i32 %29, 4, !dbg !15
  %31 = and i32 %8, 15, !dbg !16
  %32 = or disjoint i32 %30, %31, !dbg !17
  %33 = or disjoint i32 %30, %10, !dbg !17
  %34 = or disjoint i32 %30, %11, !dbg !17
  %35 = icmp slt i32 %32, 9, !dbg !18
  %36 = icmp slt i32 %33, 9, !dbg !18
  %37 = icmp slt i32 %34, 9, !dbg !18
  %.frozen = freeze i32 %28, !dbg !19
  %38 = sdiv i32 %.frozen, 128, !dbg !19
  %39 = mul i32 %38, 128, !dbg !20
  %.decomposed = sub i32 %.frozen, %39, !dbg !20
  %40 = mul i32 %20, 9, !dbg !21
  %41 = mul i32 %21, 9, !dbg !21
  %42 = mul i32 %22, 9, !dbg !21
  %43 = mul i32 %23, 9, !dbg !21
  %44 = mul i32 %24, 9, !dbg !21
  %45 = mul i32 %25, 9, !dbg !21
  %46 = mul i32 %26, 9, !dbg !21
  %47 = mul i32 %27, 9, !dbg !21
  %48 = add i32 %32, %40, !dbg !22
  %49 = add i32 %32, %41, !dbg !22
  %50 = add i32 %32, %42, !dbg !22
  %51 = add i32 %32, %43, !dbg !22
  %52 = add i32 %32, %44, !dbg !22
  %53 = add i32 %32, %45, !dbg !22
  %54 = add i32 %32, %46, !dbg !22
  %55 = add i32 %32, %47, !dbg !22
  %56 = sext i32 %48 to i64, !dbg !23
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !23
  %58 = sext i32 %49 to i64, !dbg !23
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !23
  %60 = sext i32 %50 to i64, !dbg !23
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !23
  %62 = sext i32 %51 to i64, !dbg !23
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !23
  %64 = sext i32 %52 to i64, !dbg !23
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !23
  %66 = sext i32 %53 to i64, !dbg !23
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !23
  %68 = sext i32 %54 to i64, !dbg !23
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !23
  %70 = sext i32 %55 to i64, !dbg !23
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !23
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %35) #2, !dbg !24
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %35) #2, !dbg !24
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %35) #2, !dbg !24
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %35) #2, !dbg !24
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %35) #2, !dbg !24
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %35) #2, !dbg !24
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %35) #2, !dbg !24
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %35) #2, !dbg !24
  %80 = shl i32 %33, 7, !dbg !25
  %81 = shl i32 %34, 7, !dbg !25
  %82 = mul i32 %38, 1152, !dbg !26
  %83 = add i32 %82, %.decomposed, !dbg !27
  %84 = add i32 %83, %80, !dbg !28
  %85 = add i32 %83, %81, !dbg !28
  %86 = sext i32 %84 to i64, !dbg !29
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !29
  %88 = sext i32 %85 to i64, !dbg !29
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !29
  %90 = shl i32 %8, 6, !dbg !30
  %91 = and i32 %90, 960, !dbg !30
  %92 = or disjoint i32 %91, %10, !dbg !30
  %93 = and i32 %18, 508, !dbg !30
  %94 = lshr exact i32 %91, 2, !dbg !30
  %95 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %94, !dbg !30
  %96 = getelementptr float, ptr addrspace(3) %95, i32 %92, !dbg !30
  %97 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #2, !dbg !30
  %98 = or disjoint i32 %92, 8, !dbg !30
  %99 = getelementptr float, ptr addrspace(3) %95, i32 %98, !dbg !30
  %100 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %100, i1 true) #2, !dbg !30
  %101 = or disjoint i32 %92, 16, !dbg !30
  %102 = getelementptr float, ptr addrspace(3) %95, i32 %101, !dbg !30
  %103 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #2, !dbg !30
  %104 = or disjoint i32 %92, 24, !dbg !30
  %105 = getelementptr float, ptr addrspace(3) %95, i32 %104, !dbg !30
  %106 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #2, !dbg !30
  %107 = or disjoint i32 %92, 32, !dbg !30
  %108 = getelementptr float, ptr addrspace(3) %95, i32 %107, !dbg !30
  %109 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !30
  %110 = or disjoint i32 %92, 40, !dbg !30
  %111 = getelementptr float, ptr addrspace(3) %95, i32 %110, !dbg !30
  %112 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 true) #2, !dbg !30
  %113 = or disjoint i32 %92, 48, !dbg !30
  %114 = getelementptr float, ptr addrspace(3) %95, i32 %113, !dbg !30
  %115 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #2, !dbg !30
  %116 = or disjoint i32 %92, 56, !dbg !30
  %117 = getelementptr float, ptr addrspace(3) %95, i32 %116, !dbg !30
  %118 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %119 = lshr i32 %18, 4, !dbg !30
  %120 = and i32 %119, 28, !dbg !30
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %120, !dbg !30
  %122 = getelementptr inbounds float, ptr addrspace(3) %121, i32 %93, !dbg !30
  %123 = or disjoint i32 %93, 512, !dbg !30
  %124 = lshr i32 %123, 4, !dbg !30
  %125 = and i32 %124, 60, !dbg !30
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %125, !dbg !30
  %127 = getelementptr inbounds float, ptr addrspace(3) %126, i32 %123, !dbg !30
  %128 = load <4 x i32>, ptr addrspace(3) %127, align 16, !dbg !30
  %.extract = load i32, ptr addrspace(3) %122, align 16, !dbg !30
  %129 = getelementptr inbounds i8, ptr addrspace(3) %122, i32 4, !dbg !30
  %.extract9 = load i32, ptr addrspace(3) %129, align 4, !dbg !30
  %130 = getelementptr inbounds i8, ptr addrspace(3) %122, i32 8, !dbg !30
  %.extract10 = load i32, ptr addrspace(3) %130, align 8, !dbg !30
  %131 = getelementptr inbounds i8, ptr addrspace(3) %122, i32 12, !dbg !30
  %.extract11 = load i32, ptr addrspace(3) %131, align 4, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract9, i32 %.extract10, i32 %.extract11, ptr addrspace(1) %87, i1 %36) #2, !dbg !30
  %.extract12 = extractelement <4 x i32> %128, i64 0, !dbg !30
  %.extract13 = extractelement <4 x i32> %128, i64 1, !dbg !30
  %.extract14 = extractelement <4 x i32> %128, i64 2, !dbg !30
  %.extract15 = extractelement <4 x i32> %128, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract12, i32 %.extract13, i32 %.extract14, i32 %.extract15, ptr addrspace(1) %89, i1 %37) #2, !dbg !30
  %132 = getelementptr float, ptr addrspace(1) %2, i64 %86, !dbg !31
  %133 = getelementptr float, ptr addrspace(1) %2, i64 %88, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract9, i32 %.extract10, i32 %.extract11, ptr addrspace(1) %132, i1 %36) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract12, i32 %.extract13, i32 %.extract14, i32 %.extract15, ptr addrspace(1) %133, i1 %37) #2, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caxyqvnfriuh4ogv6lt52gewlccoi5cwfwd77y5543x2ddparfdq.py", directory: "inductor_cache/ax")
!4 = !{ptr @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_8", linkageName: "triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 37, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 42, scope: !7)
!25 = !DILocation(line: 33, column: 34, scope: !7)
!26 = !DILocation(line: 33, column: 44, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 39, scope: !7)
!29 = !DILocation(line: 33, column: 25, scope: !7)
!30 = !DILocation(line: 33, column: 55, scope: !7)
!31 = !DILocation(line: 34, column: 25, scope: !7)
!32 = !DILocation(line: 34, column: 55, scope: !7)
!33 = !DILocation(line: 34, column: 4, scope: !7)
