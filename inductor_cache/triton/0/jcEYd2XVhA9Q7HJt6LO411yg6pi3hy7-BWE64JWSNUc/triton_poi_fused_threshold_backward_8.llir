; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_threshold_backward_8(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 3, !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = or disjoint i32 %9, 16, !dbg !12
  %11 = shl i32 %7, 3, !dbg !12
  %12 = and i32 %11, 24, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %6, %10, !dbg !13
  %15 = or disjoint i32 %6, %12, !dbg !13
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %17 = shl i32 %16, 5, !dbg !15
  %18 = shl i32 %7, 2, !dbg !16
  %19 = and i32 %18, 28, !dbg !16
  %20 = lshr i32 %7, 2, !dbg !16
  %21 = and i32 %20, 31, !dbg !16
  %22 = or disjoint i32 %17, %19, !dbg !17
  %23 = or disjoint i32 %17, %21, !dbg !17
  %.frozen = freeze i32 %15, !dbg !18
  %24 = sdiv i32 %.frozen, 2048, !dbg !18
  %25 = mul i32 %24, 2048, !dbg !19
  %.decomposed = sub i32 %.frozen, %25, !dbg !19
  %26 = shl i32 %13, 12, !dbg !20
  %27 = shl i32 %14, 12, !dbg !20
  %28 = add i32 %22, %26, !dbg !21
  %29 = add i32 %22, %27, !dbg !21
  %30 = sext i32 %28 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !22
  %32 = sext i32 %29 to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !22
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #2, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !23
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #2, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !23
  %44 = insertelement <8 x i32> poison, i32 %43, i64 0, !dbg !23
  %45 = insertelement <8 x i32> %44, i32 %42, i64 1, !dbg !23
  %46 = insertelement <8 x i32> %45, i32 %41, i64 2, !dbg !23
  %47 = insertelement <8 x i32> %46, i32 %40, i64 3, !dbg !23
  %48 = insertelement <8 x i32> %47, i32 %38, i64 4, !dbg !23
  %49 = insertelement <8 x i32> %48, i32 %37, i64 5, !dbg !23
  %50 = insertelement <8 x i32> %49, i32 %36, i64 6, !dbg !23
  %51 = insertelement <8 x i32> %50, i32 %35, i64 7, !dbg !23
  %52 = bitcast <8 x i32> %51 to <8 x float>, !dbg !23
  %53 = fcmp ole <8 x float> %52, zeroinitializer, !dbg !24
  %54 = shl i32 %23, 11, !dbg !25
  %55 = add i32 %54, %.decomposed, !dbg !26
  %56 = shl i32 %24, 23, !dbg !27
  %57 = add i32 %55, %56, !dbg !28
  %58 = sext i32 %57 to i64, !dbg !29
  %59 = getelementptr i1, ptr addrspace(1) %1, i64 %58, !dbg !29
  %60 = extractelement <8 x i1> %53, i64 7, !dbg !30
  %61 = zext i1 %60 to i8, !dbg !30
  %62 = extractelement <8 x i1> %53, i64 6, !dbg !30
  %63 = zext i1 %62 to i8, !dbg !30
  %64 = extractelement <8 x i1> %53, i64 5, !dbg !30
  %65 = zext i1 %64 to i8, !dbg !30
  %66 = extractelement <8 x i1> %53, i64 4, !dbg !30
  %67 = zext i1 %66 to i8, !dbg !30
  %68 = extractelement <8 x i1> %53, i64 3, !dbg !30
  %69 = zext i1 %68 to i8, !dbg !30
  %70 = extractelement <8 x i1> %53, i64 2, !dbg !30
  %71 = zext i1 %70 to i8, !dbg !30
  %72 = extractelement <8 x i1> %53, i64 1, !dbg !30
  %73 = zext i1 %72 to i8, !dbg !30
  %74 = extractelement <8 x i1> %53, i64 0, !dbg !30
  %75 = zext i1 %74 to i8, !dbg !30
  %76 = shl i32 %7, 7, !dbg !30
  %77 = and i32 %76, 896, !dbg !30
  %78 = or disjoint i32 %77, %9, !dbg !30
  %79 = and i32 %11, 1016, !dbg !30
  %80 = lshr exact i32 %77, 2, !dbg !30
  %81 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %80, !dbg !30
  %82 = getelementptr i8, ptr addrspace(3) %81, i32 %78, !dbg !30
  %83 = insertelement <1 x i8> poison, i8 %61, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %82, <1 x i8> %83, i1 true) #2, !dbg !30
  %84 = or disjoint i32 %78, 32, !dbg !30
  %85 = lshr i32 %84, 2, !dbg !30
  %86 = and i32 %85, 232, !dbg !30
  %87 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %86, !dbg !30
  %88 = getelementptr i8, ptr addrspace(3) %87, i32 %84, !dbg !30
  %89 = insertelement <1 x i8> poison, i8 %63, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %88, <1 x i8> %89, i1 true) #2, !dbg !30
  %90 = or disjoint i32 %78, 64, !dbg !30
  %91 = lshr i32 %90, 2, !dbg !30
  %92 = and i32 %91, 240, !dbg !30
  %93 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %92, !dbg !30
  %94 = getelementptr i8, ptr addrspace(3) %93, i32 %90, !dbg !30
  %95 = insertelement <1 x i8> poison, i8 %65, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %94, <1 x i8> %95, i1 true) #2, !dbg !30
  %96 = or disjoint i32 %78, 96, !dbg !30
  %97 = lshr i32 %96, 2, !dbg !30
  %98 = and i32 %97, 248, !dbg !30
  %99 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %98, !dbg !30
  %100 = getelementptr i8, ptr addrspace(3) %99, i32 %96, !dbg !30
  %101 = insertelement <1 x i8> poison, i8 %67, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %100, <1 x i8> %101, i1 true) #2, !dbg !30
  %102 = or disjoint i32 %78, 16, !dbg !30
  %103 = getelementptr i8, ptr addrspace(3) %81, i32 %102, !dbg !30
  %104 = insertelement <1 x i8> poison, i8 %69, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %103, <1 x i8> %104, i1 true) #2, !dbg !30
  %105 = or disjoint i32 %78, 48, !dbg !30
  %106 = lshr i32 %105, 2, !dbg !30
  %107 = and i32 %106, 232, !dbg !30
  %108 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %107, !dbg !30
  %109 = getelementptr i8, ptr addrspace(3) %108, i32 %105, !dbg !30
  %110 = insertelement <1 x i8> poison, i8 %71, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %109, <1 x i8> %110, i1 true) #2, !dbg !30
  %111 = or disjoint i32 %78, 80, !dbg !30
  %112 = lshr i32 %111, 2, !dbg !30
  %113 = and i32 %112, 240, !dbg !30
  %114 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %113, !dbg !30
  %115 = getelementptr i8, ptr addrspace(3) %114, i32 %111, !dbg !30
  %116 = insertelement <1 x i8> poison, i8 %73, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %115, <1 x i8> %116, i1 true) #2, !dbg !30
  %117 = or disjoint i32 %78, 112, !dbg !30
  %118 = lshr i32 %117, 2, !dbg !30
  %119 = and i32 %118, 248, !dbg !30
  %120 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %119, !dbg !30
  %121 = getelementptr i8, ptr addrspace(3) %120, i32 %117, !dbg !30
  %122 = insertelement <1 x i8> poison, i8 %75, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %121, <1 x i8> %122, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %123 = lshr exact i32 %11, 2, !dbg !30
  %124 = and i32 %123, 248, !dbg !30
  %125 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %124, !dbg !30
  %126 = getelementptr inbounds i8, ptr addrspace(3) %125, i32 %79, !dbg !30
  %127 = load <2 x i32>, ptr addrspace(3) %126, align 8, !dbg !30
  %128 = bitcast <2 x i32> %127 to <64 x i1>, !dbg !30
  %129 = extractelement <64 x i1> %128, i64 24, !dbg !30
  %130 = extractelement <64 x i1> %128, i64 56, !dbg !30
  %131 = bitcast <2 x i32> %127 to <8 x i8>, !dbg !30
  %132 = extractelement <8 x i8> %131, i64 0, !dbg !30
  %133 = and i8 %132, 1, !dbg !30
  %134 = shufflevector <8 x i8> %131, <8 x i8> poison, <2 x i32> <i32 1, i32 2>, !dbg !30
  %135 = and <2 x i8> %134, splat (i8 1), !dbg !30
  %136 = zext i1 %129 to i8, !dbg !30
  %137 = extractelement <8 x i8> %131, i64 4, !dbg !30
  %138 = and i8 %137, 1, !dbg !30
  %139 = shufflevector <8 x i8> %131, <8 x i8> poison, <2 x i32> <i32 5, i32 6>, !dbg !30
  %140 = and <2 x i8> %139, splat (i8 1), !dbg !30
  %141 = zext i1 %130 to i8, !dbg !30
  %142 = insertelement <4 x i8> poison, i8 %133, i64 0, !dbg !30
  %143 = shufflevector <2 x i8> %135, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !30
  %144 = shufflevector <4 x i8> %142, <4 x i8> %143, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !30
  %145 = insertelement <4 x i8> %144, i8 %136, i64 3, !dbg !30
  %146 = bitcast <4 x i8> %145 to i32, !dbg !30
  %147 = insertelement <4 x i8> poison, i8 %138, i64 0, !dbg !30
  %148 = shufflevector <2 x i8> %140, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !30
  %149 = shufflevector <4 x i8> %147, <4 x i8> %148, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !30
  %150 = insertelement <4 x i8> %149, i8 %141, i64 3, !dbg !30
  %151 = bitcast <4 x i8> %150 to i32, !dbg !30
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %146, i32 %151, ptr addrspace(1) %59, i1 true) #2, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cl377j2hr3ofbp36j7dm66rgquz7nbz2xrurf7gf5ue3s577kpbk.py", directory: "inductor_cache/l3")
!4 = !{ptr @triton_poi_fused_threshold_backward_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_threshold_backward_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_threshold_backward_8", linkageName: "triton_poi_fused_threshold_backward_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 45, scope: !7)
!24 = !DILocation(line: 34, column: 19, scope: !7)
!25 = !DILocation(line: 35, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 48, scope: !7)
!28 = !DILocation(line: 35, column: 40, scope: !7)
!29 = !DILocation(line: 35, column: 25, scope: !7)
!30 = !DILocation(line: 35, column: 59, scope: !7)
!31 = !DILocation(line: 35, column: 4, scope: !7)
