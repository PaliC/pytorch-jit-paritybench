; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 256, !dbg !14
  %.frozen = freeze i32 %14, !dbg !15
  %16 = sdiv i32 %.frozen, 16, !dbg !15
  %17 = mul i32 %16, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = srem i32 %16, 4, !dbg !17
  %19 = sext i32 %18 to i64, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !18
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 %15) #3, !dbg !19
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 %15) #3, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !20
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %15) #3, !dbg !21
  %25 = bitcast i32 %24 to float, !dbg !21
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %15) #3, !dbg !21
  %27 = bitcast i32 %26 to float, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %15) #3, !dbg !23
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %15) #3, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %4, i64 %19, !dbg !24
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %15) #3, !dbg !25
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %15) #3, !dbg !25
  %34 = icmp slt i32 %.decomposed, 4, !dbg !26
  %35 = shl nsw i32 %16, 2, !dbg !27
  %36 = add nsw i32 %35, %.decomposed, !dbg !28
  %37 = sext i32 %36 to i64, !dbg !29
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !29
  %39 = and i1 %15, %34, !dbg !30
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %38, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !31
  %41 = and i32 %.decomposed, -4, !dbg !32
  %42 = icmp eq i32 %41, 4, !dbg !32
  %43 = add nsw i32 %35, 64, !dbg !33
  %44 = add nsw i32 %.decomposed, -4, !dbg !34
  %45 = add nsw i32 %44, %43, !dbg !35
  %46 = sext i32 %45 to i64, !dbg !36
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !36
  %48 = and i1 %15, %42, !dbg !37
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %47, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #3, !dbg !38
  %50 = icmp eq i32 %41, 8, !dbg !39
  %51 = add nsw i32 %.decomposed, -8, !dbg !40
  %52 = add nsw i32 %35, %51, !dbg !41
  %53 = sext i32 %52 to i64, !dbg !42
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !42
  %55 = and i1 %15, %50, !dbg !43
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %54, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #3, !dbg !44
  %57 = add nsw i32 %43, %51, !dbg !45
  %58 = sext i32 %57 to i64, !dbg !46
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !46
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %59, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #3, !dbg !47
  %61 = icmp sgt i32 %.decomposed, 11, !dbg !48
  %62 = add nsw i32 %.decomposed, -12, !dbg !49
  %63 = add nsw i32 %35, %62, !dbg !50
  %64 = sext i32 %63 to i64, !dbg !51
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !51
  %66 = and i1 %15, %61, !dbg !52
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %65, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #3, !dbg !53
  %68 = add nsw i32 %43, %62, !dbg !54
  %69 = sext i32 %68 to i64, !dbg !55
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !55
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %70, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #3, !dbg !56
  %72 = fadd float %25, 0x3EE4F8B580000000, !dbg !57
  %73 = fadd float %27, 0x3EE4F8B580000000, !dbg !57
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i = icmp eq i32 %74, 0, !dbg !58
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i = icmp eq i32 %75, 0, !dbg !58
  br i1 %.not.i, label %81, label %76, !dbg !58

76:                                               ; preds = %8
  br i1 %.not1.i, label %79, label %77, !dbg !58

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

81:                                               ; preds = %8
  br i1 %.not1.i, label %84, label %82, !dbg !58

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

__nv_sqrtf.exit:                                  ; preds = %77, %79, %82, %84
  %.0.i = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !58
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i1 = icmp eq i32 %86, 0, !dbg !58
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i4 = icmp eq i32 %87, 0, !dbg !58
  br i1 %.not.i1, label %93, label %88, !dbg !58

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %91, label %89, !dbg !58

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #3, !dbg !58
  br label %__nv_sqrtf.exit5, !dbg !58

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #3, !dbg !58
  br label %__nv_sqrtf.exit5, !dbg !58

93:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %96, label %94, !dbg !58

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #3, !dbg !58
  br label %__nv_sqrtf.exit5, !dbg !58

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #3, !dbg !58
  br label %__nv_sqrtf.exit5, !dbg !58

__nv_sqrtf.exit5:                                 ; preds = %89, %91, %94, %96
  %.0.i3 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !58
  %98 = extractvalue { i32, i32 } %40, 1, !dbg !31
  %99 = bitcast i32 %98 to float, !dbg !31
  %100 = extractvalue { i32, i32 } %49, 1, !dbg !38
  %101 = bitcast i32 %100 to float, !dbg !38
  %102 = extractvalue { i32, i32 } %56, 1, !dbg !44
  %103 = bitcast i32 %102 to float, !dbg !44
  %104 = extractvalue { i32, i32 } %60, 1, !dbg !47
  %105 = bitcast i32 %104 to float, !dbg !47
  %106 = fsub float %103, %105, !dbg !59
  %107 = extractvalue { i32, i32 } %67, 1, !dbg !53
  %108 = bitcast i32 %107 to float, !dbg !53
  %109 = extractvalue { i32, i32 } %71, 1, !dbg !56
  %110 = bitcast i32 %109 to float, !dbg !56
  %111 = fmul float %108, %110, !dbg !60
  %112 = select i1 %61, float %111, float 0.000000e+00, !dbg !61
  %113 = select i1 %50, float %106, float %112, !dbg !62
  %114 = select i1 %42, float %101, float %113, !dbg !63
  %115 = select i1 %34, float %99, float %114, !dbg !64
  %116 = bitcast i32 %22 to float, !dbg !19
  %117 = fsub float %115, %116, !dbg !65
  %118 = extractvalue { i32, i32 } %40, 0, !dbg !31
  %119 = bitcast i32 %118 to float, !dbg !31
  %120 = extractvalue { i32, i32 } %49, 0, !dbg !38
  %121 = bitcast i32 %120 to float, !dbg !38
  %122 = extractvalue { i32, i32 } %56, 0, !dbg !44
  %123 = bitcast i32 %122 to float, !dbg !44
  %124 = extractvalue { i32, i32 } %60, 0, !dbg !47
  %125 = bitcast i32 %124 to float, !dbg !47
  %126 = fsub float %123, %125, !dbg !59
  %127 = extractvalue { i32, i32 } %67, 0, !dbg !53
  %128 = bitcast i32 %127 to float, !dbg !53
  %129 = extractvalue { i32, i32 } %71, 0, !dbg !56
  %130 = bitcast i32 %129 to float, !dbg !56
  %131 = fmul float %128, %130, !dbg !60
  %132 = select i1 %61, float %131, float 0.000000e+00, !dbg !61
  %133 = select i1 %50, float %126, float %132, !dbg !62
  %134 = select i1 %42, float %121, float %133, !dbg !63
  %135 = select i1 %34, float %119, float %134, !dbg !64
  %136 = bitcast i32 %21 to float, !dbg !19
  %137 = fsub float %135, %136, !dbg !65
  %138 = bitcast i32 %33 to float, !dbg !25
  %139 = bitcast i32 %32 to float, !dbg !25
  %140 = bitcast i32 %30 to float, !dbg !23
  %141 = bitcast i32 %29 to float, !dbg !23
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !66
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !66
  %144 = fmul float %137, %142, !dbg !67
  %145 = fmul float %117, %143, !dbg !67
  %146 = fmul float %144, %141, !dbg !68
  %147 = fmul float %145, %140, !dbg !68
  %148 = fadd float %146, %139, !dbg !69
  %149 = fadd float %147, %138, !dbg !69
  %150 = sext i32 %14 to i64, !dbg !70
  %151 = getelementptr float, ptr addrspace(1) %5, i64 %150, !dbg !70
  %152 = bitcast float %135 to i32, !dbg !71
  %153 = bitcast float %115 to i32, !dbg !71
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %152, i32 %153, ptr addrspace(1) %151, i1 %15) #3, !dbg !71
  %154 = getelementptr float, ptr addrspace(1) %6, i64 %150, !dbg !72
  %155 = bitcast float %148 to i32, !dbg !73
  %156 = bitcast float %149 to i32, !dbg !73
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %155, i32 %156, ptr addrspace(1) %154, i1 %15) #3, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceu2fvanqd2jsosquhpgmqliu6exybee7k2pu36ruufkgwbilibi.py", directory: "inductor_cache/eu")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_0", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 27, scope: !7)
!18 = !DILocation(line: 28, column: 31, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 31, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 32, scope: !7)
!28 = !DILocation(line: 37, column: 38, scope: !7)
!29 = !DILocation(line: 37, column: 30, scope: !7)
!30 = !DILocation(line: 37, column: 51, scope: !7)
!31 = !DILocation(line: 37, column: 44, scope: !7)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 42, column: 36, scope: !7)
!34 = !DILocation(line: 42, column: 51, scope: !7)
!35 = !DILocation(line: 42, column: 44, scope: !7)
!36 = !DILocation(line: 42, column: 31, scope: !7)
!37 = !DILocation(line: 42, column: 64, scope: !7)
!38 = !DILocation(line: 42, column: 57, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 46, scope: !7)
!41 = !DILocation(line: 47, column: 39, scope: !7)
!42 = !DILocation(line: 47, column: 31, scope: !7)
!43 = !DILocation(line: 47, column: 60, scope: !7)
!44 = !DILocation(line: 47, column: 52, scope: !7)
!45 = !DILocation(line: 48, column: 44, scope: !7)
!46 = !DILocation(line: 48, column: 31, scope: !7)
!47 = !DILocation(line: 48, column: 57, scope: !7)
!48 = !DILocation(line: 52, column: 20, scope: !7)
!49 = !DILocation(line: 55, column: 47, scope: !7)
!50 = !DILocation(line: 55, column: 39, scope: !7)
!51 = !DILocation(line: 55, column: 31, scope: !7)
!52 = !DILocation(line: 55, column: 61, scope: !7)
!53 = !DILocation(line: 55, column: 53, scope: !7)
!54 = !DILocation(line: 56, column: 44, scope: !7)
!55 = !DILocation(line: 56, column: 31, scope: !7)
!56 = !DILocation(line: 56, column: 58, scope: !7)
!57 = !DILocation(line: 65, column: 20, scope: !7)
!58 = !DILocation(line: 66, column: 27, scope: !7)
!59 = !DILocation(line: 49, column: 20, scope: !7)
!60 = !DILocation(line: 57, column: 20, scope: !7)
!61 = !DILocation(line: 59, column: 35, scope: !7)
!62 = !DILocation(line: 0, scope: !7)
!63 = !DILocation(line: 61, column: 34, scope: !7)
!64 = !DILocation(line: 62, column: 33, scope: !7)
!65 = !DILocation(line: 63, column: 20, scope: !7)
!66 = !DILocation(line: 68, column: 20, scope: !7)
!67 = !DILocation(line: 71, column: 20, scope: !7)
!68 = !DILocation(line: 72, column: 20, scope: !7)
!69 = !DILocation(line: 73, column: 20, scope: !7)
!70 = !DILocation(line: 74, column: 25, scope: !7)
!71 = !DILocation(line: 74, column: 37, scope: !7)
!72 = !DILocation(line: 75, column: 25, scope: !7)
!73 = !DILocation(line: 75, column: 37, scope: !7)
!74 = !DILocation(line: 75, column: 4, scope: !7)
