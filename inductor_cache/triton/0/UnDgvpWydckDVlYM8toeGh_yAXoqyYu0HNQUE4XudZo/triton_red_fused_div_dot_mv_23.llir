; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_div_dot_mv_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %9 = and i32 %8, 31, !dbg !10
  %10 = shl i32 %8, 2, !dbg !10
  %11 = and i32 %10, 2044, !dbg !10
  %12 = zext nneg i32 %11 to i64, !dbg !11
  %13 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !12
  %14 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %13, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !13
  %15 = extractvalue { i32, i32, i32, i32 } %14, 0, !dbg !13
  %16 = extractvalue { i32, i32, i32, i32 } %14, 1, !dbg !13
  %17 = extractvalue { i32, i32, i32, i32 } %14, 2, !dbg !13
  %18 = extractvalue { i32, i32, i32, i32 } %14, 3, !dbg !13
  %19 = bitcast i32 %17 to float, !dbg !13
  %20 = bitcast i32 %18 to float, !dbg !13
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %12, !dbg !14
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !15
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !15
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !15
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !15
  %27 = bitcast i32 %25 to float, !dbg !15
  %28 = bitcast i32 %26 to float, !dbg !15
  %29 = fmul float %19, %27, !dbg !16
  %30 = fmul float %20, %28, !dbg !16
  %31 = fadd float %29, 0.000000e+00, !dbg !17
  %32 = fadd float %30, 0.000000e+00, !dbg !17
  %33 = or disjoint i64 %12, 2048, !dbg !18
  %34 = icmp samesign ult i64 %33, 3072, !dbg !19
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !12
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #3, !dbg !13
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !13
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !13
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !13
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !13
  %41 = bitcast i32 %39 to float, !dbg !13
  %42 = bitcast i32 %40 to float, !dbg !13
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !14
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #3, !dbg !15
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !15
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !15
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !15
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !15
  %49 = bitcast i32 %47 to float, !dbg !15
  %50 = bitcast i32 %48 to float, !dbg !15
  %51 = fmul float %41, %49, !dbg !16
  %52 = fmul float %42, %50, !dbg !16
  %53 = fadd float %31, %51, !dbg !17
  %54 = fadd float %32, %52, !dbg !17
  %55 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !13
  %56 = insertelement <2 x i32> %55, i32 %16, i64 1, !dbg !13
  %57 = bitcast <2 x i32> %56 to <2 x float>, !dbg !13
  %58 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !15
  %59 = insertelement <2 x i32> %58, i32 %24, i64 1, !dbg !15
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !15
  %61 = fmul <2 x float> %57, %60, !dbg !16
  %62 = fadd <2 x float> %61, zeroinitializer, !dbg !17
  %63 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !13
  %64 = insertelement <2 x i32> %63, i32 %38, i64 1, !dbg !13
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !13
  %66 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !15
  %67 = insertelement <2 x i32> %66, i32 %46, i64 1, !dbg !15
  %68 = bitcast <2 x i32> %67 to <2 x float>, !dbg !15
  %69 = fmul <2 x float> %65, %68, !dbg !16
  %70 = fadd <2 x float> %62, %69, !dbg !17
  %71 = insertelement <2 x i1> poison, i1 %34, i64 0, !dbg !20
  %72 = shufflevector <2 x i1> %71, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !20
  %73 = select <2 x i1> %72, <2 x float> %70, <2 x float> %62, !dbg !20
  %74 = select i1 %34, float %53, float %31, !dbg !20
  %75 = select i1 %34, float %54, float %32, !dbg !20
  %76 = lshr i32 %8, 5, !dbg !10
  %shift = shufflevector <2 x float> %73, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %77 = fadd <2 x float> %73, %shift, !dbg !21
  %78 = extractelement <2 x float> %77, i64 0, !dbg !21
  %79 = fadd float %74, %78, !dbg !21
  %80 = fadd float %75, %79, !dbg !21
  %81 = bitcast float %80 to i32, !dbg !26
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 16, i32 31), !dbg !26
  %83 = bitcast i32 %82 to float, !dbg !26
  %84 = fadd float %80, %83, !dbg !21
  %85 = bitcast float %84 to i32, !dbg !26
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 8, i32 31), !dbg !26
  %87 = bitcast i32 %86 to float, !dbg !26
  %88 = fadd float %84, %87, !dbg !21
  %89 = bitcast float %88 to i32, !dbg !26
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 4, i32 31), !dbg !26
  %91 = bitcast i32 %90 to float, !dbg !26
  %92 = fadd float %88, %91, !dbg !21
  %93 = bitcast float %92 to i32, !dbg !26
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 2, i32 31), !dbg !26
  %95 = bitcast i32 %94 to float, !dbg !26
  %96 = fadd float %92, %95, !dbg !21
  %97 = bitcast float %96 to i32, !dbg !26
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 1, i32 31), !dbg !26
  %99 = bitcast i32 %98 to float, !dbg !26
  %100 = fadd float %96, %99, !dbg !21
  %101 = icmp eq i32 %9, 0, !dbg !26
  %102 = and i32 %76, 15, !dbg !26
  %103 = getelementptr float, ptr addrspace(3) @global_smem, i32 %102, !dbg !26
  %104 = bitcast float %100 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 %101) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %105 = icmp slt i32 %8, 16, !dbg !26
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !26
  %107 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %106, i1 %105) #3, !dbg !26
  %108 = bitcast i32 %107 to float, !dbg !26
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 8, i32 31), !dbg !26
  %110 = bitcast i32 %109 to float, !dbg !26
  %111 = fadd float %108, %110, !dbg !21
  %112 = bitcast float %111 to i32, !dbg !26
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 4, i32 31), !dbg !26
  %114 = bitcast i32 %113 to float, !dbg !26
  %115 = fadd float %111, %114, !dbg !21
  %116 = bitcast float %115 to i32, !dbg !26
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 2, i32 31), !dbg !26
  %118 = bitcast i32 %117 to float, !dbg !26
  %119 = fadd float %115, %118, !dbg !21
  %120 = bitcast float %119 to i32, !dbg !26
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 1, i32 31), !dbg !26
  %122 = bitcast i32 %121 to float, !dbg !26
  %123 = fadd float %119, %122, !dbg !21
  %124 = and i32 %8, 15, !dbg !26
  %125 = icmp eq i32 %124, 0, !dbg !26
  %126 = and i1 %105, %125, !dbg !26
  %127 = bitcast float %123 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %127, i1 %126) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %128 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !26
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #3, !dbg !27
  %130 = bitcast i32 %129 to float, !dbg !27
  %131 = fmul float %128, %130, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %urem = and i32 %8, 511, !dbg !30
  %132 = icmp eq i32 %urem, 0, !dbg !30
  %133 = bitcast float %131 to i32, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %133, ptr addrspace(1) %0, i1 %132) #3, !dbg !30
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %13, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !31
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !31
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !31
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !31
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !31
  %139 = bitcast i32 %135 to float, !dbg !31
  %140 = bitcast i32 %136 to float, !dbg !31
  %141 = bitcast i32 %137 to float, !dbg !31
  %142 = bitcast i32 %138 to float, !dbg !31
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float %131) #3, !dbg !32
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float %131) #3, !dbg !32
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float %131) #3, !dbg !32
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float %131) #3, !dbg !32
  %147 = getelementptr float, ptr addrspace(1) %4, i64 %12, !dbg !33
  %148 = bitcast float %143 to i32, !dbg !34
  %149 = bitcast float %144 to i32, !dbg !34
  %150 = bitcast float %145 to i32, !dbg !34
  %151 = bitcast float %146 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %148, i32 %149, i32 %150, i32 %151, ptr addrspace(1) %147, i1 true) #3, !dbg !34
  %152 = getelementptr float, ptr addrspace(1) %5, i64 %12, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %148, i32 %149, i32 %150, i32 %151, ptr addrspace(1) %152, i1 true) #3, !dbg !36
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #3, !dbg !31
  %154 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !31
  %155 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !31
  %156 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !31
  %157 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !31
  %158 = bitcast i32 %154 to float, !dbg !31
  %159 = bitcast i32 %155 to float, !dbg !31
  %160 = bitcast i32 %156 to float, !dbg !31
  %161 = bitcast i32 %157 to float, !dbg !31
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %158, float %131) #3, !dbg !32
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float %131) #3, !dbg !32
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %160, float %131) #3, !dbg !32
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %161, float %131) #3, !dbg !32
  %166 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !33
  %167 = bitcast float %162 to i32, !dbg !34
  %168 = bitcast float %163 to i32, !dbg !34
  %169 = bitcast float %164 to i32, !dbg !34
  %170 = bitcast float %165 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %167, i32 %168, i32 %169, i32 %170, ptr addrspace(1) %166, i1 %34) #3, !dbg !34
  %171 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %167, i32 %168, i32 %169, i32 %170, ptr addrspace(1) %171, i1 %34) #3, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwb4zqwmqidnzm4u3gl5zyttcs4epqb5kq366pyn6vrdnjf4amtg.py", directory: "inductor_cache/wb")
!4 = !{ptr @triton_red_fused_div_dot_mv_23, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_div_dot_mv_23, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_div_dot_mv_23", linkageName: "triton_red_fused_div_dot_mv_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 25, column: 33, scope: !7)
!11 = !DILocation(line: 27, column: 36, scope: !7)
!12 = !DILocation(line: 31, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 39, scope: !7)
!14 = !DILocation(line: 32, column: 34, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 33, column: 22, scope: !7)
!17 = !DILocation(line: 35, column: 23, scope: !7)
!18 = !DILocation(line: 28, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 25, scope: !7)
!20 = !DILocation(line: 36, column: 38, scope: !7)
!21 = !DILocation(line: 256, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 37, column: 25, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !25)
!27 = !DILocation(line: 38, column: 19, scope: !7)
!28 = !DILocation(line: 40, column: 18, scope: !7)
!29 = !DILocation(line: 41, column: 4, scope: !7)
!30 = !DILocation(line: 42, column: 70, scope: !7)
!31 = !DILocation(line: 47, column: 39, scope: !7)
!32 = !DILocation(line: 48, column: 23, scope: !7)
!33 = !DILocation(line: 49, column: 29, scope: !7)
!34 = !DILocation(line: 49, column: 76, scope: !7)
!35 = !DILocation(line: 50, column: 29, scope: !7)
!36 = !DILocation(line: 50, column: 76, scope: !7)
!37 = !DILocation(line: 43, column: 4, scope: !7)
