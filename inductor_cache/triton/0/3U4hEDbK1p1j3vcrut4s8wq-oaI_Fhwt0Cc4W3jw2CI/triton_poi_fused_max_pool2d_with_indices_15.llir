; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %.lobit3 = lshr i32 %8, 5, !dbg !12
  %11 = and i32 %.lobit3, 3, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %13, 8, !dbg !13
  %16 = or disjoint i32 %13, 12, !dbg !13
  %17 = or disjoint i32 %13, 16, !dbg !13
  %18 = or disjoint i32 %13, 20, !dbg !13
  %19 = or disjoint i32 %13, 24, !dbg !13
  %20 = or disjoint i32 %13, 28, !dbg !13
  %21 = icmp slt i32 %12, 100, !dbg !14
  %22 = icmp slt i32 %13, 100, !dbg !14
  %23 = icmp slt i32 %14, 100, !dbg !14
  %24 = icmp slt i32 %15, 100, !dbg !14
  %25 = icmp slt i32 %16, 100, !dbg !14
  %26 = icmp slt i32 %17, 100, !dbg !14
  %27 = icmp slt i32 %18, 100, !dbg !14
  %28 = icmp slt i32 %19, 100, !dbg !14
  %29 = icmp slt i32 %20, 100, !dbg !14
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %31 = shl i32 %30, 5, !dbg !16
  %32 = shl i32 %8, 3, !dbg !17
  %33 = and i32 %32, 24, !dbg !17
  %34 = and i32 %8, 31, !dbg !17
  %35 = or disjoint i32 %31, %33, !dbg !18
  %36 = or disjoint i32 %35, 4, !dbg !18
  %37 = or disjoint i32 %31, %34, !dbg !18
  %38 = icmp slt i32 %35, 192, !dbg !19
  %39 = icmp slt i32 %37, 192, !dbg !19
  %.frozen = freeze i32 %12, !dbg !20
  %40 = sdiv i32 %.frozen, 5, !dbg !20
  %41 = mul i32 %40, 5, !dbg !21
  %.decomposed = sub i32 %.frozen, %41, !dbg !21
  %42 = srem i32 %40, 5, !dbg !22
  %43 = sdiv i32 %12, 25, !dbg !23
  %.frozen17 = freeze i32 %13, !dbg !23
  %44 = sdiv i32 %.frozen17, 25, !dbg !23
  %.frozen19 = freeze i32 %14, !dbg !23
  %45 = sdiv i32 %.frozen19, 25, !dbg !23
  %.frozen21 = freeze i32 %15, !dbg !23
  %46 = sdiv i32 %.frozen21, 25, !dbg !23
  %.frozen23 = freeze i32 %16, !dbg !23
  %47 = sdiv i32 %.frozen23, 25, !dbg !23
  %.frozen25 = freeze i32 %17, !dbg !23
  %48 = sdiv i32 %.frozen25, 25, !dbg !23
  %.frozen27 = freeze i32 %18, !dbg !23
  %49 = sdiv i32 %.frozen27, 25, !dbg !23
  %.frozen29 = freeze i32 %19, !dbg !23
  %50 = sdiv i32 %.frozen29, 25, !dbg !23
  %.frozen31 = freeze i32 %20, !dbg !23
  %51 = sdiv i32 %.frozen31, 25, !dbg !23
  %52 = mul i32 %44, 25, !dbg !24
  %.decomposed18 = sub i32 %.frozen17, %52, !dbg !24
  %53 = mul i32 %45, 25, !dbg !24
  %.decomposed20 = sub i32 %.frozen19, %53, !dbg !24
  %54 = mul i32 %46, 25, !dbg !24
  %.decomposed22 = sub i32 %.frozen21, %54, !dbg !24
  %55 = mul i32 %47, 25, !dbg !24
  %.decomposed24 = sub i32 %.frozen23, %55, !dbg !24
  %56 = mul i32 %48, 25, !dbg !24
  %.decomposed26 = sub i32 %.frozen25, %56, !dbg !24
  %57 = mul i32 %49, 25, !dbg !24
  %.decomposed28 = sub i32 %.frozen27, %57, !dbg !24
  %58 = mul i32 %50, 25, !dbg !24
  %.decomposed30 = sub i32 %.frozen29, %58, !dbg !24
  %59 = mul i32 %51, 25, !dbg !24
  %.decomposed32 = sub i32 %.frozen31, %59, !dbg !24
  %60 = mul nsw i32 %.decomposed, 384, !dbg !25
  %61 = mul nsw i32 %42, 4608, !dbg !26
  %62 = mul i32 %43, 27648, !dbg !27
  %63 = add i32 %62, %60, !dbg !28
  %64 = add i32 %63, %35, !dbg !29
  %65 = add i32 %64, %61, !dbg !30
  %66 = add i32 %63, %36, !dbg !29
  %67 = add i32 %66, %61, !dbg !30
  %68 = sext i32 %65 to i64, !dbg !31
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !31
  %70 = sext i32 %67 to i64, !dbg !31
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !31
  %72 = and i1 %21, %38, !dbg !32
  %73 = and i1 %22, %39, !dbg !32
  %74 = and i1 %23, %39, !dbg !32
  %75 = and i1 %24, %39, !dbg !32
  %76 = and i1 %25, %39, !dbg !32
  %77 = and i1 %26, %39, !dbg !32
  %78 = and i1 %27, %39, !dbg !32
  %79 = and i1 %28, %39, !dbg !32
  %80 = and i1 %29, %39, !dbg !32
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %72) #2, !dbg !33
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !33
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !33
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !33
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !33
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %72) #2, !dbg !33
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !33
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !33
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !33
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !33
  %91 = add i32 %63, 192, !dbg !34
  %92 = add i32 %91, %35, !dbg !35
  %93 = add i32 %92, %61, !dbg !36
  %94 = add i32 %91, %36, !dbg !35
  %95 = add i32 %94, %61, !dbg !36
  %96 = sext i32 %93 to i64, !dbg !37
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !37
  %98 = sext i32 %95 to i64, !dbg !37
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !37
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %97, i1 %72) #2, !dbg !38
  %101 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !38
  %102 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !38
  %103 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !38
  %104 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !38
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %99, i1 %72) #2, !dbg !38
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !38
  %107 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !38
  %108 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !38
  %109 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !38
  %110 = add i32 %63, 384, !dbg !39
  %111 = add i32 %110, %35, !dbg !40
  %112 = add i32 %111, %61, !dbg !41
  %113 = add i32 %110, %36, !dbg !40
  %114 = add i32 %113, %61, !dbg !41
  %115 = sext i32 %112 to i64, !dbg !42
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !42
  %117 = sext i32 %114 to i64, !dbg !42
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !42
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %116, i1 %72) #2, !dbg !43
  %120 = extractvalue { i32, i32, i32, i32 } %119, 0, !dbg !43
  %121 = extractvalue { i32, i32, i32, i32 } %119, 1, !dbg !43
  %122 = extractvalue { i32, i32, i32, i32 } %119, 2, !dbg !43
  %123 = extractvalue { i32, i32, i32, i32 } %119, 3, !dbg !43
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %118, i1 %72) #2, !dbg !43
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !43
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !43
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !43
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !43
  %129 = add i32 %63, 2304, !dbg !44
  %130 = add i32 %129, %35, !dbg !45
  %131 = add i32 %130, %61, !dbg !46
  %132 = add i32 %129, %36, !dbg !45
  %133 = add i32 %132, %61, !dbg !46
  %134 = sext i32 %131 to i64, !dbg !47
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !47
  %136 = sext i32 %133 to i64, !dbg !47
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !47
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %135, i1 %72) #2, !dbg !48
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !48
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !48
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !48
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !48
  %143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %137, i1 %72) #2, !dbg !48
  %144 = extractvalue { i32, i32, i32, i32 } %143, 0, !dbg !48
  %145 = extractvalue { i32, i32, i32, i32 } %143, 1, !dbg !48
  %146 = extractvalue { i32, i32, i32, i32 } %143, 2, !dbg !48
  %147 = extractvalue { i32, i32, i32, i32 } %143, 3, !dbg !48
  %148 = add i32 %63, 2496, !dbg !49
  %149 = add i32 %148, %35, !dbg !50
  %150 = add i32 %149, %61, !dbg !51
  %151 = add i32 %148, %36, !dbg !50
  %152 = add i32 %151, %61, !dbg !51
  %153 = sext i32 %150 to i64, !dbg !52
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !52
  %155 = sext i32 %152 to i64, !dbg !52
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !52
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %154, i1 %72) #2, !dbg !53
  %158 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !53
  %159 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !53
  %160 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !53
  %161 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !53
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %156, i1 %72) #2, !dbg !53
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !53
  %164 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !53
  %165 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !53
  %166 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !53
  %167 = add i32 %63, 2688, !dbg !54
  %168 = add i32 %167, %35, !dbg !55
  %169 = add i32 %168, %61, !dbg !56
  %170 = add i32 %167, %36, !dbg !55
  %171 = add i32 %170, %61, !dbg !56
  %172 = sext i32 %169 to i64, !dbg !57
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !57
  %174 = sext i32 %171 to i64, !dbg !57
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !57
  %176 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %173, i1 %72) #2, !dbg !58
  %177 = extractvalue { i32, i32, i32, i32 } %176, 0, !dbg !58
  %178 = extractvalue { i32, i32, i32, i32 } %176, 1, !dbg !58
  %179 = extractvalue { i32, i32, i32, i32 } %176, 2, !dbg !58
  %180 = extractvalue { i32, i32, i32, i32 } %176, 3, !dbg !58
  %181 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %175, i1 %72) #2, !dbg !58
  %182 = extractvalue { i32, i32, i32, i32 } %181, 0, !dbg !58
  %183 = extractvalue { i32, i32, i32, i32 } %181, 1, !dbg !58
  %184 = extractvalue { i32, i32, i32, i32 } %181, 2, !dbg !58
  %185 = extractvalue { i32, i32, i32, i32 } %181, 3, !dbg !58
  %186 = add i32 %63, 4608, !dbg !59
  %187 = add i32 %186, %35, !dbg !60
  %188 = add i32 %187, %61, !dbg !61
  %189 = add i32 %186, %36, !dbg !60
  %190 = add i32 %189, %61, !dbg !61
  %191 = sext i32 %188 to i64, !dbg !62
  %192 = getelementptr float, ptr addrspace(1) %0, i64 %191, !dbg !62
  %193 = sext i32 %190 to i64, !dbg !62
  %194 = getelementptr float, ptr addrspace(1) %0, i64 %193, !dbg !62
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %192, i1 %72) #2, !dbg !63
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !63
  %197 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !63
  %198 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !63
  %199 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !63
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %194, i1 %72) #2, !dbg !63
  %201 = extractvalue { i32, i32, i32, i32 } %200, 0, !dbg !63
  %202 = extractvalue { i32, i32, i32, i32 } %200, 1, !dbg !63
  %203 = extractvalue { i32, i32, i32, i32 } %200, 2, !dbg !63
  %204 = extractvalue { i32, i32, i32, i32 } %200, 3, !dbg !63
  %205 = add i32 %63, 4800, !dbg !64
  %206 = add i32 %205, %35, !dbg !65
  %207 = add i32 %206, %61, !dbg !66
  %208 = add i32 %205, %36, !dbg !65
  %209 = add i32 %208, %61, !dbg !66
  %210 = sext i32 %207 to i64, !dbg !67
  %211 = getelementptr float, ptr addrspace(1) %0, i64 %210, !dbg !67
  %212 = sext i32 %209 to i64, !dbg !67
  %213 = getelementptr float, ptr addrspace(1) %0, i64 %212, !dbg !67
  %214 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %211, i1 %72) #2, !dbg !68
  %215 = extractvalue { i32, i32, i32, i32 } %214, 0, !dbg !68
  %216 = extractvalue { i32, i32, i32, i32 } %214, 1, !dbg !68
  %217 = extractvalue { i32, i32, i32, i32 } %214, 2, !dbg !68
  %218 = extractvalue { i32, i32, i32, i32 } %214, 3, !dbg !68
  %219 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %213, i1 %72) #2, !dbg !68
  %220 = extractvalue { i32, i32, i32, i32 } %219, 0, !dbg !68
  %221 = extractvalue { i32, i32, i32, i32 } %219, 1, !dbg !68
  %222 = extractvalue { i32, i32, i32, i32 } %219, 2, !dbg !68
  %223 = extractvalue { i32, i32, i32, i32 } %219, 3, !dbg !68
  %224 = add i32 %63, 4992, !dbg !69
  %225 = add i32 %224, %35, !dbg !70
  %226 = add i32 %225, %61, !dbg !71
  %227 = add i32 %224, %36, !dbg !70
  %228 = add i32 %227, %61, !dbg !71
  %229 = sext i32 %226 to i64, !dbg !72
  %230 = getelementptr float, ptr addrspace(1) %0, i64 %229, !dbg !72
  %231 = sext i32 %228 to i64, !dbg !72
  %232 = getelementptr float, ptr addrspace(1) %0, i64 %231, !dbg !72
  %233 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %230, i1 %72) #2, !dbg !73
  %234 = extractvalue { i32, i32, i32, i32 } %233, 0, !dbg !73
  %235 = extractvalue { i32, i32, i32, i32 } %233, 1, !dbg !73
  %236 = extractvalue { i32, i32, i32, i32 } %233, 2, !dbg !73
  %237 = extractvalue { i32, i32, i32, i32 } %233, 3, !dbg !73
  %238 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %232, i1 %72) #2, !dbg !73
  %239 = extractvalue { i32, i32, i32, i32 } %238, 0, !dbg !73
  %240 = extractvalue { i32, i32, i32, i32 } %238, 1, !dbg !73
  %241 = extractvalue { i32, i32, i32, i32 } %238, 2, !dbg !73
  %242 = extractvalue { i32, i32, i32, i32 } %238, 3, !dbg !73
  %243 = insertelement <4 x i32> poison, i32 %82, i64 0, !dbg !33
  %244 = insertelement <4 x i32> %243, i32 %83, i64 1, !dbg !33
  %245 = insertelement <4 x i32> %244, i32 %84, i64 2, !dbg !33
  %246 = insertelement <4 x i32> %245, i32 %85, i64 3, !dbg !33
  %247 = bitcast <4 x i32> %246 to <4 x float>, !dbg !33
  %248 = insertelement <4 x i32> poison, i32 %101, i64 0, !dbg !38
  %249 = insertelement <4 x i32> %248, i32 %102, i64 1, !dbg !38
  %250 = insertelement <4 x i32> %249, i32 %103, i64 2, !dbg !38
  %251 = insertelement <4 x i32> %250, i32 %104, i64 3, !dbg !38
  %252 = bitcast <4 x i32> %251 to <4 x float>, !dbg !38
  %253 = insertelement <4 x i32> poison, i32 %120, i64 0, !dbg !43
  %254 = insertelement <4 x i32> %253, i32 %121, i64 1, !dbg !43
  %255 = insertelement <4 x i32> %254, i32 %122, i64 2, !dbg !43
  %256 = insertelement <4 x i32> %255, i32 %123, i64 3, !dbg !43
  %257 = bitcast <4 x i32> %256 to <4 x float>, !dbg !43
  %258 = insertelement <4 x i32> poison, i32 %139, i64 0, !dbg !48
  %259 = insertelement <4 x i32> %258, i32 %140, i64 1, !dbg !48
  %260 = insertelement <4 x i32> %259, i32 %141, i64 2, !dbg !48
  %261 = insertelement <4 x i32> %260, i32 %142, i64 3, !dbg !48
  %262 = bitcast <4 x i32> %261 to <4 x float>, !dbg !48
  %263 = insertelement <4 x i32> poison, i32 %158, i64 0, !dbg !53
  %264 = insertelement <4 x i32> %263, i32 %159, i64 1, !dbg !53
  %265 = insertelement <4 x i32> %264, i32 %160, i64 2, !dbg !53
  %266 = insertelement <4 x i32> %265, i32 %161, i64 3, !dbg !53
  %267 = bitcast <4 x i32> %266 to <4 x float>, !dbg !53
  %268 = insertelement <4 x i32> poison, i32 %177, i64 0, !dbg !58
  %269 = insertelement <4 x i32> %268, i32 %178, i64 1, !dbg !58
  %270 = insertelement <4 x i32> %269, i32 %179, i64 2, !dbg !58
  %271 = insertelement <4 x i32> %270, i32 %180, i64 3, !dbg !58
  %272 = bitcast <4 x i32> %271 to <4 x float>, !dbg !58
  %273 = insertelement <4 x i32> poison, i32 %196, i64 0, !dbg !63
  %274 = insertelement <4 x i32> %273, i32 %197, i64 1, !dbg !63
  %275 = insertelement <4 x i32> %274, i32 %198, i64 2, !dbg !63
  %276 = insertelement <4 x i32> %275, i32 %199, i64 3, !dbg !63
  %277 = bitcast <4 x i32> %276 to <4 x float>, !dbg !63
  %278 = insertelement <4 x i32> poison, i32 %215, i64 0, !dbg !68
  %279 = insertelement <4 x i32> %278, i32 %216, i64 1, !dbg !68
  %280 = insertelement <4 x i32> %279, i32 %217, i64 2, !dbg !68
  %281 = insertelement <4 x i32> %280, i32 %218, i64 3, !dbg !68
  %282 = bitcast <4 x i32> %281 to <4 x float>, !dbg !68
  %283 = insertelement <4 x i32> poison, i32 %234, i64 0, !dbg !73
  %284 = insertelement <4 x i32> %283, i32 %235, i64 1, !dbg !73
  %285 = insertelement <4 x i32> %284, i32 %236, i64 2, !dbg !73
  %286 = insertelement <4 x i32> %285, i32 %237, i64 3, !dbg !73
  %287 = bitcast <4 x i32> %286 to <4 x float>, !dbg !73
  %288 = fcmp ogt <4 x float> %252, %247, !dbg !74
  %289 = fcmp uno <4 x float> %252, zeroinitializer, !dbg !78
  %290 = or <4 x i1> %288, %289, !dbg !79
  %.v = select <4 x i1> %290, <4 x i32> %251, <4 x i32> %246, !dbg !80
  %291 = bitcast <4 x i32> %.v to <4 x float>, !dbg !80
  %292 = fcmp olt <4 x float> %291, %257, !dbg !81
  %293 = fcmp uno <4 x float> %257, zeroinitializer, !dbg !83
  %294 = or <4 x i1> %293, %292, !dbg !84
  %.v4 = select <4 x i1> %294, <4 x i32> %256, <4 x i32> %.v, !dbg !85
  %295 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !85
  %296 = fcmp olt <4 x float> %295, %262, !dbg !86
  %297 = fcmp uno <4 x float> %262, zeroinitializer, !dbg !88
  %298 = or <4 x i1> %297, %296, !dbg !89
  %.v5 = select <4 x i1> %298, <4 x i32> %261, <4 x i32> %.v4, !dbg !90
  %299 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !90
  %300 = fcmp olt <4 x float> %299, %267, !dbg !91
  %301 = fcmp uno <4 x float> %267, zeroinitializer, !dbg !93
  %302 = or <4 x i1> %301, %300, !dbg !94
  %.v6 = select <4 x i1> %302, <4 x i32> %266, <4 x i32> %.v5, !dbg !95
  %303 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !95
  %304 = fcmp olt <4 x float> %303, %272, !dbg !96
  %305 = fcmp uno <4 x float> %272, zeroinitializer, !dbg !98
  %306 = or <4 x i1> %305, %304, !dbg !99
  %.v7 = select <4 x i1> %306, <4 x i32> %271, <4 x i32> %.v6, !dbg !100
  %307 = bitcast <4 x i32> %.v7 to <4 x float>, !dbg !100
  %308 = fcmp olt <4 x float> %307, %277, !dbg !101
  %309 = fcmp uno <4 x float> %277, zeroinitializer, !dbg !103
  %310 = or <4 x i1> %309, %308, !dbg !104
  %.v8 = select <4 x i1> %310, <4 x i32> %276, <4 x i32> %.v7, !dbg !105
  %311 = bitcast <4 x i32> %.v8 to <4 x float>, !dbg !105
  %312 = fcmp olt <4 x float> %311, %282, !dbg !106
  %313 = fcmp uno <4 x float> %282, zeroinitializer, !dbg !108
  %314 = or <4 x i1> %313, %312, !dbg !109
  %.v9 = select <4 x i1> %314, <4 x i32> %281, <4 x i32> %.v8, !dbg !110
  %315 = bitcast <4 x i32> %.v9 to <4 x float>, !dbg !110
  %316 = fcmp olt <4 x float> %315, %287, !dbg !111
  %317 = extractelement <4 x i1> %316, i64 0, !dbg !113
  %318 = extractelement <4 x i1> %316, i64 1, !dbg !113
  %319 = extractelement <4 x i1> %316, i64 2, !dbg !113
  %320 = extractelement <4 x i1> %316, i64 3, !dbg !113
  %321 = zext <4 x i1> %288 to <4 x i8>, !dbg !114
  %322 = select <4 x i1> %292, <4 x i8> splat (i8 2), <4 x i8> %321, !dbg !115
  %323 = select <4 x i1> %296, <4 x i8> splat (i8 3), <4 x i8> %322, !dbg !116
  %324 = select <4 x i1> %300, <4 x i8> splat (i8 4), <4 x i8> %323, !dbg !117
  %325 = select <4 x i1> %304, <4 x i8> splat (i8 5), <4 x i8> %324, !dbg !118
  %326 = select <4 x i1> %308, <4 x i8> splat (i8 6), <4 x i8> %325, !dbg !119
  %327 = select <4 x i1> %312, <4 x i8> splat (i8 7), <4 x i8> %326, !dbg !120
  %328 = select <4 x i1> %316, <4 x i8> splat (i8 8), <4 x i8> %327, !dbg !121
  %329 = insertelement <4 x i32> poison, i32 %87, i64 0, !dbg !33
  %330 = insertelement <4 x i32> %329, i32 %88, i64 1, !dbg !33
  %331 = insertelement <4 x i32> %330, i32 %89, i64 2, !dbg !33
  %332 = insertelement <4 x i32> %331, i32 %90, i64 3, !dbg !33
  %333 = bitcast <4 x i32> %332 to <4 x float>, !dbg !33
  %334 = insertelement <4 x i32> poison, i32 %106, i64 0, !dbg !38
  %335 = insertelement <4 x i32> %334, i32 %107, i64 1, !dbg !38
  %336 = insertelement <4 x i32> %335, i32 %108, i64 2, !dbg !38
  %337 = insertelement <4 x i32> %336, i32 %109, i64 3, !dbg !38
  %338 = bitcast <4 x i32> %337 to <4 x float>, !dbg !38
  %339 = insertelement <4 x i32> poison, i32 %125, i64 0, !dbg !43
  %340 = insertelement <4 x i32> %339, i32 %126, i64 1, !dbg !43
  %341 = insertelement <4 x i32> %340, i32 %127, i64 2, !dbg !43
  %342 = insertelement <4 x i32> %341, i32 %128, i64 3, !dbg !43
  %343 = bitcast <4 x i32> %342 to <4 x float>, !dbg !43
  %344 = insertelement <4 x i32> poison, i32 %144, i64 0, !dbg !48
  %345 = insertelement <4 x i32> %344, i32 %145, i64 1, !dbg !48
  %346 = insertelement <4 x i32> %345, i32 %146, i64 2, !dbg !48
  %347 = insertelement <4 x i32> %346, i32 %147, i64 3, !dbg !48
  %348 = bitcast <4 x i32> %347 to <4 x float>, !dbg !48
  %349 = insertelement <4 x i32> poison, i32 %163, i64 0, !dbg !53
  %350 = insertelement <4 x i32> %349, i32 %164, i64 1, !dbg !53
  %351 = insertelement <4 x i32> %350, i32 %165, i64 2, !dbg !53
  %352 = insertelement <4 x i32> %351, i32 %166, i64 3, !dbg !53
  %353 = bitcast <4 x i32> %352 to <4 x float>, !dbg !53
  %354 = insertelement <4 x i32> poison, i32 %182, i64 0, !dbg !58
  %355 = insertelement <4 x i32> %354, i32 %183, i64 1, !dbg !58
  %356 = insertelement <4 x i32> %355, i32 %184, i64 2, !dbg !58
  %357 = insertelement <4 x i32> %356, i32 %185, i64 3, !dbg !58
  %358 = bitcast <4 x i32> %357 to <4 x float>, !dbg !58
  %359 = insertelement <4 x i32> poison, i32 %201, i64 0, !dbg !63
  %360 = insertelement <4 x i32> %359, i32 %202, i64 1, !dbg !63
  %361 = insertelement <4 x i32> %360, i32 %203, i64 2, !dbg !63
  %362 = insertelement <4 x i32> %361, i32 %204, i64 3, !dbg !63
  %363 = bitcast <4 x i32> %362 to <4 x float>, !dbg !63
  %364 = insertelement <4 x i32> poison, i32 %220, i64 0, !dbg !68
  %365 = insertelement <4 x i32> %364, i32 %221, i64 1, !dbg !68
  %366 = insertelement <4 x i32> %365, i32 %222, i64 2, !dbg !68
  %367 = insertelement <4 x i32> %366, i32 %223, i64 3, !dbg !68
  %368 = bitcast <4 x i32> %367 to <4 x float>, !dbg !68
  %369 = insertelement <4 x i32> poison, i32 %239, i64 0, !dbg !73
  %370 = insertelement <4 x i32> %369, i32 %240, i64 1, !dbg !73
  %371 = insertelement <4 x i32> %370, i32 %241, i64 2, !dbg !73
  %372 = insertelement <4 x i32> %371, i32 %242, i64 3, !dbg !73
  %373 = bitcast <4 x i32> %372 to <4 x float>, !dbg !73
  %374 = fcmp ogt <4 x float> %338, %333, !dbg !74
  %375 = fcmp uno <4 x float> %338, zeroinitializer, !dbg !78
  %376 = or <4 x i1> %374, %375, !dbg !79
  %.v10 = select <4 x i1> %376, <4 x i32> %337, <4 x i32> %332, !dbg !80
  %377 = bitcast <4 x i32> %.v10 to <4 x float>, !dbg !80
  %378 = fcmp olt <4 x float> %377, %343, !dbg !81
  %379 = fcmp uno <4 x float> %343, zeroinitializer, !dbg !83
  %380 = or <4 x i1> %379, %378, !dbg !84
  %.v11 = select <4 x i1> %380, <4 x i32> %342, <4 x i32> %.v10, !dbg !85
  %381 = bitcast <4 x i32> %.v11 to <4 x float>, !dbg !85
  %382 = fcmp olt <4 x float> %381, %348, !dbg !86
  %383 = fcmp uno <4 x float> %348, zeroinitializer, !dbg !88
  %384 = or <4 x i1> %383, %382, !dbg !89
  %.v12 = select <4 x i1> %384, <4 x i32> %347, <4 x i32> %.v11, !dbg !90
  %385 = bitcast <4 x i32> %.v12 to <4 x float>, !dbg !90
  %386 = fcmp olt <4 x float> %385, %353, !dbg !91
  %387 = fcmp uno <4 x float> %353, zeroinitializer, !dbg !93
  %388 = or <4 x i1> %387, %386, !dbg !94
  %.v13 = select <4 x i1> %388, <4 x i32> %352, <4 x i32> %.v12, !dbg !95
  %389 = bitcast <4 x i32> %.v13 to <4 x float>, !dbg !95
  %390 = fcmp olt <4 x float> %389, %358, !dbg !96
  %391 = fcmp uno <4 x float> %358, zeroinitializer, !dbg !98
  %392 = or <4 x i1> %391, %390, !dbg !99
  %.v14 = select <4 x i1> %392, <4 x i32> %357, <4 x i32> %.v13, !dbg !100
  %393 = bitcast <4 x i32> %.v14 to <4 x float>, !dbg !100
  %394 = fcmp olt <4 x float> %393, %363, !dbg !101
  %395 = fcmp uno <4 x float> %363, zeroinitializer, !dbg !103
  %396 = or <4 x i1> %395, %394, !dbg !104
  %.v15 = select <4 x i1> %396, <4 x i32> %362, <4 x i32> %.v14, !dbg !105
  %397 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !105
  %398 = fcmp olt <4 x float> %397, %368, !dbg !106
  %399 = fcmp uno <4 x float> %368, zeroinitializer, !dbg !108
  %400 = or <4 x i1> %399, %398, !dbg !109
  %.v16 = select <4 x i1> %400, <4 x i32> %367, <4 x i32> %.v15, !dbg !110
  %401 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !110
  %402 = fcmp olt <4 x float> %401, %373, !dbg !111
  %403 = shufflevector <4 x float> %373, <4 x float> %287, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !122
  %404 = fcmp uno <8 x float> %403, zeroinitializer, !dbg !122
  %405 = extractelement <8 x i1> %404, i64 7, !dbg !113
  %406 = or i1 %405, %317, !dbg !113
  %407 = extractelement <8 x i1> %404, i64 6, !dbg !113
  %408 = or i1 %407, %318, !dbg !113
  %409 = extractelement <8 x i1> %404, i64 5, !dbg !113
  %410 = or i1 %409, %319, !dbg !113
  %411 = extractelement <8 x i1> %404, i64 4, !dbg !113
  %412 = or i1 %411, %320, !dbg !113
  %413 = extractelement <4 x i1> %402, i64 0, !dbg !113
  %414 = extractelement <8 x i1> %404, i64 3, !dbg !113
  %415 = or i1 %414, %413, !dbg !113
  %416 = extractelement <4 x i1> %402, i64 1, !dbg !113
  %417 = extractelement <8 x i1> %404, i64 2, !dbg !113
  %418 = or i1 %417, %416, !dbg !113
  %419 = extractelement <4 x i1> %402, i64 2, !dbg !113
  %420 = extractelement <8 x i1> %404, i64 1, !dbg !113
  %421 = or i1 %420, %419, !dbg !113
  %422 = extractelement <4 x i1> %402, i64 3, !dbg !113
  %423 = extractelement <8 x i1> %404, i64 0, !dbg !113
  %424 = or i1 %423, %422, !dbg !113
  %425 = zext <4 x i1> %374 to <4 x i8>, !dbg !114
  %426 = select <4 x i1> %378, <4 x i8> splat (i8 2), <4 x i8> %425, !dbg !115
  %427 = select <4 x i1> %382, <4 x i8> splat (i8 3), <4 x i8> %426, !dbg !116
  %428 = select <4 x i1> %386, <4 x i8> splat (i8 4), <4 x i8> %427, !dbg !117
  %429 = select <4 x i1> %390, <4 x i8> splat (i8 5), <4 x i8> %428, !dbg !118
  %430 = select <4 x i1> %394, <4 x i8> splat (i8 6), <4 x i8> %429, !dbg !119
  %431 = select <4 x i1> %398, <4 x i8> splat (i8 7), <4 x i8> %430, !dbg !120
  %432 = select <4 x i1> %402, <4 x i8> splat (i8 8), <4 x i8> %431, !dbg !121
  %433 = mul i32 %37, 25, !dbg !123
  %434 = add i32 %433, %.decomposed18, !dbg !124
  %435 = mul i32 %44, 9600, !dbg !125
  %436 = mul i32 %45, 9600, !dbg !125
  %437 = mul i32 %46, 9600, !dbg !125
  %438 = mul i32 %47, 9600, !dbg !125
  %439 = mul i32 %48, 9600, !dbg !125
  %440 = mul i32 %49, 9600, !dbg !125
  %441 = mul i32 %50, 9600, !dbg !125
  %442 = mul i32 %51, 9600, !dbg !125
  %443 = add i32 %434, %435, !dbg !126
  %444 = add i32 %436, %.decomposed20, !dbg !124
  %445 = add i32 %444, %433, !dbg !126
  %446 = add i32 %437, %.decomposed22, !dbg !124
  %447 = add i32 %446, %433, !dbg !126
  %448 = add i32 %438, %.decomposed24, !dbg !124
  %449 = add i32 %448, %433, !dbg !126
  %450 = add i32 %439, %.decomposed26, !dbg !124
  %451 = add i32 %450, %433, !dbg !126
  %452 = add i32 %440, %.decomposed28, !dbg !124
  %453 = add i32 %452, %433, !dbg !126
  %454 = add i32 %441, %.decomposed30, !dbg !124
  %455 = add i32 %454, %433, !dbg !126
  %456 = add i32 %442, %.decomposed32, !dbg !124
  %457 = add i32 %456, %433, !dbg !126
  %458 = sext i32 %443 to i64, !dbg !127
  %459 = getelementptr float, ptr addrspace(1) %1, i64 %458, !dbg !127
  %460 = sext i32 %445 to i64, !dbg !127
  %461 = getelementptr float, ptr addrspace(1) %1, i64 %460, !dbg !127
  %462 = sext i32 %447 to i64, !dbg !127
  %463 = getelementptr float, ptr addrspace(1) %1, i64 %462, !dbg !127
  %464 = sext i32 %449 to i64, !dbg !127
  %465 = getelementptr float, ptr addrspace(1) %1, i64 %464, !dbg !127
  %466 = sext i32 %451 to i64, !dbg !127
  %467 = getelementptr float, ptr addrspace(1) %1, i64 %466, !dbg !127
  %468 = sext i32 %453 to i64, !dbg !127
  %469 = getelementptr float, ptr addrspace(1) %1, i64 %468, !dbg !127
  %470 = sext i32 %455 to i64, !dbg !127
  %471 = getelementptr float, ptr addrspace(1) %1, i64 %470, !dbg !127
  %472 = sext i32 %457 to i64, !dbg !127
  %473 = getelementptr float, ptr addrspace(1) %1, i64 %472, !dbg !127
  %474 = and i32 %32, 1016, !dbg !128
  %475 = and i32 %8, 127, !dbg !128
  %476 = and i32 %8, 124, !dbg !128
  %477 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %476, !dbg !128
  %478 = getelementptr inbounds float, ptr addrspace(3) %477, i32 %474, !dbg !128
  %479 = extractelement <4 x i32> %.v9, i64 0, !dbg !128
  %480 = select i1 %406, i32 %234, i32 %479, !dbg !129
  %481 = insertelement <1 x i32> poison, i32 %480, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %478, <1 x i32> %481, i1 true) #2, !dbg !128
  %482 = or disjoint i32 %474, 1, !dbg !128
  %483 = getelementptr float, ptr addrspace(3) %477, i32 %482, !dbg !128
  %484 = extractelement <4 x i32> %.v9, i64 1, !dbg !128
  %485 = select i1 %408, i32 %235, i32 %484, !dbg !129
  %486 = insertelement <1 x i32> poison, i32 %485, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %483, <1 x i32> %486, i1 true) #2, !dbg !128
  %487 = or disjoint i32 %474, 2, !dbg !128
  %488 = getelementptr float, ptr addrspace(3) %477, i32 %487, !dbg !128
  %489 = extractelement <4 x i32> %.v9, i64 2, !dbg !128
  %490 = select i1 %410, i32 %236, i32 %489, !dbg !129
  %491 = insertelement <1 x i32> poison, i32 %490, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %488, <1 x i32> %491, i1 true) #2, !dbg !128
  %492 = or disjoint i32 %474, 3, !dbg !128
  %493 = getelementptr float, ptr addrspace(3) %477, i32 %492, !dbg !128
  %494 = extractelement <4 x i32> %.v9, i64 3, !dbg !128
  %495 = select i1 %412, i32 %237, i32 %494, !dbg !129
  %496 = insertelement <1 x i32> poison, i32 %495, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %493, <1 x i32> %496, i1 true) #2, !dbg !128
  %497 = or disjoint i32 %474, 4, !dbg !128
  %498 = getelementptr float, ptr addrspace(3) %477, i32 %497, !dbg !128
  %499 = extractelement <4 x i32> %.v16, i64 0, !dbg !128
  %500 = select i1 %415, i32 %239, i32 %499, !dbg !129
  %501 = insertelement <1 x i32> poison, i32 %500, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %498, <1 x i32> %501, i1 true) #2, !dbg !128
  %502 = or disjoint i32 %474, 5, !dbg !128
  %503 = getelementptr float, ptr addrspace(3) %477, i32 %502, !dbg !128
  %504 = extractelement <4 x i32> %.v16, i64 1, !dbg !128
  %505 = select i1 %418, i32 %240, i32 %504, !dbg !129
  %506 = insertelement <1 x i32> poison, i32 %505, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %503, <1 x i32> %506, i1 true) #2, !dbg !128
  %507 = or disjoint i32 %474, 6, !dbg !128
  %508 = getelementptr float, ptr addrspace(3) %477, i32 %507, !dbg !128
  %509 = extractelement <4 x i32> %.v16, i64 2, !dbg !128
  %510 = select i1 %421, i32 %241, i32 %509, !dbg !129
  %511 = insertelement <1 x i32> poison, i32 %510, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %508, <1 x i32> %511, i1 true) #2, !dbg !128
  %512 = or disjoint i32 %474, 7, !dbg !128
  %513 = getelementptr float, ptr addrspace(3) %477, i32 %512, !dbg !128
  %514 = extractelement <4 x i32> %.v16, i64 3, !dbg !128
  %515 = select i1 %424, i32 %242, i32 %514, !dbg !129
  %516 = insertelement <1 x i32> poison, i32 %515, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %513, <1 x i32> %516, i1 true) #2, !dbg !128
  tail call void @llvm.nvvm.barrier0(), !dbg !128
  %517 = lshr i32 %475, 5, !dbg !128
  %518 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %517, !dbg !128
  %519 = getelementptr inbounds float, ptr addrspace(3) %518, i32 %475, !dbg !128
  %520 = load i32, ptr addrspace(3) %519, align 4, !dbg !128
  %521 = or disjoint i32 %475, 128, !dbg !128
  %522 = lshr i32 %521, 5, !dbg !128
  %523 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %522, !dbg !128
  %524 = getelementptr inbounds float, ptr addrspace(3) %523, i32 %521, !dbg !128
  %525 = load i32, ptr addrspace(3) %524, align 4, !dbg !128
  %526 = or disjoint i32 %475, 256, !dbg !128
  %527 = lshr i32 %526, 5, !dbg !128
  %528 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %527, !dbg !128
  %529 = getelementptr inbounds float, ptr addrspace(3) %528, i32 %526, !dbg !128
  %530 = load i32, ptr addrspace(3) %529, align 4, !dbg !128
  %531 = or disjoint i32 %475, 384, !dbg !128
  %532 = lshr i32 %531, 5, !dbg !128
  %533 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %532, !dbg !128
  %534 = getelementptr inbounds float, ptr addrspace(3) %533, i32 %531, !dbg !128
  %535 = load i32, ptr addrspace(3) %534, align 4, !dbg !128
  %536 = or disjoint i32 %475, 512, !dbg !128
  %537 = lshr i32 %536, 5, !dbg !128
  %538 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %537, !dbg !128
  %539 = getelementptr inbounds float, ptr addrspace(3) %538, i32 %536, !dbg !128
  %540 = load i32, ptr addrspace(3) %539, align 4, !dbg !128
  %541 = or disjoint i32 %475, 640, !dbg !128
  %542 = lshr i32 %541, 5, !dbg !128
  %543 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %542, !dbg !128
  %544 = getelementptr inbounds float, ptr addrspace(3) %543, i32 %541, !dbg !128
  %545 = load i32, ptr addrspace(3) %544, align 4, !dbg !128
  %546 = or disjoint i32 %475, 768, !dbg !128
  %547 = lshr i32 %546, 5, !dbg !128
  %548 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %547, !dbg !128
  %549 = getelementptr inbounds float, ptr addrspace(3) %548, i32 %546, !dbg !128
  %550 = load i32, ptr addrspace(3) %549, align 4, !dbg !128
  %551 = or disjoint i32 %475, 896, !dbg !128
  %552 = lshr i32 %551, 5, !dbg !128
  %553 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %552, !dbg !128
  %554 = getelementptr inbounds float, ptr addrspace(3) %553, i32 %551, !dbg !128
  %555 = load i32, ptr addrspace(3) %554, align 4, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %520, ptr addrspace(1) %459, i1 %73) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %525, ptr addrspace(1) %461, i1 %74) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %530, ptr addrspace(1) %463, i1 %75) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %535, ptr addrspace(1) %465, i1 %76) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %540, ptr addrspace(1) %467, i1 %77) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %545, ptr addrspace(1) %469, i1 %78) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %550, ptr addrspace(1) %471, i1 %79) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %555, ptr addrspace(1) %473, i1 %80) #2, !dbg !128
  %556 = mul i32 %12, 192, !dbg !130
  %557 = add i32 %35, %556, !dbg !131
  %558 = sext i32 %557 to i64, !dbg !132
  %559 = getelementptr i8, ptr addrspace(1) %2, i64 %558, !dbg !132
  %560 = bitcast <4 x i8> %328 to i32, !dbg !133
  %561 = bitcast <4 x i8> %432 to i32, !dbg !133
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %560, i32 %561, ptr addrspace(1) %559, i1 %72) #2, !dbg !133
  ret void, !dbg !134
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csk4patw64wyyauubq2apj5exudhvnrbe3hjord7juata62i3f4p.py", directory: "inductor_cache/sk")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_15", linkageName: "triton_poi_fused_max_pool2d_with_indices_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 21, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 26, scope: !7)
!23 = !DILocation(line: 31, column: 19, scope: !7)
!24 = !DILocation(line: 32, column: 19, scope: !7)
!25 = !DILocation(line: 34, column: 39, scope: !7)
!26 = !DILocation(line: 34, column: 49, scope: !7)
!27 = !DILocation(line: 34, column: 60, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 44, scope: !7)
!30 = !DILocation(line: 34, column: 54, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 73, scope: !7)
!33 = !DILocation(line: 34, column: 65, scope: !7)
!34 = !DILocation(line: 35, column: 41, scope: !7)
!35 = !DILocation(line: 35, column: 50, scope: !7)
!36 = !DILocation(line: 35, column: 60, scope: !7)
!37 = !DILocation(line: 35, column: 30, scope: !7)
!38 = !DILocation(line: 35, column: 71, scope: !7)
!39 = !DILocation(line: 36, column: 41, scope: !7)
!40 = !DILocation(line: 36, column: 50, scope: !7)
!41 = !DILocation(line: 36, column: 60, scope: !7)
!42 = !DILocation(line: 36, column: 30, scope: !7)
!43 = !DILocation(line: 36, column: 71, scope: !7)
!44 = !DILocation(line: 37, column: 42, scope: !7)
!45 = !DILocation(line: 37, column: 51, scope: !7)
!46 = !DILocation(line: 37, column: 61, scope: !7)
!47 = !DILocation(line: 37, column: 30, scope: !7)
!48 = !DILocation(line: 37, column: 72, scope: !7)
!49 = !DILocation(line: 38, column: 42, scope: !7)
!50 = !DILocation(line: 38, column: 51, scope: !7)
!51 = !DILocation(line: 38, column: 61, scope: !7)
!52 = !DILocation(line: 38, column: 30, scope: !7)
!53 = !DILocation(line: 38, column: 72, scope: !7)
!54 = !DILocation(line: 39, column: 42, scope: !7)
!55 = !DILocation(line: 39, column: 51, scope: !7)
!56 = !DILocation(line: 39, column: 61, scope: !7)
!57 = !DILocation(line: 39, column: 30, scope: !7)
!58 = !DILocation(line: 39, column: 72, scope: !7)
!59 = !DILocation(line: 40, column: 43, scope: !7)
!60 = !DILocation(line: 40, column: 52, scope: !7)
!61 = !DILocation(line: 40, column: 62, scope: !7)
!62 = !DILocation(line: 40, column: 31, scope: !7)
!63 = !DILocation(line: 40, column: 73, scope: !7)
!64 = !DILocation(line: 41, column: 43, scope: !7)
!65 = !DILocation(line: 41, column: 52, scope: !7)
!66 = !DILocation(line: 41, column: 62, scope: !7)
!67 = !DILocation(line: 41, column: 31, scope: !7)
!68 = !DILocation(line: 41, column: 73, scope: !7)
!69 = !DILocation(line: 42, column: 43, scope: !7)
!70 = !DILocation(line: 42, column: 52, scope: !7)
!71 = !DILocation(line: 42, column: 62, scope: !7)
!72 = !DILocation(line: 42, column: 31, scope: !7)
!73 = !DILocation(line: 42, column: 73, scope: !7)
!74 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !77)
!75 = distinct !DILexicalBlockFile(scope: !7, file: !76, discriminator: 0)
!76 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!77 = !DILocation(line: 43, column: 40, scope: !7)
!78 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !77)
!79 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !77)
!80 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !77)
!81 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !82)
!82 = !DILocation(line: 44, column: 40, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !82)
!86 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !87)
!87 = !DILocation(line: 45, column: 40, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !87)
!91 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !92)
!92 = !DILocation(line: 46, column: 40, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !92)
!96 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !97)
!97 = !DILocation(line: 47, column: 41, scope: !7)
!98 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !97)
!99 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !97)
!100 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !97)
!101 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !102)
!102 = !DILocation(line: 48, column: 42, scope: !7)
!103 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !102)
!104 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !102)
!105 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !102)
!106 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !107)
!107 = !DILocation(line: 49, column: 42, scope: !7)
!108 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !107)
!109 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !107)
!110 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !107)
!111 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !112)
!112 = !DILocation(line: 50, column: 42, scope: !7)
!113 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !112)
!114 = !DILocation(line: 54, column: 35, scope: !7)
!115 = !DILocation(line: 57, column: 35, scope: !7)
!116 = !DILocation(line: 60, column: 35, scope: !7)
!117 = !DILocation(line: 63, column: 35, scope: !7)
!118 = !DILocation(line: 66, column: 35, scope: !7)
!119 = !DILocation(line: 69, column: 35, scope: !7)
!120 = !DILocation(line: 72, column: 35, scope: !7)
!121 = !DILocation(line: 75, column: 35, scope: !7)
!122 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !112)
!123 = !DILocation(line: 76, column: 33, scope: !7)
!124 = !DILocation(line: 76, column: 30, scope: !7)
!125 = !DILocation(line: 76, column: 43, scope: !7)
!126 = !DILocation(line: 76, column: 38, scope: !7)
!127 = !DILocation(line: 76, column: 25, scope: !7)
!128 = !DILocation(line: 76, column: 55, scope: !7)
!129 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !112)
!130 = !DILocation(line: 77, column: 34, scope: !7)
!131 = !DILocation(line: 77, column: 30, scope: !7)
!132 = !DILocation(line: 77, column: 25, scope: !7)
!133 = !DILocation(line: 77, column: 46, scope: !7)
!134 = !DILocation(line: 77, column: 4, scope: !7)
