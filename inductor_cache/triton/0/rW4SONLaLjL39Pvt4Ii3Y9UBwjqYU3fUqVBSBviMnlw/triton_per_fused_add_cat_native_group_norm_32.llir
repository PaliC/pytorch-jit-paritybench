; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_cat_native_group_norm_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %13 = shl i32 %12, 5, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = lshr i32 %14, 5, !dbg !12
  %16 = and i32 %14, 31, !dbg !12
  %17 = shl i32 %14, 2, !dbg !13
  %18 = and i32 %17, 12, !dbg !13
  %19 = and i32 %17, 124, !dbg !13
  %20 = lshr i32 %19, 4, !dbg !14
  %21 = or disjoint i32 %20, -128, !dbg !15
  %22 = and i32 %15, 7, !dbg !12
  %23 = or disjoint i32 %22, 8, !dbg !12
  %24 = or disjoint i32 %22, 16, !dbg !12
  %25 = or disjoint i32 %22, 24, !dbg !12
  %26 = insertelement <4 x i32> poison, i32 %13, i64 0, !dbg !16
  %27 = shufflevector <4 x i32> %26, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !16
  %28 = insertelement <4 x i32> poison, i32 %25, i64 0, !dbg !16
  %29 = insertelement <4 x i32> %28, i32 %24, i64 1, !dbg !16
  %30 = insertelement <4 x i32> %29, i32 %23, i64 2, !dbg !16
  %31 = insertelement <4 x i32> %30, i32 %22, i64 3, !dbg !16
  %32 = or disjoint <4 x i32> %27, %31, !dbg !16
  %33 = extractelement <4 x i32> %32, i64 3, !dbg !17
  %34 = icmp slt i32 %33, 128, !dbg !18
  %35 = extractelement <4 x i32> %32, i64 2, !dbg !17
  %36 = icmp slt i32 %35, 128, !dbg !18
  %37 = extractelement <4 x i32> %32, i64 1, !dbg !17
  %38 = icmp slt i32 %37, 128, !dbg !18
  %39 = extractelement <4 x i32> %32, i64 0, !dbg !17
  %40 = icmp slt i32 %39, 128, !dbg !18
  %41 = srem <4 x i32> %32, splat (i32 32), !dbg !19
  %42 = sdiv i32 %33, 32, !dbg !20
  %43 = sdiv i32 %35, 32, !dbg !20
  %44 = sdiv i32 %37, 32, !dbg !20
  %45 = sdiv i32 %39, 32, !dbg !20
  %46 = shl i32 %33, 7, !dbg !17
  %47 = shl i32 %35, 7, !dbg !17
  %48 = shl i32 %37, 7, !dbg !17
  %49 = shl i32 %39, 7, !dbg !17
  %50 = or disjoint i32 %46, %19, !dbg !21
  %51 = or disjoint i32 %47, %19, !dbg !21
  %52 = or disjoint i32 %48, %19, !dbg !21
  %53 = or disjoint i32 %49, %19, !dbg !21
  %54 = sext i32 %50 to i64, !dbg !22
  %55 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !22
  %56 = sext i32 %51 to i64, !dbg !22
  %57 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !22
  %58 = sext i32 %52 to i64, !dbg !22
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !22
  %60 = sext i32 %53 to i64, !dbg !22
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !22
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %55, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #5, !dbg !23
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !23
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !23
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !23
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !23
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #5, !dbg !23
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !23
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !23
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !23
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !23
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #5, !dbg !23
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !23
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !23
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !23
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !23
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #5, !dbg !23
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !23
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !23
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !23
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !23
  %82 = getelementptr float, ptr addrspace(1) %4, i64 %54, !dbg !24
  %83 = getelementptr float, ptr addrspace(1) %4, i64 %56, !dbg !24
  %84 = getelementptr float, ptr addrspace(1) %4, i64 %58, !dbg !24
  %85 = getelementptr float, ptr addrspace(1) %4, i64 %60, !dbg !24
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %82, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #5, !dbg !25
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !25
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !25
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !25
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !25
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #5, !dbg !25
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !25
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !25
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !25
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !25
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %84, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #5, !dbg !25
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !25
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !25
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !25
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !25
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %85, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #5, !dbg !25
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !25
  %103 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !25
  %104 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !25
  %105 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !25
  %106 = shl nsw <4 x i32> %41, splat (i32 3), !dbg !26
  %107 = insertelement <4 x i32> poison, i32 %20, i64 0, !dbg !27
  %108 = shufflevector <4 x i32> %107, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !27
  %109 = or disjoint <4 x i32> %106, %108, !dbg !27
  %110 = extractelement <4 x i32> %109, i64 3, !dbg !28
  %111 = icmp slt i32 %110, 128, !dbg !29
  %112 = extractelement <4 x i32> %109, i64 2, !dbg !28
  %113 = icmp slt i32 %112, 128, !dbg !29
  %114 = extractelement <4 x i32> %109, i64 1, !dbg !28
  %115 = icmp slt i32 %114, 128, !dbg !29
  %116 = extractelement <4 x i32> %109, i64 0, !dbg !28
  %117 = icmp slt i32 %116, 128, !dbg !29
  %118 = shl nsw i32 %110, 4, !dbg !28
  %119 = shl nsw i32 %112, 4, !dbg !28
  %120 = shl nsw i32 %114, 4, !dbg !28
  %121 = shl nsw i32 %116, 4, !dbg !28
  %122 = shl i32 %42, 11, !dbg !30
  %123 = shl i32 %43, 11, !dbg !30
  %124 = shl i32 %44, 11, !dbg !30
  %125 = shl i32 %45, 11, !dbg !30
  %126 = or disjoint i32 %122, %18, !dbg !31
  %127 = add i32 %126, %118, !dbg !32
  %128 = or disjoint i32 %123, %18, !dbg !31
  %129 = add i32 %128, %119, !dbg !32
  %130 = or disjoint i32 %124, %18, !dbg !31
  %131 = add i32 %130, %120, !dbg !32
  %132 = or disjoint i32 %125, %18, !dbg !31
  %133 = add i32 %132, %121, !dbg !32
  %134 = sext i32 %127 to i64, !dbg !33
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !33
  %136 = sext i32 %129 to i64, !dbg !33
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !33
  %138 = sext i32 %131 to i64, !dbg !33
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !33
  %140 = sext i32 %133 to i64, !dbg !33
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !33
  %142 = and i1 %34, %111, !dbg !34
  %143 = and i1 %36, %113, !dbg !34
  %144 = and i1 %38, %115, !dbg !34
  %145 = and i1 %40, %117, !dbg !34
  %146 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %135, i1 %142, i32 0, i1 %142, i32 0, i1 %142, i32 0, i1 %142, i32 0, i1 %142) #5, !dbg !35
  %147 = extractvalue { i32, i32, i32, i32 } %146, 0, !dbg !35
  %148 = extractvalue { i32, i32, i32, i32 } %146, 1, !dbg !35
  %149 = extractvalue { i32, i32, i32, i32 } %146, 2, !dbg !35
  %150 = extractvalue { i32, i32, i32, i32 } %146, 3, !dbg !35
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %137, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143) #5, !dbg !35
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !35
  %153 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !35
  %154 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !35
  %155 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !35
  %156 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %139, i1 %144, i32 0, i1 %144, i32 0, i1 %144, i32 0, i1 %144, i32 0, i1 %144) #5, !dbg !35
  %157 = extractvalue { i32, i32, i32, i32 } %156, 0, !dbg !35
  %158 = extractvalue { i32, i32, i32, i32 } %156, 1, !dbg !35
  %159 = extractvalue { i32, i32, i32, i32 } %156, 2, !dbg !35
  %160 = extractvalue { i32, i32, i32, i32 } %156, 3, !dbg !35
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %141, i1 %145, i32 0, i1 %145, i32 0, i1 %145, i32 0, i1 %145, i32 0, i1 %145) #5, !dbg !35
  %162 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !35
  %163 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !35
  %164 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !35
  %165 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !35
  %166 = extractelement <4 x i32> %41, i64 1, !dbg !36
  %167 = and i32 %166, 536870896, !dbg !36
  %168 = icmp eq i32 %167, 16, !dbg !36
  %169 = extractelement <4 x i32> %106, i64 3, !dbg !37
  %170 = add nsw i32 %169, %21, !dbg !37
  %171 = extractelement <4 x i32> %106, i64 2, !dbg !37
  %172 = add nsw i32 %171, %21, !dbg !37
  %173 = extractelement <4 x i32> %106, i64 1, !dbg !37
  %174 = add nsw i32 %173, %21, !dbg !37
  %175 = extractelement <4 x i32> %106, i64 0, !dbg !37
  %176 = add nsw i32 %175, %21, !dbg !37
  %177 = shl nsw i32 %170, 4, !dbg !38
  %178 = shl nsw i32 %172, 4, !dbg !38
  %179 = shl nsw i32 %174, 4, !dbg !38
  %180 = shl nsw i32 %176, 4, !dbg !38
  %181 = shl i32 %42, 10, !dbg !39
  %182 = shl i32 %43, 10, !dbg !39
  %183 = shl i32 %44, 10, !dbg !39
  %184 = shl i32 %45, 10, !dbg !39
  %185 = or disjoint i32 %181, %18, !dbg !40
  %186 = add i32 %185, %177, !dbg !41
  %187 = or disjoint i32 %182, %18, !dbg !40
  %188 = add i32 %187, %178, !dbg !41
  %189 = or disjoint i32 %183, %18, !dbg !40
  %190 = add i32 %189, %179, !dbg !41
  %191 = or disjoint i32 %184, %18, !dbg !40
  %192 = add i32 %191, %180, !dbg !41
  %193 = sext i32 %186 to i64, !dbg !42
  %194 = getelementptr float, ptr addrspace(1) %1, i64 %193, !dbg !42
  %195 = sext i32 %188 to i64, !dbg !42
  %196 = getelementptr float, ptr addrspace(1) %1, i64 %195, !dbg !42
  %197 = sext i32 %190 to i64, !dbg !42
  %198 = getelementptr float, ptr addrspace(1) %1, i64 %197, !dbg !42
  %199 = sext i32 %192 to i64, !dbg !42
  %200 = getelementptr float, ptr addrspace(1) %1, i64 %199, !dbg !42
  %201 = and i1 %38, %168, !dbg !43
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %194, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #5, !dbg !44
  %203 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %196, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #5, !dbg !44
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %198, i1 %201, i32 0, i1 %201, i32 0, i1 %201, i32 0, i1 %201, i32 0, i1 %201) #5, !dbg !44
  %205 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !44
  %206 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !44
  %207 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !44
  %208 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !44
  %209 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %200, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #5, !dbg !44
  %210 = icmp sgt <4 x i32> %109, splat (i32 191), !dbg !45
  %211 = or disjoint i32 %20, -192, !dbg !46
  %212 = add nsw i32 %169, %211, !dbg !47
  %213 = add nsw i32 %171, %211, !dbg !47
  %214 = add nsw i32 %173, %211, !dbg !47
  %215 = add nsw i32 %175, %211, !dbg !47
  %216 = shl nsw i32 %212, 4, !dbg !48
  %217 = shl nsw i32 %213, 4, !dbg !48
  %218 = shl nsw i32 %214, 4, !dbg !48
  %219 = shl nsw i32 %215, 4, !dbg !48
  %220 = add i32 %185, %216, !dbg !49
  %221 = add i32 %187, %217, !dbg !49
  %222 = add i32 %189, %218, !dbg !49
  %223 = add i32 %191, %219, !dbg !49
  %224 = sext i32 %220 to i64, !dbg !50
  %225 = getelementptr float, ptr addrspace(1) %2, i64 %224, !dbg !50
  %226 = sext i32 %221 to i64, !dbg !50
  %227 = getelementptr float, ptr addrspace(1) %2, i64 %226, !dbg !50
  %228 = sext i32 %222 to i64, !dbg !50
  %229 = getelementptr float, ptr addrspace(1) %2, i64 %228, !dbg !50
  %230 = sext i32 %223 to i64, !dbg !50
  %231 = getelementptr float, ptr addrspace(1) %2, i64 %230, !dbg !50
  %232 = extractelement <4 x i1> %210, i64 3, !dbg !51
  %233 = and i1 %34, %232, !dbg !51
  %234 = extractelement <4 x i1> %210, i64 2, !dbg !51
  %235 = and i1 %36, %234, !dbg !51
  %236 = extractelement <4 x i1> %210, i64 1, !dbg !51
  %237 = and i1 %38, %236, !dbg !51
  %238 = extractelement <4 x i1> %210, i64 0, !dbg !51
  %239 = and i1 %40, %238, !dbg !51
  %240 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %225, i1 %233, i32 0, i1 %233, i32 0, i1 %233, i32 0, i1 %233, i32 0, i1 %233) #5, !dbg !52
  %241 = extractvalue { i32, i32, i32, i32 } %240, 0, !dbg !52
  %242 = extractvalue { i32, i32, i32, i32 } %240, 1, !dbg !52
  %243 = extractvalue { i32, i32, i32, i32 } %240, 2, !dbg !52
  %244 = extractvalue { i32, i32, i32, i32 } %240, 3, !dbg !52
  %245 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %227, i1 %235, i32 0, i1 %235, i32 0, i1 %235, i32 0, i1 %235, i32 0, i1 %235) #5, !dbg !52
  %246 = extractvalue { i32, i32, i32, i32 } %245, 0, !dbg !52
  %247 = extractvalue { i32, i32, i32, i32 } %245, 1, !dbg !52
  %248 = extractvalue { i32, i32, i32, i32 } %245, 2, !dbg !52
  %249 = extractvalue { i32, i32, i32, i32 } %245, 3, !dbg !52
  %250 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %229, i1 %237, i32 0, i1 %237, i32 0, i1 %237, i32 0, i1 %237, i32 0, i1 %237) #5, !dbg !52
  %251 = extractvalue { i32, i32, i32, i32 } %250, 0, !dbg !52
  %252 = extractvalue { i32, i32, i32, i32 } %250, 1, !dbg !52
  %253 = extractvalue { i32, i32, i32, i32 } %250, 2, !dbg !52
  %254 = extractvalue { i32, i32, i32, i32 } %250, 3, !dbg !52
  %255 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %231, i1 %239, i32 0, i1 %239, i32 0, i1 %239, i32 0, i1 %239, i32 0, i1 %239) #5, !dbg !52
  %256 = extractvalue { i32, i32, i32, i32 } %255, 0, !dbg !52
  %257 = extractvalue { i32, i32, i32, i32 } %255, 1, !dbg !52
  %258 = extractvalue { i32, i32, i32, i32 } %255, 2, !dbg !52
  %259 = extractvalue { i32, i32, i32, i32 } %255, 3, !dbg !52
  %260 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !23
  %261 = insertelement <2 x i32> %260, i32 %64, i64 1, !dbg !23
  %262 = bitcast <2 x i32> %261 to <2 x float>, !dbg !23
  %263 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !25
  %264 = insertelement <2 x i32> %263, i32 %88, i64 1, !dbg !25
  %265 = bitcast <2 x i32> %264 to <2 x float>, !dbg !25
  %266 = insertelement <2 x i1> poison, i1 %111, i64 0, !dbg !53
  %267 = shufflevector <2 x i1> %266, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !53
  %268 = insertelement <2 x i32> poison, i32 %147, i64 0, !dbg !53
  %269 = insertelement <2 x i32> %268, i32 %148, i64 1, !dbg !53
  %270 = insertelement <2 x i32> poison, i32 %241, i64 0, !dbg !53
  %271 = insertelement <2 x i32> %270, i32 %242, i64 1, !dbg !53
  %272 = select <2 x i1> %267, <2 x i32> %269, <2 x i32> %271, !dbg !53
  %273 = bitcast <2 x i32> %272 to <2 x float>, !dbg !53
  %274 = fadd <2 x float> %262, %265, !dbg !54
  %275 = fadd <2 x float> %274, %273, !dbg !55
  %276 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !23
  %277 = insertelement <2 x i32> %276, i32 %65, i64 1, !dbg !23
  %278 = bitcast <2 x i32> %277 to <2 x float>, !dbg !23
  %279 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !25
  %280 = insertelement <2 x i32> %279, i32 %89, i64 1, !dbg !25
  %281 = bitcast <2 x i32> %280 to <2 x float>, !dbg !25
  %282 = insertelement <2 x i32> poison, i32 %150, i64 0, !dbg !53
  %283 = insertelement <2 x i32> %282, i32 %149, i64 1, !dbg !53
  %284 = insertelement <2 x i32> poison, i32 %244, i64 0, !dbg !53
  %285 = insertelement <2 x i32> %284, i32 %243, i64 1, !dbg !53
  %286 = select <2 x i1> %267, <2 x i32> %283, <2 x i32> %285, !dbg !53
  %287 = bitcast <2 x i32> %286 to <2 x float>, !dbg !53
  %288 = fadd <2 x float> %278, %281, !dbg !54
  %289 = fadd <2 x float> %288, %287, !dbg !55
  %290 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !23
  %291 = insertelement <2 x i32> %290, i32 %69, i64 1, !dbg !23
  %292 = bitcast <2 x i32> %291 to <2 x float>, !dbg !23
  %293 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !25
  %294 = insertelement <2 x i32> %293, i32 %93, i64 1, !dbg !25
  %295 = bitcast <2 x i32> %294 to <2 x float>, !dbg !25
  %296 = insertelement <2 x i1> poison, i1 %113, i64 0, !dbg !53
  %297 = shufflevector <2 x i1> %296, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !53
  %298 = insertelement <2 x i32> poison, i32 %152, i64 0, !dbg !53
  %299 = insertelement <2 x i32> %298, i32 %153, i64 1, !dbg !53
  %300 = insertelement <2 x i32> poison, i32 %246, i64 0, !dbg !53
  %301 = insertelement <2 x i32> %300, i32 %247, i64 1, !dbg !53
  %302 = select <2 x i1> %297, <2 x i32> %299, <2 x i32> %301, !dbg !53
  %303 = bitcast <2 x i32> %302 to <2 x float>, !dbg !53
  %304 = fadd <2 x float> %292, %295, !dbg !54
  %305 = fadd <2 x float> %304, %303, !dbg !55
  %306 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !23
  %307 = insertelement <2 x i32> %306, i32 %70, i64 1, !dbg !23
  %308 = bitcast <2 x i32> %307 to <2 x float>, !dbg !23
  %309 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !25
  %310 = insertelement <2 x i32> %309, i32 %94, i64 1, !dbg !25
  %311 = bitcast <2 x i32> %310 to <2 x float>, !dbg !25
  %312 = insertelement <2 x i32> poison, i32 %155, i64 0, !dbg !53
  %313 = insertelement <2 x i32> %312, i32 %154, i64 1, !dbg !53
  %314 = insertelement <2 x i32> poison, i32 %249, i64 0, !dbg !53
  %315 = insertelement <2 x i32> %314, i32 %248, i64 1, !dbg !53
  %316 = select <2 x i1> %297, <2 x i32> %313, <2 x i32> %315, !dbg !53
  %317 = bitcast <2 x i32> %316 to <2 x float>, !dbg !53
  %318 = fadd <2 x float> %308, %311, !dbg !54
  %319 = fadd <2 x float> %318, %317, !dbg !55
  %320 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !23
  %321 = insertelement <2 x i32> %320, i32 %74, i64 1, !dbg !23
  %322 = bitcast <2 x i32> %321 to <2 x float>, !dbg !23
  %323 = insertelement <2 x i32> poison, i32 %97, i64 0, !dbg !25
  %324 = insertelement <2 x i32> %323, i32 %98, i64 1, !dbg !25
  %325 = bitcast <2 x i32> %324 to <2 x float>, !dbg !25
  %326 = insertelement <2 x i1> poison, i1 %168, i64 0, !dbg !56
  %327 = shufflevector <2 x i1> %326, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !56
  %328 = insertelement <2 x i32> poison, i32 %205, i64 0, !dbg !56
  %329 = insertelement <2 x i32> %328, i32 %206, i64 1, !dbg !56
  %330 = insertelement <2 x i32> poison, i32 %251, i64 0, !dbg !56
  %331 = insertelement <2 x i32> %330, i32 %252, i64 1, !dbg !56
  %332 = select <2 x i1> %327, <2 x i32> %329, <2 x i32> %331, !dbg !56
  %333 = insertelement <2 x i1> poison, i1 %115, i64 0, !dbg !53
  %334 = shufflevector <2 x i1> %333, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !53
  %335 = insertelement <2 x i32> poison, i32 %157, i64 0, !dbg !53
  %336 = insertelement <2 x i32> %335, i32 %158, i64 1, !dbg !53
  %337 = select <2 x i1> %334, <2 x i32> %336, <2 x i32> %332, !dbg !53
  %338 = bitcast <2 x i32> %337 to <2 x float>, !dbg !53
  %339 = fadd <2 x float> %322, %325, !dbg !54
  %340 = fadd <2 x float> %339, %338, !dbg !55
  %341 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !23
  %342 = insertelement <2 x i32> %341, i32 %75, i64 1, !dbg !23
  %343 = bitcast <2 x i32> %342 to <2 x float>, !dbg !23
  %344 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !25
  %345 = insertelement <2 x i32> %344, i32 %99, i64 1, !dbg !25
  %346 = bitcast <2 x i32> %345 to <2 x float>, !dbg !25
  %347 = insertelement <2 x i32> poison, i32 %208, i64 0, !dbg !56
  %348 = insertelement <2 x i32> %347, i32 %207, i64 1, !dbg !56
  %349 = insertelement <2 x i32> poison, i32 %254, i64 0, !dbg !56
  %350 = insertelement <2 x i32> %349, i32 %253, i64 1, !dbg !56
  %351 = select <2 x i1> %327, <2 x i32> %348, <2 x i32> %350, !dbg !56
  %352 = insertelement <2 x i32> poison, i32 %160, i64 0, !dbg !53
  %353 = insertelement <2 x i32> %352, i32 %159, i64 1, !dbg !53
  %354 = select <2 x i1> %334, <2 x i32> %353, <2 x i32> %351, !dbg !53
  %355 = bitcast <2 x i32> %354 to <2 x float>, !dbg !53
  %356 = fadd <2 x float> %343, %346, !dbg !54
  %357 = fadd <2 x float> %356, %355, !dbg !55
  %358 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !23
  %359 = insertelement <2 x i32> %358, i32 %79, i64 1, !dbg !23
  %360 = bitcast <2 x i32> %359 to <2 x float>, !dbg !23
  %361 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !25
  %362 = insertelement <2 x i32> %361, i32 %103, i64 1, !dbg !25
  %363 = bitcast <2 x i32> %362 to <2 x float>, !dbg !25
  %364 = insertelement <2 x i1> poison, i1 %117, i64 0, !dbg !53
  %365 = shufflevector <2 x i1> %364, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !53
  %366 = insertelement <2 x i32> poison, i32 %162, i64 0, !dbg !53
  %367 = insertelement <2 x i32> %366, i32 %163, i64 1, !dbg !53
  %368 = insertelement <2 x i32> poison, i32 %256, i64 0, !dbg !53
  %369 = insertelement <2 x i32> %368, i32 %257, i64 1, !dbg !53
  %370 = select <2 x i1> %365, <2 x i32> %367, <2 x i32> %369, !dbg !53
  %371 = bitcast <2 x i32> %370 to <2 x float>, !dbg !53
  %372 = fadd <2 x float> %360, %363, !dbg !54
  %373 = fadd <2 x float> %372, %371, !dbg !55
  %374 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !23
  %375 = insertelement <2 x i32> %374, i32 %80, i64 1, !dbg !23
  %376 = bitcast <2 x i32> %375 to <2 x float>, !dbg !23
  %377 = insertelement <2 x i32> poison, i32 %105, i64 0, !dbg !25
  %378 = insertelement <2 x i32> %377, i32 %104, i64 1, !dbg !25
  %379 = bitcast <2 x i32> %378 to <2 x float>, !dbg !25
  %380 = insertelement <2 x i32> poison, i32 %165, i64 0, !dbg !53
  %381 = insertelement <2 x i32> %380, i32 %164, i64 1, !dbg !53
  %382 = insertelement <2 x i32> poison, i32 %259, i64 0, !dbg !53
  %383 = insertelement <2 x i32> %382, i32 %258, i64 1, !dbg !53
  %384 = select <2 x i1> %365, <2 x i32> %381, <2 x i32> %383, !dbg !53
  %385 = bitcast <2 x i32> %384 to <2 x float>, !dbg !53
  %386 = fadd <2 x float> %376, %379, !dbg !54
  %387 = fadd <2 x float> %386, %385, !dbg !55
  %388 = extractelement <2 x float> %275, i64 0, !dbg !57
  %389 = extractelement <2 x float> %275, i64 1, !dbg !57
  %390 = fadd float %388, %389, !dbg !57
  %391 = extractelement <2 x float> %289, i64 1, !dbg !57
  %392 = fadd float %391, %390, !dbg !57
  %393 = extractelement <2 x float> %289, i64 0, !dbg !57
  %394 = fadd float %393, %392, !dbg !57
  %395 = select i1 %34, float %394, float 0.000000e+00, !dbg !57
  %396 = extractelement <2 x float> %305, i64 0, !dbg !57
  %397 = extractelement <2 x float> %305, i64 1, !dbg !57
  %398 = fadd float %396, %397, !dbg !57
  %399 = extractelement <2 x float> %319, i64 1, !dbg !57
  %400 = fadd float %399, %398, !dbg !57
  %401 = extractelement <2 x float> %319, i64 0, !dbg !57
  %402 = fadd float %401, %400, !dbg !57
  %403 = select i1 %36, float %402, float 0.000000e+00, !dbg !57
  %404 = extractelement <2 x float> %340, i64 0, !dbg !57
  %405 = extractelement <2 x float> %340, i64 1, !dbg !57
  %406 = fadd float %404, %405, !dbg !57
  %407 = extractelement <2 x float> %357, i64 1, !dbg !57
  %408 = fadd float %407, %406, !dbg !57
  %409 = extractelement <2 x float> %357, i64 0, !dbg !57
  %410 = fadd float %409, %408, !dbg !57
  %411 = select i1 %38, float %410, float 0.000000e+00, !dbg !57
  %412 = extractelement <2 x float> %373, i64 0, !dbg !57
  %413 = extractelement <2 x float> %373, i64 1, !dbg !57
  %414 = fadd float %412, %413, !dbg !57
  %415 = extractelement <2 x float> %387, i64 1, !dbg !57
  %416 = fadd float %415, %414, !dbg !57
  %417 = extractelement <2 x float> %387, i64 0, !dbg !57
  %418 = fadd float %417, %416, !dbg !57
  %419 = select i1 %40, float %418, float 0.000000e+00, !dbg !57
  %420 = bitcast float %395 to i32, !dbg !62
  %421 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %420, i32 16, i32 31), !dbg !62
  %422 = bitcast i32 %421 to float, !dbg !62
  %423 = fadd float %395, %422, !dbg !57
  %424 = bitcast float %423 to i32, !dbg !62
  %425 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %424, i32 8, i32 31), !dbg !62
  %426 = bitcast i32 %425 to float, !dbg !62
  %427 = fadd float %423, %426, !dbg !57
  %428 = bitcast float %427 to i32, !dbg !62
  %429 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %428, i32 4, i32 31), !dbg !62
  %430 = bitcast i32 %429 to float, !dbg !62
  %431 = fadd float %427, %430, !dbg !57
  %432 = bitcast float %431 to i32, !dbg !62
  %433 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %432, i32 2, i32 31), !dbg !62
  %434 = bitcast i32 %433 to float, !dbg !62
  %435 = fadd float %431, %434, !dbg !57
  %436 = bitcast float %435 to i32, !dbg !62
  %437 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %436, i32 1, i32 31), !dbg !62
  %438 = bitcast i32 %437 to float, !dbg !62
  %439 = fadd float %435, %438, !dbg !57
  %440 = bitcast float %403 to i32, !dbg !62
  %441 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %440, i32 16, i32 31), !dbg !62
  %442 = bitcast i32 %441 to float, !dbg !62
  %443 = fadd float %403, %442, !dbg !57
  %444 = bitcast float %443 to i32, !dbg !62
  %445 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %444, i32 8, i32 31), !dbg !62
  %446 = bitcast i32 %445 to float, !dbg !62
  %447 = fadd float %443, %446, !dbg !57
  %448 = bitcast float %447 to i32, !dbg !62
  %449 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %448, i32 4, i32 31), !dbg !62
  %450 = bitcast i32 %449 to float, !dbg !62
  %451 = fadd float %447, %450, !dbg !57
  %452 = bitcast float %451 to i32, !dbg !62
  %453 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %452, i32 2, i32 31), !dbg !62
  %454 = bitcast i32 %453 to float, !dbg !62
  %455 = fadd float %451, %454, !dbg !57
  %456 = bitcast float %455 to i32, !dbg !62
  %457 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %456, i32 1, i32 31), !dbg !62
  %458 = bitcast i32 %457 to float, !dbg !62
  %459 = fadd float %455, %458, !dbg !57
  %460 = bitcast float %411 to i32, !dbg !62
  %461 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %460, i32 16, i32 31), !dbg !62
  %462 = bitcast i32 %461 to float, !dbg !62
  %463 = fadd float %411, %462, !dbg !57
  %464 = bitcast float %463 to i32, !dbg !62
  %465 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %464, i32 8, i32 31), !dbg !62
  %466 = bitcast i32 %465 to float, !dbg !62
  %467 = fadd float %463, %466, !dbg !57
  %468 = bitcast float %467 to i32, !dbg !62
  %469 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %468, i32 4, i32 31), !dbg !62
  %470 = bitcast i32 %469 to float, !dbg !62
  %471 = fadd float %467, %470, !dbg !57
  %472 = bitcast float %471 to i32, !dbg !62
  %473 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %472, i32 2, i32 31), !dbg !62
  %474 = bitcast i32 %473 to float, !dbg !62
  %475 = fadd float %471, %474, !dbg !57
  %476 = bitcast float %475 to i32, !dbg !62
  %477 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %476, i32 1, i32 31), !dbg !62
  %478 = bitcast i32 %477 to float, !dbg !62
  %479 = fadd float %475, %478, !dbg !57
  %480 = bitcast float %419 to i32, !dbg !62
  %481 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %480, i32 16, i32 31), !dbg !62
  %482 = bitcast i32 %481 to float, !dbg !62
  %483 = fadd float %419, %482, !dbg !57
  %484 = bitcast float %483 to i32, !dbg !62
  %485 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %484, i32 8, i32 31), !dbg !62
  %486 = bitcast i32 %485 to float, !dbg !62
  %487 = fadd float %483, %486, !dbg !57
  %488 = bitcast float %487 to i32, !dbg !62
  %489 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %488, i32 4, i32 31), !dbg !62
  %490 = bitcast i32 %489 to float, !dbg !62
  %491 = fadd float %487, %490, !dbg !57
  %492 = bitcast float %491 to i32, !dbg !62
  %493 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %492, i32 2, i32 31), !dbg !62
  %494 = bitcast i32 %493 to float, !dbg !62
  %495 = fadd float %491, %494, !dbg !57
  %496 = bitcast float %495 to i32, !dbg !62
  %497 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %496, i32 1, i32 31), !dbg !62
  %498 = bitcast i32 %497 to float, !dbg !62
  %499 = fadd float %495, %498, !dbg !57
  %500 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %22, !dbg !63
  %501 = bitcast float %439 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %500, <1 x i32> %501, i1 true) #5, !dbg !63
  %502 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %23, !dbg !63
  %503 = bitcast float %459 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %502, <1 x i32> %503, i1 true) #5, !dbg !63
  %504 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %24, !dbg !63
  %505 = bitcast float %479 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %504, <1 x i32> %505, i1 true) #5, !dbg !63
  %506 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %25, !dbg !63
  %507 = bitcast float %499 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %506, <1 x i32> %507, i1 true) #5, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %508 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !63
  %509 = load float, ptr addrspace(3) %508, align 4, !dbg !63
  %510 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %509, float 1.280000e+02) #5, !dbg !63
  %511 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %439, float 1.280000e+02) #5, !dbg !63
  %512 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %459, float 1.280000e+02) #5, !dbg !63
  %513 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %479, float 1.280000e+02) #5, !dbg !63
  %514 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %499, float 1.280000e+02) #5, !dbg !63
  %515 = fsub float %388, %511, !dbg !64
  %516 = fsub float %389, %511, !dbg !64
  %517 = fsub float %391, %511, !dbg !64
  %518 = fsub float %393, %511, !dbg !64
  %519 = fsub float %396, %512, !dbg !64
  %520 = fsub float %397, %512, !dbg !64
  %521 = fsub float %399, %512, !dbg !64
  %522 = fsub float %401, %512, !dbg !64
  %523 = fsub float %404, %513, !dbg !64
  %524 = fsub float %405, %513, !dbg !64
  %525 = fsub float %407, %513, !dbg !64
  %526 = fsub float %409, %513, !dbg !64
  %527 = fsub float %412, %514, !dbg !64
  %528 = fsub float %413, %514, !dbg !64
  %529 = fsub float %415, %514, !dbg !64
  %530 = fsub float %417, %514, !dbg !64
  %531 = fmul float %515, %515, !dbg !65
  %532 = fmul float %516, %516, !dbg !65
  %533 = fmul float %517, %517, !dbg !65
  %534 = fmul float %518, %518, !dbg !65
  %535 = fmul float %519, %519, !dbg !65
  %536 = fmul float %520, %520, !dbg !65
  %537 = fmul float %521, %521, !dbg !65
  %538 = fmul float %522, %522, !dbg !65
  %539 = fmul float %523, %523, !dbg !65
  %540 = fmul float %524, %524, !dbg !65
  %541 = fmul float %525, %525, !dbg !65
  %542 = fmul float %526, %526, !dbg !65
  %543 = fmul float %527, %527, !dbg !65
  %544 = fmul float %528, %528, !dbg !65
  %545 = fmul float %529, %529, !dbg !65
  %546 = fmul float %530, %530, !dbg !65
  %547 = fadd float %531, %532, !dbg !66
  %548 = fadd float %533, %547, !dbg !66
  %549 = fadd float %534, %548, !dbg !66
  %550 = select i1 %34, float %549, float 0.000000e+00, !dbg !66
  %551 = fadd float %535, %536, !dbg !66
  %552 = fadd float %537, %551, !dbg !66
  %553 = fadd float %538, %552, !dbg !66
  %554 = select i1 %36, float %553, float 0.000000e+00, !dbg !66
  %555 = fadd float %539, %540, !dbg !66
  %556 = fadd float %541, %555, !dbg !66
  %557 = fadd float %542, %556, !dbg !66
  %558 = select i1 %38, float %557, float 0.000000e+00, !dbg !66
  %559 = fadd float %543, %544, !dbg !66
  %560 = fadd float %545, %559, !dbg !66
  %561 = fadd float %546, %560, !dbg !66
  %562 = select i1 %40, float %561, float 0.000000e+00, !dbg !66
  %563 = bitcast float %550 to i32, !dbg !68
  %564 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %563, i32 16, i32 31), !dbg !68
  %565 = bitcast i32 %564 to float, !dbg !68
  %566 = fadd float %550, %565, !dbg !66
  %567 = bitcast float %566 to i32, !dbg !68
  %568 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %567, i32 8, i32 31), !dbg !68
  %569 = bitcast i32 %568 to float, !dbg !68
  %570 = fadd float %566, %569, !dbg !66
  %571 = bitcast float %570 to i32, !dbg !68
  %572 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %571, i32 4, i32 31), !dbg !68
  %573 = bitcast i32 %572 to float, !dbg !68
  %574 = fadd float %570, %573, !dbg !66
  %575 = bitcast float %574 to i32, !dbg !68
  %576 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %575, i32 2, i32 31), !dbg !68
  %577 = bitcast i32 %576 to float, !dbg !68
  %578 = fadd float %574, %577, !dbg !66
  %579 = bitcast float %578 to i32, !dbg !68
  %580 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %579, i32 1, i32 31), !dbg !68
  %581 = bitcast i32 %580 to float, !dbg !68
  %582 = fadd float %578, %581, !dbg !66
  %583 = bitcast float %554 to i32, !dbg !68
  %584 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %583, i32 16, i32 31), !dbg !68
  %585 = bitcast i32 %584 to float, !dbg !68
  %586 = fadd float %554, %585, !dbg !66
  %587 = bitcast float %586 to i32, !dbg !68
  %588 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %587, i32 8, i32 31), !dbg !68
  %589 = bitcast i32 %588 to float, !dbg !68
  %590 = fadd float %586, %589, !dbg !66
  %591 = bitcast float %590 to i32, !dbg !68
  %592 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %591, i32 4, i32 31), !dbg !68
  %593 = bitcast i32 %592 to float, !dbg !68
  %594 = fadd float %590, %593, !dbg !66
  %595 = bitcast float %594 to i32, !dbg !68
  %596 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %595, i32 2, i32 31), !dbg !68
  %597 = bitcast i32 %596 to float, !dbg !68
  %598 = fadd float %594, %597, !dbg !66
  %599 = bitcast float %598 to i32, !dbg !68
  %600 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %599, i32 1, i32 31), !dbg !68
  %601 = bitcast i32 %600 to float, !dbg !68
  %602 = fadd float %598, %601, !dbg !66
  %603 = bitcast float %558 to i32, !dbg !68
  %604 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %603, i32 16, i32 31), !dbg !68
  %605 = bitcast i32 %604 to float, !dbg !68
  %606 = fadd float %558, %605, !dbg !66
  %607 = bitcast float %606 to i32, !dbg !68
  %608 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %607, i32 8, i32 31), !dbg !68
  %609 = bitcast i32 %608 to float, !dbg !68
  %610 = fadd float %606, %609, !dbg !66
  %611 = bitcast float %610 to i32, !dbg !68
  %612 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %611, i32 4, i32 31), !dbg !68
  %613 = bitcast i32 %612 to float, !dbg !68
  %614 = fadd float %610, %613, !dbg !66
  %615 = bitcast float %614 to i32, !dbg !68
  %616 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %615, i32 2, i32 31), !dbg !68
  %617 = bitcast i32 %616 to float, !dbg !68
  %618 = fadd float %614, %617, !dbg !66
  %619 = bitcast float %618 to i32, !dbg !68
  %620 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %619, i32 1, i32 31), !dbg !68
  %621 = bitcast i32 %620 to float, !dbg !68
  %622 = fadd float %618, %621, !dbg !66
  %623 = bitcast float %562 to i32, !dbg !68
  %624 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %623, i32 16, i32 31), !dbg !68
  %625 = bitcast i32 %624 to float, !dbg !68
  %626 = fadd float %562, %625, !dbg !66
  %627 = bitcast float %626 to i32, !dbg !68
  %628 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %627, i32 8, i32 31), !dbg !68
  %629 = bitcast i32 %628 to float, !dbg !68
  %630 = fadd float %626, %629, !dbg !66
  %631 = bitcast float %630 to i32, !dbg !68
  %632 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %631, i32 4, i32 31), !dbg !68
  %633 = bitcast i32 %632 to float, !dbg !68
  %634 = fadd float %630, %633, !dbg !66
  %635 = bitcast float %634 to i32, !dbg !68
  %636 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %635, i32 2, i32 31), !dbg !68
  %637 = bitcast i32 %636 to float, !dbg !68
  %638 = fadd float %634, %637, !dbg !66
  %639 = bitcast float %638 to i32, !dbg !68
  %640 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %639, i32 1, i32 31), !dbg !68
  %641 = bitcast i32 %640 to float, !dbg !68
  %642 = fadd float %638, %641, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %643 = bitcast float %582 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %500, <1 x i32> %643, i1 true) #5, !dbg !69
  %644 = bitcast float %602 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %502, <1 x i32> %644, i1 true) #5, !dbg !69
  %645 = bitcast float %622 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %504, <1 x i32> %645, i1 true) #5, !dbg !69
  %646 = bitcast float %642 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %506, <1 x i32> %646, i1 true) #5, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %647 = load float, ptr addrspace(3) %508, align 4, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %500, <1 x i32> %643, i1 true) #5, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %502, <1 x i32> %644, i1 true) #5, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %504, <1 x i32> %645, i1 true) #5, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %506, <1 x i32> %646, i1 true) #5, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %648 = load i32, ptr addrspace(3) %508, align 4, !dbg !70
  %649 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %647, float 1.280000e+02) #5, !dbg !71
  %650 = fadd float %649, 0x3EE4F8B580000000, !dbg !72
  %651 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !69
  %.not.i = icmp eq i32 %651, 0, !dbg !69
  br i1 %.not.i, label %654, label %652, !dbg !69

652:                                              ; preds = %11
  %653 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %650), !dbg !69
  br label %__nv_rsqrtf.exit, !dbg !69

654:                                              ; preds = %11
  %655 = tail call float @llvm.nvvm.rsqrt.approx.f(float %650), !dbg !69
  br label %__nv_rsqrtf.exit, !dbg !69

__nv_rsqrtf.exit:                                 ; preds = %652, %654
  %.0.i = phi float [ %653, %652 ], [ %655, %654 ], !dbg !69
  %656 = or disjoint i32 %13, %16, !dbg !16
  %657 = icmp slt i32 %656, 128, !dbg !18
  %658 = getelementptr float, ptr addrspace(1) %5, i64 %54, !dbg !73
  %659 = getelementptr float, ptr addrspace(1) %5, i64 %56, !dbg !73
  %660 = getelementptr float, ptr addrspace(1) %5, i64 %58, !dbg !73
  %661 = getelementptr float, ptr addrspace(1) %5, i64 %60, !dbg !73
  %662 = bitcast float %388 to i32, !dbg !74
  %663 = bitcast float %389 to i32, !dbg !74
  %664 = bitcast float %391 to i32, !dbg !74
  %665 = bitcast float %393 to i32, !dbg !74
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %662, i32 %663, i32 %664, i32 %665, ptr addrspace(1) %658, i1 %34) #5, !dbg !74
  %666 = bitcast float %396 to i32, !dbg !74
  %667 = bitcast float %397 to i32, !dbg !74
  %668 = bitcast float %399 to i32, !dbg !74
  %669 = bitcast float %401 to i32, !dbg !74
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %666, i32 %667, i32 %668, i32 %669, ptr addrspace(1) %659, i1 %36) #5, !dbg !74
  %670 = bitcast float %404 to i32, !dbg !74
  %671 = bitcast float %405 to i32, !dbg !74
  %672 = bitcast float %407 to i32, !dbg !74
  %673 = bitcast float %409 to i32, !dbg !74
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %670, i32 %671, i32 %672, i32 %673, ptr addrspace(1) %660, i1 %38) #5, !dbg !74
  %674 = bitcast float %412 to i32, !dbg !74
  %675 = bitcast float %413 to i32, !dbg !74
  %676 = bitcast float %415 to i32, !dbg !74
  %677 = bitcast float %417 to i32, !dbg !74
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %674, i32 %675, i32 %676, i32 %677, ptr addrspace(1) %661, i1 %40) #5, !dbg !74
  %678 = sext i32 %656 to i64, !dbg !75
  %679 = getelementptr float, ptr addrspace(1) %8, i64 %678, !dbg !75
  %680 = and i32 %14, 224, !dbg !76
  %681 = icmp eq i32 %680, 0, !dbg !76
  %682 = bitcast float %.0.i to i32, !dbg !76
  %683 = and i1 %681, %657, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %682, ptr addrspace(1) %679, i1 %683) #5, !dbg !76
  %684 = getelementptr float, ptr addrspace(1) %6, i64 %678, !dbg !77
  %685 = bitcast float %510 to i32, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %685, ptr addrspace(1) %684, i1 %683) #5, !dbg !78
  %686 = getelementptr float, ptr addrspace(1) %7, i64 %678, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %648, ptr addrspace(1) %686, i1 %683) #5, !dbg !80
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvrjszbwmee3ndhwzicg77dkpdoe57l4hxi6qiya6hgzo4czsjbe.py", directory: "inductor_cache/vr")
!4 = !{ptr @triton_per_fused_add_cat_native_group_norm_32, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_cat_native_group_norm_32, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_cat_native_group_norm_32", linkageName: "triton_per_fused_add_cat_native_group_norm_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 26, column: 34, scope: !7)
!14 = !DILocation(line: 29, column: 19, scope: !7)
!15 = !DILocation(line: 47, column: 49, scope: !7)
!16 = !DILocation(line: 24, column: 23, scope: !7)
!17 = !DILocation(line: 35, column: 40, scope: !7)
!18 = !DILocation(line: 25, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 19, scope: !7)
!21 = !DILocation(line: 35, column: 36, scope: !7)
!22 = !DILocation(line: 35, column: 31, scope: !7)
!23 = !DILocation(line: 35, column: 45, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 36, column: 45, scope: !7)
!26 = !DILocation(line: 37, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 16, scope: !7)
!28 = !DILocation(line: 42, column: 39, scope: !7)
!29 = !DILocation(line: 41, column: 18, scope: !7)
!30 = !DILocation(line: 42, column: 57, scope: !7)
!31 = !DILocation(line: 42, column: 35, scope: !7)
!32 = !DILocation(line: 42, column: 52, scope: !7)
!33 = !DILocation(line: 42, column: 30, scope: !7)
!34 = !DILocation(line: 42, column: 69, scope: !7)
!35 = !DILocation(line: 42, column: 62, scope: !7)
!36 = !DILocation(line: 46, column: 18, scope: !7)
!37 = !DILocation(line: 47, column: 54, scope: !7)
!38 = !DILocation(line: 47, column: 40, scope: !7)
!39 = !DILocation(line: 47, column: 67, scope: !7)
!40 = !DILocation(line: 47, column: 36, scope: !7)
!41 = !DILocation(line: 47, column: 62, scope: !7)
!42 = !DILocation(line: 47, column: 31, scope: !7)
!43 = !DILocation(line: 47, column: 79, scope: !7)
!44 = !DILocation(line: 47, column: 72, scope: !7)
!45 = !DILocation(line: 48, column: 20, scope: !7)
!46 = !DILocation(line: 51, column: 49, scope: !7)
!47 = !DILocation(line: 51, column: 54, scope: !7)
!48 = !DILocation(line: 51, column: 40, scope: !7)
!49 = !DILocation(line: 51, column: 62, scope: !7)
!50 = !DILocation(line: 51, column: 31, scope: !7)
!51 = !DILocation(line: 51, column: 80, scope: !7)
!52 = !DILocation(line: 51, column: 72, scope: !7)
!53 = !DILocation(line: 53, column: 33, scope: !7)
!54 = !DILocation(line: 54, column: 20, scope: !7)
!55 = !DILocation(line: 55, column: 20, scope: !7)
!56 = !DILocation(line: 52, column: 34, scope: !7)
!57 = !DILocation(line: 256, column: 15, scope: !58, inlinedAt: !61)
!58 = distinct !DILexicalBlockFile(scope: !60, file: !59, discriminator: 0)
!59 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!60 = distinct !DILexicalBlockFile(scope: !7, file: !59, discriminator: 0)
!61 = !DILocation(line: 60, column: 26, scope: !7)
!62 = !DILocation(line: 267, column: 36, scope: !60, inlinedAt: !61)
!63 = !DILocation(line: 63, column: 20, scope: !7)
!64 = !DILocation(line: 64, column: 20, scope: !7)
!65 = !DILocation(line: 65, column: 20, scope: !7)
!66 = !DILocation(line: 256, column: 15, scope: !58, inlinedAt: !67)
!67 = !DILocation(line: 68, column: 26, scope: !7)
!68 = !DILocation(line: 267, column: 36, scope: !60, inlinedAt: !67)
!69 = !DILocation(line: 73, column: 28, scope: !7)
!70 = !DILocation(line: 68, column: 29, scope: !7)
!71 = !DILocation(line: 70, column: 20, scope: !7)
!72 = !DILocation(line: 72, column: 20, scope: !7)
!73 = !DILocation(line: 74, column: 25, scope: !7)
!74 = !DILocation(line: 74, column: 46, scope: !7)
!75 = !DILocation(line: 75, column: 25, scope: !7)
!76 = !DILocation(line: 75, column: 37, scope: !7)
!77 = !DILocation(line: 76, column: 25, scope: !7)
!78 = !DILocation(line: 76, column: 37, scope: !7)
!79 = !DILocation(line: 77, column: 25, scope: !7)
!80 = !DILocation(line: 77, column: 37, scope: !7)
!81 = !DILocation(line: 77, column: 4, scope: !7)
