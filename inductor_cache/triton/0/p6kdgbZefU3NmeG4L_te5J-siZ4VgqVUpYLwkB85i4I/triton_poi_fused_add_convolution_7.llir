; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %13 = shl i32 %12, 4, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = lshr i32 %14, 1, !dbg !12
  %16 = and i32 %15, 15, !dbg !12
  %17 = and i32 %14, 1, !dbg !12
  %18 = shl nuw nsw i32 %17, 1, !dbg !12
  %19 = shl i32 %14, 1, !dbg !12
  %20 = and i32 %19, 14, !dbg !12
  %21 = or disjoint i32 %13, %16, !dbg !13
  %22 = or disjoint i32 %13, %20, !dbg !13
  %23 = icmp slt i32 %21, 16, !dbg !14
  %24 = icmp slt i32 %22, 16, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %26 = shl i32 %25, 2, !dbg !16
  %.lobit12 = lshr i32 %14, 3, !dbg !17
  %27 = and i32 %.lobit12, 3, !dbg !17
  %28 = or disjoint i32 %26, %18, !dbg !18
  %29 = or disjoint i32 %26, %27, !dbg !18
  %30 = icmp slt i32 %28, 4, !dbg !19
  %31 = icmp slt i32 %29, 4, !dbg !19
  %.frozen = freeze i32 %22, !dbg !20
  %32 = sdiv i32 %.frozen, 4, !dbg !20
  %33 = mul i32 %32, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %33, !dbg !21
  %34 = srem i32 %21, 4, !dbg !21
  %35 = shl i32 %21, 2, !dbg !22
  %36 = add i32 %28, %35, !dbg !23
  %37 = sext i32 %36 to i64, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !24
  %39 = and i1 %23, %30, !dbg !25
  %40 = and i1 %24, %31, !dbg !25
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %39) #2, !dbg !26
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !26
  %43 = extractvalue { i32, i32 } %41, 1, !dbg !26
  %44 = bitcast i32 %42 to float, !dbg !26
  %45 = bitcast i32 %43 to float, !dbg !26
  %46 = sext i32 %34 to i64, !dbg !27
  %47 = getelementptr float, ptr addrspace(1) %4, i64 %46, !dbg !27
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %23) #2, !dbg !28
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %23) #2, !dbg !28
  %50 = bitcast i32 %49 to float, !dbg !28
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !29
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 %39) #2, !dbg !30
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !30
  %54 = extractvalue { i32, i32 } %52, 1, !dbg !30
  %55 = bitcast i32 %53 to float, !dbg !30
  %56 = bitcast i32 %54 to float, !dbg !30
  %57 = getelementptr float, ptr addrspace(1) %5, i64 %46, !dbg !31
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %23) #2, !dbg !32
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %23) #2, !dbg !32
  %60 = bitcast i32 %59 to float, !dbg !32
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !33
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 %39) #2, !dbg !34
  %63 = extractvalue { i32, i32 } %62, 0, !dbg !34
  %64 = extractvalue { i32, i32 } %62, 1, !dbg !34
  %65 = bitcast i32 %63 to float, !dbg !34
  %66 = bitcast i32 %64 to float, !dbg !34
  %67 = getelementptr float, ptr addrspace(1) %6, i64 %46, !dbg !35
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %23) #2, !dbg !36
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %23) #2, !dbg !36
  %70 = bitcast i32 %69 to float, !dbg !36
  %71 = shl i32 %29, 2, !dbg !37
  %72 = add i32 %71, %.decomposed, !dbg !38
  %73 = shl i32 %32, 4, !dbg !39
  %74 = add i32 %72, %73, !dbg !40
  %75 = sext i32 %74 to i64, !dbg !41
  %76 = getelementptr float, ptr addrspace(1) %3, i64 %75, !dbg !41
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %76, i1 %40) #2, !dbg !42
  %78 = extractvalue { i32, i32 } %77, 0, !dbg !42
  %79 = extractvalue { i32, i32 } %77, 1, !dbg !42
  %80 = bitcast i32 %78 to float, !dbg !42
  %81 = bitcast i32 %79 to float, !dbg !42
  %82 = sext i32 %.decomposed to i64, !dbg !43
  %83 = getelementptr float, ptr addrspace(1) %7, i64 %82, !dbg !43
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %83, i1 %24) #2, !dbg !44
  %85 = extractvalue { i32, i32 } %84, 0, !dbg !44
  %86 = extractvalue { i32, i32 } %84, 1, !dbg !44
  %87 = bitcast i32 %85 to float, !dbg !44
  %88 = bitcast i32 %86 to float, !dbg !44
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %8, i1 true) #2, !dbg !45
  %90 = bitcast i32 %89 to float, !dbg !45
  %91 = getelementptr i8, ptr addrspace(1) %8, i64 4, !dbg !46
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #2, !dbg !47
  %93 = bitcast i32 %92 to float, !dbg !47
  %94 = getelementptr i8, ptr addrspace(1) %8, i64 8, !dbg !48
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #2, !dbg !49
  %96 = bitcast i32 %95 to float, !dbg !49
  %97 = fadd float %44, %50, !dbg !50
  %98 = fadd float %45, %50, !dbg !50
  %99 = fadd float %55, %60, !dbg !51
  %100 = fadd float %56, %60, !dbg !51
  %101 = fadd float %65, %70, !dbg !52
  %102 = fadd float %66, %70, !dbg !52
  %103 = fadd float %80, %87, !dbg !53
  %104 = fadd float %81, %88, !dbg !53
  %105 = fmul float %97, %90, !dbg !54
  %106 = fmul float %98, %90, !dbg !54
  %107 = fmul float %99, %93, !dbg !55
  %108 = fmul float %100, %93, !dbg !55
  %109 = fadd float %105, %107, !dbg !56
  %110 = fadd float %106, %108, !dbg !56
  %111 = fmul float %101, %96, !dbg !57
  %112 = fmul float %102, %96, !dbg !57
  %113 = fadd float %109, %111, !dbg !58
  %114 = fadd float %110, %112, !dbg !58
  %115 = shl nuw nsw i32 %17, 5, !dbg !58
  %116 = or disjoint i32 %115, %16, !dbg !58
  %117 = and i32 %19, 62, !dbg !58
  %.idx = shl nuw nsw i32 %17, 4, !dbg !58
  %118 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !58
  %119 = getelementptr inbounds float, ptr addrspace(3) %118, i32 %116, !dbg !58
  %120 = bitcast float %113 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #2, !dbg !58
  %121 = or disjoint i32 %116, 16, !dbg !58
  %122 = lshr i32 %121, 3, !dbg !58
  %123 = and i32 %122, 6, !dbg !58
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %123, !dbg !58
  %125 = getelementptr inbounds float, ptr addrspace(3) %124, i32 %121, !dbg !58
  %126 = bitcast float %114 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #2, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %127 = lshr i32 %19, 3, !dbg !58
  %128 = and i32 %127, 6, !dbg !58
  %129 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %128, !dbg !58
  %130 = getelementptr inbounds float, ptr addrspace(3) %129, i32 %117, !dbg !58
  %131 = load float, ptr addrspace(3) %130, align 8, !dbg !58
  %132 = getelementptr inbounds i8, ptr addrspace(3) %130, i32 4, !dbg !58
  %133 = load float, ptr addrspace(3) %132, align 4, !dbg !58
  %134 = fadd float %103, %131, !dbg !59
  %135 = fadd float %104, %133, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %136 = bitcast float %97 to i32, !dbg !61
  %137 = bitcast float %98 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %136, i32 %137, ptr addrspace(1) %38, i1 %39) #2, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %138 = bitcast float %99 to i32, !dbg !63
  %139 = bitcast float %100 to i32, !dbg !63
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %138, i32 %139, ptr addrspace(1) %51, i1 %39) #2, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %140 = bitcast float %101 to i32, !dbg !65
  %141 = bitcast float %102 to i32, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %140, i32 %141, ptr addrspace(1) %61, i1 %39) #2, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %142 = bitcast float %134 to i32, !dbg !67
  %143 = bitcast float %135 to i32, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %142, i32 %143, ptr addrspace(1) %76, i1 %40) #2, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3eu5qgo355wzomlv2sjsnpnb34hz2l7cow53aei7blq7fkizck4.py", directory: "inductor_cache/3e")
!4 = !{ptr @triton_poi_fused_add_convolution_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_7, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_7", linkageName: "triton_poi_fused_add_convolution_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 41, scope: !7)
!23 = !DILocation(line: 32, column: 39, scope: !7)
!24 = !DILocation(line: 32, column: 34, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 32, column: 46, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 34, scope: !7)
!30 = !DILocation(line: 34, column: 46, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 35, scope: !7)
!33 = !DILocation(line: 36, column: 34, scope: !7)
!34 = !DILocation(line: 36, column: 46, scope: !7)
!35 = !DILocation(line: 37, column: 30, scope: !7)
!36 = !DILocation(line: 37, column: 35, scope: !7)
!37 = !DILocation(line: 38, column: 41, scope: !7)
!38 = !DILocation(line: 38, column: 39, scope: !7)
!39 = !DILocation(line: 38, column: 49, scope: !7)
!40 = !DILocation(line: 38, column: 46, scope: !7)
!41 = !DILocation(line: 38, column: 34, scope: !7)
!42 = !DILocation(line: 38, column: 54, scope: !7)
!43 = !DILocation(line: 39, column: 31, scope: !7)
!44 = !DILocation(line: 39, column: 36, scope: !7)
!45 = !DILocation(line: 40, column: 20, scope: !7)
!46 = !DILocation(line: 42, column: 31, scope: !7)
!47 = !DILocation(line: 42, column: 20, scope: !7)
!48 = !DILocation(line: 44, column: 31, scope: !7)
!49 = !DILocation(line: 44, column: 20, scope: !7)
!50 = !DILocation(line: 46, column: 18, scope: !7)
!51 = !DILocation(line: 47, column: 18, scope: !7)
!52 = !DILocation(line: 48, column: 18, scope: !7)
!53 = !DILocation(line: 49, column: 19, scope: !7)
!54 = !DILocation(line: 50, column: 20, scope: !7)
!55 = !DILocation(line: 51, column: 20, scope: !7)
!56 = !DILocation(line: 52, column: 20, scope: !7)
!57 = !DILocation(line: 53, column: 20, scope: !7)
!58 = !DILocation(line: 54, column: 20, scope: !7)
!59 = !DILocation(line: 55, column: 20, scope: !7)
!60 = !DILocation(line: 56, column: 4, scope: !7)
!61 = !DILocation(line: 57, column: 46, scope: !7)
!62 = !DILocation(line: 58, column: 4, scope: !7)
!63 = !DILocation(line: 59, column: 46, scope: !7)
!64 = !DILocation(line: 60, column: 4, scope: !7)
!65 = !DILocation(line: 61, column: 46, scope: !7)
!66 = !DILocation(line: 62, column: 4, scope: !7)
!67 = !DILocation(line: 63, column: 55, scope: !7)
!68 = !DILocation(line: 63, column: 4, scope: !7)
