#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [1], order = [0]}>
#loc = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 1 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_max_pool2d_with_indices_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":19:0), %arg2: !tt.ptr<i8> {tt.divisibility = 16 : i32} loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0> : tensor<16xi8, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<8> : tensor<16xi8, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<7> : tensor<16xi8, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<6> : tensor<16xi8, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<5> : tensor<16xi8, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<4> : tensor<16xi8, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<3> : tensor<16xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<2> : tensor<16xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<1> : tensor<16xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<0xFF800000> : tensor<16xf32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<4> : tensor<16xi32, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<16> : tensor<16xi32, #blocked> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<16xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<16xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_10 : tensor<16xi32, #blocked> loc(#loc6)
    %6 = arith.muli %4, %cst_9 : tensor<16xi32, #blocked> loc(#loc7)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<16x!tt.ptr<f32>, #blocked> loc(#loc8)
    %8 = tt.addptr %7, %6 : tensor<16x!tt.ptr<f32>, #blocked>, tensor<16xi32, #blocked> loc(#loc8)
    %9 = tt.load %8, %5, %cst_8 evictionPolicy = evict_last : tensor<16x!tt.ptr<f32>, #blocked> loc(#loc9)
    %10 = arith.cmpf ogt, %9, %cst_8 : tensor<16xf32, #blocked> loc(#loc38)
    %11 = arith.cmpf une, %9, %9 : tensor<16xf32, #blocked> loc(#loc39)
    %12 = arith.ori %10, %11 : tensor<16xi1, #blocked> loc(#loc40)
    %13 = arith.select %12, %9, %cst_8 : tensor<16xi1, #blocked>, tensor<16xf32, #blocked> loc(#loc41)
    %14 = arith.addi %6, %cst_7 : tensor<16xi32, #blocked> loc(#loc15)
    %15 = tt.addptr %7, %14 : tensor<16x!tt.ptr<f32>, #blocked>, tensor<16xi32, #blocked> loc(#loc16)
    %16 = tt.load %15, %5, %cst_8 evictionPolicy = evict_last : tensor<16x!tt.ptr<f32>, #blocked> loc(#loc17)
    %17 = arith.cmpf ogt, %16, %13 : tensor<16xf32, #blocked> loc(#loc42)
    %18 = arith.cmpf une, %16, %16 : tensor<16xf32, #blocked> loc(#loc43)
    %19 = arith.ori %17, %18 : tensor<16xi1, #blocked> loc(#loc44)
    %20 = arith.select %19, %16, %13 : tensor<16xi1, #blocked>, tensor<16xf32, #blocked> loc(#loc45)
    %21 = arith.cmpf ogt, %cst_8, %20 : tensor<16xf32, #blocked> loc(#loc46)
    %22 = arith.select %21, %cst_8, %20 : tensor<16xi1, #blocked>, tensor<16xf32, #blocked> loc(#loc47)
    %23 = arith.addi %6, %cst_6 : tensor<16xi32, #blocked> loc(#loc20)
    %24 = tt.addptr %7, %23 : tensor<16x!tt.ptr<f32>, #blocked>, tensor<16xi32, #blocked> loc(#loc21)
    %25 = tt.load %24, %5, %cst_8 evictionPolicy = evict_last : tensor<16x!tt.ptr<f32>, #blocked> loc(#loc22)
    %26 = arith.cmpf ogt, %25, %22 : tensor<16xf32, #blocked> loc(#loc48)
    %27 = arith.cmpf une, %25, %25 : tensor<16xf32, #blocked> loc(#loc49)
    %28 = arith.ori %26, %27 : tensor<16xi1, #blocked> loc(#loc50)
    %29 = arith.select %28, %25, %22 : tensor<16xi1, #blocked>, tensor<16xf32, #blocked> loc(#loc51)
    %30 = arith.addi %6, %cst_5 : tensor<16xi32, #blocked> loc(#loc24)
    %31 = tt.addptr %7, %30 : tensor<16x!tt.ptr<f32>, #blocked>, tensor<16xi32, #blocked> loc(#loc25)
    %32 = tt.load %31, %5, %cst_8 evictionPolicy = evict_last : tensor<16x!tt.ptr<f32>, #blocked> loc(#loc26)
    %33 = arith.cmpf ogt, %32, %29 : tensor<16xf32, #blocked> loc(#loc52)
    %34 = arith.cmpf une, %32, %32 : tensor<16xf32, #blocked> loc(#loc53)
    %35 = arith.ori %33, %34 : tensor<16xi1, #blocked> loc(#loc54)
    %36 = arith.select %35, %32, %29 : tensor<16xi1, #blocked>, tensor<16xf32, #blocked> loc(#loc55)
    %37 = arith.select %10, %cst_4, %cst : tensor<16xi1, #blocked>, tensor<16xi8, #blocked> loc(#loc28)
    %38 = arith.select %17, %cst_3, %37 : tensor<16xi1, #blocked>, tensor<16xi8, #blocked> loc(#loc29)
    %39 = arith.select %21, %cst_2, %38 : tensor<16xi1, #blocked>, tensor<16xi8, #blocked> loc(#loc30)
    %40 = arith.select %26, %cst_1, %39 : tensor<16xi1, #blocked>, tensor<16xi8, #blocked> loc(#loc31)
    %41 = arith.select %33, %cst_0, %40 : tensor<16xi1, #blocked>, tensor<16xi8, #blocked> loc(#loc32)
    %42 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<16x!tt.ptr<f32>, #blocked> loc(#loc33)
    %43 = tt.addptr %42, %4 : tensor<16x!tt.ptr<f32>, #blocked>, tensor<16xi32, #blocked> loc(#loc33)
    tt.store %43, %36, %5 : tensor<16x!tt.ptr<f32>, #blocked> loc(#loc34)
    %44 = tt.splat %arg2 : !tt.ptr<i8> -> tensor<16x!tt.ptr<i8>, #blocked> loc(#loc35)
    %45 = tt.addptr %44, %4 : tensor<16x!tt.ptr<i8>, #blocked>, tensor<16xi32, #blocked> loc(#loc35)
    tt.store %45, %41, %5 : tensor<16x!tt.ptr<i8>, #blocked> loc(#loc36)
    tt.return loc(#loc37)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":21:28)
#loc3 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":21:33)
#loc4 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":22:36)
#loc5 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":22:23)
#loc6 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":23:21)
#loc7 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":50:33)
#loc8 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":50:31)
#loc9 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":50:38)
#loc10 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc11 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":51:42)
#loc12 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc13 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc14 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc15 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":53:35)
#loc16 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":53:31)
#loc17 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":53:42)
#loc18 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":54:42)
#loc19 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":57:42)
#loc20 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":59:35)
#loc21 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":59:31)
#loc22 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":59:42)
#loc23 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":60:42)
#loc24 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":62:35)
#loc25 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":62:31)
#loc26 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":62:42)
#loc27 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":63:42)
#loc28 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":76:35)
#loc29 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":79:35)
#loc30 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":82:35)
#loc31 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":85:35)
#loc32 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":88:35)
#loc33 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":89:25)
#loc34 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":89:37)
#loc35 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":90:25)
#loc36 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":90:37)
#loc37 = loc("inductor_cache/ih/cihonztf2yxk2nbgxsyk4rpyjhrtzhaanw7zfygimysmun6nugw6.py":90:4)
#loc38 = loc(callsite(#loc10 at #loc11))
#loc39 = loc(callsite(#loc12 at #loc11))
#loc40 = loc(callsite(#loc13 at #loc11))
#loc41 = loc(callsite(#loc14 at #loc11))
#loc42 = loc(callsite(#loc10 at #loc18))
#loc43 = loc(callsite(#loc12 at #loc18))
#loc44 = loc(callsite(#loc13 at #loc18))
#loc45 = loc(callsite(#loc14 at #loc18))
#loc46 = loc(callsite(#loc10 at #loc19))
#loc47 = loc(callsite(#loc14 at #loc19))
#loc48 = loc(callsite(#loc10 at #loc23))
#loc49 = loc(callsite(#loc12 at #loc23))
#loc50 = loc(callsite(#loc13 at #loc23))
#loc51 = loc(callsite(#loc14 at #loc23))
#loc52 = loc(callsite(#loc10 at #loc27))
#loc53 = loc(callsite(#loc12 at #loc27))
#loc54 = loc(callsite(#loc13 at #loc27))
#loc55 = loc(callsite(#loc14 at #loc27))
