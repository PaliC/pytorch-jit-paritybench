; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_leaky_relu_mul_sub_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %17 = sdiv i32 %.frozen, 4, !dbg !14
  %18 = srem i32 %17, 4, !dbg !15
  %19 = mul i32 %17, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %20 = sdiv i32 %16, 16, !dbg !17
  %21 = sext i32 %18 to i64, !dbg !18
  %22 = getelementptr i64, ptr addrspace(1) %1, i64 %21, !dbg !18
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 true) #1, !dbg !19
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 true) #1, !dbg !19
  %25 = sext i32 %.decomposed to i64, !dbg !20
  %26 = getelementptr i64, ptr addrspace(1) %2, i64 %25, !dbg !20
  %27 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !21
  %28 = extractvalue { i64, i64 } %27, 0, !dbg !21
  %29 = extractvalue { i64, i64 } %27, 1, !dbg !21
  %30 = getelementptr i64, ptr addrspace(1) %5, i64 %25, !dbg !22
  %31 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !23
  %32 = extractvalue { i64, i64 } %31, 0, !dbg !23
  %33 = extractvalue { i64, i64 } %31, 1, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !24
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !25
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !25
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !25
  %38 = getelementptr i64, ptr addrspace(1) %7, i64 %21, !dbg !26
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !27
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %8, i64 %21, !dbg !28
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !29
  %43 = bitcast i32 %42 to float, !dbg !29
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !29
  %45 = bitcast i32 %44 to float, !dbg !29
  %46 = lshr i64 %23, 62, !dbg !30
  %47 = and i64 %46, 2, !dbg !30
  %48 = add i64 %47, %23, !dbg !30
  %49 = lshr i64 %28, 62, !dbg !31
  %50 = and i64 %49, 2, !dbg !31
  %51 = add i64 %50, %28, !dbg !31
  %52 = lshr i64 %29, 62, !dbg !31
  %53 = and i64 %52, 2, !dbg !31
  %54 = add i64 %53, %29, !dbg !31
  %55 = shl i64 %48, 1, !dbg !32
  %56 = shl nsw i32 %20, 2, !dbg !33
  %57 = sext i32 %56 to i64, !dbg !34
  %58 = add i64 %55, %57, !dbg !35
  %59 = add i64 %58, %51, !dbg !34
  %60 = add i64 %58, %54, !dbg !34
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !36
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !36
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !37
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !37
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %59, !dbg !38
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %60, !dbg !38
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !39
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !39
  %69 = lshr i64 %32, 62, !dbg !40
  %70 = and i64 %69, 2, !dbg !40
  %71 = add i64 %70, %32, !dbg !40
  %72 = lshr i64 %33, 62, !dbg !40
  %73 = and i64 %72, 2, !dbg !40
  %74 = add i64 %73, %33, !dbg !40
  %75 = add i64 %58, %71, !dbg !41
  %76 = add i64 %58, %74, !dbg !41
  %77 = getelementptr float, ptr addrspace(1) %3, i64 %75, !dbg !42
  %78 = getelementptr float, ptr addrspace(1) %3, i64 %76, !dbg !42
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #1, !dbg !43
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #1, !dbg !43
  %81 = getelementptr float, ptr addrspace(1) %4, i64 %75, !dbg !44
  %82 = getelementptr float, ptr addrspace(1) %4, i64 %76, !dbg !44
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !45
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !45
  %85 = lshr i64 %39, 62, !dbg !46
  %86 = and i64 %85, 2, !dbg !46
  %87 = add i64 %86, %39, !dbg !46
  %88 = shl i64 %87, 1, !dbg !47
  %89 = add i64 %88, %57, !dbg !48
  %90 = add i64 %89, %51, !dbg !49
  %91 = add i64 %89, %54, !dbg !49
  %92 = getelementptr float, ptr addrspace(1) %3, i64 %90, !dbg !50
  %93 = getelementptr float, ptr addrspace(1) %3, i64 %91, !dbg !50
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !51
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !51
  %96 = getelementptr float, ptr addrspace(1) %4, i64 %90, !dbg !52
  %97 = getelementptr float, ptr addrspace(1) %4, i64 %91, !dbg !52
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !53
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #1, !dbg !53
  %100 = add i64 %89, %71, !dbg !54
  %101 = add i64 %89, %74, !dbg !54
  %102 = getelementptr float, ptr addrspace(1) %3, i64 %100, !dbg !55
  %103 = getelementptr float, ptr addrspace(1) %3, i64 %101, !dbg !55
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #1, !dbg !56
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #1, !dbg !56
  %106 = getelementptr float, ptr addrspace(1) %4, i64 %100, !dbg !57
  %107 = getelementptr float, ptr addrspace(1) %4, i64 %101, !dbg !57
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !58
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !58
  %110 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !51
  %111 = insertelement <2 x i32> %110, i32 %63, i64 1, !dbg !51
  %112 = bitcast <2 x i32> %111 to <2 x float>, !dbg !51
  %113 = fcmp ogt <2 x float> %112, zeroinitializer, !dbg !59
  %114 = fmul <2 x float> %112, splat (float 0x3FC99999A0000000), !dbg !60
  %115 = select <2 x i1> %113, <2 x float> %112, <2 x float> %114, !dbg !61
  %116 = insertelement <2 x i32> poison, i32 %98, i64 0, !dbg !53
  %117 = insertelement <2 x i32> %116, i32 %67, i64 1, !dbg !53
  %118 = bitcast <2 x i32> %117 to <2 x float>, !dbg !53
  %119 = fadd <2 x float> %115, %118, !dbg !62
  %120 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !56
  %121 = insertelement <2 x i32> %120, i32 %79, i64 1, !dbg !56
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !56
  %123 = fcmp ogt <2 x float> %122, zeroinitializer, !dbg !63
  %124 = fmul <2 x float> %122, splat (float 0x3FC99999A0000000), !dbg !64
  %125 = select <2 x i1> %123, <2 x float> %122, <2 x float> %124, !dbg !65
  %126 = insertelement <2 x i32> poison, i32 %108, i64 0, !dbg !58
  %127 = insertelement <2 x i32> %126, i32 %83, i64 1, !dbg !58
  %128 = bitcast <2 x i32> %127 to <2 x float>, !dbg !58
  %129 = fadd <2 x float> %125, %128, !dbg !66
  %130 = fsub <2 x float> %129, %119, !dbg !67
  %131 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !68
  %132 = bitcast <2 x i32> %131 to <2 x float>, !dbg !68
  %133 = shufflevector <2 x float> %132, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %134 = fmul <2 x float> %130, %133, !dbg !68
  %135 = fadd <2 x float> %119, %134, !dbg !69
  %136 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !51
  %137 = insertelement <2 x i32> %136, i32 %64, i64 1, !dbg !51
  %138 = bitcast <2 x i32> %137 to <2 x float>, !dbg !51
  %139 = fcmp ogt <2 x float> %138, zeroinitializer, !dbg !59
  %140 = fmul <2 x float> %138, splat (float 0x3FC99999A0000000), !dbg !60
  %141 = select <2 x i1> %139, <2 x float> %138, <2 x float> %140, !dbg !61
  %142 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !53
  %143 = insertelement <2 x i32> %142, i32 %68, i64 1, !dbg !53
  %144 = bitcast <2 x i32> %143 to <2 x float>, !dbg !53
  %145 = fadd <2 x float> %141, %144, !dbg !62
  %146 = insertelement <2 x i32> poison, i32 %105, i64 0, !dbg !56
  %147 = insertelement <2 x i32> %146, i32 %80, i64 1, !dbg !56
  %148 = bitcast <2 x i32> %147 to <2 x float>, !dbg !56
  %149 = fcmp ogt <2 x float> %148, zeroinitializer, !dbg !63
  %150 = fmul <2 x float> %148, splat (float 0x3FC99999A0000000), !dbg !64
  %151 = select <2 x i1> %149, <2 x float> %148, <2 x float> %150, !dbg !65
  %152 = insertelement <2 x i32> poison, i32 %109, i64 0, !dbg !58
  %153 = insertelement <2 x i32> %152, i32 %84, i64 1, !dbg !58
  %154 = bitcast <2 x i32> %153 to <2 x float>, !dbg !58
  %155 = fadd <2 x float> %151, %154, !dbg !66
  %156 = fsub <2 x float> %155, %145, !dbg !67
  %157 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !68
  %158 = bitcast <2 x i32> %157 to <2 x float>, !dbg !68
  %159 = shufflevector <2 x float> %158, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %160 = fmul <2 x float> %156, %159, !dbg !68
  %161 = fadd <2 x float> %145, %160, !dbg !69
  %162 = extractelement <2 x float> %135, i64 0, !dbg !70
  %163 = extractelement <2 x float> %135, i64 1, !dbg !71
  %164 = fsub float %162, %163, !dbg !70
  %165 = extractelement <2 x float> %161, i64 0, !dbg !70
  %166 = extractelement <2 x float> %161, i64 1, !dbg !71
  %167 = fsub float %165, %166, !dbg !70
  %168 = fmul float %164, %43, !dbg !72
  %169 = fmul float %167, %45, !dbg !72
  %170 = fadd float %163, %168, !dbg !71
  %171 = fadd float %166, %169, !dbg !71
  %172 = sext i32 %16 to i64, !dbg !73
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !73
  %174 = bitcast float %170 to i32, !dbg !74
  %175 = bitcast float %171 to i32, !dbg !74
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %174, i32 %175, ptr addrspace(1) %173, i1 true) #1, !dbg !74
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csl4zlnwnfki6mxso3oimelxc23azm227r4xanoflx2yogmjeed6.py", directory: "inductor_cache/sl")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_leaky_relu_mul_sub_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_leaky_relu_mul_sub_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_leaky_relu_mul_sub_16", linkageName: "triton_poi_fused__unsafe_index_add_leaky_relu_mul_sub_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 37, column: 32, scope: !7)
!31 = !DILocation(line: 40, column: 32, scope: !7)
!32 = !DILocation(line: 41, column: 39, scope: !7)
!33 = !DILocation(line: 41, column: 48, scope: !7)
!34 = !DILocation(line: 41, column: 46, scope: !7)
!35 = !DILocation(line: 41, column: 37, scope: !7)
!36 = !DILocation(line: 41, column: 30, scope: !7)
!37 = !DILocation(line: 41, column: 53, scope: !7)
!38 = !DILocation(line: 47, column: 31, scope: !7)
!39 = !DILocation(line: 47, column: 54, scope: !7)
!40 = !DILocation(line: 51, column: 35, scope: !7)
!41 = !DILocation(line: 52, column: 48, scope: !7)
!42 = !DILocation(line: 52, column: 31, scope: !7)
!43 = !DILocation(line: 52, column: 55, scope: !7)
!44 = !DILocation(line: 56, column: 31, scope: !7)
!45 = !DILocation(line: 56, column: 55, scope: !7)
!46 = !DILocation(line: 63, column: 35, scope: !7)
!47 = !DILocation(line: 64, column: 40, scope: !7)
!48 = !DILocation(line: 64, column: 38, scope: !7)
!49 = !DILocation(line: 64, column: 48, scope: !7)
!50 = !DILocation(line: 64, column: 31, scope: !7)
!51 = !DILocation(line: 64, column: 55, scope: !7)
!52 = !DILocation(line: 68, column: 31, scope: !7)
!53 = !DILocation(line: 68, column: 55, scope: !7)
!54 = !DILocation(line: 70, column: 49, scope: !7)
!55 = !DILocation(line: 70, column: 31, scope: !7)
!56 = !DILocation(line: 70, column: 56, scope: !7)
!57 = !DILocation(line: 74, column: 31, scope: !7)
!58 = !DILocation(line: 74, column: 56, scope: !7)
!59 = !DILocation(line: 65, column: 20, scope: !7)
!60 = !DILocation(line: 66, column: 20, scope: !7)
!61 = !DILocation(line: 67, column: 35, scope: !7)
!62 = !DILocation(line: 69, column: 20, scope: !7)
!63 = !DILocation(line: 71, column: 20, scope: !7)
!64 = !DILocation(line: 72, column: 20, scope: !7)
!65 = !DILocation(line: 73, column: 35, scope: !7)
!66 = !DILocation(line: 75, column: 20, scope: !7)
!67 = !DILocation(line: 76, column: 20, scope: !7)
!68 = !DILocation(line: 77, column: 20, scope: !7)
!69 = !DILocation(line: 78, column: 20, scope: !7)
!70 = !DILocation(line: 79, column: 20, scope: !7)
!71 = !DILocation(line: 81, column: 20, scope: !7)
!72 = !DILocation(line: 80, column: 20, scope: !7)
!73 = !DILocation(line: 82, column: 28, scope: !7)
!74 = !DILocation(line: 82, column: 40, scope: !7)
!75 = !DILocation(line: 82, column: 4, scope: !7)
