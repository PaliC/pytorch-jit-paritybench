; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused__softmax_mul_pow_sub_sum_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 3, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = and i32 %11, 7, !dbg !12
  %14 = lshr i32 %11, 5, !dbg !12
  %15 = lshr i32 %11, 3, !dbg !12
  %16 = and i32 %15, 7, !dbg !12
  %17 = or disjoint i32 %10, %13, !dbg !13
  %18 = or disjoint i32 %10, %16, !dbg !13
  %19 = icmp slt i32 %17, 64, !dbg !14
  %20 = icmp slt i32 %18, 64, !dbg !14
  %21 = or disjoint i32 %16, 8, !dbg !15
  %22 = or disjoint i32 %16, 16, !dbg !15
  %23 = or disjoint i32 %16, 24, !dbg !15
  %24 = shl i32 %11, 2, !dbg !15
  %25 = and i32 %24, 28, !dbg !15
  %.frozen = freeze i32 %17, !dbg !16
  %26 = sdiv i32 %.frozen, 16, !dbg !16
  %27 = mul i32 %26, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %27, !dbg !17
  %.frozen1 = freeze i32 %18, !dbg !16
  %28 = sdiv i32 %.frozen1, 16, !dbg !16
  %29 = mul i32 %28, 16, !dbg !17
  %.decomposed2 = sub i32 %.frozen1, %29, !dbg !17
  %30 = zext nneg i32 %16 to i64, !dbg !18
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !18
  %32 = zext nneg i32 %21 to i64, !dbg !18
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !18
  %34 = zext nneg i32 %22 to i64, !dbg !18
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !18
  %36 = zext nneg i32 %23 to i64, !dbg !18
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !18
  %38 = zext nneg i32 %25 to i64, !dbg !18
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !18
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !19
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !19
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !19
  %43 = bitcast i32 %42 to float, !dbg !19
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !19
  %45 = bitcast i32 %44 to float, !dbg !19
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !19
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !19
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !19
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !19
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !19
  %51 = bitcast i32 %47 to float, !dbg !19
  %52 = bitcast i32 %48 to float, !dbg !19
  %53 = bitcast i32 %49 to float, !dbg !19
  %54 = bitcast i32 %50 to float, !dbg !19
  %55 = shl i32 %26, 6, !dbg !20
  %56 = shl i32 %28, 6, !dbg !20
  %57 = add i32 %55, %.decomposed, !dbg !21
  %58 = add i32 %56, %.decomposed2, !dbg !21
  %59 = sext i32 %57 to i64, !dbg !22
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !22
  %61 = sext i32 %58 to i64, !dbg !22
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !22
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %19) #3, !dbg !23
  %64 = bitcast i32 %63 to float, !dbg !23
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %20) #3, !dbg !23
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %20) #3, !dbg !23
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %20) #3, !dbg !23
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %20) #3, !dbg !23
  %69 = bitcast i32 %68 to float, !dbg !23
  %70 = shl nuw nsw i32 %16, 2, !dbg !24
  %71 = shl nuw nsw i32 %21, 2, !dbg !24
  %72 = shl nuw nsw i32 %22, 2, !dbg !24
  %73 = shl nuw nsw i32 %23, 2, !dbg !24
  %74 = shl nuw nsw i32 %25, 2, !dbg !24
  %75 = or disjoint i32 %74, 4, !dbg !24
  %76 = or disjoint i32 %74, 8, !dbg !24
  %77 = or disjoint i32 %74, 12, !dbg !24
  %78 = zext nneg i32 %70 to i64, !dbg !25
  %79 = getelementptr float, ptr addrspace(1) %2, i64 %78, !dbg !25
  %80 = zext nneg i32 %71 to i64, !dbg !25
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %80, !dbg !25
  %82 = zext nneg i32 %72 to i64, !dbg !25
  %83 = getelementptr float, ptr addrspace(1) %2, i64 %82, !dbg !25
  %84 = zext nneg i32 %73 to i64, !dbg !25
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %84, !dbg !25
  %86 = zext nneg i32 %74 to i64, !dbg !25
  %87 = getelementptr float, ptr addrspace(1) %2, i64 %86, !dbg !25
  %88 = zext nneg i32 %75 to i64, !dbg !25
  %89 = getelementptr float, ptr addrspace(1) %2, i64 %88, !dbg !25
  %90 = zext nneg i32 %76 to i64, !dbg !25
  %91 = getelementptr float, ptr addrspace(1) %2, i64 %90, !dbg !25
  %92 = zext nneg i32 %77 to i64, !dbg !25
  %93 = getelementptr float, ptr addrspace(1) %2, i64 %92, !dbg !25
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !26
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !26
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !26
  %97 = bitcast i32 %96 to float, !dbg !26
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !26
  %99 = bitcast i32 %98 to float, !dbg !26
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !26
  %101 = bitcast i32 %100 to float, !dbg !26
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !26
  %103 = bitcast i32 %102 to float, !dbg !26
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !26
  %105 = bitcast i32 %104 to float, !dbg !26
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !26
  %107 = bitcast i32 %106 to float, !dbg !26
  %108 = add i32 %57, 16, !dbg !27
  %109 = add i32 %58, 16, !dbg !27
  %110 = sext i32 %108 to i64, !dbg !28
  %111 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !28
  %112 = sext i32 %109 to i64, !dbg !28
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %112, !dbg !28
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %19) #3, !dbg !29
  %115 = bitcast i32 %114 to float, !dbg !29
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %20) #3, !dbg !29
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %20) #3, !dbg !29
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %20) #3, !dbg !29
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %20) #3, !dbg !29
  %120 = bitcast i32 %119 to float, !dbg !29
  %121 = or disjoint i32 %70, 1, !dbg !30
  %122 = or disjoint i32 %71, 1, !dbg !30
  %123 = or disjoint i32 %72, 1, !dbg !30
  %124 = or disjoint i32 %73, 1, !dbg !30
  %125 = or disjoint i32 %74, 1, !dbg !30
  %126 = or disjoint i32 %74, 5, !dbg !30
  %127 = or disjoint i32 %74, 9, !dbg !30
  %128 = or disjoint i32 %74, 13, !dbg !30
  %129 = zext nneg i32 %121 to i64, !dbg !31
  %130 = getelementptr float, ptr addrspace(1) %2, i64 %129, !dbg !31
  %131 = zext nneg i32 %122 to i64, !dbg !31
  %132 = getelementptr float, ptr addrspace(1) %2, i64 %131, !dbg !31
  %133 = zext nneg i32 %123 to i64, !dbg !31
  %134 = getelementptr float, ptr addrspace(1) %2, i64 %133, !dbg !31
  %135 = zext nneg i32 %124 to i64, !dbg !31
  %136 = getelementptr float, ptr addrspace(1) %2, i64 %135, !dbg !31
  %137 = zext nneg i32 %125 to i64, !dbg !31
  %138 = getelementptr float, ptr addrspace(1) %2, i64 %137, !dbg !31
  %139 = zext nneg i32 %126 to i64, !dbg !31
  %140 = getelementptr float, ptr addrspace(1) %2, i64 %139, !dbg !31
  %141 = zext nneg i32 %127 to i64, !dbg !31
  %142 = getelementptr float, ptr addrspace(1) %2, i64 %141, !dbg !31
  %143 = zext nneg i32 %128 to i64, !dbg !31
  %144 = getelementptr float, ptr addrspace(1) %2, i64 %143, !dbg !31
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #3, !dbg !32
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #3, !dbg !32
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #3, !dbg !32
  %148 = bitcast i32 %147 to float, !dbg !32
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 true) #3, !dbg !32
  %150 = bitcast i32 %149 to float, !dbg !32
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 true) #3, !dbg !32
  %152 = bitcast i32 %151 to float, !dbg !32
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 true) #3, !dbg !32
  %154 = bitcast i32 %153 to float, !dbg !32
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 true) #3, !dbg !32
  %156 = bitcast i32 %155 to float, !dbg !32
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #3, !dbg !32
  %158 = bitcast i32 %157 to float, !dbg !32
  %159 = add i32 %57, 32, !dbg !33
  %160 = add i32 %58, 32, !dbg !33
  %161 = sext i32 %159 to i64, !dbg !34
  %162 = getelementptr float, ptr addrspace(1) %1, i64 %161, !dbg !34
  %163 = sext i32 %160 to i64, !dbg !34
  %164 = getelementptr float, ptr addrspace(1) %1, i64 %163, !dbg !34
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %19) #3, !dbg !35
  %166 = bitcast i32 %165 to float, !dbg !35
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %20) #3, !dbg !35
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %20) #3, !dbg !35
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %20) #3, !dbg !35
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %20) #3, !dbg !35
  %171 = bitcast i32 %170 to float, !dbg !35
  %172 = or disjoint i32 %70, 2, !dbg !36
  %173 = or disjoint i32 %71, 2, !dbg !36
  %174 = or disjoint i32 %72, 2, !dbg !36
  %175 = or disjoint i32 %73, 2, !dbg !36
  %176 = or disjoint i32 %74, 2, !dbg !36
  %177 = or disjoint i32 %74, 6, !dbg !36
  %178 = or disjoint i32 %74, 10, !dbg !36
  %179 = or disjoint i32 %74, 14, !dbg !36
  %180 = zext nneg i32 %172 to i64, !dbg !37
  %181 = getelementptr float, ptr addrspace(1) %2, i64 %180, !dbg !37
  %182 = zext nneg i32 %173 to i64, !dbg !37
  %183 = getelementptr float, ptr addrspace(1) %2, i64 %182, !dbg !37
  %184 = zext nneg i32 %174 to i64, !dbg !37
  %185 = getelementptr float, ptr addrspace(1) %2, i64 %184, !dbg !37
  %186 = zext nneg i32 %175 to i64, !dbg !37
  %187 = getelementptr float, ptr addrspace(1) %2, i64 %186, !dbg !37
  %188 = zext nneg i32 %176 to i64, !dbg !37
  %189 = getelementptr float, ptr addrspace(1) %2, i64 %188, !dbg !37
  %190 = zext nneg i32 %177 to i64, !dbg !37
  %191 = getelementptr float, ptr addrspace(1) %2, i64 %190, !dbg !37
  %192 = zext nneg i32 %178 to i64, !dbg !37
  %193 = getelementptr float, ptr addrspace(1) %2, i64 %192, !dbg !37
  %194 = zext nneg i32 %179 to i64, !dbg !37
  %195 = getelementptr float, ptr addrspace(1) %2, i64 %194, !dbg !37
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 true) #3, !dbg !38
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 true) #3, !dbg !38
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 true) #3, !dbg !38
  %199 = bitcast i32 %198 to float, !dbg !38
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 true) #3, !dbg !38
  %201 = bitcast i32 %200 to float, !dbg !38
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 true) #3, !dbg !38
  %203 = bitcast i32 %202 to float, !dbg !38
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 true) #3, !dbg !38
  %205 = bitcast i32 %204 to float, !dbg !38
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %193, i1 true) #3, !dbg !38
  %207 = bitcast i32 %206 to float, !dbg !38
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %195, i1 true) #3, !dbg !38
  %209 = bitcast i32 %208 to float, !dbg !38
  %210 = add i32 %57, 48, !dbg !39
  %211 = add i32 %58, 48, !dbg !39
  %212 = sext i32 %210 to i64, !dbg !40
  %213 = getelementptr float, ptr addrspace(1) %1, i64 %212, !dbg !40
  %214 = sext i32 %211 to i64, !dbg !40
  %215 = getelementptr float, ptr addrspace(1) %1, i64 %214, !dbg !40
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %213, i1 %19) #3, !dbg !41
  %217 = bitcast i32 %216 to float, !dbg !41
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %215, i1 %20) #3, !dbg !41
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %215, i1 %20) #3, !dbg !41
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %215, i1 %20) #3, !dbg !41
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %215, i1 %20) #3, !dbg !41
  %222 = bitcast i32 %221 to float, !dbg !41
  %223 = or disjoint i32 %70, 3, !dbg !42
  %224 = or disjoint i32 %71, 3, !dbg !42
  %225 = or disjoint i32 %72, 3, !dbg !42
  %226 = or disjoint i32 %73, 3, !dbg !42
  %227 = or disjoint i32 %74, 3, !dbg !42
  %228 = or disjoint i32 %74, 7, !dbg !42
  %229 = or disjoint i32 %74, 11, !dbg !42
  %230 = or disjoint i32 %74, 15, !dbg !42
  %231 = zext nneg i32 %223 to i64, !dbg !43
  %232 = getelementptr float, ptr addrspace(1) %2, i64 %231, !dbg !43
  %233 = zext nneg i32 %224 to i64, !dbg !43
  %234 = getelementptr float, ptr addrspace(1) %2, i64 %233, !dbg !43
  %235 = zext nneg i32 %225 to i64, !dbg !43
  %236 = getelementptr float, ptr addrspace(1) %2, i64 %235, !dbg !43
  %237 = zext nneg i32 %226 to i64, !dbg !43
  %238 = getelementptr float, ptr addrspace(1) %2, i64 %237, !dbg !43
  %239 = zext nneg i32 %227 to i64, !dbg !43
  %240 = getelementptr float, ptr addrspace(1) %2, i64 %239, !dbg !43
  %241 = zext nneg i32 %228 to i64, !dbg !43
  %242 = getelementptr float, ptr addrspace(1) %2, i64 %241, !dbg !43
  %243 = zext nneg i32 %229 to i64, !dbg !43
  %244 = getelementptr float, ptr addrspace(1) %2, i64 %243, !dbg !43
  %245 = zext nneg i32 %230 to i64, !dbg !43
  %246 = getelementptr float, ptr addrspace(1) %2, i64 %245, !dbg !43
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 true) #3, !dbg !44
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %234, i1 true) #3, !dbg !44
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %236, i1 true) #3, !dbg !44
  %250 = bitcast i32 %249 to float, !dbg !44
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 true) #3, !dbg !44
  %252 = bitcast i32 %251 to float, !dbg !44
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #3, !dbg !44
  %254 = bitcast i32 %253 to float, !dbg !44
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 true) #3, !dbg !44
  %256 = bitcast i32 %255 to float, !dbg !44
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 true) #3, !dbg !44
  %258 = bitcast i32 %257 to float, !dbg !44
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %246, i1 true) #3, !dbg !44
  %260 = bitcast i32 %259 to float, !dbg !44
  %261 = fsub float %64, %97, !dbg !45
  %262 = fsub float %64, %99, !dbg !45
  %263 = fsub float %69, %101, !dbg !45
  %264 = fsub float %69, %103, !dbg !45
  %265 = fsub float %69, %105, !dbg !45
  %266 = fsub float %69, %107, !dbg !45
  %267 = fmul float %261, %43, !dbg !46
  %268 = fmul float %262, %45, !dbg !46
  %269 = fmul float %263, %51, !dbg !46
  %270 = fmul float %264, %52, !dbg !46
  %271 = fmul float %265, %53, !dbg !46
  %272 = fmul float %266, %54, !dbg !46
  %273 = fmul float %267, %267, !dbg !47
  %274 = fmul float %268, %268, !dbg !47
  %275 = fmul float %269, %269, !dbg !47
  %276 = fmul float %270, %270, !dbg !47
  %277 = fmul float %271, %271, !dbg !47
  %278 = fmul float %272, %272, !dbg !47
  %279 = fsub float %115, %148, !dbg !48
  %280 = fsub float %115, %150, !dbg !48
  %281 = fsub float %120, %152, !dbg !48
  %282 = fsub float %120, %154, !dbg !48
  %283 = fsub float %120, %156, !dbg !48
  %284 = fsub float %120, %158, !dbg !48
  %285 = fmul float %279, %43, !dbg !49
  %286 = fmul float %280, %45, !dbg !49
  %287 = fmul float %281, %51, !dbg !49
  %288 = fmul float %282, %52, !dbg !49
  %289 = fmul float %283, %53, !dbg !49
  %290 = fmul float %284, %54, !dbg !49
  %291 = fmul float %285, %285, !dbg !50
  %292 = fmul float %286, %286, !dbg !50
  %293 = fmul float %287, %287, !dbg !50
  %294 = fmul float %288, %288, !dbg !50
  %295 = fmul float %289, %289, !dbg !50
  %296 = fmul float %290, %290, !dbg !50
  %297 = fadd float %273, %291, !dbg !51
  %298 = fadd float %274, %292, !dbg !51
  %299 = fadd float %275, %293, !dbg !51
  %300 = fadd float %276, %294, !dbg !51
  %301 = fadd float %277, %295, !dbg !51
  %302 = fadd float %278, %296, !dbg !51
  %303 = fsub float %166, %199, !dbg !52
  %304 = fsub float %166, %201, !dbg !52
  %305 = fsub float %171, %203, !dbg !52
  %306 = fsub float %171, %205, !dbg !52
  %307 = fsub float %171, %207, !dbg !52
  %308 = fsub float %171, %209, !dbg !52
  %309 = fmul float %303, %43, !dbg !53
  %310 = fmul float %304, %45, !dbg !53
  %311 = fmul float %305, %51, !dbg !53
  %312 = fmul float %306, %52, !dbg !53
  %313 = fmul float %307, %53, !dbg !53
  %314 = fmul float %308, %54, !dbg !53
  %315 = fmul float %309, %309, !dbg !54
  %316 = fmul float %310, %310, !dbg !54
  %317 = fmul float %311, %311, !dbg !54
  %318 = fmul float %312, %312, !dbg !54
  %319 = fmul float %313, %313, !dbg !54
  %320 = fmul float %314, %314, !dbg !54
  %321 = fadd float %297, %315, !dbg !55
  %322 = fadd float %298, %316, !dbg !55
  %323 = fadd float %299, %317, !dbg !55
  %324 = fadd float %300, %318, !dbg !55
  %325 = fadd float %301, %319, !dbg !55
  %326 = fadd float %302, %320, !dbg !55
  %327 = fsub float %217, %250, !dbg !56
  %328 = fsub float %217, %252, !dbg !56
  %329 = fsub float %222, %254, !dbg !56
  %330 = fsub float %222, %256, !dbg !56
  %331 = fsub float %222, %258, !dbg !56
  %332 = fsub float %222, %260, !dbg !56
  %333 = fmul float %327, %43, !dbg !57
  %334 = fmul float %328, %45, !dbg !57
  %335 = fmul float %329, %51, !dbg !57
  %336 = fmul float %330, %52, !dbg !57
  %337 = fmul float %331, %53, !dbg !57
  %338 = fmul float %332, %54, !dbg !57
  %339 = fmul float %333, %333, !dbg !58
  %340 = fmul float %334, %334, !dbg !58
  %341 = fmul float %335, %335, !dbg !58
  %342 = fmul float %336, %336, !dbg !58
  %343 = fmul float %337, %337, !dbg !58
  %344 = fmul float %338, %338, !dbg !58
  %345 = fadd float %321, %339, !dbg !59
  %346 = fadd float %322, %340, !dbg !59
  %347 = fadd float %323, %341, !dbg !59
  %348 = fadd float %324, %342, !dbg !59
  %349 = fadd float %325, %343, !dbg !59
  %350 = fadd float %326, %344, !dbg !59
  %351 = select i1 %19, float %345, float 0xFFF0000000000000, !dbg !60
  %352 = select i1 %19, float %346, float 0xFFF0000000000000, !dbg !60
  %353 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !19
  %354 = insertelement <2 x i32> %353, i32 %41, i64 1, !dbg !19
  %355 = bitcast <2 x i32> %354 to <2 x float>, !dbg !19
  %356 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !26
  %357 = insertelement <2 x i32> %356, i32 %95, i64 1, !dbg !26
  %358 = bitcast <2 x i32> %357 to <2 x float>, !dbg !26
  %359 = insertelement <2 x i32> poison, i32 %145, i64 0, !dbg !32
  %360 = insertelement <2 x i32> %359, i32 %146, i64 1, !dbg !32
  %361 = bitcast <2 x i32> %360 to <2 x float>, !dbg !32
  %362 = insertelement <2 x i32> poison, i32 %196, i64 0, !dbg !38
  %363 = insertelement <2 x i32> %362, i32 %197, i64 1, !dbg !38
  %364 = bitcast <2 x i32> %363 to <2 x float>, !dbg !38
  %365 = insertelement <2 x i32> poison, i32 %247, i64 0, !dbg !44
  %366 = insertelement <2 x i32> %365, i32 %248, i64 1, !dbg !44
  %367 = bitcast <2 x i32> %366 to <2 x float>, !dbg !44
  %368 = insertelement <2 x float> poison, float %64, i64 0, !dbg !45
  %369 = shufflevector <2 x float> %368, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !45
  %370 = fsub <2 x float> %369, %358, !dbg !45
  %371 = fmul <2 x float> %370, %355, !dbg !46
  %372 = fmul <2 x float> %371, %371, !dbg !47
  %373 = insertelement <2 x float> poison, float %115, i64 0, !dbg !48
  %374 = shufflevector <2 x float> %373, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !48
  %375 = fsub <2 x float> %374, %361, !dbg !48
  %376 = fmul <2 x float> %375, %355, !dbg !49
  %377 = fmul <2 x float> %376, %376, !dbg !50
  %378 = fadd <2 x float> %372, %377, !dbg !51
  %379 = insertelement <2 x float> poison, float %166, i64 0, !dbg !52
  %380 = shufflevector <2 x float> %379, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %381 = fsub <2 x float> %380, %364, !dbg !52
  %382 = fmul <2 x float> %381, %355, !dbg !53
  %383 = fmul <2 x float> %382, %382, !dbg !54
  %384 = fadd <2 x float> %378, %383, !dbg !55
  %385 = insertelement <2 x float> poison, float %217, i64 0, !dbg !56
  %386 = shufflevector <2 x float> %385, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %387 = fsub <2 x float> %386, %367, !dbg !56
  %388 = fmul <2 x float> %387, %355, !dbg !57
  %389 = fmul <2 x float> %388, %388, !dbg !58
  %390 = fadd <2 x float> %384, %389, !dbg !59
  %391 = insertelement <2 x i1> poison, i1 %19, i64 0, !dbg !60
  %392 = shufflevector <2 x i1> %391, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !60
  %393 = select <2 x i1> %392, <2 x float> %390, <2 x float> splat (float 0xFFF0000000000000), !dbg !60
  %394 = shufflevector <2 x float> %393, <2 x float> <float 0.000000e+00, float poison>, <2 x i32> <i32 2, i32 0>, !dbg !61
  %395 = fcmp uno <2 x float> %394, %393, !dbg !61
  %396 = fcmp ogt <2 x float> %394, %393, !dbg !61
  %shift = shufflevector <2 x i1> %396, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !66
  %397 = or <2 x i1> %395, %shift, !dbg !66
  %398 = extractelement <2 x i1> %397, i64 0, !dbg !66
  %399 = extractelement <2 x float> %393, i64 0, !dbg !67
  %400 = extractelement <2 x float> %393, i64 1, !dbg !67
  %401 = select i1 %398, float %399, float %400, !dbg !67
  %402 = fcmp ogt float %401, %351, !dbg !68
  %403 = fcmp uno float %401, 0.000000e+00, !dbg !61
  %404 = or i1 %402, %403, !dbg !66
  %405 = select i1 %404, float %401, float %351, !dbg !67
  %406 = fcmp ogt float %405, %352, !dbg !68
  %407 = fcmp uno float %405, 0.000000e+00, !dbg !61
  %408 = or i1 %406, %407, !dbg !66
  %409 = select i1 %408, float %405, float %352, !dbg !67
  %410 = bitcast float %409 to i32, !dbg !69
  %411 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %410, i32 16, i32 31), !dbg !69
  %412 = bitcast i32 %411 to float, !dbg !69
  %413 = fcmp ogt float %409, %412, !dbg !68
  %414 = fcmp uno float %409, 0.000000e+00, !dbg !61
  %415 = or i1 %413, %414, !dbg !66
  %416 = select i1 %415, float %409, float %412, !dbg !67
  %417 = bitcast float %416 to i32, !dbg !69
  %418 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %417, i32 8, i32 31), !dbg !69
  %419 = bitcast i32 %418 to float, !dbg !69
  %420 = fcmp ogt float %416, %419, !dbg !68
  %421 = fcmp uno float %416, 0.000000e+00, !dbg !61
  %422 = or i1 %420, %421, !dbg !66
  %423 = lshr i32 %12, 3, !dbg !69
  %424 = icmp samesign ult i32 %12, 8, !dbg !69
  %425 = and i32 %14, 1, !dbg !69
  %426 = shl nuw nsw i32 %13, 1, !dbg !69
  %427 = or disjoint i32 %426, %425, !dbg !69
  %428 = getelementptr float, ptr addrspace(3) @global_smem, i32 %427, !dbg !69
  %429 = select i1 %422, i32 %417, i32 %418, !dbg !67
  %430 = insertelement <1 x i32> poison, i32 %429, i64 0, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %428, <1 x i32> %430, i1 %424) #3, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %431 = icmp slt i32 %11, 16, !dbg !69
  %432 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !69
  %433 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %432, i1 %431) #3, !dbg !69
  %434 = bitcast i32 %433 to float, !dbg !69
  %435 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %433, i32 1, i32 31), !dbg !69
  %436 = bitcast i32 %435 to float, !dbg !69
  %437 = fcmp ogt float %434, %436, !dbg !68
  %438 = fcmp uno float %434, 0.000000e+00, !dbg !61
  %439 = or i1 %438, %437, !dbg !66
  %440 = and i32 %11, 1, !dbg !69
  %441 = icmp eq i32 %440, 0, !dbg !69
  %442 = and i1 %431, %441, !dbg !69
  %443 = select i1 %439, i32 %433, i32 %435, !dbg !67
  %444 = insertelement <1 x i32> poison, i32 %443, i64 0, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %432, <1 x i32> %444, i1 %442) #3, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %445 = getelementptr float, ptr addrspace(3) @global_smem, i32 %426, !dbg !69
  %446 = load float, ptr addrspace(3) %445, align 8, !dbg !69
  %447 = extractelement <2 x float> %390, i64 0, !dbg !70
  %448 = fsub float %447, %446, !dbg !70
  %449 = extractelement <2 x float> %390, i64 1, !dbg !70
  %450 = fsub float %449, %446, !dbg !70
  %451 = fsub float %345, %446, !dbg !70
  %452 = fsub float %346, %446, !dbg !70
  %453 = fmul float %448, 0x3FF7154760000000, !dbg !71
  %454 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %453) #3, !dbg !71
  %455 = fmul float %450, 0x3FF7154760000000, !dbg !71
  %456 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %455) #3, !dbg !71
  %457 = fmul float %451, 0x3FF7154760000000, !dbg !71
  %458 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %457) #3, !dbg !71
  %459 = fmul float %452, 0x3FF7154760000000, !dbg !71
  %460 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %459) #3, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %461 = fadd float %454, %456, !dbg !76
  %462 = fadd float %461, %458, !dbg !76
  %463 = fadd float %462, %460, !dbg !76
  %464 = select i1 %19, float %463, float 0.000000e+00, !dbg !76
  %465 = bitcast float %464 to i32, !dbg !72
  %466 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %465, i32 16, i32 31), !dbg !72
  %467 = bitcast i32 %466 to float, !dbg !72
  %468 = fadd float %464, %467, !dbg !76
  %469 = bitcast float %468 to i32, !dbg !72
  %470 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %469, i32 8, i32 31), !dbg !72
  %471 = bitcast i32 %470 to float, !dbg !72
  %472 = fadd float %468, %471, !dbg !76
  %473 = bitcast float %472 to <1 x i32>, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %428, <1 x i32> %473, i1 %424) #3, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %474 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %432, i1 %431) #3, !dbg !72
  %475 = bitcast i32 %474 to float, !dbg !72
  %476 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %474, i32 1, i32 31), !dbg !72
  %477 = bitcast i32 %476 to float, !dbg !72
  %478 = fadd float %475, %477, !dbg !76
  %479 = bitcast float %478 to <1 x i32>, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %432, <1 x i32> %479, i1 %442) #3, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %480 = load i32, ptr addrspace(3) %445, align 8, !dbg !72
  %481 = shl i32 %18, 5, !dbg !78
  %482 = or disjoint i32 %481, %25, !dbg !79
  %483 = sext i32 %482 to i64, !dbg !80
  %484 = getelementptr float, ptr addrspace(1) %3, i64 %483, !dbg !80
  %485 = bitcast float %347 to i32, !dbg !81
  %486 = bitcast float %348 to i32, !dbg !81
  %487 = bitcast float %349 to i32, !dbg !81
  %488 = bitcast float %350 to i32, !dbg !81
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %485, i32 %486, i32 %487, i32 %488, ptr addrspace(1) %484, i1 %20) #3, !dbg !81
  %489 = sext i32 %17 to i64, !dbg !82
  %490 = getelementptr float, ptr addrspace(1) %4, i64 %489, !dbg !82
  %491 = shl nuw nsw i32 %425, 2, !dbg !83
  %492 = or disjoint i32 %491, %423, !dbg !83
  %493 = icmp eq i32 %492, 0, !dbg !83
  %494 = bitcast float %446 to i32, !dbg !83
  %495 = and i1 %493, %19, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %494, ptr addrspace(1) %490, i1 %495) #3, !dbg !83
  %496 = getelementptr float, ptr addrspace(1) %5, i64 %489, !dbg !84
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %480, ptr addrspace(1) %496, i1 %495) #3, !dbg !85
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py", directory: "inductor_cache/x6")
!4 = !{ptr @triton_per_fused__softmax_mul_pow_sub_sum_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_mul_pow_sub_sum_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__softmax_mul_pow_sub_sum_1", linkageName: "triton_per_fused__softmax_mul_pow_sub_sum_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 38, scope: !7)
!21 = !DILocation(line: 34, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 43, scope: !7)
!24 = !DILocation(line: 35, column: 32, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 37, scope: !7)
!27 = !DILocation(line: 36, column: 40, scope: !7)
!28 = !DILocation(line: 36, column: 30, scope: !7)
!29 = !DILocation(line: 36, column: 48, scope: !7)
!30 = !DILocation(line: 37, column: 34, scope: !7)
!31 = !DILocation(line: 37, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 41, scope: !7)
!33 = !DILocation(line: 38, column: 41, scope: !7)
!34 = !DILocation(line: 38, column: 31, scope: !7)
!35 = !DILocation(line: 38, column: 49, scope: !7)
!36 = !DILocation(line: 39, column: 35, scope: !7)
!37 = !DILocation(line: 39, column: 31, scope: !7)
!38 = !DILocation(line: 39, column: 42, scope: !7)
!39 = !DILocation(line: 40, column: 41, scope: !7)
!40 = !DILocation(line: 40, column: 31, scope: !7)
!41 = !DILocation(line: 40, column: 49, scope: !7)
!42 = !DILocation(line: 41, column: 35, scope: !7)
!43 = !DILocation(line: 41, column: 31, scope: !7)
!44 = !DILocation(line: 41, column: 42, scope: !7)
!45 = !DILocation(line: 42, column: 18, scope: !7)
!46 = !DILocation(line: 43, column: 18, scope: !7)
!47 = !DILocation(line: 44, column: 18, scope: !7)
!48 = !DILocation(line: 45, column: 18, scope: !7)
!49 = !DILocation(line: 46, column: 18, scope: !7)
!50 = !DILocation(line: 47, column: 19, scope: !7)
!51 = !DILocation(line: 48, column: 19, scope: !7)
!52 = !DILocation(line: 49, column: 20, scope: !7)
!53 = !DILocation(line: 50, column: 19, scope: !7)
!54 = !DILocation(line: 51, column: 20, scope: !7)
!55 = !DILocation(line: 52, column: 20, scope: !7)
!56 = !DILocation(line: 53, column: 20, scope: !7)
!57 = !DILocation(line: 54, column: 19, scope: !7)
!58 = !DILocation(line: 55, column: 20, scope: !7)
!59 = !DILocation(line: 56, column: 20, scope: !7)
!60 = !DILocation(line: 58, column: 35, scope: !7)
!61 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !65)
!62 = distinct !DILexicalBlockFile(scope: !64, file: !63, discriminator: 0)
!63 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!64 = distinct !DILexicalBlockFile(scope: !7, file: !63, discriminator: 0)
!65 = !DILocation(line: 59, column: 39, scope: !7)
!66 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !65)
!67 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !65)
!68 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !65)
!69 = !DILocation(line: 131, column: 29, scope: !64, inlinedAt: !65)
!70 = !DILocation(line: 60, column: 20, scope: !7)
!71 = !DILocation(line: 61, column: 24, scope: !7)
!72 = !DILocation(line: 267, column: 36, scope: !73, inlinedAt: !75)
!73 = distinct !DILexicalBlockFile(scope: !7, file: !74, discriminator: 0)
!74 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!75 = !DILocation(line: 64, column: 26, scope: !7)
!76 = !DILocation(line: 256, column: 15, scope: !77, inlinedAt: !75)
!77 = distinct !DILexicalBlockFile(scope: !73, file: !74, discriminator: 0)
!78 = !DILocation(line: 65, column: 33, scope: !7)
!79 = !DILocation(line: 65, column: 30, scope: !7)
!80 = !DILocation(line: 65, column: 25, scope: !7)
!81 = !DILocation(line: 65, column: 45, scope: !7)
!82 = !DILocation(line: 66, column: 25, scope: !7)
!83 = !DILocation(line: 66, column: 37, scope: !7)
!84 = !DILocation(line: 67, column: 25, scope: !7)
!85 = !DILocation(line: 67, column: 37, scope: !7)
!86 = !DILocation(line: 67, column: 4, scope: !7)
