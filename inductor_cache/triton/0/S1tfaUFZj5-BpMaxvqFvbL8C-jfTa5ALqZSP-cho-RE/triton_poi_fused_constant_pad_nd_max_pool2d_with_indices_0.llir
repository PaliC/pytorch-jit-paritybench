; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_constant_pad_nd_max_pool2d_with_indices_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 144, !dbg !14
  %12 = sdiv i32 %9, 3, !dbg !15
  %13 = sdiv i32 %10, 3, !dbg !15
  %14 = sdiv i32 %9, 9, !dbg !16
  %15 = sdiv i32 %10, 9, !dbg !16
  %16 = shl i32 %14, 4, !dbg !17
  %17 = shl i32 %15, 4, !dbg !17
  %18 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !18
  %19 = insertelement <2 x i32> %18, i32 %12, i64 1, !dbg !18
  %20 = srem <2 x i32> %19, splat (i32 3), !dbg !18
  %21 = extractelement <2 x i32> %20, i64 0, !dbg !18
  %22 = extractelement <2 x i32> %20, i64 1, !dbg !19
  %23 = icmp sgt i32 %22, 0, !dbg !20
  %24 = shl nsw <2 x i32> %20, splat (i32 1), !dbg !21
  %25 = shl nsw i32 %21, 1, !dbg !21
  %26 = icmp sgt i32 %21, 0, !dbg !22
  %27 = and i1 %26, %23, !dbg !23
  %28 = shl nsw i32 %22, 3, !dbg !24
  %29 = add i32 %16, %25, !dbg !25
  %30 = add i32 %29, -10, !dbg !26
  %31 = add i32 %30, %28, !dbg !27
  %32 = sext i32 %31 to i64, !dbg !28
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !28
  %34 = and i1 %11, %27, !dbg !29
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %34, i32 0, i1 %34) #1, !dbg !30
  %36 = bitcast i32 %35 to float, !dbg !30
  %37 = select i1 %27, float %36, float 0xFFF0000000000000, !dbg !31
  %38 = icmp sgt <2 x i32> %20, splat (i32 -1), !dbg !32
  %39 = extractelement <2 x i1> %38, i64 0, !dbg !33
  %40 = and i1 %39, %23, !dbg !33
  %41 = add i32 %29, -9, !dbg !34
  %42 = add i32 %41, %28, !dbg !35
  %43 = sext i32 %42 to i64, !dbg !36
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !36
  %45 = or disjoint <2 x i32> %24, splat (i32 1), !dbg !37
  %46 = icmp slt <2 x i32> %45, splat (i32 5), !dbg !38
  %47 = and <2 x i1> %38, %46, !dbg !39
  %48 = extractelement <2 x i1> %47, i64 0, !dbg !40
  %49 = and i1 %23, %48, !dbg !41
  %50 = add i32 %29, -8, !dbg !42
  %51 = add i32 %50, %28, !dbg !43
  %52 = sext i32 %51 to i64, !dbg !44
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !44
  %54 = and i1 %11, %49, !dbg !45
  %55 = extractelement <2 x i1> %38, i64 1, !dbg !46
  %56 = and i1 %26, %55, !dbg !46
  %57 = add i32 %29, -6, !dbg !47
  %58 = add i32 %57, %28, !dbg !48
  %59 = sext i32 %58 to i64, !dbg !49
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !49
  %61 = or i32 %22, %21, !dbg !19
  %62 = icmp sgt i32 %61, -1, !dbg !19
  %63 = and i1 %27, %62, !dbg !50
  %64 = add i32 %29, -5, !dbg !51
  %65 = add i32 %64, %28, !dbg !52
  %66 = sext i32 %65 to i64, !dbg !53
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !53
  %68 = and i1 %11, %63, !dbg !54
  %69 = and i1 %55, %48, !dbg !55
  %70 = add i32 %29, -4, !dbg !56
  %71 = add i32 %70, %28, !dbg !57
  %72 = sext i32 %71 to i64, !dbg !58
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !58
  %74 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !18
  %75 = insertelement <2 x i32> %74, i32 %13, i64 1, !dbg !18
  %76 = srem <2 x i32> %75, splat (i32 3), !dbg !18
  %77 = extractelement <2 x i32> %76, i64 0, !dbg !18
  %78 = extractelement <2 x i32> %76, i64 1, !dbg !19
  %79 = icmp sgt i32 %78, 0, !dbg !20
  %80 = shl nsw <2 x i32> %76, splat (i32 1), !dbg !21
  %81 = shl nsw i32 %77, 1, !dbg !21
  %82 = icmp sgt i32 %77, 0, !dbg !22
  %83 = and i1 %82, %79, !dbg !23
  %84 = shl nsw i32 %78, 3, !dbg !24
  %85 = add i32 %17, %81, !dbg !25
  %86 = add i32 %85, -10, !dbg !26
  %87 = add i32 %86, %84, !dbg !27
  %88 = sext i32 %87 to i64, !dbg !28
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !28
  %90 = and i1 %83, %11, !dbg !29
  %91 = icmp sgt <2 x i32> %76, splat (i32 -1), !dbg !32
  %92 = extractelement <2 x i1> %91, i64 0, !dbg !33
  %93 = and i1 %92, %79, !dbg !33
  %94 = add i32 %85, -9, !dbg !34
  %95 = add i32 %94, %84, !dbg !35
  %96 = sext i32 %95 to i64, !dbg !36
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !36
  %98 = or disjoint <2 x i32> %80, splat (i32 1), !dbg !37
  %99 = icmp slt <2 x i32> %98, splat (i32 5), !dbg !38
  %100 = and <2 x i1> %91, %99, !dbg !39
  %101 = extractelement <2 x i1> %100, i64 0, !dbg !40
  %102 = and i1 %79, %101, !dbg !41
  %103 = add i32 %85, -8, !dbg !42
  %104 = add i32 %103, %84, !dbg !43
  %105 = sext i32 %104 to i64, !dbg !44
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !44
  %107 = and i1 %102, %11, !dbg !45
  %108 = extractelement <2 x i1> %91, i64 1, !dbg !46
  %109 = and i1 %82, %108, !dbg !46
  %110 = add i32 %85, -6, !dbg !47
  %111 = add i32 %110, %84, !dbg !48
  %112 = sext i32 %111 to i64, !dbg !49
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !49
  %114 = or i32 %78, %77, !dbg !19
  %115 = icmp sgt i32 %114, -1, !dbg !19
  %116 = and i1 %83, %115, !dbg !50
  %117 = add i32 %85, -5, !dbg !51
  %118 = add i32 %117, %84, !dbg !52
  %119 = sext i32 %118 to i64, !dbg !53
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !53
  %121 = and i1 %116, %11, !dbg !54
  %122 = and i1 %108, %101, !dbg !55
  %123 = add i32 %85, -4, !dbg !56
  %124 = add i32 %123, %84, !dbg !57
  %125 = sext i32 %124 to i64, !dbg !58
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !58
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %90, i32 0, i1 %90) #1, !dbg !30
  %128 = bitcast i32 %127 to float, !dbg !30
  %129 = select i1 %83, float %128, float 0xFFF0000000000000, !dbg !31
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %34, i32 0, i1 %34) #1, !dbg !59
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %90, i32 0, i1 %90) #1, !dbg !59
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %54, i32 0, i1 %54) #1, !dbg !60
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %107, i32 0, i1 %107) #1, !dbg !60
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %34, i32 0, i1 %34) #1, !dbg !61
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %90, i32 0, i1 %90) #1, !dbg !61
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %68, i32 0, i1 %68) #1, !dbg !62
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %121, i32 0, i1 %121) #1, !dbg !62
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %54, i32 0, i1 %54) #1, !dbg !63
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %107, i32 0, i1 %107) #1, !dbg !63
  %140 = extractelement <2 x i1> %47, i64 1, !dbg !40
  %141 = and i1 %26, %140, !dbg !64
  %142 = extractelement <2 x i1> %100, i64 1, !dbg !40
  %143 = and i1 %82, %142, !dbg !64
  %144 = add i32 %29, -2, !dbg !65
  %145 = add i32 %144, %28, !dbg !66
  %146 = add i32 %85, -2, !dbg !65
  %147 = add i32 %146, %84, !dbg !66
  %148 = sext i32 %145 to i64, !dbg !67
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !67
  %150 = sext i32 %147 to i64, !dbg !67
  %151 = getelementptr float, ptr addrspace(1) %0, i64 %150, !dbg !67
  %152 = and i1 %11, %141, !dbg !68
  %153 = and i1 %143, %11, !dbg !68
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %152, i32 0, i1 %152) #1, !dbg !69
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %151, i1 %153, i32 0, i1 %153) #1, !dbg !69
  %156 = and i1 %39, %140, !dbg !70
  %157 = and i1 %92, %142, !dbg !70
  %158 = add i32 %29, -1, !dbg !71
  %159 = add i32 %158, %28, !dbg !72
  %160 = add i32 %85, -1, !dbg !71
  %161 = add i32 %160, %84, !dbg !72
  %162 = sext i32 %159 to i64, !dbg !73
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !73
  %164 = sext i32 %161 to i64, !dbg !73
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !73
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %163, i1 %152, i32 0, i1 %152) #1, !dbg !74
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %165, i1 %153, i32 0, i1 %153) #1, !dbg !74
  %168 = and i1 %48, %140, !dbg !40
  %169 = and i1 %101, %142, !dbg !40
  %170 = and i1 %62, %168, !dbg !75
  %171 = and i1 %115, %169, !dbg !75
  %172 = add i32 %29, %28, !dbg !76
  %173 = add i32 %85, %84, !dbg !76
  %174 = sext i32 %172 to i64, !dbg !77
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !77
  %176 = sext i32 %173 to i64, !dbg !77
  %177 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !77
  %178 = and i1 %11, %170, !dbg !78
  %179 = and i1 %171, %11, !dbg !78
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %175, i1 %178, i32 0, i1 %178) #1, !dbg !79
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %177, i1 %179, i32 0, i1 %179) #1, !dbg !79
  %182 = insertelement <16 x i32> poison, i32 %181, i64 0, !dbg !79
  %183 = insertelement <16 x i32> %182, i32 %180, i64 1, !dbg !79
  %184 = insertelement <16 x i32> %183, i32 %167, i64 2, !dbg !79
  %185 = insertelement <16 x i32> %184, i32 %166, i64 3, !dbg !79
  %186 = insertelement <16 x i32> %185, i32 %155, i64 4, !dbg !79
  %187 = insertelement <16 x i32> %186, i32 %154, i64 5, !dbg !79
  %188 = insertelement <16 x i32> %187, i32 %139, i64 6, !dbg !79
  %189 = insertelement <16 x i32> %188, i32 %138, i64 7, !dbg !79
  %190 = insertelement <16 x i32> %189, i32 %137, i64 8, !dbg !79
  %191 = insertelement <16 x i32> %190, i32 %136, i64 9, !dbg !79
  %192 = insertelement <16 x i32> %191, i32 %135, i64 10, !dbg !79
  %193 = insertelement <16 x i32> %192, i32 %134, i64 11, !dbg !79
  %194 = insertelement <16 x i32> %193, i32 %133, i64 12, !dbg !79
  %195 = insertelement <16 x i32> %194, i32 %132, i64 13, !dbg !79
  %196 = insertelement <16 x i32> %195, i32 %131, i64 14, !dbg !79
  %197 = insertelement <16 x i32> %196, i32 %130, i64 15, !dbg !79
  %198 = bitcast <16 x i32> %197 to <16 x float>, !dbg !79
  %199 = insertelement <16 x i1> poison, i1 %169, i64 0, !dbg !80
  %200 = insertelement <16 x i1> %199, i1 %168, i64 1, !dbg !80
  %201 = insertelement <16 x i1> %200, i1 %157, i64 2, !dbg !80
  %202 = insertelement <16 x i1> %201, i1 %156, i64 3, !dbg !80
  %203 = insertelement <16 x i1> %202, i1 %143, i64 4, !dbg !80
  %204 = insertelement <16 x i1> %203, i1 %141, i64 5, !dbg !80
  %205 = insertelement <16 x i1> %204, i1 %122, i64 6, !dbg !80
  %206 = insertelement <16 x i1> %205, i1 %69, i64 7, !dbg !80
  %207 = insertelement <16 x i1> %206, i1 %115, i64 8, !dbg !80
  %208 = insertelement <16 x i1> %207, i1 %62, i64 9, !dbg !80
  %209 = insertelement <16 x i1> %208, i1 %109, i64 10, !dbg !80
  %210 = insertelement <16 x i1> %209, i1 %56, i64 11, !dbg !80
  %211 = insertelement <16 x i1> %210, i1 %102, i64 12, !dbg !80
  %212 = insertelement <16 x i1> %211, i1 %49, i64 13, !dbg !80
  %213 = insertelement <16 x i1> %212, i1 %93, i64 14, !dbg !80
  %214 = insertelement <16 x i1> %213, i1 %40, i64 15, !dbg !80
  %215 = select <16 x i1> %214, <16 x float> %198, <16 x float> splat (float 0xFFF0000000000000), !dbg !80
  %216 = extractelement <16 x float> %215, i64 15, !dbg !81
  %217 = fcmp ogt float %216, %37, !dbg !85
  %218 = extractelement <16 x float> %215, i64 14, !dbg !81
  %219 = fcmp ogt float %218, %129, !dbg !85
  %220 = fcmp uno <16 x float> %215, zeroinitializer, !dbg !86
  %221 = extractelement <16 x i1> %220, i64 15, !dbg !88
  %222 = or i1 %217, %221, !dbg !88
  %223 = extractelement <16 x i1> %220, i64 14, !dbg !88
  %224 = or i1 %219, %223, !dbg !88
  %225 = select i1 %222, float %216, float %37, !dbg !81
  %226 = select i1 %224, float %218, float %129, !dbg !81
  %227 = extractelement <16 x float> %215, i64 13, !dbg !89
  %228 = fcmp ogt float %227, %225, !dbg !91
  %229 = extractelement <16 x float> %215, i64 12, !dbg !89
  %230 = fcmp ogt float %229, %226, !dbg !91
  %231 = extractelement <16 x i1> %220, i64 13, !dbg !92
  %232 = or i1 %231, %228, !dbg !92
  %233 = extractelement <16 x i1> %220, i64 12, !dbg !92
  %234 = or i1 %233, %230, !dbg !92
  %235 = select i1 %232, float %227, float %225, !dbg !89
  %236 = select i1 %234, float %229, float %226, !dbg !89
  %237 = extractelement <16 x float> %215, i64 11, !dbg !93
  %238 = fcmp ogt float %237, %235, !dbg !95
  %239 = extractelement <16 x float> %215, i64 10, !dbg !93
  %240 = fcmp ogt float %239, %236, !dbg !95
  %241 = extractelement <16 x i1> %220, i64 11, !dbg !96
  %242 = or i1 %241, %238, !dbg !96
  %243 = extractelement <16 x i1> %220, i64 10, !dbg !96
  %244 = or i1 %243, %240, !dbg !96
  %245 = select i1 %242, float %237, float %235, !dbg !93
  %246 = select i1 %244, float %239, float %236, !dbg !93
  %247 = extractelement <16 x float> %215, i64 9, !dbg !97
  %248 = fcmp ogt float %247, %245, !dbg !99
  %249 = extractelement <16 x float> %215, i64 8, !dbg !97
  %250 = fcmp ogt float %249, %246, !dbg !99
  %251 = extractelement <16 x i1> %220, i64 9, !dbg !100
  %252 = or i1 %251, %248, !dbg !100
  %253 = extractelement <16 x i1> %220, i64 8, !dbg !100
  %254 = or i1 %253, %250, !dbg !100
  %255 = select i1 %252, float %247, float %245, !dbg !97
  %256 = select i1 %254, float %249, float %246, !dbg !97
  %257 = extractelement <16 x float> %215, i64 7, !dbg !101
  %258 = fcmp ogt float %257, %255, !dbg !103
  %259 = extractelement <16 x float> %215, i64 6, !dbg !101
  %260 = fcmp ogt float %259, %256, !dbg !103
  %261 = extractelement <16 x i1> %220, i64 7, !dbg !104
  %262 = or i1 %261, %258, !dbg !104
  %263 = extractelement <16 x i1> %220, i64 6, !dbg !104
  %264 = or i1 %263, %260, !dbg !104
  %265 = select i1 %262, float %257, float %255, !dbg !101
  %266 = select i1 %264, float %259, float %256, !dbg !101
  %267 = extractelement <16 x float> %215, i64 5, !dbg !105
  %268 = fcmp ogt float %267, %265, !dbg !107
  %269 = extractelement <16 x float> %215, i64 4, !dbg !105
  %270 = fcmp ogt float %269, %266, !dbg !107
  %271 = extractelement <16 x i1> %220, i64 5, !dbg !108
  %272 = or i1 %271, %268, !dbg !108
  %273 = extractelement <16 x i1> %220, i64 4, !dbg !108
  %274 = or i1 %273, %270, !dbg !108
  %275 = select i1 %272, float %267, float %265, !dbg !105
  %276 = select i1 %274, float %269, float %266, !dbg !105
  %277 = extractelement <16 x float> %215, i64 3, !dbg !109
  %278 = fcmp ogt float %277, %275, !dbg !111
  %279 = extractelement <16 x float> %215, i64 2, !dbg !109
  %280 = fcmp ogt float %279, %276, !dbg !111
  %281 = extractelement <16 x i1> %220, i64 3, !dbg !112
  %282 = or i1 %281, %278, !dbg !112
  %283 = extractelement <16 x i1> %220, i64 2, !dbg !112
  %284 = or i1 %283, %280, !dbg !112
  %285 = select i1 %282, float %277, float %275, !dbg !109
  %286 = select i1 %284, float %279, float %276, !dbg !109
  %287 = extractelement <16 x float> %215, i64 1, !dbg !113
  %288 = fcmp ogt float %287, %285, !dbg !114
  %289 = extractelement <16 x float> %215, i64 0, !dbg !113
  %290 = fcmp ogt float %289, %286, !dbg !114
  %291 = extractelement <16 x i1> %220, i64 1, !dbg !115
  %292 = or i1 %291, %288, !dbg !115
  %293 = extractelement <16 x i1> %220, i64 0, !dbg !115
  %294 = or i1 %293, %290, !dbg !115
  %295 = select i1 %292, float %287, float %285, !dbg !113
  %296 = select i1 %294, float %289, float %286, !dbg !113
  %297 = sext i32 %9 to i64, !dbg !116
  %298 = getelementptr float, ptr addrspace(1) %1, i64 %297, !dbg !116
  %299 = bitcast float %295 to i32, !dbg !117
  %300 = bitcast float %296 to i32, !dbg !117
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %299, i32 %300, ptr addrspace(1) %298, i1 %11) #1, !dbg !117
  ret void, !dbg !118
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyx4udwwas2dyrjvfkx3mawczgsutaoopvpavitr7hbcigmzc5ft.py", directory: "inductor_cache/yx")
!4 = !{ptr @triton_poi_fused_constant_pad_nd_max_pool2d_with_indices_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_constant_pad_nd_max_pool2d_with_indices_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_constant_pad_nd_max_pool2d_with_indices_0", linkageName: "triton_poi_fused_constant_pad_nd_max_pool2d_with_indices_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 46, column: 56, scope: !7)
!18 = !DILocation(line: 25, column: 19, scope: !7)
!19 = !DILocation(line: 97, column: 20, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 34, column: 20, scope: !7)
!22 = !DILocation(line: 35, column: 19, scope: !7)
!23 = !DILocation(line: 38, column: 19, scope: !7)
!24 = !DILocation(line: 46, column: 48, scope: !7)
!25 = !DILocation(line: 46, column: 39, scope: !7)
!26 = !DILocation(line: 46, column: 46, scope: !7)
!27 = !DILocation(line: 46, column: 53, scope: !7)
!28 = !DILocation(line: 46, column: 31, scope: !7)
!29 = !DILocation(line: 46, column: 69, scope: !7)
!30 = !DILocation(line: 46, column: 61, scope: !7)
!31 = !DILocation(line: 48, column: 35, scope: !7)
!32 = !DILocation(line: 50, column: 21, scope: !7)
!33 = !DILocation(line: 53, column: 19, scope: !7)
!34 = !DILocation(line: 61, column: 45, scope: !7)
!35 = !DILocation(line: 61, column: 52, scope: !7)
!36 = !DILocation(line: 61, column: 31, scope: !7)
!37 = !DILocation(line: 65, column: 16, scope: !7)
!38 = !DILocation(line: 67, column: 20, scope: !7)
!39 = !DILocation(line: 68, column: 20, scope: !7)
!40 = !DILocation(line: 149, column: 21, scope: !7)
!41 = !DILocation(line: 69, column: 19, scope: !7)
!42 = !DILocation(line: 77, column: 45, scope: !7)
!43 = !DILocation(line: 77, column: 52, scope: !7)
!44 = !DILocation(line: 77, column: 31, scope: !7)
!45 = !DILocation(line: 77, column: 68, scope: !7)
!46 = !DILocation(line: 85, column: 20, scope: !7)
!47 = !DILocation(line: 93, column: 45, scope: !7)
!48 = !DILocation(line: 93, column: 52, scope: !7)
!49 = !DILocation(line: 93, column: 31, scope: !7)
!50 = !DILocation(line: 104, column: 20, scope: !7)
!51 = !DILocation(line: 105, column: 45, scope: !7)
!52 = !DILocation(line: 105, column: 52, scope: !7)
!53 = !DILocation(line: 105, column: 31, scope: !7)
!54 = !DILocation(line: 105, column: 68, scope: !7)
!55 = !DILocation(line: 109, column: 20, scope: !7)
!56 = !DILocation(line: 117, column: 45, scope: !7)
!57 = !DILocation(line: 117, column: 52, scope: !7)
!58 = !DILocation(line: 117, column: 31, scope: !7)
!59 = !DILocation(line: 61, column: 60, scope: !7)
!60 = !DILocation(line: 77, column: 60, scope: !7)
!61 = !DILocation(line: 93, column: 60, scope: !7)
!62 = !DILocation(line: 105, column: 60, scope: !7)
!63 = !DILocation(line: 117, column: 60, scope: !7)
!64 = !DILocation(line: 125, column: 20, scope: !7)
!65 = !DILocation(line: 133, column: 46, scope: !7)
!66 = !DILocation(line: 133, column: 53, scope: !7)
!67 = !DILocation(line: 133, column: 32, scope: !7)
!68 = !DILocation(line: 133, column: 70, scope: !7)
!69 = !DILocation(line: 133, column: 61, scope: !7)
!70 = !DILocation(line: 137, column: 21, scope: !7)
!71 = !DILocation(line: 145, column: 46, scope: !7)
!72 = !DILocation(line: 145, column: 53, scope: !7)
!73 = !DILocation(line: 145, column: 32, scope: !7)
!74 = !DILocation(line: 145, column: 61, scope: !7)
!75 = !DILocation(line: 156, column: 22, scope: !7)
!76 = !DILocation(line: 157, column: 46, scope: !7)
!77 = !DILocation(line: 157, column: 32, scope: !7)
!78 = !DILocation(line: 157, column: 63, scope: !7)
!79 = !DILocation(line: 157, column: 54, scope: !7)
!80 = !DILocation(line: 159, column: 38, scope: !7)
!81 = !DILocation(line: 121, column: 29, scope: !82, inlinedAt: !84)
!82 = distinct !DILexicalBlockFile(scope: !7, file: !83, discriminator: 0)
!83 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!84 = !DILocation(line: 64, column: 42, scope: !7)
!85 = !DILocation(line: 118, column: 15, scope: !82, inlinedAt: !84)
!86 = !DILocation(line: 120, column: 21, scope: !82, inlinedAt: !87)
!87 = !DILocation(line: 160, column: 44, scope: !7)
!88 = !DILocation(line: 120, column: 16, scope: !82, inlinedAt: !84)
!89 = !DILocation(line: 121, column: 29, scope: !82, inlinedAt: !90)
!90 = !DILocation(line: 80, column: 42, scope: !7)
!91 = !DILocation(line: 118, column: 15, scope: !82, inlinedAt: !90)
!92 = !DILocation(line: 120, column: 16, scope: !82, inlinedAt: !90)
!93 = !DILocation(line: 121, column: 29, scope: !82, inlinedAt: !94)
!94 = !DILocation(line: 96, column: 42, scope: !7)
!95 = !DILocation(line: 118, column: 15, scope: !82, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !82, inlinedAt: !94)
!97 = !DILocation(line: 121, column: 29, scope: !82, inlinedAt: !98)
!98 = !DILocation(line: 108, column: 42, scope: !7)
!99 = !DILocation(line: 118, column: 15, scope: !82, inlinedAt: !98)
!100 = !DILocation(line: 120, column: 16, scope: !82, inlinedAt: !98)
!101 = !DILocation(line: 121, column: 29, scope: !82, inlinedAt: !102)
!102 = !DILocation(line: 120, column: 42, scope: !7)
!103 = !DILocation(line: 118, column: 15, scope: !82, inlinedAt: !102)
!104 = !DILocation(line: 120, column: 16, scope: !82, inlinedAt: !102)
!105 = !DILocation(line: 121, column: 29, scope: !82, inlinedAt: !106)
!106 = !DILocation(line: 136, column: 44, scope: !7)
!107 = !DILocation(line: 118, column: 15, scope: !82, inlinedAt: !106)
!108 = !DILocation(line: 120, column: 16, scope: !82, inlinedAt: !106)
!109 = !DILocation(line: 121, column: 29, scope: !82, inlinedAt: !110)
!110 = !DILocation(line: 148, column: 44, scope: !7)
!111 = !DILocation(line: 118, column: 15, scope: !82, inlinedAt: !110)
!112 = !DILocation(line: 120, column: 16, scope: !82, inlinedAt: !110)
!113 = !DILocation(line: 121, column: 29, scope: !82, inlinedAt: !87)
!114 = !DILocation(line: 118, column: 15, scope: !82, inlinedAt: !87)
!115 = !DILocation(line: 120, column: 16, scope: !82, inlinedAt: !87)
!116 = !DILocation(line: 161, column: 25, scope: !7)
!117 = !DILocation(line: 161, column: 38, scope: !7)
!118 = !DILocation(line: 161, column: 4, scope: !7)
