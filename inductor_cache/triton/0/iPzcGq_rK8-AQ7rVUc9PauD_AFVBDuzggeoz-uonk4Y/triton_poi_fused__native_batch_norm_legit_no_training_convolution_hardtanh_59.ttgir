#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_59(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<9.99999974E-6> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<6.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<26496> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<1656> : tensor<256xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<256xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<256xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_3 : tensor<256xi32, #blocked> loc(#loc6)
    %6 = arith.remsi %4, %cst_4 : tensor<256xi32, #blocked> loc(#loc7)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc8)
    %8 = tt.addptr %7, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc8)
    %9 = tt.load %8, %5 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc9)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc10)
    %11 = tt.addptr %10, %6 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc10)
    %12 = tt.load %11, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc11)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc12)
    %14 = tt.addptr %13, %6 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc12)
    %15 = tt.load %14, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc13)
    %16 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc14)
    %17 = tt.addptr %16, %6 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc14)
    %18 = tt.load %17, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc15)
    %19 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc16)
    %20 = tt.addptr %19, %6 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc16)
    %21 = tt.load %20, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc17)
    %22 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc18)
    %23 = tt.addptr %22, %6 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc18)
    %24 = tt.load %23, %5 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc19)
    %25 = arith.addf %9, %12 : tensor<256xf32, #blocked> loc(#loc20)
    %26 = arith.subf %25, %15 : tensor<256xf32, #blocked> loc(#loc21)
    %27 = arith.addf %18, %cst : tensor<256xf32, #blocked> loc(#loc22)
    %28 = tt.extern_elementwise %27 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<256xf32, #blocked>) -> tensor<256xf32, #blocked> loc(#loc23)
    %29 = arith.divf %cst_0, %28 : tensor<256xf32, #blocked> loc(#loc24)
    %30 = arith.mulf %26, %29 : tensor<256xf32, #blocked> loc(#loc25)
    %31 = arith.mulf %30, %21 : tensor<256xf32, #blocked> loc(#loc26)
    %32 = arith.addf %31, %24 : tensor<256xf32, #blocked> loc(#loc27)
    %33 = arith.cmpf ogt, %32, %cst_1 : tensor<256xf32, #blocked> loc(#loc42)
    %34 = arith.cmpf une, %32, %32 : tensor<256xf32, #blocked> loc(#loc43)
    %35 = arith.ori %33, %34 : tensor<256xi1, #blocked> loc(#loc44)
    %36 = arith.select %35, %32, %cst_1 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc45)
    %37 = arith.cmpf olt, %36, %cst_2 : tensor<256xf32, #blocked> loc(#loc46)
    %38 = arith.cmpf une, %36, %36 : tensor<256xf32, #blocked> loc(#loc47)
    %39 = arith.ori %37, %38 : tensor<256xi1, #blocked> loc(#loc48)
    %40 = arith.select %39, %36, %cst_2 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc49)
    tt.store %8, %25, %5 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc38)
    %41 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc39)
    %42 = tt.addptr %41, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc39)
    tt.store %42, %40, %5 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":21:28)
#loc3 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":21:33)
#loc4 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":22:36)
#loc5 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":22:23)
#loc6 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":23:21)
#loc7 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":25:19)
#loc8 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":26:34)
#loc9 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":26:39)
#loc10 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":27:30)
#loc11 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":27:35)
#loc12 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":28:30)
#loc13 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":28:35)
#loc14 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":29:30)
#loc15 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":29:35)
#loc16 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":30:31)
#loc17 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":30:36)
#loc18 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":31:31)
#loc19 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":31:36)
#loc20 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":32:18)
#loc21 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":33:18)
#loc22 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":35:18)
#loc23 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":36:26)
#loc24 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":38:19)
#loc25 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":41:19)
#loc26 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":42:20)
#loc27 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":43:20)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc29 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":45:42)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":110:15)
#loc34 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":47:42)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":112:21)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":112:16)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":113:29)
#loc38 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":48:39)
#loc39 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":49:25)
#loc40 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":49:37)
#loc41 = loc("inductor_cache/z5/cz5pjdppwiflmsaibii425qqwxcig5veneyiqyvygdywa4jzlopy.py":49:4)
#loc42 = loc(callsite(#loc28 at #loc29))
#loc43 = loc(callsite(#loc30 at #loc29))
#loc44 = loc(callsite(#loc31 at #loc29))
#loc45 = loc(callsite(#loc32 at #loc29))
#loc46 = loc(callsite(#loc33 at #loc34))
#loc47 = loc(callsite(#loc35 at #loc34))
#loc48 = loc(callsite(#loc36 at #loc34))
#loc49 = loc(callsite(#loc37 at #loc34))
