; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_relu_50(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 6, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 2, !dbg !12
  %19 = and i32 %18, 60, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = icmp slt i32 %20, 2112, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %23 = shl i32 %22, 4, !dbg !16
  %24 = lshr i32 %17, 4, !dbg !17
  %25 = and i32 %24, 7, !dbg !17
  %26 = or disjoint i32 %23, %25, !dbg !18
  %27 = or disjoint i32 %26, 8, !dbg !18
  %28 = icmp slt i32 %26, 16, !dbg !19
  %29 = icmp slt i32 %27, 16, !dbg !19
  %.frozen = freeze i32 %20, !dbg !20
  %30 = sdiv i32 %.frozen, 528, !dbg !20
  %31 = mul i32 %30, 528, !dbg !21
  %.decomposed = sub i32 %.frozen, %31, !dbg !21
  %32 = icmp slt i32 %.decomposed, 88, !dbg !22
  %33 = mul i32 %26, 88, !dbg !23
  %34 = mul i32 %27, 88, !dbg !23
  %35 = mul i32 %30, 1408, !dbg !24
  %36 = add i32 %33, %35, !dbg !25
  %37 = add i32 %35, %34, !dbg !25
  %38 = add i32 %36, %.decomposed, !dbg !26
  %39 = add i32 %37, %.decomposed, !dbg !26
  %40 = sext i32 %38 to i64, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !27
  %42 = sext i32 %39 to i64, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !27
  %44 = and i1 %32, %28, !dbg !28
  %45 = and i1 %29, %32, !dbg !28
  %46 = and i1 %21, %44, !dbg !29
  %47 = and i1 %21, %45, !dbg !29
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #3, !dbg !30
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #3, !dbg !30
  %50 = add nsw i32 %.decomposed, -88, !dbg !31
  %51 = icmp ult i32 %50, 88, !dbg !31
  %52 = add i32 %36, %50, !dbg !32
  %53 = add i32 %37, %50, !dbg !32
  %54 = sext i32 %52 to i64, !dbg !33
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !33
  %56 = sext i32 %53 to i64, !dbg !33
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !33
  %58 = and i1 %28, %51, !dbg !34
  %59 = and i1 %29, %51, !dbg !34
  %60 = and i1 %21, %58, !dbg !35
  %61 = and i1 %21, %59, !dbg !35
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %55, i1 %60, i32 0, i1 %60, i32 0, i1 %60, i32 0, i1 %60, i32 0, i1 %60) #3, !dbg !36
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61) #3, !dbg !36
  %64 = add nsw i32 %.decomposed, -176, !dbg !37
  %65 = icmp ult i32 %64, 88, !dbg !37
  %66 = add i32 %36, %64, !dbg !38
  %67 = add i32 %37, %64, !dbg !38
  %68 = sext i32 %66 to i64, !dbg !39
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %68, !dbg !39
  %70 = sext i32 %67 to i64, !dbg !39
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %70, !dbg !39
  %72 = and i1 %28, %65, !dbg !40
  %73 = and i1 %29, %65, !dbg !40
  %74 = and i1 %21, %72, !dbg !41
  %75 = and i1 %21, %73, !dbg !41
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %69, i1 %74, i32 0, i1 %74, i32 0, i1 %74, i32 0, i1 %74, i32 0, i1 %74) #3, !dbg !42
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %71, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #3, !dbg !42
  %78 = add nsw i32 %.decomposed, -264, !dbg !43
  %79 = icmp ult i32 %78, 88, !dbg !43
  %80 = add i32 %36, %78, !dbg !44
  %81 = add i32 %37, %78, !dbg !44
  %82 = sext i32 %80 to i64, !dbg !45
  %83 = getelementptr float, ptr addrspace(1) %3, i64 %82, !dbg !45
  %84 = sext i32 %81 to i64, !dbg !45
  %85 = getelementptr float, ptr addrspace(1) %3, i64 %84, !dbg !45
  %86 = and i1 %28, %79, !dbg !46
  %87 = and i1 %29, %79, !dbg !46
  %88 = and i1 %21, %86, !dbg !47
  %89 = and i1 %21, %87, !dbg !47
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88) #3, !dbg !48
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %85, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89) #3, !dbg !48
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !49
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !49
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %92, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88) #3, !dbg !50
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %93, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89) #3, !dbg !50
  %96 = add nsw i32 %.decomposed, -352, !dbg !51
  %97 = icmp ult i32 %96, 88, !dbg !51
  %98 = add i32 %36, %96, !dbg !52
  %99 = add i32 %37, %96, !dbg !52
  %100 = sext i32 %98 to i64, !dbg !53
  %101 = getelementptr float, ptr addrspace(1) %4, i64 %100, !dbg !53
  %102 = sext i32 %99 to i64, !dbg !53
  %103 = getelementptr float, ptr addrspace(1) %4, i64 %102, !dbg !53
  %104 = and i1 %28, %97, !dbg !54
  %105 = and i1 %29, %97, !dbg !54
  %106 = and i1 %21, %104, !dbg !55
  %107 = and i1 %21, %105, !dbg !55
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %101, i1 %106, i32 0, i1 %106, i32 0, i1 %106, i32 0, i1 %106, i32 0, i1 %106) #3, !dbg !56
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %103, i1 %107, i32 0, i1 %107, i32 0, i1 %107, i32 0, i1 %107, i32 0, i1 %107) #3, !dbg !56
  %110 = icmp sgt i32 %.decomposed, 439, !dbg !57
  %111 = add nsw i32 %.decomposed, -440, !dbg !58
  %112 = add i32 %36, %111, !dbg !59
  %113 = add i32 %37, %111, !dbg !59
  %114 = sext i32 %112 to i64, !dbg !60
  %115 = getelementptr float, ptr addrspace(1) %5, i64 %114, !dbg !60
  %116 = sext i32 %113 to i64, !dbg !60
  %117 = getelementptr float, ptr addrspace(1) %5, i64 %116, !dbg !60
  %118 = and i1 %110, %28, !dbg !61
  %119 = and i1 %29, %110, !dbg !61
  %120 = and i1 %21, %118, !dbg !62
  %121 = and i1 %21, %119, !dbg !62
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %115, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #3, !dbg !63
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %117, i1 %121, i32 0, i1 %121, i32 0, i1 %121, i32 0, i1 %121, i32 0, i1 %121) #3, !dbg !63
  %124 = sext i32 %111 to i64, !dbg !64
  %125 = getelementptr float, ptr addrspace(1) %6, i64 %124, !dbg !64
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %125, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #3, !dbg !65
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %125, i1 %121, i32 0, i1 %121, i32 0, i1 %121, i32 0, i1 %121, i32 0, i1 %121) #3, !dbg !65
  %128 = getelementptr float, ptr addrspace(1) %7, i64 %124, !dbg !66
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %128, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #3, !dbg !67
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !67
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !67
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !67
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !67
  %134 = bitcast i32 %130 to float, !dbg !67
  %135 = bitcast i32 %131 to float, !dbg !67
  %136 = bitcast i32 %132 to float, !dbg !67
  %137 = bitcast i32 %133 to float, !dbg !67
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %128, i1 %121, i32 0, i1 %121, i32 0, i1 %121, i32 0, i1 %121, i32 0, i1 %121) #3, !dbg !67
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !67
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !67
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !67
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !67
  %143 = bitcast i32 %139 to float, !dbg !67
  %144 = bitcast i32 %140 to float, !dbg !67
  %145 = bitcast i32 %141 to float, !dbg !67
  %146 = bitcast i32 %142 to float, !dbg !67
  %147 = fadd float %134, 0x3F50624DE0000000, !dbg !68
  %148 = fadd float %135, 0x3F50624DE0000000, !dbg !68
  %149 = fadd float %136, 0x3F50624DE0000000, !dbg !68
  %150 = fadd float %137, 0x3F50624DE0000000, !dbg !68
  %151 = fadd float %143, 0x3F50624DE0000000, !dbg !68
  %152 = fadd float %144, 0x3F50624DE0000000, !dbg !68
  %153 = fadd float %145, 0x3F50624DE0000000, !dbg !68
  %154 = fadd float %146, 0x3F50624DE0000000, !dbg !68
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i = icmp eq i32 %155, 0, !dbg !69
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i = icmp eq i32 %156, 0, !dbg !69
  br i1 %.not.i, label %162, label %157, !dbg !69

157:                                              ; preds = %14
  br i1 %.not1.i, label %160, label %158, !dbg !69

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %147) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %147) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

162:                                              ; preds = %14
  br i1 %.not1.i, label %165, label %163, !dbg !69

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.f(float %147) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.f(float %147) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

__nv_sqrtf.exit:                                  ; preds = %158, %160, %163, %165
  %.0.i = phi float [ %159, %158 ], [ %161, %160 ], [ %164, %163 ], [ %166, %165 ], !dbg !69
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i1 = icmp eq i32 %167, 0, !dbg !69
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i4 = icmp eq i32 %168, 0, !dbg !69
  br i1 %.not.i1, label %174, label %169, !dbg !69

169:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %172, label %170, !dbg !69

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %148) #3, !dbg !69
  br label %__nv_sqrtf.exit5, !dbg !69

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %148) #3, !dbg !69
  br label %__nv_sqrtf.exit5, !dbg !69

174:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %177, label %175, !dbg !69

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.f(float %148) #3, !dbg !69
  br label %__nv_sqrtf.exit5, !dbg !69

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.f(float %148) #3, !dbg !69
  br label %__nv_sqrtf.exit5, !dbg !69

__nv_sqrtf.exit5:                                 ; preds = %170, %172, %175, %177
  %.0.i3 = phi float [ %171, %170 ], [ %173, %172 ], [ %176, %175 ], [ %178, %177 ], !dbg !69
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i6 = icmp eq i32 %179, 0, !dbg !69
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i9 = icmp eq i32 %180, 0, !dbg !69
  br i1 %.not.i6, label %186, label %181, !dbg !69

181:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %184, label %182, !dbg !69

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %149) #3, !dbg !69
  br label %__nv_sqrtf.exit10, !dbg !69

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %149) #3, !dbg !69
  br label %__nv_sqrtf.exit10, !dbg !69

186:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %189, label %187, !dbg !69

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.f(float %149) #3, !dbg !69
  br label %__nv_sqrtf.exit10, !dbg !69

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.f(float %149) #3, !dbg !69
  br label %__nv_sqrtf.exit10, !dbg !69

__nv_sqrtf.exit10:                                ; preds = %182, %184, %187, %189
  %.0.i8 = phi float [ %183, %182 ], [ %185, %184 ], [ %188, %187 ], [ %190, %189 ], !dbg !69
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i11 = icmp eq i32 %191, 0, !dbg !69
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i14 = icmp eq i32 %192, 0, !dbg !69
  br i1 %.not.i11, label %198, label %193, !dbg !69

193:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %196, label %194, !dbg !69

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %150) #3, !dbg !69
  br label %__nv_sqrtf.exit15, !dbg !69

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %150) #3, !dbg !69
  br label %__nv_sqrtf.exit15, !dbg !69

198:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %201, label %199, !dbg !69

199:                                              ; preds = %198
  %200 = tail call float @llvm.nvvm.sqrt.rn.f(float %150) #3, !dbg !69
  br label %__nv_sqrtf.exit15, !dbg !69

201:                                              ; preds = %198
  %202 = tail call float @llvm.nvvm.sqrt.approx.f(float %150) #3, !dbg !69
  br label %__nv_sqrtf.exit15, !dbg !69

__nv_sqrtf.exit15:                                ; preds = %194, %196, %199, %201
  %.0.i13 = phi float [ %195, %194 ], [ %197, %196 ], [ %200, %199 ], [ %202, %201 ], !dbg !69
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i16 = icmp eq i32 %203, 0, !dbg !69
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i19 = icmp eq i32 %204, 0, !dbg !69
  br i1 %.not.i16, label %210, label %205, !dbg !69

205:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %208, label %206, !dbg !69

206:                                              ; preds = %205
  %207 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %151) #3, !dbg !69
  br label %__nv_sqrtf.exit20, !dbg !69

208:                                              ; preds = %205
  %209 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %151) #3, !dbg !69
  br label %__nv_sqrtf.exit20, !dbg !69

210:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %213, label %211, !dbg !69

211:                                              ; preds = %210
  %212 = tail call float @llvm.nvvm.sqrt.rn.f(float %151) #3, !dbg !69
  br label %__nv_sqrtf.exit20, !dbg !69

213:                                              ; preds = %210
  %214 = tail call float @llvm.nvvm.sqrt.approx.f(float %151) #3, !dbg !69
  br label %__nv_sqrtf.exit20, !dbg !69

__nv_sqrtf.exit20:                                ; preds = %206, %208, %211, %213
  %.0.i18 = phi float [ %207, %206 ], [ %209, %208 ], [ %212, %211 ], [ %214, %213 ], !dbg !69
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i21 = icmp eq i32 %215, 0, !dbg !69
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i24 = icmp eq i32 %216, 0, !dbg !69
  br i1 %.not.i21, label %222, label %217, !dbg !69

217:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %220, label %218, !dbg !69

218:                                              ; preds = %217
  %219 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %152) #3, !dbg !69
  br label %__nv_sqrtf.exit25, !dbg !69

220:                                              ; preds = %217
  %221 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %152) #3, !dbg !69
  br label %__nv_sqrtf.exit25, !dbg !69

222:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %225, label %223, !dbg !69

223:                                              ; preds = %222
  %224 = tail call float @llvm.nvvm.sqrt.rn.f(float %152) #3, !dbg !69
  br label %__nv_sqrtf.exit25, !dbg !69

225:                                              ; preds = %222
  %226 = tail call float @llvm.nvvm.sqrt.approx.f(float %152) #3, !dbg !69
  br label %__nv_sqrtf.exit25, !dbg !69

__nv_sqrtf.exit25:                                ; preds = %218, %220, %223, %225
  %.0.i23 = phi float [ %219, %218 ], [ %221, %220 ], [ %224, %223 ], [ %226, %225 ], !dbg !69
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i26 = icmp eq i32 %227, 0, !dbg !69
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i29 = icmp eq i32 %228, 0, !dbg !69
  br i1 %.not.i26, label %234, label %229, !dbg !69

229:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %232, label %230, !dbg !69

230:                                              ; preds = %229
  %231 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %153) #3, !dbg !69
  br label %__nv_sqrtf.exit30, !dbg !69

232:                                              ; preds = %229
  %233 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %153) #3, !dbg !69
  br label %__nv_sqrtf.exit30, !dbg !69

234:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %237, label %235, !dbg !69

235:                                              ; preds = %234
  %236 = tail call float @llvm.nvvm.sqrt.rn.f(float %153) #3, !dbg !69
  br label %__nv_sqrtf.exit30, !dbg !69

237:                                              ; preds = %234
  %238 = tail call float @llvm.nvvm.sqrt.approx.f(float %153) #3, !dbg !69
  br label %__nv_sqrtf.exit30, !dbg !69

__nv_sqrtf.exit30:                                ; preds = %230, %232, %235, %237
  %.0.i28 = phi float [ %231, %230 ], [ %233, %232 ], [ %236, %235 ], [ %238, %237 ], !dbg !69
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i31 = icmp eq i32 %239, 0, !dbg !69
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i34 = icmp eq i32 %240, 0, !dbg !69
  br i1 %.not.i31, label %246, label %241, !dbg !69

241:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %244, label %242, !dbg !69

242:                                              ; preds = %241
  %243 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %154) #3, !dbg !69
  br label %__nv_sqrtf.exit35, !dbg !69

244:                                              ; preds = %241
  %245 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %154) #3, !dbg !69
  br label %__nv_sqrtf.exit35, !dbg !69

246:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %249, label %247, !dbg !69

247:                                              ; preds = %246
  %248 = tail call float @llvm.nvvm.sqrt.rn.f(float %154) #3, !dbg !69
  br label %__nv_sqrtf.exit35, !dbg !69

249:                                              ; preds = %246
  %250 = tail call float @llvm.nvvm.sqrt.approx.f(float %154) #3, !dbg !69
  br label %__nv_sqrtf.exit35, !dbg !69

__nv_sqrtf.exit35:                                ; preds = %242, %244, %247, %249
  %.0.i33 = phi float [ %243, %242 ], [ %245, %244 ], [ %248, %247 ], [ %250, %249 ], !dbg !69
  %251 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !63
  %252 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !65
  %253 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !63
  %254 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !65
  %255 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !63
  %256 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !65
  %257 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !63
  %258 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !65
  %259 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !63
  %260 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !65
  %261 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !63
  %262 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !65
  %263 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !63
  %264 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !65
  %265 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !63
  %266 = insertelement <8 x i32> poison, i32 %251, i64 0, !dbg !63
  %267 = insertelement <8 x i32> %266, i32 %253, i64 1, !dbg !63
  %268 = insertelement <8 x i32> %267, i32 %255, i64 2, !dbg !63
  %269 = insertelement <8 x i32> %268, i32 %257, i64 3, !dbg !63
  %270 = insertelement <8 x i32> %269, i32 %259, i64 4, !dbg !63
  %271 = insertelement <8 x i32> %270, i32 %261, i64 5, !dbg !63
  %272 = insertelement <8 x i32> %271, i32 %263, i64 6, !dbg !63
  %273 = insertelement <8 x i32> %272, i32 %265, i64 7, !dbg !63
  %274 = bitcast <8 x i32> %273 to <8 x float>, !dbg !63
  %275 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !65
  %276 = insertelement <8 x i32> poison, i32 %252, i64 0, !dbg !65
  %277 = insertelement <8 x i32> %276, i32 %254, i64 1, !dbg !65
  %278 = insertelement <8 x i32> %277, i32 %256, i64 2, !dbg !65
  %279 = insertelement <8 x i32> %278, i32 %258, i64 3, !dbg !65
  %280 = insertelement <8 x i32> %279, i32 %260, i64 4, !dbg !65
  %281 = insertelement <8 x i32> %280, i32 %262, i64 5, !dbg !65
  %282 = insertelement <8 x i32> %281, i32 %264, i64 6, !dbg !65
  %283 = insertelement <8 x i32> %282, i32 %275, i64 7, !dbg !65
  %284 = bitcast <8 x i32> %283 to <8 x float>, !dbg !65
  %285 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !56
  %286 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !56
  %287 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !56
  %288 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !56
  %289 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !56
  %290 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !56
  %291 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !56
  %292 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !56
  %293 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !48
  %294 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !50
  %295 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !48
  %296 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !50
  %297 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !48
  %298 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !50
  %299 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !48
  %300 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !50
  %301 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !48
  %302 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !50
  %303 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !48
  %304 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !50
  %305 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !48
  %306 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !50
  %307 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !48
  %308 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !50
  %309 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !42
  %310 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !42
  %311 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !42
  %312 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !42
  %313 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !42
  %314 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !42
  %315 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !42
  %316 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !42
  %317 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !36
  %318 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !36
  %319 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !36
  %320 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !36
  %321 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !36
  %322 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !36
  %323 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !36
  %324 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !36
  %325 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !30
  %326 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !30
  %327 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !30
  %328 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !30
  %329 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !30
  %330 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !30
  %331 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !30
  %332 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !30
  %333 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !70
  %334 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !70
  %335 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !70
  %336 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !70
  %337 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !70
  %338 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !70
  %339 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !70
  %340 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !70
  %341 = getelementptr float, ptr addrspace(1) %8, i64 %124, !dbg !71
  %342 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %341, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #3, !dbg !72
  %343 = extractvalue { i32, i32, i32, i32 } %342, 0, !dbg !72
  %344 = extractvalue { i32, i32, i32, i32 } %342, 1, !dbg !72
  %345 = extractvalue { i32, i32, i32, i32 } %342, 2, !dbg !72
  %346 = extractvalue { i32, i32, i32, i32 } %342, 3, !dbg !72
  %347 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %341, i1 %121, i32 0, i1 %121, i32 0, i1 %121, i32 0, i1 %121, i32 0, i1 %121) #3, !dbg !72
  %348 = extractvalue { i32, i32, i32, i32 } %347, 0, !dbg !72
  %349 = extractvalue { i32, i32, i32, i32 } %347, 1, !dbg !72
  %350 = extractvalue { i32, i32, i32, i32 } %347, 2, !dbg !72
  %351 = extractvalue { i32, i32, i32, i32 } %347, 3, !dbg !72
  %352 = getelementptr float, ptr addrspace(1) %9, i64 %124, !dbg !73
  %353 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %352, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #3, !dbg !74
  %354 = extractvalue { i32, i32, i32, i32 } %353, 0, !dbg !74
  %355 = extractvalue { i32, i32, i32, i32 } %353, 1, !dbg !74
  %356 = extractvalue { i32, i32, i32, i32 } %353, 2, !dbg !74
  %357 = extractvalue { i32, i32, i32, i32 } %353, 3, !dbg !74
  %358 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %352, i1 %121, i32 0, i1 %121, i32 0, i1 %121, i32 0, i1 %121, i32 0, i1 %121) #3, !dbg !74
  %359 = extractvalue { i32, i32, i32, i32 } %358, 0, !dbg !74
  %360 = extractvalue { i32, i32, i32, i32 } %358, 1, !dbg !74
  %361 = extractvalue { i32, i32, i32, i32 } %358, 2, !dbg !74
  %362 = extractvalue { i32, i32, i32, i32 } %358, 3, !dbg !74
  %363 = getelementptr float, ptr addrspace(1) %10, i64 %114, !dbg !75
  %364 = getelementptr float, ptr addrspace(1) %10, i64 %116, !dbg !75
  %365 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %363, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #3, !dbg !76
  %366 = extractvalue { i32, i32, i32, i32 } %365, 0, !dbg !76
  %367 = extractvalue { i32, i32, i32, i32 } %365, 1, !dbg !76
  %368 = extractvalue { i32, i32, i32, i32 } %365, 2, !dbg !76
  %369 = extractvalue { i32, i32, i32, i32 } %365, 3, !dbg !76
  %370 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %364, i1 %121, i32 0, i1 %121, i32 0, i1 %121, i32 0, i1 %121, i32 0, i1 %121) #3, !dbg !76
  %371 = extractvalue { i32, i32, i32, i32 } %370, 0, !dbg !76
  %372 = extractvalue { i32, i32, i32, i32 } %370, 1, !dbg !76
  %373 = extractvalue { i32, i32, i32, i32 } %370, 2, !dbg !76
  %374 = extractvalue { i32, i32, i32, i32 } %370, 3, !dbg !76
  %375 = fsub <8 x float> %274, %284, !dbg !77
  %376 = insertelement <8 x i32> poison, i32 %285, i64 0, !dbg !56
  %377 = insertelement <8 x i32> %376, i32 %286, i64 1, !dbg !56
  %378 = insertelement <8 x i32> %377, i32 %287, i64 2, !dbg !56
  %379 = insertelement <8 x i32> %378, i32 %288, i64 3, !dbg !56
  %380 = insertelement <8 x i32> %379, i32 %289, i64 4, !dbg !56
  %381 = insertelement <8 x i32> %380, i32 %290, i64 5, !dbg !56
  %382 = insertelement <8 x i32> %381, i32 %291, i64 6, !dbg !56
  %383 = insertelement <8 x i32> %382, i32 %292, i64 7, !dbg !56
  %384 = bitcast <8 x i32> %383 to <8 x float>, !dbg !56
  %385 = fadd <8 x float> %384, %384, !dbg !78
  %386 = insertelement <8 x i32> poison, i32 %293, i64 0, !dbg !48
  %387 = insertelement <8 x i32> %386, i32 %295, i64 1, !dbg !48
  %388 = insertelement <8 x i32> %387, i32 %297, i64 2, !dbg !48
  %389 = insertelement <8 x i32> %388, i32 %299, i64 3, !dbg !48
  %390 = insertelement <8 x i32> %389, i32 %301, i64 4, !dbg !48
  %391 = insertelement <8 x i32> %390, i32 %303, i64 5, !dbg !48
  %392 = insertelement <8 x i32> %391, i32 %305, i64 6, !dbg !48
  %393 = insertelement <8 x i32> %392, i32 %307, i64 7, !dbg !48
  %394 = bitcast <8 x i32> %393 to <8 x float>, !dbg !48
  %395 = insertelement <8 x i32> poison, i32 %294, i64 0, !dbg !50
  %396 = insertelement <8 x i32> %395, i32 %296, i64 1, !dbg !50
  %397 = insertelement <8 x i32> %396, i32 %298, i64 2, !dbg !50
  %398 = insertelement <8 x i32> %397, i32 %300, i64 3, !dbg !50
  %399 = insertelement <8 x i32> %398, i32 %302, i64 4, !dbg !50
  %400 = insertelement <8 x i32> %399, i32 %304, i64 5, !dbg !50
  %401 = insertelement <8 x i32> %400, i32 %306, i64 6, !dbg !50
  %402 = insertelement <8 x i32> %401, i32 %308, i64 7, !dbg !50
  %403 = bitcast <8 x i32> %402 to <8 x float>, !dbg !50
  %404 = fadd <8 x float> %394, %403, !dbg !79
  %405 = insertelement <8 x i32> poison, i32 %309, i64 0, !dbg !42
  %406 = insertelement <8 x i32> %405, i32 %310, i64 1, !dbg !42
  %407 = insertelement <8 x i32> %406, i32 %311, i64 2, !dbg !42
  %408 = insertelement <8 x i32> %407, i32 %312, i64 3, !dbg !42
  %409 = insertelement <8 x i32> %408, i32 %313, i64 4, !dbg !42
  %410 = insertelement <8 x i32> %409, i32 %314, i64 5, !dbg !42
  %411 = insertelement <8 x i32> %410, i32 %315, i64 6, !dbg !42
  %412 = insertelement <8 x i32> %411, i32 %316, i64 7, !dbg !42
  %413 = bitcast <8 x i32> %412 to <8 x float>, !dbg !42
  %414 = insertelement <8 x i32> poison, i32 %317, i64 0, !dbg !36
  %415 = insertelement <8 x i32> %414, i32 %318, i64 1, !dbg !36
  %416 = insertelement <8 x i32> %415, i32 %319, i64 2, !dbg !36
  %417 = insertelement <8 x i32> %416, i32 %320, i64 3, !dbg !36
  %418 = insertelement <8 x i32> %417, i32 %321, i64 4, !dbg !36
  %419 = insertelement <8 x i32> %418, i32 %322, i64 5, !dbg !36
  %420 = insertelement <8 x i32> %419, i32 %323, i64 6, !dbg !36
  %421 = insertelement <8 x i32> %420, i32 %324, i64 7, !dbg !36
  %422 = bitcast <8 x i32> %421 to <8 x float>, !dbg !36
  %423 = insertelement <8 x i32> poison, i32 %325, i64 0, !dbg !30
  %424 = insertelement <8 x i32> %423, i32 %326, i64 1, !dbg !30
  %425 = insertelement <8 x i32> %424, i32 %327, i64 2, !dbg !30
  %426 = insertelement <8 x i32> %425, i32 %328, i64 3, !dbg !30
  %427 = insertelement <8 x i32> %426, i32 %329, i64 4, !dbg !30
  %428 = insertelement <8 x i32> %427, i32 %330, i64 5, !dbg !30
  %429 = insertelement <8 x i32> %428, i32 %331, i64 6, !dbg !30
  %430 = insertelement <8 x i32> %429, i32 %332, i64 7, !dbg !30
  %431 = bitcast <8 x i32> %430 to <8 x float>, !dbg !30
  %432 = insertelement <8 x float> poison, float %340, i64 0, !dbg !80
  %433 = insertelement <8 x float> %432, float %339, i64 1, !dbg !80
  %434 = insertelement <8 x float> %433, float %338, i64 2, !dbg !80
  %435 = insertelement <8 x float> %434, float %337, i64 3, !dbg !80
  %436 = insertelement <8 x float> %435, float %336, i64 4, !dbg !80
  %437 = insertelement <8 x float> %436, float %335, i64 5, !dbg !80
  %438 = insertelement <8 x float> %437, float %334, i64 6, !dbg !80
  %439 = insertelement <8 x float> %438, float %333, i64 7, !dbg !80
  %440 = fmul <8 x float> %375, %439, !dbg !80
  %441 = insertelement <8 x i32> poison, i32 %351, i64 0, !dbg !72
  %442 = insertelement <8 x i32> %441, i32 %350, i64 1, !dbg !72
  %443 = insertelement <8 x i32> %442, i32 %349, i64 2, !dbg !72
  %444 = insertelement <8 x i32> %443, i32 %348, i64 3, !dbg !72
  %445 = insertelement <8 x i32> %444, i32 %346, i64 4, !dbg !72
  %446 = insertelement <8 x i32> %445, i32 %345, i64 5, !dbg !72
  %447 = insertelement <8 x i32> %446, i32 %344, i64 6, !dbg !72
  %448 = insertelement <8 x i32> %447, i32 %343, i64 7, !dbg !72
  %449 = bitcast <8 x i32> %448 to <8 x float>, !dbg !72
  %450 = fmul <8 x float> %440, %449, !dbg !81
  %451 = insertelement <8 x i32> poison, i32 %362, i64 0, !dbg !74
  %452 = insertelement <8 x i32> %451, i32 %361, i64 1, !dbg !74
  %453 = insertelement <8 x i32> %452, i32 %360, i64 2, !dbg !74
  %454 = insertelement <8 x i32> %453, i32 %359, i64 3, !dbg !74
  %455 = insertelement <8 x i32> %454, i32 %357, i64 4, !dbg !74
  %456 = insertelement <8 x i32> %455, i32 %356, i64 5, !dbg !74
  %457 = insertelement <8 x i32> %456, i32 %355, i64 6, !dbg !74
  %458 = insertelement <8 x i32> %457, i32 %354, i64 7, !dbg !74
  %459 = bitcast <8 x i32> %458 to <8 x float>, !dbg !74
  %460 = fadd <8 x float> %450, %459, !dbg !82
  %461 = insertelement <8 x i32> poison, i32 %374, i64 0, !dbg !76
  %462 = insertelement <8 x i32> %461, i32 %373, i64 1, !dbg !76
  %463 = insertelement <8 x i32> %462, i32 %372, i64 2, !dbg !76
  %464 = insertelement <8 x i32> %463, i32 %371, i64 3, !dbg !76
  %465 = insertelement <8 x i32> %464, i32 %369, i64 4, !dbg !76
  %466 = insertelement <8 x i32> %465, i32 %368, i64 5, !dbg !76
  %467 = insertelement <8 x i32> %466, i32 %367, i64 6, !dbg !76
  %468 = insertelement <8 x i32> %467, i32 %366, i64 7, !dbg !76
  %469 = bitcast <8 x i32> %468 to <8 x float>, !dbg !76
  %470 = fadd <8 x float> %460, %469, !dbg !83
  %471 = insertelement <8 x i1> poison, i1 %110, i64 0, !dbg !84
  %472 = shufflevector <8 x i1> %471, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !84
  %473 = select <8 x i1> %472, <8 x float> %470, <8 x float> zeroinitializer, !dbg !84
  %474 = insertelement <8 x i1> poison, i1 %97, i64 0, !dbg !85
  %475 = shufflevector <8 x i1> %474, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !85
  %476 = select <8 x i1> %475, <8 x float> %385, <8 x float> %473, !dbg !85
  %477 = insertelement <8 x i1> poison, i1 %79, i64 0, !dbg !85
  %478 = shufflevector <8 x i1> %477, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !85
  %479 = select <8 x i1> %478, <8 x float> %404, <8 x float> %476, !dbg !85
  %480 = insertelement <8 x i1> poison, i1 %65, i64 0, !dbg !86
  %481 = shufflevector <8 x i1> %480, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !86
  %482 = select <8 x i1> %481, <8 x float> %413, <8 x float> %479, !dbg !86
  %483 = insertelement <8 x i1> poison, i1 %51, i64 0, !dbg !87
  %484 = shufflevector <8 x i1> %483, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !87
  %485 = select <8 x i1> %484, <8 x float> %422, <8 x float> %482, !dbg !87
  %486 = insertelement <8 x i1> poison, i1 %32, i64 0, !dbg !88
  %487 = shufflevector <8 x i1> %486, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !88
  %488 = select <8 x i1> %487, <8 x float> %431, <8 x float> %485, !dbg !88
  %489 = fcmp olt <8 x float> %488, zeroinitializer, !dbg !89
  %490 = extractelement <8 x i1> %489, i64 7, !dbg !93
  %491 = extractelement <8 x i1> %489, i64 6, !dbg !93
  %492 = extractelement <8 x i1> %489, i64 5, !dbg !93
  %493 = extractelement <8 x i1> %489, i64 4, !dbg !93
  %494 = extractelement <8 x i1> %489, i64 3, !dbg !93
  %495 = extractelement <8 x i1> %489, i64 2, !dbg !93
  %496 = extractelement <8 x i1> %489, i64 1, !dbg !93
  %497 = extractelement <8 x i1> %489, i64 0, !dbg !93
  %498 = mul i32 %26, 528, !dbg !94
  %499 = mul i32 %27, 528, !dbg !94
  %500 = add i32 %.decomposed, %499, !dbg !95
  %501 = mul i32 %30, 8448, !dbg !96
  %502 = add i32 %501, %.decomposed, !dbg !95
  %503 = add i32 %502, %498, !dbg !97
  %504 = add i32 %500, %501, !dbg !97
  %505 = sext i32 %503 to i64, !dbg !98
  %506 = getelementptr float, ptr addrspace(1) %11, i64 %505, !dbg !98
  %507 = sext i32 %504 to i64, !dbg !98
  %508 = getelementptr float, ptr addrspace(1) %11, i64 %507, !dbg !98
  %509 = and i1 %21, %28, !dbg !99
  %510 = and i1 %29, %21, !dbg !99
  %bc = bitcast <8 x float> %488 to <8 x i32>, !dbg !100
  %511 = extractelement <8 x i32> %bc, i64 7, !dbg !100
  %512 = select i1 %490, i32 0, i32 %511, !dbg !93
  %bc36 = bitcast <8 x float> %488 to <8 x i32>, !dbg !100
  %513 = extractelement <8 x i32> %bc36, i64 6, !dbg !100
  %514 = select i1 %491, i32 0, i32 %513, !dbg !93
  %bc37 = bitcast <8 x float> %488 to <8 x i32>, !dbg !100
  %515 = extractelement <8 x i32> %bc37, i64 5, !dbg !100
  %516 = select i1 %492, i32 0, i32 %515, !dbg !93
  %bc38 = bitcast <8 x float> %488 to <8 x i32>, !dbg !100
  %517 = extractelement <8 x i32> %bc38, i64 4, !dbg !100
  %518 = select i1 %493, i32 0, i32 %517, !dbg !93
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %512, i32 %514, i32 %516, i32 %518, ptr addrspace(1) %506, i1 %509) #3, !dbg !100
  %bc39 = bitcast <8 x float> %488 to <8 x i32>, !dbg !100
  %519 = extractelement <8 x i32> %bc39, i64 3, !dbg !100
  %520 = select i1 %494, i32 0, i32 %519, !dbg !93
  %bc40 = bitcast <8 x float> %488 to <8 x i32>, !dbg !100
  %521 = extractelement <8 x i32> %bc40, i64 2, !dbg !100
  %522 = select i1 %495, i32 0, i32 %521, !dbg !93
  %bc41 = bitcast <8 x float> %488 to <8 x i32>, !dbg !100
  %523 = extractelement <8 x i32> %bc41, i64 1, !dbg !100
  %524 = select i1 %496, i32 0, i32 %523, !dbg !93
  %bc42 = bitcast <8 x float> %488 to <8 x i32>, !dbg !100
  %525 = extractelement <8 x i32> %bc42, i64 0, !dbg !100
  %526 = select i1 %497, i32 0, i32 %525, !dbg !93
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %520, i32 %522, i32 %524, i32 %526, ptr addrspace(1) %508, i1 %510) #3, !dbg !100
  ret void, !dbg !101
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cy3zzexkc5gmoezujoipxnl5tk35fatzwgji7rtfhym4hlmc5cfc.py", directory: "inductor_cache/y3")
!4 = !{ptr @triton_poi_fused_cat_relu_50, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_relu_50, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_relu_50", linkageName: "triton_poi_fused_cat_relu_50", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 36, column: 18, scope: !7)
!23 = !DILocation(line: 37, column: 33, scope: !7)
!24 = !DILocation(line: 37, column: 43, scope: !7)
!25 = !DILocation(line: 37, column: 38, scope: !7)
!26 = !DILocation(line: 37, column: 49, scope: !7)
!27 = !DILocation(line: 37, column: 30, scope: !7)
!28 = !DILocation(line: 37, column: 62, scope: !7)
!29 = !DILocation(line: 37, column: 70, scope: !7)
!30 = !DILocation(line: 37, column: 55, scope: !7)
!31 = !DILocation(line: 41, column: 18, scope: !7)
!32 = !DILocation(line: 42, column: 50, scope: !7)
!33 = !DILocation(line: 42, column: 31, scope: !7)
!34 = !DILocation(line: 42, column: 71, scope: !7)
!35 = !DILocation(line: 42, column: 79, scope: !7)
!36 = !DILocation(line: 42, column: 64, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 50, scope: !7)
!39 = !DILocation(line: 47, column: 31, scope: !7)
!40 = !DILocation(line: 47, column: 73, scope: !7)
!41 = !DILocation(line: 47, column: 81, scope: !7)
!42 = !DILocation(line: 47, column: 65, scope: !7)
!43 = !DILocation(line: 51, column: 20, scope: !7)
!44 = !DILocation(line: 52, column: 50, scope: !7)
!45 = !DILocation(line: 52, column: 31, scope: !7)
!46 = !DILocation(line: 52, column: 73, scope: !7)
!47 = !DILocation(line: 52, column: 81, scope: !7)
!48 = !DILocation(line: 52, column: 65, scope: !7)
!49 = !DILocation(line: 53, column: 31, scope: !7)
!50 = !DILocation(line: 53, column: 65, scope: !7)
!51 = !DILocation(line: 60, column: 20, scope: !7)
!52 = !DILocation(line: 61, column: 50, scope: !7)
!53 = !DILocation(line: 61, column: 31, scope: !7)
!54 = !DILocation(line: 61, column: 73, scope: !7)
!55 = !DILocation(line: 61, column: 81, scope: !7)
!56 = !DILocation(line: 61, column: 65, scope: !7)
!57 = !DILocation(line: 65, column: 20, scope: !7)
!58 = !DILocation(line: 68, column: 59, scope: !7)
!59 = !DILocation(line: 68, column: 50, scope: !7)
!60 = !DILocation(line: 68, column: 31, scope: !7)
!61 = !DILocation(line: 68, column: 73, scope: !7)
!62 = !DILocation(line: 68, column: 81, scope: !7)
!63 = !DILocation(line: 68, column: 65, scope: !7)
!64 = !DILocation(line: 69, column: 31, scope: !7)
!65 = !DILocation(line: 69, column: 80, scope: !7)
!66 = !DILocation(line: 71, column: 31, scope: !7)
!67 = !DILocation(line: 71, column: 80, scope: !7)
!68 = !DILocation(line: 73, column: 20, scope: !7)
!69 = !DILocation(line: 74, column: 27, scope: !7)
!70 = !DILocation(line: 76, column: 20, scope: !7)
!71 = !DILocation(line: 80, column: 31, scope: !7)
!72 = !DILocation(line: 80, column: 80, scope: !7)
!73 = !DILocation(line: 82, column: 31, scope: !7)
!74 = !DILocation(line: 82, column: 80, scope: !7)
!75 = !DILocation(line: 84, column: 32, scope: !7)
!76 = !DILocation(line: 84, column: 66, scope: !7)
!77 = !DILocation(line: 70, column: 20, scope: !7)
!78 = !DILocation(line: 62, column: 20, scope: !7)
!79 = !DILocation(line: 54, column: 20, scope: !7)
!80 = !DILocation(line: 79, column: 20, scope: !7)
!81 = !DILocation(line: 81, column: 20, scope: !7)
!82 = !DILocation(line: 83, column: 20, scope: !7)
!83 = !DILocation(line: 85, column: 20, scope: !7)
!84 = !DILocation(line: 87, column: 35, scope: !7)
!85 = !DILocation(line: 0, scope: !7)
!86 = !DILocation(line: 90, column: 35, scope: !7)
!87 = !DILocation(line: 91, column: 34, scope: !7)
!88 = !DILocation(line: 92, column: 33, scope: !7)
!89 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !92)
!90 = distinct !DILexicalBlockFile(scope: !7, file: !91, discriminator: 0)
!91 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!92 = !DILocation(line: 94, column: 42, scope: !7)
!93 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !92)
!94 = !DILocation(line: 95, column: 34, scope: !7)
!95 = !DILocation(line: 95, column: 30, scope: !7)
!96 = !DILocation(line: 95, column: 44, scope: !7)
!97 = !DILocation(line: 95, column: 39, scope: !7)
!98 = !DILocation(line: 95, column: 25, scope: !7)
!99 = !DILocation(line: 95, column: 64, scope: !7)
!100 = !DILocation(line: 95, column: 56, scope: !7)
!101 = !DILocation(line: 95, column: 4, scope: !7)
