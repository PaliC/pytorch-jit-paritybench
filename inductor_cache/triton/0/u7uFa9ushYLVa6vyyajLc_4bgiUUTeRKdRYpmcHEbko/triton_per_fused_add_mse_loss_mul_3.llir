; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/tr/ctru6x6nz35qpzztliilams3hylxrjoft6gu2yw66cr4s3d7fro7.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp5 < 4\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_per_fused_add_mse_loss_mul_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !11 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 12, !dbg !12
  %9 = and i32 %7, 252, !dbg !12
  %10 = and i32 %6, 48, !dbg !13
  %11 = zext nneg i32 %9 to i64, !dbg !14
  %12 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !14
  %13 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %12, i1 true) #5, !dbg !15
  %14 = or disjoint i32 %8, %10, !dbg !16
  %15 = or disjoint i32 %14, 2, !dbg !16
  %16 = zext nneg i32 %14 to i64, !dbg !17
  %17 = getelementptr i64, ptr addrspace(1) %2, i64 %16, !dbg !17
  %18 = zext nneg i32 %15 to i64, !dbg !17
  %19 = getelementptr i64, ptr addrspace(1) %2, i64 %18, !dbg !17
  %20 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %17, i1 true) #5, !dbg !18
  %21 = extractvalue { i64, i64 } %20, 0, !dbg !18
  %22 = extractvalue { i64, i64 } %20, 1, !dbg !18
  %23 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %19, i1 true) #5, !dbg !18
  %24 = extractvalue { i64, i64 } %23, 0, !dbg !18
  %25 = extractvalue { i64, i64 } %23, 1, !dbg !18
  %26 = insertelement <4 x i64> poison, i64 %21, i64 0, !dbg !19
  %27 = insertelement <4 x i64> %26, i64 %22, i64 1, !dbg !19
  %28 = insertelement <4 x i64> %27, i64 %24, i64 2, !dbg !19
  %29 = insertelement <4 x i64> %28, i64 %25, i64 3, !dbg !19
  %30 = lshr <4 x i64> %29, splat (i64 61), !dbg !19
  %31 = and <4 x i64> %30, splat (i64 4), !dbg !19
  %32 = add <4 x i64> %31, %29, !dbg !19
  %33 = tail call i64 @llvm.vector.reduce.or.v4i64(<4 x i64> %32), !dbg !20
  %.not = icmp ult i64 %33, 4, !dbg !20
  br i1 %.not, label %35, label %34, !dbg !20

34:                                               ; preds = %5
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !20
  unreachable, !dbg !20

35:                                               ; preds = %5
  %36 = extractvalue { i32, i32, i32, i32 } %13, 3, !dbg !15
  %37 = extractvalue { i32, i32, i32, i32 } %13, 2, !dbg !15
  %38 = extractvalue { i32, i32, i32, i32 } %13, 1, !dbg !15
  %39 = extractvalue { i32, i32, i32, i32 } %13, 0, !dbg !15
  %40 = lshr i32 %7, 4, !dbg !21
  %41 = and i32 %40, 3, !dbg !21
  %42 = lshr i32 %6, 5, !dbg !12
  %43 = and i32 %6, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %44 = extractelement <4 x i64> %32, i64 0, !dbg !22
  %45 = shl i64 %44, 2, !dbg !22
  %46 = extractelement <4 x i64> %32, i64 1, !dbg !22
  %47 = shl i64 %46, 2, !dbg !22
  %48 = extractelement <4 x i64> %32, i64 2, !dbg !22
  %49 = shl i64 %48, 2, !dbg !22
  %50 = extractelement <4 x i64> %32, i64 3, !dbg !22
  %51 = shl nuw nsw i64 %50, 2, !dbg !22
  %52 = zext nneg i32 %41 to i64, !dbg !23
  %53 = or disjoint i64 %45, %52, !dbg !23
  %54 = or disjoint i64 %47, %52, !dbg !23
  %55 = or disjoint i64 %49, %52, !dbg !23
  %56 = or disjoint i64 %51, %52, !dbg !23
  %57 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !24
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !24
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !24
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #5, !dbg !25
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #5, !dbg !25
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #5, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #5, !dbg !25
  %65 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !15
  %66 = insertelement <2 x i32> %65, i32 %38, i64 1, !dbg !15
  %67 = bitcast <2 x i32> %66 to <2 x float>, !dbg !15
  %68 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !25
  %69 = insertelement <2 x i32> %68, i32 %62, i64 1, !dbg !25
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !25
  %71 = fsub <2 x float> %67, %70, !dbg !26
  %72 = fmul <2 x float> %71, %71, !dbg !27
  %73 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !15
  %74 = insertelement <2 x i32> %73, i32 %36, i64 1, !dbg !15
  %75 = bitcast <2 x i32> %74 to <2 x float>, !dbg !15
  %76 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !25
  %77 = insertelement <2 x i32> %76, i32 %64, i64 1, !dbg !25
  %78 = bitcast <2 x i32> %77 to <2 x float>, !dbg !25
  %79 = fsub <2 x float> %75, %78, !dbg !26
  %80 = fmul <2 x float> %79, %79, !dbg !27
  %shift = shufflevector <2 x float> %72, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !28
  %81 = fadd <2 x float> %72, %shift, !dbg !28
  %82 = fadd <2 x float> %81, %80, !dbg !28
  %shift1 = shufflevector <2 x float> %80, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !28
  %83 = fadd <2 x float> %82, %shift1, !dbg !28
  %84 = extractelement <2 x float> %83, i64 0, !dbg !28
  %85 = bitcast float %84 to i32, !dbg !33
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 16, i32 31), !dbg !33
  %87 = bitcast i32 %86 to float, !dbg !33
  %88 = fadd float %84, %87, !dbg !28
  %89 = bitcast float %88 to i32, !dbg !33
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 8, i32 31), !dbg !33
  %91 = bitcast i32 %90 to float, !dbg !33
  %92 = fadd float %88, %91, !dbg !28
  %93 = bitcast float %92 to i32, !dbg !33
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 4, i32 31), !dbg !33
  %95 = bitcast i32 %94 to float, !dbg !33
  %96 = fadd float %92, %95, !dbg !28
  %97 = bitcast float %96 to i32, !dbg !33
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 2, i32 31), !dbg !33
  %99 = bitcast i32 %98 to float, !dbg !33
  %100 = fadd float %96, %99, !dbg !28
  %101 = bitcast float %100 to i32, !dbg !33
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 1, i32 31), !dbg !33
  %103 = bitcast i32 %102 to float, !dbg !33
  %104 = fadd float %100, %103, !dbg !28
  %105 = icmp eq i32 %43, 0, !dbg !33
  %106 = and i32 %42, 1, !dbg !33
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !33
  %108 = bitcast float %104 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 %105) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %109 = icmp slt i32 %6, 2, !dbg !33
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i32 %6, !dbg !33
  %111 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %110, i1 %109) #5, !dbg !33
  %112 = bitcast i32 %111 to float, !dbg !33
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 1, i32 31), !dbg !33
  %114 = bitcast i32 %113 to float, !dbg !33
  %115 = fadd float %112, %114, !dbg !28
  %116 = and i32 %6, 1, !dbg !33
  %117 = icmp eq i32 %116, 0, !dbg !33
  %118 = and i1 %109, %117, !dbg !33
  %119 = bitcast float %115 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %119, i1 %118) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %120 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !33
  %121 = fadd float %120, 0.000000e+00, !dbg !34
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float 2.560000e+02) #5, !dbg !38
  %123 = fmul float %122, 0x3FC99999A0000000, !dbg !39
  %124 = fadd float %122, %123, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %urem = and i32 %6, 63, !dbg !42
  %125 = icmp eq i32 %urem, 0, !dbg !42
  %126 = bitcast float %124 to i32, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %126, ptr addrspace(1) %0, i1 %125) #5, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.vector.reduce.or.v4i64(<4 x i64>) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctru6x6nz35qpzztliilams3hylxrjoft6gu2yw66cr4s3d7fro7.py", directory: "inductor_cache/tr")
!4 = !{ptr @triton_per_fused_add_mse_loss_mul_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mse_loss_mul_3, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_per_fused_add_mse_loss_mul_3", linkageName: "triton_per_fused_add_mse_loss_mul_3", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 27, column: 26, scope: !11)
!13 = !DILocation(line: 32, column: 19, scope: !11)
!14 = !DILocation(line: 34, column: 30, scope: !11)
!15 = !DILocation(line: 34, column: 35, scope: !11)
!16 = !DILocation(line: 35, column: 35, scope: !11)
!17 = !DILocation(line: 35, column: 30, scope: !11)
!18 = !DILocation(line: 35, column: 43, scope: !11)
!19 = !DILocation(line: 39, column: 32, scope: !11)
!20 = !DILocation(line: 40, column: 47, scope: !11)
!21 = !DILocation(line: 33, column: 21, scope: !11)
!22 = !DILocation(line: 41, column: 37, scope: !11)
!23 = !DILocation(line: 41, column: 35, scope: !11)
!24 = !DILocation(line: 41, column: 30, scope: !11)
!25 = !DILocation(line: 41, column: 44, scope: !11)
!26 = !DILocation(line: 42, column: 18, scope: !11)
!27 = !DILocation(line: 43, column: 18, scope: !11)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !32)
!29 = distinct !DILexicalBlockFile(scope: !31, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!31 = distinct !DILexicalBlockFile(scope: !11, file: !30, discriminator: 0)
!32 = !DILocation(line: 45, column: 59, scope: !11)
!33 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 73, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !11, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 45, column: 45, scope: !11)
!38 = !DILocation(line: 47, column: 20, scope: !11)
!39 = !DILocation(line: 49, column: 20, scope: !11)
!40 = !DILocation(line: 50, column: 20, scope: !11)
!41 = !DILocation(line: 51, column: 4, scope: !11)
!42 = !DILocation(line: 52, column: 63, scope: !11)
!43 = !DILocation(line: 52, column: 4, scope: !11)
