; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_reflection_pad2d_relu_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 510, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 1, !dbg !13
  %16 = icmp slt i32 %14, 1115136, !dbg !14
  %.frozen = freeze i32 %14, !dbg !15
  %17 = sdiv i32 %.frozen, 66, !dbg !15
  %18 = srem i32 %17, 66, !dbg !16
  %19 = mul i32 %17, 66, !dbg !17
  %.decomposed = sub i32 %.frozen, %19, !dbg !17
  %20 = srem i32 %15, 66, !dbg !17
  %21 = sdiv i32 %14, 4356, !dbg !18
  %22 = add nsw i32 %18, -1, !dbg !19
  %23 = tail call i32 @llvm.abs.i32(i32 %22, i1 true), !dbg !20
  %24 = add nsw i32 %23, -63, !dbg !21
  %25 = tail call i32 @llvm.abs.i32(i32 %24, i1 true), !dbg !22
  %26 = sub nuw nsw i32 63, %25, !dbg !23
  %27 = zext nneg i32 %26 to i64, !dbg !24
  %28 = getelementptr i64, ptr addrspace(1) %0, i64 %27, !dbg !24
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 %16) #1, !dbg !25
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 %16) #1, !dbg !25
  %31 = add nsw i32 %.decomposed, -1, !dbg !26
  %32 = add nsw i32 %20, -1, !dbg !26
  %33 = tail call i32 @llvm.abs.i32(i32 %31, i1 true), !dbg !27
  %34 = tail call i32 @llvm.abs.i32(i32 %32, i1 true), !dbg !27
  %35 = add nsw i32 %33, -63, !dbg !28
  %36 = add nsw i32 %34, -63, !dbg !28
  %37 = tail call i32 @llvm.abs.i32(i32 %35, i1 true), !dbg !29
  %38 = tail call i32 @llvm.abs.i32(i32 %36, i1 true), !dbg !29
  %39 = sub nuw nsw i32 63, %37, !dbg !30
  %40 = sub nuw nsw i32 63, %38, !dbg !30
  %41 = zext nneg i32 %39 to i64, !dbg !31
  %42 = getelementptr i64, ptr addrspace(1) %0, i64 %41, !dbg !31
  %43 = zext nneg i32 %40 to i64, !dbg !31
  %44 = getelementptr i64, ptr addrspace(1) %0, i64 %43, !dbg !31
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %42, i1 %16) #1, !dbg !32
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %16) #1, !dbg !32
  %47 = sext i32 %21 to i64, !dbg !33
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !33
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %16) #1, !dbg !34
  %50 = bitcast i32 %49 to float, !dbg !34
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %16) #1, !dbg !34
  %52 = bitcast i32 %51 to float, !dbg !34
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !35
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %16) #1, !dbg !36
  %55 = bitcast i32 %54 to float, !dbg !36
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %16) #1, !dbg !36
  %57 = bitcast i32 %56 to float, !dbg !36
  %58 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !37
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %16) #1, !dbg !38
  %60 = bitcast i32 %59 to float, !dbg !38
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %16) #1, !dbg !38
  %62 = bitcast i32 %61 to float, !dbg !38
  %63 = getelementptr float, ptr addrspace(1) %5, i64 %47, !dbg !39
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %16) #1, !dbg !40
  %65 = bitcast i32 %64 to float, !dbg !40
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %16) #1, !dbg !40
  %67 = bitcast i32 %66 to float, !dbg !40
  %68 = lshr i64 %29, 58, !dbg !41
  %69 = and i64 %68, 32, !dbg !41
  %70 = add i64 %69, %29, !dbg !41
  %71 = lshr i64 %30, 58, !dbg !41
  %72 = and i64 %71, 32, !dbg !41
  %73 = add i64 %72, %30, !dbg !41
  %74 = lshr i64 %45, 58, !dbg !42
  %75 = and i64 %74, 32, !dbg !42
  %76 = lshr i64 %46, 58, !dbg !42
  %77 = and i64 %76, 32, !dbg !42
  %78 = shl nsw i32 %21, 10, !dbg !43
  %79 = sext i32 %78 to i64, !dbg !44
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !45
  %81 = getelementptr float, ptr addrspace(1) %80, i64 %75, !dbg !45
  %.idx = shl i64 %70, 7, !dbg !45
  %82 = getelementptr i8, ptr addrspace(1) %81, i64 %.idx, !dbg !45
  %83 = getelementptr float, ptr addrspace(1) %82, i64 %79, !dbg !45
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !45
  %85 = getelementptr float, ptr addrspace(1) %84, i64 %77, !dbg !45
  %.idx1 = shl i64 %73, 7, !dbg !45
  %86 = getelementptr i8, ptr addrspace(1) %85, i64 %.idx1, !dbg !45
  %87 = getelementptr float, ptr addrspace(1) %86, i64 %79, !dbg !45
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %16) #1, !dbg !46
  %89 = bitcast i32 %88 to float, !dbg !46
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %16) #1, !dbg !46
  %91 = bitcast i32 %90 to float, !dbg !46
  %92 = fsub float %89, %50, !dbg !47
  %93 = fsub float %91, %52, !dbg !47
  %94 = fmul float %92, %55, !dbg !48
  %95 = fmul float %93, %57, !dbg !48
  %96 = fmul float %94, %60, !dbg !49
  %97 = fmul float %95, %62, !dbg !49
  %98 = fadd float %96, %65, !dbg !50
  %99 = fadd float %97, %67, !dbg !50
  %100 = fcmp olt float %98, 0.000000e+00, !dbg !51
  %101 = fcmp olt float %99, 0.000000e+00, !dbg !51
  %102 = select i1 %100, float 0.000000e+00, float %98, !dbg !55
  %103 = select i1 %101, float 0.000000e+00, float %99, !dbg !55
  %104 = sext i32 %14 to i64, !dbg !56
  %105 = getelementptr float, ptr addrspace(1) %6, i64 %104, !dbg !56
  %106 = bitcast float %102 to i32, !dbg !57
  %107 = bitcast float %103 to i32, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %106, i32 %107, ptr addrspace(1) %105, i1 %16) #1, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cszysne4tlrfln7aewntm5cvjyy3j4auzbvm24aq3vlv2hdli6vo.py", directory: "inductor_cache/sz")
!4 = !{ptr @triton_poi_fused__unsafe_index_reflection_pad2d_relu_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_reflection_pad2d_relu_19, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_reflection_pad2d_relu_19", linkageName: "triton_poi_fused__unsafe_index_reflection_pad2d_relu_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 80, scope: !7)
!20 = !DILocation(line: 28, column: 73, scope: !7)
!21 = !DILocation(line: 28, column: 61, scope: !7)
!22 = !DILocation(line: 28, column: 53, scope: !7)
!23 = !DILocation(line: 28, column: 36, scope: !7)
!24 = !DILocation(line: 28, column: 30, scope: !7)
!25 = !DILocation(line: 28, column: 88, scope: !7)
!26 = !DILocation(line: 29, column: 80, scope: !7)
!27 = !DILocation(line: 29, column: 73, scope: !7)
!28 = !DILocation(line: 29, column: 61, scope: !7)
!29 = !DILocation(line: 29, column: 53, scope: !7)
!30 = !DILocation(line: 29, column: 36, scope: !7)
!31 = !DILocation(line: 29, column: 30, scope: !7)
!32 = !DILocation(line: 29, column: 88, scope: !7)
!33 = !DILocation(line: 30, column: 31, scope: !7)
!34 = !DILocation(line: 30, column: 36, scope: !7)
!35 = !DILocation(line: 31, column: 31, scope: !7)
!36 = !DILocation(line: 31, column: 36, scope: !7)
!37 = !DILocation(line: 32, column: 31, scope: !7)
!38 = !DILocation(line: 32, column: 36, scope: !7)
!39 = !DILocation(line: 33, column: 31, scope: !7)
!40 = !DILocation(line: 33, column: 36, scope: !7)
!41 = !DILocation(line: 37, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 32, scope: !7)
!43 = !DILocation(line: 41, column: 52, scope: !7)
!44 = !DILocation(line: 41, column: 47, scope: !7)
!45 = !DILocation(line: 41, column: 30, scope: !7)
!46 = !DILocation(line: 41, column: 57, scope: !7)
!47 = !DILocation(line: 42, column: 19, scope: !7)
!48 = !DILocation(line: 43, column: 20, scope: !7)
!49 = !DILocation(line: 44, column: 20, scope: !7)
!50 = !DILocation(line: 45, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 47, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 48, column: 25, scope: !7)
!57 = !DILocation(line: 48, column: 37, scope: !7)
!58 = !DILocation(line: 48, column: 4, scope: !7)
