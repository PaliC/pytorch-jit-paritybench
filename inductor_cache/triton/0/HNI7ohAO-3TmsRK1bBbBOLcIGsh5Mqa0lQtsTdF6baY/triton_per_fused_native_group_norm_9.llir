; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_group_norm_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit1 = lshr i32 %11, 3, !dbg !12
  %12 = and i32 %.lobit1, 31, !dbg !12
  %13 = and i32 %11, 31, !dbg !12
  %14 = or disjoint i32 %10, %12, !dbg !13
  %15 = icmp slt i32 %14, 32, !dbg !14
  %16 = shl i32 %11, 2, !dbg !15
  %17 = and i32 %16, 28, !dbg !15
  %18 = shl i32 %14, 5, !dbg !16
  %19 = or disjoint i32 %18, %17, !dbg !17
  %20 = sext i32 %19 to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !18
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !19
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !19
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !19
  %27 = bitcast i32 %23 to float, !dbg !19
  %28 = bitcast i32 %24 to float, !dbg !19
  %29 = bitcast i32 %25 to float, !dbg !19
  %30 = bitcast i32 %26 to float, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !20
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !21
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !21
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !21
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !21
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !21
  %37 = bitcast i32 %33 to float, !dbg !21
  %38 = bitcast i32 %34 to float, !dbg !21
  %39 = bitcast i32 %35 to float, !dbg !21
  %40 = bitcast i32 %36 to float, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !22
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !23
  %47 = bitcast i32 %43 to float, !dbg !23
  %48 = bitcast i32 %44 to float, !dbg !23
  %49 = bitcast i32 %45 to float, !dbg !23
  %50 = bitcast i32 %46 to float, !dbg !23
  %51 = select i1 %15, float %27, float 0.000000e+00, !dbg !24
  %52 = select i1 %15, float %28, float 0.000000e+00, !dbg !24
  %53 = select i1 %15, float %29, float 0.000000e+00, !dbg !24
  %54 = select i1 %15, float %30, float 0.000000e+00, !dbg !24
  %55 = select i1 %15, float %39, float 0.000000e+00, !dbg !25
  %56 = select i1 %15, float %40, float 0.000000e+00, !dbg !25
  %57 = select i1 %15, float %47, float 0.000000e+00, !dbg !26
  %58 = select i1 %15, float %48, float 0.000000e+00, !dbg !26
  %59 = select i1 %15, float %49, float 0.000000e+00, !dbg !26
  %60 = select i1 %15, float %50, float 0.000000e+00, !dbg !26
  %61 = fsub float %52, %51, !dbg !27
  %62 = fadd float %57, %58, !dbg !32
  %63 = fcmp oeq float %62, 0.000000e+00, !dbg !33
  %64 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float %62) #5, !dbg !34
  %65 = select i1 %63, float 0.000000e+00, float %64, !dbg !35
  %66 = fmul float %61, %65, !dbg !36
  %67 = fadd float %51, %66, !dbg !37
  %68 = fadd float %37, %38, !dbg !38
  %69 = select i1 %15, float %68, float 0.000000e+00, !dbg !38
  %70 = fmul float %61, %61, !dbg !39
  %71 = fmul float %70, %57, !dbg !40
  %72 = fmul float %71, %65, !dbg !41
  %73 = fadd float %69, %72, !dbg !42
  %74 = fsub float %53, %67, !dbg !27
  %75 = fadd float %59, %62, !dbg !32
  %76 = fcmp oeq float %75, 0.000000e+00, !dbg !33
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float %75) #5, !dbg !34
  %78 = select i1 %76, float 0.000000e+00, float %77, !dbg !35
  %79 = fmul float %78, %74, !dbg !36
  %80 = fadd float %67, %79, !dbg !37
  %81 = fadd float %55, %73, !dbg !38
  %82 = fmul float %74, %74, !dbg !39
  %83 = fmul float %62, %82, !dbg !40
  %84 = fmul float %78, %83, !dbg !41
  %85 = fadd float %81, %84, !dbg !42
  %86 = fsub float %54, %80, !dbg !27
  %87 = fadd float %60, %75, !dbg !32
  %88 = fcmp oeq float %87, 0.000000e+00, !dbg !33
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float %87) #5, !dbg !34
  %90 = select i1 %88, float 0.000000e+00, float %89, !dbg !35
  %91 = fmul float %90, %86, !dbg !36
  %92 = fadd float %80, %91, !dbg !37
  %93 = fadd float %56, %85, !dbg !38
  %94 = fmul float %86, %86, !dbg !39
  %95 = fmul float %75, %94, !dbg !40
  %96 = fmul float %90, %95, !dbg !41
  %97 = fadd float %93, %96, !dbg !42
  %98 = bitcast float %92 to i32, !dbg !43
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 4, i32 31), !dbg !43
  %100 = bitcast i32 %99 to float, !dbg !43
  %101 = bitcast float %97 to i32, !dbg !43
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 4, i32 31), !dbg !43
  %103 = bitcast i32 %102 to float, !dbg !43
  %104 = bitcast float %87 to i32, !dbg !43
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 4, i32 31), !dbg !43
  %106 = bitcast i32 %105 to float, !dbg !43
  %107 = fsub float %100, %92, !dbg !27
  %108 = fadd float %87, %106, !dbg !32
  %109 = fcmp oeq float %108, 0.000000e+00, !dbg !33
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %108) #5, !dbg !34
  %111 = select i1 %109, float 0.000000e+00, float %110, !dbg !35
  %112 = fmul float %111, %107, !dbg !36
  %113 = fadd float %92, %112, !dbg !37
  %114 = fadd float %97, %103, !dbg !38
  %115 = fmul float %107, %107, !dbg !39
  %116 = fmul float %87, %115, !dbg !40
  %117 = fmul float %111, %116, !dbg !41
  %118 = fadd float %114, %117, !dbg !42
  %119 = bitcast float %113 to i32, !dbg !43
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 2, i32 31), !dbg !43
  %121 = bitcast i32 %120 to float, !dbg !43
  %122 = bitcast float %118 to i32, !dbg !43
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 2, i32 31), !dbg !43
  %124 = bitcast i32 %123 to float, !dbg !43
  %125 = bitcast float %108 to i32, !dbg !43
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 2, i32 31), !dbg !43
  %127 = bitcast i32 %126 to float, !dbg !43
  %128 = fsub float %121, %113, !dbg !27
  %129 = fadd float %108, %127, !dbg !32
  %130 = fcmp oeq float %129, 0.000000e+00, !dbg !33
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float %129) #5, !dbg !34
  %132 = select i1 %130, float 0.000000e+00, float %131, !dbg !35
  %133 = fmul float %132, %128, !dbg !36
  %134 = fadd float %113, %133, !dbg !37
  %135 = fadd float %118, %124, !dbg !38
  %136 = fmul float %128, %128, !dbg !39
  %137 = fmul float %108, %136, !dbg !40
  %138 = fmul float %132, %137, !dbg !41
  %139 = fadd float %135, %138, !dbg !42
  %140 = bitcast float %134 to i32, !dbg !43
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 1, i32 31), !dbg !43
  %142 = bitcast i32 %141 to float, !dbg !43
  %143 = bitcast float %139 to i32, !dbg !43
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 1, i32 31), !dbg !43
  %145 = bitcast i32 %144 to float, !dbg !43
  %146 = bitcast float %129 to i32, !dbg !43
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 1, i32 31), !dbg !43
  %148 = bitcast i32 %147 to float, !dbg !43
  %149 = fsub float %142, %134, !dbg !27
  %150 = fadd float %129, %148, !dbg !32
  %151 = fcmp oeq float %150, 0.000000e+00, !dbg !33
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float %150) #5, !dbg !34
  %153 = select i1 %151, float 0.000000e+00, float %152, !dbg !35
  %154 = fmul float %153, %149, !dbg !36
  %155 = fadd float %134, %154, !dbg !37
  %156 = fadd float %139, %145, !dbg !38
  %157 = fmul float %149, %149, !dbg !39
  %158 = fmul float %129, %157, !dbg !40
  %159 = fmul float %153, %158, !dbg !41
  %160 = fadd float %156, %159, !dbg !42
  %161 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !44
  %162 = bitcast float %155 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %162, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %163 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !44
  %164 = load i32, ptr addrspace(3) %163, align 4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %165 = bitcast float %160 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %165, i1 true) #5, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %166 = load float, ptr addrspace(3) %163, align 4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %165, i1 true) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %167 = load i32, ptr addrspace(3) %163, align 4, !dbg !46
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %166, float 2.621440e+05) #5, !dbg !47
  %169 = fadd float %168, 0x3EE4F8B580000000, !dbg !48
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i = icmp eq i32 %170, 0, !dbg !45
  br i1 %.not.i, label %173, label %171, !dbg !45

171:                                              ; preds = %8
  %172 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %169), !dbg !45
  br label %__nv_rsqrtf.exit, !dbg !45

173:                                              ; preds = %8
  %174 = tail call float @llvm.nvvm.rsqrt.approx.f(float %169), !dbg !45
  br label %__nv_rsqrtf.exit, !dbg !45

__nv_rsqrtf.exit:                                 ; preds = %171, %173
  %.0.i = phi float [ %172, %171 ], [ %174, %173 ], !dbg !45
  %175 = or disjoint i32 %10, %13, !dbg !13
  %176 = icmp slt i32 %175, 32, !dbg !14
  %177 = sext i32 %175 to i64, !dbg !49
  %178 = getelementptr float, ptr addrspace(1) %5, i64 %177, !dbg !49
  %179 = and i32 %11, 224, !dbg !50
  %180 = icmp eq i32 %179, 0, !dbg !50
  %181 = bitcast float %.0.i to i32, !dbg !50
  %182 = and i1 %180, %176, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %181, ptr addrspace(1) %178, i1 %182) #5, !dbg !50
  %183 = getelementptr float, ptr addrspace(1) %3, i64 %177, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %164, ptr addrspace(1) %183, i1 %182) #5, !dbg !52
  %184 = getelementptr float, ptr addrspace(1) %4, i64 %177, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %167, ptr addrspace(1) %184, i1 %182) #5, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crvvahhx3sgo7jodydwsxtgbctnkni4sljw6flfdediqsxnepzdo.py", directory: "inductor_cache/rv")
!4 = !{ptr @triton_per_fused_native_group_norm_9, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_9, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_9", linkageName: "triton_per_fused_native_group_norm_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 38, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 43, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 43, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 43, scope: !7)
!24 = !DILocation(line: 37, column: 33, scope: !7)
!25 = !DILocation(line: 38, column: 33, scope: !7)
!26 = !DILocation(line: 39, column: 33, scope: !7)
!27 = !DILocation(line: 192, column: 21, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!31 = !DILocation(line: 40, column: 67, scope: !7)
!32 = !DILocation(line: 193, column: 28, scope: !28, inlinedAt: !31)
!33 = !DILocation(line: 194, column: 39, scope: !28, inlinedAt: !31)
!34 = !DILocation(line: 194, column: 60, scope: !28, inlinedAt: !31)
!35 = !DILocation(line: 194, column: 49, scope: !28, inlinedAt: !31)
!36 = !DILocation(line: 196, column: 25, scope: !28, inlinedAt: !31)
!37 = !DILocation(line: 196, column: 17, scope: !28, inlinedAt: !31)
!38 = !DILocation(line: 197, column: 15, scope: !28, inlinedAt: !31)
!39 = !DILocation(line: 197, column: 30, scope: !28, inlinedAt: !31)
!40 = !DILocation(line: 197, column: 38, scope: !28, inlinedAt: !31)
!41 = !DILocation(line: 197, column: 49, scope: !28, inlinedAt: !31)
!42 = !DILocation(line: 197, column: 22, scope: !28, inlinedAt: !31)
!43 = !DILocation(line: 204, column: 46, scope: !30, inlinedAt: !31)
!44 = !DILocation(line: 41, column: 18, scope: !7)
!45 = !DILocation(line: 48, column: 28, scope: !7)
!46 = !DILocation(line: 42, column: 18, scope: !7)
!47 = !DILocation(line: 45, column: 20, scope: !7)
!48 = !DILocation(line: 47, column: 20, scope: !7)
!49 = !DILocation(line: 49, column: 25, scope: !7)
!50 = !DILocation(line: 49, column: 37, scope: !7)
!51 = !DILocation(line: 50, column: 25, scope: !7)
!52 = !DILocation(line: 50, column: 37, scope: !7)
!53 = !DILocation(line: 51, column: 25, scope: !7)
!54 = !DILocation(line: 51, column: 37, scope: !7)
!55 = !DILocation(line: 51, column: 4, scope: !7)
