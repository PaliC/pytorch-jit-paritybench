; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = shl i32 %8, 1, !dbg !12
  %12 = and i32 %11, 14, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %13, 16, !dbg !14
  %16 = icmp slt i32 %14, 16, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %18 = shl i32 %17, 4, !dbg !16
  %19 = or disjoint i32 %18, %12, !dbg !17
  %20 = or disjoint i32 %18, %10, !dbg !17
  %21 = icmp slt i32 %19, 16, !dbg !18
  %22 = icmp slt i32 %20, 16, !dbg !18
  %.frozen = freeze i32 %14, !dbg !19
  %23 = sdiv i32 %.frozen, 4, !dbg !19
  %24 = mul i32 %23, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %24, !dbg !20
  %25 = shl i32 %13, 4, !dbg !21
  %26 = add i32 %19, %25, !dbg !22
  %27 = sext i32 %26 to i64, !dbg !23
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !23
  %29 = and i1 %15, %21, !dbg !24
  %30 = and i1 %16, %22, !dbg !24
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 %29) #2, !dbg !25
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !25
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !25
  %34 = shl i32 %8, 5, !dbg !25
  %35 = and i32 %34, 224, !dbg !25
  %36 = or disjoint i32 %35, %10, !dbg !25
  %37 = and i32 %11, 254, !dbg !25
  %38 = lshr exact i32 %35, 4, !dbg !25
  %39 = lshr exact i32 %35, 3, !dbg !25
  %40 = add nuw nsw i32 %39, %36, !dbg !25
  %41 = zext nneg i32 %40 to i64, !dbg !25
  %42 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %41, !dbg !25
  %43 = insertelement <1 x i32> poison, i32 %32, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, <1 x i32> %43, i1 true) #2, !dbg !25
  %44 = or disjoint i32 %36, 16, !dbg !25
  %45 = lshr i32 %44, 4, !dbg !25
  %46 = shl nuw nsw i32 %45, 1, !dbg !25
  %47 = add nuw nsw i32 %46, %44, !dbg !25
  %48 = zext nneg i32 %47 to i64, !dbg !25
  %49 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %48, !dbg !25
  %50 = insertelement <1 x i32> poison, i32 %33, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %50, i1 true) #2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %51 = lshr i32 %37, 4, !dbg !25
  %52 = and i32 %8, 127, !dbg !25
  %53 = add nuw nsw i32 %51, %52, !dbg !25
  %54 = shl nuw nsw i32 %53, 1, !dbg !25
  %55 = zext nneg i32 %54 to i64, !dbg !25
  %56 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %55, !dbg !25
  %57 = load float, ptr addrspace(3) %56, align 8, !dbg !25
  %58 = getelementptr inbounds i8, ptr addrspace(3) %56, i64 4, !dbg !25
  %59 = load float, ptr addrspace(3) %58, align 4, !dbg !25
  %60 = shl i32 %20, 2, !dbg !26
  %61 = add i32 %60, %.decomposed, !dbg !27
  %62 = shl i32 %23, 6, !dbg !28
  %63 = add i32 %61, %62, !dbg !29
  %64 = sext i32 %63 to i64, !dbg !30
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !30
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %65, i1 %30) #2, !dbg !31
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !31
  %68 = extractvalue { i32, i32 } %66, 1, !dbg !31
  %69 = bitcast i32 %67 to float, !dbg !31
  %70 = bitcast i32 %68 to float, !dbg !31
  %71 = fsub float %69, %57, !dbg !32
  %72 = fsub float %70, %59, !dbg !32
  %73 = fadd float %57, %71, !dbg !33
  %74 = fadd float %59, %72, !dbg !33
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %76 = add nuw nsw i32 %38, %36, !dbg !35
  %77 = zext nneg i32 %76 to i64, !dbg !35
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %77, !dbg !35
  %79 = bitcast float %73 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #2, !dbg !35
  %80 = add nuw nsw i32 %45, %44, !dbg !35
  %81 = zext nneg i32 %80 to i64, !dbg !35
  %82 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %81, !dbg !35
  %83 = bitcast float %74 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %84 = add nuw nsw i32 %51, %37, !dbg !35
  %85 = zext nneg i32 %84 to i64, !dbg !35
  %86 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %85, !dbg !35
  %87 = load i32, ptr addrspace(3) %86, align 4, !dbg !35
  %88 = or disjoint i32 %37, 1, !dbg !35
  %89 = add nuw nsw i32 %88, %51, !dbg !35
  %90 = zext nneg i32 %89 to i64, !dbg !35
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %90, !dbg !35
  %92 = load i32, ptr addrspace(3) %91, align 4, !dbg !35
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %87, i32 %92, ptr addrspace(1) %75, i1 %29) #2, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cf3mbvroqkpv6drf4jkxicpdbbtowgmjwbwegpuve7ucsmr3yhra.py", directory: "inductor_cache/f3")
!4 = !{ptr @triton_poi_fused_clone_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_5", linkageName: "triton_poi_fused_clone_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 51, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 33, column: 37, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 45, scope: !7)
!29 = !DILocation(line: 33, column: 42, scope: !7)
!30 = !DILocation(line: 33, column: 30, scope: !7)
!31 = !DILocation(line: 33, column: 50, scope: !7)
!32 = !DILocation(line: 34, column: 18, scope: !7)
!33 = !DILocation(line: 35, column: 18, scope: !7)
!34 = !DILocation(line: 36, column: 25, scope: !7)
!35 = !DILocation(line: 36, column: 44, scope: !7)
!36 = !DILocation(line: 36, column: 4, scope: !7)
