#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#loc = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":19:0)
#loc1 = loc(unknown)
#loc10 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":37:57)
#loc19 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":44:59)
#loc31 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":56:59)
#loc44 = loc(callsite(#loc1 at #loc10))
#loc48 = loc(callsite(#loc1 at #loc19))
#loc51 = loc(callsite(#loc1 at #loc31))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__to_copy_eq_log_lt_mul_pow_rsub_sum_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":19:0), %arg5: !tt.ptr<i1> {tt.divisibility = 16 : i32} loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc2)
    %1 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc3)
    %2 = tt.addptr %1, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc3)
    %3 = tt.load %2 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc4)
    %4 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc5)
    %5 = tt.addptr %4, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc5)
    %6 = tt.load %5 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc6)
    %7 = arith.cmpf oeq, %3, %cst_0 : tensor<256xf32, #blocked> loc(#loc7)
    %8 = arith.uitofp %7 : tensor<256xi1, #blocked> to tensor<256xf32, #blocked> loc(#loc8)
    %9 = "tt.reduce"(%8) <{axis = 0 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc10)), %arg8: f32 loc(callsite(#loc1 at #loc10))):
      %45 = arith.addf %arg7, %arg8 : f32 loc(#loc53)
      tt.reduce.return %45 : f32 loc(#loc43)
    }) : (tensor<256xf32, #blocked>) -> f32 loc(#loc43)
    %10 = arith.addf %9, %cst : f32 loc(#loc46)
    %11 = tt.splat %10 : f32 -> tensor<1xf32, #blocked1> loc(#loc46)
    %12 = math.log %6 : tensor<256xf32, #blocked> loc(#loc14)
    %13 = arith.subf %cst_0, %6 : tensor<256xf32, #blocked> loc(#loc15)
    %14 = arith.mulf %13, %13 : tensor<256xf32, #blocked> loc(#loc16)
    %15 = arith.mulf %12, %14 : tensor<256xf32, #blocked> loc(#loc17)
    %16 = arith.mulf %15, %8 : tensor<256xf32, #blocked> loc(#loc18)
    %17 = "tt.reduce"(%16) <{axis = 0 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc19)), %arg8: f32 loc(callsite(#loc1 at #loc19))):
      %45 = arith.addf %arg7, %arg8 : f32 loc(#loc54)
      tt.reduce.return %45 : f32 loc(#loc47)
    }) : (tensor<256xf32, #blocked>) -> f32 loc(#loc47)
    %18 = arith.addf %17, %cst : f32 loc(#loc49)
    %19 = tt.splat %18 : f32 -> tensor<1xf32, #blocked1> loc(#loc49)
    %20 = math.log %13 : tensor<256xf32, #blocked> loc(#loc21)
    %21 = arith.mulf %6, %6 : tensor<256xf32, #blocked> loc(#loc22)
    %22 = arith.mulf %20, %21 : tensor<256xf32, #blocked> loc(#loc23)
    %23 = arith.subf %cst_0, %3 : tensor<256xf32, #blocked> loc(#loc24)
    %24 = arith.mulf %23, %23 : tensor<256xf32, #blocked> loc(#loc25)
    %25 = arith.mulf %24, %24 : tensor<256xf32, #blocked> loc(#loc26)
    %26 = arith.mulf %22, %25 : tensor<256xf32, #blocked> loc(#loc27)
    %27 = arith.cmpf olt, %3, %cst_0 : tensor<256xf32, #blocked> loc(#loc28)
    %28 = arith.uitofp %27 : tensor<256xi1, #blocked> to tensor<256xf32, #blocked> loc(#loc29)
    %29 = arith.mulf %26, %28 : tensor<256xf32, #blocked> loc(#loc30)
    %30 = "tt.reduce"(%29) <{axis = 0 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc31)), %arg8: f32 loc(callsite(#loc1 at #loc31))):
      %45 = arith.addf %arg7, %arg8 : f32 loc(#loc55)
      tt.reduce.return %45 : f32 loc(#loc50)
    }) : (tensor<256xf32, #blocked>) -> f32 loc(#loc50)
    %31 = arith.addf %30, %cst : f32 loc(#loc52)
    %32 = tt.splat %31 : f32 -> tensor<1xf32, #blocked1> loc(#loc52)
    %33 = arith.cmpf oeq, %10, %cst : f32 loc(#loc33)
    %34 = tt.addptr %arg5, %c0_i32 : !tt.ptr<i1>, i32 loc(#loc34)
    %35 = tt.bitcast %34 : !tt.ptr<i1> -> !tt.ptr<i8> loc(#loc35)
    %36 = tt.splat %35 : !tt.ptr<i8> -> tensor<1x!tt.ptr<i8>, #blocked1> loc(#loc35)
    %37 = arith.extui %33 : i1 to i8 loc(#loc35)
    %38 = tt.splat %37 : i8 -> tensor<1xi8, #blocked1> loc(#loc35)
    tt.store %36, %38 : tensor<1x!tt.ptr<i8>, #blocked1> loc(#loc35)
    %39 = tt.addptr %arg2, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc36)
    %40 = tt.splat %39 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc36)
    tt.store %40, %11 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc37)
    %41 = tt.addptr %arg3, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc38)
    %42 = tt.splat %41 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc38)
    tt.store %42, %19 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc39)
    %43 = tt.addptr %arg4, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc40)
    %44 = tt.splat %43 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc40)
    tt.store %44, %32 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc41)
    tt.return loc(#loc42)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":27:26)
#loc3 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":31:30)
#loc4 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":31:35)
#loc5 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":32:30)
#loc6 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":32:35)
#loc7 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":34:19)
#loc8 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":35:19)
#loc9 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc11 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc12 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc13 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":37:44)
#loc14 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":38:23)
#loc15 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":39:18)
#loc16 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":40:19)
#loc17 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":41:19)
#loc18 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":42:20)
#loc20 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":44:45)
#loc21 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":45:24)
#loc22 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":46:19)
#loc23 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":47:20)
#loc24 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":48:19)
#loc25 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":49:20)
#loc26 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":50:20)
#loc27 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":51:20)
#loc28 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":52:19)
#loc29 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":53:21)
#loc30 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":54:20)
#loc32 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":56:45)
#loc33 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":58:20)
#loc34 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":59:25)
#loc35 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":59:60)
#loc36 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":60:25)
#loc37 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":60:59)
#loc38 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":61:25)
#loc39 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":61:60)
#loc40 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":62:25)
#loc41 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":62:60)
#loc42 = loc("inductor_cache/ie/ciev6uayfg5zmlfe5mf65ehk5tzgdqcuopqzvcz7optqufpufacw.py":62:4)
#loc43 = loc(callsite(#loc9 at #loc10))
#loc45 = loc(callsite(#loc11 at #loc9))
#loc46 = loc(callsite(#loc12 at #loc13))
#loc47 = loc(callsite(#loc9 at #loc19))
#loc49 = loc(callsite(#loc12 at #loc20))
#loc50 = loc(callsite(#loc9 at #loc31))
#loc52 = loc(callsite(#loc12 at #loc32))
#loc53 = loc(callsite(#loc45 at #loc10))
#loc54 = loc(callsite(#loc45 at #loc19))
#loc55 = loc(callsite(#loc45 at #loc31))
