; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_clone_convolution_gelu_mul_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 1, !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %11 = and i32 %8, 1, !dbg !12
  %12 = shl nuw nsw i32 %11, 1, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = icmp slt i32 %13, 64, !dbg !14
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %16 = shl i32 %15, 2, !dbg !16
  %17 = or disjoint i32 %16, %12, !dbg !17
  %18 = icmp slt i32 %17, 4, !dbg !18
  %19 = srem i32 %13, 16, !dbg !19
  %20 = shl i32 %13, 2, !dbg !20
  %21 = add i32 %17, %20, !dbg !21
  %22 = sext i32 %21 to i64, !dbg !22
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !22
  %24 = and i1 %14, %18, !dbg !23
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 %24) #4, !dbg !24
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !24
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !24
  %28 = bitcast i32 %26 to float, !dbg !24
  %29 = bitcast i32 %27 to float, !dbg !24
  %30 = sext i32 %19 to i64, !dbg !25
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !25
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %14) #4, !dbg !26
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %14) #4, !dbg !26
  %34 = bitcast i32 %33 to float, !dbg !26
  %35 = fadd float %28, %34, !dbg !27
  %36 = fadd float %29, %34, !dbg !27
  %37 = fmul float %35, 0x3FD5555560000000, !dbg !28
  %38 = fmul float %36, 0x3FD5555560000000, !dbg !28
  %39 = fmul float %37, 0x3FE6A09E60000000, !dbg !29
  %40 = fmul float %38, 0x3FE6A09E60000000, !dbg !29
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i = icmp eq i32 %41, 0, !dbg !30
  %42 = tail call float @llvm.nvvm.fabs.ftz.f(float %39) #4, !dbg !30
  %43 = tail call float @llvm.nvvm.fabs.f(float %39) #4, !dbg !30
  %.0.i = select i1 %.not.i, float %43, float %42, !dbg !30
  %44 = fcmp oge float %.0.i, 0x3FF00C1FC0000000, !dbg !30
  br i1 %44, label %__nv_fabsf.exit1.i, label %46, !dbg !30

__nv_fabsf.exit1.i:                               ; preds = %5
  %45 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not1.i = icmp eq i32 %45, 0, !dbg !30
  %.01.i = select i1 %.not1.i, float %43, float %42, !dbg !30
  br label %__internal_fmad.exit.i, !dbg !30

46:                                               ; preds = %5
  %47 = fmul float %39, %39, !dbg !30
  br label %__internal_fmad.exit.i, !dbg !30

__internal_fmad.exit.i:                           ; preds = %46, %__nv_fabsf.exit1.i
  %48 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i ], [ 0x3FC06EBA60000000, %46 ], !dbg !30
  %49 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i ], [ 0xBFD8127580000000, %46 ], !dbg !30
  %50 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i ], [ 0x3FBCE315E0000000, %46 ], !dbg !30
  %51 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i ], [ 0xBF9B837CE0000000, %46 ], !dbg !30
  %52 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i ], [ 0x3F755ABD40000000, %46 ], !dbg !30
  %53 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i ], [ 0xBF4AE9A400000000, %46 ], !dbg !30
  %54 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i ], [ 0x3F163D2D40000000, %46 ], !dbg !30
  %55 = phi float [ %.01.i, %__nv_fabsf.exit1.i ], [ %47, %46 ], !dbg !30
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not2.i = icmp eq i32 %56, 0, !dbg !30
  %57 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %54, float %55, float %53) #4, !dbg !30
  %58 = tail call float @llvm.nvvm.fma.rn.f(float %54, float %55, float %53) #4, !dbg !30
  %.02.i = select i1 %.not2.i, float %58, float %57, !dbg !30
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not3.i = icmp eq i32 %59, 0, !dbg !30
  %60 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float %55, float %52) #4, !dbg !30
  %61 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float %55, float %52) #4, !dbg !30
  %.03.i = select i1 %.not3.i, float %61, float %60, !dbg !30
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not4.i = icmp eq i32 %62, 0, !dbg !30
  %63 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i, float %55, float %51) #4, !dbg !30
  %64 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i, float %55, float %51) #4, !dbg !30
  %.04.i = select i1 %.not4.i, float %64, float %63, !dbg !30
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not5.i = icmp eq i32 %65, 0, !dbg !30
  %66 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %55, float %50) #4, !dbg !30
  %67 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %55, float %50) #4, !dbg !30
  %.05.i = select i1 %.not5.i, float %67, float %66, !dbg !30
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not6.i = icmp eq i32 %68, 0, !dbg !30
  %69 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %55, float %49) #4, !dbg !30
  %70 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %55, float %49) #4, !dbg !30
  %.06.i = select i1 %.not6.i, float %70, float %69, !dbg !30
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not7.i = icmp eq i32 %71, 0, !dbg !30
  %72 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %55, float %48) #4, !dbg !30
  %73 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %55, float %48) #4, !dbg !30
  %.07.i = select i1 %.not7.i, float %73, float %72, !dbg !30
  %74 = fneg float %55, !dbg !30
  %75 = select i1 %44, float %74, float %39, !dbg !30
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not8.i = icmp eq i32 %76, 0, !dbg !30
  %77 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %75, float %75) #4, !dbg !30
  %78 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %75, float %75) #4, !dbg !30
  %.08.i = select i1 %.not8.i, float %78, float %77, !dbg !30
  br i1 %44, label %79, label %__nv_erff.exit, !dbg !30

79:                                               ; preds = %__internal_fmad.exit.i
  %80 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i) #4, !dbg !30
  %81 = fsub float 1.000000e+00, %80, !dbg !30
  %82 = bitcast float %81 to i32, !dbg !30
  %83 = bitcast float %39 to i32, !dbg !30
  %84 = and i32 %83, -2147483648, !dbg !30
  %85 = or i32 %84, %82, !dbg !30
  %86 = bitcast i32 %85 to float, !dbg !30
  br label %__nv_erff.exit, !dbg !30

__nv_erff.exit:                                   ; preds = %__internal_fmad.exit.i, %79
  %r.0.i = phi float [ %86, %79 ], [ %.08.i, %__internal_fmad.exit.i ], !dbg !30
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i5 = icmp eq i32 %87, 0, !dbg !30
  %88 = tail call float @llvm.nvvm.fabs.ftz.f(float %40) #4, !dbg !30
  %89 = tail call float @llvm.nvvm.fabs.f(float %40) #4, !dbg !30
  %.0.i6 = select i1 %.not.i5, float %89, float %88, !dbg !30
  %90 = fcmp oge float %.0.i6, 0x3FF00C1FC0000000, !dbg !30
  br i1 %90, label %__nv_fabsf.exit1.i23, label %92, !dbg !30

__nv_fabsf.exit1.i23:                             ; preds = %__nv_erff.exit
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not1.i24 = icmp eq i32 %91, 0, !dbg !30
  %.01.i25 = select i1 %.not1.i24, float %89, float %88, !dbg !30
  br label %__internal_fmad.exit.i7, !dbg !30

92:                                               ; preds = %__nv_erff.exit
  %93 = fmul float %40, %40, !dbg !30
  br label %__internal_fmad.exit.i7, !dbg !30

__internal_fmad.exit.i7:                          ; preds = %92, %__nv_fabsf.exit1.i23
  %94 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i23 ], [ 0x3FC06EBA60000000, %92 ], !dbg !30
  %95 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i23 ], [ 0xBFD8127580000000, %92 ], !dbg !30
  %96 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i23 ], [ 0x3FBCE315E0000000, %92 ], !dbg !30
  %97 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i23 ], [ 0xBF9B837CE0000000, %92 ], !dbg !30
  %98 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i23 ], [ 0x3F755ABD40000000, %92 ], !dbg !30
  %99 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i23 ], [ 0xBF4AE9A400000000, %92 ], !dbg !30
  %100 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i23 ], [ 0x3F163D2D40000000, %92 ], !dbg !30
  %101 = phi float [ %.01.i25, %__nv_fabsf.exit1.i23 ], [ %93, %92 ], !dbg !30
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not2.i8 = icmp eq i32 %102, 0, !dbg !30
  %103 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %100, float %101, float %99) #4, !dbg !30
  %104 = tail call float @llvm.nvvm.fma.rn.f(float %100, float %101, float %99) #4, !dbg !30
  %.02.i9 = select i1 %.not2.i8, float %104, float %103, !dbg !30
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not3.i10 = icmp eq i32 %105, 0, !dbg !30
  %106 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i9, float %101, float %98) #4, !dbg !30
  %107 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i9, float %101, float %98) #4, !dbg !30
  %.03.i11 = select i1 %.not3.i10, float %107, float %106, !dbg !30
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not4.i12 = icmp eq i32 %108, 0, !dbg !30
  %109 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i11, float %101, float %97) #4, !dbg !30
  %110 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i11, float %101, float %97) #4, !dbg !30
  %.04.i13 = select i1 %.not4.i12, float %110, float %109, !dbg !30
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not5.i14 = icmp eq i32 %111, 0, !dbg !30
  %112 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i13, float %101, float %96) #4, !dbg !30
  %113 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i13, float %101, float %96) #4, !dbg !30
  %.05.i15 = select i1 %.not5.i14, float %113, float %112, !dbg !30
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not6.i16 = icmp eq i32 %114, 0, !dbg !30
  %115 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i15, float %101, float %95) #4, !dbg !30
  %116 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i15, float %101, float %95) #4, !dbg !30
  %.06.i17 = select i1 %.not6.i16, float %116, float %115, !dbg !30
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not7.i18 = icmp eq i32 %117, 0, !dbg !30
  %118 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i17, float %101, float %94) #4, !dbg !30
  %119 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i17, float %101, float %94) #4, !dbg !30
  %.07.i19 = select i1 %.not7.i18, float %119, float %118, !dbg !30
  %120 = fneg float %101, !dbg !30
  %121 = select i1 %90, float %120, float %40, !dbg !30
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not8.i20 = icmp eq i32 %122, 0, !dbg !30
  %123 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i19, float %121, float %121) #4, !dbg !30
  %124 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i19, float %121, float %121) #4, !dbg !30
  %.08.i21 = select i1 %.not8.i20, float %124, float %123, !dbg !30
  br i1 %90, label %125, label %__nv_erff.exit26, !dbg !30

125:                                              ; preds = %__internal_fmad.exit.i7
  %126 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i21) #4, !dbg !30
  %127 = fsub float 1.000000e+00, %126, !dbg !30
  %128 = bitcast float %127 to i32, !dbg !30
  %129 = bitcast float %40 to i32, !dbg !30
  %130 = and i32 %129, -2147483648, !dbg !30
  %131 = or i32 %130, %128, !dbg !30
  %132 = bitcast i32 %131 to float, !dbg !30
  br label %__nv_erff.exit26, !dbg !30

__nv_erff.exit26:                                 ; preds = %__internal_fmad.exit.i7, %125
  %r.0.i22 = phi float [ %132, %125 ], [ %.08.i21, %__internal_fmad.exit.i7 ], !dbg !30
  %133 = fmul float %38, 5.000000e-01, !dbg !31
  %134 = fmul float %37, 5.000000e-01, !dbg !31
  %.lobit12 = lshr i32 %8, 5, !dbg !32
  %135 = and i32 %.lobit12, 3, !dbg !32
  %136 = or disjoint i32 %16, %135, !dbg !17
  %137 = icmp slt i32 %136, 4, !dbg !18
  %138 = shl i32 %8, 1, !dbg !12
  %139 = and i32 %138, 62, !dbg !12
  %140 = or disjoint i32 %7, %139, !dbg !13
  %141 = icmp slt i32 %140, 64, !dbg !14
  %142 = and i1 %141, %137, !dbg !23
  %143 = fadd float %r.0.i, 1.000000e+00, !dbg !33
  %144 = fadd float %r.0.i22, 1.000000e+00, !dbg !33
  %145 = fmul float %134, %143, !dbg !34
  %146 = fmul float %133, %144, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %147 = bitcast float %35 to i32, !dbg !36
  %148 = bitcast float %36 to i32, !dbg !36
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %147, i32 %148, ptr addrspace(1) %23, i1 %24) #4, !dbg !36
  %149 = shl i32 %136, 6, !dbg !37
  %150 = add i32 %149, %140, !dbg !38
  %151 = sext i32 %150 to i64, !dbg !39
  %152 = getelementptr float, ptr addrspace(1) %2, i64 %151, !dbg !39
  %153 = shl nuw nsw i32 %11, 7, !dbg !40
  %154 = or disjoint i32 %153, %10, !dbg !40
  %155 = and i32 %138, 254, !dbg !40
  %.idx = shl nuw nsw i32 %11, 4, !dbg !40
  %156 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !40
  %157 = getelementptr float, ptr addrspace(3) %156, i32 %154, !dbg !40
  %158 = bitcast float %145 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %158, i1 true) #4, !dbg !40
  %159 = or disjoint i32 %154, 64, !dbg !40
  %160 = lshr i32 %159, 5, !dbg !40
  %161 = and i32 %160, 6, !dbg !40
  %162 = getelementptr float, ptr addrspace(3) @global_smem, i32 %161, !dbg !40
  %163 = getelementptr float, ptr addrspace(3) %162, i32 %159, !dbg !40
  %164 = bitcast float %146 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %164, i1 true) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %165 = lshr i32 %138, 5, !dbg !40
  %166 = and i32 %165, 6, !dbg !40
  %167 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %166, !dbg !40
  %168 = getelementptr inbounds float, ptr addrspace(3) %167, i32 %155, !dbg !40
  %.extract = load i32, ptr addrspace(3) %168, align 8, !dbg !40
  %169 = getelementptr inbounds i8, ptr addrspace(3) %168, i32 4, !dbg !40
  %.extract4 = load i32, ptr addrspace(3) %169, align 4, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract4, ptr addrspace(1) %152, i1 %142) #4, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr2imu5bypogyot2gntfnlu4iogbpf2dpmzzjcl263cvsrqgecd6.py", directory: "inductor_cache/r2")
!4 = !{ptr @triton_poi_fused_clone_convolution_gelu_mul_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_convolution_gelu_mul_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_convolution_gelu_mul_11", linkageName: "triton_poi_fused_clone_convolution_gelu_mul_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 41, scope: !7)
!21 = !DILocation(line: 31, column: 39, scope: !7)
!22 = !DILocation(line: 31, column: 34, scope: !7)
!23 = !DILocation(line: 31, column: 54, scope: !7)
!24 = !DILocation(line: 31, column: 46, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 18, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 39, column: 18, scope: !7)
!30 = !DILocation(line: 40, column: 25, scope: !7)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 26, column: 44, scope: !7)
!33 = !DILocation(line: 42, column: 19, scope: !7)
!34 = !DILocation(line: 43, column: 19, scope: !7)
!35 = !DILocation(line: 44, column: 4, scope: !7)
!36 = !DILocation(line: 45, column: 46, scope: !7)
!37 = !DILocation(line: 46, column: 33, scope: !7)
!38 = !DILocation(line: 46, column: 30, scope: !7)
!39 = !DILocation(line: 46, column: 25, scope: !7)
!40 = !DILocation(line: 46, column: 45, scope: !7)
!41 = !DILocation(line: 46, column: 4, scope: !7)
