; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_abs_add_avg_pool2d_clamp_div_floor_mul_sign_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 4, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 16, !dbg !12
  %12 = and i32 %10, 15, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 16, !dbg !14
  %15 = shl i32 %13, 4, !dbg !15
  %16 = sext i32 %15 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %14) #2, !dbg !17
  %19 = bitcast i32 %18 to float, !dbg !17
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #2, !dbg !18
  %21 = bitcast i32 %20 to float, !dbg !18
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #2, !dbg !19
  %23 = bitcast i32 %22 to float, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #2, !dbg !20
  %25 = bitcast i32 %24 to float, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %4, i1 true) #2, !dbg !21
  %27 = bitcast i32 %26 to float, !dbg !21
  %28 = or disjoint i32 %15, 1, !dbg !22
  %29 = sext i32 %28 to i64, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %14) #2, !dbg !24
  %32 = bitcast i32 %31 to float, !dbg !24
  %33 = or disjoint i32 %15, 2, !dbg !25
  %34 = sext i32 %33 to i64, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !26
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %14) #2, !dbg !27
  %37 = bitcast i32 %36 to float, !dbg !27
  %38 = or disjoint i32 %15, 3, !dbg !28
  %39 = sext i32 %38 to i64, !dbg !29
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !29
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %14) #2, !dbg !30
  %42 = bitcast i32 %41 to float, !dbg !30
  %43 = or disjoint i32 %15, 4, !dbg !31
  %44 = sext i32 %43 to i64, !dbg !32
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !32
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %14) #2, !dbg !33
  %47 = bitcast i32 %46 to float, !dbg !33
  %48 = or disjoint i32 %15, 5, !dbg !34
  %49 = sext i32 %48 to i64, !dbg !35
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !35
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %14) #2, !dbg !36
  %52 = bitcast i32 %51 to float, !dbg !36
  %53 = or disjoint i32 %15, 6, !dbg !37
  %54 = sext i32 %53 to i64, !dbg !38
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !38
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %14) #2, !dbg !39
  %57 = bitcast i32 %56 to float, !dbg !39
  %58 = or disjoint i32 %15, 7, !dbg !40
  %59 = sext i32 %58 to i64, !dbg !41
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !41
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %14) #2, !dbg !42
  %62 = bitcast i32 %61 to float, !dbg !42
  %63 = or disjoint i32 %15, 8, !dbg !43
  %64 = sext i32 %63 to i64, !dbg !44
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !44
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %14) #2, !dbg !45
  %67 = bitcast i32 %66 to float, !dbg !45
  %68 = or disjoint i32 %15, 9, !dbg !46
  %69 = sext i32 %68 to i64, !dbg !47
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !47
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %14) #2, !dbg !48
  %72 = bitcast i32 %71 to float, !dbg !48
  %73 = or disjoint i32 %15, 10, !dbg !49
  %74 = sext i32 %73 to i64, !dbg !50
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !50
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %14) #2, !dbg !51
  %77 = bitcast i32 %76 to float, !dbg !51
  %78 = or disjoint i32 %15, 11, !dbg !52
  %79 = sext i32 %78 to i64, !dbg !53
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !53
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %14) #2, !dbg !54
  %82 = bitcast i32 %81 to float, !dbg !54
  %83 = or disjoint i32 %15, 12, !dbg !55
  %84 = sext i32 %83 to i64, !dbg !56
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !56
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %14) #2, !dbg !57
  %87 = bitcast i32 %86 to float, !dbg !57
  %88 = or disjoint i32 %15, 13, !dbg !58
  %89 = sext i32 %88 to i64, !dbg !59
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !59
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %14) #2, !dbg !60
  %92 = bitcast i32 %91 to float, !dbg !60
  %93 = or disjoint i32 %15, 14, !dbg !61
  %94 = sext i32 %93 to i64, !dbg !62
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !62
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %14) #2, !dbg !63
  %97 = bitcast i32 %96 to float, !dbg !63
  %98 = or disjoint i32 %15, 15, !dbg !64
  %99 = sext i32 %98 to i64, !dbg !65
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !65
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %14) #2, !dbg !66
  %102 = bitcast i32 %101 to float, !dbg !66
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %19, float %21) #2, !dbg !67
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !68
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %32, float %21) #2, !dbg !69
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !70
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %37, float %21) #2, !dbg !71
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !72
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %42, float %21) #2, !dbg !73
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !74
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %47, float %21) #2, !dbg !75
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !76
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float %21) #2, !dbg !77
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !78
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float %21) #2, !dbg !79
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !80
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float %21) #2, !dbg !81
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !82
  %119 = insertelement <2 x i32> poison, i32 %116, i64 0, !dbg !80
  %120 = insertelement <2 x i32> %119, i32 %118, i64 1, !dbg !80
  %121 = icmp eq <2 x i32> %120, zeroinitializer, !dbg !80
  %122 = insertelement <2 x float> poison, float %25, i64 0, !dbg !83
  %123 = shufflevector <2 x float> %122, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !83
  %124 = insertelement <2 x float> poison, float %27, i64 0, !dbg !87
  %125 = shufflevector <2 x float> %124, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !87
  %126 = insertelement <2 x float> poison, float %23, i64 0, !dbg !89
  %127 = shufflevector <2 x float> %126, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !89
  %128 = insertelement <2 x float> poison, float %21, i64 0, !dbg !90
  %129 = shufflevector <2 x float> %128, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !90
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %67, float %21) #2, !dbg !91
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !92
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %72, float %21) #2, !dbg !93
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !94
  %134 = insertelement <2 x i32> poison, i32 %131, i64 0, !dbg !92
  %135 = insertelement <2 x i32> %134, i32 %133, i64 1, !dbg !92
  %136 = icmp eq <2 x i32> %135, zeroinitializer, !dbg !92
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %77, float %21) #2, !dbg !95
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !96
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float %21) #2, !dbg !97
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !98
  %141 = insertelement <2 x i32> poison, i32 %138, i64 0, !dbg !96
  %142 = insertelement <2 x i32> %141, i32 %140, i64 1, !dbg !96
  %143 = icmp eq <2 x i32> %142, zeroinitializer, !dbg !96
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %87, float %21) #2, !dbg !99
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !100
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float %21) #2, !dbg !101
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !102
  %148 = insertelement <2 x i32> poison, i32 %145, i64 0, !dbg !100
  %149 = insertelement <2 x i32> %148, i32 %147, i64 1, !dbg !100
  %150 = icmp eq <2 x i32> %149, zeroinitializer, !dbg !100
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float %21) #2, !dbg !103
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !104
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %21) #2, !dbg !105
  %154 = insertelement <16 x float> poison, float %153, i64 0, !dbg !106
  %155 = insertelement <16 x float> %154, float %151, i64 1, !dbg !106
  %156 = insertelement <16 x float> %155, float %146, i64 2, !dbg !106
  %157 = insertelement <16 x float> %156, float %144, i64 3, !dbg !106
  %158 = insertelement <16 x float> %157, float %139, i64 4, !dbg !106
  %159 = insertelement <16 x float> %158, float %137, i64 5, !dbg !106
  %160 = insertelement <16 x float> %159, float %132, i64 6, !dbg !106
  %161 = insertelement <16 x float> %160, float %130, i64 7, !dbg !106
  %162 = insertelement <16 x float> %161, float %117, i64 8, !dbg !106
  %163 = insertelement <16 x float> %162, float %115, i64 9, !dbg !106
  %164 = insertelement <16 x float> %163, float %113, i64 10, !dbg !106
  %165 = insertelement <16 x float> %164, float %111, i64 11, !dbg !106
  %166 = insertelement <16 x float> %165, float %109, i64 12, !dbg !106
  %167 = insertelement <16 x float> %166, float %107, i64 13, !dbg !106
  %168 = insertelement <16 x float> %167, float %105, i64 14, !dbg !106
  %169 = insertelement <16 x float> %168, float %103, i64 15, !dbg !106
  %170 = insertelement <16 x float> poison, float %23, i64 0, !dbg !106
  %171 = shufflevector <16 x float> %170, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !106
  %172 = fsub <16 x float> %169, %171, !dbg !106
  %173 = fcmp olt <16 x float> %172, zeroinitializer, !dbg !107
  %174 = extractelement <16 x float> %172, i64 15, !dbg !108
  %175 = tail call float @llvm.fabs.f32(float %174), !dbg !108
  %176 = fadd float %175, 5.000000e-01, !dbg !109
  %177 = tail call float @llvm.nvvm.floor.ftz.f(float %176), !dbg !68
  %178 = tail call float @llvm.nvvm.floor.f(float %176), !dbg !68
  %179 = extractelement <16 x float> %172, i64 14, !dbg !110
  %180 = tail call float @llvm.fabs.f32(float %179), !dbg !110
  %181 = fadd float %180, 5.000000e-01, !dbg !111
  %182 = tail call float @llvm.nvvm.floor.ftz.f(float %181), !dbg !70
  %183 = tail call float @llvm.nvvm.floor.f(float %181), !dbg !70
  %184 = extractelement <16 x float> %172, i64 13, !dbg !112
  %185 = tail call float @llvm.fabs.f32(float %184), !dbg !112
  %186 = fadd float %185, 5.000000e-01, !dbg !113
  %187 = tail call float @llvm.nvvm.floor.ftz.f(float %186), !dbg !72
  %188 = tail call float @llvm.nvvm.floor.f(float %186), !dbg !72
  %189 = extractelement <16 x float> %172, i64 12, !dbg !114
  %190 = tail call float @llvm.fabs.f32(float %189), !dbg !114
  %191 = fadd float %190, 5.000000e-01, !dbg !115
  %192 = tail call float @llvm.nvvm.floor.ftz.f(float %191), !dbg !74
  %193 = tail call float @llvm.nvvm.floor.f(float %191), !dbg !74
  %194 = extractelement <16 x float> %172, i64 11, !dbg !116
  %195 = tail call float @llvm.fabs.f32(float %194), !dbg !116
  %196 = fadd float %195, 5.000000e-01, !dbg !117
  %197 = tail call float @llvm.nvvm.floor.ftz.f(float %196), !dbg !76
  %198 = tail call float @llvm.nvvm.floor.f(float %196), !dbg !76
  %199 = extractelement <16 x float> %172, i64 10, !dbg !118
  %200 = tail call float @llvm.fabs.f32(float %199), !dbg !118
  %201 = fadd float %200, 5.000000e-01, !dbg !119
  %202 = tail call float @llvm.nvvm.floor.ftz.f(float %201), !dbg !78
  %203 = tail call float @llvm.nvvm.floor.f(float %201), !dbg !78
  %204 = extractelement <16 x float> %172, i64 9, !dbg !120
  %205 = tail call float @llvm.fabs.f32(float %204), !dbg !120
  %206 = fadd float %205, 5.000000e-01, !dbg !121
  %207 = tail call float @llvm.nvvm.floor.ftz.f(float %206), !dbg !80
  %208 = tail call float @llvm.nvvm.floor.f(float %206), !dbg !80
  %209 = extractelement <16 x float> %172, i64 8, !dbg !122
  %210 = tail call float @llvm.fabs.f32(float %209), !dbg !122
  %211 = fadd float %210, 5.000000e-01, !dbg !123
  %212 = tail call float @llvm.nvvm.floor.ftz.f(float %211), !dbg !82
  %213 = tail call float @llvm.nvvm.floor.f(float %211), !dbg !82
  %214 = shufflevector <16 x i1> %173, <16 x i1> poison, <2 x i32> <i32 9, i32 8>, !dbg !124
  %215 = sext <2 x i1> %214 to <2 x i8>, !dbg !124
  %216 = insertelement <2 x float> poison, float %208, i64 0, !dbg !80
  %217 = insertelement <2 x float> %216, float %213, i64 1, !dbg !80
  %218 = insertelement <2 x float> poison, float %207, i64 0, !dbg !80
  %219 = insertelement <2 x float> %218, float %212, i64 1, !dbg !80
  %220 = select <2 x i1> %121, <2 x float> %217, <2 x float> %219, !dbg !80
  %221 = extractelement <16 x float> %172, i64 7, !dbg !125
  %222 = tail call float @llvm.fabs.f32(float %221), !dbg !125
  %223 = fadd float %222, 5.000000e-01, !dbg !126
  %224 = tail call float @llvm.nvvm.floor.ftz.f(float %223), !dbg !92
  %225 = tail call float @llvm.nvvm.floor.f(float %223), !dbg !92
  %226 = extractelement <16 x float> %172, i64 6, !dbg !127
  %227 = tail call float @llvm.fabs.f32(float %226), !dbg !127
  %228 = fadd float %227, 5.000000e-01, !dbg !128
  %229 = tail call float @llvm.nvvm.floor.ftz.f(float %228), !dbg !94
  %230 = tail call float @llvm.nvvm.floor.f(float %228), !dbg !94
  %231 = shufflevector <16 x i1> %173, <16 x i1> poison, <2 x i32> <i32 7, i32 6>, !dbg !129
  %232 = sext <2 x i1> %231 to <2 x i8>, !dbg !129
  %233 = insertelement <2 x float> poison, float %225, i64 0, !dbg !92
  %234 = insertelement <2 x float> %233, float %230, i64 1, !dbg !92
  %235 = insertelement <2 x float> poison, float %224, i64 0, !dbg !92
  %236 = insertelement <2 x float> %235, float %229, i64 1, !dbg !92
  %237 = select <2 x i1> %136, <2 x float> %234, <2 x float> %236, !dbg !92
  %238 = extractelement <16 x float> %172, i64 5, !dbg !130
  %239 = tail call float @llvm.fabs.f32(float %238), !dbg !130
  %240 = fadd float %239, 5.000000e-01, !dbg !131
  %241 = tail call float @llvm.nvvm.floor.ftz.f(float %240), !dbg !96
  %242 = tail call float @llvm.nvvm.floor.f(float %240), !dbg !96
  %243 = extractelement <16 x float> %172, i64 4, !dbg !132
  %244 = tail call float @llvm.fabs.f32(float %243), !dbg !132
  %245 = fadd float %244, 5.000000e-01, !dbg !133
  %246 = tail call float @llvm.nvvm.floor.ftz.f(float %245), !dbg !98
  %247 = tail call float @llvm.nvvm.floor.f(float %245), !dbg !98
  %248 = shufflevector <16 x i1> %173, <16 x i1> poison, <2 x i32> <i32 5, i32 4>, !dbg !134
  %249 = sext <2 x i1> %248 to <2 x i8>, !dbg !134
  %250 = insertelement <2 x float> poison, float %242, i64 0, !dbg !96
  %251 = insertelement <2 x float> %250, float %247, i64 1, !dbg !96
  %252 = insertelement <2 x float> poison, float %241, i64 0, !dbg !96
  %253 = insertelement <2 x float> %252, float %246, i64 1, !dbg !96
  %254 = select <2 x i1> %143, <2 x float> %251, <2 x float> %253, !dbg !96
  %255 = extractelement <16 x float> %172, i64 3, !dbg !135
  %256 = tail call float @llvm.fabs.f32(float %255), !dbg !135
  %257 = fadd float %256, 5.000000e-01, !dbg !136
  %258 = tail call float @llvm.nvvm.floor.ftz.f(float %257), !dbg !100
  %259 = tail call float @llvm.nvvm.floor.f(float %257), !dbg !100
  %260 = extractelement <16 x float> %172, i64 2, !dbg !137
  %261 = tail call float @llvm.fabs.f32(float %260), !dbg !137
  %262 = fadd float %261, 5.000000e-01, !dbg !138
  %263 = tail call float @llvm.nvvm.floor.ftz.f(float %262), !dbg !102
  %264 = tail call float @llvm.nvvm.floor.f(float %262), !dbg !102
  %265 = shufflevector <16 x i1> %173, <16 x i1> poison, <2 x i32> <i32 3, i32 2>, !dbg !139
  %266 = sext <2 x i1> %265 to <2 x i8>, !dbg !139
  %267 = insertelement <2 x float> poison, float %259, i64 0, !dbg !100
  %268 = insertelement <2 x float> %267, float %264, i64 1, !dbg !100
  %269 = insertelement <2 x float> poison, float %258, i64 0, !dbg !100
  %270 = insertelement <2 x float> %269, float %263, i64 1, !dbg !100
  %271 = select <2 x i1> %150, <2 x float> %268, <2 x float> %270, !dbg !100
  %272 = extractelement <16 x float> %172, i64 1, !dbg !140
  %273 = tail call float @llvm.fabs.f32(float %272), !dbg !140
  %274 = fadd float %273, 5.000000e-01, !dbg !141
  %275 = tail call float @llvm.nvvm.floor.ftz.f(float %274), !dbg !104
  %276 = tail call float @llvm.nvvm.floor.f(float %274), !dbg !104
  %277 = fcmp ogt <16 x float> %172, zeroinitializer, !dbg !142
  %278 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !70
  %279 = insertelement <2 x i32> %278, i32 %104, i64 1, !dbg !70
  %280 = icmp eq <2 x i32> %279, zeroinitializer, !dbg !70
  %281 = shufflevector <16 x i1> %173, <16 x i1> poison, <2 x i32> <i32 14, i32 15>, !dbg !143
  %282 = sext <2 x i1> %281 to <2 x i8>, !dbg !143
  %283 = insertelement <2 x float> poison, float %183, i64 0, !dbg !70
  %284 = insertelement <2 x float> %283, float %178, i64 1, !dbg !70
  %285 = insertelement <2 x float> poison, float %182, i64 0, !dbg !70
  %286 = insertelement <2 x float> %285, float %177, i64 1, !dbg !70
  %287 = select <2 x i1> %280, <2 x float> %284, <2 x float> %286, !dbg !70
  %288 = shufflevector <16 x i1> %277, <16 x i1> poison, <2 x i32> <i32 14, i32 15>, !dbg !144
  %289 = zext <2 x i1> %288 to <2 x i8>, !dbg !144
  %290 = add nsw <2 x i8> %282, %289, !dbg !145
  %291 = sitofp <2 x i8> %290 to <2 x float>, !dbg !146
  %292 = fmul <2 x float> %287, %291, !dbg !147
  %293 = extractelement <2 x float> %292, i64 1, !dbg !148
  %294 = fcmp ogt float %293, %25, !dbg !150
  %295 = fcmp uno <2 x float> %292, zeroinitializer, !dbg !151
  %296 = extractelement <2 x i1> %295, i64 1, !dbg !153
  %297 = or i1 %294, %296, !dbg !153
  %298 = select i1 %297, float %293, float %25, !dbg !148
  %299 = fcmp olt float %298, %27, !dbg !154
  %300 = fcmp uno float %298, 0.000000e+00, !dbg !156
  %301 = or i1 %299, %300, !dbg !157
  %302 = select i1 %301, float %298, float %27, !dbg !158
  %303 = fadd float %302, %23, !dbg !159
  %304 = fmul float %303, %21, !dbg !160
  %305 = extractelement <2 x float> %292, i64 0, !dbg !161
  %306 = fcmp ogt float %305, %25, !dbg !162
  %307 = extractelement <2 x i1> %295, i64 0, !dbg !163
  %308 = or i1 %306, %307, !dbg !163
  %309 = select i1 %308, float %305, float %25, !dbg !161
  %310 = fcmp olt float %309, %27, !dbg !164
  %311 = fcmp uno float %309, 0.000000e+00, !dbg !166
  %312 = or i1 %310, %311, !dbg !167
  %313 = select i1 %312, float %309, float %27, !dbg !168
  %314 = fadd float %313, %23, !dbg !169
  %315 = fmul float %314, %21, !dbg !170
  %316 = fadd float %304, %315, !dbg !171
  %317 = insertelement <4 x i32> poison, i32 %114, i64 0, !dbg !78
  %318 = insertelement <4 x i32> %317, i32 %112, i64 1, !dbg !78
  %319 = insertelement <4 x i32> %318, i32 %110, i64 2, !dbg !78
  %320 = insertelement <4 x i32> %319, i32 %108, i64 3, !dbg !78
  %321 = icmp eq <4 x i32> %320, zeroinitializer, !dbg !78
  %322 = shufflevector <16 x i1> %173, <16 x i1> poison, <4 x i32> <i32 10, i32 11, i32 12, i32 13>, !dbg !172
  %323 = sext <4 x i1> %322 to <4 x i8>, !dbg !172
  %324 = insertelement <4 x float> poison, float %203, i64 0, !dbg !78
  %325 = insertelement <4 x float> %324, float %198, i64 1, !dbg !78
  %326 = insertelement <4 x float> %325, float %193, i64 2, !dbg !78
  %327 = insertelement <4 x float> %326, float %188, i64 3, !dbg !78
  %328 = insertelement <4 x float> poison, float %202, i64 0, !dbg !78
  %329 = insertelement <4 x float> %328, float %197, i64 1, !dbg !78
  %330 = insertelement <4 x float> %329, float %192, i64 2, !dbg !78
  %331 = insertelement <4 x float> %330, float %187, i64 3, !dbg !78
  %332 = select <4 x i1> %321, <4 x float> %327, <4 x float> %331, !dbg !78
  %333 = shufflevector <16 x i1> %277, <16 x i1> poison, <4 x i32> <i32 10, i32 11, i32 12, i32 13>, !dbg !173
  %334 = zext <4 x i1> %333 to <4 x i8>, !dbg !173
  %335 = add nsw <4 x i8> %323, %334, !dbg !174
  %336 = sitofp <4 x i8> %335 to <4 x float>, !dbg !175
  %337 = fmul <4 x float> %332, %336, !dbg !176
  %338 = insertelement <4 x float> poison, float %25, i64 0, !dbg !177
  %339 = shufflevector <4 x float> %338, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !177
  %340 = fcmp ogt <4 x float> %337, %339, !dbg !177
  %341 = fcmp uno <4 x float> %337, zeroinitializer, !dbg !179
  %342 = or <4 x i1> %340, %341, !dbg !180
  %343 = select <4 x i1> %342, <4 x float> %337, <4 x float> %339, !dbg !181
  %344 = extractelement <4 x float> %343, i64 3, !dbg !182
  %345 = fcmp uno float %344, 0.000000e+00, !dbg !184
  %346 = insertelement <4 x float> poison, float %27, i64 0, !dbg !185
  %347 = shufflevector <4 x float> %346, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !185
  %348 = fcmp olt <4 x float> %343, %347, !dbg !185
  %349 = extractelement <4 x i1> %348, i64 3, !dbg !187
  %350 = or i1 %349, %345, !dbg !187
  %351 = select i1 %350, float %344, float %27, !dbg !182
  %352 = fadd float %351, %23, !dbg !188
  %353 = fmul float %352, %21, !dbg !189
  %354 = fadd float %316, %353, !dbg !190
  %355 = extractelement <4 x float> %343, i64 2, !dbg !191
  %356 = fcmp uno float %355, 0.000000e+00, !dbg !193
  %357 = extractelement <4 x i1> %348, i64 2, !dbg !194
  %358 = or i1 %357, %356, !dbg !194
  %359 = select i1 %358, float %355, float %27, !dbg !191
  %360 = fadd float %359, %23, !dbg !195
  %361 = fmul float %360, %21, !dbg !196
  %362 = fadd float %354, %361, !dbg !197
  %363 = extractelement <4 x float> %343, i64 1, !dbg !198
  %364 = fcmp uno float %363, 0.000000e+00, !dbg !200
  %365 = extractelement <4 x i1> %348, i64 1, !dbg !201
  %366 = or i1 %365, %364, !dbg !201
  %367 = select i1 %366, float %363, float %27, !dbg !198
  %368 = fadd float %367, %23, !dbg !202
  %369 = fmul float %368, %21, !dbg !203
  %370 = fadd float %362, %369, !dbg !204
  %371 = extractelement <4 x float> %343, i64 0, !dbg !205
  %372 = fcmp uno float %371, 0.000000e+00, !dbg !206
  %373 = extractelement <4 x i1> %348, i64 0, !dbg !207
  %374 = or i1 %373, %372, !dbg !207
  %375 = select i1 %374, float %371, float %27, !dbg !205
  %376 = fadd float %375, %23, !dbg !208
  %377 = fmul float %376, %21, !dbg !209
  %378 = fadd float %370, %377, !dbg !210
  %379 = shufflevector <16 x i1> %277, <16 x i1> poison, <2 x i32> <i32 9, i32 8>, !dbg !211
  %380 = zext <2 x i1> %379 to <2 x i8>, !dbg !211
  %381 = add nsw <2 x i8> %215, %380, !dbg !212
  %382 = sitofp <2 x i8> %381 to <2 x float>, !dbg !213
  %383 = fmul <2 x float> %220, %382, !dbg !214
  %384 = fcmp ogt <2 x float> %383, %123, !dbg !83
  %385 = fcmp uno <2 x float> %383, zeroinitializer, !dbg !215
  %386 = or <2 x i1> %384, %385, !dbg !216
  %387 = select <2 x i1> %386, <2 x float> %383, <2 x float> %123, !dbg !217
  %388 = fcmp olt <2 x float> %387, %125, !dbg !87
  %389 = fcmp uno <2 x float> %387, zeroinitializer, !dbg !218
  %390 = or <2 x i1> %388, %389, !dbg !219
  %391 = select <2 x i1> %390, <2 x float> %387, <2 x float> %125, !dbg !220
  %392 = fadd <2 x float> %391, %127, !dbg !89
  %393 = fmul <2 x float> %392, %129, !dbg !90
  %394 = extractelement <2 x float> %393, i64 0, !dbg !221
  %395 = fadd float %378, %394, !dbg !221
  %396 = extractelement <2 x float> %393, i64 1, !dbg !222
  %397 = fadd float %395, %396, !dbg !222
  %398 = shufflevector <16 x i1> %277, <16 x i1> poison, <2 x i32> <i32 7, i32 6>, !dbg !223
  %399 = zext <2 x i1> %398 to <2 x i8>, !dbg !223
  %400 = add nsw <2 x i8> %232, %399, !dbg !224
  %401 = sitofp <2 x i8> %400 to <2 x float>, !dbg !225
  %402 = fmul <2 x float> %237, %401, !dbg !226
  %403 = fcmp ogt <2 x float> %402, %123, !dbg !227
  %404 = fcmp uno <2 x float> %402, zeroinitializer, !dbg !229
  %405 = or <2 x i1> %403, %404, !dbg !230
  %406 = select <2 x i1> %405, <2 x float> %402, <2 x float> %123, !dbg !231
  %407 = fcmp olt <2 x float> %406, %125, !dbg !232
  %408 = fcmp uno <2 x float> %406, zeroinitializer, !dbg !234
  %409 = or <2 x i1> %407, %408, !dbg !235
  %410 = select <2 x i1> %409, <2 x float> %406, <2 x float> %125, !dbg !236
  %411 = fadd <2 x float> %410, %127, !dbg !237
  %412 = fmul <2 x float> %411, %129, !dbg !238
  %413 = extractelement <2 x float> %412, i64 0, !dbg !239
  %414 = fadd float %397, %413, !dbg !239
  %415 = extractelement <2 x float> %412, i64 1, !dbg !240
  %416 = fadd float %414, %415, !dbg !240
  %417 = shufflevector <16 x i1> %277, <16 x i1> poison, <2 x i32> <i32 5, i32 4>, !dbg !241
  %418 = zext <2 x i1> %417 to <2 x i8>, !dbg !241
  %419 = add nsw <2 x i8> %249, %418, !dbg !242
  %420 = sitofp <2 x i8> %419 to <2 x float>, !dbg !243
  %421 = fmul <2 x float> %254, %420, !dbg !244
  %422 = fcmp ogt <2 x float> %421, %123, !dbg !245
  %423 = fcmp uno <2 x float> %421, zeroinitializer, !dbg !247
  %424 = or <2 x i1> %422, %423, !dbg !248
  %425 = select <2 x i1> %424, <2 x float> %421, <2 x float> %123, !dbg !249
  %426 = fcmp olt <2 x float> %425, %125, !dbg !250
  %427 = fcmp uno <2 x float> %425, zeroinitializer, !dbg !252
  %428 = or <2 x i1> %426, %427, !dbg !253
  %429 = select <2 x i1> %428, <2 x float> %425, <2 x float> %125, !dbg !254
  %430 = fadd <2 x float> %429, %127, !dbg !255
  %431 = fmul <2 x float> %430, %129, !dbg !256
  %432 = extractelement <2 x float> %431, i64 0, !dbg !257
  %433 = fadd float %416, %432, !dbg !257
  %434 = extractelement <2 x float> %431, i64 1, !dbg !258
  %435 = fadd float %433, %434, !dbg !258
  %436 = shufflevector <16 x i1> %277, <16 x i1> poison, <2 x i32> <i32 3, i32 2>, !dbg !259
  %437 = zext <2 x i1> %436 to <2 x i8>, !dbg !259
  %438 = add nsw <2 x i8> %266, %437, !dbg !260
  %439 = sitofp <2 x i8> %438 to <2 x float>, !dbg !261
  %440 = fmul <2 x float> %271, %439, !dbg !262
  %441 = fcmp ogt <2 x float> %440, %123, !dbg !263
  %442 = fcmp uno <2 x float> %440, zeroinitializer, !dbg !265
  %443 = or <2 x i1> %441, %442, !dbg !266
  %444 = select <2 x i1> %443, <2 x float> %440, <2 x float> %123, !dbg !267
  %445 = fcmp olt <2 x float> %444, %125, !dbg !268
  %446 = fcmp uno <2 x float> %444, zeroinitializer, !dbg !270
  %447 = or <2 x i1> %445, %446, !dbg !271
  %448 = select <2 x i1> %447, <2 x float> %444, <2 x float> %125, !dbg !272
  %449 = fadd <2 x float> %448, %127, !dbg !273
  %450 = fmul <2 x float> %449, %129, !dbg !274
  %451 = extractelement <2 x float> %450, i64 0, !dbg !275
  %452 = fadd float %435, %451, !dbg !275
  %453 = extractelement <2 x float> %450, i64 1, !dbg !276
  %454 = fadd float %452, %453, !dbg !276
  %455 = extractelement <16 x float> %172, i64 0, !dbg !277
  %456 = tail call float @llvm.fabs.f32(float %455), !dbg !277
  %457 = fadd float %456, 5.000000e-01, !dbg !278
  %458 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !279
  %459 = tail call float @llvm.nvvm.floor.ftz.f(float %457), !dbg !279
  %460 = tail call float @llvm.nvvm.floor.f(float %457), !dbg !279
  %461 = shufflevector <16 x i1> %277, <16 x i1> poison, <2 x i32> <i32 1, i32 0>, !dbg !280
  %462 = zext <2 x i1> %461 to <2 x i8>, !dbg !280
  %463 = shufflevector <16 x i1> %173, <16 x i1> poison, <2 x i32> <i32 1, i32 0>, !dbg !281
  %464 = sext <2 x i1> %463 to <2 x i8>, !dbg !281
  %465 = add nsw <2 x i8> %464, %462, !dbg !282
  %466 = sitofp <2 x i8> %465 to <2 x float>, !dbg !283
  %467 = insertelement <2 x i32> poison, i32 %152, i64 0, !dbg !104
  %468 = insertelement <2 x i32> %467, i32 %458, i64 1, !dbg !104
  %469 = icmp eq <2 x i32> %468, zeroinitializer, !dbg !104
  %470 = insertelement <2 x float> poison, float %276, i64 0, !dbg !104
  %471 = insertelement <2 x float> %470, float %460, i64 1, !dbg !104
  %472 = insertelement <2 x float> poison, float %275, i64 0, !dbg !104
  %473 = insertelement <2 x float> %472, float %459, i64 1, !dbg !104
  %474 = select <2 x i1> %469, <2 x float> %471, <2 x float> %473, !dbg !104
  %475 = fmul <2 x float> %474, %466, !dbg !284
  %476 = fcmp ogt <2 x float> %475, %123, !dbg !285
  %477 = fcmp uno <2 x float> %475, zeroinitializer, !dbg !287
  %478 = or <2 x i1> %476, %477, !dbg !288
  %479 = select <2 x i1> %478, <2 x float> %475, <2 x float> %123, !dbg !289
  %480 = fcmp olt <2 x float> %479, %125, !dbg !290
  %481 = fcmp uno <2 x float> %479, zeroinitializer, !dbg !292
  %482 = or <2 x i1> %480, %481, !dbg !293
  %483 = select <2 x i1> %482, <2 x float> %479, <2 x float> %125, !dbg !294
  %484 = fadd <2 x float> %483, %127, !dbg !295
  %485 = fmul <2 x float> %484, %129, !dbg !296
  %486 = extractelement <2 x float> %485, i64 0, !dbg !297
  %487 = fadd float %454, %486, !dbg !297
  %488 = extractelement <2 x float> %485, i64 1, !dbg !298
  %489 = fadd float %487, %488, !dbg !298
  %490 = fmul float %489, 6.250000e-02, !dbg !299
  %491 = sext i32 %13 to i64, !dbg !300
  %492 = getelementptr float, ptr addrspace(1) %5, i64 %491, !dbg !300
  %493 = icmp eq i32 %11, 0, !dbg !301
  %494 = bitcast float %490 to i32, !dbg !301
  %495 = and i1 %493, %14, !dbg !301
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %494, ptr addrspace(1) %492, i1 %495) #2, !dbg !301
  ret void, !dbg !302
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmuga4wmkerlzwfk6nezx62fkjvxv47andbovgkcqzjyfbzqdtx2.py", directory: "inductor_cache/mu")
!4 = !{ptr @triton_poi_fused_abs_add_avg_pool2d_clamp_div_floor_mul_sign_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_abs_add_avg_pool2d_clamp_div_floor_mul_sign_sub_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_abs_add_avg_pool2d_clamp_div_floor_mul_sign_sub_0", linkageName: "triton_poi_fused_abs_add_avg_pool2d_clamp_div_floor_mul_sign_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 38, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 20, scope: !7)
!21 = !DILocation(line: 32, column: 20, scope: !7)
!22 = !DILocation(line: 34, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 31, scope: !7)
!24 = !DILocation(line: 34, column: 43, scope: !7)
!25 = !DILocation(line: 35, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 31, scope: !7)
!27 = !DILocation(line: 35, column: 43, scope: !7)
!28 = !DILocation(line: 36, column: 35, scope: !7)
!29 = !DILocation(line: 36, column: 31, scope: !7)
!30 = !DILocation(line: 36, column: 43, scope: !7)
!31 = !DILocation(line: 37, column: 35, scope: !7)
!32 = !DILocation(line: 37, column: 31, scope: !7)
!33 = !DILocation(line: 37, column: 43, scope: !7)
!34 = !DILocation(line: 38, column: 35, scope: !7)
!35 = !DILocation(line: 38, column: 31, scope: !7)
!36 = !DILocation(line: 38, column: 43, scope: !7)
!37 = !DILocation(line: 39, column: 36, scope: !7)
!38 = !DILocation(line: 39, column: 32, scope: !7)
!39 = !DILocation(line: 39, column: 44, scope: !7)
!40 = !DILocation(line: 40, column: 36, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 44, scope: !7)
!43 = !DILocation(line: 41, column: 36, scope: !7)
!44 = !DILocation(line: 41, column: 32, scope: !7)
!45 = !DILocation(line: 41, column: 44, scope: !7)
!46 = !DILocation(line: 42, column: 36, scope: !7)
!47 = !DILocation(line: 42, column: 32, scope: !7)
!48 = !DILocation(line: 42, column: 44, scope: !7)
!49 = !DILocation(line: 43, column: 37, scope: !7)
!50 = !DILocation(line: 43, column: 32, scope: !7)
!51 = !DILocation(line: 43, column: 45, scope: !7)
!52 = !DILocation(line: 44, column: 37, scope: !7)
!53 = !DILocation(line: 44, column: 32, scope: !7)
!54 = !DILocation(line: 44, column: 45, scope: !7)
!55 = !DILocation(line: 45, column: 37, scope: !7)
!56 = !DILocation(line: 45, column: 32, scope: !7)
!57 = !DILocation(line: 45, column: 45, scope: !7)
!58 = !DILocation(line: 46, column: 37, scope: !7)
!59 = !DILocation(line: 46, column: 32, scope: !7)
!60 = !DILocation(line: 46, column: 45, scope: !7)
!61 = !DILocation(line: 47, column: 37, scope: !7)
!62 = !DILocation(line: 47, column: 32, scope: !7)
!63 = !DILocation(line: 47, column: 45, scope: !7)
!64 = !DILocation(line: 48, column: 37, scope: !7)
!65 = !DILocation(line: 48, column: 32, scope: !7)
!66 = !DILocation(line: 48, column: 45, scope: !7)
!67 = !DILocation(line: 49, column: 18, scope: !7)
!68 = !DILocation(line: 61, column: 28, scope: !7)
!69 = !DILocation(line: 67, column: 20, scope: !7)
!70 = !DILocation(line: 77, column: 28, scope: !7)
!71 = !DILocation(line: 84, column: 20, scope: !7)
!72 = !DILocation(line: 94, column: 28, scope: !7)
!73 = !DILocation(line: 101, column: 20, scope: !7)
!74 = !DILocation(line: 111, column: 28, scope: !7)
!75 = !DILocation(line: 118, column: 20, scope: !7)
!76 = !DILocation(line: 128, column: 28, scope: !7)
!77 = !DILocation(line: 135, column: 21, scope: !7)
!78 = !DILocation(line: 145, column: 29, scope: !7)
!79 = !DILocation(line: 152, column: 22, scope: !7)
!80 = !DILocation(line: 162, column: 29, scope: !7)
!81 = !DILocation(line: 169, column: 22, scope: !7)
!82 = !DILocation(line: 179, column: 29, scope: !7)
!83 = !DILocation(line: 118, column: 15, scope: !84, inlinedAt: !86)
!84 = distinct !DILexicalBlockFile(scope: !7, file: !85, discriminator: 0)
!85 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!86 = !DILocation(line: 164, column: 44, scope: !7)
!87 = !DILocation(line: 110, column: 15, scope: !84, inlinedAt: !88)
!88 = !DILocation(line: 165, column: 44, scope: !7)
!89 = !DILocation(line: 166, column: 22, scope: !7)
!90 = !DILocation(line: 167, column: 22, scope: !7)
!91 = !DILocation(line: 186, column: 22, scope: !7)
!92 = !DILocation(line: 196, column: 29, scope: !7)
!93 = !DILocation(line: 203, column: 22, scope: !7)
!94 = !DILocation(line: 213, column: 29, scope: !7)
!95 = !DILocation(line: 220, column: 22, scope: !7)
!96 = !DILocation(line: 230, column: 29, scope: !7)
!97 = !DILocation(line: 237, column: 22, scope: !7)
!98 = !DILocation(line: 247, column: 29, scope: !7)
!99 = !DILocation(line: 254, column: 22, scope: !7)
!100 = !DILocation(line: 264, column: 29, scope: !7)
!101 = !DILocation(line: 271, column: 22, scope: !7)
!102 = !DILocation(line: 281, column: 29, scope: !7)
!103 = !DILocation(line: 288, column: 22, scope: !7)
!104 = !DILocation(line: 298, column: 29, scope: !7)
!105 = !DILocation(line: 305, column: 22, scope: !7)
!106 = !DILocation(line: 306, column: 22, scope: !7)
!107 = !DILocation(line: 309, column: 22, scope: !7)
!108 = !DILocation(line: 58, column: 24, scope: !7)
!109 = !DILocation(line: 60, column: 20, scope: !7)
!110 = !DILocation(line: 75, column: 24, scope: !7)
!111 = !DILocation(line: 76, column: 20, scope: !7)
!112 = !DILocation(line: 92, column: 24, scope: !7)
!113 = !DILocation(line: 93, column: 20, scope: !7)
!114 = !DILocation(line: 109, column: 24, scope: !7)
!115 = !DILocation(line: 110, column: 20, scope: !7)
!116 = !DILocation(line: 126, column: 24, scope: !7)
!117 = !DILocation(line: 127, column: 20, scope: !7)
!118 = !DILocation(line: 143, column: 25, scope: !7)
!119 = !DILocation(line: 144, column: 22, scope: !7)
!120 = !DILocation(line: 160, column: 25, scope: !7)
!121 = !DILocation(line: 161, column: 22, scope: !7)
!122 = !DILocation(line: 177, column: 25, scope: !7)
!123 = !DILocation(line: 178, column: 22, scope: !7)
!124 = !DILocation(line: 157, column: 23, scope: !7)
!125 = !DILocation(line: 194, column: 25, scope: !7)
!126 = !DILocation(line: 195, column: 22, scope: !7)
!127 = !DILocation(line: 211, column: 25, scope: !7)
!128 = !DILocation(line: 212, column: 22, scope: !7)
!129 = !DILocation(line: 191, column: 23, scope: !7)
!130 = !DILocation(line: 228, column: 25, scope: !7)
!131 = !DILocation(line: 229, column: 22, scope: !7)
!132 = !DILocation(line: 245, column: 25, scope: !7)
!133 = !DILocation(line: 246, column: 22, scope: !7)
!134 = !DILocation(line: 225, column: 23, scope: !7)
!135 = !DILocation(line: 262, column: 25, scope: !7)
!136 = !DILocation(line: 263, column: 22, scope: !7)
!137 = !DILocation(line: 279, column: 25, scope: !7)
!138 = !DILocation(line: 280, column: 22, scope: !7)
!139 = !DILocation(line: 259, column: 23, scope: !7)
!140 = !DILocation(line: 296, column: 25, scope: !7)
!141 = !DILocation(line: 297, column: 22, scope: !7)
!142 = !DILocation(line: 307, column: 20, scope: !7)
!143 = !DILocation(line: 72, column: 21, scope: !7)
!144 = !DILocation(line: 70, column: 21, scope: !7)
!145 = !DILocation(line: 73, column: 20, scope: !7)
!146 = !DILocation(line: 74, column: 21, scope: !7)
!147 = !DILocation(line: 78, column: 20, scope: !7)
!148 = !DILocation(line: 121, column: 29, scope: !84, inlinedAt: !149)
!149 = !DILocation(line: 63, column: 42, scope: !7)
!150 = !DILocation(line: 118, column: 15, scope: !84, inlinedAt: !149)
!151 = !DILocation(line: 120, column: 21, scope: !84, inlinedAt: !152)
!152 = !DILocation(line: 79, column: 42, scope: !7)
!153 = !DILocation(line: 120, column: 16, scope: !84, inlinedAt: !149)
!154 = !DILocation(line: 110, column: 15, scope: !84, inlinedAt: !155)
!155 = !DILocation(line: 64, column: 42, scope: !7)
!156 = !DILocation(line: 112, column: 21, scope: !84, inlinedAt: !155)
!157 = !DILocation(line: 112, column: 16, scope: !84, inlinedAt: !155)
!158 = !DILocation(line: 113, column: 29, scope: !84, inlinedAt: !155)
!159 = !DILocation(line: 65, column: 20, scope: !7)
!160 = !DILocation(line: 66, column: 20, scope: !7)
!161 = !DILocation(line: 121, column: 29, scope: !84, inlinedAt: !152)
!162 = !DILocation(line: 118, column: 15, scope: !84, inlinedAt: !152)
!163 = !DILocation(line: 120, column: 16, scope: !84, inlinedAt: !152)
!164 = !DILocation(line: 110, column: 15, scope: !84, inlinedAt: !165)
!165 = !DILocation(line: 80, column: 42, scope: !7)
!166 = !DILocation(line: 112, column: 21, scope: !84, inlinedAt: !165)
!167 = !DILocation(line: 112, column: 16, scope: !84, inlinedAt: !165)
!168 = !DILocation(line: 113, column: 29, scope: !84, inlinedAt: !165)
!169 = !DILocation(line: 81, column: 20, scope: !7)
!170 = !DILocation(line: 82, column: 20, scope: !7)
!171 = !DILocation(line: 83, column: 20, scope: !7)
!172 = !DILocation(line: 140, column: 23, scope: !7)
!173 = !DILocation(line: 138, column: 23, scope: !7)
!174 = !DILocation(line: 141, column: 22, scope: !7)
!175 = !DILocation(line: 142, column: 23, scope: !7)
!176 = !DILocation(line: 146, column: 22, scope: !7)
!177 = !DILocation(line: 118, column: 15, scope: !84, inlinedAt: !178)
!178 = !DILocation(line: 147, column: 44, scope: !7)
!179 = !DILocation(line: 120, column: 21, scope: !84, inlinedAt: !178)
!180 = !DILocation(line: 120, column: 16, scope: !84, inlinedAt: !178)
!181 = !DILocation(line: 121, column: 29, scope: !84, inlinedAt: !178)
!182 = !DILocation(line: 113, column: 29, scope: !84, inlinedAt: !183)
!183 = !DILocation(line: 97, column: 42, scope: !7)
!184 = !DILocation(line: 112, column: 21, scope: !84, inlinedAt: !183)
!185 = !DILocation(line: 110, column: 15, scope: !84, inlinedAt: !186)
!186 = !DILocation(line: 148, column: 44, scope: !7)
!187 = !DILocation(line: 112, column: 16, scope: !84, inlinedAt: !183)
!188 = !DILocation(line: 98, column: 20, scope: !7)
!189 = !DILocation(line: 99, column: 20, scope: !7)
!190 = !DILocation(line: 100, column: 20, scope: !7)
!191 = !DILocation(line: 113, column: 29, scope: !84, inlinedAt: !192)
!192 = !DILocation(line: 114, column: 42, scope: !7)
!193 = !DILocation(line: 112, column: 21, scope: !84, inlinedAt: !192)
!194 = !DILocation(line: 112, column: 16, scope: !84, inlinedAt: !192)
!195 = !DILocation(line: 115, column: 20, scope: !7)
!196 = !DILocation(line: 116, column: 20, scope: !7)
!197 = !DILocation(line: 117, column: 20, scope: !7)
!198 = !DILocation(line: 113, column: 29, scope: !84, inlinedAt: !199)
!199 = !DILocation(line: 131, column: 42, scope: !7)
!200 = !DILocation(line: 112, column: 21, scope: !84, inlinedAt: !199)
!201 = !DILocation(line: 112, column: 16, scope: !84, inlinedAt: !199)
!202 = !DILocation(line: 132, column: 20, scope: !7)
!203 = !DILocation(line: 133, column: 20, scope: !7)
!204 = !DILocation(line: 134, column: 20, scope: !7)
!205 = !DILocation(line: 113, column: 29, scope: !84, inlinedAt: !186)
!206 = !DILocation(line: 112, column: 21, scope: !84, inlinedAt: !186)
!207 = !DILocation(line: 112, column: 16, scope: !84, inlinedAt: !186)
!208 = !DILocation(line: 149, column: 22, scope: !7)
!209 = !DILocation(line: 150, column: 22, scope: !7)
!210 = !DILocation(line: 151, column: 22, scope: !7)
!211 = !DILocation(line: 155, column: 23, scope: !7)
!212 = !DILocation(line: 158, column: 22, scope: !7)
!213 = !DILocation(line: 159, column: 23, scope: !7)
!214 = !DILocation(line: 163, column: 22, scope: !7)
!215 = !DILocation(line: 120, column: 21, scope: !84, inlinedAt: !86)
!216 = !DILocation(line: 120, column: 16, scope: !84, inlinedAt: !86)
!217 = !DILocation(line: 121, column: 29, scope: !84, inlinedAt: !86)
!218 = !DILocation(line: 112, column: 21, scope: !84, inlinedAt: !88)
!219 = !DILocation(line: 112, column: 16, scope: !84, inlinedAt: !88)
!220 = !DILocation(line: 113, column: 29, scope: !84, inlinedAt: !88)
!221 = !DILocation(line: 168, column: 22, scope: !7)
!222 = !DILocation(line: 185, column: 22, scope: !7)
!223 = !DILocation(line: 189, column: 23, scope: !7)
!224 = !DILocation(line: 192, column: 22, scope: !7)
!225 = !DILocation(line: 193, column: 23, scope: !7)
!226 = !DILocation(line: 197, column: 22, scope: !7)
!227 = !DILocation(line: 118, column: 15, scope: !84, inlinedAt: !228)
!228 = !DILocation(line: 198, column: 44, scope: !7)
!229 = !DILocation(line: 120, column: 21, scope: !84, inlinedAt: !228)
!230 = !DILocation(line: 120, column: 16, scope: !84, inlinedAt: !228)
!231 = !DILocation(line: 121, column: 29, scope: !84, inlinedAt: !228)
!232 = !DILocation(line: 110, column: 15, scope: !84, inlinedAt: !233)
!233 = !DILocation(line: 199, column: 44, scope: !7)
!234 = !DILocation(line: 112, column: 21, scope: !84, inlinedAt: !233)
!235 = !DILocation(line: 112, column: 16, scope: !84, inlinedAt: !233)
!236 = !DILocation(line: 113, column: 29, scope: !84, inlinedAt: !233)
!237 = !DILocation(line: 200, column: 22, scope: !7)
!238 = !DILocation(line: 201, column: 22, scope: !7)
!239 = !DILocation(line: 202, column: 22, scope: !7)
!240 = !DILocation(line: 219, column: 22, scope: !7)
!241 = !DILocation(line: 223, column: 23, scope: !7)
!242 = !DILocation(line: 226, column: 22, scope: !7)
!243 = !DILocation(line: 227, column: 23, scope: !7)
!244 = !DILocation(line: 231, column: 22, scope: !7)
!245 = !DILocation(line: 118, column: 15, scope: !84, inlinedAt: !246)
!246 = !DILocation(line: 232, column: 44, scope: !7)
!247 = !DILocation(line: 120, column: 21, scope: !84, inlinedAt: !246)
!248 = !DILocation(line: 120, column: 16, scope: !84, inlinedAt: !246)
!249 = !DILocation(line: 121, column: 29, scope: !84, inlinedAt: !246)
!250 = !DILocation(line: 110, column: 15, scope: !84, inlinedAt: !251)
!251 = !DILocation(line: 233, column: 44, scope: !7)
!252 = !DILocation(line: 112, column: 21, scope: !84, inlinedAt: !251)
!253 = !DILocation(line: 112, column: 16, scope: !84, inlinedAt: !251)
!254 = !DILocation(line: 113, column: 29, scope: !84, inlinedAt: !251)
!255 = !DILocation(line: 234, column: 22, scope: !7)
!256 = !DILocation(line: 235, column: 22, scope: !7)
!257 = !DILocation(line: 236, column: 22, scope: !7)
!258 = !DILocation(line: 253, column: 22, scope: !7)
!259 = !DILocation(line: 257, column: 23, scope: !7)
!260 = !DILocation(line: 260, column: 22, scope: !7)
!261 = !DILocation(line: 261, column: 23, scope: !7)
!262 = !DILocation(line: 265, column: 22, scope: !7)
!263 = !DILocation(line: 118, column: 15, scope: !84, inlinedAt: !264)
!264 = !DILocation(line: 266, column: 44, scope: !7)
!265 = !DILocation(line: 120, column: 21, scope: !84, inlinedAt: !264)
!266 = !DILocation(line: 120, column: 16, scope: !84, inlinedAt: !264)
!267 = !DILocation(line: 121, column: 29, scope: !84, inlinedAt: !264)
!268 = !DILocation(line: 110, column: 15, scope: !84, inlinedAt: !269)
!269 = !DILocation(line: 267, column: 44, scope: !7)
!270 = !DILocation(line: 112, column: 21, scope: !84, inlinedAt: !269)
!271 = !DILocation(line: 112, column: 16, scope: !84, inlinedAt: !269)
!272 = !DILocation(line: 113, column: 29, scope: !84, inlinedAt: !269)
!273 = !DILocation(line: 268, column: 22, scope: !7)
!274 = !DILocation(line: 269, column: 22, scope: !7)
!275 = !DILocation(line: 270, column: 22, scope: !7)
!276 = !DILocation(line: 287, column: 22, scope: !7)
!277 = !DILocation(line: 313, column: 25, scope: !7)
!278 = !DILocation(line: 314, column: 22, scope: !7)
!279 = !DILocation(line: 315, column: 29, scope: !7)
!280 = !DILocation(line: 291, column: 23, scope: !7)
!281 = !DILocation(line: 293, column: 23, scope: !7)
!282 = !DILocation(line: 294, column: 22, scope: !7)
!283 = !DILocation(line: 295, column: 23, scope: !7)
!284 = !DILocation(line: 299, column: 22, scope: !7)
!285 = !DILocation(line: 118, column: 15, scope: !84, inlinedAt: !286)
!286 = !DILocation(line: 300, column: 44, scope: !7)
!287 = !DILocation(line: 120, column: 21, scope: !84, inlinedAt: !286)
!288 = !DILocation(line: 120, column: 16, scope: !84, inlinedAt: !286)
!289 = !DILocation(line: 121, column: 29, scope: !84, inlinedAt: !286)
!290 = !DILocation(line: 110, column: 15, scope: !84, inlinedAt: !291)
!291 = !DILocation(line: 301, column: 44, scope: !7)
!292 = !DILocation(line: 112, column: 21, scope: !84, inlinedAt: !291)
!293 = !DILocation(line: 112, column: 16, scope: !84, inlinedAt: !291)
!294 = !DILocation(line: 113, column: 29, scope: !84, inlinedAt: !291)
!295 = !DILocation(line: 302, column: 22, scope: !7)
!296 = !DILocation(line: 303, column: 22, scope: !7)
!297 = !DILocation(line: 304, column: 22, scope: !7)
!298 = !DILocation(line: 321, column: 22, scope: !7)
!299 = !DILocation(line: 323, column: 22, scope: !7)
!300 = !DILocation(line: 324, column: 25, scope: !7)
!301 = !DILocation(line: 324, column: 38, scope: !7)
!302 = !DILocation(line: 324, column: 4, scope: !7)
