; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_leaky_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %9, 128, !dbg !12
  %11 = shl i32 %8, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %7, %9, !dbg !13
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %12, !dbg !13
  %16 = icmp slt i32 %13, 256, !dbg !14
  %17 = icmp slt i32 %14, 256, !dbg !14
  %18 = icmp slt i32 %15, 256, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 2, !dbg !16
  %21 = or disjoint i32 %20, 1, !dbg !17
  %22 = or disjoint i32 %20, 2, !dbg !17
  %23 = or disjoint i32 %20, 3, !dbg !17
  %24 = icmp slt i32 %20, 4, !dbg !18
  %25 = icmp slt i32 %21, 4, !dbg !18
  %26 = icmp slt i32 %22, 4, !dbg !18
  %27 = icmp slt i32 %23, 4, !dbg !18
  %28 = sdiv i32 %13, 2, !dbg !19
  %29 = sdiv i32 %14, 2, !dbg !19
  %30 = add i32 %13, %19, !dbg !20
  %31 = shl i32 %30, 2, !dbg !20
  %32 = add i32 %14, %19, !dbg !20
  %33 = shl i32 %32, 2, !dbg !20
  %34 = sext i32 %31 to i64, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !21
  %36 = sext i32 %33 to i64, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !21
  %38 = and i1 %24, %16, !dbg !22
  %39 = and i1 %24, %17, !dbg !22
  %40 = and i1 %24, %18, !dbg !22
  %41 = and i1 %18, %25, !dbg !22
  %42 = and i1 %18, %26, !dbg !22
  %43 = and i1 %18, %27, !dbg !22
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %38) #2, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !23
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !23
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !23
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %39) #2, !dbg !23
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !23
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !23
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !23
  %54 = sext i32 %28 to i64, !dbg !24
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !24
  %56 = sext i32 %29 to i64, !dbg !24
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !24
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %16) #2, !dbg !25
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %17) #2, !dbg !25
  %60 = insertelement <8 x i32> poison, i32 %53, i64 0, !dbg !23
  %61 = insertelement <8 x i32> %60, i32 %52, i64 1, !dbg !23
  %62 = insertelement <8 x i32> %61, i32 %51, i64 2, !dbg !23
  %63 = insertelement <8 x i32> %62, i32 %50, i64 3, !dbg !23
  %64 = insertelement <8 x i32> %63, i32 %48, i64 4, !dbg !23
  %65 = insertelement <8 x i32> %64, i32 %47, i64 5, !dbg !23
  %66 = insertelement <8 x i32> %65, i32 %46, i64 6, !dbg !23
  %67 = insertelement <8 x i32> %66, i32 %45, i64 7, !dbg !23
  %68 = bitcast <8 x i32> %67 to <8 x float>, !dbg !23
  %69 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !25
  %70 = insertelement <2 x i32> %69, i32 %58, i64 1, !dbg !25
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !25
  %72 = shufflevector <2 x float> %71, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !25
  %73 = fadd <8 x float> %72, %68, !dbg !26
  %74 = fcmp ogt <8 x float> %73, zeroinitializer, !dbg !27
  %75 = extractelement <8 x float> %73, i64 7, !dbg !28
  %76 = fmul float %75, 0x3FC99999A0000000, !dbg !29
  %77 = extractelement <8 x float> %73, i64 6, !dbg !28
  %78 = fmul float %77, 0x3FC99999A0000000, !dbg !29
  %79 = extractelement <8 x float> %73, i64 5, !dbg !28
  %80 = fmul float %79, 0x3FC99999A0000000, !dbg !29
  %81 = extractelement <8 x float> %73, i64 4, !dbg !28
  %82 = fmul float %81, 0x3FC99999A0000000, !dbg !29
  %83 = extractelement <8 x float> %73, i64 3, !dbg !28
  %84 = fmul float %83, 0x3FC99999A0000000, !dbg !29
  %85 = extractelement <8 x float> %73, i64 2, !dbg !28
  %86 = fmul float %85, 0x3FC99999A0000000, !dbg !29
  %87 = extractelement <8 x float> %73, i64 1, !dbg !28
  %88 = fmul float %87, 0x3FC99999A0000000, !dbg !29
  %89 = extractelement <8 x float> %73, i64 0, !dbg !28
  %90 = fmul float %89, 0x3FC99999A0000000, !dbg !29
  %91 = extractelement <8 x i1> %74, i64 7, !dbg !30
  %92 = select i1 %91, float %75, float %76, !dbg !28
  %93 = extractelement <8 x i1> %74, i64 6, !dbg !30
  %94 = select i1 %93, float %77, float %78, !dbg !28
  %95 = extractelement <8 x i1> %74, i64 5, !dbg !30
  %96 = select i1 %95, float %79, float %80, !dbg !28
  %97 = extractelement <8 x i1> %74, i64 4, !dbg !30
  %98 = select i1 %97, float %81, float %82, !dbg !28
  %99 = extractelement <8 x i1> %74, i64 3, !dbg !30
  %100 = select i1 %99, float %83, float %84, !dbg !28
  %101 = extractelement <8 x i1> %74, i64 2, !dbg !30
  %102 = select i1 %101, float %85, float %86, !dbg !28
  %103 = extractelement <8 x i1> %74, i64 1, !dbg !30
  %104 = select i1 %103, float %87, float %88, !dbg !28
  %105 = extractelement <8 x i1> %74, i64 0, !dbg !30
  %106 = select i1 %105, float %89, float %90, !dbg !28
  %107 = shl i32 %19, 3, !dbg !31
  %108 = shl i32 %21, 1, !dbg !31
  %109 = shl i32 %22, 1, !dbg !31
  %110 = shl i32 %23, 1, !dbg !31
  %111 = shl i32 %15, 2, !dbg !32
  %112 = add i32 %111, %107, !dbg !33
  %113 = add i32 %108, %111, !dbg !33
  %114 = add i32 %109, %111, !dbg !33
  %115 = add i32 %110, %111, !dbg !33
  %116 = sext i32 %112 to i64, !dbg !34
  %117 = getelementptr i1, ptr addrspace(1) %2, i64 %116, !dbg !34
  %118 = sext i32 %113 to i64, !dbg !34
  %119 = getelementptr i1, ptr addrspace(1) %2, i64 %118, !dbg !34
  %120 = sext i32 %114 to i64, !dbg !34
  %121 = getelementptr i1, ptr addrspace(1) %2, i64 %120, !dbg !34
  %122 = sext i32 %115 to i64, !dbg !34
  %123 = getelementptr i1, ptr addrspace(1) %2, i64 %122, !dbg !34
  %124 = zext i1 %91 to i8, !dbg !30
  %125 = zext i1 %93 to i8, !dbg !30
  %126 = zext i1 %95 to i8, !dbg !30
  %127 = zext i1 %97 to i8, !dbg !30
  %128 = zext i1 %99 to i8, !dbg !30
  %129 = zext i1 %101 to i8, !dbg !30
  %130 = zext i1 %103 to i8, !dbg !30
  %131 = zext i1 %105 to i8, !dbg !30
  %132 = zext nneg i32 %9 to i64, !dbg !30
  %133 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %132, !dbg !30
  %134 = insertelement <1 x i8> poison, i8 %124, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %133, <1 x i8> %134, i1 true) #2, !dbg !30
  %135 = zext nneg i32 %10 to i64, !dbg !30
  %136 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %135, !dbg !30
  %137 = insertelement <1 x i8> poison, i8 %128, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %136, <1 x i8> %137, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %138 = zext nneg i32 %12 to i64, !dbg !30
  %139 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %138, !dbg !30
  %140 = load <16 x i1>, ptr addrspace(3) %139, align 2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %141 = insertelement <1 x i8> poison, i8 %125, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %133, <1 x i8> %141, i1 true) #2, !dbg !30
  %142 = insertelement <1 x i8> poison, i8 %129, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %136, <1 x i8> %142, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %143 = load <16 x i1>, ptr addrspace(3) %139, align 2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %144 = insertelement <1 x i8> poison, i8 %126, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %133, <1 x i8> %144, i1 true) #2, !dbg !30
  %145 = insertelement <1 x i8> poison, i8 %130, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %136, <1 x i8> %145, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %146 = load <16 x i1>, ptr addrspace(3) %139, align 2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %147 = insertelement <1 x i8> poison, i8 %127, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %133, <1 x i8> %147, i1 true) #2, !dbg !30
  %148 = insertelement <1 x i8> poison, i8 %131, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %136, <1 x i8> %148, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %149 = load <16 x i1>, ptr addrspace(3) %139, align 2, !dbg !30
  %150 = shufflevector <16 x i1> %140, <16 x i1> poison, <2 x i32> <i32 0, i32 8>, !dbg !30
  %151 = shufflevector <16 x i1> %143, <16 x i1> poison, <2 x i32> <i32 0, i32 8>, !dbg !30
  %152 = shufflevector <16 x i1> %146, <16 x i1> poison, <2 x i32> <i32 0, i32 8>, !dbg !30
  %153 = shufflevector <16 x i1> %149, <16 x i1> poison, <2 x i32> <i32 0, i32 8>, !dbg !30
  %154 = zext <2 x i1> %150 to <2 x i8>, !dbg !30
  %155 = bitcast <2 x i8> %154 to i16, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %155, ptr addrspace(1) %117, i1 %40) #2, !dbg !30
  %156 = zext <2 x i1> %151 to <2 x i8>, !dbg !30
  %157 = bitcast <2 x i8> %156 to i16, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %157, ptr addrspace(1) %119, i1 %41) #2, !dbg !30
  %158 = zext <2 x i1> %152 to <2 x i8>, !dbg !30
  %159 = bitcast <2 x i8> %158 to i16, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %159, ptr addrspace(1) %121, i1 %42) #2, !dbg !30
  %160 = zext <2 x i1> %153 to <2 x i8>, !dbg !30
  %161 = bitcast <2 x i8> %160 to i16, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %161, ptr addrspace(1) %123, i1 %43) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %162 = bitcast float %92 to i32, !dbg !36
  %163 = bitcast float %94 to i32, !dbg !36
  %164 = bitcast float %96 to i32, !dbg !36
  %165 = bitcast float %98 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %162, i32 %163, i32 %164, i32 %165, ptr addrspace(1) %35, i1 %38) #2, !dbg !36
  %166 = bitcast float %100 to i32, !dbg !36
  %167 = bitcast float %102 to i32, !dbg !36
  %168 = bitcast float %104 to i32, !dbg !36
  %169 = bitcast float %106 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %166, i32 %167, i32 %168, i32 %169, ptr addrspace(1) %37, i1 %39) #2, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfx3fj4mahnh6ucogs7gjuvf353mnz6fetibkrjuo7ebao2hetuj.py", directory: "inductor_cache/fx")
!4 = !{ptr @triton_poi_fused_leaky_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_leaky_relu_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_leaky_relu_7", linkageName: "triton_poi_fused_leaky_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 34, scope: !7)
!22 = !DILocation(line: 32, column: 54, scope: !7)
!23 = !DILocation(line: 32, column: 46, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 39, column: 32, scope: !7)
!29 = !DILocation(line: 38, column: 18, scope: !7)
!30 = !DILocation(line: 40, column: 50, scope: !7)
!31 = !DILocation(line: 40, column: 32, scope: !7)
!32 = !DILocation(line: 40, column: 39, scope: !7)
!33 = !DILocation(line: 40, column: 37, scope: !7)
!34 = !DILocation(line: 40, column: 25, scope: !7)
!35 = !DILocation(line: 41, column: 4, scope: !7)
!36 = !DILocation(line: 42, column: 46, scope: !7)
!37 = !DILocation(line: 42, column: 4, scope: !7)
