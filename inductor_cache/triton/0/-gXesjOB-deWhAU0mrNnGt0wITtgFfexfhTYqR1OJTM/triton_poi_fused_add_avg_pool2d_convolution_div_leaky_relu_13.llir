; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_avg_pool2d_convolution_div_leaky_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 3, !dbg !12
  %11 = and i32 %10, 1016, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %13, 512, !dbg !12
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %15, 4, !dbg !13
  %17 = or disjoint i32 %8, %13, !dbg !13
  %18 = or disjoint i32 %8, %14, !dbg !13
  %.frozen = freeze i32 %15, !dbg !14
  %19 = sdiv i32 %.frozen, 128, !dbg !14
  %20 = mul i32 %19, 128, !dbg !15
  %.decomposed = sub i32 %.frozen, %20, !dbg !15
  %21 = srem i32 %16, 128, !dbg !15
  %22 = srem i32 %19, 128, !dbg !16
  %23 = sdiv i32 %15, 16384, !dbg !17
  %24 = shl nsw i32 %22, 8, !dbg !18
  %25 = shl i32 %23, 16, !dbg !19
  %26 = add i32 %24, %25, !dbg !20
  %27 = add i32 %26, %.decomposed, !dbg !21
  %28 = add i32 %26, %21, !dbg !21
  %29 = sext i32 %27 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !22
  %31 = sext i32 %28 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !22
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #2, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !23
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #2, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !23
  %43 = or disjoint i32 %26, 128, !dbg !24
  %44 = add nsw i32 %43, %.decomposed, !dbg !25
  %45 = add nsw i32 %43, %21, !dbg !25
  %46 = sext i32 %44 to i64, !dbg !26
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !26
  %48 = sext i32 %45 to i64, !dbg !26
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !26
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #2, !dbg !27
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !27
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #2, !dbg !27
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !27
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !27
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !27
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !27
  %60 = add i32 %26, 32768, !dbg !28
  %61 = add i32 %60, %.decomposed, !dbg !29
  %62 = add i32 %60, %21, !dbg !29
  %63 = sext i32 %61 to i64, !dbg !30
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !30
  %65 = sext i32 %62 to i64, !dbg !30
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !30
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #2, !dbg !31
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !31
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !31
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !31
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !31
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #2, !dbg !31
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !31
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !31
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !31
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !31
  %77 = add i32 %26, 32896, !dbg !32
  %78 = add nsw i32 %77, %.decomposed, !dbg !33
  %79 = add nsw i32 %77, %21, !dbg !33
  %80 = sext i32 %78 to i64, !dbg !34
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !34
  %82 = sext i32 %79 to i64, !dbg !34
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !34
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 true) #2, !dbg !35
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !35
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !35
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !35
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !35
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %83, i1 true) #2, !dbg !35
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !35
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !35
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !35
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !35
  %94 = sext i32 %15 to i64, !dbg !36
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !36
  %96 = sext i32 %16 to i64, !dbg !36
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !36
  %98 = sext i32 %17 to i64, !dbg !36
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !36
  %100 = sext i32 %18 to i64, !dbg !36
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !36
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %95, i1 true) #2, !dbg !37
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !37
  %104 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !37
  %105 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !37
  %106 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !37
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %97, i1 true) #2, !dbg !37
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !37
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !37
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !37
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !37
  %112 = sext i32 %.decomposed to i64, !dbg !38
  %113 = getelementptr float, ptr addrspace(1) %2, i64 %112, !dbg !38
  %114 = sext i32 %21 to i64, !dbg !38
  %115 = getelementptr float, ptr addrspace(1) %2, i64 %114, !dbg !38
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %113, i1 true) #2, !dbg !39
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !39
  %118 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !39
  %119 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !39
  %120 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !39
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %115, i1 true) #2, !dbg !39
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !39
  %123 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !39
  %124 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !39
  %125 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !39
  %126 = zext nneg i32 %11 to i64, !dbg !40
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %126, !dbg !40
  %128 = getelementptr inbounds i8, ptr addrspace(3) %127, i64 16, !dbg !40
  %129 = zext nneg i32 %13 to i64, !dbg !40
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %129, !dbg !40
  %131 = zext nneg i32 %14 to i64, !dbg !40
  %132 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %131, !dbg !40
  %133 = getelementptr inbounds i8, ptr addrspace(3) %130, i64 4, !dbg !40
  %134 = getelementptr inbounds i8, ptr addrspace(3) %130, i64 8, !dbg !40
  %135 = getelementptr inbounds i8, ptr addrspace(3) %130, i64 12, !dbg !40
  %136 = getelementptr i1, ptr addrspace(1) %3, i64 %94, !dbg !41
  %137 = insertelement <4 x i32> poison, i32 %34, i64 0, !dbg !23
  %138 = insertelement <4 x i32> %137, i32 %35, i64 1, !dbg !23
  %139 = insertelement <4 x i32> %138, i32 %36, i64 2, !dbg !23
  %140 = insertelement <4 x i32> %139, i32 %37, i64 3, !dbg !23
  %141 = bitcast <4 x i32> %140 to <4 x float>, !dbg !23
  %142 = insertelement <4 x i32> poison, i32 %51, i64 0, !dbg !27
  %143 = insertelement <4 x i32> %142, i32 %52, i64 1, !dbg !27
  %144 = insertelement <4 x i32> %143, i32 %53, i64 2, !dbg !27
  %145 = insertelement <4 x i32> %144, i32 %54, i64 3, !dbg !27
  %146 = bitcast <4 x i32> %145 to <4 x float>, !dbg !27
  %147 = insertelement <4 x i32> poison, i32 %68, i64 0, !dbg !31
  %148 = insertelement <4 x i32> %147, i32 %69, i64 1, !dbg !31
  %149 = insertelement <4 x i32> %148, i32 %70, i64 2, !dbg !31
  %150 = insertelement <4 x i32> %149, i32 %71, i64 3, !dbg !31
  %151 = bitcast <4 x i32> %150 to <4 x float>, !dbg !31
  %152 = insertelement <4 x i32> poison, i32 %85, i64 0, !dbg !35
  %153 = insertelement <4 x i32> %152, i32 %86, i64 1, !dbg !35
  %154 = insertelement <4 x i32> %153, i32 %87, i64 2, !dbg !35
  %155 = insertelement <4 x i32> %154, i32 %88, i64 3, !dbg !35
  %156 = bitcast <4 x i32> %155 to <4 x float>, !dbg !35
  %157 = insertelement <4 x i32> poison, i32 %103, i64 0, !dbg !37
  %158 = insertelement <4 x i32> %157, i32 %104, i64 1, !dbg !37
  %159 = insertelement <4 x i32> %158, i32 %105, i64 2, !dbg !37
  %160 = insertelement <4 x i32> %159, i32 %106, i64 3, !dbg !37
  %161 = bitcast <4 x i32> %160 to <4 x float>, !dbg !37
  %162 = insertelement <4 x i32> poison, i32 %117, i64 0, !dbg !39
  %163 = insertelement <4 x i32> %162, i32 %118, i64 1, !dbg !39
  %164 = insertelement <4 x i32> %163, i32 %119, i64 2, !dbg !39
  %165 = insertelement <4 x i32> %164, i32 %120, i64 3, !dbg !39
  %166 = bitcast <4 x i32> %165 to <4 x float>, !dbg !39
  %167 = fadd <4 x float> %141, %146, !dbg !42
  %168 = fadd <4 x float> %167, %151, !dbg !43
  %169 = fadd <4 x float> %168, %156, !dbg !44
  %170 = fmul <4 x float> %169, splat (float 2.500000e-01), !dbg !45
  %171 = fadd <4 x float> %161, %166, !dbg !46
  %172 = fadd <4 x float> %170, %171, !dbg !47
  %173 = fmul <4 x float> %172, splat (float 0x3FE6A09E60000000), !dbg !48
  %174 = fcmp ogt <4 x float> %173, zeroinitializer, !dbg !49
  %175 = extractelement <4 x float> %173, i64 0, !dbg !40
  %176 = fmul float %175, 0x3FC99999A0000000, !dbg !50
  %177 = extractelement <4 x float> %173, i64 1, !dbg !40
  %178 = fmul float %177, 0x3FC99999A0000000, !dbg !50
  %179 = extractelement <4 x float> %173, i64 2, !dbg !40
  %180 = fmul float %179, 0x3FC99999A0000000, !dbg !50
  %181 = extractelement <4 x float> %173, i64 3, !dbg !40
  %182 = fmul float %181, 0x3FC99999A0000000, !dbg !50
  %183 = extractelement <4 x i1> %174, i64 0, !dbg !51
  %184 = select i1 %183, float %175, float %176, !dbg !51
  %185 = extractelement <4 x i1> %174, i64 1, !dbg !51
  %186 = select i1 %185, float %177, float %178, !dbg !51
  %187 = extractelement <4 x i1> %174, i64 2, !dbg !51
  %188 = select i1 %187, float %179, float %180, !dbg !51
  %189 = extractelement <4 x i1> %174, i64 3, !dbg !51
  %190 = select i1 %189, float %181, float %182, !dbg !51
  %191 = bitcast float %175 to i32, !dbg !40
  %192 = bitcast float %177 to i32, !dbg !40
  %193 = bitcast float %179 to i32, !dbg !40
  %194 = bitcast float %181 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %127, i32 %191, i32 %192, i32 %193, i32 %194, i1 true) #2, !dbg !40
  %195 = insertelement <4 x i32> poison, i32 %39, i64 0, !dbg !23
  %196 = insertelement <4 x i32> %195, i32 %40, i64 1, !dbg !23
  %197 = insertelement <4 x i32> %196, i32 %41, i64 2, !dbg !23
  %198 = insertelement <4 x i32> %197, i32 %42, i64 3, !dbg !23
  %199 = bitcast <4 x i32> %198 to <4 x float>, !dbg !23
  %200 = insertelement <4 x i32> poison, i32 %56, i64 0, !dbg !27
  %201 = insertelement <4 x i32> %200, i32 %57, i64 1, !dbg !27
  %202 = insertelement <4 x i32> %201, i32 %58, i64 2, !dbg !27
  %203 = insertelement <4 x i32> %202, i32 %59, i64 3, !dbg !27
  %204 = bitcast <4 x i32> %203 to <4 x float>, !dbg !27
  %205 = insertelement <4 x i32> poison, i32 %73, i64 0, !dbg !31
  %206 = insertelement <4 x i32> %205, i32 %74, i64 1, !dbg !31
  %207 = insertelement <4 x i32> %206, i32 %75, i64 2, !dbg !31
  %208 = insertelement <4 x i32> %207, i32 %76, i64 3, !dbg !31
  %209 = bitcast <4 x i32> %208 to <4 x float>, !dbg !31
  %210 = insertelement <4 x i32> poison, i32 %90, i64 0, !dbg !35
  %211 = insertelement <4 x i32> %210, i32 %91, i64 1, !dbg !35
  %212 = insertelement <4 x i32> %211, i32 %92, i64 2, !dbg !35
  %213 = insertelement <4 x i32> %212, i32 %93, i64 3, !dbg !35
  %214 = bitcast <4 x i32> %213 to <4 x float>, !dbg !35
  %215 = insertelement <4 x i32> poison, i32 %108, i64 0, !dbg !37
  %216 = insertelement <4 x i32> %215, i32 %109, i64 1, !dbg !37
  %217 = insertelement <4 x i32> %216, i32 %110, i64 2, !dbg !37
  %218 = insertelement <4 x i32> %217, i32 %111, i64 3, !dbg !37
  %219 = bitcast <4 x i32> %218 to <4 x float>, !dbg !37
  %220 = insertelement <4 x i32> poison, i32 %122, i64 0, !dbg !39
  %221 = insertelement <4 x i32> %220, i32 %123, i64 1, !dbg !39
  %222 = insertelement <4 x i32> %221, i32 %124, i64 2, !dbg !39
  %223 = insertelement <4 x i32> %222, i32 %125, i64 3, !dbg !39
  %224 = bitcast <4 x i32> %223 to <4 x float>, !dbg !39
  %225 = fadd <4 x float> %199, %204, !dbg !42
  %226 = fadd <4 x float> %225, %209, !dbg !43
  %227 = fadd <4 x float> %226, %214, !dbg !44
  %228 = fmul <4 x float> %227, splat (float 2.500000e-01), !dbg !45
  %229 = fadd <4 x float> %219, %224, !dbg !46
  %230 = fadd <4 x float> %228, %229, !dbg !47
  %231 = fmul <4 x float> %230, splat (float 0x3FE6A09E60000000), !dbg !48
  %232 = fcmp ogt <4 x float> %231, zeroinitializer, !dbg !49
  %233 = extractelement <4 x float> %231, i64 0, !dbg !40
  %234 = fmul float %233, 0x3FC99999A0000000, !dbg !50
  %235 = extractelement <4 x float> %231, i64 1, !dbg !40
  %236 = fmul float %235, 0x3FC99999A0000000, !dbg !50
  %237 = extractelement <4 x float> %231, i64 2, !dbg !40
  %238 = fmul float %237, 0x3FC99999A0000000, !dbg !50
  %239 = extractelement <4 x float> %231, i64 3, !dbg !40
  %240 = fmul float %239, 0x3FC99999A0000000, !dbg !50
  %241 = extractelement <4 x i1> %232, i64 0, !dbg !51
  %242 = select i1 %241, float %233, float %234, !dbg !51
  %243 = extractelement <4 x i1> %232, i64 1, !dbg !51
  %244 = select i1 %243, float %235, float %236, !dbg !51
  %245 = extractelement <4 x i1> %232, i64 2, !dbg !51
  %246 = select i1 %245, float %237, float %238, !dbg !51
  %247 = extractelement <4 x i1> %232, i64 3, !dbg !51
  %248 = select i1 %247, float %239, float %240, !dbg !51
  %249 = bitcast float %233 to i32, !dbg !40
  %250 = bitcast float %235 to i32, !dbg !40
  %251 = bitcast float %237 to i32, !dbg !40
  %252 = bitcast float %239 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %128, i32 %249, i32 %250, i32 %251, i32 %252, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %253 = load <4 x i32>, ptr addrspace(3) %132, align 16, !dbg !40
  %.extract = load i32, ptr addrspace(3) %130, align 16, !dbg !40
  %.extract8 = load i32, ptr addrspace(3) %133, align 4, !dbg !40
  %.extract9 = load i32, ptr addrspace(3) %134, align 8, !dbg !40
  %.extract10 = load i32, ptr addrspace(3) %135, align 4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %99, i1 true) #2, !dbg !40
  %.extract11 = extractelement <4 x i32> %253, i64 0, !dbg !40
  %.extract12 = extractelement <4 x i32> %253, i64 1, !dbg !40
  %.extract13 = extractelement <4 x i32> %253, i64 2, !dbg !40
  %.extract14 = extractelement <4 x i32> %253, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %101, i1 true) #2, !dbg !40
  %254 = zext <4 x i1> %174 to <4 x i8>, !dbg !52
  %255 = bitcast <4 x i8> %254 to i32, !dbg !52
  %256 = zext <4 x i1> %232 to <4 x i8>, !dbg !52
  %257 = bitcast <4 x i8> %256 to i32, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %255, i32 %257, ptr addrspace(1) %136, i1 true) #2, !dbg !52
  %258 = getelementptr float, ptr addrspace(1) %4, i64 %98, !dbg !53
  %259 = getelementptr float, ptr addrspace(1) %4, i64 %100, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %260 = bitcast float %184 to i32, !dbg !54
  %261 = bitcast float %186 to i32, !dbg !54
  %262 = bitcast float %188 to i32, !dbg !54
  %263 = bitcast float %190 to i32, !dbg !54
  %264 = bitcast float %242 to i32, !dbg !54
  %265 = bitcast float %244 to i32, !dbg !54
  %266 = bitcast float %246 to i32, !dbg !54
  %267 = bitcast float %248 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %127, i32 %260, i32 %261, i32 %262, i32 %263, i1 true) #2, !dbg !54
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %128, i32 %264, i32 %265, i32 %266, i32 %267, i1 true) #2, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %268 = load <4 x i32>, ptr addrspace(3) %132, align 16, !dbg !54
  %.extract22 = load i32, ptr addrspace(3) %130, align 16, !dbg !54
  %.extract23 = load i32, ptr addrspace(3) %133, align 4, !dbg !54
  %.extract24 = load i32, ptr addrspace(3) %134, align 8, !dbg !54
  %.extract25 = load i32, ptr addrspace(3) %135, align 4, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %258, i1 true) #2, !dbg !54
  %.extract26 = extractelement <4 x i32> %268, i64 0, !dbg !54
  %.extract27 = extractelement <4 x i32> %268, i64 1, !dbg !54
  %.extract28 = extractelement <4 x i32> %268, i64 2, !dbg !54
  %.extract29 = extractelement <4 x i32> %268, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %259, i1 true) #2, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ch6hlhswdu7yrhjedhkub2ly6hscxtohcnrwb57ebl4vmyuyxpxr.py", directory: "inductor_cache/h6")
!4 = !{ptr @triton_poi_fused_add_avg_pool2d_convolution_div_leaky_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_avg_pool2d_convolution_div_leaky_relu_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_avg_pool2d_convolution_div_leaky_relu_13", linkageName: "triton_poi_fused_add_avg_pool2d_convolution_div_leaky_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 50, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 44, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 55, scope: !7)
!24 = !DILocation(line: 29, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 50, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 61, scope: !7)
!28 = !DILocation(line: 30, column: 43, scope: !7)
!29 = !DILocation(line: 30, column: 52, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 63, scope: !7)
!32 = !DILocation(line: 31, column: 43, scope: !7)
!33 = !DILocation(line: 31, column: 52, scope: !7)
!34 = !DILocation(line: 31, column: 30, scope: !7)
!35 = !DILocation(line: 31, column: 63, scope: !7)
!36 = !DILocation(line: 32, column: 34, scope: !7)
!37 = !DILocation(line: 32, column: 39, scope: !7)
!38 = !DILocation(line: 33, column: 31, scope: !7)
!39 = !DILocation(line: 33, column: 36, scope: !7)
!40 = !DILocation(line: 48, column: 40, scope: !7)
!41 = !DILocation(line: 49, column: 25, scope: !7)
!42 = !DILocation(line: 34, column: 18, scope: !7)
!43 = !DILocation(line: 35, column: 18, scope: !7)
!44 = !DILocation(line: 36, column: 18, scope: !7)
!45 = !DILocation(line: 38, column: 18, scope: !7)
!46 = !DILocation(line: 39, column: 19, scope: !7)
!47 = !DILocation(line: 40, column: 19, scope: !7)
!48 = !DILocation(line: 42, column: 20, scope: !7)
!49 = !DILocation(line: 44, column: 20, scope: !7)
!50 = !DILocation(line: 46, column: 20, scope: !7)
!51 = !DILocation(line: 47, column: 35, scope: !7)
!52 = !DILocation(line: 49, column: 37, scope: !7)
!53 = !DILocation(line: 50, column: 25, scope: !7)
!54 = !DILocation(line: 50, column: 37, scope: !7)
!55 = !DILocation(line: 50, column: 4, scope: !7)
