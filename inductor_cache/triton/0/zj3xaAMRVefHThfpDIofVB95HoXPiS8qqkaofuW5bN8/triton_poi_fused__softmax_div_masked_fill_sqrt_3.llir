; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_div_masked_fill_sqrt_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 62, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 64, !dbg !14
  %13 = shl i32 %11, 2, !dbg !15
  %14 = or disjoint i32 %13, 4, !dbg !15
  %15 = sext i32 %13 to i64, !dbg !16
  %16 = getelementptr i1, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = sext i32 %14 to i64, !dbg !16
  %18 = getelementptr i1, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %16, i1 %12) #1, !dbg !17
  %20 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %18, i1 %12) #1, !dbg !17
  %.not = icmp eq i8 %19, 0, !dbg !17
  %.not1 = icmp eq i8 %20, 0, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %12) #1, !dbg !19
  %24 = bitcast i32 %23 to float, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %12) #1, !dbg !19
  %26 = bitcast i32 %25 to float, !dbg !19
  %27 = or disjoint i32 %13, 1, !dbg !20
  %28 = or disjoint i32 %13, 5, !dbg !20
  %29 = sext i32 %27 to i64, !dbg !21
  %30 = getelementptr i1, ptr addrspace(1) %0, i64 %29, !dbg !21
  %31 = sext i32 %28 to i64, !dbg !21
  %32 = getelementptr i1, ptr addrspace(1) %0, i64 %31, !dbg !21
  %33 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %30, i1 %12) #1, !dbg !22
  %34 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %32, i1 %12) #1, !dbg !22
  %.not2 = icmp eq i8 %33, 0, !dbg !22
  %.not3 = icmp eq i8 %34, 0, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %12) #1, !dbg !24
  %38 = bitcast i32 %37 to float, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %12) #1, !dbg !24
  %40 = bitcast i32 %39 to float, !dbg !24
  %41 = or disjoint i32 %13, 2, !dbg !25
  %42 = or disjoint i32 %13, 6, !dbg !25
  %43 = sext i32 %41 to i64, !dbg !26
  %44 = getelementptr i1, ptr addrspace(1) %0, i64 %43, !dbg !26
  %45 = sext i32 %42 to i64, !dbg !26
  %46 = getelementptr i1, ptr addrspace(1) %0, i64 %45, !dbg !26
  %47 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %44, i1 %12) #1, !dbg !27
  %48 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %46, i1 %12) #1, !dbg !27
  %.not4 = icmp eq i8 %47, 0, !dbg !27
  %.not5 = icmp eq i8 %48, 0, !dbg !27
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !28
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !28
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %12) #1, !dbg !29
  %52 = bitcast i32 %51 to float, !dbg !29
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %12) #1, !dbg !29
  %54 = bitcast i32 %53 to float, !dbg !29
  %55 = or disjoint i32 %13, 3, !dbg !30
  %56 = or disjoint i32 %13, 7, !dbg !30
  %57 = sext i32 %55 to i64, !dbg !31
  %58 = getelementptr i1, ptr addrspace(1) %0, i64 %57, !dbg !31
  %59 = sext i32 %56 to i64, !dbg !31
  %60 = getelementptr i1, ptr addrspace(1) %0, i64 %59, !dbg !31
  %61 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %58, i1 %12) #1, !dbg !32
  %62 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %60, i1 %12) #1, !dbg !32
  %.not6 = icmp eq i8 %61, 0, !dbg !32
  %.not7 = icmp eq i8 %62, 0, !dbg !32
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !33
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !33
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %12) #1, !dbg !34
  %66 = bitcast i32 %65 to float, !dbg !34
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %12) #1, !dbg !34
  %68 = bitcast i32 %67 to float, !dbg !34
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %24, float 2.000000e+00) #1, !dbg !35
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %26, float 2.000000e+00) #1, !dbg !35
  %71 = select i1 %.not, float %69, float -1.000000e+09, !dbg !36
  %72 = select i1 %.not1, float %70, float -1.000000e+09, !dbg !36
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %38, float 2.000000e+00) #1, !dbg !37
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %40, float 2.000000e+00) #1, !dbg !37
  %75 = select i1 %.not2, float %73, float -1.000000e+09, !dbg !38
  %76 = select i1 %.not3, float %74, float -1.000000e+09, !dbg !38
  %77 = fcmp ogt float %71, %75, !dbg !39
  %78 = fcmp ogt float %72, %76, !dbg !39
  %79 = fcmp uno float %71, 0.000000e+00, !dbg !43
  %80 = fcmp uno float %72, 0.000000e+00, !dbg !43
  %81 = or i1 %79, %77, !dbg !44
  %82 = or i1 %80, %78, !dbg !44
  %83 = select i1 %81, float %71, float %75, !dbg !45
  %84 = select i1 %82, float %72, float %76, !dbg !45
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float 2.000000e+00) #1, !dbg !46
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %54, float 2.000000e+00) #1, !dbg !46
  %87 = select i1 %.not4, float %85, float -1.000000e+09, !dbg !47
  %88 = select i1 %.not5, float %86, float -1.000000e+09, !dbg !47
  %89 = fcmp ogt float %83, %87, !dbg !48
  %90 = fcmp ogt float %84, %88, !dbg !48
  %91 = fcmp uno float %83, 0.000000e+00, !dbg !50
  %92 = fcmp uno float %84, 0.000000e+00, !dbg !50
  %93 = or i1 %89, %91, !dbg !51
  %94 = or i1 %90, %92, !dbg !51
  %95 = select i1 %93, float %83, float %87, !dbg !52
  %96 = select i1 %94, float %84, float %88, !dbg !52
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %66, float 2.000000e+00) #1, !dbg !53
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %68, float 2.000000e+00) #1, !dbg !53
  %99 = select i1 %.not6, float %97, float -1.000000e+09, !dbg !54
  %100 = select i1 %.not7, float %98, float -1.000000e+09, !dbg !54
  %101 = fcmp ogt float %95, %99, !dbg !55
  %102 = fcmp ogt float %96, %100, !dbg !55
  %103 = fcmp uno float %95, 0.000000e+00, !dbg !57
  %104 = fcmp uno float %96, 0.000000e+00, !dbg !57
  %105 = or i1 %101, %103, !dbg !58
  %106 = or i1 %102, %104, !dbg !58
  %107 = select i1 %105, float %95, float %99, !dbg !59
  %108 = select i1 %106, float %96, float %100, !dbg !59
  %109 = fsub float %71, %107, !dbg !60
  %110 = fsub float %72, %108, !dbg !60
  %111 = fmul float %109, 0x3FF7154760000000, !dbg !61
  %112 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %111) #1, !dbg !61
  %113 = fmul float %110, 0x3FF7154760000000, !dbg !61
  %114 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %113) #1, !dbg !61
  %115 = fsub float %75, %107, !dbg !62
  %116 = fsub float %76, %108, !dbg !62
  %117 = fmul float %115, 0x3FF7154760000000, !dbg !63
  %118 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %117) #1, !dbg !63
  %119 = fmul float %116, 0x3FF7154760000000, !dbg !63
  %120 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %119) #1, !dbg !63
  %121 = fadd float %112, %118, !dbg !64
  %122 = fadd float %114, %120, !dbg !64
  %123 = fsub float %87, %107, !dbg !65
  %124 = fsub float %88, %108, !dbg !65
  %125 = fmul float %123, 0x3FF7154760000000, !dbg !66
  %126 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %125) #1, !dbg !66
  %127 = fmul float %124, 0x3FF7154760000000, !dbg !66
  %128 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %127) #1, !dbg !66
  %129 = fadd float %121, %126, !dbg !67
  %130 = fadd float %122, %128, !dbg !67
  %131 = fsub float %99, %107, !dbg !68
  %132 = fsub float %100, %108, !dbg !68
  %133 = fmul float %131, 0x3FF7154760000000, !dbg !69
  %134 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %133) #1, !dbg !69
  %135 = fmul float %132, 0x3FF7154760000000, !dbg !69
  %136 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %135) #1, !dbg !69
  %137 = fadd float %129, %134, !dbg !70
  %138 = fadd float %130, %136, !dbg !70
  %139 = sext i32 %11 to i64, !dbg !71
  %140 = getelementptr float, ptr addrspace(1) %2, i64 %139, !dbg !71
  %141 = bitcast float %107 to i32, !dbg !72
  %142 = bitcast float %108 to i32, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %141, i32 %142, ptr addrspace(1) %140, i1 %12) #1, !dbg !72
  %143 = getelementptr float, ptr addrspace(1) %3, i64 %139, !dbg !73
  %144 = bitcast float %137 to i32, !dbg !74
  %145 = bitcast float %138 to i32, !dbg !74
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %144, i32 %145, ptr addrspace(1) %143, i1 %12) #1, !dbg !74
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckwm4mn5zfjmbnriys6kmikegask5hfjdm7wr4ua5vgqzdkpu2u7.py", directory: "inductor_cache/kw")
!4 = !{ptr @triton_poi_fused__softmax_div_masked_fill_sqrt_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_div_masked_fill_sqrt_3, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_div_masked_fill_sqrt_3", linkageName: "triton_poi_fused__softmax_div_masked_fill_sqrt_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 32, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 37, scope: !7)
!18 = !DILocation(line: 26, column: 30, scope: !7)
!19 = !DILocation(line: 26, column: 37, scope: !7)
!20 = !DILocation(line: 27, column: 34, scope: !7)
!21 = !DILocation(line: 27, column: 30, scope: !7)
!22 = !DILocation(line: 27, column: 41, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 35, scope: !7)
!26 = !DILocation(line: 29, column: 31, scope: !7)
!27 = !DILocation(line: 29, column: 42, scope: !7)
!28 = !DILocation(line: 30, column: 31, scope: !7)
!29 = !DILocation(line: 30, column: 42, scope: !7)
!30 = !DILocation(line: 31, column: 35, scope: !7)
!31 = !DILocation(line: 31, column: 31, scope: !7)
!32 = !DILocation(line: 31, column: 42, scope: !7)
!33 = !DILocation(line: 32, column: 31, scope: !7)
!34 = !DILocation(line: 32, column: 42, scope: !7)
!35 = !DILocation(line: 34, column: 18, scope: !7)
!36 = !DILocation(line: 36, column: 32, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 32, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 39, column: 41, scope: !7)
!43 = !DILocation(line: 120, column: 21, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 120, column: 16, scope: !40, inlinedAt: !42)
!45 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!46 = !DILocation(line: 40, column: 20, scope: !7)
!47 = !DILocation(line: 41, column: 34, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !49)
!49 = !DILocation(line: 42, column: 42, scope: !7)
!50 = !DILocation(line: 120, column: 21, scope: !40, inlinedAt: !49)
!51 = !DILocation(line: 120, column: 16, scope: !40, inlinedAt: !49)
!52 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !49)
!53 = !DILocation(line: 43, column: 20, scope: !7)
!54 = !DILocation(line: 44, column: 34, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !56)
!56 = !DILocation(line: 45, column: 42, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !40, inlinedAt: !56)
!58 = !DILocation(line: 120, column: 16, scope: !40, inlinedAt: !56)
!59 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !56)
!60 = !DILocation(line: 46, column: 19, scope: !7)
!61 = !DILocation(line: 47, column: 24, scope: !7)
!62 = !DILocation(line: 48, column: 19, scope: !7)
!63 = !DILocation(line: 49, column: 24, scope: !7)
!64 = !DILocation(line: 50, column: 20, scope: !7)
!65 = !DILocation(line: 51, column: 20, scope: !7)
!66 = !DILocation(line: 52, column: 24, scope: !7)
!67 = !DILocation(line: 53, column: 20, scope: !7)
!68 = !DILocation(line: 54, column: 20, scope: !7)
!69 = !DILocation(line: 55, column: 24, scope: !7)
!70 = !DILocation(line: 56, column: 20, scope: !7)
!71 = !DILocation(line: 57, column: 25, scope: !7)
!72 = !DILocation(line: 57, column: 37, scope: !7)
!73 = !DILocation(line: 58, column: 25, scope: !7)
!74 = !DILocation(line: 58, column: 37, scope: !7)
!75 = !DILocation(line: 58, column: 4, scope: !7)
