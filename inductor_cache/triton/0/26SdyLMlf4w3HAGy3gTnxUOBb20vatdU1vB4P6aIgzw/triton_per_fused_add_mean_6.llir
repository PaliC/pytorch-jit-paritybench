; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_mean_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 3, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 4, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = and i32 %10, 7, !dbg !12
  %14 = or disjoint i32 %9, %12, !dbg !13
  %15 = or disjoint i32 %9, %13, !dbg !13
  %16 = shl i32 %10, 2, !dbg !14
  %17 = and i32 %16, 60, !dbg !14
  %18 = shl i32 %14, 6, !dbg !15
  %19 = or disjoint i32 %18, %17, !dbg !16
  %20 = sext i32 %19 to i64, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !17
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !18
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !18
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !18
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !18
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !19
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !21
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !22
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !23
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !24
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !24
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !24
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !24
  %45 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !18
  %46 = insertelement <2 x i32> %45, i32 %24, i64 1, !dbg !18
  %47 = bitcast <2 x i32> %46 to <2 x float>, !dbg !18
  %48 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !20
  %49 = insertelement <2 x i32> %48, i32 %30, i64 1, !dbg !20
  %50 = bitcast <2 x i32> %49 to <2 x float>, !dbg !20
  %51 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !22
  %52 = insertelement <2 x i32> %51, i32 %36, i64 1, !dbg !22
  %53 = bitcast <2 x i32> %52 to <2 x float>, !dbg !22
  %54 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !24
  %55 = insertelement <2 x i32> %54, i32 %42, i64 1, !dbg !24
  %56 = bitcast <2 x i32> %55 to <2 x float>, !dbg !24
  %57 = fadd <2 x float> %47, zeroinitializer, !dbg !25
  %58 = fadd <2 x float> %57, %50, !dbg !26
  %59 = fadd <2 x float> %58, %53, !dbg !27
  %60 = fadd <2 x float> %59, %56, !dbg !28
  %61 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !18
  %62 = insertelement <2 x i32> %61, i32 %25, i64 1, !dbg !18
  %63 = bitcast <2 x i32> %62 to <2 x float>, !dbg !18
  %64 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !20
  %65 = insertelement <2 x i32> %64, i32 %31, i64 1, !dbg !20
  %66 = bitcast <2 x i32> %65 to <2 x float>, !dbg !20
  %67 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !22
  %68 = insertelement <2 x i32> %67, i32 %37, i64 1, !dbg !22
  %69 = bitcast <2 x i32> %68 to <2 x float>, !dbg !22
  %70 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !24
  %71 = insertelement <2 x i32> %70, i32 %43, i64 1, !dbg !24
  %72 = bitcast <2 x i32> %71 to <2 x float>, !dbg !24
  %73 = fadd <2 x float> %63, zeroinitializer, !dbg !25
  %74 = fadd <2 x float> %73, %66, !dbg !26
  %75 = fadd <2 x float> %74, %69, !dbg !27
  %76 = fadd <2 x float> %75, %72, !dbg !28
  %shift = shufflevector <2 x float> %60, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !29
  %77 = fadd <2 x float> %60, %shift, !dbg !29
  %shift1 = shufflevector <2 x float> %76, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !29
  %78 = fadd <2 x float> %shift1, %77, !dbg !29
  %79 = fadd <2 x float> %76, %78, !dbg !29
  %80 = extractelement <2 x float> %79, i64 0, !dbg !29
  %81 = bitcast float %80 to i32, !dbg !34
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 8, i32 31), !dbg !34
  %83 = bitcast i32 %82 to float, !dbg !34
  %84 = fadd float %80, %83, !dbg !29
  %85 = bitcast float %84 to i32, !dbg !34
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 4, i32 31), !dbg !34
  %87 = bitcast i32 %86 to float, !dbg !34
  %88 = fadd float %84, %87, !dbg !29
  %89 = bitcast float %88 to i32, !dbg !34
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 2, i32 31), !dbg !34
  %91 = bitcast i32 %90 to float, !dbg !34
  %92 = fadd float %88, %91, !dbg !29
  %93 = bitcast float %92 to i32, !dbg !34
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 1, i32 31), !dbg !34
  %95 = bitcast i32 %94 to float, !dbg !34
  %96 = fadd float %92, %95, !dbg !29
  %97 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !35
  %98 = bitcast float %96 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %99 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !35
  %100 = load i32, ptr addrspace(3) %99, align 4, !dbg !35
  %101 = sext i32 %15 to i64, !dbg !36
  %102 = getelementptr float, ptr addrspace(1) %4, i64 %101, !dbg !36
  %103 = and i32 %10, 120, !dbg !37
  %104 = icmp eq i32 %103, 0, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %100, ptr addrspace(1) %102, i1 %104) #3, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c37qj7dmeimpnleur3hhuqlmk5reqyfbchgdzei3c7gzlojatxyh.py", directory: "inductor_cache/37")
!4 = !{ptr @triton_per_fused_add_mean_6, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mean_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mean_6", linkageName: "triton_per_fused_add_mean_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 38, scope: !7)
!16 = !DILocation(line: 31, column: 35, scope: !7)
!17 = !DILocation(line: 31, column: 30, scope: !7)
!18 = !DILocation(line: 31, column: 43, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 43, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 43, scope: !7)
!25 = !DILocation(line: 36, column: 18, scope: !7)
!26 = !DILocation(line: 37, column: 18, scope: !7)
!27 = !DILocation(line: 38, column: 18, scope: !7)
!28 = !DILocation(line: 39, column: 18, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !33)
!30 = distinct !DILexicalBlockFile(scope: !32, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!33 = !DILocation(line: 41, column: 25, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 41, column: 28, scope: !7)
!36 = !DILocation(line: 42, column: 25, scope: !7)
!37 = !DILocation(line: 42, column: 37, scope: !7)
!38 = !DILocation(line: 42, column: 4, scope: !7)
