#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [0, 1]}>
#loc = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":19:0)
#loc1 = loc(unknown)
#loc56 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":66:44)
#loc82 = loc(callsite(#loc1 at #loc56))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused_add_cat_native_group_norm_15(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c32768_i32 = arith.constant 32768 : i32 loc(#loc1)
    %c16384_i32 = arith.constant 16384 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<2048> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<256> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<128> : tensor<1x2048xi64, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<192> : tensor<1x2048xi64, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<-128> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<-192> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_9 = arith.constant dense<2.048000e+03> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2048xi32, #blocked> loc(#loc4)
    %4 = arith.remsi %0, %c32_i32 : i32 loc(#loc5)
    %5 = arith.divsi %0, %c32_i32 : i32 loc(#loc6)
    %6 = arith.cmpi slt, %3, %cst_1 : tensor<1x2048xi32, #blocked> loc(#loc7)
    %7 = arith.divsi %3, %cst_2 : tensor<1x2048xi32, #blocked> loc(#loc8)
    %8 = arith.remsi %3, %cst_2 : tensor<1x2048xi32, #blocked> loc(#loc9)
    %9 = arith.muli %0, %c2048_i32 : i32 loc(#loc10)
    %10 = tt.splat %9 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc11)
    %11 = arith.addi %3, %10 : tensor<1x2048xi32, #blocked> loc(#loc11)
    %12 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc12)
    %13 = tt.addptr %12, %11 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc12)
    %14 = tt.splat %1 : i1 -> tensor<1x2048xi1, #blocked> loc(#loc13)
    %15 = arith.andi %6, %14 : tensor<1x2048xi1, #blocked> loc(#loc13)
    %16 = tt.load %13, %15, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc14)
    %17 = arith.muli %4, %c8_i32 : i32 loc(#loc15)
    %18 = tt.splat %17 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc16)
    %19 = arith.addi %7, %18 : tensor<1x2048xi32, #blocked> loc(#loc16)
    %20 = arith.extsi %19 : tensor<1x2048xi32, #blocked> to tensor<1x2048xi64, #blocked> loc(#loc17)
    %21 = arith.cmpi slt, %20, %cst_3 : tensor<1x2048xi64, #blocked> loc(#loc17)
    %22 = arith.muli %19, %cst_2 : tensor<1x2048xi32, #blocked> loc(#loc18)
    %23 = arith.addi %8, %22 : tensor<1x2048xi32, #blocked> loc(#loc19)
    %24 = arith.muli %5, %c32768_i32 : i32 loc(#loc20)
    %25 = tt.splat %24 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc21)
    %26 = arith.addi %23, %25 : tensor<1x2048xi32, #blocked> loc(#loc21)
    %27 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc22)
    %28 = tt.addptr %27, %26 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc22)
    %29 = arith.andi %6, %21 : tensor<1x2048xi1, #blocked> loc(#loc23)
    %30 = arith.andi %29, %14 : tensor<1x2048xi1, #blocked> loc(#loc24)
    %31 = tt.load %28, %30, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc25)
    %32 = arith.cmpi sge, %20, %cst_3 : tensor<1x2048xi64, #blocked> loc(#loc26)
    %33 = arith.cmpi slt, %20, %cst_4 : tensor<1x2048xi64, #blocked> loc(#loc27)
    %34 = arith.andi %32, %33 : tensor<1x2048xi1, #blocked> loc(#loc28)
    %35 = arith.addi %7, %cst_5 : tensor<1x2048xi32, #blocked> loc(#loc29)
    %36 = arith.addi %35, %18 : tensor<1x2048xi32, #blocked> loc(#loc30)
    %37 = arith.muli %36, %cst_2 : tensor<1x2048xi32, #blocked> loc(#loc31)
    %38 = arith.addi %8, %37 : tensor<1x2048xi32, #blocked> loc(#loc32)
    %39 = arith.muli %5, %c16384_i32 : i32 loc(#loc33)
    %40 = tt.splat %39 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc34)
    %41 = arith.addi %38, %40 : tensor<1x2048xi32, #blocked> loc(#loc34)
    %42 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc35)
    %43 = tt.addptr %42, %41 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc35)
    %44 = arith.andi %6, %34 : tensor<1x2048xi1, #blocked> loc(#loc36)
    %45 = arith.andi %44, %14 : tensor<1x2048xi1, #blocked> loc(#loc37)
    %46 = tt.load %43, %45, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc38)
    %47 = arith.cmpi sge, %20, %cst_4 : tensor<1x2048xi64, #blocked> loc(#loc39)
    %48 = arith.addi %7, %cst_6 : tensor<1x2048xi32, #blocked> loc(#loc40)
    %49 = arith.addi %48, %18 : tensor<1x2048xi32, #blocked> loc(#loc41)
    %50 = arith.muli %49, %cst_2 : tensor<1x2048xi32, #blocked> loc(#loc42)
    %51 = arith.addi %8, %50 : tensor<1x2048xi32, #blocked> loc(#loc43)
    %52 = arith.addi %51, %40 : tensor<1x2048xi32, #blocked> loc(#loc44)
    %53 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc45)
    %54 = tt.addptr %53, %52 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc45)
    %55 = arith.andi %6, %47 : tensor<1x2048xi1, #blocked> loc(#loc46)
    %56 = arith.andi %55, %14 : tensor<1x2048xi1, #blocked> loc(#loc47)
    %57 = tt.load %54, %56, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc48)
    %58 = arith.select %34, %46, %57 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc49)
    %59 = arith.select %21, %31, %58 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc50)
    %60 = arith.addf %59, %16 : tensor<1x2048xf32, #blocked> loc(#loc51)
    %61 = arith.select %15, %60, %cst : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc52)
    %62 = arith.select %15, %cst_7, %cst : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc53)
    tt.store %13, %60, %15 : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc54)
    %63:3 = "tt.reduce"(%61, %cst, %62) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc56)), %arg10: f32 loc(callsite(#loc1 at #loc56)), %arg11: f32 loc(callsite(#loc1 at #loc56)), %arg12: f32 loc(callsite(#loc1 at #loc56)), %arg13: f32 loc(callsite(#loc1 at #loc56)), %arg14: f32 loc(callsite(#loc1 at #loc56))):
      %80 = arith.subf %arg12, %arg9 : f32 loc(#loc95)
      %81 = arith.addf %arg11, %arg14 : f32 loc(#loc96)
      %82 = arith.cmpf oeq, %81, %cst_0 : f32 loc(#loc97)
      %83 = arith.divf %arg14, %81 : f32 loc(#loc98)
      %84 = arith.select %82, %cst_0, %83 : f32 loc(#loc99)
      %85 = arith.mulf %80, %84 : f32 loc(#loc100)
      %86 = arith.addf %arg9, %85 : f32 loc(#loc101)
      %87 = arith.addf %arg10, %arg13 : f32 loc(#loc102)
      %88 = arith.mulf %80, %80 : f32 loc(#loc103)
      %89 = arith.mulf %88, %arg11 : f32 loc(#loc104)
      %90 = arith.mulf %89, %84 : f32 loc(#loc105)
      %91 = arith.addf %87, %90 : f32 loc(#loc106)
      tt.reduce.return %86, %91, %81 : f32, f32, f32 loc(#loc81)
    }) : (tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>) -> (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) loc(#loc81)
    %64 = triton_gpu.convert_layout %63#0 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc69)
    %65 = tt.expand_dims %64 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc69)
    %66 = triton_gpu.convert_layout %63#1 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc70)
    %67 = tt.expand_dims %66 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc70)
    %68 = triton_gpu.convert_layout %63#1 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc71)
    %69 = tt.expand_dims %68 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc70)
    %70 = tt.addptr %arg4, %0 : !tt.ptr<f32>, i32 loc(#loc72)
    %71 = tt.splat %70 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc73)
    %72 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc73)
    tt.store %71, %65, %72 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc73)
    %73 = tt.addptr %arg5, %0 : !tt.ptr<f32>, i32 loc(#loc74)
    %74 = tt.splat %73 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc75)
    tt.store %74, %67, %72 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc75)
    %75 = arith.divf %69, %cst_9 : tensor<1x1xf32, #blocked1> loc(#loc76)
    %76 = arith.addf %75, %cst_8 : tensor<1x1xf32, #blocked1> loc(#loc77)
    %77 = tt.extern_elementwise %76 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc71)
    %78 = tt.addptr %arg6, %0 : !tt.ptr<f32>, i32 loc(#loc78)
    %79 = tt.splat %78 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc79)
    tt.store %79, %77, %72 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc79)
    tt.return loc(#loc80)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":22:28)
#loc3 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":24:21)
#loc4 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":25:33)
#loc5 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":26:19)
#loc6 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":27:19)
#loc7 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":34:25)
#loc8 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":35:23)
#loc9 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":36:23)
#loc10 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":38:49)
#loc11 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":38:44)
#loc12 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":38:39)
#loc13 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":38:62)
#loc14 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":38:54)
#loc15 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":39:22)
#loc16 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":39:20)
#loc17 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":43:22)
#loc18 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":44:44)
#loc19 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":44:39)
#loc20 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":44:63)
#loc21 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":44:57)
#loc22 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":44:34)
#loc23 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":44:76)
#loc24 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":44:83)
#loc25 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":44:68)
#loc26 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":45:23)
#loc27 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":47:22)
#loc28 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":48:22)
#loc29 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":49:54)
#loc30 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":49:59)
#loc31 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":49:45)
#loc32 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":49:40)
#loc33 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":49:73)
#loc34 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":49:67)
#loc35 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":49:35)
#loc36 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":49:86)
#loc37 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":49:93)
#loc38 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":49:78)
#loc39 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":50:24)
#loc40 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":53:54)
#loc41 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":53:59)
#loc42 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":53:45)
#loc43 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":53:40)
#loc44 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":53:67)
#loc45 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":53:35)
#loc46 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":53:86)
#loc47 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":53:94)
#loc48 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":53:78)
#loc49 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":54:38)
#loc50 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":55:37)
#loc51 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":56:24)
#loc52 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":61:62)
#loc53 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":63:66)
#loc54 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":64:54)
#loc55 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":204:46)
#loc57 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":192:21)
#loc58 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":193:28)
#loc59 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:39)
#loc60 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:60)
#loc61 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:49)
#loc62 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:25)
#loc63 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:17)
#loc64 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:15)
#loc65 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:30)
#loc66 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:38)
#loc67 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:49)
#loc68 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:22)
#loc69 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":68:22)
#loc70 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":69:22)
#loc71 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":77:28)
#loc72 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":71:25)
#loc73 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":71:37)
#loc74 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":72:25)
#loc75 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":72:37)
#loc76 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":74:20)
#loc77 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":76:20)
#loc78 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":78:25)
#loc79 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":78:37)
#loc80 = loc("inductor_cache/2s/c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py":78:4)
#loc81 = loc(callsite(#loc55 at #loc56))
#loc83 = loc(callsite(#loc57 at #loc55))
#loc84 = loc(callsite(#loc58 at #loc55))
#loc85 = loc(callsite(#loc59 at #loc55))
#loc86 = loc(callsite(#loc60 at #loc55))
#loc87 = loc(callsite(#loc61 at #loc55))
#loc88 = loc(callsite(#loc62 at #loc55))
#loc89 = loc(callsite(#loc63 at #loc55))
#loc90 = loc(callsite(#loc64 at #loc55))
#loc91 = loc(callsite(#loc65 at #loc55))
#loc92 = loc(callsite(#loc66 at #loc55))
#loc93 = loc(callsite(#loc67 at #loc55))
#loc94 = loc(callsite(#loc68 at #loc55))
#loc95 = loc(callsite(#loc83 at #loc56))
#loc96 = loc(callsite(#loc84 at #loc56))
#loc97 = loc(callsite(#loc85 at #loc56))
#loc98 = loc(callsite(#loc86 at #loc56))
#loc99 = loc(callsite(#loc87 at #loc56))
#loc100 = loc(callsite(#loc88 at #loc56))
#loc101 = loc(callsite(#loc89 at #loc56))
#loc102 = loc(callsite(#loc90 at #loc56))
#loc103 = loc(callsite(#loc91 at #loc56))
#loc104 = loc(callsite(#loc92 at #loc56))
#loc105 = loc(callsite(#loc93 at #loc56))
#loc106 = loc(callsite(#loc94 at #loc56))
