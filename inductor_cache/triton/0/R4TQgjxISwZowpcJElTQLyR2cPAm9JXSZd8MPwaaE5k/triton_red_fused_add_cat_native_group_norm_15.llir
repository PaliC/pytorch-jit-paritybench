; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_add_cat_native_group_norm_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = icmp slt i32 %10, 128, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 5, !dbg !12
  %14 = shl i32 %12, 2, !dbg !12
  %15 = and i32 %14, 252, !dbg !12
  %16 = and i32 %14, 2044, !dbg !12
  %.frozen = freeze i32 %10, !dbg !13
  %17 = sdiv i32 %.frozen, 32, !dbg !13
  %18 = mul i32 %17, 32, !dbg !14
  %.decomposed = sub i32 %.frozen, %18, !dbg !14
  %19 = lshr i32 %16, 8, !dbg !15
  %20 = shl i32 %10, 11, !dbg !16
  %21 = or disjoint i32 %20, %16, !dbg !17
  %22 = sext i32 %21 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !18
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #5, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !19
  %29 = bitcast i32 %25 to float, !dbg !19
  %30 = bitcast i32 %26 to float, !dbg !19
  %31 = bitcast i32 %27 to float, !dbg !19
  %32 = bitcast i32 %28 to float, !dbg !19
  %33 = shl nsw i32 %.decomposed, 3, !dbg !20
  %34 = or disjoint i32 %33, %19, !dbg !21
  %35 = icmp slt i32 %34, 128, !dbg !22
  %36 = shl nsw i32 %34, 8, !dbg !23
  %37 = shl i32 %17, 15, !dbg !24
  %38 = or disjoint i32 %37, %15, !dbg !25
  %39 = add i32 %38, %36, !dbg !26
  %40 = sext i32 %39 to i64, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !27
  %42 = and i1 %11, %35, !dbg !28
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42, i32 0, i1 %42) #5, !dbg !29
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !29
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !29
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !29
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !29
  %48 = or disjoint i32 %19, -128, !dbg !30
  %49 = add nsw i32 %48, %33, !dbg !31
  %50 = shl nsw i32 %49, 8, !dbg !32
  %51 = shl i32 %17, 14, !dbg !33
  %52 = or disjoint i32 %51, %15, !dbg !34
  %53 = add i32 %52, %50, !dbg !35
  %54 = sext i32 %53 to i64, !dbg !36
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !36
  %56 = icmp sgt i32 %34, 191, !dbg !37
  %57 = or disjoint i32 %19, -192, !dbg !38
  %58 = add nsw i32 %57, %33, !dbg !39
  %59 = shl nsw i32 %58, 8, !dbg !40
  %60 = add i32 %52, %59, !dbg !41
  %61 = sext i32 %60 to i64, !dbg !42
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !42
  %63 = and i1 %11, %56, !dbg !43
  %64 = select i1 %11, float 1.000000e+00, float 0.000000e+00, !dbg !44
  %65 = select i1 %11, float 2.000000e+00, float 0.000000e+00, !dbg !45
  %66 = fcmp oeq float %65, 0.000000e+00, !dbg !50
  %67 = select i1 %11, float 3.000000e+00, float 0.000000e+00, !dbg !45
  %68 = fcmp oeq float %67, 0.000000e+00, !dbg !50
  %69 = select i1 %11, float 4.000000e+00, float 0.000000e+00, !dbg !45
  %70 = fcmp oeq float %69, 0.000000e+00, !dbg !50
  %71 = bitcast float %69 to i32, !dbg !51
  %72 = and i32 %13, 15, !dbg !51
  %73 = getelementptr float, ptr addrspace(3) @global_smem, i32 %72, !dbg !51
  %74 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %72, !dbg !51
  %75 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %72, !dbg !51
  %76 = icmp slt i32 %12, 16, !dbg !51
  %77 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !51
  %78 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %12, !dbg !51
  %79 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %12, !dbg !51
  %80 = sext i32 %10 to i64, !dbg !52
  %81 = getelementptr float, ptr addrspace(1) %4, i64 %80, !dbg !52
  %82 = insertelement <4 x i32> poison, i32 %12, i64 0, !dbg !53
  %83 = insertelement <4 x i32> %82, i32 %.decomposed, i64 1, !dbg !53
  %84 = shufflevector <4 x i32> %83, <4 x i32> poison, <4 x i32> <i32 0, i32 0, i32 0, i32 1>, !dbg !53
  %85 = and <4 x i32> %84, <i32 511, i32 15, i32 31, i32 536870904>, !dbg !53
  %86 = icmp eq <4 x i32> %85, <i32 0, i32 0, i32 0, i32 16>, !dbg !53
  %87 = extractelement <4 x i1> %86, i64 3, !dbg !54
  %88 = and i1 %11, %87, !dbg !54
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %55, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88) #5, !dbg !55
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !55
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !55
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !55
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !55
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %62, i1 %63, i32 0, i1 %63, i32 0, i1 %63, i32 0, i1 %63, i32 0, i1 %63) #5, !dbg !56
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !56
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !56
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !56
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !56
  %.v = select i1 %87, i32 %90, i32 %95, !dbg !57
  %.v1 = select i1 %87, i32 %91, i32 %96, !dbg !57
  %.v2 = select i1 %87, i32 %92, i32 %97, !dbg !57
  %.v3 = select i1 %87, i32 %93, i32 %98, !dbg !57
  %.v4 = select i1 %35, i32 %44, i32 %.v, !dbg !58
  %99 = bitcast i32 %.v4 to float, !dbg !58
  %.v5 = select i1 %35, i32 %45, i32 %.v1, !dbg !58
  %100 = bitcast i32 %.v5 to float, !dbg !58
  %.v6 = select i1 %35, i32 %46, i32 %.v2, !dbg !58
  %101 = bitcast i32 %.v6 to float, !dbg !58
  %.v7 = select i1 %35, i32 %47, i32 %.v3, !dbg !58
  %102 = bitcast i32 %.v7 to float, !dbg !58
  %103 = fadd float %29, %99, !dbg !59
  %104 = fadd float %30, %100, !dbg !59
  %105 = fadd float %31, %101, !dbg !59
  %106 = fadd float %32, %102, !dbg !59
  %107 = select i1 %11, float %103, float 0.000000e+00, !dbg !60
  %108 = select i1 %11, float %104, float 0.000000e+00, !dbg !60
  %109 = select i1 %11, float %105, float 0.000000e+00, !dbg !60
  %110 = select i1 %11, float %106, float 0.000000e+00, !dbg !60
  %111 = bitcast float %103 to i32, !dbg !61
  %112 = bitcast float %104 to i32, !dbg !61
  %113 = bitcast float %105 to i32, !dbg !61
  %114 = bitcast float %106 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %111, i32 %112, i32 %113, i32 %114, ptr addrspace(1) %23, i1 %11) #5, !dbg !61
  %115 = fsub float %108, %107, !dbg !62
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float %65) #5, !dbg !63
  %117 = select i1 %66, float 0.000000e+00, float %116, !dbg !64
  %118 = fmul float %117, %115, !dbg !65
  %119 = fadd float %107, %118, !dbg !66
  %120 = fmul float %115, %115, !dbg !67
  %121 = fmul float %64, %120, !dbg !68
  %122 = fmul float %117, %121, !dbg !69
  %123 = fadd float %122, 0.000000e+00, !dbg !70
  %124 = fsub float %109, %119, !dbg !62
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float %67) #5, !dbg !63
  %126 = select i1 %68, float 0.000000e+00, float %125, !dbg !64
  %127 = fmul float %126, %124, !dbg !65
  %128 = fadd float %119, %127, !dbg !66
  %129 = fmul float %124, %124, !dbg !67
  %130 = fmul float %65, %129, !dbg !68
  %131 = fmul float %126, %130, !dbg !69
  %132 = fadd float %123, %131, !dbg !70
  %133 = fsub float %110, %128, !dbg !62
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float %69) #5, !dbg !63
  %135 = select i1 %70, float 0.000000e+00, float %134, !dbg !64
  %136 = fmul float %135, %133, !dbg !65
  %137 = fadd float %128, %136, !dbg !66
  %138 = fmul float %133, %133, !dbg !67
  %139 = fmul float %67, %138, !dbg !68
  %140 = fmul float %135, %139, !dbg !69
  %141 = fadd float %132, %140, !dbg !70
  %142 = bitcast float %137 to i32, !dbg !51
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 16, i32 31), !dbg !51
  %144 = bitcast i32 %143 to float, !dbg !51
  %145 = bitcast float %141 to i32, !dbg !51
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 16, i32 31), !dbg !51
  %147 = bitcast i32 %146 to float, !dbg !51
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 16, i32 31), !dbg !51
  %149 = bitcast i32 %148 to float, !dbg !51
  %150 = fsub float %144, %137, !dbg !62
  %151 = fadd float %69, %149, !dbg !45
  %152 = fcmp oeq float %151, 0.000000e+00, !dbg !50
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float %151) #5, !dbg !63
  %154 = select i1 %152, float 0.000000e+00, float %153, !dbg !64
  %155 = fmul float %154, %150, !dbg !65
  %156 = fadd float %137, %155, !dbg !66
  %157 = fadd float %141, %147, !dbg !71
  %158 = fmul float %150, %150, !dbg !67
  %159 = fmul float %69, %158, !dbg !68
  %160 = fmul float %154, %159, !dbg !69
  %161 = fadd float %157, %160, !dbg !70
  %162 = bitcast float %156 to i32, !dbg !51
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 8, i32 31), !dbg !51
  %164 = bitcast i32 %163 to float, !dbg !51
  %165 = bitcast float %161 to i32, !dbg !51
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 8, i32 31), !dbg !51
  %167 = bitcast i32 %166 to float, !dbg !51
  %168 = bitcast float %151 to i32, !dbg !51
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 8, i32 31), !dbg !51
  %170 = bitcast i32 %169 to float, !dbg !51
  %171 = fsub float %164, %156, !dbg !62
  %172 = fadd float %151, %170, !dbg !45
  %173 = fcmp oeq float %172, 0.000000e+00, !dbg !50
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %170, float %172) #5, !dbg !63
  %175 = select i1 %173, float 0.000000e+00, float %174, !dbg !64
  %176 = fmul float %175, %171, !dbg !65
  %177 = fadd float %156, %176, !dbg !66
  %178 = fadd float %161, %167, !dbg !71
  %179 = fmul float %171, %171, !dbg !67
  %180 = fmul float %151, %179, !dbg !68
  %181 = fmul float %175, %180, !dbg !69
  %182 = fadd float %178, %181, !dbg !70
  %183 = bitcast float %177 to i32, !dbg !51
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 4, i32 31), !dbg !51
  %185 = bitcast i32 %184 to float, !dbg !51
  %186 = bitcast float %182 to i32, !dbg !51
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 4, i32 31), !dbg !51
  %188 = bitcast i32 %187 to float, !dbg !51
  %189 = bitcast float %172 to i32, !dbg !51
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 4, i32 31), !dbg !51
  %191 = bitcast i32 %190 to float, !dbg !51
  %192 = fsub float %185, %177, !dbg !62
  %193 = fadd float %172, %191, !dbg !45
  %194 = fcmp oeq float %193, 0.000000e+00, !dbg !50
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %191, float %193) #5, !dbg !63
  %196 = select i1 %194, float 0.000000e+00, float %195, !dbg !64
  %197 = fmul float %196, %192, !dbg !65
  %198 = fadd float %177, %197, !dbg !66
  %199 = fadd float %182, %188, !dbg !71
  %200 = fmul float %192, %192, !dbg !67
  %201 = fmul float %172, %200, !dbg !68
  %202 = fmul float %196, %201, !dbg !69
  %203 = fadd float %199, %202, !dbg !70
  %204 = bitcast float %198 to i32, !dbg !51
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 2, i32 31), !dbg !51
  %206 = bitcast i32 %205 to float, !dbg !51
  %207 = bitcast float %203 to i32, !dbg !51
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 2, i32 31), !dbg !51
  %209 = bitcast i32 %208 to float, !dbg !51
  %210 = bitcast float %193 to i32, !dbg !51
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 2, i32 31), !dbg !51
  %212 = bitcast i32 %211 to float, !dbg !51
  %213 = fsub float %206, %198, !dbg !62
  %214 = fadd float %193, %212, !dbg !45
  %215 = fcmp oeq float %214, 0.000000e+00, !dbg !50
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %212, float %214) #5, !dbg !63
  %217 = select i1 %215, float 0.000000e+00, float %216, !dbg !64
  %218 = fmul float %217, %213, !dbg !65
  %219 = fadd float %198, %218, !dbg !66
  %220 = fadd float %203, %209, !dbg !71
  %221 = fmul float %213, %213, !dbg !67
  %222 = fmul float %193, %221, !dbg !68
  %223 = fmul float %217, %222, !dbg !69
  %224 = fadd float %220, %223, !dbg !70
  %225 = bitcast float %219 to i32, !dbg !51
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 1, i32 31), !dbg !51
  %227 = bitcast i32 %226 to float, !dbg !51
  %228 = bitcast float %224 to i32, !dbg !51
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 1, i32 31), !dbg !51
  %230 = bitcast i32 %229 to float, !dbg !51
  %231 = bitcast float %214 to i32, !dbg !51
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 1, i32 31), !dbg !51
  %233 = bitcast i32 %232 to float, !dbg !51
  %234 = fsub float %227, %219, !dbg !62
  %235 = fadd float %214, %233, !dbg !45
  %236 = fcmp oeq float %235, 0.000000e+00, !dbg !50
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %233, float %235) #5, !dbg !63
  %238 = select i1 %236, float 0.000000e+00, float %237, !dbg !64
  %239 = fmul float %238, %234, !dbg !65
  %240 = fadd float %219, %239, !dbg !66
  %241 = fadd float %224, %230, !dbg !71
  %242 = fmul float %234, %234, !dbg !67
  %243 = fmul float %214, %242, !dbg !68
  %244 = fmul float %238, %243, !dbg !69
  %245 = fadd float %241, %244, !dbg !70
  %246 = bitcast float %240 to <1 x i32>, !dbg !51
  %247 = extractelement <4 x i1> %86, i64 2, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %246, i1 %247) #5, !dbg !51
  %248 = bitcast float %245 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %248, i1 %247) #5, !dbg !51
  %249 = bitcast float %235 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %249, i1 %247) #5, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %250 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %77, i1 %76) #5, !dbg !51
  %251 = bitcast i32 %250 to float, !dbg !51
  %252 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %78, i1 %76) #5, !dbg !51
  %253 = bitcast i32 %252 to float, !dbg !51
  %254 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %79, i1 %76) #5, !dbg !51
  %255 = bitcast i32 %254 to float, !dbg !51
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 8, i32 31), !dbg !51
  %257 = bitcast i32 %256 to float, !dbg !51
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 8, i32 31), !dbg !51
  %259 = bitcast i32 %258 to float, !dbg !51
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 8, i32 31), !dbg !51
  %261 = bitcast i32 %260 to float, !dbg !51
  %262 = fsub float %257, %251, !dbg !62
  %263 = fadd float %255, %261, !dbg !45
  %264 = fcmp oeq float %263, 0.000000e+00, !dbg !50
  %265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %261, float %263) #5, !dbg !63
  %266 = select i1 %264, float 0.000000e+00, float %265, !dbg !64
  %267 = fmul float %262, %266, !dbg !65
  %268 = fadd float %267, %251, !dbg !66
  %269 = fadd float %253, %259, !dbg !71
  %270 = fmul float %262, %262, !dbg !67
  %271 = fmul float %270, %255, !dbg !68
  %272 = fmul float %271, %266, !dbg !69
  %273 = fadd float %269, %272, !dbg !70
  %274 = bitcast float %268 to i32, !dbg !51
  %275 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %274, i32 4, i32 31), !dbg !51
  %276 = bitcast i32 %275 to float, !dbg !51
  %277 = bitcast float %273 to i32, !dbg !51
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 4, i32 31), !dbg !51
  %279 = bitcast i32 %278 to float, !dbg !51
  %280 = bitcast float %263 to i32, !dbg !51
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 4, i32 31), !dbg !51
  %282 = bitcast i32 %281 to float, !dbg !51
  %283 = fsub float %276, %268, !dbg !62
  %284 = fadd float %263, %282, !dbg !45
  %285 = fcmp oeq float %284, 0.000000e+00, !dbg !50
  %286 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %282, float %284) #5, !dbg !63
  %287 = select i1 %285, float 0.000000e+00, float %286, !dbg !64
  %288 = fmul float %283, %287, !dbg !65
  %289 = fadd float %268, %288, !dbg !66
  %290 = fadd float %273, %279, !dbg !71
  %291 = fmul float %283, %283, !dbg !67
  %292 = fmul float %263, %291, !dbg !68
  %293 = fmul float %287, %292, !dbg !69
  %294 = fadd float %290, %293, !dbg !70
  %295 = bitcast float %289 to i32, !dbg !51
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 2, i32 31), !dbg !51
  %297 = bitcast i32 %296 to float, !dbg !51
  %298 = bitcast float %294 to i32, !dbg !51
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 2, i32 31), !dbg !51
  %300 = bitcast i32 %299 to float, !dbg !51
  %301 = bitcast float %284 to i32, !dbg !51
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 2, i32 31), !dbg !51
  %303 = bitcast i32 %302 to float, !dbg !51
  %304 = fsub float %297, %289, !dbg !62
  %305 = fadd float %284, %303, !dbg !45
  %306 = fcmp oeq float %305, 0.000000e+00, !dbg !50
  %307 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %303, float %305) #5, !dbg !63
  %308 = select i1 %306, float 0.000000e+00, float %307, !dbg !64
  %309 = fmul float %304, %308, !dbg !65
  %310 = fadd float %289, %309, !dbg !66
  %311 = fadd float %294, %300, !dbg !71
  %312 = fmul float %304, %304, !dbg !67
  %313 = fmul float %284, %312, !dbg !68
  %314 = fmul float %308, %313, !dbg !69
  %315 = fadd float %311, %314, !dbg !70
  %316 = bitcast float %310 to i32, !dbg !51
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 1, i32 31), !dbg !51
  %318 = bitcast i32 %317 to float, !dbg !51
  %319 = bitcast float %315 to i32, !dbg !51
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 1, i32 31), !dbg !51
  %321 = bitcast i32 %320 to float, !dbg !51
  %322 = bitcast float %305 to i32, !dbg !51
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 1, i32 31), !dbg !51
  %324 = bitcast i32 %323 to float, !dbg !51
  %325 = fsub float %318, %310, !dbg !62
  %326 = fadd float %305, %324, !dbg !45
  %327 = fcmp oeq float %326, 0.000000e+00, !dbg !50
  %328 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %324, float %326) #5, !dbg !63
  %329 = select i1 %327, float 0.000000e+00, float %328, !dbg !64
  %330 = fmul float %325, %329, !dbg !65
  %331 = fadd float %310, %330, !dbg !66
  %332 = fadd float %315, %321, !dbg !71
  %333 = fmul float %325, %325, !dbg !67
  %334 = fmul float %305, %333, !dbg !68
  %335 = fmul float %329, %334, !dbg !69
  %336 = fadd float %332, %335, !dbg !70
  %337 = extractelement <4 x i1> %86, i64 1, !dbg !51
  %338 = and i1 %76, %337, !dbg !51
  %339 = bitcast float %331 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %339, i1 %338) #5, !dbg !51
  %340 = bitcast float %336 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %340, i1 %338) #5, !dbg !51
  %341 = bitcast float %326 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %341, i1 %338) #5, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %342 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !51
  %343 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !51
  %344 = extractelement <4 x i1> %86, i64 0, !dbg !53
  %345 = and i1 %344, %11, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %342, ptr addrspace(1) %81, i1 %345) #5, !dbg !53
  %346 = getelementptr float, ptr addrspace(1) %5, i64 %80, !dbg !72
  %347 = bitcast float %343 to i32, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %347, ptr addrspace(1) %346, i1 %345) #5, !dbg !73
  %348 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %343, float 2.048000e+03) #5, !dbg !74
  %349 = fadd float %348, 0x3EE4F8B580000000, !dbg !75
  %350 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !76
  %.not.i = icmp eq i32 %350, 0, !dbg !76
  br i1 %.not.i, label %353, label %351, !dbg !76

351:                                              ; preds = %9
  %352 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %349), !dbg !76
  br label %__nv_rsqrtf.exit, !dbg !76

353:                                              ; preds = %9
  %354 = tail call float @llvm.nvvm.rsqrt.approx.f(float %349), !dbg !76
  br label %__nv_rsqrtf.exit, !dbg !76

__nv_rsqrtf.exit:                                 ; preds = %351, %353
  %.0.i = phi float [ %352, %351 ], [ %354, %353 ], !dbg !76
  %355 = getelementptr float, ptr addrspace(1) %6, i64 %80, !dbg !77
  %356 = bitcast float %.0.i to i32, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %356, ptr addrspace(1) %355, i1 %345) #5, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2sfknu7dsf5fzikukfdkybsa2kxeqklcapjf7k34ke4was26zkh.py", directory: "inductor_cache/2s")
!4 = !{ptr @triton_red_fused_add_cat_native_group_norm_15, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_cat_native_group_norm_15, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_cat_native_group_norm_15", linkageName: "triton_red_fused_add_cat_native_group_norm_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 35, column: 23, scope: !7)
!16 = !DILocation(line: 38, column: 49, scope: !7)
!17 = !DILocation(line: 38, column: 44, scope: !7)
!18 = !DILocation(line: 38, column: 39, scope: !7)
!19 = !DILocation(line: 38, column: 54, scope: !7)
!20 = !DILocation(line: 39, column: 22, scope: !7)
!21 = !DILocation(line: 39, column: 20, scope: !7)
!22 = !DILocation(line: 43, column: 22, scope: !7)
!23 = !DILocation(line: 44, column: 44, scope: !7)
!24 = !DILocation(line: 44, column: 63, scope: !7)
!25 = !DILocation(line: 44, column: 39, scope: !7)
!26 = !DILocation(line: 44, column: 57, scope: !7)
!27 = !DILocation(line: 44, column: 34, scope: !7)
!28 = !DILocation(line: 44, column: 83, scope: !7)
!29 = !DILocation(line: 44, column: 68, scope: !7)
!30 = !DILocation(line: 49, column: 54, scope: !7)
!31 = !DILocation(line: 49, column: 59, scope: !7)
!32 = !DILocation(line: 49, column: 45, scope: !7)
!33 = !DILocation(line: 49, column: 73, scope: !7)
!34 = !DILocation(line: 49, column: 40, scope: !7)
!35 = !DILocation(line: 49, column: 67, scope: !7)
!36 = !DILocation(line: 49, column: 35, scope: !7)
!37 = !DILocation(line: 50, column: 24, scope: !7)
!38 = !DILocation(line: 53, column: 54, scope: !7)
!39 = !DILocation(line: 53, column: 59, scope: !7)
!40 = !DILocation(line: 53, column: 45, scope: !7)
!41 = !DILocation(line: 53, column: 67, scope: !7)
!42 = !DILocation(line: 53, column: 35, scope: !7)
!43 = !DILocation(line: 53, column: 94, scope: !7)
!44 = !DILocation(line: 63, column: 66, scope: !7)
!45 = !DILocation(line: 193, column: 28, scope: !46, inlinedAt: !49)
!46 = distinct !DILexicalBlockFile(scope: !48, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!49 = !DILocation(line: 66, column: 44, scope: !7)
!50 = !DILocation(line: 194, column: 39, scope: !46, inlinedAt: !49)
!51 = !DILocation(line: 204, column: 46, scope: !48, inlinedAt: !49)
!52 = !DILocation(line: 71, column: 25, scope: !7)
!53 = !DILocation(line: 71, column: 37, scope: !7)
!54 = !DILocation(line: 49, column: 93, scope: !7)
!55 = !DILocation(line: 49, column: 78, scope: !7)
!56 = !DILocation(line: 53, column: 78, scope: !7)
!57 = !DILocation(line: 54, column: 38, scope: !7)
!58 = !DILocation(line: 55, column: 37, scope: !7)
!59 = !DILocation(line: 56, column: 24, scope: !7)
!60 = !DILocation(line: 61, column: 62, scope: !7)
!61 = !DILocation(line: 64, column: 54, scope: !7)
!62 = !DILocation(line: 192, column: 21, scope: !46, inlinedAt: !49)
!63 = !DILocation(line: 194, column: 60, scope: !46, inlinedAt: !49)
!64 = !DILocation(line: 194, column: 49, scope: !46, inlinedAt: !49)
!65 = !DILocation(line: 196, column: 25, scope: !46, inlinedAt: !49)
!66 = !DILocation(line: 196, column: 17, scope: !46, inlinedAt: !49)
!67 = !DILocation(line: 197, column: 30, scope: !46, inlinedAt: !49)
!68 = !DILocation(line: 197, column: 38, scope: !46, inlinedAt: !49)
!69 = !DILocation(line: 197, column: 49, scope: !46, inlinedAt: !49)
!70 = !DILocation(line: 197, column: 22, scope: !46, inlinedAt: !49)
!71 = !DILocation(line: 197, column: 15, scope: !46, inlinedAt: !49)
!72 = !DILocation(line: 72, column: 25, scope: !7)
!73 = !DILocation(line: 72, column: 37, scope: !7)
!74 = !DILocation(line: 74, column: 20, scope: !7)
!75 = !DILocation(line: 76, column: 20, scope: !7)
!76 = !DILocation(line: 77, column: 28, scope: !7)
!77 = !DILocation(line: 78, column: 25, scope: !7)
!78 = !DILocation(line: 78, column: 37, scope: !7)
!79 = !DILocation(line: 78, column: 4, scope: !7)
