; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_50(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, i32 %18) local_unnamed_addr !dbg !7 {
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %21 = shl i32 %20, 8, !dbg !11
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %23 = shl i32 %22, 1, !dbg !12
  %24 = and i32 %23, 254, !dbg !12
  %25 = or disjoint i32 %21, %24, !dbg !13
  %26 = icmp slt i32 %25, 512, !dbg !14
  %27 = sdiv i32 %25, 4, !dbg !15
  %28 = srem i32 %27, 32, !dbg !16
  %29 = sext i32 %25 to i64, !dbg !17
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !17
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %26) #3, !dbg !18
  %32 = sext i32 %28 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !19
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %26) #3, !dbg !20
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %26) #3, !dbg !20
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !21
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %26) #3, !dbg !22
  %38 = bitcast i32 %37 to float, !dbg !22
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %26) #3, !dbg !22
  %40 = bitcast i32 %39 to float, !dbg !22
  %41 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !23
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %26) #3, !dbg !24
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %26) #3, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !25
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %26) #3, !dbg !26
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %26) #3, !dbg !26
  %47 = getelementptr float, ptr addrspace(1) %6, i64 %29, !dbg !27
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 %26) #3, !dbg !28
  %49 = getelementptr float, ptr addrspace(1) %7, i64 %32, !dbg !29
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %26) #3, !dbg !30
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %26) #3, !dbg !30
  %52 = getelementptr float, ptr addrspace(1) %8, i64 %32, !dbg !31
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %26) #3, !dbg !32
  %54 = bitcast i32 %53 to float, !dbg !32
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %26) #3, !dbg !32
  %56 = bitcast i32 %55 to float, !dbg !32
  %57 = getelementptr float, ptr addrspace(1) %9, i64 %32, !dbg !33
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %26) #3, !dbg !34
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %26) #3, !dbg !34
  %60 = getelementptr float, ptr addrspace(1) %10, i64 %32, !dbg !35
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %26) #3, !dbg !36
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %26) #3, !dbg !36
  %63 = getelementptr float, ptr addrspace(1) %11, i64 %29, !dbg !37
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %63, i1 %26) #3, !dbg !38
  %65 = getelementptr float, ptr addrspace(1) %12, i64 %32, !dbg !39
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %26) #3, !dbg !40
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %26) #3, !dbg !40
  %68 = getelementptr float, ptr addrspace(1) %13, i64 %32, !dbg !41
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %26) #3, !dbg !42
  %70 = bitcast i32 %69 to float, !dbg !42
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %26) #3, !dbg !42
  %72 = bitcast i32 %71 to float, !dbg !42
  %73 = getelementptr float, ptr addrspace(1) %14, i64 %32, !dbg !43
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %26) #3, !dbg !44
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %26) #3, !dbg !44
  %76 = getelementptr float, ptr addrspace(1) %15, i64 %32, !dbg !45
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %26) #3, !dbg !46
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %26) #3, !dbg !46
  %79 = getelementptr float, ptr addrspace(1) %16, i64 %29, !dbg !47
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %79, i1 %26) #3, !dbg !48
  %81 = fadd float %38, 0x3EE4F8B580000000, !dbg !49
  %82 = fadd float %40, 0x3EE4F8B580000000, !dbg !49
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i = icmp eq i32 %83, 0, !dbg !50
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i = icmp eq i32 %84, 0, !dbg !50
  br i1 %.not.i, label %90, label %85, !dbg !50

85:                                               ; preds = %19
  br i1 %.not1.i, label %88, label %86, !dbg !50

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

90:                                               ; preds = %19
  br i1 %.not1.i, label %93, label %91, !dbg !50

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

__nv_sqrtf.exit:                                  ; preds = %86, %88, %91, %93
  %.0.i = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !50
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i1 = icmp eq i32 %95, 0, !dbg !50
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i4 = icmp eq i32 %96, 0, !dbg !50
  br i1 %.not.i1, label %102, label %97, !dbg !50

97:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %100, label %98, !dbg !50

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

102:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %105, label %103, !dbg !50

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

__nv_sqrtf.exit5:                                 ; preds = %98, %100, %103, %105
  %.0.i3 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !50
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !51
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !51
  %109 = fadd float %54, 0x3EE4F8B580000000, !dbg !52
  %110 = fadd float %56, 0x3EE4F8B580000000, !dbg !52
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i6 = icmp eq i32 %111, 0, !dbg !53
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i9 = icmp eq i32 %112, 0, !dbg !53
  br i1 %.not.i6, label %118, label %113, !dbg !53

113:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %116, label %114, !dbg !53

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %109) #3, !dbg !53
  br label %__nv_sqrtf.exit10, !dbg !53

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %109) #3, !dbg !53
  br label %__nv_sqrtf.exit10, !dbg !53

118:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %121, label %119, !dbg !53

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %109) #3, !dbg !53
  br label %__nv_sqrtf.exit10, !dbg !53

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %109) #3, !dbg !53
  br label %__nv_sqrtf.exit10, !dbg !53

__nv_sqrtf.exit10:                                ; preds = %114, %116, %119, %121
  %.0.i8 = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !53
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i11 = icmp eq i32 %123, 0, !dbg !53
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i14 = icmp eq i32 %124, 0, !dbg !53
  br i1 %.not.i11, label %130, label %125, !dbg !53

125:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %128, label %126, !dbg !53

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %110) #3, !dbg !53
  br label %__nv_sqrtf.exit15, !dbg !53

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %110) #3, !dbg !53
  br label %__nv_sqrtf.exit15, !dbg !53

130:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %133, label %131, !dbg !53

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.f(float %110) #3, !dbg !53
  br label %__nv_sqrtf.exit15, !dbg !53

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.f(float %110) #3, !dbg !53
  br label %__nv_sqrtf.exit15, !dbg !53

__nv_sqrtf.exit15:                                ; preds = %126, %128, %131, %133
  %.0.i13 = phi float [ %127, %126 ], [ %129, %128 ], [ %132, %131 ], [ %134, %133 ], !dbg !53
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !54
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !54
  %137 = fadd float %70, 0x3EE4F8B580000000, !dbg !55
  %138 = fadd float %72, 0x3EE4F8B580000000, !dbg !55
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i16 = icmp eq i32 %139, 0, !dbg !56
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !56
  %.not1.i19 = icmp eq i32 %140, 0, !dbg !56
  br i1 %.not.i16, label %146, label %141, !dbg !56

141:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %144, label %142, !dbg !56

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %137) #3, !dbg !56
  br label %__nv_sqrtf.exit20, !dbg !56

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %137) #3, !dbg !56
  br label %__nv_sqrtf.exit20, !dbg !56

146:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %149, label %147, !dbg !56

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.f(float %137) #3, !dbg !56
  br label %__nv_sqrtf.exit20, !dbg !56

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.f(float %137) #3, !dbg !56
  br label %__nv_sqrtf.exit20, !dbg !56

__nv_sqrtf.exit20:                                ; preds = %142, %144, %147, %149
  %.0.i18 = phi float [ %143, %142 ], [ %145, %144 ], [ %148, %147 ], [ %150, %149 ], !dbg !56
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i21 = icmp eq i32 %151, 0, !dbg !56
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !56
  %.not1.i24 = icmp eq i32 %152, 0, !dbg !56
  br i1 %.not.i21, label %158, label %153, !dbg !56

153:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %156, label %154, !dbg !56

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %138) #3, !dbg !56
  br label %__nv_sqrtf.exit25, !dbg !56

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %138) #3, !dbg !56
  br label %__nv_sqrtf.exit25, !dbg !56

158:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %161, label %159, !dbg !56

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.f(float %138) #3, !dbg !56
  br label %__nv_sqrtf.exit25, !dbg !56

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.f(float %138) #3, !dbg !56
  br label %__nv_sqrtf.exit25, !dbg !56

__nv_sqrtf.exit25:                                ; preds = %154, %156, %159, %161
  %.0.i23 = phi float [ %155, %154 ], [ %157, %156 ], [ %160, %159 ], [ %162, %161 ], !dbg !56
  %163 = extractvalue { i32, i32 } %64, 1, !dbg !38
  %164 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !20
  %165 = insertelement <2 x i32> %164, i32 %67, i64 1, !dbg !20
  %166 = bitcast <2 x i32> %165 to <2 x float>, !dbg !20
  %167 = extractvalue { i32, i32 } %64, 0, !dbg !38
  %168 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !20
  %169 = insertelement <2 x i32> %168, i32 %66, i64 1, !dbg !20
  %170 = bitcast <2 x i32> %169 to <2 x float>, !dbg !20
  %171 = extractvalue { i32, i32 } %31, 1, !dbg !18
  %172 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !24
  %173 = insertelement <2 x i32> %172, i32 %75, i64 1, !dbg !24
  %174 = bitcast <2 x i32> %173 to <2 x float>, !dbg !24
  %175 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !26
  %176 = insertelement <2 x i32> %175, i32 %78, i64 1, !dbg !26
  %177 = bitcast <2 x i32> %176 to <2 x float>, !dbg !26
  %178 = extractvalue { i32, i32 } %48, 1, !dbg !28
  %179 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !30
  %180 = insertelement <2 x i32> %179, i32 %51, i64 1, !dbg !30
  %181 = bitcast <2 x i32> %180 to <2 x float>, !dbg !30
  %182 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !34
  %183 = insertelement <2 x i32> %182, i32 %59, i64 1, !dbg !34
  %184 = bitcast <2 x i32> %183 to <2 x float>, !dbg !34
  %185 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !36
  %186 = insertelement <2 x i32> %185, i32 %62, i64 1, !dbg !36
  %187 = bitcast <2 x i32> %186 to <2 x float>, !dbg !36
  %188 = extractvalue { i32, i32 } %31, 0, !dbg !18
  %189 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !24
  %190 = insertelement <2 x i32> %189, i32 %74, i64 1, !dbg !24
  %191 = bitcast <2 x i32> %190 to <2 x float>, !dbg !24
  %192 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !26
  %193 = insertelement <2 x i32> %192, i32 %77, i64 1, !dbg !26
  %194 = bitcast <2 x i32> %193 to <2 x float>, !dbg !26
  %195 = extractvalue { i32, i32 } %48, 0, !dbg !28
  %196 = insertelement <2 x i32> poison, i32 %195, i64 0, !dbg !28
  %197 = insertelement <2 x i32> %196, i32 %178, i64 1, !dbg !28
  %198 = bitcast <2 x i32> %197 to <2 x float>, !dbg !28
  %199 = extractvalue { i32, i32 } %80, 1, !dbg !48
  %200 = extractvalue { i32, i32 } %80, 0, !dbg !48
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !57
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !57
  %203 = insertelement <2 x i32> poison, i32 %188, i64 0, !dbg !18
  %204 = insertelement <2 x i32> %203, i32 %167, i64 1, !dbg !18
  %205 = bitcast <2 x i32> %204 to <2 x float>, !dbg !18
  %206 = fsub <2 x float> %205, %170, !dbg !58
  %207 = insertelement <2 x float> poison, float %107, i64 0, !dbg !59
  %208 = insertelement <2 x float> %207, float %201, i64 1, !dbg !59
  %209 = fmul <2 x float> %206, %208, !dbg !59
  %210 = fmul <2 x float> %209, %191, !dbg !60
  %211 = fadd <2 x float> %210, %194, !dbg !61
  %212 = insertelement <2 x i32> poison, i32 %171, i64 0, !dbg !18
  %213 = insertelement <2 x i32> %212, i32 %163, i64 1, !dbg !18
  %214 = bitcast <2 x i32> %213 to <2 x float>, !dbg !18
  %215 = fsub <2 x float> %214, %166, !dbg !58
  %216 = insertelement <2 x float> poison, float %108, i64 0, !dbg !59
  %217 = insertelement <2 x float> %216, float %202, i64 1, !dbg !59
  %218 = fmul <2 x float> %215, %217, !dbg !59
  %219 = fmul <2 x float> %218, %174, !dbg !60
  %220 = fadd <2 x float> %219, %177, !dbg !61
  %221 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !62
  %222 = getelementptr i1, ptr addrspace(1) %17, i64 %29, !dbg !63
  %223 = fsub <2 x float> %198, %181, !dbg !64
  %224 = insertelement <2 x float> poison, float %135, i64 0, !dbg !65
  %225 = insertelement <2 x float> %224, float %136, i64 1, !dbg !65
  %226 = fmul <2 x float> %223, %225, !dbg !65
  %227 = fmul <2 x float> %226, %184, !dbg !66
  %228 = fadd <2 x float> %227, %187, !dbg !67
  %229 = insertelement <2 x i32> poison, i32 %200, i64 0, !dbg !48
  %230 = insertelement <2 x i32> %229, i32 %199, i64 1, !dbg !48
  %231 = bitcast <2 x i32> %230 to <2 x float>, !dbg !48
  %232 = shufflevector <2 x float> %211, <2 x float> %220, <2 x i32> <i32 0, i32 2>, !dbg !68
  %233 = fadd <2 x float> %232, %228, !dbg !68
  %234 = shufflevector <2 x float> %211, <2 x float> %220, <2 x i32> <i32 1, i32 3>, !dbg !69
  %235 = fadd <2 x float> %233, %234, !dbg !69
  %236 = fadd <2 x float> %235, %231, !dbg !70
  %237 = fcmp olt <2 x float> %236, zeroinitializer, !dbg !71
  %238 = select <2 x i1> %237, <2 x float> zeroinitializer, <2 x float> %236, !dbg !75
  %239 = fcmp ole <2 x float> %238, zeroinitializer, !dbg !76
  %bc = bitcast <2 x float> %238 to <2 x i32>, !dbg !77
  %240 = extractelement <2 x i32> %bc, i64 0, !dbg !77
  %bc26 = bitcast <2 x float> %238 to <2 x i32>, !dbg !77
  %241 = extractelement <2 x i32> %bc26, i64 1, !dbg !77
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %240, i32 %241, ptr addrspace(1) %221, i1 %26) #3, !dbg !77
  %242 = zext <2 x i1> %239 to <2 x i8>, !dbg !78
  %243 = bitcast <2 x i8> %242 to i16, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %243, ptr addrspace(1) %222, i1 %26) #3, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuu6ur23jnvm4a5aboxedsumhmj5s56wlx46lwty4na7eblhqrfe.py", directory: "inductor_cache/uu")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_50, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_50, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_50", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_50", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 26, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 31, scope: !7)
!24 = !DILocation(line: 29, column: 36, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 33, column: 31, scope: !7)
!32 = !DILocation(line: 33, column: 36, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 32, scope: !7)
!38 = !DILocation(line: 36, column: 37, scope: !7)
!39 = !DILocation(line: 37, column: 32, scope: !7)
!40 = !DILocation(line: 37, column: 37, scope: !7)
!41 = !DILocation(line: 38, column: 32, scope: !7)
!42 = !DILocation(line: 38, column: 37, scope: !7)
!43 = !DILocation(line: 39, column: 32, scope: !7)
!44 = !DILocation(line: 39, column: 37, scope: !7)
!45 = !DILocation(line: 40, column: 32, scope: !7)
!46 = !DILocation(line: 40, column: 37, scope: !7)
!47 = !DILocation(line: 41, column: 32, scope: !7)
!48 = !DILocation(line: 41, column: 37, scope: !7)
!49 = !DILocation(line: 44, column: 18, scope: !7)
!50 = !DILocation(line: 45, column: 26, scope: !7)
!51 = !DILocation(line: 47, column: 18, scope: !7)
!52 = !DILocation(line: 54, column: 20, scope: !7)
!53 = !DILocation(line: 55, column: 27, scope: !7)
!54 = !DILocation(line: 56, column: 19, scope: !7)
!55 = !DILocation(line: 63, column: 20, scope: !7)
!56 = !DILocation(line: 64, column: 27, scope: !7)
!57 = !DILocation(line: 65, column: 19, scope: !7)
!58 = !DILocation(line: 42, column: 18, scope: !7)
!59 = !DILocation(line: 50, column: 19, scope: !7)
!60 = !DILocation(line: 51, column: 20, scope: !7)
!61 = !DILocation(line: 52, column: 20, scope: !7)
!62 = !DILocation(line: 76, column: 28, scope: !7)
!63 = !DILocation(line: 77, column: 25, scope: !7)
!64 = !DILocation(line: 53, column: 20, scope: !7)
!65 = !DILocation(line: 58, column: 20, scope: !7)
!66 = !DILocation(line: 59, column: 20, scope: !7)
!67 = !DILocation(line: 60, column: 20, scope: !7)
!68 = !DILocation(line: 61, column: 20, scope: !7)
!69 = !DILocation(line: 70, column: 20, scope: !7)
!70 = !DILocation(line: 71, column: 20, scope: !7)
!71 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !74)
!72 = distinct !DILexicalBlockFile(scope: !7, file: !73, discriminator: 0)
!73 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!74 = !DILocation(line: 73, column: 42, scope: !7)
!75 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !74)
!76 = !DILocation(line: 75, column: 21, scope: !7)
!77 = !DILocation(line: 76, column: 40, scope: !7)
!78 = !DILocation(line: 77, column: 37, scope: !7)
!79 = !DILocation(line: 77, column: 4, scope: !7)
