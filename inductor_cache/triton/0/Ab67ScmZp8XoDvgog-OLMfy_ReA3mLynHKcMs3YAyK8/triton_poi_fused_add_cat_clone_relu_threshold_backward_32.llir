; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_cat_clone_relu_threshold_backward_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %17 = shl i32 %16, 8, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = and i32 %18, 127, !dbg !12
  %20 = or disjoint i32 %19, 128, !dbg !12
  %21 = shl i32 %18, 1, !dbg !12
  %22 = and i32 %21, 254, !dbg !12
  %23 = or disjoint i32 %17, %19, !dbg !13
  %24 = or disjoint i32 %17, %20, !dbg !13
  %25 = or disjoint i32 %17, %22, !dbg !13
  %26 = icmp slt i32 %23, 512, !dbg !14
  %27 = icmp slt i32 %24, 512, !dbg !14
  %28 = icmp slt i32 %25, 512, !dbg !14
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %30 = icmp slt i32 %29, 64, !dbg !16
  %.frozen = freeze i32 %25, !dbg !17
  %31 = sdiv i32 %.frozen, 128, !dbg !17
  %32 = mul i32 %31, 128, !dbg !18
  %.decomposed = sub i32 %.frozen, %32, !dbg !18
  %33 = shl i32 %23, 6, !dbg !19
  %34 = shl i32 %24, 6, !dbg !19
  %35 = add i32 %33, %29, !dbg !20
  %36 = add i32 %34, %29, !dbg !20
  %37 = sext i32 %35 to i64, !dbg !21
  %38 = getelementptr float, ptr addrspace(1) %10, i64 %37, !dbg !21
  %39 = sext i32 %36 to i64, !dbg !21
  %40 = getelementptr float, ptr addrspace(1) %10, i64 %39, !dbg !21
  %41 = and i1 %30, %26, !dbg !22
  %42 = and i1 %30, %27, !dbg !22
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %41) #4, !dbg !23
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %42) #4, !dbg !23
  %45 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !23
  %46 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %46, i1 true) #4, !dbg !23
  %47 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %20, !dbg !23
  %48 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %48, i1 true) #4, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %49 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %22, !dbg !23
  %50 = load <2 x float>, ptr addrspace(3) %49, align 8, !dbg !23
  %51 = icmp slt i32 %.decomposed, 64, !dbg !24
  %52 = shl i32 %29, 6, !dbg !25
  %53 = shl i32 %31, 12, !dbg !26
  %54 = add i32 %53, %52, !dbg !27
  %55 = add i32 %54, %.decomposed, !dbg !28
  %56 = sext i32 %55 to i64, !dbg !29
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !29
  %58 = and i1 %30, %51, !dbg !30
  %59 = and i1 %28, %58, !dbg !31
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %57, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #4, !dbg !32
  %61 = sext i32 %.decomposed to i64, !dbg !33
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !33
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %62, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #4, !dbg !34
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !35
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %64, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #4, !dbg !36
  %66 = extractvalue { i32, i32 } %65, 0, !dbg !36
  %67 = extractvalue { i32, i32 } %65, 1, !dbg !36
  %68 = bitcast i32 %66 to float, !dbg !36
  %69 = bitcast i32 %67 to float, !dbg !36
  %70 = fadd float %68, 0x3EE4F8B580000000, !dbg !37
  %71 = fadd float %69, 0x3EE4F8B580000000, !dbg !37
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %72, 0, !dbg !38
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %73, 0, !dbg !38
  br i1 %.not.i, label %79, label %74, !dbg !38

74:                                               ; preds = %15
  br i1 %.not1.i, label %77, label %75, !dbg !38

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

79:                                               ; preds = %15
  br i1 %.not1.i, label %82, label %80, !dbg !38

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %75, %77, %80, %82
  %.0.i = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !38
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i4 = icmp eq i32 %84, 0, !dbg !38
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i7 = icmp eq i32 %85, 0, !dbg !38
  br i1 %.not.i4, label %91, label %86, !dbg !38

86:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %89, label %87, !dbg !38

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !38
  br label %__nv_sqrtf.exit8, !dbg !38

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !38
  br label %__nv_sqrtf.exit8, !dbg !38

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %94, label %92, !dbg !38

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !38
  br label %__nv_sqrtf.exit8, !dbg !38

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !38
  br label %__nv_sqrtf.exit8, !dbg !38

__nv_sqrtf.exit8:                                 ; preds = %87, %89, %92, %94
  %.0.i6 = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !38
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #4, !dbg !39
  %98 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !40
  %99 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %98, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #4, !dbg !41
  %100 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !42
  %101 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %100, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #4, !dbg !43
  %102 = icmp sgt i32 %.decomposed, 63, !dbg !44
  %103 = add nsw i32 %.decomposed, -64, !dbg !45
  %104 = add i32 %54, %103, !dbg !46
  %105 = sext i32 %104 to i64, !dbg !47
  %106 = getelementptr float, ptr addrspace(1) %5, i64 %105, !dbg !47
  %107 = and i1 %30, %102, !dbg !48
  %108 = and i1 %28, %107, !dbg !49
  %109 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %106, i1 %108, i32 0, i1 %108, i32 0, i1 %108) #4, !dbg !50
  %110 = sext i32 %103 to i64, !dbg !51
  %111 = getelementptr float, ptr addrspace(1) %6, i64 %110, !dbg !51
  %112 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %111, i1 %108, i32 0, i1 %108, i32 0, i1 %108) #4, !dbg !52
  %113 = getelementptr float, ptr addrspace(1) %7, i64 %110, !dbg !53
  %114 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %113, i1 %108, i32 0, i1 %108, i32 0, i1 %108) #4, !dbg !54
  %115 = extractvalue { i32, i32 } %114, 0, !dbg !54
  %116 = extractvalue { i32, i32 } %114, 1, !dbg !54
  %117 = bitcast i32 %115 to float, !dbg !54
  %118 = bitcast i32 %116 to float, !dbg !54
  %119 = fadd float %117, 0x3EE4F8B580000000, !dbg !55
  %120 = fadd float %118, 0x3EE4F8B580000000, !dbg !55
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !56
  %.not.i9 = icmp eq i32 %121, 0, !dbg !56
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !56
  %.not1.i12 = icmp eq i32 %122, 0, !dbg !56
  br i1 %.not.i9, label %128, label %123, !dbg !56

123:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %126, label %124, !dbg !56

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %119) #4, !dbg !56
  br label %__nv_sqrtf.exit13, !dbg !56

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %119) #4, !dbg !56
  br label %__nv_sqrtf.exit13, !dbg !56

128:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %131, label %129, !dbg !56

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %119) #4, !dbg !56
  br label %__nv_sqrtf.exit13, !dbg !56

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %119) #4, !dbg !56
  br label %__nv_sqrtf.exit13, !dbg !56

__nv_sqrtf.exit13:                                ; preds = %124, %126, %129, %131
  %.0.i11 = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !56
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !56
  %.not.i14 = icmp eq i32 %133, 0, !dbg !56
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !56
  %.not1.i17 = icmp eq i32 %134, 0, !dbg !56
  br i1 %.not.i14, label %140, label %135, !dbg !56

135:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %138, label %136, !dbg !56

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #4, !dbg !56
  br label %__nv_sqrtf.exit18, !dbg !56

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #4, !dbg !56
  br label %__nv_sqrtf.exit18, !dbg !56

140:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %143, label %141, !dbg !56

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #4, !dbg !56
  br label %__nv_sqrtf.exit18, !dbg !56

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #4, !dbg !56
  br label %__nv_sqrtf.exit18, !dbg !56

__nv_sqrtf.exit18:                                ; preds = %136, %138, %141, %143
  %.0.i16 = phi float [ %137, %136 ], [ %139, %138 ], [ %142, %141 ], [ %144, %143 ], !dbg !56
  %145 = extractvalue { i32, i32 } %109, 1, !dbg !50
  %146 = extractvalue { i32, i32 } %112, 1, !dbg !52
  %147 = extractvalue { i32, i32 } %109, 0, !dbg !50
  %148 = extractvalue { i32, i32 } %112, 0, !dbg !52
  %149 = insertelement <2 x i32> poison, i32 %147, i64 0, !dbg !50
  %150 = insertelement <2 x i32> %149, i32 %145, i64 1, !dbg !50
  %151 = bitcast <2 x i32> %150 to <2 x float>, !dbg !50
  %152 = insertelement <2 x i32> poison, i32 %148, i64 0, !dbg !52
  %153 = insertelement <2 x i32> %152, i32 %146, i64 1, !dbg !52
  %154 = bitcast <2 x i32> %153 to <2 x float>, !dbg !52
  %155 = fsub <2 x float> %151, %154, !dbg !57
  %156 = extractvalue { i32, i32 } %60, 1, !dbg !32
  %157 = extractvalue { i32, i32 } %63, 1, !dbg !34
  %158 = extractvalue { i32, i32 } %99, 1, !dbg !41
  %159 = extractvalue { i32, i32 } %101, 1, !dbg !43
  %160 = extractvalue { i32, i32 } %60, 0, !dbg !32
  %161 = extractvalue { i32, i32 } %63, 0, !dbg !34
  %162 = insertelement <2 x i32> poison, i32 %160, i64 0, !dbg !32
  %163 = insertelement <2 x i32> %162, i32 %156, i64 1, !dbg !32
  %164 = bitcast <2 x i32> %163 to <2 x float>, !dbg !32
  %165 = insertelement <2 x i32> poison, i32 %161, i64 0, !dbg !34
  %166 = insertelement <2 x i32> %165, i32 %157, i64 1, !dbg !34
  %167 = bitcast <2 x i32> %166 to <2 x float>, !dbg !34
  %168 = fsub <2 x float> %164, %167, !dbg !58
  %169 = extractvalue { i32, i32 } %99, 0, !dbg !41
  %170 = extractvalue { i32, i32 } %101, 0, !dbg !43
  %171 = and i1 %30, %28, !dbg !22
  %.frozen19 = freeze i32 %24, !dbg !59
  %172 = sdiv i32 %.frozen19, 64, !dbg !59
  %173 = srem i32 %172, 2, !dbg !60
  %.frozen21 = freeze i32 %23, !dbg !59
  %174 = sdiv i32 %.frozen21, 64, !dbg !59
  %175 = srem i32 %174, 2, !dbg !60
  %176 = mul i32 %172, 64, !dbg !61
  %.decomposed20 = sub i32 %.frozen19, %176, !dbg !61
  %177 = mul i32 %174, 64, !dbg !61
  %.decomposed22 = sub i32 %.frozen21, %177, !dbg !61
  %178 = sdiv i32 %24, 128, !dbg !17
  %179 = sdiv i32 %23, 128, !dbg !17
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #4, !dbg !62
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #4, !dbg !62
  %182 = getelementptr float, ptr addrspace(1) %8, i64 %110, !dbg !63
  %183 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %182, i1 %108, i32 0, i1 %108, i32 0, i1 %108) #4, !dbg !64
  %184 = extractvalue { i32, i32 } %183, 0, !dbg !64
  %185 = extractvalue { i32, i32 } %183, 1, !dbg !64
  %186 = getelementptr float, ptr addrspace(1) %9, i64 %110, !dbg !65
  %187 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %186, i1 %108, i32 0, i1 %108, i32 0, i1 %108) #4, !dbg !66
  %188 = extractvalue { i32, i32 } %187, 0, !dbg !66
  %189 = extractvalue { i32, i32 } %187, 1, !dbg !66
  %190 = shl nsw i32 %175, 6, !dbg !67
  %191 = shl nsw i32 %173, 6, !dbg !67
  %192 = shl nsw i32 %.decomposed22, 7, !dbg !68
  %193 = shl nsw i32 %.decomposed20, 7, !dbg !68
  %194 = shl i32 %179, 13, !dbg !69
  %195 = shl i32 %178, 13, !dbg !69
  %196 = shl i32 %31, 13, !dbg !69
  %197 = add i32 %192, %29, !dbg !70
  %198 = add i32 %197, %194, !dbg !71
  %199 = add i32 %198, %190, !dbg !72
  %200 = add i32 %193, %29, !dbg !70
  %201 = add i32 %200, %195, !dbg !71
  %202 = add i32 %201, %191, !dbg !72
  %203 = sext i32 %199 to i64, !dbg !73
  %204 = getelementptr float, ptr addrspace(1) %11, i64 %203, !dbg !73
  %205 = sext i32 %202 to i64, !dbg !73
  %206 = getelementptr float, ptr addrspace(1) %11, i64 %205, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %.idx = shl nuw nsw i32 %22, 3, !dbg !74
  %207 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !74
  %208 = shl nuw nsw i32 %22, 1, !dbg !74
  %209 = or disjoint i32 %208, 2, !dbg !74
  %210 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %209, !dbg !74
  %.idx2 = shl nuw nsw i32 %19, 3, !dbg !74
  %211 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !74
  %.idx3 = shl nuw nsw i32 %20, 3, !dbg !74
  %212 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !74
  %213 = shl i32 %29, 7, !dbg !75
  %214 = add i32 %.decomposed, %213, !dbg !76
  %215 = add i32 %214, %196, !dbg !77
  %216 = sext i32 %215 to i64, !dbg !78
  %217 = getelementptr i1, ptr addrspace(1) %12, i64 %216, !dbg !78
  %218 = insertelement <2 x float> poison, float %96, i64 0, !dbg !79
  %219 = insertelement <2 x float> %218, float %97, i64 1, !dbg !79
  %220 = fmul <2 x float> %168, %219, !dbg !79
  %221 = insertelement <2 x i32> poison, i32 %169, i64 0, !dbg !41
  %222 = insertelement <2 x i32> %221, i32 %158, i64 1, !dbg !41
  %223 = bitcast <2 x i32> %222 to <2 x float>, !dbg !41
  %224 = fmul <2 x float> %220, %223, !dbg !80
  %225 = insertelement <2 x i32> poison, i32 %170, i64 0, !dbg !43
  %226 = insertelement <2 x i32> %225, i32 %159, i64 1, !dbg !43
  %227 = bitcast <2 x i32> %226 to <2 x float>, !dbg !43
  %228 = fadd <2 x float> %224, %227, !dbg !81
  %229 = fcmp olt <2 x float> %228, zeroinitializer, !dbg !82
  %230 = select <2 x i1> %229, <2 x float> zeroinitializer, <2 x float> %228, !dbg !86
  %231 = insertelement <2 x float> poison, float %180, i64 0, !dbg !87
  %232 = insertelement <2 x float> %231, float %181, i64 1, !dbg !87
  %233 = fmul <2 x float> %155, %232, !dbg !87
  %234 = insertelement <2 x i32> poison, i32 %184, i64 0, !dbg !64
  %235 = insertelement <2 x i32> %234, i32 %185, i64 1, !dbg !64
  %236 = bitcast <2 x i32> %235 to <2 x float>, !dbg !64
  %237 = fmul <2 x float> %233, %236, !dbg !88
  %238 = insertelement <2 x i32> poison, i32 %188, i64 0, !dbg !66
  %239 = insertelement <2 x i32> %238, i32 %189, i64 1, !dbg !66
  %240 = bitcast <2 x i32> %239 to <2 x float>, !dbg !66
  %241 = fadd <2 x float> %237, %240, !dbg !89
  %242 = fcmp olt <2 x float> %241, zeroinitializer, !dbg !90
  %243 = select <2 x i1> %242, <2 x float> zeroinitializer, <2 x float> %241, !dbg !92
  %244 = insertelement <2 x i1> poison, i1 %51, i64 0, !dbg !93
  %245 = shufflevector <2 x i1> %244, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !93
  %246 = select <2 x i1> %245, <2 x float> %230, <2 x float> %243, !dbg !93
  %247 = fadd <2 x float> %50, %246, !dbg !94
  %248 = fcmp olt <2 x float> %247, zeroinitializer, !dbg !95
  %249 = select <2 x i1> %248, <2 x float> zeroinitializer, <2 x float> %247, !dbg !97
  %250 = fcmp ole <2 x float> %249, zeroinitializer, !dbg !98
  %251 = extractelement <2 x float> %249, i64 0, !dbg !74
  %252 = bitcast float %251 to <1 x i32>, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %207, <1 x i32> %252, i1 true) #4, !dbg !74
  %253 = extractelement <2 x float> %249, i64 1, !dbg !74
  %254 = bitcast float %253 to <1 x i32>, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %254, i1 true) #4, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %255 = load i32, ptr addrspace(3) %211, align 8, !dbg !74
  %256 = load i32, ptr addrspace(3) %212, align 8, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %255, ptr addrspace(1) %204, i1 %41) #4, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %256, ptr addrspace(1) %206, i1 %42) #4, !dbg !74
  %257 = zext <2 x i1> %250 to <2 x i8>, !dbg !99
  %258 = bitcast <2 x i8> %257 to i16, !dbg !99
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %258, ptr addrspace(1) %217, i1 %171) #4, !dbg !99
  ret void, !dbg !100
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cclf6fdsfcrwu3ednodpbznmvyyu6wqyv2prfe7bbqfdrpfnb64y.py", directory: "inductor_cache/cl")
!4 = !{ptr @triton_poi_fused_add_cat_clone_relu_threshold_backward_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_cat_clone_relu_threshold_backward_32, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_cat_clone_relu_threshold_backward_32", linkageName: "triton_poi_fused_add_cat_clone_relu_threshold_backward_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 34, column: 40, scope: !7)
!20 = !DILocation(line: 34, column: 37, scope: !7)
!21 = !DILocation(line: 34, column: 32, scope: !7)
!22 = !DILocation(line: 34, column: 53, scope: !7)
!23 = !DILocation(line: 34, column: 45, scope: !7)
!24 = !DILocation(line: 39, column: 18, scope: !7)
!25 = !DILocation(line: 40, column: 33, scope: !7)
!26 = !DILocation(line: 40, column: 43, scope: !7)
!27 = !DILocation(line: 40, column: 38, scope: !7)
!28 = !DILocation(line: 40, column: 49, scope: !7)
!29 = !DILocation(line: 40, column: 30, scope: !7)
!30 = !DILocation(line: 40, column: 62, scope: !7)
!31 = !DILocation(line: 40, column: 70, scope: !7)
!32 = !DILocation(line: 40, column: 55, scope: !7)
!33 = !DILocation(line: 41, column: 30, scope: !7)
!34 = !DILocation(line: 41, column: 70, scope: !7)
!35 = !DILocation(line: 43, column: 30, scope: !7)
!36 = !DILocation(line: 43, column: 70, scope: !7)
!37 = !DILocation(line: 45, column: 19, scope: !7)
!38 = !DILocation(line: 46, column: 27, scope: !7)
!39 = !DILocation(line: 48, column: 20, scope: !7)
!40 = !DILocation(line: 52, column: 31, scope: !7)
!41 = !DILocation(line: 52, column: 71, scope: !7)
!42 = !DILocation(line: 54, column: 31, scope: !7)
!43 = !DILocation(line: 54, column: 71, scope: !7)
!44 = !DILocation(line: 60, column: 20, scope: !7)
!45 = !DILocation(line: 63, column: 58, scope: !7)
!46 = !DILocation(line: 63, column: 50, scope: !7)
!47 = !DILocation(line: 63, column: 31, scope: !7)
!48 = !DILocation(line: 63, column: 72, scope: !7)
!49 = !DILocation(line: 63, column: 80, scope: !7)
!50 = !DILocation(line: 63, column: 64, scope: !7)
!51 = !DILocation(line: 64, column: 31, scope: !7)
!52 = !DILocation(line: 64, column: 79, scope: !7)
!53 = !DILocation(line: 66, column: 31, scope: !7)
!54 = !DILocation(line: 66, column: 79, scope: !7)
!55 = !DILocation(line: 68, column: 20, scope: !7)
!56 = !DILocation(line: 69, column: 27, scope: !7)
!57 = !DILocation(line: 65, column: 20, scope: !7)
!58 = !DILocation(line: 42, column: 18, scope: !7)
!59 = !DILocation(line: 33, column: 21, scope: !7)
!60 = !DILocation(line: 33, column: 27, scope: !7)
!61 = !DILocation(line: 32, column: 19, scope: !7)
!62 = !DILocation(line: 71, column: 20, scope: !7)
!63 = !DILocation(line: 75, column: 31, scope: !7)
!64 = !DILocation(line: 75, column: 79, scope: !7)
!65 = !DILocation(line: 77, column: 31, scope: !7)
!66 = !DILocation(line: 77, column: 79, scope: !7)
!67 = !DILocation(line: 89, column: 33, scope: !7)
!68 = !DILocation(line: 89, column: 42, scope: !7)
!69 = !DILocation(line: 89, column: 52, scope: !7)
!70 = !DILocation(line: 89, column: 30, scope: !7)
!71 = !DILocation(line: 89, column: 38, scope: !7)
!72 = !DILocation(line: 89, column: 47, scope: !7)
!73 = !DILocation(line: 89, column: 25, scope: !7)
!74 = !DILocation(line: 89, column: 64, scope: !7)
!75 = !DILocation(line: 90, column: 34, scope: !7)
!76 = !DILocation(line: 90, column: 30, scope: !7)
!77 = !DILocation(line: 90, column: 39, scope: !7)
!78 = !DILocation(line: 90, column: 25, scope: !7)
!79 = !DILocation(line: 51, column: 19, scope: !7)
!80 = !DILocation(line: 53, column: 20, scope: !7)
!81 = !DILocation(line: 55, column: 20, scope: !7)
!82 = !DILocation(line: 118, column: 15, scope: !83, inlinedAt: !85)
!83 = distinct !DILexicalBlockFile(scope: !7, file: !84, discriminator: 0)
!84 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!85 = !DILocation(line: 57, column: 42, scope: !7)
!86 = !DILocation(line: 121, column: 29, scope: !83, inlinedAt: !85)
!87 = !DILocation(line: 74, column: 20, scope: !7)
!88 = !DILocation(line: 76, column: 20, scope: !7)
!89 = !DILocation(line: 78, column: 20, scope: !7)
!90 = !DILocation(line: 118, column: 15, scope: !83, inlinedAt: !91)
!91 = !DILocation(line: 80, column: 42, scope: !7)
!92 = !DILocation(line: 121, column: 29, scope: !83, inlinedAt: !91)
!93 = !DILocation(line: 0, scope: !7)
!94 = !DILocation(line: 84, column: 20, scope: !7)
!95 = !DILocation(line: 118, column: 15, scope: !83, inlinedAt: !96)
!96 = !DILocation(line: 86, column: 42, scope: !7)
!97 = !DILocation(line: 121, column: 29, scope: !83, inlinedAt: !96)
!98 = !DILocation(line: 88, column: 21, scope: !7)
!99 = !DILocation(line: 90, column: 56, scope: !7)
!100 = !DILocation(line: 90, column: 4, scope: !7)
