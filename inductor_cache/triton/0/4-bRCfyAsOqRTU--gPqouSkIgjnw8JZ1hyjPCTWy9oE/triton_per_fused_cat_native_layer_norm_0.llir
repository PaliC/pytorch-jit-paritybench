; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_cat_native_layer_norm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 3, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 3, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = and i32 %12, 7, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = icmp slt i32 %16, 16, !dbg !14
  %18 = shl i32 %12, 1, !dbg !15
  %19 = and i32 %18, 8, !dbg !15
  %20 = and i32 %18, 14, !dbg !15
  %21 = zext nneg i32 %20 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !16
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !18
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #5, !dbg !19
  %26 = icmp samesign ult i32 %20, 4, !dbg !20
  %27 = shl i32 %16, 4, !dbg !21
  %28 = or disjoint i32 %27, %20, !dbg !22
  %29 = sext i32 %28 to i64, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !23
  %31 = and i1 %26, %17, !dbg !24
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %30, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #5, !dbg !25
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !25
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !25
  %35 = icmp samesign ugt i32 %20, 3, !dbg !26
  %36 = icmp eq i32 %19, 0, !dbg !27
  %37 = and i1 %35, %36, !dbg !28
  %38 = and i1 %37, %17, !dbg !29
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %30, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #5, !dbg !30
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !30
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !30
  %42 = icmp ne i32 %19, 0, !dbg !31
  %43 = icmp samesign ult i32 %20, 12, !dbg !32
  %44 = and i1 %42, %43, !dbg !33
  %45 = and i1 %44, %17, !dbg !34
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %30, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #5, !dbg !35
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !35
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !35
  %49 = icmp samesign ugt i32 %20, 11, !dbg !36
  %50 = and i1 %49, %17, !dbg !37
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %30, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #5, !dbg !38
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !38
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !38
  %.v = select i1 %44, i32 %47, i32 %52, !dbg !39
  %.v1 = select i1 %44, i32 %48, i32 %53, !dbg !39
  %.v2 = select i1 %37, i32 %40, i32 %.v, !dbg !40
  %.v3 = select i1 %37, i32 %41, i32 %.v1, !dbg !40
  %.v4 = select i1 %26, i32 %33, i32 %.v2, !dbg !41
  %54 = bitcast i32 %.v4 to float, !dbg !41
  %.v5 = select i1 %26, i32 %34, i32 %.v3, !dbg !41
  %55 = bitcast i32 %.v5 to float, !dbg !41
  %56 = fadd float %54, %55, !dbg !42
  %57 = select i1 %17, float %56, float 0.000000e+00, !dbg !42
  %58 = bitcast float %57 to i32, !dbg !47
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 4, i32 31), !dbg !47
  %60 = bitcast i32 %59 to float, !dbg !47
  %61 = fadd float %57, %60, !dbg !42
  %62 = bitcast float %61 to i32, !dbg !47
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 2, i32 31), !dbg !47
  %64 = bitcast i32 %63 to float, !dbg !47
  %65 = fadd float %61, %64, !dbg !42
  %66 = bitcast float %65 to i32, !dbg !47
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 1, i32 31), !dbg !47
  %68 = bitcast i32 %67 to float, !dbg !47
  %69 = fadd float %65, %68, !dbg !42
  %70 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !48
  %71 = bitcast float %69 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 true) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %72 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !48
  %73 = load float, ptr addrspace(3) %72, align 4, !dbg !48
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float 1.600000e+01) #5, !dbg !48
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %69, float 1.600000e+01) #5, !dbg !48
  %76 = fsub float %54, %75, !dbg !49
  %77 = fsub float %55, %75, !dbg !49
  %78 = fmul float %76, %76, !dbg !50
  %79 = fmul float %77, %77, !dbg !50
  %80 = fadd float %78, %79, !dbg !51
  %81 = select i1 %17, float %80, float 0.000000e+00, !dbg !51
  %82 = bitcast float %81 to i32, !dbg !53
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 4, i32 31), !dbg !53
  %84 = bitcast i32 %83 to float, !dbg !53
  %85 = fadd float %81, %84, !dbg !51
  %86 = bitcast float %85 to i32, !dbg !53
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 2, i32 31), !dbg !53
  %88 = bitcast i32 %87 to float, !dbg !53
  %89 = fadd float %85, %88, !dbg !51
  %90 = bitcast float %89 to i32, !dbg !53
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 1, i32 31), !dbg !53
  %92 = bitcast i32 %91 to float, !dbg !53
  %93 = fadd float %89, %92, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %94 = bitcast float %93 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %94, i1 true) #5, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %95 = load float, ptr addrspace(3) %72, align 4, !dbg !54
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float 1.600000e+01) #5, !dbg !55
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float 1.600000e+01) #5, !dbg !55
  %98 = fadd float %96, 0x3EE4F8B580000000, !dbg !56
  %99 = fadd float %97, 0x3EE4F8B580000000, !dbg !56
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %.not.i = icmp eq i32 %100, 0, !dbg !54
  br i1 %.not.i, label %103, label %101, !dbg !54

101:                                              ; preds = %9
  %102 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %98), !dbg !54
  br label %__nv_rsqrtf.exit, !dbg !54

103:                                              ; preds = %9
  %104 = tail call float @llvm.nvvm.rsqrt.approx.f(float %98), !dbg !54
  br label %__nv_rsqrtf.exit, !dbg !54

__nv_rsqrtf.exit:                                 ; preds = %101, %103
  %.0.i = phi float [ %102, %101 ], [ %104, %103 ], !dbg !54
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %.not.i9 = icmp eq i32 %106, 0, !dbg !54
  br i1 %.not.i9, label %109, label %107, !dbg !54

107:                                              ; preds = %__nv_rsqrtf.exit
  %108 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %99), !dbg !54
  br label %__nv_rsqrtf.exit11, !dbg !54

109:                                              ; preds = %__nv_rsqrtf.exit
  %110 = tail call float @llvm.nvvm.rsqrt.approx.f(float %99), !dbg !54
  br label %__nv_rsqrtf.exit11, !dbg !54

__nv_rsqrtf.exit11:                               ; preds = %107, %109
  %.0.i10 = phi float [ %108, %107 ], [ %110, %109 ], !dbg !54
  %111 = extractvalue { i32, i32 } %25, 1, !dbg !19
  %112 = bitcast i32 %111 to float, !dbg !19
  %113 = extractvalue { i32, i32 } %25, 0, !dbg !19
  %114 = bitcast i32 %113 to float, !dbg !19
  %115 = extractvalue { i32, i32 } %23, 1, !dbg !17
  %116 = bitcast i32 %115 to float, !dbg !17
  %117 = extractvalue { i32, i32 } %23, 0, !dbg !17
  %118 = bitcast i32 %117 to float, !dbg !17
  %119 = or disjoint i32 %11, %15, !dbg !13
  %120 = icmp slt i32 %119, 16, !dbg !14
  %121 = fmul float %76, %.0.i10, !dbg !57
  %122 = fmul float %77, %.0.i10, !dbg !57
  %123 = fmul float %121, %118, !dbg !58
  %124 = fmul float %122, %116, !dbg !58
  %125 = fadd float %123, %114, !dbg !59
  %126 = fadd float %124, %112, !dbg !59
  %127 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.v4, i32 %.v5, ptr addrspace(1) %127, i1 %17) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %128 = sext i32 %119 to i64, !dbg !63
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !63
  %130 = and i32 %12, 56, !dbg !64
  %131 = icmp eq i32 %130, 0, !dbg !64
  %132 = bitcast float %.0.i to i32, !dbg !64
  %133 = and i1 %131, %120, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %132, ptr addrspace(1) %129, i1 %133) #5, !dbg !64
  %134 = getelementptr float, ptr addrspace(1) %6, i64 %29, !dbg !65
  %135 = bitcast float %125 to i32, !dbg !66
  %136 = bitcast float %126 to i32, !dbg !66
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %135, i32 %136, ptr addrspace(1) %134, i1 %17) #5, !dbg !66
  %137 = getelementptr float, ptr addrspace(1) %5, i64 %128, !dbg !67
  %138 = bitcast float %74 to i32, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %138, ptr addrspace(1) %137, i1 %133) #5, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py", directory: "inductor_cache/rz")
!4 = !{ptr @triton_per_fused_cat_native_layer_norm_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_cat_native_layer_norm_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_cat_native_layer_norm_0", linkageName: "triton_per_fused_cat_native_layer_norm_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 31, scope: !7)
!17 = !DILocation(line: 31, column: 36, scope: !7)
!18 = !DILocation(line: 32, column: 31, scope: !7)
!19 = !DILocation(line: 32, column: 36, scope: !7)
!20 = !DILocation(line: 37, column: 18, scope: !7)
!21 = !DILocation(line: 38, column: 33, scope: !7)
!22 = !DILocation(line: 38, column: 39, scope: !7)
!23 = !DILocation(line: 38, column: 30, scope: !7)
!24 = !DILocation(line: 38, column: 52, scope: !7)
!25 = !DILocation(line: 38, column: 45, scope: !7)
!26 = !DILocation(line: 39, column: 19, scope: !7)
!27 = !DILocation(line: 41, column: 18, scope: !7)
!28 = !DILocation(line: 42, column: 18, scope: !7)
!29 = !DILocation(line: 43, column: 64, scope: !7)
!30 = !DILocation(line: 43, column: 57, scope: !7)
!31 = !DILocation(line: 44, column: 20, scope: !7)
!32 = !DILocation(line: 46, column: 19, scope: !7)
!33 = !DILocation(line: 47, column: 20, scope: !7)
!34 = !DILocation(line: 48, column: 65, scope: !7)
!35 = !DILocation(line: 48, column: 57, scope: !7)
!36 = !DILocation(line: 49, column: 20, scope: !7)
!37 = !DILocation(line: 52, column: 67, scope: !7)
!38 = !DILocation(line: 52, column: 59, scope: !7)
!39 = !DILocation(line: 53, column: 35, scope: !7)
!40 = !DILocation(line: 54, column: 34, scope: !7)
!41 = !DILocation(line: 55, column: 33, scope: !7)
!42 = !DILocation(line: 256, column: 15, scope: !43, inlinedAt: !46)
!43 = distinct !DILexicalBlockFile(scope: !45, file: !44, discriminator: 0)
!44 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!45 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!46 = !DILocation(line: 60, column: 26, scope: !7)
!47 = !DILocation(line: 267, column: 36, scope: !45, inlinedAt: !46)
!48 = !DILocation(line: 63, column: 20, scope: !7)
!49 = !DILocation(line: 64, column: 20, scope: !7)
!50 = !DILocation(line: 65, column: 20, scope: !7)
!51 = !DILocation(line: 256, column: 15, scope: !43, inlinedAt: !52)
!52 = !DILocation(line: 68, column: 26, scope: !7)
!53 = !DILocation(line: 267, column: 36, scope: !45, inlinedAt: !52)
!54 = !DILocation(line: 73, column: 28, scope: !7)
!55 = !DILocation(line: 70, column: 20, scope: !7)
!56 = !DILocation(line: 72, column: 20, scope: !7)
!57 = !DILocation(line: 75, column: 20, scope: !7)
!58 = !DILocation(line: 76, column: 20, scope: !7)
!59 = !DILocation(line: 77, column: 20, scope: !7)
!60 = !DILocation(line: 78, column: 25, scope: !7)
!61 = !DILocation(line: 78, column: 45, scope: !7)
!62 = !DILocation(line: 79, column: 4, scope: !7)
!63 = !DILocation(line: 80, column: 28, scope: !7)
!64 = !DILocation(line: 80, column: 40, scope: !7)
!65 = !DILocation(line: 81, column: 25, scope: !7)
!66 = !DILocation(line: 81, column: 45, scope: !7)
!67 = !DILocation(line: 82, column: 25, scope: !7)
!68 = !DILocation(line: 82, column: 37, scope: !7)
!69 = !DILocation(line: 82, column: 4, scope: !7)
