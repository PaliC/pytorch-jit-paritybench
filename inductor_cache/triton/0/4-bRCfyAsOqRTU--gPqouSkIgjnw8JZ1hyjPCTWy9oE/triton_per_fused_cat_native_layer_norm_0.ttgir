#blocked = #triton_gpu.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 8], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":19:0)
#loc1 = loc(unknown)
#loc48 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":60:26)
#loc55 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":68:26)
#loc74 = loc(callsite(#loc1 at #loc48))
#loc77 = loc(callsite(#loc1 at #loc55))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_cat_native_layer_norm_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1.600000e+01> : tensor<8x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<8x16xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<-12> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<12> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<-8> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<8> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<12> : tensor<1x16xi64, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<-4> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<4> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<8> : tensor<1x16xi64, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<4> : tensor<1x16xi64, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<16> : tensor<8x1xi32, #blocked1> loc(#loc1)
    %cst_11 = arith.constant dense<16> : tensor<8x1xi32, #blocked> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst_12 = arith.constant dense<9.99999974E-6> : tensor<8x1xf32, #blocked> loc(#loc1)
    %cst_13 = arith.constant dense<9.99999974E-6> : tensor<8x1xf32, #blocked1> loc(#loc1)
    %cst_14 = arith.constant dense<1.600000e+01> : tensor<8x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<8x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<8x1xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_11 : tensor<8x1xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_10 : tensor<8x1xi32, #blocked1> loc(#loc6)
    %12 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc7)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc8)
    %15 = tt.addptr %14, %13 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc8)
    %16 = tt.load %15 evictionPolicy = evict_last : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc9)
    %17 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc10)
    %18 = tt.addptr %17, %13 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc10)
    %19 = tt.load %18 evictionPolicy = evict_last : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc11)
    %20 = arith.extsi %13 : tensor<1x16xi32, #blocked> to tensor<1x16xi64, #blocked> loc(#loc12)
    %21 = arith.cmpi slt, %20, %cst_9 : tensor<1x16xi64, #blocked> loc(#loc12)
    %22 = arith.muli %8, %cst_11 : tensor<8x1xi32, #blocked> loc(#loc13)
    %23 = tt.broadcast %22 : tensor<8x1xi32, #blocked> -> tensor<8x16xi32, #blocked> loc(#loc14)
    %24 = tt.broadcast %13 : tensor<1x16xi32, #blocked> -> tensor<8x16xi32, #blocked> loc(#loc14)
    %25 = arith.addi %23, %24 : tensor<8x16xi32, #blocked> loc(#loc14)
    %26 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc15)
    %27 = tt.addptr %26, %25 : tensor<8x16x!tt.ptr<f32>, #blocked>, tensor<8x16xi32, #blocked> loc(#loc15)
    %28 = tt.broadcast %21 : tensor<1x16xi1, #blocked> -> tensor<8x16xi1, #blocked> loc(#loc16)
    %29 = tt.broadcast %10 : tensor<8x1xi1, #blocked> -> tensor<8x16xi1, #blocked> loc(#loc16)
    %30 = arith.andi %28, %29 : tensor<8x16xi1, #blocked> loc(#loc16)
    %31 = tt.load %27, %30, %cst_0 evictionPolicy = evict_last : tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc17)
    %32 = arith.cmpi sge, %20, %cst_9 : tensor<1x16xi64, #blocked> loc(#loc18)
    %33 = arith.cmpi slt, %20, %cst_8 : tensor<1x16xi64, #blocked> loc(#loc19)
    %34 = arith.andi %32, %33 : tensor<1x16xi1, #blocked> loc(#loc20)
    %35 = arith.addi %22, %cst_7 : tensor<8x1xi32, #blocked> loc(#loc21)
    %36 = arith.addi %13, %cst_6 : tensor<1x16xi32, #blocked> loc(#loc22)
    %37 = tt.broadcast %35 : tensor<8x1xi32, #blocked> -> tensor<8x16xi32, #blocked> loc(#loc23)
    %38 = tt.broadcast %36 : tensor<1x16xi32, #blocked> -> tensor<8x16xi32, #blocked> loc(#loc23)
    %39 = arith.addi %37, %38 : tensor<8x16xi32, #blocked> loc(#loc23)
    %40 = tt.addptr %26, %39 : tensor<8x16x!tt.ptr<f32>, #blocked>, tensor<8x16xi32, #blocked> loc(#loc24)
    %41 = tt.broadcast %34 : tensor<1x16xi1, #blocked> -> tensor<8x16xi1, #blocked> loc(#loc25)
    %42 = arith.andi %41, %29 : tensor<8x16xi1, #blocked> loc(#loc25)
    %43 = tt.load %40, %42, %cst_0 evictionPolicy = evict_last : tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc26)
    %44 = arith.cmpi sge, %20, %cst_8 : tensor<1x16xi64, #blocked> loc(#loc27)
    %45 = arith.cmpi slt, %20, %cst_5 : tensor<1x16xi64, #blocked> loc(#loc28)
    %46 = arith.andi %44, %45 : tensor<1x16xi1, #blocked> loc(#loc29)
    %47 = arith.addi %22, %cst_4 : tensor<8x1xi32, #blocked> loc(#loc30)
    %48 = arith.addi %13, %cst_3 : tensor<1x16xi32, #blocked> loc(#loc31)
    %49 = tt.broadcast %47 : tensor<8x1xi32, #blocked> -> tensor<8x16xi32, #blocked> loc(#loc32)
    %50 = tt.broadcast %48 : tensor<1x16xi32, #blocked> -> tensor<8x16xi32, #blocked> loc(#loc32)
    %51 = arith.addi %49, %50 : tensor<8x16xi32, #blocked> loc(#loc32)
    %52 = tt.addptr %26, %51 : tensor<8x16x!tt.ptr<f32>, #blocked>, tensor<8x16xi32, #blocked> loc(#loc33)
    %53 = tt.broadcast %46 : tensor<1x16xi1, #blocked> -> tensor<8x16xi1, #blocked> loc(#loc34)
    %54 = arith.andi %53, %29 : tensor<8x16xi1, #blocked> loc(#loc34)
    %55 = tt.load %52, %54, %cst_0 evictionPolicy = evict_last : tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc35)
    %56 = arith.cmpi sge, %20, %cst_5 : tensor<1x16xi64, #blocked> loc(#loc36)
    %57 = arith.addi %22, %cst_2 : tensor<8x1xi32, #blocked> loc(#loc37)
    %58 = arith.addi %13, %cst_1 : tensor<1x16xi32, #blocked> loc(#loc38)
    %59 = tt.broadcast %57 : tensor<8x1xi32, #blocked> -> tensor<8x16xi32, #blocked> loc(#loc39)
    %60 = tt.broadcast %58 : tensor<1x16xi32, #blocked> -> tensor<8x16xi32, #blocked> loc(#loc39)
    %61 = arith.addi %59, %60 : tensor<8x16xi32, #blocked> loc(#loc39)
    %62 = tt.addptr %26, %61 : tensor<8x16x!tt.ptr<f32>, #blocked>, tensor<8x16xi32, #blocked> loc(#loc40)
    %63 = tt.broadcast %56 : tensor<1x16xi1, #blocked> -> tensor<8x16xi1, #blocked> loc(#loc41)
    %64 = arith.andi %63, %29 : tensor<8x16xi1, #blocked> loc(#loc41)
    %65 = tt.load %62, %64, %cst_0 evictionPolicy = evict_last : tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc42)
    %66 = arith.select %53, %55, %65 : tensor<8x16xi1, #blocked>, tensor<8x16xf32, #blocked> loc(#loc43)
    %67 = arith.select %41, %43, %66 : tensor<8x16xi1, #blocked>, tensor<8x16xf32, #blocked> loc(#loc44)
    %68 = arith.select %28, %31, %67 : tensor<8x16xi1, #blocked>, tensor<8x16xf32, #blocked> loc(#loc45)
    %69 = arith.select %29, %68, %cst_0 : tensor<8x16xi1, #blocked>, tensor<8x16xf32, #blocked> loc(#loc46)
    %70 = "tt.reduce"(%69) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc48)), %arg10: f32 loc(callsite(#loc1 at #loc48))):
      %104 = arith.addf %arg9, %arg10 : f32 loc(#loc78)
      tt.reduce.return %104 : f32 loc(#loc73)
    }) : (tensor<8x16xf32, #blocked>) -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc73)
    %71 = triton_gpu.convert_layout %70 {fastmath = #arith.fastmath<none>} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc50)
    %72 = tt.expand_dims %71 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xf32, #blocked1> loc(#loc51)
    %73 = tt.expand_dims %70 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xf32, #blocked> loc(#loc51)
    %74 = arith.divf %72, %cst_14 : tensor<8x1xf32, #blocked1> loc(#loc50)
    %75 = arith.divf %73, %cst : tensor<8x1xf32, #blocked> loc(#loc50)
    %76 = tt.broadcast %75 : tensor<8x1xf32, #blocked> -> tensor<8x16xf32, #blocked> loc(#loc52)
    %77 = arith.subf %68, %76 : tensor<8x16xf32, #blocked> loc(#loc52)
    %78 = arith.mulf %77, %77 : tensor<8x16xf32, #blocked> loc(#loc53)
    %79 = arith.select %29, %78, %cst_0 : tensor<8x16xi1, #blocked>, tensor<8x16xf32, #blocked> loc(#loc54)
    %80 = "tt.reduce"(%79) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc55)), %arg10: f32 loc(callsite(#loc1 at #loc55))):
      %104 = arith.addf %arg9, %arg10 : f32 loc(#loc79)
      tt.reduce.return %104 : f32 loc(#loc76)
    }) : (tensor<8x16xf32, #blocked>) -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc76)
    %81 = triton_gpu.convert_layout %80 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc56)
    %82 = tt.expand_dims %81 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xf32, #blocked1> loc(#loc57)
    %83 = tt.expand_dims %80 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xf32, #blocked> loc(#loc57)
    %84 = arith.divf %82, %cst_14 : tensor<8x1xf32, #blocked1> loc(#loc58)
    %85 = arith.divf %83, %cst : tensor<8x1xf32, #blocked> loc(#loc58)
    %86 = arith.addf %84, %cst_13 : tensor<8x1xf32, #blocked1> loc(#loc59)
    %87 = arith.addf %85, %cst_12 : tensor<8x1xf32, #blocked> loc(#loc59)
    %88 = tt.extern_elementwise %86 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<8x1xf32, #blocked1>) -> tensor<8x1xf32, #blocked1> loc(#loc56)
    %89 = tt.extern_elementwise %87 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<8x1xf32, #blocked>) -> tensor<8x1xf32, #blocked> loc(#loc56)
    %90 = tt.broadcast %89 : tensor<8x1xf32, #blocked> -> tensor<8x16xf32, #blocked> loc(#loc60)
    %91 = arith.mulf %77, %90 : tensor<8x16xf32, #blocked> loc(#loc60)
    %92 = tt.broadcast %16 : tensor<1x16xf32, #blocked> -> tensor<8x16xf32, #blocked> loc(#loc61)
    %93 = arith.mulf %91, %92 : tensor<8x16xf32, #blocked> loc(#loc61)
    %94 = tt.broadcast %19 : tensor<1x16xf32, #blocked> -> tensor<8x16xf32, #blocked> loc(#loc62)
    %95 = arith.addf %93, %94 : tensor<8x16xf32, #blocked> loc(#loc62)
    %96 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc63)
    %97 = tt.addptr %96, %25 : tensor<8x16x!tt.ptr<f32>, #blocked>, tensor<8x16xi32, #blocked> loc(#loc63)
    tt.store %97, %68, %29 : tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc64)
    gpu.barrier loc(#loc65)
    %98 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc66)
    %99 = tt.addptr %98, %9 : tensor<8x1x!tt.ptr<f32>, #blocked1>, tensor<8x1xi32, #blocked1> loc(#loc66)
    tt.store %99, %88, %11 : tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc67)
    %100 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc68)
    %101 = tt.addptr %100, %25 : tensor<8x16x!tt.ptr<f32>, #blocked>, tensor<8x16xi32, #blocked> loc(#loc68)
    tt.store %101, %95, %29 : tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc69)
    %102 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc70)
    %103 = tt.addptr %102, %9 : tensor<8x1x!tt.ptr<f32>, #blocked1>, tensor<8x1xi32, #blocked1> loc(#loc70)
    tt.store %103, %74, %11 : tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc71)
    tt.return loc(#loc72)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":23:28)
#loc3 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":23:33)
#loc4 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":24:44)
#loc5 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":24:23)
#loc6 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":25:21)
#loc7 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":26:34)
#loc8 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":31:31)
#loc9 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":31:36)
#loc10 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":32:31)
#loc11 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":32:36)
#loc12 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":37:18)
#loc13 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":38:33)
#loc14 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":38:39)
#loc15 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":38:30)
#loc16 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":38:52)
#loc17 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":38:45)
#loc18 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":39:19)
#loc19 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":41:18)
#loc20 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":42:18)
#loc21 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":43:35)
#loc22 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":43:51)
#loc23 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":43:44)
#loc24 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":43:31)
#loc25 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":43:64)
#loc26 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":43:57)
#loc27 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":44:20)
#loc28 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":46:19)
#loc29 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":47:20)
#loc30 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":48:35)
#loc31 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":48:51)
#loc32 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":48:44)
#loc33 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":48:31)
#loc34 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":48:65)
#loc35 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":48:57)
#loc36 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":49:20)
#loc37 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":52:36)
#loc38 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":52:53)
#loc39 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":52:45)
#loc40 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":52:31)
#loc41 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":52:67)
#loc42 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":52:59)
#loc43 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":53:35)
#loc44 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":54:34)
#loc45 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":55:33)
#loc46 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":59:35)
#loc47 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc49 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc50 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":63:20)
#loc51 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":60:29)
#loc52 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":64:20)
#loc53 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":65:20)
#loc54 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":67:35)
#loc56 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":73:28)
#loc57 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":68:29)
#loc58 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":70:20)
#loc59 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":72:20)
#loc60 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":75:20)
#loc61 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":76:20)
#loc62 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":77:20)
#loc63 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":78:25)
#loc64 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":78:45)
#loc65 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":79:4)
#loc66 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":80:28)
#loc67 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":80:40)
#loc68 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":81:25)
#loc69 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":81:45)
#loc70 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":82:25)
#loc71 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":82:37)
#loc72 = loc("inductor_cache/rz/crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py":82:4)
#loc73 = loc(callsite(#loc47 at #loc48))
#loc75 = loc(callsite(#loc49 at #loc47))
#loc76 = loc(callsite(#loc47 at #loc55))
#loc78 = loc(callsite(#loc75 at #loc48))
#loc79 = loc(callsite(#loc75 at #loc55))
