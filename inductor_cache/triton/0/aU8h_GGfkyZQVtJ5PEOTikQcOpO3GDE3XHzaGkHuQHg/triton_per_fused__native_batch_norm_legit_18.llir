; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 24, !dbg !12
  %11 = shl i32 %9, 2, !dbg !12
  %12 = and i32 %11, 28, !dbg !12
  %13 = and i32 %9, 31, !dbg !12
  %14 = or disjoint i32 %8, %12, !dbg !13
  %15 = icmp slt i32 %14, 1024, !dbg !14
  %16 = lshr i32 %9, 5, !dbg !15
  %17 = shl i32 %9, 5, !dbg !16
  %18 = and i32 %17, 3840, !dbg !16
  %.frozen = freeze i32 %14, !dbg !17
  %19 = sdiv i32 %.frozen, 256, !dbg !17
  %20 = shl i32 %19, 12, !dbg !18
  %21 = mul i32 %19, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %21, !dbg !19
  %22 = add nsw i32 %.decomposed, %18, !dbg !20
  %23 = add i32 %22, %20, !dbg !21
  %24 = sext i32 %23 to i64, !dbg !22
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !22
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !23
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !23
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !23
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !23
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !23
  %31 = bitcast i32 %27 to float, !dbg !23
  %32 = bitcast i32 %28 to float, !dbg !23
  %33 = bitcast i32 %29 to float, !dbg !23
  %34 = bitcast i32 %30 to float, !dbg !23
  %35 = select i1 %15, float %31, float 0.000000e+00, !dbg !24
  %36 = select i1 %15, float %32, float 0.000000e+00, !dbg !24
  %37 = select i1 %15, float %33, float 0.000000e+00, !dbg !24
  %38 = select i1 %15, float %34, float 0.000000e+00, !dbg !24
  %39 = bitcast float %35 to i32, !dbg !25
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 16, i32 31), !dbg !25
  %41 = bitcast i32 %40 to float, !dbg !25
  %42 = fadd float %35, %41, !dbg !29
  %43 = bitcast float %42 to i32, !dbg !25
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 8, i32 31), !dbg !25
  %45 = bitcast i32 %44 to float, !dbg !25
  %46 = fadd float %42, %45, !dbg !29
  %47 = bitcast float %36 to i32, !dbg !25
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 16, i32 31), !dbg !25
  %49 = bitcast i32 %48 to float, !dbg !25
  %50 = fadd float %36, %49, !dbg !29
  %51 = bitcast float %50 to i32, !dbg !25
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 8, i32 31), !dbg !25
  %53 = bitcast i32 %52 to float, !dbg !25
  %54 = fadd float %50, %53, !dbg !29
  %55 = bitcast float %37 to i32, !dbg !25
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 16, i32 31), !dbg !25
  %57 = bitcast i32 %56 to float, !dbg !25
  %58 = fadd float %37, %57, !dbg !29
  %59 = bitcast float %58 to i32, !dbg !25
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 8, i32 31), !dbg !25
  %61 = bitcast i32 %60 to float, !dbg !25
  %62 = fadd float %58, %61, !dbg !29
  %63 = bitcast float %38 to i32, !dbg !25
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 16, i32 31), !dbg !25
  %65 = bitcast i32 %64 to float, !dbg !25
  %66 = fadd float %38, %65, !dbg !29
  %67 = bitcast float %66 to i32, !dbg !25
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 8, i32 31), !dbg !25
  %69 = bitcast i32 %68 to float, !dbg !25
  %70 = fadd float %66, %69, !dbg !29
  %71 = icmp eq i32 %10, 0, !dbg !25
  %72 = and i32 %16, 3, !dbg !25
  %73 = shl nuw nsw i32 %12, 2, !dbg !25
  %74 = or disjoint i32 %73, %72, !dbg !25
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i32 %74, !dbg !25
  %76 = bitcast float %46 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 %71) #5, !dbg !25
  %77 = or disjoint i32 %73, 4, !dbg !25
  %78 = or disjoint i32 %77, %72, !dbg !25
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i32 %78, !dbg !25
  %80 = bitcast float %54 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 %71) #5, !dbg !25
  %81 = or disjoint i32 %73, 8, !dbg !25
  %82 = or disjoint i32 %81, %72, !dbg !25
  %83 = getelementptr float, ptr addrspace(3) @global_smem, i32 %82, !dbg !25
  %84 = bitcast float %62 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 %71) #5, !dbg !25
  %85 = or disjoint i32 %73, 12, !dbg !25
  %86 = or disjoint i32 %85, %72, !dbg !25
  %87 = getelementptr float, ptr addrspace(3) @global_smem, i32 %86, !dbg !25
  %88 = bitcast float %70 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 %71) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %89 = icmp slt i32 %9, 128, !dbg !25
  %90 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !25
  %91 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %90, i1 %89) #5, !dbg !25
  %92 = bitcast i32 %91 to float, !dbg !25
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 2, i32 31), !dbg !25
  %94 = bitcast i32 %93 to float, !dbg !25
  %95 = fadd float %92, %94, !dbg !29
  %96 = bitcast float %95 to i32, !dbg !25
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 1, i32 31), !dbg !25
  %98 = bitcast i32 %97 to float, !dbg !25
  %99 = fadd float %95, %98, !dbg !29
  %100 = and i32 %9, 3, !dbg !25
  %101 = icmp eq i32 %100, 0, !dbg !25
  %102 = and i1 %89, %101, !dbg !25
  %103 = bitcast float %99 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %103, i1 %102) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i32 %73, !dbg !25
  %105 = load float, ptr addrspace(3) %104, align 16, !dbg !25
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %77, !dbg !25
  %107 = load float, ptr addrspace(3) %106, align 16, !dbg !25
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %81, !dbg !25
  %109 = load float, ptr addrspace(3) %108, align 16, !dbg !25
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !25
  %111 = load float, ptr addrspace(3) %110, align 16, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !31
  %113 = bitcast float %105 to i32, !dbg !31
  %114 = bitcast float %107 to i32, !dbg !31
  %115 = bitcast float %109 to i32, !dbg !31
  %116 = bitcast float %111 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %112, i32 %113, i32 %114, i32 %115, i32 %116, i1 true) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !31
  %118 = load float, ptr addrspace(3) %117, align 4, !dbg !31
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float 1.600000e+01) #5, !dbg !31
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float 1.600000e+01) #5, !dbg !31
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float 1.600000e+01) #5, !dbg !31
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float 1.600000e+01) #5, !dbg !31
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float 1.600000e+01) #5, !dbg !31
  %124 = fsub float %31, %120, !dbg !32
  %125 = fsub float %32, %121, !dbg !32
  %126 = fsub float %33, %122, !dbg !32
  %127 = fsub float %34, %123, !dbg !32
  %128 = fmul float %124, %124, !dbg !33
  %129 = fmul float %125, %125, !dbg !33
  %130 = fmul float %126, %126, !dbg !33
  %131 = fmul float %127, %127, !dbg !33
  %132 = select i1 %15, float %128, float 0.000000e+00, !dbg !34
  %133 = select i1 %15, float %129, float 0.000000e+00, !dbg !34
  %134 = select i1 %15, float %130, float 0.000000e+00, !dbg !34
  %135 = select i1 %15, float %131, float 0.000000e+00, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %136 = bitcast float %132 to i32, !dbg !35
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 16, i32 31), !dbg !35
  %138 = bitcast i32 %137 to float, !dbg !35
  %139 = fadd float %132, %138, !dbg !37
  %140 = bitcast float %139 to i32, !dbg !35
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 8, i32 31), !dbg !35
  %142 = bitcast i32 %141 to float, !dbg !35
  %143 = fadd float %139, %142, !dbg !37
  %144 = bitcast float %133 to i32, !dbg !35
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 16, i32 31), !dbg !35
  %146 = bitcast i32 %145 to float, !dbg !35
  %147 = fadd float %133, %146, !dbg !37
  %148 = bitcast float %147 to i32, !dbg !35
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 8, i32 31), !dbg !35
  %150 = bitcast i32 %149 to float, !dbg !35
  %151 = fadd float %147, %150, !dbg !37
  %152 = bitcast float %134 to i32, !dbg !35
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 16, i32 31), !dbg !35
  %154 = bitcast i32 %153 to float, !dbg !35
  %155 = fadd float %134, %154, !dbg !37
  %156 = bitcast float %155 to i32, !dbg !35
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 8, i32 31), !dbg !35
  %158 = bitcast i32 %157 to float, !dbg !35
  %159 = fadd float %155, %158, !dbg !37
  %160 = bitcast float %135 to i32, !dbg !35
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 16, i32 31), !dbg !35
  %162 = bitcast i32 %161 to float, !dbg !35
  %163 = fadd float %135, %162, !dbg !37
  %164 = bitcast float %163 to i32, !dbg !35
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 8, i32 31), !dbg !35
  %166 = bitcast i32 %165 to float, !dbg !35
  %167 = fadd float %163, %166, !dbg !37
  %168 = bitcast float %143 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %168, i1 %71) #5, !dbg !35
  %169 = bitcast float %151 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %169, i1 %71) #5, !dbg !35
  %170 = bitcast float %159 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %170, i1 %71) #5, !dbg !35
  %171 = bitcast float %167 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %171, i1 %71) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %172 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %90, i1 %89) #5, !dbg !35
  %173 = bitcast i32 %172 to float, !dbg !35
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 2, i32 31), !dbg !35
  %175 = bitcast i32 %174 to float, !dbg !35
  %176 = fadd float %173, %175, !dbg !37
  %177 = bitcast float %176 to i32, !dbg !35
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 1, i32 31), !dbg !35
  %179 = bitcast i32 %178 to float, !dbg !35
  %180 = fadd float %176, %179, !dbg !37
  %181 = bitcast float %180 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %181, i1 %102) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %182 = load i32, ptr addrspace(3) %104, align 16, !dbg !35
  %183 = load i32, ptr addrspace(3) %106, align 16, !dbg !35
  %184 = load i32, ptr addrspace(3) %108, align 16, !dbg !35
  %185 = load i32, ptr addrspace(3) %110, align 16, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %112, i32 %182, i32 %183, i32 %184, i32 %185, i1 true) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %186 = load float, ptr addrspace(3) %117, align 4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %112, i32 %182, i32 %183, i32 %184, i32 %185, i1 true) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %187 = load i32, ptr addrspace(3) %117, align 4, !dbg !39
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %186, float 1.600000e+01) #5, !dbg !40
  %189 = fadd float %188, 0x3EE4F8B580000000, !dbg !41
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i = icmp eq i32 %190, 0, !dbg !38
  br i1 %.not.i, label %193, label %191, !dbg !38

191:                                              ; preds = %6
  %192 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %189), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

193:                                              ; preds = %6
  %194 = tail call float @llvm.nvvm.rsqrt.approx.f(float %189), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %191, %193
  %.0.i = phi float [ %192, %191 ], [ %194, %193 ], !dbg !38
  %195 = or disjoint i32 %8, %13, !dbg !13
  %196 = icmp slt i32 %195, 1024, !dbg !14
  %197 = sext i32 %195 to i64, !dbg !42
  %198 = getelementptr float, ptr addrspace(1) %3, i64 %197, !dbg !42
  %199 = icmp eq i32 %72, 0, !dbg !43
  %200 = bitcast float %.0.i to i32, !dbg !43
  %201 = and i1 %199, %196, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %200, ptr addrspace(1) %198, i1 %201) #5, !dbg !43
  %202 = getelementptr float, ptr addrspace(1) %1, i64 %197, !dbg !44
  %203 = bitcast float %119 to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %203, ptr addrspace(1) %202, i1 %201) #5, !dbg !45
  %204 = getelementptr float, ptr addrspace(1) %2, i64 %197, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %187, ptr addrspace(1) %204, i1 %201) #5, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6bbytuccku3kxsjwx3kcoc3qm52nwu2yum5mxc2sujj4xaeuiwc.py", directory: "inductor_cache/6b")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_18, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_18", linkageName: "triton_per_fused__native_batch_norm_legit_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 34, scope: !7)
!17 = !DILocation(line: 31, column: 51, scope: !7)
!18 = !DILocation(line: 31, column: 45, scope: !7)
!19 = !DILocation(line: 31, column: 65, scope: !7)
!20 = !DILocation(line: 31, column: 39, scope: !7)
!21 = !DILocation(line: 31, column: 60, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 73, scope: !7)
!24 = !DILocation(line: 35, column: 33, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = !DILocation(line: 36, column: 24, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !28)
!30 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!31 = !DILocation(line: 39, column: 19, scope: !7)
!32 = !DILocation(line: 40, column: 19, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 43, column: 35, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !36)
!36 = !DILocation(line: 44, column: 26, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !36)
!38 = !DILocation(line: 49, column: 28, scope: !7)
!39 = !DILocation(line: 44, column: 29, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 25, scope: !7)
!43 = !DILocation(line: 50, column: 37, scope: !7)
!44 = !DILocation(line: 51, column: 25, scope: !7)
!45 = !DILocation(line: 51, column: 37, scope: !7)
!46 = !DILocation(line: 52, column: 25, scope: !7)
!47 = !DILocation(line: 52, column: 37, scope: !7)
!48 = !DILocation(line: 52, column: 4, scope: !7)
