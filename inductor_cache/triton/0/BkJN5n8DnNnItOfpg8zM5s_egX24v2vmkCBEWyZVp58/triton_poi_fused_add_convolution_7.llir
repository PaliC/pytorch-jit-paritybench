; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %13 = shl i32 %12, 3, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = lshr i32 %14, 2, !dbg !12
  %16 = and i32 %15, 7, !dbg !12
  %17 = and i32 %14, 3, !dbg !12
  %18 = and i32 %14, 7, !dbg !12
  %19 = or disjoint i32 %13, %16, !dbg !13
  %20 = or disjoint i32 %13, %18, !dbg !13
  %21 = icmp slt i32 %19, 16, !dbg !14
  %22 = icmp slt i32 %20, 16, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %24 = shl i32 %23, 2, !dbg !16
  %.lobit23 = lshr i32 %14, 3, !dbg !17
  %25 = and i32 %.lobit23, 3, !dbg !17
  %26 = or disjoint i32 %24, %17, !dbg !18
  %27 = or disjoint i32 %24, %25, !dbg !18
  %28 = icmp slt i32 %26, 4, !dbg !19
  %29 = icmp slt i32 %27, 4, !dbg !19
  %30 = srem i32 %19, 4, !dbg !20
  %.frozen = freeze i32 %20, !dbg !21
  %31 = sdiv i32 %.frozen, 4, !dbg !21
  %32 = mul i32 %31, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %32, !dbg !20
  %33 = shl i32 %19, 2, !dbg !22
  %34 = add i32 %26, %33, !dbg !23
  %35 = sext i32 %34 to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !24
  %37 = and i1 %21, %28, !dbg !25
  %38 = and i1 %22, %29, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %37) #2, !dbg !26
  %40 = sext i32 %30 to i64, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !27
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %21) #2, !dbg !28
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !29
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %37) #2, !dbg !30
  %45 = bitcast i32 %44 to float, !dbg !30
  %46 = getelementptr float, ptr addrspace(1) %5, i64 %40, !dbg !31
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %21) #2, !dbg !32
  %48 = bitcast i32 %47 to float, !dbg !32
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !33
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %37) #2, !dbg !34
  %51 = getelementptr float, ptr addrspace(1) %6, i64 %40, !dbg !35
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %21) #2, !dbg !36
  %53 = shl i32 %27, 2, !dbg !37
  %54 = add i32 %53, %.decomposed, !dbg !38
  %55 = shl i32 %31, 4, !dbg !39
  %56 = add i32 %54, %55, !dbg !40
  %57 = sext i32 %56 to i64, !dbg !41
  %58 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !41
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %38) #2, !dbg !42
  %60 = bitcast i32 %59 to float, !dbg !42
  %61 = sext i32 %.decomposed to i64, !dbg !43
  %62 = getelementptr float, ptr addrspace(1) %7, i64 %61, !dbg !43
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %22) #2, !dbg !44
  %64 = bitcast i32 %63 to float, !dbg !44
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %8, i1 true) #2, !dbg !45
  %66 = getelementptr i8, ptr addrspace(1) %8, i64 4, !dbg !46
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #2, !dbg !47
  %68 = bitcast i32 %67 to float, !dbg !47
  %69 = getelementptr i8, ptr addrspace(1) %8, i64 8, !dbg !48
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #2, !dbg !49
  %71 = fadd float %45, %48, !dbg !50
  %72 = fadd float %60, %64, !dbg !51
  %73 = fmul float %71, %68, !dbg !52
  %74 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !26
  %75 = insertelement <2 x i32> %74, i32 %50, i64 1, !dbg !26
  %76 = bitcast <2 x i32> %75 to <2 x float>, !dbg !26
  %77 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !28
  %78 = insertelement <2 x i32> %77, i32 %52, i64 1, !dbg !28
  %79 = bitcast <2 x i32> %78 to <2 x float>, !dbg !28
  %80 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !45
  %81 = insertelement <2 x i32> %80, i32 %70, i64 1, !dbg !45
  %82 = bitcast <2 x i32> %81 to <2 x float>, !dbg !45
  %83 = fadd <2 x float> %76, %79, !dbg !53
  %84 = fmul <2 x float> %83, %82, !dbg !54
  %85 = extractelement <2 x float> %84, i64 0, !dbg !55
  %86 = fadd float %85, %73, !dbg !55
  %87 = extractelement <2 x float> %84, i64 1, !dbg !56
  %88 = fadd float %86, %87, !dbg !56
  %89 = shl i32 %14, 3, !dbg !56
  %90 = and i32 %89, 24, !dbg !56
  %91 = or disjoint i32 %90, %16, !dbg !56
  %92 = and i32 %14, 31, !dbg !56
  %93 = lshr exact i32 %90, 1, !dbg !56
  %94 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %93, !dbg !56
  %95 = getelementptr inbounds float, ptr addrspace(3) %94, i32 %91, !dbg !56
  %96 = bitcast float %88 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #2, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %97 = lshr i32 %92, 3, !dbg !56
  %98 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %97, !dbg !56
  %99 = getelementptr inbounds float, ptr addrspace(3) %98, i32 %92, !dbg !56
  %100 = load float, ptr addrspace(3) %99, align 4, !dbg !56
  %101 = fadd float %72, %100, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %bc = bitcast <2 x float> %83 to <2 x i32>, !dbg !59
  %102 = extractelement <2 x i32> %bc, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %102, ptr addrspace(1) %36, i1 %37) #2, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %103 = bitcast float %71 to i32, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %103, ptr addrspace(1) %43, i1 %37) #2, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %bc4 = bitcast <2 x float> %83 to <2 x i32>, !dbg !63
  %104 = extractelement <2 x i32> %bc4, i64 1, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %104, ptr addrspace(1) %49, i1 %37) #2, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %105 = bitcast float %101 to i32, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %105, ptr addrspace(1) %58, i1 %38) #2, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3eu5qgo355wzomlv2sjsnpnb34hz2l7cow53aei7blq7fkizck4.py", directory: "inductor_cache/3e")
!4 = !{ptr @triton_poi_fused_add_convolution_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_7, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_7", linkageName: "triton_poi_fused_add_convolution_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 41, scope: !7)
!23 = !DILocation(line: 32, column: 39, scope: !7)
!24 = !DILocation(line: 32, column: 34, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 32, column: 46, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 34, scope: !7)
!30 = !DILocation(line: 34, column: 46, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 35, scope: !7)
!33 = !DILocation(line: 36, column: 34, scope: !7)
!34 = !DILocation(line: 36, column: 46, scope: !7)
!35 = !DILocation(line: 37, column: 30, scope: !7)
!36 = !DILocation(line: 37, column: 35, scope: !7)
!37 = !DILocation(line: 38, column: 41, scope: !7)
!38 = !DILocation(line: 38, column: 39, scope: !7)
!39 = !DILocation(line: 38, column: 49, scope: !7)
!40 = !DILocation(line: 38, column: 46, scope: !7)
!41 = !DILocation(line: 38, column: 34, scope: !7)
!42 = !DILocation(line: 38, column: 54, scope: !7)
!43 = !DILocation(line: 39, column: 31, scope: !7)
!44 = !DILocation(line: 39, column: 36, scope: !7)
!45 = !DILocation(line: 40, column: 20, scope: !7)
!46 = !DILocation(line: 42, column: 31, scope: !7)
!47 = !DILocation(line: 42, column: 20, scope: !7)
!48 = !DILocation(line: 44, column: 31, scope: !7)
!49 = !DILocation(line: 44, column: 20, scope: !7)
!50 = !DILocation(line: 47, column: 18, scope: !7)
!51 = !DILocation(line: 49, column: 19, scope: !7)
!52 = !DILocation(line: 51, column: 20, scope: !7)
!53 = !DILocation(line: 46, column: 18, scope: !7)
!54 = !DILocation(line: 50, column: 20, scope: !7)
!55 = !DILocation(line: 52, column: 20, scope: !7)
!56 = !DILocation(line: 54, column: 20, scope: !7)
!57 = !DILocation(line: 55, column: 20, scope: !7)
!58 = !DILocation(line: 56, column: 4, scope: !7)
!59 = !DILocation(line: 57, column: 46, scope: !7)
!60 = !DILocation(line: 58, column: 4, scope: !7)
!61 = !DILocation(line: 59, column: 46, scope: !7)
!62 = !DILocation(line: 60, column: 4, scope: !7)
!63 = !DILocation(line: 61, column: 46, scope: !7)
!64 = !DILocation(line: 62, column: 4, scope: !7)
!65 = !DILocation(line: 63, column: 55, scope: !7)
!66 = !DILocation(line: 63, column: 4, scope: !7)
