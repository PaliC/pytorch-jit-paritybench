; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused__weight_norm_interface_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = icmp slt i32 %7, 1024, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = lshr i32 %9, 5, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 2044, !dbg !12
  %14 = icmp samesign ult i32 %13, 1312, !dbg !13
  %15 = mul i32 %7, 1312, !dbg !14
  %16 = add i32 %15, %13, !dbg !15
  %17 = sext i32 %16 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !16
  %19 = and i1 %14, %8, !dbg !17
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !18
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !18
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !18
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !18
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !18
  %25 = bitcast i32 %21 to float, !dbg !18
  %26 = bitcast i32 %22 to float, !dbg !18
  %27 = bitcast i32 %23 to float, !dbg !18
  %28 = bitcast i32 %24 to float, !dbg !18
  %29 = fmul float %25, %25, !dbg !19
  %30 = fmul float %26, %26, !dbg !19
  %31 = fmul float %27, %27, !dbg !19
  %32 = fmul float %28, %28, !dbg !19
  %33 = fadd float %29, %30, !dbg !20
  %34 = fadd float %31, %33, !dbg !20
  %35 = fadd float %32, %34, !dbg !20
  %36 = select i1 %19, float %35, float 0.000000e+00, !dbg !20
  %37 = bitcast float %36 to i32, !dbg !25
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 16, i32 31), !dbg !25
  %39 = bitcast i32 %38 to float, !dbg !25
  %40 = fadd float %36, %39, !dbg !20
  %41 = bitcast float %40 to i32, !dbg !25
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 8, i32 31), !dbg !25
  %43 = bitcast i32 %42 to float, !dbg !25
  %44 = fadd float %40, %43, !dbg !20
  %45 = bitcast float %44 to i32, !dbg !25
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 4, i32 31), !dbg !25
  %47 = bitcast i32 %46 to float, !dbg !25
  %48 = fadd float %44, %47, !dbg !20
  %49 = bitcast float %48 to i32, !dbg !25
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 2, i32 31), !dbg !25
  %51 = bitcast i32 %50 to float, !dbg !25
  %52 = fadd float %48, %51, !dbg !20
  %53 = bitcast float %52 to i32, !dbg !25
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 1, i32 31), !dbg !25
  %55 = bitcast i32 %54 to float, !dbg !25
  %56 = fadd float %52, %55, !dbg !20
  %57 = icmp eq i32 %10, 0, !dbg !25
  %58 = and i32 %11, 15, !dbg !25
  %59 = getelementptr float, ptr addrspace(3) @global_smem, i32 %58, !dbg !25
  %60 = bitcast float %56 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 %57) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %61 = icmp slt i32 %9, 16, !dbg !25
  %62 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !25
  %63 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %62, i1 %61) #5, !dbg !25
  %64 = bitcast i32 %63 to float, !dbg !25
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 8, i32 31), !dbg !25
  %66 = bitcast i32 %65 to float, !dbg !25
  %67 = fadd float %64, %66, !dbg !20
  %68 = bitcast float %67 to i32, !dbg !25
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 4, i32 31), !dbg !25
  %70 = bitcast i32 %69 to float, !dbg !25
  %71 = fadd float %67, %70, !dbg !20
  %72 = bitcast float %71 to i32, !dbg !25
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 2, i32 31), !dbg !25
  %74 = bitcast i32 %73 to float, !dbg !25
  %75 = fadd float %71, %74, !dbg !20
  %76 = bitcast float %75 to i32, !dbg !25
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 1, i32 31), !dbg !25
  %78 = bitcast i32 %77 to float, !dbg !25
  %79 = fadd float %75, %78, !dbg !20
  %80 = and i32 %9, 15, !dbg !25
  %81 = icmp eq i32 %80, 0, !dbg !25
  %82 = and i1 %61, %81, !dbg !25
  %83 = bitcast float %79 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %83, i1 %82) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %84 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !25
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %.not.i = icmp eq i32 %85, 0, !dbg !26
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !26
  %.not1.i = icmp eq i32 %86, 0, !dbg !26
  br i1 %.not.i, label %92, label %87, !dbg !26

87:                                               ; preds = %6
  br i1 %.not1.i, label %90, label %88, !dbg !26

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #5, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #5, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

92:                                               ; preds = %6
  br i1 %.not1.i, label %95, label %93, !dbg !26

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #5, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #5, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

__nv_sqrtf.exit:                                  ; preds = %88, %90, %93, %95
  %.0.i = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !26
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !26
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !26
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !26
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %.not.i16 = icmp eq i32 %103, 0, !dbg !26
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !26
  %.not1.i19 = icmp eq i32 %104, 0, !dbg !26
  br i1 %.not.i16, label %110, label %105, !dbg !26

105:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %108, label %106, !dbg !26

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #5, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #5, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

110:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %113, label %111, !dbg !26

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #5, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #5, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

__nv_sqrtf.exit20:                                ; preds = %106, %108, %111, %113
  %.0.i18 = phi float [ %107, %106 ], [ %109, %108 ], [ %112, %111 ], [ %114, %113 ], !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %115 = sext i32 %7 to i64, !dbg !28
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !28
  %urem = and i32 %9, 511, !dbg !29
  %117 = icmp eq i32 %urem, 0, !dbg !29
  %118 = bitcast float %.0.i to i32, !dbg !29
  %119 = and i1 %117, %8, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %118, ptr addrspace(1) %116, i1 %119) #5, !dbg !29
  %120 = getelementptr float, ptr addrspace(1) %2, i64 %115, !dbg !30
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %8) #5, !dbg !31
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %8) #5, !dbg !31
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %8) #5, !dbg !31
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %8) #5, !dbg !31
  %125 = bitcast i32 %124 to float, !dbg !31
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !32
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !32
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !32
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !32
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !32
  %131 = bitcast i32 %127 to float, !dbg !32
  %132 = bitcast i32 %128 to float, !dbg !32
  %133 = bitcast i32 %129 to float, !dbg !32
  %134 = bitcast i32 %130 to float, !dbg !32
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float %.0.i18) #5, !dbg !33
  %136 = fmul float %135, %131, !dbg !34
  %137 = fmul float %135, %132, !dbg !34
  %138 = fmul float %135, %133, !dbg !34
  %139 = fmul float %135, %134, !dbg !34
  %140 = getelementptr float, ptr addrspace(1) %3, i64 %17, !dbg !35
  %141 = bitcast float %136 to i32, !dbg !36
  %142 = bitcast float %137 to i32, !dbg !36
  %143 = bitcast float %138 to i32, !dbg !36
  %144 = bitcast float %139 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %141, i32 %142, i32 %143, i32 %144, ptr addrspace(1) %140, i1 %19) #5, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5s5a3stmkp5vyw4i7z6x73fnu4ekevq67qx7qseqyqbmaxi6bdq.py", directory: "inductor_cache/5s")
!4 = !{ptr @triton_red_fused__weight_norm_interface_8, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__weight_norm_interface_8, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__weight_norm_interface_8", linkageName: "triton_red_fused__weight_norm_interface_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 30, column: 25, scope: !7)
!14 = !DILocation(line: 32, column: 44, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 32, column: 34, scope: !7)
!17 = !DILocation(line: 32, column: 57, scope: !7)
!18 = !DILocation(line: 32, column: 49, scope: !7)
!19 = !DILocation(line: 33, column: 22, scope: !7)
!20 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 37, column: 25, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !24)
!26 = !DILocation(line: 38, column: 26, scope: !7)
!27 = !DILocation(line: 39, column: 4, scope: !7)
!28 = !DILocation(line: 40, column: 28, scope: !7)
!29 = !DILocation(line: 40, column: 39, scope: !7)
!30 = !DILocation(line: 41, column: 30, scope: !7)
!31 = !DILocation(line: 41, column: 35, scope: !7)
!32 = !DILocation(line: 46, column: 49, scope: !7)
!33 = !DILocation(line: 47, column: 22, scope: !7)
!34 = !DILocation(line: 48, column: 22, scope: !7)
!35 = !DILocation(line: 49, column: 29, scope: !7)
!36 = !DILocation(line: 49, column: 50, scope: !7)
!37 = !DILocation(line: 42, column: 4, scope: !7)
