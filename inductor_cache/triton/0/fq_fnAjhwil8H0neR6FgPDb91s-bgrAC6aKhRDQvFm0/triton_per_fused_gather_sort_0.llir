; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/fc/cfcbdfl4vo2g66j5ucfvlq4wlik2skho5xaoaohv2hc6jfly6za5.py\00"
@assertMessage_0 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp10 < 4\00"

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_per_fused_gather_sort_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !11 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %7 = shl i32 %6, 3, !dbg !13
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %9 = lshr i32 %8, 2, !dbg !14
  %10 = and i32 %9, 7, !dbg !14
  %11 = or disjoint i32 %7, %10, !dbg !15
  %12 = icmp slt i32 %11, 256, !dbg !16
  %13 = and i32 %8, 1, !dbg !17
  %14 = and i32 %8, 3, !dbg !17
  %15 = shl i32 %11, 2, !dbg !18
  %16 = or disjoint i32 %15, %14, !dbg !19
  %17 = sext i32 %16 to i64, !dbg !20
  %18 = getelementptr i64, ptr addrspace(1) %0, i64 %17, !dbg !20
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %18, i1 %12, i1 %12) #4, !dbg !21
  %20 = lshr i32 %8, 1, !dbg !22
  %.lobit1 = and i32 %20, 1, !dbg !22
  %21 = zext nneg i32 %.lobit1 to i64, !dbg !27
  %22 = zext nneg i32 %13 to i64, !dbg !27
  %23 = xor i64 %21, 1, !dbg !29
  %24 = xor i64 %22, 1, !dbg !29
  %25 = mul nuw nsw i64 %19, %24, !dbg !30
  %extelt.offset = lshr i64 %25, 32, !dbg !31
  %26 = trunc nuw i64 %extelt.offset to i32, !dbg !31
  %27 = trunc i64 %25 to i32, !dbg !31
  %28 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %27, i32 1, i32 31), !dbg !31
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %26, i32 1, i32 31), !dbg !31
  %30 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !31
  %31 = insertelement <2 x i32> %30, i32 %29, i64 1, !dbg !31
  %32 = bitcast <2 x i32> %31 to i64, !dbg !31
  %33 = add i64 %25, %32, !dbg !34
  %34 = mul nuw nsw i64 %19, %22, !dbg !36
  %extelt.offset2 = lshr i64 %34, 32, !dbg !31
  %35 = trunc nuw i64 %extelt.offset2 to i32, !dbg !31
  %36 = trunc i64 %34 to i32, !dbg !31
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 1, i32 31), !dbg !31
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 1, i32 31), !dbg !31
  %39 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !31
  %40 = insertelement <2 x i32> %39, i32 %38, i64 1, !dbg !31
  %41 = bitcast <2 x i32> %40 to i64, !dbg !31
  %42 = add i64 %34, %41, !dbg !34
  %43 = trunc i32 %20 to i1, !dbg !37
  %44 = icmp sle i64 %33, %42, !dbg !37
  %.not = xor i1 %44, %43, !dbg !37
  %45 = xor i64 %42, %33, !dbg !38
  %46 = select i1 %.not, i64 0, i64 %45, !dbg !39
  %47 = xor i64 %46, %19, !dbg !40
  %48 = mul nuw nsw i64 %47, %23, !dbg !30
  %extelt.offset3 = lshr i64 %48, 32, !dbg !31
  %49 = trunc nuw i64 %extelt.offset3 to i32, !dbg !31
  %50 = trunc i64 %48 to i32, !dbg !31
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 2, i32 31), !dbg !31
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 2, i32 31), !dbg !31
  %53 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !31
  %54 = insertelement <2 x i32> %53, i32 %52, i64 1, !dbg !31
  %55 = bitcast <2 x i32> %54 to i64, !dbg !31
  %56 = add i64 %48, %55, !dbg !34
  %57 = mul nuw nsw i64 %47, %21, !dbg !36
  %extelt.offset4 = lshr i64 %57, 32, !dbg !31
  %58 = trunc nuw i64 %extelt.offset4 to i32, !dbg !31
  %59 = trunc i64 %57 to i32, !dbg !31
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 2, i32 31), !dbg !31
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 2, i32 31), !dbg !31
  %62 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !31
  %63 = insertelement <2 x i32> %62, i32 %61, i64 1, !dbg !31
  %64 = bitcast <2 x i32> %63 to i64, !dbg !31
  %65 = add i64 %57, %64, !dbg !34
  %66 = icmp sgt i64 %56, %65, !dbg !41
  %67 = xor i64 %56, %65, !dbg !38
  %68 = select i1 %66, i64 %67, i64 0, !dbg !39
  %69 = xor i64 %68, %47, !dbg !40
  %70 = mul nuw nsw i64 %69, %24, !dbg !30
  %extelt.offset5 = lshr i64 %70, 32, !dbg !31
  %71 = trunc nuw i64 %extelt.offset5 to i32, !dbg !31
  %72 = trunc i64 %70 to i32, !dbg !31
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 1, i32 31), !dbg !31
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 1, i32 31), !dbg !31
  %75 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !31
  %76 = insertelement <2 x i32> %75, i32 %74, i64 1, !dbg !31
  %77 = bitcast <2 x i32> %76 to i64, !dbg !31
  %78 = add i64 %70, %77, !dbg !34
  %79 = mul nuw nsw i64 %69, %22, !dbg !36
  %extelt.offset6 = lshr i64 %79, 32, !dbg !31
  %80 = trunc nuw i64 %extelt.offset6 to i32, !dbg !31
  %81 = trunc i64 %79 to i32, !dbg !31
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 1, i32 31), !dbg !31
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 1, i32 31), !dbg !31
  %84 = insertelement <2 x i32> poison, i32 %82, i64 0, !dbg !31
  %85 = insertelement <2 x i32> %84, i32 %83, i64 1, !dbg !31
  %86 = bitcast <2 x i32> %85 to i64, !dbg !31
  %87 = add i64 %79, %86, !dbg !34
  %88 = icmp sgt i64 %78, %87, !dbg !41
  %89 = xor i64 %78, %87, !dbg !38
  %90 = select i1 %88, i64 %89, i64 0, !dbg !39
  %91 = xor i64 %90, %69, !dbg !40
  %92 = lshr i64 %91, 61, !dbg !42
  %93 = and i64 %92, 4, !dbg !42
  %94 = add i64 %93, %91, !dbg !42
  %95 = icmp ugt i64 %94, 3, !dbg !43
  %.not8 = and i1 %12, %95, !dbg !44
  br i1 %.not8, label %96, label %97, !dbg !44

96:                                               ; preds = %5
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 41, ptr nonnull @assertFunc_0, i64 1), !dbg !44
  unreachable, !dbg !44

97:                                               ; preds = %5
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %98 = sext i32 %15 to i64, !dbg !45
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !46
  %100 = getelementptr float, ptr addrspace(1) %99, i64 %98, !dbg !46
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %12) #4, !dbg !47
  %102 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !48
  %103 = and i32 %8, 32, !dbg !49
  %104 = icmp eq i32 %103, 0, !dbg !49
  %105 = and i1 %104, %12, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %101, ptr addrspace(1) %102, i1 %105) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfcbdfl4vo2g66j5ucfvlq4wlik2skho5xaoaohv2hc6jfly6za5.py", directory: "inductor_cache/fc")
!4 = !{ptr @triton_per_fused_gather_sort_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_gather_sort_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_per_fused_gather_sort_0", linkageName: "triton_per_fused_gather_sort_0", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 23, column: 28, scope: !11)
!13 = !DILocation(line: 23, column: 33, scope: !11)
!14 = !DILocation(line: 24, column: 44, scope: !11)
!15 = !DILocation(line: 24, column: 23, scope: !11)
!16 = !DILocation(line: 25, column: 21, scope: !11)
!17 = !DILocation(line: 26, column: 34, scope: !11)
!18 = !DILocation(line: 31, column: 41, scope: !11)
!19 = !DILocation(line: 31, column: 39, scope: !11)
!20 = !DILocation(line: 31, column: 34, scope: !11)
!21 = !DILocation(line: 31, column: 46, scope: !11)
!22 = !DILocation(line: 575, column: 44, scope: !23, inlinedAt: !26)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!25 = distinct !DILexicalBlockFile(scope: !11, file: !24, discriminator: 0)
!26 = !DILocation(line: 36, column: 67, scope: !11)
!27 = !DILocation(line: 504, column: 51, scope: !28, inlinedAt: !26)
!28 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!29 = !DILocation(line: 505, column: 21, scope: !28, inlinedAt: !26)
!30 = !DILocation(line: 506, column: 40, scope: !28, inlinedAt: !26)
!31 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !26)
!32 = distinct !DILexicalBlockFile(scope: !28, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !26)
!35 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!36 = !DILocation(line: 507, column: 41, scope: !28, inlinedAt: !26)
!37 = !DILocation(line: 547, column: 28, scope: !28, inlinedAt: !26)
!38 = !DILocation(line: 548, column: 38, scope: !28, inlinedAt: !26)
!39 = !DILocation(line: 548, column: 46, scope: !28, inlinedAt: !26)
!40 = !DILocation(line: 548, column: 15, scope: !28, inlinedAt: !26)
!41 = !DILocation(line: 538, column: 22, scope: !28, inlinedAt: !26)
!42 = !DILocation(line: 40, column: 33, scope: !11)
!43 = !DILocation(line: 41, column: 38, scope: !11)
!44 = !DILocation(line: 41, column: 62, scope: !11)
!45 = !DILocation(line: 42, column: 39, scope: !11)
!46 = !DILocation(line: 42, column: 31, scope: !11)
!47 = !DILocation(line: 42, column: 46, scope: !11)
!48 = !DILocation(line: 43, column: 25, scope: !11)
!49 = !DILocation(line: 43, column: 44, scope: !11)
!50 = !DILocation(line: 43, column: 4, scope: !11)
