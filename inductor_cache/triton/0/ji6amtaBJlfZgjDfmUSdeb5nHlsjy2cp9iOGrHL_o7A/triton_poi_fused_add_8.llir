; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 4, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %13, 16, !dbg !12
  %15 = or disjoint i32 %13, 32, !dbg !12
  %16 = or disjoint i32 %13, 48, !dbg !12
  %17 = shl i32 %11, 2, !dbg !12
  %18 = and i32 %17, 60, !dbg !12
  %19 = or disjoint i32 %10, %13, !dbg !13
  %20 = or disjoint i32 %10, %14, !dbg !13
  %21 = or disjoint i32 %10, %15, !dbg !13
  %22 = or disjoint i32 %10, %16, !dbg !13
  %23 = or disjoint i32 %10, %18, !dbg !13
  %24 = icmp slt i32 %19, 384, !dbg !14
  %25 = icmp slt i32 %20, 384, !dbg !14
  %26 = icmp slt i32 %21, 384, !dbg !14
  %27 = icmp slt i32 %22, 384, !dbg !14
  %28 = icmp slt i32 %23, 384, !dbg !14
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %30 = shl i32 %29, 6, !dbg !16
  %31 = or disjoint i32 %30, %18, !dbg !17
  %32 = or disjoint i32 %31, 1, !dbg !17
  %33 = or disjoint i32 %31, 2, !dbg !17
  %34 = or disjoint i32 %31, 3, !dbg !17
  %35 = or disjoint i32 %30, %13, !dbg !17
  %36 = or disjoint i32 %30, %14, !dbg !17
  %37 = or disjoint i32 %30, %15, !dbg !17
  %38 = or disjoint i32 %30, %16, !dbg !17
  %39 = icmp slt i32 %31, 256, !dbg !18
  %40 = icmp slt i32 %35, 256, !dbg !18
  %41 = icmp slt i32 %36, 256, !dbg !18
  %42 = icmp slt i32 %37, 256, !dbg !18
  %43 = icmp slt i32 %38, 256, !dbg !18
  %44 = srem i32 %20, 96, !dbg !19
  %45 = srem i32 %21, 96, !dbg !19
  %46 = srem i32 %22, 96, !dbg !19
  %.frozen = freeze i32 %23, !dbg !20
  %47 = sdiv i32 %.frozen, 96, !dbg !20
  %48 = mul i32 %47, 96, !dbg !19
  %.decomposed = sub i32 %.frozen, %48, !dbg !19
  %.frozen56 = freeze i32 %31, !dbg !21
  %49 = sdiv i32 %.frozen56, 16, !dbg !21
  %50 = mul i32 %49, 16, !dbg !22
  %.decomposed57 = sub i32 %.frozen56, %50, !dbg !22
  %51 = srem i32 %32, 16, !dbg !22
  %52 = srem i32 %33, 16, !dbg !22
  %53 = srem i32 %34, 16, !dbg !22
  %.frozen58 = freeze i32 %35, !dbg !21
  %54 = sdiv i32 %.frozen58, 16, !dbg !21
  %55 = mul i32 %54, 16, !dbg !22
  %.decomposed59 = sub i32 %.frozen58, %55, !dbg !22
  %.frozen60 = freeze i32 %36, !dbg !21
  %56 = sdiv i32 %.frozen60, 16, !dbg !21
  %57 = mul i32 %56, 16, !dbg !22
  %.decomposed61 = sub i32 %.frozen60, %57, !dbg !22
  %.frozen62 = freeze i32 %37, !dbg !21
  %58 = sdiv i32 %.frozen62, 16, !dbg !21
  %59 = mul i32 %58, 16, !dbg !22
  %.decomposed63 = sub i32 %.frozen62, %59, !dbg !22
  %.frozen64 = freeze i32 %38, !dbg !21
  %60 = sdiv i32 %.frozen64, 16, !dbg !21
  %61 = mul i32 %60, 16, !dbg !22
  %.decomposed65 = sub i32 %.frozen64, %61, !dbg !22
  %62 = shl i32 %19, 8, !dbg !23
  %63 = shl i32 %20, 8, !dbg !23
  %64 = shl i32 %21, 8, !dbg !23
  %65 = shl i32 %22, 8, !dbg !23
  %66 = add i32 %31, %62, !dbg !24
  %67 = add i32 %31, %63, !dbg !24
  %68 = add i32 %31, %64, !dbg !24
  %69 = add i32 %31, %65, !dbg !24
  %70 = sext i32 %66 to i64, !dbg !25
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !25
  %72 = sext i32 %67 to i64, !dbg !25
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !25
  %74 = sext i32 %68 to i64, !dbg !25
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !25
  %76 = sext i32 %69 to i64, !dbg !25
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !25
  %78 = and i1 %24, %39, !dbg !26
  %79 = and i1 %25, %39, !dbg !26
  %80 = and i1 %26, %39, !dbg !26
  %81 = and i1 %27, %39, !dbg !26
  %82 = and i1 %28, %40, !dbg !26
  %83 = and i1 %28, %41, !dbg !26
  %84 = and i1 %28, %42, !dbg !26
  %85 = and i1 %28, %43, !dbg !26
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %78) #3, !dbg !27
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !27
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !27
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !27
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !27
  %91 = bitcast i32 %87 to float, !dbg !27
  %92 = bitcast i32 %88 to float, !dbg !27
  %93 = bitcast i32 %89 to float, !dbg !27
  %94 = bitcast i32 %90 to float, !dbg !27
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 %79) #3, !dbg !27
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !27
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !27
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !27
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !27
  %100 = bitcast i32 %96 to float, !dbg !27
  %101 = bitcast i32 %97 to float, !dbg !27
  %102 = bitcast i32 %98 to float, !dbg !27
  %103 = bitcast i32 %99 to float, !dbg !27
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %80) #3, !dbg !27
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !27
  %106 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !27
  %107 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !27
  %108 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !27
  %109 = bitcast i32 %105 to float, !dbg !27
  %110 = bitcast i32 %106 to float, !dbg !27
  %111 = bitcast i32 %107 to float, !dbg !27
  %112 = bitcast i32 %108 to float, !dbg !27
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %81) #3, !dbg !27
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !27
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !27
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !27
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !27
  %118 = bitcast i32 %114 to float, !dbg !27
  %119 = bitcast i32 %115 to float, !dbg !27
  %120 = bitcast i32 %116 to float, !dbg !27
  %121 = bitcast i32 %117 to float, !dbg !27
  %122 = sext i32 %44 to i64, !dbg !28
  %123 = getelementptr float, ptr addrspace(1) %1, i64 %122, !dbg !28
  %124 = sext i32 %45 to i64, !dbg !28
  %125 = getelementptr float, ptr addrspace(1) %1, i64 %124, !dbg !28
  %126 = sext i32 %46 to i64, !dbg !28
  %127 = getelementptr float, ptr addrspace(1) %1, i64 %126, !dbg !28
  %128 = shl nsw i32 %44, 8, !dbg !29
  %129 = shl nsw i32 %45, 8, !dbg !29
  %130 = shl nsw i32 %46, 8, !dbg !29
  %131 = add i32 %128, %31, !dbg !30
  %132 = add i32 %129, %31, !dbg !30
  %133 = add i32 %130, %31, !dbg !30
  %134 = sext i32 %131 to i64, !dbg !31
  %135 = getelementptr float, ptr addrspace(1) %2, i64 %134, !dbg !31
  %136 = sext i32 %132 to i64, !dbg !31
  %137 = getelementptr float, ptr addrspace(1) %2, i64 %136, !dbg !31
  %138 = sext i32 %133 to i64, !dbg !31
  %139 = getelementptr float, ptr addrspace(1) %2, i64 %138, !dbg !31
  %140 = srem i32 %54, 8, !dbg !32
  %141 = srem i32 %56, 8, !dbg !32
  %142 = srem i32 %58, 8, !dbg !32
  %143 = srem i32 %60, 8, !dbg !32
  %144 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !32
  %145 = insertelement <2 x i32> %144, i32 %19, i64 1, !dbg !32
  %146 = srem <2 x i32> %145, <i32 8, i32 96>, !dbg !32
  %147 = extractelement <2 x i32> %146, i64 1, !dbg !29
  %148 = sext i32 %147 to i64, !dbg !28
  %149 = getelementptr float, ptr addrspace(1) %1, i64 %148, !dbg !28
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %24) #3, !dbg !33
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %24) #3, !dbg !33
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %24) #3, !dbg !33
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %24) #3, !dbg !33
  %154 = bitcast i32 %153 to float, !dbg !33
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %25) #3, !dbg !33
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %25) #3, !dbg !33
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %25) #3, !dbg !33
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %25) #3, !dbg !33
  %159 = bitcast i32 %158 to float, !dbg !33
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %26) #3, !dbg !33
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %26) #3, !dbg !33
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %26) #3, !dbg !33
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %26) #3, !dbg !33
  %164 = bitcast i32 %163 to float, !dbg !33
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %27) #3, !dbg !33
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %27) #3, !dbg !33
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %27) #3, !dbg !33
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %27) #3, !dbg !33
  %169 = bitcast i32 %168 to float, !dbg !33
  %170 = shl nsw i32 %147, 8, !dbg !29
  %171 = add i32 %170, %31, !dbg !30
  %172 = sext i32 %171 to i64, !dbg !31
  %173 = getelementptr float, ptr addrspace(1) %2, i64 %172, !dbg !31
  %174 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %173, i1 %78) #3, !dbg !34
  %175 = extractvalue { i32, i32, i32, i32 } %174, 0, !dbg !34
  %176 = extractvalue { i32, i32, i32, i32 } %174, 1, !dbg !34
  %177 = extractvalue { i32, i32, i32, i32 } %174, 2, !dbg !34
  %178 = extractvalue { i32, i32, i32, i32 } %174, 3, !dbg !34
  %179 = bitcast i32 %175 to float, !dbg !34
  %180 = bitcast i32 %176 to float, !dbg !34
  %181 = bitcast i32 %177 to float, !dbg !34
  %182 = bitcast i32 %178 to float, !dbg !34
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %135, i1 %79) #3, !dbg !34
  %184 = extractvalue { i32, i32, i32, i32 } %183, 0, !dbg !34
  %185 = extractvalue { i32, i32, i32, i32 } %183, 1, !dbg !34
  %186 = extractvalue { i32, i32, i32, i32 } %183, 2, !dbg !34
  %187 = extractvalue { i32, i32, i32, i32 } %183, 3, !dbg !34
  %188 = bitcast i32 %184 to float, !dbg !34
  %189 = bitcast i32 %185 to float, !dbg !34
  %190 = bitcast i32 %186 to float, !dbg !34
  %191 = bitcast i32 %187 to float, !dbg !34
  %192 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %137, i1 %80) #3, !dbg !34
  %193 = extractvalue { i32, i32, i32, i32 } %192, 0, !dbg !34
  %194 = extractvalue { i32, i32, i32, i32 } %192, 1, !dbg !34
  %195 = extractvalue { i32, i32, i32, i32 } %192, 2, !dbg !34
  %196 = extractvalue { i32, i32, i32, i32 } %192, 3, !dbg !34
  %197 = bitcast i32 %193 to float, !dbg !34
  %198 = bitcast i32 %194 to float, !dbg !34
  %199 = bitcast i32 %195 to float, !dbg !34
  %200 = bitcast i32 %196 to float, !dbg !34
  %201 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %139, i1 %81) #3, !dbg !34
  %202 = extractvalue { i32, i32, i32, i32 } %201, 0, !dbg !34
  %203 = extractvalue { i32, i32, i32, i32 } %201, 1, !dbg !34
  %204 = extractvalue { i32, i32, i32, i32 } %201, 2, !dbg !34
  %205 = extractvalue { i32, i32, i32, i32 } %201, 3, !dbg !34
  %206 = bitcast i32 %202 to float, !dbg !34
  %207 = bitcast i32 %203 to float, !dbg !34
  %208 = bitcast i32 %204 to float, !dbg !34
  %209 = bitcast i32 %205 to float, !dbg !34
  %210 = shl nsw <2 x i32> %146, <i32 3, i32 6>, !dbg !35
  %211 = shl nsw i32 %44, 6, !dbg !36
  %212 = shl nsw i32 %45, 6, !dbg !36
  %213 = shl nsw i32 %46, 6, !dbg !36
  %214 = extractelement <2 x i32> %210, i64 0, !dbg !37
  %215 = extractelement <2 x i32> %210, i64 1, !dbg !37
  %216 = add nsw i32 %214, %215, !dbg !37
  %217 = add nsw i32 %214, %211, !dbg !37
  %218 = add nsw i32 %214, %212, !dbg !37
  %219 = add nsw i32 %214, %213, !dbg !37
  %.lhs.trunc = trunc nsw i32 %.decomposed57 to i8, !dbg !38
  %220 = srem i8 %.lhs.trunc, 8, !dbg !38
  %.sext = sext i8 %220 to i32, !dbg !38
  %.lhs.trunc31 = trunc nsw i32 %51 to i8, !dbg !38
  %221 = srem i8 %.lhs.trunc31, 8, !dbg !38
  %.sext32 = sext i8 %221 to i32, !dbg !38
  %.lhs.trunc33 = trunc nsw i32 %52 to i8, !dbg !38
  %222 = srem i8 %.lhs.trunc33, 8, !dbg !38
  %.sext34 = sext i8 %222 to i32, !dbg !38
  %.lhs.trunc35 = trunc nsw i32 %53 to i8, !dbg !38
  %223 = srem i8 %.lhs.trunc35, 8, !dbg !38
  %.sext36 = sext i8 %223 to i32, !dbg !38
  %.lhs.trunc37 = trunc nsw i32 %.decomposed59 to i8, !dbg !38
  %224 = sdiv i8 %.lhs.trunc37, 8, !dbg !39
  %225 = mul i8 %224, 8, !dbg !38
  %.decomposed66 = sub i8 %.lhs.trunc37, %225, !dbg !38
  %.lhs.trunc39 = trunc nsw i32 %.decomposed61 to i8, !dbg !38
  %226 = sdiv i8 %.lhs.trunc39, 8, !dbg !39
  %227 = mul i8 %226, 8, !dbg !38
  %.decomposed67 = sub i8 %.lhs.trunc39, %227, !dbg !38
  %.lhs.trunc41 = trunc nsw i32 %.decomposed63 to i8, !dbg !38
  %228 = sdiv i8 %.lhs.trunc41, 8, !dbg !39
  %229 = mul i8 %228, 8, !dbg !38
  %.decomposed68 = sub i8 %.lhs.trunc41, %229, !dbg !38
  %.lhs.trunc43 = trunc nsw i32 %.decomposed65 to i8, !dbg !38
  %230 = sdiv i8 %.lhs.trunc43, 8, !dbg !39
  %231 = mul i8 %230, 8, !dbg !38
  %.decomposed69 = sub i8 %.lhs.trunc43, %231, !dbg !38
  %232 = add nsw i32 %216, %.sext, !dbg !40
  %233 = add nsw i32 %216, %.sext32, !dbg !40
  %234 = add nsw i32 %216, %.sext34, !dbg !40
  %235 = add nsw i32 %216, %.sext36, !dbg !40
  %236 = add nsw i32 %217, %.sext, !dbg !40
  %237 = add nsw i32 %217, %.sext32, !dbg !40
  %238 = add nsw i32 %217, %.sext34, !dbg !40
  %239 = add nsw i32 %217, %.sext36, !dbg !40
  %240 = add nsw i32 %218, %.sext, !dbg !40
  %241 = add nsw i32 %218, %.sext32, !dbg !40
  %242 = add nsw i32 %218, %.sext34, !dbg !40
  %243 = add nsw i32 %218, %.sext36, !dbg !40
  %244 = add nsw i32 %219, %.sext, !dbg !40
  %245 = add nsw i32 %219, %.sext32, !dbg !40
  %246 = add nsw i32 %219, %.sext34, !dbg !40
  %247 = add nsw i32 %219, %.sext36, !dbg !40
  %248 = sext i32 %232 to i64, !dbg !41
  %249 = getelementptr float, ptr addrspace(1) %3, i64 %248, !dbg !41
  %250 = sext i32 %233 to i64, !dbg !41
  %251 = getelementptr float, ptr addrspace(1) %3, i64 %250, !dbg !41
  %252 = sext i32 %234 to i64, !dbg !41
  %253 = getelementptr float, ptr addrspace(1) %3, i64 %252, !dbg !41
  %254 = sext i32 %235 to i64, !dbg !41
  %255 = getelementptr float, ptr addrspace(1) %3, i64 %254, !dbg !41
  %256 = sext i32 %236 to i64, !dbg !41
  %257 = getelementptr float, ptr addrspace(1) %3, i64 %256, !dbg !41
  %258 = sext i32 %237 to i64, !dbg !41
  %259 = getelementptr float, ptr addrspace(1) %3, i64 %258, !dbg !41
  %260 = sext i32 %238 to i64, !dbg !41
  %261 = getelementptr float, ptr addrspace(1) %3, i64 %260, !dbg !41
  %262 = sext i32 %239 to i64, !dbg !41
  %263 = getelementptr float, ptr addrspace(1) %3, i64 %262, !dbg !41
  %264 = sext i32 %240 to i64, !dbg !41
  %265 = getelementptr float, ptr addrspace(1) %3, i64 %264, !dbg !41
  %266 = sext i32 %241 to i64, !dbg !41
  %267 = getelementptr float, ptr addrspace(1) %3, i64 %266, !dbg !41
  %268 = sext i32 %242 to i64, !dbg !41
  %269 = getelementptr float, ptr addrspace(1) %3, i64 %268, !dbg !41
  %270 = sext i32 %243 to i64, !dbg !41
  %271 = getelementptr float, ptr addrspace(1) %3, i64 %270, !dbg !41
  %272 = sext i32 %244 to i64, !dbg !41
  %273 = getelementptr float, ptr addrspace(1) %3, i64 %272, !dbg !41
  %274 = sext i32 %245 to i64, !dbg !41
  %275 = getelementptr float, ptr addrspace(1) %3, i64 %274, !dbg !41
  %276 = sext i32 %246 to i64, !dbg !41
  %277 = getelementptr float, ptr addrspace(1) %3, i64 %276, !dbg !41
  %278 = sext i32 %247 to i64, !dbg !41
  %279 = getelementptr float, ptr addrspace(1) %3, i64 %278, !dbg !41
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %249, i1 %78) #3, !dbg !42
  %281 = bitcast i32 %280 to float, !dbg !42
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %251, i1 %78) #3, !dbg !42
  %283 = bitcast i32 %282 to float, !dbg !42
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %253, i1 %78) #3, !dbg !42
  %285 = bitcast i32 %284 to float, !dbg !42
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %255, i1 %78) #3, !dbg !42
  %287 = bitcast i32 %286 to float, !dbg !42
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %257, i1 %79) #3, !dbg !42
  %289 = bitcast i32 %288 to float, !dbg !42
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %259, i1 %79) #3, !dbg !42
  %291 = bitcast i32 %290 to float, !dbg !42
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %261, i1 %79) #3, !dbg !42
  %293 = bitcast i32 %292 to float, !dbg !42
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %263, i1 %79) #3, !dbg !42
  %295 = bitcast i32 %294 to float, !dbg !42
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %265, i1 %80) #3, !dbg !42
  %297 = bitcast i32 %296 to float, !dbg !42
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %267, i1 %80) #3, !dbg !42
  %299 = bitcast i32 %298 to float, !dbg !42
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %269, i1 %80) #3, !dbg !42
  %301 = bitcast i32 %300 to float, !dbg !42
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %271, i1 %80) #3, !dbg !42
  %303 = bitcast i32 %302 to float, !dbg !42
  %304 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %273, i1 %81) #3, !dbg !42
  %305 = bitcast i32 %304 to float, !dbg !42
  %306 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %275, i1 %81) #3, !dbg !42
  %307 = bitcast i32 %306 to float, !dbg !42
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %277, i1 %81) #3, !dbg !42
  %309 = bitcast i32 %308 to float, !dbg !42
  %310 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %279, i1 %81) #3, !dbg !42
  %311 = bitcast i32 %310 to float, !dbg !42
  %312 = insertelement <2 x i8> poison, i8 %.decomposed66, i64 0, !dbg !38
  %313 = insertelement <2 x i8> %312, i8 %224, i64 1, !dbg !38
  %314 = insertelement <2 x i8> poison, i8 %.decomposed67, i64 0, !dbg !38
  %315 = insertelement <2 x i8> %314, i8 %226, i64 1, !dbg !38
  %316 = insertelement <2 x i8> poison, i8 %.decomposed68, i64 0, !dbg !38
  %317 = insertelement <2 x i8> %316, i8 %228, i64 1, !dbg !38
  %318 = insertelement <2 x i8> poison, i8 %.decomposed69, i64 0, !dbg !38
  %319 = insertelement <2 x i8> %318, i8 %230, i64 1, !dbg !38
  %320 = sdiv i32 %35, 128, !dbg !43
  %321 = sdiv i32 %36, 128, !dbg !43
  %322 = sdiv i32 %37, 128, !dbg !43
  %323 = sdiv i32 %38, 128, !dbg !43
  %324 = insertelement <4 x i32> poison, i32 %320, i64 0, !dbg !44
  %325 = insertelement <4 x i32> %324, i32 %140, i64 1, !dbg !44
  %326 = sext <2 x i8> %313 to <2 x i32>, !dbg !44
  %327 = shufflevector <2 x i32> %326, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !44
  %328 = shufflevector <4 x i32> %325, <4 x i32> %327, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !44
  %329 = mul <4 x i32> %328, <i32 12288, i32 768, i32 96, i32 6144>, !dbg !44
  %330 = insertelement <4 x i32> poison, i32 %321, i64 0, !dbg !44
  %331 = insertelement <4 x i32> %330, i32 %141, i64 1, !dbg !44
  %332 = sext <2 x i8> %315 to <2 x i32>, !dbg !44
  %333 = shufflevector <2 x i32> %332, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !44
  %334 = shufflevector <4 x i32> %331, <4 x i32> %333, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !44
  %335 = mul <4 x i32> %334, <i32 12288, i32 768, i32 96, i32 6144>, !dbg !44
  %336 = insertelement <4 x i32> poison, i32 %322, i64 0, !dbg !44
  %337 = insertelement <4 x i32> %336, i32 %142, i64 1, !dbg !44
  %338 = sext <2 x i8> %317 to <2 x i32>, !dbg !44
  %339 = shufflevector <2 x i32> %338, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !44
  %340 = shufflevector <4 x i32> %337, <4 x i32> %339, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !44
  %341 = mul <4 x i32> %340, <i32 12288, i32 768, i32 96, i32 6144>, !dbg !44
  %342 = insertelement <4 x i32> poison, i32 %323, i64 0, !dbg !44
  %343 = insertelement <4 x i32> %342, i32 %143, i64 1, !dbg !44
  %344 = sext <2 x i8> %319 to <2 x i32>, !dbg !44
  %345 = shufflevector <2 x i32> %344, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !44
  %346 = shufflevector <4 x i32> %343, <4 x i32> %345, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !44
  %347 = mul <4 x i32> %346, <i32 12288, i32 768, i32 96, i32 6144>, !dbg !44
  %348 = mul i32 %47, 24576, !dbg !45
  %349 = add i32 %348, %.decomposed, !dbg !46
  %350 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %329), !dbg !47
  %op.rdx = add i32 %350, %349, !dbg !48
  %351 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %335), !dbg !47
  %op.rdx53 = add i32 %351, %349, !dbg !48
  %352 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %341), !dbg !47
  %op.rdx54 = add i32 %352, %349, !dbg !48
  %353 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %347), !dbg !47
  %op.rdx55 = add i32 %353, %349, !dbg !48
  %354 = sext i32 %op.rdx to i64, !dbg !49
  %355 = getelementptr float, ptr addrspace(1) %4, i64 %354, !dbg !49
  %356 = sext i32 %op.rdx53 to i64, !dbg !49
  %357 = getelementptr float, ptr addrspace(1) %4, i64 %356, !dbg !49
  %358 = sext i32 %op.rdx54 to i64, !dbg !49
  %359 = getelementptr float, ptr addrspace(1) %4, i64 %358, !dbg !49
  %360 = sext i32 %op.rdx55 to i64, !dbg !49
  %361 = getelementptr float, ptr addrspace(1) %4, i64 %360, !dbg !49
  %362 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %355, i1 %82) #3, !dbg !50
  %363 = extractvalue { i32, i32, i32, i32 } %362, 0, !dbg !50
  %364 = extractvalue { i32, i32, i32, i32 } %362, 1, !dbg !50
  %365 = extractvalue { i32, i32, i32, i32 } %362, 2, !dbg !50
  %366 = extractvalue { i32, i32, i32, i32 } %362, 3, !dbg !50
  %367 = bitcast i32 %363 to float, !dbg !50
  %368 = bitcast i32 %364 to float, !dbg !50
  %369 = bitcast i32 %365 to float, !dbg !50
  %370 = bitcast i32 %366 to float, !dbg !50
  %371 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %357, i1 %83) #3, !dbg !50
  %372 = extractvalue { i32, i32, i32, i32 } %371, 0, !dbg !50
  %373 = extractvalue { i32, i32, i32, i32 } %371, 1, !dbg !50
  %374 = extractvalue { i32, i32, i32, i32 } %371, 2, !dbg !50
  %375 = extractvalue { i32, i32, i32, i32 } %371, 3, !dbg !50
  %376 = bitcast i32 %372 to float, !dbg !50
  %377 = bitcast i32 %373 to float, !dbg !50
  %378 = bitcast i32 %374 to float, !dbg !50
  %379 = bitcast i32 %375 to float, !dbg !50
  %380 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %359, i1 %84) #3, !dbg !50
  %381 = extractvalue { i32, i32, i32, i32 } %380, 0, !dbg !50
  %382 = extractvalue { i32, i32, i32, i32 } %380, 1, !dbg !50
  %383 = extractvalue { i32, i32, i32, i32 } %380, 2, !dbg !50
  %384 = extractvalue { i32, i32, i32, i32 } %380, 3, !dbg !50
  %385 = bitcast i32 %381 to float, !dbg !50
  %386 = bitcast i32 %382 to float, !dbg !50
  %387 = bitcast i32 %383 to float, !dbg !50
  %388 = bitcast i32 %384 to float, !dbg !50
  %389 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %361, i1 %85) #3, !dbg !50
  %390 = extractvalue { i32, i32, i32, i32 } %389, 0, !dbg !50
  %391 = extractvalue { i32, i32, i32, i32 } %389, 1, !dbg !50
  %392 = extractvalue { i32, i32, i32, i32 } %389, 2, !dbg !50
  %393 = extractvalue { i32, i32, i32, i32 } %389, 3, !dbg !50
  %394 = bitcast i32 %390 to float, !dbg !50
  %395 = bitcast i32 %391 to float, !dbg !50
  %396 = bitcast i32 %392 to float, !dbg !50
  %397 = bitcast i32 %393 to float, !dbg !50
  %398 = sext i32 %.decomposed to i64, !dbg !51
  %399 = getelementptr float, ptr addrspace(1) %5, i64 %398, !dbg !51
  %400 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %399, i1 %28) #3, !dbg !52
  %401 = extractvalue { i32, i32, i32, i32 } %400, 0, !dbg !52
  %402 = extractvalue { i32, i32, i32, i32 } %400, 1, !dbg !52
  %403 = extractvalue { i32, i32, i32, i32 } %400, 2, !dbg !52
  %404 = extractvalue { i32, i32, i32, i32 } %400, 3, !dbg !52
  %405 = bitcast i32 %401 to float, !dbg !52
  %406 = bitcast i32 %402 to float, !dbg !52
  %407 = bitcast i32 %403 to float, !dbg !52
  %408 = bitcast i32 %404 to float, !dbg !52
  %409 = fadd float %91, %154, !dbg !53
  %410 = fadd float %92, %154, !dbg !53
  %411 = fadd float %93, %154, !dbg !53
  %412 = fadd float %94, %154, !dbg !53
  %413 = fadd float %100, %159, !dbg !53
  %414 = fadd float %101, %159, !dbg !53
  %415 = fadd float %102, %159, !dbg !53
  %416 = fadd float %103, %159, !dbg !53
  %417 = fadd float %109, %164, !dbg !53
  %418 = fadd float %110, %164, !dbg !53
  %419 = fadd float %111, %164, !dbg !53
  %420 = fadd float %112, %164, !dbg !53
  %421 = fadd float %118, %169, !dbg !53
  %422 = fadd float %119, %169, !dbg !53
  %423 = fadd float %120, %169, !dbg !53
  %424 = fadd float %121, %169, !dbg !53
  %425 = fadd float %179, %281, !dbg !54
  %426 = fadd float %180, %283, !dbg !54
  %427 = fadd float %181, %285, !dbg !54
  %428 = fadd float %182, %287, !dbg !54
  %429 = fadd float %188, %289, !dbg !54
  %430 = fadd float %189, %291, !dbg !54
  %431 = fadd float %190, %293, !dbg !54
  %432 = fadd float %191, %295, !dbg !54
  %433 = fadd float %197, %297, !dbg !54
  %434 = fadd float %198, %299, !dbg !54
  %435 = fadd float %199, %301, !dbg !54
  %436 = fadd float %200, %303, !dbg !54
  %437 = fadd float %206, %305, !dbg !54
  %438 = fadd float %207, %307, !dbg !54
  %439 = fadd float %208, %309, !dbg !54
  %440 = fadd float %209, %311, !dbg !54
  %441 = fadd float %409, %425, !dbg !55
  %442 = fadd float %410, %426, !dbg !55
  %443 = fadd float %411, %427, !dbg !55
  %444 = fadd float %412, %428, !dbg !55
  %445 = fadd float %413, %429, !dbg !55
  %446 = fadd float %414, %430, !dbg !55
  %447 = fadd float %415, %431, !dbg !55
  %448 = fadd float %416, %432, !dbg !55
  %449 = fadd float %417, %433, !dbg !55
  %450 = fadd float %418, %434, !dbg !55
  %451 = fadd float %419, %435, !dbg !55
  %452 = fadd float %420, %436, !dbg !55
  %453 = fadd float %421, %437, !dbg !55
  %454 = fadd float %422, %438, !dbg !55
  %455 = fadd float %423, %439, !dbg !55
  %456 = fadd float %424, %440, !dbg !55
  %457 = shl i32 %11, 8, !dbg !55
  %458 = and i32 %457, 3840, !dbg !55
  %459 = or disjoint i32 %458, %13, !dbg !55
  %460 = and i32 %17, 1020, !dbg !55
  %461 = lshr exact i32 %458, 2, !dbg !55
  %462 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %461, !dbg !55
  %463 = getelementptr float, ptr addrspace(3) %462, i32 %459, !dbg !55
  %464 = bitcast float %441 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %463, <1 x i32> %464, i1 true) #3, !dbg !55
  %465 = or disjoint i32 %459, 64, !dbg !55
  %466 = lshr i32 %465, 6, !dbg !55
  %.idx = shl nuw nsw i32 %466, 4, !dbg !55
  %467 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !55
  %468 = getelementptr float, ptr addrspace(3) %467, i32 %465, !dbg !55
  %469 = bitcast float %442 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %468, <1 x i32> %469, i1 true) #3, !dbg !55
  %470 = or disjoint i32 %459, 128, !dbg !55
  %471 = lshr i32 %470, 6, !dbg !55
  %.idx1 = shl nuw nsw i32 %471, 4, !dbg !55
  %472 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !55
  %473 = getelementptr float, ptr addrspace(3) %472, i32 %470, !dbg !55
  %474 = bitcast float %443 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %473, <1 x i32> %474, i1 true) #3, !dbg !55
  %475 = or disjoint i32 %459, 192, !dbg !55
  %476 = lshr i32 %475, 6, !dbg !55
  %.idx2 = shl nuw nsw i32 %476, 4, !dbg !55
  %477 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !55
  %478 = getelementptr float, ptr addrspace(3) %477, i32 %475, !dbg !55
  %479 = bitcast float %444 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %478, <1 x i32> %479, i1 true) #3, !dbg !55
  %480 = or disjoint i32 %459, 16, !dbg !55
  %481 = getelementptr float, ptr addrspace(3) %462, i32 %480, !dbg !55
  %482 = bitcast float %445 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %481, <1 x i32> %482, i1 true) #3, !dbg !55
  %483 = or disjoint i32 %459, 80, !dbg !55
  %484 = lshr i32 %483, 6, !dbg !55
  %.idx3 = shl nuw nsw i32 %484, 4, !dbg !55
  %485 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !55
  %486 = getelementptr float, ptr addrspace(3) %485, i32 %483, !dbg !55
  %487 = bitcast float %446 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %486, <1 x i32> %487, i1 true) #3, !dbg !55
  %488 = or disjoint i32 %459, 144, !dbg !55
  %489 = lshr i32 %488, 6, !dbg !55
  %.idx4 = shl nuw nsw i32 %489, 4, !dbg !55
  %490 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !55
  %491 = getelementptr float, ptr addrspace(3) %490, i32 %488, !dbg !55
  %492 = bitcast float %447 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %491, <1 x i32> %492, i1 true) #3, !dbg !55
  %493 = or disjoint i32 %459, 208, !dbg !55
  %494 = lshr i32 %493, 6, !dbg !55
  %.idx5 = shl nuw nsw i32 %494, 4, !dbg !55
  %495 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !55
  %496 = getelementptr float, ptr addrspace(3) %495, i32 %493, !dbg !55
  %497 = bitcast float %448 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %496, <1 x i32> %497, i1 true) #3, !dbg !55
  %498 = or disjoint i32 %459, 32, !dbg !55
  %499 = getelementptr float, ptr addrspace(3) %462, i32 %498, !dbg !55
  %500 = bitcast float %449 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %499, <1 x i32> %500, i1 true) #3, !dbg !55
  %501 = or disjoint i32 %459, 96, !dbg !55
  %502 = lshr i32 %501, 6, !dbg !55
  %.idx6 = shl nuw nsw i32 %502, 4, !dbg !55
  %503 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !55
  %504 = getelementptr float, ptr addrspace(3) %503, i32 %501, !dbg !55
  %505 = bitcast float %450 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %504, <1 x i32> %505, i1 true) #3, !dbg !55
  %506 = or disjoint i32 %459, 160, !dbg !55
  %507 = lshr i32 %506, 6, !dbg !55
  %.idx7 = shl nuw nsw i32 %507, 4, !dbg !55
  %508 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !55
  %509 = getelementptr float, ptr addrspace(3) %508, i32 %506, !dbg !55
  %510 = bitcast float %451 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %509, <1 x i32> %510, i1 true) #3, !dbg !55
  %511 = or disjoint i32 %459, 224, !dbg !55
  %512 = lshr i32 %511, 6, !dbg !55
  %.idx8 = shl nuw nsw i32 %512, 4, !dbg !55
  %513 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx8, !dbg !55
  %514 = getelementptr float, ptr addrspace(3) %513, i32 %511, !dbg !55
  %515 = bitcast float %452 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %514, <1 x i32> %515, i1 true) #3, !dbg !55
  %516 = or disjoint i32 %459, 48, !dbg !55
  %517 = getelementptr float, ptr addrspace(3) %462, i32 %516, !dbg !55
  %518 = bitcast float %453 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %517, <1 x i32> %518, i1 true) #3, !dbg !55
  %519 = or disjoint i32 %459, 112, !dbg !55
  %520 = lshr i32 %519, 6, !dbg !55
  %.idx9 = shl nuw nsw i32 %520, 4, !dbg !55
  %521 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx9, !dbg !55
  %522 = getelementptr float, ptr addrspace(3) %521, i32 %519, !dbg !55
  %523 = bitcast float %454 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %522, <1 x i32> %523, i1 true) #3, !dbg !55
  %524 = or disjoint i32 %459, 176, !dbg !55
  %525 = lshr i32 %524, 6, !dbg !55
  %.idx10 = shl nuw nsw i32 %525, 4, !dbg !55
  %526 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx10, !dbg !55
  %527 = getelementptr float, ptr addrspace(3) %526, i32 %524, !dbg !55
  %528 = bitcast float %455 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %527, <1 x i32> %528, i1 true) #3, !dbg !55
  %529 = or disjoint i32 %459, 240, !dbg !55
  %530 = lshr i32 %529, 6, !dbg !55
  %.idx11 = shl nuw nsw i32 %530, 4, !dbg !55
  %531 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx11, !dbg !55
  %532 = getelementptr float, ptr addrspace(3) %531, i32 %529, !dbg !55
  %533 = bitcast float %456 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %532, <1 x i32> %533, i1 true) #3, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %534 = lshr i32 %460, 6, !dbg !55
  %535 = and i32 %11, 255, !dbg !55
  %536 = add nuw nsw i32 %534, %535, !dbg !55
  %.idx12 = shl nuw nsw i32 %536, 4, !dbg !55
  %537 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx12, !dbg !55
  %538 = load float, ptr addrspace(3) %537, align 16, !dbg !55
  %539 = getelementptr inbounds i8, ptr addrspace(3) %537, i32 4, !dbg !55
  %540 = load float, ptr addrspace(3) %539, align 4, !dbg !55
  %541 = getelementptr inbounds i8, ptr addrspace(3) %537, i32 8, !dbg !55
  %542 = load float, ptr addrspace(3) %541, align 8, !dbg !55
  %543 = getelementptr inbounds i8, ptr addrspace(3) %537, i32 12, !dbg !55
  %544 = load float, ptr addrspace(3) %543, align 4, !dbg !55
  %545 = or disjoint i32 %460, 1024, !dbg !55
  %546 = lshr i32 %545, 6, !dbg !55
  %.idx16 = shl nuw nsw i32 %546, 4, !dbg !55
  %547 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx16, !dbg !55
  %548 = getelementptr inbounds float, ptr addrspace(3) %547, i32 %545, !dbg !55
  %549 = load float, ptr addrspace(3) %548, align 16, !dbg !55
  %550 = getelementptr inbounds i8, ptr addrspace(3) %548, i32 4, !dbg !55
  %551 = load float, ptr addrspace(3) %550, align 4, !dbg !55
  %552 = getelementptr inbounds i8, ptr addrspace(3) %548, i32 8, !dbg !55
  %553 = load float, ptr addrspace(3) %552, align 8, !dbg !55
  %554 = getelementptr inbounds i8, ptr addrspace(3) %548, i32 12, !dbg !55
  %555 = load float, ptr addrspace(3) %554, align 4, !dbg !55
  %556 = or disjoint i32 %460, 2048, !dbg !55
  %557 = lshr i32 %556, 6, !dbg !55
  %.idx21 = shl nuw nsw i32 %557, 4, !dbg !55
  %558 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx21, !dbg !55
  %559 = getelementptr inbounds float, ptr addrspace(3) %558, i32 %556, !dbg !55
  %560 = load float, ptr addrspace(3) %559, align 16, !dbg !55
  %561 = getelementptr inbounds i8, ptr addrspace(3) %559, i32 4, !dbg !55
  %562 = load float, ptr addrspace(3) %561, align 4, !dbg !55
  %563 = getelementptr inbounds i8, ptr addrspace(3) %559, i32 8, !dbg !55
  %564 = load float, ptr addrspace(3) %563, align 8, !dbg !55
  %565 = getelementptr inbounds i8, ptr addrspace(3) %559, i32 12, !dbg !55
  %566 = load float, ptr addrspace(3) %565, align 4, !dbg !55
  %567 = or disjoint i32 %460, 3072, !dbg !55
  %568 = lshr i32 %567, 6, !dbg !55
  %.idx26 = shl nuw nsw i32 %568, 4, !dbg !55
  %569 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx26, !dbg !55
  %570 = getelementptr inbounds float, ptr addrspace(3) %569, i32 %567, !dbg !55
  %571 = load float, ptr addrspace(3) %570, align 16, !dbg !55
  %572 = getelementptr inbounds i8, ptr addrspace(3) %570, i32 4, !dbg !55
  %573 = load float, ptr addrspace(3) %572, align 4, !dbg !55
  %574 = getelementptr inbounds i8, ptr addrspace(3) %570, i32 8, !dbg !55
  %575 = load float, ptr addrspace(3) %574, align 8, !dbg !55
  %576 = getelementptr inbounds i8, ptr addrspace(3) %570, i32 12, !dbg !55
  %577 = load float, ptr addrspace(3) %576, align 4, !dbg !55
  %578 = fadd float %367, %405, !dbg !56
  %579 = fadd float %368, %406, !dbg !56
  %580 = fadd float %369, %407, !dbg !56
  %581 = fadd float %370, %408, !dbg !56
  %582 = fadd float %376, %405, !dbg !56
  %583 = fadd float %377, %406, !dbg !56
  %584 = fadd float %378, %407, !dbg !56
  %585 = fadd float %379, %408, !dbg !56
  %586 = fadd float %385, %405, !dbg !56
  %587 = fadd float %386, %406, !dbg !56
  %588 = fadd float %387, %407, !dbg !56
  %589 = fadd float %388, %408, !dbg !56
  %590 = fadd float %394, %405, !dbg !56
  %591 = fadd float %395, %406, !dbg !56
  %592 = fadd float %396, %407, !dbg !56
  %593 = fadd float %397, %408, !dbg !56
  %594 = fadd float %578, %538, !dbg !57
  %595 = fadd float %579, %540, !dbg !57
  %596 = fadd float %580, %542, !dbg !57
  %597 = fadd float %581, %544, !dbg !57
  %598 = fadd float %582, %549, !dbg !57
  %599 = fadd float %583, %551, !dbg !57
  %600 = fadd float %584, %553, !dbg !57
  %601 = fadd float %585, %555, !dbg !57
  %602 = fadd float %586, %560, !dbg !57
  %603 = fadd float %587, %562, !dbg !57
  %604 = fadd float %588, %564, !dbg !57
  %605 = fadd float %589, %566, !dbg !57
  %606 = fadd float %590, %571, !dbg !57
  %607 = fadd float %591, %573, !dbg !57
  %608 = fadd float %592, %575, !dbg !57
  %609 = fadd float %593, %577, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %610 = lshr exact i32 %458, 4, !dbg !59
  %611 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %610, !dbg !59
  %612 = getelementptr float, ptr addrspace(3) %611, i32 %459, !dbg !59
  %613 = bitcast float %594 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %612, <1 x i32> %613, i1 true) #3, !dbg !59
  %614 = getelementptr float, ptr addrspace(3) @global_smem, i32 %466, !dbg !59
  %615 = getelementptr float, ptr addrspace(3) %614, i32 %465, !dbg !59
  %616 = bitcast float %595 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %615, <1 x i32> %616, i1 true) #3, !dbg !59
  %617 = getelementptr float, ptr addrspace(3) @global_smem, i32 %471, !dbg !59
  %618 = getelementptr float, ptr addrspace(3) %617, i32 %470, !dbg !59
  %619 = bitcast float %596 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %618, <1 x i32> %619, i1 true) #3, !dbg !59
  %620 = getelementptr float, ptr addrspace(3) @global_smem, i32 %476, !dbg !59
  %621 = getelementptr float, ptr addrspace(3) %620, i32 %475, !dbg !59
  %622 = bitcast float %597 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %621, <1 x i32> %622, i1 true) #3, !dbg !59
  %623 = getelementptr float, ptr addrspace(3) %611, i32 %480, !dbg !59
  %624 = bitcast float %598 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %623, <1 x i32> %624, i1 true) #3, !dbg !59
  %625 = getelementptr float, ptr addrspace(3) @global_smem, i32 %484, !dbg !59
  %626 = getelementptr float, ptr addrspace(3) %625, i32 %483, !dbg !59
  %627 = bitcast float %599 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %626, <1 x i32> %627, i1 true) #3, !dbg !59
  %628 = getelementptr float, ptr addrspace(3) @global_smem, i32 %489, !dbg !59
  %629 = getelementptr float, ptr addrspace(3) %628, i32 %488, !dbg !59
  %630 = bitcast float %600 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %629, <1 x i32> %630, i1 true) #3, !dbg !59
  %631 = getelementptr float, ptr addrspace(3) @global_smem, i32 %494, !dbg !59
  %632 = getelementptr float, ptr addrspace(3) %631, i32 %493, !dbg !59
  %633 = bitcast float %601 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %632, <1 x i32> %633, i1 true) #3, !dbg !59
  %634 = getelementptr float, ptr addrspace(3) %611, i32 %498, !dbg !59
  %635 = bitcast float %602 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %634, <1 x i32> %635, i1 true) #3, !dbg !59
  %636 = getelementptr float, ptr addrspace(3) @global_smem, i32 %502, !dbg !59
  %637 = getelementptr float, ptr addrspace(3) %636, i32 %501, !dbg !59
  %638 = bitcast float %603 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %637, <1 x i32> %638, i1 true) #3, !dbg !59
  %639 = getelementptr float, ptr addrspace(3) @global_smem, i32 %507, !dbg !59
  %640 = getelementptr float, ptr addrspace(3) %639, i32 %506, !dbg !59
  %641 = bitcast float %604 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %640, <1 x i32> %641, i1 true) #3, !dbg !59
  %642 = getelementptr float, ptr addrspace(3) @global_smem, i32 %512, !dbg !59
  %643 = getelementptr float, ptr addrspace(3) %642, i32 %511, !dbg !59
  %644 = bitcast float %605 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %643, <1 x i32> %644, i1 true) #3, !dbg !59
  %645 = getelementptr float, ptr addrspace(3) %611, i32 %516, !dbg !59
  %646 = bitcast float %606 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %645, <1 x i32> %646, i1 true) #3, !dbg !59
  %647 = getelementptr float, ptr addrspace(3) @global_smem, i32 %520, !dbg !59
  %648 = getelementptr float, ptr addrspace(3) %647, i32 %519, !dbg !59
  %649 = bitcast float %607 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %648, <1 x i32> %649, i1 true) #3, !dbg !59
  %650 = getelementptr float, ptr addrspace(3) @global_smem, i32 %525, !dbg !59
  %651 = getelementptr float, ptr addrspace(3) %650, i32 %524, !dbg !59
  %652 = bitcast float %608 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %651, <1 x i32> %652, i1 true) #3, !dbg !59
  %653 = getelementptr float, ptr addrspace(3) @global_smem, i32 %530, !dbg !59
  %654 = getelementptr float, ptr addrspace(3) %653, i32 %529, !dbg !59
  %655 = bitcast float %609 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %654, <1 x i32> %655, i1 true) #3, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %656 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %534, !dbg !59
  %657 = getelementptr inbounds float, ptr addrspace(3) %656, i32 %460, !dbg !59
  %658 = load i32, ptr addrspace(3) %657, align 4, !dbg !59
  %659 = or disjoint i32 %460, 1, !dbg !59
  %660 = getelementptr inbounds float, ptr addrspace(3) %656, i32 %659, !dbg !59
  %661 = load i32, ptr addrspace(3) %660, align 4, !dbg !59
  %662 = or disjoint i32 %460, 2, !dbg !59
  %663 = getelementptr inbounds float, ptr addrspace(3) %656, i32 %662, !dbg !59
  %664 = load i32, ptr addrspace(3) %663, align 4, !dbg !59
  %665 = or disjoint i32 %460, 3, !dbg !59
  %666 = getelementptr inbounds float, ptr addrspace(3) %656, i32 %665, !dbg !59
  %667 = load i32, ptr addrspace(3) %666, align 4, !dbg !59
  %668 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %546, !dbg !59
  %669 = getelementptr inbounds float, ptr addrspace(3) %668, i32 %545, !dbg !59
  %670 = load i32, ptr addrspace(3) %669, align 4, !dbg !59
  %671 = or disjoint i32 %460, 1025, !dbg !59
  %672 = lshr i32 %671, 6, !dbg !59
  %673 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %672, !dbg !59
  %674 = getelementptr inbounds float, ptr addrspace(3) %673, i32 %671, !dbg !59
  %675 = load i32, ptr addrspace(3) %674, align 4, !dbg !59
  %676 = or disjoint i32 %460, 1026, !dbg !59
  %677 = lshr i32 %676, 6, !dbg !59
  %678 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %677, !dbg !59
  %679 = getelementptr inbounds float, ptr addrspace(3) %678, i32 %676, !dbg !59
  %680 = load i32, ptr addrspace(3) %679, align 4, !dbg !59
  %681 = or disjoint i32 %460, 1027, !dbg !59
  %682 = lshr i32 %681, 6, !dbg !59
  %683 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %682, !dbg !59
  %684 = getelementptr inbounds float, ptr addrspace(3) %683, i32 %681, !dbg !59
  %685 = load i32, ptr addrspace(3) %684, align 4, !dbg !59
  %686 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %557, !dbg !59
  %687 = getelementptr inbounds float, ptr addrspace(3) %686, i32 %556, !dbg !59
  %688 = load i32, ptr addrspace(3) %687, align 4, !dbg !59
  %689 = or disjoint i32 %460, 2049, !dbg !59
  %690 = lshr i32 %689, 6, !dbg !59
  %691 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %690, !dbg !59
  %692 = getelementptr inbounds float, ptr addrspace(3) %691, i32 %689, !dbg !59
  %693 = load i32, ptr addrspace(3) %692, align 4, !dbg !59
  %694 = or disjoint i32 %460, 2050, !dbg !59
  %695 = lshr i32 %694, 6, !dbg !59
  %696 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %695, !dbg !59
  %697 = getelementptr inbounds float, ptr addrspace(3) %696, i32 %694, !dbg !59
  %698 = load i32, ptr addrspace(3) %697, align 4, !dbg !59
  %699 = or disjoint i32 %460, 2051, !dbg !59
  %700 = lshr i32 %699, 6, !dbg !59
  %701 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %700, !dbg !59
  %702 = getelementptr inbounds float, ptr addrspace(3) %701, i32 %699, !dbg !59
  %703 = load i32, ptr addrspace(3) %702, align 4, !dbg !59
  %704 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %568, !dbg !59
  %705 = getelementptr inbounds float, ptr addrspace(3) %704, i32 %567, !dbg !59
  %706 = load i32, ptr addrspace(3) %705, align 4, !dbg !59
  %707 = or disjoint i32 %460, 3073, !dbg !59
  %708 = lshr i32 %707, 6, !dbg !59
  %709 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %708, !dbg !59
  %710 = getelementptr inbounds float, ptr addrspace(3) %709, i32 %707, !dbg !59
  %711 = load i32, ptr addrspace(3) %710, align 4, !dbg !59
  %712 = or disjoint i32 %460, 3074, !dbg !59
  %713 = lshr i32 %712, 6, !dbg !59
  %714 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %713, !dbg !59
  %715 = getelementptr inbounds float, ptr addrspace(3) %714, i32 %712, !dbg !59
  %716 = load i32, ptr addrspace(3) %715, align 4, !dbg !59
  %717 = or disjoint i32 %460, 3075, !dbg !59
  %718 = lshr i32 %717, 6, !dbg !59
  %719 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %718, !dbg !59
  %720 = getelementptr inbounds float, ptr addrspace(3) %719, i32 %717, !dbg !59
  %721 = load i32, ptr addrspace(3) %720, align 4, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %658, i32 %661, i32 %664, i32 %667, ptr addrspace(1) %71, i1 %78) #3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %670, i32 %675, i32 %680, i32 %685, ptr addrspace(1) %73, i1 %79) #3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %688, i32 %693, i32 %698, i32 %703, ptr addrspace(1) %75, i1 %80) #3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %706, i32 %711, i32 %716, i32 %721, ptr addrspace(1) %77, i1 %81) #3, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2saqzgkixge2ceyzt36gpl54middaeipgy6tvhhngrgdks4pnis.py", directory: "inductor_cache/2s")
!4 = !{ptr @triton_poi_fused_add_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_8", linkageName: "triton_poi_fused_add_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 43, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 34, scope: !7)
!26 = !DILocation(line: 34, column: 56, scope: !7)
!27 = !DILocation(line: 34, column: 48, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 36, column: 39, scope: !7)
!30 = !DILocation(line: 36, column: 35, scope: !7)
!31 = !DILocation(line: 36, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 39, scope: !7)
!33 = !DILocation(line: 35, column: 35, scope: !7)
!34 = !DILocation(line: 36, column: 44, scope: !7)
!35 = !DILocation(line: 37, column: 34, scope: !7)
!36 = !DILocation(line: 37, column: 48, scope: !7)
!37 = !DILocation(line: 37, column: 45, scope: !7)
!38 = !DILocation(line: 37, column: 60, scope: !7)
!39 = !DILocation(line: 38, column: 80, scope: !7)
!40 = !DILocation(line: 37, column: 55, scope: !7)
!41 = !DILocation(line: 37, column: 30, scope: !7)
!42 = !DILocation(line: 37, column: 66, scope: !7)
!43 = !DILocation(line: 38, column: 98, scope: !7)
!44 = !DILocation(line: 38, column: 92, scope: !7)
!45 = !DILocation(line: 38, column: 109, scope: !7)
!46 = !DILocation(line: 38, column: 35, scope: !7)
!47 = !DILocation(line: 38, column: 103, scope: !7)
!48 = !DILocation(line: 38, column: 51, scope: !7)
!49 = !DILocation(line: 38, column: 30, scope: !7)
!50 = !DILocation(line: 38, column: 114, scope: !7)
!51 = !DILocation(line: 39, column: 30, scope: !7)
!52 = !DILocation(line: 39, column: 35, scope: !7)
!53 = !DILocation(line: 40, column: 18, scope: !7)
!54 = !DILocation(line: 41, column: 18, scope: !7)
!55 = !DILocation(line: 42, column: 18, scope: !7)
!56 = !DILocation(line: 43, column: 18, scope: !7)
!57 = !DILocation(line: 44, column: 19, scope: !7)
!58 = !DILocation(line: 45, column: 4, scope: !7)
!59 = !DILocation(line: 46, column: 49, scope: !7)
!60 = !DILocation(line: 46, column: 4, scope: !7)
