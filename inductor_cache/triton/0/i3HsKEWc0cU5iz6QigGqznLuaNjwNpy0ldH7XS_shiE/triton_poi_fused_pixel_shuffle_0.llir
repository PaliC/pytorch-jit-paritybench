; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_pixel_shuffle_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 252, !dbg !12
  %11 = and i32 %8, 127, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 128, !dbg !13
  %15 = icmp slt i32 %12, 512, !dbg !14
  %16 = icmp slt i32 %13, 512, !dbg !14
  %17 = icmp slt i32 %14, 512, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %19 = shl i32 %18, 1, !dbg !16
  %20 = lshr i32 %8, 6, !dbg !17
  %.lobit = and i32 %20, 1, !dbg !17
  %21 = or disjoint i32 %19, %.lobit, !dbg !18
  %22 = icmp slt i32 %21, 2, !dbg !19
  %23 = icmp slt i32 %19, 2, !dbg !19
  %24 = ashr exact i32 %12, 2, !dbg !20
  %25 = sdiv i32 %13, 4, !dbg !20
  %26 = sdiv i32 %14, 4, !dbg !20
  %27 = srem i32 %25, 2, !dbg !21
  %28 = srem i32 %26, 2, !dbg !21
  %29 = sdiv i32 %12, 8, !dbg !22
  %30 = sdiv i32 %12, 32, !dbg !23
  %31 = sdiv i32 %13, 32, !dbg !23
  %32 = sdiv i32 %14, 32, !dbg !23
  %33 = srem i32 %31, 4, !dbg !24
  %34 = srem i32 %32, 4, !dbg !24
  %35 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !25
  %36 = insertelement <2 x i32> %35, i32 %24, i64 1, !dbg !25
  %37 = srem <2 x i32> %36, <i32 4, i32 2>, !dbg !25
  %38 = insertelement <4 x i32> poison, i32 %30, i64 0, !dbg !26
  %39 = insertelement <4 x i32> %38, i32 %21, i64 1, !dbg !26
  %40 = shufflevector <2 x i32> %37, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !26
  %41 = shufflevector <4 x i32> %39, <4 x i32> %40, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !26
  %42 = shl <4 x i32> %41, <i32 6, i32 4, i32 2, i32 5>, !dbg !26
  %43 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %42), !dbg !27
  %44 = sext i32 %43 to i64, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !28
  %46 = and i1 %15, %22, !dbg !29
  %47 = and i1 %23, %16, !dbg !29
  %48 = and i1 %17, %23, !dbg !29
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %46) #3, !dbg !30
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !30
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !30
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !30
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !30
  %54 = shl i32 %8, 3, !dbg !30
  %55 = and i32 %54, 504, !dbg !30
  %56 = or disjoint i32 %55, %.lobit, !dbg !30
  %57 = shl i32 %8, 1, !dbg !30
  %58 = and i32 %57, 254, !dbg !30
  %59 = lshr exact i32 %55, 1, !dbg !30
  %60 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %59, !dbg !30
  %61 = getelementptr inbounds float, ptr addrspace(3) %60, i32 %56, !dbg !30
  %62 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %62, i1 true) #3, !dbg !30
  %63 = or disjoint i32 %56, 2, !dbg !30
  %64 = lshr i32 %63, 1, !dbg !30
  %65 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %64, !dbg !30
  %66 = getelementptr inbounds float, ptr addrspace(3) %65, i32 %63, !dbg !30
  %67 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 true) #3, !dbg !30
  %68 = or disjoint i32 %56, 4, !dbg !30
  %69 = lshr i32 %68, 1, !dbg !30
  %70 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %69, !dbg !30
  %71 = getelementptr inbounds float, ptr addrspace(3) %70, i32 %68, !dbg !30
  %72 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 true) #3, !dbg !30
  %73 = or disjoint i32 %56, 6, !dbg !30
  %74 = lshr i32 %73, 1, !dbg !30
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %74, !dbg !30
  %76 = getelementptr inbounds float, ptr addrspace(3) %75, i32 %73, !dbg !30
  %77 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 true) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %78 = lshr exact i32 %58, 1, !dbg !30
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i32 %78, !dbg !30
  %80 = getelementptr float, ptr addrspace(3) %79, i32 %58, !dbg !30
  %81 = load float, ptr addrspace(3) %80, align 4, !dbg !30
  %82 = or disjoint i32 %58, 1, !dbg !30
  %83 = getelementptr float, ptr addrspace(3) %79, i32 %82, !dbg !30
  %84 = load float, ptr addrspace(3) %83, align 4, !dbg !30
  %85 = or disjoint i32 %58, 256, !dbg !30
  %86 = lshr exact i32 %85, 1, !dbg !30
  %87 = getelementptr float, ptr addrspace(3) @global_smem, i32 %86, !dbg !30
  %88 = getelementptr float, ptr addrspace(3) %87, i32 %85, !dbg !30
  %89 = load float, ptr addrspace(3) %88, align 4, !dbg !30
  %90 = or disjoint i32 %58, 257, !dbg !30
  %91 = lshr i32 %90, 1, !dbg !30
  %92 = getelementptr float, ptr addrspace(3) @global_smem, i32 %91, !dbg !30
  %93 = getelementptr float, ptr addrspace(3) %92, i32 %90, !dbg !30
  %94 = load float, ptr addrspace(3) %93, align 4, !dbg !30
  %95 = add i32 %27, %18, !dbg !31
  %96 = shl i32 %95, 1, !dbg !31
  %97 = add i32 %18, %28, !dbg !31
  %98 = shl i32 %97, 1, !dbg !31
  %99 = shl nsw i32 %33, 2, !dbg !32
  %100 = shl nsw i32 %34, 2, !dbg !32
  %101 = add i32 %96, %99, !dbg !33
  %102 = add i32 %98, %100, !dbg !33
  %103 = sext i32 %101 to i64, !dbg !34
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !34
  %105 = sext i32 %102 to i64, !dbg !34
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %105, !dbg !34
  %107 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %104, i1 %47) #3, !dbg !35
  %108 = extractvalue { i32, i32 } %107, 0, !dbg !35
  %109 = extractvalue { i32, i32 } %107, 1, !dbg !35
  %110 = bitcast i32 %108 to float, !dbg !35
  %111 = bitcast i32 %109 to float, !dbg !35
  %112 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %106, i1 %48) #3, !dbg !35
  %113 = extractvalue { i32, i32 } %112, 0, !dbg !35
  %114 = extractvalue { i32, i32 } %112, 1, !dbg !35
  %115 = bitcast i32 %113 to float, !dbg !35
  %116 = bitcast i32 %114 to float, !dbg !35
  %117 = fadd float %81, %110, !dbg !36
  %118 = fadd float %84, %111, !dbg !36
  %119 = fadd float %89, %115, !dbg !36
  %120 = fadd float %94, %116, !dbg !36
  %121 = add i32 %13, %18, !dbg !37
  %122 = shl i32 %121, 1, !dbg !37
  %123 = add i32 %18, %14, !dbg !37
  %124 = shl i32 %123, 1, !dbg !37
  %125 = sext i32 %122 to i64, !dbg !38
  %126 = getelementptr float, ptr addrspace(1) %2, i64 %125, !dbg !38
  %127 = sext i32 %124 to i64, !dbg !38
  %128 = getelementptr float, ptr addrspace(1) %2, i64 %127, !dbg !38
  %129 = bitcast float %117 to i32, !dbg !39
  %130 = bitcast float %118 to i32, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %129, i32 %130, ptr addrspace(1) %126, i1 %47) #3, !dbg !39
  %131 = bitcast float %119 to i32, !dbg !39
  %132 = bitcast float %120 to i32, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %131, i32 %132, ptr addrspace(1) %128, i1 %48) #3, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmjz3j7lrspsebplkxh3syylmm74limbcw5ophyqc3ex4bek6o6t.py", directory: "inductor_cache/mj")
!4 = !{ptr @triton_poi_fused_pixel_shuffle_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_pixel_shuffle_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_pixel_shuffle_0", linkageName: "triton_poi_fused_pixel_shuffle_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 21, scope: !7)
!21 = !DILocation(line: 30, column: 26, scope: !7)
!22 = !DILocation(line: 31, column: 21, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 33, column: 27, scope: !7)
!25 = !DILocation(line: 31, column: 26, scope: !7)
!26 = !DILocation(line: 35, column: 61, scope: !7)
!27 = !DILocation(line: 35, column: 58, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 74, scope: !7)
!30 = !DILocation(line: 35, column: 66, scope: !7)
!31 = !DILocation(line: 36, column: 35, scope: !7)
!32 = !DILocation(line: 36, column: 44, scope: !7)
!33 = !DILocation(line: 36, column: 42, scope: !7)
!34 = !DILocation(line: 36, column: 30, scope: !7)
!35 = !DILocation(line: 36, column: 49, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 38, column: 30, scope: !7)
!38 = !DILocation(line: 38, column: 25, scope: !7)
!39 = !DILocation(line: 38, column: 43, scope: !7)
!40 = !DILocation(line: 38, column: 4, scope: !7)
