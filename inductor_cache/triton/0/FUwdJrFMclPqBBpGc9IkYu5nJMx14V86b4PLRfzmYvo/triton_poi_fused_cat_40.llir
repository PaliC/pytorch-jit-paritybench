; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_40(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %19 = shl i32 %18, 9, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = shl i32 %20, 1, !dbg !12
  %22 = and i32 %21, 510, !dbg !12
  %23 = or disjoint i32 %19, %22, !dbg !13
  %.frozen = freeze i32 %23, !dbg !14
  %24 = sdiv i32 %.frozen, 4096, !dbg !14
  %25 = srem i32 %24, 192, !dbg !15
  %.frozen8 = freeze i32 %23, !dbg !16
  %26 = sdiv i32 %.frozen8, 786432, !dbg !16
  %27 = mul i32 %24, 4096, !dbg !17
  %.decomposed = sub i32 %.frozen, %27, !dbg !17
  %28 = icmp slt i32 %25, 32, !dbg !18
  %29 = mul i32 %26, 786432, !dbg !19
  %srem.decomposed = sub i32 %.frozen8, %29, !dbg !19
  %30 = shl nsw i32 %26, 17, !dbg !20
  %31 = add nsw i32 %30, %srem.decomposed, !dbg !21
  %32 = sext i32 %31 to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !22
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %33, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #3, !dbg !23
  %35 = and i32 %25, -32, !dbg !24
  %36 = icmp eq i32 %35, 32, !dbg !24
  %37 = shl nsw i32 %26, 19, !dbg !25
  %38 = add nsw i32 %srem.decomposed, -131072, !dbg !26
  %39 = add nsw i32 %38, %37, !dbg !27
  %40 = sext i32 %39 to i64, !dbg !28
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !28
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %41, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #3, !dbg !29
  %43 = icmp eq i32 %35, 64, !dbg !30
  %44 = mul nsw i32 %26, 655360, !dbg !31
  %45 = add nsw i32 %srem.decomposed, -262144, !dbg !32
  %46 = add nsw i32 %45, %44, !dbg !33
  %47 = sext i32 %46 to i64, !dbg !34
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !34
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %48, i1 %43, i32 0, i1 %43, i32 0, i1 %43) #3, !dbg !35
  %50 = icmp eq i32 %35, 96, !dbg !36
  %51 = add nsw i32 %25, -96, !dbg !37
  %52 = shl nsw i32 %51, 12, !dbg !38
  %53 = add nsw i32 %30, %.decomposed, !dbg !39
  %54 = add nsw i32 %53, %52, !dbg !40
  %55 = sext i32 %54 to i64, !dbg !41
  %56 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !41
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %56, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #3, !dbg !42
  %58 = sext i32 %51 to i64, !dbg !43
  %59 = getelementptr float, ptr addrspace(1) %4, i64 %58, !dbg !43
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %50, i32 0, i1 %50) #3, !dbg !44
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %50, i32 0, i1 %50) #3, !dbg !44
  %62 = getelementptr float, ptr addrspace(1) %5, i64 %58, !dbg !45
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %50, i32 0, i1 %50) #3, !dbg !46
  %64 = bitcast i32 %63 to float, !dbg !46
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %50, i32 0, i1 %50) #3, !dbg !46
  %66 = bitcast i32 %65 to float, !dbg !46
  %67 = fadd float %64, 0x3EE4F8B580000000, !dbg !47
  %68 = fadd float %66, 0x3EE4F8B580000000, !dbg !47
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i = icmp eq i32 %69, 0, !dbg !48
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i = icmp eq i32 %70, 0, !dbg !48
  br i1 %.not.i, label %76, label %71, !dbg !48

71:                                               ; preds = %17
  br i1 %.not1.i, label %74, label %72, !dbg !48

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

76:                                               ; preds = %17
  br i1 %.not1.i, label %79, label %77, !dbg !48

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

__nv_sqrtf.exit:                                  ; preds = %72, %74, %77, %79
  %.0.i = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !48
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i1 = icmp eq i32 %81, 0, !dbg !48
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i4 = icmp eq i32 %82, 0, !dbg !48
  br i1 %.not.i1, label %88, label %83, !dbg !48

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %86, label %84, !dbg !48

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %91, label %89, !dbg !48

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

__nv_sqrtf.exit5:                                 ; preds = %84, %86, %89, %91
  %.0.i3 = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !48
  %93 = extractvalue { i32, i32 } %57, 1, !dbg !42
  %94 = bitcast i32 %93 to float, !dbg !42
  %95 = bitcast i32 %61 to float, !dbg !44
  %96 = fsub float %94, %95, !dbg !49
  %97 = extractvalue { i32, i32 } %57, 0, !dbg !42
  %98 = bitcast i32 %97 to float, !dbg !42
  %99 = bitcast i32 %60 to float, !dbg !44
  %100 = fsub float %98, %99, !dbg !49
  %101 = extractvalue { i32, i32 } %49, 1, !dbg !35
  %102 = extractvalue { i32, i32 } %49, 0, !dbg !35
  %103 = extractvalue { i32, i32 } %42, 1, !dbg !29
  %104 = extractvalue { i32, i32 } %42, 0, !dbg !29
  %105 = extractvalue { i32, i32 } %34, 1, !dbg !23
  %106 = extractvalue { i32, i32 } %34, 0, !dbg !23
  %.frozen9 = freeze i32 %23, !dbg !50
  %107 = sdiv i32 %.frozen9, 64, !dbg !50
  %108 = mul i32 %107, 64, !dbg !51
  %.decomposed10 = sub i32 %.frozen9, %108, !dbg !51
  %109 = srem i32 %107, 64, !dbg !52
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !53
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !53
  %112 = fmul float %100, %110, !dbg !54
  %113 = fmul float %96, %111, !dbg !54
  %114 = getelementptr float, ptr addrspace(1) %6, i64 %58, !dbg !55
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %50, i32 0, i1 %50) #3, !dbg !56
  %116 = bitcast i32 %115 to float, !dbg !56
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %50, i32 0, i1 %50) #3, !dbg !56
  %118 = bitcast i32 %117 to float, !dbg !56
  %119 = fmul float %112, %116, !dbg !57
  %120 = fmul float %113, %118, !dbg !57
  %121 = getelementptr float, ptr addrspace(1) %7, i64 %58, !dbg !58
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %50, i32 0, i1 %50) #3, !dbg !59
  %123 = bitcast i32 %122 to float, !dbg !59
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %50, i32 0, i1 %50) #3, !dbg !59
  %125 = bitcast i32 %124 to float, !dbg !59
  %126 = fadd float %119, %123, !dbg !60
  %127 = fadd float %120, %125, !dbg !60
  %128 = fcmp olt float %126, 0.000000e+00, !dbg !61
  %129 = fcmp olt float %127, 0.000000e+00, !dbg !61
  %130 = select i1 %128, float 0.000000e+00, float %126, !dbg !65
  %131 = select i1 %129, float 0.000000e+00, float %127, !dbg !65
  %132 = icmp sgt i32 %25, 127, !dbg !66
  %133 = add nsw i32 %25, -128, !dbg !67
  %134 = shl nsw i32 %133, 12, !dbg !68
  %135 = shl nsw i32 %26, 18, !dbg !69
  %136 = add nsw i32 %135, %.decomposed, !dbg !70
  %137 = add nsw i32 %136, %134, !dbg !71
  %138 = sext i32 %137 to i64, !dbg !72
  %139 = getelementptr float, ptr addrspace(1) %8, i64 %138, !dbg !72
  %140 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %139, i1 %132, i32 0, i1 %132, i32 0, i1 %132) #3, !dbg !73
  %141 = extractvalue { i32, i32 } %140, 0, !dbg !73
  %142 = extractvalue { i32, i32 } %140, 1, !dbg !73
  %143 = bitcast i32 %141 to float, !dbg !73
  %144 = bitcast i32 %142 to float, !dbg !73
  %145 = sext i32 %109 to i64, !dbg !74
  %146 = getelementptr i64, ptr addrspace(1) %9, i64 %145, !dbg !74
  %147 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %146, i1 %132, i1 %132) #3, !dbg !75
  %148 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %146, i1 %132, i1 %132) #3, !dbg !75
  %149 = lshr i64 %147, 58, !dbg !76
  %150 = and i64 %149, 32, !dbg !76
  %151 = add i64 %150, %147, !dbg !76
  %152 = sext i32 %.decomposed10 to i64, !dbg !77
  %153 = getelementptr i64, ptr addrspace(1) %10, i64 %152, !dbg !77
  %154 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %153, i1 %132, i1 %132, i1 %132) #3, !dbg !78
  %155 = extractvalue { i64, i64 } %154, 0, !dbg !78
  %156 = extractvalue { i64, i64 } %154, 1, !dbg !78
  %157 = lshr i64 %155, 58, !dbg !79
  %158 = and i64 %157, 32, !dbg !79
  %159 = lshr i64 %156, 58, !dbg !79
  %160 = and i64 %159, 32, !dbg !79
  %161 = shl i64 %151, 5, !dbg !80
  %162 = shl nsw i32 %133, 10, !dbg !81
  %163 = sext i32 %162 to i64, !dbg !82
  %164 = shl nsw i32 %26, 16, !dbg !83
  %165 = sext i32 %164 to i64, !dbg !84
  %166 = getelementptr float, ptr addrspace(1) %11, i64 %155, !dbg !85
  %167 = getelementptr float, ptr addrspace(1) %166, i64 %158, !dbg !85
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %161, !dbg !85
  %169 = getelementptr float, ptr addrspace(1) %168, i64 %163, !dbg !85
  %170 = getelementptr float, ptr addrspace(1) %169, i64 %165, !dbg !85
  %171 = getelementptr float, ptr addrspace(1) %11, i64 %156, !dbg !85
  %172 = getelementptr float, ptr addrspace(1) %171, i64 %160, !dbg !85
  %173 = getelementptr float, ptr addrspace(1) %172, i64 %161, !dbg !85
  %174 = getelementptr float, ptr addrspace(1) %173, i64 %163, !dbg !85
  %175 = getelementptr float, ptr addrspace(1) %174, i64 %165, !dbg !85
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %170, i1 %132, i32 0, i1 %132) #3, !dbg !86
  %177 = bitcast i32 %176 to float, !dbg !86
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %175, i1 %132, i32 0, i1 %132) #3, !dbg !86
  %179 = bitcast i32 %178 to float, !dbg !86
  %180 = getelementptr i64, ptr addrspace(1) %12, i64 %152, !dbg !87
  %181 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %180, i1 %132, i1 %132, i1 %132) #3, !dbg !88
  %182 = extractvalue { i64, i64 } %181, 0, !dbg !88
  %183 = extractvalue { i64, i64 } %181, 1, !dbg !88
  %184 = lshr i64 %182, 58, !dbg !89
  %185 = and i64 %184, 32, !dbg !89
  %186 = lshr i64 %183, 58, !dbg !89
  %187 = and i64 %186, 32, !dbg !89
  %188 = getelementptr float, ptr addrspace(1) %11, i64 %182, !dbg !90
  %189 = getelementptr float, ptr addrspace(1) %188, i64 %185, !dbg !90
  %190 = getelementptr float, ptr addrspace(1) %189, i64 %161, !dbg !90
  %191 = getelementptr float, ptr addrspace(1) %190, i64 %163, !dbg !90
  %192 = getelementptr float, ptr addrspace(1) %191, i64 %165, !dbg !90
  %193 = getelementptr float, ptr addrspace(1) %11, i64 %183, !dbg !90
  %194 = getelementptr float, ptr addrspace(1) %193, i64 %187, !dbg !90
  %195 = getelementptr float, ptr addrspace(1) %194, i64 %161, !dbg !90
  %196 = getelementptr float, ptr addrspace(1) %195, i64 %163, !dbg !90
  %197 = getelementptr float, ptr addrspace(1) %196, i64 %165, !dbg !90
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %192, i1 %132, i32 0, i1 %132) #3, !dbg !91
  %199 = bitcast i32 %198 to float, !dbg !91
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %197, i1 %132, i32 0, i1 %132) #3, !dbg !91
  %201 = bitcast i32 %200 to float, !dbg !91
  %202 = fsub float %199, %177, !dbg !92
  %203 = fsub float %201, %179, !dbg !92
  %204 = getelementptr float, ptr addrspace(1) %13, i64 %152, !dbg !93
  %205 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %204, i1 %132, i32 0, i1 %132, i32 0, i1 %132) #3, !dbg !94
  %206 = extractvalue { i32, i32 } %205, 0, !dbg !94
  %207 = extractvalue { i32, i32 } %205, 1, !dbg !94
  %208 = bitcast i32 %206 to float, !dbg !94
  %209 = bitcast i32 %207 to float, !dbg !94
  %210 = fmul float %202, %208, !dbg !95
  %211 = fmul float %203, %209, !dbg !95
  %212 = fadd float %210, %177, !dbg !96
  %213 = fadd float %211, %179, !dbg !96
  %214 = fsub float %212, %143, !dbg !97
  %215 = fsub float %213, %144, !dbg !97
  %216 = getelementptr float, ptr addrspace(1) %14, i64 %145, !dbg !98
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %216, i1 %132, i32 0, i1 %132) #3, !dbg !99
  %218 = bitcast i32 %217 to float, !dbg !99
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %216, i1 %132, i32 0, i1 %132) #3, !dbg !99
  %220 = bitcast i32 %219 to float, !dbg !99
  %221 = fmul float %214, %218, !dbg !100
  %222 = fmul float %215, %220, !dbg !100
  %223 = fadd float %221, %143, !dbg !101
  %224 = fadd float %222, %144, !dbg !101
  %225 = select i1 %132, float %223, float 0.000000e+00, !dbg !102
  %226 = select i1 %132, float %224, float 0.000000e+00, !dbg !102
  %227 = select i1 %50, float %130, float %225, !dbg !103
  %228 = select i1 %50, float %131, float %226, !dbg !103
  %229 = sext i32 %23 to i64, !dbg !104
  %230 = getelementptr float, ptr addrspace(1) %15, i64 %229, !dbg !104
  %231 = bitcast float %227 to i32, !dbg !105
  %232 = select i1 %43, i32 %102, i32 %231, !dbg !106
  %233 = select i1 %36, i32 %104, i32 %232, !dbg !107
  %234 = select i1 %28, i32 %106, i32 %233, !dbg !108
  %235 = bitcast float %228 to i32, !dbg !105
  %236 = select i1 %43, i32 %101, i32 %235, !dbg !106
  %237 = select i1 %36, i32 %103, i32 %236, !dbg !107
  %238 = select i1 %28, i32 %105, i32 %237, !dbg !108
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %234, i32 %238, ptr addrspace(1) %230, i1 true) #3, !dbg !105
  ret void, !dbg !109
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clv5d6nyxjizrr5llmq65xchswjmo756b3keldvorgtmfkeawbyq.py", directory: "inductor_cache/lv")
!4 = !{ptr @triton_poi_fused_cat_40, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_40, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_40", linkageName: "triton_poi_fused_cat_40", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 34, column: 18, scope: !7)
!19 = !DILocation(line: 35, column: 35, scope: !7)
!20 = !DILocation(line: 35, column: 54, scope: !7)
!21 = !DILocation(line: 35, column: 47, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 35, column: 59, scope: !7)
!24 = !DILocation(line: 39, column: 18, scope: !7)
!25 = !DILocation(line: 40, column: 63, scope: !7)
!26 = !DILocation(line: 40, column: 36, scope: !7)
!27 = !DILocation(line: 40, column: 56, scope: !7)
!28 = !DILocation(line: 40, column: 31, scope: !7)
!29 = !DILocation(line: 40, column: 68, scope: !7)
!30 = !DILocation(line: 44, column: 20, scope: !7)
!31 = !DILocation(line: 45, column: 63, scope: !7)
!32 = !DILocation(line: 45, column: 36, scope: !7)
!33 = !DILocation(line: 45, column: 56, scope: !7)
!34 = !DILocation(line: 45, column: 31, scope: !7)
!35 = !DILocation(line: 45, column: 68, scope: !7)
!36 = !DILocation(line: 49, column: 20, scope: !7)
!37 = !DILocation(line: 50, column: 50, scope: !7)
!38 = !DILocation(line: 50, column: 42, scope: !7)
!39 = !DILocation(line: 50, column: 36, scope: !7)
!40 = !DILocation(line: 50, column: 56, scope: !7)
!41 = !DILocation(line: 50, column: 31, scope: !7)
!42 = !DILocation(line: 50, column: 68, scope: !7)
!43 = !DILocation(line: 51, column: 31, scope: !7)
!44 = !DILocation(line: 51, column: 44, scope: !7)
!45 = !DILocation(line: 53, column: 31, scope: !7)
!46 = !DILocation(line: 53, column: 44, scope: !7)
!47 = !DILocation(line: 55, column: 20, scope: !7)
!48 = !DILocation(line: 56, column: 27, scope: !7)
!49 = !DILocation(line: 52, column: 20, scope: !7)
!50 = !DILocation(line: 27, column: 21, scope: !7)
!51 = !DILocation(line: 28, column: 19, scope: !7)
!52 = !DILocation(line: 27, column: 27, scope: !7)
!53 = !DILocation(line: 58, column: 20, scope: !7)
!54 = !DILocation(line: 61, column: 20, scope: !7)
!55 = !DILocation(line: 62, column: 31, scope: !7)
!56 = !DILocation(line: 62, column: 44, scope: !7)
!57 = !DILocation(line: 63, column: 20, scope: !7)
!58 = !DILocation(line: 64, column: 31, scope: !7)
!59 = !DILocation(line: 64, column: 44, scope: !7)
!60 = !DILocation(line: 65, column: 20, scope: !7)
!61 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !64)
!62 = distinct !DILexicalBlockFile(scope: !7, file: !63, discriminator: 0)
!63 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!64 = !DILocation(line: 67, column: 42, scope: !7)
!65 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !64)
!66 = !DILocation(line: 70, column: 20, scope: !7)
!67 = !DILocation(line: 73, column: 51, scope: !7)
!68 = !DILocation(line: 73, column: 42, scope: !7)
!69 = !DILocation(line: 73, column: 64, scope: !7)
!70 = !DILocation(line: 73, column: 36, scope: !7)
!71 = !DILocation(line: 73, column: 57, scope: !7)
!72 = !DILocation(line: 73, column: 31, scope: !7)
!73 = !DILocation(line: 73, column: 69, scope: !7)
!74 = !DILocation(line: 74, column: 31, scope: !7)
!75 = !DILocation(line: 74, column: 36, scope: !7)
!76 = !DILocation(line: 78, column: 35, scope: !7)
!77 = !DILocation(line: 79, column: 32, scope: !7)
!78 = !DILocation(line: 79, column: 37, scope: !7)
!79 = !DILocation(line: 82, column: 35, scope: !7)
!80 = !DILocation(line: 83, column: 43, scope: !7)
!81 = !DILocation(line: 83, column: 57, scope: !7)
!82 = !DILocation(line: 83, column: 51, scope: !7)
!83 = !DILocation(line: 83, column: 78, scope: !7)
!84 = !DILocation(line: 83, column: 72, scope: !7)
!85 = !DILocation(line: 83, column: 32, scope: !7)
!86 = !DILocation(line: 83, column: 83, scope: !7)
!87 = !DILocation(line: 84, column: 32, scope: !7)
!88 = !DILocation(line: 84, column: 37, scope: !7)
!89 = !DILocation(line: 87, column: 35, scope: !7)
!90 = !DILocation(line: 88, column: 32, scope: !7)
!91 = !DILocation(line: 88, column: 83, scope: !7)
!92 = !DILocation(line: 89, column: 20, scope: !7)
!93 = !DILocation(line: 90, column: 32, scope: !7)
!94 = !DILocation(line: 90, column: 37, scope: !7)
!95 = !DILocation(line: 91, column: 20, scope: !7)
!96 = !DILocation(line: 92, column: 20, scope: !7)
!97 = !DILocation(line: 93, column: 20, scope: !7)
!98 = !DILocation(line: 94, column: 32, scope: !7)
!99 = !DILocation(line: 94, column: 37, scope: !7)
!100 = !DILocation(line: 95, column: 20, scope: !7)
!101 = !DILocation(line: 96, column: 20, scope: !7)
!102 = !DILocation(line: 98, column: 35, scope: !7)
!103 = !DILocation(line: 0, scope: !7)
!104 = !DILocation(line: 103, column: 25, scope: !7)
!105 = !DILocation(line: 103, column: 37, scope: !7)
!106 = !DILocation(line: 100, column: 35, scope: !7)
!107 = !DILocation(line: 101, column: 34, scope: !7)
!108 = !DILocation(line: 102, column: 33, scope: !7)
!109 = !DILocation(line: 103, column: 4, scope: !7)
