; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_native_layer_norm_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = lshr i32 %11, 5, !dbg !11
  %14 = shl i32 %11, 2, !dbg !11
  %15 = and i32 %14, 508, !dbg !11
  %16 = icmp samesign ult i32 %15, 384, !dbg !12
  %17 = mul i32 %10, 384, !dbg !13
  %18 = add i32 %17, %15, !dbg !14
  %19 = sext i32 %18 to i64, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !15
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !17
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !18
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !18
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !18
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !18
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !18
  %32 = zext nneg i32 %15 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !19
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !20
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !21
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !22
  %37 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !16
  %38 = insertelement <2 x i32> %37, i32 %23, i64 1, !dbg !16
  %39 = bitcast <2 x i32> %38 to <2 x float>, !dbg !16
  %40 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !18
  %41 = insertelement <2 x i32> %40, i32 %29, i64 1, !dbg !18
  %42 = bitcast <2 x i32> %41 to <2 x float>, !dbg !18
  %43 = fadd <2 x float> %39, %42, !dbg !23
  %44 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !16
  %45 = insertelement <2 x i32> %44, i32 %24, i64 1, !dbg !16
  %46 = bitcast <2 x i32> %45 to <2 x float>, !dbg !16
  %47 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !18
  %48 = insertelement <2 x i32> %47, i32 %30, i64 1, !dbg !18
  %49 = bitcast <2 x i32> %48 to <2 x float>, !dbg !18
  %50 = fadd <2 x float> %46, %49, !dbg !23
  %51 = extractelement <2 x float> %43, i64 0, !dbg !24
  %52 = extractelement <2 x float> %43, i64 1, !dbg !24
  %53 = fadd float %51, %52, !dbg !24
  %54 = extractelement <2 x float> %50, i64 1, !dbg !24
  %55 = fadd float %54, %53, !dbg !24
  %56 = extractelement <2 x float> %50, i64 0, !dbg !24
  %57 = fadd float %56, %55, !dbg !24
  %58 = select i1 %16, float %57, float 0.000000e+00, !dbg !24
  %59 = bitcast float %58 to i32, !dbg !29
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 16, i32 31), !dbg !29
  %61 = bitcast i32 %60 to float, !dbg !29
  %62 = fadd float %58, %61, !dbg !24
  %63 = bitcast float %62 to i32, !dbg !29
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 8, i32 31), !dbg !29
  %65 = bitcast i32 %64 to float, !dbg !29
  %66 = fadd float %62, %65, !dbg !24
  %67 = bitcast float %66 to i32, !dbg !29
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 4, i32 31), !dbg !29
  %69 = bitcast i32 %68 to float, !dbg !29
  %70 = fadd float %66, %69, !dbg !24
  %71 = bitcast float %70 to i32, !dbg !29
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 2, i32 31), !dbg !29
  %73 = bitcast i32 %72 to float, !dbg !29
  %74 = fadd float %70, %73, !dbg !24
  %75 = bitcast float %74 to i32, !dbg !29
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 1, i32 31), !dbg !29
  %77 = bitcast i32 %76 to float, !dbg !29
  %78 = fadd float %74, %77, !dbg !24
  %79 = icmp eq i32 %12, 0, !dbg !29
  %80 = and i32 %13, 3, !dbg !29
  %81 = getelementptr float, ptr addrspace(3) @global_smem, i32 %80, !dbg !29
  %82 = bitcast float %78 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 %79) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %83 = icmp slt i32 %11, 4, !dbg !29
  %84 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !29
  %85 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %84, i1 %83) #5, !dbg !29
  %86 = bitcast i32 %85 to float, !dbg !29
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 2, i32 31), !dbg !29
  %88 = bitcast i32 %87 to float, !dbg !29
  %89 = fadd float %86, %88, !dbg !24
  %90 = bitcast float %89 to i32, !dbg !29
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 1, i32 31), !dbg !29
  %92 = bitcast i32 %91 to float, !dbg !29
  %93 = fadd float %89, %92, !dbg !24
  %94 = and i32 %11, 3, !dbg !29
  %95 = icmp eq i32 %94, 0, !dbg !29
  %96 = and i1 %83, %95, !dbg !29
  %97 = bitcast float %93 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %97, i1 %96) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %98 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !29
  %99 = fadd float %98, 0.000000e+00, !dbg !30
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float 3.840000e+02) #5, !dbg !34
  %101 = fsub float %51, %100, !dbg !35
  %102 = fsub float %52, %100, !dbg !35
  %103 = fsub float %54, %100, !dbg !35
  %104 = fsub float %56, %100, !dbg !35
  %105 = fmul float %101, %101, !dbg !36
  %106 = fmul float %102, %102, !dbg !36
  %107 = fmul float %103, %103, !dbg !36
  %108 = fmul float %104, %104, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %109 = fadd float %105, %106, !dbg !39
  %110 = fadd float %107, %109, !dbg !39
  %111 = fadd float %108, %110, !dbg !39
  %112 = select i1 %16, float %111, float 0.000000e+00, !dbg !39
  %113 = bitcast float %112 to i32, !dbg !37
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 16, i32 31), !dbg !37
  %115 = bitcast i32 %114 to float, !dbg !37
  %116 = fadd float %112, %115, !dbg !39
  %117 = bitcast float %116 to i32, !dbg !37
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 8, i32 31), !dbg !37
  %119 = bitcast i32 %118 to float, !dbg !37
  %120 = fadd float %116, %119, !dbg !39
  %121 = bitcast float %120 to i32, !dbg !37
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 4, i32 31), !dbg !37
  %123 = bitcast i32 %122 to float, !dbg !37
  %124 = fadd float %120, %123, !dbg !39
  %125 = bitcast float %124 to i32, !dbg !37
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 2, i32 31), !dbg !37
  %127 = bitcast i32 %126 to float, !dbg !37
  %128 = fadd float %124, %127, !dbg !39
  %129 = bitcast float %128 to i32, !dbg !37
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 1, i32 31), !dbg !37
  %131 = bitcast i32 %130 to float, !dbg !37
  %132 = fadd float %128, %131, !dbg !39
  %133 = bitcast float %132 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %133, i1 %79) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %134 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %84, i1 %83) #5, !dbg !37
  %135 = bitcast i32 %134 to float, !dbg !37
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 2, i32 31), !dbg !37
  %137 = bitcast i32 %136 to float, !dbg !37
  %138 = fadd float %135, %137, !dbg !39
  %139 = bitcast float %138 to i32, !dbg !37
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 1, i32 31), !dbg !37
  %141 = bitcast i32 %140 to float, !dbg !37
  %142 = fadd float %138, %141, !dbg !39
  %143 = bitcast float %142 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %143, i1 %96) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %144 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !37
  %145 = fadd float %144, 0.000000e+00, !dbg !40
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %145, float 3.840000e+02) #5, !dbg !42
  %147 = fadd float %146, 0x3EE4F8B580000000, !dbg !43
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i = icmp eq i32 %148, 0, !dbg !44
  br i1 %.not.i, label %151, label %149, !dbg !44

149:                                              ; preds = %9
  %150 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %147), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

151:                                              ; preds = %9
  %152 = tail call float @llvm.nvvm.rsqrt.approx.f(float %147), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

__nv_rsqrtf.exit:                                 ; preds = %149, %151
  %.0.i = phi float [ %150, %149 ], [ %152, %151 ], !dbg !44
  %153 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !22
  %154 = bitcast i32 %153 to float, !dbg !22
  %155 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !22
  %156 = bitcast i32 %155 to float, !dbg !22
  %157 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !22
  %158 = bitcast i32 %157 to float, !dbg !22
  %159 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !22
  %160 = bitcast i32 %159 to float, !dbg !22
  %161 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !20
  %162 = bitcast i32 %161 to float, !dbg !20
  %163 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !20
  %164 = bitcast i32 %163 to float, !dbg !20
  %165 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !20
  %166 = bitcast i32 %165 to float, !dbg !20
  %167 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !20
  %168 = bitcast i32 %167 to float, !dbg !20
  %169 = fmul float %101, %.0.i, !dbg !45
  %170 = fmul float %102, %.0.i, !dbg !45
  %171 = fmul float %103, %.0.i, !dbg !45
  %172 = fmul float %104, %.0.i, !dbg !45
  %173 = fmul float %169, %168, !dbg !46
  %174 = fmul float %170, %166, !dbg !46
  %175 = fmul float %171, %164, !dbg !46
  %176 = fmul float %172, %162, !dbg !46
  %177 = fadd float %173, %160, !dbg !47
  %178 = fadd float %174, %158, !dbg !47
  %179 = fadd float %175, %156, !dbg !47
  %180 = fadd float %176, %154, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %181 = sext i32 %10 to i64, !dbg !49
  %182 = getelementptr float, ptr addrspace(1) %0, i64 %181, !dbg !49
  %urem = and i32 %11, 127, !dbg !50
  %183 = icmp eq i32 %urem, 0, !dbg !50
  %184 = bitcast float %.0.i to i32, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %184, ptr addrspace(1) %182, i1 %183) #5, !dbg !50
  %185 = getelementptr float, ptr addrspace(1) %6, i64 %19, !dbg !51
  %186 = bitcast float %177 to i32, !dbg !52
  %187 = bitcast float %178 to i32, !dbg !52
  %188 = bitcast float %179 to i32, !dbg !52
  %189 = bitcast float %180 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %186, i32 %187, i32 %188, i32 %189, ptr addrspace(1) %185, i1 %16) #5, !dbg !52
  %190 = getelementptr float, ptr addrspace(1) %5, i64 %181, !dbg !53
  %191 = bitcast float %100 to i32, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %191, ptr addrspace(1) %190, i1 %183) #5, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd26b4rnla2lqihkcifeibbu7fgwhgli3b3v6mxrngllhhrvmro7.py", directory: "inductor_cache/d2")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_7, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_native_layer_norm_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_7", linkageName: "triton_per_fused_add_native_layer_norm_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 29, column: 21, scope: !7)
!13 = !DILocation(line: 32, column: 39, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 32, column: 30, scope: !7)
!16 = !DILocation(line: 32, column: 44, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 44, scope: !7)
!19 = !DILocation(line: 34, column: 31, scope: !7)
!20 = !DILocation(line: 34, column: 36, scope: !7)
!21 = !DILocation(line: 35, column: 31, scope: !7)
!22 = !DILocation(line: 35, column: 36, scope: !7)
!23 = !DILocation(line: 36, column: 18, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 41, column: 57, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 73, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 41, column: 44, scope: !7)
!34 = !DILocation(line: 44, column: 19, scope: !7)
!35 = !DILocation(line: 45, column: 19, scope: !7)
!36 = !DILocation(line: 46, column: 20, scope: !7)
!37 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !38)
!38 = !DILocation(line: 49, column: 59, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !38)
!40 = !DILocation(line: 73, column: 15, scope: !31, inlinedAt: !41)
!41 = !DILocation(line: 49, column: 45, scope: !7)
!42 = !DILocation(line: 51, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 20, scope: !7)
!44 = !DILocation(line: 54, column: 28, scope: !7)
!45 = !DILocation(line: 56, column: 20, scope: !7)
!46 = !DILocation(line: 57, column: 20, scope: !7)
!47 = !DILocation(line: 58, column: 20, scope: !7)
!48 = !DILocation(line: 59, column: 4, scope: !7)
!49 = !DILocation(line: 60, column: 28, scope: !7)
!50 = !DILocation(line: 60, column: 40, scope: !7)
!51 = !DILocation(line: 61, column: 25, scope: !7)
!52 = !DILocation(line: 61, column: 46, scope: !7)
!53 = !DILocation(line: 62, column: 25, scope: !7)
!54 = !DILocation(line: 62, column: 37, scope: !7)
!55 = !DILocation(line: 62, column: 4, scope: !7)
