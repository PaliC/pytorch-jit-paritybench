; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 9, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = sdiv i32 %18, 4096, !dbg !14
  %20 = srem i32 %19, 4, !dbg !15
  %21 = sext i32 %18 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !16
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !17
  %24 = sext i32 %20 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !18
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !19
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !20
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !24
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !26
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !28
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !29
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !29
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !29
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !29
  %46 = getelementptr float, ptr addrspace(1) %7, i64 %24, !dbg !30
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !31
  %48 = bitcast i32 %47 to float, !dbg !31
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !31
  %50 = bitcast i32 %49 to float, !dbg !31
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !31
  %52 = bitcast i32 %51 to float, !dbg !31
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !31
  %54 = bitcast i32 %53 to float, !dbg !31
  %55 = getelementptr float, ptr addrspace(1) %8, i64 %24, !dbg !32
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !33
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !33
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !33
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !33
  %60 = getelementptr float, ptr addrspace(1) %9, i64 %24, !dbg !34
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !35
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !35
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !35
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !35
  %65 = fadd float %48, 0x3EE4F8B580000000, !dbg !36
  %66 = fadd float %50, 0x3EE4F8B580000000, !dbg !36
  %67 = fadd float %52, 0x3EE4F8B580000000, !dbg !36
  %68 = fadd float %54, 0x3EE4F8B580000000, !dbg !36
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i = icmp eq i32 %69, 0, !dbg !37
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i = icmp eq i32 %70, 0, !dbg !37
  br i1 %.not.i, label %76, label %71, !dbg !37

71:                                               ; preds = %12
  br i1 %.not1.i, label %74, label %72, !dbg !37

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

76:                                               ; preds = %12
  br i1 %.not1.i, label %79, label %77, !dbg !37

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %72, %74, %77, %79
  %.0.i = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !37
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i1 = icmp eq i32 %81, 0, !dbg !37
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i4 = icmp eq i32 %82, 0, !dbg !37
  br i1 %.not.i1, label %88, label %83, !dbg !37

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %86, label %84, !dbg !37

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %91, label %89, !dbg !37

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

__nv_sqrtf.exit5:                                 ; preds = %84, %86, %89, %91
  %.0.i3 = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !37
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i6 = icmp eq i32 %93, 0, !dbg !37
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i9 = icmp eq i32 %94, 0, !dbg !37
  br i1 %.not.i6, label %100, label %95, !dbg !37

95:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %98, label %96, !dbg !37

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

100:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %103, label %101, !dbg !37

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

__nv_sqrtf.exit10:                                ; preds = %96, %98, %101, %103
  %.0.i8 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !37
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i11 = icmp eq i32 %105, 0, !dbg !37
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i14 = icmp eq i32 %106, 0, !dbg !37
  br i1 %.not.i11, label %112, label %107, !dbg !37

107:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %110, label %108, !dbg !37

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

112:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %115, label %113, !dbg !37

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

__nv_sqrtf.exit15:                                ; preds = %108, %110, %113, %115
  %.0.i13 = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !37
  %117 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !17
  %118 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !19
  %119 = insertelement <2 x i32> %118, i32 %36, i64 1, !dbg !19
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !19
  %121 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !21
  %122 = insertelement <2 x i32> poison, i32 %117, i64 0, !dbg !17
  %123 = insertelement <2 x i32> %122, i32 %121, i64 1, !dbg !17
  %124 = bitcast <2 x i32> %123 to <2 x float>, !dbg !17
  %125 = fadd <2 x float> %124, %120, !dbg !38
  %126 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !25
  %127 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !27
  %128 = insertelement <4 x i32> poison, i32 %45, i64 0, !dbg !29
  %129 = insertelement <4 x i32> %128, i32 %44, i64 1, !dbg !29
  %130 = insertelement <4 x i32> %129, i32 %43, i64 2, !dbg !29
  %131 = insertelement <4 x i32> %130, i32 %42, i64 3, !dbg !29
  %132 = bitcast <4 x i32> %131 to <4 x float>, !dbg !29
  %133 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !17
  %134 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !19
  %135 = insertelement <2 x i32> %134, i32 %35, i64 1, !dbg !19
  %136 = bitcast <2 x i32> %135 to <2 x float>, !dbg !19
  %137 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !21
  %138 = insertelement <2 x i32> poison, i32 %133, i64 0, !dbg !17
  %139 = insertelement <2 x i32> %138, i32 %137, i64 1, !dbg !17
  %140 = bitcast <2 x i32> %139 to <2 x float>, !dbg !17
  %141 = fadd <2 x float> %140, %136, !dbg !38
  %142 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !25
  %143 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !27
  %144 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !17
  %145 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !19
  %146 = insertelement <2 x i32> %145, i32 %34, i64 1, !dbg !19
  %147 = bitcast <2 x i32> %146 to <2 x float>, !dbg !19
  %148 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !21
  %149 = insertelement <2 x i32> poison, i32 %144, i64 0, !dbg !17
  %150 = insertelement <2 x i32> %149, i32 %148, i64 1, !dbg !17
  %151 = bitcast <2 x i32> %150 to <2 x float>, !dbg !17
  %152 = fadd <2 x float> %151, %147, !dbg !38
  %153 = shufflevector <2 x float> %152, <2 x float> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %154 = shufflevector <2 x float> %152, <2 x float> poison, <4 x i32> <i32 poison, i32 1, i32 poison, i32 poison>
  %155 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !25
  %156 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !27
  %157 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !17
  %158 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !19
  %159 = insertelement <2 x i32> %158, i32 %33, i64 1, !dbg !19
  %160 = bitcast <2 x i32> %159 to <2 x float>, !dbg !19
  %161 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !21
  %162 = insertelement <2 x i32> poison, i32 %157, i64 0, !dbg !17
  %163 = insertelement <2 x i32> %162, i32 %161, i64 1, !dbg !17
  %164 = bitcast <2 x i32> %163 to <2 x float>, !dbg !17
  %165 = fadd <2 x float> %164, %160, !dbg !38
  %166 = shufflevector <2 x float> %165, <2 x float> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %167 = shufflevector <2 x float> %165, <2 x float> poison, <4 x i32> <i32 poison, i32 1, i32 poison, i32 poison>
  %168 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !25
  %169 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !27
  %170 = insertelement <4 x i32> poison, i32 %64, i64 0, !dbg !35
  %171 = insertelement <4 x i32> %170, i32 %63, i64 1, !dbg !35
  %172 = insertelement <4 x i32> %171, i32 %62, i64 2, !dbg !35
  %173 = insertelement <4 x i32> %172, i32 %61, i64 3, !dbg !35
  %174 = bitcast <4 x i32> %173 to <4 x float>, !dbg !35
  %175 = insertelement <4 x i32> poison, i32 %59, i64 0, !dbg !33
  %176 = insertelement <4 x i32> %175, i32 %58, i64 1, !dbg !33
  %177 = insertelement <4 x i32> %176, i32 %57, i64 2, !dbg !33
  %178 = insertelement <4 x i32> %177, i32 %56, i64 3, !dbg !33
  %179 = bitcast <4 x i32> %178 to <4 x float>, !dbg !33
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !39
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !39
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !39
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !39
  %184 = insertelement <4 x i32> poison, i32 %126, i64 0, !dbg !25
  %185 = insertelement <4 x i32> %184, i32 %142, i64 1, !dbg !25
  %186 = insertelement <4 x i32> %185, i32 %155, i64 2, !dbg !25
  %187 = insertelement <4 x i32> %186, i32 %168, i64 3, !dbg !25
  %188 = bitcast <4 x i32> %187 to <4 x float>, !dbg !25
  %189 = insertelement <4 x i32> poison, i32 %127, i64 0, !dbg !27
  %190 = insertelement <4 x i32> %189, i32 %143, i64 1, !dbg !27
  %191 = insertelement <4 x i32> %190, i32 %156, i64 2, !dbg !27
  %192 = insertelement <4 x i32> %191, i32 %169, i64 3, !dbg !27
  %193 = bitcast <4 x i32> %192 to <4 x float>, !dbg !27
  %194 = fadd <4 x float> %188, %193, !dbg !40
  %195 = shufflevector <2 x float> %125, <2 x float> %141, <4 x i32> <i32 1, i32 3, i32 poison, i32 poison>, !dbg !41
  %196 = shufflevector <4 x float> %195, <4 x float> %154, <4 x i32> <i32 0, i32 1, i32 5, i32 poison>, !dbg !41
  %197 = shufflevector <4 x float> %196, <4 x float> %167, <4 x i32> <i32 0, i32 1, i32 2, i32 5>, !dbg !41
  %198 = fadd <4 x float> %197, %194, !dbg !41
  %199 = shufflevector <2 x float> %125, <2 x float> %141, <4 x i32> <i32 0, i32 2, i32 poison, i32 poison>, !dbg !42
  %200 = shufflevector <4 x float> %199, <4 x float> %153, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !42
  %201 = shufflevector <4 x float> %200, <4 x float> %166, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !42
  %202 = fadd <4 x float> %201, %198, !dbg !42
  %203 = fsub <4 x float> %202, %132, !dbg !43
  %204 = insertelement <4 x float> poison, float %183, i64 0, !dbg !44
  %205 = insertelement <4 x float> %204, float %182, i64 1, !dbg !44
  %206 = insertelement <4 x float> %205, float %181, i64 2, !dbg !44
  %207 = insertelement <4 x float> %206, float %180, i64 3, !dbg !44
  %208 = fmul <4 x float> %203, %207, !dbg !44
  %209 = fmul <4 x float> %208, %179, !dbg !45
  %210 = fadd <4 x float> %209, %174, !dbg !46
  %211 = fcmp olt <4 x float> %210, zeroinitializer, !dbg !47
  %212 = extractelement <4 x i1> %211, i64 3, !dbg !51
  %213 = extractelement <4 x i1> %211, i64 2, !dbg !51
  %214 = extractelement <4 x i1> %211, i64 1, !dbg !51
  %215 = extractelement <4 x i1> %211, i64 0, !dbg !51
  %bc = bitcast <4 x float> %202 to <4 x i32>, !dbg !52
  %216 = extractelement <4 x i32> %bc, i64 3, !dbg !52
  %bc16 = bitcast <4 x float> %202 to <4 x i32>, !dbg !52
  %217 = extractelement <4 x i32> %bc16, i64 2, !dbg !52
  %bc17 = bitcast <4 x float> %202 to <4 x i32>, !dbg !52
  %218 = extractelement <4 x i32> %bc17, i64 1, !dbg !52
  %bc18 = bitcast <4 x float> %202 to <4 x i32>, !dbg !52
  %219 = extractelement <4 x i32> %bc18, i64 0, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %216, i32 %217, i32 %218, i32 %219, ptr addrspace(1) %22, i1 true) #3, !dbg !52
  %220 = getelementptr float, ptr addrspace(1) %10, i64 %21, !dbg !53
  %bc19 = bitcast <4 x float> %210 to <4 x i32>, !dbg !54
  %221 = extractelement <4 x i32> %bc19, i64 3, !dbg !54
  %222 = select i1 %212, i32 0, i32 %221, !dbg !51
  %bc20 = bitcast <4 x float> %210 to <4 x i32>, !dbg !54
  %223 = extractelement <4 x i32> %bc20, i64 2, !dbg !54
  %224 = select i1 %213, i32 0, i32 %223, !dbg !51
  %bc21 = bitcast <4 x float> %210 to <4 x i32>, !dbg !54
  %225 = extractelement <4 x i32> %bc21, i64 1, !dbg !54
  %226 = select i1 %214, i32 0, i32 %225, !dbg !51
  %bc22 = bitcast <4 x float> %210 to <4 x i32>, !dbg !54
  %227 = extractelement <4 x i32> %bc22, i64 0, !dbg !54
  %228 = select i1 %215, i32 0, i32 %227, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %222, i32 %224, i32 %226, i32 %228, ptr addrspace(1) %220, i1 true) #3, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyyvuycre34pkdt5gqfhsyon5ntffk6grdmce45h2podeb3lrza5.py", directory: "inductor_cache/yy")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 35, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 43, column: 20, scope: !7)
!37 = !DILocation(line: 44, column: 27, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 38, column: 18, scope: !7)
!41 = !DILocation(line: 39, column: 18, scope: !7)
!42 = !DILocation(line: 40, column: 19, scope: !7)
!43 = !DILocation(line: 41, column: 20, scope: !7)
!44 = !DILocation(line: 49, column: 20, scope: !7)
!45 = !DILocation(line: 50, column: 20, scope: !7)
!46 = !DILocation(line: 51, column: 20, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 53, column: 42, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 54, column: 40, scope: !7)
!53 = !DILocation(line: 55, column: 25, scope: !7)
!54 = !DILocation(line: 55, column: 37, scope: !7)
!55 = !DILocation(line: 55, column: 4, scope: !7)
