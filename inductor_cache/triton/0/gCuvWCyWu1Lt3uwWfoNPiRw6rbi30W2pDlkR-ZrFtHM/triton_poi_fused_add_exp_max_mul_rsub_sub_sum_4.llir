; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_exp_max_mul_rsub_sub_sum_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = icmp slt i32 %10, 16, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %12 = sdiv i32 %.frozen, 4, !dbg !15
  %13 = mul i32 %12, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %13, !dbg !16
  %14 = shl i32 %12, 4, !dbg !17
  %15 = sext i32 %14 to i64, !dbg !18
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !18
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %11) #2, !dbg !19
  %18 = bitcast i32 %17 to float, !dbg !19
  %19 = shl nsw i32 %12, 2, !dbg !20
  %20 = sext i32 %19 to i64, !dbg !21
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !21
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %11) #2, !dbg !22
  %23 = bitcast i32 %22 to float, !dbg !22
  %24 = sext i32 %.decomposed to i64, !dbg !23
  %25 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !23
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %11) #2, !dbg !24
  %27 = bitcast i32 %26 to float, !dbg !24
  %28 = or disjoint i32 %14, 1, !dbg !25
  %29 = sext i32 %28 to i64, !dbg !26
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !26
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %11) #2, !dbg !27
  %32 = bitcast i32 %31 to float, !dbg !27
  %33 = add nsw i32 %.decomposed, 4, !dbg !28
  %34 = zext nneg i32 %33 to i64, !dbg !29
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !29
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %11) #2, !dbg !30
  %37 = bitcast i32 %36 to float, !dbg !30
  %38 = or disjoint i32 %14, 2, !dbg !31
  %39 = sext i32 %38 to i64, !dbg !32
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !32
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %11) #2, !dbg !33
  %42 = bitcast i32 %41 to float, !dbg !33
  %43 = getelementptr i8, ptr addrspace(1) %25, i64 32, !dbg !34
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %11) #2, !dbg !35
  %45 = bitcast i32 %44 to float, !dbg !35
  %46 = or disjoint i32 %14, 3, !dbg !36
  %47 = sext i32 %46 to i64, !dbg !37
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !37
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %11) #2, !dbg !38
  %50 = bitcast i32 %49 to float, !dbg !38
  %51 = getelementptr i8, ptr addrspace(1) %25, i64 48, !dbg !39
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %11) #2, !dbg !40
  %53 = bitcast i32 %52 to float, !dbg !40
  %54 = or disjoint i32 %19, 1, !dbg !41
  %55 = sext i32 %54 to i64, !dbg !42
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !42
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %11) #2, !dbg !43
  %58 = add nuw i32 %33, %14, !dbg !44
  %59 = sext i32 %58 to i64, !dbg !45
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !45
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %11) #2, !dbg !46
  %62 = add i32 %14, %.decomposed, !dbg !47
  %63 = sext i32 %62 to i64, !dbg !48
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !48
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %11) #2, !dbg !49
  %66 = fmul float %18, %23, !dbg !50
  %67 = fadd float %66, %27, !dbg !51
  %68 = fmul float %23, %32, !dbg !52
  %69 = fadd float %68, %37, !dbg !53
  %70 = fcmp ogt float %67, %69, !dbg !54
  %71 = fcmp uno float %67, 0.000000e+00, !dbg !58
  %72 = or i1 %71, %70, !dbg !59
  %73 = select i1 %72, float %67, float %69, !dbg !60
  %74 = fmul float %23, %42, !dbg !61
  %75 = fadd float %74, %45, !dbg !62
  %76 = fcmp ogt float %73, %75, !dbg !63
  %77 = fcmp uno float %73, 0.000000e+00, !dbg !65
  %78 = or i1 %76, %77, !dbg !66
  %79 = select i1 %78, float %73, float %75, !dbg !67
  %80 = fmul float %23, %50, !dbg !68
  %81 = fadd float %80, %53, !dbg !69
  %82 = fcmp ogt float %79, %81, !dbg !70
  %83 = fcmp uno float %79, 0.000000e+00, !dbg !72
  %84 = or i1 %82, %83, !dbg !73
  %85 = select i1 %84, float %79, float %81, !dbg !74
  %86 = fsub float %67, %85, !dbg !75
  %87 = fmul float %86, 0x3FF7154760000000, !dbg !76
  %88 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %87) #2, !dbg !76
  %89 = fsub float %69, %85, !dbg !77
  %90 = fmul float %89, 0x3FF7154760000000, !dbg !78
  %91 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %90) #2, !dbg !78
  %92 = fadd float %88, %91, !dbg !79
  %93 = fsub float %75, %85, !dbg !80
  %94 = fmul float %93, 0x3FF7154760000000, !dbg !81
  %95 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %94) #2, !dbg !81
  %96 = fadd float %92, %95, !dbg !82
  %97 = fsub float %81, %85, !dbg !83
  %98 = fmul float %97, 0x3FF7154760000000, !dbg !84
  %99 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %98) #2, !dbg !84
  %100 = fadd float %96, %99, !dbg !85
  %101 = fcmp olt float %100, 0x3810000000000000, !dbg !86
  %102 = fmul float %100, 0x4160000000000000, !dbg !86
  %.02.i = select i1 %101, float %102, float %100, !dbg !86
  %i.i.0.i = select i1 %101, float -2.300000e+01, float 0.000000e+00, !dbg !86
  %103 = bitcast float %.02.i to i32, !dbg !86
  %104 = add i32 %103, -1059760811, !dbg !86
  %105 = and i32 %104, -8388608, !dbg !86
  %106 = sub i32 %103, %105, !dbg !86
  %107 = bitcast i32 %106 to float, !dbg !86
  %108 = sitofp i32 %105 to float, !dbg !86
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !86
  %.not.i = icmp eq i32 %109, 0, !dbg !86
  %110 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %108, float 0x3E80000000000000, float %i.i.0.i) #2, !dbg !86
  %111 = tail call float @llvm.nvvm.fma.rn.f(float %108, float 0x3E80000000000000, float %i.i.0.i) #2, !dbg !86
  %.08.i = select i1 %.not.i, float %111, float %110, !dbg !86
  %112 = fadd float %107, -1.000000e+00, !dbg !86
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !86
  %.not1.i = icmp eq i32 %113, 0, !dbg !86
  %114 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %112, float 0x3FC2073EC0000000) #2, !dbg !86
  %115 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %112, float 0x3FC2073EC0000000) #2, !dbg !86
  %.010.i = select i1 %.not1.i, float %115, float %114, !dbg !86
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !86
  %.not2.i = icmp eq i32 %116, 0, !dbg !86
  %117 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %112, float 0xBFBF19B980000000) #2, !dbg !86
  %118 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %112, float 0xBFBF19B980000000) #2, !dbg !86
  %.011.i = select i1 %.not2.i, float %118, float %117, !dbg !86
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !86
  %.not3.i = icmp eq i32 %119, 0, !dbg !86
  %120 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %112, float 0x3FC1E52AA0000000) #2, !dbg !86
  %121 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %112, float 0x3FC1E52AA0000000) #2, !dbg !86
  %.012.i = select i1 %.not3.i, float %121, float %120, !dbg !86
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !86
  %.not4.i = icmp eq i32 %122, 0, !dbg !86
  %123 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %112, float 0xBFC55B1720000000) #2, !dbg !86
  %124 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %112, float 0xBFC55B1720000000) #2, !dbg !86
  %.09.i = select i1 %.not4.i, float %124, float %123, !dbg !86
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !86
  %.not5.i = icmp eq i32 %125, 0, !dbg !86
  %126 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %112, float 0x3FC99DA160000000) #2, !dbg !86
  %127 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %112, float 0x3FC99DA160000000) #2, !dbg !86
  %.05.i = select i1 %.not5.i, float %127, float %126, !dbg !86
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !86
  %.not6.i = icmp eq i32 %128, 0, !dbg !86
  %129 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %112, float 0xBFCFFFE440000000) #2, !dbg !86
  %130 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %112, float 0xBFCFFFE440000000) #2, !dbg !86
  %.01.i = select i1 %.not6.i, float %130, float %129, !dbg !86
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !86
  %.not7.i = icmp eq i32 %131, 0, !dbg !86
  %132 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %112, float 0x3FD5554F00000000) #2, !dbg !86
  %133 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %112, float 0x3FD5554F00000000) #2, !dbg !86
  %.0.i = select i1 %.not7.i, float %133, float %132, !dbg !86
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !86
  %.not8.i = icmp eq i32 %134, 0, !dbg !86
  %135 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %112, float -5.000000e-01) #2, !dbg !86
  %136 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %112, float -5.000000e-01) #2, !dbg !86
  %.07.i = select i1 %.not8.i, float %136, float %135, !dbg !86
  %137 = fmul float %112, %.07.i, !dbg !86
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !86
  %.not9.i = icmp eq i32 %138, 0, !dbg !86
  %139 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %137, float %112, float %112) #2, !dbg !86
  %140 = tail call float @llvm.nvvm.fma.rn.f(float %137, float %112, float %112) #2, !dbg !86
  %.06.i = select i1 %.not9.i, float %140, float %139, !dbg !86
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !86
  %.not10.i = icmp eq i32 %141, 0, !dbg !86
  %142 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #2, !dbg !86
  %143 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #2, !dbg !86
  %.04.i = select i1 %.not10.i, float %143, float %142, !dbg !86
  %144 = icmp ugt i32 %103, 2139095039, !dbg !86
  br i1 %144, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !86

__nv_fmaf_rn.exit.i.i:                            ; preds = %5
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !86
  %.not11.i = icmp eq i32 %145, 0, !dbg !86
  %146 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !86
  %147 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !86
  %.03.i = select i1 %.not11.i, float %147, float %146, !dbg !86
  br label %__nv_logf.exit, !dbg !86

__nv_logf.exit:                                   ; preds = %5, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %5 ], !dbg !86
  %148 = bitcast i32 %65 to float, !dbg !49
  %149 = bitcast i32 %61 to float, !dbg !46
  %150 = bitcast i32 %57 to float, !dbg !43
  %151 = and i32 %8, 16, !dbg !12
  %152 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !86
  %r.i.1.i = select i1 %152, float 0xFFF0000000000000, float %r.i.0.i, !dbg !86
  %153 = fadd float %85, %r.i.1.i, !dbg !87
  %154 = fmul float %150, %149, !dbg !88
  %155 = fadd float %154, %153, !dbg !89
  %156 = fmul float %155, %150, !dbg !90
  %157 = fsub float 1.000000e+00, %150, !dbg !91
  %158 = fmul float %23, %148, !dbg !92
  %159 = fmul float %157, %158, !dbg !93
  %160 = fadd float %159, %156, !dbg !94
  %161 = sext i32 %10 to i64, !dbg !95
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !95
  %163 = icmp eq i32 %151, 0, !dbg !96
  %164 = bitcast float %160 to i32, !dbg !96
  %165 = and i1 %163, %11, !dbg !96
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %164, ptr addrspace(1) %162, i1 %165) #2, !dbg !96
  ret void, !dbg !97
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxoka53ucygxiyrqdjj5igxm2bsomp6oz6je55v36ghnxygjbyxg.py", directory: "inductor_cache/xo")
!4 = !{ptr @triton_poi_fused_add_exp_max_mul_rsub_sub_sum_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_exp_max_mul_rsub_sub_sum_4, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_exp_max_mul_rsub_sub_sum_4", linkageName: "triton_poi_fused_add_exp_max_mul_rsub_sub_sum_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 33, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 38, scope: !7)
!20 = !DILocation(line: 28, column: 32, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 37, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 30, column: 34, scope: !7)
!26 = !DILocation(line: 30, column: 30, scope: !7)
!27 = !DILocation(line: 30, column: 42, scope: !7)
!28 = !DILocation(line: 31, column: 34, scope: !7)
!29 = !DILocation(line: 31, column: 30, scope: !7)
!30 = !DILocation(line: 31, column: 39, scope: !7)
!31 = !DILocation(line: 32, column: 35, scope: !7)
!32 = !DILocation(line: 32, column: 31, scope: !7)
!33 = !DILocation(line: 32, column: 43, scope: !7)
!34 = !DILocation(line: 33, column: 31, scope: !7)
!35 = !DILocation(line: 33, column: 40, scope: !7)
!36 = !DILocation(line: 34, column: 35, scope: !7)
!37 = !DILocation(line: 34, column: 31, scope: !7)
!38 = !DILocation(line: 34, column: 43, scope: !7)
!39 = !DILocation(line: 35, column: 31, scope: !7)
!40 = !DILocation(line: 35, column: 41, scope: !7)
!41 = !DILocation(line: 36, column: 35, scope: !7)
!42 = !DILocation(line: 36, column: 31, scope: !7)
!43 = !DILocation(line: 36, column: 42, scope: !7)
!44 = !DILocation(line: 37, column: 40, scope: !7)
!45 = !DILocation(line: 37, column: 31, scope: !7)
!46 = !DILocation(line: 37, column: 48, scope: !7)
!47 = !DILocation(line: 38, column: 36, scope: !7)
!48 = !DILocation(line: 38, column: 31, scope: !7)
!49 = !DILocation(line: 38, column: 44, scope: !7)
!50 = !DILocation(line: 39, column: 18, scope: !7)
!51 = !DILocation(line: 40, column: 18, scope: !7)
!52 = !DILocation(line: 41, column: 18, scope: !7)
!53 = !DILocation(line: 42, column: 18, scope: !7)
!54 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !57)
!55 = distinct !DILexicalBlockFile(scope: !7, file: !56, discriminator: 0)
!56 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!57 = !DILocation(line: 43, column: 40, scope: !7)
!58 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !57)
!59 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !57)
!60 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !57)
!61 = !DILocation(line: 44, column: 20, scope: !7)
!62 = !DILocation(line: 45, column: 20, scope: !7)
!63 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !64)
!64 = !DILocation(line: 46, column: 41, scope: !7)
!65 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !64)
!66 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !64)
!67 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !64)
!68 = !DILocation(line: 47, column: 20, scope: !7)
!69 = !DILocation(line: 48, column: 20, scope: !7)
!70 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !71)
!71 = !DILocation(line: 49, column: 42, scope: !7)
!72 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !71)
!73 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !71)
!74 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !71)
!75 = !DILocation(line: 50, column: 19, scope: !7)
!76 = !DILocation(line: 51, column: 24, scope: !7)
!77 = !DILocation(line: 52, column: 19, scope: !7)
!78 = !DILocation(line: 53, column: 24, scope: !7)
!79 = !DILocation(line: 54, column: 20, scope: !7)
!80 = !DILocation(line: 55, column: 20, scope: !7)
!81 = !DILocation(line: 56, column: 24, scope: !7)
!82 = !DILocation(line: 57, column: 20, scope: !7)
!83 = !DILocation(line: 58, column: 20, scope: !7)
!84 = !DILocation(line: 59, column: 24, scope: !7)
!85 = !DILocation(line: 60, column: 20, scope: !7)
!86 = !DILocation(line: 61, column: 24, scope: !7)
!87 = !DILocation(line: 62, column: 20, scope: !7)
!88 = !DILocation(line: 63, column: 20, scope: !7)
!89 = !DILocation(line: 64, column: 20, scope: !7)
!90 = !DILocation(line: 65, column: 20, scope: !7)
!91 = !DILocation(line: 67, column: 20, scope: !7)
!92 = !DILocation(line: 68, column: 20, scope: !7)
!93 = !DILocation(line: 69, column: 20, scope: !7)
!94 = !DILocation(line: 70, column: 20, scope: !7)
!95 = !DILocation(line: 71, column: 28, scope: !7)
!96 = !DILocation(line: 71, column: 40, scope: !7)
!97 = !DILocation(line: 71, column: 4, scope: !7)
