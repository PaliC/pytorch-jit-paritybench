; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 128, !dbg !12
  %10 = lshr i32 %8, 3, !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %.lobit = lshr exact i32 %9, 7, !dbg !12
  %12 = or disjoint i32 %7, %11, !dbg !13
  %13 = or disjoint i32 %7, %.lobit, !dbg !13
  %14 = or disjoint i32 %13, 2, !dbg !13
  %15 = or disjoint i32 %13, 4, !dbg !13
  %16 = or disjoint i32 %13, 6, !dbg !13
  %17 = or disjoint i32 %13, 8, !dbg !13
  %18 = or disjoint i32 %13, 10, !dbg !13
  %19 = or disjoint i32 %13, 12, !dbg !13
  %20 = or disjoint i32 %13, 14, !dbg !13
  %21 = or disjoint i32 %13, 16, !dbg !13
  %22 = or disjoint i32 %13, 18, !dbg !13
  %23 = or disjoint i32 %13, 20, !dbg !13
  %24 = or disjoint i32 %13, 22, !dbg !13
  %25 = or disjoint i32 %13, 24, !dbg !13
  %26 = or disjoint i32 %13, 26, !dbg !13
  %27 = or disjoint i32 %13, 28, !dbg !13
  %28 = or disjoint i32 %13, 30, !dbg !13
  %29 = icmp slt i32 %12, 36, !dbg !14
  %30 = icmp slt i32 %13, 36, !dbg !14
  %31 = icmp slt i32 %14, 36, !dbg !14
  %32 = icmp slt i32 %15, 36, !dbg !14
  %33 = icmp slt i32 %16, 36, !dbg !14
  %34 = icmp slt i32 %17, 36, !dbg !14
  %35 = icmp slt i32 %18, 36, !dbg !14
  %36 = icmp slt i32 %19, 36, !dbg !14
  %37 = icmp slt i32 %20, 36, !dbg !14
  %38 = icmp slt i32 %21, 36, !dbg !14
  %39 = icmp slt i32 %22, 36, !dbg !14
  %40 = icmp slt i32 %23, 36, !dbg !14
  %41 = icmp slt i32 %24, 36, !dbg !14
  %42 = icmp slt i32 %25, 36, !dbg !14
  %43 = icmp slt i32 %26, 36, !dbg !14
  %44 = icmp slt i32 %27, 36, !dbg !14
  %45 = icmp slt i32 %28, 36, !dbg !14
  %46 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %47 = shl i32 %46, 7, !dbg !16
  %48 = shl i32 %8, 4, !dbg !17
  %49 = and i32 %48, 112, !dbg !17
  %50 = and i32 %8, 127, !dbg !17
  %51 = or disjoint i32 %47, %49, !dbg !18
  %52 = or disjoint i32 %51, 4, !dbg !18
  %53 = or disjoint i32 %51, 8, !dbg !18
  %54 = or disjoint i32 %51, 12, !dbg !18
  %55 = or disjoint i32 %47, %50, !dbg !18
  %56 = icmp slt i32 %51, 128, !dbg !19
  %57 = icmp slt i32 %55, 128, !dbg !19
  %.frozen = freeze i32 %12, !dbg !20
  %58 = sdiv i32 %.frozen, 3, !dbg !20
  %59 = mul i32 %58, 3, !dbg !21
  %.decomposed = sub i32 %.frozen, %59, !dbg !21
  %.frozen10 = freeze i32 %13, !dbg !22
  %60 = sdiv i32 %.frozen10, 9, !dbg !22
  %.frozen12 = freeze i32 %14, !dbg !22
  %61 = sdiv i32 %.frozen12, 9, !dbg !22
  %.frozen14 = freeze i32 %15, !dbg !22
  %62 = sdiv i32 %.frozen14, 9, !dbg !22
  %.frozen16 = freeze i32 %16, !dbg !22
  %63 = sdiv i32 %.frozen16, 9, !dbg !22
  %.frozen18 = freeze i32 %17, !dbg !22
  %64 = sdiv i32 %.frozen18, 9, !dbg !22
  %.frozen20 = freeze i32 %18, !dbg !22
  %65 = sdiv i32 %.frozen20, 9, !dbg !22
  %.frozen22 = freeze i32 %19, !dbg !22
  %66 = sdiv i32 %.frozen22, 9, !dbg !22
  %.frozen24 = freeze i32 %20, !dbg !22
  %67 = sdiv i32 %.frozen24, 9, !dbg !22
  %.frozen26 = freeze i32 %21, !dbg !22
  %68 = sdiv i32 %.frozen26, 9, !dbg !22
  %.frozen28 = freeze i32 %22, !dbg !22
  %69 = sdiv i32 %.frozen28, 9, !dbg !22
  %.frozen30 = freeze i32 %23, !dbg !22
  %70 = sdiv i32 %.frozen30, 9, !dbg !22
  %.frozen32 = freeze i32 %24, !dbg !22
  %71 = sdiv i32 %.frozen32, 9, !dbg !22
  %.frozen34 = freeze i32 %25, !dbg !22
  %72 = sdiv i32 %.frozen34, 9, !dbg !22
  %.frozen36 = freeze i32 %26, !dbg !22
  %73 = sdiv i32 %.frozen36, 9, !dbg !22
  %.frozen38 = freeze i32 %27, !dbg !22
  %74 = sdiv i32 %.frozen38, 9, !dbg !22
  %.frozen40 = freeze i32 %28, !dbg !22
  %75 = sdiv i32 %.frozen40, 9, !dbg !22
  %76 = mul i32 %60, 9, !dbg !23
  %.decomposed11 = sub i32 %.frozen10, %76, !dbg !23
  %77 = mul i32 %61, 9, !dbg !23
  %.decomposed13 = sub i32 %.frozen12, %77, !dbg !23
  %78 = mul i32 %62, 9, !dbg !23
  %.decomposed15 = sub i32 %.frozen14, %78, !dbg !23
  %79 = mul i32 %63, 9, !dbg !23
  %.decomposed17 = sub i32 %.frozen16, %79, !dbg !23
  %80 = mul i32 %64, 9, !dbg !23
  %.decomposed19 = sub i32 %.frozen18, %80, !dbg !23
  %81 = mul i32 %65, 9, !dbg !23
  %.decomposed21 = sub i32 %.frozen20, %81, !dbg !23
  %82 = mul i32 %66, 9, !dbg !23
  %.decomposed23 = sub i32 %.frozen22, %82, !dbg !23
  %83 = mul i32 %67, 9, !dbg !23
  %.decomposed25 = sub i32 %.frozen24, %83, !dbg !23
  %84 = mul i32 %68, 9, !dbg !23
  %.decomposed27 = sub i32 %.frozen26, %84, !dbg !23
  %85 = mul i32 %69, 9, !dbg !23
  %.decomposed29 = sub i32 %.frozen28, %85, !dbg !23
  %86 = mul i32 %70, 9, !dbg !23
  %.decomposed31 = sub i32 %.frozen30, %86, !dbg !23
  %87 = mul i32 %71, 9, !dbg !23
  %.decomposed33 = sub i32 %.frozen32, %87, !dbg !23
  %88 = mul i32 %72, 9, !dbg !23
  %.decomposed35 = sub i32 %.frozen34, %88, !dbg !23
  %89 = mul i32 %73, 9, !dbg !23
  %.decomposed37 = sub i32 %.frozen36, %89, !dbg !23
  %90 = mul i32 %74, 9, !dbg !23
  %.decomposed39 = sub i32 %.frozen38, %90, !dbg !23
  %91 = mul i32 %75, 9, !dbg !23
  %.decomposed41 = sub i32 %.frozen40, %91, !dbg !23
  %92 = shl nsw i32 %.decomposed, 8, !dbg !24
  %93 = mul i32 %58, 1536, !dbg !25
  %94 = add i32 %93, %92, !dbg !26
  %95 = add i32 %94, %51, !dbg !27
  %96 = add i32 %94, %52, !dbg !27
  %97 = add i32 %94, %53, !dbg !27
  %98 = add i32 %94, %54, !dbg !27
  %99 = sext i32 %95 to i64, !dbg !28
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !28
  %101 = sext i32 %96 to i64, !dbg !28
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !28
  %103 = sext i32 %97 to i64, !dbg !28
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !28
  %105 = sext i32 %98 to i64, !dbg !28
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !28
  %107 = and i1 %29, %56, !dbg !29
  %108 = and i1 %30, %57, !dbg !29
  %109 = and i1 %31, %57, !dbg !29
  %110 = and i1 %32, %57, !dbg !29
  %111 = and i1 %33, %57, !dbg !29
  %112 = and i1 %34, %57, !dbg !29
  %113 = and i1 %35, %57, !dbg !29
  %114 = and i1 %36, %57, !dbg !29
  %115 = and i1 %37, %57, !dbg !29
  %116 = and i1 %38, %57, !dbg !29
  %117 = and i1 %39, %57, !dbg !29
  %118 = and i1 %40, %57, !dbg !29
  %119 = and i1 %41, %57, !dbg !29
  %120 = and i1 %42, %57, !dbg !29
  %121 = and i1 %43, %57, !dbg !29
  %122 = and i1 %44, %57, !dbg !29
  %123 = and i1 %45, %57, !dbg !29
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 %107) #2, !dbg !30
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !30
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !30
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !30
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !30
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 %107) #2, !dbg !30
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !30
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !30
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !30
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !30
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 %107) #2, !dbg !30
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !30
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !30
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !30
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !30
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %107) #2, !dbg !30
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !30
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !30
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !30
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !30
  %144 = or disjoint i32 %94, 128, !dbg !31
  %145 = add i32 %144, %51, !dbg !32
  %146 = add i32 %144, %52, !dbg !32
  %147 = add i32 %144, %53, !dbg !32
  %148 = add i32 %144, %54, !dbg !32
  %149 = sext i32 %145 to i64, !dbg !33
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !33
  %151 = sext i32 %146 to i64, !dbg !33
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !33
  %153 = sext i32 %147 to i64, !dbg !33
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !33
  %155 = sext i32 %148 to i64, !dbg !33
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !33
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %150, i1 %107) #2, !dbg !34
  %158 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !34
  %159 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !34
  %160 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !34
  %161 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !34
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %152, i1 %107) #2, !dbg !34
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !34
  %164 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !34
  %165 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !34
  %166 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !34
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %154, i1 %107) #2, !dbg !34
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !34
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !34
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !34
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !34
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %156, i1 %107) #2, !dbg !34
  %173 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !34
  %174 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !34
  %175 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !34
  %176 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !34
  %177 = add i32 %94, 768, !dbg !35
  %178 = add i32 %177, %51, !dbg !36
  %179 = add i32 %177, %52, !dbg !36
  %180 = add i32 %177, %53, !dbg !36
  %181 = add i32 %177, %54, !dbg !36
  %182 = sext i32 %178 to i64, !dbg !37
  %183 = getelementptr float, ptr addrspace(1) %0, i64 %182, !dbg !37
  %184 = sext i32 %179 to i64, !dbg !37
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !37
  %186 = sext i32 %180 to i64, !dbg !37
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %186, !dbg !37
  %188 = sext i32 %181 to i64, !dbg !37
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %188, !dbg !37
  %190 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %183, i1 %107) #2, !dbg !38
  %191 = extractvalue { i32, i32, i32, i32 } %190, 0, !dbg !38
  %192 = extractvalue { i32, i32, i32, i32 } %190, 1, !dbg !38
  %193 = extractvalue { i32, i32, i32, i32 } %190, 2, !dbg !38
  %194 = extractvalue { i32, i32, i32, i32 } %190, 3, !dbg !38
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %185, i1 %107) #2, !dbg !38
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !38
  %197 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !38
  %198 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !38
  %199 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !38
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %187, i1 %107) #2, !dbg !38
  %201 = extractvalue { i32, i32, i32, i32 } %200, 0, !dbg !38
  %202 = extractvalue { i32, i32, i32, i32 } %200, 1, !dbg !38
  %203 = extractvalue { i32, i32, i32, i32 } %200, 2, !dbg !38
  %204 = extractvalue { i32, i32, i32, i32 } %200, 3, !dbg !38
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %189, i1 %107) #2, !dbg !38
  %206 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !38
  %207 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !38
  %208 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !38
  %209 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !38
  %210 = add i32 %94, 896, !dbg !39
  %211 = add i32 %210, %51, !dbg !40
  %212 = add i32 %210, %52, !dbg !40
  %213 = add i32 %210, %53, !dbg !40
  %214 = add i32 %210, %54, !dbg !40
  %215 = sext i32 %211 to i64, !dbg !41
  %216 = getelementptr float, ptr addrspace(1) %0, i64 %215, !dbg !41
  %217 = sext i32 %212 to i64, !dbg !41
  %218 = getelementptr float, ptr addrspace(1) %0, i64 %217, !dbg !41
  %219 = sext i32 %213 to i64, !dbg !41
  %220 = getelementptr float, ptr addrspace(1) %0, i64 %219, !dbg !41
  %221 = sext i32 %214 to i64, !dbg !41
  %222 = getelementptr float, ptr addrspace(1) %0, i64 %221, !dbg !41
  %223 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %216, i1 %107) #2, !dbg !42
  %224 = extractvalue { i32, i32, i32, i32 } %223, 0, !dbg !42
  %225 = extractvalue { i32, i32, i32, i32 } %223, 1, !dbg !42
  %226 = extractvalue { i32, i32, i32, i32 } %223, 2, !dbg !42
  %227 = extractvalue { i32, i32, i32, i32 } %223, 3, !dbg !42
  %228 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %218, i1 %107) #2, !dbg !42
  %229 = extractvalue { i32, i32, i32, i32 } %228, 0, !dbg !42
  %230 = extractvalue { i32, i32, i32, i32 } %228, 1, !dbg !42
  %231 = extractvalue { i32, i32, i32, i32 } %228, 2, !dbg !42
  %232 = extractvalue { i32, i32, i32, i32 } %228, 3, !dbg !42
  %233 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %220, i1 %107) #2, !dbg !42
  %234 = extractvalue { i32, i32, i32, i32 } %233, 0, !dbg !42
  %235 = extractvalue { i32, i32, i32, i32 } %233, 1, !dbg !42
  %236 = extractvalue { i32, i32, i32, i32 } %233, 2, !dbg !42
  %237 = extractvalue { i32, i32, i32, i32 } %233, 3, !dbg !42
  %238 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %222, i1 %107) #2, !dbg !42
  %239 = extractvalue { i32, i32, i32, i32 } %238, 0, !dbg !42
  %240 = extractvalue { i32, i32, i32, i32 } %238, 1, !dbg !42
  %241 = extractvalue { i32, i32, i32, i32 } %238, 2, !dbg !42
  %242 = extractvalue { i32, i32, i32, i32 } %238, 3, !dbg !42
  %243 = insertelement <4 x i32> poison, i32 %125, i64 0, !dbg !30
  %244 = insertelement <4 x i32> %243, i32 %126, i64 1, !dbg !30
  %245 = insertelement <4 x i32> %244, i32 %127, i64 2, !dbg !30
  %246 = insertelement <4 x i32> %245, i32 %128, i64 3, !dbg !30
  %247 = bitcast <4 x i32> %246 to <4 x float>, !dbg !30
  %248 = insertelement <4 x i32> poison, i32 %158, i64 0, !dbg !34
  %249 = insertelement <4 x i32> %248, i32 %159, i64 1, !dbg !34
  %250 = insertelement <4 x i32> %249, i32 %160, i64 2, !dbg !34
  %251 = insertelement <4 x i32> %250, i32 %161, i64 3, !dbg !34
  %252 = bitcast <4 x i32> %251 to <4 x float>, !dbg !34
  %253 = insertelement <4 x i32> poison, i32 %191, i64 0, !dbg !38
  %254 = insertelement <4 x i32> %253, i32 %192, i64 1, !dbg !38
  %255 = insertelement <4 x i32> %254, i32 %193, i64 2, !dbg !38
  %256 = insertelement <4 x i32> %255, i32 %194, i64 3, !dbg !38
  %257 = bitcast <4 x i32> %256 to <4 x float>, !dbg !38
  %258 = insertelement <4 x i32> poison, i32 %224, i64 0, !dbg !42
  %259 = insertelement <4 x i32> %258, i32 %225, i64 1, !dbg !42
  %260 = insertelement <4 x i32> %259, i32 %226, i64 2, !dbg !42
  %261 = insertelement <4 x i32> %260, i32 %227, i64 3, !dbg !42
  %262 = bitcast <4 x i32> %261 to <4 x float>, !dbg !42
  %263 = fcmp ogt <4 x float> %252, %247, !dbg !43
  %264 = zext <4 x i1> %263 to <4 x i8>, !dbg !44
  %265 = fcmp uno <4 x float> %252, zeroinitializer, !dbg !45
  %266 = or <4 x i1> %263, %265, !dbg !49
  %.v = select <4 x i1> %266, <4 x i32> %251, <4 x i32> %246, !dbg !50
  %267 = bitcast <4 x i32> %.v to <4 x float>, !dbg !50
  %268 = fcmp olt <4 x float> %267, %257, !dbg !51
  %269 = select <4 x i1> %268, <4 x i8> splat (i8 2), <4 x i8> %264, !dbg !52
  %270 = fcmp uno <4 x float> %257, zeroinitializer, !dbg !53
  %271 = or <4 x i1> %268, %270, !dbg !55
  %.v3 = select <4 x i1> %271, <4 x i32> %256, <4 x i32> %.v, !dbg !56
  %272 = bitcast <4 x i32> %.v3 to <4 x float>, !dbg !56
  %273 = fcmp olt <4 x float> %272, %262, !dbg !57
  %274 = select <4 x i1> %273, <4 x i8> splat (i8 3), <4 x i8> %269, !dbg !58
  %275 = insertelement <4 x i32> poison, i32 %130, i64 0, !dbg !30
  %276 = insertelement <4 x i32> %275, i32 %131, i64 1, !dbg !30
  %277 = insertelement <4 x i32> %276, i32 %132, i64 2, !dbg !30
  %278 = insertelement <4 x i32> %277, i32 %133, i64 3, !dbg !30
  %279 = bitcast <4 x i32> %278 to <4 x float>, !dbg !30
  %280 = insertelement <4 x i32> poison, i32 %163, i64 0, !dbg !34
  %281 = insertelement <4 x i32> %280, i32 %164, i64 1, !dbg !34
  %282 = insertelement <4 x i32> %281, i32 %165, i64 2, !dbg !34
  %283 = insertelement <4 x i32> %282, i32 %166, i64 3, !dbg !34
  %284 = bitcast <4 x i32> %283 to <4 x float>, !dbg !34
  %285 = insertelement <4 x i32> poison, i32 %196, i64 0, !dbg !38
  %286 = insertelement <4 x i32> %285, i32 %197, i64 1, !dbg !38
  %287 = insertelement <4 x i32> %286, i32 %198, i64 2, !dbg !38
  %288 = insertelement <4 x i32> %287, i32 %199, i64 3, !dbg !38
  %289 = bitcast <4 x i32> %288 to <4 x float>, !dbg !38
  %290 = insertelement <4 x i32> poison, i32 %229, i64 0, !dbg !42
  %291 = insertelement <4 x i32> %290, i32 %230, i64 1, !dbg !42
  %292 = insertelement <4 x i32> %291, i32 %231, i64 2, !dbg !42
  %293 = insertelement <4 x i32> %292, i32 %232, i64 3, !dbg !42
  %294 = bitcast <4 x i32> %293 to <4 x float>, !dbg !42
  %295 = fcmp ogt <4 x float> %284, %279, !dbg !43
  %296 = zext <4 x i1> %295 to <4 x i8>, !dbg !44
  %297 = fcmp uno <4 x float> %284, zeroinitializer, !dbg !45
  %298 = or <4 x i1> %295, %297, !dbg !49
  %.v4 = select <4 x i1> %298, <4 x i32> %283, <4 x i32> %278, !dbg !50
  %299 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !50
  %300 = fcmp olt <4 x float> %299, %289, !dbg !51
  %301 = select <4 x i1> %300, <4 x i8> splat (i8 2), <4 x i8> %296, !dbg !52
  %302 = fcmp uno <4 x float> %289, zeroinitializer, !dbg !53
  %303 = or <4 x i1> %300, %302, !dbg !55
  %.v5 = select <4 x i1> %303, <4 x i32> %288, <4 x i32> %.v4, !dbg !56
  %304 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !56
  %305 = fcmp olt <4 x float> %304, %294, !dbg !57
  %306 = select <4 x i1> %305, <4 x i8> splat (i8 3), <4 x i8> %301, !dbg !58
  %307 = insertelement <4 x i32> poison, i32 %135, i64 0, !dbg !30
  %308 = insertelement <4 x i32> %307, i32 %136, i64 1, !dbg !30
  %309 = insertelement <4 x i32> %308, i32 %137, i64 2, !dbg !30
  %310 = insertelement <4 x i32> %309, i32 %138, i64 3, !dbg !30
  %311 = bitcast <4 x i32> %310 to <4 x float>, !dbg !30
  %312 = insertelement <4 x i32> poison, i32 %168, i64 0, !dbg !34
  %313 = insertelement <4 x i32> %312, i32 %169, i64 1, !dbg !34
  %314 = insertelement <4 x i32> %313, i32 %170, i64 2, !dbg !34
  %315 = insertelement <4 x i32> %314, i32 %171, i64 3, !dbg !34
  %316 = bitcast <4 x i32> %315 to <4 x float>, !dbg !34
  %317 = insertelement <4 x i32> poison, i32 %201, i64 0, !dbg !38
  %318 = insertelement <4 x i32> %317, i32 %202, i64 1, !dbg !38
  %319 = insertelement <4 x i32> %318, i32 %203, i64 2, !dbg !38
  %320 = insertelement <4 x i32> %319, i32 %204, i64 3, !dbg !38
  %321 = bitcast <4 x i32> %320 to <4 x float>, !dbg !38
  %322 = insertelement <4 x i32> poison, i32 %234, i64 0, !dbg !42
  %323 = insertelement <4 x i32> %322, i32 %235, i64 1, !dbg !42
  %324 = insertelement <4 x i32> %323, i32 %236, i64 2, !dbg !42
  %325 = insertelement <4 x i32> %324, i32 %237, i64 3, !dbg !42
  %326 = bitcast <4 x i32> %325 to <4 x float>, !dbg !42
  %327 = fcmp ogt <4 x float> %316, %311, !dbg !43
  %328 = zext <4 x i1> %327 to <4 x i8>, !dbg !44
  %329 = fcmp uno <4 x float> %316, zeroinitializer, !dbg !45
  %330 = or <4 x i1> %327, %329, !dbg !49
  %.v6 = select <4 x i1> %330, <4 x i32> %315, <4 x i32> %310, !dbg !50
  %331 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !50
  %332 = fcmp olt <4 x float> %331, %321, !dbg !51
  %333 = select <4 x i1> %332, <4 x i8> splat (i8 2), <4 x i8> %328, !dbg !52
  %334 = fcmp uno <4 x float> %321, zeroinitializer, !dbg !53
  %335 = or <4 x i1> %332, %334, !dbg !55
  %.v7 = select <4 x i1> %335, <4 x i32> %320, <4 x i32> %.v6, !dbg !56
  %336 = bitcast <4 x i32> %.v7 to <4 x float>, !dbg !56
  %337 = fcmp olt <4 x float> %336, %326, !dbg !57
  %338 = select <4 x i1> %337, <4 x i8> splat (i8 3), <4 x i8> %333, !dbg !58
  %339 = insertelement <4 x i32> poison, i32 %140, i64 0, !dbg !30
  %340 = insertelement <4 x i32> %339, i32 %141, i64 1, !dbg !30
  %341 = insertelement <4 x i32> %340, i32 %142, i64 2, !dbg !30
  %342 = insertelement <4 x i32> %341, i32 %143, i64 3, !dbg !30
  %343 = bitcast <4 x i32> %342 to <4 x float>, !dbg !30
  %344 = insertelement <4 x i32> poison, i32 %173, i64 0, !dbg !34
  %345 = insertelement <4 x i32> %344, i32 %174, i64 1, !dbg !34
  %346 = insertelement <4 x i32> %345, i32 %175, i64 2, !dbg !34
  %347 = insertelement <4 x i32> %346, i32 %176, i64 3, !dbg !34
  %348 = bitcast <4 x i32> %347 to <4 x float>, !dbg !34
  %349 = insertelement <4 x i32> poison, i32 %206, i64 0, !dbg !38
  %350 = insertelement <4 x i32> %349, i32 %207, i64 1, !dbg !38
  %351 = insertelement <4 x i32> %350, i32 %208, i64 2, !dbg !38
  %352 = insertelement <4 x i32> %351, i32 %209, i64 3, !dbg !38
  %353 = bitcast <4 x i32> %352 to <4 x float>, !dbg !38
  %354 = insertelement <4 x i32> poison, i32 %239, i64 0, !dbg !42
  %355 = insertelement <4 x i32> %354, i32 %240, i64 1, !dbg !42
  %356 = insertelement <4 x i32> %355, i32 %241, i64 2, !dbg !42
  %357 = insertelement <4 x i32> %356, i32 %242, i64 3, !dbg !42
  %358 = bitcast <4 x i32> %357 to <4 x float>, !dbg !42
  %359 = fcmp ogt <4 x float> %348, %343, !dbg !43
  %360 = zext <4 x i1> %359 to <4 x i8>, !dbg !44
  %361 = fcmp uno <4 x float> %348, zeroinitializer, !dbg !45
  %362 = or <4 x i1> %359, %361, !dbg !49
  %.v8 = select <4 x i1> %362, <4 x i32> %347, <4 x i32> %342, !dbg !50
  %363 = bitcast <4 x i32> %.v8 to <4 x float>, !dbg !50
  %364 = fcmp olt <4 x float> %363, %353, !dbg !51
  %365 = select <4 x i1> %364, <4 x i8> splat (i8 2), <4 x i8> %360, !dbg !52
  %366 = fcmp uno <4 x float> %353, zeroinitializer, !dbg !53
  %367 = or <4 x i1> %364, %366, !dbg !55
  %.v9 = select <4 x i1> %367, <4 x i32> %352, <4 x i32> %.v8, !dbg !56
  %368 = bitcast <4 x i32> %.v9 to <4 x float>, !dbg !56
  %369 = fcmp olt <4 x float> %368, %358, !dbg !57
  %370 = select <4 x i1> %369, <4 x i8> splat (i8 3), <4 x i8> %365, !dbg !58
  %371 = bitcast i32 %224 to float, !dbg !59
  %372 = fcmp uno float %371, 0.000000e+00, !dbg !59
  %373 = bitcast i32 %225 to float, !dbg !59
  %374 = fcmp uno float %373, 0.000000e+00, !dbg !59
  %375 = bitcast i32 %226 to float, !dbg !59
  %376 = fcmp uno float %375, 0.000000e+00, !dbg !59
  %377 = bitcast i32 %227 to float, !dbg !59
  %378 = fcmp uno float %377, 0.000000e+00, !dbg !59
  %379 = bitcast i32 %229 to float, !dbg !59
  %380 = fcmp uno float %379, 0.000000e+00, !dbg !59
  %381 = bitcast i32 %230 to float, !dbg !59
  %382 = fcmp uno float %381, 0.000000e+00, !dbg !59
  %383 = bitcast i32 %231 to float, !dbg !59
  %384 = fcmp uno float %383, 0.000000e+00, !dbg !59
  %385 = bitcast i32 %232 to float, !dbg !59
  %386 = fcmp uno float %385, 0.000000e+00, !dbg !59
  %387 = bitcast i32 %234 to float, !dbg !59
  %388 = fcmp uno float %387, 0.000000e+00, !dbg !59
  %389 = bitcast i32 %235 to float, !dbg !59
  %390 = fcmp uno float %389, 0.000000e+00, !dbg !59
  %391 = bitcast i32 %236 to float, !dbg !59
  %392 = fcmp uno float %391, 0.000000e+00, !dbg !59
  %393 = bitcast i32 %237 to float, !dbg !59
  %394 = fcmp uno float %393, 0.000000e+00, !dbg !59
  %395 = bitcast i32 %239 to float, !dbg !59
  %396 = fcmp uno float %395, 0.000000e+00, !dbg !59
  %397 = bitcast i32 %240 to float, !dbg !59
  %398 = fcmp uno float %397, 0.000000e+00, !dbg !59
  %399 = bitcast i32 %241 to float, !dbg !59
  %400 = fcmp uno float %399, 0.000000e+00, !dbg !59
  %401 = bitcast i32 %242 to float, !dbg !59
  %402 = fcmp uno float %401, 0.000000e+00, !dbg !59
  %403 = extractelement <4 x i1> %273, i64 0, !dbg !61
  %404 = or i1 %403, %372, !dbg !61
  %405 = extractelement <4 x i1> %273, i64 1, !dbg !61
  %406 = or i1 %405, %374, !dbg !61
  %407 = extractelement <4 x i1> %273, i64 2, !dbg !61
  %408 = or i1 %407, %376, !dbg !61
  %409 = extractelement <4 x i1> %273, i64 3, !dbg !61
  %410 = or i1 %409, %378, !dbg !61
  %411 = extractelement <4 x i1> %305, i64 0, !dbg !61
  %412 = or i1 %411, %380, !dbg !61
  %413 = extractelement <4 x i1> %305, i64 1, !dbg !61
  %414 = or i1 %413, %382, !dbg !61
  %415 = extractelement <4 x i1> %305, i64 2, !dbg !61
  %416 = or i1 %415, %384, !dbg !61
  %417 = extractelement <4 x i1> %305, i64 3, !dbg !61
  %418 = or i1 %417, %386, !dbg !61
  %419 = extractelement <4 x i1> %337, i64 0, !dbg !61
  %420 = or i1 %419, %388, !dbg !61
  %421 = extractelement <4 x i1> %337, i64 1, !dbg !61
  %422 = or i1 %421, %390, !dbg !61
  %423 = extractelement <4 x i1> %337, i64 2, !dbg !61
  %424 = or i1 %423, %392, !dbg !61
  %425 = extractelement <4 x i1> %337, i64 3, !dbg !61
  %426 = or i1 %425, %394, !dbg !61
  %427 = extractelement <4 x i1> %369, i64 0, !dbg !61
  %428 = or i1 %427, %396, !dbg !61
  %429 = extractelement <4 x i1> %369, i64 1, !dbg !61
  %430 = or i1 %429, %398, !dbg !61
  %431 = extractelement <4 x i1> %369, i64 2, !dbg !61
  %432 = or i1 %431, %400, !dbg !61
  %433 = extractelement <4 x i1> %369, i64 3, !dbg !61
  %434 = or i1 %433, %402, !dbg !61
  %435 = shl i32 %12, 7, !dbg !62
  %436 = add i32 %51, %435, !dbg !63
  %437 = sext i32 %436 to i64, !dbg !64
  %438 = getelementptr i8, ptr addrspace(1) %1, i64 %437, !dbg !64
  %439 = bitcast <4 x i8> %274 to i32, !dbg !65
  %440 = bitcast <4 x i8> %306 to i32, !dbg !65
  %441 = bitcast <4 x i8> %338 to i32, !dbg !65
  %442 = bitcast <4 x i8> %370 to i32, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %439, i32 %440, i32 %441, i32 %442, ptr addrspace(1) %438, i1 %107) #2, !dbg !65
  %443 = mul i32 %55, 9, !dbg !66
  %444 = add i32 %443, %.decomposed11, !dbg !67
  %445 = mul i32 %60, 1152, !dbg !68
  %446 = mul i32 %61, 1152, !dbg !68
  %447 = mul i32 %62, 1152, !dbg !68
  %448 = mul i32 %63, 1152, !dbg !68
  %449 = mul i32 %64, 1152, !dbg !68
  %450 = mul i32 %65, 1152, !dbg !68
  %451 = mul i32 %66, 1152, !dbg !68
  %452 = mul i32 %67, 1152, !dbg !68
  %453 = mul i32 %68, 1152, !dbg !68
  %454 = mul i32 %69, 1152, !dbg !68
  %455 = mul i32 %70, 1152, !dbg !68
  %456 = mul i32 %71, 1152, !dbg !68
  %457 = mul i32 %72, 1152, !dbg !68
  %458 = mul i32 %73, 1152, !dbg !68
  %459 = mul i32 %74, 1152, !dbg !68
  %460 = mul i32 %75, 1152, !dbg !68
  %461 = add i32 %444, %445, !dbg !69
  %462 = add i32 %446, %.decomposed13, !dbg !67
  %463 = add i32 %462, %443, !dbg !69
  %464 = add i32 %447, %.decomposed15, !dbg !67
  %465 = add i32 %464, %443, !dbg !69
  %466 = add i32 %448, %.decomposed17, !dbg !67
  %467 = add i32 %466, %443, !dbg !69
  %468 = add i32 %449, %.decomposed19, !dbg !67
  %469 = add i32 %468, %443, !dbg !69
  %470 = add i32 %450, %.decomposed21, !dbg !67
  %471 = add i32 %470, %443, !dbg !69
  %472 = add i32 %451, %.decomposed23, !dbg !67
  %473 = add i32 %472, %443, !dbg !69
  %474 = add i32 %452, %.decomposed25, !dbg !67
  %475 = add i32 %474, %443, !dbg !69
  %476 = add i32 %453, %.decomposed27, !dbg !67
  %477 = add i32 %476, %443, !dbg !69
  %478 = add i32 %454, %.decomposed29, !dbg !67
  %479 = add i32 %478, %443, !dbg !69
  %480 = add i32 %455, %.decomposed31, !dbg !67
  %481 = add i32 %480, %443, !dbg !69
  %482 = add i32 %456, %.decomposed33, !dbg !67
  %483 = add i32 %482, %443, !dbg !69
  %484 = add i32 %457, %.decomposed35, !dbg !67
  %485 = add i32 %484, %443, !dbg !69
  %486 = add i32 %458, %.decomposed37, !dbg !67
  %487 = add i32 %486, %443, !dbg !69
  %488 = add i32 %459, %.decomposed39, !dbg !67
  %489 = add i32 %488, %443, !dbg !69
  %490 = add i32 %460, %.decomposed41, !dbg !67
  %491 = add i32 %490, %443, !dbg !69
  %492 = sext i32 %461 to i64, !dbg !70
  %493 = getelementptr float, ptr addrspace(1) %2, i64 %492, !dbg !70
  %494 = sext i32 %463 to i64, !dbg !70
  %495 = getelementptr float, ptr addrspace(1) %2, i64 %494, !dbg !70
  %496 = sext i32 %465 to i64, !dbg !70
  %497 = getelementptr float, ptr addrspace(1) %2, i64 %496, !dbg !70
  %498 = sext i32 %467 to i64, !dbg !70
  %499 = getelementptr float, ptr addrspace(1) %2, i64 %498, !dbg !70
  %500 = sext i32 %469 to i64, !dbg !70
  %501 = getelementptr float, ptr addrspace(1) %2, i64 %500, !dbg !70
  %502 = sext i32 %471 to i64, !dbg !70
  %503 = getelementptr float, ptr addrspace(1) %2, i64 %502, !dbg !70
  %504 = sext i32 %473 to i64, !dbg !70
  %505 = getelementptr float, ptr addrspace(1) %2, i64 %504, !dbg !70
  %506 = sext i32 %475 to i64, !dbg !70
  %507 = getelementptr float, ptr addrspace(1) %2, i64 %506, !dbg !70
  %508 = sext i32 %477 to i64, !dbg !70
  %509 = getelementptr float, ptr addrspace(1) %2, i64 %508, !dbg !70
  %510 = sext i32 %479 to i64, !dbg !70
  %511 = getelementptr float, ptr addrspace(1) %2, i64 %510, !dbg !70
  %512 = sext i32 %481 to i64, !dbg !70
  %513 = getelementptr float, ptr addrspace(1) %2, i64 %512, !dbg !70
  %514 = sext i32 %483 to i64, !dbg !70
  %515 = getelementptr float, ptr addrspace(1) %2, i64 %514, !dbg !70
  %516 = sext i32 %485 to i64, !dbg !70
  %517 = getelementptr float, ptr addrspace(1) %2, i64 %516, !dbg !70
  %518 = sext i32 %487 to i64, !dbg !70
  %519 = getelementptr float, ptr addrspace(1) %2, i64 %518, !dbg !70
  %520 = sext i32 %489 to i64, !dbg !70
  %521 = getelementptr float, ptr addrspace(1) %2, i64 %520, !dbg !70
  %522 = sext i32 %491 to i64, !dbg !70
  %523 = getelementptr float, ptr addrspace(1) %2, i64 %522, !dbg !70
  %524 = and i32 %48, 1920, !dbg !71
  %525 = shl nuw nsw i32 %9, 4, !dbg !71
  %526 = or disjoint i32 %524, %525, !dbg !71
  %527 = or disjoint i32 %526, %49, !dbg !71
  %528 = and i32 %8, 255, !dbg !71
  %529 = lshr exact i32 %526, 5, !dbg !71
  %530 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %529, !dbg !71
  %531 = getelementptr inbounds float, ptr addrspace(3) %530, i32 %527, !dbg !71
  %532 = extractelement <4 x i32> %.v3, i64 0, !dbg !71
  %533 = select i1 %404, i32 %224, i32 %532, !dbg !72
  %534 = insertelement <1 x i32> poison, i32 %533, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %531, <1 x i32> %534, i1 true) #2, !dbg !71
  %535 = or disjoint i32 %527, 1, !dbg !71
  %536 = getelementptr float, ptr addrspace(3) %530, i32 %535, !dbg !71
  %537 = extractelement <4 x i32> %.v3, i64 1, !dbg !71
  %538 = select i1 %406, i32 %225, i32 %537, !dbg !72
  %539 = insertelement <1 x i32> poison, i32 %538, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %536, <1 x i32> %539, i1 true) #2, !dbg !71
  %540 = or disjoint i32 %527, 2, !dbg !71
  %541 = getelementptr float, ptr addrspace(3) %530, i32 %540, !dbg !71
  %542 = extractelement <4 x i32> %.v3, i64 2, !dbg !71
  %543 = select i1 %408, i32 %226, i32 %542, !dbg !72
  %544 = insertelement <1 x i32> poison, i32 %543, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %541, <1 x i32> %544, i1 true) #2, !dbg !71
  %545 = or disjoint i32 %527, 3, !dbg !71
  %546 = getelementptr float, ptr addrspace(3) %530, i32 %545, !dbg !71
  %547 = extractelement <4 x i32> %.v3, i64 3, !dbg !71
  %548 = select i1 %410, i32 %227, i32 %547, !dbg !72
  %549 = insertelement <1 x i32> poison, i32 %548, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %546, <1 x i32> %549, i1 true) #2, !dbg !71
  %550 = or disjoint i32 %527, 4, !dbg !71
  %551 = getelementptr float, ptr addrspace(3) %530, i32 %550, !dbg !71
  %552 = extractelement <4 x i32> %.v5, i64 0, !dbg !71
  %553 = select i1 %412, i32 %229, i32 %552, !dbg !72
  %554 = insertelement <1 x i32> poison, i32 %553, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %551, <1 x i32> %554, i1 true) #2, !dbg !71
  %555 = or disjoint i32 %527, 5, !dbg !71
  %556 = getelementptr float, ptr addrspace(3) %530, i32 %555, !dbg !71
  %557 = extractelement <4 x i32> %.v5, i64 1, !dbg !71
  %558 = select i1 %414, i32 %230, i32 %557, !dbg !72
  %559 = insertelement <1 x i32> poison, i32 %558, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %556, <1 x i32> %559, i1 true) #2, !dbg !71
  %560 = or disjoint i32 %527, 6, !dbg !71
  %561 = getelementptr float, ptr addrspace(3) %530, i32 %560, !dbg !71
  %562 = extractelement <4 x i32> %.v5, i64 2, !dbg !71
  %563 = select i1 %416, i32 %231, i32 %562, !dbg !72
  %564 = insertelement <1 x i32> poison, i32 %563, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %561, <1 x i32> %564, i1 true) #2, !dbg !71
  %565 = or disjoint i32 %527, 7, !dbg !71
  %566 = getelementptr float, ptr addrspace(3) %530, i32 %565, !dbg !71
  %567 = extractelement <4 x i32> %.v5, i64 3, !dbg !71
  %568 = select i1 %418, i32 %232, i32 %567, !dbg !72
  %569 = insertelement <1 x i32> poison, i32 %568, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %566, <1 x i32> %569, i1 true) #2, !dbg !71
  %570 = or disjoint i32 %527, 8, !dbg !71
  %571 = getelementptr float, ptr addrspace(3) %530, i32 %570, !dbg !71
  %572 = extractelement <4 x i32> %.v7, i64 0, !dbg !71
  %573 = select i1 %420, i32 %234, i32 %572, !dbg !72
  %574 = insertelement <1 x i32> poison, i32 %573, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %571, <1 x i32> %574, i1 true) #2, !dbg !71
  %575 = or disjoint i32 %527, 9, !dbg !71
  %576 = getelementptr float, ptr addrspace(3) %530, i32 %575, !dbg !71
  %577 = extractelement <4 x i32> %.v7, i64 1, !dbg !71
  %578 = select i1 %422, i32 %235, i32 %577, !dbg !72
  %579 = insertelement <1 x i32> poison, i32 %578, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %576, <1 x i32> %579, i1 true) #2, !dbg !71
  %580 = or disjoint i32 %527, 10, !dbg !71
  %581 = getelementptr float, ptr addrspace(3) %530, i32 %580, !dbg !71
  %582 = extractelement <4 x i32> %.v7, i64 2, !dbg !71
  %583 = select i1 %424, i32 %236, i32 %582, !dbg !72
  %584 = insertelement <1 x i32> poison, i32 %583, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %581, <1 x i32> %584, i1 true) #2, !dbg !71
  %585 = or disjoint i32 %527, 11, !dbg !71
  %586 = getelementptr float, ptr addrspace(3) %530, i32 %585, !dbg !71
  %587 = extractelement <4 x i32> %.v7, i64 3, !dbg !71
  %588 = select i1 %426, i32 %237, i32 %587, !dbg !72
  %589 = insertelement <1 x i32> poison, i32 %588, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %586, <1 x i32> %589, i1 true) #2, !dbg !71
  %590 = or disjoint i32 %527, 12, !dbg !71
  %591 = getelementptr float, ptr addrspace(3) %530, i32 %590, !dbg !71
  %592 = extractelement <4 x i32> %.v9, i64 0, !dbg !71
  %593 = select i1 %428, i32 %239, i32 %592, !dbg !72
  %594 = insertelement <1 x i32> poison, i32 %593, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %591, <1 x i32> %594, i1 true) #2, !dbg !71
  %595 = or disjoint i32 %527, 13, !dbg !71
  %596 = getelementptr float, ptr addrspace(3) %530, i32 %595, !dbg !71
  %597 = extractelement <4 x i32> %.v9, i64 1, !dbg !71
  %598 = select i1 %430, i32 %240, i32 %597, !dbg !72
  %599 = insertelement <1 x i32> poison, i32 %598, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %596, <1 x i32> %599, i1 true) #2, !dbg !71
  %600 = or disjoint i32 %527, 14, !dbg !71
  %601 = getelementptr float, ptr addrspace(3) %530, i32 %600, !dbg !71
  %602 = extractelement <4 x i32> %.v9, i64 2, !dbg !71
  %603 = select i1 %432, i32 %241, i32 %602, !dbg !72
  %604 = insertelement <1 x i32> poison, i32 %603, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %601, <1 x i32> %604, i1 true) #2, !dbg !71
  %605 = or disjoint i32 %527, 15, !dbg !71
  %606 = getelementptr float, ptr addrspace(3) %530, i32 %605, !dbg !71
  %607 = extractelement <4 x i32> %.v9, i64 3, !dbg !71
  %608 = select i1 %434, i32 %242, i32 %607, !dbg !72
  %609 = insertelement <1 x i32> poison, i32 %608, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %606, <1 x i32> %609, i1 true) #2, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %610 = lshr i32 %528, 7, !dbg !71
  %611 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %610, !dbg !71
  %612 = getelementptr inbounds float, ptr addrspace(3) %611, i32 %528, !dbg !71
  %613 = load i32, ptr addrspace(3) %612, align 4, !dbg !71
  %614 = or disjoint i32 %528, 256, !dbg !71
  %615 = lshr i32 %614, 7, !dbg !71
  %616 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %615, !dbg !71
  %617 = getelementptr inbounds float, ptr addrspace(3) %616, i32 %614, !dbg !71
  %618 = load i32, ptr addrspace(3) %617, align 4, !dbg !71
  %619 = or disjoint i32 %528, 512, !dbg !71
  %620 = lshr i32 %619, 7, !dbg !71
  %621 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %620, !dbg !71
  %622 = getelementptr inbounds float, ptr addrspace(3) %621, i32 %619, !dbg !71
  %623 = load i32, ptr addrspace(3) %622, align 4, !dbg !71
  %624 = or disjoint i32 %528, 768, !dbg !71
  %625 = lshr i32 %624, 7, !dbg !71
  %626 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %625, !dbg !71
  %627 = getelementptr inbounds float, ptr addrspace(3) %626, i32 %624, !dbg !71
  %628 = load i32, ptr addrspace(3) %627, align 4, !dbg !71
  %629 = or disjoint i32 %528, 1024, !dbg !71
  %630 = lshr i32 %629, 7, !dbg !71
  %631 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %630, !dbg !71
  %632 = getelementptr inbounds float, ptr addrspace(3) %631, i32 %629, !dbg !71
  %633 = load i32, ptr addrspace(3) %632, align 4, !dbg !71
  %634 = or disjoint i32 %528, 1280, !dbg !71
  %635 = lshr i32 %634, 7, !dbg !71
  %636 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %635, !dbg !71
  %637 = getelementptr inbounds float, ptr addrspace(3) %636, i32 %634, !dbg !71
  %638 = load i32, ptr addrspace(3) %637, align 4, !dbg !71
  %639 = or disjoint i32 %528, 1536, !dbg !71
  %640 = lshr i32 %639, 7, !dbg !71
  %641 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %640, !dbg !71
  %642 = getelementptr inbounds float, ptr addrspace(3) %641, i32 %639, !dbg !71
  %643 = load i32, ptr addrspace(3) %642, align 4, !dbg !71
  %644 = or disjoint i32 %528, 1792, !dbg !71
  %645 = lshr i32 %644, 7, !dbg !71
  %646 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %645, !dbg !71
  %647 = getelementptr inbounds float, ptr addrspace(3) %646, i32 %644, !dbg !71
  %648 = load i32, ptr addrspace(3) %647, align 4, !dbg !71
  %649 = or disjoint i32 %528, 2048, !dbg !71
  %650 = lshr i32 %649, 7, !dbg !71
  %651 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %650, !dbg !71
  %652 = getelementptr inbounds float, ptr addrspace(3) %651, i32 %649, !dbg !71
  %653 = load i32, ptr addrspace(3) %652, align 4, !dbg !71
  %654 = or disjoint i32 %528, 2304, !dbg !71
  %655 = lshr i32 %654, 7, !dbg !71
  %656 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %655, !dbg !71
  %657 = getelementptr inbounds float, ptr addrspace(3) %656, i32 %654, !dbg !71
  %658 = load i32, ptr addrspace(3) %657, align 4, !dbg !71
  %659 = or disjoint i32 %528, 2560, !dbg !71
  %660 = lshr i32 %659, 7, !dbg !71
  %661 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %660, !dbg !71
  %662 = getelementptr inbounds float, ptr addrspace(3) %661, i32 %659, !dbg !71
  %663 = load i32, ptr addrspace(3) %662, align 4, !dbg !71
  %664 = or disjoint i32 %528, 2816, !dbg !71
  %665 = lshr i32 %664, 7, !dbg !71
  %666 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %665, !dbg !71
  %667 = getelementptr inbounds float, ptr addrspace(3) %666, i32 %664, !dbg !71
  %668 = load i32, ptr addrspace(3) %667, align 4, !dbg !71
  %669 = or disjoint i32 %528, 3072, !dbg !71
  %670 = lshr i32 %669, 7, !dbg !71
  %671 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %670, !dbg !71
  %672 = getelementptr inbounds float, ptr addrspace(3) %671, i32 %669, !dbg !71
  %673 = load i32, ptr addrspace(3) %672, align 4, !dbg !71
  %674 = or disjoint i32 %528, 3328, !dbg !71
  %675 = lshr i32 %674, 7, !dbg !71
  %676 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %675, !dbg !71
  %677 = getelementptr inbounds float, ptr addrspace(3) %676, i32 %674, !dbg !71
  %678 = load i32, ptr addrspace(3) %677, align 4, !dbg !71
  %679 = or disjoint i32 %528, 3584, !dbg !71
  %680 = lshr i32 %679, 7, !dbg !71
  %681 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %680, !dbg !71
  %682 = getelementptr inbounds float, ptr addrspace(3) %681, i32 %679, !dbg !71
  %683 = load i32, ptr addrspace(3) %682, align 4, !dbg !71
  %684 = or disjoint i32 %528, 3840, !dbg !71
  %685 = lshr i32 %684, 7, !dbg !71
  %686 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %685, !dbg !71
  %687 = getelementptr inbounds float, ptr addrspace(3) %686, i32 %684, !dbg !71
  %688 = load i32, ptr addrspace(3) %687, align 4, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %613, ptr addrspace(1) %493, i1 %108) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %618, ptr addrspace(1) %495, i1 %109) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %623, ptr addrspace(1) %497, i1 %110) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %628, ptr addrspace(1) %499, i1 %111) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %633, ptr addrspace(1) %501, i1 %112) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %638, ptr addrspace(1) %503, i1 %113) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %643, ptr addrspace(1) %505, i1 %114) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %648, ptr addrspace(1) %507, i1 %115) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %653, ptr addrspace(1) %509, i1 %116) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %658, ptr addrspace(1) %511, i1 %117) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %663, ptr addrspace(1) %513, i1 %118) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %668, ptr addrspace(1) %515, i1 %119) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %673, ptr addrspace(1) %517, i1 %120) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %678, ptr addrspace(1) %519, i1 %121) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %683, ptr addrspace(1) %521, i1 %122) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %688, ptr addrspace(1) %523, i1 %123) #2, !dbg !71
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cftthd4rqqr7v6ca72235iex7rj2otvgg3uag4y4rpfyrh3g33m6.py", directory: "inductor_cache/ft")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_12", linkageName: "triton_poi_fused_max_pool2d_with_indices_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 33, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 49, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 62, scope: !7)
!30 = !DILocation(line: 34, column: 54, scope: !7)
!31 = !DILocation(line: 35, column: 41, scope: !7)
!32 = !DILocation(line: 35, column: 50, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 60, scope: !7)
!35 = !DILocation(line: 36, column: 41, scope: !7)
!36 = !DILocation(line: 36, column: 50, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 60, scope: !7)
!39 = !DILocation(line: 37, column: 42, scope: !7)
!40 = !DILocation(line: 37, column: 51, scope: !7)
!41 = !DILocation(line: 37, column: 31, scope: !7)
!42 = !DILocation(line: 37, column: 61, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 41, column: 32, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 42, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!51 = !DILocation(line: 43, column: 18, scope: !7)
!52 = !DILocation(line: 45, column: 33, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !54)
!54 = !DILocation(line: 46, column: 41, scope: !7)
!55 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !54)
!56 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !54)
!57 = !DILocation(line: 47, column: 20, scope: !7)
!58 = !DILocation(line: 49, column: 35, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !60)
!60 = !DILocation(line: 50, column: 42, scope: !7)
!61 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !60)
!62 = !DILocation(line: 51, column: 34, scope: !7)
!63 = !DILocation(line: 51, column: 30, scope: !7)
!64 = !DILocation(line: 51, column: 25, scope: !7)
!65 = !DILocation(line: 51, column: 46, scope: !7)
!66 = !DILocation(line: 52, column: 32, scope: !7)
!67 = !DILocation(line: 52, column: 30, scope: !7)
!68 = !DILocation(line: 52, column: 42, scope: !7)
!69 = !DILocation(line: 52, column: 37, scope: !7)
!70 = !DILocation(line: 52, column: 25, scope: !7)
!71 = !DILocation(line: 52, column: 54, scope: !7)
!72 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !60)
!73 = !DILocation(line: 52, column: 4, scope: !7)
