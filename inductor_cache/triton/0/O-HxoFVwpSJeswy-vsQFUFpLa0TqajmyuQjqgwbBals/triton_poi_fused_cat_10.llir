; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 512, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %12 = sdiv i32 %.frozen, 1024, !dbg !14
  %.frozen2 = freeze i32 %11, !dbg !14
  %13 = sdiv i32 %.frozen2, 1024, !dbg !14
  %14 = srem i32 %12, 28, !dbg !15
  %15 = srem i32 %13, 28, !dbg !15
  %16 = mul i32 %12, 1024, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = mul i32 %13, 1024, !dbg !16
  %.decomposed3 = sub i32 %.frozen2, %17, !dbg !16
  %.frozen4 = freeze i32 %10, !dbg !17
  %18 = sdiv i32 %.frozen4, 28672, !dbg !17
  %.frozen5 = freeze i32 %11, !dbg !17
  %19 = sdiv i32 %.frozen5, 28672, !dbg !17
  %20 = icmp slt i32 %14, 12, !dbg !18
  %21 = icmp slt i32 %15, 12, !dbg !18
  %22 = mul i32 %18, 28672, !dbg !19
  %srem.decomposed = sub i32 %.frozen4, %22, !dbg !19
  %23 = mul i32 %19, 28672, !dbg !19
  %srem1.decomposed = sub i32 %.frozen5, %23, !dbg !19
  %24 = mul nsw i32 %18, 12288, !dbg !20
  %25 = mul nsw i32 %19, 12288, !dbg !20
  %26 = add nsw i32 %24, %srem.decomposed, !dbg !21
  %27 = add nsw i32 %25, %srem1.decomposed, !dbg !21
  %28 = sext i32 %26 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !22
  %30 = sext i32 %27 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !22
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #1, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !23
  %37 = bitcast i32 %33 to float, !dbg !23
  %38 = bitcast i32 %34 to float, !dbg !23
  %39 = bitcast i32 %35 to float, !dbg !23
  %40 = bitcast i32 %36 to float, !dbg !23
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #1, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !23
  %46 = bitcast i32 %42 to float, !dbg !23
  %47 = bitcast i32 %43 to float, !dbg !23
  %48 = bitcast i32 %44 to float, !dbg !23
  %49 = bitcast i32 %45 to float, !dbg !23
  %50 = fcmp ogt float %37, 0.000000e+00, !dbg !24
  %51 = fcmp ogt float %38, 0.000000e+00, !dbg !24
  %52 = fcmp ogt float %39, 0.000000e+00, !dbg !24
  %53 = fcmp ogt float %40, 0.000000e+00, !dbg !24
  %54 = fcmp ogt float %46, 0.000000e+00, !dbg !24
  %55 = fcmp ogt float %47, 0.000000e+00, !dbg !24
  %56 = fcmp ogt float %48, 0.000000e+00, !dbg !24
  %57 = fcmp ogt float %49, 0.000000e+00, !dbg !24
  %58 = fmul float %37, 0x3FC99999A0000000, !dbg !25
  %59 = fmul float %38, 0x3FC99999A0000000, !dbg !25
  %60 = fmul float %39, 0x3FC99999A0000000, !dbg !25
  %61 = fmul float %40, 0x3FC99999A0000000, !dbg !25
  %62 = fmul float %46, 0x3FC99999A0000000, !dbg !25
  %63 = fmul float %47, 0x3FC99999A0000000, !dbg !25
  %64 = fmul float %48, 0x3FC99999A0000000, !dbg !25
  %65 = fmul float %49, 0x3FC99999A0000000, !dbg !25
  %66 = select i1 %50, float %37, float %58, !dbg !26
  %67 = select i1 %51, float %38, float %59, !dbg !26
  %68 = select i1 %52, float %39, float %60, !dbg !26
  %69 = select i1 %53, float %40, float %61, !dbg !26
  %70 = select i1 %54, float %46, float %62, !dbg !26
  %71 = select i1 %55, float %47, float %63, !dbg !26
  %72 = select i1 %56, float %48, float %64, !dbg !26
  %73 = select i1 %57, float %49, float %65, !dbg !26
  %74 = icmp sgt i32 %14, 11, !dbg !27
  %75 = icmp sgt i32 %15, 11, !dbg !27
  %76 = shl nsw i32 %14, 10, !dbg !28
  %77 = shl nsw i32 %15, 10, !dbg !28
  %78 = shl nsw i32 %18, 14, !dbg !29
  %79 = shl nsw i32 %19, 14, !dbg !29
  %80 = add nsw i32 %.decomposed, -12288, !dbg !28
  %81 = add nsw i32 %80, %78, !dbg !30
  %82 = add nsw i32 %81, %76, !dbg !31
  %83 = add nsw i32 %.decomposed3, -12288, !dbg !28
  %84 = add nsw i32 %83, %79, !dbg !30
  %85 = add nsw i32 %84, %77, !dbg !31
  %86 = sext i32 %82 to i64, !dbg !32
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !32
  %88 = sext i32 %85 to i64, !dbg !32
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !32
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %87, i1 %74, i32 0, i1 %74, i32 0, i1 %74, i32 0, i1 %74, i32 0, i1 %74) #1, !dbg !33
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !33
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !33
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !33
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !33
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %89, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #1, !dbg !33
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !33
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !33
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !33
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !33
  %100 = sext i32 %10 to i64, !dbg !34
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !34
  %102 = sext i32 %11 to i64, !dbg !34
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !34
  %104 = bitcast float %66 to i32, !dbg !35
  %105 = select i1 %20, i32 %104, i32 %91, !dbg !36
  %106 = bitcast float %67 to i32, !dbg !35
  %107 = select i1 %20, i32 %106, i32 %92, !dbg !36
  %108 = bitcast float %68 to i32, !dbg !35
  %109 = select i1 %20, i32 %108, i32 %93, !dbg !36
  %110 = bitcast float %69 to i32, !dbg !35
  %111 = select i1 %20, i32 %110, i32 %94, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %105, i32 %107, i32 %109, i32 %111, ptr addrspace(1) %101, i1 true) #1, !dbg !35
  %112 = bitcast float %70 to i32, !dbg !35
  %113 = select i1 %21, i32 %112, i32 %96, !dbg !36
  %114 = bitcast float %71 to i32, !dbg !35
  %115 = select i1 %21, i32 %114, i32 %97, !dbg !36
  %116 = bitcast float %72 to i32, !dbg !35
  %117 = select i1 %21, i32 %116, i32 %98, !dbg !36
  %118 = bitcast float %73 to i32, !dbg !35
  %119 = select i1 %21, i32 %118, i32 %99, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %113, i32 %115, i32 %117, i32 %119, ptr addrspace(1) %103, i1 true) #1, !dbg !35
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cn6k47otogmwnuq4woufttj4gghonxvit2sig2ligxhkxmy6yltt.py", directory: "inductor_cache/n6")
!4 = !{ptr @triton_poi_fused_cat_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_10", linkageName: "triton_poi_fused_cat_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 53, scope: !7)
!21 = !DILocation(line: 33, column: 47, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 58, scope: !7)
!24 = !DILocation(line: 35, column: 18, scope: !7)
!25 = !DILocation(line: 37, column: 18, scope: !7)
!26 = !DILocation(line: 38, column: 33, scope: !7)
!27 = !DILocation(line: 41, column: 20, scope: !7)
!28 = !DILocation(line: 44, column: 42, scope: !7)
!29 = !DILocation(line: 44, column: 62, scope: !7)
!30 = !DILocation(line: 44, column: 36, scope: !7)
!31 = !DILocation(line: 44, column: 56, scope: !7)
!32 = !DILocation(line: 44, column: 31, scope: !7)
!33 = !DILocation(line: 44, column: 67, scope: !7)
!34 = !DILocation(line: 46, column: 25, scope: !7)
!35 = !DILocation(line: 46, column: 37, scope: !7)
!36 = !DILocation(line: 0, scope: !7)
!37 = !DILocation(line: 46, column: 4, scope: !7)
