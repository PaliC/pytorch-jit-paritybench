; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused_cumsum_max_sort_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 1, !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 64, !dbg !14
  %14 = and i32 %9, 1, !dbg !15
  %15 = shl nuw nsw i32 %14, 1, !dbg !15
  %16 = shl i32 %12, 2, !dbg !16
  %17 = or disjoint i32 %16, %15, !dbg !17
  %18 = sext i32 %17 to i64, !dbg !18
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !18
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %19, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #2, !dbg !19
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !19
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !19
  %23 = bitcast i32 %21 to float, !dbg !19
  %24 = bitcast i32 %22 to float, !dbg !19
  %25 = sext i32 %16 to i64, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !20
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %13) #2, !dbg !21
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %13) #2, !dbg !21
  %29 = bitcast i32 %28 to float, !dbg !21
  %30 = or disjoint i32 %16, 1, !dbg !22
  %31 = sext i32 %30 to i64, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !23
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %13) #2, !dbg !24
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %13) #2, !dbg !24
  %35 = bitcast i32 %34 to float, !dbg !24
  %36 = or disjoint i32 %16, 2, !dbg !25
  %37 = sext i32 %36 to i64, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %13) #2, !dbg !27
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %13) #2, !dbg !27
  %41 = bitcast i32 %40 to float, !dbg !27
  %42 = or disjoint i32 %16, 3, !dbg !28
  %43 = sext i32 %42 to i64, !dbg !29
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !29
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %13) #2, !dbg !30
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %13) #2, !dbg !30
  %47 = bitcast i32 %46 to float, !dbg !30
  %48 = fcmp ogt float %29, %35, !dbg !31
  %49 = fcmp uno float %29, 0.000000e+00, !dbg !35
  %50 = or i1 %49, %48, !dbg !36
  %51 = select i1 %50, float %29, float %35, !dbg !37
  %52 = fcmp ogt float %51, %41, !dbg !38
  %53 = fcmp uno float %51, 0.000000e+00, !dbg !40
  %54 = or i1 %52, %53, !dbg !41
  %55 = select i1 %54, float %51, float %41, !dbg !42
  %56 = fcmp ogt float %55, %47, !dbg !43
  %57 = fcmp uno float %55, 0.000000e+00, !dbg !45
  %58 = or i1 %56, %57, !dbg !46
  %59 = select i1 %58, float %55, float %47, !dbg !47
  %60 = fsub float %23, %59, !dbg !48
  %61 = fsub float %24, %59, !dbg !48
  %62 = bitcast float %60 to i32, !dbg !49
  %63 = bitcast float %61 to i32, !dbg !49
  %64 = xor i32 %14, 1, !dbg !53
  %65 = trunc i32 %9 to i1, !dbg !54
  %66 = fcmp uge float %60, %61, !dbg !54
  %.not = xor i1 %66, %65, !dbg !54
  %67 = xor i32 %62, %63, !dbg !55
  %68 = select i1 %.not, i32 0, i32 %67, !dbg !56
  %69 = xor i32 %68, %62, !dbg !57
  %70 = xor i32 %68, %63, !dbg !57
  %71 = mul nuw nsw i32 %69, %64, !dbg !58
  %72 = mul nuw nsw i32 %70, %64, !dbg !58
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 1, i32 31), !dbg !59
  %74 = add i32 %71, %73, !dbg !62
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 1, i32 31), !dbg !59
  %76 = add i32 %72, %75, !dbg !62
  %77 = mul nuw nsw i32 %69, %14, !dbg !64
  %78 = mul nuw nsw i32 %70, %14, !dbg !64
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 1, i32 31), !dbg !59
  %80 = add i32 %77, %79, !dbg !62
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 1, i32 31), !dbg !59
  %82 = add i32 %78, %81, !dbg !62
  %83 = bitcast i32 %74 to float, !dbg !65
  %84 = bitcast i32 %76 to float, !dbg !65
  %85 = bitcast i32 %80 to float, !dbg !66
  %86 = bitcast i32 %82 to float, !dbg !66
  %87 = fcmp olt float %83, %85, !dbg !67
  %88 = fcmp olt float %84, %86, !dbg !67
  %89 = xor i32 %74, %80, !dbg !55
  %90 = xor i32 %76, %82, !dbg !55
  %91 = select i1 %87, i32 %89, i32 0, !dbg !56
  %92 = select i1 %88, i32 %90, i32 0, !dbg !56
  %93 = xor i32 %91, %69, !dbg !57
  %94 = xor i32 %92, %70, !dbg !57
  %95 = bitcast i32 %93 to float, !dbg !65
  %96 = bitcast i32 %94 to float, !dbg !66
  %97 = fcmp olt float %95, %96, !dbg !67
  %98 = xor i32 %93, %94, !dbg !55
  %99 = select i1 %97, i32 %98, i32 0, !dbg !56
  %100 = xor i32 %99, %93, !dbg !57
  %101 = xor i32 %99, %94, !dbg !57
  %102 = bitcast i32 %100 to float, !dbg !68
  %103 = bitcast i32 %101 to float, !dbg !68
  %104 = fadd float %102, %103, !dbg !69
  %105 = bitcast float %104 to i32, !dbg !71
  %106 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %105, i32 1, i32 0), !dbg !71
  %107 = bitcast i32 %106 to float, !dbg !71
  %.not1 = icmp eq i32 %14, 0, !dbg !71
  %108 = fadd float %104, %107, !dbg !69
  %109 = select i1 %.not1, float %104, float %108, !dbg !71
  %110 = bitcast float %109 to i32, !dbg !71
  %111 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %110, i32 1, i32 0), !dbg !71
  %112 = bitcast i32 %111 to float, !dbg !71
  %113 = fadd float %112, %102, !dbg !69
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %62, i32 %63, ptr addrspace(1) %114, i1 %13) #2, !dbg !73
  %115 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !74
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %100, i32 %101, ptr addrspace(1) %115, i1 %13) #2, !dbg !75
  %116 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !76
  %117 = bitcast float %113 to i32, !dbg !77
  %118 = select i1 %.not1, i32 %100, i32 %117, !dbg !71
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %118, i32 %110, ptr addrspace(1) %116, i1 %13) #2, !dbg !77
  ret void, !dbg !78
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.up.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coy54v5gczpdyyjcmc7glxfj4npjfpmmaqhytnymflg24ruwva5c.py", directory: "inductor_cache/oy")
!4 = !{ptr @triton_per_fused_cumsum_max_sort_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_cumsum_max_sort_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_cumsum_max_sort_sub_0", linkageName: "triton_per_fused_cumsum_max_sort_sub_0", scope: !3, file: !3, line: 24, type: !8, scopeLine: 24, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 28, column: 28, scope: !7)
!11 = !DILocation(line: 28, column: 33, scope: !7)
!12 = !DILocation(line: 29, column: 44, scope: !7)
!13 = !DILocation(line: 29, column: 23, scope: !7)
!14 = !DILocation(line: 30, column: 21, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 36, column: 37, scope: !7)
!17 = !DILocation(line: 36, column: 35, scope: !7)
!18 = !DILocation(line: 36, column: 30, scope: !7)
!19 = !DILocation(line: 36, column: 42, scope: !7)
!20 = !DILocation(line: 37, column: 30, scope: !7)
!21 = !DILocation(line: 37, column: 37, scope: !7)
!22 = !DILocation(line: 38, column: 34, scope: !7)
!23 = !DILocation(line: 38, column: 30, scope: !7)
!24 = !DILocation(line: 38, column: 41, scope: !7)
!25 = !DILocation(line: 39, column: 34, scope: !7)
!26 = !DILocation(line: 39, column: 30, scope: !7)
!27 = !DILocation(line: 39, column: 41, scope: !7)
!28 = !DILocation(line: 40, column: 34, scope: !7)
!29 = !DILocation(line: 40, column: 30, scope: !7)
!30 = !DILocation(line: 40, column: 41, scope: !7)
!31 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 41, column: 40, scope: !7)
!35 = !DILocation(line: 120, column: 21, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 120, column: 16, scope: !32, inlinedAt: !34)
!37 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!38 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !39)
!39 = !DILocation(line: 42, column: 40, scope: !7)
!40 = !DILocation(line: 120, column: 21, scope: !32, inlinedAt: !39)
!41 = !DILocation(line: 120, column: 16, scope: !32, inlinedAt: !39)
!42 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !39)
!43 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !44)
!44 = !DILocation(line: 43, column: 40, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !32, inlinedAt: !44)
!46 = !DILocation(line: 120, column: 16, scope: !32, inlinedAt: !44)
!47 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !44)
!48 = !DILocation(line: 44, column: 18, scope: !7)
!49 = !DILocation(line: 502, column: 14, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !51, file: !33, discriminator: 0)
!51 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!52 = !DILocation(line: 49, column: 71, scope: !7)
!53 = !DILocation(line: 505, column: 21, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 547, column: 28, scope: !50, inlinedAt: !52)
!55 = !DILocation(line: 548, column: 38, scope: !50, inlinedAt: !52)
!56 = !DILocation(line: 548, column: 46, scope: !50, inlinedAt: !52)
!57 = !DILocation(line: 548, column: 15, scope: !50, inlinedAt: !52)
!58 = !DILocation(line: 506, column: 40, scope: !50, inlinedAt: !52)
!59 = !DILocation(line: 267, column: 36, scope: !60, inlinedAt: !52)
!60 = distinct !DILexicalBlockFile(scope: !50, file: !61, discriminator: 0)
!61 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!62 = !DILocation(line: 256, column: 15, scope: !63, inlinedAt: !52)
!63 = distinct !DILexicalBlockFile(scope: !60, file: !61, discriminator: 0)
!64 = !DILocation(line: 507, column: 41, scope: !50, inlinedAt: !52)
!65 = !DILocation(line: 510, column: 20, scope: !50, inlinedAt: !52)
!66 = !DILocation(line: 511, column: 22, scope: !50, inlinedAt: !52)
!67 = !DILocation(line: 536, column: 22, scope: !50, inlinedAt: !52)
!68 = !DILocation(line: 551, column: 18, scope: !50, inlinedAt: !52)
!69 = !DILocation(line: 13, column: 20, scope: !70, inlinedAt: !71)
!70 = distinct !DILexicalBlockFile(scope: !7, file: !3, discriminator: 0)
!71 = !DILocation(line: 52, column: 46, scope: !7)
!72 = !DILocation(line: 53, column: 25, scope: !7)
!73 = !DILocation(line: 53, column: 43, scope: !7)
!74 = !DILocation(line: 54, column: 25, scope: !7)
!75 = !DILocation(line: 54, column: 44, scope: !7)
!76 = !DILocation(line: 55, column: 25, scope: !7)
!77 = !DILocation(line: 55, column: 44, scope: !7)
!78 = !DILocation(line: 55, column: 4, scope: !7)
