; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 1, !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %11 = and i32 %8, 1, !dbg !12
  %12 = shl nuw nsw i32 %11, 1, !dbg !12
  %13 = shl i32 %8, 1, !dbg !12
  %14 = and i32 %13, 62, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %7, %14, !dbg !13
  %17 = icmp slt i32 %16, 64, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 2, !dbg !16
  %.lobit12 = lshr i32 %8, 5, !dbg !17
  %20 = and i32 %.lobit12, 3, !dbg !17
  %21 = or disjoint i32 %19, %12, !dbg !18
  %22 = or disjoint i32 %19, %20, !dbg !18
  %23 = icmp slt i32 %22, 320, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %24 = sdiv i32 %.frozen, 4, !dbg !20
  %25 = srem i32 %24, 4, !dbg !21
  %26 = mul i32 %24, 4, !dbg !22
  %.decomposed = sub i32 %.frozen, %26, !dbg !22
  %.frozen11 = freeze i32 %16, !dbg !23
  %27 = sdiv i32 %.frozen11, 16, !dbg !23
  %28 = mul i32 %27, 16, !dbg !24
  %.decomposed12 = sub i32 %.frozen11, %28, !dbg !24
  %29 = icmp sgt i32 %25, -1, !dbg !25
  %30 = or i32 %25, %.decomposed, !dbg !26
  %31 = icmp sgt i32 %30, -1, !dbg !26
  %32 = mul nsw i32 %.decomposed, 640, !dbg !27
  %33 = mul i32 %24, 5120, !dbg !28
  %34 = add i32 %33, %32, !dbg !29
  %35 = add i32 %34, %21, !dbg !30
  %36 = sext i32 %35 to i64, !dbg !31
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !31
  %38 = add i32 %34, 320, !dbg !32
  %39 = add i32 %38, %21, !dbg !33
  %40 = sext i32 %39 to i64, !dbg !34
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !34
  %42 = add nsw i32 %.decomposed, 1, !dbg !35
  %43 = icmp ult i32 %42, 4, !dbg !35
  %44 = and i1 %29, %43, !dbg !36
  %45 = add i32 %34, 640, !dbg !37
  %46 = add i32 %45, %21, !dbg !38
  %47 = sext i32 %46 to i64, !dbg !39
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !39
  %49 = add i32 %34, 2560, !dbg !40
  %50 = add i32 %49, %21, !dbg !41
  %51 = sext i32 %50 to i64, !dbg !42
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !42
  %53 = add i32 %34, 2880, !dbg !43
  %54 = add i32 %53, %21, !dbg !44
  %55 = sext i32 %54 to i64, !dbg !45
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !45
  %57 = add i32 %34, 3200, !dbg !46
  %58 = add i32 %57, %21, !dbg !47
  %59 = sext i32 %58 to i64, !dbg !48
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !48
  %61 = add nsw i32 %25, 1, !dbg !49
  %62 = insertelement <4 x i32> <i32 poison, i32 poison, i32 poison, i32 -1>, i32 %21, i64 0, !dbg !19
  %63 = insertelement <4 x i32> %62, i32 %15, i64 1, !dbg !19
  %64 = insertelement <4 x i32> %63, i32 %61, i64 2, !dbg !19
  %65 = insertelement <4 x i32> <i32 320, i32 64, i32 4, i32 poison>, i32 %.decomposed, i64 3, !dbg !19
  %66 = icmp slt <4 x i32> %64, %65, !dbg !19
  %67 = icmp ult <4 x i32> %64, %65, !dbg !19
  %68 = shufflevector <4 x i1> %66, <4 x i1> %67, <4 x i32> <i32 0, i32 1, i32 6, i32 3>, !dbg !19
  %69 = extractelement <4 x i1> %66, i64 0, !dbg !50
  %70 = and i1 %69, %31, !dbg !51
  %71 = extractelement <4 x i1> %66, i64 1, !dbg !50
  %72 = and i1 %71, %70, !dbg !52
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %37, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72) #2, !dbg !53
  %74 = extractvalue { i32, i32 } %73, 0, !dbg !53
  %75 = extractvalue { i32, i32 } %73, 1, !dbg !53
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %41, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72) #2, !dbg !54
  %77 = extractvalue { i32, i32 } %76, 0, !dbg !54
  %78 = extractvalue { i32, i32 } %76, 1, !dbg !54
  %79 = and i1 %69, %44, !dbg !55
  %80 = and i1 %71, %79, !dbg !56
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %48, i1 %80, i32 -8388608, i1 %80, i32 -8388608, i1 %80) #2, !dbg !57
  %82 = extractvalue { i32, i32 } %81, 0, !dbg !57
  %83 = extractvalue { i32, i32 } %81, 1, !dbg !57
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %52, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72) #2, !dbg !58
  %85 = extractvalue { i32, i32 } %84, 0, !dbg !58
  %86 = extractvalue { i32, i32 } %84, 1, !dbg !58
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %56, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72) #2, !dbg !59
  %88 = extractvalue { i32, i32 } %87, 0, !dbg !59
  %89 = extractvalue { i32, i32 } %87, 1, !dbg !59
  %90 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 %80, i32 -8388608, i1 %80, i32 -8388608, i1 %80) #2, !dbg !60
  %91 = extractvalue { i32, i32 } %90, 0, !dbg !60
  %92 = extractvalue { i32, i32 } %90, 1, !dbg !60
  %93 = add i32 %34, 5120, !dbg !61
  %94 = add i32 %93, %21, !dbg !62
  %95 = sext i32 %94 to i64, !dbg !63
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !63
  %97 = bitcast <4 x i1> %68 to i4, !dbg !64
  %98 = icmp eq i4 %97, -1, !dbg !64
  %99 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %96, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98) #2, !dbg !65
  %100 = extractvalue { i32, i32 } %99, 0, !dbg !65
  %101 = extractvalue { i32, i32 } %99, 1, !dbg !65
  %102 = add i32 %34, 5440, !dbg !66
  %103 = add i32 %102, %21, !dbg !67
  %104 = sext i32 %103 to i64, !dbg !68
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !68
  %106 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %105, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98) #2, !dbg !69
  %107 = extractvalue { i32, i32 } %106, 0, !dbg !69
  %108 = extractvalue { i32, i32 } %106, 1, !dbg !69
  %109 = or i32 %61, %42, !dbg !70
  %110 = icmp ult i32 %109, 4, !dbg !70
  %111 = add i32 %34, 5760, !dbg !71
  %112 = add i32 %111, %21, !dbg !72
  %113 = sext i32 %112 to i64, !dbg !73
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !73
  %115 = and i1 %69, %110, !dbg !74
  %116 = and i1 %71, %115, !dbg !75
  %117 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %114, i1 %116, i32 -8388608, i1 %116, i32 -8388608, i1 %116) #2, !dbg !76
  %118 = extractvalue { i32, i32 } %117, 0, !dbg !76
  %119 = extractvalue { i32, i32 } %117, 1, !dbg !76
  %120 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !53
  %121 = insertelement <2 x i32> %120, i32 %75, i64 1, !dbg !53
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !53
  %123 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !54
  %124 = insertelement <2 x i32> %123, i32 %78, i64 1, !dbg !54
  %125 = bitcast <2 x i32> %124 to <2 x float>, !dbg !54
  %126 = fcmp ogt <2 x float> %125, %122, !dbg !77
  %127 = fcmp uno <2 x float> %125, zeroinitializer, !dbg !81
  %128 = or <2 x i1> %126, %127, !dbg !82
  %.v = select <2 x i1> %128, <2 x i32> %124, <2 x i32> %121, !dbg !83
  %129 = bitcast <2 x i32> %.v to <2 x float>, !dbg !83
  %130 = insertelement <2 x i32> poison, i32 %82, i64 0, !dbg !57
  %131 = insertelement <2 x i32> %130, i32 %83, i64 1, !dbg !57
  %132 = bitcast <2 x i32> %131 to <2 x float>, !dbg !57
  %133 = fcmp olt <2 x float> %129, %132, !dbg !84
  %134 = fcmp uno <2 x float> %132, zeroinitializer, !dbg !86
  %135 = or <2 x i1> %134, %133, !dbg !87
  %.v5 = select <2 x i1> %135, <2 x i32> %131, <2 x i32> %.v, !dbg !88
  %136 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !88
  %137 = insertelement <2 x i32> poison, i32 %85, i64 0, !dbg !58
  %138 = insertelement <2 x i32> %137, i32 %86, i64 1, !dbg !58
  %139 = bitcast <2 x i32> %138 to <2 x float>, !dbg !58
  %140 = fcmp olt <2 x float> %136, %139, !dbg !89
  %141 = fcmp uno <2 x float> %139, zeroinitializer, !dbg !91
  %142 = or <2 x i1> %141, %140, !dbg !92
  %.v6 = select <2 x i1> %142, <2 x i32> %138, <2 x i32> %.v5, !dbg !93
  %143 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !93
  %144 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !59
  %145 = insertelement <2 x i32> %144, i32 %89, i64 1, !dbg !59
  %146 = bitcast <2 x i32> %145 to <2 x float>, !dbg !59
  %147 = fcmp olt <2 x float> %143, %146, !dbg !94
  %148 = fcmp uno <2 x float> %146, zeroinitializer, !dbg !96
  %149 = or <2 x i1> %148, %147, !dbg !97
  %.v7 = select <2 x i1> %149, <2 x i32> %145, <2 x i32> %.v6, !dbg !98
  %150 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !98
  %151 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !60
  %152 = insertelement <2 x i32> %151, i32 %92, i64 1, !dbg !60
  %153 = bitcast <2 x i32> %152 to <2 x float>, !dbg !60
  %154 = fcmp olt <2 x float> %150, %153, !dbg !99
  %155 = fcmp uno <2 x float> %153, zeroinitializer, !dbg !101
  %156 = or <2 x i1> %155, %154, !dbg !102
  %.v8 = select <2 x i1> %156, <2 x i32> %152, <2 x i32> %.v7, !dbg !103
  %157 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !103
  %158 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !65
  %159 = insertelement <2 x i32> %158, i32 %101, i64 1, !dbg !65
  %160 = bitcast <2 x i32> %159 to <2 x float>, !dbg !65
  %161 = fcmp olt <2 x float> %157, %160, !dbg !104
  %162 = fcmp uno <2 x float> %160, zeroinitializer, !dbg !106
  %163 = or <2 x i1> %162, %161, !dbg !107
  %.v9 = select <2 x i1> %163, <2 x i32> %159, <2 x i32> %.v8, !dbg !108
  %164 = bitcast <2 x i32> %.v9 to <2 x float>, !dbg !108
  %165 = insertelement <2 x i32> poison, i32 %107, i64 0, !dbg !69
  %166 = insertelement <2 x i32> %165, i32 %108, i64 1, !dbg !69
  %167 = bitcast <2 x i32> %166 to <2 x float>, !dbg !69
  %168 = fcmp olt <2 x float> %164, %167, !dbg !109
  %169 = fcmp uno <2 x float> %167, zeroinitializer, !dbg !111
  %170 = or <2 x i1> %169, %168, !dbg !112
  %.v10 = select <2 x i1> %170, <2 x i32> %166, <2 x i32> %.v9, !dbg !113
  %171 = bitcast <2 x i32> %.v10 to <2 x float>, !dbg !113
  %172 = insertelement <2 x i32> poison, i32 %118, i64 0, !dbg !76
  %173 = insertelement <2 x i32> %172, i32 %119, i64 1, !dbg !76
  %174 = bitcast <2 x i32> %173 to <2 x float>, !dbg !76
  %175 = fcmp olt <2 x float> %171, %174, !dbg !114
  %176 = bitcast i32 %118 to float, !dbg !116
  %177 = fcmp uno float %176, 0.000000e+00, !dbg !116
  %178 = bitcast i32 %119 to float, !dbg !116
  %179 = fcmp uno float %178, 0.000000e+00, !dbg !116
  %180 = extractelement <2 x i1> %175, i64 0, !dbg !117
  %181 = or i1 %177, %180, !dbg !117
  %182 = extractelement <2 x i1> %175, i64 1, !dbg !117
  %183 = or i1 %179, %182, !dbg !117
  %184 = zext <2 x i1> %126 to <2 x i8>, !dbg !118
  %185 = select <2 x i1> %133, <2 x i8> splat (i8 2), <2 x i8> %184, !dbg !119
  %186 = select <2 x i1> %140, <2 x i8> splat (i8 3), <2 x i8> %185, !dbg !120
  %187 = select <2 x i1> %147, <2 x i8> splat (i8 4), <2 x i8> %186, !dbg !121
  %188 = select <2 x i1> %154, <2 x i8> splat (i8 5), <2 x i8> %187, !dbg !122
  %189 = select <2 x i1> %161, <2 x i8> splat (i8 6), <2 x i8> %188, !dbg !123
  %190 = select <2 x i1> %168, <2 x i8> splat (i8 7), <2 x i8> %189, !dbg !124
  %191 = select <2 x i1> %175, <2 x i8> splat (i8 8), <2 x i8> %190, !dbg !125
  %192 = shl i32 %22, 4, !dbg !126
  %193 = add i32 %192, %.decomposed12, !dbg !127
  %194 = mul i32 %27, 9216, !dbg !128
  %195 = add i32 %193, %194, !dbg !129
  %196 = sext i32 %195 to i64, !dbg !130
  %197 = getelementptr float, ptr addrspace(1) %1, i64 %196, !dbg !130
  %198 = and i1 %17, %23, !dbg !50
  %199 = and i1 %71, %69, !dbg !50
  %200 = shl nuw nsw i32 %11, 7, !dbg !131
  %201 = or disjoint i32 %200, %10, !dbg !131
  %202 = and i32 %13, 254, !dbg !131
  %.idx = shl nuw nsw i32 %11, 4, !dbg !131
  %203 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !131
  %204 = getelementptr float, ptr addrspace(3) %203, i32 %201, !dbg !131
  %205 = extractelement <2 x i32> %.v10, i64 0, !dbg !131
  %206 = select i1 %181, i32 %118, i32 %205, !dbg !132
  %207 = insertelement <1 x i32> poison, i32 %206, i64 0, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %207, i1 true) #2, !dbg !131
  %208 = or disjoint i32 %201, 64, !dbg !131
  %209 = lshr i32 %208, 5, !dbg !131
  %210 = and i32 %209, 6, !dbg !131
  %211 = getelementptr float, ptr addrspace(3) @global_smem, i32 %210, !dbg !131
  %212 = getelementptr float, ptr addrspace(3) %211, i32 %208, !dbg !131
  %213 = extractelement <2 x i32> %.v10, i64 1, !dbg !131
  %214 = select i1 %183, i32 %119, i32 %213, !dbg !132
  %215 = insertelement <1 x i32> poison, i32 %214, i64 0, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %212, <1 x i32> %215, i1 true) #2, !dbg !131
  tail call void @llvm.nvvm.barrier0(), !dbg !131
  %216 = lshr i32 %13, 5, !dbg !131
  %217 = and i32 %216, 6, !dbg !131
  %218 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %217, !dbg !131
  %219 = getelementptr inbounds float, ptr addrspace(3) %218, i32 %202, !dbg !131
  %.extract = load i32, ptr addrspace(3) %219, align 8, !dbg !131
  %220 = getelementptr inbounds i8, ptr addrspace(3) %219, i32 4, !dbg !131
  %.extract4 = load i32, ptr addrspace(3) %220, align 4, !dbg !131
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract4, ptr addrspace(1) %197, i1 %198) #2, !dbg !131
  %221 = mul i32 %15, 320, !dbg !133
  %222 = add i32 %21, %221, !dbg !134
  %223 = sext i32 %222 to i64, !dbg !135
  %224 = getelementptr i8, ptr addrspace(1) %2, i64 %223, !dbg !135
  %225 = bitcast <2 x i8> %191 to i16, !dbg !136
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %225, ptr addrspace(1) %224, i1 %199) #2, !dbg !136
  ret void, !dbg !137
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6ijtva23cuteqkec5iksnu4hqrsf2ow6ntv6gac2t7rd5w6uwha.py", directory: "inductor_cache/6i")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_36, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_36, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_36", linkageName: "triton_poi_fused_max_pool2d_with_indices_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 21, scope: !7)
!21 = !DILocation(line: 28, column: 26, scope: !7)
!22 = !DILocation(line: 29, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 33, column: 19, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 45, column: 19, scope: !7)
!27 = !DILocation(line: 46, column: 40, scope: !7)
!28 = !DILocation(line: 46, column: 50, scope: !7)
!29 = !DILocation(line: 46, column: 36, scope: !7)
!30 = !DILocation(line: 46, column: 45, scope: !7)
!31 = !DILocation(line: 46, column: 31, scope: !7)
!32 = !DILocation(line: 52, column: 42, scope: !7)
!33 = !DILocation(line: 52, column: 51, scope: !7)
!34 = !DILocation(line: 52, column: 31, scope: !7)
!35 = !DILocation(line: 57, column: 20, scope: !7)
!36 = !DILocation(line: 58, column: 19, scope: !7)
!37 = !DILocation(line: 59, column: 42, scope: !7)
!38 = !DILocation(line: 59, column: 51, scope: !7)
!39 = !DILocation(line: 59, column: 31, scope: !7)
!40 = !DILocation(line: 66, column: 43, scope: !7)
!41 = !DILocation(line: 66, column: 52, scope: !7)
!42 = !DILocation(line: 66, column: 31, scope: !7)
!43 = !DILocation(line: 69, column: 43, scope: !7)
!44 = !DILocation(line: 69, column: 52, scope: !7)
!45 = !DILocation(line: 69, column: 31, scope: !7)
!46 = !DILocation(line: 72, column: 43, scope: !7)
!47 = !DILocation(line: 72, column: 52, scope: !7)
!48 = !DILocation(line: 72, column: 31, scope: !7)
!49 = !DILocation(line: 77, column: 20, scope: !7)
!50 = !DILocation(line: 112, column: 63, scope: !7)
!51 = !DILocation(line: 46, column: 63, scope: !7)
!52 = !DILocation(line: 46, column: 71, scope: !7)
!53 = !DILocation(line: 46, column: 55, scope: !7)
!54 = !DILocation(line: 52, column: 61, scope: !7)
!55 = !DILocation(line: 59, column: 69, scope: !7)
!56 = !DILocation(line: 59, column: 77, scope: !7)
!57 = !DILocation(line: 59, column: 61, scope: !7)
!58 = !DILocation(line: 66, column: 62, scope: !7)
!59 = !DILocation(line: 69, column: 62, scope: !7)
!60 = !DILocation(line: 72, column: 62, scope: !7)
!61 = !DILocation(line: 79, column: 43, scope: !7)
!62 = !DILocation(line: 79, column: 52, scope: !7)
!63 = !DILocation(line: 79, column: 31, scope: !7)
!64 = !DILocation(line: 79, column: 78, scope: !7)
!65 = !DILocation(line: 79, column: 62, scope: !7)
!66 = !DILocation(line: 82, column: 43, scope: !7)
!67 = !DILocation(line: 82, column: 52, scope: !7)
!68 = !DILocation(line: 82, column: 31, scope: !7)
!69 = !DILocation(line: 82, column: 62, scope: !7)
!70 = !DILocation(line: 84, column: 20, scope: !7)
!71 = !DILocation(line: 85, column: 43, scope: !7)
!72 = !DILocation(line: 85, column: 52, scope: !7)
!73 = !DILocation(line: 85, column: 31, scope: !7)
!74 = !DILocation(line: 85, column: 70, scope: !7)
!75 = !DILocation(line: 85, column: 78, scope: !7)
!76 = !DILocation(line: 85, column: 62, scope: !7)
!77 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !80)
!78 = distinct !DILexicalBlockFile(scope: !7, file: !79, discriminator: 0)
!79 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!80 = !DILocation(line: 53, column: 42, scope: !7)
!81 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !80)
!82 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !80)
!83 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !80)
!84 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !85)
!85 = !DILocation(line: 60, column: 42, scope: !7)
!86 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !85)
!87 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !85)
!88 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !85)
!89 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !90)
!90 = !DILocation(line: 67, column: 42, scope: !7)
!91 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !90)
!92 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !90)
!93 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !90)
!94 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !95)
!95 = !DILocation(line: 70, column: 42, scope: !7)
!96 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !95)
!97 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !95)
!98 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !95)
!99 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !100)
!100 = !DILocation(line: 73, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !100)
!103 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !100)
!104 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !105)
!105 = !DILocation(line: 80, column: 42, scope: !7)
!106 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !105)
!107 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !105)
!108 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !105)
!109 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !110)
!110 = !DILocation(line: 83, column: 42, scope: !7)
!111 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !110)
!112 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !110)
!113 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !110)
!114 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !115)
!115 = !DILocation(line: 86, column: 42, scope: !7)
!116 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !115)
!117 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !115)
!118 = !DILocation(line: 90, column: 35, scope: !7)
!119 = !DILocation(line: 93, column: 35, scope: !7)
!120 = !DILocation(line: 96, column: 35, scope: !7)
!121 = !DILocation(line: 99, column: 35, scope: !7)
!122 = !DILocation(line: 102, column: 35, scope: !7)
!123 = !DILocation(line: 105, column: 35, scope: !7)
!124 = !DILocation(line: 108, column: 35, scope: !7)
!125 = !DILocation(line: 111, column: 35, scope: !7)
!126 = !DILocation(line: 112, column: 33, scope: !7)
!127 = !DILocation(line: 112, column: 30, scope: !7)
!128 = !DILocation(line: 112, column: 43, scope: !7)
!129 = !DILocation(line: 112, column: 38, scope: !7)
!130 = !DILocation(line: 112, column: 25, scope: !7)
!131 = !DILocation(line: 112, column: 55, scope: !7)
!132 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !115)
!133 = !DILocation(line: 113, column: 34, scope: !7)
!134 = !DILocation(line: 113, column: 30, scope: !7)
!135 = !DILocation(line: 113, column: 25, scope: !7)
!136 = !DILocation(line: 113, column: 46, scope: !7)
!137 = !DILocation(line: 113, column: 4, scope: !7)
