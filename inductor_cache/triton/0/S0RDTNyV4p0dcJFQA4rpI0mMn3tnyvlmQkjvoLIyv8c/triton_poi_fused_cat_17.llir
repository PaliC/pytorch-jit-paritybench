; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_17(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = icmp slt i32 %9, 52528, !dbg !14
  %14 = insertelement <4 x i32> poison, i32 %9, i64 0, !dbg !15
  %15 = insertelement <4 x i32> %14, i32 %10, i64 1, !dbg !15
  %16 = insertelement <4 x i32> %15, i32 %11, i64 2, !dbg !15
  %17 = insertelement <4 x i32> %16, i32 %12, i64 3, !dbg !15
  %18 = srem <4 x i32> %17, splat (i32 67), !dbg !15
  %19 = sdiv i32 %9, 13132, !dbg !16
  %20 = sdiv i32 %9, 938, !dbg !17
  %21 = sdiv i32 %11, 938, !dbg !17
  %22 = srem i32 %20, 14, !dbg !18
  %23 = srem i32 %21, 14, !dbg !18
  %24 = sdiv i32 %9, 67, !dbg !19
  %25 = sdiv i32 %10, 67, !dbg !19
  %26 = sdiv i32 %11, 67, !dbg !19
  %27 = sdiv i32 %12, 67, !dbg !19
  %28 = srem i32 %24, 14, !dbg !20
  %29 = srem i32 %25, 14, !dbg !20
  %30 = srem i32 %26, 14, !dbg !20
  %31 = srem i32 %27, 14, !dbg !20
  %32 = extractelement <4 x i32> %18, i64 0, !dbg !21
  %33 = icmp slt i32 %32, 64, !dbg !21
  %34 = extractelement <4 x i32> %18, i64 1, !dbg !21
  %35 = icmp slt i32 %34, 64, !dbg !21
  %36 = extractelement <4 x i32> %18, i64 2, !dbg !21
  %37 = icmp slt i32 %36, 64, !dbg !21
  %38 = extractelement <4 x i32> %18, i64 3, !dbg !21
  %39 = icmp slt i32 %38, 64, !dbg !21
  %40 = shl nsw i32 %19, 6, !dbg !22
  %41 = add nsw i32 %40, %32, !dbg !23
  %42 = add nsw i32 %40, %34, !dbg !23
  %43 = add nsw i32 %40, %36, !dbg !23
  %44 = add nsw i32 %40, %38, !dbg !23
  %45 = sext i32 %41 to i64, !dbg !24
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !24
  %47 = sext i32 %42 to i64, !dbg !24
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !24
  %49 = sext i32 %43 to i64, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !24
  %51 = sext i32 %44 to i64, !dbg !24
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !24
  %53 = and i1 %13, %33, !dbg !25
  %54 = and i1 %35, %13, !dbg !25
  %55 = and i1 %37, %13, !dbg !25
  %56 = and i1 %39, %13, !dbg !25
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %53, i32 0, i1 %53) #3, !dbg !26
  %58 = bitcast i32 %57 to float, !dbg !26
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %54, i32 0, i1 %54) #3, !dbg !26
  %60 = bitcast i32 %59 to float, !dbg !26
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %55, i32 0, i1 %55) #3, !dbg !26
  %62 = bitcast i32 %61 to float, !dbg !26
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %56, i32 0, i1 %56) #3, !dbg !26
  %64 = bitcast i32 %63 to float, !dbg !26
  %65 = select i1 %33, float 1.000000e+00, float 0.000000e+00, !dbg !27
  %66 = select i1 %35, float 1.000000e+00, float 0.000000e+00, !dbg !27
  %67 = select i1 %37, float 1.000000e+00, float 0.000000e+00, !dbg !27
  %68 = select i1 %39, float 1.000000e+00, float 0.000000e+00, !dbg !27
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float %65) #3, !dbg !28
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float %66) #3, !dbg !28
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float %67) #3, !dbg !28
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float %68) #3, !dbg !28
  %73 = sitofp i32 %22 to float, !dbg !29
  %74 = sitofp i32 %23 to float, !dbg !29
  %75 = fmul float %73, 0x3FB3B13B20000000, !dbg !30
  %76 = fmul float %74, 0x3FB3B13B20000000, !dbg !30
  %77 = fmul float %75, 2.000000e+00, !dbg !31
  %78 = fmul float %76, 2.000000e+00, !dbg !31
  %79 = fadd float %77, -1.000000e+00, !dbg !32
  %80 = fadd float %78, -1.000000e+00, !dbg !32
  %81 = sitofp i32 %28 to float, !dbg !33
  %82 = sitofp i32 %29 to float, !dbg !33
  %83 = sitofp i32 %30 to float, !dbg !33
  %84 = sitofp i32 %31 to float, !dbg !33
  %85 = fmul float %81, 0x3FB3B13B20000000, !dbg !34
  %86 = fmul float %82, 0x3FB3B13B20000000, !dbg !34
  %87 = fmul float %83, 0x3FB3B13B20000000, !dbg !34
  %88 = fmul float %84, 0x3FB3B13B20000000, !dbg !34
  %89 = fmul float %85, 2.000000e+00, !dbg !35
  %90 = fmul float %86, 2.000000e+00, !dbg !35
  %91 = fmul float %87, 2.000000e+00, !dbg !35
  %92 = fmul float %88, 2.000000e+00, !dbg !35
  %93 = fadd float %89, -1.000000e+00, !dbg !36
  %94 = fadd float %90, -1.000000e+00, !dbg !36
  %95 = fadd float %91, -1.000000e+00, !dbg !36
  %96 = fadd float %92, -1.000000e+00, !dbg !36
  %97 = fadd float %79, -5.000000e-01, !dbg !37
  %98 = fadd float %80, -5.000000e-01, !dbg !37
  %99 = fmul float %97, %97, !dbg !38
  %100 = fmul float %98, %98, !dbg !38
  %101 = fadd float %93, -5.000000e-01, !dbg !39
  %102 = fadd float %94, -5.000000e-01, !dbg !39
  %103 = fadd float %95, -5.000000e-01, !dbg !39
  %104 = fadd float %96, -5.000000e-01, !dbg !39
  %105 = fmul float %101, %101, !dbg !40
  %106 = fmul float %102, %102, !dbg !40
  %107 = fmul float %103, %103, !dbg !40
  %108 = fmul float %104, %104, !dbg !40
  %109 = fadd float %99, %105, !dbg !41
  %110 = fadd float %106, %99, !dbg !41
  %111 = fadd float %100, %107, !dbg !41
  %112 = fadd float %100, %108, !dbg !41
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i = icmp eq i32 %113, 0, !dbg !42
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i = icmp eq i32 %114, 0, !dbg !42
  br i1 %.not.i, label %120, label %115, !dbg !42

115:                                              ; preds = %3
  br i1 %.not1.i, label %118, label %116, !dbg !42

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %109) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %109) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

120:                                              ; preds = %3
  br i1 %.not1.i, label %123, label %121, !dbg !42

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %109) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %109) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %116, %118, %121, %123
  %.0.i = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !42
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i1 = icmp eq i32 %125, 0, !dbg !42
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i4 = icmp eq i32 %126, 0, !dbg !42
  br i1 %.not.i1, label %132, label %127, !dbg !42

127:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %130, label %128, !dbg !42

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %110) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %110) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

132:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %135, label %133, !dbg !42

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.f(float %110) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.f(float %110) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

__nv_sqrtf.exit5:                                 ; preds = %128, %130, %133, %135
  %.0.i3 = phi float [ %129, %128 ], [ %131, %130 ], [ %134, %133 ], [ %136, %135 ], !dbg !42
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i6 = icmp eq i32 %137, 0, !dbg !42
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i9 = icmp eq i32 %138, 0, !dbg !42
  br i1 %.not.i6, label %144, label %139, !dbg !42

139:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %142, label %140, !dbg !42

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %111) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %111) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

144:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %147, label %145, !dbg !42

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.f(float %111) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.f(float %111) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

__nv_sqrtf.exit10:                                ; preds = %140, %142, %145, %147
  %.0.i8 = phi float [ %141, %140 ], [ %143, %142 ], [ %146, %145 ], [ %148, %147 ], !dbg !42
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i11 = icmp eq i32 %149, 0, !dbg !42
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i14 = icmp eq i32 %150, 0, !dbg !42
  br i1 %.not.i11, label %156, label %151, !dbg !42

151:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %154, label %152, !dbg !42

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %112) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %112) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

156:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %159, label %157, !dbg !42

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.f(float %112) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.f(float %112) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

__nv_sqrtf.exit15:                                ; preds = %152, %154, %157, %159
  %.0.i13 = phi float [ %153, %152 ], [ %155, %154 ], [ %158, %157 ], [ %160, %159 ], !dbg !42
  %161 = shufflevector <4 x i32> %18, <4 x i32> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>, !dbg !15
  %162 = icmp eq <8 x i32> %161, <i32 65, i32 64, i32 65, i32 64, i32 65, i32 64, i32 65, i32 64>, !dbg !43
  %163 = extractelement <8 x i1> %162, i64 6, !dbg !44
  %164 = select i1 %163, float %96, float 0.000000e+00, !dbg !44
  %165 = extractelement <8 x i1> %162, i64 7, !dbg !45
  %166 = select i1 %165, float %80, float %164, !dbg !45
  %167 = select i1 %39, float %72, float %166, !dbg !46
  %168 = extractelement <8 x i1> %162, i64 4, !dbg !44
  %169 = select i1 %168, float %95, float 0.000000e+00, !dbg !44
  %170 = extractelement <8 x i1> %162, i64 5, !dbg !45
  %171 = select i1 %170, float %80, float %169, !dbg !45
  %172 = select i1 %37, float %71, float %171, !dbg !46
  %173 = extractelement <8 x i1> %162, i64 2, !dbg !44
  %174 = select i1 %173, float %94, float 0.000000e+00, !dbg !44
  %175 = extractelement <8 x i1> %162, i64 3, !dbg !45
  %176 = select i1 %175, float %79, float %174, !dbg !45
  %177 = select i1 %35, float %70, float %176, !dbg !46
  %178 = extractelement <8 x i1> %162, i64 0, !dbg !44
  %179 = select i1 %178, float %93, float 0.000000e+00, !dbg !44
  %180 = extractelement <8 x i1> %162, i64 1, !dbg !45
  %181 = select i1 %180, float %79, float %179, !dbg !45
  %182 = select i1 %33, float %69, float %181, !dbg !46
  %183 = icmp slt <4 x i32> %18, splat (i32 66), !dbg !47
  %184 = extractelement <4 x i1> %183, i64 0, !dbg !48
  %185 = select i1 %184, float %182, float %.0.i, !dbg !48
  %186 = extractelement <4 x i1> %183, i64 1, !dbg !48
  %187 = select i1 %186, float %177, float %.0.i3, !dbg !48
  %188 = extractelement <4 x i1> %183, i64 2, !dbg !48
  %189 = select i1 %188, float %172, float %.0.i8, !dbg !48
  %190 = extractelement <4 x i1> %183, i64 3, !dbg !48
  %191 = select i1 %190, float %167, float %.0.i13, !dbg !48
  %192 = sext i32 %9 to i64, !dbg !49
  %193 = getelementptr float, ptr addrspace(1) %1, i64 %192, !dbg !49
  %194 = bitcast float %185 to i32, !dbg !50
  %195 = bitcast float %187 to i32, !dbg !50
  %196 = bitcast float %189 to i32, !dbg !50
  %197 = bitcast float %191 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %194, i32 %195, i32 %196, i32 %197, ptr addrspace(1) %193, i1 %13) #3, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7yxjjf2wahezbver5ysvrgjv5tuafxxahticz6ja3wriuch5xcj.py", directory: "inductor_cache/7y")
!4 = !{ptr @triton_poi_fused_cat_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_17", linkageName: "triton_poi_fused_cat_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 28, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 27, column: 27, scope: !7)
!21 = !DILocation(line: 38, column: 18, scope: !7)
!22 = !DILocation(line: 45, column: 34, scope: !7)
!23 = !DILocation(line: 45, column: 40, scope: !7)
!24 = !DILocation(line: 45, column: 31, scope: !7)
!25 = !DILocation(line: 45, column: 54, scope: !7)
!26 = !DILocation(line: 45, column: 46, scope: !7)
!27 = !DILocation(line: 48, column: 35, scope: !7)
!28 = !DILocation(line: 49, column: 20, scope: !7)
!29 = !DILocation(line: 58, column: 21, scope: !7)
!30 = !DILocation(line: 60, column: 20, scope: !7)
!31 = !DILocation(line: 62, column: 20, scope: !7)
!32 = !DILocation(line: 64, column: 20, scope: !7)
!33 = !DILocation(line: 72, column: 21, scope: !7)
!34 = !DILocation(line: 74, column: 20, scope: !7)
!35 = !DILocation(line: 76, column: 20, scope: !7)
!36 = !DILocation(line: 78, column: 20, scope: !7)
!37 = !DILocation(line: 97, column: 20, scope: !7)
!38 = !DILocation(line: 98, column: 20, scope: !7)
!39 = !DILocation(line: 104, column: 20, scope: !7)
!40 = !DILocation(line: 105, column: 20, scope: !7)
!41 = !DILocation(line: 106, column: 20, scope: !7)
!42 = !DILocation(line: 107, column: 27, scope: !7)
!43 = !DILocation(line: 70, column: 20, scope: !7)
!44 = !DILocation(line: 80, column: 35, scope: !7)
!45 = !DILocation(line: 81, column: 35, scope: !7)
!46 = !DILocation(line: 82, column: 34, scope: !7)
!47 = !DILocation(line: 33, column: 18, scope: !7)
!48 = !DILocation(line: 0, scope: !7)
!49 = !DILocation(line: 111, column: 25, scope: !7)
!50 = !DILocation(line: 111, column: 37, scope: !7)
!51 = !DILocation(line: 111, column: 4, scope: !7)
