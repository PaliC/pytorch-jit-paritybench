; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_add_convolution_native_group_norm_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = icmp slt i32 %9, 64, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 2044, !dbg !12
  %14 = and i32 %11, 511, !dbg !12
  %15 = or disjoint i32 %14, 512, !dbg !12
  %16 = or disjoint i32 %14, 1024, !dbg !12
  %17 = or disjoint i32 %14, 1536, !dbg !12
  %18 = srem i32 %9, 16, !dbg !13
  %19 = shl i32 %9, 13, !dbg !14
  %20 = shl nsw i32 %18, 4, !dbg !15
  %21 = or disjoint i32 %19, %13
  %22 = shl nuw nsw i32 %13, 1
  %23 = zext nneg i32 %22 to i64
  %24 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %23
  %25 = or disjoint i32 %22, 2
  %26 = zext nneg i32 %25 to i64
  %27 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %26
  %28 = or disjoint i32 %22, 4
  %29 = zext nneg i32 %28 to i64
  %30 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %29
  %31 = or disjoint i32 %22, 6
  %32 = zext nneg i32 %31 to i64
  %33 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %32
  %34 = shl nuw nsw i32 %14, 1
  %35 = zext nneg i32 %34 to i64
  %36 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %35
  %37 = shl nuw nsw i32 %15, 1
  %38 = zext nneg i32 %37 to i64
  %39 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %38
  %40 = shl nuw nsw i32 %16, 1
  %41 = zext nneg i32 %40 to i64
  %42 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %41
  %43 = shl nuw nsw i32 %17, 1
  %44 = zext nneg i32 %43 to i64
  %45 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %44
  %46 = zext nneg i32 %14 to i64
  %47 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %46
  %48 = zext nneg i32 %15 to i64
  %49 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %48
  %50 = zext nneg i32 %16 to i64
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %50
  %52 = zext nneg i32 %17 to i64
  %53 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %52
  %54 = zext nneg i32 %13 to i64
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %54
  %56 = sext i32 %21 to i64, !dbg !16
  %57 = sext i32 %20 to i64, !dbg !16
  %58 = getelementptr inbounds i8, ptr addrspace(3) %55, i64 4
  %59 = getelementptr inbounds i8, ptr addrspace(3) %55, i64 8
  %60 = getelementptr inbounds i8, ptr addrspace(3) %55, i64 12
  br label %61, !dbg !16

61:                                               ; preds = %8, %._crit_edge
  %indvars.iv = phi i64 [ 0, %8 ], [ %indvars.iv.next, %._crit_edge ]
  %62 = phi float [ 0.000000e+00, %8 ], [ %178, %._crit_edge ]
  %63 = phi float [ 0.000000e+00, %8 ], [ %179, %._crit_edge ]
  %64 = phi float [ 0.000000e+00, %8 ], [ %180, %._crit_edge ]
  %65 = phi float [ 0.000000e+00, %8 ], [ %181, %._crit_edge ]
  %66 = phi float [ 0.000000e+00, %8 ], [ %174, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %8 ], [ %175, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %8 ], [ %176, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %8 ], [ %177, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %8 ], [ %170, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %8 ], [ %171, %._crit_edge ]
  %72 = phi float [ 0.000000e+00, %8 ], [ %172, %._crit_edge ]
  %73 = phi float [ 0.000000e+00, %8 ], [ %173, %._crit_edge ]
  %74 = lshr exact i64 %indvars.iv, 9, !dbg !17
  %75 = add nuw nsw i64 %indvars.iv, %56, !dbg !18
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !19
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %76, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #3, !dbg !20
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !20
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !20
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !20
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %82 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %24, <1 x i32> %82, i1 true) #3, !dbg !20
  %83 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %27, <1 x i32> %83, i1 true) #3, !dbg !20
  %84 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %30, <1 x i32> %84, i1 true) #3, !dbg !20
  %85 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %33, <1 x i32> %85, i1 true) #3, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %86 = load float, ptr addrspace(3) %36, align 8, !dbg !20
  %87 = load float, ptr addrspace(3) %39, align 8, !dbg !20
  %88 = load float, ptr addrspace(3) %42, align 8, !dbg !20
  %89 = load float, ptr addrspace(3) %45, align 8, !dbg !20
  %90 = add nuw nsw i64 %74, %57, !dbg !21
  %91 = or disjoint i64 %90, 1, !dbg !21
  %92 = or disjoint i64 %90, 2, !dbg !21
  %93 = or disjoint i64 %90, 3, !dbg !21
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !22
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !22
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !22
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !22
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %10, i32 0, i1 %10) #3, !dbg !23
  %99 = bitcast i32 %98 to float, !dbg !23
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %10, i32 0, i1 %10) #3, !dbg !23
  %101 = bitcast i32 %100 to float, !dbg !23
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %10, i32 0, i1 %10) #3, !dbg !23
  %103 = bitcast i32 %102 to float, !dbg !23
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %10, i32 0, i1 %10) #3, !dbg !23
  %105 = bitcast i32 %104 to float, !dbg !23
  %106 = getelementptr float, ptr addrspace(1) %2, i64 %75, !dbg !24
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %106, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #3, !dbg !25
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !25
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !25
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !25
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !25
  %112 = bitcast i32 %108 to float, !dbg !25
  %113 = bitcast i32 %109 to float, !dbg !25
  %114 = bitcast i32 %110 to float, !dbg !25
  %115 = bitcast i32 %111 to float, !dbg !25
  %116 = fadd float %86, %99, !dbg !26
  %117 = fadd float %87, %101, !dbg !26
  %118 = fadd float %88, %103, !dbg !26
  %119 = fadd float %89, %105, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %120 = bitcast float %116 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %120, i1 true) #3, !dbg !26
  %121 = bitcast float %117 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %121, i1 true) #3, !dbg !26
  %122 = bitcast float %118 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %122, i1 true) #3, !dbg !26
  %123 = bitcast float %119 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %123, i1 true) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %124 = load float, ptr addrspace(3) %55, align 16, !dbg !26
  %125 = load float, ptr addrspace(3) %58, align 4, !dbg !26
  %126 = load float, ptr addrspace(3) %59, align 8, !dbg !26
  %127 = load float, ptr addrspace(3) %60, align 4, !dbg !26
  %128 = fadd float %124, %112, !dbg !27
  %129 = fadd float %125, %113, !dbg !27
  %130 = fadd float %126, %114, !dbg !27
  %131 = fadd float %127, %115, !dbg !27
  %132 = icmp eq i64 %indvars.iv, 0, !dbg !28
  br i1 %132, label %._crit_edge, label %133, !dbg !29

133:                                              ; preds = %61
  %134 = fsub float %128, %70, !dbg !33
  %135 = fsub float %129, %71, !dbg !33
  %136 = fsub float %130, %72, !dbg !33
  %137 = fsub float %131, %73, !dbg !33
  %138 = fadd float %62, 1.000000e+00, !dbg !34
  %139 = fadd float %63, 1.000000e+00, !dbg !34
  %140 = fadd float %64, 1.000000e+00, !dbg !34
  %141 = fadd float %65, 1.000000e+00, !dbg !34
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %134, float %138) #3, !dbg !35
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float %139) #3, !dbg !35
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float %140) #3, !dbg !35
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %137, float %141) #3, !dbg !35
  %146 = fadd float %70, %142, !dbg !36
  %147 = fadd float %71, %143, !dbg !36
  %148 = fadd float %72, %144, !dbg !36
  %149 = fadd float %73, %145, !dbg !36
  %150 = fsub float %128, %146, !dbg !37
  %151 = fsub float %129, %147, !dbg !37
  %152 = fsub float %130, %148, !dbg !37
  %153 = fsub float %131, %149, !dbg !37
  %154 = fmul float %134, %150, !dbg !38
  %155 = fmul float %135, %151, !dbg !38
  %156 = fmul float %136, %152, !dbg !38
  %157 = fmul float %137, %153, !dbg !38
  %158 = fadd float %66, %154, !dbg !39
  %159 = fadd float %67, %155, !dbg !39
  %160 = fadd float %68, %156, !dbg !39
  %161 = fadd float %69, %157, !dbg !39
  br label %._crit_edge, !dbg !29

._crit_edge:                                      ; preds = %61, %133
  %162 = phi float [ %158, %133 ], [ 0.000000e+00, %61 ], !dbg !32
  %163 = phi float [ %159, %133 ], [ 0.000000e+00, %61 ], !dbg !32
  %164 = phi float [ %160, %133 ], [ 0.000000e+00, %61 ], !dbg !32
  %165 = phi float [ %161, %133 ], [ 0.000000e+00, %61 ], !dbg !32
  %.pn10 = phi float [ %146, %133 ], [ %128, %61 ]
  %.pn8 = phi float [ %147, %133 ], [ %129, %61 ]
  %.pn6 = phi float [ %148, %133 ], [ %130, %61 ]
  %.pn4 = phi float [ %149, %133 ], [ %131, %61 ]
  %166 = phi float [ %138, %133 ], [ 1.000000e+00, %61 ], !dbg !32
  %167 = phi float [ %139, %133 ], [ 1.000000e+00, %61 ], !dbg !32
  %168 = phi float [ %140, %133 ], [ 1.000000e+00, %61 ], !dbg !32
  %169 = phi float [ %141, %133 ], [ 1.000000e+00, %61 ], !dbg !32
  %170 = select i1 %10, float %.pn10, float %70, !dbg !40
  %171 = select i1 %10, float %.pn8, float %71, !dbg !40
  %172 = select i1 %10, float %.pn6, float %72, !dbg !40
  %173 = select i1 %10, float %.pn4, float %73, !dbg !40
  %174 = select i1 %10, float %162, float %66, !dbg !41
  %175 = select i1 %10, float %163, float %67, !dbg !41
  %176 = select i1 %10, float %164, float %68, !dbg !41
  %177 = select i1 %10, float %165, float %69, !dbg !41
  %178 = select i1 %10, float %166, float %62, !dbg !42
  %179 = select i1 %10, float %167, float %63, !dbg !42
  %180 = select i1 %10, float %168, float %64, !dbg !42
  %181 = select i1 %10, float %169, float %65, !dbg !42
  %182 = bitcast float %128 to i32, !dbg !43
  %183 = bitcast float %129 to i32, !dbg !43
  %184 = bitcast float %130 to i32, !dbg !43
  %185 = bitcast float %131 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %182, i32 %183, i32 %184, i32 %185, ptr addrspace(1) %76, i1 %10) #3, !dbg !43
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2048, !dbg !16
  %186 = icmp samesign ult i64 %indvars.iv, 6144, !dbg !16
  br i1 %186, label %61, label %187, !dbg !16

187:                                              ; preds = %._crit_edge
  %188 = lshr i32 %11, 5, !dbg !12
  %189 = and i32 %11, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %190 = fsub float %171, %170, !dbg !46
  %191 = fadd float %178, %179, !dbg !48
  %192 = fcmp oeq float %191, 0.000000e+00, !dbg !49
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %179, float %191) #3, !dbg !50
  %194 = select i1 %192, float 0.000000e+00, float %193, !dbg !51
  %195 = fmul float %190, %194, !dbg !52
  %196 = fadd float %170, %195, !dbg !53
  %197 = fadd float %174, %175, !dbg !54
  %198 = fmul float %190, %190, !dbg !55
  %199 = fmul float %198, %178, !dbg !56
  %200 = fmul float %199, %194, !dbg !57
  %201 = fadd float %197, %200, !dbg !58
  %202 = fsub float %172, %196, !dbg !46
  %203 = fadd float %180, %191, !dbg !48
  %204 = fcmp oeq float %203, 0.000000e+00, !dbg !49
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %180, float %203) #3, !dbg !50
  %206 = select i1 %204, float 0.000000e+00, float %205, !dbg !51
  %207 = fmul float %206, %202, !dbg !52
  %208 = fadd float %196, %207, !dbg !53
  %209 = fadd float %176, %201, !dbg !54
  %210 = fmul float %202, %202, !dbg !55
  %211 = fmul float %191, %210, !dbg !56
  %212 = fmul float %206, %211, !dbg !57
  %213 = fadd float %209, %212, !dbg !58
  %214 = fsub float %173, %208, !dbg !46
  %215 = fadd float %181, %203, !dbg !48
  %216 = fcmp oeq float %215, 0.000000e+00, !dbg !49
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %181, float %215) #3, !dbg !50
  %218 = select i1 %216, float 0.000000e+00, float %217, !dbg !51
  %219 = fmul float %218, %214, !dbg !52
  %220 = fadd float %208, %219, !dbg !53
  %221 = fadd float %177, %213, !dbg !54
  %222 = fmul float %214, %214, !dbg !55
  %223 = fmul float %203, %222, !dbg !56
  %224 = fmul float %218, %223, !dbg !57
  %225 = fadd float %221, %224, !dbg !58
  %226 = bitcast float %220 to i32, !dbg !44
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 16, i32 31), !dbg !44
  %228 = bitcast i32 %227 to float, !dbg !44
  %229 = bitcast float %225 to i32, !dbg !44
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %229, i32 16, i32 31), !dbg !44
  %231 = bitcast i32 %230 to float, !dbg !44
  %232 = bitcast float %215 to i32, !dbg !44
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 16, i32 31), !dbg !44
  %234 = bitcast i32 %233 to float, !dbg !44
  %235 = fsub float %228, %220, !dbg !46
  %236 = fadd float %215, %234, !dbg !48
  %237 = fcmp oeq float %236, 0.000000e+00, !dbg !49
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %234, float %236) #3, !dbg !50
  %239 = select i1 %237, float 0.000000e+00, float %238, !dbg !51
  %240 = fmul float %239, %235, !dbg !52
  %241 = fadd float %220, %240, !dbg !53
  %242 = fadd float %225, %231, !dbg !54
  %243 = fmul float %235, %235, !dbg !55
  %244 = fmul float %215, %243, !dbg !56
  %245 = fmul float %239, %244, !dbg !57
  %246 = fadd float %242, %245, !dbg !58
  %247 = bitcast float %241 to i32, !dbg !44
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 8, i32 31), !dbg !44
  %249 = bitcast i32 %248 to float, !dbg !44
  %250 = bitcast float %246 to i32, !dbg !44
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 8, i32 31), !dbg !44
  %252 = bitcast i32 %251 to float, !dbg !44
  %253 = bitcast float %236 to i32, !dbg !44
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 8, i32 31), !dbg !44
  %255 = bitcast i32 %254 to float, !dbg !44
  %256 = fsub float %249, %241, !dbg !46
  %257 = fadd float %236, %255, !dbg !48
  %258 = fcmp oeq float %257, 0.000000e+00, !dbg !49
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %255, float %257) #3, !dbg !50
  %260 = select i1 %258, float 0.000000e+00, float %259, !dbg !51
  %261 = fmul float %256, %260, !dbg !52
  %262 = fadd float %241, %261, !dbg !53
  %263 = fadd float %246, %252, !dbg !54
  %264 = fmul float %256, %256, !dbg !55
  %265 = fmul float %236, %264, !dbg !56
  %266 = fmul float %260, %265, !dbg !57
  %267 = fadd float %263, %266, !dbg !58
  %268 = bitcast float %262 to i32, !dbg !44
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %268, i32 4, i32 31), !dbg !44
  %270 = bitcast i32 %269 to float, !dbg !44
  %271 = bitcast float %267 to i32, !dbg !44
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 4, i32 31), !dbg !44
  %273 = bitcast i32 %272 to float, !dbg !44
  %274 = bitcast float %257 to i32, !dbg !44
  %275 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %274, i32 4, i32 31), !dbg !44
  %276 = bitcast i32 %275 to float, !dbg !44
  %277 = fsub float %270, %262, !dbg !46
  %278 = fadd float %257, %276, !dbg !48
  %279 = fcmp oeq float %278, 0.000000e+00, !dbg !49
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %276, float %278) #3, !dbg !50
  %281 = select i1 %279, float 0.000000e+00, float %280, !dbg !51
  %282 = fmul float %277, %281, !dbg !52
  %283 = fadd float %262, %282, !dbg !53
  %284 = fadd float %267, %273, !dbg !54
  %285 = fmul float %277, %277, !dbg !55
  %286 = fmul float %257, %285, !dbg !56
  %287 = fmul float %281, %286, !dbg !57
  %288 = fadd float %284, %287, !dbg !58
  %289 = bitcast float %283 to i32, !dbg !44
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %289, i32 2, i32 31), !dbg !44
  %291 = bitcast i32 %290 to float, !dbg !44
  %292 = bitcast float %288 to i32, !dbg !44
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 2, i32 31), !dbg !44
  %294 = bitcast i32 %293 to float, !dbg !44
  %295 = bitcast float %278 to i32, !dbg !44
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 2, i32 31), !dbg !44
  %297 = bitcast i32 %296 to float, !dbg !44
  %298 = fsub float %291, %283, !dbg !46
  %299 = fadd float %278, %297, !dbg !48
  %300 = fcmp oeq float %299, 0.000000e+00, !dbg !49
  %301 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %297, float %299) #3, !dbg !50
  %302 = select i1 %300, float 0.000000e+00, float %301, !dbg !51
  %303 = fmul float %298, %302, !dbg !52
  %304 = fadd float %283, %303, !dbg !53
  %305 = fadd float %288, %294, !dbg !54
  %306 = fmul float %298, %298, !dbg !55
  %307 = fmul float %278, %306, !dbg !56
  %308 = fmul float %302, %307, !dbg !57
  %309 = fadd float %305, %308, !dbg !58
  %310 = bitcast float %304 to i32, !dbg !44
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 1, i32 31), !dbg !44
  %312 = bitcast i32 %311 to float, !dbg !44
  %313 = bitcast float %309 to i32, !dbg !44
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 1, i32 31), !dbg !44
  %315 = bitcast i32 %314 to float, !dbg !44
  %316 = bitcast float %299 to i32, !dbg !44
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 1, i32 31), !dbg !44
  %318 = bitcast i32 %317 to float, !dbg !44
  %319 = fsub float %312, %304, !dbg !46
  %320 = fadd float %299, %318, !dbg !48
  %321 = fcmp oeq float %320, 0.000000e+00, !dbg !49
  %322 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %318, float %320) #3, !dbg !50
  %323 = select i1 %321, float 0.000000e+00, float %322, !dbg !51
  %324 = fmul float %319, %323, !dbg !52
  %325 = fadd float %304, %324, !dbg !53
  %326 = fadd float %309, %315, !dbg !54
  %327 = fmul float %319, %319, !dbg !55
  %328 = fmul float %299, %327, !dbg !56
  %329 = fmul float %323, %328, !dbg !57
  %330 = fadd float %326, %329, !dbg !58
  %331 = icmp eq i32 %189, 0, !dbg !44
  %332 = and i32 %188, 15, !dbg !44
  %333 = zext nneg i32 %332 to i64, !dbg !44
  %334 = getelementptr float, ptr addrspace(3) @global_smem, i64 %333, !dbg !44
  %335 = bitcast float %325 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, <1 x i32> %335, i1 %331) #3, !dbg !44
  %336 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %333, !dbg !44
  %337 = bitcast float %330 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %336, <1 x i32> %337, i1 %331) #3, !dbg !44
  %338 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %333, !dbg !44
  %339 = bitcast float %320 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %338, <1 x i32> %339, i1 %331) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %340 = icmp slt i32 %11, 16, !dbg !44
  %341 = sext i32 %11 to i64, !dbg !44
  %342 = getelementptr float, ptr addrspace(3) @global_smem, i64 %341, !dbg !44
  %343 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %342, i1 %340) #3, !dbg !44
  %344 = bitcast i32 %343 to float, !dbg !44
  %345 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %341, !dbg !44
  %346 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %345, i1 %340) #3, !dbg !44
  %347 = bitcast i32 %346 to float, !dbg !44
  %348 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %341, !dbg !44
  %349 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %348, i1 %340) #3, !dbg !44
  %350 = bitcast i32 %349 to float, !dbg !44
  %351 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %343, i32 8, i32 31), !dbg !44
  %352 = bitcast i32 %351 to float, !dbg !44
  %353 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %346, i32 8, i32 31), !dbg !44
  %354 = bitcast i32 %353 to float, !dbg !44
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %349, i32 8, i32 31), !dbg !44
  %356 = bitcast i32 %355 to float, !dbg !44
  %357 = fsub float %352, %344, !dbg !46
  %358 = fadd float %350, %356, !dbg !48
  %359 = fcmp oeq float %358, 0.000000e+00, !dbg !49
  %360 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %356, float %358) #3, !dbg !50
  %361 = select i1 %359, float 0.000000e+00, float %360, !dbg !51
  %362 = fmul float %357, %361, !dbg !52
  %363 = fadd float %362, %344, !dbg !53
  %364 = fadd float %347, %354, !dbg !54
  %365 = fmul float %357, %357, !dbg !55
  %366 = fmul float %365, %350, !dbg !56
  %367 = fmul float %366, %361, !dbg !57
  %368 = fadd float %364, %367, !dbg !58
  %369 = bitcast float %363 to i32, !dbg !44
  %370 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %369, i32 4, i32 31), !dbg !44
  %371 = bitcast i32 %370 to float, !dbg !44
  %372 = bitcast float %368 to i32, !dbg !44
  %373 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %372, i32 4, i32 31), !dbg !44
  %374 = bitcast i32 %373 to float, !dbg !44
  %375 = bitcast float %358 to i32, !dbg !44
  %376 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %375, i32 4, i32 31), !dbg !44
  %377 = bitcast i32 %376 to float, !dbg !44
  %378 = fsub float %371, %363, !dbg !46
  %379 = fadd float %358, %377, !dbg !48
  %380 = fcmp oeq float %379, 0.000000e+00, !dbg !49
  %381 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %377, float %379) #3, !dbg !50
  %382 = select i1 %380, float 0.000000e+00, float %381, !dbg !51
  %383 = fmul float %378, %382, !dbg !52
  %384 = fadd float %363, %383, !dbg !53
  %385 = fadd float %368, %374, !dbg !54
  %386 = fmul float %378, %378, !dbg !55
  %387 = fmul float %358, %386, !dbg !56
  %388 = fmul float %382, %387, !dbg !57
  %389 = fadd float %385, %388, !dbg !58
  %390 = bitcast float %384 to i32, !dbg !44
  %391 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %390, i32 2, i32 31), !dbg !44
  %392 = bitcast i32 %391 to float, !dbg !44
  %393 = bitcast float %389 to i32, !dbg !44
  %394 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %393, i32 2, i32 31), !dbg !44
  %395 = bitcast i32 %394 to float, !dbg !44
  %396 = bitcast float %379 to i32, !dbg !44
  %397 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %396, i32 2, i32 31), !dbg !44
  %398 = bitcast i32 %397 to float, !dbg !44
  %399 = fsub float %392, %384, !dbg !46
  %400 = fadd float %379, %398, !dbg !48
  %401 = fcmp oeq float %400, 0.000000e+00, !dbg !49
  %402 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %398, float %400) #3, !dbg !50
  %403 = select i1 %401, float 0.000000e+00, float %402, !dbg !51
  %404 = fmul float %399, %403, !dbg !52
  %405 = fadd float %384, %404, !dbg !53
  %406 = fadd float %389, %395, !dbg !54
  %407 = fmul float %399, %399, !dbg !55
  %408 = fmul float %379, %407, !dbg !56
  %409 = fmul float %403, %408, !dbg !57
  %410 = fadd float %406, %409, !dbg !58
  %411 = bitcast float %405 to i32, !dbg !44
  %412 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %411, i32 1, i32 31), !dbg !44
  %413 = bitcast i32 %412 to float, !dbg !44
  %414 = bitcast float %410 to i32, !dbg !44
  %415 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %414, i32 1, i32 31), !dbg !44
  %416 = bitcast i32 %415 to float, !dbg !44
  %417 = bitcast float %400 to i32, !dbg !44
  %418 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %417, i32 1, i32 31), !dbg !44
  %419 = bitcast i32 %418 to float, !dbg !44
  %420 = fsub float %413, %405, !dbg !46
  %421 = fadd float %400, %419, !dbg !48
  %422 = fcmp oeq float %421, 0.000000e+00, !dbg !49
  %423 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %419, float %421) #3, !dbg !50
  %424 = select i1 %422, float 0.000000e+00, float %423, !dbg !51
  %425 = fmul float %420, %424, !dbg !52
  %426 = fadd float %405, %425, !dbg !53
  %427 = fadd float %410, %416, !dbg !54
  %428 = fmul float %420, %420, !dbg !55
  %429 = fmul float %400, %428, !dbg !56
  %430 = fmul float %424, %429, !dbg !57
  %431 = fadd float %427, %430, !dbg !58
  %432 = and i32 %11, 15, !dbg !44
  %433 = icmp eq i32 %432, 0, !dbg !44
  %434 = and i1 %340, %433, !dbg !44
  %435 = bitcast float %426 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %342, <1 x i32> %435, i1 %434) #3, !dbg !44
  %436 = bitcast float %431 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %345, <1 x i32> %436, i1 %434) #3, !dbg !44
  %437 = bitcast float %421 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %348, <1 x i32> %437, i1 %434) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %438 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !44
  %439 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !44
  %440 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), align 16, !dbg !44
  %441 = sext i32 %9 to i64, !dbg !59
  %442 = getelementptr float, ptr addrspace(1) %3, i64 %441, !dbg !59
  %443 = icmp eq i32 %14, 0, !dbg !60
  %444 = and i1 %443, %10, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %438, ptr addrspace(1) %442, i1 %444) #3, !dbg !60
  %445 = getelementptr float, ptr addrspace(1) %4, i64 %441, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %439, ptr addrspace(1) %445, i1 %444) #3, !dbg !62
  %446 = getelementptr float, ptr addrspace(1) %5, i64 %441, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %440, ptr addrspace(1) %446, i1 %444) #3, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czp47m4ox5ae5ph72w3oiy3bxd7elsjbg4cmqfo3t6zlmuk5fovj.py", directory: "inductor_cache/zp")
!4 = !{ptr @triton_red_fused_add_convolution_native_group_norm_25, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_convolution_native_group_norm_25, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_convolution_native_group_norm_25", linkageName: "triton_red_fused_add_convolution_native_group_norm_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 36, column: 48, scope: !7)
!15 = !DILocation(line: 37, column: 42, scope: !7)
!16 = !DILocation(line: 31, column: 36, scope: !7)
!17 = !DILocation(line: 35, column: 23, scope: !7)
!18 = !DILocation(line: 36, column: 43, scope: !7)
!19 = !DILocation(line: 36, column: 38, scope: !7)
!20 = !DILocation(line: 36, column: 53, scope: !7)
!21 = !DILocation(line: 37, column: 39, scope: !7)
!22 = !DILocation(line: 37, column: 34, scope: !7)
!23 = !DILocation(line: 37, column: 47, scope: !7)
!24 = !DILocation(line: 38, column: 34, scope: !7)
!25 = !DILocation(line: 38, column: 49, scope: !7)
!26 = !DILocation(line: 39, column: 22, scope: !7)
!27 = !DILocation(line: 40, column: 22, scope: !7)
!28 = !DILocation(line: 43, column: 62, scope: !7)
!29 = !DILocation(line: 178, column: 7, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 43, column: 51, scope: !7)
!33 = !DILocation(line: 183, column: 24, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 184, column: 30, scope: !30, inlinedAt: !32)
!35 = !DILocation(line: 185, column: 34, scope: !30, inlinedAt: !32)
!36 = !DILocation(line: 185, column: 26, scope: !30, inlinedAt: !32)
!37 = !DILocation(line: 186, column: 39, scope: !30, inlinedAt: !32)
!38 = !DILocation(line: 186, column: 31, scope: !30, inlinedAt: !32)
!39 = !DILocation(line: 186, column: 22, scope: !30, inlinedAt: !32)
!40 = !DILocation(line: 45, column: 60, scope: !7)
!41 = !DILocation(line: 46, column: 56, scope: !7)
!42 = !DILocation(line: 47, column: 64, scope: !7)
!43 = !DILocation(line: 48, column: 53, scope: !7)
!44 = !DILocation(line: 204, column: 46, scope: !30, inlinedAt: !45)
!45 = !DILocation(line: 50, column: 41, scope: !7)
!46 = !DILocation(line: 192, column: 21, scope: !47, inlinedAt: !45)
!47 = distinct !DILexicalBlockFile(scope: !30, file: !31, discriminator: 0)
!48 = !DILocation(line: 193, column: 28, scope: !47, inlinedAt: !45)
!49 = !DILocation(line: 194, column: 39, scope: !47, inlinedAt: !45)
!50 = !DILocation(line: 194, column: 60, scope: !47, inlinedAt: !45)
!51 = !DILocation(line: 194, column: 49, scope: !47, inlinedAt: !45)
!52 = !DILocation(line: 196, column: 25, scope: !47, inlinedAt: !45)
!53 = !DILocation(line: 196, column: 17, scope: !47, inlinedAt: !45)
!54 = !DILocation(line: 197, column: 15, scope: !47, inlinedAt: !45)
!55 = !DILocation(line: 197, column: 30, scope: !47, inlinedAt: !45)
!56 = !DILocation(line: 197, column: 38, scope: !47, inlinedAt: !45)
!57 = !DILocation(line: 197, column: 49, scope: !47, inlinedAt: !45)
!58 = !DILocation(line: 197, column: 22, scope: !47, inlinedAt: !45)
!59 = !DILocation(line: 55, column: 25, scope: !7)
!60 = !DILocation(line: 55, column: 36, scope: !7)
!61 = !DILocation(line: 56, column: 25, scope: !7)
!62 = !DILocation(line: 56, column: 36, scope: !7)
!63 = !DILocation(line: 57, column: 25, scope: !7)
!64 = !DILocation(line: 57, column: 36, scope: !7)
!65 = !DILocation(line: 57, column: 4, scope: !7)
