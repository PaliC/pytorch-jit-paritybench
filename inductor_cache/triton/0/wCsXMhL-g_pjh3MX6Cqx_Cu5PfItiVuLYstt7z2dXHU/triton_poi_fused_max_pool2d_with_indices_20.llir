; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 252, !dbg !12
  %13 = shl i32 %8, 4, !dbg !12
  %14 = and i32 %13, 240, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %7, %12, !dbg !13
  %17 = or disjoint i32 %7, %14, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %19 = shl i32 %18, 4, !dbg !15
  %20 = and i32 %8, 15, !dbg !16
  %.lobit24 = lshr i32 %8, 6, !dbg !16
  %21 = and i32 %.lobit24, 3, !dbg !16
  %22 = or disjoint i32 %19, %20, !dbg !17
  %23 = or disjoint i32 %19, %21, !dbg !17
  %24 = or disjoint i32 %23, 4, !dbg !17
  %25 = or disjoint i32 %23, 8, !dbg !17
  %26 = or disjoint i32 %23, 12, !dbg !17
  %27 = or disjoint i32 %19, %10, !dbg !17
  %28 = icmp slt i32 %22, 64, !dbg !18
  %29 = icmp slt i32 %23, 64, !dbg !18
  %30 = icmp slt i32 %24, 64, !dbg !18
  %31 = icmp slt i32 %25, 64, !dbg !18
  %32 = icmp slt i32 %26, 64, !dbg !18
  %33 = icmp slt i32 %27, 64, !dbg !18
  %.frozen = freeze i32 %22, !dbg !19
  %34 = sdiv i32 %.frozen, 8, !dbg !19
  %35 = mul i32 %34, 8, !dbg !20
  %.decomposed = sub i32 %.frozen, %35, !dbg !20
  %.frozen35 = freeze i32 %16, !dbg !21
  %36 = sdiv i32 %.frozen35, 256, !dbg !21
  %37 = mul i32 %36, 256, !dbg !22
  %.decomposed36 = sub i32 %.frozen35, %37, !dbg !22
  %.frozen37 = freeze i32 %17, !dbg !21
  %38 = sdiv i32 %.frozen37, 256, !dbg !21
  %39 = mul i32 %38, 256, !dbg !22
  %.decomposed38 = sub i32 %.frozen37, %39, !dbg !22
  %40 = shl nsw i32 %.decomposed, 1, !dbg !23
  %41 = shl i32 %34, 5, !dbg !24
  %42 = add i32 %40, %41, !dbg !25
  %43 = shl i32 %15, 8, !dbg !26
  %44 = or disjoint i32 %43, 4096, !dbg !26
  %45 = or disjoint i32 %43, 8192, !dbg !26
  %46 = or disjoint i32 %43, 12288, !dbg !26
  %47 = or disjoint i32 %43, 16384, !dbg !26
  %48 = or disjoint i32 %43, 20480, !dbg !26
  %49 = or disjoint i32 %43, 24576, !dbg !26
  %50 = or disjoint i32 %43, 28672, !dbg !26
  %51 = or disjoint i32 %43, 32768, !dbg !26
  %52 = or disjoint i32 %43, 36864, !dbg !26
  %53 = or disjoint i32 %43, 40960, !dbg !26
  %54 = or disjoint i32 %43, 45056, !dbg !26
  %55 = or disjoint i32 %43, 49152, !dbg !26
  %56 = or disjoint i32 %43, 53248, !dbg !26
  %57 = or disjoint i32 %43, 57344, !dbg !26
  %58 = or disjoint i32 %43, 61440, !dbg !26
  %59 = add i32 %42, %43, !dbg !27
  %60 = add i32 %42, %44, !dbg !27
  %61 = add i32 %42, %45, !dbg !27
  %62 = add i32 %42, %46, !dbg !27
  %63 = add i32 %42, %47, !dbg !27
  %64 = add i32 %42, %48, !dbg !27
  %65 = add i32 %42, %49, !dbg !27
  %66 = add i32 %42, %50, !dbg !27
  %67 = add i32 %42, %51, !dbg !27
  %68 = add i32 %42, %52, !dbg !27
  %69 = add i32 %42, %53, !dbg !27
  %70 = add i32 %42, %54, !dbg !27
  %71 = add i32 %42, %55, !dbg !27
  %72 = add i32 %42, %56, !dbg !27
  %73 = add i32 %42, %57, !dbg !27
  %74 = add i32 %42, %58, !dbg !27
  %75 = sext i32 %59 to i64, !dbg !28
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !28
  %77 = sext i32 %60 to i64, !dbg !28
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !28
  %79 = sext i32 %61 to i64, !dbg !28
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !28
  %81 = sext i32 %62 to i64, !dbg !28
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !28
  %83 = sext i32 %63 to i64, !dbg !28
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !28
  %85 = sext i32 %64 to i64, !dbg !28
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !28
  %87 = sext i32 %65 to i64, !dbg !28
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !28
  %89 = sext i32 %66 to i64, !dbg !28
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !28
  %91 = sext i32 %67 to i64, !dbg !28
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !28
  %93 = sext i32 %68 to i64, !dbg !28
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !28
  %95 = sext i32 %69 to i64, !dbg !28
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !28
  %97 = sext i32 %70 to i64, !dbg !28
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !28
  %99 = sext i32 %71 to i64, !dbg !28
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !28
  %101 = sext i32 %72 to i64, !dbg !28
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !28
  %103 = sext i32 %73 to i64, !dbg !28
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !28
  %105 = sext i32 %74 to i64, !dbg !28
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !28
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %28) #2, !dbg !29
  %108 = bitcast i32 %107 to float, !dbg !29
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %28) #2, !dbg !29
  %110 = bitcast i32 %109 to float, !dbg !29
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %28) #2, !dbg !29
  %112 = bitcast i32 %111 to float, !dbg !29
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %28) #2, !dbg !29
  %114 = bitcast i32 %113 to float, !dbg !29
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %28) #2, !dbg !29
  %116 = bitcast i32 %115 to float, !dbg !29
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %28) #2, !dbg !29
  %118 = bitcast i32 %117 to float, !dbg !29
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %28) #2, !dbg !29
  %120 = bitcast i32 %119 to float, !dbg !29
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %28) #2, !dbg !29
  %122 = bitcast i32 %121 to float, !dbg !29
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %28) #2, !dbg !29
  %124 = bitcast i32 %123 to float, !dbg !29
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %28) #2, !dbg !29
  %126 = bitcast i32 %125 to float, !dbg !29
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %28) #2, !dbg !29
  %128 = bitcast i32 %127 to float, !dbg !29
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %28) #2, !dbg !29
  %130 = bitcast i32 %129 to float, !dbg !29
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %28) #2, !dbg !29
  %132 = bitcast i32 %131 to float, !dbg !29
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %28) #2, !dbg !29
  %134 = bitcast i32 %133 to float, !dbg !29
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %28) #2, !dbg !29
  %136 = bitcast i32 %135 to float, !dbg !29
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %28) #2, !dbg !29
  %138 = bitcast i32 %137 to float, !dbg !29
  %139 = or disjoint i32 %40, 1, !dbg !30
  %140 = add i32 %139, %41, !dbg !31
  %141 = add i32 %140, %43, !dbg !32
  %142 = add i32 %140, %44, !dbg !32
  %143 = add i32 %140, %45, !dbg !32
  %144 = add i32 %140, %46, !dbg !32
  %145 = add i32 %140, %47, !dbg !32
  %146 = add i32 %140, %48, !dbg !32
  %147 = add i32 %140, %49, !dbg !32
  %148 = add i32 %140, %50, !dbg !32
  %149 = add i32 %140, %51, !dbg !32
  %150 = add i32 %140, %52, !dbg !32
  %151 = add i32 %140, %53, !dbg !32
  %152 = add i32 %140, %54, !dbg !32
  %153 = add i32 %140, %55, !dbg !32
  %154 = add i32 %140, %56, !dbg !32
  %155 = add i32 %140, %57, !dbg !32
  %156 = add i32 %140, %58, !dbg !32
  %157 = sext i32 %141 to i64, !dbg !33
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !33
  %159 = sext i32 %142 to i64, !dbg !33
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !33
  %161 = sext i32 %143 to i64, !dbg !33
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !33
  %163 = sext i32 %144 to i64, !dbg !33
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !33
  %165 = sext i32 %145 to i64, !dbg !33
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !33
  %167 = sext i32 %146 to i64, !dbg !33
  %168 = getelementptr float, ptr addrspace(1) %0, i64 %167, !dbg !33
  %169 = sext i32 %147 to i64, !dbg !33
  %170 = getelementptr float, ptr addrspace(1) %0, i64 %169, !dbg !33
  %171 = sext i32 %148 to i64, !dbg !33
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !33
  %173 = sext i32 %149 to i64, !dbg !33
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !33
  %175 = sext i32 %150 to i64, !dbg !33
  %176 = getelementptr float, ptr addrspace(1) %0, i64 %175, !dbg !33
  %177 = sext i32 %151 to i64, !dbg !33
  %178 = getelementptr float, ptr addrspace(1) %0, i64 %177, !dbg !33
  %179 = sext i32 %152 to i64, !dbg !33
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !33
  %181 = sext i32 %153 to i64, !dbg !33
  %182 = getelementptr float, ptr addrspace(1) %0, i64 %181, !dbg !33
  %183 = sext i32 %154 to i64, !dbg !33
  %184 = getelementptr float, ptr addrspace(1) %0, i64 %183, !dbg !33
  %185 = sext i32 %155 to i64, !dbg !33
  %186 = getelementptr float, ptr addrspace(1) %0, i64 %185, !dbg !33
  %187 = sext i32 %156 to i64, !dbg !33
  %188 = getelementptr float, ptr addrspace(1) %0, i64 %187, !dbg !33
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %28) #2, !dbg !34
  %190 = bitcast i32 %189 to float, !dbg !34
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %28) #2, !dbg !34
  %192 = bitcast i32 %191 to float, !dbg !34
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %28) #2, !dbg !34
  %194 = bitcast i32 %193 to float, !dbg !34
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %28) #2, !dbg !34
  %196 = bitcast i32 %195 to float, !dbg !34
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %28) #2, !dbg !34
  %198 = bitcast i32 %197 to float, !dbg !34
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 %28) #2, !dbg !34
  %200 = bitcast i32 %199 to float, !dbg !34
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %28) #2, !dbg !34
  %202 = bitcast i32 %201 to float, !dbg !34
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %28) #2, !dbg !34
  %204 = bitcast i32 %203 to float, !dbg !34
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %28) #2, !dbg !34
  %206 = bitcast i32 %205 to float, !dbg !34
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 %28) #2, !dbg !34
  %208 = bitcast i32 %207 to float, !dbg !34
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 %28) #2, !dbg !34
  %210 = bitcast i32 %209 to float, !dbg !34
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 %28) #2, !dbg !34
  %212 = bitcast i32 %211 to float, !dbg !34
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 %28) #2, !dbg !34
  %214 = bitcast i32 %213 to float, !dbg !34
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 %28) #2, !dbg !34
  %216 = bitcast i32 %215 to float, !dbg !34
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %28) #2, !dbg !34
  %218 = bitcast i32 %217 to float, !dbg !34
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 %28) #2, !dbg !34
  %220 = bitcast i32 %219 to float, !dbg !34
  %221 = add i32 %42, 16, !dbg !35
  %222 = add i32 %221, %43, !dbg !36
  %223 = add i32 %221, %44, !dbg !36
  %224 = add i32 %221, %45, !dbg !36
  %225 = add i32 %221, %46, !dbg !36
  %226 = add i32 %221, %47, !dbg !36
  %227 = add i32 %221, %48, !dbg !36
  %228 = add i32 %221, %49, !dbg !36
  %229 = add i32 %221, %50, !dbg !36
  %230 = add i32 %221, %51, !dbg !36
  %231 = add i32 %221, %52, !dbg !36
  %232 = add i32 %221, %53, !dbg !36
  %233 = add i32 %221, %54, !dbg !36
  %234 = add i32 %221, %55, !dbg !36
  %235 = add i32 %221, %56, !dbg !36
  %236 = add i32 %221, %57, !dbg !36
  %237 = add i32 %221, %58, !dbg !36
  %238 = sext i32 %222 to i64, !dbg !37
  %239 = getelementptr float, ptr addrspace(1) %0, i64 %238, !dbg !37
  %240 = sext i32 %223 to i64, !dbg !37
  %241 = getelementptr float, ptr addrspace(1) %0, i64 %240, !dbg !37
  %242 = sext i32 %224 to i64, !dbg !37
  %243 = getelementptr float, ptr addrspace(1) %0, i64 %242, !dbg !37
  %244 = sext i32 %225 to i64, !dbg !37
  %245 = getelementptr float, ptr addrspace(1) %0, i64 %244, !dbg !37
  %246 = sext i32 %226 to i64, !dbg !37
  %247 = getelementptr float, ptr addrspace(1) %0, i64 %246, !dbg !37
  %248 = sext i32 %227 to i64, !dbg !37
  %249 = getelementptr float, ptr addrspace(1) %0, i64 %248, !dbg !37
  %250 = sext i32 %228 to i64, !dbg !37
  %251 = getelementptr float, ptr addrspace(1) %0, i64 %250, !dbg !37
  %252 = sext i32 %229 to i64, !dbg !37
  %253 = getelementptr float, ptr addrspace(1) %0, i64 %252, !dbg !37
  %254 = sext i32 %230 to i64, !dbg !37
  %255 = getelementptr float, ptr addrspace(1) %0, i64 %254, !dbg !37
  %256 = sext i32 %231 to i64, !dbg !37
  %257 = getelementptr float, ptr addrspace(1) %0, i64 %256, !dbg !37
  %258 = sext i32 %232 to i64, !dbg !37
  %259 = getelementptr float, ptr addrspace(1) %0, i64 %258, !dbg !37
  %260 = sext i32 %233 to i64, !dbg !37
  %261 = getelementptr float, ptr addrspace(1) %0, i64 %260, !dbg !37
  %262 = sext i32 %234 to i64, !dbg !37
  %263 = getelementptr float, ptr addrspace(1) %0, i64 %262, !dbg !37
  %264 = sext i32 %235 to i64, !dbg !37
  %265 = getelementptr float, ptr addrspace(1) %0, i64 %264, !dbg !37
  %266 = sext i32 %236 to i64, !dbg !37
  %267 = getelementptr float, ptr addrspace(1) %0, i64 %266, !dbg !37
  %268 = sext i32 %237 to i64, !dbg !37
  %269 = getelementptr float, ptr addrspace(1) %0, i64 %268, !dbg !37
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %239, i1 %28) #2, !dbg !38
  %271 = bitcast i32 %270 to float, !dbg !38
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %241, i1 %28) #2, !dbg !38
  %273 = bitcast i32 %272 to float, !dbg !38
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %243, i1 %28) #2, !dbg !38
  %275 = bitcast i32 %274 to float, !dbg !38
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 %28) #2, !dbg !38
  %277 = bitcast i32 %276 to float, !dbg !38
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %247, i1 %28) #2, !dbg !38
  %279 = bitcast i32 %278 to float, !dbg !38
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %249, i1 %28) #2, !dbg !38
  %281 = bitcast i32 %280 to float, !dbg !38
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %251, i1 %28) #2, !dbg !38
  %283 = bitcast i32 %282 to float, !dbg !38
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %253, i1 %28) #2, !dbg !38
  %285 = bitcast i32 %284 to float, !dbg !38
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %255, i1 %28) #2, !dbg !38
  %287 = bitcast i32 %286 to float, !dbg !38
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %257, i1 %28) #2, !dbg !38
  %289 = bitcast i32 %288 to float, !dbg !38
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %259, i1 %28) #2, !dbg !38
  %291 = bitcast i32 %290 to float, !dbg !38
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %261, i1 %28) #2, !dbg !38
  %293 = bitcast i32 %292 to float, !dbg !38
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %263, i1 %28) #2, !dbg !38
  %295 = bitcast i32 %294 to float, !dbg !38
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %265, i1 %28) #2, !dbg !38
  %297 = bitcast i32 %296 to float, !dbg !38
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %267, i1 %28) #2, !dbg !38
  %299 = bitcast i32 %298 to float, !dbg !38
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %269, i1 %28) #2, !dbg !38
  %301 = bitcast i32 %300 to float, !dbg !38
  %302 = add i32 %42, 17, !dbg !39
  %303 = add i32 %302, %43, !dbg !40
  %304 = add i32 %302, %44, !dbg !40
  %305 = add i32 %302, %45, !dbg !40
  %306 = add i32 %302, %46, !dbg !40
  %307 = add i32 %302, %47, !dbg !40
  %308 = add i32 %302, %48, !dbg !40
  %309 = add i32 %302, %49, !dbg !40
  %310 = add i32 %302, %50, !dbg !40
  %311 = add i32 %302, %51, !dbg !40
  %312 = add i32 %302, %52, !dbg !40
  %313 = add i32 %302, %53, !dbg !40
  %314 = add i32 %302, %54, !dbg !40
  %315 = add i32 %302, %55, !dbg !40
  %316 = add i32 %302, %56, !dbg !40
  %317 = add i32 %302, %57, !dbg !40
  %318 = add i32 %302, %58, !dbg !40
  %319 = sext i32 %303 to i64, !dbg !41
  %320 = getelementptr float, ptr addrspace(1) %0, i64 %319, !dbg !41
  %321 = sext i32 %304 to i64, !dbg !41
  %322 = getelementptr float, ptr addrspace(1) %0, i64 %321, !dbg !41
  %323 = sext i32 %305 to i64, !dbg !41
  %324 = getelementptr float, ptr addrspace(1) %0, i64 %323, !dbg !41
  %325 = sext i32 %306 to i64, !dbg !41
  %326 = getelementptr float, ptr addrspace(1) %0, i64 %325, !dbg !41
  %327 = sext i32 %307 to i64, !dbg !41
  %328 = getelementptr float, ptr addrspace(1) %0, i64 %327, !dbg !41
  %329 = sext i32 %308 to i64, !dbg !41
  %330 = getelementptr float, ptr addrspace(1) %0, i64 %329, !dbg !41
  %331 = sext i32 %309 to i64, !dbg !41
  %332 = getelementptr float, ptr addrspace(1) %0, i64 %331, !dbg !41
  %333 = sext i32 %310 to i64, !dbg !41
  %334 = getelementptr float, ptr addrspace(1) %0, i64 %333, !dbg !41
  %335 = sext i32 %311 to i64, !dbg !41
  %336 = getelementptr float, ptr addrspace(1) %0, i64 %335, !dbg !41
  %337 = sext i32 %312 to i64, !dbg !41
  %338 = getelementptr float, ptr addrspace(1) %0, i64 %337, !dbg !41
  %339 = sext i32 %313 to i64, !dbg !41
  %340 = getelementptr float, ptr addrspace(1) %0, i64 %339, !dbg !41
  %341 = sext i32 %314 to i64, !dbg !41
  %342 = getelementptr float, ptr addrspace(1) %0, i64 %341, !dbg !41
  %343 = sext i32 %315 to i64, !dbg !41
  %344 = getelementptr float, ptr addrspace(1) %0, i64 %343, !dbg !41
  %345 = sext i32 %316 to i64, !dbg !41
  %346 = getelementptr float, ptr addrspace(1) %0, i64 %345, !dbg !41
  %347 = sext i32 %317 to i64, !dbg !41
  %348 = getelementptr float, ptr addrspace(1) %0, i64 %347, !dbg !41
  %349 = sext i32 %318 to i64, !dbg !41
  %350 = getelementptr float, ptr addrspace(1) %0, i64 %349, !dbg !41
  %351 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %320, i1 %28) #2, !dbg !42
  %352 = bitcast i32 %351 to float, !dbg !42
  %353 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %322, i1 %28) #2, !dbg !42
  %354 = bitcast i32 %353 to float, !dbg !42
  %355 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %324, i1 %28) #2, !dbg !42
  %356 = bitcast i32 %355 to float, !dbg !42
  %357 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %326, i1 %28) #2, !dbg !42
  %358 = bitcast i32 %357 to float, !dbg !42
  %359 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %328, i1 %28) #2, !dbg !42
  %360 = bitcast i32 %359 to float, !dbg !42
  %361 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %330, i1 %28) #2, !dbg !42
  %362 = bitcast i32 %361 to float, !dbg !42
  %363 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %332, i1 %28) #2, !dbg !42
  %364 = bitcast i32 %363 to float, !dbg !42
  %365 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %334, i1 %28) #2, !dbg !42
  %366 = bitcast i32 %365 to float, !dbg !42
  %367 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %336, i1 %28) #2, !dbg !42
  %368 = bitcast i32 %367 to float, !dbg !42
  %369 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %338, i1 %28) #2, !dbg !42
  %370 = bitcast i32 %369 to float, !dbg !42
  %371 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %340, i1 %28) #2, !dbg !42
  %372 = bitcast i32 %371 to float, !dbg !42
  %373 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %342, i1 %28) #2, !dbg !42
  %374 = bitcast i32 %373 to float, !dbg !42
  %375 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %344, i1 %28) #2, !dbg !42
  %376 = bitcast i32 %375 to float, !dbg !42
  %377 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %346, i1 %28) #2, !dbg !42
  %378 = bitcast i32 %377 to float, !dbg !42
  %379 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %348, i1 %28) #2, !dbg !42
  %380 = bitcast i32 %379 to float, !dbg !42
  %381 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %350, i1 %28) #2, !dbg !42
  %382 = bitcast i32 %381 to float, !dbg !42
  %383 = fcmp ogt float %190, %108, !dbg !43
  %384 = fcmp ogt float %192, %110, !dbg !43
  %385 = fcmp ogt float %194, %112, !dbg !43
  %386 = fcmp ogt float %196, %114, !dbg !43
  %387 = fcmp ogt float %198, %116, !dbg !43
  %388 = fcmp ogt float %200, %118, !dbg !43
  %389 = fcmp ogt float %202, %120, !dbg !43
  %390 = fcmp ogt float %204, %122, !dbg !43
  %391 = fcmp ogt float %206, %124, !dbg !43
  %392 = fcmp ogt float %208, %126, !dbg !43
  %393 = fcmp ogt float %210, %128, !dbg !43
  %394 = fcmp ogt float %212, %130, !dbg !43
  %395 = fcmp ogt float %214, %132, !dbg !43
  %396 = fcmp ogt float %216, %134, !dbg !43
  %397 = fcmp ogt float %218, %136, !dbg !43
  %398 = fcmp ogt float %220, %138, !dbg !43
  %399 = fcmp uno float %190, 0.000000e+00, !dbg !47
  %400 = fcmp uno float %192, 0.000000e+00, !dbg !47
  %401 = fcmp uno float %194, 0.000000e+00, !dbg !47
  %402 = fcmp uno float %196, 0.000000e+00, !dbg !47
  %403 = fcmp uno float %198, 0.000000e+00, !dbg !47
  %404 = fcmp uno float %200, 0.000000e+00, !dbg !47
  %405 = fcmp uno float %202, 0.000000e+00, !dbg !47
  %406 = fcmp uno float %204, 0.000000e+00, !dbg !47
  %407 = fcmp uno float %206, 0.000000e+00, !dbg !47
  %408 = fcmp uno float %208, 0.000000e+00, !dbg !47
  %409 = fcmp uno float %210, 0.000000e+00, !dbg !47
  %410 = fcmp uno float %212, 0.000000e+00, !dbg !47
  %411 = fcmp uno float %214, 0.000000e+00, !dbg !47
  %412 = fcmp uno float %216, 0.000000e+00, !dbg !47
  %413 = fcmp uno float %218, 0.000000e+00, !dbg !47
  %414 = fcmp uno float %220, 0.000000e+00, !dbg !47
  %415 = or i1 %383, %399, !dbg !48
  %416 = or i1 %384, %400, !dbg !48
  %417 = or i1 %385, %401, !dbg !48
  %418 = or i1 %386, %402, !dbg !48
  %419 = or i1 %387, %403, !dbg !48
  %420 = or i1 %388, %404, !dbg !48
  %421 = or i1 %389, %405, !dbg !48
  %422 = or i1 %390, %406, !dbg !48
  %423 = or i1 %391, %407, !dbg !48
  %424 = or i1 %392, %408, !dbg !48
  %425 = or i1 %393, %409, !dbg !48
  %426 = or i1 %394, %410, !dbg !48
  %427 = or i1 %395, %411, !dbg !48
  %428 = or i1 %396, %412, !dbg !48
  %429 = or i1 %397, %413, !dbg !48
  %430 = or i1 %398, %414, !dbg !48
  %431 = select i1 %415, float %190, float %108, !dbg !49
  %432 = select i1 %416, float %192, float %110, !dbg !49
  %433 = select i1 %417, float %194, float %112, !dbg !49
  %434 = select i1 %418, float %196, float %114, !dbg !49
  %435 = select i1 %419, float %198, float %116, !dbg !49
  %436 = select i1 %420, float %200, float %118, !dbg !49
  %437 = select i1 %421, float %202, float %120, !dbg !49
  %438 = select i1 %422, float %204, float %122, !dbg !49
  %439 = select i1 %423, float %206, float %124, !dbg !49
  %440 = select i1 %424, float %208, float %126, !dbg !49
  %441 = select i1 %425, float %210, float %128, !dbg !49
  %442 = select i1 %426, float %212, float %130, !dbg !49
  %443 = select i1 %427, float %214, float %132, !dbg !49
  %444 = select i1 %428, float %216, float %134, !dbg !49
  %445 = select i1 %429, float %218, float %136, !dbg !49
  %446 = select i1 %430, float %220, float %138, !dbg !49
  %447 = fcmp olt float %431, %271, !dbg !50
  %448 = fcmp olt float %432, %273, !dbg !50
  %449 = fcmp olt float %433, %275, !dbg !50
  %450 = fcmp olt float %434, %277, !dbg !50
  %451 = fcmp olt float %435, %279, !dbg !50
  %452 = fcmp olt float %436, %281, !dbg !50
  %453 = fcmp olt float %437, %283, !dbg !50
  %454 = fcmp olt float %438, %285, !dbg !50
  %455 = fcmp olt float %439, %287, !dbg !50
  %456 = fcmp olt float %440, %289, !dbg !50
  %457 = fcmp olt float %441, %291, !dbg !50
  %458 = fcmp olt float %442, %293, !dbg !50
  %459 = fcmp olt float %443, %295, !dbg !50
  %460 = fcmp olt float %444, %297, !dbg !50
  %461 = fcmp olt float %445, %299, !dbg !50
  %462 = fcmp olt float %446, %301, !dbg !50
  %463 = fcmp uno float %271, 0.000000e+00, !dbg !52
  %464 = fcmp uno float %273, 0.000000e+00, !dbg !52
  %465 = fcmp uno float %275, 0.000000e+00, !dbg !52
  %466 = fcmp uno float %277, 0.000000e+00, !dbg !52
  %467 = fcmp uno float %279, 0.000000e+00, !dbg !52
  %468 = fcmp uno float %281, 0.000000e+00, !dbg !52
  %469 = fcmp uno float %283, 0.000000e+00, !dbg !52
  %470 = fcmp uno float %285, 0.000000e+00, !dbg !52
  %471 = fcmp uno float %287, 0.000000e+00, !dbg !52
  %472 = fcmp uno float %289, 0.000000e+00, !dbg !52
  %473 = fcmp uno float %291, 0.000000e+00, !dbg !52
  %474 = fcmp uno float %293, 0.000000e+00, !dbg !52
  %475 = fcmp uno float %295, 0.000000e+00, !dbg !52
  %476 = fcmp uno float %297, 0.000000e+00, !dbg !52
  %477 = fcmp uno float %299, 0.000000e+00, !dbg !52
  %478 = fcmp uno float %301, 0.000000e+00, !dbg !52
  %479 = or i1 %447, %463, !dbg !53
  %480 = or i1 %448, %464, !dbg !53
  %481 = or i1 %449, %465, !dbg !53
  %482 = or i1 %450, %466, !dbg !53
  %483 = or i1 %451, %467, !dbg !53
  %484 = or i1 %452, %468, !dbg !53
  %485 = or i1 %453, %469, !dbg !53
  %486 = or i1 %454, %470, !dbg !53
  %487 = or i1 %455, %471, !dbg !53
  %488 = or i1 %456, %472, !dbg !53
  %489 = or i1 %457, %473, !dbg !53
  %490 = or i1 %458, %474, !dbg !53
  %491 = or i1 %459, %475, !dbg !53
  %492 = or i1 %460, %476, !dbg !53
  %493 = or i1 %461, %477, !dbg !53
  %494 = or i1 %462, %478, !dbg !53
  %495 = select i1 %479, float %271, float %431, !dbg !54
  %496 = select i1 %480, float %273, float %432, !dbg !54
  %497 = select i1 %481, float %275, float %433, !dbg !54
  %498 = select i1 %482, float %277, float %434, !dbg !54
  %499 = select i1 %483, float %279, float %435, !dbg !54
  %500 = select i1 %484, float %281, float %436, !dbg !54
  %501 = select i1 %485, float %283, float %437, !dbg !54
  %502 = select i1 %486, float %285, float %438, !dbg !54
  %503 = select i1 %487, float %287, float %439, !dbg !54
  %504 = select i1 %488, float %289, float %440, !dbg !54
  %505 = select i1 %489, float %291, float %441, !dbg !54
  %506 = select i1 %490, float %293, float %442, !dbg !54
  %507 = select i1 %491, float %295, float %443, !dbg !54
  %508 = select i1 %492, float %297, float %444, !dbg !54
  %509 = select i1 %493, float %299, float %445, !dbg !54
  %510 = select i1 %494, float %301, float %446, !dbg !54
  %511 = fcmp olt float %495, %352, !dbg !55
  %512 = fcmp olt float %496, %354, !dbg !55
  %513 = fcmp olt float %497, %356, !dbg !55
  %514 = fcmp olt float %498, %358, !dbg !55
  %515 = fcmp olt float %499, %360, !dbg !55
  %516 = fcmp olt float %500, %362, !dbg !55
  %517 = fcmp olt float %501, %364, !dbg !55
  %518 = fcmp olt float %502, %366, !dbg !55
  %519 = fcmp olt float %503, %368, !dbg !55
  %520 = fcmp olt float %504, %370, !dbg !55
  %521 = fcmp olt float %505, %372, !dbg !55
  %522 = fcmp olt float %506, %374, !dbg !55
  %523 = fcmp olt float %507, %376, !dbg !55
  %524 = fcmp olt float %508, %378, !dbg !55
  %525 = fcmp olt float %509, %380, !dbg !55
  %526 = fcmp olt float %510, %382, !dbg !55
  %527 = fcmp uno float %352, 0.000000e+00, !dbg !57
  %528 = fcmp uno float %354, 0.000000e+00, !dbg !57
  %529 = fcmp uno float %356, 0.000000e+00, !dbg !57
  %530 = fcmp uno float %358, 0.000000e+00, !dbg !57
  %531 = fcmp uno float %360, 0.000000e+00, !dbg !57
  %532 = fcmp uno float %362, 0.000000e+00, !dbg !57
  %533 = fcmp uno float %364, 0.000000e+00, !dbg !57
  %534 = fcmp uno float %366, 0.000000e+00, !dbg !57
  %535 = fcmp uno float %368, 0.000000e+00, !dbg !57
  %536 = fcmp uno float %370, 0.000000e+00, !dbg !57
  %537 = fcmp uno float %372, 0.000000e+00, !dbg !57
  %538 = fcmp uno float %374, 0.000000e+00, !dbg !57
  %539 = fcmp uno float %376, 0.000000e+00, !dbg !57
  %540 = fcmp uno float %378, 0.000000e+00, !dbg !57
  %541 = fcmp uno float %380, 0.000000e+00, !dbg !57
  %542 = fcmp uno float %382, 0.000000e+00, !dbg !57
  %543 = or i1 %511, %527, !dbg !58
  %544 = or i1 %512, %528, !dbg !58
  %545 = or i1 %513, %529, !dbg !58
  %546 = or i1 %514, %530, !dbg !58
  %547 = or i1 %515, %531, !dbg !58
  %548 = or i1 %516, %532, !dbg !58
  %549 = or i1 %517, %533, !dbg !58
  %550 = or i1 %518, %534, !dbg !58
  %551 = or i1 %519, %535, !dbg !58
  %552 = or i1 %520, %536, !dbg !58
  %553 = or i1 %521, %537, !dbg !58
  %554 = or i1 %522, %538, !dbg !58
  %555 = or i1 %523, %539, !dbg !58
  %556 = or i1 %524, %540, !dbg !58
  %557 = or i1 %525, %541, !dbg !58
  %558 = or i1 %526, %542, !dbg !58
  %559 = zext i1 %383 to i8, !dbg !59
  %560 = zext i1 %384 to i8, !dbg !59
  %561 = zext i1 %385 to i8, !dbg !59
  %562 = zext i1 %386 to i8, !dbg !59
  %563 = zext i1 %387 to i8, !dbg !59
  %564 = zext i1 %388 to i8, !dbg !59
  %565 = zext i1 %389 to i8, !dbg !59
  %566 = zext i1 %390 to i8, !dbg !59
  %567 = zext i1 %391 to i8, !dbg !59
  %568 = zext i1 %392 to i8, !dbg !59
  %569 = zext i1 %393 to i8, !dbg !59
  %570 = zext i1 %394 to i8, !dbg !59
  %571 = zext i1 %395 to i8, !dbg !59
  %572 = zext i1 %396 to i8, !dbg !59
  %573 = zext i1 %397 to i8, !dbg !59
  %574 = zext i1 %398 to i8, !dbg !59
  %575 = select i1 %447, i8 2, i8 %559, !dbg !60
  %576 = select i1 %448, i8 2, i8 %560, !dbg !60
  %577 = select i1 %449, i8 2, i8 %561, !dbg !60
  %578 = select i1 %450, i8 2, i8 %562, !dbg !60
  %579 = select i1 %451, i8 2, i8 %563, !dbg !60
  %580 = select i1 %452, i8 2, i8 %564, !dbg !60
  %581 = select i1 %453, i8 2, i8 %565, !dbg !60
  %582 = select i1 %454, i8 2, i8 %566, !dbg !60
  %583 = select i1 %455, i8 2, i8 %567, !dbg !60
  %584 = select i1 %456, i8 2, i8 %568, !dbg !60
  %585 = select i1 %457, i8 2, i8 %569, !dbg !60
  %586 = select i1 %458, i8 2, i8 %570, !dbg !60
  %587 = select i1 %459, i8 2, i8 %571, !dbg !60
  %588 = select i1 %460, i8 2, i8 %572, !dbg !60
  %589 = select i1 %461, i8 2, i8 %573, !dbg !60
  %590 = select i1 %462, i8 2, i8 %574, !dbg !60
  %591 = select i1 %511, i8 3, i8 %575, !dbg !61
  %592 = select i1 %512, i8 3, i8 %576, !dbg !61
  %593 = select i1 %513, i8 3, i8 %577, !dbg !61
  %594 = select i1 %514, i8 3, i8 %578, !dbg !61
  %595 = select i1 %515, i8 3, i8 %579, !dbg !61
  %596 = select i1 %516, i8 3, i8 %580, !dbg !61
  %597 = select i1 %517, i8 3, i8 %581, !dbg !61
  %598 = select i1 %518, i8 3, i8 %582, !dbg !61
  %599 = select i1 %519, i8 3, i8 %583, !dbg !61
  %600 = select i1 %520, i8 3, i8 %584, !dbg !61
  %601 = select i1 %521, i8 3, i8 %585, !dbg !61
  %602 = select i1 %522, i8 3, i8 %586, !dbg !61
  %603 = select i1 %523, i8 3, i8 %587, !dbg !61
  %604 = select i1 %524, i8 3, i8 %588, !dbg !61
  %605 = select i1 %525, i8 3, i8 %589, !dbg !61
  %606 = select i1 %526, i8 3, i8 %590, !dbg !61
  %607 = shl i32 %23, 8, !dbg !62
  %608 = shl i32 %24, 8, !dbg !62
  %609 = shl i32 %25, 8, !dbg !62
  %610 = shl i32 %26, 8, !dbg !62
  %611 = shl i32 %27, 8, !dbg !62
  %612 = add i32 %611, %.decomposed38, !dbg !63
  %613 = shl i32 %36, 14, !dbg !64
  %614 = shl i32 %38, 14, !dbg !64
  %615 = add i32 %613, %.decomposed36, !dbg !63
  %616 = add i32 %615, %607, !dbg !65
  %617 = add i32 %615, %608, !dbg !65
  %618 = add i32 %615, %609, !dbg !65
  %619 = add i32 %615, %610, !dbg !65
  %620 = add i32 %612, %614, !dbg !65
  %621 = sext i32 %616 to i64, !dbg !66
  %622 = getelementptr float, ptr addrspace(1) %1, i64 %621, !dbg !66
  %623 = sext i32 %617 to i64, !dbg !66
  %624 = getelementptr float, ptr addrspace(1) %1, i64 %623, !dbg !66
  %625 = sext i32 %618 to i64, !dbg !66
  %626 = getelementptr float, ptr addrspace(1) %1, i64 %625, !dbg !66
  %627 = sext i32 %619 to i64, !dbg !66
  %628 = getelementptr float, ptr addrspace(1) %1, i64 %627, !dbg !66
  %629 = shl i32 %8, 8, !dbg !67
  %630 = and i32 %629, 3840, !dbg !67
  %631 = or disjoint i32 %630, %10, !dbg !67
  %632 = and i32 %11, 1020, !dbg !67
  %633 = lshr exact i32 %630, 4, !dbg !67
  %634 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %633, !dbg !67
  %635 = getelementptr float, ptr addrspace(3) %634, i32 %631, !dbg !67
  %636 = bitcast float %495 to i32, !dbg !67
  %637 = select i1 %543, i32 %351, i32 %636, !dbg !68
  %638 = insertelement <1 x i32> poison, i32 %637, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %635, <1 x i32> %638, i1 true) #2, !dbg !67
  %639 = or disjoint i32 %631, 16, !dbg !67
  %640 = getelementptr float, ptr addrspace(3) %634, i32 %639, !dbg !67
  %641 = bitcast float %496 to i32, !dbg !67
  %642 = select i1 %544, i32 %353, i32 %641, !dbg !68
  %643 = insertelement <1 x i32> poison, i32 %642, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %640, <1 x i32> %643, i1 true) #2, !dbg !67
  %644 = or disjoint i32 %631, 32, !dbg !67
  %645 = getelementptr float, ptr addrspace(3) %634, i32 %644, !dbg !67
  %646 = bitcast float %497 to i32, !dbg !67
  %647 = select i1 %545, i32 %355, i32 %646, !dbg !68
  %648 = insertelement <1 x i32> poison, i32 %647, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %645, <1 x i32> %648, i1 true) #2, !dbg !67
  %649 = or disjoint i32 %631, 48, !dbg !67
  %650 = getelementptr float, ptr addrspace(3) %634, i32 %649, !dbg !67
  %651 = bitcast float %498 to i32, !dbg !67
  %652 = select i1 %546, i32 %357, i32 %651, !dbg !68
  %653 = insertelement <1 x i32> poison, i32 %652, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %650, <1 x i32> %653, i1 true) #2, !dbg !67
  %654 = or disjoint i32 %631, 64, !dbg !67
  %655 = getelementptr float, ptr addrspace(3) %634, i32 %654, !dbg !67
  %656 = bitcast float %499 to i32, !dbg !67
  %657 = select i1 %547, i32 %359, i32 %656, !dbg !68
  %658 = insertelement <1 x i32> poison, i32 %657, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %655, <1 x i32> %658, i1 true) #2, !dbg !67
  %659 = or disjoint i32 %631, 80, !dbg !67
  %660 = getelementptr float, ptr addrspace(3) %634, i32 %659, !dbg !67
  %661 = bitcast float %500 to i32, !dbg !67
  %662 = select i1 %548, i32 %361, i32 %661, !dbg !68
  %663 = insertelement <1 x i32> poison, i32 %662, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %660, <1 x i32> %663, i1 true) #2, !dbg !67
  %664 = or disjoint i32 %631, 96, !dbg !67
  %665 = getelementptr float, ptr addrspace(3) %634, i32 %664, !dbg !67
  %666 = bitcast float %501 to i32, !dbg !67
  %667 = select i1 %549, i32 %363, i32 %666, !dbg !68
  %668 = insertelement <1 x i32> poison, i32 %667, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %665, <1 x i32> %668, i1 true) #2, !dbg !67
  %669 = or disjoint i32 %631, 112, !dbg !67
  %670 = getelementptr float, ptr addrspace(3) %634, i32 %669, !dbg !67
  %671 = bitcast float %502 to i32, !dbg !67
  %672 = select i1 %550, i32 %365, i32 %671, !dbg !68
  %673 = insertelement <1 x i32> poison, i32 %672, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %670, <1 x i32> %673, i1 true) #2, !dbg !67
  %674 = or disjoint i32 %631, 128, !dbg !67
  %675 = getelementptr float, ptr addrspace(3) %634, i32 %674, !dbg !67
  %676 = bitcast float %503 to i32, !dbg !67
  %677 = select i1 %551, i32 %367, i32 %676, !dbg !68
  %678 = insertelement <1 x i32> poison, i32 %677, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %675, <1 x i32> %678, i1 true) #2, !dbg !67
  %679 = or disjoint i32 %631, 144, !dbg !67
  %680 = getelementptr float, ptr addrspace(3) %634, i32 %679, !dbg !67
  %681 = bitcast float %504 to i32, !dbg !67
  %682 = select i1 %552, i32 %369, i32 %681, !dbg !68
  %683 = insertelement <1 x i32> poison, i32 %682, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %680, <1 x i32> %683, i1 true) #2, !dbg !67
  %684 = or disjoint i32 %631, 160, !dbg !67
  %685 = getelementptr float, ptr addrspace(3) %634, i32 %684, !dbg !67
  %686 = bitcast float %505 to i32, !dbg !67
  %687 = select i1 %553, i32 %371, i32 %686, !dbg !68
  %688 = insertelement <1 x i32> poison, i32 %687, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %685, <1 x i32> %688, i1 true) #2, !dbg !67
  %689 = or disjoint i32 %631, 176, !dbg !67
  %690 = getelementptr float, ptr addrspace(3) %634, i32 %689, !dbg !67
  %691 = bitcast float %506 to i32, !dbg !67
  %692 = select i1 %554, i32 %373, i32 %691, !dbg !68
  %693 = insertelement <1 x i32> poison, i32 %692, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %690, <1 x i32> %693, i1 true) #2, !dbg !67
  %694 = or disjoint i32 %631, 192, !dbg !67
  %695 = getelementptr float, ptr addrspace(3) %634, i32 %694, !dbg !67
  %696 = bitcast float %507 to i32, !dbg !67
  %697 = select i1 %555, i32 %375, i32 %696, !dbg !68
  %698 = insertelement <1 x i32> poison, i32 %697, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %695, <1 x i32> %698, i1 true) #2, !dbg !67
  %699 = or disjoint i32 %631, 208, !dbg !67
  %700 = getelementptr float, ptr addrspace(3) %634, i32 %699, !dbg !67
  %701 = bitcast float %508 to i32, !dbg !67
  %702 = select i1 %556, i32 %377, i32 %701, !dbg !68
  %703 = insertelement <1 x i32> poison, i32 %702, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %700, <1 x i32> %703, i1 true) #2, !dbg !67
  %704 = or disjoint i32 %631, 224, !dbg !67
  %705 = getelementptr float, ptr addrspace(3) %634, i32 %704, !dbg !67
  %706 = bitcast float %509 to i32, !dbg !67
  %707 = select i1 %557, i32 %379, i32 %706, !dbg !68
  %708 = insertelement <1 x i32> poison, i32 %707, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %705, <1 x i32> %708, i1 true) #2, !dbg !67
  %709 = or disjoint i32 %631, 240, !dbg !67
  %710 = getelementptr float, ptr addrspace(3) %634, i32 %709, !dbg !67
  %711 = bitcast float %510 to i32, !dbg !67
  %712 = select i1 %558, i32 %381, i32 %711, !dbg !68
  %713 = insertelement <1 x i32> poison, i32 %712, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %710, <1 x i32> %713, i1 true) #2, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %714 = lshr i32 %11, 6, !dbg !67
  %715 = and i32 %714, 12, !dbg !67
  %716 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %715, !dbg !67
  %717 = getelementptr inbounds float, ptr addrspace(3) %716, i32 %632, !dbg !67
  %718 = or disjoint i32 %632, 1024, !dbg !67
  %719 = lshr i32 %718, 6, !dbg !67
  %720 = and i32 %719, 28, !dbg !67
  %721 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %720, !dbg !67
  %722 = getelementptr inbounds float, ptr addrspace(3) %721, i32 %718, !dbg !67
  %723 = load <4 x i32>, ptr addrspace(3) %722, align 16, !dbg !67
  %724 = or disjoint i32 %632, 2048, !dbg !67
  %725 = lshr i32 %724, 6, !dbg !67
  %726 = and i32 %725, 44, !dbg !67
  %727 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %726, !dbg !67
  %728 = getelementptr inbounds float, ptr addrspace(3) %727, i32 %724, !dbg !67
  %729 = load <4 x i32>, ptr addrspace(3) %728, align 16, !dbg !67
  %730 = or disjoint i32 %632, 3072, !dbg !67
  %731 = lshr i32 %730, 6, !dbg !67
  %732 = and i32 %731, 60, !dbg !67
  %733 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %732, !dbg !67
  %734 = getelementptr inbounds float, ptr addrspace(3) %733, i32 %730, !dbg !67
  %735 = load <4 x i32>, ptr addrspace(3) %734, align 16, !dbg !67
  %.extract = load i32, ptr addrspace(3) %717, align 16, !dbg !67
  %736 = getelementptr inbounds i8, ptr addrspace(3) %717, i32 4, !dbg !67
  %.extract20 = load i32, ptr addrspace(3) %736, align 4, !dbg !67
  %737 = getelementptr inbounds i8, ptr addrspace(3) %717, i32 8, !dbg !67
  %.extract21 = load i32, ptr addrspace(3) %737, align 8, !dbg !67
  %738 = getelementptr inbounds i8, ptr addrspace(3) %717, i32 12, !dbg !67
  %.extract22 = load i32, ptr addrspace(3) %738, align 4, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %622, i1 %29) #2, !dbg !67
  %.extract23 = extractelement <4 x i32> %723, i64 0, !dbg !67
  %.extract24 = extractelement <4 x i32> %723, i64 1, !dbg !67
  %.extract25 = extractelement <4 x i32> %723, i64 2, !dbg !67
  %.extract26 = extractelement <4 x i32> %723, i64 3, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %624, i1 %30) #2, !dbg !67
  %.extract27 = extractelement <4 x i32> %729, i64 0, !dbg !67
  %.extract28 = extractelement <4 x i32> %729, i64 1, !dbg !67
  %.extract29 = extractelement <4 x i32> %729, i64 2, !dbg !67
  %.extract30 = extractelement <4 x i32> %729, i64 3, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %626, i1 %31) #2, !dbg !67
  %.extract31 = extractelement <4 x i32> %735, i64 0, !dbg !67
  %.extract32 = extractelement <4 x i32> %735, i64 1, !dbg !67
  %.extract33 = extractelement <4 x i32> %735, i64 2, !dbg !67
  %.extract34 = extractelement <4 x i32> %735, i64 3, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %628, i1 %32) #2, !dbg !67
  %739 = sext i32 %620 to i64, !dbg !69
  %740 = getelementptr i8, ptr addrspace(1) %2, i64 %739, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %741 = and i32 %13, 4080, !dbg !70
  %742 = getelementptr i8, ptr addrspace(3) %634, i32 %631, !dbg !70
  %743 = insertelement <1 x i8> poison, i8 %591, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %742, <1 x i8> %743, i1 true) #2, !dbg !70
  %744 = getelementptr i8, ptr addrspace(3) %634, i32 %639, !dbg !70
  %745 = insertelement <1 x i8> poison, i8 %592, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %744, <1 x i8> %745, i1 true) #2, !dbg !70
  %746 = getelementptr i8, ptr addrspace(3) %634, i32 %644, !dbg !70
  %747 = insertelement <1 x i8> poison, i8 %593, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %746, <1 x i8> %747, i1 true) #2, !dbg !70
  %748 = getelementptr i8, ptr addrspace(3) %634, i32 %649, !dbg !70
  %749 = insertelement <1 x i8> poison, i8 %594, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %748, <1 x i8> %749, i1 true) #2, !dbg !70
  %750 = getelementptr i8, ptr addrspace(3) %634, i32 %654, !dbg !70
  %751 = insertelement <1 x i8> poison, i8 %595, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %750, <1 x i8> %751, i1 true) #2, !dbg !70
  %752 = getelementptr i8, ptr addrspace(3) %634, i32 %659, !dbg !70
  %753 = insertelement <1 x i8> poison, i8 %596, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %752, <1 x i8> %753, i1 true) #2, !dbg !70
  %754 = getelementptr i8, ptr addrspace(3) %634, i32 %664, !dbg !70
  %755 = insertelement <1 x i8> poison, i8 %597, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %754, <1 x i8> %755, i1 true) #2, !dbg !70
  %756 = getelementptr i8, ptr addrspace(3) %634, i32 %669, !dbg !70
  %757 = insertelement <1 x i8> poison, i8 %598, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %756, <1 x i8> %757, i1 true) #2, !dbg !70
  %758 = getelementptr i8, ptr addrspace(3) %634, i32 %674, !dbg !70
  %759 = insertelement <1 x i8> poison, i8 %599, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %758, <1 x i8> %759, i1 true) #2, !dbg !70
  %760 = getelementptr i8, ptr addrspace(3) %634, i32 %679, !dbg !70
  %761 = insertelement <1 x i8> poison, i8 %600, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %760, <1 x i8> %761, i1 true) #2, !dbg !70
  %762 = getelementptr i8, ptr addrspace(3) %634, i32 %684, !dbg !70
  %763 = insertelement <1 x i8> poison, i8 %601, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %762, <1 x i8> %763, i1 true) #2, !dbg !70
  %764 = getelementptr i8, ptr addrspace(3) %634, i32 %689, !dbg !70
  %765 = insertelement <1 x i8> poison, i8 %602, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %764, <1 x i8> %765, i1 true) #2, !dbg !70
  %766 = getelementptr i8, ptr addrspace(3) %634, i32 %694, !dbg !70
  %767 = insertelement <1 x i8> poison, i8 %603, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %766, <1 x i8> %767, i1 true) #2, !dbg !70
  %768 = getelementptr i8, ptr addrspace(3) %634, i32 %699, !dbg !70
  %769 = insertelement <1 x i8> poison, i8 %604, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %768, <1 x i8> %769, i1 true) #2, !dbg !70
  %770 = getelementptr i8, ptr addrspace(3) %634, i32 %704, !dbg !70
  %771 = insertelement <1 x i8> poison, i8 %605, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %770, <1 x i8> %771, i1 true) #2, !dbg !70
  %772 = getelementptr i8, ptr addrspace(3) %634, i32 %709, !dbg !70
  %773 = insertelement <1 x i8> poison, i8 %606, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %772, <1 x i8> %773, i1 true) #2, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %774 = and i32 %8, 240, !dbg !70
  %775 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %774, !dbg !70
  %776 = getelementptr inbounds i8, ptr addrspace(3) %775, i32 %741, !dbg !70
  %777 = load i32, ptr addrspace(3) %776, align 16, !dbg !70
  %778 = getelementptr inbounds i8, ptr addrspace(3) %776, i32 4, !dbg !70
  %779 = load i32, ptr addrspace(3) %778, align 4, !dbg !70
  %780 = getelementptr inbounds i8, ptr addrspace(3) %776, i32 8, !dbg !70
  %781 = load i32, ptr addrspace(3) %780, align 8, !dbg !70
  %782 = getelementptr inbounds i8, ptr addrspace(3) %776, i32 12, !dbg !70
  %783 = load i32, ptr addrspace(3) %782, align 4, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %777, i32 %779, i32 %781, i32 %783, ptr addrspace(1) %740, i1 %33) #2, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciblhlcbdclcyagfffgmvt4eozwaqmdevqc4rfhfxrgmdfxxxr6h.py", directory: "inductor_cache/ib")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_20, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_20", linkageName: "triton_poi_fused_max_pool2d_with_indices_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 32, scope: !7)
!24 = !DILocation(line: 34, column: 40, scope: !7)
!25 = !DILocation(line: 34, column: 37, scope: !7)
!26 = !DILocation(line: 34, column: 49, scope: !7)
!27 = !DILocation(line: 34, column: 45, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 54, scope: !7)
!30 = !DILocation(line: 35, column: 34, scope: !7)
!31 = !DILocation(line: 35, column: 41, scope: !7)
!32 = !DILocation(line: 35, column: 49, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 58, scope: !7)
!35 = !DILocation(line: 36, column: 42, scope: !7)
!36 = !DILocation(line: 36, column: 50, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 59, scope: !7)
!39 = !DILocation(line: 37, column: 42, scope: !7)
!40 = !DILocation(line: 37, column: 50, scope: !7)
!41 = !DILocation(line: 37, column: 30, scope: !7)
!42 = !DILocation(line: 37, column: 59, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 38, column: 40, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !51)
!51 = !DILocation(line: 39, column: 40, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !51)
!53 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !51)
!54 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !51)
!55 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !56)
!56 = !DILocation(line: 40, column: 40, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !56)
!58 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !56)
!59 = !DILocation(line: 44, column: 33, scope: !7)
!60 = !DILocation(line: 47, column: 35, scope: !7)
!61 = !DILocation(line: 50, column: 35, scope: !7)
!62 = !DILocation(line: 51, column: 34, scope: !7)
!63 = !DILocation(line: 51, column: 30, scope: !7)
!64 = !DILocation(line: 51, column: 45, scope: !7)
!65 = !DILocation(line: 51, column: 39, scope: !7)
!66 = !DILocation(line: 51, column: 25, scope: !7)
!67 = !DILocation(line: 51, column: 56, scope: !7)
!68 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !56)
!69 = !DILocation(line: 52, column: 25, scope: !7)
!70 = !DILocation(line: 52, column: 57, scope: !7)
!71 = !DILocation(line: 52, column: 4, scope: !7)
