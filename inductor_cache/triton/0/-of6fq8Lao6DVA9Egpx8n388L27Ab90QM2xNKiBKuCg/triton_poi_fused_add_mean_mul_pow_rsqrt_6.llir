; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_mean_mul_pow_rsqrt_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 6, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 62, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 64, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %15 = sdiv i32 %.frozen, 4, !dbg !15
  %16 = mul i32 %15, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %.frozen4 = freeze i32 %13, !dbg !17
  %17 = sdiv i32 %.frozen4, 16, !dbg !17
  %18 = srem i32 %15, 4, !dbg !18
  %19 = mul i32 %17, 16, !dbg !19
  %.decomposed5 = sub i32 %.frozen4, %19, !dbg !19
  %20 = sext i32 %13 to i64, !dbg !20
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !20
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 %14) #3, !dbg !21
  %23 = shl nsw i32 %17, 4, !dbg !22
  %24 = add i32 %23, %.decomposed, !dbg !23
  %25 = sext i32 %24 to i64, !dbg !24
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !24
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %14) #3, !dbg !25
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !25
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !25
  %30 = bitcast i32 %28 to float, !dbg !25
  %31 = bitcast i32 %29 to float, !dbg !25
  %32 = add i32 %24, 4, !dbg !26
  %33 = sext i32 %32 to i64, !dbg !27
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !27
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %14) #3, !dbg !28
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !28
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !28
  %38 = bitcast i32 %36 to float, !dbg !28
  %39 = bitcast i32 %37 to float, !dbg !28
  %40 = add i32 %24, 8, !dbg !29
  %41 = sext i32 %40 to i64, !dbg !30
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !30
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %14) #3, !dbg !31
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !31
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !31
  %46 = bitcast i32 %44 to float, !dbg !31
  %47 = bitcast i32 %45 to float, !dbg !31
  %48 = add i32 %24, 12, !dbg !32
  %49 = sext i32 %48 to i64, !dbg !33
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !33
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %14) #3, !dbg !34
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !34
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !34
  %54 = bitcast i32 %52 to float, !dbg !34
  %55 = bitcast i32 %53 to float, !dbg !34
  %56 = sext i32 %18 to i64, !dbg !35
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !35
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %14) #3, !dbg !36
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %14) #3, !dbg !36
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !37
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %14) #3, !dbg !38
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %14) #3, !dbg !38
  %63 = sext i32 %.decomposed5 to i64, !dbg !39
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %63, !dbg !39
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %64, i1 %14) #3, !dbg !40
  %66 = fmul float %30, %30, !dbg !41
  %67 = fmul float %31, %31, !dbg !41
  %68 = fmul float %38, %38, !dbg !42
  %69 = fmul float %39, %39, !dbg !42
  %70 = fadd float %66, %68, !dbg !43
  %71 = fadd float %67, %69, !dbg !43
  %72 = fmul float %46, %46, !dbg !44
  %73 = fmul float %47, %47, !dbg !44
  %74 = fadd float %70, %72, !dbg !45
  %75 = fadd float %71, %73, !dbg !45
  %76 = fmul float %54, %54, !dbg !46
  %77 = fmul float %55, %55, !dbg !46
  %78 = fadd float %74, %76, !dbg !47
  %79 = fadd float %75, %77, !dbg !47
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %78, float 4.000000e+00) #3, !dbg !48
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float 4.000000e+00) #3, !dbg !48
  %82 = fadd float %80, 0x3F1A36E2E0000000, !dbg !49
  %83 = fadd float %81, 0x3F1A36E2E0000000, !dbg !49
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i = icmp eq i32 %84, 0, !dbg !50
  br i1 %.not.i, label %87, label %85, !dbg !50

85:                                               ; preds = %7
  %86 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %82), !dbg !50
  br label %__nv_rsqrtf.exit, !dbg !50

87:                                               ; preds = %7
  %88 = tail call float @llvm.nvvm.rsqrt.approx.f(float %82), !dbg !50
  br label %__nv_rsqrtf.exit, !dbg !50

__nv_rsqrtf.exit:                                 ; preds = %85, %87
  %.0.i = phi float [ %86, %85 ], [ %88, %87 ], !dbg !50
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i1 = icmp eq i32 %89, 0, !dbg !50
  br i1 %.not.i1, label %92, label %90, !dbg !50

90:                                               ; preds = %__nv_rsqrtf.exit
  %91 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %83), !dbg !50
  br label %__nv_rsqrtf.exit3, !dbg !50

92:                                               ; preds = %__nv_rsqrtf.exit
  %93 = tail call float @llvm.nvvm.rsqrt.approx.f(float %83), !dbg !50
  br label %__nv_rsqrtf.exit3, !dbg !50

__nv_rsqrtf.exit3:                                ; preds = %90, %92
  %.0.i2 = phi float [ %91, %90 ], [ %93, %92 ], !dbg !50
  %94 = extractvalue { i32, i32 } %65, 1, !dbg !40
  %95 = bitcast i32 %94 to float, !dbg !40
  %96 = extractvalue { i32, i32 } %65, 0, !dbg !40
  %97 = bitcast i32 %96 to float, !dbg !40
  %98 = bitcast i32 %62 to float, !dbg !38
  %99 = bitcast i32 %61 to float, !dbg !38
  %100 = bitcast i32 %59 to float, !dbg !36
  %101 = bitcast i32 %58 to float, !dbg !36
  %102 = extractvalue { i32, i32 } %22, 1, !dbg !21
  %103 = bitcast i32 %102 to float, !dbg !21
  %104 = extractvalue { i32, i32 } %22, 0, !dbg !21
  %105 = bitcast i32 %104 to float, !dbg !21
  %106 = fmul float %.0.i, %105, !dbg !51
  %107 = fmul float %.0.i2, %103, !dbg !51
  %108 = fmul float %106, %101, !dbg !52
  %109 = fmul float %107, %100, !dbg !52
  %110 = fadd float %108, %99, !dbg !53
  %111 = fadd float %109, %98, !dbg !53
  %112 = fmul float %110, %97, !dbg !54
  %113 = fmul float %111, %95, !dbg !54
  %114 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !55
  %115 = bitcast float %110 to i32, !dbg !56
  %116 = bitcast float %111 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %115, i32 %116, ptr addrspace(1) %114, i1 %14) #3, !dbg !56
  %117 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !57
  %118 = bitcast float %112 to i32, !dbg !58
  %119 = bitcast float %113 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %118, i32 %119, ptr addrspace(1) %117, i1 %14) #3, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3bae6m46l2n3sxkzrqhcjuqnazapmggaw5xgdr746x7eguedeop.py", directory: "inductor_cache/3b")
!4 = !{ptr @triton_poi_fused_add_mean_mul_pow_rsqrt_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mean_mul_pow_rsqrt_6, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mean_mul_pow_rsqrt_6", linkageName: "triton_poi_fused_add_mean_mul_pow_rsqrt_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 26, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 38, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 43, scope: !7)
!26 = !DILocation(line: 31, column: 39, scope: !7)
!27 = !DILocation(line: 31, column: 30, scope: !7)
!28 = !DILocation(line: 31, column: 47, scope: !7)
!29 = !DILocation(line: 32, column: 39, scope: !7)
!30 = !DILocation(line: 32, column: 30, scope: !7)
!31 = !DILocation(line: 32, column: 47, scope: !7)
!32 = !DILocation(line: 33, column: 40, scope: !7)
!33 = !DILocation(line: 33, column: 30, scope: !7)
!34 = !DILocation(line: 33, column: 48, scope: !7)
!35 = !DILocation(line: 34, column: 31, scope: !7)
!36 = !DILocation(line: 34, column: 36, scope: !7)
!37 = !DILocation(line: 35, column: 31, scope: !7)
!38 = !DILocation(line: 35, column: 36, scope: !7)
!39 = !DILocation(line: 36, column: 31, scope: !7)
!40 = !DILocation(line: 36, column: 36, scope: !7)
!41 = !DILocation(line: 37, column: 18, scope: !7)
!42 = !DILocation(line: 38, column: 18, scope: !7)
!43 = !DILocation(line: 39, column: 18, scope: !7)
!44 = !DILocation(line: 40, column: 18, scope: !7)
!45 = !DILocation(line: 41, column: 18, scope: !7)
!46 = !DILocation(line: 42, column: 19, scope: !7)
!47 = !DILocation(line: 43, column: 19, scope: !7)
!48 = !DILocation(line: 45, column: 20, scope: !7)
!49 = !DILocation(line: 47, column: 20, scope: !7)
!50 = !DILocation(line: 48, column: 28, scope: !7)
!51 = !DILocation(line: 49, column: 19, scope: !7)
!52 = !DILocation(line: 50, column: 20, scope: !7)
!53 = !DILocation(line: 51, column: 20, scope: !7)
!54 = !DILocation(line: 52, column: 20, scope: !7)
!55 = !DILocation(line: 53, column: 25, scope: !7)
!56 = !DILocation(line: 53, column: 37, scope: !7)
!57 = !DILocation(line: 54, column: 25, scope: !7)
!58 = !DILocation(line: 54, column: 37, scope: !7)
!59 = !DILocation(line: 54, column: 4, scope: !7)
