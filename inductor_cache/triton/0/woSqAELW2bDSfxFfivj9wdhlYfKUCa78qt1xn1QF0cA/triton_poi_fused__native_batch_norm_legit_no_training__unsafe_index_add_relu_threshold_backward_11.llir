; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %14 = shl i32 %13, 6, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 62, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = icmp slt i32 %18, 512, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %21 = shl i32 %20, 2, !dbg !16
  %22 = lshr i32 %15, 5, !dbg !17
  %23 = and i32 %22, 3, !dbg !17
  %24 = or disjoint i32 %21, %23, !dbg !18
  %25 = icmp slt i32 %24, 4, !dbg !19
  %.frozen = freeze i32 %18, !dbg !20
  %26 = sdiv i32 %.frozen, 128, !dbg !20
  %27 = mul i32 %26, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %27, !dbg !21
  %.frozen9 = freeze i32 %24, !dbg !22
  %28 = sdiv i32 %.frozen9, 2, !dbg !22
  %29 = mul i32 %28, 2, !dbg !23
  %.decomposed10 = sub i32 %.frozen9, %29, !dbg !23
  %30 = shl i32 %24, 7, !dbg !24
  %31 = add i32 %30, %.decomposed, !dbg !25
  %32 = shl i32 %26, 9, !dbg !26
  %33 = add i32 %31, %32, !dbg !27
  %34 = sext i32 %33 to i64, !dbg !28
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !28
  %36 = and i1 %19, %25, !dbg !29
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %36) #4, !dbg !30
  %38 = sext i32 %.decomposed to i64, !dbg !31
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !31
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 %19) #4, !dbg !32
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !33
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %19) #4, !dbg !34
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !34
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !34
  %45 = bitcast i32 %43 to float, !dbg !34
  %46 = bitcast i32 %44 to float, !dbg !34
  %47 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !35
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 %19) #4, !dbg !36
  %49 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !37
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 %19) #4, !dbg !38
  %51 = sext i32 %28 to i64, !dbg !39
  %52 = getelementptr i64, ptr addrspace(1) %5, i64 %51, !dbg !39
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %52, i1 %25) #4, !dbg !40
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %52, i1 %25) #4, !dbg !40
  %55 = sext i32 %.decomposed10 to i64, !dbg !41
  %56 = getelementptr i64, ptr addrspace(1) %5, i64 %55, !dbg !41
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 %25) #4, !dbg !42
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 %25) #4, !dbg !42
  %59 = fadd float %45, 0x3EE4F8B580000000, !dbg !43
  %60 = fadd float %46, 0x3EE4F8B580000000, !dbg !43
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i = icmp eq i32 %61, 0, !dbg !44
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !44
  %.not1.i = icmp eq i32 %62, 0, !dbg !44
  br i1 %.not.i, label %68, label %63, !dbg !44

63:                                               ; preds = %12
  br i1 %.not1.i, label %66, label %64, !dbg !44

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

68:                                               ; preds = %12
  br i1 %.not1.i, label %71, label %69, !dbg !44

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

__nv_sqrtf.exit:                                  ; preds = %64, %66, %69, %71
  %.0.i = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !44
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i4 = icmp eq i32 %73, 0, !dbg !44
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !44
  %.not1.i7 = icmp eq i32 %74, 0, !dbg !44
  br i1 %.not.i4, label %80, label %75, !dbg !44

75:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %78, label %76, !dbg !44

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #4, !dbg !44
  br label %__nv_sqrtf.exit8, !dbg !44

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #4, !dbg !44
  br label %__nv_sqrtf.exit8, !dbg !44

80:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %83, label %81, !dbg !44

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #4, !dbg !44
  br label %__nv_sqrtf.exit8, !dbg !44

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #4, !dbg !44
  br label %__nv_sqrtf.exit8, !dbg !44

__nv_sqrtf.exit8:                                 ; preds = %76, %78, %81, %83
  %.0.i6 = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !44
  %85 = extractvalue { i32, i32 } %37, 1, !dbg !30
  %86 = extractvalue { i32, i32 } %40, 1, !dbg !32
  %87 = extractvalue { i32, i32 } %37, 0, !dbg !30
  %88 = extractvalue { i32, i32 } %40, 0, !dbg !32
  %89 = extractvalue { i32, i32 } %50, 1, !dbg !38
  %90 = extractvalue { i32, i32 } %50, 0, !dbg !38
  %91 = extractvalue { i32, i32 } %48, 1, !dbg !36
  %92 = extractvalue { i32, i32 } %48, 0, !dbg !36
  %93 = and i32 %16, 2, !dbg !12
  %94 = or disjoint i32 %21, %93, !dbg !18
  %95 = icmp slt i32 %94, 4, !dbg !19
  %96 = lshr i32 %15, 1, !dbg !12
  %97 = and i32 %96, 63, !dbg !12
  %98 = or disjoint i32 %14, %97, !dbg !13
  %99 = icmp slt i32 %98, 512, !dbg !14
  %100 = and i1 %99, %95, !dbg !29
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !45
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #4, !dbg !45
  %103 = lshr i64 %54, 57, !dbg !46
  %104 = and i64 %103, 64, !dbg !46
  %105 = add i64 %104, %54, !dbg !46
  %106 = lshr i64 %58, 57, !dbg !47
  %107 = and i64 %106, 64, !dbg !47
  %108 = add i64 %107, %58, !dbg !47
  %109 = shl i32 %26, 19, !dbg !48
  %110 = sext i32 %109 to i64, !dbg !49
  %.idx = shl i64 %108, 9, !dbg !50
  %111 = getelementptr i8, ptr addrspace(1) %6, i64 %.idx, !dbg !50
  %112 = getelementptr float, ptr addrspace(1) %111, i64 %38, !dbg !50
  %.idx3 = shl i64 %105, 15, !dbg !50
  %113 = getelementptr i8, ptr addrspace(1) %112, i64 %.idx3, !dbg !50
  %114 = getelementptr float, ptr addrspace(1) %113, i64 %110, !dbg !50
  %115 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %114, i1 %36) #4, !dbg !51
  %116 = extractvalue { i32, i32 } %115, 0, !dbg !51
  %117 = extractvalue { i32, i32 } %115, 1, !dbg !51
  %118 = bitcast i32 %116 to float, !dbg !51
  %119 = bitcast i32 %117 to float, !dbg !51
  %120 = shl i32 %98, 2, !dbg !52
  %121 = add i32 %94, %120, !dbg !53
  %122 = sext i32 %121 to i64, !dbg !54
  %123 = getelementptr float, ptr addrspace(1) %7, i64 %122, !dbg !54
  %124 = shl i32 %15, 3, !dbg !55
  %125 = and i32 %124, 248, !dbg !55
  %126 = or disjoint i32 %125, %23, !dbg !55
  %127 = and i32 %16, 254, !dbg !55
  %128 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %125, !dbg !55
  %129 = getelementptr inbounds float, ptr addrspace(3) %128, i32 %126, !dbg !55
  %130 = or disjoint i32 %126, 4, !dbg !55
  %131 = lshr i32 %130, 2, !dbg !55
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i32 %131, !dbg !55
  %133 = getelementptr float, ptr addrspace(3) %132, i32 %130, !dbg !55
  %134 = lshr i32 %127, 2, !dbg !55
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %134, !dbg !55
  %136 = getelementptr inbounds float, ptr addrspace(3) %135, i32 %127, !dbg !55
  %137 = or disjoint i32 %127, 1, !dbg !55
  %138 = getelementptr inbounds float, ptr addrspace(3) %135, i32 %137, !dbg !55
  %139 = getelementptr float, ptr addrspace(1) %8, i64 %34, !dbg !56
  %140 = getelementptr i1, ptr addrspace(1) %9, i64 %34, !dbg !57
  %141 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !30
  %142 = insertelement <2 x i32> %141, i32 %85, i64 1, !dbg !30
  %143 = bitcast <2 x i32> %142 to <2 x float>, !dbg !30
  %144 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !32
  %145 = insertelement <2 x i32> %144, i32 %86, i64 1, !dbg !32
  %146 = bitcast <2 x i32> %145 to <2 x float>, !dbg !32
  %147 = fsub <2 x float> %143, %146, !dbg !58
  %148 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !38
  %149 = insertelement <2 x i32> %148, i32 %89, i64 1, !dbg !38
  %150 = bitcast <2 x i32> %149 to <2 x float>, !dbg !38
  %151 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !36
  %152 = insertelement <2 x i32> %151, i32 %91, i64 1, !dbg !36
  %153 = bitcast <2 x i32> %152 to <2 x float>, !dbg !36
  %154 = insertelement <2 x float> poison, float %101, i64 0, !dbg !59
  %155 = insertelement <2 x float> %154, float %102, i64 1, !dbg !59
  %156 = fmul <2 x float> %147, %155, !dbg !59
  %157 = fmul <2 x float> %156, %153, !dbg !60
  %158 = fadd <2 x float> %157, %150, !dbg !61
  %159 = fcmp olt <2 x float> %158, zeroinitializer, !dbg !62
  %160 = select <2 x i1> %159, <2 x float> zeroinitializer, <2 x float> %158, !dbg !66
  %161 = extractelement <2 x float> %160, i64 0, !dbg !55
  %162 = fadd float %161, %118, !dbg !67
  %163 = extractelement <2 x float> %160, i64 1, !dbg !55
  %164 = fadd float %163, %119, !dbg !67
  %165 = fcmp ole <2 x float> %160, zeroinitializer, !dbg !68
  %166 = bitcast float %161 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %166, i1 true) #4, !dbg !55
  %167 = bitcast float %163 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %167, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %168 = load i32, ptr addrspace(3) %136, align 4, !dbg !55
  %169 = load i32, ptr addrspace(3) %138, align 4, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %168, i32 %169, ptr addrspace(1) %123, i1 %100) #4, !dbg !55
  %170 = bitcast float %162 to i32, !dbg !69
  %171 = bitcast float %164 to i32, !dbg !69
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %170, i32 %171, ptr addrspace(1) %139, i1 %36) #4, !dbg !69
  %172 = zext <2 x i1> %165 to <2 x i8>, !dbg !70
  %173 = bitcast <2 x i8> %172 to i16, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %173, ptr addrspace(1) %140, i1 %36) #4, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py", directory: "inductor_cache/it")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 33, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 48, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 61, scope: !7)
!30 = !DILocation(line: 34, column: 53, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 35, scope: !7)
!33 = !DILocation(line: 36, column: 30, scope: !7)
!34 = !DILocation(line: 36, column: 35, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 31, scope: !7)
!38 = !DILocation(line: 38, column: 36, scope: !7)
!39 = !DILocation(line: 39, column: 31, scope: !7)
!40 = !DILocation(line: 39, column: 36, scope: !7)
!41 = !DILocation(line: 40, column: 31, scope: !7)
!42 = !DILocation(line: 40, column: 36, scope: !7)
!43 = !DILocation(line: 43, column: 18, scope: !7)
!44 = !DILocation(line: 44, column: 26, scope: !7)
!45 = !DILocation(line: 46, column: 18, scope: !7)
!46 = !DILocation(line: 57, column: 35, scope: !7)
!47 = !DILocation(line: 60, column: 35, scope: !7)
!48 = !DILocation(line: 61, column: 68, scope: !7)
!49 = !DILocation(line: 61, column: 61, scope: !7)
!50 = !DILocation(line: 61, column: 31, scope: !7)
!51 = !DILocation(line: 61, column: 73, scope: !7)
!52 = !DILocation(line: 65, column: 32, scope: !7)
!53 = !DILocation(line: 65, column: 30, scope: !7)
!54 = !DILocation(line: 65, column: 25, scope: !7)
!55 = !DILocation(line: 65, column: 44, scope: !7)
!56 = !DILocation(line: 66, column: 25, scope: !7)
!57 = !DILocation(line: 67, column: 25, scope: !7)
!58 = !DILocation(line: 41, column: 18, scope: !7)
!59 = !DILocation(line: 49, column: 19, scope: !7)
!60 = !DILocation(line: 50, column: 20, scope: !7)
!61 = !DILocation(line: 51, column: 20, scope: !7)
!62 = !DILocation(line: 118, column: 15, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlockFile(scope: !7, file: !64, discriminator: 0)
!64 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!65 = !DILocation(line: 53, column: 42, scope: !7)
!66 = !DILocation(line: 121, column: 29, scope: !63, inlinedAt: !65)
!67 = !DILocation(line: 62, column: 20, scope: !7)
!68 = !DILocation(line: 64, column: 21, scope: !7)
!69 = !DILocation(line: 66, column: 55, scope: !7)
!70 = !DILocation(line: 67, column: 55, scope: !7)
!71 = !DILocation(line: 67, column: 4, scope: !7)
