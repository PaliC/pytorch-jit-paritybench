; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_35(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, i32 %17) local_unnamed_addr !dbg !7 {
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %20 = shl i32 %19, 8, !dbg !11
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %22 = shl i32 %21, 1, !dbg !12
  %23 = and i32 %22, 254, !dbg !12
  %24 = or disjoint i32 %20, %23, !dbg !13
  %25 = or disjoint i32 %24, 1, !dbg !13
  %26 = icmp slt i32 %24, 8960, !dbg !14
  %.frozen = freeze i32 %24, !dbg !15
  %27 = sdiv i32 %.frozen, 2240, !dbg !15
  %28 = mul i32 %27, 2240, !dbg !16
  %.decomposed = sub i32 %.frozen, %28, !dbg !16
  %29 = srem i32 %25, 2240, !dbg !16
  %30 = icmp slt i32 %.decomposed, 900, !dbg !17
  %31 = mul nsw i32 %27, 900, !dbg !18
  %.lhs.trunc = trunc nsw i32 %.decomposed to i16, !dbg !19
  %32 = srem i16 %.lhs.trunc, 900, !dbg !19
  %.sext = sext i16 %32 to i32, !dbg !19
  %.lhs.trunc1 = trunc nsw i32 %29 to i16, !dbg !19
  %33 = srem i16 %.lhs.trunc1, 900, !dbg !19
  %.sext2 = sext i16 %33 to i32, !dbg !19
  %34 = add nsw i32 %31, %.sext, !dbg !20
  %35 = add nsw i32 %31, %.sext2, !dbg !20
  %36 = sext i32 %34 to i64, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !21
  %38 = sext i32 %35 to i64, !dbg !21
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !21
  %40 = and i1 %26, %30, !dbg !22
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %40, i32 0, i1 %40) #1, !dbg !23
  %42 = bitcast i32 %41 to float, !dbg !23
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %40, i32 0, i1 %40) #1, !dbg !23
  %44 = bitcast i32 %43 to float, !dbg !23
  %45 = srem i16 %.lhs.trunc, 4, !dbg !24
  %46 = srem i16 %.lhs.trunc1, 4, !dbg !24
  %47 = sext i16 %45 to i64, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !25
  %49 = sext i16 %46 to i64, !dbg !25
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !25
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %40, i32 0, i1 %40) #1, !dbg !26
  %52 = bitcast i32 %51 to float, !dbg !26
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %40, i32 0, i1 %40) #1, !dbg !26
  %54 = bitcast i32 %53 to float, !dbg !26
  %55 = fadd float %42, %52, !dbg !27
  %56 = fadd float %44, %54, !dbg !27
  %57 = add nsw i32 %.decomposed, -900, !dbg !28
  %58 = icmp ult i32 %57, 900, !dbg !28
  %.lhs.trunc7 = trunc nsw i32 %57 to i16, !dbg !29
  %59 = srem i16 %.lhs.trunc7, 900, !dbg !29
  %.sext8 = sext i16 %59 to i32, !dbg !29
  %60 = trunc nsw i32 %29 to i16, !dbg !29
  %.lhs.trunc9 = add nsw i16 %60, -900, !dbg !29
  %61 = srem i16 %.lhs.trunc9, 900, !dbg !29
  %.sext10 = sext i16 %61 to i32, !dbg !29
  %62 = add nsw i32 %31, %.sext8, !dbg !30
  %63 = add nsw i32 %31, %.sext10, !dbg !30
  %64 = sext i32 %62 to i64, !dbg !31
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !31
  %66 = sext i32 %63 to i64, !dbg !31
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !31
  %68 = and i1 %26, %58, !dbg !32
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %68, i32 0, i1 %68) #1, !dbg !33
  %70 = bitcast i32 %69 to float, !dbg !33
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %68, i32 0, i1 %68) #1, !dbg !33
  %72 = bitcast i32 %71 to float, !dbg !33
  %73 = srem i16 %.lhs.trunc7, 4, !dbg !34
  %74 = srem i16 %.lhs.trunc9, 4, !dbg !34
  %75 = sext i16 %73 to i64, !dbg !35
  %76 = getelementptr float, ptr addrspace(1) %3, i64 %75, !dbg !35
  %77 = sext i16 %74 to i64, !dbg !35
  %78 = getelementptr float, ptr addrspace(1) %3, i64 %77, !dbg !35
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %68, i32 0, i1 %68) #1, !dbg !36
  %80 = bitcast i32 %79 to float, !dbg !36
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %68, i32 0, i1 %68) #1, !dbg !36
  %82 = bitcast i32 %81 to float, !dbg !36
  %83 = fadd float %70, %80, !dbg !37
  %84 = fadd float %72, %82, !dbg !37
  %85 = add nsw i32 %.decomposed, -1800, !dbg !38
  %86 = icmp ult i32 %85, 196, !dbg !38
  %87 = mul nsw i32 %27, 196, !dbg !39
  %.lhs.trunc15 = trunc nsw i32 %85 to i16, !dbg !40
  %88 = srem i16 %.lhs.trunc15, 196, !dbg !40
  %.sext16 = sext i16 %88 to i32, !dbg !40
  %89 = trunc nsw i32 %29 to i16, !dbg !40
  %.lhs.trunc17 = add nsw i16 %89, -1800, !dbg !40
  %90 = srem i16 %.lhs.trunc17, 196, !dbg !40
  %.sext18 = sext i16 %90 to i32, !dbg !40
  %91 = add nsw i32 %87, %.sext16, !dbg !41
  %92 = add nsw i32 %87, %.sext18, !dbg !41
  %93 = sext i32 %91 to i64, !dbg !42
  %94 = getelementptr float, ptr addrspace(1) %4, i64 %93, !dbg !42
  %95 = sext i32 %92 to i64, !dbg !42
  %96 = getelementptr float, ptr addrspace(1) %4, i64 %95, !dbg !42
  %97 = and i1 %26, %86, !dbg !43
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %97, i32 0, i1 %97) #1, !dbg !44
  %99 = bitcast i32 %98 to float, !dbg !44
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %97, i32 0, i1 %97) #1, !dbg !44
  %101 = bitcast i32 %100 to float, !dbg !44
  %102 = srem i16 %.lhs.trunc15, 4, !dbg !45
  %103 = srem i16 %.lhs.trunc17, 4, !dbg !45
  %104 = sext i16 %102 to i64, !dbg !46
  %105 = getelementptr float, ptr addrspace(1) %5, i64 %104, !dbg !46
  %106 = sext i16 %103 to i64, !dbg !46
  %107 = getelementptr float, ptr addrspace(1) %5, i64 %106, !dbg !46
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %97, i32 0, i1 %97) #1, !dbg !47
  %109 = bitcast i32 %108 to float, !dbg !47
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %97, i32 0, i1 %97) #1, !dbg !47
  %111 = bitcast i32 %110 to float, !dbg !47
  %112 = fadd float %99, %109, !dbg !48
  %113 = fadd float %101, %111, !dbg !48
  %114 = add nsw i32 %.decomposed, -1996, !dbg !49
  %115 = icmp ult i32 %114, 196, !dbg !49
  %.lhs.trunc23 = trunc nsw i32 %114 to i16, !dbg !50
  %116 = srem i16 %.lhs.trunc23, 196, !dbg !50
  %.sext24 = sext i16 %116 to i32, !dbg !50
  %117 = trunc nsw i32 %29 to i16, !dbg !50
  %.lhs.trunc25 = add nsw i16 %117, -1996, !dbg !50
  %118 = srem i16 %.lhs.trunc25, 196, !dbg !50
  %.sext26 = sext i16 %118 to i32, !dbg !50
  %119 = add nsw i32 %87, %.sext24, !dbg !51
  %120 = add nsw i32 %87, %.sext26, !dbg !51
  %121 = sext i32 %119 to i64, !dbg !52
  %122 = getelementptr float, ptr addrspace(1) %6, i64 %121, !dbg !52
  %123 = sext i32 %120 to i64, !dbg !52
  %124 = getelementptr float, ptr addrspace(1) %6, i64 %123, !dbg !52
  %125 = and i1 %26, %115, !dbg !53
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %125, i32 0, i1 %125) #1, !dbg !54
  %127 = bitcast i32 %126 to float, !dbg !54
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %125, i32 0, i1 %125) #1, !dbg !54
  %129 = bitcast i32 %128 to float, !dbg !54
  %130 = srem i16 %.lhs.trunc23, 4, !dbg !55
  %131 = srem i16 %.lhs.trunc25, 4, !dbg !55
  %132 = sext i16 %130 to i64, !dbg !56
  %133 = getelementptr float, ptr addrspace(1) %7, i64 %132, !dbg !56
  %134 = sext i16 %131 to i64, !dbg !56
  %135 = getelementptr float, ptr addrspace(1) %7, i64 %134, !dbg !56
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %125, i32 0, i1 %125) #1, !dbg !57
  %137 = bitcast i32 %136 to float, !dbg !57
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 %125, i32 0, i1 %125) #1, !dbg !57
  %139 = bitcast i32 %138 to float, !dbg !57
  %140 = fadd float %127, %137, !dbg !58
  %141 = fadd float %129, %139, !dbg !58
  %142 = add nsw i32 %.decomposed, -2192, !dbg !59
  %143 = icmp ult i32 %142, 36, !dbg !59
  %144 = mul nsw i32 %27, 36, !dbg !60
  %.lhs.trunc31 = trunc nsw i32 %142 to i16, !dbg !61
  %145 = srem i16 %.lhs.trunc31, 36, !dbg !61
  %.sext32 = sext i16 %145 to i32, !dbg !61
  %146 = trunc nsw i32 %29 to i16, !dbg !61
  %.lhs.trunc33 = add nsw i16 %146, -2192, !dbg !61
  %147 = srem i16 %.lhs.trunc33, 36, !dbg !61
  %.sext34 = sext i16 %147 to i32, !dbg !61
  %148 = add nsw i32 %144, %.sext32, !dbg !62
  %149 = add nsw i32 %144, %.sext34, !dbg !62
  %150 = sext i32 %148 to i64, !dbg !63
  %151 = getelementptr float, ptr addrspace(1) %8, i64 %150, !dbg !63
  %152 = sext i32 %149 to i64, !dbg !63
  %153 = getelementptr float, ptr addrspace(1) %8, i64 %152, !dbg !63
  %154 = and i1 %26, %143, !dbg !64
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %151, i1 %154, i32 0, i1 %154) #1, !dbg !65
  %156 = bitcast i32 %155 to float, !dbg !65
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %154, i32 0, i1 %154) #1, !dbg !65
  %158 = bitcast i32 %157 to float, !dbg !65
  %159 = srem i16 %.lhs.trunc31, 4, !dbg !66
  %160 = srem i16 %.lhs.trunc33, 4, !dbg !66
  %161 = sext i16 %159 to i64, !dbg !67
  %162 = getelementptr float, ptr addrspace(1) %9, i64 %161, !dbg !67
  %163 = sext i16 %160 to i64, !dbg !67
  %164 = getelementptr float, ptr addrspace(1) %9, i64 %163, !dbg !67
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %162, i1 %154, i32 0, i1 %154) #1, !dbg !68
  %166 = bitcast i32 %165 to float, !dbg !68
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %164, i1 %154, i32 0, i1 %154) #1, !dbg !68
  %168 = bitcast i32 %167 to float, !dbg !68
  %169 = fadd float %156, %166, !dbg !69
  %170 = fadd float %158, %168, !dbg !69
  %171 = and i32 %.decomposed, -4, !dbg !70
  %172 = icmp eq i32 %171, 2228, !dbg !70
  %173 = shl nsw i32 %27, 2, !dbg !71
  %174 = add nsw i32 %.decomposed, -2228, !dbg !72
  %175 = add nsw i32 %173, %174, !dbg !73
  %176 = sext i32 %175 to i64, !dbg !74
  %177 = getelementptr float, ptr addrspace(1) %10, i64 %176, !dbg !74
  %178 = and i1 %26, %172, !dbg !75
  %179 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %177, i1 %178, i32 0, i1 %178, i32 0, i1 %178) #1, !dbg !76
  %180 = extractvalue { i32, i32 } %179, 0, !dbg !76
  %181 = extractvalue { i32, i32 } %179, 1, !dbg !76
  %182 = bitcast i32 %180 to float, !dbg !76
  %183 = bitcast i32 %181 to float, !dbg !76
  %184 = sext i32 %174 to i64, !dbg !77
  %185 = getelementptr float, ptr addrspace(1) %11, i64 %184, !dbg !77
  %186 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %185, i1 %178, i32 0, i1 %178, i32 0, i1 %178) #1, !dbg !78
  %187 = extractvalue { i32, i32 } %186, 0, !dbg !78
  %188 = extractvalue { i32, i32 } %186, 1, !dbg !78
  %189 = bitcast i32 %187 to float, !dbg !78
  %190 = bitcast i32 %188 to float, !dbg !78
  %191 = fadd float %182, %189, !dbg !79
  %192 = fadd float %183, %190, !dbg !79
  %193 = icmp eq i32 %171, 2232, !dbg !80
  %194 = add nsw i32 %.decomposed, -2232, !dbg !81
  %195 = add nsw i32 %173, %194, !dbg !82
  %196 = sext i32 %195 to i64, !dbg !83
  %197 = getelementptr float, ptr addrspace(1) %12, i64 %196, !dbg !83
  %198 = and i1 %26, %193, !dbg !84
  %199 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %197, i1 %198, i32 0, i1 %198, i32 0, i1 %198) #1, !dbg !85
  %200 = extractvalue { i32, i32 } %199, 0, !dbg !85
  %201 = extractvalue { i32, i32 } %199, 1, !dbg !85
  %202 = bitcast i32 %200 to float, !dbg !85
  %203 = bitcast i32 %201 to float, !dbg !85
  %204 = sext i32 %194 to i64, !dbg !86
  %205 = getelementptr float, ptr addrspace(1) %13, i64 %204, !dbg !86
  %206 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %205, i1 %198, i32 0, i1 %198, i32 0, i1 %198) #1, !dbg !87
  %207 = extractvalue { i32, i32 } %206, 0, !dbg !87
  %208 = extractvalue { i32, i32 } %206, 1, !dbg !87
  %209 = bitcast i32 %207 to float, !dbg !87
  %210 = bitcast i32 %208 to float, !dbg !87
  %211 = fadd float %202, %209, !dbg !88
  %212 = fadd float %203, %210, !dbg !88
  %213 = icmp sgt i32 %.decomposed, 2235, !dbg !89
  %214 = add nsw i32 %.decomposed, -2236, !dbg !90
  %215 = add nsw i32 %173, %214, !dbg !91
  %216 = sext i32 %215 to i64, !dbg !92
  %217 = getelementptr float, ptr addrspace(1) %14, i64 %216, !dbg !92
  %218 = and i1 %26, %213, !dbg !93
  %219 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %217, i1 %218, i32 0, i1 %218, i32 0, i1 %218) #1, !dbg !94
  %220 = extractvalue { i32, i32 } %219, 0, !dbg !94
  %221 = extractvalue { i32, i32 } %219, 1, !dbg !94
  %222 = bitcast i32 %220 to float, !dbg !94
  %223 = bitcast i32 %221 to float, !dbg !94
  %224 = sext i32 %214 to i64, !dbg !95
  %225 = getelementptr float, ptr addrspace(1) %15, i64 %224, !dbg !95
  %226 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %225, i1 %218, i32 0, i1 %218, i32 0, i1 %218) #1, !dbg !96
  %227 = extractvalue { i32, i32 } %226, 0, !dbg !96
  %228 = extractvalue { i32, i32 } %226, 1, !dbg !96
  %229 = bitcast i32 %227 to float, !dbg !96
  %230 = bitcast i32 %228 to float, !dbg !96
  %231 = fadd float %222, %229, !dbg !97
  %232 = fadd float %223, %230, !dbg !97
  %233 = select i1 %213, float %231, float 0.000000e+00, !dbg !98
  %234 = select i1 %213, float %232, float 0.000000e+00, !dbg !98
  %235 = select i1 %193, float %211, float %233, !dbg !99
  %236 = select i1 %193, float %212, float %234, !dbg !99
  %237 = select i1 %172, float %191, float %235, !dbg !99
  %238 = select i1 %172, float %192, float %236, !dbg !99
  %239 = select i1 %143, float %169, float %237, !dbg !99
  %240 = select i1 %143, float %170, float %238, !dbg !99
  %241 = select i1 %115, float %140, float %239, !dbg !99
  %242 = select i1 %115, float %141, float %240, !dbg !99
  %243 = select i1 %86, float %112, float %241, !dbg !99
  %244 = select i1 %86, float %113, float %242, !dbg !99
  %245 = select i1 %58, float %83, float %243, !dbg !99
  %246 = select i1 %58, float %84, float %244, !dbg !99
  %247 = select i1 %30, float %55, float %245, !dbg !99
  %248 = select i1 %30, float %56, float %246, !dbg !99
  %249 = sext i32 %24 to i64, !dbg !100
  %250 = getelementptr float, ptr addrspace(1) %16, i64 %249, !dbg !100
  %251 = bitcast float %247 to i32, !dbg !101
  %252 = bitcast float %248 to i32, !dbg !101
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %251, i32 %252, ptr addrspace(1) %250, i1 %26) #1, !dbg !101
  ret void, !dbg !102
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdfupmsjaf7v5t2sjyvhklmrumujrtpa2i2lfnzptknblzwnsvas.py", directory: "inductor_cache/df")
!4 = !{ptr @triton_poi_fused_cat_35, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_35, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_35", linkageName: "triton_poi_fused_cat_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 18, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 48, scope: !7)
!20 = !DILocation(line: 32, column: 41, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 63, scope: !7)
!23 = !DILocation(line: 32, column: 56, scope: !7)
!24 = !DILocation(line: 33, column: 38, scope: !7)
!25 = !DILocation(line: 33, column: 31, scope: !7)
!26 = !DILocation(line: 33, column: 43, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 40, column: 20, scope: !7)
!29 = !DILocation(line: 41, column: 58, scope: !7)
!30 = !DILocation(line: 41, column: 42, scope: !7)
!31 = !DILocation(line: 41, column: 31, scope: !7)
!32 = !DILocation(line: 41, column: 74, scope: !7)
!33 = !DILocation(line: 41, column: 66, scope: !7)
!34 = !DILocation(line: 42, column: 48, scope: !7)
!35 = !DILocation(line: 42, column: 32, scope: !7)
!36 = !DILocation(line: 42, column: 53, scope: !7)
!37 = !DILocation(line: 43, column: 20, scope: !7)
!38 = !DILocation(line: 49, column: 20, scope: !7)
!39 = !DILocation(line: 50, column: 35, scope: !7)
!40 = !DILocation(line: 50, column: 59, scope: !7)
!41 = !DILocation(line: 50, column: 42, scope: !7)
!42 = !DILocation(line: 50, column: 31, scope: !7)
!43 = !DILocation(line: 50, column: 75, scope: !7)
!44 = !DILocation(line: 50, column: 67, scope: !7)
!45 = !DILocation(line: 51, column: 49, scope: !7)
!46 = !DILocation(line: 51, column: 32, scope: !7)
!47 = !DILocation(line: 51, column: 54, scope: !7)
!48 = !DILocation(line: 52, column: 20, scope: !7)
!49 = !DILocation(line: 58, column: 20, scope: !7)
!50 = !DILocation(line: 59, column: 59, scope: !7)
!51 = !DILocation(line: 59, column: 42, scope: !7)
!52 = !DILocation(line: 59, column: 31, scope: !7)
!53 = !DILocation(line: 59, column: 75, scope: !7)
!54 = !DILocation(line: 59, column: 67, scope: !7)
!55 = !DILocation(line: 60, column: 49, scope: !7)
!56 = !DILocation(line: 60, column: 32, scope: !7)
!57 = !DILocation(line: 60, column: 54, scope: !7)
!58 = !DILocation(line: 61, column: 20, scope: !7)
!59 = !DILocation(line: 67, column: 20, scope: !7)
!60 = !DILocation(line: 68, column: 34, scope: !7)
!61 = !DILocation(line: 68, column: 58, scope: !7)
!62 = !DILocation(line: 68, column: 41, scope: !7)
!63 = !DILocation(line: 68, column: 31, scope: !7)
!64 = !DILocation(line: 68, column: 73, scope: !7)
!65 = !DILocation(line: 68, column: 65, scope: !7)
!66 = !DILocation(line: 69, column: 49, scope: !7)
!67 = !DILocation(line: 69, column: 32, scope: !7)
!68 = !DILocation(line: 69, column: 54, scope: !7)
!69 = !DILocation(line: 70, column: 20, scope: !7)
!70 = !DILocation(line: 76, column: 20, scope: !7)
!71 = !DILocation(line: 77, column: 34, scope: !7)
!72 = !DILocation(line: 77, column: 50, scope: !7)
!73 = !DILocation(line: 77, column: 40, scope: !7)
!74 = !DILocation(line: 77, column: 32, scope: !7)
!75 = !DILocation(line: 77, column: 64, scope: !7)
!76 = !DILocation(line: 77, column: 56, scope: !7)
!77 = !DILocation(line: 78, column: 32, scope: !7)
!78 = !DILocation(line: 78, column: 47, scope: !7)
!79 = !DILocation(line: 79, column: 20, scope: !7)
!80 = !DILocation(line: 85, column: 20, scope: !7)
!81 = !DILocation(line: 86, column: 50, scope: !7)
!82 = !DILocation(line: 86, column: 40, scope: !7)
!83 = !DILocation(line: 86, column: 32, scope: !7)
!84 = !DILocation(line: 86, column: 64, scope: !7)
!85 = !DILocation(line: 86, column: 56, scope: !7)
!86 = !DILocation(line: 87, column: 32, scope: !7)
!87 = !DILocation(line: 87, column: 47, scope: !7)
!88 = !DILocation(line: 88, column: 20, scope: !7)
!89 = !DILocation(line: 91, column: 20, scope: !7)
!90 = !DILocation(line: 94, column: 50, scope: !7)
!91 = !DILocation(line: 94, column: 40, scope: !7)
!92 = !DILocation(line: 94, column: 32, scope: !7)
!93 = !DILocation(line: 94, column: 64, scope: !7)
!94 = !DILocation(line: 94, column: 56, scope: !7)
!95 = !DILocation(line: 95, column: 32, scope: !7)
!96 = !DILocation(line: 95, column: 47, scope: !7)
!97 = !DILocation(line: 96, column: 20, scope: !7)
!98 = !DILocation(line: 98, column: 35, scope: !7)
!99 = !DILocation(line: 0, scope: !7)
!100 = !DILocation(line: 106, column: 25, scope: !7)
!101 = !DILocation(line: 106, column: 37, scope: !7)
!102 = !DILocation(line: 106, column: 4, scope: !7)
