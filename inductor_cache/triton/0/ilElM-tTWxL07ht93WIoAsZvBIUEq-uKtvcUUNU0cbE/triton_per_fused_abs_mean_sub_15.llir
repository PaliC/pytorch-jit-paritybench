; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_mean_sub_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = lshr i32 %8, 5, !dbg !14
  %12 = and i32 %11, 7, !dbg !14
  %13 = or disjoint i32 %12, 8, !dbg !14
  %14 = or disjoint i32 %12, 16, !dbg !14
  %15 = or disjoint i32 %12, 24, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %16 = sdiv i32 %.frozen, 64, !dbg !15
  %17 = mul i32 %16, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = shl nuw nsw i32 %12, 7, !dbg !17
  %19 = shl nuw nsw i32 %13, 7, !dbg !17
  %20 = shl nuw nsw i32 %14, 7, !dbg !17
  %21 = shl nuw nsw i32 %15, 7, !dbg !17
  %22 = shl i32 %16, 7, !dbg !18
  %23 = or disjoint i32 %22, %12, !dbg !19
  %24 = or disjoint i32 %22, %13, !dbg !19
  %25 = or disjoint i32 %22, %14, !dbg !19
  %26 = or disjoint i32 %22, %15, !dbg !19
  %27 = or disjoint i32 %23, 32, !dbg !19
  %28 = or disjoint i32 %23, 40, !dbg !19
  %29 = or disjoint i32 %23, 48, !dbg !19
  %30 = or disjoint i32 %23, 56, !dbg !19
  %31 = or disjoint i32 %23, 64, !dbg !19
  %32 = or disjoint i32 %23, 72, !dbg !19
  %33 = or disjoint i32 %23, 80, !dbg !19
  %34 = or disjoint i32 %23, 88, !dbg !19
  %35 = or disjoint i32 %23, 96, !dbg !19
  %36 = or disjoint i32 %23, 104, !dbg !19
  %37 = or disjoint i32 %23, 112, !dbg !19
  %38 = or disjoint i32 %23, 120, !dbg !19
  %39 = sdiv i32 %23, 32, !dbg !20
  %40 = sdiv i32 %24, 32, !dbg !20
  %41 = sdiv i32 %25, 32, !dbg !20
  %42 = sdiv i32 %26, 32, !dbg !20
  %43 = sdiv i32 %27, 32, !dbg !20
  %44 = sdiv i32 %28, 32, !dbg !20
  %45 = sdiv i32 %29, 32, !dbg !20
  %46 = sdiv i32 %30, 32, !dbg !20
  %47 = sdiv i32 %31, 32, !dbg !20
  %48 = sdiv i32 %32, 32, !dbg !20
  %49 = sdiv i32 %33, 32, !dbg !20
  %50 = sdiv i32 %34, 32, !dbg !20
  %51 = sdiv i32 %35, 32, !dbg !20
  %52 = sdiv i32 %36, 32, !dbg !20
  %53 = sdiv i32 %37, 32, !dbg !20
  %54 = sdiv i32 %38, 32, !dbg !20
  %55 = srem i32 %39, 32, !dbg !21
  %56 = srem i32 %40, 32, !dbg !21
  %57 = srem i32 %41, 32, !dbg !21
  %58 = srem i32 %42, 32, !dbg !21
  %59 = srem i32 %43, 32, !dbg !21
  %60 = srem i32 %44, 32, !dbg !21
  %61 = srem i32 %45, 32, !dbg !21
  %62 = srem i32 %46, 32, !dbg !21
  %63 = srem i32 %47, 32, !dbg !21
  %64 = srem i32 %48, 32, !dbg !21
  %65 = srem i32 %49, 32, !dbg !21
  %66 = srem i32 %50, 32, !dbg !21
  %67 = srem i32 %51, 32, !dbg !21
  %68 = srem i32 %52, 32, !dbg !21
  %69 = srem i32 %53, 32, !dbg !21
  %70 = srem i32 %54, 32, !dbg !21
  %71 = shl nsw i32 %55, 12, !dbg !22
  %72 = shl nsw i32 %56, 12, !dbg !22
  %73 = shl nsw i32 %57, 12, !dbg !22
  %74 = shl nsw i32 %58, 12, !dbg !22
  %75 = shl nsw i32 %59, 12, !dbg !22
  %76 = shl nsw i32 %60, 12, !dbg !22
  %77 = shl nsw i32 %61, 12, !dbg !22
  %78 = shl nsw i32 %62, 12, !dbg !22
  %79 = shl nsw i32 %63, 12, !dbg !22
  %80 = shl nsw i32 %64, 12, !dbg !22
  %81 = shl nsw i32 %65, 12, !dbg !22
  %82 = shl nsw i32 %66, 12, !dbg !22
  %83 = shl nsw i32 %67, 12, !dbg !22
  %84 = shl nsw i32 %68, 12, !dbg !22
  %85 = shl nsw i32 %69, 12, !dbg !22
  %86 = shl nsw i32 %70, 12, !dbg !22
  %87 = or disjoint i32 %71, %18, !dbg !23
  %88 = or disjoint i32 %72, %19, !dbg !23
  %89 = or disjoint i32 %73, %20, !dbg !23
  %90 = or disjoint i32 %74, %21, !dbg !23
  %91 = or disjoint i32 %75, %18, !dbg !23
  %92 = or disjoint i32 %79, %18, !dbg !23
  %93 = or disjoint i32 %83, %18, !dbg !23
  %94 = shl nsw i32 %.decomposed, 13, !dbg !24
  %95 = add i32 %23, %94, !dbg !25
  %96 = add i32 %24, %94, !dbg !25
  %97 = add i32 %25, %94, !dbg !25
  %98 = add i32 %26, %94, !dbg !25
  %99 = add i32 %27, %94, !dbg !25
  %100 = add i32 %28, %94, !dbg !25
  %101 = add i32 %29, %94, !dbg !25
  %102 = add i32 %30, %94, !dbg !25
  %103 = add i32 %31, %94, !dbg !25
  %104 = add i32 %32, %94, !dbg !25
  %105 = add i32 %33, %94, !dbg !25
  %106 = add i32 %34, %94, !dbg !25
  %107 = add i32 %35, %94, !dbg !25
  %108 = add i32 %36, %94, !dbg !25
  %109 = add i32 %37, %94, !dbg !25
  %110 = add i32 %38, %94, !dbg !25
  %111 = sdiv i32 %95, 131072, !dbg !26
  %112 = sdiv i32 %96, 131072, !dbg !26
  %113 = sdiv i32 %97, 131072, !dbg !26
  %114 = sdiv i32 %98, 131072, !dbg !26
  %115 = sdiv i32 %99, 131072, !dbg !26
  %116 = sdiv i32 %100, 131072, !dbg !26
  %117 = sdiv i32 %101, 131072, !dbg !26
  %118 = sdiv i32 %102, 131072, !dbg !26
  %119 = sdiv i32 %103, 131072, !dbg !26
  %120 = sdiv i32 %104, 131072, !dbg !26
  %121 = sdiv i32 %105, 131072, !dbg !26
  %122 = sdiv i32 %106, 131072, !dbg !26
  %123 = sdiv i32 %107, 131072, !dbg !26
  %124 = sdiv i32 %108, 131072, !dbg !26
  %125 = sdiv i32 %109, 131072, !dbg !26
  %126 = sdiv i32 %110, 131072, !dbg !26
  %127 = shl nsw i32 %111, 17, !dbg !27
  %128 = shl nsw i32 %112, 17, !dbg !27
  %129 = shl nsw i32 %113, 17, !dbg !27
  %130 = shl nsw i32 %114, 17, !dbg !27
  %131 = shl nsw i32 %115, 17, !dbg !27
  %132 = shl nsw i32 %116, 17, !dbg !27
  %133 = shl nsw i32 %117, 17, !dbg !27
  %134 = shl nsw i32 %118, 17, !dbg !27
  %135 = shl nsw i32 %119, 17, !dbg !27
  %136 = shl nsw i32 %120, 17, !dbg !27
  %137 = shl nsw i32 %121, 17, !dbg !27
  %138 = shl nsw i32 %122, 17, !dbg !27
  %139 = shl nsw i32 %123, 17, !dbg !27
  %140 = shl nsw i32 %124, 17, !dbg !27
  %141 = shl nsw i32 %125, 17, !dbg !27
  %142 = shl nsw i32 %126, 17, !dbg !27
  %143 = add i32 %87, %127, !dbg !28
  %144 = add i32 %88, %128, !dbg !28
  %145 = add i32 %89, %129, !dbg !28
  %146 = add i32 %90, %130, !dbg !28
  %147 = add i32 %91, %131, !dbg !28
  %148 = add i32 %92, %135, !dbg !28
  %149 = add i32 %93, %139, !dbg !28
  %150 = sdiv i32 %95, 1024, !dbg !29
  %151 = sdiv i32 %96, 1024, !dbg !29
  %152 = sdiv i32 %97, 1024, !dbg !29
  %153 = sdiv i32 %98, 1024, !dbg !29
  %154 = sdiv i32 %99, 1024, !dbg !29
  %155 = sdiv i32 %100, 1024, !dbg !29
  %156 = sdiv i32 %101, 1024, !dbg !29
  %157 = sdiv i32 %102, 1024, !dbg !29
  %158 = sdiv i32 %103, 1024, !dbg !29
  %159 = sdiv i32 %104, 1024, !dbg !29
  %160 = sdiv i32 %105, 1024, !dbg !29
  %161 = sdiv i32 %106, 1024, !dbg !29
  %162 = sdiv i32 %107, 1024, !dbg !29
  %163 = sdiv i32 %108, 1024, !dbg !29
  %164 = sdiv i32 %109, 1024, !dbg !29
  %165 = sdiv i32 %110, 1024, !dbg !29
  %166 = srem i32 %150, 128, !dbg !30
  %167 = srem i32 %151, 128, !dbg !30
  %168 = srem i32 %152, 128, !dbg !30
  %169 = srem i32 %153, 128, !dbg !30
  %170 = srem i32 %154, 128, !dbg !30
  %171 = srem i32 %155, 128, !dbg !30
  %172 = srem i32 %156, 128, !dbg !30
  %173 = srem i32 %157, 128, !dbg !30
  %174 = srem i32 %158, 128, !dbg !30
  %175 = srem i32 %159, 128, !dbg !30
  %176 = srem i32 %160, 128, !dbg !30
  %177 = srem i32 %161, 128, !dbg !30
  %178 = srem i32 %162, 128, !dbg !30
  %179 = srem i32 %163, 128, !dbg !30
  %180 = srem i32 %164, 128, !dbg !30
  %181 = srem i32 %165, 128, !dbg !30
  %182 = add i32 %143, %166, !dbg !31
  %183 = add nsw i32 %144, %167, !dbg !31
  %184 = add nsw i32 %145, %168, !dbg !31
  %185 = add nsw i32 %146, %169, !dbg !31
  %186 = add i32 %147, %170, !dbg !31
  %187 = or disjoint i32 %18, %76, !dbg !28
  %188 = or disjoint i32 %187, 1024, !dbg !28
  %189 = add i32 %188, %132, !dbg !23
  %190 = add nsw i32 %189, %171, !dbg !31
  %191 = or disjoint i32 %18, %77, !dbg !28
  %192 = or disjoint i32 %191, 2048, !dbg !28
  %193 = add i32 %192, %133, !dbg !23
  %194 = add nsw i32 %193, %172, !dbg !31
  %195 = or disjoint i32 %18, %78, !dbg !28
  %196 = or disjoint i32 %195, 3072, !dbg !28
  %197 = add i32 %196, %134, !dbg !23
  %198 = add nsw i32 %197, %173, !dbg !31
  %199 = add i32 %148, %174, !dbg !31
  %200 = or disjoint i32 %18, %80, !dbg !28
  %201 = or disjoint i32 %200, 1024, !dbg !28
  %202 = add i32 %201, %136, !dbg !23
  %203 = add nsw i32 %202, %175, !dbg !31
  %204 = or disjoint i32 %18, %81, !dbg !28
  %205 = or disjoint i32 %204, 2048, !dbg !28
  %206 = add i32 %205, %137, !dbg !23
  %207 = add nsw i32 %206, %176, !dbg !31
  %208 = or disjoint i32 %18, %82, !dbg !28
  %209 = or disjoint i32 %208, 3072, !dbg !28
  %210 = add i32 %209, %138, !dbg !23
  %211 = add nsw i32 %210, %177, !dbg !31
  %212 = add i32 %149, %178, !dbg !31
  %213 = or disjoint i32 %18, %84, !dbg !28
  %214 = or disjoint i32 %213, 1024, !dbg !28
  %215 = add i32 %214, %140, !dbg !23
  %216 = add nsw i32 %215, %179, !dbg !31
  %217 = or disjoint i32 %18, %85, !dbg !28
  %218 = or disjoint i32 %217, 2048, !dbg !28
  %219 = add i32 %218, %141, !dbg !23
  %220 = add nsw i32 %219, %180, !dbg !31
  %221 = or disjoint i32 %18, %86, !dbg !28
  %222 = or disjoint i32 %221, 3072, !dbg !28
  %223 = add i32 %222, %142, !dbg !23
  %224 = add nsw i32 %223, %181, !dbg !31
  %225 = sext i32 %182 to i64, !dbg !32
  %226 = getelementptr float, ptr addrspace(1) %0, i64 %225, !dbg !32
  %227 = sext i32 %183 to i64, !dbg !32
  %228 = getelementptr float, ptr addrspace(1) %0, i64 %227, !dbg !32
  %229 = sext i32 %184 to i64, !dbg !32
  %230 = getelementptr float, ptr addrspace(1) %0, i64 %229, !dbg !32
  %231 = sext i32 %185 to i64, !dbg !32
  %232 = getelementptr float, ptr addrspace(1) %0, i64 %231, !dbg !32
  %233 = sext i32 %186 to i64, !dbg !32
  %234 = getelementptr float, ptr addrspace(1) %0, i64 %233, !dbg !32
  %235 = sext i32 %190 to i64, !dbg !32
  %236 = getelementptr float, ptr addrspace(1) %0, i64 %235, !dbg !32
  %237 = sext i32 %194 to i64, !dbg !32
  %238 = getelementptr float, ptr addrspace(1) %0, i64 %237, !dbg !32
  %239 = sext i32 %198 to i64, !dbg !32
  %240 = getelementptr float, ptr addrspace(1) %0, i64 %239, !dbg !32
  %241 = sext i32 %199 to i64, !dbg !32
  %242 = getelementptr float, ptr addrspace(1) %0, i64 %241, !dbg !32
  %243 = sext i32 %203 to i64, !dbg !32
  %244 = getelementptr float, ptr addrspace(1) %0, i64 %243, !dbg !32
  %245 = sext i32 %207 to i64, !dbg !32
  %246 = getelementptr float, ptr addrspace(1) %0, i64 %245, !dbg !32
  %247 = sext i32 %211 to i64, !dbg !32
  %248 = getelementptr float, ptr addrspace(1) %0, i64 %247, !dbg !32
  %249 = sext i32 %212 to i64, !dbg !32
  %250 = getelementptr float, ptr addrspace(1) %0, i64 %249, !dbg !32
  %251 = sext i32 %216 to i64, !dbg !32
  %252 = getelementptr float, ptr addrspace(1) %0, i64 %251, !dbg !32
  %253 = sext i32 %220 to i64, !dbg !32
  %254 = getelementptr float, ptr addrspace(1) %0, i64 %253, !dbg !32
  %255 = sext i32 %224 to i64, !dbg !32
  %256 = getelementptr float, ptr addrspace(1) %0, i64 %255, !dbg !32
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 true) #3, !dbg !33
  %258 = bitcast i32 %257 to float, !dbg !33
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %228, i1 true) #3, !dbg !33
  %260 = bitcast i32 %259 to float, !dbg !33
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %230, i1 true) #3, !dbg !33
  %262 = bitcast i32 %261 to float, !dbg !33
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 true) #3, !dbg !33
  %264 = bitcast i32 %263 to float, !dbg !33
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %234, i1 true) #3, !dbg !33
  %266 = bitcast i32 %265 to float, !dbg !33
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %236, i1 true) #3, !dbg !33
  %268 = bitcast i32 %267 to float, !dbg !33
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 true) #3, !dbg !33
  %270 = bitcast i32 %269 to float, !dbg !33
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #3, !dbg !33
  %272 = bitcast i32 %271 to float, !dbg !33
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 true) #3, !dbg !33
  %274 = bitcast i32 %273 to float, !dbg !33
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 true) #3, !dbg !33
  %276 = bitcast i32 %275 to float, !dbg !33
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %246, i1 true) #3, !dbg !33
  %278 = bitcast i32 %277 to float, !dbg !33
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %248, i1 true) #3, !dbg !33
  %280 = bitcast i32 %279 to float, !dbg !33
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %250, i1 true) #3, !dbg !33
  %282 = bitcast i32 %281 to float, !dbg !33
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %252, i1 true) #3, !dbg !33
  %284 = bitcast i32 %283 to float, !dbg !33
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 true) #3, !dbg !33
  %286 = bitcast i32 %285 to float, !dbg !33
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %256, i1 true) #3, !dbg !33
  %288 = bitcast i32 %287 to float, !dbg !33
  %289 = getelementptr float, ptr addrspace(1) %1, i64 %225, !dbg !34
  %290 = getelementptr float, ptr addrspace(1) %1, i64 %227, !dbg !34
  %291 = getelementptr float, ptr addrspace(1) %1, i64 %229, !dbg !34
  %292 = getelementptr float, ptr addrspace(1) %1, i64 %231, !dbg !34
  %293 = getelementptr float, ptr addrspace(1) %1, i64 %233, !dbg !34
  %294 = getelementptr float, ptr addrspace(1) %1, i64 %235, !dbg !34
  %295 = getelementptr float, ptr addrspace(1) %1, i64 %237, !dbg !34
  %296 = getelementptr float, ptr addrspace(1) %1, i64 %239, !dbg !34
  %297 = getelementptr float, ptr addrspace(1) %1, i64 %241, !dbg !34
  %298 = getelementptr float, ptr addrspace(1) %1, i64 %243, !dbg !34
  %299 = getelementptr float, ptr addrspace(1) %1, i64 %245, !dbg !34
  %300 = getelementptr float, ptr addrspace(1) %1, i64 %247, !dbg !34
  %301 = getelementptr float, ptr addrspace(1) %1, i64 %249, !dbg !34
  %302 = getelementptr float, ptr addrspace(1) %1, i64 %251, !dbg !34
  %303 = getelementptr float, ptr addrspace(1) %1, i64 %253, !dbg !34
  %304 = getelementptr float, ptr addrspace(1) %1, i64 %255, !dbg !34
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %289, i1 true) #3, !dbg !35
  %306 = bitcast i32 %305 to float, !dbg !35
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %290, i1 true) #3, !dbg !35
  %308 = bitcast i32 %307 to float, !dbg !35
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %291, i1 true) #3, !dbg !35
  %310 = bitcast i32 %309 to float, !dbg !35
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %292, i1 true) #3, !dbg !35
  %312 = bitcast i32 %311 to float, !dbg !35
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %293, i1 true) #3, !dbg !35
  %314 = bitcast i32 %313 to float, !dbg !35
  %315 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %294, i1 true) #3, !dbg !35
  %316 = bitcast i32 %315 to float, !dbg !35
  %317 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %295, i1 true) #3, !dbg !35
  %318 = bitcast i32 %317 to float, !dbg !35
  %319 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %296, i1 true) #3, !dbg !35
  %320 = bitcast i32 %319 to float, !dbg !35
  %321 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %297, i1 true) #3, !dbg !35
  %322 = bitcast i32 %321 to float, !dbg !35
  %323 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %298, i1 true) #3, !dbg !35
  %324 = bitcast i32 %323 to float, !dbg !35
  %325 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %299, i1 true) #3, !dbg !35
  %326 = bitcast i32 %325 to float, !dbg !35
  %327 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %300, i1 true) #3, !dbg !35
  %328 = bitcast i32 %327 to float, !dbg !35
  %329 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %301, i1 true) #3, !dbg !35
  %330 = bitcast i32 %329 to float, !dbg !35
  %331 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %302, i1 true) #3, !dbg !35
  %332 = bitcast i32 %331 to float, !dbg !35
  %333 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %303, i1 true) #3, !dbg !35
  %334 = bitcast i32 %333 to float, !dbg !35
  %335 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %304, i1 true) #3, !dbg !35
  %336 = bitcast i32 %335 to float, !dbg !35
  %337 = fsub float %258, %306, !dbg !36
  %338 = fsub float %260, %308, !dbg !36
  %339 = fsub float %262, %310, !dbg !36
  %340 = fsub float %264, %312, !dbg !36
  %341 = fsub float %266, %314, !dbg !36
  %342 = fsub float %268, %316, !dbg !36
  %343 = fsub float %270, %318, !dbg !36
  %344 = fsub float %272, %320, !dbg !36
  %345 = fsub float %274, %322, !dbg !36
  %346 = fsub float %276, %324, !dbg !36
  %347 = fsub float %278, %326, !dbg !36
  %348 = fsub float %280, %328, !dbg !36
  %349 = fsub float %282, %330, !dbg !36
  %350 = fsub float %284, %332, !dbg !36
  %351 = fsub float %286, %334, !dbg !36
  %352 = fsub float %288, %336, !dbg !36
  %353 = tail call float @llvm.fabs.f32(float %337), !dbg !37
  %354 = tail call float @llvm.fabs.f32(float %338), !dbg !37
  %355 = tail call float @llvm.fabs.f32(float %339), !dbg !37
  %356 = tail call float @llvm.fabs.f32(float %340), !dbg !37
  %357 = tail call float @llvm.fabs.f32(float %341), !dbg !37
  %358 = tail call float @llvm.fabs.f32(float %342), !dbg !37
  %359 = tail call float @llvm.fabs.f32(float %343), !dbg !37
  %360 = tail call float @llvm.fabs.f32(float %344), !dbg !37
  %361 = tail call float @llvm.fabs.f32(float %345), !dbg !37
  %362 = tail call float @llvm.fabs.f32(float %346), !dbg !37
  %363 = tail call float @llvm.fabs.f32(float %347), !dbg !37
  %364 = tail call float @llvm.fabs.f32(float %348), !dbg !37
  %365 = tail call float @llvm.fabs.f32(float %349), !dbg !37
  %366 = tail call float @llvm.fabs.f32(float %350), !dbg !37
  %367 = tail call float @llvm.fabs.f32(float %351), !dbg !37
  %368 = tail call float @llvm.fabs.f32(float %352), !dbg !37
  %369 = fadd float %353, %354, !dbg !38
  %370 = fadd float %369, %355, !dbg !38
  %371 = fadd float %370, %356, !dbg !38
  %372 = fadd float %371, %357, !dbg !38
  %373 = fadd float %372, %358, !dbg !38
  %374 = fadd float %373, %359, !dbg !38
  %375 = fadd float %374, %360, !dbg !38
  %376 = fadd float %375, %361, !dbg !38
  %377 = fadd float %376, %362, !dbg !38
  %378 = fadd float %377, %363, !dbg !38
  %379 = fadd float %378, %364, !dbg !38
  %380 = fadd float %379, %365, !dbg !38
  %381 = fadd float %380, %366, !dbg !38
  %382 = fadd float %381, %367, !dbg !38
  %383 = fadd float %382, %368, !dbg !38
  %384 = shl nuw nsw i32 %9, 3, !dbg !43
  %385 = or disjoint i32 %384, %12, !dbg !43
  %386 = getelementptr float, ptr addrspace(3) @global_smem, i32 %385, !dbg !43
  %387 = bitcast float %383 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %387, i1 true) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %388 = icmp slt i32 %8, 256, !dbg !43
  %389 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !43
  %390 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %389, i1 %388) #3, !dbg !43
  %391 = bitcast i32 %390 to float, !dbg !43
  %392 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %390, i32 4, i32 31), !dbg !43
  %393 = bitcast i32 %392 to float, !dbg !43
  %394 = fadd float %391, %393, !dbg !38
  %395 = bitcast float %394 to i32, !dbg !43
  %396 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %395, i32 2, i32 31), !dbg !43
  %397 = bitcast i32 %396 to float, !dbg !43
  %398 = fadd float %394, %397, !dbg !38
  %399 = bitcast float %398 to i32, !dbg !43
  %400 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %399, i32 1, i32 31), !dbg !43
  %401 = bitcast i32 %400 to float, !dbg !43
  %402 = fadd float %398, %401, !dbg !38
  %403 = and i32 %8, 7, !dbg !43
  %404 = icmp eq i32 %403, 0, !dbg !43
  %405 = and i1 %388, %404, !dbg !43
  %406 = bitcast float %402 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %406, i1 %405) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %407 = getelementptr float, ptr addrspace(3) @global_smem, i32 %384, !dbg !43
  %408 = load i32, ptr addrspace(3) %407, align 16, !dbg !43
  %409 = sext i32 %10 to i64, !dbg !44
  %410 = getelementptr float, ptr addrspace(1) %2, i64 %409, !dbg !44
  %411 = icmp eq i32 %12, 0, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %408, ptr addrspace(1) %410, i1 %411) #3, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7z2riyjagigpjkdtnhqland7kuj3oj6y6iutezwztylz7jpjknt.py", directory: "inductor_cache/7z")
!4 = !{ptr @triton_per_fused_abs_mean_sub_15, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_mean_sub_15, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_mean_sub_15", linkageName: "triton_per_fused_abs_mean_sub_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 36, scope: !7)
!18 = !DILocation(line: 33, column: 66, scope: !7)
!19 = !DILocation(line: 33, column: 62, scope: !7)
!20 = !DILocation(line: 33, column: 73, scope: !7)
!21 = !DILocation(line: 33, column: 79, scope: !7)
!22 = !DILocation(line: 33, column: 55, scope: !7)
!23 = !DILocation(line: 33, column: 48, scope: !7)
!24 = !DILocation(line: 33, column: 114, scope: !7)
!25 = !DILocation(line: 33, column: 109, scope: !7)
!26 = !DILocation(line: 33, column: 121, scope: !7)
!27 = !DILocation(line: 33, column: 94, scope: !7)
!28 = !DILocation(line: 33, column: 86, scope: !7)
!29 = !DILocation(line: 33, column: 161, scope: !7)
!30 = !DILocation(line: 33, column: 169, scope: !7)
!31 = !DILocation(line: 33, column: 133, scope: !7)
!32 = !DILocation(line: 33, column: 30, scope: !7)
!33 = !DILocation(line: 33, column: 177, scope: !7)
!34 = !DILocation(line: 34, column: 30, scope: !7)
!35 = !DILocation(line: 34, column: 177, scope: !7)
!36 = !DILocation(line: 35, column: 18, scope: !7)
!37 = !DILocation(line: 36, column: 23, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !42)
!39 = distinct !DILexicalBlockFile(scope: !41, file: !40, discriminator: 0)
!40 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!41 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!42 = !DILocation(line: 38, column: 24, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !41, inlinedAt: !42)
!44 = !DILocation(line: 39, column: 25, scope: !7)
!45 = !DILocation(line: 39, column: 36, scope: !7)
!46 = !DILocation(line: 39, column: 4, scope: !7)
