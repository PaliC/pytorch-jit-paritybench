; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_fill_mul_silu_sub_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, i32 %17) local_unnamed_addr !dbg !7 {
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %20 = shl i32 %19, 7, !dbg !11
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %22 = and i32 %21, 127, !dbg !12
  %23 = or disjoint i32 %20, %22, !dbg !13
  %24 = icmp slt i32 %23, 256, !dbg !14
  %25 = sdiv i32 %23, 16, !dbg !15
  %26 = srem i32 %25, 4, !dbg !16
  %27 = sext i32 %23 to i64, !dbg !17
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !17
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %24) #3, !dbg !18
  %30 = sext i32 %26 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %24) #3, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !21
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %24) #3, !dbg !22
  %35 = bitcast i32 %34 to float, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %24) #3, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %24) #3, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !27
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %24) #3, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !29
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %24) #3, !dbg !30
  %44 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !31
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %24) #3, !dbg !32
  %46 = bitcast i32 %45 to float, !dbg !32
  %47 = getelementptr float, ptr addrspace(1) %8, i64 %30, !dbg !33
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %24) #3, !dbg !34
  %49 = getelementptr float, ptr addrspace(1) %9, i64 %30, !dbg !35
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %24) #3, !dbg !36
  %51 = getelementptr float, ptr addrspace(1) %10, i64 %27, !dbg !37
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %24) #3, !dbg !38
  %53 = getelementptr float, ptr addrspace(1) %11, i64 %30, !dbg !39
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %24) #3, !dbg !40
  %55 = getelementptr float, ptr addrspace(1) %12, i64 %30, !dbg !41
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %24) #3, !dbg !42
  %57 = bitcast i32 %56 to float, !dbg !42
  %58 = getelementptr float, ptr addrspace(1) %13, i64 %30, !dbg !43
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %24) #3, !dbg !44
  %60 = getelementptr float, ptr addrspace(1) %14, i64 %30, !dbg !45
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %24) #3, !dbg !46
  %62 = fadd float %35, 0x3EE4F8B580000000, !dbg !47
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i = icmp eq i32 %63, 0, !dbg !48
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i = icmp eq i32 %64, 0, !dbg !48
  br i1 %.not.i, label %70, label %65, !dbg !48

65:                                               ; preds = %18
  br i1 %.not1.i, label %68, label %66, !dbg !48

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

70:                                               ; preds = %18
  br i1 %.not1.i, label %73, label %71, !dbg !48

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

__nv_sqrtf.exit:                                  ; preds = %66, %68, %71, %73
  %.0.i = phi float [ %67, %66 ], [ %69, %68 ], [ %72, %71 ], [ %74, %73 ], !dbg !48
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !49
  %76 = fadd float %46, 0x3EE4F8B580000000, !dbg !50
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !51
  %.not.i1 = icmp eq i32 %77, 0, !dbg !51
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !51
  %.not1.i4 = icmp eq i32 %78, 0, !dbg !51
  br i1 %.not.i1, label %84, label %79, !dbg !51

79:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %82, label %80, !dbg !51

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !51
  br label %__nv_sqrtf.exit5, !dbg !51

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !51
  br label %__nv_sqrtf.exit5, !dbg !51

84:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %87, label %85, !dbg !51

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !51
  br label %__nv_sqrtf.exit5, !dbg !51

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !51
  br label %__nv_sqrtf.exit5, !dbg !51

__nv_sqrtf.exit5:                                 ; preds = %80, %82, %85, %87
  %.0.i3 = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !51
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !52
  %90 = fadd float %57, 0x3EE4F8B580000000, !dbg !53
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i6 = icmp eq i32 %91, 0, !dbg !54
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i9 = icmp eq i32 %92, 0, !dbg !54
  br i1 %.not.i6, label %98, label %93, !dbg !54

93:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %96, label %94, !dbg !54

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #3, !dbg !54
  br label %__nv_sqrtf.exit10, !dbg !54

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #3, !dbg !54
  br label %__nv_sqrtf.exit10, !dbg !54

98:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %101, label %99, !dbg !54

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #3, !dbg !54
  br label %__nv_sqrtf.exit10, !dbg !54

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #3, !dbg !54
  br label %__nv_sqrtf.exit10, !dbg !54

__nv_sqrtf.exit10:                                ; preds = %94, %96, %99, %101
  %.0.i8 = phi float [ %95, %94 ], [ %97, %96 ], [ %100, %99 ], [ %102, %101 ], !dbg !54
  %103 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !18
  %104 = insertelement <2 x i32> %103, i32 %52, i64 1, !dbg !18
  %105 = bitcast <2 x i32> %104 to <2 x float>, !dbg !18
  %106 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !20
  %107 = insertelement <2 x i32> %106, i32 %54, i64 1, !dbg !20
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !20
  %109 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !24
  %110 = insertelement <2 x i32> %109, i32 %59, i64 1, !dbg !24
  %111 = bitcast <2 x i32> %110 to <2 x float>, !dbg !24
  %112 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !26
  %113 = insertelement <2 x i32> %112, i32 %61, i64 1, !dbg !26
  %114 = bitcast <2 x i32> %113 to <2 x float>, !dbg !26
  %115 = bitcast i32 %41 to float, !dbg !28
  %116 = bitcast i32 %43 to float, !dbg !30
  %117 = fsub float %115, %116, !dbg !55
  %118 = fmul float %117, %89, !dbg !56
  %119 = bitcast i32 %48 to float, !dbg !34
  %120 = fmul float %118, %119, !dbg !57
  %121 = bitcast i32 %50 to float, !dbg !36
  %122 = fadd float %120, %121, !dbg !58
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !59
  %124 = fsub <2 x float> %105, %108, !dbg !60
  %125 = insertelement <2 x float> poison, float %75, i64 0, !dbg !61
  %126 = insertelement <2 x float> %125, float %123, i64 1, !dbg !61
  %127 = fmul <2 x float> %124, %126, !dbg !61
  %128 = fmul <2 x float> %127, %111, !dbg !62
  %129 = fadd <2 x float> %128, %114, !dbg !63
  %130 = extractelement <2 x float> %129, i64 0, !dbg !64
  %131 = fadd float %130, %122, !dbg !64
  %132 = extractelement <2 x float> %129, i64 1, !dbg !65
  %133 = fadd float %131, %132, !dbg !65
  %134 = fsub float 0.000000e+00, %133, !dbg !66
  %135 = fmul float %134, 0x3FF7154760000000, !dbg !70
  %136 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %135) #3, !dbg !70
  %137 = fadd float %136, 1.000000e+00, !dbg !71
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %137) #3, !dbg !72
  %139 = fmul float %138, %133, !dbg !73
  %140 = fsub float 1.000000e+00, %138, !dbg !74
  %141 = fmul float %140, %133, !dbg !75
  %142 = fadd float %141, 1.000000e+00, !dbg !76
  %143 = fmul float %138, %142, !dbg !77
  %144 = getelementptr float, ptr addrspace(1) %15, i64 %27, !dbg !78
  %145 = bitcast float %139 to i32, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %145, ptr addrspace(1) %144, i1 %24) #3, !dbg !79
  %146 = getelementptr float, ptr addrspace(1) %16, i64 %27, !dbg !80
  %147 = bitcast float %143 to i32, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %147, ptr addrspace(1) %146, i1 %24) #3, !dbg !81
  ret void, !dbg !82
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czoltedlqoiqeniq3w2xbrkbwy62tiyrwc2nng75nevh63zsxs6r.py", directory: "inductor_cache/zo")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_fill_mul_silu_sub_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_fill_mul_silu_sub_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_fill_mul_silu_sub_3", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_fill_mul_silu_sub_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 31, scope: !7)
!24 = !DILocation(line: 29, column: 36, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 33, column: 31, scope: !7)
!32 = !DILocation(line: 33, column: 36, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 32, scope: !7)
!38 = !DILocation(line: 36, column: 37, scope: !7)
!39 = !DILocation(line: 37, column: 32, scope: !7)
!40 = !DILocation(line: 37, column: 37, scope: !7)
!41 = !DILocation(line: 38, column: 32, scope: !7)
!42 = !DILocation(line: 38, column: 37, scope: !7)
!43 = !DILocation(line: 39, column: 32, scope: !7)
!44 = !DILocation(line: 39, column: 37, scope: !7)
!45 = !DILocation(line: 40, column: 32, scope: !7)
!46 = !DILocation(line: 40, column: 37, scope: !7)
!47 = !DILocation(line: 43, column: 18, scope: !7)
!48 = !DILocation(line: 44, column: 26, scope: !7)
!49 = !DILocation(line: 46, column: 18, scope: !7)
!50 = !DILocation(line: 53, column: 20, scope: !7)
!51 = !DILocation(line: 54, column: 27, scope: !7)
!52 = !DILocation(line: 55, column: 19, scope: !7)
!53 = !DILocation(line: 62, column: 20, scope: !7)
!54 = !DILocation(line: 63, column: 27, scope: !7)
!55 = !DILocation(line: 52, column: 20, scope: !7)
!56 = !DILocation(line: 57, column: 20, scope: !7)
!57 = !DILocation(line: 58, column: 20, scope: !7)
!58 = !DILocation(line: 59, column: 20, scope: !7)
!59 = !DILocation(line: 64, column: 19, scope: !7)
!60 = !DILocation(line: 41, column: 18, scope: !7)
!61 = !DILocation(line: 49, column: 19, scope: !7)
!62 = !DILocation(line: 50, column: 20, scope: !7)
!63 = !DILocation(line: 51, column: 20, scope: !7)
!64 = !DILocation(line: 60, column: 20, scope: !7)
!65 = !DILocation(line: 69, column: 20, scope: !7)
!66 = !DILocation(line: 47, column: 30, scope: !67, inlinedAt: !69)
!67 = distinct !DILexicalBlockFile(scope: !7, file: !68, discriminator: 0)
!68 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!69 = !DILocation(line: 70, column: 23, scope: !7)
!70 = !DILocation(line: 47, column: 29, scope: !67, inlinedAt: !69)
!71 = !DILocation(line: 47, column: 20, scope: !67, inlinedAt: !69)
!72 = !DILocation(line: 47, column: 16, scope: !67, inlinedAt: !69)
!73 = !DILocation(line: 71, column: 20, scope: !7)
!74 = !DILocation(line: 72, column: 19, scope: !7)
!75 = !DILocation(line: 73, column: 20, scope: !7)
!76 = !DILocation(line: 74, column: 20, scope: !7)
!77 = !DILocation(line: 75, column: 20, scope: !7)
!78 = !DILocation(line: 76, column: 25, scope: !7)
!79 = !DILocation(line: 76, column: 37, scope: !7)
!80 = !DILocation(line: 77, column: 25, scope: !7)
!81 = !DILocation(line: 77, column: 37, scope: !7)
!82 = !DILocation(line: 77, column: 4, scope: !7)
