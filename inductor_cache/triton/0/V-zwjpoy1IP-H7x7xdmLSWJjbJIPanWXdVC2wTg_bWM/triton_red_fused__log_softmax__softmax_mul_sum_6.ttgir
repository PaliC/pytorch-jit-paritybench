#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [0, 1]}>
#loc = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":19:0)
#loc1 = loc(unknown)
#loc49 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":64:27)
#loc56 = loc(callsite(#loc1 at #loc49))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__log_softmax__softmax_mul_sum_6(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":19:0), %arg10: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":19:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":19:0), %arg12: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c8032_i32 = arith.constant 8032 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<8032> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2048xi32, #blocked> loc(#loc4)
    %4 = arith.divsi %0, %c4_i32 : i32 loc(#loc5)
    %5 = tt.addptr %arg1, %4 : !tt.ptr<f32>, i32 loc(#loc6)
    %6 = tt.splat %5 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc7)
    %7 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc7)
    %8 = tt.load %6, %7 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc7)
    %9 = tt.addptr %arg2, %4 : !tt.ptr<f32>, i32 loc(#loc8)
    %10 = tt.splat %9 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.load %10, %7 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc9)
    %12 = tt.addptr %arg3, %4 : !tt.ptr<f32>, i32 loc(#loc10)
    %13 = tt.splat %12 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.load %13, %7 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc11)
    %15 = tt.addptr %arg4, %4 : !tt.ptr<f32>, i32 loc(#loc12)
    %16 = tt.splat %15 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc13)
    %17 = tt.load %16, %7 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc13)
    %18 = tt.addptr %arg6, %4 : !tt.ptr<f32>, i32 loc(#loc14)
    %19 = tt.splat %18 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc15)
    %20 = tt.load %19, %7 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc15)
    %21 = tt.addptr %arg7, %4 : !tt.ptr<f32>, i32 loc(#loc16)
    %22 = tt.splat %21 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc17)
    %23 = tt.load %22, %7 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc17)
    %24 = tt.addptr %arg8, %4 : !tt.ptr<f32>, i32 loc(#loc18)
    %25 = tt.splat %24 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc19)
    %26 = tt.load %25, %7 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc19)
    %27 = tt.addptr %arg9, %4 : !tt.ptr<f32>, i32 loc(#loc20)
    %28 = tt.splat %27 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc21)
    %29 = tt.load %28, %7 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc21)
    %30 = arith.muli %0, %c8032_i32 : i32 loc(#loc22)
    %31 = tt.splat %30 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc23)
    %32 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc24)
    %33 = tt.splat %1 : i1 -> tensor<1x2048xi1, #blocked> loc(#loc25)
    %34 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc26)
    %35 = tt.broadcast %8 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc27)
    %36 = math.log %11 : tensor<1x1xf32, #blocked> loc(#loc28)
    %37 = tt.broadcast %36 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc29)
    %38 = tt.broadcast %14 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc30)
    %39 = tt.broadcast %17 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc31)
    %40 = tt.broadcast %20 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc32)
    %41 = math.log %23 : tensor<1x1xf32, #blocked> loc(#loc33)
    %42 = tt.broadcast %41 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc34)
    %43 = tt.broadcast %26 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc35)
    %44 = math.log %29 : tensor<1x1xf32, #blocked> loc(#loc36)
    %45 = tt.broadcast %44 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc37)
    %46 = scf.for %arg13 = %c0_i32 to %c8032_i32 step %c2048_i32 iter_args(%arg14 = %cst) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %53 = tt.splat %arg13 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc39)
      %54 = arith.addi %53, %3 : tensor<1x2048xi32, #blocked> loc(#loc39)
      %55 = arith.cmpi slt, %54, %cst_0 : tensor<1x2048xi32, #blocked> loc(#loc40)
      %56 = arith.addi %54, %31 : tensor<1x2048xi32, #blocked> loc(#loc23)
      %57 = tt.addptr %32, %56 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc24)
      %58 = arith.andi %55, %33 : tensor<1x2048xi1, #blocked> loc(#loc25)
      %59 = tt.load %57, %58, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc41)
      %60 = tt.addptr %34, %56 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc26)
      %61 = tt.load %60, %58, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc42)
      %62 = arith.subf %59, %35 : tensor<1x2048xf32, #blocked> loc(#loc27)
      %63 = arith.subf %62, %37 : tensor<1x2048xf32, #blocked> loc(#loc29)
      %64 = arith.subf %63, %38 : tensor<1x2048xf32, #blocked> loc(#loc30)
      %65 = math.exp %64 : tensor<1x2048xf32, #blocked> loc(#loc43)
      %66 = arith.divf %65, %39 : tensor<1x2048xf32, #blocked> loc(#loc31)
      %67 = arith.subf %61, %40 : tensor<1x2048xf32, #blocked> loc(#loc32)
      %68 = arith.subf %67, %42 : tensor<1x2048xf32, #blocked> loc(#loc34)
      %69 = arith.subf %68, %43 : tensor<1x2048xf32, #blocked> loc(#loc35)
      %70 = arith.subf %69, %45 : tensor<1x2048xf32, #blocked> loc(#loc37)
      %71 = arith.mulf %66, %70 : tensor<1x2048xf32, #blocked> loc(#loc44)
      %72 = arith.addf %arg14, %71 : tensor<1x2048xf32, #blocked> loc(#loc45)
      %73 = arith.select %58, %72, %arg14 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc46)
      scf.yield %73 : tensor<1x2048xf32, #blocked> loc(#loc47)
    } loc(#loc38)
    %47 = "tt.reduce"(%46) <{axis = 1 : i32}> ({
    ^bb0(%arg13: f32 loc(callsite(#loc1 at #loc49)), %arg14: f32 loc(callsite(#loc1 at #loc49))):
      %53 = arith.addf %arg13, %arg14 : f32 loc(#loc58)
      tt.reduce.return %53 : f32 loc(#loc55)
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc55)
    %48 = triton_gpu.convert_layout %47 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc51)
    %49 = tt.expand_dims %48 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc51)
    %50 = tt.addptr %arg10, %0 : !tt.ptr<f32>, i32 loc(#loc52)
    %51 = tt.splat %50 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc53)
    %52 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc53)
    tt.store %51, %49, %52 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc53)
    tt.return loc(#loc54)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":22:28)
#loc3 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":24:21)
#loc4 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":25:33)
#loc5 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":27:19)
#loc6 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":28:30)
#loc7 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":28:35)
#loc8 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":29:30)
#loc9 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":29:35)
#loc10 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":30:30)
#loc11 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":30:35)
#loc12 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":31:31)
#loc13 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":31:36)
#loc14 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":32:31)
#loc15 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":32:36)
#loc16 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":33:31)
#loc17 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":33:36)
#loc18 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":34:31)
#loc19 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":34:36)
#loc20 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":35:31)
#loc21 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":35:36)
#loc22 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":41:44)
#loc23 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":41:39)
#loc24 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":41:34)
#loc25 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":41:57)
#loc26 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":42:35)
#loc27 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":43:22)
#loc28 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":44:27)
#loc29 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":45:22)
#loc30 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":48:22)
#loc31 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":51:24)
#loc32 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":52:24)
#loc33 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":53:28)
#loc34 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":54:24)
#loc35 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":56:24)
#loc36 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":58:28)
#loc37 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":59:24)
#loc38 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":37:36)
#loc39 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":38:27)
#loc40 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":39:25)
#loc41 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":41:49)
#loc42 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":42:50)
#loc43 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":50:28)
#loc44 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":60:24)
#loc45 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":62:25)
#loc46 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":63:48)
#loc47 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":63:8)
#loc48 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc50 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc51 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":64:30)
#loc52 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":65:25)
#loc53 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":65:37)
#loc54 = loc("inductor_cache/b4/cb476mfmtunxk3kfwctyqltxtrr5chgtz2lztgdpnjimlkzdtn5i.py":65:4)
#loc55 = loc(callsite(#loc48 at #loc49))
#loc57 = loc(callsite(#loc50 at #loc48))
#loc58 = loc(callsite(#loc57 at #loc49))
