; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_mv_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 60, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 1024, !dbg !14
  %13 = lshr i32 %8, 4, !dbg !15
  %14 = and i32 %13, 7, !dbg !15
  %15 = zext nneg i32 %14 to i64, !dbg !16
  %16 = insertelement <4 x i1> poison, i1 %12, i64 0, !dbg !17
  %17 = shufflevector <4 x i1> %16, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !17
  br label %18, !dbg !16

18:                                               ; preds = %5, %18
  %indvars.iv = phi i64 [ 0, %5 ], [ %indvars.iv.next, %18 ]
  %19 = phi <4 x float> [ zeroinitializer, %5 ], [ %45, %18 ]
  %20 = or disjoint i64 %indvars.iv, %15, !dbg !18
  %.tr = trunc i64 %20 to i32, !dbg !19
  %21 = shl i32 %.tr, 10, !dbg !19
  %22 = add i32 %21, %11, !dbg !19
  %23 = sext i32 %22 to i64, !dbg !20
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !20
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #3, !dbg !21
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !21
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !21
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !21
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 true, i32 0, i1 true) #3, !dbg !23
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 true, i32 0, i1 true) #3, !dbg !23
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 true, i32 0, i1 true) #3, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 true, i32 0, i1 true) #3, !dbg !23
  %35 = insertelement <4 x i32> poison, i32 %26, i64 0, !dbg !21
  %36 = insertelement <4 x i32> %35, i32 %27, i64 1, !dbg !21
  %37 = insertelement <4 x i32> %36, i32 %28, i64 2, !dbg !21
  %38 = insertelement <4 x i32> %37, i32 %29, i64 3, !dbg !21
  %39 = bitcast <4 x i32> %38 to <4 x float>, !dbg !21
  %40 = insertelement <4 x i32> poison, i32 %34, i64 0, !dbg !24
  %41 = bitcast <4 x i32> %40 to <4 x float>, !dbg !24
  %42 = shufflevector <4 x float> %41, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !24
  %43 = fmul <4 x float> %42, %39, !dbg !24
  %44 = fadd <4 x float> %19, %43, !dbg !25
  %45 = select <4 x i1> %17, <4 x float> %44, <4 x float> %19, !dbg !17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !16
  %46 = icmp samesign ult i64 %indvars.iv, 120, !dbg !16
  br i1 %46, label %18, label %47, !dbg !16

47:                                               ; preds = %18
  %48 = lshr i32 %8, 5, !dbg !12
  %49 = and i32 %8, 63, !dbg !12
  %50 = or disjoint i32 %7, %49, !dbg !13
  %51 = icmp slt i32 %50, 1024, !dbg !14
  %52 = and i32 %8, 16, !dbg !12
  %53 = extractelement <4 x float> %45, i64 0, !dbg !26
  %54 = bitcast float %53 to i32, !dbg !26
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 16, i32 31), !dbg !26
  %56 = bitcast i32 %55 to float, !dbg !26
  %57 = fadd float %53, %56, !dbg !30
  %58 = extractelement <4 x float> %45, i64 1, !dbg !26
  %59 = bitcast float %58 to i32, !dbg !26
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 16, i32 31), !dbg !26
  %61 = bitcast i32 %60 to float, !dbg !26
  %62 = fadd float %58, %61, !dbg !30
  %63 = extractelement <4 x float> %45, i64 2, !dbg !26
  %64 = bitcast float %63 to i32, !dbg !26
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 16, i32 31), !dbg !26
  %66 = bitcast i32 %65 to float, !dbg !26
  %67 = fadd float %63, %66, !dbg !30
  %68 = extractelement <4 x float> %45, i64 3, !dbg !26
  %69 = bitcast float %68 to i32, !dbg !26
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 16, i32 31), !dbg !26
  %71 = bitcast i32 %70 to float, !dbg !26
  %72 = fadd float %68, %71, !dbg !30
  %73 = icmp eq i32 %52, 0, !dbg !26
  %74 = and i32 %48, 3, !dbg !26
  %75 = shl nuw nsw i32 %10, 2, !dbg !26
  %76 = or disjoint i32 %75, %74, !dbg !26
  %77 = zext nneg i32 %76 to i64, !dbg !26
  %78 = getelementptr float, ptr addrspace(3) @global_smem, i64 %77, !dbg !26
  %79 = bitcast float %57 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 %73) #3, !dbg !26
  %80 = or disjoint i32 %75, 4, !dbg !26
  %81 = or disjoint i32 %80, %74, !dbg !26
  %82 = zext nneg i32 %81 to i64, !dbg !26
  %83 = getelementptr float, ptr addrspace(3) @global_smem, i64 %82, !dbg !26
  %84 = bitcast float %62 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 %73) #3, !dbg !26
  %85 = or disjoint i32 %75, 8, !dbg !26
  %86 = or disjoint i32 %85, %74, !dbg !26
  %87 = zext nneg i32 %86 to i64, !dbg !26
  %88 = getelementptr float, ptr addrspace(3) @global_smem, i64 %87, !dbg !26
  %89 = bitcast float %67 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 %73) #3, !dbg !26
  %90 = or disjoint i32 %75, 12, !dbg !26
  %91 = or disjoint i32 %90, %74, !dbg !26
  %92 = zext nneg i32 %91 to i64, !dbg !26
  %93 = getelementptr float, ptr addrspace(3) @global_smem, i64 %92, !dbg !26
  %94 = bitcast float %72 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 %73) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %95 = icmp slt i32 %8, 256, !dbg !26
  %96 = sext i32 %8 to i64, !dbg !26
  %97 = getelementptr float, ptr addrspace(3) @global_smem, i64 %96, !dbg !26
  %98 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %97, i1 %95) #3, !dbg !26
  %99 = bitcast i32 %98 to float, !dbg !26
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 2, i32 31), !dbg !26
  %101 = bitcast i32 %100 to float, !dbg !26
  %102 = fadd float %99, %101, !dbg !30
  %103 = bitcast float %102 to i32, !dbg !26
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 1, i32 31), !dbg !26
  %105 = bitcast i32 %104 to float, !dbg !26
  %106 = fadd float %102, %105, !dbg !30
  %107 = and i32 %8, 3, !dbg !26
  %108 = icmp eq i32 %107, 0, !dbg !26
  %109 = and i1 %95, %108, !dbg !26
  %110 = bitcast float %106 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %110, i1 %109) #3, !dbg !26
  %111 = add i32 %8, 128, !dbg !26
  %112 = sext i32 %111 to i64, !dbg !26
  %113 = getelementptr float, ptr addrspace(3) @global_smem, i64 %112, !dbg !26
  %114 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %113, i1 %95) #3, !dbg !26
  %115 = bitcast i32 %114 to float, !dbg !26
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 2, i32 31), !dbg !26
  %117 = bitcast i32 %116 to float, !dbg !26
  %118 = fadd float %115, %117, !dbg !30
  %119 = bitcast float %118 to i32, !dbg !26
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 1, i32 31), !dbg !26
  %121 = bitcast i32 %120 to float, !dbg !26
  %122 = fadd float %118, %121, !dbg !30
  %123 = bitcast float %122 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %123, i1 %109) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %124 = zext nneg i32 %75 to i64, !dbg !26
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i64 %124, !dbg !26
  %126 = load i32, ptr addrspace(3) %125, align 16, !dbg !26
  %127 = zext nneg i32 %80 to i64, !dbg !26
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i64 %127, !dbg !26
  %129 = load i32, ptr addrspace(3) %128, align 16, !dbg !26
  %130 = zext nneg i32 %85 to i64, !dbg !26
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i64 %130, !dbg !26
  %132 = load i32, ptr addrspace(3) %131, align 16, !dbg !26
  %133 = zext nneg i32 %90 to i64, !dbg !26
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i64 %133, !dbg !26
  %135 = load i32, ptr addrspace(3) %134, align 16, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %136 = zext nneg i32 %10 to i64, !dbg !32
  %137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %136, !dbg !32
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %137, i32 %126, i32 %129, i32 %132, i32 %135, i1 true) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %138 = zext nneg i32 %49 to i64, !dbg !32
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %138, !dbg !32
  %140 = load i32, ptr addrspace(3) %139, align 4, !dbg !32
  %141 = sext i32 %50 to i64, !dbg !33
  %142 = getelementptr float, ptr addrspace(1) %2, i64 %141, !dbg !33
  %143 = and i32 %8, 64, !dbg !34
  %144 = icmp eq i32 %143, 0, !dbg !34
  %145 = and i1 %144, %51, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %140, ptr addrspace(1) %142, i1 %145) #3, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py", directory: "inductor_cache/el")
!4 = !{ptr @triton_red_fused_mv_27, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_mv_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_mv_27", linkageName: "triton_red_fused_mv_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 28, column: 36, scope: !7)
!17 = !DILocation(line: 37, column: 46, scope: !7)
!18 = !DILocation(line: 29, column: 27, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 34, scope: !7)
!21 = !DILocation(line: 32, column: 49, scope: !7)
!22 = !DILocation(line: 33, column: 34, scope: !7)
!23 = !DILocation(line: 33, column: 39, scope: !7)
!24 = !DILocation(line: 34, column: 22, scope: !7)
!25 = !DILocation(line: 36, column: 23, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = !DILocation(line: 38, column: 25, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !29)
!31 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!32 = !DILocation(line: 38, column: 28, scope: !7)
!33 = !DILocation(line: 39, column: 25, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 4, scope: !7)
