#loc = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":19:0)
#loc1 = loc(unknown)
#loc25 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":38:25)
#loc32 = loc(callsite(#loc1 at #loc25))
module {
  tt.func public @triton_red_fused_mv_27(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":19:0)) attributes {noinline = false} {
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<1x8xf32> loc(#loc1)
    %cst_0 = arith.constant dense<1024> : tensor<1x8xi32> loc(#loc1)
    %cst_1 = arith.constant dense<128> : tensor<1x8xi32> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<64x8xf32> loc(#loc1)
    %cst_3 = arith.constant dense<1024> : tensor<64x1xi32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc5)
    %4 = tt.splat %1 : i32 -> tensor<64x1xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64x1xi32> loc(#loc6)
    %6 = arith.cmpi slt, %5, %cst_3 : tensor<64x1xi32> loc(#loc7)
    %7 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc8)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<8xi32> -> tensor<1x8xi32> loc(#loc9)
    %9 = tt.broadcast %5 : tensor<64x1xi32> -> tensor<64x8xi32> loc(#loc10)
    %10 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x8x!tt.ptr<f32>> loc(#loc11)
    %11 = tt.broadcast %6 : tensor<64x1xi1> -> tensor<64x8xi1> loc(#loc12)
    %12 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x8x!tt.ptr<f32>> loc(#loc13)
    %13 = scf.for %arg5 = %c0_i32 to %c128_i32 step %c8_i32 iter_args(%arg6 = %cst_2) -> (tensor<64x8xf32>)  : i32 {
      %18 = tt.splat %arg5 : i32 -> tensor<1x8xi32> loc(#loc15)
      %19 = arith.addi %18, %8 : tensor<1x8xi32> loc(#loc15)
      %20 = arith.cmpi slt, %19, %cst_1 : tensor<1x8xi32> loc(#loc16)
      %21 = arith.muli %19, %cst_0 : tensor<1x8xi32> loc(#loc17)
      %22 = tt.broadcast %21 : tensor<1x8xi32> -> tensor<64x8xi32> loc(#loc10)
      %23 = arith.addi %9, %22 : tensor<64x8xi32> loc(#loc10)
      %24 = tt.addptr %10, %23 : tensor<64x8x!tt.ptr<f32>>, tensor<64x8xi32> loc(#loc11)
      %25 = tt.broadcast %20 : tensor<1x8xi1> -> tensor<64x8xi1> loc(#loc12)
      %26 = arith.andi %25, %11 : tensor<64x8xi1> loc(#loc12)
      %27 = tt.load %24, %26, %cst_2 evictionPolicy = evict_first : tensor<64x8x!tt.ptr<f32>> loc(#loc18)
      %28 = tt.addptr %12, %19 : tensor<1x8x!tt.ptr<f32>>, tensor<1x8xi32> loc(#loc13)
      %29 = tt.load %28, %20, %cst evictionPolicy = evict_last : tensor<1x8x!tt.ptr<f32>> loc(#loc19)
      %30 = tt.broadcast %29 : tensor<1x8xf32> -> tensor<64x8xf32> loc(#loc20)
      %31 = arith.mulf %27, %30 : tensor<64x8xf32> loc(#loc20)
      %32 = arith.addf %arg6, %31 : tensor<64x8xf32> loc(#loc21)
      %33 = arith.select %26, %32, %arg6 : tensor<64x8xi1>, tensor<64x8xf32> loc(#loc22)
      scf.yield %33 : tensor<64x8xf32> loc(#loc23)
    } loc(#loc14)
    %14 = "tt.reduce"(%13) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc25)), %arg6: f32 loc(callsite(#loc1 at #loc25))):
      %18 = arith.addf %arg5, %arg6 : f32 loc(#loc34)
      tt.reduce.return %18 : f32 loc(#loc31)
    }) : (tensor<64x8xf32>) -> tensor<64xf32> loc(#loc31)
    %15 = tt.expand_dims %14 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc27)
    %16 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc28)
    %17 = tt.addptr %16, %5 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc28)
    tt.store %17, %15, %6 : tensor<64x1x!tt.ptr<f32>> loc(#loc29)
    tt.return loc(#loc30)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":22:28)
#loc3 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":22:33)
#loc4 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":23:36)
#loc5 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":23:44)
#loc6 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":23:23)
#loc7 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":24:21)
#loc8 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":25:25)
#loc9 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":25:33)
#loc10 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":32:39)
#loc11 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":32:34)
#loc12 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":32:57)
#loc13 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":33:34)
#loc14 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":28:36)
#loc15 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":29:27)
#loc16 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":30:25)
#loc17 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":32:44)
#loc18 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":32:49)
#loc19 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":33:39)
#loc20 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":34:22)
#loc21 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":36:23)
#loc22 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":37:46)
#loc23 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":37:8)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc27 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":38:28)
#loc28 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":39:25)
#loc29 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":39:36)
#loc30 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":39:4)
#loc31 = loc(callsite(#loc24 at #loc25))
#loc33 = loc(callsite(#loc26 at #loc24))
#loc34 = loc(callsite(#loc33 at #loc25))
