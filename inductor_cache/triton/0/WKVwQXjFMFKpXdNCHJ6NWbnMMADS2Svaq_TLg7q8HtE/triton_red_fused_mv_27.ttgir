#blocked = #triton_gpu.blocked<{sizePerThread = [4, 1], threadsPerWarp = [16, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [2, 2], order = [0, 1]}>
#loc = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":19:0)
#loc1 = loc(unknown)
#loc23 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":38:25)
#loc30 = loc(callsite(#loc1 at #loc23))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused_mv_27(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x8xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<1024> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1024> : tensor<64x1xi32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<1x8xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<1024> : tensor<1x8xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<128> : tensor<1x8xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<64x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<64x1xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_0 : tensor<64x1xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_1 : tensor<64x1xi32, #blocked1> loc(#loc6)
    %12 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc7)
    %14 = tt.broadcast %8 : tensor<64x1xi32, #blocked> -> tensor<64x8xi32, #blocked> loc(#loc8)
    %15 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x8x!tt.ptr<f32>, #blocked> loc(#loc9)
    %16 = tt.broadcast %10 : tensor<64x1xi1, #blocked> -> tensor<64x8xi1, #blocked> loc(#loc10)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc11)
    %18 = scf.for %arg5 = %c0_i32 to %c128_i32 step %c8_i32 iter_args(%arg6 = %cst) -> (tensor<64x8xf32, #blocked>)  : i32 {
      %24 = tt.splat %arg5 : i32 -> tensor<1x8xi32, #blocked> loc(#loc13)
      %25 = arith.addi %24, %13 : tensor<1x8xi32, #blocked> loc(#loc13)
      %26 = arith.cmpi slt, %25, %cst_4 : tensor<1x8xi32, #blocked> loc(#loc14)
      %27 = arith.muli %25, %cst_3 : tensor<1x8xi32, #blocked> loc(#loc15)
      %28 = tt.broadcast %27 : tensor<1x8xi32, #blocked> -> tensor<64x8xi32, #blocked> loc(#loc8)
      %29 = arith.addi %14, %28 : tensor<64x8xi32, #blocked> loc(#loc8)
      %30 = tt.addptr %15, %29 : tensor<64x8x!tt.ptr<f32>, #blocked>, tensor<64x8xi32, #blocked> loc(#loc9)
      %31 = tt.broadcast %26 : tensor<1x8xi1, #blocked> -> tensor<64x8xi1, #blocked> loc(#loc10)
      %32 = arith.andi %31, %16 : tensor<64x8xi1, #blocked> loc(#loc10)
      %33 = tt.load %30, %32, %cst evictionPolicy = evict_first : tensor<64x8x!tt.ptr<f32>, #blocked> loc(#loc16)
      %34 = tt.addptr %17, %25 : tensor<1x8x!tt.ptr<f32>, #blocked>, tensor<1x8xi32, #blocked> loc(#loc11)
      %35 = tt.load %34, %26, %cst_2 evictionPolicy = evict_last : tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc17)
      %36 = tt.broadcast %35 : tensor<1x8xf32, #blocked> -> tensor<64x8xf32, #blocked> loc(#loc18)
      %37 = arith.mulf %33, %36 : tensor<64x8xf32, #blocked> loc(#loc18)
      %38 = arith.addf %arg6, %37 : tensor<64x8xf32, #blocked> loc(#loc19)
      %39 = arith.select %32, %38, %arg6 : tensor<64x8xi1, #blocked>, tensor<64x8xf32, #blocked> loc(#loc20)
      scf.yield %39 : tensor<64x8xf32, #blocked> loc(#loc21)
    } loc(#loc12)
    %19 = "tt.reduce"(%18) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc23)), %arg6: f32 loc(callsite(#loc1 at #loc23))):
      %24 = arith.addf %arg5, %arg6 : f32 loc(#loc32)
      tt.reduce.return %24 : f32 loc(#loc29)
    }) : (tensor<64x8xf32, #blocked>) -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc29)
    %20 = triton_gpu.convert_layout %19 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc25)
    %21 = tt.expand_dims %20 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xf32, #blocked1> loc(#loc25)
    %22 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc26)
    %23 = tt.addptr %22, %9 : tensor<64x1x!tt.ptr<f32>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc26)
    tt.store %23, %21, %11 : tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc27)
    tt.return loc(#loc28)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":22:28)
#loc3 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":22:33)
#loc4 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":23:44)
#loc5 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":23:23)
#loc6 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":24:21)
#loc7 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":25:33)
#loc8 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":32:39)
#loc9 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":32:34)
#loc10 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":32:57)
#loc11 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":33:34)
#loc12 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":28:36)
#loc13 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":29:27)
#loc14 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":30:25)
#loc15 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":32:44)
#loc16 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":32:49)
#loc17 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":33:39)
#loc18 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":34:22)
#loc19 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":36:23)
#loc20 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":37:46)
#loc21 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":37:8)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc25 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":38:28)
#loc26 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":39:25)
#loc27 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":39:36)
#loc28 = loc("inductor_cache/el/celexajuoavn77uv2dkvrmqzcnh7h57xvqpyhy6ryh5g2evpr4ug.py":39:4)
#loc29 = loc(callsite(#loc22 at #loc23))
#loc31 = loc(callsite(#loc24 at #loc22))
#loc32 = loc(callsite(#loc31 at #loc23))
