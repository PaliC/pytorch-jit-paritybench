; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = icmp slt i32 %10, 64, !dbg !11
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %13 = shl i32 %12, 9, !dbg !13
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %15 = shl i32 %14, 2, !dbg !14
  %16 = and i32 %15, 508, !dbg !14
  %17 = or disjoint i32 %13, %16, !dbg !15
  %18 = icmp slt i32 %17, 1024, !dbg !16
  %19 = shl i32 %10, 10, !dbg !17
  %20 = add i32 %17, %19, !dbg !18
  %21 = sext i32 %20 to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !19
  %23 = and i1 %11, %18, !dbg !20
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 %23) #4, !dbg !21
  %25 = sext i32 %17 to i64, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !22
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 %18) #4, !dbg !23
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !24
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 %18) #4, !dbg !25
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !25
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !25
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !25
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !25
  %34 = bitcast i32 %30 to float, !dbg !25
  %35 = bitcast i32 %31 to float, !dbg !25
  %36 = bitcast i32 %32 to float, !dbg !25
  %37 = bitcast i32 %33 to float, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !26
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %18) #4, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !28
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %18) #4, !dbg !29
  %42 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !30
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %23) #4, !dbg !31
  %44 = fadd float %34, 0x3EE4F8B580000000, !dbg !32
  %45 = fadd float %35, 0x3EE4F8B580000000, !dbg !32
  %46 = fadd float %36, 0x3EE4F8B580000000, !dbg !32
  %47 = fadd float %37, 0x3EE4F8B580000000, !dbg !32
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %48, 0, !dbg !33
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i = icmp eq i32 %49, 0, !dbg !33
  br i1 %.not.i, label %55, label %50, !dbg !33

50:                                               ; preds = %9
  br i1 %.not1.i, label %53, label %51, !dbg !33

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %44) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %44) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

55:                                               ; preds = %9
  br i1 %.not1.i, label %58, label %56, !dbg !33

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.f(float %44) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.f(float %44) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %51, %53, %56, %58
  %.0.i = phi float [ %52, %51 ], [ %54, %53 ], [ %57, %56 ], [ %59, %58 ], !dbg !33
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i1 = icmp eq i32 %60, 0, !dbg !33
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i4 = icmp eq i32 %61, 0, !dbg !33
  br i1 %.not.i1, label %67, label %62, !dbg !33

62:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %65, label %63, !dbg !33

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #4, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #4, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

67:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %70, label %68, !dbg !33

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #4, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #4, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

__nv_sqrtf.exit5:                                 ; preds = %63, %65, %68, %70
  %.0.i3 = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !33
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i6 = icmp eq i32 %72, 0, !dbg !33
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i9 = icmp eq i32 %73, 0, !dbg !33
  br i1 %.not.i6, label %79, label %74, !dbg !33

74:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %77, label %75, !dbg !33

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #4, !dbg !33
  br label %__nv_sqrtf.exit10, !dbg !33

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #4, !dbg !33
  br label %__nv_sqrtf.exit10, !dbg !33

79:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %82, label %80, !dbg !33

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #4, !dbg !33
  br label %__nv_sqrtf.exit10, !dbg !33

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #4, !dbg !33
  br label %__nv_sqrtf.exit10, !dbg !33

__nv_sqrtf.exit10:                                ; preds = %75, %77, %80, %82
  %.0.i8 = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !33
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i11 = icmp eq i32 %84, 0, !dbg !33
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i14 = icmp eq i32 %85, 0, !dbg !33
  br i1 %.not.i11, label %91, label %86, !dbg !33

86:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %89, label %87, !dbg !33

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #4, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #4, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

91:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %94, label %92, !dbg !33

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #4, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #4, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

__nv_sqrtf.exit15:                                ; preds = %87, %89, %92, %94
  %.0.i13 = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !33
  %96 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !21
  %97 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !23
  %98 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !21
  %99 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !23
  %100 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !21
  %101 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !23
  %102 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !21
  %103 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !23
  %104 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !31
  %105 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !31
  %106 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !31
  %107 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !31
  %108 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !29
  %109 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !29
  %110 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !29
  %111 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !29
  %112 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !27
  %113 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !27
  %114 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !27
  %115 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !27
  %116 = and i32 %14, 127, !dbg !14
  %117 = or disjoint i32 %116, 384, !dbg !14
  %118 = or disjoint i32 %13, %117, !dbg !15
  %119 = icmp slt i32 %118, 1024, !dbg !16
  %120 = and i1 %11, %119, !dbg !20
  %121 = or disjoint i32 %116, 256, !dbg !14
  %122 = or disjoint i32 %13, %121, !dbg !15
  %123 = icmp slt i32 %122, 1024, !dbg !16
  %124 = and i1 %11, %123, !dbg !20
  %125 = or disjoint i32 %116, 128, !dbg !14
  %126 = or disjoint i32 %13, %125, !dbg !15
  %127 = icmp slt i32 %126, 1024, !dbg !16
  %128 = and i1 %11, %127, !dbg !20
  %129 = or disjoint i32 %13, %116, !dbg !15
  %130 = icmp slt i32 %129, 1024, !dbg !16
  %131 = and i1 %11, %130, !dbg !20
  %.frozen = freeze i32 %10, !dbg !34
  %132 = sdiv i32 %.frozen, 16, !dbg !34
  %133 = mul i32 %132, 16, !dbg !35
  %.decomposed = sub i32 %.frozen, %133, !dbg !35
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !36
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !36
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !36
  %138 = insertelement <4 x i32> poison, i32 %96, i64 0, !dbg !21
  %139 = insertelement <4 x i32> %138, i32 %98, i64 1, !dbg !21
  %140 = insertelement <4 x i32> %139, i32 %100, i64 2, !dbg !21
  %141 = insertelement <4 x i32> %140, i32 %102, i64 3, !dbg !21
  %142 = bitcast <4 x i32> %141 to <4 x float>, !dbg !21
  %143 = insertelement <4 x i32> poison, i32 %97, i64 0, !dbg !23
  %144 = insertelement <4 x i32> %143, i32 %99, i64 1, !dbg !23
  %145 = insertelement <4 x i32> %144, i32 %101, i64 2, !dbg !23
  %146 = insertelement <4 x i32> %145, i32 %103, i64 3, !dbg !23
  %147 = bitcast <4 x i32> %146 to <4 x float>, !dbg !23
  %148 = fsub <4 x float> %142, %147, !dbg !37
  %149 = insertelement <4 x i32> poison, i32 %104, i64 0, !dbg !31
  %150 = insertelement <4 x i32> %149, i32 %105, i64 1, !dbg !31
  %151 = insertelement <4 x i32> %150, i32 %106, i64 2, !dbg !31
  %152 = insertelement <4 x i32> %151, i32 %107, i64 3, !dbg !31
  %153 = bitcast <4 x i32> %152 to <4 x float>, !dbg !31
  %154 = insertelement <4 x i32> poison, i32 %108, i64 0, !dbg !29
  %155 = insertelement <4 x i32> %154, i32 %109, i64 1, !dbg !29
  %156 = insertelement <4 x i32> %155, i32 %110, i64 2, !dbg !29
  %157 = insertelement <4 x i32> %156, i32 %111, i64 3, !dbg !29
  %158 = bitcast <4 x i32> %157 to <4 x float>, !dbg !29
  %159 = insertelement <4 x i32> poison, i32 %112, i64 0, !dbg !27
  %160 = insertelement <4 x i32> %159, i32 %113, i64 1, !dbg !27
  %161 = insertelement <4 x i32> %160, i32 %114, i64 2, !dbg !27
  %162 = insertelement <4 x i32> %161, i32 %115, i64 3, !dbg !27
  %163 = bitcast <4 x i32> %162 to <4 x float>, !dbg !27
  %164 = insertelement <4 x float> poison, float %137, i64 0, !dbg !38
  %165 = insertelement <4 x float> %164, float %136, i64 1, !dbg !38
  %166 = insertelement <4 x float> %165, float %135, i64 2, !dbg !38
  %167 = insertelement <4 x float> %166, float %134, i64 3, !dbg !38
  %168 = fmul <4 x float> %148, %167, !dbg !38
  %169 = fmul <4 x float> %168, %163, !dbg !39
  %170 = fadd <4 x float> %169, %158, !dbg !40
  %171 = fadd <4 x float> %170, %153, !dbg !41
  %172 = fcmp olt <4 x float> %171, zeroinitializer, !dbg !42
  %173 = extractelement <4 x i1> %172, i64 3, !dbg !46
  %174 = extractelement <4 x float> %171, i64 3, !dbg !46
  %175 = select i1 %173, float 0.000000e+00, float %174, !dbg !46
  %176 = extractelement <4 x i1> %172, i64 2, !dbg !46
  %177 = extractelement <4 x float> %171, i64 2, !dbg !46
  %178 = select i1 %176, float 0.000000e+00, float %177, !dbg !46
  %179 = extractelement <4 x i1> %172, i64 1, !dbg !46
  %180 = extractelement <4 x float> %171, i64 1, !dbg !46
  %181 = select i1 %179, float 0.000000e+00, float %180, !dbg !46
  %182 = extractelement <4 x i1> %172, i64 0, !dbg !46
  %183 = extractelement <4 x float> %171, i64 0, !dbg !46
  %184 = select i1 %182, float 0.000000e+00, float %183, !dbg !46
  %185 = shl i32 %129, 4, !dbg !47
  %186 = shl i32 %126, 4, !dbg !47
  %187 = shl i32 %122, 4, !dbg !47
  %188 = shl i32 %118, 4, !dbg !47
  %189 = shl i32 %132, 14, !dbg !48
  %190 = add i32 %189, %.decomposed, !dbg !49
  %191 = add i32 %190, %185, !dbg !50
  %192 = add i32 %190, %186, !dbg !50
  %193 = add i32 %190, %187, !dbg !50
  %194 = add i32 %190, %188, !dbg !50
  %195 = sext i32 %191 to i64, !dbg !51
  %196 = getelementptr float, ptr addrspace(1) %6, i64 %195, !dbg !51
  %197 = sext i32 %192 to i64, !dbg !51
  %198 = getelementptr float, ptr addrspace(1) %6, i64 %197, !dbg !51
  %199 = sext i32 %193 to i64, !dbg !51
  %200 = getelementptr float, ptr addrspace(1) %6, i64 %199, !dbg !51
  %201 = sext i32 %194 to i64, !dbg !51
  %202 = getelementptr float, ptr addrspace(1) %6, i64 %201, !dbg !51
  %203 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !52
  %204 = bitcast float %175 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %204, i1 true) #4, !dbg !52
  %205 = or disjoint i32 %16, 1, !dbg !52
  %206 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %205, !dbg !52
  %207 = bitcast float %178 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, <1 x i32> %207, i1 true) #4, !dbg !52
  %208 = or disjoint i32 %16, 2, !dbg !52
  %209 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %208, !dbg !52
  %210 = bitcast float %181 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %209, <1 x i32> %210, i1 true) #4, !dbg !52
  %211 = or disjoint i32 %16, 3, !dbg !52
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %211, !dbg !52
  %213 = bitcast float %184 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %212, <1 x i32> %213, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %214 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %116, !dbg !52
  %215 = load i32, ptr addrspace(3) %214, align 4, !dbg !52
  %216 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %125, !dbg !52
  %217 = load i32, ptr addrspace(3) %216, align 4, !dbg !52
  %218 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %121, !dbg !52
  %219 = load i32, ptr addrspace(3) %218, align 4, !dbg !52
  %220 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %117, !dbg !52
  %221 = load i32, ptr addrspace(3) %220, align 4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %215, ptr addrspace(1) %196, i1 %131) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %217, ptr addrspace(1) %198, i1 %128) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %219, ptr addrspace(1) %200, i1 %124) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %221, ptr addrspace(1) %202, i1 %120) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7jh7bg2cdwcucattb2hvbjmf4nag4caa5kroidv3ztvtgs23f7m.py", directory: "inductor_cache/7j")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_21, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_21, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_21", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 32, column: 40, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 53, scope: !7)
!21 = !DILocation(line: 32, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 31, scope: !7)
!27 = !DILocation(line: 35, column: 36, scope: !7)
!28 = !DILocation(line: 36, column: 31, scope: !7)
!29 = !DILocation(line: 36, column: 36, scope: !7)
!30 = !DILocation(line: 37, column: 31, scope: !7)
!31 = !DILocation(line: 37, column: 46, scope: !7)
!32 = !DILocation(line: 40, column: 18, scope: !7)
!33 = !DILocation(line: 41, column: 26, scope: !7)
!34 = !DILocation(line: 31, column: 19, scope: !7)
!35 = !DILocation(line: 30, column: 19, scope: !7)
!36 = !DILocation(line: 43, column: 18, scope: !7)
!37 = !DILocation(line: 38, column: 18, scope: !7)
!38 = !DILocation(line: 46, column: 19, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 49, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 51, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 52, column: 33, scope: !7)
!48 = !DILocation(line: 52, column: 44, scope: !7)
!49 = !DILocation(line: 52, column: 30, scope: !7)
!50 = !DILocation(line: 52, column: 38, scope: !7)
!51 = !DILocation(line: 52, column: 25, scope: !7)
!52 = !DILocation(line: 52, column: 56, scope: !7)
!53 = !DILocation(line: 52, column: 4, scope: !7)
