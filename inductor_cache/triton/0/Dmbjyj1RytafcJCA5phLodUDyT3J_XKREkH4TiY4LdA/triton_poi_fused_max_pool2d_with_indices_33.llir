; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_33(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %9, 128, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 252, !dbg !12
  %13 = or disjoint i32 %7, %9, !dbg !13
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %12, !dbg !13
  %16 = icmp slt i32 %13, 144, !dbg !14
  %17 = icmp slt i32 %14, 144, !dbg !14
  %18 = icmp slt i32 %15, 144, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 2, !dbg !16
  %21 = lshr i32 %8, 6, !dbg !17
  %.lobit = and i32 %21, 1, !dbg !17
  %22 = or disjoint i32 %20, %.lobit, !dbg !18
  %23 = or disjoint i32 %22, 2, !dbg !18
  %24 = icmp slt i32 %20, 288, !dbg !19
  %25 = icmp slt i32 %22, 288, !dbg !19
  %26 = icmp slt i32 %23, 288, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %27 = sdiv i32 %.frozen, 6, !dbg !20
  %28 = mul i32 %27, 6, !dbg !21
  %.decomposed = sub i32 %.frozen, %28, !dbg !21
  %.frozen28 = freeze i32 %14, !dbg !20
  %29 = sdiv i32 %.frozen28, 6, !dbg !20
  %30 = mul i32 %29, 6, !dbg !21
  %.decomposed29 = sub i32 %.frozen28, %30, !dbg !21
  %31 = srem i32 %27, 6, !dbg !22
  %32 = srem i32 %29, 6, !dbg !22
  %33 = sdiv i32 %13, 36, !dbg !23
  %34 = sdiv i32 %14, 36, !dbg !23
  %.frozen30 = freeze i32 %15, !dbg !23
  %35 = sdiv i32 %.frozen30, 36, !dbg !23
  %36 = mul i32 %35, 36, !dbg !24
  %.decomposed31 = sub i32 %.frozen30, %36, !dbg !24
  %37 = mul nsw i32 %.decomposed, 576, !dbg !25
  %38 = mul nsw i32 %.decomposed29, 576, !dbg !25
  %39 = mul nsw i32 %31, 7488, !dbg !26
  %40 = mul nsw i32 %32, 7488, !dbg !26
  %41 = mul i32 %33, 48672, !dbg !27
  %42 = mul i32 %34, 48672, !dbg !27
  %43 = add i32 %41, %37, !dbg !28
  %44 = add i32 %43, %20, !dbg !29
  %45 = add i32 %44, %39, !dbg !30
  %46 = add i32 %42, %38, !dbg !28
  %47 = add i32 %46, %20, !dbg !29
  %48 = add i32 %47, %40, !dbg !30
  %49 = sext i32 %45 to i64, !dbg !31
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !31
  %51 = sext i32 %48 to i64, !dbg !31
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !31
  %53 = and i1 %24, %16, !dbg !32
  %54 = and i1 %24, %17, !dbg !32
  %55 = and i1 %18, %25, !dbg !32
  %56 = and i1 %26, %18, !dbg !32
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %53) #2, !dbg !33
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !33
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !33
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !33
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !33
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %54) #2, !dbg !33
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !33
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !33
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !33
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !33
  %67 = add i32 %20, 288, !dbg !34
  %68 = add i32 %43, %67, !dbg !35
  %69 = add i32 %68, %39, !dbg !36
  %70 = add i32 %46, %67, !dbg !35
  %71 = add i32 %70, %40, !dbg !36
  %72 = sext i32 %69 to i64, !dbg !37
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !37
  %74 = sext i32 %71 to i64, !dbg !37
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !37
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 %53) #2, !dbg !38
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !38
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !38
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !38
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !38
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %54) #2, !dbg !38
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !38
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !38
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !38
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !38
  %86 = add i32 %20, 576, !dbg !39
  %87 = add i32 %43, %86, !dbg !40
  %88 = add i32 %87, %39, !dbg !41
  %89 = add i32 %46, %86, !dbg !40
  %90 = add i32 %89, %40, !dbg !41
  %91 = sext i32 %88 to i64, !dbg !42
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !42
  %93 = sext i32 %90 to i64, !dbg !42
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !42
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %92, i1 %53) #2, !dbg !43
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !43
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !43
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !43
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !43
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 %54) #2, !dbg !43
  %101 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !43
  %102 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !43
  %103 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !43
  %104 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !43
  %105 = add i32 %20, 3744, !dbg !44
  %106 = add i32 %43, %105, !dbg !45
  %107 = add i32 %106, %39, !dbg !46
  %108 = add i32 %46, %105, !dbg !45
  %109 = add i32 %108, %40, !dbg !46
  %110 = sext i32 %107 to i64, !dbg !47
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !47
  %112 = sext i32 %109 to i64, !dbg !47
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !47
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %111, i1 %53) #2, !dbg !48
  %115 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !48
  %116 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !48
  %117 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !48
  %118 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !48
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %113, i1 %54) #2, !dbg !48
  %120 = extractvalue { i32, i32, i32, i32 } %119, 0, !dbg !48
  %121 = extractvalue { i32, i32, i32, i32 } %119, 1, !dbg !48
  %122 = extractvalue { i32, i32, i32, i32 } %119, 2, !dbg !48
  %123 = extractvalue { i32, i32, i32, i32 } %119, 3, !dbg !48
  %124 = add i32 %20, 4032, !dbg !49
  %125 = add i32 %43, %124, !dbg !50
  %126 = add i32 %125, %39, !dbg !51
  %127 = add i32 %46, %124, !dbg !50
  %128 = add i32 %127, %40, !dbg !51
  %129 = sext i32 %126 to i64, !dbg !52
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !52
  %131 = sext i32 %128 to i64, !dbg !52
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !52
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %130, i1 %53) #2, !dbg !53
  %134 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !53
  %135 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !53
  %136 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !53
  %137 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !53
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %132, i1 %54) #2, !dbg !53
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !53
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !53
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !53
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !53
  %143 = add i32 %20, 4320, !dbg !54
  %144 = add i32 %43, %143, !dbg !55
  %145 = add i32 %144, %39, !dbg !56
  %146 = add i32 %46, %143, !dbg !55
  %147 = add i32 %146, %40, !dbg !56
  %148 = sext i32 %145 to i64, !dbg !57
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !57
  %150 = sext i32 %147 to i64, !dbg !57
  %151 = getelementptr float, ptr addrspace(1) %0, i64 %150, !dbg !57
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %149, i1 %53) #2, !dbg !58
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !58
  %154 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !58
  %155 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !58
  %156 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !58
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %151, i1 %54) #2, !dbg !58
  %158 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !58
  %159 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !58
  %160 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !58
  %161 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !58
  %162 = add i32 %20, 7488, !dbg !59
  %163 = add i32 %43, %162, !dbg !60
  %164 = add i32 %163, %39, !dbg !61
  %165 = add i32 %46, %162, !dbg !60
  %166 = add i32 %165, %40, !dbg !61
  %167 = sext i32 %164 to i64, !dbg !62
  %168 = getelementptr float, ptr addrspace(1) %0, i64 %167, !dbg !62
  %169 = sext i32 %166 to i64, !dbg !62
  %170 = getelementptr float, ptr addrspace(1) %0, i64 %169, !dbg !62
  %171 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %168, i1 %53) #2, !dbg !63
  %172 = extractvalue { i32, i32, i32, i32 } %171, 0, !dbg !63
  %173 = extractvalue { i32, i32, i32, i32 } %171, 1, !dbg !63
  %174 = extractvalue { i32, i32, i32, i32 } %171, 2, !dbg !63
  %175 = extractvalue { i32, i32, i32, i32 } %171, 3, !dbg !63
  %176 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %170, i1 %54) #2, !dbg !63
  %177 = extractvalue { i32, i32, i32, i32 } %176, 0, !dbg !63
  %178 = extractvalue { i32, i32, i32, i32 } %176, 1, !dbg !63
  %179 = extractvalue { i32, i32, i32, i32 } %176, 2, !dbg !63
  %180 = extractvalue { i32, i32, i32, i32 } %176, 3, !dbg !63
  %181 = add i32 %20, 7776, !dbg !64
  %182 = add i32 %43, %181, !dbg !65
  %183 = add i32 %182, %39, !dbg !66
  %184 = add i32 %46, %181, !dbg !65
  %185 = add i32 %184, %40, !dbg !66
  %186 = sext i32 %183 to i64, !dbg !67
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %186, !dbg !67
  %188 = sext i32 %185 to i64, !dbg !67
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %188, !dbg !67
  %190 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %187, i1 %53) #2, !dbg !68
  %191 = extractvalue { i32, i32, i32, i32 } %190, 0, !dbg !68
  %192 = extractvalue { i32, i32, i32, i32 } %190, 1, !dbg !68
  %193 = extractvalue { i32, i32, i32, i32 } %190, 2, !dbg !68
  %194 = extractvalue { i32, i32, i32, i32 } %190, 3, !dbg !68
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %189, i1 %54) #2, !dbg !68
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !68
  %197 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !68
  %198 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !68
  %199 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !68
  %200 = add i32 %20, 8064, !dbg !69
  %201 = add i32 %43, %200, !dbg !70
  %202 = add i32 %201, %39, !dbg !71
  %203 = add i32 %46, %200, !dbg !70
  %204 = add i32 %203, %40, !dbg !71
  %205 = sext i32 %202 to i64, !dbg !72
  %206 = getelementptr float, ptr addrspace(1) %0, i64 %205, !dbg !72
  %207 = sext i32 %204 to i64, !dbg !72
  %208 = getelementptr float, ptr addrspace(1) %0, i64 %207, !dbg !72
  %209 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %206, i1 %53) #2, !dbg !73
  %210 = extractvalue { i32, i32, i32, i32 } %209, 0, !dbg !73
  %211 = extractvalue { i32, i32, i32, i32 } %209, 1, !dbg !73
  %212 = extractvalue { i32, i32, i32, i32 } %209, 2, !dbg !73
  %213 = extractvalue { i32, i32, i32, i32 } %209, 3, !dbg !73
  %214 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %208, i1 %54) #2, !dbg !73
  %215 = extractvalue { i32, i32, i32, i32 } %214, 0, !dbg !73
  %216 = extractvalue { i32, i32, i32, i32 } %214, 1, !dbg !73
  %217 = extractvalue { i32, i32, i32, i32 } %214, 2, !dbg !73
  %218 = extractvalue { i32, i32, i32, i32 } %214, 3, !dbg !73
  %219 = insertelement <4 x i32> poison, i32 %58, i64 0, !dbg !33
  %220 = insertelement <4 x i32> %219, i32 %59, i64 1, !dbg !33
  %221 = insertelement <4 x i32> %220, i32 %60, i64 2, !dbg !33
  %222 = insertelement <4 x i32> %221, i32 %61, i64 3, !dbg !33
  %223 = bitcast <4 x i32> %222 to <4 x float>, !dbg !33
  %224 = insertelement <4 x i32> poison, i32 %77, i64 0, !dbg !38
  %225 = insertelement <4 x i32> %224, i32 %78, i64 1, !dbg !38
  %226 = insertelement <4 x i32> %225, i32 %79, i64 2, !dbg !38
  %227 = insertelement <4 x i32> %226, i32 %80, i64 3, !dbg !38
  %228 = bitcast <4 x i32> %227 to <4 x float>, !dbg !38
  %229 = insertelement <4 x i32> poison, i32 %96, i64 0, !dbg !43
  %230 = insertelement <4 x i32> %229, i32 %97, i64 1, !dbg !43
  %231 = insertelement <4 x i32> %230, i32 %98, i64 2, !dbg !43
  %232 = insertelement <4 x i32> %231, i32 %99, i64 3, !dbg !43
  %233 = bitcast <4 x i32> %232 to <4 x float>, !dbg !43
  %234 = insertelement <4 x i32> poison, i32 %115, i64 0, !dbg !48
  %235 = insertelement <4 x i32> %234, i32 %116, i64 1, !dbg !48
  %236 = insertelement <4 x i32> %235, i32 %117, i64 2, !dbg !48
  %237 = insertelement <4 x i32> %236, i32 %118, i64 3, !dbg !48
  %238 = bitcast <4 x i32> %237 to <4 x float>, !dbg !48
  %239 = insertelement <4 x i32> poison, i32 %134, i64 0, !dbg !53
  %240 = insertelement <4 x i32> %239, i32 %135, i64 1, !dbg !53
  %241 = insertelement <4 x i32> %240, i32 %136, i64 2, !dbg !53
  %242 = insertelement <4 x i32> %241, i32 %137, i64 3, !dbg !53
  %243 = bitcast <4 x i32> %242 to <4 x float>, !dbg !53
  %244 = insertelement <4 x i32> poison, i32 %153, i64 0, !dbg !58
  %245 = insertelement <4 x i32> %244, i32 %154, i64 1, !dbg !58
  %246 = insertelement <4 x i32> %245, i32 %155, i64 2, !dbg !58
  %247 = insertelement <4 x i32> %246, i32 %156, i64 3, !dbg !58
  %248 = bitcast <4 x i32> %247 to <4 x float>, !dbg !58
  %249 = insertelement <4 x i32> poison, i32 %172, i64 0, !dbg !63
  %250 = insertelement <4 x i32> %249, i32 %173, i64 1, !dbg !63
  %251 = insertelement <4 x i32> %250, i32 %174, i64 2, !dbg !63
  %252 = insertelement <4 x i32> %251, i32 %175, i64 3, !dbg !63
  %253 = bitcast <4 x i32> %252 to <4 x float>, !dbg !63
  %254 = insertelement <4 x i32> poison, i32 %191, i64 0, !dbg !68
  %255 = insertelement <4 x i32> %254, i32 %192, i64 1, !dbg !68
  %256 = insertelement <4 x i32> %255, i32 %193, i64 2, !dbg !68
  %257 = insertelement <4 x i32> %256, i32 %194, i64 3, !dbg !68
  %258 = bitcast <4 x i32> %257 to <4 x float>, !dbg !68
  %259 = insertelement <4 x i32> poison, i32 %210, i64 0, !dbg !73
  %260 = insertelement <4 x i32> %259, i32 %211, i64 1, !dbg !73
  %261 = insertelement <4 x i32> %260, i32 %212, i64 2, !dbg !73
  %262 = insertelement <4 x i32> %261, i32 %213, i64 3, !dbg !73
  %263 = bitcast <4 x i32> %262 to <4 x float>, !dbg !73
  %264 = fcmp ogt <4 x float> %228, %223, !dbg !74
  %265 = fcmp uno <4 x float> %228, zeroinitializer, !dbg !78
  %266 = or <4 x i1> %264, %265, !dbg !79
  %.v = select <4 x i1> %266, <4 x i32> %227, <4 x i32> %222, !dbg !80
  %267 = bitcast <4 x i32> %.v to <4 x float>, !dbg !80
  %268 = fcmp olt <4 x float> %267, %233, !dbg !81
  %269 = fcmp uno <4 x float> %233, zeroinitializer, !dbg !83
  %270 = or <4 x i1> %269, %268, !dbg !84
  %.v15 = select <4 x i1> %270, <4 x i32> %232, <4 x i32> %.v, !dbg !85
  %271 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !85
  %272 = fcmp olt <4 x float> %271, %238, !dbg !86
  %273 = fcmp uno <4 x float> %238, zeroinitializer, !dbg !88
  %274 = or <4 x i1> %273, %272, !dbg !89
  %.v16 = select <4 x i1> %274, <4 x i32> %237, <4 x i32> %.v15, !dbg !90
  %275 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !90
  %276 = fcmp olt <4 x float> %275, %243, !dbg !91
  %277 = fcmp uno <4 x float> %243, zeroinitializer, !dbg !93
  %278 = or <4 x i1> %277, %276, !dbg !94
  %.v17 = select <4 x i1> %278, <4 x i32> %242, <4 x i32> %.v16, !dbg !95
  %279 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !95
  %280 = fcmp olt <4 x float> %279, %248, !dbg !96
  %281 = fcmp uno <4 x float> %248, zeroinitializer, !dbg !98
  %282 = or <4 x i1> %281, %280, !dbg !99
  %.v18 = select <4 x i1> %282, <4 x i32> %247, <4 x i32> %.v17, !dbg !100
  %283 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !100
  %284 = fcmp olt <4 x float> %283, %253, !dbg !101
  %285 = fcmp uno <4 x float> %253, zeroinitializer, !dbg !103
  %286 = or <4 x i1> %285, %284, !dbg !104
  %.v19 = select <4 x i1> %286, <4 x i32> %252, <4 x i32> %.v18, !dbg !105
  %287 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !105
  %288 = fcmp olt <4 x float> %287, %258, !dbg !106
  %289 = fcmp uno <4 x float> %258, zeroinitializer, !dbg !108
  %290 = or <4 x i1> %289, %288, !dbg !109
  %.v20 = select <4 x i1> %290, <4 x i32> %257, <4 x i32> %.v19, !dbg !110
  %291 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !110
  %292 = fcmp olt <4 x float> %291, %263, !dbg !111
  %293 = extractelement <4 x i1> %292, i64 0, !dbg !113
  %294 = extractelement <4 x i1> %292, i64 1, !dbg !113
  %295 = extractelement <4 x i1> %292, i64 2, !dbg !113
  %296 = extractelement <4 x i1> %292, i64 3, !dbg !113
  %297 = zext <4 x i1> %264 to <4 x i8>, !dbg !114
  %298 = select <4 x i1> %268, <4 x i8> splat (i8 2), <4 x i8> %297, !dbg !115
  %299 = select <4 x i1> %272, <4 x i8> splat (i8 3), <4 x i8> %298, !dbg !116
  %300 = select <4 x i1> %276, <4 x i8> splat (i8 4), <4 x i8> %299, !dbg !117
  %301 = select <4 x i1> %280, <4 x i8> splat (i8 5), <4 x i8> %300, !dbg !118
  %302 = select <4 x i1> %284, <4 x i8> splat (i8 6), <4 x i8> %301, !dbg !119
  %303 = select <4 x i1> %288, <4 x i8> splat (i8 7), <4 x i8> %302, !dbg !120
  %304 = select <4 x i1> %292, <4 x i8> splat (i8 8), <4 x i8> %303, !dbg !121
  %305 = insertelement <4 x i32> poison, i32 %63, i64 0, !dbg !33
  %306 = insertelement <4 x i32> %305, i32 %64, i64 1, !dbg !33
  %307 = insertelement <4 x i32> %306, i32 %65, i64 2, !dbg !33
  %308 = insertelement <4 x i32> %307, i32 %66, i64 3, !dbg !33
  %309 = bitcast <4 x i32> %308 to <4 x float>, !dbg !33
  %310 = insertelement <4 x i32> poison, i32 %82, i64 0, !dbg !38
  %311 = insertelement <4 x i32> %310, i32 %83, i64 1, !dbg !38
  %312 = insertelement <4 x i32> %311, i32 %84, i64 2, !dbg !38
  %313 = insertelement <4 x i32> %312, i32 %85, i64 3, !dbg !38
  %314 = bitcast <4 x i32> %313 to <4 x float>, !dbg !38
  %315 = insertelement <4 x i32> poison, i32 %101, i64 0, !dbg !43
  %316 = insertelement <4 x i32> %315, i32 %102, i64 1, !dbg !43
  %317 = insertelement <4 x i32> %316, i32 %103, i64 2, !dbg !43
  %318 = insertelement <4 x i32> %317, i32 %104, i64 3, !dbg !43
  %319 = bitcast <4 x i32> %318 to <4 x float>, !dbg !43
  %320 = insertelement <4 x i32> poison, i32 %120, i64 0, !dbg !48
  %321 = insertelement <4 x i32> %320, i32 %121, i64 1, !dbg !48
  %322 = insertelement <4 x i32> %321, i32 %122, i64 2, !dbg !48
  %323 = insertelement <4 x i32> %322, i32 %123, i64 3, !dbg !48
  %324 = bitcast <4 x i32> %323 to <4 x float>, !dbg !48
  %325 = insertelement <4 x i32> poison, i32 %139, i64 0, !dbg !53
  %326 = insertelement <4 x i32> %325, i32 %140, i64 1, !dbg !53
  %327 = insertelement <4 x i32> %326, i32 %141, i64 2, !dbg !53
  %328 = insertelement <4 x i32> %327, i32 %142, i64 3, !dbg !53
  %329 = bitcast <4 x i32> %328 to <4 x float>, !dbg !53
  %330 = insertelement <4 x i32> poison, i32 %158, i64 0, !dbg !58
  %331 = insertelement <4 x i32> %330, i32 %159, i64 1, !dbg !58
  %332 = insertelement <4 x i32> %331, i32 %160, i64 2, !dbg !58
  %333 = insertelement <4 x i32> %332, i32 %161, i64 3, !dbg !58
  %334 = bitcast <4 x i32> %333 to <4 x float>, !dbg !58
  %335 = insertelement <4 x i32> poison, i32 %177, i64 0, !dbg !63
  %336 = insertelement <4 x i32> %335, i32 %178, i64 1, !dbg !63
  %337 = insertelement <4 x i32> %336, i32 %179, i64 2, !dbg !63
  %338 = insertelement <4 x i32> %337, i32 %180, i64 3, !dbg !63
  %339 = bitcast <4 x i32> %338 to <4 x float>, !dbg !63
  %340 = insertelement <4 x i32> poison, i32 %196, i64 0, !dbg !68
  %341 = insertelement <4 x i32> %340, i32 %197, i64 1, !dbg !68
  %342 = insertelement <4 x i32> %341, i32 %198, i64 2, !dbg !68
  %343 = insertelement <4 x i32> %342, i32 %199, i64 3, !dbg !68
  %344 = bitcast <4 x i32> %343 to <4 x float>, !dbg !68
  %345 = insertelement <4 x i32> poison, i32 %215, i64 0, !dbg !73
  %346 = insertelement <4 x i32> %345, i32 %216, i64 1, !dbg !73
  %347 = insertelement <4 x i32> %346, i32 %217, i64 2, !dbg !73
  %348 = insertelement <4 x i32> %347, i32 %218, i64 3, !dbg !73
  %349 = bitcast <4 x i32> %348 to <4 x float>, !dbg !73
  %350 = fcmp ogt <4 x float> %314, %309, !dbg !74
  %351 = fcmp uno <4 x float> %314, zeroinitializer, !dbg !78
  %352 = or <4 x i1> %350, %351, !dbg !79
  %.v21 = select <4 x i1> %352, <4 x i32> %313, <4 x i32> %308, !dbg !80
  %353 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !80
  %354 = fcmp olt <4 x float> %353, %319, !dbg !81
  %355 = fcmp uno <4 x float> %319, zeroinitializer, !dbg !83
  %356 = or <4 x i1> %355, %354, !dbg !84
  %.v22 = select <4 x i1> %356, <4 x i32> %318, <4 x i32> %.v21, !dbg !85
  %357 = bitcast <4 x i32> %.v22 to <4 x float>, !dbg !85
  %358 = fcmp olt <4 x float> %357, %324, !dbg !86
  %359 = fcmp uno <4 x float> %324, zeroinitializer, !dbg !88
  %360 = or <4 x i1> %359, %358, !dbg !89
  %.v23 = select <4 x i1> %360, <4 x i32> %323, <4 x i32> %.v22, !dbg !90
  %361 = bitcast <4 x i32> %.v23 to <4 x float>, !dbg !90
  %362 = fcmp olt <4 x float> %361, %329, !dbg !91
  %363 = fcmp uno <4 x float> %329, zeroinitializer, !dbg !93
  %364 = or <4 x i1> %363, %362, !dbg !94
  %.v24 = select <4 x i1> %364, <4 x i32> %328, <4 x i32> %.v23, !dbg !95
  %365 = bitcast <4 x i32> %.v24 to <4 x float>, !dbg !95
  %366 = fcmp olt <4 x float> %365, %334, !dbg !96
  %367 = fcmp uno <4 x float> %334, zeroinitializer, !dbg !98
  %368 = or <4 x i1> %367, %366, !dbg !99
  %.v25 = select <4 x i1> %368, <4 x i32> %333, <4 x i32> %.v24, !dbg !100
  %369 = bitcast <4 x i32> %.v25 to <4 x float>, !dbg !100
  %370 = fcmp olt <4 x float> %369, %339, !dbg !101
  %371 = fcmp uno <4 x float> %339, zeroinitializer, !dbg !103
  %372 = or <4 x i1> %371, %370, !dbg !104
  %.v26 = select <4 x i1> %372, <4 x i32> %338, <4 x i32> %.v25, !dbg !105
  %373 = bitcast <4 x i32> %.v26 to <4 x float>, !dbg !105
  %374 = fcmp olt <4 x float> %373, %344, !dbg !106
  %375 = fcmp uno <4 x float> %344, zeroinitializer, !dbg !108
  %376 = or <4 x i1> %375, %374, !dbg !109
  %.v27 = select <4 x i1> %376, <4 x i32> %343, <4 x i32> %.v26, !dbg !110
  %377 = bitcast <4 x i32> %.v27 to <4 x float>, !dbg !110
  %378 = fcmp olt <4 x float> %377, %349, !dbg !111
  %379 = shufflevector <4 x float> %349, <4 x float> %263, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !122
  %380 = fcmp uno <8 x float> %379, zeroinitializer, !dbg !122
  %381 = extractelement <8 x i1> %380, i64 7, !dbg !113
  %382 = or i1 %381, %293, !dbg !113
  %383 = extractelement <8 x i1> %380, i64 6, !dbg !113
  %384 = or i1 %383, %294, !dbg !113
  %385 = extractelement <8 x i1> %380, i64 5, !dbg !113
  %386 = or i1 %385, %295, !dbg !113
  %387 = extractelement <8 x i1> %380, i64 4, !dbg !113
  %388 = or i1 %387, %296, !dbg !113
  %389 = extractelement <4 x i1> %378, i64 0, !dbg !113
  %390 = extractelement <8 x i1> %380, i64 3, !dbg !113
  %391 = or i1 %390, %389, !dbg !113
  %392 = extractelement <4 x i1> %378, i64 1, !dbg !113
  %393 = extractelement <8 x i1> %380, i64 2, !dbg !113
  %394 = or i1 %393, %392, !dbg !113
  %395 = extractelement <4 x i1> %378, i64 2, !dbg !113
  %396 = extractelement <8 x i1> %380, i64 1, !dbg !113
  %397 = or i1 %396, %395, !dbg !113
  %398 = extractelement <4 x i1> %378, i64 3, !dbg !113
  %399 = extractelement <8 x i1> %380, i64 0, !dbg !113
  %400 = or i1 %399, %398, !dbg !113
  %401 = zext <4 x i1> %350 to <4 x i8>, !dbg !114
  %402 = select <4 x i1> %354, <4 x i8> splat (i8 2), <4 x i8> %401, !dbg !115
  %403 = select <4 x i1> %358, <4 x i8> splat (i8 3), <4 x i8> %402, !dbg !116
  %404 = select <4 x i1> %362, <4 x i8> splat (i8 4), <4 x i8> %403, !dbg !117
  %405 = select <4 x i1> %366, <4 x i8> splat (i8 5), <4 x i8> %404, !dbg !118
  %406 = select <4 x i1> %370, <4 x i8> splat (i8 6), <4 x i8> %405, !dbg !119
  %407 = select <4 x i1> %374, <4 x i8> splat (i8 7), <4 x i8> %406, !dbg !120
  %408 = select <4 x i1> %378, <4 x i8> splat (i8 8), <4 x i8> %407, !dbg !121
  %409 = mul i32 %22, 36, !dbg !123
  %410 = mul i32 %23, 36, !dbg !123
  %411 = mul i32 %35, 27648, !dbg !124
  %412 = add i32 %411, %.decomposed31, !dbg !125
  %413 = add i32 %412, %409, !dbg !126
  %414 = add i32 %412, %410, !dbg !126
  %415 = sext i32 %413 to i64, !dbg !127
  %416 = getelementptr float, ptr addrspace(1) %1, i64 %415, !dbg !127
  %417 = sext i32 %414 to i64, !dbg !127
  %418 = getelementptr float, ptr addrspace(1) %1, i64 %417, !dbg !127
  %419 = and i32 %11, 508, !dbg !128
  %420 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !128
  %421 = extractelement <4 x i32> %.v20, i64 0, !dbg !128
  %422 = select i1 %382, i32 %210, i32 %421, !dbg !129
  %423 = insertelement <1 x i32> poison, i32 %422, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %420, <1 x i32> %423, i1 true) #2, !dbg !128
  %424 = getelementptr inbounds i8, ptr addrspace(3) %420, i32 1040, !dbg !128
  %425 = extractelement <4 x i32> %.v20, i64 1, !dbg !128
  %426 = select i1 %384, i32 %211, i32 %425, !dbg !129
  %427 = insertelement <1 x i32> poison, i32 %426, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %424, <1 x i32> %427, i1 true) #2, !dbg !128
  %428 = getelementptr inbounds i8, ptr addrspace(3) %420, i32 2080, !dbg !128
  %429 = extractelement <4 x i32> %.v20, i64 2, !dbg !128
  %430 = select i1 %386, i32 %212, i32 %429, !dbg !129
  %431 = insertelement <1 x i32> poison, i32 %430, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %428, <1 x i32> %431, i1 true) #2, !dbg !128
  %432 = getelementptr inbounds i8, ptr addrspace(3) %420, i32 3120, !dbg !128
  %433 = extractelement <4 x i32> %.v20, i64 3, !dbg !128
  %434 = select i1 %388, i32 %213, i32 %433, !dbg !129
  %435 = insertelement <1 x i32> poison, i32 %434, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %432, <1 x i32> %435, i1 true) #2, !dbg !128
  %436 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !128
  %437 = extractelement <4 x i32> %.v27, i64 0, !dbg !128
  %438 = select i1 %391, i32 %215, i32 %437, !dbg !129
  %439 = insertelement <1 x i32> poison, i32 %438, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %436, <1 x i32> %439, i1 true) #2, !dbg !128
  %440 = getelementptr inbounds i8, ptr addrspace(3) %420, i32 1552, !dbg !128
  %441 = extractelement <4 x i32> %.v27, i64 1, !dbg !128
  %442 = select i1 %394, i32 %216, i32 %441, !dbg !129
  %443 = insertelement <1 x i32> poison, i32 %442, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %440, <1 x i32> %443, i1 true) #2, !dbg !128
  %444 = getelementptr inbounds i8, ptr addrspace(3) %420, i32 2592, !dbg !128
  %445 = extractelement <4 x i32> %.v27, i64 2, !dbg !128
  %446 = select i1 %397, i32 %217, i32 %445, !dbg !129
  %447 = insertelement <1 x i32> poison, i32 %446, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %444, <1 x i32> %447, i1 true) #2, !dbg !128
  %448 = getelementptr inbounds i8, ptr addrspace(3) %420, i32 3632, !dbg !128
  %449 = extractelement <4 x i32> %.v27, i64 3, !dbg !128
  %450 = select i1 %400, i32 %218, i32 %449, !dbg !129
  %451 = insertelement <1 x i32> poison, i32 %450, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %448, <1 x i32> %451, i1 true) #2, !dbg !128
  tail call void @llvm.nvvm.barrier0(), !dbg !128
  %452 = lshr i32 %11, 6, !dbg !128
  %453 = and i32 %452, 4, !dbg !128
  %454 = getelementptr float, ptr addrspace(3) @global_smem, i32 %453, !dbg !128
  %455 = getelementptr float, ptr addrspace(3) %454, i32 %419, !dbg !128
  %456 = or disjoint i32 %419, 512, !dbg !128
  %457 = lshr i32 %456, 6, !dbg !128
  %458 = and i32 %457, 12, !dbg !128
  %459 = getelementptr float, ptr addrspace(3) @global_smem, i32 %458, !dbg !128
  %460 = getelementptr float, ptr addrspace(3) %459, i32 %456, !dbg !128
  %461 = load <4 x i32>, ptr addrspace(3) %460, align 16, !dbg !128
  %.extract = load i32, ptr addrspace(3) %455, align 16, !dbg !128
  %462 = getelementptr inbounds i8, ptr addrspace(3) %455, i32 4, !dbg !128
  %.extract8 = load i32, ptr addrspace(3) %462, align 4, !dbg !128
  %463 = getelementptr inbounds i8, ptr addrspace(3) %455, i32 8, !dbg !128
  %.extract9 = load i32, ptr addrspace(3) %463, align 8, !dbg !128
  %464 = getelementptr inbounds i8, ptr addrspace(3) %455, i32 12, !dbg !128
  %.extract10 = load i32, ptr addrspace(3) %464, align 4, !dbg !128
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %416, i1 %55) #2, !dbg !128
  %.extract11 = extractelement <4 x i32> %461, i64 0, !dbg !128
  %.extract12 = extractelement <4 x i32> %461, i64 1, !dbg !128
  %.extract13 = extractelement <4 x i32> %461, i64 2, !dbg !128
  %.extract14 = extractelement <4 x i32> %461, i64 3, !dbg !128
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %418, i1 %56) #2, !dbg !128
  %465 = mul i32 %13, 288, !dbg !130
  %466 = mul i32 %14, 288, !dbg !130
  %467 = add i32 %465, %20, !dbg !131
  %468 = add i32 %466, %20, !dbg !131
  %469 = sext i32 %467 to i64, !dbg !132
  %470 = getelementptr i8, ptr addrspace(1) %2, i64 %469, !dbg !132
  %471 = sext i32 %468 to i64, !dbg !132
  %472 = getelementptr i8, ptr addrspace(1) %2, i64 %471, !dbg !132
  %473 = bitcast <4 x i8> %304 to i32, !dbg !133
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %473, ptr addrspace(1) %470, i1 %53) #2, !dbg !133
  %474 = bitcast <4 x i8> %408 to i32, !dbg !133
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %474, ptr addrspace(1) %472, i1 %54) #2, !dbg !133
  ret void, !dbg !134
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjik3ddoqf45vho2iaxatf43ndvyqa6dvruqtg35us3w5f7l5yzb.py", directory: "inductor_cache/ji")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_33, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_33, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_33", linkageName: "triton_poi_fused_max_pool2d_with_indices_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 21, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 26, scope: !7)
!23 = !DILocation(line: 31, column: 19, scope: !7)
!24 = !DILocation(line: 32, column: 19, scope: !7)
!25 = !DILocation(line: 34, column: 39, scope: !7)
!26 = !DILocation(line: 34, column: 49, scope: !7)
!27 = !DILocation(line: 34, column: 60, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 44, scope: !7)
!30 = !DILocation(line: 34, column: 54, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 73, scope: !7)
!33 = !DILocation(line: 34, column: 65, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 50, scope: !7)
!36 = !DILocation(line: 35, column: 60, scope: !7)
!37 = !DILocation(line: 35, column: 30, scope: !7)
!38 = !DILocation(line: 35, column: 71, scope: !7)
!39 = !DILocation(line: 36, column: 36, scope: !7)
!40 = !DILocation(line: 36, column: 50, scope: !7)
!41 = !DILocation(line: 36, column: 60, scope: !7)
!42 = !DILocation(line: 36, column: 30, scope: !7)
!43 = !DILocation(line: 36, column: 71, scope: !7)
!44 = !DILocation(line: 37, column: 37, scope: !7)
!45 = !DILocation(line: 37, column: 51, scope: !7)
!46 = !DILocation(line: 37, column: 61, scope: !7)
!47 = !DILocation(line: 37, column: 30, scope: !7)
!48 = !DILocation(line: 37, column: 72, scope: !7)
!49 = !DILocation(line: 38, column: 37, scope: !7)
!50 = !DILocation(line: 38, column: 51, scope: !7)
!51 = !DILocation(line: 38, column: 61, scope: !7)
!52 = !DILocation(line: 38, column: 30, scope: !7)
!53 = !DILocation(line: 38, column: 72, scope: !7)
!54 = !DILocation(line: 39, column: 37, scope: !7)
!55 = !DILocation(line: 39, column: 51, scope: !7)
!56 = !DILocation(line: 39, column: 61, scope: !7)
!57 = !DILocation(line: 39, column: 30, scope: !7)
!58 = !DILocation(line: 39, column: 72, scope: !7)
!59 = !DILocation(line: 40, column: 38, scope: !7)
!60 = !DILocation(line: 40, column: 52, scope: !7)
!61 = !DILocation(line: 40, column: 62, scope: !7)
!62 = !DILocation(line: 40, column: 31, scope: !7)
!63 = !DILocation(line: 40, column: 73, scope: !7)
!64 = !DILocation(line: 41, column: 38, scope: !7)
!65 = !DILocation(line: 41, column: 52, scope: !7)
!66 = !DILocation(line: 41, column: 62, scope: !7)
!67 = !DILocation(line: 41, column: 31, scope: !7)
!68 = !DILocation(line: 41, column: 73, scope: !7)
!69 = !DILocation(line: 42, column: 38, scope: !7)
!70 = !DILocation(line: 42, column: 52, scope: !7)
!71 = !DILocation(line: 42, column: 62, scope: !7)
!72 = !DILocation(line: 42, column: 31, scope: !7)
!73 = !DILocation(line: 42, column: 73, scope: !7)
!74 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !77)
!75 = distinct !DILexicalBlockFile(scope: !7, file: !76, discriminator: 0)
!76 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!77 = !DILocation(line: 43, column: 40, scope: !7)
!78 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !77)
!79 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !77)
!80 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !77)
!81 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !82)
!82 = !DILocation(line: 44, column: 40, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !82)
!86 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !87)
!87 = !DILocation(line: 45, column: 40, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !87)
!91 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !92)
!92 = !DILocation(line: 46, column: 40, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !92)
!96 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !97)
!97 = !DILocation(line: 47, column: 41, scope: !7)
!98 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !97)
!99 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !97)
!100 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !97)
!101 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !102)
!102 = !DILocation(line: 48, column: 42, scope: !7)
!103 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !102)
!104 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !102)
!105 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !102)
!106 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !107)
!107 = !DILocation(line: 49, column: 42, scope: !7)
!108 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !107)
!109 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !107)
!110 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !107)
!111 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !112)
!112 = !DILocation(line: 50, column: 42, scope: !7)
!113 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !112)
!114 = !DILocation(line: 54, column: 35, scope: !7)
!115 = !DILocation(line: 57, column: 35, scope: !7)
!116 = !DILocation(line: 60, column: 35, scope: !7)
!117 = !DILocation(line: 63, column: 35, scope: !7)
!118 = !DILocation(line: 66, column: 35, scope: !7)
!119 = !DILocation(line: 69, column: 35, scope: !7)
!120 = !DILocation(line: 72, column: 35, scope: !7)
!121 = !DILocation(line: 75, column: 35, scope: !7)
!122 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !112)
!123 = !DILocation(line: 76, column: 33, scope: !7)
!124 = !DILocation(line: 76, column: 44, scope: !7)
!125 = !DILocation(line: 76, column: 30, scope: !7)
!126 = !DILocation(line: 76, column: 38, scope: !7)
!127 = !DILocation(line: 76, column: 25, scope: !7)
!128 = !DILocation(line: 76, column: 56, scope: !7)
!129 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !112)
!130 = !DILocation(line: 77, column: 34, scope: !7)
!131 = !DILocation(line: 77, column: 30, scope: !7)
!132 = !DILocation(line: 77, column: 25, scope: !7)
!133 = !DILocation(line: 77, column: 46, scope: !7)
!134 = !DILocation(line: 77, column: 4, scope: !7)
