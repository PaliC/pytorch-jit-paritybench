; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 10, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 2, !dbg !12
  %18 = and i32 %17, 508, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = or disjoint i32 %19, 512, !dbg !13
  %21 = srem i32 %19, 48, !dbg !14
  %22 = srem i32 %20, 48, !dbg !14
  %23 = sext i32 %19 to i64, !dbg !15
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !15
  %25 = sext i32 %20 to i64, !dbg !15
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !15
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !16
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !16
  %29 = sext i32 %21 to i64, !dbg !17
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !17
  %31 = sext i32 %22 to i64, !dbg !17
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !17
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !18
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !18
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !19
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !19
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !20
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !20
  %42 = bitcast i32 %38 to float, !dbg !20
  %43 = bitcast i32 %39 to float, !dbg !20
  %44 = bitcast i32 %40 to float, !dbg !20
  %45 = bitcast i32 %41 to float, !dbg !20
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !20
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !20
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !20
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !20
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !20
  %51 = bitcast i32 %47 to float, !dbg !20
  %52 = bitcast i32 %48 to float, !dbg !20
  %53 = bitcast i32 %49 to float, !dbg !20
  %54 = bitcast i32 %50 to float, !dbg !20
  %55 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !21
  %56 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !21
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !22
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !22
  %59 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !23
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !24
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !24
  %63 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !25
  %64 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !25
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !26
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !26
  %67 = getelementptr float, ptr addrspace(1) %6, i64 %29, !dbg !27
  %68 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !27
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !28
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !28
  %71 = getelementptr float, ptr addrspace(1) %7, i64 %29, !dbg !29
  %72 = getelementptr float, ptr addrspace(1) %7, i64 %31, !dbg !29
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !30
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !30
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !30
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !30
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !30
  %78 = bitcast i32 %74 to float, !dbg !30
  %79 = bitcast i32 %75 to float, !dbg !30
  %80 = bitcast i32 %76 to float, !dbg !30
  %81 = bitcast i32 %77 to float, !dbg !30
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !30
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !30
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !30
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !30
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !30
  %87 = bitcast i32 %83 to float, !dbg !30
  %88 = bitcast i32 %84 to float, !dbg !30
  %89 = bitcast i32 %85 to float, !dbg !30
  %90 = bitcast i32 %86 to float, !dbg !30
  %91 = getelementptr float, ptr addrspace(1) %8, i64 %29, !dbg !31
  %92 = getelementptr float, ptr addrspace(1) %8, i64 %31, !dbg !31
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !32
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !32
  %95 = getelementptr float, ptr addrspace(1) %9, i64 %29, !dbg !33
  %96 = getelementptr float, ptr addrspace(1) %9, i64 %31, !dbg !33
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %95, i1 true) #3, !dbg !34
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 true) #3, !dbg !34
  %99 = fadd float %42, 0x3EE4F8B580000000, !dbg !35
  %100 = fadd float %43, 0x3EE4F8B580000000, !dbg !35
  %101 = fadd float %44, 0x3EE4F8B580000000, !dbg !35
  %102 = fadd float %45, 0x3EE4F8B580000000, !dbg !35
  %103 = fadd float %51, 0x3EE4F8B580000000, !dbg !35
  %104 = fadd float %52, 0x3EE4F8B580000000, !dbg !35
  %105 = fadd float %53, 0x3EE4F8B580000000, !dbg !35
  %106 = fadd float %54, 0x3EE4F8B580000000, !dbg !35
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %107, 0, !dbg !36
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %108, 0, !dbg !36
  br i1 %.not.i, label %114, label %109, !dbg !36

109:                                              ; preds = %13
  br i1 %.not1.i, label %112, label %110, !dbg !36

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

114:                                              ; preds = %13
  br i1 %.not1.i, label %117, label %115, !dbg !36

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %110, %112, %115, %117
  %.0.i = phi float [ %111, %110 ], [ %113, %112 ], [ %116, %115 ], [ %118, %117 ], !dbg !36
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i1 = icmp eq i32 %119, 0, !dbg !36
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i4 = icmp eq i32 %120, 0, !dbg !36
  br i1 %.not.i1, label %126, label %121, !dbg !36

121:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %124, label %122, !dbg !36

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

126:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %129, label %127, !dbg !36

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

__nv_sqrtf.exit5:                                 ; preds = %122, %124, %127, %129
  %.0.i3 = phi float [ %123, %122 ], [ %125, %124 ], [ %128, %127 ], [ %130, %129 ], !dbg !36
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i6 = icmp eq i32 %131, 0, !dbg !36
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i9 = icmp eq i32 %132, 0, !dbg !36
  br i1 %.not.i6, label %138, label %133, !dbg !36

133:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %136, label %134, !dbg !36

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %101) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %101) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

138:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %141, label %139, !dbg !36

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.f(float %101) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.f(float %101) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

__nv_sqrtf.exit10:                                ; preds = %134, %136, %139, %141
  %.0.i8 = phi float [ %135, %134 ], [ %137, %136 ], [ %140, %139 ], [ %142, %141 ], !dbg !36
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i11 = icmp eq i32 %143, 0, !dbg !36
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i14 = icmp eq i32 %144, 0, !dbg !36
  br i1 %.not.i11, label %150, label %145, !dbg !36

145:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %148, label %146, !dbg !36

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %102) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %102) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

150:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %153, label %151, !dbg !36

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.f(float %102) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.f(float %102) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

__nv_sqrtf.exit15:                                ; preds = %146, %148, %151, %153
  %.0.i13 = phi float [ %147, %146 ], [ %149, %148 ], [ %152, %151 ], [ %154, %153 ], !dbg !36
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i16 = icmp eq i32 %155, 0, !dbg !36
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i19 = icmp eq i32 %156, 0, !dbg !36
  br i1 %.not.i16, label %162, label %157, !dbg !36

157:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %160, label %158, !dbg !36

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %103) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %103) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

162:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %165, label %163, !dbg !36

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.f(float %103) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.f(float %103) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

__nv_sqrtf.exit20:                                ; preds = %158, %160, %163, %165
  %.0.i18 = phi float [ %159, %158 ], [ %161, %160 ], [ %164, %163 ], [ %166, %165 ], !dbg !36
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i21 = icmp eq i32 %167, 0, !dbg !36
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i24 = icmp eq i32 %168, 0, !dbg !36
  br i1 %.not.i21, label %174, label %169, !dbg !36

169:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %172, label %170, !dbg !36

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %104) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %104) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

174:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %177, label %175, !dbg !36

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.f(float %104) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.f(float %104) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

__nv_sqrtf.exit25:                                ; preds = %170, %172, %175, %177
  %.0.i23 = phi float [ %171, %170 ], [ %173, %172 ], [ %176, %175 ], [ %178, %177 ], !dbg !36
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i26 = icmp eq i32 %179, 0, !dbg !36
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i29 = icmp eq i32 %180, 0, !dbg !36
  br i1 %.not.i26, label %186, label %181, !dbg !36

181:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %184, label %182, !dbg !36

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %105) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %105) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

186:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %189, label %187, !dbg !36

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.f(float %105) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.f(float %105) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

__nv_sqrtf.exit30:                                ; preds = %182, %184, %187, %189
  %.0.i28 = phi float [ %183, %182 ], [ %185, %184 ], [ %188, %187 ], [ %190, %189 ], !dbg !36
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i31 = icmp eq i32 %191, 0, !dbg !36
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i34 = icmp eq i32 %192, 0, !dbg !36
  br i1 %.not.i31, label %198, label %193, !dbg !36

193:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %196, label %194, !dbg !36

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %106) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %106) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

198:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %201, label %199, !dbg !36

199:                                              ; preds = %198
  %200 = tail call float @llvm.nvvm.sqrt.rn.f(float %106) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

201:                                              ; preds = %198
  %202 = tail call float @llvm.nvvm.sqrt.approx.f(float %106) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

__nv_sqrtf.exit35:                                ; preds = %194, %196, %199, %201
  %.0.i33 = phi float [ %195, %194 ], [ %197, %196 ], [ %200, %199 ], [ %202, %201 ], !dbg !36
  %203 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !37
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !37
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !37
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !37
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !37
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !37
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !37
  %211 = fadd float %78, 0x3EE4F8B580000000, !dbg !38
  %212 = fadd float %79, 0x3EE4F8B580000000, !dbg !38
  %213 = fadd float %80, 0x3EE4F8B580000000, !dbg !38
  %214 = fadd float %81, 0x3EE4F8B580000000, !dbg !38
  %215 = fadd float %87, 0x3EE4F8B580000000, !dbg !38
  %216 = fadd float %88, 0x3EE4F8B580000000, !dbg !38
  %217 = fadd float %89, 0x3EE4F8B580000000, !dbg !38
  %218 = fadd float %90, 0x3EE4F8B580000000, !dbg !38
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i36 = icmp eq i32 %219, 0, !dbg !39
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i39 = icmp eq i32 %220, 0, !dbg !39
  br i1 %.not.i36, label %226, label %221, !dbg !39

221:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %224, label %222, !dbg !39

222:                                              ; preds = %221
  %223 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %211) #3, !dbg !39
  br label %__nv_sqrtf.exit40, !dbg !39

224:                                              ; preds = %221
  %225 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %211) #3, !dbg !39
  br label %__nv_sqrtf.exit40, !dbg !39

226:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %229, label %227, !dbg !39

227:                                              ; preds = %226
  %228 = tail call float @llvm.nvvm.sqrt.rn.f(float %211) #3, !dbg !39
  br label %__nv_sqrtf.exit40, !dbg !39

229:                                              ; preds = %226
  %230 = tail call float @llvm.nvvm.sqrt.approx.f(float %211) #3, !dbg !39
  br label %__nv_sqrtf.exit40, !dbg !39

__nv_sqrtf.exit40:                                ; preds = %222, %224, %227, %229
  %.0.i38 = phi float [ %223, %222 ], [ %225, %224 ], [ %228, %227 ], [ %230, %229 ], !dbg !39
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i41 = icmp eq i32 %231, 0, !dbg !39
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i44 = icmp eq i32 %232, 0, !dbg !39
  br i1 %.not.i41, label %238, label %233, !dbg !39

233:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %236, label %234, !dbg !39

234:                                              ; preds = %233
  %235 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %212) #3, !dbg !39
  br label %__nv_sqrtf.exit45, !dbg !39

236:                                              ; preds = %233
  %237 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %212) #3, !dbg !39
  br label %__nv_sqrtf.exit45, !dbg !39

238:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %241, label %239, !dbg !39

239:                                              ; preds = %238
  %240 = tail call float @llvm.nvvm.sqrt.rn.f(float %212) #3, !dbg !39
  br label %__nv_sqrtf.exit45, !dbg !39

241:                                              ; preds = %238
  %242 = tail call float @llvm.nvvm.sqrt.approx.f(float %212) #3, !dbg !39
  br label %__nv_sqrtf.exit45, !dbg !39

__nv_sqrtf.exit45:                                ; preds = %234, %236, %239, %241
  %.0.i43 = phi float [ %235, %234 ], [ %237, %236 ], [ %240, %239 ], [ %242, %241 ], !dbg !39
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i46 = icmp eq i32 %243, 0, !dbg !39
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i49 = icmp eq i32 %244, 0, !dbg !39
  br i1 %.not.i46, label %250, label %245, !dbg !39

245:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %248, label %246, !dbg !39

246:                                              ; preds = %245
  %247 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %213) #3, !dbg !39
  br label %__nv_sqrtf.exit50, !dbg !39

248:                                              ; preds = %245
  %249 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %213) #3, !dbg !39
  br label %__nv_sqrtf.exit50, !dbg !39

250:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %253, label %251, !dbg !39

251:                                              ; preds = %250
  %252 = tail call float @llvm.nvvm.sqrt.rn.f(float %213) #3, !dbg !39
  br label %__nv_sqrtf.exit50, !dbg !39

253:                                              ; preds = %250
  %254 = tail call float @llvm.nvvm.sqrt.approx.f(float %213) #3, !dbg !39
  br label %__nv_sqrtf.exit50, !dbg !39

__nv_sqrtf.exit50:                                ; preds = %246, %248, %251, %253
  %.0.i48 = phi float [ %247, %246 ], [ %249, %248 ], [ %252, %251 ], [ %254, %253 ], !dbg !39
  %255 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i51 = icmp eq i32 %255, 0, !dbg !39
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i54 = icmp eq i32 %256, 0, !dbg !39
  br i1 %.not.i51, label %262, label %257, !dbg !39

257:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %260, label %258, !dbg !39

258:                                              ; preds = %257
  %259 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %214) #3, !dbg !39
  br label %__nv_sqrtf.exit55, !dbg !39

260:                                              ; preds = %257
  %261 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %214) #3, !dbg !39
  br label %__nv_sqrtf.exit55, !dbg !39

262:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %265, label %263, !dbg !39

263:                                              ; preds = %262
  %264 = tail call float @llvm.nvvm.sqrt.rn.f(float %214) #3, !dbg !39
  br label %__nv_sqrtf.exit55, !dbg !39

265:                                              ; preds = %262
  %266 = tail call float @llvm.nvvm.sqrt.approx.f(float %214) #3, !dbg !39
  br label %__nv_sqrtf.exit55, !dbg !39

__nv_sqrtf.exit55:                                ; preds = %258, %260, %263, %265
  %.0.i53 = phi float [ %259, %258 ], [ %261, %260 ], [ %264, %263 ], [ %266, %265 ], !dbg !39
  %267 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i56 = icmp eq i32 %267, 0, !dbg !39
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i59 = icmp eq i32 %268, 0, !dbg !39
  br i1 %.not.i56, label %274, label %269, !dbg !39

269:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %272, label %270, !dbg !39

270:                                              ; preds = %269
  %271 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %215) #3, !dbg !39
  br label %__nv_sqrtf.exit60, !dbg !39

272:                                              ; preds = %269
  %273 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %215) #3, !dbg !39
  br label %__nv_sqrtf.exit60, !dbg !39

274:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %277, label %275, !dbg !39

275:                                              ; preds = %274
  %276 = tail call float @llvm.nvvm.sqrt.rn.f(float %215) #3, !dbg !39
  br label %__nv_sqrtf.exit60, !dbg !39

277:                                              ; preds = %274
  %278 = tail call float @llvm.nvvm.sqrt.approx.f(float %215) #3, !dbg !39
  br label %__nv_sqrtf.exit60, !dbg !39

__nv_sqrtf.exit60:                                ; preds = %270, %272, %275, %277
  %.0.i58 = phi float [ %271, %270 ], [ %273, %272 ], [ %276, %275 ], [ %278, %277 ], !dbg !39
  %279 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i61 = icmp eq i32 %279, 0, !dbg !39
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i64 = icmp eq i32 %280, 0, !dbg !39
  br i1 %.not.i61, label %286, label %281, !dbg !39

281:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %284, label %282, !dbg !39

282:                                              ; preds = %281
  %283 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %216) #3, !dbg !39
  br label %__nv_sqrtf.exit65, !dbg !39

284:                                              ; preds = %281
  %285 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %216) #3, !dbg !39
  br label %__nv_sqrtf.exit65, !dbg !39

286:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %289, label %287, !dbg !39

287:                                              ; preds = %286
  %288 = tail call float @llvm.nvvm.sqrt.rn.f(float %216) #3, !dbg !39
  br label %__nv_sqrtf.exit65, !dbg !39

289:                                              ; preds = %286
  %290 = tail call float @llvm.nvvm.sqrt.approx.f(float %216) #3, !dbg !39
  br label %__nv_sqrtf.exit65, !dbg !39

__nv_sqrtf.exit65:                                ; preds = %282, %284, %287, %289
  %.0.i63 = phi float [ %283, %282 ], [ %285, %284 ], [ %288, %287 ], [ %290, %289 ], !dbg !39
  %291 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i66 = icmp eq i32 %291, 0, !dbg !39
  %292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i69 = icmp eq i32 %292, 0, !dbg !39
  br i1 %.not.i66, label %298, label %293, !dbg !39

293:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %296, label %294, !dbg !39

294:                                              ; preds = %293
  %295 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %217) #3, !dbg !39
  br label %__nv_sqrtf.exit70, !dbg !39

296:                                              ; preds = %293
  %297 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %217) #3, !dbg !39
  br label %__nv_sqrtf.exit70, !dbg !39

298:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %301, label %299, !dbg !39

299:                                              ; preds = %298
  %300 = tail call float @llvm.nvvm.sqrt.rn.f(float %217) #3, !dbg !39
  br label %__nv_sqrtf.exit70, !dbg !39

301:                                              ; preds = %298
  %302 = tail call float @llvm.nvvm.sqrt.approx.f(float %217) #3, !dbg !39
  br label %__nv_sqrtf.exit70, !dbg !39

__nv_sqrtf.exit70:                                ; preds = %294, %296, %299, %301
  %.0.i68 = phi float [ %295, %294 ], [ %297, %296 ], [ %300, %299 ], [ %302, %301 ], !dbg !39
  %303 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i71 = icmp eq i32 %303, 0, !dbg !39
  %304 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i74 = icmp eq i32 %304, 0, !dbg !39
  br i1 %.not.i71, label %310, label %305, !dbg !39

305:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %308, label %306, !dbg !39

306:                                              ; preds = %305
  %307 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %218) #3, !dbg !39
  br label %__nv_sqrtf.exit75, !dbg !39

308:                                              ; preds = %305
  %309 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %218) #3, !dbg !39
  br label %__nv_sqrtf.exit75, !dbg !39

310:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %313, label %311, !dbg !39

311:                                              ; preds = %310
  %312 = tail call float @llvm.nvvm.sqrt.rn.f(float %218) #3, !dbg !39
  br label %__nv_sqrtf.exit75, !dbg !39

313:                                              ; preds = %310
  %314 = tail call float @llvm.nvvm.sqrt.approx.f(float %218) #3, !dbg !39
  br label %__nv_sqrtf.exit75, !dbg !39

__nv_sqrtf.exit75:                                ; preds = %306, %308, %311, %313
  %.0.i73 = phi float [ %307, %306 ], [ %309, %308 ], [ %312, %311 ], [ %314, %313 ], !dbg !39
  %315 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !16
  %316 = bitcast i32 %315 to float, !dbg !16
  %317 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !18
  %318 = bitcast i32 %317 to float, !dbg !18
  %319 = fsub float %316, %318, !dbg !40
  %320 = fmul float %319, %210, !dbg !41
  %321 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !22
  %322 = bitcast i32 %321 to float, !dbg !22
  %323 = fmul float %320, %322, !dbg !42
  %324 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !24
  %325 = bitcast i32 %324 to float, !dbg !24
  %326 = fadd float %323, %325, !dbg !43
  %327 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !26
  %328 = bitcast i32 %327 to float, !dbg !26
  %329 = fadd float %326, %328, !dbg !44
  %330 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !28
  %331 = bitcast i32 %330 to float, !dbg !28
  %332 = fsub float %329, %331, !dbg !45
  %333 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !16
  %334 = bitcast i32 %333 to float, !dbg !16
  %335 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !18
  %336 = bitcast i32 %335 to float, !dbg !18
  %337 = fsub float %334, %336, !dbg !40
  %338 = fmul float %337, %209, !dbg !41
  %339 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !22
  %340 = bitcast i32 %339 to float, !dbg !22
  %341 = fmul float %338, %340, !dbg !42
  %342 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !24
  %343 = bitcast i32 %342 to float, !dbg !24
  %344 = fadd float %341, %343, !dbg !43
  %345 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !26
  %346 = bitcast i32 %345 to float, !dbg !26
  %347 = fadd float %344, %346, !dbg !44
  %348 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !28
  %349 = bitcast i32 %348 to float, !dbg !28
  %350 = fsub float %347, %349, !dbg !45
  %351 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !16
  %352 = bitcast i32 %351 to float, !dbg !16
  %353 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !18
  %354 = bitcast i32 %353 to float, !dbg !18
  %355 = fsub float %352, %354, !dbg !40
  %356 = fmul float %355, %208, !dbg !41
  %357 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !22
  %358 = bitcast i32 %357 to float, !dbg !22
  %359 = fmul float %356, %358, !dbg !42
  %360 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !24
  %361 = bitcast i32 %360 to float, !dbg !24
  %362 = fadd float %359, %361, !dbg !43
  %363 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !26
  %364 = bitcast i32 %363 to float, !dbg !26
  %365 = fadd float %362, %364, !dbg !44
  %366 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !28
  %367 = bitcast i32 %366 to float, !dbg !28
  %368 = fsub float %365, %367, !dbg !45
  %369 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !16
  %370 = bitcast i32 %369 to float, !dbg !16
  %371 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !18
  %372 = bitcast i32 %371 to float, !dbg !18
  %373 = fsub float %370, %372, !dbg !40
  %374 = fmul float %373, %207, !dbg !41
  %375 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !22
  %376 = bitcast i32 %375 to float, !dbg !22
  %377 = fmul float %374, %376, !dbg !42
  %378 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !24
  %379 = bitcast i32 %378 to float, !dbg !24
  %380 = fadd float %377, %379, !dbg !43
  %381 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !26
  %382 = bitcast i32 %381 to float, !dbg !26
  %383 = fadd float %380, %382, !dbg !44
  %384 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !28
  %385 = bitcast i32 %384 to float, !dbg !28
  %386 = fsub float %383, %385, !dbg !45
  %387 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !16
  %388 = bitcast i32 %387 to float, !dbg !16
  %389 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !18
  %390 = bitcast i32 %389 to float, !dbg !18
  %391 = fsub float %388, %390, !dbg !40
  %392 = fmul float %391, %206, !dbg !41
  %393 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !22
  %394 = bitcast i32 %393 to float, !dbg !22
  %395 = fmul float %392, %394, !dbg !42
  %396 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !24
  %397 = bitcast i32 %396 to float, !dbg !24
  %398 = fadd float %395, %397, !dbg !43
  %399 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !26
  %400 = bitcast i32 %399 to float, !dbg !26
  %401 = fadd float %398, %400, !dbg !44
  %402 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !28
  %403 = bitcast i32 %402 to float, !dbg !28
  %404 = fsub float %401, %403, !dbg !45
  %405 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !16
  %406 = bitcast i32 %405 to float, !dbg !16
  %407 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !18
  %408 = bitcast i32 %407 to float, !dbg !18
  %409 = fsub float %406, %408, !dbg !40
  %410 = fmul float %409, %205, !dbg !41
  %411 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !22
  %412 = bitcast i32 %411 to float, !dbg !22
  %413 = fmul float %410, %412, !dbg !42
  %414 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !24
  %415 = bitcast i32 %414 to float, !dbg !24
  %416 = fadd float %413, %415, !dbg !43
  %417 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !26
  %418 = bitcast i32 %417 to float, !dbg !26
  %419 = fadd float %416, %418, !dbg !44
  %420 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !28
  %421 = bitcast i32 %420 to float, !dbg !28
  %422 = fsub float %419, %421, !dbg !45
  %423 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !16
  %424 = bitcast i32 %423 to float, !dbg !16
  %425 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !18
  %426 = bitcast i32 %425 to float, !dbg !18
  %427 = fsub float %424, %426, !dbg !40
  %428 = fmul float %427, %204, !dbg !41
  %429 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !22
  %430 = bitcast i32 %429 to float, !dbg !22
  %431 = fmul float %428, %430, !dbg !42
  %432 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !24
  %433 = bitcast i32 %432 to float, !dbg !24
  %434 = fadd float %431, %433, !dbg !43
  %435 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !26
  %436 = bitcast i32 %435 to float, !dbg !26
  %437 = fadd float %434, %436, !dbg !44
  %438 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !28
  %439 = bitcast i32 %438 to float, !dbg !28
  %440 = fsub float %437, %439, !dbg !45
  %441 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !16
  %442 = bitcast i32 %441 to float, !dbg !16
  %443 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !18
  %444 = bitcast i32 %443 to float, !dbg !18
  %445 = fsub float %442, %444, !dbg !40
  %446 = fmul float %445, %203, !dbg !41
  %447 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !22
  %448 = bitcast i32 %447 to float, !dbg !22
  %449 = fmul float %446, %448, !dbg !42
  %450 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !24
  %451 = bitcast i32 %450 to float, !dbg !24
  %452 = fadd float %449, %451, !dbg !43
  %453 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !26
  %454 = bitcast i32 %453 to float, !dbg !26
  %455 = fadd float %452, %454, !dbg !44
  %456 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !28
  %457 = bitcast i32 %456 to float, !dbg !28
  %458 = fsub float %455, %457, !dbg !45
  %459 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !34
  %460 = bitcast i32 %459 to float, !dbg !34
  %461 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !34
  %462 = bitcast i32 %461 to float, !dbg !34
  %463 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !34
  %464 = bitcast i32 %463 to float, !dbg !34
  %465 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !34
  %466 = bitcast i32 %465 to float, !dbg !34
  %467 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !34
  %468 = bitcast i32 %467 to float, !dbg !34
  %469 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !34
  %470 = bitcast i32 %469 to float, !dbg !34
  %471 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !34
  %472 = bitcast i32 %471 to float, !dbg !34
  %473 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !34
  %474 = bitcast i32 %473 to float, !dbg !34
  %475 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !32
  %476 = bitcast i32 %475 to float, !dbg !32
  %477 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !32
  %478 = bitcast i32 %477 to float, !dbg !32
  %479 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !32
  %480 = bitcast i32 %479 to float, !dbg !32
  %481 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !32
  %482 = bitcast i32 %481 to float, !dbg !32
  %483 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !32
  %484 = bitcast i32 %483 to float, !dbg !32
  %485 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !32
  %486 = bitcast i32 %485 to float, !dbg !32
  %487 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !32
  %488 = bitcast i32 %487 to float, !dbg !32
  %489 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !32
  %490 = bitcast i32 %489 to float, !dbg !32
  %491 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !46
  %492 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !46
  %493 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !46
  %494 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !46
  %495 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !46
  %496 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !46
  %497 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !46
  %498 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !46
  %499 = fmul float %458, %491, !dbg !47
  %500 = fmul float %440, %492, !dbg !47
  %501 = fmul float %422, %493, !dbg !47
  %502 = fmul float %404, %494, !dbg !47
  %503 = fmul float %386, %495, !dbg !47
  %504 = fmul float %368, %496, !dbg !47
  %505 = fmul float %350, %497, !dbg !47
  %506 = fmul float %332, %498, !dbg !47
  %507 = fmul float %499, %490, !dbg !48
  %508 = fmul float %500, %488, !dbg !48
  %509 = fmul float %501, %486, !dbg !48
  %510 = fmul float %502, %484, !dbg !48
  %511 = fmul float %503, %482, !dbg !48
  %512 = fmul float %504, %480, !dbg !48
  %513 = fmul float %505, %478, !dbg !48
  %514 = fmul float %506, %476, !dbg !48
  %515 = fadd float %507, %474, !dbg !49
  %516 = fadd float %508, %472, !dbg !49
  %517 = fadd float %509, %470, !dbg !49
  %518 = fadd float %510, %468, !dbg !49
  %519 = fadd float %511, %466, !dbg !49
  %520 = fadd float %512, %464, !dbg !49
  %521 = fadd float %513, %462, !dbg !49
  %522 = fadd float %514, %460, !dbg !49
  %523 = getelementptr float, ptr addrspace(1) %10, i64 %23, !dbg !50
  %524 = getelementptr float, ptr addrspace(1) %10, i64 %25, !dbg !50
  %525 = bitcast float %455 to i32, !dbg !51
  %526 = bitcast float %437 to i32, !dbg !51
  %527 = bitcast float %419 to i32, !dbg !51
  %528 = bitcast float %401 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %525, i32 %526, i32 %527, i32 %528, ptr addrspace(1) %523, i1 true) #3, !dbg !51
  %529 = bitcast float %383 to i32, !dbg !51
  %530 = bitcast float %365 to i32, !dbg !51
  %531 = bitcast float %347 to i32, !dbg !51
  %532 = bitcast float %329 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %529, i32 %530, i32 %531, i32 %532, ptr addrspace(1) %524, i1 true) #3, !dbg !51
  %533 = getelementptr float, ptr addrspace(1) %11, i64 %23, !dbg !52
  %534 = getelementptr float, ptr addrspace(1) %11, i64 %25, !dbg !52
  %535 = bitcast float %515 to i32, !dbg !53
  %536 = bitcast float %516 to i32, !dbg !53
  %537 = bitcast float %517 to i32, !dbg !53
  %538 = bitcast float %518 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %535, i32 %536, i32 %537, i32 %538, ptr addrspace(1) %533, i1 true) #3, !dbg !53
  %539 = bitcast float %519 to i32, !dbg !53
  %540 = bitcast float %520 to i32, !dbg !53
  %541 = bitcast float %521 to i32, !dbg !53
  %542 = bitcast float %522 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %539, i32 %540, i32 %541, i32 %542, ptr addrspace(1) %534, i1 true) #3, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clust6r2ps3txuasatbmqimqbx4j5nxoayhx4jmvqq3cniugb7d6.py", directory: "inductor_cache/lu")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 39, column: 26, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 49, column: 20, scope: !7)
!39 = !DILocation(line: 50, column: 27, scope: !7)
!40 = !DILocation(line: 36, column: 18, scope: !7)
!41 = !DILocation(line: 44, column: 19, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 46, column: 20, scope: !7)
!44 = !DILocation(line: 47, column: 20, scope: !7)
!45 = !DILocation(line: 48, column: 20, scope: !7)
!46 = !DILocation(line: 51, column: 19, scope: !7)
!47 = !DILocation(line: 53, column: 20, scope: !7)
!48 = !DILocation(line: 54, column: 20, scope: !7)
!49 = !DILocation(line: 55, column: 20, scope: !7)
!50 = !DILocation(line: 56, column: 25, scope: !7)
!51 = !DILocation(line: 56, column: 37, scope: !7)
!52 = !DILocation(line: 57, column: 25, scope: !7)
!53 = !DILocation(line: 57, column: 37, scope: !7)
!54 = !DILocation(line: 57, column: 4, scope: !7)
