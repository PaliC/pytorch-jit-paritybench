; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_abs_gt_mul_sign_stack_sub_view_as_complex_where_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %10, 1, !dbg !13
  %16 = icmp slt i32 %14, 384, !dbg !14
  %17 = srem i32 %15, 2, !dbg !15
  %18 = sdiv i32 %14, 8, !dbg !16
  %19 = ashr exact i32 %14, 1, !dbg !17
  %20 = srem i32 %19, 4, !dbg !18
  %21 = icmp slt i32 %17, 1, !dbg !19
  %22 = shl nsw i32 %18, 1, !dbg !20
  %23 = sext i32 %22 to i64, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !21
  %25 = and i1 %16, %21, !dbg !22
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 %16, i32 0, i1 %16) #1, !dbg !23
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 %25, i32 0, i1 %25) #1, !dbg !23
  %28 = mul nsw i32 %20, 5, !dbg !24
  %29 = sext i32 %28 to i64, !dbg !25
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !25
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %16, i32 0, i1 %16) #1, !dbg !26
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %25, i32 0, i1 %25) #1, !dbg !26
  %33 = or disjoint i32 %22, 1, !dbg !27
  %34 = sext i32 %33 to i64, !dbg !28
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !28
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %16, i32 0, i1 %16) #1, !dbg !29
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %25, i32 0, i1 %25) #1, !dbg !29
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !30
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %16, i32 0, i1 %16) #1, !dbg !31
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %25, i32 0, i1 %25) #1, !dbg !31
  %41 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !23
  %42 = insertelement <2 x i32> %41, i32 %36, i64 1, !dbg !23
  %43 = bitcast <2 x i32> %42 to <2 x float>, !dbg !23
  %44 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !26
  %45 = insertelement <2 x i32> %44, i32 %39, i64 1, !dbg !26
  %46 = bitcast <2 x i32> %45 to <2 x float>, !dbg !26
  %47 = fmul <2 x float> %43, %46, !dbg !32
  %48 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !23
  %49 = insertelement <2 x i32> %48, i32 %37, i64 1, !dbg !23
  %50 = bitcast <2 x i32> %49 to <2 x float>, !dbg !23
  %51 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !26
  %52 = insertelement <2 x i32> %51, i32 %40, i64 1, !dbg !26
  %53 = bitcast <2 x i32> %52 to <2 x float>, !dbg !26
  %54 = fmul <2 x float> %50, %53, !dbg !32
  %shift = shufflevector <2 x float> %47, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %55 = fsub <2 x float> %47, %shift, !dbg !33
  %56 = extractelement <2 x float> %55, i64 0, !dbg !33
  %shift1 = shufflevector <2 x float> %54, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %57 = fsub <2 x float> %54, %shift1, !dbg !33
  %58 = extractelement <2 x float> %57, i64 0, !dbg !33
  %59 = sext i32 %20 to i64, !dbg !34
  %60 = getelementptr float, ptr addrspace(1) %4, i64 %59, !dbg !34
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %16, i32 0, i1 %16) #1, !dbg !35
  %62 = bitcast i32 %61 to float, !dbg !35
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %25, i32 0, i1 %25) #1, !dbg !35
  %64 = bitcast i32 %63 to float, !dbg !35
  %65 = fadd float %56, %62, !dbg !36
  %66 = fadd float %58, %64, !dbg !36
  %67 = fcmp uge float %65, 0.000000e+00, !dbg !37
  %68 = fcmp olt float %66, 0.000000e+00, !dbg !37
  %69 = select i1 %67, float %65, float 0.000000e+00, !dbg !41
  %70 = select i1 %68, float 0.000000e+00, float %66, !dbg !41
  %71 = icmp sgt i32 %17, 0, !dbg !42
  %72 = and i1 %16, %71, !dbg !43
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 false, i32 0, i1 false) #1, !dbg !44
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %72, i32 0, i1 %72) #1, !dbg !44
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 false, i32 0, i1 false) #1, !dbg !45
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %72, i32 0, i1 %72) #1, !dbg !45
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 false, i32 0, i1 false) #1, !dbg !46
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 %72, i32 0, i1 %72) #1, !dbg !46
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 false, i32 0, i1 false) #1, !dbg !47
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %72, i32 0, i1 %72) #1, !dbg !47
  %81 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !44
  %82 = insertelement <2 x i32> %81, i32 %78, i64 1, !dbg !44
  %83 = bitcast <2 x i32> %82 to <2 x float>, !dbg !44
  %84 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !45
  %85 = insertelement <2 x i32> %84, i32 %80, i64 1, !dbg !45
  %86 = bitcast <2 x i32> %85 to <2 x float>, !dbg !45
  %87 = fmul <2 x float> %83, %86, !dbg !48
  %shift2 = shufflevector <2 x float> %87, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %88 = fadd <2 x float> %87, %shift2, !dbg !49
  %89 = extractelement <2 x float> %88, i64 0, !dbg !49
  %90 = getelementptr float, ptr addrspace(1) %5, i64 %59, !dbg !50
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 false, i32 0, i1 false) #1, !dbg !51
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %72, i32 0, i1 %72) #1, !dbg !51
  %93 = bitcast i32 %92 to float, !dbg !51
  %94 = fadd float %89, %93, !dbg !52
  %95 = fcmp olt float %94, 0.000000e+00, !dbg !53
  %96 = select i1 %95, float 0.000000e+00, float %94, !dbg !55
  %97 = select i1 %21, float %70, float %96, !dbg !56
  %98 = tail call float @llvm.fabs.f32(float %65), !dbg !57
  %99 = tail call float @llvm.fabs.f32(float %97), !dbg !57
  %100 = fcmp ogt float %98, 0x3F847AE140000000, !dbg !58
  %101 = and i1 %67, %100, !dbg !57
  %102 = fcmp ogt float %99, 0x3F847AE140000000, !dbg !58
  %103 = fcmp ogt float %69, 0.000000e+00, !dbg !59
  %104 = fcmp ogt float %97, 0.000000e+00, !dbg !59
  %105 = uitofp i1 %103 to float, !dbg !60
  %106 = uitofp i1 %104 to float, !dbg !60
  %107 = fmul float %105, 0x3F847AE140000000, !dbg !61
  %108 = fmul float %106, 0x3F847AE140000000, !dbg !61
  %109 = fsub float %69, %107, !dbg !62
  %110 = fsub float %97, %108, !dbg !62
  %111 = fmul float %69, 0.000000e+00, !dbg !63
  %112 = fmul float %97, 0.000000e+00, !dbg !63
  %113 = select i1 %101, float %109, float %111, !dbg !64
  %114 = select i1 %102, float %110, float %112, !dbg !64
  %115 = sext i32 %14 to i64, !dbg !65
  %116 = getelementptr i1, ptr addrspace(1) %6, i64 %115, !dbg !65
  %117 = insertelement <2 x i1> poison, i1 %101, i64 0, !dbg !66
  %118 = insertelement <2 x i1> %117, i1 %102, i64 1, !dbg !66
  %119 = zext <2 x i1> %118 to <2 x i8>, !dbg !66
  %120 = bitcast <2 x i8> %119 to i16, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %120, ptr addrspace(1) %116, i1 %16) #1, !dbg !66
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !67
  %122 = bitcast float %113 to i32, !dbg !68
  %123 = bitcast float %114 to i32, !dbg !68
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %122, i32 %123, ptr addrspace(1) %121, i1 %16) #1, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cl2cp4v7znty3olp2nmmgmreavkmaof4pjob6a6qlrzyzerdfbk4.py", directory: "inductor_cache/l2")
!4 = !{ptr @triton_poi_fused_abs_gt_mul_sign_stack_sub_view_as_complex_where_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_abs_gt_mul_sign_stack_sub_view_as_complex_where_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_abs_gt_mul_sign_stack_sub_view_as_complex_where_0", linkageName: "triton_poi_fused_abs_gt_mul_sign_stack_sub_view_as_complex_where_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 26, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 32, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 44, scope: !7)
!23 = !DILocation(line: 33, column: 37, scope: !7)
!24 = !DILocation(line: 34, column: 32, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 37, scope: !7)
!27 = !DILocation(line: 36, column: 34, scope: !7)
!28 = !DILocation(line: 36, column: 30, scope: !7)
!29 = !DILocation(line: 36, column: 41, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 37, scope: !7)
!32 = !DILocation(line: 35, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 19, scope: !7)
!34 = !DILocation(line: 40, column: 31, scope: !7)
!35 = !DILocation(line: 40, column: 36, scope: !7)
!36 = !DILocation(line: 41, column: 20, scope: !7)
!37 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!39 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!40 = !DILocation(line: 43, column: 42, scope: !7)
!41 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !40)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 49, column: 50, scope: !7)
!44 = !DILocation(line: 49, column: 42, scope: !7)
!45 = !DILocation(line: 50, column: 38, scope: !7)
!46 = !DILocation(line: 52, column: 38, scope: !7)
!47 = !DILocation(line: 53, column: 38, scope: !7)
!48 = !DILocation(line: 51, column: 20, scope: !7)
!49 = !DILocation(line: 55, column: 20, scope: !7)
!50 = !DILocation(line: 56, column: 31, scope: !7)
!51 = !DILocation(line: 56, column: 36, scope: !7)
!52 = !DILocation(line: 57, column: 20, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !54)
!54 = !DILocation(line: 59, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !54)
!56 = !DILocation(line: 0, scope: !7)
!57 = !DILocation(line: 63, column: 24, scope: !7)
!58 = !DILocation(line: 65, column: 20, scope: !7)
!59 = !DILocation(line: 67, column: 20, scope: !7)
!60 = !DILocation(line: 72, column: 21, scope: !7)
!61 = !DILocation(line: 73, column: 20, scope: !7)
!62 = !DILocation(line: 74, column: 20, scope: !7)
!63 = !DILocation(line: 76, column: 20, scope: !7)
!64 = !DILocation(line: 77, column: 35, scope: !7)
!65 = !DILocation(line: 78, column: 25, scope: !7)
!66 = !DILocation(line: 78, column: 37, scope: !7)
!67 = !DILocation(line: 79, column: 28, scope: !7)
!68 = !DILocation(line: 79, column: 40, scope: !7)
!69 = !DILocation(line: 79, column: 4, scope: !7)
