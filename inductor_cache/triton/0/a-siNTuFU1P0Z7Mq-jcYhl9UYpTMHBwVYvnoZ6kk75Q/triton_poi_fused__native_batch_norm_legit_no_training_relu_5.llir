; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !11
  %11 = shl i32 %10, 10, !dbg !12
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %13 = and i32 %12, 127, !dbg !13
  %14 = or disjoint i32 %11, %13, !dbg !14
  %15 = or disjoint i32 %14, 128, !dbg !14
  %16 = or disjoint i32 %14, 256, !dbg !14
  %17 = or disjoint i32 %14, 384, !dbg !14
  %18 = or disjoint i32 %14, 512, !dbg !14
  %19 = or disjoint i32 %14, 640, !dbg !14
  %20 = or disjoint i32 %14, 768, !dbg !14
  %21 = or disjoint i32 %14, 896, !dbg !14
  %22 = icmp slt i32 %14, 961, !dbg !15
  %23 = icmp slt i32 %15, 961, !dbg !15
  %24 = icmp slt i32 %16, 961, !dbg !15
  %25 = icmp slt i32 %17, 961, !dbg !15
  %26 = icmp slt i32 %18, 961, !dbg !15
  %27 = icmp slt i32 %19, 961, !dbg !15
  %28 = icmp slt i32 %20, 961, !dbg !15
  %29 = icmp slt i32 %21, 961, !dbg !15
  %.frozen = freeze i32 %9, !dbg !16
  %30 = sdiv i32 %.frozen, 256, !dbg !16
  %31 = mul i32 %30, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %31, !dbg !17
  %32 = shl i32 %14, 8, !dbg !18
  %33 = shl i32 %15, 8, !dbg !18
  %34 = shl i32 %16, 8, !dbg !18
  %35 = shl i32 %17, 8, !dbg !18
  %36 = shl i32 %18, 8, !dbg !18
  %37 = shl i32 %19, 8, !dbg !18
  %38 = shl i32 %20, 8, !dbg !18
  %39 = shl i32 %21, 8, !dbg !18
  %40 = mul i32 %30, 246016, !dbg !19
  %41 = add i32 %40, %.decomposed, !dbg !20
  %42 = add i32 %41, %32, !dbg !21
  %43 = add i32 %41, %33, !dbg !21
  %44 = add i32 %41, %34, !dbg !21
  %45 = add i32 %41, %35, !dbg !21
  %46 = add i32 %41, %36, !dbg !21
  %47 = add i32 %41, %37, !dbg !21
  %48 = add i32 %41, %38, !dbg !21
  %49 = add i32 %41, %39, !dbg !21
  %50 = sext i32 %42 to i64, !dbg !22
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !22
  %52 = sext i32 %43 to i64, !dbg !22
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !22
  %54 = sext i32 %44 to i64, !dbg !22
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !22
  %56 = sext i32 %45 to i64, !dbg !22
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !22
  %58 = sext i32 %46 to i64, !dbg !22
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !22
  %60 = sext i32 %47 to i64, !dbg !22
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !22
  %62 = sext i32 %48 to i64, !dbg !22
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !22
  %64 = sext i32 %49 to i64, !dbg !22
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !22
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %22) #3, !dbg !23
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %23) #3, !dbg !23
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %24) #3, !dbg !23
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %25) #3, !dbg !23
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %26) #3, !dbg !23
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %27) #3, !dbg !23
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %28) #3, !dbg !23
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %29) #3, !dbg !23
  %74 = sext i32 %.decomposed to i64, !dbg !24
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !24
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !25
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %74, !dbg !26
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !27
  %79 = bitcast i32 %78 to float, !dbg !27
  %80 = getelementptr float, ptr addrspace(1) %3, i64 %74, !dbg !28
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !29
  %82 = getelementptr float, ptr addrspace(1) %4, i64 %74, !dbg !30
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !31
  %84 = fadd float %79, 0x3EE4F8B580000000, !dbg !32
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i = icmp eq i32 %85, 0, !dbg !33
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !33
  %.not1.i = icmp eq i32 %86, 0, !dbg !33
  br i1 %.not.i, label %92, label %87, !dbg !33

87:                                               ; preds = %8
  br i1 %.not1.i, label %90, label %88, !dbg !33

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

92:                                               ; preds = %8
  br i1 %.not1.i, label %95, label %93, !dbg !33

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %88, %90, %93, %95
  %.0.i = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !33
  %97 = insertelement <8 x i32> poison, i32 %73, i64 0, !dbg !23
  %98 = insertelement <8 x i32> %97, i32 %72, i64 1, !dbg !23
  %99 = insertelement <8 x i32> %98, i32 %71, i64 2, !dbg !23
  %100 = insertelement <8 x i32> %99, i32 %70, i64 3, !dbg !23
  %101 = insertelement <8 x i32> %100, i32 %69, i64 4, !dbg !23
  %102 = insertelement <8 x i32> %101, i32 %68, i64 5, !dbg !23
  %103 = insertelement <8 x i32> %102, i32 %67, i64 6, !dbg !23
  %104 = insertelement <8 x i32> %103, i32 %66, i64 7, !dbg !23
  %105 = bitcast <8 x i32> %104 to <8 x float>, !dbg !23
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !34
  %107 = insertelement <8 x i32> poison, i32 %76, i64 0, !dbg !35
  %108 = bitcast <8 x i32> %107 to <8 x float>, !dbg !35
  %109 = shufflevector <8 x float> %108, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !35
  %110 = fsub <8 x float> %105, %109, !dbg !35
  %111 = insertelement <8 x float> poison, float %106, i64 0, !dbg !36
  %112 = shufflevector <8 x float> %111, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !36
  %113 = fmul <8 x float> %110, %112, !dbg !36
  %114 = insertelement <8 x i32> poison, i32 %81, i64 0, !dbg !37
  %115 = bitcast <8 x i32> %114 to <8 x float>, !dbg !37
  %116 = shufflevector <8 x float> %115, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !37
  %117 = fmul <8 x float> %113, %116, !dbg !37
  %118 = insertelement <8 x i32> poison, i32 %83, i64 0, !dbg !38
  %119 = bitcast <8 x i32> %118 to <8 x float>, !dbg !38
  %120 = shufflevector <8 x float> %119, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !38
  %121 = fadd <8 x float> %117, %120, !dbg !38
  %122 = fcmp olt <8 x float> %121, zeroinitializer, !dbg !39
  %123 = extractelement <8 x i1> %122, i64 7, !dbg !43
  %124 = extractelement <8 x i1> %122, i64 6, !dbg !43
  %125 = extractelement <8 x i1> %122, i64 5, !dbg !43
  %126 = extractelement <8 x i1> %122, i64 4, !dbg !43
  %127 = extractelement <8 x i1> %122, i64 3, !dbg !43
  %128 = extractelement <8 x i1> %122, i64 2, !dbg !43
  %129 = extractelement <8 x i1> %122, i64 1, !dbg !43
  %130 = extractelement <8 x i1> %122, i64 0, !dbg !43
  %131 = mul nsw i32 %.decomposed, 961, !dbg !44
  %132 = mul i32 %30, 1968128, !dbg !45
  %133 = add i32 %132, %131, !dbg !46
  %134 = add i32 %133, %14, !dbg !47
  %135 = add i32 %133, %15, !dbg !47
  %136 = add i32 %133, %16, !dbg !47
  %137 = add i32 %133, %17, !dbg !47
  %138 = add i32 %133, %18, !dbg !47
  %139 = add i32 %133, %19, !dbg !47
  %140 = add i32 %133, %20, !dbg !47
  %141 = add i32 %133, %21, !dbg !47
  %142 = sext i32 %134 to i64, !dbg !48
  %143 = getelementptr float, ptr addrspace(1) %5, i64 %142, !dbg !48
  %144 = sext i32 %135 to i64, !dbg !48
  %145 = getelementptr float, ptr addrspace(1) %5, i64 %144, !dbg !48
  %146 = sext i32 %136 to i64, !dbg !48
  %147 = getelementptr float, ptr addrspace(1) %5, i64 %146, !dbg !48
  %148 = sext i32 %137 to i64, !dbg !48
  %149 = getelementptr float, ptr addrspace(1) %5, i64 %148, !dbg !48
  %150 = sext i32 %138 to i64, !dbg !48
  %151 = getelementptr float, ptr addrspace(1) %5, i64 %150, !dbg !48
  %152 = sext i32 %139 to i64, !dbg !48
  %153 = getelementptr float, ptr addrspace(1) %5, i64 %152, !dbg !48
  %154 = sext i32 %140 to i64, !dbg !48
  %155 = getelementptr float, ptr addrspace(1) %5, i64 %154, !dbg !48
  %156 = sext i32 %141 to i64, !dbg !48
  %157 = getelementptr float, ptr addrspace(1) %5, i64 %156, !dbg !48
  %bc = bitcast <8 x float> %121 to <8 x i32>, !dbg !49
  %158 = extractelement <8 x i32> %bc, i64 7, !dbg !49
  %159 = select i1 %123, i32 0, i32 %158, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %159, ptr addrspace(1) %143, i1 %22) #3, !dbg !49
  %bc1 = bitcast <8 x float> %121 to <8 x i32>, !dbg !49
  %160 = extractelement <8 x i32> %bc1, i64 6, !dbg !49
  %161 = select i1 %124, i32 0, i32 %160, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %161, ptr addrspace(1) %145, i1 %23) #3, !dbg !49
  %bc2 = bitcast <8 x float> %121 to <8 x i32>, !dbg !49
  %162 = extractelement <8 x i32> %bc2, i64 5, !dbg !49
  %163 = select i1 %125, i32 0, i32 %162, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %163, ptr addrspace(1) %147, i1 %24) #3, !dbg !49
  %bc3 = bitcast <8 x float> %121 to <8 x i32>, !dbg !49
  %164 = extractelement <8 x i32> %bc3, i64 4, !dbg !49
  %165 = select i1 %126, i32 0, i32 %164, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %165, ptr addrspace(1) %149, i1 %25) #3, !dbg !49
  %bc4 = bitcast <8 x float> %121 to <8 x i32>, !dbg !49
  %166 = extractelement <8 x i32> %bc4, i64 3, !dbg !49
  %167 = select i1 %127, i32 0, i32 %166, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %167, ptr addrspace(1) %151, i1 %26) #3, !dbg !49
  %bc5 = bitcast <8 x float> %121 to <8 x i32>, !dbg !49
  %168 = extractelement <8 x i32> %bc5, i64 2, !dbg !49
  %169 = select i1 %128, i32 0, i32 %168, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %169, ptr addrspace(1) %153, i1 %27) #3, !dbg !49
  %bc6 = bitcast <8 x float> %121 to <8 x i32>, !dbg !49
  %170 = extractelement <8 x i32> %bc6, i64 1, !dbg !49
  %171 = select i1 %129, i32 0, i32 %170, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %171, ptr addrspace(1) %155, i1 %28) #3, !dbg !49
  %bc7 = bitcast <8 x float> %121 to <8 x i32>, !dbg !49
  %172 = extractelement <8 x i32> %bc7, i64 0, !dbg !49
  %173 = select i1 %130, i32 0, i32 %172, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %173, ptr addrspace(1) %157, i1 %29) #3, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxfguahipa6vc3fzklyi72y3yd2erpeci3c5l7jv3a56pbj3ipoq.py", directory: "inductor_cache/xf")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_5", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 28, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 26, column: 44, scope: !7)
!14 = !DILocation(line: 26, column: 23, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 31, column: 39, scope: !7)
!19 = !DILocation(line: 31, column: 51, scope: !7)
!20 = !DILocation(line: 31, column: 35, scope: !7)
!21 = !DILocation(line: 31, column: 44, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 56, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 35, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 31, scope: !7)
!29 = !DILocation(line: 34, column: 36, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 26, scope: !7)
!34 = !DILocation(line: 41, column: 18, scope: !7)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 44, column: 19, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 48, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 49, column: 34, scope: !7)
!45 = !DILocation(line: 49, column: 47, scope: !7)
!46 = !DILocation(line: 49, column: 30, scope: !7)
!47 = !DILocation(line: 49, column: 39, scope: !7)
!48 = !DILocation(line: 49, column: 25, scope: !7)
!49 = !DILocation(line: 49, column: 59, scope: !7)
!50 = !DILocation(line: 49, column: 4, scope: !7)
