; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_43(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = or disjoint i32 %13, 4, !dbg !13
  %18 = or disjoint i32 %13, 5, !dbg !13
  %19 = or disjoint i32 %13, 6, !dbg !13
  %20 = or disjoint i32 %13, 7, !dbg !13
  %21 = or disjoint i32 %6, %11, !dbg !13
  %22 = or disjoint i32 %6, %12, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %23 = sdiv i32 %.frozen, 16, !dbg !14
  %24 = mul i32 %23, 16, !dbg !15
  %.decomposed = sub i32 %.frozen, %24, !dbg !15
  %25 = srem i32 %14, 16, !dbg !15
  %26 = srem i32 %15, 16, !dbg !15
  %27 = srem i32 %16, 16, !dbg !15
  %28 = srem i32 %17, 16, !dbg !15
  %29 = srem i32 %18, 16, !dbg !15
  %30 = srem i32 %19, 16, !dbg !15
  %31 = srem i32 %20, 16, !dbg !15
  %32 = shl nsw i32 %.decomposed, 1, !dbg !16
  %33 = shl nsw i32 %25, 1, !dbg !16
  %34 = shl nsw i32 %26, 1, !dbg !16
  %35 = shl nsw i32 %27, 1, !dbg !16
  %36 = shl nsw i32 %28, 1, !dbg !16
  %37 = shl nsw i32 %29, 1, !dbg !16
  %38 = shl nsw i32 %30, 1, !dbg !16
  %39 = shl nsw i32 %31, 1, !dbg !16
  %40 = shl i32 %23, 6, !dbg !17
  %41 = add i32 %32, %40, !dbg !18
  %42 = add i32 %40, %33, !dbg !18
  %43 = add i32 %40, %34, !dbg !18
  %44 = add i32 %40, %35, !dbg !18
  %45 = add i32 %40, %36, !dbg !18
  %46 = add i32 %40, %37, !dbg !18
  %47 = add i32 %40, %38, !dbg !18
  %48 = add i32 %40, %39, !dbg !18
  %49 = sext i32 %41 to i64, !dbg !19
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !19
  %51 = sext i32 %42 to i64, !dbg !19
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !19
  %53 = sext i32 %43 to i64, !dbg !19
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !19
  %55 = sext i32 %44 to i64, !dbg !19
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !19
  %57 = sext i32 %45 to i64, !dbg !19
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !19
  %59 = sext i32 %46 to i64, !dbg !19
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !19
  %61 = sext i32 %47 to i64, !dbg !19
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !19
  %63 = sext i32 %48 to i64, !dbg !19
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !19
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #2, !dbg !20
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #2, !dbg !20
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #2, !dbg !20
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #2, !dbg !20
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #2, !dbg !20
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #2, !dbg !20
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #2, !dbg !20
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #2, !dbg !20
  %73 = or disjoint i32 %41, 1, !dbg !21
  %74 = or disjoint i32 %42, 1, !dbg !21
  %75 = or disjoint i32 %43, 1, !dbg !21
  %76 = or disjoint i32 %44, 1, !dbg !21
  %77 = or disjoint i32 %45, 1, !dbg !21
  %78 = or disjoint i32 %46, 1, !dbg !21
  %79 = or disjoint i32 %47, 1, !dbg !21
  %80 = or disjoint i32 %48, 1, !dbg !21
  %81 = sext i32 %73 to i64, !dbg !22
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !22
  %83 = sext i32 %74 to i64, !dbg !22
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !22
  %85 = sext i32 %75 to i64, !dbg !22
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !22
  %87 = sext i32 %76 to i64, !dbg !22
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !22
  %89 = sext i32 %77 to i64, !dbg !22
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !22
  %91 = sext i32 %78 to i64, !dbg !22
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !22
  %93 = sext i32 %79 to i64, !dbg !22
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !22
  %95 = sext i32 %80 to i64, !dbg !22
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !22
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #2, !dbg !23
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #2, !dbg !23
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #2, !dbg !23
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #2, !dbg !23
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #2, !dbg !23
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #2, !dbg !23
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #2, !dbg !23
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #2, !dbg !23
  %105 = or disjoint i32 %40, 32, !dbg !24
  %106 = add i32 %105, %32, !dbg !25
  %107 = add i32 %105, %33, !dbg !25
  %108 = add i32 %105, %34, !dbg !25
  %109 = add i32 %105, %35, !dbg !25
  %110 = add i32 %105, %36, !dbg !25
  %111 = add i32 %105, %37, !dbg !25
  %112 = add i32 %105, %38, !dbg !25
  %113 = add i32 %105, %39, !dbg !25
  %114 = sext i32 %106 to i64, !dbg !26
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !26
  %116 = sext i32 %107 to i64, !dbg !26
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !26
  %118 = sext i32 %108 to i64, !dbg !26
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !26
  %120 = sext i32 %109 to i64, !dbg !26
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !26
  %122 = sext i32 %110 to i64, !dbg !26
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !26
  %124 = sext i32 %111 to i64, !dbg !26
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !26
  %126 = sext i32 %112 to i64, !dbg !26
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !26
  %128 = sext i32 %113 to i64, !dbg !26
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !26
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 true) #2, !dbg !27
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #2, !dbg !27
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #2, !dbg !27
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 true) #2, !dbg !27
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #2, !dbg !27
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 true) #2, !dbg !27
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #2, !dbg !27
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #2, !dbg !27
  %138 = or disjoint i32 %40, 33, !dbg !28
  %139 = add i32 %138, %32, !dbg !29
  %140 = add i32 %138, %33, !dbg !29
  %141 = add i32 %138, %34, !dbg !29
  %142 = add i32 %138, %35, !dbg !29
  %143 = add i32 %138, %36, !dbg !29
  %144 = add i32 %138, %37, !dbg !29
  %145 = add i32 %138, %38, !dbg !29
  %146 = add i32 %138, %39, !dbg !29
  %147 = sext i32 %139 to i64, !dbg !30
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !30
  %149 = sext i32 %140 to i64, !dbg !30
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !30
  %151 = sext i32 %141 to i64, !dbg !30
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !30
  %153 = sext i32 %142 to i64, !dbg !30
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !30
  %155 = sext i32 %143 to i64, !dbg !30
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !30
  %157 = sext i32 %144 to i64, !dbg !30
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !30
  %159 = sext i32 %145 to i64, !dbg !30
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !30
  %161 = sext i32 %146 to i64, !dbg !30
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !30
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #2, !dbg !31
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 true) #2, !dbg !31
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #2, !dbg !31
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 true) #2, !dbg !31
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #2, !dbg !31
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 true) #2, !dbg !31
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 true) #2, !dbg !31
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 true) #2, !dbg !31
  %171 = insertelement <4 x i32> poison, i32 %65, i64 0, !dbg !20
  %172 = insertelement <4 x i32> %171, i32 %66, i64 1, !dbg !20
  %173 = insertelement <4 x i32> %172, i32 %67, i64 2, !dbg !20
  %174 = insertelement <4 x i32> %173, i32 %68, i64 3, !dbg !20
  %175 = bitcast <4 x i32> %174 to <4 x float>, !dbg !20
  %176 = insertelement <4 x i32> poison, i32 %97, i64 0, !dbg !23
  %177 = insertelement <4 x i32> %176, i32 %98, i64 1, !dbg !23
  %178 = insertelement <4 x i32> %177, i32 %99, i64 2, !dbg !23
  %179 = insertelement <4 x i32> %178, i32 %100, i64 3, !dbg !23
  %180 = bitcast <4 x i32> %179 to <4 x float>, !dbg !23
  %181 = insertelement <4 x i32> poison, i32 %130, i64 0, !dbg !27
  %182 = insertelement <4 x i32> %181, i32 %131, i64 1, !dbg !27
  %183 = insertelement <4 x i32> %182, i32 %132, i64 2, !dbg !27
  %184 = insertelement <4 x i32> %183, i32 %133, i64 3, !dbg !27
  %185 = bitcast <4 x i32> %184 to <4 x float>, !dbg !27
  %186 = insertelement <4 x i32> poison, i32 %163, i64 0, !dbg !31
  %187 = insertelement <4 x i32> %186, i32 %164, i64 1, !dbg !31
  %188 = insertelement <4 x i32> %187, i32 %165, i64 2, !dbg !31
  %189 = insertelement <4 x i32> %188, i32 %166, i64 3, !dbg !31
  %190 = bitcast <4 x i32> %189 to <4 x float>, !dbg !31
  %191 = fcmp ogt <4 x float> %180, %175, !dbg !32
  %192 = fcmp uno <4 x float> %180, zeroinitializer, !dbg !36
  %193 = or <4 x i1> %191, %192, !dbg !37
  %.v = select <4 x i1> %193, <4 x i32> %179, <4 x i32> %174, !dbg !38
  %194 = bitcast <4 x i32> %.v to <4 x float>, !dbg !38
  %195 = fcmp olt <4 x float> %194, %185, !dbg !39
  %196 = fcmp uno <4 x float> %185, zeroinitializer, !dbg !41
  %197 = or <4 x i1> %195, %196, !dbg !42
  %.v15 = select <4 x i1> %197, <4 x i32> %184, <4 x i32> %.v, !dbg !43
  %198 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !43
  %199 = fcmp olt <4 x float> %198, %190, !dbg !44
  %200 = extractelement <4 x i1> %199, i64 0, !dbg !46
  %201 = extractelement <4 x i1> %199, i64 1, !dbg !46
  %202 = extractelement <4 x i1> %199, i64 2, !dbg !46
  %203 = extractelement <4 x i1> %199, i64 3, !dbg !46
  %204 = zext <4 x i1> %191 to <4 x i8>, !dbg !47
  %205 = select <4 x i1> %195, <4 x i8> splat (i8 2), <4 x i8> %204, !dbg !48
  %206 = select <4 x i1> %199, <4 x i8> splat (i8 3), <4 x i8> %205, !dbg !49
  %207 = insertelement <4 x i32> poison, i32 %69, i64 0, !dbg !20
  %208 = insertelement <4 x i32> %207, i32 %70, i64 1, !dbg !20
  %209 = insertelement <4 x i32> %208, i32 %71, i64 2, !dbg !20
  %210 = insertelement <4 x i32> %209, i32 %72, i64 3, !dbg !20
  %211 = bitcast <4 x i32> %210 to <4 x float>, !dbg !20
  %212 = insertelement <4 x i32> poison, i32 %101, i64 0, !dbg !23
  %213 = insertelement <4 x i32> %212, i32 %102, i64 1, !dbg !23
  %214 = insertelement <4 x i32> %213, i32 %103, i64 2, !dbg !23
  %215 = insertelement <4 x i32> %214, i32 %104, i64 3, !dbg !23
  %216 = bitcast <4 x i32> %215 to <4 x float>, !dbg !23
  %217 = insertelement <4 x i32> poison, i32 %134, i64 0, !dbg !27
  %218 = insertelement <4 x i32> %217, i32 %135, i64 1, !dbg !27
  %219 = insertelement <4 x i32> %218, i32 %136, i64 2, !dbg !27
  %220 = insertelement <4 x i32> %219, i32 %137, i64 3, !dbg !27
  %221 = bitcast <4 x i32> %220 to <4 x float>, !dbg !27
  %222 = insertelement <4 x i32> poison, i32 %167, i64 0, !dbg !31
  %223 = insertelement <4 x i32> %222, i32 %168, i64 1, !dbg !31
  %224 = insertelement <4 x i32> %223, i32 %169, i64 2, !dbg !31
  %225 = insertelement <4 x i32> %224, i32 %170, i64 3, !dbg !31
  %226 = bitcast <4 x i32> %225 to <4 x float>, !dbg !31
  %227 = fcmp ogt <4 x float> %216, %211, !dbg !32
  %228 = fcmp uno <4 x float> %216, zeroinitializer, !dbg !36
  %229 = or <4 x i1> %227, %228, !dbg !37
  %.v16 = select <4 x i1> %229, <4 x i32> %215, <4 x i32> %210, !dbg !38
  %230 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !38
  %231 = fcmp olt <4 x float> %230, %221, !dbg !39
  %232 = fcmp uno <4 x float> %221, zeroinitializer, !dbg !41
  %233 = or <4 x i1> %231, %232, !dbg !42
  %.v17 = select <4 x i1> %233, <4 x i32> %220, <4 x i32> %.v16, !dbg !43
  %234 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !43
  %235 = fcmp olt <4 x float> %234, %226, !dbg !44
  %236 = shufflevector <4 x float> %226, <4 x float> %190, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !50
  %237 = fcmp uno <8 x float> %236, zeroinitializer, !dbg !50
  %238 = extractelement <8 x i1> %237, i64 7, !dbg !46
  %239 = or i1 %200, %238, !dbg !46
  %240 = extractelement <8 x i1> %237, i64 6, !dbg !46
  %241 = or i1 %201, %240, !dbg !46
  %242 = extractelement <8 x i1> %237, i64 5, !dbg !46
  %243 = or i1 %202, %242, !dbg !46
  %244 = extractelement <8 x i1> %237, i64 4, !dbg !46
  %245 = or i1 %203, %244, !dbg !46
  %246 = extractelement <4 x i1> %235, i64 0, !dbg !46
  %247 = extractelement <8 x i1> %237, i64 3, !dbg !46
  %248 = or i1 %246, %247, !dbg !46
  %249 = extractelement <4 x i1> %235, i64 1, !dbg !46
  %250 = extractelement <8 x i1> %237, i64 2, !dbg !46
  %251 = or i1 %249, %250, !dbg !46
  %252 = extractelement <4 x i1> %235, i64 2, !dbg !46
  %253 = extractelement <8 x i1> %237, i64 1, !dbg !46
  %254 = or i1 %252, %253, !dbg !46
  %255 = extractelement <4 x i1> %235, i64 3, !dbg !46
  %256 = extractelement <8 x i1> %237, i64 0, !dbg !46
  %257 = or i1 %255, %256, !dbg !46
  %258 = zext <4 x i1> %227 to <4 x i8>, !dbg !47
  %259 = select <4 x i1> %231, <4 x i8> splat (i8 2), <4 x i8> %258, !dbg !48
  %260 = select <4 x i1> %235, <4 x i8> splat (i8 3), <4 x i8> %259, !dbg !49
  %261 = sext i32 %21 to i64, !dbg !51
  %262 = getelementptr float, ptr addrspace(1) %1, i64 %261, !dbg !51
  %263 = sext i32 %22 to i64, !dbg !51
  %264 = getelementptr float, ptr addrspace(1) %1, i64 %263, !dbg !51
  %265 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !52
  %266 = extractelement <4 x i32> %.v15, i64 0, !dbg !52
  %267 = select i1 %239, i32 %163, i32 %266, !dbg !53
  %268 = extractelement <4 x i32> %.v15, i64 1, !dbg !52
  %269 = select i1 %241, i32 %164, i32 %268, !dbg !53
  %270 = extractelement <4 x i32> %.v15, i64 2, !dbg !52
  %271 = select i1 %243, i32 %165, i32 %270, !dbg !53
  %272 = extractelement <4 x i32> %.v15, i64 3, !dbg !52
  %273 = select i1 %245, i32 %166, i32 %272, !dbg !53
  %274 = extractelement <4 x i32> %.v17, i64 0, !dbg !52
  %275 = select i1 %248, i32 %167, i32 %274, !dbg !53
  %276 = extractelement <4 x i32> %.v17, i64 1, !dbg !52
  %277 = select i1 %251, i32 %168, i32 %276, !dbg !53
  %278 = extractelement <4 x i32> %.v17, i64 2, !dbg !52
  %279 = select i1 %254, i32 %169, i32 %278, !dbg !53
  %280 = extractelement <4 x i32> %.v17, i64 3, !dbg !52
  %281 = select i1 %257, i32 %170, i32 %280, !dbg !53
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %265, i32 %267, i32 %269, i32 %271, i32 %273, i1 true) #2, !dbg !52
  %282 = getelementptr inbounds i8, ptr addrspace(3) %265, i32 16, !dbg !52
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %282, i32 %275, i32 %277, i32 %279, i32 %281, i1 true) #2, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %283 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !52
  %284 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !52
  %285 = load <4 x i32>, ptr addrspace(3) %284, align 16, !dbg !52
  %.extract = load i32, ptr addrspace(3) %283, align 16, !dbg !52
  %286 = getelementptr inbounds i8, ptr addrspace(3) %283, i32 4, !dbg !52
  %.extract8 = load i32, ptr addrspace(3) %286, align 4, !dbg !52
  %287 = getelementptr inbounds i8, ptr addrspace(3) %283, i32 8, !dbg !52
  %.extract9 = load i32, ptr addrspace(3) %287, align 8, !dbg !52
  %288 = getelementptr inbounds i8, ptr addrspace(3) %283, i32 12, !dbg !52
  %.extract10 = load i32, ptr addrspace(3) %288, align 4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %262, i1 true) #2, !dbg !52
  %.extract11 = extractelement <4 x i32> %285, i64 0, !dbg !52
  %.extract12 = extractelement <4 x i32> %285, i64 1, !dbg !52
  %.extract13 = extractelement <4 x i32> %285, i64 2, !dbg !52
  %.extract14 = extractelement <4 x i32> %285, i64 3, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %264, i1 true) #2, !dbg !52
  %289 = sext i32 %13 to i64, !dbg !54
  %290 = getelementptr i8, ptr addrspace(1) %2, i64 %289, !dbg !54
  %291 = bitcast <4 x i8> %206 to i32, !dbg !55
  %292 = bitcast <4 x i8> %260 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %291, i32 %292, ptr addrspace(1) %290, i1 true) #2, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceiow5ggddlpg4yami6nictrcyx7cj73w6tip4eccsthj4edbrar.py", directory: "inductor_cache/ei")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_43, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_43, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_43", linkageName: "triton_poi_fused_max_pool2d_with_indices_43", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 32, scope: !7)
!17 = !DILocation(line: 27, column: 40, scope: !7)
!18 = !DILocation(line: 27, column: 37, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 45, scope: !7)
!21 = !DILocation(line: 28, column: 41, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 49, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 29, column: 42, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 50, scope: !7)
!28 = !DILocation(line: 30, column: 35, scope: !7)
!29 = !DILocation(line: 30, column: 42, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 50, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 31, column: 40, scope: !7)
!36 = !DILocation(line: 120, column: 21, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 120, column: 16, scope: !33, inlinedAt: !35)
!38 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!39 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !40)
!40 = !DILocation(line: 32, column: 40, scope: !7)
!41 = !DILocation(line: 120, column: 21, scope: !33, inlinedAt: !40)
!42 = !DILocation(line: 120, column: 16, scope: !33, inlinedAt: !40)
!43 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !40)
!44 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !45)
!45 = !DILocation(line: 33, column: 40, scope: !7)
!46 = !DILocation(line: 120, column: 16, scope: !33, inlinedAt: !45)
!47 = !DILocation(line: 37, column: 33, scope: !7)
!48 = !DILocation(line: 40, column: 35, scope: !7)
!49 = !DILocation(line: 43, column: 35, scope: !7)
!50 = !DILocation(line: 120, column: 21, scope: !33, inlinedAt: !45)
!51 = !DILocation(line: 44, column: 25, scope: !7)
!52 = !DILocation(line: 44, column: 36, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !45)
!54 = !DILocation(line: 45, column: 25, scope: !7)
!55 = !DILocation(line: 45, column: 37, scope: !7)
!56 = !DILocation(line: 45, column: 4, scope: !7)
