; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 1, !dbg !11
  %8 = or disjoint i32 %7, 1, !dbg !12
  %9 = icmp slt i32 %7, 256, !dbg !13
  %10 = icmp slt i32 %8, 256, !dbg !13
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !14
  %12 = shl i32 %11, 8, !dbg !15
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !16
  %14 = and i32 %13, 127, !dbg !16
  %15 = or disjoint i32 %12, %14, !dbg !17
  %16 = or disjoint i32 %15, 128, !dbg !17
  %17 = icmp slt i32 %15, 256, !dbg !18
  %18 = icmp slt i32 %16, 256, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %19 = sdiv i32 %.frozen, 16, !dbg !19
  %20 = sdiv i32 %16, 16, !dbg !19
  %21 = mul i32 %19, 16, !dbg !20
  %.decomposed = sub i32 %.frozen, %21, !dbg !20
  %.frozen14 = freeze i32 %7, !dbg !21
  %22 = sdiv i32 %.frozen14, 64, !dbg !21
  %23 = mul i32 %22, 64, !dbg !22
  %.decomposed15 = sub i32 %.frozen14, %23, !dbg !22
  %24 = shl nsw i32 %19, 1, !dbg !23
  %25 = shl nsw i32 %20, 1, !dbg !23
  %26 = shl nsw i32 %.decomposed, 1, !dbg !24
  %27 = icmp sgt i32 %.decomposed, 0, !dbg !25
  %28 = shl i32 %19, 6, !dbg !26
  %29 = shl i32 %20, 6, !dbg !26
  %30 = add i32 %28, %26, !dbg !27
  %31 = add i32 %30, -33, !dbg !28
  %32 = add i32 %29, %26, !dbg !27
  %33 = add i32 %32, -33, !dbg !28
  %34 = shl i32 %6, 11, !dbg !29
  %35 = shl i32 %8, 10, !dbg !29
  %36 = add i32 %31, %34, !dbg !30
  %37 = add i32 %34, %33, !dbg !30
  %38 = add i32 %31, %35, !dbg !30
  %39 = add i32 %35, %33, !dbg !30
  %40 = sext i32 %36 to i64, !dbg !31
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !31
  %42 = sext i32 %37 to i64, !dbg !31
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !31
  %44 = sext i32 %38 to i64, !dbg !31
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !31
  %46 = sext i32 %39 to i64, !dbg !31
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !31
  %48 = add i32 %15, -16, !dbg !32
  %49 = icmp ult i32 %48, 240, !dbg !32
  %50 = and i1 %49, %27, !dbg !32
  %51 = icmp eq i32 %12, 0, !dbg !32
  %52 = and i1 %51, %27, !dbg !32
  %53 = and i1 %9, %50, !dbg !33
  %54 = and i1 %52, %9, !dbg !33
  %55 = and i1 %10, %50, !dbg !33
  %56 = and i1 %52, %10, !dbg !33
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %53, i32 -8388608, i1 %53) #1, !dbg !34
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %54, i32 -8388608, i1 %54) #1, !dbg !34
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %55, i32 -8388608, i1 %55) #1, !dbg !34
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %56, i32 -8388608, i1 %56) #1, !dbg !34
  %61 = icmp sgt i32 %.decomposed, -1, !dbg !35
  %62 = add i32 %30, -32, !dbg !36
  %63 = add i32 %32, -32, !dbg !36
  %64 = add i32 %62, %34, !dbg !37
  %65 = add i32 %34, %63, !dbg !37
  %66 = add i32 %62, %35, !dbg !37
  %67 = add i32 %35, %63, !dbg !37
  %68 = sext i32 %64 to i64, !dbg !38
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !38
  %70 = sext i32 %65 to i64, !dbg !38
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !38
  %72 = sext i32 %66 to i64, !dbg !38
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !38
  %74 = sext i32 %67 to i64, !dbg !38
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !38
  %76 = and i1 %49, %61, !dbg !39
  %77 = and i1 %51, %61, !dbg !39
  %78 = and i1 %9, %76, !dbg !40
  %79 = and i1 %77, %9, !dbg !40
  %80 = and i1 %10, %76, !dbg !40
  %81 = and i1 %77, %10, !dbg !40
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %78, i32 -8388608, i1 %78) #1, !dbg !41
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %79, i32 -8388608, i1 %79) #1, !dbg !41
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %80, i32 -8388608, i1 %80) #1, !dbg !41
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %81, i32 -8388608, i1 %81) #1, !dbg !41
  %86 = or disjoint i32 %26, 1, !dbg !42
  %87 = add i32 %30, -31, !dbg !43
  %88 = add i32 %32, -31, !dbg !43
  %89 = add i32 %87, %34, !dbg !44
  %90 = add i32 %34, %88, !dbg !44
  %91 = add i32 %87, %35, !dbg !44
  %92 = add i32 %35, %88, !dbg !44
  %93 = sext i32 %89 to i64, !dbg !45
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !45
  %95 = sext i32 %90 to i64, !dbg !45
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !45
  %97 = sext i32 %91 to i64, !dbg !45
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !45
  %99 = sext i32 %92 to i64, !dbg !45
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !45
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %78, i32 -8388608, i1 %78) #1, !dbg !46
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %79, i32 -8388608, i1 %79) #1, !dbg !46
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %80, i32 -8388608, i1 %80) #1, !dbg !46
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %81, i32 -8388608, i1 %81) #1, !dbg !46
  %105 = add i32 %30, -1, !dbg !47
  %106 = add i32 %32, -1, !dbg !47
  %107 = add i32 %105, %34, !dbg !48
  %108 = add i32 %34, %106, !dbg !48
  %109 = add i32 %105, %35, !dbg !48
  %110 = add i32 %35, %106, !dbg !48
  %111 = sext i32 %107 to i64, !dbg !49
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !49
  %113 = sext i32 %108 to i64, !dbg !49
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !49
  %115 = sext i32 %109 to i64, !dbg !49
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !49
  %117 = sext i32 %110 to i64, !dbg !49
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !49
  %119 = add i32 %15, 143, !dbg !50
  %120 = icmp ult i32 %119, 271, !dbg !50
  %121 = and i1 %120, %27, !dbg !50
  %122 = and i1 %121, %9, !dbg !51
  %123 = and i1 %121, %10, !dbg !51
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %54, i32 -8388608, i1 %54) #1, !dbg !52
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %122, i32 -8388608, i1 %122) #1, !dbg !52
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %56, i32 -8388608, i1 %56) #1, !dbg !52
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %123, i32 -8388608, i1 %123) #1, !dbg !52
  %128 = add i32 %30, %34, !dbg !53
  %129 = add i32 %34, %32, !dbg !53
  %130 = add i32 %30, %35, !dbg !53
  %131 = add i32 %35, %32, !dbg !53
  %132 = sext i32 %128 to i64, !dbg !54
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !54
  %134 = sext i32 %129 to i64, !dbg !54
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !54
  %136 = sext i32 %130 to i64, !dbg !54
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !54
  %138 = sext i32 %131 to i64, !dbg !54
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !54
  %140 = and i1 %120, %61, !dbg !55
  %141 = and i1 %140, %9, !dbg !56
  %142 = and i1 %140, %10, !dbg !56
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %79, i32 -8388608, i1 %79) #1, !dbg !57
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 %141, i32 -8388608, i1 %141) #1, !dbg !57
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %81, i32 -8388608, i1 %81) #1, !dbg !57
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %142, i32 -8388608, i1 %142) #1, !dbg !57
  %147 = add i32 %86, %28, !dbg !58
  %148 = add i32 %86, %29, !dbg !58
  %149 = add i32 %147, %34, !dbg !59
  %150 = add i32 %34, %148, !dbg !59
  %151 = add i32 %147, %35, !dbg !59
  %152 = add i32 %35, %148, !dbg !59
  %153 = sext i32 %149 to i64, !dbg !60
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !60
  %155 = sext i32 %150 to i64, !dbg !60
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !60
  %157 = sext i32 %151 to i64, !dbg !60
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !60
  %159 = sext i32 %152 to i64, !dbg !60
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !60
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %154, i1 %79, i32 -8388608, i1 %79) #1, !dbg !61
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %156, i1 %141, i32 -8388608, i1 %141) #1, !dbg !61
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %158, i1 %81, i32 -8388608, i1 %81) #1, !dbg !61
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %142, i32 -8388608, i1 %142) #1, !dbg !61
  %165 = or disjoint i32 %24, 1, !dbg !62
  %166 = or disjoint i32 %25, 1, !dbg !62
  %167 = icmp sgt i32 %15, -16, !dbg !63
  %168 = icmp sgt i32 %16, -16, !dbg !63
  %169 = icmp slt i32 %165, 32, !dbg !64
  %170 = icmp slt i32 %166, 32, !dbg !64
  %171 = and i1 %167, %169, !dbg !65
  %172 = and i1 %168, %170, !dbg !65
  %173 = and i1 %27, %171, !dbg !66
  %174 = and i1 %27, %172, !dbg !66
  %175 = add i32 %30, 31, !dbg !67
  %176 = add i32 %32, 31, !dbg !67
  %177 = add i32 %175, %34, !dbg !68
  %178 = add i32 %34, %176, !dbg !68
  %179 = add i32 %175, %35, !dbg !68
  %180 = add i32 %35, %176, !dbg !68
  %181 = sext i32 %177 to i64, !dbg !69
  %182 = getelementptr float, ptr addrspace(1) %0, i64 %181, !dbg !69
  %183 = sext i32 %178 to i64, !dbg !69
  %184 = getelementptr float, ptr addrspace(1) %0, i64 %183, !dbg !69
  %185 = sext i32 %179 to i64, !dbg !69
  %186 = getelementptr float, ptr addrspace(1) %0, i64 %185, !dbg !69
  %187 = sext i32 %180 to i64, !dbg !69
  %188 = getelementptr float, ptr addrspace(1) %0, i64 %187, !dbg !69
  %189 = and i1 %17, %173, !dbg !70
  %190 = and i1 %18, %174, !dbg !70
  %191 = and i1 %9, %189, !dbg !71
  %192 = and i1 %190, %9, !dbg !71
  %193 = and i1 %10, %189, !dbg !71
  %194 = and i1 %190, %10, !dbg !71
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %182, i1 %191, i32 -8388608, i1 %191) #1, !dbg !72
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %184, i1 %192, i32 -8388608, i1 %192) #1, !dbg !72
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %193, i32 -8388608, i1 %193) #1, !dbg !72
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %188, i1 %194, i32 -8388608, i1 %194) #1, !dbg !72
  %199 = and i1 %61, %171, !dbg !73
  %200 = and i1 %61, %172, !dbg !73
  %201 = add i32 %30, 32, !dbg !74
  %202 = add i32 %32, 32, !dbg !74
  %203 = add i32 %201, %34, !dbg !75
  %204 = add i32 %34, %202, !dbg !75
  %205 = add i32 %201, %35, !dbg !75
  %206 = add i32 %35, %202, !dbg !75
  %207 = sext i32 %203 to i64, !dbg !76
  %208 = getelementptr float, ptr addrspace(1) %0, i64 %207, !dbg !76
  %209 = sext i32 %204 to i64, !dbg !76
  %210 = getelementptr float, ptr addrspace(1) %0, i64 %209, !dbg !76
  %211 = sext i32 %205 to i64, !dbg !76
  %212 = getelementptr float, ptr addrspace(1) %0, i64 %211, !dbg !76
  %213 = sext i32 %206 to i64, !dbg !76
  %214 = getelementptr float, ptr addrspace(1) %0, i64 %213, !dbg !76
  %215 = and i1 %17, %199, !dbg !77
  %216 = and i1 %18, %200, !dbg !77
  %217 = and i1 %9, %215, !dbg !78
  %218 = and i1 %216, %9, !dbg !78
  %219 = and i1 %10, %215, !dbg !78
  %220 = and i1 %216, %10, !dbg !78
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %208, i1 %217, i32 -8388608, i1 %217) #1, !dbg !79
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %210, i1 %218, i32 -8388608, i1 %218) #1, !dbg !79
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %212, i1 %219, i32 -8388608, i1 %219) #1, !dbg !79
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %214, i1 %220, i32 -8388608, i1 %220) #1, !dbg !79
  %225 = add i32 %30, 33, !dbg !80
  %226 = add i32 %32, 33, !dbg !80
  %227 = add i32 %225, %34, !dbg !81
  %228 = add i32 %34, %226, !dbg !81
  %229 = add i32 %225, %35, !dbg !81
  %230 = add i32 %35, %226, !dbg !81
  %231 = sext i32 %227 to i64, !dbg !82
  %232 = getelementptr float, ptr addrspace(1) %0, i64 %231, !dbg !82
  %233 = sext i32 %228 to i64, !dbg !82
  %234 = getelementptr float, ptr addrspace(1) %0, i64 %233, !dbg !82
  %235 = sext i32 %229 to i64, !dbg !82
  %236 = getelementptr float, ptr addrspace(1) %0, i64 %235, !dbg !82
  %237 = sext i32 %230 to i64, !dbg !82
  %238 = getelementptr float, ptr addrspace(1) %0, i64 %237, !dbg !82
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %232, i1 %217, i32 -8388608, i1 %217) #1, !dbg !83
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %234, i1 %218, i32 -8388608, i1 %218) #1, !dbg !83
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %236, i1 %219, i32 -8388608, i1 %219) #1, !dbg !83
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %238, i1 %220, i32 -8388608, i1 %220) #1, !dbg !83
  %243 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !34
  %244 = insertelement <2 x i32> %243, i32 %59, i64 1, !dbg !34
  %245 = bitcast <2 x i32> %244 to <2 x float>, !dbg !34
  %246 = insertelement <2 x i32> poison, i32 %82, i64 0, !dbg !41
  %247 = insertelement <2 x i32> %246, i32 %84, i64 1, !dbg !41
  %248 = bitcast <2 x i32> %247 to <2 x float>, !dbg !41
  %249 = fcmp ogt <2 x float> %248, %245, !dbg !84
  %250 = fcmp uno <2 x float> %248, zeroinitializer, !dbg !88
  %251 = or <2 x i1> %249, %250, !dbg !89
  %.v = select <2 x i1> %251, <2 x i32> %247, <2 x i32> %244, !dbg !90
  %252 = bitcast <2 x i32> %.v to <2 x float>, !dbg !90
  %253 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !46
  %254 = insertelement <2 x i32> %253, i32 %103, i64 1, !dbg !46
  %255 = bitcast <2 x i32> %254 to <2 x float>, !dbg !46
  %256 = fcmp olt <2 x float> %252, %255, !dbg !91
  %257 = fcmp uno <2 x float> %255, zeroinitializer, !dbg !93
  %258 = or <2 x i1> %256, %257, !dbg !94
  %.v1 = select <2 x i1> %258, <2 x i32> %254, <2 x i32> %.v, !dbg !95
  %259 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !95
  %260 = insertelement <2 x i32> poison, i32 %124, i64 0, !dbg !52
  %261 = insertelement <2 x i32> %260, i32 %126, i64 1, !dbg !52
  %262 = bitcast <2 x i32> %261 to <2 x float>, !dbg !52
  %263 = fcmp olt <2 x float> %259, %262, !dbg !96
  %264 = fcmp uno <2 x float> %262, zeroinitializer, !dbg !98
  %265 = or <2 x i1> %263, %264, !dbg !99
  %.v2 = select <2 x i1> %265, <2 x i32> %261, <2 x i32> %.v1, !dbg !100
  %266 = bitcast <2 x i32> %.v2 to <2 x float>, !dbg !100
  %267 = insertelement <2 x i32> poison, i32 %143, i64 0, !dbg !57
  %268 = insertelement <2 x i32> %267, i32 %145, i64 1, !dbg !57
  %269 = bitcast <2 x i32> %268 to <2 x float>, !dbg !57
  %270 = fcmp olt <2 x float> %266, %269, !dbg !101
  %271 = fcmp uno <2 x float> %269, zeroinitializer, !dbg !103
  %272 = or <2 x i1> %270, %271, !dbg !104
  %.v3 = select <2 x i1> %272, <2 x i32> %268, <2 x i32> %.v2, !dbg !105
  %273 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !105
  %274 = insertelement <2 x i32> poison, i32 %161, i64 0, !dbg !61
  %275 = insertelement <2 x i32> %274, i32 %163, i64 1, !dbg !61
  %276 = bitcast <2 x i32> %275 to <2 x float>, !dbg !61
  %277 = fcmp olt <2 x float> %273, %276, !dbg !106
  %278 = fcmp uno <2 x float> %276, zeroinitializer, !dbg !108
  %279 = or <2 x i1> %277, %278, !dbg !109
  %.v4 = select <2 x i1> %279, <2 x i32> %275, <2 x i32> %.v3, !dbg !110
  %280 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !110
  %281 = insertelement <2 x i32> poison, i32 %195, i64 0, !dbg !72
  %282 = insertelement <2 x i32> %281, i32 %197, i64 1, !dbg !72
  %283 = bitcast <2 x i32> %282 to <2 x float>, !dbg !72
  %284 = fcmp olt <2 x float> %280, %283, !dbg !111
  %285 = fcmp uno <2 x float> %283, zeroinitializer, !dbg !113
  %286 = or <2 x i1> %284, %285, !dbg !114
  %.v5 = select <2 x i1> %286, <2 x i32> %282, <2 x i32> %.v4, !dbg !115
  %287 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !115
  %288 = insertelement <2 x i32> poison, i32 %221, i64 0, !dbg !79
  %289 = insertelement <2 x i32> %288, i32 %223, i64 1, !dbg !79
  %290 = bitcast <2 x i32> %289 to <2 x float>, !dbg !79
  %291 = fcmp olt <2 x float> %287, %290, !dbg !116
  %292 = fcmp uno <2 x float> %290, zeroinitializer, !dbg !118
  %293 = or <2 x i1> %291, %292, !dbg !119
  %.v6 = select <2 x i1> %293, <2 x i32> %289, <2 x i32> %.v5, !dbg !120
  %294 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !120
  %295 = insertelement <2 x i32> poison, i32 %239, i64 0, !dbg !83
  %296 = insertelement <2 x i32> %295, i32 %241, i64 1, !dbg !83
  %297 = bitcast <2 x i32> %296 to <2 x float>, !dbg !83
  %298 = fcmp olt <2 x float> %294, %297, !dbg !121
  %299 = extractelement <2 x i1> %298, i64 0, !dbg !123
  %300 = extractelement <2 x i1> %298, i64 1, !dbg !123
  %301 = zext <2 x i1> %249 to <2 x i8>, !dbg !124
  %302 = select <2 x i1> %256, <2 x i8> splat (i8 2), <2 x i8> %301, !dbg !125
  %303 = select <2 x i1> %263, <2 x i8> splat (i8 3), <2 x i8> %302, !dbg !126
  %304 = select <2 x i1> %270, <2 x i8> splat (i8 4), <2 x i8> %303, !dbg !127
  %305 = select <2 x i1> %277, <2 x i8> splat (i8 5), <2 x i8> %304, !dbg !128
  %306 = select <2 x i1> %284, <2 x i8> splat (i8 6), <2 x i8> %305, !dbg !129
  %307 = select <2 x i1> %291, <2 x i8> splat (i8 7), <2 x i8> %306, !dbg !130
  %308 = select <2 x i1> %298, <2 x i8> splat (i8 8), <2 x i8> %307, !dbg !131
  %309 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !34
  %310 = insertelement <2 x i32> %309, i32 %60, i64 1, !dbg !34
  %311 = bitcast <2 x i32> %310 to <2 x float>, !dbg !34
  %312 = insertelement <2 x i32> poison, i32 %83, i64 0, !dbg !41
  %313 = insertelement <2 x i32> %312, i32 %85, i64 1, !dbg !41
  %314 = bitcast <2 x i32> %313 to <2 x float>, !dbg !41
  %315 = fcmp ogt <2 x float> %314, %311, !dbg !84
  %316 = fcmp uno <2 x float> %314, zeroinitializer, !dbg !88
  %317 = or <2 x i1> %315, %316, !dbg !89
  %.v7 = select <2 x i1> %317, <2 x i32> %313, <2 x i32> %310, !dbg !90
  %318 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !90
  %319 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !46
  %320 = insertelement <2 x i32> %319, i32 %104, i64 1, !dbg !46
  %321 = bitcast <2 x i32> %320 to <2 x float>, !dbg !46
  %322 = fcmp olt <2 x float> %318, %321, !dbg !91
  %323 = fcmp uno <2 x float> %321, zeroinitializer, !dbg !93
  %324 = or <2 x i1> %322, %323, !dbg !94
  %.v8 = select <2 x i1> %324, <2 x i32> %320, <2 x i32> %.v7, !dbg !95
  %325 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !95
  %326 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !52
  %327 = insertelement <2 x i32> %326, i32 %127, i64 1, !dbg !52
  %328 = bitcast <2 x i32> %327 to <2 x float>, !dbg !52
  %329 = fcmp olt <2 x float> %325, %328, !dbg !96
  %330 = fcmp uno <2 x float> %328, zeroinitializer, !dbg !98
  %331 = or <2 x i1> %329, %330, !dbg !99
  %.v9 = select <2 x i1> %331, <2 x i32> %327, <2 x i32> %.v8, !dbg !100
  %332 = bitcast <2 x i32> %.v9 to <2 x float>, !dbg !100
  %333 = insertelement <2 x i32> poison, i32 %144, i64 0, !dbg !57
  %334 = insertelement <2 x i32> %333, i32 %146, i64 1, !dbg !57
  %335 = bitcast <2 x i32> %334 to <2 x float>, !dbg !57
  %336 = fcmp olt <2 x float> %332, %335, !dbg !101
  %337 = fcmp uno <2 x float> %335, zeroinitializer, !dbg !103
  %338 = or <2 x i1> %336, %337, !dbg !104
  %.v10 = select <2 x i1> %338, <2 x i32> %334, <2 x i32> %.v9, !dbg !105
  %339 = bitcast <2 x i32> %.v10 to <2 x float>, !dbg !105
  %340 = insertelement <2 x i32> poison, i32 %162, i64 0, !dbg !61
  %341 = insertelement <2 x i32> %340, i32 %164, i64 1, !dbg !61
  %342 = bitcast <2 x i32> %341 to <2 x float>, !dbg !61
  %343 = fcmp olt <2 x float> %339, %342, !dbg !106
  %344 = fcmp uno <2 x float> %342, zeroinitializer, !dbg !108
  %345 = or <2 x i1> %343, %344, !dbg !109
  %.v11 = select <2 x i1> %345, <2 x i32> %341, <2 x i32> %.v10, !dbg !110
  %346 = bitcast <2 x i32> %.v11 to <2 x float>, !dbg !110
  %347 = insertelement <2 x i32> poison, i32 %196, i64 0, !dbg !72
  %348 = insertelement <2 x i32> %347, i32 %198, i64 1, !dbg !72
  %349 = bitcast <2 x i32> %348 to <2 x float>, !dbg !72
  %350 = fcmp olt <2 x float> %346, %349, !dbg !111
  %351 = fcmp uno <2 x float> %349, zeroinitializer, !dbg !113
  %352 = or <2 x i1> %350, %351, !dbg !114
  %.v12 = select <2 x i1> %352, <2 x i32> %348, <2 x i32> %.v11, !dbg !115
  %353 = bitcast <2 x i32> %.v12 to <2 x float>, !dbg !115
  %354 = insertelement <2 x i32> poison, i32 %222, i64 0, !dbg !79
  %355 = insertelement <2 x i32> %354, i32 %224, i64 1, !dbg !79
  %356 = bitcast <2 x i32> %355 to <2 x float>, !dbg !79
  %357 = fcmp olt <2 x float> %353, %356, !dbg !116
  %358 = fcmp uno <2 x float> %356, zeroinitializer, !dbg !118
  %359 = or <2 x i1> %357, %358, !dbg !119
  %.v13 = select <2 x i1> %359, <2 x i32> %355, <2 x i32> %.v12, !dbg !120
  %360 = bitcast <2 x i32> %.v13 to <2 x float>, !dbg !120
  %361 = insertelement <2 x i32> poison, i32 %240, i64 0, !dbg !83
  %362 = insertelement <2 x i32> %361, i32 %242, i64 1, !dbg !83
  %363 = bitcast <2 x i32> %362 to <2 x float>, !dbg !83
  %364 = fcmp olt <2 x float> %360, %363, !dbg !121
  %365 = shufflevector <2 x float> %363, <2 x float> %297, <4 x i32> <i32 1, i32 3, i32 0, i32 2>, !dbg !132
  %366 = fcmp uno <4 x float> %365, zeroinitializer, !dbg !132
  %367 = extractelement <4 x i1> %366, i64 3, !dbg !123
  %368 = or i1 %299, %367, !dbg !123
  %369 = extractelement <4 x i1> %366, i64 1, !dbg !123
  %370 = or i1 %300, %369, !dbg !123
  %371 = extractelement <2 x i1> %364, i64 0, !dbg !123
  %372 = extractelement <4 x i1> %366, i64 2, !dbg !123
  %373 = or i1 %371, %372, !dbg !123
  %374 = extractelement <2 x i1> %364, i64 1, !dbg !123
  %375 = extractelement <4 x i1> %366, i64 0, !dbg !123
  %376 = or i1 %374, %375, !dbg !123
  %377 = zext <2 x i1> %315 to <2 x i8>, !dbg !124
  %378 = select <2 x i1> %322, <2 x i8> splat (i8 2), <2 x i8> %377, !dbg !125
  %379 = select <2 x i1> %329, <2 x i8> splat (i8 3), <2 x i8> %378, !dbg !126
  %380 = select <2 x i1> %336, <2 x i8> splat (i8 4), <2 x i8> %379, !dbg !127
  %381 = select <2 x i1> %343, <2 x i8> splat (i8 5), <2 x i8> %380, !dbg !128
  %382 = select <2 x i1> %350, <2 x i8> splat (i8 6), <2 x i8> %381, !dbg !129
  %383 = select <2 x i1> %357, <2 x i8> splat (i8 7), <2 x i8> %382, !dbg !130
  %384 = select <2 x i1> %364, <2 x i8> splat (i8 8), <2 x i8> %383, !dbg !131
  %385 = shl i32 %15, 6, !dbg !133
  %386 = shl i32 %16, 6, !dbg !133
  %387 = shl i32 %22, 14, !dbg !134
  %388 = add i32 %387, %.decomposed15, !dbg !135
  %389 = add i32 %388, %385, !dbg !136
  %390 = add i32 %388, %386, !dbg !136
  %391 = sext i32 %389 to i64, !dbg !137
  %392 = getelementptr float, ptr addrspace(1) %1, i64 %391, !dbg !137
  %393 = sext i32 %390 to i64, !dbg !137
  %394 = getelementptr float, ptr addrspace(1) %1, i64 %393, !dbg !137
  %395 = and i1 %9, %17, !dbg !138
  %396 = and i1 %18, %9, !dbg !138
  %397 = extractelement <2 x i32> %.v6, i64 0, !dbg !139
  %398 = select i1 %368, i32 %239, i32 %397, !dbg !140
  %399 = extractelement <2 x i32> %.v6, i64 1, !dbg !139
  %400 = select i1 %370, i32 %241, i32 %399, !dbg !140
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %398, i32 %400, ptr addrspace(1) %392, i1 %395) #1, !dbg !139
  %401 = extractelement <2 x i32> %.v13, i64 0, !dbg !139
  %402 = select i1 %373, i32 %240, i32 %401, !dbg !140
  %403 = extractelement <2 x i32> %.v13, i64 1, !dbg !139
  %404 = select i1 %376, i32 %242, i32 %403, !dbg !140
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %402, i32 %404, ptr addrspace(1) %394, i1 %396) #1, !dbg !139
  %405 = getelementptr i8, ptr addrspace(1) %2, i64 %391, !dbg !141
  %406 = getelementptr i8, ptr addrspace(1) %2, i64 %393, !dbg !141
  %407 = bitcast <2 x i8> %308 to i16, !dbg !142
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %407, ptr addrspace(1) %405, i1 %395) #1, !dbg !142
  %408 = bitcast <2 x i8> %384 to i16, !dbg !142
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %408, ptr addrspace(1) %406, i1 %396) #1, !dbg !142
  ret void, !dbg !143
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvzgwtlmdlzqy3xl6bocfbp34fe3s7sptrutcxwjbbxgxkcrty7j.py", directory: "inductor_cache/vz")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_7", linkageName: "triton_poi_fused_max_pool2d_with_indices_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 23, scope: !7)
!13 = !DILocation(line: 24, column: 21, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 20, scope: !7)
!24 = !DILocation(line: 40, column: 20, scope: !7)
!25 = !DILocation(line: 41, column: 19, scope: !7)
!26 = !DILocation(line: 45, column: 49, scope: !7)
!27 = !DILocation(line: 45, column: 39, scope: !7)
!28 = !DILocation(line: 45, column: 46, scope: !7)
!29 = !DILocation(line: 45, column: 59, scope: !7)
!30 = !DILocation(line: 45, column: 54, scope: !7)
!31 = !DILocation(line: 45, column: 31, scope: !7)
!32 = !DILocation(line: 45, column: 72, scope: !7)
!33 = !DILocation(line: 45, column: 80, scope: !7)
!34 = !DILocation(line: 45, column: 64, scope: !7)
!35 = !DILocation(line: 47, column: 21, scope: !7)
!36 = !DILocation(line: 51, column: 46, scope: !7)
!37 = !DILocation(line: 51, column: 54, scope: !7)
!38 = !DILocation(line: 51, column: 31, scope: !7)
!39 = !DILocation(line: 51, column: 72, scope: !7)
!40 = !DILocation(line: 51, column: 80, scope: !7)
!41 = !DILocation(line: 51, column: 64, scope: !7)
!42 = !DILocation(line: 53, column: 16, scope: !7)
!43 = !DILocation(line: 58, column: 46, scope: !7)
!44 = !DILocation(line: 58, column: 54, scope: !7)
!45 = !DILocation(line: 58, column: 31, scope: !7)
!46 = !DILocation(line: 58, column: 64, scope: !7)
!47 = !DILocation(line: 65, column: 45, scope: !7)
!48 = !DILocation(line: 65, column: 53, scope: !7)
!49 = !DILocation(line: 65, column: 31, scope: !7)
!50 = !DILocation(line: 65, column: 71, scope: !7)
!51 = !DILocation(line: 65, column: 79, scope: !7)
!52 = !DILocation(line: 65, column: 63, scope: !7)
!53 = !DILocation(line: 68, column: 46, scope: !7)
!54 = !DILocation(line: 68, column: 31, scope: !7)
!55 = !DILocation(line: 68, column: 64, scope: !7)
!56 = !DILocation(line: 68, column: 72, scope: !7)
!57 = !DILocation(line: 68, column: 56, scope: !7)
!58 = !DILocation(line: 71, column: 42, scope: !7)
!59 = !DILocation(line: 71, column: 50, scope: !7)
!60 = !DILocation(line: 71, column: 31, scope: !7)
!61 = !DILocation(line: 71, column: 60, scope: !7)
!62 = !DILocation(line: 73, column: 16, scope: !7)
!63 = !DILocation(line: 74, column: 21, scope: !7)
!64 = !DILocation(line: 75, column: 20, scope: !7)
!65 = !DILocation(line: 76, column: 20, scope: !7)
!66 = !DILocation(line: 77, column: 20, scope: !7)
!67 = !DILocation(line: 78, column: 43, scope: !7)
!68 = !DILocation(line: 78, column: 51, scope: !7)
!69 = !DILocation(line: 78, column: 31, scope: !7)
!70 = !DILocation(line: 78, column: 69, scope: !7)
!71 = !DILocation(line: 78, column: 77, scope: !7)
!72 = !DILocation(line: 78, column: 61, scope: !7)
!73 = !DILocation(line: 80, column: 20, scope: !7)
!74 = !DILocation(line: 81, column: 43, scope: !7)
!75 = !DILocation(line: 81, column: 51, scope: !7)
!76 = !DILocation(line: 81, column: 31, scope: !7)
!77 = !DILocation(line: 81, column: 69, scope: !7)
!78 = !DILocation(line: 81, column: 77, scope: !7)
!79 = !DILocation(line: 81, column: 61, scope: !7)
!80 = !DILocation(line: 84, column: 43, scope: !7)
!81 = !DILocation(line: 84, column: 51, scope: !7)
!82 = !DILocation(line: 84, column: 31, scope: !7)
!83 = !DILocation(line: 84, column: 61, scope: !7)
!84 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !87)
!85 = distinct !DILexicalBlockFile(scope: !7, file: !86, discriminator: 0)
!86 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!87 = !DILocation(line: 52, column: 42, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !87)
!91 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !92)
!92 = !DILocation(line: 59, column: 42, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !92)
!96 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !97)
!97 = !DILocation(line: 66, column: 42, scope: !7)
!98 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !97)
!99 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !97)
!100 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !97)
!101 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !102)
!102 = !DILocation(line: 69, column: 42, scope: !7)
!103 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !102)
!104 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !102)
!105 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !102)
!106 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !107)
!107 = !DILocation(line: 72, column: 42, scope: !7)
!108 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !107)
!109 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !107)
!110 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !107)
!111 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !112)
!112 = !DILocation(line: 79, column: 42, scope: !7)
!113 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !112)
!114 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !112)
!115 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !112)
!116 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !117)
!117 = !DILocation(line: 82, column: 42, scope: !7)
!118 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !117)
!119 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !117)
!120 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !117)
!121 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !122)
!122 = !DILocation(line: 85, column: 42, scope: !7)
!123 = !DILocation(line: 120, column: 16, scope: !85, inlinedAt: !122)
!124 = !DILocation(line: 89, column: 35, scope: !7)
!125 = !DILocation(line: 92, column: 35, scope: !7)
!126 = !DILocation(line: 95, column: 35, scope: !7)
!127 = !DILocation(line: 98, column: 35, scope: !7)
!128 = !DILocation(line: 101, column: 35, scope: !7)
!129 = !DILocation(line: 104, column: 35, scope: !7)
!130 = !DILocation(line: 107, column: 35, scope: !7)
!131 = !DILocation(line: 110, column: 35, scope: !7)
!132 = !DILocation(line: 120, column: 21, scope: !85, inlinedAt: !122)
!133 = !DILocation(line: 111, column: 33, scope: !7)
!134 = !DILocation(line: 111, column: 44, scope: !7)
!135 = !DILocation(line: 111, column: 30, scope: !7)
!136 = !DILocation(line: 111, column: 38, scope: !7)
!137 = !DILocation(line: 111, column: 25, scope: !7)
!138 = !DILocation(line: 111, column: 64, scope: !7)
!139 = !DILocation(line: 111, column: 56, scope: !7)
!140 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !122)
!141 = !DILocation(line: 112, column: 25, scope: !7)
!142 = !DILocation(line: 112, column: 56, scope: !7)
!143 = !DILocation(line: 112, column: 4, scope: !7)
