; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__weight_norm_interface_convolution_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 7, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 126, !dbg !12
  %13 = lshr i32 %10, 5, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = or disjoint i32 %9, %12, !dbg !13
  %16 = or disjoint i32 %9, %14, !dbg !13
  %17 = or disjoint i32 %16, 8, !dbg !13
  %18 = or disjoint i32 %16, 16, !dbg !13
  %19 = or disjoint i32 %16, 24, !dbg !13
  %20 = or disjoint i32 %16, 32, !dbg !13
  %21 = or disjoint i32 %16, 40, !dbg !13
  %22 = or disjoint i32 %16, 48, !dbg !13
  %23 = or disjoint i32 %16, 56, !dbg !13
  %24 = or disjoint i32 %16, 64, !dbg !13
  %25 = or disjoint i32 %16, 72, !dbg !13
  %26 = or disjoint i32 %16, 80, !dbg !13
  %27 = or disjoint i32 %16, 88, !dbg !13
  %28 = icmp slt i32 %15, 96, !dbg !14
  %29 = icmp slt i32 %16, 96, !dbg !14
  %30 = icmp slt i32 %17, 96, !dbg !14
  %31 = icmp slt i32 %18, 96, !dbg !14
  %32 = icmp slt i32 %19, 96, !dbg !14
  %33 = icmp slt i32 %20, 96, !dbg !14
  %34 = icmp slt i32 %21, 96, !dbg !14
  %35 = icmp slt i32 %22, 96, !dbg !14
  %36 = icmp slt i32 %23, 96, !dbg !14
  %37 = icmp slt i32 %24, 96, !dbg !14
  %38 = icmp slt i32 %25, 96, !dbg !14
  %39 = icmp slt i32 %26, 96, !dbg !14
  %40 = icmp slt i32 %27, 96, !dbg !14
  %41 = icmp slt i32 %9, 0, !dbg !14
  %42 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %43 = shl i32 %42, 5, !dbg !16
  %44 = lshr i32 %10, 6, !dbg !17
  %45 = and i32 %44, 3, !dbg !17
  %46 = and i32 %10, 31, !dbg !17
  %47 = or disjoint i32 %43, %45, !dbg !18
  %48 = or disjoint i32 %47, 4, !dbg !18
  %49 = or disjoint i32 %47, 8, !dbg !18
  %50 = or disjoint i32 %47, 12, !dbg !18
  %51 = or disjoint i32 %47, 16, !dbg !18
  %52 = or disjoint i32 %47, 20, !dbg !18
  %53 = or disjoint i32 %47, 24, !dbg !18
  %54 = or disjoint i32 %43, %46, !dbg !18
  %55 = icmp slt i32 %47, 25, !dbg !19
  %56 = icmp slt i32 %48, 25, !dbg !19
  %57 = icmp slt i32 %49, 25, !dbg !19
  %58 = icmp slt i32 %50, 25, !dbg !19
  %59 = icmp slt i32 %51, 25, !dbg !19
  %60 = icmp slt i32 %52, 25, !dbg !19
  %61 = icmp slt i32 %53, 25, !dbg !19
  %62 = icmp slt i32 %43, 0, !dbg !19
  %63 = icmp slt i32 %54, 25, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %64 = sdiv i32 %.frozen, 6, !dbg !20
  %65 = mul i32 %64, 6, !dbg !21
  %.decomposed = sub i32 %.frozen, %65, !dbg !21
  %66 = mul i32 %47, 6, !dbg !22
  %67 = mul i32 %48, 6, !dbg !22
  %68 = mul i32 %49, 6, !dbg !22
  %69 = mul i32 %50, 6, !dbg !22
  %70 = mul i32 %51, 6, !dbg !22
  %71 = mul i32 %52, 6, !dbg !22
  %72 = mul i32 %53, 6, !dbg !22
  %73 = add i32 %66, 168, !dbg !22
  %74 = mul i32 %64, 150, !dbg !23
  %75 = add i32 %74, %.decomposed, !dbg !24
  %76 = add i32 %75, %66, !dbg !25
  %77 = add i32 %75, %67, !dbg !25
  %78 = add i32 %75, %68, !dbg !25
  %79 = add i32 %75, %69, !dbg !25
  %80 = add i32 %75, %70, !dbg !25
  %81 = add i32 %75, %71, !dbg !25
  %82 = add i32 %75, %72, !dbg !25
  %83 = add i32 %75, %73, !dbg !25
  %84 = sext i32 %76 to i64, !dbg !26
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !26
  %86 = sext i32 %77 to i64, !dbg !26
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !26
  %88 = sext i32 %78 to i64, !dbg !26
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !26
  %90 = sext i32 %79 to i64, !dbg !26
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !26
  %92 = sext i32 %80 to i64, !dbg !26
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !26
  %94 = sext i32 %81 to i64, !dbg !26
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !26
  %96 = sext i32 %82 to i64, !dbg !26
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !26
  %98 = sext i32 %83 to i64, !dbg !26
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !26
  %100 = and i1 %28, %55, !dbg !27
  %101 = and i1 %56, %28, !dbg !27
  %102 = and i1 %57, %28, !dbg !27
  %103 = and i1 %58, %28, !dbg !27
  %104 = and i1 %59, %28, !dbg !27
  %105 = and i1 %60, %28, !dbg !27
  %106 = and i1 %61, %28, !dbg !27
  %107 = and i1 %62, %28, !dbg !27
  %108 = and i1 %29, %63, !dbg !27
  %109 = and i1 %30, %63, !dbg !27
  %110 = and i1 %31, %63, !dbg !27
  %111 = and i1 %32, %63, !dbg !27
  %112 = and i1 %33, %63, !dbg !27
  %113 = and i1 %34, %63, !dbg !27
  %114 = and i1 %35, %63, !dbg !27
  %115 = and i1 %36, %63, !dbg !27
  %116 = and i1 %37, %63, !dbg !27
  %117 = and i1 %38, %63, !dbg !27
  %118 = and i1 %39, %63, !dbg !27
  %119 = and i1 %40, %63, !dbg !27
  %120 = and i1 %41, %63, !dbg !27
  %121 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %85, i1 %100) #2, !dbg !28
  %122 = extractvalue { i32, i32 } %121, 0, !dbg !28
  %123 = extractvalue { i32, i32 } %121, 1, !dbg !28
  %124 = bitcast i32 %122 to float, !dbg !28
  %125 = bitcast i32 %123 to float, !dbg !28
  %126 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %87, i1 %101) #2, !dbg !28
  %127 = extractvalue { i32, i32 } %126, 0, !dbg !28
  %128 = extractvalue { i32, i32 } %126, 1, !dbg !28
  %129 = bitcast i32 %127 to float, !dbg !28
  %130 = bitcast i32 %128 to float, !dbg !28
  %131 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %89, i1 %102) #2, !dbg !28
  %132 = extractvalue { i32, i32 } %131, 0, !dbg !28
  %133 = extractvalue { i32, i32 } %131, 1, !dbg !28
  %134 = bitcast i32 %132 to float, !dbg !28
  %135 = bitcast i32 %133 to float, !dbg !28
  %136 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %91, i1 %103) #2, !dbg !28
  %137 = extractvalue { i32, i32 } %136, 0, !dbg !28
  %138 = extractvalue { i32, i32 } %136, 1, !dbg !28
  %139 = bitcast i32 %137 to float, !dbg !28
  %140 = bitcast i32 %138 to float, !dbg !28
  %141 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %93, i1 %104) #2, !dbg !28
  %142 = extractvalue { i32, i32 } %141, 0, !dbg !28
  %143 = extractvalue { i32, i32 } %141, 1, !dbg !28
  %144 = bitcast i32 %142 to float, !dbg !28
  %145 = bitcast i32 %143 to float, !dbg !28
  %146 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %95, i1 %105) #2, !dbg !28
  %147 = extractvalue { i32, i32 } %146, 0, !dbg !28
  %148 = extractvalue { i32, i32 } %146, 1, !dbg !28
  %149 = bitcast i32 %147 to float, !dbg !28
  %150 = bitcast i32 %148 to float, !dbg !28
  %151 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %97, i1 %106) #2, !dbg !28
  %152 = extractvalue { i32, i32 } %151, 0, !dbg !28
  %153 = extractvalue { i32, i32 } %151, 1, !dbg !28
  %154 = bitcast i32 %152 to float, !dbg !28
  %155 = bitcast i32 %153 to float, !dbg !28
  %156 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %99, i1 %107) #2, !dbg !28
  %157 = extractvalue { i32, i32 } %156, 0, !dbg !28
  %158 = extractvalue { i32, i32 } %156, 1, !dbg !28
  %159 = bitcast i32 %157 to float, !dbg !28
  %160 = bitcast i32 %158 to float, !dbg !28
  %161 = sext i32 %64 to i64, !dbg !29
  %162 = getelementptr float, ptr addrspace(1) %1, i64 %161, !dbg !29
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %28) #2, !dbg !30
  %164 = bitcast i32 %163 to float, !dbg !30
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %28) #2, !dbg !30
  %166 = bitcast i32 %165 to float, !dbg !30
  %167 = getelementptr float, ptr addrspace(1) %2, i64 %161, !dbg !31
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 %28) #2, !dbg !32
  %169 = bitcast i32 %168 to float, !dbg !32
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 %28) #2, !dbg !32
  %171 = bitcast i32 %170 to float, !dbg !32
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float %169) #2, !dbg !33
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %166, float %171) #2, !dbg !33
  %174 = fmul float %172, %124, !dbg !34
  %175 = fmul float %173, %125, !dbg !34
  %176 = fmul float %172, %129, !dbg !34
  %177 = fmul float %173, %130, !dbg !34
  %178 = fmul float %172, %134, !dbg !34
  %179 = fmul float %173, %135, !dbg !34
  %180 = fmul float %172, %139, !dbg !34
  %181 = fmul float %173, %140, !dbg !34
  %182 = fmul float %172, %144, !dbg !34
  %183 = fmul float %173, %145, !dbg !34
  %184 = fmul float %172, %149, !dbg !34
  %185 = fmul float %173, %150, !dbg !34
  %186 = fmul float %172, %154, !dbg !34
  %187 = fmul float %173, %155, !dbg !34
  %188 = fmul float %172, %159, !dbg !34
  %189 = fmul float %173, %160, !dbg !34
  %190 = mul i32 %16, 25, !dbg !35
  %191 = mul i32 %17, 25, !dbg !35
  %192 = mul i32 %18, 25, !dbg !35
  %193 = mul i32 %19, 25, !dbg !35
  %194 = mul i32 %20, 25, !dbg !35
  %195 = mul i32 %21, 25, !dbg !35
  %196 = mul i32 %22, 25, !dbg !35
  %197 = mul i32 %23, 25, !dbg !35
  %198 = mul i32 %24, 25, !dbg !35
  %199 = mul i32 %25, 25, !dbg !35
  %200 = mul i32 %26, 25, !dbg !35
  %201 = mul i32 %27, 25, !dbg !35
  %202 = add i32 %190, 2400, !dbg !35
  %203 = add i32 %190, 2600, !dbg !35
  %204 = add i32 %190, 2800, !dbg !35
  %205 = add i32 %190, 3000, !dbg !35
  %206 = add i32 %54, %190, !dbg !36
  %207 = add i32 %54, %191, !dbg !36
  %208 = add i32 %54, %192, !dbg !36
  %209 = add i32 %54, %193, !dbg !36
  %210 = add i32 %54, %194, !dbg !36
  %211 = add i32 %54, %195, !dbg !36
  %212 = add i32 %54, %196, !dbg !36
  %213 = add i32 %54, %197, !dbg !36
  %214 = add i32 %54, %198, !dbg !36
  %215 = add i32 %54, %199, !dbg !36
  %216 = add i32 %54, %200, !dbg !36
  %217 = add i32 %54, %201, !dbg !36
  %218 = add i32 %54, %202, !dbg !36
  %219 = add i32 %54, %203, !dbg !36
  %220 = add i32 %54, %204, !dbg !36
  %221 = add i32 %54, %205, !dbg !36
  %222 = sext i32 %206 to i64, !dbg !37
  %223 = getelementptr float, ptr addrspace(1) %3, i64 %222, !dbg !37
  %224 = sext i32 %207 to i64, !dbg !37
  %225 = getelementptr float, ptr addrspace(1) %3, i64 %224, !dbg !37
  %226 = sext i32 %208 to i64, !dbg !37
  %227 = getelementptr float, ptr addrspace(1) %3, i64 %226, !dbg !37
  %228 = sext i32 %209 to i64, !dbg !37
  %229 = getelementptr float, ptr addrspace(1) %3, i64 %228, !dbg !37
  %230 = sext i32 %210 to i64, !dbg !37
  %231 = getelementptr float, ptr addrspace(1) %3, i64 %230, !dbg !37
  %232 = sext i32 %211 to i64, !dbg !37
  %233 = getelementptr float, ptr addrspace(1) %3, i64 %232, !dbg !37
  %234 = sext i32 %212 to i64, !dbg !37
  %235 = getelementptr float, ptr addrspace(1) %3, i64 %234, !dbg !37
  %236 = sext i32 %213 to i64, !dbg !37
  %237 = getelementptr float, ptr addrspace(1) %3, i64 %236, !dbg !37
  %238 = sext i32 %214 to i64, !dbg !37
  %239 = getelementptr float, ptr addrspace(1) %3, i64 %238, !dbg !37
  %240 = sext i32 %215 to i64, !dbg !37
  %241 = getelementptr float, ptr addrspace(1) %3, i64 %240, !dbg !37
  %242 = sext i32 %216 to i64, !dbg !37
  %243 = getelementptr float, ptr addrspace(1) %3, i64 %242, !dbg !37
  %244 = sext i32 %217 to i64, !dbg !37
  %245 = getelementptr float, ptr addrspace(1) %3, i64 %244, !dbg !37
  %246 = sext i32 %218 to i64, !dbg !37
  %247 = getelementptr float, ptr addrspace(1) %3, i64 %246, !dbg !37
  %248 = sext i32 %219 to i64, !dbg !37
  %249 = getelementptr float, ptr addrspace(1) %3, i64 %248, !dbg !37
  %250 = sext i32 %220 to i64, !dbg !37
  %251 = getelementptr float, ptr addrspace(1) %3, i64 %250, !dbg !37
  %252 = sext i32 %221 to i64, !dbg !37
  %253 = getelementptr float, ptr addrspace(1) %3, i64 %252, !dbg !37
  %254 = shl i32 %10, 6, !dbg !38
  %255 = and i32 %254, 4032, !dbg !38
  %256 = or disjoint i32 %255, %45, !dbg !38
  %257 = and i32 %10, 255, !dbg !38
  %258 = lshr exact i32 %255, 3, !dbg !38
  %259 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %258, !dbg !38
  %260 = getelementptr float, ptr addrspace(3) %259, i32 %256, !dbg !38
  %261 = bitcast float %174 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %261, i1 true) #2, !dbg !38
  %262 = or disjoint i32 %256, 32, !dbg !38
  %263 = lshr i32 %262, 5, !dbg !38
  %264 = getelementptr float, ptr addrspace(3) @global_smem, i32 %263, !dbg !38
  %265 = getelementptr float, ptr addrspace(3) %264, i32 %262, !dbg !38
  %266 = bitcast float %175 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %266, i1 true) #2, !dbg !38
  %267 = or disjoint i32 %256, 4, !dbg !38
  %268 = getelementptr float, ptr addrspace(3) %259, i32 %267, !dbg !38
  %269 = bitcast float %176 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #2, !dbg !38
  %270 = or disjoint i32 %256, 36, !dbg !38
  %271 = lshr i32 %270, 5, !dbg !38
  %272 = getelementptr float, ptr addrspace(3) @global_smem, i32 %271, !dbg !38
  %273 = getelementptr float, ptr addrspace(3) %272, i32 %270, !dbg !38
  %274 = bitcast float %177 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #2, !dbg !38
  %275 = or disjoint i32 %256, 8, !dbg !38
  %276 = getelementptr float, ptr addrspace(3) %259, i32 %275, !dbg !38
  %277 = bitcast float %178 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %277, i1 true) #2, !dbg !38
  %278 = or disjoint i32 %256, 40, !dbg !38
  %279 = lshr i32 %278, 5, !dbg !38
  %280 = getelementptr float, ptr addrspace(3) @global_smem, i32 %279, !dbg !38
  %281 = getelementptr float, ptr addrspace(3) %280, i32 %278, !dbg !38
  %282 = bitcast float %179 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %281, <1 x i32> %282, i1 true) #2, !dbg !38
  %283 = or disjoint i32 %256, 12, !dbg !38
  %284 = getelementptr float, ptr addrspace(3) %259, i32 %283, !dbg !38
  %285 = bitcast float %180 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %285, i1 true) #2, !dbg !38
  %286 = or disjoint i32 %256, 44, !dbg !38
  %287 = lshr i32 %286, 5, !dbg !38
  %288 = getelementptr float, ptr addrspace(3) @global_smem, i32 %287, !dbg !38
  %289 = getelementptr float, ptr addrspace(3) %288, i32 %286, !dbg !38
  %290 = bitcast float %181 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, <1 x i32> %290, i1 true) #2, !dbg !38
  %291 = or disjoint i32 %256, 16, !dbg !38
  %292 = getelementptr float, ptr addrspace(3) %259, i32 %291, !dbg !38
  %293 = bitcast float %182 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %293, i1 true) #2, !dbg !38
  %294 = or disjoint i32 %256, 48, !dbg !38
  %295 = lshr i32 %294, 5, !dbg !38
  %296 = getelementptr float, ptr addrspace(3) @global_smem, i32 %295, !dbg !38
  %297 = getelementptr float, ptr addrspace(3) %296, i32 %294, !dbg !38
  %298 = bitcast float %183 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %298, i1 true) #2, !dbg !38
  %299 = or disjoint i32 %256, 20, !dbg !38
  %300 = getelementptr float, ptr addrspace(3) %259, i32 %299, !dbg !38
  %301 = bitcast float %184 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %301, i1 true) #2, !dbg !38
  %302 = or disjoint i32 %256, 52, !dbg !38
  %303 = lshr i32 %302, 5, !dbg !38
  %304 = getelementptr float, ptr addrspace(3) @global_smem, i32 %303, !dbg !38
  %305 = getelementptr float, ptr addrspace(3) %304, i32 %302, !dbg !38
  %306 = bitcast float %185 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %305, <1 x i32> %306, i1 true) #2, !dbg !38
  %307 = or disjoint i32 %256, 24, !dbg !38
  %308 = getelementptr float, ptr addrspace(3) %259, i32 %307, !dbg !38
  %309 = bitcast float %186 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %308, <1 x i32> %309, i1 true) #2, !dbg !38
  %310 = or disjoint i32 %256, 56, !dbg !38
  %311 = lshr i32 %310, 5, !dbg !38
  %312 = getelementptr float, ptr addrspace(3) @global_smem, i32 %311, !dbg !38
  %313 = getelementptr float, ptr addrspace(3) %312, i32 %310, !dbg !38
  %314 = bitcast float %187 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %313, <1 x i32> %314, i1 true) #2, !dbg !38
  %315 = or disjoint i32 %256, 28, !dbg !38
  %316 = getelementptr float, ptr addrspace(3) %259, i32 %315, !dbg !38
  %317 = bitcast float %188 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %316, <1 x i32> %317, i1 true) #2, !dbg !38
  %318 = or disjoint i32 %256, 60, !dbg !38
  %319 = lshr i32 %318, 5, !dbg !38
  %320 = getelementptr float, ptr addrspace(3) @global_smem, i32 %319, !dbg !38
  %321 = getelementptr float, ptr addrspace(3) %320, i32 %318, !dbg !38
  %322 = bitcast float %189 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %321, <1 x i32> %322, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %323 = lshr i32 %257, 5, !dbg !38
  %324 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %323, !dbg !38
  %325 = getelementptr inbounds float, ptr addrspace(3) %324, i32 %257, !dbg !38
  %326 = load i32, ptr addrspace(3) %325, align 4, !dbg !38
  %327 = or disjoint i32 %257, 256, !dbg !38
  %328 = lshr i32 %327, 5, !dbg !38
  %329 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %328, !dbg !38
  %330 = getelementptr inbounds float, ptr addrspace(3) %329, i32 %327, !dbg !38
  %331 = load i32, ptr addrspace(3) %330, align 4, !dbg !38
  %332 = or disjoint i32 %257, 512, !dbg !38
  %333 = lshr i32 %332, 5, !dbg !38
  %334 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %333, !dbg !38
  %335 = getelementptr inbounds float, ptr addrspace(3) %334, i32 %332, !dbg !38
  %336 = load i32, ptr addrspace(3) %335, align 4, !dbg !38
  %337 = or disjoint i32 %257, 768, !dbg !38
  %338 = lshr i32 %337, 5, !dbg !38
  %339 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %338, !dbg !38
  %340 = getelementptr inbounds float, ptr addrspace(3) %339, i32 %337, !dbg !38
  %341 = load i32, ptr addrspace(3) %340, align 4, !dbg !38
  %342 = or disjoint i32 %257, 1024, !dbg !38
  %343 = lshr i32 %342, 5, !dbg !38
  %344 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %343, !dbg !38
  %345 = getelementptr inbounds float, ptr addrspace(3) %344, i32 %342, !dbg !38
  %346 = load i32, ptr addrspace(3) %345, align 4, !dbg !38
  %347 = or disjoint i32 %257, 1280, !dbg !38
  %348 = lshr i32 %347, 5, !dbg !38
  %349 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %348, !dbg !38
  %350 = getelementptr inbounds float, ptr addrspace(3) %349, i32 %347, !dbg !38
  %351 = load i32, ptr addrspace(3) %350, align 4, !dbg !38
  %352 = or disjoint i32 %257, 1536, !dbg !38
  %353 = lshr i32 %352, 5, !dbg !38
  %354 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %353, !dbg !38
  %355 = getelementptr inbounds float, ptr addrspace(3) %354, i32 %352, !dbg !38
  %356 = load i32, ptr addrspace(3) %355, align 4, !dbg !38
  %357 = or disjoint i32 %257, 1792, !dbg !38
  %358 = lshr i32 %357, 5, !dbg !38
  %359 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %358, !dbg !38
  %360 = getelementptr inbounds float, ptr addrspace(3) %359, i32 %357, !dbg !38
  %361 = load i32, ptr addrspace(3) %360, align 4, !dbg !38
  %362 = or disjoint i32 %257, 2048, !dbg !38
  %363 = lshr i32 %362, 5, !dbg !38
  %364 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %363, !dbg !38
  %365 = getelementptr inbounds float, ptr addrspace(3) %364, i32 %362, !dbg !38
  %366 = load i32, ptr addrspace(3) %365, align 4, !dbg !38
  %367 = or disjoint i32 %257, 2304, !dbg !38
  %368 = lshr i32 %367, 5, !dbg !38
  %369 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %368, !dbg !38
  %370 = getelementptr inbounds float, ptr addrspace(3) %369, i32 %367, !dbg !38
  %371 = load i32, ptr addrspace(3) %370, align 4, !dbg !38
  %372 = or disjoint i32 %257, 2560, !dbg !38
  %373 = lshr i32 %372, 5, !dbg !38
  %374 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %373, !dbg !38
  %375 = getelementptr inbounds float, ptr addrspace(3) %374, i32 %372, !dbg !38
  %376 = load i32, ptr addrspace(3) %375, align 4, !dbg !38
  %377 = or disjoint i32 %257, 2816, !dbg !38
  %378 = lshr i32 %377, 5, !dbg !38
  %379 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %378, !dbg !38
  %380 = getelementptr inbounds float, ptr addrspace(3) %379, i32 %377, !dbg !38
  %381 = load i32, ptr addrspace(3) %380, align 4, !dbg !38
  %382 = or disjoint i32 %257, 3072, !dbg !38
  %383 = lshr i32 %382, 5, !dbg !38
  %384 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %383, !dbg !38
  %385 = getelementptr inbounds float, ptr addrspace(3) %384, i32 %382, !dbg !38
  %386 = load i32, ptr addrspace(3) %385, align 4, !dbg !38
  %387 = or disjoint i32 %257, 3328, !dbg !38
  %388 = lshr i32 %387, 5, !dbg !38
  %389 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %388, !dbg !38
  %390 = getelementptr inbounds float, ptr addrspace(3) %389, i32 %387, !dbg !38
  %391 = load i32, ptr addrspace(3) %390, align 4, !dbg !38
  %392 = or disjoint i32 %257, 3584, !dbg !38
  %393 = lshr i32 %392, 5, !dbg !38
  %394 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %393, !dbg !38
  %395 = getelementptr inbounds float, ptr addrspace(3) %394, i32 %392, !dbg !38
  %396 = load i32, ptr addrspace(3) %395, align 4, !dbg !38
  %397 = or disjoint i32 %257, 3840, !dbg !38
  %398 = lshr i32 %397, 5, !dbg !38
  %399 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %398, !dbg !38
  %400 = getelementptr inbounds float, ptr addrspace(3) %399, i32 %397, !dbg !38
  %401 = load i32, ptr addrspace(3) %400, align 4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %326, ptr addrspace(1) %223, i1 %108) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %331, ptr addrspace(1) %225, i1 %109) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %336, ptr addrspace(1) %227, i1 %110) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %341, ptr addrspace(1) %229, i1 %111) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %346, ptr addrspace(1) %231, i1 %112) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %351, ptr addrspace(1) %233, i1 %113) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %356, ptr addrspace(1) %235, i1 %114) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %361, ptr addrspace(1) %237, i1 %115) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %366, ptr addrspace(1) %239, i1 %116) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %371, ptr addrspace(1) %241, i1 %117) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %376, ptr addrspace(1) %243, i1 %118) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %381, ptr addrspace(1) %245, i1 %119) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %386, ptr addrspace(1) %247, i1 %120) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %391, ptr addrspace(1) %249, i1 %120) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %396, ptr addrspace(1) %251, i1 %120) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %401, ptr addrspace(1) %253, i1 %120) #2, !dbg !38
  %402 = getelementptr float, ptr addrspace(1) %4, i64 %84, !dbg !39
  %403 = getelementptr float, ptr addrspace(1) %4, i64 %86, !dbg !39
  %404 = getelementptr float, ptr addrspace(1) %4, i64 %88, !dbg !39
  %405 = getelementptr float, ptr addrspace(1) %4, i64 %90, !dbg !39
  %406 = getelementptr float, ptr addrspace(1) %4, i64 %92, !dbg !39
  %407 = getelementptr float, ptr addrspace(1) %4, i64 %94, !dbg !39
  %408 = getelementptr float, ptr addrspace(1) %4, i64 %96, !dbg !39
  %409 = getelementptr float, ptr addrspace(1) %4, i64 %98, !dbg !39
  %410 = bitcast float %174 to i32, !dbg !40
  %411 = bitcast float %175 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %410, i32 %411, ptr addrspace(1) %402, i1 %100) #2, !dbg !40
  %412 = bitcast float %176 to i32, !dbg !40
  %413 = bitcast float %177 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %412, i32 %413, ptr addrspace(1) %403, i1 %101) #2, !dbg !40
  %414 = bitcast float %178 to i32, !dbg !40
  %415 = bitcast float %179 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %414, i32 %415, ptr addrspace(1) %404, i1 %102) #2, !dbg !40
  %416 = bitcast float %180 to i32, !dbg !40
  %417 = bitcast float %181 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %416, i32 %417, ptr addrspace(1) %405, i1 %103) #2, !dbg !40
  %418 = bitcast float %182 to i32, !dbg !40
  %419 = bitcast float %183 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %418, i32 %419, ptr addrspace(1) %406, i1 %104) #2, !dbg !40
  %420 = bitcast float %184 to i32, !dbg !40
  %421 = bitcast float %185 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %420, i32 %421, ptr addrspace(1) %407, i1 %105) #2, !dbg !40
  %422 = bitcast float %186 to i32, !dbg !40
  %423 = bitcast float %187 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %422, i32 %423, ptr addrspace(1) %408, i1 %106) #2, !dbg !40
  %424 = bitcast float %188 to i32, !dbg !40
  %425 = bitcast float %189 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %424, i32 %425, ptr addrspace(1) %409, i1 %107) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb5v2a2rybe6rgv4bmwkxzy6w64c5mz3pmkyajhdhuphrbccbl4x.py", directory: "inductor_cache/b5")
!4 = !{ptr @triton_poi_fused__weight_norm_interface_convolution_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__weight_norm_interface_convolution_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__weight_norm_interface_convolution_6", linkageName: "triton_poi_fused__weight_norm_interface_convolution_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 46, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 42, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 59, scope: !7)
!28 = !DILocation(line: 32, column: 51, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 18, scope: !7)
!34 = !DILocation(line: 36, column: 18, scope: !7)
!35 = !DILocation(line: 37, column: 33, scope: !7)
!36 = !DILocation(line: 37, column: 30, scope: !7)
!37 = !DILocation(line: 37, column: 25, scope: !7)
!38 = !DILocation(line: 37, column: 44, scope: !7)
!39 = !DILocation(line: 38, column: 25, scope: !7)
!40 = !DILocation(line: 38, column: 52, scope: !7)
!41 = !DILocation(line: 38, column: 4, scope: !7)
