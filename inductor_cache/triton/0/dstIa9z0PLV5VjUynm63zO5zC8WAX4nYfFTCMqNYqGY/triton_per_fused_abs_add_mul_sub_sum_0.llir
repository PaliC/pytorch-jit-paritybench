; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_add_mul_sub_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %7 = and i32 %6, 31, !dbg !10
  %8 = lshr i32 %6, 5, !dbg !10
  %9 = and i32 %6, 63, !dbg !10
  %10 = or disjoint i32 %9, 64, !dbg !10
  %11 = or disjoint i32 %9, 128, !dbg !10
  %12 = or disjoint i32 %9, 192, !dbg !10
  %13 = shl i32 %6, 2, !dbg !10
  %14 = and i32 %13, 252, !dbg !10
  %15 = icmp samesign ult i32 %14, 192, !dbg !11
  %.lhs.trunc = trunc i32 %13 to i8, !dbg !12
  %16 = udiv i8 %.lhs.trunc, 12, !dbg !13
  %17 = mul i8 %16, 12, !dbg !12
  %.decomposed = sub i8 %.lhs.trunc, %17, !dbg !12
  %.zext = zext nneg i8 %.decomposed to i32, !dbg !12
  %.zext8 = zext nneg i8 %16 to i32, !dbg !13
  %.lhs.trunc9 = trunc nuw nsw i32 %9 to i8, !dbg !14
  %18 = udiv i8 %.lhs.trunc9, 3, !dbg !15
  %19 = mul i8 %18, 3, !dbg !14
  %.decomposed25 = sub i8 %.lhs.trunc9, %19, !dbg !14
  %.zext10 = zext nneg i8 %.decomposed25 to i32, !dbg !14
  %.lhs.trunc11 = trunc nuw nsw i32 %10 to i8, !dbg !14
  %20 = udiv i8 %.lhs.trunc11, 3, !dbg !15
  %21 = mul i8 %20, 3, !dbg !14
  %.decomposed26 = sub i8 %.lhs.trunc11, %21, !dbg !14
  %.zext12 = zext nneg i8 %.decomposed26 to i32, !dbg !14
  %.lhs.trunc13 = trunc nuw i32 %11 to i8, !dbg !14
  %22 = udiv i8 %.lhs.trunc13, 3, !dbg !15
  %23 = mul i8 %22, 3, !dbg !14
  %.decomposed27 = sub i8 %.lhs.trunc13, %23, !dbg !14
  %.zext14 = zext nneg i8 %.decomposed27 to i32, !dbg !14
  %.lhs.trunc15 = trunc nuw i32 %12 to i8, !dbg !14
  %24 = udiv i8 %.lhs.trunc15, 3, !dbg !15
  %25 = mul i8 %24, 3, !dbg !14
  %.decomposed28 = sub i8 %.lhs.trunc15, %25, !dbg !14
  %.zext16 = zext nneg i8 %.decomposed28 to i32, !dbg !14
  %.zext24 = zext nneg i8 %24 to i32, !dbg !15
  %26 = add nuw nsw i32 %.zext, 4, !dbg !16
  %27 = shl nuw nsw i32 %.zext8, 4, !dbg !17
  %28 = add nuw nsw i32 %26, %27, !dbg !18
  %29 = zext nneg i32 %28 to i64, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !19
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !20
  %36 = bitcast i32 %32 to float, !dbg !20
  %37 = bitcast i32 %33 to float, !dbg !20
  %38 = bitcast i32 %34 to float, !dbg !20
  %39 = bitcast i32 %35 to float, !dbg !20
  %40 = or disjoint i32 %27, %.zext, !dbg !21
  %41 = zext nneg i32 %40 to i64, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !22
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !23
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !23
  %48 = bitcast i32 %44 to float, !dbg !23
  %49 = bitcast i32 %45 to float, !dbg !23
  %50 = bitcast i32 %46 to float, !dbg !23
  %51 = bitcast i32 %47 to float, !dbg !23
  %52 = add nuw nsw i32 %.zext10, 1, !dbg !24
  %53 = add nuw nsw i32 %.zext12, 1, !dbg !24
  %54 = add nuw nsw i32 %.zext14, 1, !dbg !24
  %55 = add nuw nsw i32 %.zext16, 1, !dbg !24
  %56 = shl nuw nsw i8 %18, 2, !dbg !25
  %57 = zext nneg i8 %56 to i32, !dbg !25
  %58 = shl nuw i8 %20, 2, !dbg !25
  %59 = zext i8 %58 to i32, !dbg !25
  %60 = shl nuw i8 %22, 2, !dbg !25
  %61 = zext i8 %60 to i32, !dbg !25
  %62 = shl nuw nsw i32 %.zext24, 2, !dbg !25
  %63 = add nuw nsw i32 %52, %57, !dbg !26
  %64 = add nuw nsw i32 %53, %59, !dbg !26
  %65 = add nuw nsw i32 %54, %61, !dbg !26
  %66 = add nuw nsw i32 %55, %62, !dbg !26
  %67 = zext nneg i32 %63 to i64, !dbg !27
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !27
  %69 = zext nneg i32 %64 to i64, !dbg !27
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !27
  %71 = zext nneg i32 %65 to i64, !dbg !27
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !27
  %73 = zext nneg i32 %66 to i64, !dbg !27
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !27
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 true, i32 0, i1 true) #3, !dbg !28
  %76 = bitcast i32 %75 to float, !dbg !28
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 true, i32 0, i1 true) #3, !dbg !28
  %78 = bitcast i32 %77 to float, !dbg !28
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 true, i32 0, i1 true) #3, !dbg !28
  %80 = bitcast i32 %79 to float, !dbg !28
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 false, i32 0, i1 false) #3, !dbg !28
  %82 = bitcast i32 %81 to float, !dbg !28
  %83 = or disjoint i32 %57, %.zext10, !dbg !29
  %84 = or disjoint i32 %59, %.zext12, !dbg !29
  %85 = or disjoint i32 %61, %.zext14, !dbg !29
  %86 = or disjoint i32 %62, %.zext16, !dbg !29
  %87 = zext nneg i32 %83 to i64, !dbg !30
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !30
  %89 = zext nneg i32 %84 to i64, !dbg !30
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !30
  %91 = zext nneg i32 %85 to i64, !dbg !30
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !30
  %93 = zext nneg i32 %86 to i64, !dbg !30
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !30
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 true, i32 0, i1 true) #3, !dbg !31
  %96 = bitcast i32 %95 to float, !dbg !31
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 true, i32 0, i1 true) #3, !dbg !31
  %98 = bitcast i32 %97 to float, !dbg !31
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 true, i32 0, i1 true) #3, !dbg !31
  %100 = bitcast i32 %99 to float, !dbg !31
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 false, i32 0, i1 false) #3, !dbg !31
  %102 = bitcast i32 %101 to float, !dbg !31
  %103 = fsub float %36, %48, !dbg !32
  %104 = fsub float %37, %49, !dbg !32
  %105 = fsub float %38, %50, !dbg !32
  %106 = fsub float %39, %51, !dbg !32
  %107 = tail call float @llvm.fabs.f32(float %103), !dbg !33
  %108 = tail call float @llvm.fabs.f32(float %104), !dbg !33
  %109 = tail call float @llvm.fabs.f32(float %105), !dbg !33
  %110 = tail call float @llvm.fabs.f32(float %106), !dbg !33
  %111 = fadd float %107, %108, !dbg !34
  %112 = fadd float %109, %111, !dbg !34
  %113 = fadd float %110, %112, !dbg !34
  %114 = select i1 %15, float %113, float 0.000000e+00, !dbg !34
  %115 = bitcast float %114 to i32, !dbg !39
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 16, i32 31), !dbg !39
  %117 = bitcast i32 %116 to float, !dbg !39
  %118 = fadd float %114, %117, !dbg !34
  %119 = bitcast float %118 to i32, !dbg !39
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 8, i32 31), !dbg !39
  %121 = bitcast i32 %120 to float, !dbg !39
  %122 = fadd float %118, %121, !dbg !34
  %123 = bitcast float %122 to i32, !dbg !39
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 4, i32 31), !dbg !39
  %125 = bitcast i32 %124 to float, !dbg !39
  %126 = fadd float %122, %125, !dbg !34
  %127 = bitcast float %126 to i32, !dbg !39
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 2, i32 31), !dbg !39
  %129 = bitcast i32 %128 to float, !dbg !39
  %130 = fadd float %126, %129, !dbg !34
  %131 = bitcast float %130 to i32, !dbg !39
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 1, i32 31), !dbg !39
  %133 = bitcast i32 %132 to float, !dbg !39
  %134 = fadd float %130, %133, !dbg !34
  %135 = icmp eq i32 %7, 0, !dbg !39
  %136 = and i32 %8, 1, !dbg !39
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i32 %136, !dbg !39
  %138 = bitcast float %134 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 %135) #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %139 = icmp slt i32 %6, 2, !dbg !39
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %6, !dbg !39
  %141 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %140, i1 %139) #3, !dbg !39
  %142 = bitcast i32 %141 to float, !dbg !39
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 1, i32 31), !dbg !39
  %144 = bitcast i32 %143 to float, !dbg !39
  %145 = fadd float %142, %144, !dbg !34
  %146 = and i32 %6, 1, !dbg !39
  %147 = icmp eq i32 %146, 0, !dbg !39
  %148 = and i1 %139, %147, !dbg !39
  %149 = bitcast float %145 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %149, i1 %148) #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %150 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !39
  %151 = fsub float %76, %96, !dbg !40
  %152 = fsub float %78, %98, !dbg !40
  %153 = fsub float %80, %100, !dbg !40
  %154 = fsub float %82, %102, !dbg !40
  %155 = tail call float @llvm.fabs.f32(float %151), !dbg !41
  %156 = tail call float @llvm.fabs.f32(float %152), !dbg !41
  %157 = tail call float @llvm.fabs.f32(float %153), !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %158 = fadd float %155, %156, !dbg !44
  %159 = fadd float %158, %157, !dbg !44
  %160 = bitcast float %159 to i32, !dbg !42
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 16, i32 31), !dbg !42
  %162 = bitcast i32 %161 to float, !dbg !42
  %163 = fadd float %159, %162, !dbg !44
  %164 = bitcast float %163 to i32, !dbg !42
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 8, i32 31), !dbg !42
  %166 = bitcast i32 %165 to float, !dbg !42
  %167 = fadd float %163, %166, !dbg !44
  %168 = bitcast float %167 to i32, !dbg !42
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 4, i32 31), !dbg !42
  %170 = bitcast i32 %169 to float, !dbg !42
  %171 = fadd float %167, %170, !dbg !44
  %172 = bitcast float %171 to i32, !dbg !42
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 2, i32 31), !dbg !42
  %174 = bitcast i32 %173 to float, !dbg !42
  %175 = fadd float %171, %174, !dbg !44
  %176 = bitcast float %175 to i32, !dbg !42
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 1, i32 31), !dbg !42
  %178 = bitcast i32 %177 to float, !dbg !42
  %179 = fadd float %175, %178, !dbg !44
  %180 = bitcast float %179 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %180, i1 %135) #3, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %181 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %140, i1 %139) #3, !dbg !42
  %182 = bitcast i32 %181 to float, !dbg !42
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 1, i32 31), !dbg !42
  %184 = bitcast i32 %183 to float, !dbg !42
  %185 = fadd float %182, %184, !dbg !44
  %186 = bitcast float %185 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %186, i1 %148) #3, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %187 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !42
  %188 = fadd float %150, %187, !dbg !45
  %189 = fmul float %188, 4.000000e+00, !dbg !46
  %190 = zext nneg i32 %14 to i64, !dbg !47
  %191 = getelementptr float, ptr addrspace(1) %2, i64 %190, !dbg !47
  %192 = bitcast float %103 to i32, !dbg !48
  %193 = bitcast float %104 to i32, !dbg !48
  %194 = bitcast float %105 to i32, !dbg !48
  %195 = bitcast float %106 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %192, i32 %193, i32 %194, i32 %195, ptr addrspace(1) %191, i1 %15) #3, !dbg !48
  %196 = getelementptr float, ptr addrspace(1) %3, i64 %190, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %197 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !50
  %198 = bitcast float %151 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 true) #3, !dbg !50
  %199 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !50
  %200 = bitcast float %152 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %200, i1 true) #3, !dbg !50
  %201 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !50
  %202 = bitcast float %153 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %202, i1 true) #3, !dbg !50
  %203 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !50
  %204 = bitcast float %154 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %204, i1 true) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %205 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !50
  %.extract = load i32, ptr addrspace(3) %205, align 16, !dbg !50
  %206 = getelementptr inbounds i8, ptr addrspace(3) %205, i32 4, !dbg !50
  %.extract4 = load i32, ptr addrspace(3) %206, align 4, !dbg !50
  %207 = getelementptr inbounds i8, ptr addrspace(3) %205, i32 8, !dbg !50
  %.extract5 = load i32, ptr addrspace(3) %207, align 8, !dbg !50
  %208 = getelementptr inbounds i8, ptr addrspace(3) %205, i32 12, !dbg !50
  %.extract6 = load i32, ptr addrspace(3) %208, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %196, i1 %15) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %209 = icmp eq i32 %9, 0, !dbg !52
  %210 = bitcast float %189 to i32, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %210, ptr addrspace(1) %0, i1 %209) #3, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3igja72rnmhryfsftiqx5b2w6qf5ucqfo32c42rm2f7gvacruey.py", directory: "inductor_cache/3i")
!4 = !{ptr @triton_per_fused_abs_add_mul_sub_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_add_mul_sub_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_add_mul_sub_sum_0", linkageName: "triton_per_fused_abs_add_mul_sub_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 28, column: 21, scope: !7)
!12 = !DILocation(line: 29, column: 19, scope: !7)
!13 = !DILocation(line: 30, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 19, scope: !7)
!16 = !DILocation(line: 34, column: 34, scope: !7)
!17 = !DILocation(line: 34, column: 42, scope: !7)
!18 = !DILocation(line: 34, column: 39, scope: !7)
!19 = !DILocation(line: 34, column: 30, scope: !7)
!20 = !DILocation(line: 34, column: 47, scope: !7)
!21 = !DILocation(line: 35, column: 35, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 35, column: 43, scope: !7)
!24 = !DILocation(line: 36, column: 34, scope: !7)
!25 = !DILocation(line: 36, column: 41, scope: !7)
!26 = !DILocation(line: 36, column: 39, scope: !7)
!27 = !DILocation(line: 36, column: 30, scope: !7)
!28 = !DILocation(line: 36, column: 46, scope: !7)
!29 = !DILocation(line: 37, column: 35, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 42, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 23, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !38)
!35 = distinct !DILexicalBlockFile(scope: !37, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!37 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!38 = !DILocation(line: 42, column: 24, scope: !7)
!39 = !DILocation(line: 267, column: 36, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 43, column: 19, scope: !7)
!41 = !DILocation(line: 44, column: 24, scope: !7)
!42 = !DILocation(line: 267, column: 36, scope: !37, inlinedAt: !43)
!43 = !DILocation(line: 47, column: 26, scope: !7)
!44 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !43)
!45 = !DILocation(line: 48, column: 19, scope: !7)
!46 = !DILocation(line: 50, column: 20, scope: !7)
!47 = !DILocation(line: 51, column: 25, scope: !7)
!48 = !DILocation(line: 51, column: 71, scope: !7)
!49 = !DILocation(line: 52, column: 25, scope: !7)
!50 = !DILocation(line: 52, column: 72, scope: !7)
!51 = !DILocation(line: 53, column: 4, scope: !7)
!52 = !DILocation(line: 54, column: 71, scope: !7)
!53 = !DILocation(line: 54, column: 4, scope: !7)
