; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_clone_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 256, !dbg !14
  %15 = srem i32 %13, 4, !dbg !15
  %16 = sdiv i32 %13, 64, !dbg !16
  %17 = sext i32 %13 to i64, !dbg !17
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !17
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %18, i1 %14) #1, !dbg !18
  %20 = extractvalue { i32, i32 } %19, 0, !dbg !18
  %21 = extractvalue { i32, i32 } %19, 1, !dbg !18
  %22 = bitcast i32 %20 to float, !dbg !18
  %23 = bitcast i32 %21 to float, !dbg !18
  %24 = sext i32 %15 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !20
  %27 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !21
  %28 = shufflevector <2 x i32> %27, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !21
  %29 = sdiv <2 x i32> %28, <i32 16, i32 4>, !dbg !21
  %30 = srem <2 x i32> %29, splat (i32 4), !dbg !22
  %31 = extractelement <2 x i32> %29, i64 1, !dbg !23
  %32 = sext i32 %31 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %14) #1, !dbg !24
  %35 = bitcast i32 %34 to float, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %14) #1, !dbg !24
  %37 = bitcast i32 %36 to float, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %14) #1, !dbg !26
  %40 = bitcast i32 %39 to float, !dbg !26
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %14) #1, !dbg !26
  %42 = bitcast i32 %41 to float, !dbg !26
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 %14) #1, !dbg !27
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !27
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !27
  %46 = bitcast i32 %44 to float, !dbg !27
  %47 = bitcast i32 %45 to float, !dbg !27
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %14) #1, !dbg !28
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !28
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !28
  %51 = bitcast i32 %49 to float, !dbg !28
  %52 = bitcast i32 %50 to float, !dbg !28
  %53 = fsub float %22, %35, !dbg !29
  %54 = fsub float %23, %37, !dbg !29
  %55 = fmul float %53, %40, !dbg !30
  %56 = fmul float %54, %42, !dbg !30
  %57 = fmul float %55, %46, !dbg !31
  %58 = fmul float %56, %47, !dbg !31
  %59 = fadd float %57, %51, !dbg !32
  %60 = fadd float %58, %52, !dbg !32
  %61 = shl nsw <2 x i32> %30, <i32 2, i32 4>, !dbg !33
  %62 = shl nsw i32 %16, 6, !dbg !34
  %63 = add i32 %62, %15, !dbg !35
  %64 = extractelement <2 x i32> %61, i64 0, !dbg !36
  %65 = add i32 %63, %64, !dbg !36
  %66 = extractelement <2 x i32> %61, i64 1, !dbg !37
  %67 = add i32 %65, %66, !dbg !37
  %68 = sext i32 %67 to i64, !dbg !38
  %69 = getelementptr float, ptr addrspace(1) %5, i64 %68, !dbg !38
  %70 = bitcast float %59 to i32, !dbg !39
  %71 = bitcast float %60 to i32, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %70, i32 %71, ptr addrspace(1) %69, i1 %14) #1, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqp7qm26vtgmt6bjskrmi5hqkqvuzjklcbol7o44abekq7nowwt5.py", directory: "inductor_cache/qp")
!4 = !{ptr @triton_poi_fused_clone_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_9", linkageName: "triton_poi_fused_clone_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 29, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 30, scope: !7)
!18 = !DILocation(line: 30, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 21, scope: !7)
!22 = !DILocation(line: 28, column: 27, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 18, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 32, scope: !7)
!34 = !DILocation(line: 39, column: 48, scope: !7)
!35 = !DILocation(line: 39, column: 30, scope: !7)
!36 = !DILocation(line: 39, column: 37, scope: !7)
!37 = !DILocation(line: 39, column: 45, scope: !7)
!38 = !DILocation(line: 39, column: 25, scope: !7)
!39 = !DILocation(line: 39, column: 59, scope: !7)
!40 = !DILocation(line: 39, column: 4, scope: !7)
