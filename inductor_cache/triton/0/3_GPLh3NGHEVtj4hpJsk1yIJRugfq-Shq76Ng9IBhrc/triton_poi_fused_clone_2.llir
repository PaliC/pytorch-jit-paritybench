; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_clone_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 62, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 64, !dbg !14
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %15 = shl i32 %14, 2, !dbg !16
  %16 = lshr i32 %9, 5, !dbg !17
  %17 = and i32 %16, 3, !dbg !17
  %18 = or disjoint i32 %15, %17, !dbg !18
  %19 = icmp slt i32 %18, 4, !dbg !19
  %.frozen = freeze i32 %12, !dbg !20
  %20 = sdiv i32 %.frozen, 16, !dbg !20
  %21 = mul i32 %20, 16, !dbg !21
  %.decomposed = sub i32 %.frozen, %21, !dbg !21
  %22 = sext i32 %18 to i64, !dbg !22
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !22
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %19) #4, !dbg !23
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %19) #4, !dbg !23
  %26 = shl i32 %18, 4, !dbg !24
  %27 = shl i32 %20, 6, !dbg !25
  %28 = add i32 %27, %.decomposed, !dbg !26
  %29 = add i32 %28, %26, !dbg !27
  %30 = sext i32 %29 to i64, !dbg !28
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !28
  %32 = and i1 %13, %19, !dbg !29
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 %32) #4, !dbg !30
  %34 = sext i32 %28 to i64, !dbg !31
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !31
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %13) #4, !dbg !32
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !32
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !32
  %39 = bitcast i32 %37 to float, !dbg !32
  %40 = bitcast i32 %38 to float, !dbg !32
  %41 = add i32 %28, 16, !dbg !33
  %42 = sext i32 %41 to i64, !dbg !34
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !34
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %13) #4, !dbg !35
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !35
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !35
  %47 = bitcast i32 %45 to float, !dbg !35
  %48 = bitcast i32 %46 to float, !dbg !35
  %49 = add i32 %28, 32, !dbg !36
  %50 = sext i32 %49 to i64, !dbg !37
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !37
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 %13) #4, !dbg !38
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !38
  %54 = extractvalue { i32, i32 } %52, 1, !dbg !38
  %55 = bitcast i32 %53 to float, !dbg !38
  %56 = bitcast i32 %54 to float, !dbg !38
  %57 = add i32 %28, 48, !dbg !39
  %58 = sext i32 %57 to i64, !dbg !40
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !40
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %59, i1 %13) #4, !dbg !41
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !41
  %62 = extractvalue { i32, i32 } %60, 1, !dbg !41
  %63 = bitcast i32 %61 to float, !dbg !41
  %64 = bitcast i32 %62 to float, !dbg !41
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !42
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %19) #4, !dbg !43
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %19) #4, !dbg !43
  %68 = fmul float %39, %39, !dbg !44
  %69 = fmul float %40, %40, !dbg !44
  %70 = fmul float %47, %47, !dbg !45
  %71 = fmul float %48, %48, !dbg !45
  %72 = fadd float %68, %70, !dbg !46
  %73 = fadd float %69, %71, !dbg !46
  %74 = fmul float %55, %55, !dbg !47
  %75 = fmul float %56, %56, !dbg !47
  %76 = fadd float %72, %74, !dbg !48
  %77 = fadd float %73, %75, !dbg !48
  %78 = fmul float %63, %63, !dbg !49
  %79 = fmul float %64, %64, !dbg !49
  %80 = fadd float %76, %78, !dbg !50
  %81 = fadd float %77, %79, !dbg !50
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float 4.000000e+00) #4, !dbg !51
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %81, float 4.000000e+00) #4, !dbg !51
  %84 = fadd float %82, 0x3EB0C6F7A0000000, !dbg !52
  %85 = fadd float %83, 0x3EB0C6F7A0000000, !dbg !52
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !53
  %.not.i = icmp eq i32 %86, 0, !dbg !53
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !53
  %.not1.i = icmp eq i32 %87, 0, !dbg !53
  br i1 %.not.i, label %93, label %88, !dbg !53

88:                                               ; preds = %6
  br i1 %.not1.i, label %91, label %89, !dbg !53

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #4, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #4, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

93:                                               ; preds = %6
  br i1 %.not1.i, label %96, label %94, !dbg !53

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #4, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #4, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

__nv_sqrtf.exit:                                  ; preds = %89, %91, %94, %96
  %.0.i = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !53
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !53
  %.not.i3 = icmp eq i32 %98, 0, !dbg !53
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !53
  %.not1.i6 = icmp eq i32 %99, 0, !dbg !53
  br i1 %.not.i3, label %105, label %100, !dbg !53

100:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %103, label %101, !dbg !53

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #4, !dbg !53
  br label %__nv_sqrtf.exit7, !dbg !53

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #4, !dbg !53
  br label %__nv_sqrtf.exit7, !dbg !53

105:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %108, label %106, !dbg !53

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #4, !dbg !53
  br label %__nv_sqrtf.exit7, !dbg !53

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #4, !dbg !53
  br label %__nv_sqrtf.exit7, !dbg !53

__nv_sqrtf.exit7:                                 ; preds = %101, %103, %106, %108
  %.0.i5 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !53
  %110 = bitcast i32 %67 to float, !dbg !43
  %111 = extractvalue { i32, i32 } %33, 1, !dbg !30
  %112 = bitcast i32 %111 to float, !dbg !30
  %113 = extractvalue { i32, i32 } %33, 0, !dbg !30
  %114 = bitcast i32 %113 to float, !dbg !30
  %115 = and i32 %10, 2, !dbg !12
  %116 = or disjoint i32 %15, %115, !dbg !18
  %117 = icmp slt i32 %116, 4, !dbg !19
  %118 = lshr i32 %9, 1, !dbg !12
  %119 = and i32 %118, 63, !dbg !12
  %120 = or disjoint i32 %8, %119, !dbg !13
  %121 = icmp slt i32 %120, 64, !dbg !14
  %122 = and i1 %121, %117, !dbg !29
  %123 = bitcast i32 %25 to float, !dbg !23
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %114, float %.0.i) #4, !dbg !54
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float %.0.i5) #4, !dbg !54
  %126 = fmul float %124, %123, !dbg !55
  %127 = fmul float %125, %123, !dbg !55
  %128 = fadd float %126, %110, !dbg !56
  %129 = fadd float %127, %110, !dbg !56
  %130 = shl i32 %120, 2, !dbg !57
  %131 = add i32 %116, %130, !dbg !58
  %132 = sext i32 %131 to i64, !dbg !59
  %133 = getelementptr float, ptr addrspace(1) %3, i64 %132, !dbg !59
  %134 = shl i32 %9, 3, !dbg !60
  %135 = and i32 %134, 248, !dbg !60
  %136 = or disjoint i32 %135, %17, !dbg !60
  %137 = and i32 %10, 254, !dbg !60
  %138 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %135, !dbg !60
  %139 = getelementptr inbounds float, ptr addrspace(3) %138, i32 %136, !dbg !60
  %140 = bitcast float %128 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #4, !dbg !60
  %141 = or disjoint i32 %136, 4, !dbg !60
  %142 = lshr i32 %141, 2, !dbg !60
  %143 = getelementptr float, ptr addrspace(3) @global_smem, i32 %142, !dbg !60
  %144 = getelementptr float, ptr addrspace(3) %143, i32 %141, !dbg !60
  %145 = bitcast float %129 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #4, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %146 = lshr i32 %137, 2, !dbg !60
  %147 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %146, !dbg !60
  %148 = getelementptr inbounds float, ptr addrspace(3) %147, i32 %137, !dbg !60
  %149 = load i32, ptr addrspace(3) %148, align 4, !dbg !60
  %150 = or disjoint i32 %137, 1, !dbg !60
  %151 = getelementptr inbounds float, ptr addrspace(3) %147, i32 %150, !dbg !60
  %152 = load i32, ptr addrspace(3) %151, align 4, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %149, i32 %152, ptr addrspace(1) %133, i1 %122) #4, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs6immknniutr3rvplcyinx4i7ba34n3ba5l4pembyglc6zfe7nj.py", directory: "inductor_cache/s6")
!4 = !{ptr @triton_poi_fused_clone_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_2", linkageName: "triton_poi_fused_clone_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 33, column: 38, scope: !7)
!25 = !DILocation(line: 33, column: 46, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 43, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 59, scope: !7)
!30 = !DILocation(line: 33, column: 51, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 43, scope: !7)
!33 = !DILocation(line: 35, column: 40, scope: !7)
!34 = !DILocation(line: 35, column: 30, scope: !7)
!35 = !DILocation(line: 35, column: 48, scope: !7)
!36 = !DILocation(line: 36, column: 40, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 48, scope: !7)
!39 = !DILocation(line: 37, column: 41, scope: !7)
!40 = !DILocation(line: 37, column: 31, scope: !7)
!41 = !DILocation(line: 37, column: 49, scope: !7)
!42 = !DILocation(line: 38, column: 31, scope: !7)
!43 = !DILocation(line: 38, column: 36, scope: !7)
!44 = !DILocation(line: 39, column: 18, scope: !7)
!45 = !DILocation(line: 40, column: 18, scope: !7)
!46 = !DILocation(line: 41, column: 18, scope: !7)
!47 = !DILocation(line: 42, column: 18, scope: !7)
!48 = !DILocation(line: 43, column: 18, scope: !7)
!49 = !DILocation(line: 44, column: 20, scope: !7)
!50 = !DILocation(line: 45, column: 19, scope: !7)
!51 = !DILocation(line: 47, column: 20, scope: !7)
!52 = !DILocation(line: 49, column: 20, scope: !7)
!53 = !DILocation(line: 50, column: 27, scope: !7)
!54 = !DILocation(line: 51, column: 19, scope: !7)
!55 = !DILocation(line: 52, column: 19, scope: !7)
!56 = !DILocation(line: 53, column: 20, scope: !7)
!57 = !DILocation(line: 54, column: 32, scope: !7)
!58 = !DILocation(line: 54, column: 30, scope: !7)
!59 = !DILocation(line: 54, column: 25, scope: !7)
!60 = !DILocation(line: 54, column: 44, scope: !7)
!61 = !DILocation(line: 54, column: 4, scope: !7)
