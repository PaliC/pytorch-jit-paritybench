; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 252, !dbg !12
  %14 = and i32 %11, 255, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = icmp slt i32 %15, 512, !dbg !14
  %18 = icmp slt i32 %16, 512, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %20 = shl i32 %19, 4, !dbg !16
  %.lobit4 = lshr i32 %11, 6, !dbg !17
  %21 = and i32 %.lobit4, 3, !dbg !17
  %22 = or disjoint i32 %20, %21, !dbg !18
  %23 = or disjoint i32 %22, 4, !dbg !18
  %24 = or disjoint i32 %22, 8, !dbg !18
  %25 = or disjoint i32 %22, 12, !dbg !18
  %26 = icmp slt i32 %22, 30, !dbg !19
  %27 = icmp slt i32 %23, 30, !dbg !19
  %28 = icmp slt i32 %24, 30, !dbg !19
  %29 = icmp slt i32 %25, 30, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %30 = sdiv i32 %.frozen, 128, !dbg !20
  %31 = mul i32 %30, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %31, !dbg !21
  %32 = srem i32 %16, 128, !dbg !21
  %33 = shl i32 %22, 7, !dbg !22
  %34 = shl i32 %23, 7, !dbg !22
  %35 = shl i32 %24, 7, !dbg !22
  %36 = shl i32 %25, 7, !dbg !22
  %37 = mul i32 %30, 3840, !dbg !23
  %38 = add i32 %37, %.decomposed, !dbg !24
  %39 = add i32 %38, %33, !dbg !25
  %40 = add i32 %38, %34, !dbg !25
  %41 = add i32 %38, %35, !dbg !25
  %42 = add i32 %38, %36, !dbg !25
  %43 = sext i32 %39 to i64, !dbg !26
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !26
  %45 = sext i32 %40 to i64, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !26
  %47 = sext i32 %41 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !26
  %49 = sext i32 %42 to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !26
  %51 = and i1 %17, %26, !dbg !27
  %52 = and i1 %27, %17, !dbg !27
  %53 = and i1 %28, %17, !dbg !27
  %54 = and i1 %29, %17, !dbg !27
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %51) #4, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !28
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %52) #4, !dbg !28
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !28
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !28
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %53) #4, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !28
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !28
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !28
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !28
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %54) #4, !dbg !28
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !28
  %75 = and i32 %12, 1020, !dbg !28
  %76 = lshr i32 %12, 6, !dbg !28
  %77 = and i32 %76, 12, !dbg !28
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %77, !dbg !28
  %79 = getelementptr inbounds float, ptr addrspace(3) %78, i32 %75, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %79, i32 %56, i32 %57, i32 %58, i32 %59, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %80 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !28
  %81 = load float, ptr addrspace(3) %80, align 4, !dbg !28
  %82 = getelementptr inbounds i8, ptr addrspace(3) %80, i32 1040, !dbg !28
  %83 = load float, ptr addrspace(3) %82, align 4, !dbg !28
  %84 = getelementptr inbounds i8, ptr addrspace(3) %80, i32 2080, !dbg !28
  %85 = load float, ptr addrspace(3) %84, align 4, !dbg !28
  %86 = getelementptr inbounds i8, ptr addrspace(3) %80, i32 3120, !dbg !28
  %87 = load float, ptr addrspace(3) %86, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %79, i32 %61, i32 %62, i32 %63, i32 %64, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %88 = load float, ptr addrspace(3) %80, align 4, !dbg !28
  %89 = load float, ptr addrspace(3) %82, align 4, !dbg !28
  %90 = load float, ptr addrspace(3) %84, align 4, !dbg !28
  %91 = load float, ptr addrspace(3) %86, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %79, i32 %66, i32 %67, i32 %68, i32 %69, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %92 = load float, ptr addrspace(3) %80, align 4, !dbg !28
  %93 = load float, ptr addrspace(3) %82, align 4, !dbg !28
  %94 = load float, ptr addrspace(3) %84, align 4, !dbg !28
  %95 = load float, ptr addrspace(3) %86, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %79, i32 %71, i32 %72, i32 %73, i32 %74, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %96 = load float, ptr addrspace(3) %80, align 4, !dbg !28
  %97 = load float, ptr addrspace(3) %82, align 4, !dbg !28
  %98 = load float, ptr addrspace(3) %84, align 4, !dbg !28
  %99 = load float, ptr addrspace(3) %86, align 4, !dbg !28
  %100 = sext i32 %32 to i64, !dbg !29
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !29
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %18) #4, !dbg !30
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !31
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %18) #4, !dbg !32
  %105 = bitcast i32 %104 to float, !dbg !32
  %106 = getelementptr float, ptr addrspace(1) %3, i64 %100, !dbg !33
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %18) #4, !dbg !34
  %108 = getelementptr float, ptr addrspace(1) %4, i64 %100, !dbg !35
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %18) #4, !dbg !36
  %110 = fadd float %105, 0x3EE4F8B580000000, !dbg !37
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %111, 0, !dbg !38
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %112, 0, !dbg !38
  br i1 %.not.i, label %118, label %113, !dbg !38

113:                                              ; preds = %8
  br i1 %.not1.i, label %116, label %114, !dbg !38

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %110) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %110) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

118:                                              ; preds = %8
  br i1 %.not1.i, label %121, label %119, !dbg !38

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %110) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %110) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %114, %116, %119, %121
  %.0.i = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !38
  %123 = bitcast i32 %102 to float, !dbg !30
  %124 = fsub float %99, %123, !dbg !39
  %125 = fsub float %98, %123, !dbg !39
  %126 = fsub float %97, %123, !dbg !39
  %127 = fsub float %96, %123, !dbg !39
  %128 = fsub float %95, %123, !dbg !39
  %129 = fsub float %94, %123, !dbg !39
  %130 = fsub float %93, %123, !dbg !39
  %131 = fsub float %92, %123, !dbg !39
  %132 = fsub float %91, %123, !dbg !39
  %133 = fsub float %90, %123, !dbg !39
  %134 = fsub float %89, %123, !dbg !39
  %135 = fsub float %88, %123, !dbg !39
  %136 = fsub float %87, %123, !dbg !39
  %137 = fsub float %85, %123, !dbg !39
  %138 = fsub float %83, %123, !dbg !39
  %139 = fsub float %81, %123, !dbg !39
  %140 = bitcast i32 %109 to float, !dbg !36
  %141 = bitcast i32 %107 to float, !dbg !34
  %142 = shl i32 %11, 1, !dbg !17
  %143 = and i32 %142, 14, !dbg !17
  %144 = or disjoint i32 %20, %143, !dbg !18
  %145 = icmp slt i32 %144, 30, !dbg !19
  %146 = lshr i32 %11, 3, !dbg !12
  %147 = and i32 %146, 31, !dbg !12
  %148 = or disjoint i32 %147, %10, !dbg !13
  %149 = or disjoint i32 %148, 224, !dbg !13
  %150 = icmp slt i32 %149, 512, !dbg !14
  %151 = and i1 %150, %145, !dbg !27
  %152 = or disjoint i32 %148, 192, !dbg !13
  %153 = icmp slt i32 %152, 512, !dbg !14
  %154 = and i1 %153, %145, !dbg !27
  %155 = or disjoint i32 %148, 160, !dbg !13
  %156 = icmp slt i32 %155, 512, !dbg !14
  %157 = and i1 %156, %145, !dbg !27
  %158 = or disjoint i32 %148, 128, !dbg !13
  %159 = icmp slt i32 %158, 512, !dbg !14
  %160 = and i1 %159, %145, !dbg !27
  %161 = or disjoint i32 %148, 96, !dbg !13
  %162 = icmp slt i32 %161, 512, !dbg !14
  %163 = and i1 %162, %145, !dbg !27
  %164 = or disjoint i32 %148, 64, !dbg !13
  %165 = icmp slt i32 %164, 512, !dbg !14
  %166 = and i1 %165, %145, !dbg !27
  %167 = or disjoint i32 %148, 32, !dbg !13
  %168 = icmp slt i32 %167, 512, !dbg !14
  %169 = and i1 %168, %145, !dbg !27
  %170 = icmp slt i32 %148, 512, !dbg !14
  %171 = and i1 %170, %145, !dbg !27
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !40
  %173 = fmul float %139, %172, !dbg !41
  %174 = fmul float %138, %172, !dbg !41
  %175 = fmul float %137, %172, !dbg !41
  %176 = fmul float %136, %172, !dbg !41
  %177 = fmul float %135, %172, !dbg !41
  %178 = fmul float %134, %172, !dbg !41
  %179 = fmul float %133, %172, !dbg !41
  %180 = fmul float %132, %172, !dbg !41
  %181 = fmul float %131, %172, !dbg !41
  %182 = fmul float %130, %172, !dbg !41
  %183 = fmul float %129, %172, !dbg !41
  %184 = fmul float %128, %172, !dbg !41
  %185 = fmul float %127, %172, !dbg !41
  %186 = fmul float %126, %172, !dbg !41
  %187 = fmul float %125, %172, !dbg !41
  %188 = fmul float %124, %172, !dbg !41
  %189 = fmul float %173, %141, !dbg !42
  %190 = fmul float %174, %141, !dbg !42
  %191 = fmul float %175, %141, !dbg !42
  %192 = fmul float %176, %141, !dbg !42
  %193 = fmul float %177, %141, !dbg !42
  %194 = fmul float %178, %141, !dbg !42
  %195 = fmul float %179, %141, !dbg !42
  %196 = fmul float %180, %141, !dbg !42
  %197 = fmul float %181, %141, !dbg !42
  %198 = fmul float %182, %141, !dbg !42
  %199 = fmul float %183, %141, !dbg !42
  %200 = fmul float %184, %141, !dbg !42
  %201 = fmul float %185, %141, !dbg !42
  %202 = fmul float %186, %141, !dbg !42
  %203 = fmul float %187, %141, !dbg !42
  %204 = fmul float %188, %141, !dbg !42
  %205 = fadd float %189, %140, !dbg !43
  %206 = fadd float %190, %140, !dbg !43
  %207 = fadd float %191, %140, !dbg !43
  %208 = fadd float %192, %140, !dbg !43
  %209 = fadd float %193, %140, !dbg !43
  %210 = fadd float %194, %140, !dbg !43
  %211 = fadd float %195, %140, !dbg !43
  %212 = fadd float %196, %140, !dbg !43
  %213 = fadd float %197, %140, !dbg !43
  %214 = fadd float %198, %140, !dbg !43
  %215 = fadd float %199, %140, !dbg !43
  %216 = fadd float %200, %140, !dbg !43
  %217 = fadd float %201, %140, !dbg !43
  %218 = fadd float %202, %140, !dbg !43
  %219 = fadd float %203, %140, !dbg !43
  %220 = fadd float %204, %140, !dbg !43
  %221 = mul i32 %148, 30, !dbg !44
  %222 = mul i32 %167, 30, !dbg !44
  %223 = mul i32 %164, 30, !dbg !44
  %224 = mul i32 %161, 30, !dbg !44
  %225 = mul i32 %158, 30, !dbg !44
  %226 = mul i32 %155, 30, !dbg !44
  %227 = mul i32 %152, 30, !dbg !44
  %228 = mul i32 %149, 30, !dbg !44
  %229 = add i32 %144, %221, !dbg !45
  %230 = add i32 %144, %222, !dbg !45
  %231 = add i32 %144, %223, !dbg !45
  %232 = add i32 %144, %224, !dbg !45
  %233 = add i32 %144, %225, !dbg !45
  %234 = add i32 %144, %226, !dbg !45
  %235 = add i32 %144, %227, !dbg !45
  %236 = add i32 %144, %228, !dbg !45
  %237 = sext i32 %229 to i64, !dbg !46
  %238 = getelementptr float, ptr addrspace(1) %5, i64 %237, !dbg !46
  %239 = sext i32 %230 to i64, !dbg !46
  %240 = getelementptr float, ptr addrspace(1) %5, i64 %239, !dbg !46
  %241 = sext i32 %231 to i64, !dbg !46
  %242 = getelementptr float, ptr addrspace(1) %5, i64 %241, !dbg !46
  %243 = sext i32 %232 to i64, !dbg !46
  %244 = getelementptr float, ptr addrspace(1) %5, i64 %243, !dbg !46
  %245 = sext i32 %233 to i64, !dbg !46
  %246 = getelementptr float, ptr addrspace(1) %5, i64 %245, !dbg !46
  %247 = sext i32 %234 to i64, !dbg !46
  %248 = getelementptr float, ptr addrspace(1) %5, i64 %247, !dbg !46
  %249 = sext i32 %235 to i64, !dbg !46
  %250 = getelementptr float, ptr addrspace(1) %5, i64 %249, !dbg !46
  %251 = sext i32 %236 to i64, !dbg !46
  %252 = getelementptr float, ptr addrspace(1) %5, i64 %251, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %253 = shl i32 %11, 4, !dbg !47
  %254 = and i32 %253, 4080, !dbg !47
  %255 = and i32 %142, 510, !dbg !47
  %256 = lshr exact i32 %254, 2, !dbg !47
  %257 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %256, !dbg !47
  %258 = getelementptr float, ptr addrspace(3) %257, i32 %254, !dbg !47
  %259 = bitcast float %205 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %259, i1 true) #4, !dbg !47
  %260 = or disjoint i32 %254, 1, !dbg !47
  %261 = getelementptr float, ptr addrspace(3) %257, i32 %260, !dbg !47
  %262 = bitcast float %206 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %262, i1 true) #4, !dbg !47
  %263 = or disjoint i32 %254, 2, !dbg !47
  %264 = getelementptr float, ptr addrspace(3) %257, i32 %263, !dbg !47
  %265 = bitcast float %207 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %265, i1 true) #4, !dbg !47
  %266 = or disjoint i32 %254, 3, !dbg !47
  %267 = getelementptr float, ptr addrspace(3) %257, i32 %266, !dbg !47
  %268 = bitcast float %208 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %268, i1 true) #4, !dbg !47
  %269 = or disjoint i32 %254, 4, !dbg !47
  %270 = getelementptr float, ptr addrspace(3) %257, i32 %269, !dbg !47
  %271 = bitcast float %209 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %271, i1 true) #4, !dbg !47
  %272 = or disjoint i32 %254, 5, !dbg !47
  %273 = getelementptr float, ptr addrspace(3) %257, i32 %272, !dbg !47
  %274 = bitcast float %210 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #4, !dbg !47
  %275 = or disjoint i32 %254, 6, !dbg !47
  %276 = getelementptr float, ptr addrspace(3) %257, i32 %275, !dbg !47
  %277 = bitcast float %211 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %277, i1 true) #4, !dbg !47
  %278 = or disjoint i32 %254, 7, !dbg !47
  %279 = getelementptr float, ptr addrspace(3) %257, i32 %278, !dbg !47
  %280 = bitcast float %212 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %280, i1 true) #4, !dbg !47
  %281 = or disjoint i32 %254, 8, !dbg !47
  %282 = getelementptr float, ptr addrspace(3) %257, i32 %281, !dbg !47
  %283 = bitcast float %213 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %283, i1 true) #4, !dbg !47
  %284 = or disjoint i32 %254, 9, !dbg !47
  %285 = getelementptr float, ptr addrspace(3) %257, i32 %284, !dbg !47
  %286 = bitcast float %214 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %286, i1 true) #4, !dbg !47
  %287 = or disjoint i32 %254, 10, !dbg !47
  %288 = getelementptr float, ptr addrspace(3) %257, i32 %287, !dbg !47
  %289 = bitcast float %215 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %288, <1 x i32> %289, i1 true) #4, !dbg !47
  %290 = or disjoint i32 %254, 11, !dbg !47
  %291 = getelementptr float, ptr addrspace(3) %257, i32 %290, !dbg !47
  %292 = bitcast float %216 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, <1 x i32> %292, i1 true) #4, !dbg !47
  %293 = or disjoint i32 %254, 12, !dbg !47
  %294 = getelementptr float, ptr addrspace(3) %257, i32 %293, !dbg !47
  %295 = bitcast float %217 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %295, i1 true) #4, !dbg !47
  %296 = or disjoint i32 %254, 13, !dbg !47
  %297 = getelementptr float, ptr addrspace(3) %257, i32 %296, !dbg !47
  %298 = bitcast float %218 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %298, i1 true) #4, !dbg !47
  %299 = or disjoint i32 %254, 14, !dbg !47
  %300 = getelementptr float, ptr addrspace(3) %257, i32 %299, !dbg !47
  %301 = bitcast float %219 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %301, i1 true) #4, !dbg !47
  %302 = or disjoint i32 %254, 15, !dbg !47
  %303 = getelementptr float, ptr addrspace(3) %257, i32 %302, !dbg !47
  %304 = bitcast float %220 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %304, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %305 = lshr i32 %255, 4, !dbg !47
  %306 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %305, !dbg !47
  %307 = getelementptr inbounds float, ptr addrspace(3) %306, i32 %255, !dbg !47
  %308 = load i32, ptr addrspace(3) %307, align 4, !dbg !47
  %309 = or disjoint i32 %255, 1, !dbg !47
  %310 = getelementptr inbounds float, ptr addrspace(3) %306, i32 %309, !dbg !47
  %311 = load i32, ptr addrspace(3) %310, align 4, !dbg !47
  %312 = or disjoint i32 %255, 512, !dbg !47
  %313 = lshr i32 %312, 4, !dbg !47
  %314 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %313, !dbg !47
  %315 = getelementptr inbounds float, ptr addrspace(3) %314, i32 %312, !dbg !47
  %316 = load i32, ptr addrspace(3) %315, align 4, !dbg !47
  %317 = or disjoint i32 %255, 513, !dbg !47
  %318 = lshr i32 %317, 4, !dbg !47
  %319 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %318, !dbg !47
  %320 = getelementptr inbounds float, ptr addrspace(3) %319, i32 %317, !dbg !47
  %321 = load i32, ptr addrspace(3) %320, align 4, !dbg !47
  %322 = or disjoint i32 %255, 1024, !dbg !47
  %323 = lshr i32 %322, 4, !dbg !47
  %324 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %323, !dbg !47
  %325 = getelementptr inbounds float, ptr addrspace(3) %324, i32 %322, !dbg !47
  %326 = load i32, ptr addrspace(3) %325, align 4, !dbg !47
  %327 = or disjoint i32 %255, 1025, !dbg !47
  %328 = lshr i32 %327, 4, !dbg !47
  %329 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %328, !dbg !47
  %330 = getelementptr inbounds float, ptr addrspace(3) %329, i32 %327, !dbg !47
  %331 = load i32, ptr addrspace(3) %330, align 4, !dbg !47
  %332 = or disjoint i32 %255, 1536, !dbg !47
  %333 = lshr i32 %332, 4, !dbg !47
  %334 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %333, !dbg !47
  %335 = getelementptr inbounds float, ptr addrspace(3) %334, i32 %332, !dbg !47
  %336 = load i32, ptr addrspace(3) %335, align 4, !dbg !47
  %337 = or disjoint i32 %255, 1537, !dbg !47
  %338 = lshr i32 %337, 4, !dbg !47
  %339 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %338, !dbg !47
  %340 = getelementptr inbounds float, ptr addrspace(3) %339, i32 %337, !dbg !47
  %341 = load i32, ptr addrspace(3) %340, align 4, !dbg !47
  %342 = or disjoint i32 %255, 2048, !dbg !47
  %343 = lshr i32 %342, 4, !dbg !47
  %344 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %343, !dbg !47
  %345 = getelementptr inbounds float, ptr addrspace(3) %344, i32 %342, !dbg !47
  %346 = load i32, ptr addrspace(3) %345, align 4, !dbg !47
  %347 = or disjoint i32 %255, 2049, !dbg !47
  %348 = lshr i32 %347, 4, !dbg !47
  %349 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %348, !dbg !47
  %350 = getelementptr inbounds float, ptr addrspace(3) %349, i32 %347, !dbg !47
  %351 = load i32, ptr addrspace(3) %350, align 4, !dbg !47
  %352 = or disjoint i32 %255, 2560, !dbg !47
  %353 = lshr i32 %352, 4, !dbg !47
  %354 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %353, !dbg !47
  %355 = getelementptr inbounds float, ptr addrspace(3) %354, i32 %352, !dbg !47
  %356 = load i32, ptr addrspace(3) %355, align 4, !dbg !47
  %357 = or disjoint i32 %255, 2561, !dbg !47
  %358 = lshr i32 %357, 4, !dbg !47
  %359 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %358, !dbg !47
  %360 = getelementptr inbounds float, ptr addrspace(3) %359, i32 %357, !dbg !47
  %361 = load i32, ptr addrspace(3) %360, align 4, !dbg !47
  %362 = or disjoint i32 %255, 3072, !dbg !47
  %363 = lshr i32 %362, 4, !dbg !47
  %364 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %363, !dbg !47
  %365 = getelementptr inbounds float, ptr addrspace(3) %364, i32 %362, !dbg !47
  %366 = load i32, ptr addrspace(3) %365, align 4, !dbg !47
  %367 = or disjoint i32 %255, 3073, !dbg !47
  %368 = lshr i32 %367, 4, !dbg !47
  %369 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %368, !dbg !47
  %370 = getelementptr inbounds float, ptr addrspace(3) %369, i32 %367, !dbg !47
  %371 = load i32, ptr addrspace(3) %370, align 4, !dbg !47
  %372 = or disjoint i32 %255, 3584, !dbg !47
  %373 = lshr i32 %372, 4, !dbg !47
  %374 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %373, !dbg !47
  %375 = getelementptr inbounds float, ptr addrspace(3) %374, i32 %372, !dbg !47
  %376 = load i32, ptr addrspace(3) %375, align 4, !dbg !47
  %377 = or disjoint i32 %255, 3585, !dbg !47
  %378 = lshr i32 %377, 4, !dbg !47
  %379 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %378, !dbg !47
  %380 = getelementptr inbounds float, ptr addrspace(3) %379, i32 %377, !dbg !47
  %381 = load i32, ptr addrspace(3) %380, align 4, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %308, i32 %311, ptr addrspace(1) %238, i1 %171) #4, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %316, i32 %321, ptr addrspace(1) %240, i1 %169) #4, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %326, i32 %331, ptr addrspace(1) %242, i1 %166) #4, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %336, i32 %341, ptr addrspace(1) %244, i1 %163) #4, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %346, i32 %351, ptr addrspace(1) %246, i1 %160) #4, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %356, i32 %361, ptr addrspace(1) %248, i1 %157) #4, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %366, i32 %371, ptr addrspace(1) %250, i1 %154) #4, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %376, i32 %381, ptr addrspace(1) %252, i1 %151) #4, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbpr5xosznznfm5meozkmfr64fw4anl7wajv6w2knwjpzrhqbttb.py", directory: "inductor_cache/bp")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_36, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_36, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_36", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 48, column: 33, scope: !7)
!45 = !DILocation(line: 48, column: 30, scope: !7)
!46 = !DILocation(line: 48, column: 25, scope: !7)
!47 = !DILocation(line: 48, column: 45, scope: !7)
!48 = !DILocation(line: 48, column: 4, scope: !7)
