; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = shl i32 %9, 1, !dbg !12
  %12 = and i32 %11, 6, !dbg !12
  %13 = and i32 %9, 7, !dbg !12
  %14 = or disjoint i32 %8, %12, !dbg !13
  %15 = icmp slt i32 %14, 1024, !dbg !14
  %16 = lshr i32 %9, 5, !dbg !15
  %17 = shl i32 %9, 6, !dbg !16
  %18 = and i32 %17, 3840, !dbg !16
  %.frozen = freeze i32 %14, !dbg !17
  %19 = sdiv i32 %.frozen, 256, !dbg !17
  %20 = shl i32 %19, 12, !dbg !18
  %21 = mul i32 %19, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %21, !dbg !19
  %22 = add nsw i32 %.decomposed, %18, !dbg !20
  %23 = add i32 %22, %20, !dbg !21
  %24 = sext i32 %23 to i64, !dbg !22
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !22
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %25, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !23
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !23
  %28 = extractvalue { i32, i32 } %26, 1, !dbg !23
  %29 = bitcast i32 %27 to float, !dbg !23
  %30 = bitcast i32 %28 to float, !dbg !23
  %31 = select i1 %15, float %29, float 0.000000e+00, !dbg !24
  %32 = select i1 %15, float %30, float 0.000000e+00, !dbg !24
  %33 = bitcast float %31 to i32, !dbg !25
  %34 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %33, i32 16, i32 31), !dbg !25
  %35 = bitcast i32 %34 to float, !dbg !25
  %36 = fadd float %31, %35, !dbg !29
  %37 = bitcast float %36 to i32, !dbg !25
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 8, i32 31), !dbg !25
  %39 = bitcast i32 %38 to float, !dbg !25
  %40 = fadd float %36, %39, !dbg !29
  %41 = bitcast float %40 to i32, !dbg !25
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 4, i32 31), !dbg !25
  %43 = bitcast i32 %42 to float, !dbg !25
  %44 = fadd float %40, %43, !dbg !29
  %45 = bitcast float %32 to i32, !dbg !25
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 16, i32 31), !dbg !25
  %47 = bitcast i32 %46 to float, !dbg !25
  %48 = fadd float %32, %47, !dbg !29
  %49 = bitcast float %48 to i32, !dbg !25
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 8, i32 31), !dbg !25
  %51 = bitcast i32 %50 to float, !dbg !25
  %52 = fadd float %48, %51, !dbg !29
  %53 = bitcast float %52 to i32, !dbg !25
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 4, i32 31), !dbg !25
  %55 = bitcast i32 %54 to float, !dbg !25
  %56 = fadd float %52, %55, !dbg !29
  %57 = icmp samesign ult i32 %10, 4, !dbg !25
  %58 = and i32 %16, 1, !dbg !25
  %59 = shl nuw nsw i32 %12, 1, !dbg !25
  %60 = or disjoint i32 %59, %58, !dbg !25
  %61 = getelementptr float, ptr addrspace(3) @global_smem, i32 %60, !dbg !25
  %62 = bitcast float %44 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %62, i1 %57) #5, !dbg !25
  %63 = or disjoint i32 %59, 2, !dbg !25
  %64 = or disjoint i32 %63, %58, !dbg !25
  %65 = getelementptr float, ptr addrspace(3) @global_smem, i32 %64, !dbg !25
  %66 = bitcast float %56 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 %57) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %67 = icmp slt i32 %9, 16, !dbg !25
  %68 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !25
  %69 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %68, i1 %67) #5, !dbg !25
  %70 = bitcast i32 %69 to float, !dbg !25
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 1, i32 31), !dbg !25
  %72 = bitcast i32 %71 to float, !dbg !25
  %73 = fadd float %70, %72, !dbg !29
  %74 = and i32 %9, 1, !dbg !25
  %75 = icmp eq i32 %74, 0, !dbg !25
  %76 = and i1 %67, %75, !dbg !25
  %77 = bitcast float %73 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %77, i1 %76) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %78 = getelementptr float, ptr addrspace(3) @global_smem, i32 %59, !dbg !25
  %79 = load float, ptr addrspace(3) %78, align 16, !dbg !25
  %80 = getelementptr float, ptr addrspace(3) @global_smem, i32 %63, !dbg !25
  %81 = load float, ptr addrspace(3) %80, align 8, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %82 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !31
  %83 = bitcast float %79 to i32, !dbg !31
  %84 = bitcast float %81 to i32, !dbg !31
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %82, i32 %83, i32 %84, i1 true) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %85 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !31
  %86 = load float, ptr addrspace(3) %85, align 4, !dbg !31
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float 1.600000e+01) #5, !dbg !31
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float 1.600000e+01) #5, !dbg !31
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %81, float 1.600000e+01) #5, !dbg !31
  %90 = fsub float %29, %88, !dbg !32
  %91 = fsub float %30, %89, !dbg !32
  %92 = fmul float %90, %90, !dbg !33
  %93 = fmul float %91, %91, !dbg !33
  %94 = select i1 %15, float %92, float 0.000000e+00, !dbg !34
  %95 = select i1 %15, float %93, float 0.000000e+00, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %96 = bitcast float %94 to i32, !dbg !35
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 16, i32 31), !dbg !35
  %98 = bitcast i32 %97 to float, !dbg !35
  %99 = fadd float %94, %98, !dbg !37
  %100 = bitcast float %99 to i32, !dbg !35
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 8, i32 31), !dbg !35
  %102 = bitcast i32 %101 to float, !dbg !35
  %103 = fadd float %99, %102, !dbg !37
  %104 = bitcast float %103 to i32, !dbg !35
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 4, i32 31), !dbg !35
  %106 = bitcast i32 %105 to float, !dbg !35
  %107 = fadd float %103, %106, !dbg !37
  %108 = bitcast float %95 to i32, !dbg !35
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 16, i32 31), !dbg !35
  %110 = bitcast i32 %109 to float, !dbg !35
  %111 = fadd float %95, %110, !dbg !37
  %112 = bitcast float %111 to i32, !dbg !35
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 8, i32 31), !dbg !35
  %114 = bitcast i32 %113 to float, !dbg !35
  %115 = fadd float %111, %114, !dbg !37
  %116 = bitcast float %115 to i32, !dbg !35
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 4, i32 31), !dbg !35
  %118 = bitcast i32 %117 to float, !dbg !35
  %119 = fadd float %115, %118, !dbg !37
  %120 = bitcast float %107 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %120, i1 %57) #5, !dbg !35
  %121 = bitcast float %119 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %121, i1 %57) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %122 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %68, i1 %67) #5, !dbg !35
  %123 = bitcast i32 %122 to float, !dbg !35
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 1, i32 31), !dbg !35
  %125 = bitcast i32 %124 to float, !dbg !35
  %126 = fadd float %123, %125, !dbg !37
  %127 = bitcast float %126 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %127, i1 %76) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %128 = load i32, ptr addrspace(3) %78, align 16, !dbg !35
  %129 = load i32, ptr addrspace(3) %80, align 8, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %82, i32 %128, i32 %129, i1 true) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %130 = load float, ptr addrspace(3) %85, align 4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %82, i32 %128, i32 %129, i1 true) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %131 = load i32, ptr addrspace(3) %85, align 4, !dbg !39
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %130, float 1.600000e+01) #5, !dbg !40
  %133 = fadd float %132, 0x3EE4F8B580000000, !dbg !41
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i = icmp eq i32 %134, 0, !dbg !38
  br i1 %.not.i, label %137, label %135, !dbg !38

135:                                              ; preds = %6
  %136 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %133), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

137:                                              ; preds = %6
  %138 = tail call float @llvm.nvvm.rsqrt.approx.f(float %133), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %135, %137
  %.0.i = phi float [ %136, %135 ], [ %138, %137 ], !dbg !38
  %139 = or disjoint i32 %8, %13, !dbg !13
  %140 = icmp slt i32 %139, 1024, !dbg !14
  %141 = sext i32 %139 to i64, !dbg !42
  %142 = getelementptr float, ptr addrspace(1) %3, i64 %141, !dbg !42
  %143 = lshr i32 %10, 3, !dbg !43
  %144 = shl nuw nsw i32 %58, 2, !dbg !43
  %145 = or disjoint i32 %144, %143, !dbg !43
  %146 = icmp eq i32 %145, 0, !dbg !43
  %147 = bitcast float %.0.i to i32, !dbg !43
  %148 = and i1 %146, %140, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %147, ptr addrspace(1) %142, i1 %148) #5, !dbg !43
  %149 = getelementptr float, ptr addrspace(1) %1, i64 %141, !dbg !44
  %150 = bitcast float %87 to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %150, ptr addrspace(1) %149, i1 %148) #5, !dbg !45
  %151 = getelementptr float, ptr addrspace(1) %2, i64 %141, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %131, ptr addrspace(1) %151, i1 %148) #5, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6bbytuccku3kxsjwx3kcoc3qm52nwu2yum5mxc2sujj4xaeuiwc.py", directory: "inductor_cache/6b")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_18, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_18, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_18", linkageName: "triton_per_fused__native_batch_norm_legit_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 34, scope: !7)
!17 = !DILocation(line: 31, column: 51, scope: !7)
!18 = !DILocation(line: 31, column: 45, scope: !7)
!19 = !DILocation(line: 31, column: 65, scope: !7)
!20 = !DILocation(line: 31, column: 39, scope: !7)
!21 = !DILocation(line: 31, column: 60, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 73, scope: !7)
!24 = !DILocation(line: 35, column: 33, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = !DILocation(line: 36, column: 24, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !28)
!30 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!31 = !DILocation(line: 39, column: 19, scope: !7)
!32 = !DILocation(line: 40, column: 19, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 43, column: 35, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !36)
!36 = !DILocation(line: 44, column: 26, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !36)
!38 = !DILocation(line: 49, column: 28, scope: !7)
!39 = !DILocation(line: 44, column: 29, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 25, scope: !7)
!43 = !DILocation(line: 50, column: 37, scope: !7)
!44 = !DILocation(line: 51, column: 25, scope: !7)
!45 = !DILocation(line: 51, column: 37, scope: !7)
!46 = !DILocation(line: 52, column: 25, scope: !7)
!47 = !DILocation(line: 52, column: 37, scope: !7)
!48 = !DILocation(line: 52, column: 4, scope: !7)
