; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 254, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = sext i32 %15 to i64, !dbg !14
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !14
  %18 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #3, !dbg !15
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #3, !dbg !16
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #3, !dbg !17
  %21 = bitcast i32 %20 to float, !dbg !17
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #3, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %4, i1 true) #3, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %5, i64 %16, !dbg !20
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !21
  %26 = fadd float %21, 0x3EE4F8B580000000, !dbg !22
  %27 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !23
  %.not.i = icmp eq i32 %27, 0, !dbg !23
  %28 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !23
  %.not1.i = icmp eq i32 %28, 0, !dbg !23
  br i1 %.not.i, label %34, label %29, !dbg !23

29:                                               ; preds = %9
  br i1 %.not1.i, label %32, label %30, !dbg !23

30:                                               ; preds = %29
  %31 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %26) #3, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

32:                                               ; preds = %29
  %33 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %26) #3, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

34:                                               ; preds = %9
  br i1 %.not1.i, label %37, label %35, !dbg !23

35:                                               ; preds = %34
  %36 = tail call float @llvm.nvvm.sqrt.rn.f(float %26) #3, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

37:                                               ; preds = %34
  %38 = tail call float @llvm.nvvm.sqrt.approx.f(float %26) #3, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

__nv_sqrtf.exit:                                  ; preds = %30, %32, %35, %37
  %.0.i = phi float [ %31, %30 ], [ %33, %32 ], [ %36, %35 ], [ %38, %37 ], !dbg !23
  %39 = extractvalue { i32, i32 } %18, 1, !dbg !15
  %40 = extractvalue { i32, i32 } %18, 0, !dbg !15
  %41 = extractvalue { i32, i32 } %25, 1, !dbg !21
  %42 = extractvalue { i32, i32 } %25, 0, !dbg !21
  %43 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %6, i64 %16, !dbg !25
  %45 = getelementptr i1, ptr addrspace(1) %7, i64 %16, !dbg !26
  %46 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !15
  %47 = insertelement <2 x i32> %46, i32 %39, i64 1, !dbg !15
  %48 = bitcast <2 x i32> %47 to <2 x float>, !dbg !15
  %49 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !27
  %50 = bitcast <2 x i32> %49 to <2 x float>, !dbg !27
  %51 = shufflevector <2 x float> %50, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !27
  %52 = fsub <2 x float> %48, %51, !dbg !27
  %53 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !21
  %54 = insertelement <2 x i32> %53, i32 %41, i64 1, !dbg !21
  %55 = bitcast <2 x i32> %54 to <2 x float>, !dbg !21
  %56 = insertelement <2 x float> poison, float %43, i64 0, !dbg !28
  %57 = shufflevector <2 x float> %56, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !28
  %58 = fmul <2 x float> %52, %57, !dbg !28
  %59 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !29
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !29
  %61 = shufflevector <2 x float> %60, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !29
  %62 = fmul <2 x float> %58, %61, !dbg !29
  %63 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !30
  %64 = bitcast <2 x i32> %63 to <2 x float>, !dbg !30
  %65 = shufflevector <2 x float> %64, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !30
  %66 = fadd <2 x float> %62, %65, !dbg !30
  %67 = fadd <2 x float> %66, %55, !dbg !31
  %68 = fcmp olt <2 x float> %67, zeroinitializer, !dbg !32
  %69 = select <2 x i1> %68, <2 x float> zeroinitializer, <2 x float> %67, !dbg !36
  %70 = fcmp ole <2 x float> %69, zeroinitializer, !dbg !37
  %bc = bitcast <2 x float> %69 to <2 x i32>, !dbg !38
  %71 = extractelement <2 x i32> %bc, i64 0, !dbg !38
  %bc1 = bitcast <2 x float> %69 to <2 x i32>, !dbg !38
  %72 = extractelement <2 x i32> %bc1, i64 1, !dbg !38
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %71, i32 %72, ptr addrspace(1) %44, i1 true) #3, !dbg !38
  %73 = zext <2 x i1> %70 to <2 x i8>, !dbg !39
  %74 = bitcast <2 x i8> %73 to i16, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %74, ptr addrspace(1) %45, i1 true) #3, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cf7e2fphh7e63jd4hgjwgxn36eivchikjogyd2gbfptbcxt7zi25.py", directory: "inductor_cache/f7")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 30, scope: !7)
!15 = !DILocation(line: 25, column: 35, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 20, scope: !7)
!19 = !DILocation(line: 32, column: 20, scope: !7)
!20 = !DILocation(line: 34, column: 31, scope: !7)
!21 = !DILocation(line: 34, column: 36, scope: !7)
!22 = !DILocation(line: 37, column: 18, scope: !7)
!23 = !DILocation(line: 38, column: 26, scope: !7)
!24 = !DILocation(line: 40, column: 19, scope: !7)
!25 = !DILocation(line: 51, column: 25, scope: !7)
!26 = !DILocation(line: 52, column: 25, scope: !7)
!27 = !DILocation(line: 35, column: 18, scope: !7)
!28 = !DILocation(line: 43, column: 19, scope: !7)
!29 = !DILocation(line: 44, column: 20, scope: !7)
!30 = !DILocation(line: 45, column: 20, scope: !7)
!31 = !DILocation(line: 46, column: 20, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 48, column: 42, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 50, column: 21, scope: !7)
!38 = !DILocation(line: 51, column: 37, scope: !7)
!39 = !DILocation(line: 52, column: 37, scope: !7)
!40 = !DILocation(line: 52, column: 4, scope: !7)
