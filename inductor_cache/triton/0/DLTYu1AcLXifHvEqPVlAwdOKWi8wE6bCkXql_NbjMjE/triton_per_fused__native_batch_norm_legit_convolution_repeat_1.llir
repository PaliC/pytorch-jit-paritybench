; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_convolution_repeat_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = shl i32 %11, 3, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 4, !dbg !12
  %15 = and i32 %14, 7, !dbg !12
  %16 = and i32 %13, 7, !dbg !12
  %17 = or disjoint i32 %12, %15, !dbg !13
  %18 = or disjoint i32 %12, %16, !dbg !13
  %19 = icmp slt i32 %17, 16, !dbg !14
  %20 = icmp slt i32 %18, 16, !dbg !14
  %21 = shl i32 %13, 2, !dbg !15
  %22 = and i32 %21, 60, !dbg !15
  %23 = srem i32 %17, 4, !dbg !16
  %24 = srem i32 %18, 4, !dbg !16
  %25 = sext i32 %23 to i64, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !17
  %27 = sext i32 %24 to i64, !dbg !17
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !17
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %19) #5, !dbg !18
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %19) #5, !dbg !18
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %19) #5, !dbg !18
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %19) #5, !dbg !18
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %20) #5, !dbg !18
  %34 = shl i32 %17, 6, !dbg !19
  %35 = or disjoint i32 %34, %22, !dbg !20
  %36 = sext i32 %35 to i64, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !21
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !22
  %43 = bitcast i32 %39 to float, !dbg !22
  %44 = bitcast i32 %40 to float, !dbg !22
  %45 = bitcast i32 %41 to float, !dbg !22
  %46 = bitcast i32 %42 to float, !dbg !22
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !23
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %19) #5, !dbg !24
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %19) #5, !dbg !24
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %19) #5, !dbg !24
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %19) #5, !dbg !24
  %52 = bitcast i32 %51 to float, !dbg !24
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !25
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %19) #5, !dbg !26
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %19) #5, !dbg !26
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %19) #5, !dbg !26
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %19) #5, !dbg !26
  %58 = fadd float %43, %52, !dbg !27
  %59 = fadd float %44, %52, !dbg !27
  %60 = fadd float %45, %52, !dbg !27
  %61 = fadd float %46, %52, !dbg !27
  %62 = fadd float %58, %59, !dbg !28
  %63 = fadd float %60, %62, !dbg !28
  %64 = fadd float %61, %63, !dbg !28
  %65 = select i1 %19, float %64, float 0.000000e+00, !dbg !28
  %66 = bitcast float %65 to i32, !dbg !33
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 8, i32 31), !dbg !33
  %68 = bitcast i32 %67 to float, !dbg !33
  %69 = fadd float %65, %68, !dbg !28
  %70 = bitcast float %69 to i32, !dbg !33
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 4, i32 31), !dbg !33
  %72 = bitcast i32 %71 to float, !dbg !33
  %73 = fadd float %69, %72, !dbg !28
  %74 = bitcast float %73 to i32, !dbg !33
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 2, i32 31), !dbg !33
  %76 = bitcast i32 %75 to float, !dbg !33
  %77 = fadd float %73, %76, !dbg !28
  %78 = bitcast float %77 to i32, !dbg !33
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 1, i32 31), !dbg !33
  %80 = bitcast i32 %79 to float, !dbg !33
  %81 = fadd float %77, %80, !dbg !28
  %82 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !34
  %83 = bitcast float %81 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %84 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !34
  %85 = load float, ptr addrspace(3) %84, align 4, !dbg !34
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %85, float 6.400000e+01) #5, !dbg !34
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %81, float 6.400000e+01) #5, !dbg !34
  %88 = fsub float %58, %87, !dbg !35
  %89 = fsub float %59, %87, !dbg !35
  %90 = fsub float %60, %87, !dbg !35
  %91 = fsub float %61, %87, !dbg !35
  %92 = fmul float %88, %88, !dbg !36
  %93 = fmul float %89, %89, !dbg !36
  %94 = fmul float %90, %90, !dbg !36
  %95 = fmul float %91, %91, !dbg !36
  %96 = fadd float %92, %93, !dbg !37
  %97 = fadd float %94, %96, !dbg !37
  %98 = fadd float %95, %97, !dbg !37
  %99 = select i1 %19, float %98, float 0.000000e+00, !dbg !37
  %100 = bitcast float %99 to i32, !dbg !39
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 8, i32 31), !dbg !39
  %102 = bitcast i32 %101 to float, !dbg !39
  %103 = fadd float %99, %102, !dbg !37
  %104 = bitcast float %103 to i32, !dbg !39
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 4, i32 31), !dbg !39
  %106 = bitcast i32 %105 to float, !dbg !39
  %107 = fadd float %103, %106, !dbg !37
  %108 = bitcast float %107 to i32, !dbg !39
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 2, i32 31), !dbg !39
  %110 = bitcast i32 %109 to float, !dbg !39
  %111 = fadd float %107, %110, !dbg !37
  %112 = bitcast float %111 to i32, !dbg !39
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 1, i32 31), !dbg !39
  %114 = bitcast i32 %113 to float, !dbg !39
  %115 = fadd float %111, %114, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %116 = bitcast float %115 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %116, i1 true) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %117 = load float, ptr addrspace(3) %84, align 4, !dbg !40
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float 6.400000e+01) #5, !dbg !41
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float 6.400000e+01) #5, !dbg !41
  %120 = fadd float %118, 0x3EE4F8B580000000, !dbg !42
  %121 = fadd float %119, 0x3EE4F8B580000000, !dbg !42
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i = icmp eq i32 %122, 0, !dbg !40
  br i1 %.not.i, label %125, label %123, !dbg !40

123:                                              ; preds = %10
  %124 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %120), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

125:                                              ; preds = %10
  %126 = tail call float @llvm.nvvm.rsqrt.approx.f(float %120), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %123, %125
  %.0.i = phi float [ %124, %123 ], [ %126, %125 ], !dbg !40
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i10 = icmp eq i32 %130, 0, !dbg !40
  br i1 %.not.i10, label %133, label %131, !dbg !40

131:                                              ; preds = %__nv_rsqrtf.exit
  %132 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %121), !dbg !40
  br label %__nv_rsqrtf.exit12, !dbg !40

133:                                              ; preds = %__nv_rsqrtf.exit
  %134 = tail call float @llvm.nvvm.rsqrt.approx.f(float %121), !dbg !40
  br label %__nv_rsqrtf.exit12, !dbg !40

__nv_rsqrtf.exit12:                               ; preds = %131, %133
  %.0.i11 = phi float [ %132, %131 ], [ %134, %133 ], !dbg !40
  %135 = bitcast i32 %57 to float, !dbg !26
  %136 = bitcast i32 %32 to float, !dbg !18
  %137 = fmul float %88, %.0.i11, !dbg !43
  %138 = fmul float %89, %.0.i11, !dbg !43
  %139 = fmul float %90, %.0.i11, !dbg !43
  %140 = fmul float %91, %.0.i11, !dbg !43
  %141 = fmul float %137, %136, !dbg !44
  %142 = fmul float %138, %136, !dbg !44
  %143 = fmul float %139, %136, !dbg !44
  %144 = fmul float %140, %136, !dbg !44
  %145 = fadd float %141, %135, !dbg !45
  %146 = fadd float %142, %135, !dbg !45
  %147 = fadd float %143, %135, !dbg !45
  %148 = fadd float %144, %135, !dbg !45
  %149 = sext i32 %18 to i64, !dbg !46
  %150 = getelementptr float, ptr addrspace(1) %4, i64 %149, !dbg !46
  %151 = and i32 %13, 120, !dbg !47
  %152 = icmp eq i32 %151, 0, !dbg !47
  %153 = and i1 %152, %20, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %33, ptr addrspace(1) %150, i1 %153) #5, !dbg !47
  %154 = bitcast float %58 to i32, !dbg !48
  %155 = bitcast float %59 to i32, !dbg !48
  %156 = bitcast float %60 to i32, !dbg !48
  %157 = bitcast float %61 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %154, i32 %155, i32 %156, i32 %157, ptr addrspace(1) %37, i1 %19) #5, !dbg !48
  %158 = getelementptr float, ptr addrspace(1) %6, i64 %36, !dbg !49
  %159 = bitcast float %145 to i32, !dbg !50
  %160 = bitcast float %146 to i32, !dbg !50
  %161 = bitcast float %147 to i32, !dbg !50
  %162 = bitcast float %148 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %159, i32 %160, i32 %161, i32 %162, ptr addrspace(1) %158, i1 %19) #5, !dbg !50
  %163 = getelementptr float, ptr addrspace(1) %7, i64 %149, !dbg !51
  %164 = bitcast float %.0.i to i32, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %164, ptr addrspace(1) %163, i1 %153) #5, !dbg !52
  %165 = getelementptr float, ptr addrspace(1) %5, i64 %149, !dbg !53
  %166 = bitcast float %86 to i32, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %166, ptr addrspace(1) %165, i1 %153) #5, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccncymmsfj6bfotvbku6omw6ogxbsuuzxlv3kks76edp6n7d4vbr.py", directory: "inductor_cache/cn")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_repeat_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_repeat_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_convolution_repeat_1", linkageName: "triton_per_fused__native_batch_norm_legit_convolution_repeat_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 31, scope: !7)
!18 = !DILocation(line: 32, column: 41, scope: !7)
!19 = !DILocation(line: 33, column: 42, scope: !7)
!20 = !DILocation(line: 33, column: 39, scope: !7)
!21 = !DILocation(line: 33, column: 34, scope: !7)
!22 = !DILocation(line: 33, column: 47, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 32, scope: !7)
!26 = !DILocation(line: 35, column: 42, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !32)
!29 = distinct !DILexicalBlockFile(scope: !31, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!31 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!32 = !DILocation(line: 41, column: 25, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 44, column: 20, scope: !7)
!35 = !DILocation(line: 45, column: 19, scope: !7)
!36 = !DILocation(line: 46, column: 20, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !38)
!38 = !DILocation(line: 49, column: 26, scope: !7)
!39 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !38)
!40 = !DILocation(line: 55, column: 28, scope: !7)
!41 = !DILocation(line: 52, column: 20, scope: !7)
!42 = !DILocation(line: 54, column: 20, scope: !7)
!43 = !DILocation(line: 56, column: 20, scope: !7)
!44 = !DILocation(line: 57, column: 20, scope: !7)
!45 = !DILocation(line: 58, column: 20, scope: !7)
!46 = !DILocation(line: 59, column: 25, scope: !7)
!47 = !DILocation(line: 59, column: 36, scope: !7)
!48 = !DILocation(line: 60, column: 47, scope: !7)
!49 = !DILocation(line: 61, column: 25, scope: !7)
!50 = !DILocation(line: 61, column: 45, scope: !7)
!51 = !DILocation(line: 62, column: 25, scope: !7)
!52 = !DILocation(line: 62, column: 37, scope: !7)
!53 = !DILocation(line: 63, column: 25, scope: !7)
!54 = !DILocation(line: 63, column: 37, scope: !7)
!55 = !DILocation(line: 63, column: 4, scope: !7)
