; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_sqrt_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %.lobit1 = lshr i32 %8, 6, !dbg !12
  %11 = and i32 %.lobit1, 3, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %13, 8, !dbg !13
  %16 = or disjoint i32 %13, 12, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %18 = shl i32 %17, 8, !dbg !15
  %19 = lshr i32 %8, 2, !dbg !16
  %20 = and i32 %19, 63, !dbg !16
  %21 = and i32 %9, 252, !dbg !16
  %22 = or disjoint i32 %18, %20, !dbg !17
  %23 = or disjoint i32 %22, 64, !dbg !17
  %24 = or disjoint i32 %22, 128, !dbg !17
  %25 = or disjoint i32 %22, 192, !dbg !17
  %26 = or disjoint i32 %18, %21, !dbg !17
  %27 = icmp slt i32 %22, 256, !dbg !18
  %28 = icmp slt i32 %23, 256, !dbg !18
  %29 = icmp slt i32 %24, 256, !dbg !18
  %30 = icmp slt i32 %25, 256, !dbg !18
  %31 = icmp slt i32 %26, 256, !dbg !18
  %.frozen = freeze i32 %12, !dbg !19
  %32 = sdiv i32 %.frozen, 256, !dbg !19
  %33 = mul i32 %32, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %33, !dbg !20
  %34 = sdiv i32 %13, 256, !dbg !19
  %35 = sdiv i32 %14, 256, !dbg !19
  %36 = sdiv i32 %15, 256, !dbg !19
  %37 = sdiv i32 %16, 256, !dbg !19
  %38 = shl i32 %22, 8, !dbg !21
  %39 = shl i32 %23, 8, !dbg !21
  %40 = shl i32 %24, 8, !dbg !21
  %41 = shl i32 %25, 8, !dbg !21
  %42 = shl i32 %32, 16, !dbg !22
  %43 = add i32 %42, %.decomposed, !dbg !23
  %44 = add i32 %43, %38, !dbg !24
  %45 = add i32 %43, %39, !dbg !24
  %46 = add i32 %43, %40, !dbg !24
  %47 = add i32 %43, %41, !dbg !24
  %48 = sext i32 %44 to i64, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !25
  %50 = sext i32 %45 to i64, !dbg !25
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !25
  %52 = sext i32 %46 to i64, !dbg !25
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !25
  %54 = sext i32 %47 to i64, !dbg !25
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !25
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %27) #4, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !26
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %28) #4, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !26
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %29) #4, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !26
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %30) #4, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !26
  %76 = shl i32 %8, 10, !dbg !26
  %77 = and i32 %76, 3072, !dbg !26
  %78 = or disjoint i32 %77, %20, !dbg !26
  %79 = and i32 %9, 1020, !dbg !26
  %80 = lshr exact i32 %77, 6, !dbg !26
  %81 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %80, !dbg !26
  %82 = getelementptr float, ptr addrspace(3) %81, i32 %78, !dbg !26
  %83 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #4, !dbg !26
  %84 = or disjoint i32 %78, 256, !dbg !26
  %85 = lshr i32 %84, 8, !dbg !26
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !26
  %87 = getelementptr float, ptr addrspace(3) %86, i32 %84, !dbg !26
  %88 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #4, !dbg !26
  %89 = or disjoint i32 %78, 512, !dbg !26
  %90 = lshr i32 %89, 8, !dbg !26
  %91 = getelementptr float, ptr addrspace(3) @global_smem, i32 %90, !dbg !26
  %92 = getelementptr float, ptr addrspace(3) %91, i32 %89, !dbg !26
  %93 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #4, !dbg !26
  %94 = or disjoint i32 %78, 768, !dbg !26
  %95 = lshr i32 %94, 8, !dbg !26
  %96 = getelementptr float, ptr addrspace(3) @global_smem, i32 %95, !dbg !26
  %97 = getelementptr float, ptr addrspace(3) %96, i32 %94, !dbg !26
  %98 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #4, !dbg !26
  %99 = or disjoint i32 %78, 64, !dbg !26
  %100 = getelementptr float, ptr addrspace(3) %81, i32 %99, !dbg !26
  %101 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #4, !dbg !26
  %102 = or disjoint i32 %78, 320, !dbg !26
  %103 = lshr i32 %102, 8, !dbg !26
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i32 %103, !dbg !26
  %105 = getelementptr float, ptr addrspace(3) %104, i32 %102, !dbg !26
  %106 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #4, !dbg !26
  %107 = or disjoint i32 %78, 576, !dbg !26
  %108 = lshr i32 %107, 8, !dbg !26
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i32 %108, !dbg !26
  %110 = getelementptr float, ptr addrspace(3) %109, i32 %107, !dbg !26
  %111 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #4, !dbg !26
  %112 = or disjoint i32 %78, 832, !dbg !26
  %113 = lshr i32 %112, 8, !dbg !26
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i32 %113, !dbg !26
  %115 = getelementptr float, ptr addrspace(3) %114, i32 %112, !dbg !26
  %116 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #4, !dbg !26
  %117 = or disjoint i32 %78, 128, !dbg !26
  %118 = getelementptr float, ptr addrspace(3) %81, i32 %117, !dbg !26
  %119 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #4, !dbg !26
  %120 = or disjoint i32 %78, 384, !dbg !26
  %121 = lshr i32 %120, 8, !dbg !26
  %122 = getelementptr float, ptr addrspace(3) @global_smem, i32 %121, !dbg !26
  %123 = getelementptr float, ptr addrspace(3) %122, i32 %120, !dbg !26
  %124 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #4, !dbg !26
  %125 = or disjoint i32 %78, 640, !dbg !26
  %126 = lshr i32 %125, 8, !dbg !26
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i32 %126, !dbg !26
  %128 = getelementptr float, ptr addrspace(3) %127, i32 %125, !dbg !26
  %129 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #4, !dbg !26
  %130 = or disjoint i32 %78, 896, !dbg !26
  %131 = lshr i32 %130, 8, !dbg !26
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i32 %131, !dbg !26
  %133 = getelementptr float, ptr addrspace(3) %132, i32 %130, !dbg !26
  %134 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #4, !dbg !26
  %135 = or disjoint i32 %78, 192, !dbg !26
  %136 = getelementptr float, ptr addrspace(3) %81, i32 %135, !dbg !26
  %137 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #4, !dbg !26
  %138 = or disjoint i32 %78, 448, !dbg !26
  %139 = lshr i32 %138, 8, !dbg !26
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %139, !dbg !26
  %141 = getelementptr float, ptr addrspace(3) %140, i32 %138, !dbg !26
  %142 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #4, !dbg !26
  %143 = or disjoint i32 %78, 704, !dbg !26
  %144 = lshr i32 %143, 8, !dbg !26
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i32 %144, !dbg !26
  %146 = getelementptr float, ptr addrspace(3) %145, i32 %143, !dbg !26
  %147 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #4, !dbg !26
  %148 = or disjoint i32 %78, 960, !dbg !26
  %149 = lshr i32 %148, 8, !dbg !26
  %150 = getelementptr float, ptr addrspace(3) @global_smem, i32 %149, !dbg !26
  %151 = getelementptr float, ptr addrspace(3) %150, i32 %148, !dbg !26
  %152 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %153 = lshr i32 %79, 8, !dbg !26
  %154 = or disjoint i32 %153, %79, !dbg !26
  %155 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %154, !dbg !26
  %156 = load float, ptr addrspace(3) %155, align 4, !dbg !26
  %157 = or disjoint i32 %79, 1, !dbg !26
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %153, !dbg !26
  %159 = getelementptr inbounds float, ptr addrspace(3) %158, i32 %157, !dbg !26
  %160 = load float, ptr addrspace(3) %159, align 4, !dbg !26
  %161 = or disjoint i32 %79, 2, !dbg !26
  %162 = getelementptr inbounds float, ptr addrspace(3) %158, i32 %161, !dbg !26
  %163 = load float, ptr addrspace(3) %162, align 4, !dbg !26
  %164 = or disjoint i32 %79, 3, !dbg !26
  %165 = getelementptr inbounds float, ptr addrspace(3) %158, i32 %164, !dbg !26
  %166 = load float, ptr addrspace(3) %165, align 4, !dbg !26
  %167 = or disjoint i32 %79, 1024, !dbg !26
  %168 = lshr i32 %167, 8, !dbg !26
  %169 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %168, !dbg !26
  %170 = getelementptr inbounds float, ptr addrspace(3) %169, i32 %167, !dbg !26
  %171 = load float, ptr addrspace(3) %170, align 4, !dbg !26
  %172 = or disjoint i32 %79, 1025, !dbg !26
  %173 = lshr i32 %172, 8, !dbg !26
  %174 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %173, !dbg !26
  %175 = getelementptr inbounds float, ptr addrspace(3) %174, i32 %172, !dbg !26
  %176 = load float, ptr addrspace(3) %175, align 4, !dbg !26
  %177 = or disjoint i32 %79, 1026, !dbg !26
  %178 = lshr i32 %177, 8, !dbg !26
  %179 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %178, !dbg !26
  %180 = getelementptr inbounds float, ptr addrspace(3) %179, i32 %177, !dbg !26
  %181 = load float, ptr addrspace(3) %180, align 4, !dbg !26
  %182 = or disjoint i32 %79, 1027, !dbg !26
  %183 = lshr i32 %182, 8, !dbg !26
  %184 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %183, !dbg !26
  %185 = getelementptr inbounds float, ptr addrspace(3) %184, i32 %182, !dbg !26
  %186 = load float, ptr addrspace(3) %185, align 4, !dbg !26
  %187 = or disjoint i32 %79, 2048, !dbg !26
  %188 = lshr i32 %187, 8, !dbg !26
  %189 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %188, !dbg !26
  %190 = getelementptr inbounds float, ptr addrspace(3) %189, i32 %187, !dbg !26
  %191 = load float, ptr addrspace(3) %190, align 4, !dbg !26
  %192 = or disjoint i32 %79, 2049, !dbg !26
  %193 = lshr i32 %192, 8, !dbg !26
  %194 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %193, !dbg !26
  %195 = getelementptr inbounds float, ptr addrspace(3) %194, i32 %192, !dbg !26
  %196 = load float, ptr addrspace(3) %195, align 4, !dbg !26
  %197 = or disjoint i32 %79, 2050, !dbg !26
  %198 = lshr i32 %197, 8, !dbg !26
  %199 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %198, !dbg !26
  %200 = getelementptr inbounds float, ptr addrspace(3) %199, i32 %197, !dbg !26
  %201 = load float, ptr addrspace(3) %200, align 4, !dbg !26
  %202 = or disjoint i32 %79, 2051, !dbg !26
  %203 = lshr i32 %202, 8, !dbg !26
  %204 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %203, !dbg !26
  %205 = getelementptr inbounds float, ptr addrspace(3) %204, i32 %202, !dbg !26
  %206 = load float, ptr addrspace(3) %205, align 4, !dbg !26
  %207 = or disjoint i32 %79, 3072, !dbg !26
  %208 = lshr i32 %207, 8, !dbg !26
  %209 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %208, !dbg !26
  %210 = getelementptr inbounds float, ptr addrspace(3) %209, i32 %207, !dbg !26
  %211 = load float, ptr addrspace(3) %210, align 4, !dbg !26
  %212 = or disjoint i32 %79, 3073, !dbg !26
  %213 = lshr i32 %212, 8, !dbg !26
  %214 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %213, !dbg !26
  %215 = getelementptr inbounds float, ptr addrspace(3) %214, i32 %212, !dbg !26
  %216 = load float, ptr addrspace(3) %215, align 4, !dbg !26
  %217 = or disjoint i32 %79, 3074, !dbg !26
  %218 = lshr i32 %217, 8, !dbg !26
  %219 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %218, !dbg !26
  %220 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %217, !dbg !26
  %221 = load float, ptr addrspace(3) %220, align 4, !dbg !26
  %222 = or disjoint i32 %79, 3075, !dbg !26
  %223 = lshr i32 %222, 8, !dbg !26
  %224 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %223, !dbg !26
  %225 = getelementptr inbounds float, ptr addrspace(3) %224, i32 %222, !dbg !26
  %226 = load float, ptr addrspace(3) %225, align 4, !dbg !26
  %227 = shl nsw i32 %34, 8, !dbg !27
  %228 = shl nsw i32 %35, 8, !dbg !27
  %229 = shl nsw i32 %36, 8, !dbg !27
  %230 = shl nsw i32 %37, 8, !dbg !27
  %231 = add i32 %227, %26, !dbg !28
  %232 = add i32 %26, %228, !dbg !28
  %233 = add i32 %26, %229, !dbg !28
  %234 = add i32 %26, %230, !dbg !28
  %235 = sext i32 %231 to i64, !dbg !29
  %236 = getelementptr float, ptr addrspace(1) %1, i64 %235, !dbg !29
  %237 = sext i32 %232 to i64, !dbg !29
  %238 = getelementptr float, ptr addrspace(1) %1, i64 %237, !dbg !29
  %239 = sext i32 %233 to i64, !dbg !29
  %240 = getelementptr float, ptr addrspace(1) %1, i64 %239, !dbg !29
  %241 = sext i32 %234 to i64, !dbg !29
  %242 = getelementptr float, ptr addrspace(1) %1, i64 %241, !dbg !29
  %243 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %236, i1 %31) #4, !dbg !30
  %244 = extractvalue { i32, i32, i32, i32 } %243, 0, !dbg !30
  %245 = extractvalue { i32, i32, i32, i32 } %243, 1, !dbg !30
  %246 = extractvalue { i32, i32, i32, i32 } %243, 2, !dbg !30
  %247 = extractvalue { i32, i32, i32, i32 } %243, 3, !dbg !30
  %248 = bitcast i32 %244 to float, !dbg !30
  %249 = bitcast i32 %245 to float, !dbg !30
  %250 = bitcast i32 %246 to float, !dbg !30
  %251 = bitcast i32 %247 to float, !dbg !30
  %252 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %238, i1 %31) #4, !dbg !30
  %253 = extractvalue { i32, i32, i32, i32 } %252, 0, !dbg !30
  %254 = extractvalue { i32, i32, i32, i32 } %252, 1, !dbg !30
  %255 = extractvalue { i32, i32, i32, i32 } %252, 2, !dbg !30
  %256 = extractvalue { i32, i32, i32, i32 } %252, 3, !dbg !30
  %257 = bitcast i32 %253 to float, !dbg !30
  %258 = bitcast i32 %254 to float, !dbg !30
  %259 = bitcast i32 %255 to float, !dbg !30
  %260 = bitcast i32 %256 to float, !dbg !30
  %261 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %240, i1 %31) #4, !dbg !30
  %262 = extractvalue { i32, i32, i32, i32 } %261, 0, !dbg !30
  %263 = extractvalue { i32, i32, i32, i32 } %261, 1, !dbg !30
  %264 = extractvalue { i32, i32, i32, i32 } %261, 2, !dbg !30
  %265 = extractvalue { i32, i32, i32, i32 } %261, 3, !dbg !30
  %266 = bitcast i32 %262 to float, !dbg !30
  %267 = bitcast i32 %263 to float, !dbg !30
  %268 = bitcast i32 %264 to float, !dbg !30
  %269 = bitcast i32 %265 to float, !dbg !30
  %270 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %242, i1 %31) #4, !dbg !30
  %271 = extractvalue { i32, i32, i32, i32 } %270, 0, !dbg !30
  %272 = extractvalue { i32, i32, i32, i32 } %270, 1, !dbg !30
  %273 = extractvalue { i32, i32, i32, i32 } %270, 2, !dbg !30
  %274 = extractvalue { i32, i32, i32, i32 } %270, 3, !dbg !30
  %275 = bitcast i32 %271 to float, !dbg !30
  %276 = bitcast i32 %272 to float, !dbg !30
  %277 = bitcast i32 %273 to float, !dbg !30
  %278 = bitcast i32 %274 to float, !dbg !30
  %279 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i = icmp eq i32 %279, 0, !dbg !31
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i = icmp eq i32 %280, 0, !dbg !31
  br i1 %.not.i, label %286, label %281, !dbg !31

281:                                              ; preds = %5
  br i1 %.not1.i, label %284, label %282, !dbg !31

282:                                              ; preds = %281
  %283 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %248) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

284:                                              ; preds = %281
  %285 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %248) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

286:                                              ; preds = %5
  br i1 %.not1.i, label %289, label %287, !dbg !31

287:                                              ; preds = %286
  %288 = tail call float @llvm.nvvm.sqrt.rn.f(float %248) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

289:                                              ; preds = %286
  %290 = tail call float @llvm.nvvm.sqrt.approx.f(float %248) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %282, %284, %287, %289
  %.0.i = phi float [ %283, %282 ], [ %285, %284 ], [ %288, %287 ], [ %290, %289 ], !dbg !31
  %291 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i3 = icmp eq i32 %291, 0, !dbg !31
  %292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i6 = icmp eq i32 %292, 0, !dbg !31
  br i1 %.not.i3, label %298, label %293, !dbg !31

293:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %296, label %294, !dbg !31

294:                                              ; preds = %293
  %295 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %249) #4, !dbg !31
  br label %__nv_sqrtf.exit7, !dbg !31

296:                                              ; preds = %293
  %297 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %249) #4, !dbg !31
  br label %__nv_sqrtf.exit7, !dbg !31

298:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %301, label %299, !dbg !31

299:                                              ; preds = %298
  %300 = tail call float @llvm.nvvm.sqrt.rn.f(float %249) #4, !dbg !31
  br label %__nv_sqrtf.exit7, !dbg !31

301:                                              ; preds = %298
  %302 = tail call float @llvm.nvvm.sqrt.approx.f(float %249) #4, !dbg !31
  br label %__nv_sqrtf.exit7, !dbg !31

__nv_sqrtf.exit7:                                 ; preds = %294, %296, %299, %301
  %.0.i5 = phi float [ %295, %294 ], [ %297, %296 ], [ %300, %299 ], [ %302, %301 ], !dbg !31
  %303 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i8 = icmp eq i32 %303, 0, !dbg !31
  %304 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i11 = icmp eq i32 %304, 0, !dbg !31
  br i1 %.not.i8, label %310, label %305, !dbg !31

305:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %308, label %306, !dbg !31

306:                                              ; preds = %305
  %307 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %250) #4, !dbg !31
  br label %__nv_sqrtf.exit12, !dbg !31

308:                                              ; preds = %305
  %309 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %250) #4, !dbg !31
  br label %__nv_sqrtf.exit12, !dbg !31

310:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %313, label %311, !dbg !31

311:                                              ; preds = %310
  %312 = tail call float @llvm.nvvm.sqrt.rn.f(float %250) #4, !dbg !31
  br label %__nv_sqrtf.exit12, !dbg !31

313:                                              ; preds = %310
  %314 = tail call float @llvm.nvvm.sqrt.approx.f(float %250) #4, !dbg !31
  br label %__nv_sqrtf.exit12, !dbg !31

__nv_sqrtf.exit12:                                ; preds = %306, %308, %311, %313
  %.0.i10 = phi float [ %307, %306 ], [ %309, %308 ], [ %312, %311 ], [ %314, %313 ], !dbg !31
  %315 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i13 = icmp eq i32 %315, 0, !dbg !31
  %316 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i16 = icmp eq i32 %316, 0, !dbg !31
  br i1 %.not.i13, label %322, label %317, !dbg !31

317:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %320, label %318, !dbg !31

318:                                              ; preds = %317
  %319 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %251) #4, !dbg !31
  br label %__nv_sqrtf.exit17, !dbg !31

320:                                              ; preds = %317
  %321 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %251) #4, !dbg !31
  br label %__nv_sqrtf.exit17, !dbg !31

322:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %325, label %323, !dbg !31

323:                                              ; preds = %322
  %324 = tail call float @llvm.nvvm.sqrt.rn.f(float %251) #4, !dbg !31
  br label %__nv_sqrtf.exit17, !dbg !31

325:                                              ; preds = %322
  %326 = tail call float @llvm.nvvm.sqrt.approx.f(float %251) #4, !dbg !31
  br label %__nv_sqrtf.exit17, !dbg !31

__nv_sqrtf.exit17:                                ; preds = %318, %320, %323, %325
  %.0.i15 = phi float [ %319, %318 ], [ %321, %320 ], [ %324, %323 ], [ %326, %325 ], !dbg !31
  %327 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i18 = icmp eq i32 %327, 0, !dbg !31
  %328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i21 = icmp eq i32 %328, 0, !dbg !31
  br i1 %.not.i18, label %334, label %329, !dbg !31

329:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %332, label %330, !dbg !31

330:                                              ; preds = %329
  %331 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %257) #4, !dbg !31
  br label %__nv_sqrtf.exit22, !dbg !31

332:                                              ; preds = %329
  %333 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %257) #4, !dbg !31
  br label %__nv_sqrtf.exit22, !dbg !31

334:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %337, label %335, !dbg !31

335:                                              ; preds = %334
  %336 = tail call float @llvm.nvvm.sqrt.rn.f(float %257) #4, !dbg !31
  br label %__nv_sqrtf.exit22, !dbg !31

337:                                              ; preds = %334
  %338 = tail call float @llvm.nvvm.sqrt.approx.f(float %257) #4, !dbg !31
  br label %__nv_sqrtf.exit22, !dbg !31

__nv_sqrtf.exit22:                                ; preds = %330, %332, %335, %337
  %.0.i20 = phi float [ %331, %330 ], [ %333, %332 ], [ %336, %335 ], [ %338, %337 ], !dbg !31
  %339 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i23 = icmp eq i32 %339, 0, !dbg !31
  %340 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i26 = icmp eq i32 %340, 0, !dbg !31
  br i1 %.not.i23, label %346, label %341, !dbg !31

341:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %344, label %342, !dbg !31

342:                                              ; preds = %341
  %343 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %258) #4, !dbg !31
  br label %__nv_sqrtf.exit27, !dbg !31

344:                                              ; preds = %341
  %345 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %258) #4, !dbg !31
  br label %__nv_sqrtf.exit27, !dbg !31

346:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %349, label %347, !dbg !31

347:                                              ; preds = %346
  %348 = tail call float @llvm.nvvm.sqrt.rn.f(float %258) #4, !dbg !31
  br label %__nv_sqrtf.exit27, !dbg !31

349:                                              ; preds = %346
  %350 = tail call float @llvm.nvvm.sqrt.approx.f(float %258) #4, !dbg !31
  br label %__nv_sqrtf.exit27, !dbg !31

__nv_sqrtf.exit27:                                ; preds = %342, %344, %347, %349
  %.0.i25 = phi float [ %343, %342 ], [ %345, %344 ], [ %348, %347 ], [ %350, %349 ], !dbg !31
  %351 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i28 = icmp eq i32 %351, 0, !dbg !31
  %352 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i31 = icmp eq i32 %352, 0, !dbg !31
  br i1 %.not.i28, label %358, label %353, !dbg !31

353:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %356, label %354, !dbg !31

354:                                              ; preds = %353
  %355 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %259) #4, !dbg !31
  br label %__nv_sqrtf.exit32, !dbg !31

356:                                              ; preds = %353
  %357 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %259) #4, !dbg !31
  br label %__nv_sqrtf.exit32, !dbg !31

358:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %361, label %359, !dbg !31

359:                                              ; preds = %358
  %360 = tail call float @llvm.nvvm.sqrt.rn.f(float %259) #4, !dbg !31
  br label %__nv_sqrtf.exit32, !dbg !31

361:                                              ; preds = %358
  %362 = tail call float @llvm.nvvm.sqrt.approx.f(float %259) #4, !dbg !31
  br label %__nv_sqrtf.exit32, !dbg !31

__nv_sqrtf.exit32:                                ; preds = %354, %356, %359, %361
  %.0.i30 = phi float [ %355, %354 ], [ %357, %356 ], [ %360, %359 ], [ %362, %361 ], !dbg !31
  %363 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i33 = icmp eq i32 %363, 0, !dbg !31
  %364 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i36 = icmp eq i32 %364, 0, !dbg !31
  br i1 %.not.i33, label %370, label %365, !dbg !31

365:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %368, label %366, !dbg !31

366:                                              ; preds = %365
  %367 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %260) #4, !dbg !31
  br label %__nv_sqrtf.exit37, !dbg !31

368:                                              ; preds = %365
  %369 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %260) #4, !dbg !31
  br label %__nv_sqrtf.exit37, !dbg !31

370:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %373, label %371, !dbg !31

371:                                              ; preds = %370
  %372 = tail call float @llvm.nvvm.sqrt.rn.f(float %260) #4, !dbg !31
  br label %__nv_sqrtf.exit37, !dbg !31

373:                                              ; preds = %370
  %374 = tail call float @llvm.nvvm.sqrt.approx.f(float %260) #4, !dbg !31
  br label %__nv_sqrtf.exit37, !dbg !31

__nv_sqrtf.exit37:                                ; preds = %366, %368, %371, %373
  %.0.i35 = phi float [ %367, %366 ], [ %369, %368 ], [ %372, %371 ], [ %374, %373 ], !dbg !31
  %375 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i38 = icmp eq i32 %375, 0, !dbg !31
  %376 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i41 = icmp eq i32 %376, 0, !dbg !31
  br i1 %.not.i38, label %382, label %377, !dbg !31

377:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %380, label %378, !dbg !31

378:                                              ; preds = %377
  %379 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %266) #4, !dbg !31
  br label %__nv_sqrtf.exit42, !dbg !31

380:                                              ; preds = %377
  %381 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %266) #4, !dbg !31
  br label %__nv_sqrtf.exit42, !dbg !31

382:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %385, label %383, !dbg !31

383:                                              ; preds = %382
  %384 = tail call float @llvm.nvvm.sqrt.rn.f(float %266) #4, !dbg !31
  br label %__nv_sqrtf.exit42, !dbg !31

385:                                              ; preds = %382
  %386 = tail call float @llvm.nvvm.sqrt.approx.f(float %266) #4, !dbg !31
  br label %__nv_sqrtf.exit42, !dbg !31

__nv_sqrtf.exit42:                                ; preds = %378, %380, %383, %385
  %.0.i40 = phi float [ %379, %378 ], [ %381, %380 ], [ %384, %383 ], [ %386, %385 ], !dbg !31
  %387 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i43 = icmp eq i32 %387, 0, !dbg !31
  %388 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i46 = icmp eq i32 %388, 0, !dbg !31
  br i1 %.not.i43, label %394, label %389, !dbg !31

389:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %392, label %390, !dbg !31

390:                                              ; preds = %389
  %391 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %267) #4, !dbg !31
  br label %__nv_sqrtf.exit47, !dbg !31

392:                                              ; preds = %389
  %393 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %267) #4, !dbg !31
  br label %__nv_sqrtf.exit47, !dbg !31

394:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %397, label %395, !dbg !31

395:                                              ; preds = %394
  %396 = tail call float @llvm.nvvm.sqrt.rn.f(float %267) #4, !dbg !31
  br label %__nv_sqrtf.exit47, !dbg !31

397:                                              ; preds = %394
  %398 = tail call float @llvm.nvvm.sqrt.approx.f(float %267) #4, !dbg !31
  br label %__nv_sqrtf.exit47, !dbg !31

__nv_sqrtf.exit47:                                ; preds = %390, %392, %395, %397
  %.0.i45 = phi float [ %391, %390 ], [ %393, %392 ], [ %396, %395 ], [ %398, %397 ], !dbg !31
  %399 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i48 = icmp eq i32 %399, 0, !dbg !31
  %400 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i51 = icmp eq i32 %400, 0, !dbg !31
  br i1 %.not.i48, label %406, label %401, !dbg !31

401:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %404, label %402, !dbg !31

402:                                              ; preds = %401
  %403 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %268) #4, !dbg !31
  br label %__nv_sqrtf.exit52, !dbg !31

404:                                              ; preds = %401
  %405 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %268) #4, !dbg !31
  br label %__nv_sqrtf.exit52, !dbg !31

406:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %409, label %407, !dbg !31

407:                                              ; preds = %406
  %408 = tail call float @llvm.nvvm.sqrt.rn.f(float %268) #4, !dbg !31
  br label %__nv_sqrtf.exit52, !dbg !31

409:                                              ; preds = %406
  %410 = tail call float @llvm.nvvm.sqrt.approx.f(float %268) #4, !dbg !31
  br label %__nv_sqrtf.exit52, !dbg !31

__nv_sqrtf.exit52:                                ; preds = %402, %404, %407, %409
  %.0.i50 = phi float [ %403, %402 ], [ %405, %404 ], [ %408, %407 ], [ %410, %409 ], !dbg !31
  %411 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i53 = icmp eq i32 %411, 0, !dbg !31
  %412 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i56 = icmp eq i32 %412, 0, !dbg !31
  br i1 %.not.i53, label %418, label %413, !dbg !31

413:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %416, label %414, !dbg !31

414:                                              ; preds = %413
  %415 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %269) #4, !dbg !31
  br label %__nv_sqrtf.exit57, !dbg !31

416:                                              ; preds = %413
  %417 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %269) #4, !dbg !31
  br label %__nv_sqrtf.exit57, !dbg !31

418:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %421, label %419, !dbg !31

419:                                              ; preds = %418
  %420 = tail call float @llvm.nvvm.sqrt.rn.f(float %269) #4, !dbg !31
  br label %__nv_sqrtf.exit57, !dbg !31

421:                                              ; preds = %418
  %422 = tail call float @llvm.nvvm.sqrt.approx.f(float %269) #4, !dbg !31
  br label %__nv_sqrtf.exit57, !dbg !31

__nv_sqrtf.exit57:                                ; preds = %414, %416, %419, %421
  %.0.i55 = phi float [ %415, %414 ], [ %417, %416 ], [ %420, %419 ], [ %422, %421 ], !dbg !31
  %423 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i58 = icmp eq i32 %423, 0, !dbg !31
  %424 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i61 = icmp eq i32 %424, 0, !dbg !31
  br i1 %.not.i58, label %430, label %425, !dbg !31

425:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %428, label %426, !dbg !31

426:                                              ; preds = %425
  %427 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %275) #4, !dbg !31
  br label %__nv_sqrtf.exit62, !dbg !31

428:                                              ; preds = %425
  %429 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %275) #4, !dbg !31
  br label %__nv_sqrtf.exit62, !dbg !31

430:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %433, label %431, !dbg !31

431:                                              ; preds = %430
  %432 = tail call float @llvm.nvvm.sqrt.rn.f(float %275) #4, !dbg !31
  br label %__nv_sqrtf.exit62, !dbg !31

433:                                              ; preds = %430
  %434 = tail call float @llvm.nvvm.sqrt.approx.f(float %275) #4, !dbg !31
  br label %__nv_sqrtf.exit62, !dbg !31

__nv_sqrtf.exit62:                                ; preds = %426, %428, %431, %433
  %.0.i60 = phi float [ %427, %426 ], [ %429, %428 ], [ %432, %431 ], [ %434, %433 ], !dbg !31
  %435 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i63 = icmp eq i32 %435, 0, !dbg !31
  %436 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i66 = icmp eq i32 %436, 0, !dbg !31
  br i1 %.not.i63, label %442, label %437, !dbg !31

437:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %440, label %438, !dbg !31

438:                                              ; preds = %437
  %439 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %276) #4, !dbg !31
  br label %__nv_sqrtf.exit67, !dbg !31

440:                                              ; preds = %437
  %441 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %276) #4, !dbg !31
  br label %__nv_sqrtf.exit67, !dbg !31

442:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %445, label %443, !dbg !31

443:                                              ; preds = %442
  %444 = tail call float @llvm.nvvm.sqrt.rn.f(float %276) #4, !dbg !31
  br label %__nv_sqrtf.exit67, !dbg !31

445:                                              ; preds = %442
  %446 = tail call float @llvm.nvvm.sqrt.approx.f(float %276) #4, !dbg !31
  br label %__nv_sqrtf.exit67, !dbg !31

__nv_sqrtf.exit67:                                ; preds = %438, %440, %443, %445
  %.0.i65 = phi float [ %439, %438 ], [ %441, %440 ], [ %444, %443 ], [ %446, %445 ], !dbg !31
  %447 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i68 = icmp eq i32 %447, 0, !dbg !31
  %448 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i71 = icmp eq i32 %448, 0, !dbg !31
  br i1 %.not.i68, label %454, label %449, !dbg !31

449:                                              ; preds = %__nv_sqrtf.exit67
  br i1 %.not1.i71, label %452, label %450, !dbg !31

450:                                              ; preds = %449
  %451 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %277) #4, !dbg !31
  br label %__nv_sqrtf.exit72, !dbg !31

452:                                              ; preds = %449
  %453 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %277) #4, !dbg !31
  br label %__nv_sqrtf.exit72, !dbg !31

454:                                              ; preds = %__nv_sqrtf.exit67
  br i1 %.not1.i71, label %457, label %455, !dbg !31

455:                                              ; preds = %454
  %456 = tail call float @llvm.nvvm.sqrt.rn.f(float %277) #4, !dbg !31
  br label %__nv_sqrtf.exit72, !dbg !31

457:                                              ; preds = %454
  %458 = tail call float @llvm.nvvm.sqrt.approx.f(float %277) #4, !dbg !31
  br label %__nv_sqrtf.exit72, !dbg !31

__nv_sqrtf.exit72:                                ; preds = %450, %452, %455, %457
  %.0.i70 = phi float [ %451, %450 ], [ %453, %452 ], [ %456, %455 ], [ %458, %457 ], !dbg !31
  %459 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i73 = icmp eq i32 %459, 0, !dbg !31
  %460 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i76 = icmp eq i32 %460, 0, !dbg !31
  br i1 %.not.i73, label %466, label %461, !dbg !31

461:                                              ; preds = %__nv_sqrtf.exit72
  br i1 %.not1.i76, label %464, label %462, !dbg !31

462:                                              ; preds = %461
  %463 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %278) #4, !dbg !31
  br label %__nv_sqrtf.exit77, !dbg !31

464:                                              ; preds = %461
  %465 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %278) #4, !dbg !31
  br label %__nv_sqrtf.exit77, !dbg !31

466:                                              ; preds = %__nv_sqrtf.exit72
  br i1 %.not1.i76, label %469, label %467, !dbg !31

467:                                              ; preds = %466
  %468 = tail call float @llvm.nvvm.sqrt.rn.f(float %278) #4, !dbg !31
  br label %__nv_sqrtf.exit77, !dbg !31

469:                                              ; preds = %466
  %470 = tail call float @llvm.nvvm.sqrt.approx.f(float %278) #4, !dbg !31
  br label %__nv_sqrtf.exit77, !dbg !31

__nv_sqrtf.exit77:                                ; preds = %462, %464, %467, %469
  %.0.i75 = phi float [ %463, %462 ], [ %465, %464 ], [ %468, %467 ], [ %470, %469 ], !dbg !31
  %471 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !32
  %472 = fadd float %.0.i5, 0x3DDB7CDFE0000000, !dbg !32
  %473 = fadd float %.0.i10, 0x3DDB7CDFE0000000, !dbg !32
  %474 = fadd float %.0.i15, 0x3DDB7CDFE0000000, !dbg !32
  %475 = fadd float %.0.i20, 0x3DDB7CDFE0000000, !dbg !32
  %476 = fadd float %.0.i25, 0x3DDB7CDFE0000000, !dbg !32
  %477 = fadd float %.0.i30, 0x3DDB7CDFE0000000, !dbg !32
  %478 = fadd float %.0.i35, 0x3DDB7CDFE0000000, !dbg !32
  %479 = fadd float %.0.i40, 0x3DDB7CDFE0000000, !dbg !32
  %480 = fadd float %.0.i45, 0x3DDB7CDFE0000000, !dbg !32
  %481 = fadd float %.0.i50, 0x3DDB7CDFE0000000, !dbg !32
  %482 = fadd float %.0.i55, 0x3DDB7CDFE0000000, !dbg !32
  %483 = fadd float %.0.i60, 0x3DDB7CDFE0000000, !dbg !32
  %484 = fadd float %.0.i65, 0x3DDB7CDFE0000000, !dbg !32
  %485 = fadd float %.0.i70, 0x3DDB7CDFE0000000, !dbg !32
  %486 = fadd float %.0.i75, 0x3DDB7CDFE0000000, !dbg !32
  %487 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %156, float %471) #4, !dbg !33
  %488 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %160, float %472) #4, !dbg !33
  %489 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %163, float %473) #4, !dbg !33
  %490 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %166, float %474) #4, !dbg !33
  %491 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %171, float %475) #4, !dbg !33
  %492 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %176, float %476) #4, !dbg !33
  %493 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %181, float %477) #4, !dbg !33
  %494 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %186, float %478) #4, !dbg !33
  %495 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %191, float %479) #4, !dbg !33
  %496 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %196, float %480) #4, !dbg !33
  %497 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %201, float %481) #4, !dbg !33
  %498 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %206, float %482) #4, !dbg !33
  %499 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %211, float %483) #4, !dbg !33
  %500 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %216, float %484) #4, !dbg !33
  %501 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %221, float %485) #4, !dbg !33
  %502 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %226, float %486) #4, !dbg !33
  %503 = shl i32 %13, 8, !dbg !34
  %504 = shl i32 %14, 8, !dbg !34
  %505 = shl i32 %15, 8, !dbg !34
  %506 = shl i32 %16, 8, !dbg !34
  %507 = add i32 %26, %503, !dbg !35
  %508 = add i32 %26, %504, !dbg !35
  %509 = add i32 %26, %505, !dbg !35
  %510 = add i32 %26, %506, !dbg !35
  %511 = sext i32 %507 to i64, !dbg !36
  %512 = getelementptr float, ptr addrspace(1) %2, i64 %511, !dbg !36
  %513 = sext i32 %508 to i64, !dbg !36
  %514 = getelementptr float, ptr addrspace(1) %2, i64 %513, !dbg !36
  %515 = sext i32 %509 to i64, !dbg !36
  %516 = getelementptr float, ptr addrspace(1) %2, i64 %515, !dbg !36
  %517 = sext i32 %510 to i64, !dbg !36
  %518 = getelementptr float, ptr addrspace(1) %2, i64 %517, !dbg !36
  %519 = bitcast float %487 to i32, !dbg !37
  %520 = bitcast float %488 to i32, !dbg !37
  %521 = bitcast float %489 to i32, !dbg !37
  %522 = bitcast float %490 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %519, i32 %520, i32 %521, i32 %522, ptr addrspace(1) %512, i1 %31) #4, !dbg !37
  %523 = bitcast float %491 to i32, !dbg !37
  %524 = bitcast float %492 to i32, !dbg !37
  %525 = bitcast float %493 to i32, !dbg !37
  %526 = bitcast float %494 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %523, i32 %524, i32 %525, i32 %526, ptr addrspace(1) %514, i1 %31) #4, !dbg !37
  %527 = bitcast float %495 to i32, !dbg !37
  %528 = bitcast float %496 to i32, !dbg !37
  %529 = bitcast float %497 to i32, !dbg !37
  %530 = bitcast float %498 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %527, i32 %528, i32 %529, i32 %530, ptr addrspace(1) %516, i1 %31) #4, !dbg !37
  %531 = bitcast float %499 to i32, !dbg !37
  %532 = bitcast float %500 to i32, !dbg !37
  %533 = bitcast float %501 to i32, !dbg !37
  %534 = bitcast float %502 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %531, i32 %532, i32 %533, i32 %534, ptr addrspace(1) %518, i1 %31) #4, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbz4vrgsakrmgibrwoz3lrwtgpdjfh3eyl7xoetset6qrmexmdew.py", directory: "inductor_cache/bz")
!4 = !{ptr @triton_poi_fused_add_div_sqrt_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_sqrt_18, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_sqrt_18", linkageName: "triton_poi_fused_add_div_sqrt_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 39, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 44, scope: !7)
!31 = !DILocation(line: 34, column: 26, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 18, scope: !7)
!34 = !DILocation(line: 38, column: 34, scope: !7)
!35 = !DILocation(line: 38, column: 30, scope: !7)
!36 = !DILocation(line: 38, column: 25, scope: !7)
!37 = !DILocation(line: 38, column: 45, scope: !7)
!38 = !DILocation(line: 38, column: 4, scope: !7)
