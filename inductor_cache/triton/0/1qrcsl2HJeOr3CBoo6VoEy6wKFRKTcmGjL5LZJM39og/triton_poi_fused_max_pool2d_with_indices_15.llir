; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 7, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 1, !dbg !12
  %10 = and i32 %8, 127, !dbg !12
  %11 = lshr i32 %8, 1, !dbg !12
  %12 = and i32 %11, 63, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = or disjoint i32 %14, 64, !dbg !13
  %16 = icmp slt i32 %13, 100, !dbg !14
  %17 = icmp slt i32 %14, 100, !dbg !14
  %18 = icmp slt i32 %15, 100, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 1, !dbg !16
  %21 = or disjoint i32 %20, %9, !dbg !17
  %22 = icmp slt i32 %20, 192, !dbg !18
  %23 = icmp slt i32 %21, 192, !dbg !18
  %.frozen = freeze i32 %13, !dbg !19
  %24 = sdiv i32 %.frozen, 5, !dbg !19
  %25 = mul i32 %24, 5, !dbg !20
  %.decomposed = sub i32 %.frozen, %25, !dbg !20
  %26 = srem i32 %24, 5, !dbg !21
  %27 = sdiv i32 %13, 25, !dbg !22
  %.frozen9 = freeze i32 %14, !dbg !22
  %28 = sdiv i32 %.frozen9, 25, !dbg !22
  %.frozen11 = freeze i32 %15, !dbg !22
  %29 = sdiv i32 %.frozen11, 25, !dbg !22
  %30 = mul i32 %28, 25, !dbg !23
  %.decomposed10 = sub i32 %.frozen9, %30, !dbg !23
  %31 = mul i32 %29, 25, !dbg !23
  %.decomposed12 = sub i32 %.frozen11, %31, !dbg !23
  %32 = mul nsw i32 %.decomposed, 384, !dbg !24
  %33 = add i32 %32, %20, !dbg !25
  %34 = mul nsw i32 %26, 4608, !dbg !26
  %35 = mul i32 %27, 27648, !dbg !27
  %36 = add i32 %33, %35, !dbg !28
  %37 = add i32 %36, %34, !dbg !29
  %38 = sext i32 %37 to i64, !dbg !30
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !30
  %40 = and i1 %22, %16, !dbg !31
  %41 = and i1 %17, %23, !dbg !31
  %42 = and i1 %18, %23, !dbg !31
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 %40) #2, !dbg !32
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !32
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !32
  %46 = add i32 %33, 192, !dbg !33
  %47 = add i32 %46, %35, !dbg !34
  %48 = add i32 %47, %34, !dbg !35
  %49 = sext i32 %48 to i64, !dbg !36
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !36
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %40) #2, !dbg !37
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !37
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !37
  %54 = add i32 %33, 384, !dbg !38
  %55 = add i32 %54, %35, !dbg !39
  %56 = add i32 %55, %34, !dbg !40
  %57 = sext i32 %56 to i64, !dbg !41
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !41
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %58, i1 %40) #2, !dbg !42
  %60 = extractvalue { i32, i32 } %59, 0, !dbg !42
  %61 = extractvalue { i32, i32 } %59, 1, !dbg !42
  %62 = add i32 %33, 2304, !dbg !43
  %63 = add i32 %62, %35, !dbg !44
  %64 = add i32 %63, %34, !dbg !45
  %65 = sext i32 %64 to i64, !dbg !46
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !46
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %66, i1 %40) #2, !dbg !47
  %68 = extractvalue { i32, i32 } %67, 0, !dbg !47
  %69 = extractvalue { i32, i32 } %67, 1, !dbg !47
  %70 = add i32 %33, 2496, !dbg !48
  %71 = add i32 %70, %35, !dbg !49
  %72 = add i32 %71, %34, !dbg !50
  %73 = sext i32 %72 to i64, !dbg !51
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !51
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %74, i1 %40) #2, !dbg !52
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !52
  %77 = extractvalue { i32, i32 } %75, 1, !dbg !52
  %78 = add i32 %33, 2688, !dbg !53
  %79 = add i32 %78, %35, !dbg !54
  %80 = add i32 %79, %34, !dbg !55
  %81 = sext i32 %80 to i64, !dbg !56
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !56
  %83 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %82, i1 %40) #2, !dbg !57
  %84 = extractvalue { i32, i32 } %83, 0, !dbg !57
  %85 = extractvalue { i32, i32 } %83, 1, !dbg !57
  %86 = add i32 %33, 4608, !dbg !58
  %87 = add i32 %86, %35, !dbg !59
  %88 = add i32 %87, %34, !dbg !60
  %89 = sext i32 %88 to i64, !dbg !61
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !61
  %91 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %90, i1 %40) #2, !dbg !62
  %92 = extractvalue { i32, i32 } %91, 0, !dbg !62
  %93 = extractvalue { i32, i32 } %91, 1, !dbg !62
  %94 = add i32 %33, 4800, !dbg !63
  %95 = add i32 %94, %35, !dbg !64
  %96 = add i32 %95, %34, !dbg !65
  %97 = sext i32 %96 to i64, !dbg !66
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !66
  %99 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %98, i1 %40) #2, !dbg !67
  %100 = extractvalue { i32, i32 } %99, 0, !dbg !67
  %101 = extractvalue { i32, i32 } %99, 1, !dbg !67
  %102 = add i32 %33, 4992, !dbg !68
  %103 = add i32 %102, %35, !dbg !69
  %104 = add i32 %103, %34, !dbg !70
  %105 = sext i32 %104 to i64, !dbg !71
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !71
  %107 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %106, i1 %40) #2, !dbg !72
  %108 = extractvalue { i32, i32 } %107, 0, !dbg !72
  %109 = extractvalue { i32, i32 } %107, 1, !dbg !72
  %110 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !32
  %111 = insertelement <2 x i32> %110, i32 %45, i64 1, !dbg !32
  %112 = bitcast <2 x i32> %111 to <2 x float>, !dbg !32
  %113 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !37
  %114 = insertelement <2 x i32> %113, i32 %53, i64 1, !dbg !37
  %115 = bitcast <2 x i32> %114 to <2 x float>, !dbg !37
  %116 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !42
  %117 = insertelement <2 x i32> %116, i32 %61, i64 1, !dbg !42
  %118 = bitcast <2 x i32> %117 to <2 x float>, !dbg !42
  %119 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !47
  %120 = insertelement <2 x i32> %119, i32 %69, i64 1, !dbg !47
  %121 = bitcast <2 x i32> %120 to <2 x float>, !dbg !47
  %122 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !52
  %123 = insertelement <2 x i32> %122, i32 %77, i64 1, !dbg !52
  %124 = bitcast <2 x i32> %123 to <2 x float>, !dbg !52
  %125 = insertelement <2 x i32> poison, i32 %84, i64 0, !dbg !57
  %126 = insertelement <2 x i32> %125, i32 %85, i64 1, !dbg !57
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !57
  %128 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !62
  %129 = insertelement <2 x i32> %128, i32 %93, i64 1, !dbg !62
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !62
  %131 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !67
  %132 = insertelement <2 x i32> %131, i32 %101, i64 1, !dbg !67
  %133 = bitcast <2 x i32> %132 to <2 x float>, !dbg !67
  %134 = insertelement <2 x i32> poison, i32 %108, i64 0, !dbg !72
  %135 = insertelement <2 x i32> %134, i32 %109, i64 1, !dbg !72
  %136 = bitcast <2 x i32> %135 to <2 x float>, !dbg !72
  %137 = fcmp ogt <2 x float> %115, %112, !dbg !73
  %138 = fcmp uno <2 x float> %115, zeroinitializer, !dbg !77
  %139 = or <2 x i1> %137, %138, !dbg !78
  %.v = select <2 x i1> %139, <2 x i32> %114, <2 x i32> %111, !dbg !79
  %140 = bitcast <2 x i32> %.v to <2 x float>, !dbg !79
  %141 = fcmp olt <2 x float> %140, %118, !dbg !80
  %142 = fcmp uno <2 x float> %118, zeroinitializer, !dbg !82
  %143 = or <2 x i1> %142, %141, !dbg !83
  %.v3 = select <2 x i1> %143, <2 x i32> %117, <2 x i32> %.v, !dbg !84
  %144 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !84
  %145 = fcmp olt <2 x float> %144, %121, !dbg !85
  %146 = fcmp uno <2 x float> %121, zeroinitializer, !dbg !87
  %147 = or <2 x i1> %146, %145, !dbg !88
  %.v4 = select <2 x i1> %147, <2 x i32> %120, <2 x i32> %.v3, !dbg !89
  %148 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !89
  %149 = fcmp olt <2 x float> %148, %124, !dbg !90
  %150 = fcmp uno <2 x float> %124, zeroinitializer, !dbg !92
  %151 = or <2 x i1> %150, %149, !dbg !93
  %.v5 = select <2 x i1> %151, <2 x i32> %123, <2 x i32> %.v4, !dbg !94
  %152 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !94
  %153 = fcmp olt <2 x float> %152, %127, !dbg !95
  %154 = fcmp uno <2 x float> %127, zeroinitializer, !dbg !97
  %155 = or <2 x i1> %154, %153, !dbg !98
  %.v6 = select <2 x i1> %155, <2 x i32> %126, <2 x i32> %.v5, !dbg !99
  %156 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !99
  %157 = fcmp olt <2 x float> %156, %130, !dbg !100
  %158 = fcmp uno <2 x float> %130, zeroinitializer, !dbg !102
  %159 = or <2 x i1> %158, %157, !dbg !103
  %.v7 = select <2 x i1> %159, <2 x i32> %129, <2 x i32> %.v6, !dbg !104
  %160 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !104
  %161 = fcmp olt <2 x float> %160, %133, !dbg !105
  %162 = fcmp uno <2 x float> %133, zeroinitializer, !dbg !107
  %163 = or <2 x i1> %162, %161, !dbg !108
  %.v8 = select <2 x i1> %163, <2 x i32> %132, <2 x i32> %.v7, !dbg !109
  %164 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !109
  %165 = fcmp olt <2 x float> %164, %136, !dbg !110
  %166 = bitcast i32 %108 to float, !dbg !112
  %167 = fcmp uno float %166, 0.000000e+00, !dbg !112
  %168 = bitcast i32 %109 to float, !dbg !112
  %169 = fcmp uno float %168, 0.000000e+00, !dbg !112
  %170 = extractelement <2 x i1> %165, i64 0, !dbg !113
  %171 = or i1 %167, %170, !dbg !113
  %172 = extractelement <2 x i1> %165, i64 1, !dbg !113
  %173 = or i1 %169, %172, !dbg !113
  %174 = zext <2 x i1> %137 to <2 x i8>, !dbg !114
  %175 = select <2 x i1> %141, <2 x i8> splat (i8 2), <2 x i8> %174, !dbg !115
  %176 = select <2 x i1> %145, <2 x i8> splat (i8 3), <2 x i8> %175, !dbg !116
  %177 = select <2 x i1> %149, <2 x i8> splat (i8 4), <2 x i8> %176, !dbg !117
  %178 = select <2 x i1> %153, <2 x i8> splat (i8 5), <2 x i8> %177, !dbg !118
  %179 = select <2 x i1> %157, <2 x i8> splat (i8 6), <2 x i8> %178, !dbg !119
  %180 = select <2 x i1> %161, <2 x i8> splat (i8 7), <2 x i8> %179, !dbg !120
  %181 = select <2 x i1> %165, <2 x i8> splat (i8 8), <2 x i8> %180, !dbg !121
  %182 = mul i32 %21, 25, !dbg !122
  %183 = add i32 %182, %.decomposed10, !dbg !123
  %184 = mul i32 %28, 9600, !dbg !124
  %185 = mul i32 %29, 9600, !dbg !124
  %186 = add i32 %183, %184, !dbg !125
  %187 = add i32 %185, %.decomposed12, !dbg !123
  %188 = add i32 %187, %182, !dbg !125
  %189 = sext i32 %186 to i64, !dbg !126
  %190 = getelementptr float, ptr addrspace(1) %1, i64 %189, !dbg !126
  %191 = sext i32 %188 to i64, !dbg !126
  %192 = getelementptr float, ptr addrspace(1) %1, i64 %191, !dbg !126
  %193 = shl i32 %8, 1, !dbg !127
  %194 = and i32 %193, 254, !dbg !127
  %195 = lshr exact i32 %194, 1, !dbg !127
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i32 %195, !dbg !127
  %197 = getelementptr inbounds float, ptr addrspace(3) %196, i32 %194, !dbg !127
  %198 = extractelement <2 x i32> %.v8, i64 0, !dbg !127
  %199 = select i1 %171, i32 %108, i32 %198, !dbg !128
  %200 = insertelement <1 x i32> poison, i32 %199, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %200, i1 true) #2, !dbg !127
  %201 = or disjoint i32 %194, 1, !dbg !127
  %202 = getelementptr float, ptr addrspace(3) %196, i32 %201, !dbg !127
  %203 = extractelement <2 x i32> %.v8, i64 1, !dbg !127
  %204 = select i1 %173, i32 %109, i32 %203, !dbg !128
  %205 = insertelement <1 x i32> poison, i32 %204, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %205, i1 true) #2, !dbg !127
  tail call void @llvm.nvvm.barrier0(), !dbg !127
  %206 = lshr i32 %10, 1, !dbg !127
  %207 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %206, !dbg !127
  %208 = getelementptr inbounds float, ptr addrspace(3) %207, i32 %10, !dbg !127
  %209 = load i32, ptr addrspace(3) %208, align 4, !dbg !127
  %210 = or disjoint i32 %10, 128, !dbg !127
  %211 = lshr i32 %210, 1, !dbg !127
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %211, !dbg !127
  %213 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %210, !dbg !127
  %214 = load i32, ptr addrspace(3) %213, align 4, !dbg !127
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %209, ptr addrspace(1) %190, i1 %41) #2, !dbg !127
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %214, ptr addrspace(1) %192, i1 %42) #2, !dbg !127
  %215 = mul i32 %13, 192, !dbg !129
  %216 = add i32 %215, %20, !dbg !130
  %217 = sext i32 %216 to i64, !dbg !131
  %218 = getelementptr i8, ptr addrspace(1) %2, i64 %217, !dbg !131
  %219 = bitcast <2 x i8> %181 to i16, !dbg !132
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %219, ptr addrspace(1) %218, i1 %40) #2, !dbg !132
  ret void, !dbg !133
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csk4patw64wyyauubq2apj5exudhvnrbe3hjord7juata62i3f4p.py", directory: "inductor_cache/sk")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_15", linkageName: "triton_poi_fused_max_pool2d_with_indices_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 21, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 26, scope: !7)
!22 = !DILocation(line: 31, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 49, scope: !7)
!27 = !DILocation(line: 34, column: 60, scope: !7)
!28 = !DILocation(line: 34, column: 44, scope: !7)
!29 = !DILocation(line: 34, column: 54, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 73, scope: !7)
!32 = !DILocation(line: 34, column: 65, scope: !7)
!33 = !DILocation(line: 35, column: 41, scope: !7)
!34 = !DILocation(line: 35, column: 50, scope: !7)
!35 = !DILocation(line: 35, column: 60, scope: !7)
!36 = !DILocation(line: 35, column: 30, scope: !7)
!37 = !DILocation(line: 35, column: 71, scope: !7)
!38 = !DILocation(line: 36, column: 41, scope: !7)
!39 = !DILocation(line: 36, column: 50, scope: !7)
!40 = !DILocation(line: 36, column: 60, scope: !7)
!41 = !DILocation(line: 36, column: 30, scope: !7)
!42 = !DILocation(line: 36, column: 71, scope: !7)
!43 = !DILocation(line: 37, column: 42, scope: !7)
!44 = !DILocation(line: 37, column: 51, scope: !7)
!45 = !DILocation(line: 37, column: 61, scope: !7)
!46 = !DILocation(line: 37, column: 30, scope: !7)
!47 = !DILocation(line: 37, column: 72, scope: !7)
!48 = !DILocation(line: 38, column: 42, scope: !7)
!49 = !DILocation(line: 38, column: 51, scope: !7)
!50 = !DILocation(line: 38, column: 61, scope: !7)
!51 = !DILocation(line: 38, column: 30, scope: !7)
!52 = !DILocation(line: 38, column: 72, scope: !7)
!53 = !DILocation(line: 39, column: 42, scope: !7)
!54 = !DILocation(line: 39, column: 51, scope: !7)
!55 = !DILocation(line: 39, column: 61, scope: !7)
!56 = !DILocation(line: 39, column: 30, scope: !7)
!57 = !DILocation(line: 39, column: 72, scope: !7)
!58 = !DILocation(line: 40, column: 43, scope: !7)
!59 = !DILocation(line: 40, column: 52, scope: !7)
!60 = !DILocation(line: 40, column: 62, scope: !7)
!61 = !DILocation(line: 40, column: 31, scope: !7)
!62 = !DILocation(line: 40, column: 73, scope: !7)
!63 = !DILocation(line: 41, column: 43, scope: !7)
!64 = !DILocation(line: 41, column: 52, scope: !7)
!65 = !DILocation(line: 41, column: 62, scope: !7)
!66 = !DILocation(line: 41, column: 31, scope: !7)
!67 = !DILocation(line: 41, column: 73, scope: !7)
!68 = !DILocation(line: 42, column: 43, scope: !7)
!69 = !DILocation(line: 42, column: 52, scope: !7)
!70 = !DILocation(line: 42, column: 62, scope: !7)
!71 = !DILocation(line: 42, column: 31, scope: !7)
!72 = !DILocation(line: 42, column: 73, scope: !7)
!73 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !76)
!74 = distinct !DILexicalBlockFile(scope: !7, file: !75, discriminator: 0)
!75 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!76 = !DILocation(line: 43, column: 40, scope: !7)
!77 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !76)
!78 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !76)
!79 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !76)
!80 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !81)
!81 = !DILocation(line: 44, column: 40, scope: !7)
!82 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !81)
!83 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !81)
!84 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !81)
!85 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !86)
!86 = !DILocation(line: 45, column: 40, scope: !7)
!87 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !86)
!88 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !86)
!89 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !86)
!90 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !91)
!91 = !DILocation(line: 46, column: 40, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !91)
!95 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !96)
!96 = !DILocation(line: 47, column: 41, scope: !7)
!97 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !96)
!98 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !96)
!99 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !96)
!100 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !101)
!101 = !DILocation(line: 48, column: 42, scope: !7)
!102 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !101)
!103 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !101)
!104 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !101)
!105 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !106)
!106 = !DILocation(line: 49, column: 42, scope: !7)
!107 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !106)
!108 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !106)
!109 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !106)
!110 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !111)
!111 = !DILocation(line: 50, column: 42, scope: !7)
!112 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !111)
!113 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !111)
!114 = !DILocation(line: 54, column: 35, scope: !7)
!115 = !DILocation(line: 57, column: 35, scope: !7)
!116 = !DILocation(line: 60, column: 35, scope: !7)
!117 = !DILocation(line: 63, column: 35, scope: !7)
!118 = !DILocation(line: 66, column: 35, scope: !7)
!119 = !DILocation(line: 69, column: 35, scope: !7)
!120 = !DILocation(line: 72, column: 35, scope: !7)
!121 = !DILocation(line: 75, column: 35, scope: !7)
!122 = !DILocation(line: 76, column: 33, scope: !7)
!123 = !DILocation(line: 76, column: 30, scope: !7)
!124 = !DILocation(line: 76, column: 43, scope: !7)
!125 = !DILocation(line: 76, column: 38, scope: !7)
!126 = !DILocation(line: 76, column: 25, scope: !7)
!127 = !DILocation(line: 76, column: 55, scope: !7)
!128 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !111)
!129 = !DILocation(line: 77, column: 34, scope: !7)
!130 = !DILocation(line: 77, column: 30, scope: !7)
!131 = !DILocation(line: 77, column: 25, scope: !7)
!132 = !DILocation(line: 77, column: 46, scope: !7)
!133 = !DILocation(line: 77, column: 4, scope: !7)
