; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 512, !dbg !13
  %13 = srem i32 %11, 64, !dbg !14
  %14 = sext i32 %11 to i64, !dbg !15
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !15
  %16 = sext i32 %12 to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !15
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #3, !dbg !16
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #3, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !17
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !18
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !18
  %24 = sext i32 %13 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !19
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !20
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !21
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !22
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !22
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !22
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !22
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !22
  %34 = bitcast i32 %30 to float, !dbg !22
  %35 = bitcast i32 %31 to float, !dbg !22
  %36 = bitcast i32 %32 to float, !dbg !22
  %37 = bitcast i32 %33 to float, !dbg !22
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !22
  %43 = bitcast i32 %39 to float, !dbg !22
  %44 = bitcast i32 %40 to float, !dbg !22
  %45 = bitcast i32 %41 to float, !dbg !22
  %46 = bitcast i32 %42 to float, !dbg !22
  %47 = fadd float %34, 0x3EE4F8B580000000, !dbg !23
  %48 = fadd float %35, 0x3EE4F8B580000000, !dbg !23
  %49 = fadd float %36, 0x3EE4F8B580000000, !dbg !23
  %50 = fadd float %37, 0x3EE4F8B580000000, !dbg !23
  %51 = fadd float %43, 0x3EE4F8B580000000, !dbg !23
  %52 = fadd float %44, 0x3EE4F8B580000000, !dbg !23
  %53 = fadd float %45, 0x3EE4F8B580000000, !dbg !23
  %54 = fadd float %46, 0x3EE4F8B580000000, !dbg !23
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i = icmp eq i32 %55, 0, !dbg !24
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i = icmp eq i32 %56, 0, !dbg !24
  br i1 %.not.i, label %62, label %57, !dbg !24

57:                                               ; preds = %5
  br i1 %.not1.i, label %60, label %58, !dbg !24

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #3, !dbg !24
  br label %__nv_sqrtf.exit, !dbg !24

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #3, !dbg !24
  br label %__nv_sqrtf.exit, !dbg !24

62:                                               ; preds = %5
  br i1 %.not1.i, label %65, label %63, !dbg !24

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #3, !dbg !24
  br label %__nv_sqrtf.exit, !dbg !24

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #3, !dbg !24
  br label %__nv_sqrtf.exit, !dbg !24

__nv_sqrtf.exit:                                  ; preds = %58, %60, %63, %65
  %.0.i = phi float [ %59, %58 ], [ %61, %60 ], [ %64, %63 ], [ %66, %65 ], !dbg !24
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i1 = icmp eq i32 %67, 0, !dbg !24
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i4 = icmp eq i32 %68, 0, !dbg !24
  br i1 %.not.i1, label %74, label %69, !dbg !24

69:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %72, label %70, !dbg !24

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #3, !dbg !24
  br label %__nv_sqrtf.exit5, !dbg !24

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #3, !dbg !24
  br label %__nv_sqrtf.exit5, !dbg !24

74:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %77, label %75, !dbg !24

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #3, !dbg !24
  br label %__nv_sqrtf.exit5, !dbg !24

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #3, !dbg !24
  br label %__nv_sqrtf.exit5, !dbg !24

__nv_sqrtf.exit5:                                 ; preds = %70, %72, %75, %77
  %.0.i3 = phi float [ %71, %70 ], [ %73, %72 ], [ %76, %75 ], [ %78, %77 ], !dbg !24
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i6 = icmp eq i32 %79, 0, !dbg !24
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i9 = icmp eq i32 %80, 0, !dbg !24
  br i1 %.not.i6, label %86, label %81, !dbg !24

81:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %84, label %82, !dbg !24

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #3, !dbg !24
  br label %__nv_sqrtf.exit10, !dbg !24

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #3, !dbg !24
  br label %__nv_sqrtf.exit10, !dbg !24

86:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %89, label %87, !dbg !24

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #3, !dbg !24
  br label %__nv_sqrtf.exit10, !dbg !24

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #3, !dbg !24
  br label %__nv_sqrtf.exit10, !dbg !24

__nv_sqrtf.exit10:                                ; preds = %82, %84, %87, %89
  %.0.i8 = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !24
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i11 = icmp eq i32 %91, 0, !dbg !24
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i14 = icmp eq i32 %92, 0, !dbg !24
  br i1 %.not.i11, label %98, label %93, !dbg !24

93:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %96, label %94, !dbg !24

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #3, !dbg !24
  br label %__nv_sqrtf.exit15, !dbg !24

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #3, !dbg !24
  br label %__nv_sqrtf.exit15, !dbg !24

98:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %101, label %99, !dbg !24

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #3, !dbg !24
  br label %__nv_sqrtf.exit15, !dbg !24

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #3, !dbg !24
  br label %__nv_sqrtf.exit15, !dbg !24

__nv_sqrtf.exit15:                                ; preds = %94, %96, %99, %101
  %.0.i13 = phi float [ %95, %94 ], [ %97, %96 ], [ %100, %99 ], [ %102, %101 ], !dbg !24
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i16 = icmp eq i32 %103, 0, !dbg !24
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i19 = icmp eq i32 %104, 0, !dbg !24
  br i1 %.not.i16, label %110, label %105, !dbg !24

105:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %108, label %106, !dbg !24

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #3, !dbg !24
  br label %__nv_sqrtf.exit20, !dbg !24

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #3, !dbg !24
  br label %__nv_sqrtf.exit20, !dbg !24

110:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %113, label %111, !dbg !24

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #3, !dbg !24
  br label %__nv_sqrtf.exit20, !dbg !24

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #3, !dbg !24
  br label %__nv_sqrtf.exit20, !dbg !24

__nv_sqrtf.exit20:                                ; preds = %106, %108, %111, %113
  %.0.i18 = phi float [ %107, %106 ], [ %109, %108 ], [ %112, %111 ], [ %114, %113 ], !dbg !24
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i21 = icmp eq i32 %115, 0, !dbg !24
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i24 = icmp eq i32 %116, 0, !dbg !24
  br i1 %.not.i21, label %122, label %117, !dbg !24

117:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %120, label %118, !dbg !24

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #3, !dbg !24
  br label %__nv_sqrtf.exit25, !dbg !24

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #3, !dbg !24
  br label %__nv_sqrtf.exit25, !dbg !24

122:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %125, label %123, !dbg !24

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #3, !dbg !24
  br label %__nv_sqrtf.exit25, !dbg !24

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #3, !dbg !24
  br label %__nv_sqrtf.exit25, !dbg !24

__nv_sqrtf.exit25:                                ; preds = %118, %120, %123, %125
  %.0.i23 = phi float [ %119, %118 ], [ %121, %120 ], [ %124, %123 ], [ %126, %125 ], !dbg !24
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i26 = icmp eq i32 %127, 0, !dbg !24
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i29 = icmp eq i32 %128, 0, !dbg !24
  br i1 %.not.i26, label %134, label %129, !dbg !24

129:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %132, label %130, !dbg !24

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #3, !dbg !24
  br label %__nv_sqrtf.exit30, !dbg !24

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #3, !dbg !24
  br label %__nv_sqrtf.exit30, !dbg !24

134:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %137, label %135, !dbg !24

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #3, !dbg !24
  br label %__nv_sqrtf.exit30, !dbg !24

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #3, !dbg !24
  br label %__nv_sqrtf.exit30, !dbg !24

__nv_sqrtf.exit30:                                ; preds = %130, %132, %135, %137
  %.0.i28 = phi float [ %131, %130 ], [ %133, %132 ], [ %136, %135 ], [ %138, %137 ], !dbg !24
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i31 = icmp eq i32 %139, 0, !dbg !24
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i34 = icmp eq i32 %140, 0, !dbg !24
  br i1 %.not.i31, label %146, label %141, !dbg !24

141:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %144, label %142, !dbg !24

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #3, !dbg !24
  br label %__nv_sqrtf.exit35, !dbg !24

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #3, !dbg !24
  br label %__nv_sqrtf.exit35, !dbg !24

146:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %149, label %147, !dbg !24

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #3, !dbg !24
  br label %__nv_sqrtf.exit35, !dbg !24

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #3, !dbg !24
  br label %__nv_sqrtf.exit35, !dbg !24

__nv_sqrtf.exit35:                                ; preds = %142, %144, %147, %149
  %.0.i33 = phi float [ %143, %142 ], [ %145, %144 ], [ %148, %147 ], [ %150, %149 ], !dbg !24
  %151 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !16
  %152 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !18
  %153 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !20
  %154 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !16
  %155 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !18
  %156 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !20
  %157 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !16
  %158 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !18
  %159 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !20
  %160 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !16
  %161 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !18
  %162 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !20
  %163 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !16
  %164 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !18
  %165 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !20
  %166 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !16
  %167 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !18
  %168 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !20
  %169 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !16
  %170 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !18
  %171 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !20
  %172 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !16
  %173 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !18
  %174 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !20
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !25
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !25
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !25
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !25
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !25
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !25
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !25
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !25
  %183 = insertelement <8 x i32> poison, i32 %151, i64 0, !dbg !16
  %184 = insertelement <8 x i32> %183, i32 %154, i64 1, !dbg !16
  %185 = insertelement <8 x i32> %184, i32 %157, i64 2, !dbg !16
  %186 = insertelement <8 x i32> %185, i32 %160, i64 3, !dbg !16
  %187 = insertelement <8 x i32> %186, i32 %163, i64 4, !dbg !16
  %188 = insertelement <8 x i32> %187, i32 %166, i64 5, !dbg !16
  %189 = insertelement <8 x i32> %188, i32 %169, i64 6, !dbg !16
  %190 = insertelement <8 x i32> %189, i32 %172, i64 7, !dbg !16
  %191 = bitcast <8 x i32> %190 to <8 x float>, !dbg !16
  %192 = insertelement <8 x i32> poison, i32 %152, i64 0, !dbg !18
  %193 = insertelement <8 x i32> %192, i32 %155, i64 1, !dbg !18
  %194 = insertelement <8 x i32> %193, i32 %158, i64 2, !dbg !18
  %195 = insertelement <8 x i32> %194, i32 %161, i64 3, !dbg !18
  %196 = insertelement <8 x i32> %195, i32 %164, i64 4, !dbg !18
  %197 = insertelement <8 x i32> %196, i32 %167, i64 5, !dbg !18
  %198 = insertelement <8 x i32> %197, i32 %170, i64 6, !dbg !18
  %199 = insertelement <8 x i32> %198, i32 %173, i64 7, !dbg !18
  %200 = bitcast <8 x i32> %199 to <8 x float>, !dbg !18
  %201 = fadd <8 x float> %191, %200, !dbg !26
  %202 = insertelement <8 x i32> poison, i32 %153, i64 0, !dbg !20
  %203 = insertelement <8 x i32> %202, i32 %156, i64 1, !dbg !20
  %204 = insertelement <8 x i32> %203, i32 %159, i64 2, !dbg !20
  %205 = insertelement <8 x i32> %204, i32 %162, i64 3, !dbg !20
  %206 = insertelement <8 x i32> %205, i32 %165, i64 4, !dbg !20
  %207 = insertelement <8 x i32> %206, i32 %168, i64 5, !dbg !20
  %208 = insertelement <8 x i32> %207, i32 %171, i64 6, !dbg !20
  %209 = insertelement <8 x i32> %208, i32 %174, i64 7, !dbg !20
  %210 = bitcast <8 x i32> %209 to <8 x float>, !dbg !20
  %211 = fsub <8 x float> %201, %210, !dbg !27
  %212 = insertelement <8 x float> poison, float %182, i64 0, !dbg !28
  %213 = insertelement <8 x float> %212, float %181, i64 1, !dbg !28
  %214 = insertelement <8 x float> %213, float %180, i64 2, !dbg !28
  %215 = insertelement <8 x float> %214, float %179, i64 3, !dbg !28
  %216 = insertelement <8 x float> %215, float %178, i64 4, !dbg !28
  %217 = insertelement <8 x float> %216, float %177, i64 5, !dbg !28
  %218 = insertelement <8 x float> %217, float %176, i64 6, !dbg !28
  %219 = insertelement <8 x float> %218, float %175, i64 7, !dbg !28
  %220 = fmul <8 x float> %211, %219, !dbg !28
  %221 = fcmp olt <8 x float> %220, zeroinitializer, !dbg !29
  %222 = extractelement <8 x i1> %221, i64 7, !dbg !33
  %223 = extractelement <8 x i1> %221, i64 6, !dbg !33
  %224 = extractelement <8 x i1> %221, i64 5, !dbg !33
  %225 = extractelement <8 x i1> %221, i64 4, !dbg !33
  %226 = extractelement <8 x i1> %221, i64 3, !dbg !33
  %227 = extractelement <8 x i1> %221, i64 2, !dbg !33
  %228 = extractelement <8 x i1> %221, i64 1, !dbg !33
  %229 = extractelement <8 x i1> %221, i64 0, !dbg !33
  %bc = bitcast <8 x float> %220 to <8 x i32>, !dbg !34
  %230 = extractelement <8 x i32> %bc, i64 7, !dbg !34
  %231 = select i1 %222, i32 0, i32 %230, !dbg !33
  %bc36 = bitcast <8 x float> %220 to <8 x i32>, !dbg !34
  %232 = extractelement <8 x i32> %bc36, i64 6, !dbg !34
  %233 = select i1 %223, i32 0, i32 %232, !dbg !33
  %bc37 = bitcast <8 x float> %220 to <8 x i32>, !dbg !34
  %234 = extractelement <8 x i32> %bc37, i64 5, !dbg !34
  %235 = select i1 %224, i32 0, i32 %234, !dbg !33
  %bc38 = bitcast <8 x float> %220 to <8 x i32>, !dbg !34
  %236 = extractelement <8 x i32> %bc38, i64 4, !dbg !34
  %237 = select i1 %225, i32 0, i32 %236, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %231, i32 %233, i32 %235, i32 %237, ptr addrspace(1) %15, i1 true) #3, !dbg !34
  %bc39 = bitcast <8 x float> %220 to <8 x i32>, !dbg !34
  %238 = extractelement <8 x i32> %bc39, i64 3, !dbg !34
  %239 = select i1 %226, i32 0, i32 %238, !dbg !33
  %bc40 = bitcast <8 x float> %220 to <8 x i32>, !dbg !34
  %240 = extractelement <8 x i32> %bc40, i64 2, !dbg !34
  %241 = select i1 %227, i32 0, i32 %240, !dbg !33
  %bc41 = bitcast <8 x float> %220 to <8 x i32>, !dbg !34
  %242 = extractelement <8 x i32> %bc41, i64 1, !dbg !34
  %243 = select i1 %228, i32 0, i32 %242, !dbg !33
  %bc42 = bitcast <8 x float> %220 to <8 x i32>, !dbg !34
  %244 = extractelement <8 x i32> %bc42, i64 0, !dbg !34
  %245 = select i1 %229, i32 0, i32 %244, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %239, i32 %241, i32 %243, i32 %245, ptr addrspace(1) %17, i1 true) #3, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czlly5ynyebb55r3ahliylsimrtu27clp72pmbbv454bqlnxi5te.py", directory: "inductor_cache/zl")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 33, column: 18, scope: !7)
!24 = !DILocation(line: 34, column: 26, scope: !7)
!25 = !DILocation(line: 36, column: 19, scope: !7)
!26 = !DILocation(line: 30, column: 18, scope: !7)
!27 = !DILocation(line: 31, column: 18, scope: !7)
!28 = !DILocation(line: 39, column: 19, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 41, column: 42, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 42, column: 40, scope: !7)
!35 = !DILocation(line: 42, column: 4, scope: !7)
