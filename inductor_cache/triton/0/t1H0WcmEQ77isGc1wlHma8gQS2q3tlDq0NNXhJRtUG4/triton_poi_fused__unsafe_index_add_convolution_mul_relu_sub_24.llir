; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %16 = shl i32 %15, 7, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = and i32 %17, 127, !dbg !12
  %19 = or disjoint i32 %16, %18, !dbg !13
  %.frozen = freeze i32 %19, !dbg !14
  %20 = sdiv i32 %.frozen, 4, !dbg !14
  %21 = srem i32 %20, 4, !dbg !15
  %22 = mul i32 %20, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %22, !dbg !16
  %23 = sdiv i32 %19, 16, !dbg !17
  %24 = srem i32 %23, 256, !dbg !18
  %25 = sext i32 %21 to i64, !dbg !19
  %26 = getelementptr i64, ptr addrspace(1) %1, i64 %25, !dbg !19
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !20
  %28 = sext i32 %.decomposed to i64, !dbg !21
  %29 = getelementptr i64, ptr addrspace(1) %2, i64 %28, !dbg !21
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !22
  %31 = sext i32 %24 to i64, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !23
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !24
  %34 = getelementptr i64, ptr addrspace(1) %6, i64 %25, !dbg !25
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !26
  %36 = getelementptr i64, ptr addrspace(1) %7, i64 %28, !dbg !27
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !28
  %38 = getelementptr float, ptr addrspace(1) %8, i64 %28, !dbg !29
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !30
  %40 = getelementptr float, ptr addrspace(1) %9, i64 %25, !dbg !31
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !32
  %42 = bitcast i32 %41 to float, !dbg !32
  %43 = sext i32 %19 to i64, !dbg !33
  %44 = getelementptr float, ptr addrspace(1) %10, i64 %43, !dbg !33
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !34
  %46 = bitcast i32 %45 to float, !dbg !34
  %47 = getelementptr float, ptr addrspace(1) %11, i64 %31, !dbg !35
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !36
  %49 = bitcast i32 %48 to float, !dbg !36
  %50 = getelementptr float, ptr addrspace(1) %12, i64 %43, !dbg !37
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !38
  %52 = bitcast i32 %51 to float, !dbg !38
  %53 = lshr i64 %27, 62, !dbg !39
  %54 = and i64 %53, 2, !dbg !39
  %55 = add i64 %54, %27, !dbg !39
  %56 = lshr i64 %30, 62, !dbg !40
  %57 = and i64 %56, 2, !dbg !40
  %58 = add i64 %57, %30, !dbg !40
  %59 = shl i64 %55, 1, !dbg !41
  %60 = shl nsw i32 %23, 2, !dbg !42
  %61 = sext i32 %60 to i64, !dbg !43
  %62 = add i64 %59, %61, !dbg !44
  %63 = add i64 %62, %58, !dbg !43
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %63, !dbg !45
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !46
  %66 = getelementptr float, ptr addrspace(1) %5, i64 %63, !dbg !47
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !48
  %68 = lshr i64 %35, 62, !dbg !49
  %69 = and i64 %68, 2, !dbg !49
  %70 = add i64 %69, %35, !dbg !49
  %71 = shl i64 %70, 1, !dbg !50
  %72 = add i64 %58, %61, !dbg !51
  %73 = add i64 %72, %71, !dbg !52
  %74 = getelementptr float, ptr addrspace(1) %3, i64 %73, !dbg !53
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !54
  %76 = getelementptr float, ptr addrspace(1) %5, i64 %73, !dbg !55
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #1, !dbg !56
  %78 = lshr i64 %37, 62, !dbg !57
  %79 = and i64 %78, 2, !dbg !57
  %80 = add i64 %79, %37, !dbg !57
  %81 = add i64 %71, %61, !dbg !58
  %82 = add i64 %81, %80, !dbg !59
  %83 = getelementptr float, ptr addrspace(1) %3, i64 %82, !dbg !60
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !61
  %85 = getelementptr float, ptr addrspace(1) %5, i64 %82, !dbg !62
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !63
  %87 = add i64 %62, %80, !dbg !64
  %88 = getelementptr float, ptr addrspace(1) %3, i64 %87, !dbg !65
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #1, !dbg !66
  %90 = getelementptr float, ptr addrspace(1) %5, i64 %87, !dbg !67
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #1, !dbg !68
  %92 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !46
  %93 = insertelement <2 x i32> %92, i32 %75, i64 1, !dbg !46
  %94 = bitcast <2 x i32> %93 to <2 x float>, !dbg !46
  %95 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !69
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !69
  %97 = shufflevector <2 x float> %96, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !69
  %98 = fadd <2 x float> %97, %94, !dbg !69
  %99 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !48
  %100 = insertelement <2 x i32> %99, i32 %77, i64 1, !dbg !48
  %101 = bitcast <2 x i32> %100 to <2 x float>, !dbg !48
  %102 = fadd <2 x float> %98, %101, !dbg !70
  %103 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !66
  %104 = insertelement <2 x i32> %103, i32 %84, i64 1, !dbg !66
  %105 = bitcast <2 x i32> %104 to <2 x float>, !dbg !66
  %106 = fadd <2 x float> %97, %105, !dbg !71
  %107 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !68
  %108 = insertelement <2 x i32> %107, i32 %86, i64 1, !dbg !68
  %109 = bitcast <2 x i32> %108 to <2 x float>, !dbg !68
  %110 = fadd <2 x float> %106, %109, !dbg !72
  %111 = fsub <2 x float> %110, %102, !dbg !73
  %112 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !74
  %113 = bitcast <2 x i32> %112 to <2 x float>, !dbg !74
  %114 = shufflevector <2 x float> %113, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !74
  %115 = fmul <2 x float> %111, %114, !dbg !74
  %116 = fadd <2 x float> %102, %115, !dbg !75
  %117 = extractelement <2 x float> %116, i64 0, !dbg !76
  %118 = extractelement <2 x float> %116, i64 1, !dbg !77
  %119 = fsub float %117, %118, !dbg !76
  %120 = fmul float %119, %42, !dbg !78
  %121 = fadd float %118, %120, !dbg !77
  %122 = fadd float %46, %49, !dbg !79
  %123 = fadd float %122, %52, !dbg !80
  %124 = fadd float %123, %121, !dbg !81
  %125 = fcmp olt float %124, 0.000000e+00, !dbg !82
  %126 = select i1 %125, float 0.000000e+00, float %124, !dbg !86
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !87
  %128 = bitcast float %126 to i32, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %128, ptr addrspace(1) %127, i1 true) #1, !dbg !88
  ret void, !dbg !89
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cl47rdu4vnao2crvc4ftcurgvumnyyxuu7vy67rvqdmxboeagtbr.py", directory: "inductor_cache/l4")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_24", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 32, scope: !7)
!36 = !DILocation(line: 37, column: 37, scope: !7)
!37 = !DILocation(line: 38, column: 32, scope: !7)
!38 = !DILocation(line: 38, column: 37, scope: !7)
!39 = !DILocation(line: 42, column: 32, scope: !7)
!40 = !DILocation(line: 45, column: 32, scope: !7)
!41 = !DILocation(line: 46, column: 39, scope: !7)
!42 = !DILocation(line: 46, column: 48, scope: !7)
!43 = !DILocation(line: 46, column: 46, scope: !7)
!44 = !DILocation(line: 46, column: 37, scope: !7)
!45 = !DILocation(line: 46, column: 30, scope: !7)
!46 = !DILocation(line: 46, column: 53, scope: !7)
!47 = !DILocation(line: 48, column: 31, scope: !7)
!48 = !DILocation(line: 48, column: 54, scope: !7)
!49 = !DILocation(line: 52, column: 35, scope: !7)
!50 = !DILocation(line: 53, column: 40, scope: !7)
!51 = !DILocation(line: 53, column: 38, scope: !7)
!52 = !DILocation(line: 53, column: 48, scope: !7)
!53 = !DILocation(line: 53, column: 31, scope: !7)
!54 = !DILocation(line: 53, column: 55, scope: !7)
!55 = !DILocation(line: 55, column: 31, scope: !7)
!56 = !DILocation(line: 55, column: 55, scope: !7)
!57 = !DILocation(line: 59, column: 35, scope: !7)
!58 = !DILocation(line: 60, column: 39, scope: !7)
!59 = !DILocation(line: 60, column: 49, scope: !7)
!60 = !DILocation(line: 60, column: 31, scope: !7)
!61 = !DILocation(line: 60, column: 56, scope: !7)
!62 = !DILocation(line: 62, column: 31, scope: !7)
!63 = !DILocation(line: 62, column: 56, scope: !7)
!64 = !DILocation(line: 67, column: 48, scope: !7)
!65 = !DILocation(line: 67, column: 31, scope: !7)
!66 = !DILocation(line: 67, column: 55, scope: !7)
!67 = !DILocation(line: 69, column: 31, scope: !7)
!68 = !DILocation(line: 69, column: 55, scope: !7)
!69 = !DILocation(line: 47, column: 19, scope: !7)
!70 = !DILocation(line: 49, column: 20, scope: !7)
!71 = !DILocation(line: 68, column: 20, scope: !7)
!72 = !DILocation(line: 70, column: 20, scope: !7)
!73 = !DILocation(line: 71, column: 20, scope: !7)
!74 = !DILocation(line: 72, column: 20, scope: !7)
!75 = !DILocation(line: 73, column: 20, scope: !7)
!76 = !DILocation(line: 74, column: 20, scope: !7)
!77 = !DILocation(line: 76, column: 20, scope: !7)
!78 = !DILocation(line: 75, column: 20, scope: !7)
!79 = !DILocation(line: 77, column: 20, scope: !7)
!80 = !DILocation(line: 78, column: 20, scope: !7)
!81 = !DILocation(line: 79, column: 20, scope: !7)
!82 = !DILocation(line: 118, column: 15, scope: !83, inlinedAt: !85)
!83 = distinct !DILexicalBlockFile(scope: !7, file: !84, discriminator: 0)
!84 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!85 = !DILocation(line: 81, column: 42, scope: !7)
!86 = !DILocation(line: 121, column: 29, scope: !83, inlinedAt: !85)
!87 = !DILocation(line: 82, column: 28, scope: !7)
!88 = !DILocation(line: 82, column: 40, scope: !7)
!89 = !DILocation(line: 82, column: 4, scope: !7)
