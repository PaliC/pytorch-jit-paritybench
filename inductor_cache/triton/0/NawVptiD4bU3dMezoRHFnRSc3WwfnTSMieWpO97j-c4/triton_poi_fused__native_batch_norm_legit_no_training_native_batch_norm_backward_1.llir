; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_native_batch_norm_backward_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 6, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 14, !dbg !12
  %16 = and i32 %14, 62, !dbg !12
  %17 = or disjoint i32 %12, %16, !dbg !13
  %18 = or disjoint i32 %15, %12, !dbg !13
  %19 = or disjoint i32 %18, 1, !dbg !13
  %20 = icmp slt i32 %17, 64, !dbg !14
  %.frozen = freeze i32 %17, !dbg !15
  %21 = sdiv i32 %.frozen, 16, !dbg !15
  %22 = mul i32 %21, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %22, !dbg !16
  %23 = srem i32 %19, 16, !dbg !16
  %24 = sext i32 %17 to i64, !dbg !17
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !17
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 %20) #3, !dbg !18
  %.lhs.trunc = trunc nsw i32 %.decomposed to i8, !dbg !19
  %27 = sdiv i8 %.lhs.trunc, 4, !dbg !20
  %28 = mul i8 %27, 4, !dbg !19
  %.decomposed12 = sub i8 %.lhs.trunc, %28, !dbg !19
  %.sext = sext i8 %.decomposed12 to i32, !dbg !19
  %.lhs.trunc6 = trunc nsw i32 %23 to i8, !dbg !19
  %.lhs.trunc6.frozen = freeze i8 %.lhs.trunc6, !dbg !20
  %29 = sdiv i8 %.lhs.trunc6.frozen, 4, !dbg !20
  %30 = mul i8 %29, 4, !dbg !19
  %.decomposed13 = sub i8 %.lhs.trunc6.frozen, %30, !dbg !19
  %.sext7 = sext i8 %.decomposed13 to i32, !dbg !19
  %31 = shl nsw i32 %.sext, 2, !dbg !21
  %32 = shl nsw i32 %.sext7, 2, !dbg !21
  %33 = shl nsw i32 %21, 4, !dbg !22
  %.sext9 = sext i8 %27 to i32, !dbg !20
  %.sext11 = sext i8 %29 to i32, !dbg !20
  %34 = add i32 %33, %.sext9, !dbg !23
  %35 = add i32 %34, %31, !dbg !24
  %36 = add i32 %33, %.sext11, !dbg !23
  %37 = add i32 %36, %32, !dbg !24
  %38 = sext i32 %35 to i64, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !25
  %40 = sext i32 %37 to i64, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %20) #3, !dbg !26
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %20) #3, !dbg !26
  %44 = sext i8 %27 to i64, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !27
  %46 = sext i8 %29 to i64, !dbg !27
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !27
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %20) #3, !dbg !28
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %20) #3, !dbg !28
  %50 = sext i32 %.decomposed to i64, !dbg !29
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !29
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 %20) #3, !dbg !30
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %50, !dbg !31
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %53, i1 %20) #3, !dbg !32
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !32
  %56 = extractvalue { i32, i32 } %54, 1, !dbg !32
  %57 = bitcast i32 %55 to float, !dbg !32
  %58 = bitcast i32 %56 to float, !dbg !32
  %59 = getelementptr float, ptr addrspace(1) %5, i64 %50, !dbg !33
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %59, i1 %20) #3, !dbg !34
  %61 = getelementptr float, ptr addrspace(1) %6, i64 %50, !dbg !35
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 %20) #3, !dbg !36
  %63 = fadd float %57, 0x3EE4F8B580000000, !dbg !37
  %64 = fadd float %58, 0x3EE4F8B580000000, !dbg !37
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i = icmp eq i32 %65, 0, !dbg !38
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i = icmp eq i32 %66, 0, !dbg !38
  br i1 %.not.i, label %72, label %67, !dbg !38

67:                                               ; preds = %10
  br i1 %.not1.i, label %70, label %68, !dbg !38

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

72:                                               ; preds = %10
  br i1 %.not1.i, label %75, label %73, !dbg !38

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %68, %70, %73, %75
  %.0.i = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !38
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i1 = icmp eq i32 %77, 0, !dbg !38
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i4 = icmp eq i32 %78, 0, !dbg !38
  br i1 %.not.i1, label %84, label %79, !dbg !38

79:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %82, label %80, !dbg !38

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

84:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %87, label %85, !dbg !38

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

__nv_sqrtf.exit5:                                 ; preds = %80, %82, %85, %87
  %.0.i3 = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !38
  %89 = bitcast i32 %43 to float, !dbg !26
  %90 = bitcast i32 %49 to float, !dbg !28
  %91 = fadd float %89, %90, !dbg !39
  %92 = fcmp olt float %91, 0.000000e+00, !dbg !40
  %93 = select i1 %92, float 0.000000e+00, float %91, !dbg !44
  %94 = extractvalue { i32, i32 } %26, 1, !dbg !18
  %95 = bitcast i32 %94 to float, !dbg !18
  %96 = fadd float %93, %95, !dbg !45
  %97 = extractvalue { i32, i32 } %52, 1, !dbg !30
  %98 = bitcast i32 %97 to float, !dbg !30
  %99 = fsub float %96, %98, !dbg !46
  %100 = bitcast i32 %42 to float, !dbg !26
  %101 = bitcast i32 %48 to float, !dbg !28
  %102 = fadd float %100, %101, !dbg !39
  %103 = fcmp olt float %102, 0.000000e+00, !dbg !40
  %104 = select i1 %103, float 0.000000e+00, float %102, !dbg !44
  %105 = extractvalue { i32, i32 } %26, 0, !dbg !18
  %106 = bitcast i32 %105 to float, !dbg !18
  %107 = fadd float %104, %106, !dbg !45
  %108 = extractvalue { i32, i32 } %52, 0, !dbg !30
  %109 = bitcast i32 %108 to float, !dbg !30
  %110 = fsub float %107, %109, !dbg !46
  %111 = extractvalue { i32, i32 } %62, 1, !dbg !36
  %112 = bitcast i32 %111 to float, !dbg !36
  %113 = extractvalue { i32, i32 } %62, 0, !dbg !36
  %114 = bitcast i32 %113 to float, !dbg !36
  %115 = extractvalue { i32, i32 } %60, 1, !dbg !34
  %116 = bitcast i32 %115 to float, !dbg !34
  %117 = extractvalue { i32, i32 } %60, 0, !dbg !34
  %118 = bitcast i32 %117 to float, !dbg !34
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !47
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !47
  %121 = fmul float %110, %119, !dbg !48
  %122 = fmul float %99, %120, !dbg !48
  %123 = fmul float %121, %118, !dbg !49
  %124 = fmul float %122, %116, !dbg !49
  %125 = fadd float %123, %114, !dbg !50
  %126 = fadd float %124, %112, !dbg !50
  %127 = getelementptr float, ptr addrspace(1) %7, i64 %24, !dbg !51
  %128 = bitcast float %125 to i32, !dbg !52
  %129 = bitcast float %126 to i32, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %128, i32 %129, ptr addrspace(1) %127, i1 %20) #3, !dbg !52
  %130 = getelementptr float, ptr addrspace(1) %8, i64 %24, !dbg !53
  %131 = bitcast float %110 to i32, !dbg !54
  %132 = bitcast float %99 to i32, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %131, i32 %132, ptr addrspace(1) %130, i1 %20) #3, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjkyo62b2brn5hr7l76gbkht322l4nbbujlyppcswy62i2errp4b.py", directory: "inductor_cache/jk")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_native_batch_norm_backward_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_native_batch_norm_backward_1, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_native_batch_norm_backward_1", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_native_batch_norm_backward_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 39, scope: !7)
!20 = !DILocation(line: 28, column: 60, scope: !7)
!21 = !DILocation(line: 28, column: 34, scope: !7)
!22 = !DILocation(line: 28, column: 48, scope: !7)
!23 = !DILocation(line: 28, column: 45, scope: !7)
!24 = !DILocation(line: 28, column: 54, scope: !7)
!25 = !DILocation(line: 28, column: 30, scope: !7)
!26 = !DILocation(line: 28, column: 65, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 40, scope: !7)
!29 = !DILocation(line: 30, column: 30, scope: !7)
!30 = !DILocation(line: 30, column: 35, scope: !7)
!31 = !DILocation(line: 31, column: 30, scope: !7)
!32 = !DILocation(line: 31, column: 35, scope: !7)
!33 = !DILocation(line: 32, column: 31, scope: !7)
!34 = !DILocation(line: 32, column: 36, scope: !7)
!35 = !DILocation(line: 33, column: 31, scope: !7)
!36 = !DILocation(line: 33, column: 36, scope: !7)
!37 = !DILocation(line: 40, column: 19, scope: !7)
!38 = !DILocation(line: 41, column: 27, scope: !7)
!39 = !DILocation(line: 34, column: 18, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 36, column: 40, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 37, column: 18, scope: !7)
!46 = !DILocation(line: 38, column: 18, scope: !7)
!47 = !DILocation(line: 43, column: 20, scope: !7)
!48 = !DILocation(line: 46, column: 19, scope: !7)
!49 = !DILocation(line: 47, column: 20, scope: !7)
!50 = !DILocation(line: 48, column: 20, scope: !7)
!51 = !DILocation(line: 49, column: 25, scope: !7)
!52 = !DILocation(line: 49, column: 37, scope: !7)
!53 = !DILocation(line: 50, column: 25, scope: !7)
!54 = !DILocation(line: 50, column: 36, scope: !7)
!55 = !DILocation(line: 50, column: 4, scope: !7)
