; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 12, !dbg !12
  %10 = and i32 %7, 64, !dbg !12
  %.lobit = lshr exact i32 %10, 6, !dbg !12
  %11 = or disjoint i32 %6, %9, !dbg !13
  %12 = or disjoint i32 %6, %.lobit, !dbg !13
  %13 = or disjoint i32 %12, 2, !dbg !13
  %14 = or disjoint i32 %12, 4, !dbg !13
  %15 = or disjoint i32 %12, 6, !dbg !13
  %16 = or disjoint i32 %12, 8, !dbg !13
  %17 = or disjoint i32 %12, 10, !dbg !13
  %18 = or disjoint i32 %12, 12, !dbg !13
  %19 = or disjoint i32 %12, 14, !dbg !13
  %20 = icmp slt i32 %11, 16, !dbg !14
  %21 = icmp slt i32 %12, 16, !dbg !14
  %22 = icmp slt i32 %13, 16, !dbg !14
  %23 = icmp slt i32 %14, 16, !dbg !14
  %24 = icmp slt i32 %15, 16, !dbg !14
  %25 = icmp slt i32 %16, 16, !dbg !14
  %26 = icmp slt i32 %17, 16, !dbg !14
  %27 = icmp slt i32 %18, 16, !dbg !14
  %28 = icmp slt i32 %19, 16, !dbg !14
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %30 = shl i32 %29, 6, !dbg !16
  %31 = lshr i32 %7, 2, !dbg !17
  %32 = and i32 %31, 15, !dbg !17
  %33 = lshr exact i32 %10, 2, !dbg !17
  %34 = or disjoint i32 %32, %33, !dbg !17
  %35 = and i32 %7, 63, !dbg !17
  %36 = or disjoint i32 %30, %34, !dbg !18
  %37 = or disjoint i32 %36, 32, !dbg !18
  %38 = or disjoint i32 %30, %35, !dbg !18
  %39 = icmp slt i32 %36, 81, !dbg !19
  %40 = icmp slt i32 %37, 81, !dbg !19
  %41 = icmp slt i32 %38, 81, !dbg !19
  %42 = ashr exact i32 %11, 2, !dbg !20
  %43 = shl i32 %36, 2, !dbg !21
  %44 = shl i32 %37, 2, !dbg !21
  %45 = mul i32 %42, 324, !dbg !22
  %46 = add i32 %43, %45, !dbg !23
  %47 = add i32 %45, %44, !dbg !23
  %48 = sext i32 %46 to i64, !dbg !24
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !24
  %50 = sext i32 %47 to i64, !dbg !24
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !24
  %52 = and i1 %20, %39, !dbg !25
  %53 = and i1 %40, %20, !dbg !25
  %54 = and i1 %21, %41, !dbg !25
  %55 = and i1 %22, %41, !dbg !25
  %56 = and i1 %23, %41, !dbg !25
  %57 = and i1 %24, %41, !dbg !25
  %58 = and i1 %25, %41, !dbg !25
  %59 = and i1 %26, %41, !dbg !25
  %60 = and i1 %27, %41, !dbg !25
  %61 = and i1 %28, %41, !dbg !25
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %52) #2, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !26
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %53) #2, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !26
  %72 = mul i32 %12, 81, !dbg !27
  %73 = mul i32 %13, 81, !dbg !27
  %74 = mul i32 %14, 81, !dbg !27
  %75 = mul i32 %15, 81, !dbg !27
  %76 = mul i32 %16, 81, !dbg !27
  %77 = mul i32 %17, 81, !dbg !27
  %78 = mul i32 %18, 81, !dbg !27
  %79 = mul i32 %19, 81, !dbg !27
  %80 = add i32 %38, %72, !dbg !28
  %81 = add i32 %38, %73, !dbg !28
  %82 = add i32 %38, %74, !dbg !28
  %83 = add i32 %38, %75, !dbg !28
  %84 = add i32 %38, %76, !dbg !28
  %85 = add i32 %38, %77, !dbg !28
  %86 = add i32 %38, %78, !dbg !28
  %87 = add i32 %38, %79, !dbg !28
  %88 = sext i32 %80 to i64, !dbg !29
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !29
  %90 = sext i32 %81 to i64, !dbg !29
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !29
  %92 = sext i32 %82 to i64, !dbg !29
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !29
  %94 = sext i32 %83 to i64, !dbg !29
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !29
  %96 = sext i32 %84 to i64, !dbg !29
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !29
  %98 = sext i32 %85 to i64, !dbg !29
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !29
  %100 = sext i32 %86 to i64, !dbg !29
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !29
  %102 = sext i32 %87 to i64, !dbg !29
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !29
  %104 = shl i32 %7, 8, !dbg !30
  %105 = and i32 %104, 768, !dbg !30
  %106 = or disjoint i32 %105, %32, !dbg !30
  %107 = or disjoint i32 %106, %33, !dbg !30
  %108 = and i32 %7, 127, !dbg !30
  %109 = lshr exact i32 %105, 6, !dbg !30
  %110 = add nuw nsw i32 %107, %109, !dbg !30
  %111 = zext nneg i32 %110 to i64, !dbg !30
  %112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %111, !dbg !30
  %113 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #2, !dbg !30
  %114 = or disjoint i32 %107, 64, !dbg !30
  %115 = lshr i32 %114, 6, !dbg !30
  %116 = add nuw nsw i32 %115, %114, !dbg !30
  %117 = zext nneg i32 %116 to i64, !dbg !30
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %117, !dbg !30
  %119 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #2, !dbg !30
  %120 = or disjoint i32 %107, 128, !dbg !30
  %121 = lshr i32 %120, 6, !dbg !30
  %122 = add nuw nsw i32 %121, %120, !dbg !30
  %123 = zext nneg i32 %122 to i64, !dbg !30
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %123, !dbg !30
  %125 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 true) #2, !dbg !30
  %126 = or disjoint i32 %107, 192, !dbg !30
  %127 = lshr i32 %126, 6, !dbg !30
  %128 = add nuw nsw i32 %127, %126, !dbg !30
  %129 = zext nneg i32 %128 to i64, !dbg !30
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %129, !dbg !30
  %131 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #2, !dbg !30
  %132 = or disjoint i32 %109, 32, !dbg !30
  %133 = add nuw nsw i32 %132, %107, !dbg !30
  %134 = zext nneg i32 %133 to i64, !dbg !30
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %134, !dbg !30
  %136 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #2, !dbg !30
  %137 = or disjoint i32 %107, 96, !dbg !30
  %138 = lshr i32 %137, 6, !dbg !30
  %139 = add nuw nsw i32 %138, %137, !dbg !30
  %140 = zext nneg i32 %139 to i64, !dbg !30
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %140, !dbg !30
  %142 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #2, !dbg !30
  %143 = or disjoint i32 %107, 160, !dbg !30
  %144 = lshr i32 %143, 6, !dbg !30
  %145 = add nuw nsw i32 %144, %143, !dbg !30
  %146 = zext nneg i32 %145 to i64, !dbg !30
  %147 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %146, !dbg !30
  %148 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #2, !dbg !30
  %149 = or disjoint i32 %107, 224, !dbg !30
  %150 = lshr i32 %149, 6, !dbg !30
  %151 = add nuw nsw i32 %150, %149, !dbg !30
  %152 = zext nneg i32 %151 to i64, !dbg !30
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %152, !dbg !30
  %154 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %155 = lshr i32 %108, 6, !dbg !30
  %156 = add nuw nsw i32 %155, %108, !dbg !30
  %157 = zext nneg i32 %156 to i64, !dbg !30
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %157, !dbg !30
  %159 = load i32, ptr addrspace(3) %158, align 4, !dbg !30
  %160 = or disjoint i32 %108, 128, !dbg !30
  %161 = lshr i32 %160, 6, !dbg !30
  %162 = add nuw nsw i32 %161, %160, !dbg !30
  %163 = zext nneg i32 %162 to i64, !dbg !30
  %164 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %163, !dbg !30
  %165 = load i32, ptr addrspace(3) %164, align 4, !dbg !30
  %166 = or disjoint i32 %108, 256, !dbg !30
  %167 = lshr i32 %166, 6, !dbg !30
  %168 = add nuw nsw i32 %167, %166, !dbg !30
  %169 = zext nneg i32 %168 to i64, !dbg !30
  %170 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %169, !dbg !30
  %171 = load i32, ptr addrspace(3) %170, align 4, !dbg !30
  %172 = or disjoint i32 %108, 384, !dbg !30
  %173 = lshr i32 %172, 6, !dbg !30
  %174 = add nuw nsw i32 %173, %172, !dbg !30
  %175 = zext nneg i32 %174 to i64, !dbg !30
  %176 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %175, !dbg !30
  %177 = load i32, ptr addrspace(3) %176, align 4, !dbg !30
  %178 = or disjoint i32 %108, 512, !dbg !30
  %179 = lshr i32 %178, 6, !dbg !30
  %180 = add nuw nsw i32 %179, %178, !dbg !30
  %181 = zext nneg i32 %180 to i64, !dbg !30
  %182 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %181, !dbg !30
  %183 = load i32, ptr addrspace(3) %182, align 4, !dbg !30
  %184 = or disjoint i32 %108, 640, !dbg !30
  %185 = lshr i32 %184, 6, !dbg !30
  %186 = add nuw nsw i32 %185, %184, !dbg !30
  %187 = zext nneg i32 %186 to i64, !dbg !30
  %188 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %187, !dbg !30
  %189 = load i32, ptr addrspace(3) %188, align 4, !dbg !30
  %190 = or disjoint i32 %108, 768, !dbg !30
  %191 = lshr i32 %190, 6, !dbg !30
  %192 = add nuw nsw i32 %191, %190, !dbg !30
  %193 = zext nneg i32 %192 to i64, !dbg !30
  %194 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %193, !dbg !30
  %195 = load i32, ptr addrspace(3) %194, align 4, !dbg !30
  %196 = or disjoint i32 %108, 896, !dbg !30
  %197 = lshr i32 %196, 6, !dbg !30
  %198 = add nuw nsw i32 %197, %196, !dbg !30
  %199 = zext nneg i32 %198 to i64, !dbg !30
  %200 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %199, !dbg !30
  %201 = load i32, ptr addrspace(3) %200, align 4, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %159, ptr addrspace(1) %89, i1 %54) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %165, ptr addrspace(1) %91, i1 %55) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %171, ptr addrspace(1) %93, i1 %56) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %177, ptr addrspace(1) %95, i1 %57) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %183, ptr addrspace(1) %97, i1 %58) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %189, ptr addrspace(1) %99, i1 %59) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %195, ptr addrspace(1) %101, i1 %60) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %201, ptr addrspace(1) %103, i1 %61) #2, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxqyhwafv7qdvpc27jgrzp6ufcbgfycq7w6mwsqvvldn75btouv3.py", directory: "inductor_cache/xq")
!4 = !{ptr @triton_poi_fused_convolution_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_1", linkageName: "triton_poi_fused_convolution_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 37, scope: !7)
!22 = !DILocation(line: 32, column: 46, scope: !7)
!23 = !DILocation(line: 32, column: 42, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 59, scope: !7)
!26 = !DILocation(line: 32, column: 51, scope: !7)
!27 = !DILocation(line: 33, column: 33, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 25, scope: !7)
!30 = !DILocation(line: 33, column: 44, scope: !7)
!31 = !DILocation(line: 33, column: 4, scope: !7)
