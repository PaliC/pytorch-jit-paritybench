; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_silu_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 2, !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = shl i32 %11, 2, !dbg !12
  %15 = and i32 %14, 12, !dbg !12
  %16 = or disjoint i32 %10, %13, !dbg !13
  %17 = or disjoint i32 %16, 64, !dbg !13
  %18 = or disjoint i32 %16, 128, !dbg !13
  %19 = or disjoint i32 %16, 192, !dbg !13
  %20 = icmp slt i32 %16, 256, !dbg !14
  %21 = icmp slt i32 %17, 256, !dbg !14
  %22 = icmp slt i32 %18, 256, !dbg !14
  %23 = icmp slt i32 %19, 256, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %25 = shl i32 %24, 4, !dbg !16
  %26 = or disjoint i32 %25, %15, !dbg !17
  %27 = icmp slt i32 %26, 256, !dbg !18
  %28 = shl i32 %16, 8, !dbg !19
  %29 = shl i32 %17, 8, !dbg !19
  %30 = shl i32 %18, 8, !dbg !19
  %31 = shl i32 %19, 8, !dbg !19
  %32 = add i32 %26, %28, !dbg !20
  %33 = add i32 %26, %29, !dbg !20
  %34 = add i32 %26, %30, !dbg !20
  %35 = add i32 %26, %31, !dbg !20
  %36 = sext i32 %32 to i64, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !21
  %38 = sext i32 %33 to i64, !dbg !21
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !21
  %40 = sext i32 %34 to i64, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !21
  %42 = sext i32 %35 to i64, !dbg !21
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !21
  %44 = and i1 %20, %27, !dbg !22
  %45 = and i1 %21, %27, !dbg !22
  %46 = and i1 %22, %27, !dbg !22
  %47 = and i1 %23, %27, !dbg !22
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %44) #4, !dbg !23
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %45) #4, !dbg !23
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %46) #4, !dbg !23
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %47) #4, !dbg !23
  %52 = sext i32 %26 to i64, !dbg !24
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !24
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %27) #4, !dbg !25
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !26
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %27) #4, !dbg !27
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !27
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !27
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !27
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !27
  %61 = bitcast i32 %57 to float, !dbg !27
  %62 = bitcast i32 %58 to float, !dbg !27
  %63 = bitcast i32 %59 to float, !dbg !27
  %64 = bitcast i32 %60 to float, !dbg !27
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !28
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %27) #4, !dbg !29
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %52, !dbg !30
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %27) #4, !dbg !31
  %69 = fadd float %61, 0x3F50624DE0000000, !dbg !32
  %70 = fadd float %62, 0x3F50624DE0000000, !dbg !32
  %71 = fadd float %63, 0x3F50624DE0000000, !dbg !32
  %72 = fadd float %64, 0x3F50624DE0000000, !dbg !32
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %73, 0, !dbg !33
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i = icmp eq i32 %74, 0, !dbg !33
  br i1 %.not.i, label %80, label %75, !dbg !33

75:                                               ; preds = %8
  br i1 %.not1.i, label %78, label %76, !dbg !33

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

80:                                               ; preds = %8
  br i1 %.not1.i, label %83, label %81, !dbg !33

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %76, %78, %81, %83
  %.0.i = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !33
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i33 = icmp eq i32 %85, 0, !dbg !33
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i36 = icmp eq i32 %86, 0, !dbg !33
  br i1 %.not.i33, label %92, label %87, !dbg !33

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i36, label %90, label %88, !dbg !33

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit37, !dbg !33

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit37, !dbg !33

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i36, label %95, label %93, !dbg !33

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit37, !dbg !33

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #4, !dbg !33
  br label %__nv_sqrtf.exit37, !dbg !33

__nv_sqrtf.exit37:                                ; preds = %88, %90, %93, %95
  %.0.i35 = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !33
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i38 = icmp eq i32 %97, 0, !dbg !33
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i41 = icmp eq i32 %98, 0, !dbg !33
  br i1 %.not.i38, label %104, label %99, !dbg !33

99:                                               ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %102, label %100, !dbg !33

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !33
  br label %__nv_sqrtf.exit42, !dbg !33

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !33
  br label %__nv_sqrtf.exit42, !dbg !33

104:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %107, label %105, !dbg !33

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !33
  br label %__nv_sqrtf.exit42, !dbg !33

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !33
  br label %__nv_sqrtf.exit42, !dbg !33

__nv_sqrtf.exit42:                                ; preds = %100, %102, %105, %107
  %.0.i40 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !33
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i43 = icmp eq i32 %109, 0, !dbg !33
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i46 = icmp eq i32 %110, 0, !dbg !33
  br i1 %.not.i43, label %116, label %111, !dbg !33

111:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %114, label %112, !dbg !33

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #4, !dbg !33
  br label %__nv_sqrtf.exit47, !dbg !33

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #4, !dbg !33
  br label %__nv_sqrtf.exit47, !dbg !33

116:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %119, label %117, !dbg !33

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #4, !dbg !33
  br label %__nv_sqrtf.exit47, !dbg !33

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #4, !dbg !33
  br label %__nv_sqrtf.exit47, !dbg !33

__nv_sqrtf.exit47:                                ; preds = %112, %114, %117, %119
  %.0.i45 = phi float [ %113, %112 ], [ %115, %114 ], [ %118, %117 ], [ %120, %119 ], !dbg !33
  %121 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !23
  %122 = bitcast i32 %121 to float, !dbg !23
  %123 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !25
  %124 = bitcast i32 %123 to float, !dbg !25
  %125 = fsub float %122, %124, !dbg !34
  %126 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !23
  %127 = bitcast i32 %126 to float, !dbg !23
  %128 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !25
  %129 = bitcast i32 %128 to float, !dbg !25
  %130 = fsub float %127, %129, !dbg !34
  %131 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !23
  %132 = bitcast i32 %131 to float, !dbg !23
  %133 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !25
  %134 = bitcast i32 %133 to float, !dbg !25
  %135 = fsub float %132, %134, !dbg !34
  %136 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !23
  %137 = bitcast i32 %136 to float, !dbg !23
  %138 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !25
  %139 = bitcast i32 %138 to float, !dbg !25
  %140 = fsub float %137, %139, !dbg !34
  %141 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !23
  %142 = bitcast i32 %141 to float, !dbg !23
  %143 = fsub float %142, %124, !dbg !34
  %144 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !23
  %145 = bitcast i32 %144 to float, !dbg !23
  %146 = fsub float %145, %129, !dbg !34
  %147 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !23
  %148 = bitcast i32 %147 to float, !dbg !23
  %149 = fsub float %148, %134, !dbg !34
  %150 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !23
  %151 = bitcast i32 %150 to float, !dbg !23
  %152 = fsub float %151, %139, !dbg !34
  %153 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !23
  %154 = bitcast i32 %153 to float, !dbg !23
  %155 = fsub float %154, %124, !dbg !34
  %156 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !23
  %157 = bitcast i32 %156 to float, !dbg !23
  %158 = fsub float %157, %129, !dbg !34
  %159 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !23
  %160 = bitcast i32 %159 to float, !dbg !23
  %161 = fsub float %160, %134, !dbg !34
  %162 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !23
  %163 = bitcast i32 %162 to float, !dbg !23
  %164 = fsub float %163, %139, !dbg !34
  %165 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !23
  %166 = bitcast i32 %165 to float, !dbg !23
  %167 = fsub float %166, %124, !dbg !34
  %168 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !23
  %169 = bitcast i32 %168 to float, !dbg !23
  %170 = fsub float %169, %129, !dbg !34
  %171 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !23
  %172 = bitcast i32 %171 to float, !dbg !23
  %173 = fsub float %172, %134, !dbg !34
  %174 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !23
  %175 = bitcast i32 %174 to float, !dbg !23
  %176 = fsub float %175, %139, !dbg !34
  %177 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !31
  %178 = bitcast i32 %177 to float, !dbg !31
  %179 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !31
  %180 = bitcast i32 %179 to float, !dbg !31
  %181 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !31
  %182 = bitcast i32 %181 to float, !dbg !31
  %183 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !31
  %184 = bitcast i32 %183 to float, !dbg !31
  %185 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !29
  %186 = bitcast i32 %185 to float, !dbg !29
  %187 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !29
  %188 = bitcast i32 %187 to float, !dbg !29
  %189 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !29
  %190 = bitcast i32 %189 to float, !dbg !29
  %191 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !29
  %192 = bitcast i32 %191 to float, !dbg !29
  %.lobit12 = lshr i32 %11, 6, !dbg !35
  %193 = and i32 %.lobit12, 3, !dbg !35
  %194 = or disjoint i32 %193, %25, !dbg !17
  %195 = or disjoint i32 %194, 12, !dbg !17
  %196 = icmp slt i32 %195, 256, !dbg !18
  %197 = and i32 %14, 252, !dbg !12
  %198 = or disjoint i32 %10, %197, !dbg !13
  %199 = icmp slt i32 %198, 256, !dbg !14
  %200 = and i1 %199, %196, !dbg !22
  %201 = or disjoint i32 %194, 8, !dbg !17
  %202 = icmp slt i32 %201, 256, !dbg !18
  %203 = and i1 %199, %202, !dbg !22
  %204 = or disjoint i32 %194, 4, !dbg !17
  %205 = icmp slt i32 %204, 256, !dbg !18
  %206 = and i1 %199, %205, !dbg !22
  %207 = icmp slt i32 %194, 256, !dbg !18
  %208 = and i1 %199, %207, !dbg !22
  %.frozen = freeze i32 %198, !dbg !36
  %209 = sdiv i32 %.frozen, 64, !dbg !36
  %210 = mul i32 %209, 64, !dbg !37
  %.decomposed = sub i32 %.frozen, %210, !dbg !37
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !38
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #4, !dbg !38
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #4, !dbg !38
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i45) #4, !dbg !38
  %215 = fmul float %176, %211, !dbg !39
  %216 = fmul float %173, %212, !dbg !39
  %217 = fmul float %170, %213, !dbg !39
  %218 = fmul float %167, %214, !dbg !39
  %219 = fmul float %164, %211, !dbg !39
  %220 = fmul float %161, %212, !dbg !39
  %221 = fmul float %158, %213, !dbg !39
  %222 = fmul float %155, %214, !dbg !39
  %223 = fmul float %152, %211, !dbg !39
  %224 = fmul float %149, %212, !dbg !39
  %225 = fmul float %146, %213, !dbg !39
  %226 = fmul float %143, %214, !dbg !39
  %227 = fmul float %140, %211, !dbg !39
  %228 = fmul float %135, %212, !dbg !39
  %229 = fmul float %130, %213, !dbg !39
  %230 = fmul float %125, %214, !dbg !39
  %231 = fmul float %215, %192, !dbg !40
  %232 = fmul float %216, %190, !dbg !40
  %233 = fmul float %217, %188, !dbg !40
  %234 = fmul float %218, %186, !dbg !40
  %235 = fmul float %219, %192, !dbg !40
  %236 = fmul float %220, %190, !dbg !40
  %237 = fmul float %221, %188, !dbg !40
  %238 = fmul float %222, %186, !dbg !40
  %239 = fmul float %223, %192, !dbg !40
  %240 = fmul float %224, %190, !dbg !40
  %241 = fmul float %225, %188, !dbg !40
  %242 = fmul float %226, %186, !dbg !40
  %243 = fmul float %227, %192, !dbg !40
  %244 = fmul float %228, %190, !dbg !40
  %245 = fmul float %229, %188, !dbg !40
  %246 = fmul float %230, %186, !dbg !40
  %247 = fadd float %231, %184, !dbg !41
  %248 = fadd float %232, %182, !dbg !41
  %249 = fadd float %233, %180, !dbg !41
  %250 = fadd float %234, %178, !dbg !41
  %251 = fadd float %235, %184, !dbg !41
  %252 = fadd float %236, %182, !dbg !41
  %253 = fadd float %237, %180, !dbg !41
  %254 = fadd float %238, %178, !dbg !41
  %255 = fadd float %239, %184, !dbg !41
  %256 = fadd float %240, %182, !dbg !41
  %257 = fadd float %241, %180, !dbg !41
  %258 = fadd float %242, %178, !dbg !41
  %259 = fadd float %243, %184, !dbg !41
  %260 = fadd float %244, %182, !dbg !41
  %261 = fadd float %245, %180, !dbg !41
  %262 = fadd float %246, %178, !dbg !41
  %263 = fsub float 0.000000e+00, %247, !dbg !42
  %264 = fsub float 0.000000e+00, %248, !dbg !42
  %265 = fsub float 0.000000e+00, %249, !dbg !42
  %266 = fsub float 0.000000e+00, %250, !dbg !42
  %267 = fsub float 0.000000e+00, %251, !dbg !42
  %268 = fsub float 0.000000e+00, %252, !dbg !42
  %269 = fsub float 0.000000e+00, %253, !dbg !42
  %270 = fsub float 0.000000e+00, %254, !dbg !42
  %271 = fsub float 0.000000e+00, %255, !dbg !42
  %272 = fsub float 0.000000e+00, %256, !dbg !42
  %273 = fsub float 0.000000e+00, %257, !dbg !42
  %274 = fsub float 0.000000e+00, %258, !dbg !42
  %275 = fsub float 0.000000e+00, %259, !dbg !42
  %276 = fsub float 0.000000e+00, %260, !dbg !42
  %277 = fsub float 0.000000e+00, %261, !dbg !42
  %278 = fsub float 0.000000e+00, %262, !dbg !42
  %279 = fmul float %263, 0x3FF7154760000000, !dbg !46
  %280 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %279) #4, !dbg !46
  %281 = fmul float %264, 0x3FF7154760000000, !dbg !46
  %282 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %281) #4, !dbg !46
  %283 = fmul float %265, 0x3FF7154760000000, !dbg !46
  %284 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %283) #4, !dbg !46
  %285 = fmul float %266, 0x3FF7154760000000, !dbg !46
  %286 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %285) #4, !dbg !46
  %287 = fmul float %267, 0x3FF7154760000000, !dbg !46
  %288 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %287) #4, !dbg !46
  %289 = fmul float %268, 0x3FF7154760000000, !dbg !46
  %290 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %289) #4, !dbg !46
  %291 = fmul float %269, 0x3FF7154760000000, !dbg !46
  %292 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %291) #4, !dbg !46
  %293 = fmul float %270, 0x3FF7154760000000, !dbg !46
  %294 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %293) #4, !dbg !46
  %295 = fmul float %271, 0x3FF7154760000000, !dbg !46
  %296 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %295) #4, !dbg !46
  %297 = fmul float %272, 0x3FF7154760000000, !dbg !46
  %298 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %297) #4, !dbg !46
  %299 = fmul float %273, 0x3FF7154760000000, !dbg !46
  %300 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %299) #4, !dbg !46
  %301 = fmul float %274, 0x3FF7154760000000, !dbg !46
  %302 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %301) #4, !dbg !46
  %303 = fmul float %275, 0x3FF7154760000000, !dbg !46
  %304 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %303) #4, !dbg !46
  %305 = fmul float %276, 0x3FF7154760000000, !dbg !46
  %306 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %305) #4, !dbg !46
  %307 = fmul float %277, 0x3FF7154760000000, !dbg !46
  %308 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %307) #4, !dbg !46
  %309 = fmul float %278, 0x3FF7154760000000, !dbg !46
  %310 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %309) #4, !dbg !46
  %311 = fadd float %280, 1.000000e+00, !dbg !47
  %312 = fadd float %282, 1.000000e+00, !dbg !47
  %313 = fadd float %284, 1.000000e+00, !dbg !47
  %314 = fadd float %286, 1.000000e+00, !dbg !47
  %315 = fadd float %288, 1.000000e+00, !dbg !47
  %316 = fadd float %290, 1.000000e+00, !dbg !47
  %317 = fadd float %292, 1.000000e+00, !dbg !47
  %318 = fadd float %294, 1.000000e+00, !dbg !47
  %319 = fadd float %296, 1.000000e+00, !dbg !47
  %320 = fadd float %298, 1.000000e+00, !dbg !47
  %321 = fadd float %300, 1.000000e+00, !dbg !47
  %322 = fadd float %302, 1.000000e+00, !dbg !47
  %323 = fadd float %304, 1.000000e+00, !dbg !47
  %324 = fadd float %306, 1.000000e+00, !dbg !47
  %325 = fadd float %308, 1.000000e+00, !dbg !47
  %326 = fadd float %310, 1.000000e+00, !dbg !47
  %327 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %311) #4, !dbg !48
  %328 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %312) #4, !dbg !48
  %329 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %313) #4, !dbg !48
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %314) #4, !dbg !48
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %315) #4, !dbg !48
  %332 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %316) #4, !dbg !48
  %333 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %317) #4, !dbg !48
  %334 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %318) #4, !dbg !48
  %335 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %319) #4, !dbg !48
  %336 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %320) #4, !dbg !48
  %337 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %321) #4, !dbg !48
  %338 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %322) #4, !dbg !48
  %339 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %323) #4, !dbg !48
  %340 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %324) #4, !dbg !48
  %341 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %325) #4, !dbg !48
  %342 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %326) #4, !dbg !48
  %343 = fmul float %247, %327, !dbg !49
  %344 = fmul float %248, %328, !dbg !49
  %345 = fmul float %249, %329, !dbg !49
  %346 = fmul float %250, %330, !dbg !49
  %347 = fmul float %251, %331, !dbg !49
  %348 = fmul float %252, %332, !dbg !49
  %349 = fmul float %253, %333, !dbg !49
  %350 = fmul float %254, %334, !dbg !49
  %351 = fmul float %255, %335, !dbg !49
  %352 = fmul float %256, %336, !dbg !49
  %353 = fmul float %257, %337, !dbg !49
  %354 = fmul float %258, %338, !dbg !49
  %355 = fmul float %259, %339, !dbg !49
  %356 = fmul float %260, %340, !dbg !49
  %357 = fmul float %261, %341, !dbg !49
  %358 = fmul float %262, %342, !dbg !49
  %359 = shl i32 %194, 6, !dbg !50
  %360 = shl i32 %204, 6, !dbg !50
  %361 = shl i32 %201, 6, !dbg !50
  %362 = shl i32 %195, 6, !dbg !50
  %363 = shl i32 %209, 14, !dbg !51
  %364 = add i32 %363, %.decomposed, !dbg !52
  %365 = add i32 %364, %359, !dbg !53
  %366 = add i32 %364, %360, !dbg !53
  %367 = add i32 %364, %361, !dbg !53
  %368 = add i32 %364, %362, !dbg !53
  %369 = sext i32 %365 to i64, !dbg !54
  %370 = getelementptr float, ptr addrspace(1) %5, i64 %369, !dbg !54
  %371 = sext i32 %366 to i64, !dbg !54
  %372 = getelementptr float, ptr addrspace(1) %5, i64 %371, !dbg !54
  %373 = sext i32 %367 to i64, !dbg !54
  %374 = getelementptr float, ptr addrspace(1) %5, i64 %373, !dbg !54
  %375 = sext i32 %368 to i64, !dbg !54
  %376 = getelementptr float, ptr addrspace(1) %5, i64 %375, !dbg !54
  %377 = shl i32 %11, 10, !dbg !55
  %378 = and i32 %377, 3072, !dbg !55
  %379 = or disjoint i32 %378, %13, !dbg !55
  %380 = and i32 %14, 1020, !dbg !55
  %381 = lshr exact i32 %378, 4, !dbg !55
  %382 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %381, !dbg !55
  %383 = getelementptr float, ptr addrspace(3) %382, i32 %379, !dbg !55
  %384 = bitcast float %343 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %383, <1 x i32> %384, i1 true) #4, !dbg !55
  %385 = or disjoint i32 %379, 256, !dbg !55
  %386 = lshr i32 %385, 6, !dbg !55
  %387 = getelementptr float, ptr addrspace(3) @global_smem, i32 %386, !dbg !55
  %388 = getelementptr float, ptr addrspace(3) %387, i32 %385, !dbg !55
  %389 = bitcast float %344 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %388, <1 x i32> %389, i1 true) #4, !dbg !55
  %390 = or disjoint i32 %379, 512, !dbg !55
  %391 = lshr i32 %390, 6, !dbg !55
  %392 = getelementptr float, ptr addrspace(3) @global_smem, i32 %391, !dbg !55
  %393 = getelementptr float, ptr addrspace(3) %392, i32 %390, !dbg !55
  %394 = bitcast float %345 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %393, <1 x i32> %394, i1 true) #4, !dbg !55
  %395 = or disjoint i32 %379, 768, !dbg !55
  %396 = lshr i32 %395, 6, !dbg !55
  %397 = getelementptr float, ptr addrspace(3) @global_smem, i32 %396, !dbg !55
  %398 = getelementptr float, ptr addrspace(3) %397, i32 %395, !dbg !55
  %399 = bitcast float %346 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %398, <1 x i32> %399, i1 true) #4, !dbg !55
  %400 = or disjoint i32 %379, 64, !dbg !55
  %401 = getelementptr float, ptr addrspace(3) %382, i32 %400, !dbg !55
  %402 = bitcast float %347 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %401, <1 x i32> %402, i1 true) #4, !dbg !55
  %403 = or disjoint i32 %379, 320, !dbg !55
  %404 = lshr i32 %403, 6, !dbg !55
  %405 = and i32 %404, 52, !dbg !55
  %406 = getelementptr float, ptr addrspace(3) @global_smem, i32 %405, !dbg !55
  %407 = getelementptr float, ptr addrspace(3) %406, i32 %403, !dbg !55
  %408 = bitcast float %348 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %407, <1 x i32> %408, i1 true) #4, !dbg !55
  %409 = or disjoint i32 %379, 576, !dbg !55
  %410 = lshr i32 %409, 6, !dbg !55
  %411 = and i32 %410, 56, !dbg !55
  %412 = getelementptr float, ptr addrspace(3) @global_smem, i32 %411, !dbg !55
  %413 = getelementptr float, ptr addrspace(3) %412, i32 %409, !dbg !55
  %414 = bitcast float %349 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %413, <1 x i32> %414, i1 true) #4, !dbg !55
  %415 = or disjoint i32 %379, 832, !dbg !55
  %416 = lshr i32 %415, 6, !dbg !55
  %417 = and i32 %416, 60, !dbg !55
  %418 = getelementptr float, ptr addrspace(3) @global_smem, i32 %417, !dbg !55
  %419 = getelementptr float, ptr addrspace(3) %418, i32 %415, !dbg !55
  %420 = bitcast float %350 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %419, <1 x i32> %420, i1 true) #4, !dbg !55
  %421 = or disjoint i32 %379, 128, !dbg !55
  %422 = getelementptr float, ptr addrspace(3) %382, i32 %421, !dbg !55
  %423 = bitcast float %351 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %422, <1 x i32> %423, i1 true) #4, !dbg !55
  %424 = or disjoint i32 %379, 384, !dbg !55
  %425 = lshr i32 %424, 6, !dbg !55
  %426 = and i32 %425, 52, !dbg !55
  %427 = getelementptr float, ptr addrspace(3) @global_smem, i32 %426, !dbg !55
  %428 = getelementptr float, ptr addrspace(3) %427, i32 %424, !dbg !55
  %429 = bitcast float %352 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %428, <1 x i32> %429, i1 true) #4, !dbg !55
  %430 = or disjoint i32 %379, 640, !dbg !55
  %431 = lshr i32 %430, 6, !dbg !55
  %432 = and i32 %431, 56, !dbg !55
  %433 = getelementptr float, ptr addrspace(3) @global_smem, i32 %432, !dbg !55
  %434 = getelementptr float, ptr addrspace(3) %433, i32 %430, !dbg !55
  %435 = bitcast float %353 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %434, <1 x i32> %435, i1 true) #4, !dbg !55
  %436 = or disjoint i32 %379, 896, !dbg !55
  %437 = lshr i32 %436, 6, !dbg !55
  %438 = and i32 %437, 60, !dbg !55
  %439 = getelementptr float, ptr addrspace(3) @global_smem, i32 %438, !dbg !55
  %440 = getelementptr float, ptr addrspace(3) %439, i32 %436, !dbg !55
  %441 = bitcast float %354 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %440, <1 x i32> %441, i1 true) #4, !dbg !55
  %442 = or disjoint i32 %379, 192, !dbg !55
  %443 = getelementptr float, ptr addrspace(3) %382, i32 %442, !dbg !55
  %444 = bitcast float %355 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %443, <1 x i32> %444, i1 true) #4, !dbg !55
  %445 = or disjoint i32 %379, 448, !dbg !55
  %446 = lshr i32 %445, 6, !dbg !55
  %447 = and i32 %446, 52, !dbg !55
  %448 = getelementptr float, ptr addrspace(3) @global_smem, i32 %447, !dbg !55
  %449 = getelementptr float, ptr addrspace(3) %448, i32 %445, !dbg !55
  %450 = bitcast float %356 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %449, <1 x i32> %450, i1 true) #4, !dbg !55
  %451 = or disjoint i32 %379, 704, !dbg !55
  %452 = lshr i32 %451, 6, !dbg !55
  %453 = and i32 %452, 56, !dbg !55
  %454 = getelementptr float, ptr addrspace(3) @global_smem, i32 %453, !dbg !55
  %455 = getelementptr float, ptr addrspace(3) %454, i32 %451, !dbg !55
  %456 = bitcast float %357 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %455, <1 x i32> %456, i1 true) #4, !dbg !55
  %457 = or disjoint i32 %379, 960, !dbg !55
  %458 = lshr i32 %457, 6, !dbg !55
  %459 = and i32 %458, 60, !dbg !55
  %460 = getelementptr float, ptr addrspace(3) @global_smem, i32 %459, !dbg !55
  %461 = getelementptr float, ptr addrspace(3) %460, i32 %457, !dbg !55
  %462 = bitcast float %358 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %461, <1 x i32> %462, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %463 = lshr i32 %14, 6, !dbg !55
  %464 = and i32 %463, 12, !dbg !55
  %465 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %464, !dbg !55
  %466 = getelementptr inbounds float, ptr addrspace(3) %465, i32 %380, !dbg !55
  %467 = or disjoint i32 %380, 1024, !dbg !55
  %468 = lshr i32 %467, 6, !dbg !55
  %469 = and i32 %468, 28, !dbg !55
  %470 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %469, !dbg !55
  %471 = getelementptr inbounds float, ptr addrspace(3) %470, i32 %467, !dbg !55
  %472 = load <4 x i32>, ptr addrspace(3) %471, align 16, !dbg !55
  %473 = or disjoint i32 %380, 2048, !dbg !55
  %474 = lshr i32 %473, 6, !dbg !55
  %475 = and i32 %474, 44, !dbg !55
  %476 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %475, !dbg !55
  %477 = getelementptr inbounds float, ptr addrspace(3) %476, i32 %473, !dbg !55
  %478 = load <4 x i32>, ptr addrspace(3) %477, align 16, !dbg !55
  %479 = or disjoint i32 %380, 3072, !dbg !55
  %480 = lshr i32 %479, 6, !dbg !55
  %481 = and i32 %480, 60, !dbg !55
  %482 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %481, !dbg !55
  %483 = getelementptr inbounds float, ptr addrspace(3) %482, i32 %479, !dbg !55
  %484 = load <4 x i32>, ptr addrspace(3) %483, align 16, !dbg !55
  %.extract = load i32, ptr addrspace(3) %466, align 16, !dbg !55
  %485 = getelementptr inbounds i8, ptr addrspace(3) %466, i32 4, !dbg !55
  %.extract18 = load i32, ptr addrspace(3) %485, align 4, !dbg !55
  %486 = getelementptr inbounds i8, ptr addrspace(3) %466, i32 8, !dbg !55
  %.extract19 = load i32, ptr addrspace(3) %486, align 8, !dbg !55
  %487 = getelementptr inbounds i8, ptr addrspace(3) %466, i32 12, !dbg !55
  %.extract20 = load i32, ptr addrspace(3) %487, align 4, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %370, i1 %208) #4, !dbg !55
  %.extract21 = extractelement <4 x i32> %472, i64 0, !dbg !55
  %.extract22 = extractelement <4 x i32> %472, i64 1, !dbg !55
  %.extract23 = extractelement <4 x i32> %472, i64 2, !dbg !55
  %.extract24 = extractelement <4 x i32> %472, i64 3, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %372, i1 %206) #4, !dbg !55
  %.extract25 = extractelement <4 x i32> %478, i64 0, !dbg !55
  %.extract26 = extractelement <4 x i32> %478, i64 1, !dbg !55
  %.extract27 = extractelement <4 x i32> %478, i64 2, !dbg !55
  %.extract28 = extractelement <4 x i32> %478, i64 3, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %374, i1 %203) #4, !dbg !55
  %.extract29 = extractelement <4 x i32> %484, i64 0, !dbg !55
  %.extract30 = extractelement <4 x i32> %484, i64 1, !dbg !55
  %.extract31 = extractelement <4 x i32> %484, i64 2, !dbg !55
  %.extract32 = extractelement <4 x i32> %484, i64 3, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %376, i1 %200) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpvu2pwfgzbuhxht6w2wp3t7hmwut2v4x3lqtrweigi64drg3efj.py", directory: "inductor_cache/pv")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_silu_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_silu_32, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_silu_32", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_silu_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 52, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 31, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 26, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 26, column: 44, scope: !7)
!36 = !DILocation(line: 31, column: 19, scope: !7)
!37 = !DILocation(line: 30, column: 19, scope: !7)
!38 = !DILocation(line: 42, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 30, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!45 = !DILocation(line: 48, column: 23, scope: !7)
!46 = !DILocation(line: 47, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 47, column: 20, scope: !43, inlinedAt: !45)
!48 = !DILocation(line: 47, column: 16, scope: !43, inlinedAt: !45)
!49 = !DILocation(line: 49, column: 20, scope: !7)
!50 = !DILocation(line: 50, column: 33, scope: !7)
!51 = !DILocation(line: 50, column: 44, scope: !7)
!52 = !DILocation(line: 50, column: 30, scope: !7)
!53 = !DILocation(line: 50, column: 38, scope: !7)
!54 = !DILocation(line: 50, column: 25, scope: !7)
!55 = !DILocation(line: 50, column: 56, scope: !7)
!56 = !DILocation(line: 50, column: 4, scope: !7)
