; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_mul_sum_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 576, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %12 = sdiv i32 %.frozen, 144, !dbg !15
  %13 = mul i32 %12, 144, !dbg !16
  %.decomposed = sub i32 %.frozen, %13, !dbg !16
  %14 = sext i32 %.decomposed to i64, !dbg !17
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !17
  %16 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %15, i1 %11) #1, !dbg !18
  %17 = extractvalue { i32, i32 } %16, 0, !dbg !18
  %18 = extractvalue { i32, i32 } %16, 1, !dbg !18
  %19 = shl nsw i32 %12, 2, !dbg !19
  %20 = sext i32 %19 to i64, !dbg !20
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !20
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %11) #1, !dbg !21
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %11) #1, !dbg !21
  %24 = getelementptr i8, ptr addrspace(1) %15, i64 576, !dbg !22
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 %11) #1, !dbg !23
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !23
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !23
  %28 = or disjoint i32 %19, 1, !dbg !24
  %29 = sext i32 %28 to i64, !dbg !25
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !25
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %11) #1, !dbg !26
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %11) #1, !dbg !26
  %33 = getelementptr i8, ptr addrspace(1) %15, i64 1152, !dbg !27
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %11) #1, !dbg !28
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !28
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !28
  %37 = or disjoint i32 %19, 2, !dbg !29
  %38 = sext i32 %37 to i64, !dbg !30
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !30
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %11) #1, !dbg !31
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %11) #1, !dbg !31
  %42 = getelementptr i8, ptr addrspace(1) %15, i64 1728, !dbg !32
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %11) #1, !dbg !33
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !33
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !33
  %46 = or disjoint i32 %19, 3, !dbg !34
  %47 = sext i32 %46 to i64, !dbg !35
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !35
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %11) #1, !dbg !36
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %11) #1, !dbg !36
  %51 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !18
  %52 = insertelement <2 x i32> %51, i32 %26, i64 1, !dbg !18
  %53 = bitcast <2 x i32> %52 to <2 x float>, !dbg !18
  %54 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !21
  %55 = insertelement <2 x i32> %54, i32 %31, i64 1, !dbg !21
  %56 = bitcast <2 x i32> %55 to <2 x float>, !dbg !21
  %57 = fmul <2 x float> %53, %56, !dbg !37
  %58 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !18
  %59 = insertelement <2 x i32> %58, i32 %27, i64 1, !dbg !18
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !18
  %61 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !21
  %62 = insertelement <2 x i32> %61, i32 %32, i64 1, !dbg !21
  %63 = bitcast <2 x i32> %62 to <2 x float>, !dbg !21
  %64 = fmul <2 x float> %60, %63, !dbg !37
  %shift = shufflevector <2 x float> %57, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !38
  %65 = fadd <2 x float> %57, %shift, !dbg !38
  %shift1 = shufflevector <2 x float> %64, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !38
  %66 = fadd <2 x float> %64, %shift1, !dbg !38
  %67 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !28
  %68 = insertelement <2 x i32> %67, i32 %44, i64 1, !dbg !28
  %69 = bitcast <2 x i32> %68 to <2 x float>, !dbg !28
  %70 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !31
  %71 = insertelement <2 x i32> %70, i32 %49, i64 1, !dbg !31
  %72 = bitcast <2 x i32> %71 to <2 x float>, !dbg !31
  %73 = fmul <2 x float> %69, %72, !dbg !39
  %74 = fadd <2 x float> %65, %73, !dbg !40
  %75 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !28
  %76 = insertelement <2 x i32> %75, i32 %45, i64 1, !dbg !28
  %77 = bitcast <2 x i32> %76 to <2 x float>, !dbg !28
  %78 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !31
  %79 = insertelement <2 x i32> %78, i32 %50, i64 1, !dbg !31
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !31
  %81 = fmul <2 x float> %77, %80, !dbg !39
  %82 = fadd <2 x float> %66, %81, !dbg !40
  %shift2 = shufflevector <2 x float> %73, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !41
  %83 = fadd <2 x float> %74, %shift2, !dbg !41
  %shift3 = shufflevector <2 x float> %81, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !41
  %84 = fadd <2 x float> %82, %shift3, !dbg !41
  %85 = sext i32 %10 to i64, !dbg !42
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !42
  %bc = bitcast <2 x float> %83 to <2 x i32>, !dbg !43
  %87 = extractelement <2 x i32> %bc, i64 0, !dbg !43
  %bc4 = bitcast <2 x float> %84 to <2 x i32>, !dbg !43
  %88 = extractelement <2 x i32> %bc4, i64 0, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %87, i32 %88, ptr addrspace(1) %86, i1 %11) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnngej77unxvk6iinulgfskdwo3xlnkum32egoal2x27k5fstgcm.py", directory: "inductor_cache/nn")
!4 = !{ptr @triton_poi_fused_mul_sum_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_sum_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_sum_5", linkageName: "triton_poi_fused_mul_sum_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 32, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 37, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 41, scope: !7)
!24 = !DILocation(line: 30, column: 34, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 41, scope: !7)
!27 = !DILocation(line: 31, column: 30, scope: !7)
!28 = !DILocation(line: 31, column: 41, scope: !7)
!29 = !DILocation(line: 32, column: 34, scope: !7)
!30 = !DILocation(line: 32, column: 30, scope: !7)
!31 = !DILocation(line: 32, column: 41, scope: !7)
!32 = !DILocation(line: 33, column: 31, scope: !7)
!33 = !DILocation(line: 33, column: 42, scope: !7)
!34 = !DILocation(line: 34, column: 35, scope: !7)
!35 = !DILocation(line: 34, column: 31, scope: !7)
!36 = !DILocation(line: 34, column: 42, scope: !7)
!37 = !DILocation(line: 35, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 38, column: 18, scope: !7)
!40 = !DILocation(line: 39, column: 19, scope: !7)
!41 = !DILocation(line: 41, column: 20, scope: !7)
!42 = !DILocation(line: 42, column: 25, scope: !7)
!43 = !DILocation(line: 42, column: 37, scope: !7)
!44 = !DILocation(line: 42, column: 4, scope: !7)
