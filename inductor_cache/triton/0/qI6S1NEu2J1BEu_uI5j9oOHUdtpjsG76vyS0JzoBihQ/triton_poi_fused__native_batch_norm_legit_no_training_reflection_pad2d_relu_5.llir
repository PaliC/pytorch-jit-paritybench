; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = or disjoint i32 %13, 512, !dbg !13
  %18 = or disjoint i32 %13, 513, !dbg !13
  %19 = or disjoint i32 %13, 514, !dbg !13
  %20 = or disjoint i32 %13, 515, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %21 = sdiv i32 %.frozen, 18, !dbg !14
  %22 = mul i32 %21, 18, !dbg !15
  %.decomposed = sub i32 %.frozen, %22, !dbg !15
  %23 = srem i32 %14, 18, !dbg !15
  %.frozen57 = freeze i32 %15, !dbg !14
  %24 = sdiv i32 %.frozen57, 18, !dbg !14
  %25 = mul i32 %24, 18, !dbg !15
  %.decomposed58 = sub i32 %.frozen57, %25, !dbg !15
  %26 = srem i32 %16, 18, !dbg !15
  %.frozen59 = freeze i32 %17, !dbg !14
  %27 = sdiv i32 %.frozen59, 18, !dbg !14
  %28 = mul i32 %27, 18, !dbg !15
  %.decomposed60 = sub i32 %.frozen59, %28, !dbg !15
  %29 = srem i32 %18, 18, !dbg !15
  %.frozen61 = freeze i32 %19, !dbg !14
  %30 = sdiv i32 %.frozen61, 18, !dbg !14
  %31 = mul i32 %30, 18, !dbg !15
  %.decomposed62 = sub i32 %.frozen61, %31, !dbg !15
  %32 = srem i32 %20, 18, !dbg !15
  %33 = srem i32 %21, 18, !dbg !16
  %34 = srem i32 %24, 18, !dbg !16
  %35 = srem i32 %27, 18, !dbg !16
  %36 = srem i32 %30, 18, !dbg !16
  %37 = sdiv i32 %13, 324, !dbg !17
  %38 = sdiv i32 %17, 324, !dbg !17
  %39 = srem i32 %37, 256, !dbg !18
  %40 = srem i32 %38, 256, !dbg !18
  %41 = add nsw i32 %.decomposed, -1, !dbg !19
  %42 = add nsw i32 %23, -1, !dbg !19
  %43 = add nsw i32 %.decomposed58, -1, !dbg !19
  %44 = add nsw i32 %26, -1, !dbg !19
  %45 = add nsw i32 %.decomposed60, -1, !dbg !19
  %46 = add nsw i32 %29, -1, !dbg !19
  %47 = add nsw i32 %.decomposed62, -1, !dbg !19
  %48 = add nsw i32 %32, -1, !dbg !19
  %49 = tail call i32 @llvm.abs.i32(i32 %41, i1 true), !dbg !20
  %50 = tail call i32 @llvm.abs.i32(i32 %42, i1 true), !dbg !20
  %51 = tail call i32 @llvm.abs.i32(i32 %43, i1 true), !dbg !20
  %52 = tail call i32 @llvm.abs.i32(i32 %44, i1 true), !dbg !20
  %53 = tail call i32 @llvm.abs.i32(i32 %45, i1 true), !dbg !20
  %54 = tail call i32 @llvm.abs.i32(i32 %46, i1 true), !dbg !20
  %55 = tail call i32 @llvm.abs.i32(i32 %47, i1 true), !dbg !20
  %56 = tail call i32 @llvm.abs.i32(i32 %48, i1 true), !dbg !20
  %57 = add nsw i32 %49, -15, !dbg !21
  %58 = add nsw i32 %50, -15, !dbg !21
  %59 = add nsw i32 %51, -15, !dbg !21
  %60 = add nsw i32 %52, -15, !dbg !21
  %61 = add nsw i32 %53, -15, !dbg !21
  %62 = add nsw i32 %54, -15, !dbg !21
  %63 = add nsw i32 %55, -15, !dbg !21
  %64 = add nsw i32 %56, -15, !dbg !21
  %65 = tail call i32 @llvm.abs.i32(i32 %57, i1 true), !dbg !22
  %66 = tail call i32 @llvm.abs.i32(i32 %58, i1 true), !dbg !22
  %67 = tail call i32 @llvm.abs.i32(i32 %59, i1 true), !dbg !22
  %68 = tail call i32 @llvm.abs.i32(i32 %60, i1 true), !dbg !22
  %69 = tail call i32 @llvm.abs.i32(i32 %61, i1 true), !dbg !22
  %70 = tail call i32 @llvm.abs.i32(i32 %62, i1 true), !dbg !22
  %71 = tail call i32 @llvm.abs.i32(i32 %63, i1 true), !dbg !22
  %72 = tail call i32 @llvm.abs.i32(i32 %64, i1 true), !dbg !22
  %73 = add nsw i32 %33, -1, !dbg !23
  %74 = add nsw i32 %34, -1, !dbg !23
  %75 = add nsw i32 %35, -1, !dbg !23
  %76 = add nsw i32 %36, -1, !dbg !23
  %77 = tail call i32 @llvm.abs.i32(i32 %73, i1 true), !dbg !24
  %78 = tail call i32 @llvm.abs.i32(i32 %74, i1 true), !dbg !24
  %79 = tail call i32 @llvm.abs.i32(i32 %75, i1 true), !dbg !24
  %80 = tail call i32 @llvm.abs.i32(i32 %76, i1 true), !dbg !24
  %81 = add nsw i32 %77, -15, !dbg !25
  %82 = add nsw i32 %78, -15, !dbg !25
  %83 = add nsw i32 %79, -15, !dbg !25
  %84 = add nsw i32 %80, -15, !dbg !25
  %85 = tail call i32 @llvm.abs.i32(i32 %81, i1 true), !dbg !26
  %86 = tail call i32 @llvm.abs.i32(i32 %82, i1 true), !dbg !26
  %87 = tail call i32 @llvm.abs.i32(i32 %83, i1 true), !dbg !26
  %88 = tail call i32 @llvm.abs.i32(i32 %84, i1 true), !dbg !26
  %89 = mul nsw i32 %85, -16, !dbg !27
  %90 = mul nsw i32 %86, -16, !dbg !27
  %91 = mul nsw i32 %87, -16, !dbg !27
  %92 = mul nsw i32 %88, -16, !dbg !27
  %93 = shl nsw i32 %37, 8, !dbg !28
  %94 = shl nsw i32 %38, 8, !dbg !28
  %reass.sub = or disjoint i32 %93, 255, !dbg !29
  %95 = sub nuw i32 %reass.sub, %65, !dbg !29
  %96 = add i32 %95, %89, !dbg !30
  %97 = sub nuw i32 %reass.sub, %66, !dbg !29
  %98 = add i32 %97, %89, !dbg !30
  %99 = sub nuw i32 %reass.sub, %67, !dbg !29
  %100 = add i32 %99, %90, !dbg !30
  %101 = sub nuw i32 %reass.sub, %68, !dbg !29
  %102 = add i32 %101, %90, !dbg !30
  %reass.sub4 = or disjoint i32 %94, 255, !dbg !29
  %103 = sub nuw i32 %reass.sub4, %69, !dbg !29
  %104 = add i32 %103, %91, !dbg !30
  %105 = sub nuw i32 %reass.sub4, %70, !dbg !29
  %106 = add i32 %105, %91, !dbg !30
  %107 = sub nuw i32 %reass.sub4, %71, !dbg !29
  %108 = add i32 %107, %92, !dbg !30
  %109 = sub nuw i32 %reass.sub4, %72, !dbg !29
  %110 = add i32 %109, %92, !dbg !30
  %111 = sext i32 %96 to i64, !dbg !31
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !31
  %113 = sext i32 %98 to i64, !dbg !31
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !31
  %115 = sext i32 %100 to i64, !dbg !31
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !31
  %117 = sext i32 %102 to i64, !dbg !31
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !31
  %119 = sext i32 %104 to i64, !dbg !31
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !31
  %121 = sext i32 %106 to i64, !dbg !31
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !31
  %123 = sext i32 %108 to i64, !dbg !31
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !31
  %125 = sext i32 %110 to i64, !dbg !31
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !31
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #3, !dbg !32
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #3, !dbg !32
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 true) #3, !dbg !32
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #3, !dbg !32
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 true) #3, !dbg !32
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #3, !dbg !32
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 true) #3, !dbg !32
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 true) #3, !dbg !32
  %135 = sext i32 %39 to i64, !dbg !33
  %136 = getelementptr float, ptr addrspace(1) %1, i64 %135, !dbg !33
  %137 = sext i32 %40 to i64, !dbg !33
  %138 = getelementptr float, ptr addrspace(1) %1, i64 %137, !dbg !33
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 true) #3, !dbg !34
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 true) #3, !dbg !34
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 true) #3, !dbg !34
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 true) #3, !dbg !34
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 true) #3, !dbg !34
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 true) #3, !dbg !34
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 true) #3, !dbg !34
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 true) #3, !dbg !34
  %147 = getelementptr float, ptr addrspace(1) %2, i64 %135, !dbg !35
  %148 = getelementptr float, ptr addrspace(1) %2, i64 %137, !dbg !35
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 true) #3, !dbg !36
  %150 = bitcast i32 %149 to float, !dbg !36
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 true) #3, !dbg !36
  %152 = bitcast i32 %151 to float, !dbg !36
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 true) #3, !dbg !36
  %154 = bitcast i32 %153 to float, !dbg !36
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 true) #3, !dbg !36
  %156 = bitcast i32 %155 to float, !dbg !36
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #3, !dbg !36
  %158 = bitcast i32 %157 to float, !dbg !36
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #3, !dbg !36
  %160 = bitcast i32 %159 to float, !dbg !36
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #3, !dbg !36
  %162 = bitcast i32 %161 to float, !dbg !36
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #3, !dbg !36
  %164 = bitcast i32 %163 to float, !dbg !36
  %165 = getelementptr float, ptr addrspace(1) %3, i64 %135, !dbg !37
  %166 = getelementptr float, ptr addrspace(1) %3, i64 %137, !dbg !37
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 true) #3, !dbg !38
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 true) #3, !dbg !38
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 true) #3, !dbg !38
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 true) #3, !dbg !38
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 true) #3, !dbg !38
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 true) #3, !dbg !38
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 true) #3, !dbg !38
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 true) #3, !dbg !38
  %175 = getelementptr float, ptr addrspace(1) %4, i64 %135, !dbg !39
  %176 = getelementptr float, ptr addrspace(1) %4, i64 %137, !dbg !39
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 true) #3, !dbg !40
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 true) #3, !dbg !40
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 true) #3, !dbg !40
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 true) #3, !dbg !40
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 true) #3, !dbg !40
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 true) #3, !dbg !40
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 true) #3, !dbg !40
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 true) #3, !dbg !40
  %185 = fadd float %150, 0x3EE4F8B580000000, !dbg !41
  %186 = fadd float %152, 0x3EE4F8B580000000, !dbg !41
  %187 = fadd float %154, 0x3EE4F8B580000000, !dbg !41
  %188 = fadd float %156, 0x3EE4F8B580000000, !dbg !41
  %189 = fadd float %158, 0x3EE4F8B580000000, !dbg !41
  %190 = fadd float %160, 0x3EE4F8B580000000, !dbg !41
  %191 = fadd float %162, 0x3EE4F8B580000000, !dbg !41
  %192 = fadd float %164, 0x3EE4F8B580000000, !dbg !41
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i = icmp eq i32 %193, 0, !dbg !42
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i = icmp eq i32 %194, 0, !dbg !42
  br i1 %.not.i, label %200, label %195, !dbg !42

195:                                              ; preds = %7
  br i1 %.not1.i, label %198, label %196, !dbg !42

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %185) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %185) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

200:                                              ; preds = %7
  br i1 %.not1.i, label %203, label %201, !dbg !42

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.f(float %185) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.f(float %185) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %196, %198, %201, %203
  %.0.i = phi float [ %197, %196 ], [ %199, %198 ], [ %202, %201 ], [ %204, %203 ], !dbg !42
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i8 = icmp eq i32 %205, 0, !dbg !42
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i11 = icmp eq i32 %206, 0, !dbg !42
  br i1 %.not.i8, label %212, label %207, !dbg !42

207:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %210, label %208, !dbg !42

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %186) #3, !dbg !42
  br label %__nv_sqrtf.exit12, !dbg !42

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %186) #3, !dbg !42
  br label %__nv_sqrtf.exit12, !dbg !42

212:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %215, label %213, !dbg !42

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.f(float %186) #3, !dbg !42
  br label %__nv_sqrtf.exit12, !dbg !42

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.f(float %186) #3, !dbg !42
  br label %__nv_sqrtf.exit12, !dbg !42

__nv_sqrtf.exit12:                                ; preds = %208, %210, %213, %215
  %.0.i10 = phi float [ %209, %208 ], [ %211, %210 ], [ %214, %213 ], [ %216, %215 ], !dbg !42
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i13 = icmp eq i32 %217, 0, !dbg !42
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i16 = icmp eq i32 %218, 0, !dbg !42
  br i1 %.not.i13, label %224, label %219, !dbg !42

219:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %222, label %220, !dbg !42

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %187) #3, !dbg !42
  br label %__nv_sqrtf.exit17, !dbg !42

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %187) #3, !dbg !42
  br label %__nv_sqrtf.exit17, !dbg !42

224:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %227, label %225, !dbg !42

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.f(float %187) #3, !dbg !42
  br label %__nv_sqrtf.exit17, !dbg !42

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.f(float %187) #3, !dbg !42
  br label %__nv_sqrtf.exit17, !dbg !42

__nv_sqrtf.exit17:                                ; preds = %220, %222, %225, %227
  %.0.i15 = phi float [ %221, %220 ], [ %223, %222 ], [ %226, %225 ], [ %228, %227 ], !dbg !42
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i18 = icmp eq i32 %229, 0, !dbg !42
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i21 = icmp eq i32 %230, 0, !dbg !42
  br i1 %.not.i18, label %236, label %231, !dbg !42

231:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %234, label %232, !dbg !42

232:                                              ; preds = %231
  %233 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %188) #3, !dbg !42
  br label %__nv_sqrtf.exit22, !dbg !42

234:                                              ; preds = %231
  %235 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %188) #3, !dbg !42
  br label %__nv_sqrtf.exit22, !dbg !42

236:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %239, label %237, !dbg !42

237:                                              ; preds = %236
  %238 = tail call float @llvm.nvvm.sqrt.rn.f(float %188) #3, !dbg !42
  br label %__nv_sqrtf.exit22, !dbg !42

239:                                              ; preds = %236
  %240 = tail call float @llvm.nvvm.sqrt.approx.f(float %188) #3, !dbg !42
  br label %__nv_sqrtf.exit22, !dbg !42

__nv_sqrtf.exit22:                                ; preds = %232, %234, %237, %239
  %.0.i20 = phi float [ %233, %232 ], [ %235, %234 ], [ %238, %237 ], [ %240, %239 ], !dbg !42
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i23 = icmp eq i32 %241, 0, !dbg !42
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i26 = icmp eq i32 %242, 0, !dbg !42
  br i1 %.not.i23, label %248, label %243, !dbg !42

243:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %246, label %244, !dbg !42

244:                                              ; preds = %243
  %245 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %189) #3, !dbg !42
  br label %__nv_sqrtf.exit27, !dbg !42

246:                                              ; preds = %243
  %247 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %189) #3, !dbg !42
  br label %__nv_sqrtf.exit27, !dbg !42

248:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %251, label %249, !dbg !42

249:                                              ; preds = %248
  %250 = tail call float @llvm.nvvm.sqrt.rn.f(float %189) #3, !dbg !42
  br label %__nv_sqrtf.exit27, !dbg !42

251:                                              ; preds = %248
  %252 = tail call float @llvm.nvvm.sqrt.approx.f(float %189) #3, !dbg !42
  br label %__nv_sqrtf.exit27, !dbg !42

__nv_sqrtf.exit27:                                ; preds = %244, %246, %249, %251
  %.0.i25 = phi float [ %245, %244 ], [ %247, %246 ], [ %250, %249 ], [ %252, %251 ], !dbg !42
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i28 = icmp eq i32 %253, 0, !dbg !42
  %254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i31 = icmp eq i32 %254, 0, !dbg !42
  br i1 %.not.i28, label %260, label %255, !dbg !42

255:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %258, label %256, !dbg !42

256:                                              ; preds = %255
  %257 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %190) #3, !dbg !42
  br label %__nv_sqrtf.exit32, !dbg !42

258:                                              ; preds = %255
  %259 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %190) #3, !dbg !42
  br label %__nv_sqrtf.exit32, !dbg !42

260:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %263, label %261, !dbg !42

261:                                              ; preds = %260
  %262 = tail call float @llvm.nvvm.sqrt.rn.f(float %190) #3, !dbg !42
  br label %__nv_sqrtf.exit32, !dbg !42

263:                                              ; preds = %260
  %264 = tail call float @llvm.nvvm.sqrt.approx.f(float %190) #3, !dbg !42
  br label %__nv_sqrtf.exit32, !dbg !42

__nv_sqrtf.exit32:                                ; preds = %256, %258, %261, %263
  %.0.i30 = phi float [ %257, %256 ], [ %259, %258 ], [ %262, %261 ], [ %264, %263 ], !dbg !42
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i33 = icmp eq i32 %265, 0, !dbg !42
  %266 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i36 = icmp eq i32 %266, 0, !dbg !42
  br i1 %.not.i33, label %272, label %267, !dbg !42

267:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %270, label %268, !dbg !42

268:                                              ; preds = %267
  %269 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %191) #3, !dbg !42
  br label %__nv_sqrtf.exit37, !dbg !42

270:                                              ; preds = %267
  %271 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %191) #3, !dbg !42
  br label %__nv_sqrtf.exit37, !dbg !42

272:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %275, label %273, !dbg !42

273:                                              ; preds = %272
  %274 = tail call float @llvm.nvvm.sqrt.rn.f(float %191) #3, !dbg !42
  br label %__nv_sqrtf.exit37, !dbg !42

275:                                              ; preds = %272
  %276 = tail call float @llvm.nvvm.sqrt.approx.f(float %191) #3, !dbg !42
  br label %__nv_sqrtf.exit37, !dbg !42

__nv_sqrtf.exit37:                                ; preds = %268, %270, %273, %275
  %.0.i35 = phi float [ %269, %268 ], [ %271, %270 ], [ %274, %273 ], [ %276, %275 ], !dbg !42
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i38 = icmp eq i32 %277, 0, !dbg !42
  %278 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i41 = icmp eq i32 %278, 0, !dbg !42
  br i1 %.not.i38, label %284, label %279, !dbg !42

279:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %282, label %280, !dbg !42

280:                                              ; preds = %279
  %281 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %192) #3, !dbg !42
  br label %__nv_sqrtf.exit42, !dbg !42

282:                                              ; preds = %279
  %283 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %192) #3, !dbg !42
  br label %__nv_sqrtf.exit42, !dbg !42

284:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %287, label %285, !dbg !42

285:                                              ; preds = %284
  %286 = tail call float @llvm.nvvm.sqrt.rn.f(float %192) #3, !dbg !42
  br label %__nv_sqrtf.exit42, !dbg !42

287:                                              ; preds = %284
  %288 = tail call float @llvm.nvvm.sqrt.approx.f(float %192) #3, !dbg !42
  br label %__nv_sqrtf.exit42, !dbg !42

__nv_sqrtf.exit42:                                ; preds = %280, %282, %285, %287
  %.0.i40 = phi float [ %281, %280 ], [ %283, %282 ], [ %286, %285 ], [ %288, %287 ], !dbg !42
  %289 = insertelement <8 x i32> poison, i32 %134, i64 0, !dbg !32
  %290 = insertelement <8 x i32> %289, i32 %133, i64 1, !dbg !32
  %291 = insertelement <8 x i32> %290, i32 %132, i64 2, !dbg !32
  %292 = insertelement <8 x i32> %291, i32 %131, i64 3, !dbg !32
  %293 = insertelement <8 x i32> %292, i32 %130, i64 4, !dbg !32
  %294 = insertelement <8 x i32> %293, i32 %129, i64 5, !dbg !32
  %295 = insertelement <8 x i32> %294, i32 %128, i64 6, !dbg !32
  %296 = insertelement <8 x i32> %295, i32 %127, i64 7, !dbg !32
  %297 = bitcast <8 x i32> %296 to <8 x float>, !dbg !32
  %298 = insertelement <8 x i32> poison, i32 %146, i64 0, !dbg !34
  %299 = insertelement <8 x i32> %298, i32 %145, i64 1, !dbg !34
  %300 = insertelement <8 x i32> %299, i32 %144, i64 2, !dbg !34
  %301 = insertelement <8 x i32> %300, i32 %143, i64 3, !dbg !34
  %302 = insertelement <8 x i32> %301, i32 %142, i64 4, !dbg !34
  %303 = insertelement <8 x i32> %302, i32 %141, i64 5, !dbg !34
  %304 = insertelement <8 x i32> %303, i32 %140, i64 6, !dbg !34
  %305 = insertelement <8 x i32> %304, i32 %139, i64 7, !dbg !34
  %306 = bitcast <8 x i32> %305 to <8 x float>, !dbg !34
  %307 = insertelement <8 x i32> poison, i32 %184, i64 0, !dbg !40
  %308 = insertelement <8 x i32> %307, i32 %183, i64 1, !dbg !40
  %309 = insertelement <8 x i32> %308, i32 %182, i64 2, !dbg !40
  %310 = insertelement <8 x i32> %309, i32 %181, i64 3, !dbg !40
  %311 = insertelement <8 x i32> %310, i32 %180, i64 4, !dbg !40
  %312 = insertelement <8 x i32> %311, i32 %179, i64 5, !dbg !40
  %313 = insertelement <8 x i32> %312, i32 %178, i64 6, !dbg !40
  %314 = insertelement <8 x i32> %313, i32 %177, i64 7, !dbg !40
  %315 = bitcast <8 x i32> %314 to <8 x float>, !dbg !40
  %316 = insertelement <8 x i32> poison, i32 %174, i64 0, !dbg !38
  %317 = insertelement <8 x i32> %316, i32 %173, i64 1, !dbg !38
  %318 = insertelement <8 x i32> %317, i32 %172, i64 2, !dbg !38
  %319 = insertelement <8 x i32> %318, i32 %171, i64 3, !dbg !38
  %320 = insertelement <8 x i32> %319, i32 %170, i64 4, !dbg !38
  %321 = insertelement <8 x i32> %320, i32 %169, i64 5, !dbg !38
  %322 = insertelement <8 x i32> %321, i32 %168, i64 6, !dbg !38
  %323 = insertelement <8 x i32> %322, i32 %167, i64 7, !dbg !38
  %324 = bitcast <8 x i32> %323 to <8 x float>, !dbg !38
  %325 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !43
  %326 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #3, !dbg !43
  %327 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #3, !dbg !43
  %328 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #3, !dbg !43
  %329 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #3, !dbg !43
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #3, !dbg !43
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #3, !dbg !43
  %332 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #3, !dbg !43
  %333 = fsub <8 x float> %297, %306, !dbg !44
  %334 = insertelement <8 x float> poison, float %332, i64 0, !dbg !45
  %335 = insertelement <8 x float> %334, float %331, i64 1, !dbg !45
  %336 = insertelement <8 x float> %335, float %330, i64 2, !dbg !45
  %337 = insertelement <8 x float> %336, float %329, i64 3, !dbg !45
  %338 = insertelement <8 x float> %337, float %328, i64 4, !dbg !45
  %339 = insertelement <8 x float> %338, float %327, i64 5, !dbg !45
  %340 = insertelement <8 x float> %339, float %326, i64 6, !dbg !45
  %341 = insertelement <8 x float> %340, float %325, i64 7, !dbg !45
  %342 = fmul <8 x float> %333, %341, !dbg !45
  %343 = fmul <8 x float> %342, %324, !dbg !46
  %344 = fadd <8 x float> %343, %315, !dbg !47
  %345 = fcmp olt <8 x float> %344, zeroinitializer, !dbg !48
  %346 = extractelement <8 x i1> %345, i64 7, !dbg !52
  %347 = extractelement <8 x i1> %345, i64 6, !dbg !52
  %348 = extractelement <8 x i1> %345, i64 5, !dbg !52
  %349 = extractelement <8 x i1> %345, i64 4, !dbg !52
  %350 = extractelement <8 x i1> %345, i64 3, !dbg !52
  %351 = extractelement <8 x i1> %345, i64 2, !dbg !52
  %352 = extractelement <8 x i1> %345, i64 1, !dbg !52
  %353 = extractelement <8 x i1> %345, i64 0, !dbg !52
  %354 = sext i32 %13 to i64, !dbg !53
  %355 = getelementptr float, ptr addrspace(1) %5, i64 %354, !dbg !53
  %356 = sext i32 %17 to i64, !dbg !53
  %357 = getelementptr float, ptr addrspace(1) %5, i64 %356, !dbg !53
  %bc = bitcast <8 x float> %344 to <8 x i32>, !dbg !54
  %358 = extractelement <8 x i32> %bc, i64 7, !dbg !54
  %359 = select i1 %346, i32 0, i32 %358, !dbg !52
  %bc50 = bitcast <8 x float> %344 to <8 x i32>, !dbg !54
  %360 = extractelement <8 x i32> %bc50, i64 6, !dbg !54
  %361 = select i1 %347, i32 0, i32 %360, !dbg !52
  %bc51 = bitcast <8 x float> %344 to <8 x i32>, !dbg !54
  %362 = extractelement <8 x i32> %bc51, i64 5, !dbg !54
  %363 = select i1 %348, i32 0, i32 %362, !dbg !52
  %bc52 = bitcast <8 x float> %344 to <8 x i32>, !dbg !54
  %364 = extractelement <8 x i32> %bc52, i64 4, !dbg !54
  %365 = select i1 %349, i32 0, i32 %364, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %359, i32 %361, i32 %363, i32 %365, ptr addrspace(1) %355, i1 true) #3, !dbg !54
  %bc53 = bitcast <8 x float> %344 to <8 x i32>, !dbg !54
  %366 = extractelement <8 x i32> %bc53, i64 3, !dbg !54
  %367 = select i1 %350, i32 0, i32 %366, !dbg !52
  %bc54 = bitcast <8 x float> %344 to <8 x i32>, !dbg !54
  %368 = extractelement <8 x i32> %bc54, i64 2, !dbg !54
  %369 = select i1 %351, i32 0, i32 %368, !dbg !52
  %bc55 = bitcast <8 x float> %344 to <8 x i32>, !dbg !54
  %370 = extractelement <8 x i32> %bc55, i64 1, !dbg !54
  %371 = select i1 %352, i32 0, i32 %370, !dbg !52
  %bc56 = bitcast <8 x float> %344 to <8 x i32>, !dbg !54
  %372 = extractelement <8 x i32> %bc56, i64 0, !dbg !54
  %373 = select i1 %353, i32 0, i32 %372, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %367, i32 %369, i32 %371, i32 %373, ptr addrspace(1) %357, i1 true) #3, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c324rwzutg6pxfa3neidurnibp4krvkzfiowekni5pzdpvvveaxj.py", directory: "inductor_cache/32")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_5", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 28, scope: !7)
!19 = !DILocation(line: 29, column: 81, scope: !7)
!20 = !DILocation(line: 29, column: 74, scope: !7)
!21 = !DILocation(line: 29, column: 62, scope: !7)
!22 = !DILocation(line: 29, column: 54, scope: !7)
!23 = !DILocation(line: 29, column: 135, scope: !7)
!24 = !DILocation(line: 29, column: 128, scope: !7)
!25 = !DILocation(line: 29, column: 116, scope: !7)
!26 = !DILocation(line: 29, column: 108, scope: !7)
!27 = !DILocation(line: 29, column: 96, scope: !7)
!28 = !DILocation(line: 29, column: 147, scope: !7)
!29 = !DILocation(line: 29, column: 90, scope: !7)
!30 = !DILocation(line: 29, column: 143, scope: !7)
!31 = !DILocation(line: 29, column: 30, scope: !7)
!32 = !DILocation(line: 29, column: 152, scope: !7)
!33 = !DILocation(line: 30, column: 30, scope: !7)
!34 = !DILocation(line: 30, column: 35, scope: !7)
!35 = !DILocation(line: 31, column: 30, scope: !7)
!36 = !DILocation(line: 31, column: 35, scope: !7)
!37 = !DILocation(line: 32, column: 31, scope: !7)
!38 = !DILocation(line: 32, column: 36, scope: !7)
!39 = !DILocation(line: 33, column: 31, scope: !7)
!40 = !DILocation(line: 33, column: 36, scope: !7)
!41 = !DILocation(line: 36, column: 18, scope: !7)
!42 = !DILocation(line: 37, column: 26, scope: !7)
!43 = !DILocation(line: 39, column: 18, scope: !7)
!44 = !DILocation(line: 34, column: 18, scope: !7)
!45 = !DILocation(line: 42, column: 19, scope: !7)
!46 = !DILocation(line: 43, column: 20, scope: !7)
!47 = !DILocation(line: 44, column: 20, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 46, column: 42, scope: !7)
!52 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 47, column: 25, scope: !7)
!54 = !DILocation(line: 47, column: 37, scope: !7)
!55 = !DILocation(line: 47, column: 4, scope: !7)
