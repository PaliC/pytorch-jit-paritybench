#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [1], order = [0]}>
#loc = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 1 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_add_clamp_div_mean_mul_round_sub_2(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":19:0), %arg2: i32 loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_0 = arith.constant 1.52590219E-5 : f32 loc(#loc1)
    %cst_1 = arith.constant dense<6.553500e+04> : tensor<4xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<4xf32, #blocked> loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<4xi32, #blocked> loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c4_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<4xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<4xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_3 : tensor<4xi32, #blocked> loc(#loc6)
    %6 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>, #blocked> loc(#loc7)
    %7 = tt.addptr %6, %4 : tensor<4x!tt.ptr<f32>, #blocked>, tensor<4xi32, #blocked> loc(#loc7)
    %8 = tt.load %7, %5 : tensor<4x!tt.ptr<f32>, #blocked> loc(#loc8)
    %9 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc9)
    %10 = tt.load %9 : !tt.ptr<f32> loc(#loc10)
    %11 = tt.addptr %arg0, %c1_i32 : !tt.ptr<f32>, i32 loc(#loc11)
    %12 = tt.load %11 : !tt.ptr<f32> loc(#loc12)
    %13 = tt.addptr %arg0, %c2_i32 : !tt.ptr<f32>, i32 loc(#loc13)
    %14 = tt.load %13 : !tt.ptr<f32> loc(#loc14)
    %15 = tt.addptr %arg0, %c3_i32 : !tt.ptr<f32>, i32 loc(#loc15)
    %16 = tt.load %15 : !tt.ptr<f32> loc(#loc16)
    %17 = arith.cmpf ogt, %10, %12 : f32 loc(#loc46)
    %18 = arith.cmpf une, %10, %10 : f32 loc(#loc47)
    %19 = arith.ori %17, %18 : i1 loc(#loc48)
    %20 = arith.select %19, %10, %12 : f32 loc(#loc49)
    %21 = arith.cmpf ogt, %20, %14 : f32 loc(#loc50)
    %22 = arith.cmpf une, %20, %20 : f32 loc(#loc51)
    %23 = arith.ori %21, %22 : i1 loc(#loc52)
    %24 = arith.select %23, %20, %14 : f32 loc(#loc53)
    %25 = arith.cmpf ogt, %24, %16 : f32 loc(#loc54)
    %26 = arith.cmpf une, %24, %24 : f32 loc(#loc55)
    %27 = arith.ori %25, %26 : i1 loc(#loc56)
    %28 = arith.select %27, %24, %16 : f32 loc(#loc57)
    %29 = arith.cmpf olt, %10, %12 : f32 loc(#loc58)
    %30 = arith.ori %29, %18 : i1 loc(#loc59)
    %31 = arith.select %30, %10, %12 : f32 loc(#loc60)
    %32 = arith.cmpf olt, %31, %14 : f32 loc(#loc61)
    %33 = arith.cmpf une, %31, %31 : f32 loc(#loc62)
    %34 = arith.ori %32, %33 : i1 loc(#loc63)
    %35 = arith.select %34, %31, %14 : f32 loc(#loc64)
    %36 = arith.cmpf olt, %35, %16 : f32 loc(#loc65)
    %37 = arith.cmpf une, %35, %35 : f32 loc(#loc66)
    %38 = arith.ori %36, %37 : i1 loc(#loc67)
    %39 = arith.select %38, %35, %16 : f32 loc(#loc68)
    %40 = arith.subf %28, %39 : f32 loc(#loc31)
    %41 = arith.mulf %40, %cst_0 : f32 loc(#loc32)
    %42 = tt.splat %41 : f32 -> tensor<4xf32, #blocked> loc(#loc32)
    %43 = arith.mulf %41, %cst : f32 loc(#loc33)
    %44 = arith.subf %43, %39 : f32 loc(#loc34)
    %45 = tt.splat %44 : f32 -> tensor<4xf32, #blocked> loc(#loc34)
    %46 = arith.addf %8, %45 : tensor<4xf32, #blocked> loc(#loc35)
    %47 = arith.divf %46, %42 : tensor<4xf32, #blocked> loc(#loc36)
    %48 = arith.cmpf ogt, %47, %cst_2 : tensor<4xf32, #blocked> loc(#loc69)
    %49 = arith.cmpf une, %47, %47 : tensor<4xf32, #blocked> loc(#loc70)
    %50 = arith.ori %48, %49 : tensor<4xi1, #blocked> loc(#loc71)
    %51 = arith.select %50, %47, %cst_2 : tensor<4xi1, #blocked>, tensor<4xf32, #blocked> loc(#loc72)
    %52 = arith.cmpf olt, %51, %cst_1 : tensor<4xf32, #blocked> loc(#loc73)
    %53 = arith.cmpf une, %51, %51 : tensor<4xf32, #blocked> loc(#loc74)
    %54 = arith.ori %52, %53 : tensor<4xi1, #blocked> loc(#loc75)
    %55 = arith.select %54, %51, %cst_1 : tensor<4xi1, #blocked>, tensor<4xf32, #blocked> loc(#loc76)
    %56 = tt.extern_elementwise %55 {libname = "", libpath = "", pure = true, symbol = "__nv_nearbyintf"} : (tensor<4xf32, #blocked>) -> tensor<4xf32, #blocked> loc(#loc39)
    %57 = arith.mulf %56, %42 : tensor<4xf32, #blocked> loc(#loc40)
    %58 = arith.subf %39, %43 : f32 loc(#loc41)
    %59 = tt.splat %58 : f32 -> tensor<4xf32, #blocked> loc(#loc41)
    %60 = arith.addf %57, %59 : tensor<4xf32, #blocked> loc(#loc42)
    %61 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<4x!tt.ptr<f32>, #blocked> loc(#loc43)
    %62 = tt.addptr %61, %4 : tensor<4x!tt.ptr<f32>, #blocked>, tensor<4xi32, #blocked> loc(#loc43)
    tt.store %62, %60, %5 : tensor<4x!tt.ptr<f32>, #blocked> loc(#loc44)
    tt.return loc(#loc45)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":21:28)
#loc3 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":21:33)
#loc4 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":22:36)
#loc5 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":22:23)
#loc6 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":23:21)
#loc7 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":25:30)
#loc8 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":25:35)
#loc9 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":26:30)
#loc10 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":26:19)
#loc11 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":28:30)
#loc12 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":28:19)
#loc13 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":30:30)
#loc14 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":30:19)
#loc15 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":32:30)
#loc16 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":32:19)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc18 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":34:40)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc22 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":35:40)
#loc23 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":36:41)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":110:15)
#loc25 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":39:41)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":112:16)
#loc27 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":113:29)
#loc28 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":40:42)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":112:21)
#loc30 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":41:42)
#loc31 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":43:20)
#loc32 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":45:20)
#loc33 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":47:20)
#loc34 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":48:20)
#loc35 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":49:19)
#loc36 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":50:20)
#loc37 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":51:42)
#loc38 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":53:42)
#loc39 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":54:32)
#loc40 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":55:20)
#loc41 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":56:20)
#loc42 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":57:20)
#loc43 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":58:25)
#loc44 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":58:37)
#loc45 = loc("inductor_cache/63/c63sc4w2gtlxttwtqlw6vqvwr3mzftjr6holjpczhnmbquiumriq.py":58:4)
#loc46 = loc(callsite(#loc17 at #loc18))
#loc47 = loc(callsite(#loc19 at #loc18))
#loc48 = loc(callsite(#loc20 at #loc18))
#loc49 = loc(callsite(#loc21 at #loc18))
#loc50 = loc(callsite(#loc17 at #loc22))
#loc51 = loc(callsite(#loc19 at #loc22))
#loc52 = loc(callsite(#loc20 at #loc22))
#loc53 = loc(callsite(#loc21 at #loc22))
#loc54 = loc(callsite(#loc17 at #loc23))
#loc55 = loc(callsite(#loc19 at #loc23))
#loc56 = loc(callsite(#loc20 at #loc23))
#loc57 = loc(callsite(#loc21 at #loc23))
#loc58 = loc(callsite(#loc24 at #loc25))
#loc59 = loc(callsite(#loc26 at #loc25))
#loc60 = loc(callsite(#loc27 at #loc25))
#loc61 = loc(callsite(#loc24 at #loc28))
#loc62 = loc(callsite(#loc29 at #loc28))
#loc63 = loc(callsite(#loc26 at #loc28))
#loc64 = loc(callsite(#loc27 at #loc28))
#loc65 = loc(callsite(#loc24 at #loc30))
#loc66 = loc(callsite(#loc29 at #loc30))
#loc67 = loc(callsite(#loc26 at #loc30))
#loc68 = loc(callsite(#loc27 at #loc30))
#loc69 = loc(callsite(#loc17 at #loc37))
#loc70 = loc(callsite(#loc19 at #loc37))
#loc71 = loc(callsite(#loc20 at #loc37))
#loc72 = loc(callsite(#loc21 at #loc37))
#loc73 = loc(callsite(#loc24 at #loc38))
#loc74 = loc(callsite(#loc29 at #loc38))
#loc75 = loc(callsite(#loc26 at #loc38))
#loc76 = loc(callsite(#loc27 at #loc38))
