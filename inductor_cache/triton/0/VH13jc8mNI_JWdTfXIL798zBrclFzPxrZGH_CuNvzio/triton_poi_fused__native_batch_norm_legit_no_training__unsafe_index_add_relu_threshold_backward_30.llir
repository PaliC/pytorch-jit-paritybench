; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_30(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, ptr addrspace(1) %24, ptr addrspace(1) %25, i32 %26) local_unnamed_addr !dbg !7 {
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %29 = shl i32 %28, 7, !dbg !11
  %30 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %31 = and i32 %30, 127, !dbg !12
  %32 = or disjoint i32 %29, %31, !dbg !13
  %33 = sdiv i32 %32, 256, !dbg !14
  %34 = srem i32 %33, 32, !dbg !15
  %.frozen = freeze i32 %32, !dbg !16
  %35 = sdiv i32 %.frozen, 16, !dbg !16
  %36 = srem i32 %35, 16, !dbg !17
  %37 = mul i32 %35, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %37, !dbg !18
  %38 = sext i32 %32 to i64, !dbg !19
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !19
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !20
  %41 = sext i32 %34 to i64, !dbg !21
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !21
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !22
  %44 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !23
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !24
  %46 = bitcast i32 %45 to float, !dbg !24
  %47 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !25
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !26
  %49 = getelementptr float, ptr addrspace(1) %5, i64 %41, !dbg !27
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !28
  %51 = getelementptr float, ptr addrspace(1) %6, i64 %38, !dbg !29
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !30
  %53 = sext i32 %36 to i64, !dbg !31
  %54 = getelementptr i64, ptr addrspace(1) %7, i64 %53, !dbg !31
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !32
  %56 = sext i32 %.decomposed to i64, !dbg !33
  %57 = getelementptr i64, ptr addrspace(1) %7, i64 %56, !dbg !33
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !34
  %59 = getelementptr float, ptr addrspace(1) %9, i64 %41, !dbg !35
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !36
  %61 = getelementptr float, ptr addrspace(1) %10, i64 %41, !dbg !37
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !38
  %63 = bitcast i32 %62 to float, !dbg !38
  %64 = getelementptr float, ptr addrspace(1) %11, i64 %41, !dbg !39
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !40
  %66 = getelementptr float, ptr addrspace(1) %12, i64 %41, !dbg !41
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !42
  %68 = getelementptr i64, ptr addrspace(1) %13, i64 %53, !dbg !43
  %69 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !44
  %70 = getelementptr i64, ptr addrspace(1) %13, i64 %56, !dbg !45
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !46
  %72 = getelementptr float, ptr addrspace(1) %15, i64 %41, !dbg !47
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !48
  %74 = getelementptr float, ptr addrspace(1) %16, i64 %41, !dbg !49
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !50
  %76 = bitcast i32 %75 to float, !dbg !50
  %77 = getelementptr float, ptr addrspace(1) %17, i64 %41, !dbg !51
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !52
  %79 = getelementptr float, ptr addrspace(1) %18, i64 %41, !dbg !53
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !54
  %81 = getelementptr i64, ptr addrspace(1) %19, i64 %53, !dbg !55
  %82 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !56
  %83 = getelementptr i64, ptr addrspace(1) %19, i64 %56, !dbg !57
  %84 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !58
  %85 = getelementptr float, ptr addrspace(1) %21, i64 %41, !dbg !59
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !60
  %87 = getelementptr float, ptr addrspace(1) %22, i64 %41, !dbg !61
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !62
  %89 = bitcast i32 %88 to float, !dbg !62
  %90 = getelementptr float, ptr addrspace(1) %23, i64 %41, !dbg !63
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !64
  %92 = getelementptr float, ptr addrspace(1) %24, i64 %41, !dbg !65
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !66
  %94 = fadd float %46, 0x3EE4F8B580000000, !dbg !67
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i = icmp eq i32 %95, 0, !dbg !68
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i = icmp eq i32 %96, 0, !dbg !68
  br i1 %.not.i, label %102, label %97, !dbg !68

97:                                               ; preds = %27
  br i1 %.not1.i, label %100, label %98, !dbg !68

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

102:                                              ; preds = %27
  br i1 %.not1.i, label %105, label %103, !dbg !68

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

__nv_sqrtf.exit:                                  ; preds = %98, %100, %103, %105
  %.0.i = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !68
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !69
  %108 = lshr i64 %55, 60, !dbg !70
  %109 = and i64 %108, 8, !dbg !70
  %110 = add i64 %109, %55, !dbg !70
  %111 = lshr i64 %58, 60, !dbg !71
  %112 = and i64 %111, 8, !dbg !71
  %113 = shl nsw i32 %33, 6, !dbg !72
  %114 = sext i32 %113 to i64, !dbg !73
  %115 = getelementptr float, ptr addrspace(1) %8, i64 %58, !dbg !74
  %116 = getelementptr float, ptr addrspace(1) %115, i64 %112, !dbg !74
  %.idx = shl i64 %110, 5, !dbg !74
  %117 = getelementptr i8, ptr addrspace(1) %116, i64 %.idx, !dbg !74
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %114, !dbg !74
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #3, !dbg !75
  %120 = fadd float %63, 0x3EE4F8B580000000, !dbg !76
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !77
  %.not.i3 = icmp eq i32 %121, 0, !dbg !77
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !77
  %.not1.i6 = icmp eq i32 %122, 0, !dbg !77
  br i1 %.not.i3, label %128, label %123, !dbg !77

123:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %126, label %124, !dbg !77

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #3, !dbg !77
  br label %__nv_sqrtf.exit7, !dbg !77

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #3, !dbg !77
  br label %__nv_sqrtf.exit7, !dbg !77

128:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %131, label %129, !dbg !77

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #3, !dbg !77
  br label %__nv_sqrtf.exit7, !dbg !77

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #3, !dbg !77
  br label %__nv_sqrtf.exit7, !dbg !77

__nv_sqrtf.exit7:                                 ; preds = %124, %126, %129, %131
  %.0.i5 = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !77
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #3, !dbg !78
  %134 = lshr i64 %69, 61, !dbg !79
  %135 = and i64 %134, 4, !dbg !79
  %136 = add i64 %135, %69, !dbg !79
  %137 = lshr i64 %71, 61, !dbg !80
  %138 = and i64 %137, 4, !dbg !80
  %139 = shl nsw i32 %33, 4, !dbg !81
  %140 = sext i32 %139 to i64, !dbg !82
  %141 = getelementptr float, ptr addrspace(1) %14, i64 %71, !dbg !83
  %142 = getelementptr float, ptr addrspace(1) %141, i64 %138, !dbg !83
  %.idx1 = shl i64 %136, 4, !dbg !83
  %143 = getelementptr i8, ptr addrspace(1) %142, i64 %.idx1, !dbg !83
  %144 = getelementptr float, ptr addrspace(1) %143, i64 %140, !dbg !83
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #3, !dbg !84
  %146 = fadd float %76, 0x3EE4F8B580000000, !dbg !85
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !86
  %.not.i8 = icmp eq i32 %147, 0, !dbg !86
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !86
  %.not1.i11 = icmp eq i32 %148, 0, !dbg !86
  br i1 %.not.i8, label %154, label %149, !dbg !86

149:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %152, label %150, !dbg !86

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %146) #3, !dbg !86
  br label %__nv_sqrtf.exit12, !dbg !86

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %146) #3, !dbg !86
  br label %__nv_sqrtf.exit12, !dbg !86

154:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %157, label %155, !dbg !86

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.f(float %146) #3, !dbg !86
  br label %__nv_sqrtf.exit12, !dbg !86

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.f(float %146) #3, !dbg !86
  br label %__nv_sqrtf.exit12, !dbg !86

__nv_sqrtf.exit12:                                ; preds = %150, %152, %155, %157
  %.0.i10 = phi float [ %151, %150 ], [ %153, %152 ], [ %156, %155 ], [ %158, %157 ], !dbg !86
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #3, !dbg !87
  %160 = lshr i64 %82, 62, !dbg !88
  %161 = and i64 %160, 2, !dbg !88
  %162 = add i64 %161, %82, !dbg !88
  %163 = lshr i64 %84, 62, !dbg !89
  %164 = and i64 %163, 2, !dbg !89
  %165 = shl nsw i32 %33, 2, !dbg !90
  %166 = sext i32 %165 to i64, !dbg !91
  %167 = getelementptr float, ptr addrspace(1) %20, i64 %84, !dbg !92
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %164, !dbg !92
  %.idx2 = shl i64 %162, 3, !dbg !92
  %169 = getelementptr i8, ptr addrspace(1) %168, i64 %.idx2, !dbg !92
  %170 = getelementptr float, ptr addrspace(1) %169, i64 %166, !dbg !92
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 true) #3, !dbg !93
  %172 = fadd float %89, 0x3EE4F8B580000000, !dbg !94
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !95
  %.not.i13 = icmp eq i32 %173, 0, !dbg !95
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !95
  %.not1.i16 = icmp eq i32 %174, 0, !dbg !95
  br i1 %.not.i13, label %180, label %175, !dbg !95

175:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %178, label %176, !dbg !95

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %172) #3, !dbg !95
  br label %__nv_sqrtf.exit17, !dbg !95

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %172) #3, !dbg !95
  br label %__nv_sqrtf.exit17, !dbg !95

180:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %183, label %181, !dbg !95

181:                                              ; preds = %180
  %182 = tail call float @llvm.nvvm.sqrt.rn.f(float %172) #3, !dbg !95
  br label %__nv_sqrtf.exit17, !dbg !95

183:                                              ; preds = %180
  %184 = tail call float @llvm.nvvm.sqrt.approx.f(float %172) #3, !dbg !95
  br label %__nv_sqrtf.exit17, !dbg !95

__nv_sqrtf.exit17:                                ; preds = %176, %178, %181, %183
  %.0.i15 = phi float [ %177, %176 ], [ %179, %178 ], [ %182, %181 ], [ %184, %183 ], !dbg !95
  %185 = insertelement <2 x i32> poison, i32 %145, i64 0, !dbg !84
  %186 = insertelement <2 x i32> %185, i32 %171, i64 1, !dbg !84
  %187 = bitcast <2 x i32> %186 to <2 x float>, !dbg !84
  %188 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !48
  %189 = insertelement <2 x i32> %188, i32 %86, i64 1, !dbg !48
  %190 = bitcast <2 x i32> %189 to <2 x float>, !dbg !48
  %191 = bitcast i32 %40 to float, !dbg !20
  %192 = bitcast i32 %43 to float, !dbg !22
  %193 = fsub float %191, %192, !dbg !96
  %194 = fmul float %193, %107, !dbg !97
  %195 = bitcast i32 %48 to float, !dbg !26
  %196 = fmul float %194, %195, !dbg !98
  %197 = bitcast i32 %50 to float, !dbg !28
  %198 = fadd float %196, %197, !dbg !99
  %199 = bitcast i32 %52 to float, !dbg !30
  %200 = fadd float %198, %199, !dbg !100
  %201 = fcmp olt float %200, 0.000000e+00, !dbg !101
  %202 = select i1 %201, float 0.000000e+00, float %200, !dbg !105
  %203 = fadd float %202, 0.000000e+00, !dbg !106
  %204 = bitcast i32 %119 to float, !dbg !75
  %205 = bitcast i32 %60 to float, !dbg !36
  %206 = fsub float %204, %205, !dbg !107
  %207 = fmul float %206, %133, !dbg !108
  %208 = bitcast i32 %65 to float, !dbg !40
  %209 = fmul float %207, %208, !dbg !109
  %210 = bitcast i32 %67 to float, !dbg !42
  %211 = fadd float %209, %210, !dbg !110
  %212 = fadd float %203, %211, !dbg !111
  %213 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !52
  %214 = insertelement <2 x i32> %213, i32 %91, i64 1, !dbg !52
  %215 = bitcast <2 x i32> %214 to <2 x float>, !dbg !52
  %216 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !54
  %217 = insertelement <2 x i32> %216, i32 %93, i64 1, !dbg !54
  %218 = bitcast <2 x i32> %217 to <2 x float>, !dbg !54
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #3, !dbg !112
  %220 = fsub <2 x float> %187, %190, !dbg !113
  %221 = insertelement <2 x float> poison, float %159, i64 0, !dbg !114
  %222 = insertelement <2 x float> %221, float %219, i64 1, !dbg !114
  %223 = fmul <2 x float> %220, %222, !dbg !114
  %224 = fmul <2 x float> %223, %215, !dbg !115
  %225 = fadd <2 x float> %224, %218, !dbg !116
  %226 = extractelement <2 x float> %225, i64 0, !dbg !117
  %227 = fadd float %212, %226, !dbg !117
  %228 = extractelement <2 x float> %225, i64 1, !dbg !118
  %229 = fadd float %227, %228, !dbg !118
  %230 = fcmp olt float %229, 0.000000e+00, !dbg !119
  %231 = select i1 %230, float 0.000000e+00, float %229, !dbg !121
  %232 = fcmp ole float %202, 0.000000e+00, !dbg !122
  %233 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !123
  %234 = bitcast float %231 to i32, !dbg !124
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %234, ptr addrspace(1) %233, i1 true) #3, !dbg !124
  %235 = getelementptr i1, ptr addrspace(1) %25, i64 %38, !dbg !125
  %236 = zext i1 %232 to i8, !dbg !126
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %236, ptr addrspace(1) %235, i1 true) #3, !dbg !126
  ret void, !dbg !127
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfbqxi2d2aenhf7mu3l4r4xjlhcrlihj4vgot3m56zx7dodzbbgs.py", directory: "inductor_cache/fb")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_30, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_30, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_30", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 27, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 31, scope: !7)
!38 = !DILocation(line: 38, column: 36, scope: !7)
!39 = !DILocation(line: 39, column: 32, scope: !7)
!40 = !DILocation(line: 39, column: 37, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 41, column: 32, scope: !7)
!44 = !DILocation(line: 41, column: 37, scope: !7)
!45 = !DILocation(line: 42, column: 32, scope: !7)
!46 = !DILocation(line: 42, column: 37, scope: !7)
!47 = !DILocation(line: 43, column: 32, scope: !7)
!48 = !DILocation(line: 43, column: 37, scope: !7)
!49 = !DILocation(line: 44, column: 32, scope: !7)
!50 = !DILocation(line: 44, column: 37, scope: !7)
!51 = !DILocation(line: 45, column: 32, scope: !7)
!52 = !DILocation(line: 45, column: 37, scope: !7)
!53 = !DILocation(line: 46, column: 32, scope: !7)
!54 = !DILocation(line: 46, column: 37, scope: !7)
!55 = !DILocation(line: 47, column: 32, scope: !7)
!56 = !DILocation(line: 47, column: 37, scope: !7)
!57 = !DILocation(line: 48, column: 32, scope: !7)
!58 = !DILocation(line: 48, column: 37, scope: !7)
!59 = !DILocation(line: 49, column: 32, scope: !7)
!60 = !DILocation(line: 49, column: 37, scope: !7)
!61 = !DILocation(line: 50, column: 32, scope: !7)
!62 = !DILocation(line: 50, column: 37, scope: !7)
!63 = !DILocation(line: 51, column: 32, scope: !7)
!64 = !DILocation(line: 51, column: 37, scope: !7)
!65 = !DILocation(line: 52, column: 32, scope: !7)
!66 = !DILocation(line: 52, column: 37, scope: !7)
!67 = !DILocation(line: 55, column: 18, scope: !7)
!68 = !DILocation(line: 56, column: 26, scope: !7)
!69 = !DILocation(line: 58, column: 18, scope: !7)
!70 = !DILocation(line: 72, column: 35, scope: !7)
!71 = !DILocation(line: 75, column: 35, scope: !7)
!72 = !DILocation(line: 76, column: 52, scope: !7)
!73 = !DILocation(line: 76, column: 49, scope: !7)
!74 = !DILocation(line: 76, column: 31, scope: !7)
!75 = !DILocation(line: 76, column: 57, scope: !7)
!76 = !DILocation(line: 78, column: 20, scope: !7)
!77 = !DILocation(line: 79, column: 27, scope: !7)
!78 = !DILocation(line: 80, column: 19, scope: !7)
!79 = !DILocation(line: 89, column: 35, scope: !7)
!80 = !DILocation(line: 92, column: 35, scope: !7)
!81 = !DILocation(line: 93, column: 53, scope: !7)
!82 = !DILocation(line: 93, column: 50, scope: !7)
!83 = !DILocation(line: 93, column: 32, scope: !7)
!84 = !DILocation(line: 93, column: 58, scope: !7)
!85 = !DILocation(line: 95, column: 20, scope: !7)
!86 = !DILocation(line: 96, column: 27, scope: !7)
!87 = !DILocation(line: 97, column: 19, scope: !7)
!88 = !DILocation(line: 106, column: 35, scope: !7)
!89 = !DILocation(line: 109, column: 35, scope: !7)
!90 = !DILocation(line: 110, column: 52, scope: !7)
!91 = !DILocation(line: 110, column: 50, scope: !7)
!92 = !DILocation(line: 110, column: 32, scope: !7)
!93 = !DILocation(line: 110, column: 57, scope: !7)
!94 = !DILocation(line: 112, column: 20, scope: !7)
!95 = !DILocation(line: 113, column: 27, scope: !7)
!96 = !DILocation(line: 53, column: 18, scope: !7)
!97 = !DILocation(line: 61, column: 19, scope: !7)
!98 = !DILocation(line: 62, column: 20, scope: !7)
!99 = !DILocation(line: 63, column: 20, scope: !7)
!100 = !DILocation(line: 64, column: 20, scope: !7)
!101 = !DILocation(line: 118, column: 15, scope: !102, inlinedAt: !104)
!102 = distinct !DILexicalBlockFile(scope: !7, file: !103, discriminator: 0)
!103 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!104 = !DILocation(line: 66, column: 42, scope: !7)
!105 = !DILocation(line: 121, column: 29, scope: !102, inlinedAt: !104)
!106 = !DILocation(line: 68, column: 20, scope: !7)
!107 = !DILocation(line: 77, column: 20, scope: !7)
!108 = !DILocation(line: 82, column: 20, scope: !7)
!109 = !DILocation(line: 83, column: 20, scope: !7)
!110 = !DILocation(line: 84, column: 20, scope: !7)
!111 = !DILocation(line: 85, column: 20, scope: !7)
!112 = !DILocation(line: 114, column: 19, scope: !7)
!113 = !DILocation(line: 94, column: 20, scope: !7)
!114 = !DILocation(line: 99, column: 20, scope: !7)
!115 = !DILocation(line: 100, column: 20, scope: !7)
!116 = !DILocation(line: 101, column: 20, scope: !7)
!117 = !DILocation(line: 102, column: 20, scope: !7)
!118 = !DILocation(line: 119, column: 20, scope: !7)
!119 = !DILocation(line: 118, column: 15, scope: !102, inlinedAt: !120)
!120 = !DILocation(line: 120, column: 42, scope: !7)
!121 = !DILocation(line: 121, column: 29, scope: !102, inlinedAt: !120)
!122 = !DILocation(line: 121, column: 21, scope: !7)
!123 = !DILocation(line: 122, column: 28, scope: !7)
!124 = !DILocation(line: 122, column: 40, scope: !7)
!125 = !DILocation(line: 123, column: 25, scope: !7)
!126 = !DILocation(line: 123, column: 37, scope: !7)
!127 = !DILocation(line: 123, column: 4, scope: !7)
