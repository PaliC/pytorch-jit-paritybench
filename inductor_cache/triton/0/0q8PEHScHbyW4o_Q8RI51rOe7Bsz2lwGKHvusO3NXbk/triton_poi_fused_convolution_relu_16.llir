; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 28, !dbg !12
  %11 = lshr i32 %8, 3, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %12, 16, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %12, !dbg !13
  %16 = or disjoint i32 %7, %13, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %18 = shl i32 %17, 5, !dbg !15
  %19 = or disjoint i32 %18, %12, !dbg !16
  %20 = or disjoint i32 %18, %13, !dbg !16
  %21 = or disjoint i32 %18, %10, !dbg !16
  %22 = icmp slt i32 %19, 64, !dbg !17
  %23 = icmp slt i32 %20, 64, !dbg !17
  %24 = icmp slt i32 %21, 64, !dbg !17
  %.frozen = freeze i32 %14, !dbg !18
  %25 = sdiv i32 %.frozen, 512, !dbg !18
  %26 = mul i32 %25, 512, !dbg !19
  %.decomposed = sub i32 %.frozen, %26, !dbg !19
  %27 = shl i32 %19, 9, !dbg !20
  %28 = shl i32 %20, 9, !dbg !20
  %29 = shl i32 %25, 15, !dbg !21
  %30 = add i32 %29, %.decomposed, !dbg !22
  %31 = add i32 %30, %27, !dbg !23
  %32 = add i32 %30, %28, !dbg !23
  %33 = sext i32 %31 to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !24
  %35 = sext i32 %32 to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !24
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %22) #2, !dbg !25
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !25
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !25
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !25
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !25
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %23) #2, !dbg !25
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !25
  %47 = sext i32 %.decomposed to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !26
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #2, !dbg !27
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !27
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !27
  %54 = insertelement <8 x i32> poison, i32 %46, i64 0, !dbg !25
  %55 = insertelement <8 x i32> %54, i32 %45, i64 1, !dbg !25
  %56 = insertelement <8 x i32> %55, i32 %44, i64 2, !dbg !25
  %57 = insertelement <8 x i32> %56, i32 %43, i64 3, !dbg !25
  %58 = insertelement <8 x i32> %57, i32 %41, i64 4, !dbg !25
  %59 = insertelement <8 x i32> %58, i32 %40, i64 5, !dbg !25
  %60 = insertelement <8 x i32> %59, i32 %39, i64 6, !dbg !25
  %61 = insertelement <8 x i32> %60, i32 %38, i64 7, !dbg !25
  %62 = bitcast <8 x i32> %61 to <8 x float>, !dbg !25
  %63 = insertelement <4 x i32> poison, i32 %53, i64 0, !dbg !27
  %64 = insertelement <4 x i32> %63, i32 %52, i64 1, !dbg !27
  %65 = insertelement <4 x i32> %64, i32 %51, i64 2, !dbg !27
  %66 = insertelement <4 x i32> %65, i32 %50, i64 3, !dbg !27
  %67 = bitcast <4 x i32> %66 to <4 x float>, !dbg !27
  %68 = shufflevector <4 x float> %67, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !27
  %69 = fadd <8 x float> %68, %62, !dbg !28
  %70 = fcmp olt <8 x float> %69, zeroinitializer, !dbg !29
  %71 = extractelement <8 x i1> %70, i64 7, !dbg !33
  %72 = extractelement <8 x float> %69, i64 7, !dbg !33
  %73 = select i1 %71, float 0.000000e+00, float %72, !dbg !33
  %74 = extractelement <8 x i1> %70, i64 6, !dbg !33
  %75 = extractelement <8 x float> %69, i64 6, !dbg !33
  %76 = select i1 %74, float 0.000000e+00, float %75, !dbg !33
  %77 = extractelement <8 x i1> %70, i64 5, !dbg !33
  %78 = extractelement <8 x float> %69, i64 5, !dbg !33
  %79 = select i1 %77, float 0.000000e+00, float %78, !dbg !33
  %80 = extractelement <8 x i1> %70, i64 4, !dbg !33
  %81 = extractelement <8 x float> %69, i64 4, !dbg !33
  %82 = select i1 %80, float 0.000000e+00, float %81, !dbg !33
  %83 = extractelement <8 x i1> %70, i64 3, !dbg !33
  %84 = extractelement <8 x float> %69, i64 3, !dbg !33
  %85 = select i1 %83, float 0.000000e+00, float %84, !dbg !33
  %86 = extractelement <8 x i1> %70, i64 2, !dbg !33
  %87 = extractelement <8 x float> %69, i64 2, !dbg !33
  %88 = select i1 %86, float 0.000000e+00, float %87, !dbg !33
  %89 = extractelement <8 x i1> %70, i64 1, !dbg !33
  %90 = extractelement <8 x float> %69, i64 1, !dbg !33
  %91 = select i1 %89, float 0.000000e+00, float %90, !dbg !33
  %92 = extractelement <8 x i1> %70, i64 0, !dbg !33
  %93 = extractelement <8 x float> %69, i64 0, !dbg !33
  %94 = select i1 %92, float 0.000000e+00, float %93, !dbg !33
  %95 = shl i32 %15, 6, !dbg !34
  %96 = shl i32 %16, 6, !dbg !34
  %97 = add i32 %21, %95, !dbg !35
  %98 = add i32 %21, %96, !dbg !35
  %99 = sext i32 %97 to i64, !dbg !36
  %100 = getelementptr float, ptr addrspace(1) %2, i64 %99, !dbg !36
  %101 = sext i32 %98 to i64, !dbg !36
  %102 = getelementptr float, ptr addrspace(1) %2, i64 %101, !dbg !36
  %103 = shl i32 %8, 7, !dbg !37
  %104 = and i32 %103, 896, !dbg !37
  %105 = or disjoint i32 %104, %12, !dbg !37
  %106 = and i32 %9, 508, !dbg !37
  %107 = lshr exact i32 %104, 5, !dbg !37
  %108 = add nuw nsw i32 %107, %105, !dbg !37
  %109 = zext nneg i32 %108 to i64, !dbg !37
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %109, !dbg !37
  %111 = bitcast float %73 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #2, !dbg !37
  %112 = or disjoint i32 %105, 32, !dbg !37
  %113 = lshr i32 %112, 5, !dbg !37
  %114 = add nuw nsw i32 %113, %112, !dbg !37
  %115 = zext nneg i32 %114 to i64, !dbg !37
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %115, !dbg !37
  %117 = bitcast float %76 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 true) #2, !dbg !37
  %118 = or disjoint i32 %105, 64, !dbg !37
  %119 = lshr i32 %118, 5, !dbg !37
  %120 = add nuw nsw i32 %119, %118, !dbg !37
  %121 = zext nneg i32 %120 to i64, !dbg !37
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %121, !dbg !37
  %123 = bitcast float %79 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #2, !dbg !37
  %124 = or disjoint i32 %105, 96, !dbg !37
  %125 = lshr i32 %124, 5, !dbg !37
  %126 = add nuw nsw i32 %125, %124, !dbg !37
  %127 = zext nneg i32 %126 to i64, !dbg !37
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %127, !dbg !37
  %129 = bitcast float %82 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #2, !dbg !37
  %130 = or disjoint i32 %105, 16, !dbg !37
  %131 = add nuw nsw i32 %130, %107, !dbg !37
  %132 = zext nneg i32 %131 to i64, !dbg !37
  %133 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %132, !dbg !37
  %134 = bitcast float %85 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #2, !dbg !37
  %135 = or disjoint i32 %105, 48, !dbg !37
  %136 = lshr i32 %135, 5, !dbg !37
  %137 = add nuw nsw i32 %136, %135, !dbg !37
  %138 = zext nneg i32 %137 to i64, !dbg !37
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %138, !dbg !37
  %140 = bitcast float %88 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #2, !dbg !37
  %141 = or disjoint i32 %105, 80, !dbg !37
  %142 = lshr i32 %141, 5, !dbg !37
  %143 = add nuw nsw i32 %142, %141, !dbg !37
  %144 = zext nneg i32 %143 to i64, !dbg !37
  %145 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %144, !dbg !37
  %146 = bitcast float %91 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 true) #2, !dbg !37
  %147 = or disjoint i32 %105, 112, !dbg !37
  %148 = lshr i32 %147, 5, !dbg !37
  %149 = add nuw nsw i32 %148, %147, !dbg !37
  %150 = zext nneg i32 %149 to i64, !dbg !37
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %150, !dbg !37
  %152 = bitcast float %94 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %153 = lshr i32 %106, 5, !dbg !37
  %154 = add nuw nsw i32 %153, %106, !dbg !37
  %155 = zext nneg i32 %154 to i64, !dbg !37
  %156 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %155, !dbg !37
  %157 = load i32, ptr addrspace(3) %156, align 4, !dbg !37
  %158 = or disjoint i32 %106, 1, !dbg !37
  %159 = add nuw nsw i32 %158, %153, !dbg !37
  %160 = zext nneg i32 %159 to i64, !dbg !37
  %161 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %160, !dbg !37
  %162 = load i32, ptr addrspace(3) %161, align 4, !dbg !37
  %163 = or disjoint i32 %106, 2, !dbg !37
  %164 = add nuw nsw i32 %163, %153, !dbg !37
  %165 = zext nneg i32 %164 to i64, !dbg !37
  %166 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %165, !dbg !37
  %167 = load i32, ptr addrspace(3) %166, align 4, !dbg !37
  %168 = or disjoint i32 %106, 3, !dbg !37
  %169 = add nuw nsw i32 %168, %153, !dbg !37
  %170 = zext nneg i32 %169 to i64, !dbg !37
  %171 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %170, !dbg !37
  %172 = load i32, ptr addrspace(3) %171, align 4, !dbg !37
  %173 = or disjoint i32 %106, 512, !dbg !37
  %174 = lshr i32 %173, 5, !dbg !37
  %175 = add nuw nsw i32 %174, %173, !dbg !37
  %176 = zext nneg i32 %175 to i64, !dbg !37
  %177 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %176, !dbg !37
  %178 = load i32, ptr addrspace(3) %177, align 4, !dbg !37
  %179 = or disjoint i32 %106, 513, !dbg !37
  %180 = lshr i32 %179, 5, !dbg !37
  %181 = add nuw nsw i32 %180, %179, !dbg !37
  %182 = zext nneg i32 %181 to i64, !dbg !37
  %183 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %182, !dbg !37
  %184 = load i32, ptr addrspace(3) %183, align 4, !dbg !37
  %185 = or disjoint i32 %106, 514, !dbg !37
  %186 = lshr i32 %185, 5, !dbg !37
  %187 = add nuw nsw i32 %186, %185, !dbg !37
  %188 = zext nneg i32 %187 to i64, !dbg !37
  %189 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %188, !dbg !37
  %190 = load i32, ptr addrspace(3) %189, align 4, !dbg !37
  %191 = or disjoint i32 %106, 515, !dbg !37
  %192 = lshr i32 %191, 5, !dbg !37
  %193 = add nuw nsw i32 %192, %191, !dbg !37
  %194 = zext nneg i32 %193 to i64, !dbg !37
  %195 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %194, !dbg !37
  %196 = load i32, ptr addrspace(3) %195, align 4, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %157, i32 %162, i32 %167, i32 %172, ptr addrspace(1) %100, i1 %24) #2, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %178, i32 %184, i32 %190, i32 %196, ptr addrspace(1) %102, i1 %24) #2, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czh6tnttnetfnelwgoiwc5rcuibo44fwrf3jphgmfylw4h4lj7bt.py", directory: "inductor_cache/zh")
!4 = !{ptr @triton_poi_fused_convolution_relu_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_16", linkageName: "triton_poi_fused_convolution_relu_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 50, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 55, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 36, column: 40, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 37, column: 33, scope: !7)
!35 = !DILocation(line: 37, column: 30, scope: !7)
!36 = !DILocation(line: 37, column: 25, scope: !7)
!37 = !DILocation(line: 37, column: 44, scope: !7)
!38 = !DILocation(line: 37, column: 4, scope: !7)
