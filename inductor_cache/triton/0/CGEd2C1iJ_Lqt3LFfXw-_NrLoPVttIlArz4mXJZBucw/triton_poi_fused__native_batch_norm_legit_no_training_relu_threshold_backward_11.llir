; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 4, !dbg !12
  %14 = and i32 %13, 1008, !dbg !12
  %15 = shl i32 %12, 2, !dbg !12
  %16 = and i32 %15, 1020, !dbg !12
  %17 = or disjoint i32 %11, %14, !dbg !13
  %18 = or disjoint i32 %17, 4, !dbg !13
  %19 = or disjoint i32 %17, 8, !dbg !13
  %20 = or disjoint i32 %17, 12, !dbg !13
  %21 = or disjoint i32 %11, %16, !dbg !13
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %23 = shl i32 %22, 2, !dbg !15
  %.lobit1 = lshr i32 %12, 6, !dbg !16
  %24 = and i32 %.lobit1, 3, !dbg !16
  %25 = or disjoint i32 %23, %24, !dbg !17
  %26 = icmp slt i32 %25, 4, !dbg !18
  %.frozen = freeze i32 %17, !dbg !19
  %27 = sdiv i32 %.frozen, 1024, !dbg !19
  %28 = mul i32 %27, 1024, !dbg !20
  %.decomposed = sub i32 %.frozen, %28, !dbg !20
  %29 = srem i32 %18, 1024, !dbg !20
  %30 = srem i32 %19, 1024, !dbg !20
  %31 = srem i32 %20, 1024, !dbg !20
  %32 = srem i32 %21, 1024, !dbg !20
  %33 = shl i32 %25, 10, !dbg !21
  %34 = shl i32 %27, 12, !dbg !22
  %35 = add i32 %34, %33, !dbg !23
  %36 = add i32 %35, %.decomposed, !dbg !24
  %37 = add i32 %35, %29, !dbg !24
  %38 = add i32 %35, %30, !dbg !24
  %39 = add i32 %35, %31, !dbg !24
  %40 = sext i32 %36 to i64, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !25
  %42 = sext i32 %37 to i64, !dbg !25
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !25
  %44 = sext i32 %38 to i64, !dbg !25
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !25
  %46 = sext i32 %39 to i64, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !25
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %26) #4, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !26
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %26) #4, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !26
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %26) #4, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !26
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %26) #4, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !26
  %68 = and i32 %13, 4080, !dbg !26
  %69 = lshr i32 %13, 6, !dbg !26
  %70 = and i32 %69, 48, !dbg !26
  %71 = add nuw nsw i32 %70, %68, !dbg !26
  %72 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %71, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %72, i32 %49, i32 %50, i32 %51, i32 %52, i1 true) #4, !dbg !26
  %73 = getelementptr inbounds i8, ptr addrspace(3) %72, i32 16, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %73, i32 %54, i32 %55, i32 %56, i32 %57, i1 true) #4, !dbg !26
  %74 = getelementptr inbounds i8, ptr addrspace(3) %72, i32 32, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %74, i32 %59, i32 %60, i32 %61, i32 %62, i1 true) #4, !dbg !26
  %75 = getelementptr inbounds i8, ptr addrspace(3) %72, i32 48, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %75, i32 %64, i32 %65, i32 %66, i32 %67, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %76 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !26
  %77 = load <4 x float>, ptr addrspace(3) %76, align 16, !dbg !26
  %78 = add nuw nsw i32 %16, 1040, !dbg !26
  %79 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %78, !dbg !26
  %80 = load <4 x float>, ptr addrspace(3) %79, align 16, !dbg !26
  %81 = add nuw nsw i32 %16, 2080, !dbg !26
  %82 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %81, !dbg !26
  %83 = load <4 x float>, ptr addrspace(3) %82, align 16, !dbg !26
  %84 = add nuw nsw i32 %16, 3120, !dbg !26
  %85 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %84, !dbg !26
  %86 = load <4 x float>, ptr addrspace(3) %85, align 16, !dbg !26
  %87 = sext i32 %32 to i64, !dbg !27
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !27
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %88, i1 true) #4, !dbg !28
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !29
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %90, i1 true) #4, !dbg !30
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !30
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !30
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !30
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !30
  %96 = bitcast i32 %92 to float, !dbg !30
  %97 = bitcast i32 %93 to float, !dbg !30
  %98 = bitcast i32 %94 to float, !dbg !30
  %99 = bitcast i32 %95 to float, !dbg !30
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %87, !dbg !31
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 true) #4, !dbg !32
  %102 = getelementptr float, ptr addrspace(1) %4, i64 %87, !dbg !33
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 true) #4, !dbg !34
  %104 = fadd float %96, 0x3EE4F8B580000000, !dbg !35
  %105 = fadd float %97, 0x3EE4F8B580000000, !dbg !35
  %106 = fadd float %98, 0x3EE4F8B580000000, !dbg !35
  %107 = fadd float %99, 0x3EE4F8B580000000, !dbg !35
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %108, 0, !dbg !36
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %109, 0, !dbg !36
  br i1 %.not.i, label %115, label %110, !dbg !36

110:                                              ; preds = %9
  br i1 %.not1.i, label %113, label %111, !dbg !36

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %104) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %104) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

115:                                              ; preds = %9
  br i1 %.not1.i, label %118, label %116, !dbg !36

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %104) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %104) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %111, %113, %116, %118
  %.0.i = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !36
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i17 = icmp eq i32 %120, 0, !dbg !36
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i20 = icmp eq i32 %121, 0, !dbg !36
  br i1 %.not.i17, label %127, label %122, !dbg !36

122:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %125, label %123, !dbg !36

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %105) #4, !dbg !36
  br label %__nv_sqrtf.exit21, !dbg !36

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %105) #4, !dbg !36
  br label %__nv_sqrtf.exit21, !dbg !36

127:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %130, label %128, !dbg !36

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.f(float %105) #4, !dbg !36
  br label %__nv_sqrtf.exit21, !dbg !36

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.f(float %105) #4, !dbg !36
  br label %__nv_sqrtf.exit21, !dbg !36

__nv_sqrtf.exit21:                                ; preds = %123, %125, %128, %130
  %.0.i19 = phi float [ %124, %123 ], [ %126, %125 ], [ %129, %128 ], [ %131, %130 ], !dbg !36
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i22 = icmp eq i32 %132, 0, !dbg !36
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i25 = icmp eq i32 %133, 0, !dbg !36
  br i1 %.not.i22, label %139, label %134, !dbg !36

134:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %137, label %135, !dbg !36

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %106) #4, !dbg !36
  br label %__nv_sqrtf.exit26, !dbg !36

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %106) #4, !dbg !36
  br label %__nv_sqrtf.exit26, !dbg !36

139:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %142, label %140, !dbg !36

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %106) #4, !dbg !36
  br label %__nv_sqrtf.exit26, !dbg !36

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %106) #4, !dbg !36
  br label %__nv_sqrtf.exit26, !dbg !36

__nv_sqrtf.exit26:                                ; preds = %135, %137, %140, %142
  %.0.i24 = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !36
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i27 = icmp eq i32 %144, 0, !dbg !36
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i30 = icmp eq i32 %145, 0, !dbg !36
  br i1 %.not.i27, label %151, label %146, !dbg !36

146:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %149, label %147, !dbg !36

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %107) #4, !dbg !36
  br label %__nv_sqrtf.exit31, !dbg !36

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %107) #4, !dbg !36
  br label %__nv_sqrtf.exit31, !dbg !36

151:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %154, label %152, !dbg !36

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %107) #4, !dbg !36
  br label %__nv_sqrtf.exit31, !dbg !36

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %107) #4, !dbg !36
  br label %__nv_sqrtf.exit31, !dbg !36

__nv_sqrtf.exit31:                                ; preds = %147, %149, %152, %154
  %.0.i29 = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !36
  %156 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !28
  %157 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !28
  %158 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !28
  %159 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !28
  %160 = extractelement <4 x float> %80, i64 3, !dbg !26
  %161 = extractelement <4 x float> %80, i64 2, !dbg !26
  %162 = extractelement <4 x float> %80, i64 1, !dbg !26
  %163 = extractelement <4 x float> %80, i64 0, !dbg !26
  %164 = extractelement <4 x float> %77, i64 3, !dbg !26
  %165 = extractelement <4 x float> %77, i64 2, !dbg !26
  %166 = extractelement <4 x float> %77, i64 1, !dbg !26
  %167 = extractelement <4 x float> %77, i64 0, !dbg !26
  %168 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !34
  %169 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !34
  %170 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !34
  %171 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !34
  %172 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !32
  %173 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !32
  %174 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !32
  %175 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !32
  %176 = or disjoint i32 %16, 3072, !dbg !26
  %177 = or disjoint i32 %16, 2048, !dbg !26
  %178 = or disjoint i32 %16, 1024, !dbg !26
  %179 = icmp slt i32 %23, 4, !dbg !18
  %180 = and i32 %12, 255, !dbg !12
  %181 = or disjoint i32 %180, 768, !dbg !12
  %182 = or disjoint i32 %11, %181, !dbg !13
  %183 = or disjoint i32 %180, 512, !dbg !12
  %184 = or disjoint i32 %11, %183, !dbg !13
  %185 = or disjoint i32 %180, 256, !dbg !12
  %186 = or disjoint i32 %11, %185, !dbg !13
  %187 = or disjoint i32 %11, %180, !dbg !13
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i19) #4, !dbg !37
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i24) #4, !dbg !37
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i29) #4, !dbg !37
  %192 = insertelement <4 x i32> poison, i32 %156, i64 0, !dbg !28
  %193 = insertelement <4 x i32> %192, i32 %157, i64 1, !dbg !28
  %194 = insertelement <4 x i32> %193, i32 %158, i64 2, !dbg !28
  %195 = insertelement <4 x i32> %194, i32 %159, i64 3, !dbg !28
  %196 = bitcast <4 x i32> %195 to <4 x float>, !dbg !28
  %197 = shufflevector <4 x float> %196, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !28
  %198 = shufflevector <4 x float> %86, <4 x float> %83, <16 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %199 = insertelement <16 x float> %198, float %160, i64 8, !dbg !38
  %200 = insertelement <16 x float> %199, float %161, i64 9, !dbg !38
  %201 = insertelement <16 x float> %200, float %162, i64 10, !dbg !38
  %202 = insertelement <16 x float> %201, float %163, i64 11, !dbg !38
  %203 = insertelement <16 x float> %202, float %164, i64 12, !dbg !38
  %204 = insertelement <16 x float> %203, float %165, i64 13, !dbg !38
  %205 = insertelement <16 x float> %204, float %166, i64 14, !dbg !38
  %206 = insertelement <16 x float> %205, float %167, i64 15, !dbg !38
  %207 = fsub <16 x float> %206, %197, !dbg !38
  %208 = insertelement <4 x i32> poison, i32 %168, i64 0, !dbg !34
  %209 = insertelement <4 x i32> %208, i32 %169, i64 1, !dbg !34
  %210 = insertelement <4 x i32> %209, i32 %170, i64 2, !dbg !34
  %211 = insertelement <4 x i32> %210, i32 %171, i64 3, !dbg !34
  %212 = bitcast <4 x i32> %211 to <4 x float>, !dbg !34
  %213 = shufflevector <4 x float> %212, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %214 = insertelement <4 x i32> poison, i32 %172, i64 0, !dbg !32
  %215 = insertelement <4 x i32> %214, i32 %173, i64 1, !dbg !32
  %216 = insertelement <4 x i32> %215, i32 %174, i64 2, !dbg !32
  %217 = insertelement <4 x i32> %216, i32 %175, i64 3, !dbg !32
  %218 = bitcast <4 x i32> %217 to <4 x float>, !dbg !32
  %219 = shufflevector <4 x float> %218, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !32
  %220 = insertelement <16 x float> poison, float %191, i64 0, !dbg !39
  %221 = insertelement <16 x float> %220, float %190, i64 1, !dbg !39
  %222 = insertelement <16 x float> %221, float %189, i64 2, !dbg !39
  %223 = insertelement <16 x float> %222, float %188, i64 3, !dbg !39
  %224 = shufflevector <16 x float> %223, <16 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !39
  %225 = fmul <16 x float> %207, %224, !dbg !39
  %226 = fmul <16 x float> %225, %219, !dbg !40
  %227 = fadd <16 x float> %226, %213, !dbg !41
  %228 = fcmp olt <16 x float> %227, zeroinitializer, !dbg !42
  %229 = select <16 x i1> %228, <16 x float> zeroinitializer, <16 x float> %227, !dbg !46
  %230 = fcmp ole <16 x float> %229, zeroinitializer, !dbg !47
  %231 = add i32 %187, %22, !dbg !48
  %232 = shl i32 %231, 2, !dbg !48
  %233 = add i32 %186, %22, !dbg !48
  %234 = shl i32 %233, 2, !dbg !48
  %235 = add i32 %184, %22, !dbg !48
  %236 = shl i32 %235, 2, !dbg !48
  %237 = add i32 %182, %22, !dbg !48
  %238 = shl i32 %237, 2, !dbg !48
  %239 = sext i32 %232 to i64, !dbg !49
  %240 = getelementptr float, ptr addrspace(1) %5, i64 %239, !dbg !49
  %241 = sext i32 %234 to i64, !dbg !49
  %242 = getelementptr float, ptr addrspace(1) %5, i64 %241, !dbg !49
  %243 = sext i32 %236 to i64, !dbg !49
  %244 = getelementptr float, ptr addrspace(1) %5, i64 %243, !dbg !49
  %245 = sext i32 %238 to i64, !dbg !49
  %246 = getelementptr float, ptr addrspace(1) %5, i64 %245, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %247 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %68, !dbg !50
  %248 = getelementptr inbounds float, ptr addrspace(3) %247, i32 %68, !dbg !50
  %249 = extractelement <16 x float> %229, i64 15, !dbg !50
  %250 = bitcast float %249 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %250, i1 true) #4, !dbg !50
  %251 = or disjoint i32 %68, 4, !dbg !50
  %252 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %251, !dbg !50
  %253 = getelementptr inbounds float, ptr addrspace(3) %252, i32 %251, !dbg !50
  %254 = extractelement <16 x float> %229, i64 14, !dbg !50
  %255 = bitcast float %254 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %255, i1 true) #4, !dbg !50
  %256 = or disjoint i32 %68, 8, !dbg !50
  %257 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %256, !dbg !50
  %258 = getelementptr inbounds float, ptr addrspace(3) %257, i32 %256, !dbg !50
  %259 = extractelement <16 x float> %229, i64 13, !dbg !50
  %260 = bitcast float %259 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %260, i1 true) #4, !dbg !50
  %261 = or disjoint i32 %68, 12, !dbg !50
  %262 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %261, !dbg !50
  %263 = getelementptr inbounds float, ptr addrspace(3) %262, i32 %261, !dbg !50
  %264 = extractelement <16 x float> %229, i64 12, !dbg !50
  %265 = bitcast float %264 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %265, i1 true) #4, !dbg !50
  %266 = or disjoint i32 %68, 1, !dbg !50
  %267 = getelementptr inbounds float, ptr addrspace(3) %247, i32 %266, !dbg !50
  %268 = extractelement <16 x float> %229, i64 11, !dbg !50
  %269 = bitcast float %268 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %269, i1 true) #4, !dbg !50
  %270 = or disjoint i32 %68, 5, !dbg !50
  %271 = lshr i32 %270, 2, !dbg !50
  %272 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %271, !dbg !50
  %273 = getelementptr inbounds float, ptr addrspace(3) %272, i32 %270, !dbg !50
  %274 = extractelement <16 x float> %229, i64 10, !dbg !50
  %275 = bitcast float %274 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %275, i1 true) #4, !dbg !50
  %276 = or disjoint i32 %68, 9, !dbg !50
  %277 = lshr i32 %276, 2, !dbg !50
  %278 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %277, !dbg !50
  %279 = getelementptr inbounds float, ptr addrspace(3) %278, i32 %276, !dbg !50
  %280 = extractelement <16 x float> %229, i64 9, !dbg !50
  %281 = bitcast float %280 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %281, i1 true) #4, !dbg !50
  %282 = or disjoint i32 %68, 13, !dbg !50
  %283 = lshr i32 %282, 2, !dbg !50
  %284 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %283, !dbg !50
  %285 = getelementptr inbounds float, ptr addrspace(3) %284, i32 %282, !dbg !50
  %286 = extractelement <16 x float> %229, i64 8, !dbg !50
  %287 = bitcast float %286 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %287, i1 true) #4, !dbg !50
  %288 = or disjoint i32 %68, 2, !dbg !50
  %289 = getelementptr inbounds float, ptr addrspace(3) %247, i32 %288, !dbg !50
  %290 = extractelement <16 x float> %229, i64 7, !dbg !50
  %291 = bitcast float %290 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, <1 x i32> %291, i1 true) #4, !dbg !50
  %292 = or disjoint i32 %68, 6, !dbg !50
  %293 = lshr i32 %292, 2, !dbg !50
  %294 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %293, !dbg !50
  %295 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %292, !dbg !50
  %296 = extractelement <16 x float> %229, i64 6, !dbg !50
  %297 = bitcast float %296 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %295, <1 x i32> %297, i1 true) #4, !dbg !50
  %298 = or disjoint i32 %68, 10, !dbg !50
  %299 = lshr i32 %298, 2, !dbg !50
  %300 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %299, !dbg !50
  %301 = getelementptr inbounds float, ptr addrspace(3) %300, i32 %298, !dbg !50
  %302 = extractelement <16 x float> %229, i64 5, !dbg !50
  %303 = bitcast float %302 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %301, <1 x i32> %303, i1 true) #4, !dbg !50
  %304 = or disjoint i32 %68, 14, !dbg !50
  %305 = lshr i32 %304, 2, !dbg !50
  %306 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %305, !dbg !50
  %307 = getelementptr inbounds float, ptr addrspace(3) %306, i32 %304, !dbg !50
  %308 = extractelement <16 x float> %229, i64 4, !dbg !50
  %309 = bitcast float %308 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %307, <1 x i32> %309, i1 true) #4, !dbg !50
  %310 = or disjoint i32 %68, 3, !dbg !50
  %311 = getelementptr inbounds float, ptr addrspace(3) %247, i32 %310, !dbg !50
  %312 = extractelement <16 x float> %229, i64 3, !dbg !50
  %313 = bitcast float %312 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %313, i1 true) #4, !dbg !50
  %314 = or disjoint i32 %68, 7, !dbg !50
  %315 = lshr i32 %314, 2, !dbg !50
  %316 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %315, !dbg !50
  %317 = getelementptr inbounds float, ptr addrspace(3) %316, i32 %314, !dbg !50
  %318 = extractelement <16 x float> %229, i64 2, !dbg !50
  %319 = bitcast float %318 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %317, <1 x i32> %319, i1 true) #4, !dbg !50
  %320 = or disjoint i32 %68, 11, !dbg !50
  %321 = lshr i32 %320, 2, !dbg !50
  %322 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %321, !dbg !50
  %323 = getelementptr inbounds float, ptr addrspace(3) %322, i32 %320, !dbg !50
  %324 = extractelement <16 x float> %229, i64 1, !dbg !50
  %325 = bitcast float %324 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %323, <1 x i32> %325, i1 true) #4, !dbg !50
  %326 = or disjoint i32 %68, 15, !dbg !50
  %327 = lshr i32 %326, 2, !dbg !50
  %328 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %327, !dbg !50
  %329 = getelementptr inbounds float, ptr addrspace(3) %328, i32 %326, !dbg !50
  %330 = extractelement <16 x float> %229, i64 0, !dbg !50
  %331 = bitcast float %330 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %329, <1 x i32> %331, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %332 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %16, !dbg !50
  %333 = getelementptr inbounds float, ptr addrspace(3) %332, i32 %16, !dbg !50
  %334 = load i32, ptr addrspace(3) %333, align 4, !dbg !50
  %335 = or disjoint i32 %16, 1, !dbg !50
  %336 = getelementptr inbounds float, ptr addrspace(3) %332, i32 %335, !dbg !50
  %337 = load i32, ptr addrspace(3) %336, align 4, !dbg !50
  %338 = or disjoint i32 %16, 2, !dbg !50
  %339 = getelementptr inbounds float, ptr addrspace(3) %332, i32 %338, !dbg !50
  %340 = load i32, ptr addrspace(3) %339, align 4, !dbg !50
  %341 = or disjoint i32 %16, 3, !dbg !50
  %342 = getelementptr inbounds float, ptr addrspace(3) %332, i32 %341, !dbg !50
  %343 = load i32, ptr addrspace(3) %342, align 4, !dbg !50
  %344 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %178, !dbg !50
  %345 = getelementptr inbounds float, ptr addrspace(3) %344, i32 %178, !dbg !50
  %346 = load i32, ptr addrspace(3) %345, align 4, !dbg !50
  %347 = or disjoint i32 %16, 1025, !dbg !50
  %348 = lshr i32 %347, 2, !dbg !50
  %349 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %348, !dbg !50
  %350 = getelementptr inbounds float, ptr addrspace(3) %349, i32 %347, !dbg !50
  %351 = load i32, ptr addrspace(3) %350, align 4, !dbg !50
  %352 = or disjoint i32 %16, 1026, !dbg !50
  %353 = lshr i32 %352, 2, !dbg !50
  %354 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %353, !dbg !50
  %355 = getelementptr inbounds float, ptr addrspace(3) %354, i32 %352, !dbg !50
  %356 = load i32, ptr addrspace(3) %355, align 4, !dbg !50
  %357 = or disjoint i32 %16, 1027, !dbg !50
  %358 = lshr i32 %357, 2, !dbg !50
  %359 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %358, !dbg !50
  %360 = getelementptr inbounds float, ptr addrspace(3) %359, i32 %357, !dbg !50
  %361 = load i32, ptr addrspace(3) %360, align 4, !dbg !50
  %362 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %177, !dbg !50
  %363 = getelementptr inbounds float, ptr addrspace(3) %362, i32 %177, !dbg !50
  %364 = load i32, ptr addrspace(3) %363, align 4, !dbg !50
  %365 = or disjoint i32 %16, 2049, !dbg !50
  %366 = lshr i32 %365, 2, !dbg !50
  %367 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %366, !dbg !50
  %368 = getelementptr inbounds float, ptr addrspace(3) %367, i32 %365, !dbg !50
  %369 = load i32, ptr addrspace(3) %368, align 4, !dbg !50
  %370 = or disjoint i32 %16, 2050, !dbg !50
  %371 = lshr i32 %370, 2, !dbg !50
  %372 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %371, !dbg !50
  %373 = getelementptr inbounds float, ptr addrspace(3) %372, i32 %370, !dbg !50
  %374 = load i32, ptr addrspace(3) %373, align 4, !dbg !50
  %375 = or disjoint i32 %16, 2051, !dbg !50
  %376 = lshr i32 %375, 2, !dbg !50
  %377 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %376, !dbg !50
  %378 = getelementptr inbounds float, ptr addrspace(3) %377, i32 %375, !dbg !50
  %379 = load i32, ptr addrspace(3) %378, align 4, !dbg !50
  %380 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %176, !dbg !50
  %381 = getelementptr inbounds float, ptr addrspace(3) %380, i32 %176, !dbg !50
  %382 = load i32, ptr addrspace(3) %381, align 4, !dbg !50
  %383 = or disjoint i32 %16, 3073, !dbg !50
  %384 = lshr i32 %383, 2, !dbg !50
  %385 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %384, !dbg !50
  %386 = getelementptr inbounds float, ptr addrspace(3) %385, i32 %383, !dbg !50
  %387 = load i32, ptr addrspace(3) %386, align 4, !dbg !50
  %388 = or disjoint i32 %16, 3074, !dbg !50
  %389 = lshr i32 %388, 2, !dbg !50
  %390 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %389, !dbg !50
  %391 = getelementptr inbounds float, ptr addrspace(3) %390, i32 %388, !dbg !50
  %392 = load i32, ptr addrspace(3) %391, align 4, !dbg !50
  %393 = or disjoint i32 %16, 3075, !dbg !50
  %394 = lshr i32 %393, 2, !dbg !50
  %395 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %394, !dbg !50
  %396 = getelementptr inbounds float, ptr addrspace(3) %395, i32 %393, !dbg !50
  %397 = load i32, ptr addrspace(3) %396, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %334, i32 %337, i32 %340, i32 %343, ptr addrspace(1) %240, i1 %179) #4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %346, i32 %351, i32 %356, i32 %361, ptr addrspace(1) %242, i1 %179) #4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %364, i32 %369, i32 %374, i32 %379, ptr addrspace(1) %244, i1 %179) #4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %382, i32 %387, i32 %392, i32 %397, ptr addrspace(1) %246, i1 %179) #4, !dbg !50
  %398 = getelementptr i1, ptr addrspace(1) %6, i64 %40, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %399 = extractelement <16 x i1> %230, i64 15, !dbg !52
  %400 = zext i1 %399 to i8, !dbg !52
  %401 = extractelement <16 x i1> %230, i64 14, !dbg !52
  %402 = zext i1 %401 to i8, !dbg !52
  %403 = extractelement <16 x i1> %230, i64 13, !dbg !52
  %404 = zext i1 %403 to i8, !dbg !52
  %405 = extractelement <16 x i1> %230, i64 12, !dbg !52
  %406 = zext i1 %405 to i8, !dbg !52
  %407 = extractelement <16 x i1> %230, i64 11, !dbg !52
  %408 = zext i1 %407 to i8, !dbg !52
  %409 = extractelement <16 x i1> %230, i64 10, !dbg !52
  %410 = zext i1 %409 to i8, !dbg !52
  %411 = extractelement <16 x i1> %230, i64 9, !dbg !52
  %412 = zext i1 %411 to i8, !dbg !52
  %413 = extractelement <16 x i1> %230, i64 8, !dbg !52
  %414 = zext i1 %413 to i8, !dbg !52
  %415 = extractelement <16 x i1> %230, i64 7, !dbg !52
  %416 = zext i1 %415 to i8, !dbg !52
  %417 = extractelement <16 x i1> %230, i64 6, !dbg !52
  %418 = zext i1 %417 to i8, !dbg !52
  %419 = extractelement <16 x i1> %230, i64 5, !dbg !52
  %420 = zext i1 %419 to i8, !dbg !52
  %421 = extractelement <16 x i1> %230, i64 4, !dbg !52
  %422 = zext i1 %421 to i8, !dbg !52
  %423 = extractelement <16 x i1> %230, i64 3, !dbg !52
  %424 = zext i1 %423 to i8, !dbg !52
  %425 = extractelement <16 x i1> %230, i64 2, !dbg !52
  %426 = zext i1 %425 to i8, !dbg !52
  %427 = extractelement <16 x i1> %230, i64 1, !dbg !52
  %428 = zext i1 %427 to i8, !dbg !52
  %429 = extractelement <16 x i1> %230, i64 0, !dbg !52
  %430 = zext i1 %429 to i8, !dbg !52
  tail call void asm sideeffect "@$5 st.shared.v4.b8 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %332, i8 %400, i8 %402, i8 %404, i8 %406, i1 true) #4, !dbg !52
  %431 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %78, !dbg !52
  tail call void asm sideeffect "@$5 st.shared.v4.b8 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %431, i8 %408, i8 %410, i8 %412, i8 %414, i1 true) #4, !dbg !52
  %432 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %81, !dbg !52
  tail call void asm sideeffect "@$5 st.shared.v4.b8 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %432, i8 %416, i8 %418, i8 %420, i8 %422, i1 true) #4, !dbg !52
  %433 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %84, !dbg !52
  tail call void asm sideeffect "@$5 st.shared.v4.b8 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %433, i8 %424, i8 %426, i8 %428, i8 %430, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %434 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %71, !dbg !52
  %435 = load <4 x i32>, ptr addrspace(3) %434, align 16, !dbg !52
  %436 = bitcast <4 x i32> %435 to <128 x i1>, !dbg !52
  %437 = extractelement <128 x i1> %436, i64 24, !dbg !52
  %438 = extractelement <128 x i1> %436, i64 56, !dbg !52
  %439 = extractelement <128 x i1> %436, i64 88, !dbg !52
  %440 = extractelement <128 x i1> %436, i64 120, !dbg !52
  %441 = bitcast <4 x i32> %435 to <16 x i8>, !dbg !52
  %442 = extractelement <16 x i8> %441, i64 0, !dbg !52
  %443 = and i8 %442, 1, !dbg !52
  %444 = shufflevector <16 x i8> %441, <16 x i8> poison, <2 x i32> <i32 1, i32 2>, !dbg !52
  %445 = and <2 x i8> %444, splat (i8 1), !dbg !52
  %446 = zext i1 %437 to i8, !dbg !52
  %447 = extractelement <16 x i8> %441, i64 4, !dbg !52
  %448 = and i8 %447, 1, !dbg !52
  %449 = shufflevector <16 x i8> %441, <16 x i8> poison, <2 x i32> <i32 5, i32 6>, !dbg !52
  %450 = and <2 x i8> %449, splat (i8 1), !dbg !52
  %451 = zext i1 %438 to i8, !dbg !52
  %452 = extractelement <16 x i8> %441, i64 8, !dbg !52
  %453 = and i8 %452, 1, !dbg !52
  %454 = shufflevector <16 x i8> %441, <16 x i8> poison, <2 x i32> <i32 9, i32 10>, !dbg !52
  %455 = and <2 x i8> %454, splat (i8 1), !dbg !52
  %456 = zext i1 %439 to i8, !dbg !52
  %457 = extractelement <16 x i8> %441, i64 12, !dbg !52
  %458 = and i8 %457, 1, !dbg !52
  %459 = shufflevector <16 x i8> %441, <16 x i8> poison, <2 x i32> <i32 13, i32 14>, !dbg !52
  %460 = and <2 x i8> %459, splat (i8 1), !dbg !52
  %461 = zext i1 %440 to i8, !dbg !52
  %462 = insertelement <4 x i8> poison, i8 %443, i64 0, !dbg !52
  %463 = shufflevector <2 x i8> %445, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %464 = shufflevector <4 x i8> %462, <4 x i8> %463, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !52
  %465 = insertelement <4 x i8> %464, i8 %446, i64 3, !dbg !52
  %466 = bitcast <4 x i8> %465 to i32, !dbg !52
  %467 = insertelement <4 x i8> poison, i8 %448, i64 0, !dbg !52
  %468 = shufflevector <2 x i8> %450, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %469 = shufflevector <4 x i8> %467, <4 x i8> %468, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !52
  %470 = insertelement <4 x i8> %469, i8 %451, i64 3, !dbg !52
  %471 = bitcast <4 x i8> %470 to i32, !dbg !52
  %472 = insertelement <4 x i8> poison, i8 %453, i64 0, !dbg !52
  %473 = shufflevector <2 x i8> %455, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %474 = shufflevector <4 x i8> %472, <4 x i8> %473, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !52
  %475 = insertelement <4 x i8> %474, i8 %456, i64 3, !dbg !52
  %476 = bitcast <4 x i8> %475 to i32, !dbg !52
  %477 = insertelement <4 x i8> poison, i8 %458, i64 0, !dbg !52
  %478 = shufflevector <2 x i8> %460, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !52
  %479 = shufflevector <4 x i8> %477, <4 x i8> %478, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !52
  %480 = insertelement <4 x i8> %479, i8 %461, i64 3, !dbg !52
  %481 = bitcast <4 x i8> %480 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %466, i32 %471, i32 %476, i32 %481, ptr addrspace(1) %398, i1 %26) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cirjthp2dm3v4e2cm7s3fftxbtjgs5kounlr6bvgdshjvdfg5nxz.py", directory: "inductor_cache/ir")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_11, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 26, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 49, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 51, column: 21, scope: !7)
!48 = !DILocation(line: 52, column: 30, scope: !7)
!49 = !DILocation(line: 52, column: 25, scope: !7)
!50 = !DILocation(line: 52, column: 44, scope: !7)
!51 = !DILocation(line: 53, column: 25, scope: !7)
!52 = !DILocation(line: 53, column: 57, scope: !7)
!53 = !DILocation(line: 53, column: 4, scope: !7)
