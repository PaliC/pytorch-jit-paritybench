; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_add_cat_native_layer_norm_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %14 = icmp slt i32 %13, 68, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = and i32 %15, 31, !dbg !12
  %17 = lshr i32 %15, 5, !dbg !12
  %18 = shl i32 %15, 2, !dbg !12
  %19 = and i32 %18, 1020, !dbg !12
  %20 = and i32 %15, 255, !dbg !12
  %21 = or disjoint i32 %20, 256, !dbg !12
  %22 = or disjoint i32 %20, 512, !dbg !12
  %23 = or disjoint i32 %20, 768, !dbg !12
  %.frozen = freeze i32 %13, !dbg !13
  %24 = sdiv i32 %.frozen, 17, !dbg !13
  %25 = mul i32 %24, 17, !dbg !14
  %.decomposed = sub i32 %.frozen, %25, !dbg !14
  %26 = icmp samesign ult i32 %19, 768, !dbg !15
  %27 = mul nsw i32 %.decomposed, 768, !dbg !16
  %28 = add nsw i32 %27, %19, !dbg !17
  %29 = sext i32 %28 to i64, !dbg !18
  %30 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !18
  %31 = and i1 %26, %14, !dbg !19
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #5, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !20
  %37 = bitcast i32 %33 to float, !dbg !20
  %38 = bitcast i32 %34 to float, !dbg !20
  %39 = bitcast i32 %35 to float, !dbg !20
  %40 = bitcast i32 %36 to float, !dbg !20
  %41 = icmp slt i32 %.decomposed, 1, !dbg !21
  %42 = zext nneg i32 %19 to i64, !dbg !22
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !22
  %44 = and i1 %26, %41, !dbg !23
  %45 = and i1 %14, %44, !dbg !24
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #5, !dbg !25
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !25
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !25
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !25
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !25
  %51 = bitcast i32 %47 to float, !dbg !25
  %52 = bitcast i32 %48 to float, !dbg !25
  %53 = bitcast i32 %49 to float, !dbg !25
  %54 = bitcast i32 %50 to float, !dbg !25
  %55 = icmp sgt i32 %.decomposed, 0, !dbg !26
  %56 = shl nuw nsw i32 %20, 4, !dbg !27
  %57 = shl nuw nsw i32 %21, 4, !dbg !27
  %58 = shl nuw nsw i32 %22, 4, !dbg !27
  %59 = shl nuw nsw i32 %23, 4, !dbg !27
  %60 = mul i32 %24, 12288, !dbg !28
  %61 = trunc nsw i32 %.decomposed to i8, !dbg !29
  %.lhs.trunc = add nsw i8 %61, -1, !dbg !29
  %62 = srem i8 %.lhs.trunc, 16, !dbg !29
  %.sext = sext i8 %62 to i32, !dbg !29
  %63 = add i32 %60, %.sext, !dbg !30
  %64 = add i32 %63, %56, !dbg !31
  %65 = add i32 %63, %57, !dbg !31
  %66 = add i32 %63, %58, !dbg !31
  %67 = add i32 %63, %59, !dbg !31
  %68 = sext i32 %64 to i64, !dbg !32
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %68, !dbg !32
  %70 = sext i32 %65 to i64, !dbg !32
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %70, !dbg !32
  %72 = sext i32 %66 to i64, !dbg !32
  %73 = getelementptr float, ptr addrspace(1) %2, i64 %72, !dbg !32
  %74 = sext i32 %67 to i64, !dbg !32
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %74, !dbg !32
  %76 = and i1 %26, %55, !dbg !33
  %77 = and i1 %14, %55, !dbg !34
  %78 = and i1 %14, %76, !dbg !34
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %77, i32 0, i1 %77) #5, !dbg !35
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %77, i32 0, i1 %77) #5, !dbg !35
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %77, i32 0, i1 %77) #5, !dbg !35
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 false, i32 0, i1 false) #5, !dbg !35
  %83 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %20, !dbg !35
  %84 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #5, !dbg !35
  %85 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %21, !dbg !35
  %86 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #5, !dbg !35
  %87 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %22, !dbg !35
  %88 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #5, !dbg !35
  %89 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %23, !dbg !35
  %90 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !35
  %92 = load float, ptr addrspace(3) %91, align 16, !dbg !35
  %93 = getelementptr inbounds i8, ptr addrspace(3) %91, i32 4, !dbg !35
  %94 = load float, ptr addrspace(3) %93, align 4, !dbg !35
  %95 = getelementptr inbounds i8, ptr addrspace(3) %91, i32 8, !dbg !35
  %96 = load float, ptr addrspace(3) %95, align 8, !dbg !35
  %97 = getelementptr inbounds i8, ptr addrspace(3) %91, i32 12, !dbg !35
  %98 = load float, ptr addrspace(3) %97, align 4, !dbg !35
  %99 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !36
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %99, i1 %78, i32 0, i1 %78, i32 0, i1 %78, i32 0, i1 %78, i32 0, i1 %78) #5, !dbg !37
  %101 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !37
  %102 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !37
  %103 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !37
  %104 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !37
  %105 = bitcast i32 %101 to float, !dbg !37
  %106 = bitcast i32 %102 to float, !dbg !37
  %107 = bitcast i32 %103 to float, !dbg !37
  %108 = bitcast i32 %104 to float, !dbg !37
  %109 = fadd float %92, %105, !dbg !38
  %110 = fadd float %94, %106, !dbg !38
  %111 = fadd float %96, %107, !dbg !38
  %112 = fadd float %98, %108, !dbg !38
  %113 = select i1 %41, float %51, float %109, !dbg !39
  %114 = select i1 %41, float %52, float %110, !dbg !39
  %115 = select i1 %41, float %53, float %111, !dbg !39
  %116 = select i1 %41, float %54, float %112, !dbg !39
  %117 = fadd float %113, %37, !dbg !40
  %118 = fadd float %114, %38, !dbg !40
  %119 = fadd float %115, %39, !dbg !40
  %120 = fadd float %116, %40, !dbg !40
  %121 = select i1 %31, float %117, float 0.000000e+00, !dbg !41
  %122 = select i1 %31, float %118, float 0.000000e+00, !dbg !41
  %123 = select i1 %31, float %119, float 0.000000e+00, !dbg !41
  %124 = select i1 %31, float %120, float 0.000000e+00, !dbg !41
  %125 = select i1 %31, float 1.000000e+00, float 0.000000e+00, !dbg !42
  %126 = mul i32 %13, 768, !dbg !43
  %127 = add i32 %126, %19, !dbg !44
  %128 = sext i32 %127 to i64, !dbg !45
  %129 = getelementptr float, ptr addrspace(1) %7, i64 %128, !dbg !45
  %130 = bitcast float %113 to i32, !dbg !46
  %131 = bitcast float %114 to i32, !dbg !46
  %132 = bitcast float %115 to i32, !dbg !46
  %133 = bitcast float %116 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %130, i32 %131, i32 %132, i32 %133, ptr addrspace(1) %129, i1 %31) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %134 = fsub float %122, %121, !dbg !51
  %135 = select i1 %31, float 2.000000e+00, float 0.000000e+00, !dbg !53
  %136 = fcmp oeq float %135, 0.000000e+00, !dbg !54
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float %135) #5, !dbg !55
  %138 = select i1 %136, float 0.000000e+00, float %137, !dbg !56
  %139 = fmul float %138, %134, !dbg !57
  %140 = fadd float %121, %139, !dbg !58
  %141 = fmul float %134, %134, !dbg !59
  %142 = fmul float %125, %141, !dbg !60
  %143 = fmul float %138, %142, !dbg !61
  %144 = fadd float %143, 0.000000e+00, !dbg !62
  %145 = fsub float %123, %140, !dbg !51
  %146 = select i1 %31, float 3.000000e+00, float 0.000000e+00, !dbg !53
  %147 = fcmp oeq float %146, 0.000000e+00, !dbg !54
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float %146) #5, !dbg !55
  %149 = select i1 %147, float 0.000000e+00, float %148, !dbg !56
  %150 = fmul float %149, %145, !dbg !57
  %151 = fadd float %140, %150, !dbg !58
  %152 = fmul float %145, %145, !dbg !59
  %153 = fmul float %135, %152, !dbg !60
  %154 = fmul float %149, %153, !dbg !61
  %155 = fadd float %144, %154, !dbg !62
  %156 = fsub float %124, %151, !dbg !51
  %157 = select i1 %31, float 4.000000e+00, float 0.000000e+00, !dbg !53
  %158 = fcmp oeq float %157, 0.000000e+00, !dbg !54
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float %157) #5, !dbg !55
  %160 = select i1 %158, float 0.000000e+00, float %159, !dbg !56
  %161 = fmul float %160, %156, !dbg !57
  %162 = fadd float %151, %161, !dbg !58
  %163 = fmul float %156, %156, !dbg !59
  %164 = fmul float %146, %163, !dbg !60
  %165 = fmul float %160, %164, !dbg !61
  %166 = fadd float %155, %165, !dbg !62
  %167 = bitcast float %162 to i32, !dbg !47
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 16, i32 31), !dbg !47
  %169 = bitcast i32 %168 to float, !dbg !47
  %170 = bitcast float %166 to i32, !dbg !47
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 16, i32 31), !dbg !47
  %172 = bitcast i32 %171 to float, !dbg !47
  %173 = bitcast float %157 to i32, !dbg !47
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 16, i32 31), !dbg !47
  %175 = bitcast i32 %174 to float, !dbg !47
  %176 = fsub float %169, %162, !dbg !51
  %177 = fadd float %157, %175, !dbg !53
  %178 = fcmp oeq float %177, 0.000000e+00, !dbg !54
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float %177) #5, !dbg !55
  %180 = select i1 %178, float 0.000000e+00, float %179, !dbg !56
  %181 = fmul float %180, %176, !dbg !57
  %182 = fadd float %162, %181, !dbg !58
  %183 = fadd float %166, %172, !dbg !63
  %184 = fmul float %176, %176, !dbg !59
  %185 = fmul float %157, %184, !dbg !60
  %186 = fmul float %180, %185, !dbg !61
  %187 = fadd float %183, %186, !dbg !62
  %188 = bitcast float %182 to i32, !dbg !47
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 8, i32 31), !dbg !47
  %190 = bitcast i32 %189 to float, !dbg !47
  %191 = bitcast float %187 to i32, !dbg !47
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 8, i32 31), !dbg !47
  %193 = bitcast i32 %192 to float, !dbg !47
  %194 = bitcast float %177 to i32, !dbg !47
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 8, i32 31), !dbg !47
  %196 = bitcast i32 %195 to float, !dbg !47
  %197 = fsub float %190, %182, !dbg !51
  %198 = fadd float %177, %196, !dbg !53
  %199 = fcmp oeq float %198, 0.000000e+00, !dbg !54
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %196, float %198) #5, !dbg !55
  %201 = select i1 %199, float 0.000000e+00, float %200, !dbg !56
  %202 = fmul float %201, %197, !dbg !57
  %203 = fadd float %182, %202, !dbg !58
  %204 = fadd float %187, %193, !dbg !63
  %205 = fmul float %197, %197, !dbg !59
  %206 = fmul float %177, %205, !dbg !60
  %207 = fmul float %201, %206, !dbg !61
  %208 = fadd float %204, %207, !dbg !62
  %209 = bitcast float %203 to i32, !dbg !47
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 4, i32 31), !dbg !47
  %211 = bitcast i32 %210 to float, !dbg !47
  %212 = bitcast float %208 to i32, !dbg !47
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 4, i32 31), !dbg !47
  %214 = bitcast i32 %213 to float, !dbg !47
  %215 = bitcast float %198 to i32, !dbg !47
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 4, i32 31), !dbg !47
  %217 = bitcast i32 %216 to float, !dbg !47
  %218 = fsub float %211, %203, !dbg !51
  %219 = fadd float %198, %217, !dbg !53
  %220 = fcmp oeq float %219, 0.000000e+00, !dbg !54
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %217, float %219) #5, !dbg !55
  %222 = select i1 %220, float 0.000000e+00, float %221, !dbg !56
  %223 = fmul float %222, %218, !dbg !57
  %224 = fadd float %203, %223, !dbg !58
  %225 = fadd float %208, %214, !dbg !63
  %226 = fmul float %218, %218, !dbg !59
  %227 = fmul float %198, %226, !dbg !60
  %228 = fmul float %222, %227, !dbg !61
  %229 = fadd float %225, %228, !dbg !62
  %230 = bitcast float %224 to i32, !dbg !47
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 2, i32 31), !dbg !47
  %232 = bitcast i32 %231 to float, !dbg !47
  %233 = bitcast float %229 to i32, !dbg !47
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 2, i32 31), !dbg !47
  %235 = bitcast i32 %234 to float, !dbg !47
  %236 = bitcast float %219 to i32, !dbg !47
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 2, i32 31), !dbg !47
  %238 = bitcast i32 %237 to float, !dbg !47
  %239 = fsub float %232, %224, !dbg !51
  %240 = fadd float %219, %238, !dbg !53
  %241 = fcmp oeq float %240, 0.000000e+00, !dbg !54
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float %240) #5, !dbg !55
  %243 = select i1 %241, float 0.000000e+00, float %242, !dbg !56
  %244 = fmul float %243, %239, !dbg !57
  %245 = fadd float %224, %244, !dbg !58
  %246 = fadd float %229, %235, !dbg !63
  %247 = fmul float %239, %239, !dbg !59
  %248 = fmul float %219, %247, !dbg !60
  %249 = fmul float %243, %248, !dbg !61
  %250 = fadd float %246, %249, !dbg !62
  %251 = bitcast float %245 to i32, !dbg !47
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 1, i32 31), !dbg !47
  %253 = bitcast i32 %252 to float, !dbg !47
  %254 = bitcast float %250 to i32, !dbg !47
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 1, i32 31), !dbg !47
  %256 = bitcast i32 %255 to float, !dbg !47
  %257 = bitcast float %240 to i32, !dbg !47
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 1, i32 31), !dbg !47
  %259 = bitcast i32 %258 to float, !dbg !47
  %260 = fsub float %253, %245, !dbg !51
  %261 = fadd float %240, %259, !dbg !53
  %262 = fcmp oeq float %261, 0.000000e+00, !dbg !54
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %259, float %261) #5, !dbg !55
  %264 = select i1 %262, float 0.000000e+00, float %263, !dbg !56
  %265 = fmul float %260, %264, !dbg !57
  %266 = fadd float %245, %265, !dbg !58
  %267 = fadd float %250, %256, !dbg !63
  %268 = fmul float %260, %260, !dbg !59
  %269 = fmul float %240, %268, !dbg !60
  %270 = fmul float %264, %269, !dbg !61
  %271 = fadd float %267, %270, !dbg !62
  %272 = icmp eq i32 %16, 0, !dbg !47
  %273 = and i32 %17, 7, !dbg !47
  %274 = getelementptr float, ptr addrspace(3) @global_smem, i32 %273, !dbg !47
  %275 = bitcast float %266 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 %272) #5, !dbg !47
  %276 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %273, !dbg !47
  %277 = bitcast float %271 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %277, i1 %272) #5, !dbg !47
  %278 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %273, !dbg !47
  %279 = bitcast float %261 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %278, <1 x i32> %279, i1 %272) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %280 = icmp slt i32 %15, 8, !dbg !47
  %281 = getelementptr float, ptr addrspace(3) @global_smem, i32 %15, !dbg !47
  %282 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %281, i1 %280) #5, !dbg !47
  %283 = bitcast i32 %282 to float, !dbg !47
  %284 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %15, !dbg !47
  %285 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %284, i1 %280) #5, !dbg !47
  %286 = bitcast i32 %285 to float, !dbg !47
  %287 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %15, !dbg !47
  %288 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %287, i1 %280) #5, !dbg !47
  %289 = bitcast i32 %288 to float, !dbg !47
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 4, i32 31), !dbg !47
  %291 = bitcast i32 %290 to float, !dbg !47
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 4, i32 31), !dbg !47
  %293 = bitcast i32 %292 to float, !dbg !47
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 4, i32 31), !dbg !47
  %295 = bitcast i32 %294 to float, !dbg !47
  %296 = fsub float %291, %283, !dbg !51
  %297 = fadd float %289, %295, !dbg !53
  %298 = fcmp oeq float %297, 0.000000e+00, !dbg !54
  %299 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %295, float %297) #5, !dbg !55
  %300 = select i1 %298, float 0.000000e+00, float %299, !dbg !56
  %301 = fmul float %296, %300, !dbg !57
  %302 = fadd float %301, %283, !dbg !58
  %303 = fadd float %286, %293, !dbg !63
  %304 = fmul float %296, %296, !dbg !59
  %305 = fmul float %304, %289, !dbg !60
  %306 = fmul float %305, %300, !dbg !61
  %307 = fadd float %303, %306, !dbg !62
  %308 = bitcast float %302 to i32, !dbg !47
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 2, i32 31), !dbg !47
  %310 = bitcast i32 %309 to float, !dbg !47
  %311 = bitcast float %307 to i32, !dbg !47
  %312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 2, i32 31), !dbg !47
  %313 = bitcast i32 %312 to float, !dbg !47
  %314 = bitcast float %297 to i32, !dbg !47
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 2, i32 31), !dbg !47
  %316 = bitcast i32 %315 to float, !dbg !47
  %317 = fsub float %310, %302, !dbg !51
  %318 = fadd float %297, %316, !dbg !53
  %319 = fcmp oeq float %318, 0.000000e+00, !dbg !54
  %320 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %316, float %318) #5, !dbg !55
  %321 = select i1 %319, float 0.000000e+00, float %320, !dbg !56
  %322 = fmul float %317, %321, !dbg !57
  %323 = fadd float %302, %322, !dbg !58
  %324 = fadd float %307, %313, !dbg !63
  %325 = fmul float %317, %317, !dbg !59
  %326 = fmul float %297, %325, !dbg !60
  %327 = fmul float %321, %326, !dbg !61
  %328 = fadd float %324, %327, !dbg !62
  %329 = bitcast float %323 to i32, !dbg !47
  %330 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %329, i32 1, i32 31), !dbg !47
  %331 = bitcast i32 %330 to float, !dbg !47
  %332 = bitcast float %328 to i32, !dbg !47
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 1, i32 31), !dbg !47
  %334 = bitcast i32 %333 to float, !dbg !47
  %335 = bitcast float %318 to i32, !dbg !47
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 1, i32 31), !dbg !47
  %337 = bitcast i32 %336 to float, !dbg !47
  %338 = fsub float %331, %323, !dbg !51
  %339 = fadd float %318, %337, !dbg !53
  %340 = fcmp oeq float %339, 0.000000e+00, !dbg !54
  %341 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %337, float %339) #5, !dbg !55
  %342 = select i1 %340, float 0.000000e+00, float %341, !dbg !56
  %343 = fmul float %338, %342, !dbg !57
  %344 = fadd float %323, %343, !dbg !58
  %345 = fadd float %328, %334, !dbg !63
  %346 = fmul float %338, %338, !dbg !59
  %347 = fmul float %318, %346, !dbg !60
  %348 = fmul float %342, %347, !dbg !61
  %349 = fadd float %345, %348, !dbg !62
  %350 = and i32 %15, 7, !dbg !47
  %351 = icmp eq i32 %350, 0, !dbg !47
  %352 = and i1 %280, %351, !dbg !47
  %353 = bitcast float %344 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %281, <1 x i32> %353, i1 %352) #5, !dbg !47
  %354 = bitcast float %349 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %354, i1 %352) #5, !dbg !47
  %355 = bitcast float %339 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, <1 x i32> %355, i1 %352) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %356 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !47
  %357 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !47
  %358 = sext i32 %13 to i64, !dbg !64
  %359 = getelementptr float, ptr addrspace(1) %8, i64 %358, !dbg !64
  %360 = icmp eq i32 %20, 0, !dbg !65
  %361 = bitcast float %356 to i32, !dbg !65
  %362 = and i1 %360, %14, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %361, ptr addrspace(1) %359, i1 %362) #5, !dbg !65
  %363 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %357, float 7.680000e+02) #5, !dbg !66
  %364 = fadd float %363, 0x3EE4F8B580000000, !dbg !67
  %365 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !68
  %.not.i = icmp eq i32 %365, 0, !dbg !68
  br i1 %.not.i, label %368, label %366, !dbg !68

366:                                              ; preds = %12
  %367 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %364), !dbg !68
  br label %__nv_rsqrtf.exit, !dbg !68

368:                                              ; preds = %12
  %369 = tail call float @llvm.nvvm.rsqrt.approx.f(float %364), !dbg !68
  br label %__nv_rsqrtf.exit, !dbg !68

__nv_rsqrtf.exit:                                 ; preds = %366, %368
  %.0.i = phi float [ %367, %366 ], [ %369, %368 ], !dbg !68
  %370 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !68
  %371 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !68
  %372 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !68
  %373 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !68
  %.not.i13 = icmp eq i32 %373, 0, !dbg !68
  br i1 %.not.i13, label %376, label %374, !dbg !68

374:                                              ; preds = %__nv_rsqrtf.exit
  %375 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %364), !dbg !68
  br label %__nv_rsqrtf.exit15, !dbg !68

376:                                              ; preds = %__nv_rsqrtf.exit
  %377 = tail call float @llvm.nvvm.rsqrt.approx.f(float %364), !dbg !68
  br label %__nv_rsqrtf.exit15, !dbg !68

__nv_rsqrtf.exit15:                               ; preds = %374, %376
  %.0.i14 = phi float [ %375, %374 ], [ %377, %376 ], !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %378 = getelementptr float, ptr addrspace(1) %0, i64 %358, !dbg !70
  %379 = bitcast float %.0.i to i32, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %379, ptr addrspace(1) %378, i1 %362) #5, !dbg !71
  %380 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %129, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #5, !dbg !72
  %381 = extractvalue { i32, i32, i32, i32 } %380, 0, !dbg !72
  %382 = extractvalue { i32, i32, i32, i32 } %380, 1, !dbg !72
  %383 = extractvalue { i32, i32, i32, i32 } %380, 2, !dbg !72
  %384 = extractvalue { i32, i32, i32, i32 } %380, 3, !dbg !72
  %385 = bitcast i32 %381 to float, !dbg !72
  %386 = bitcast i32 %382 to float, !dbg !72
  %387 = bitcast i32 %383 to float, !dbg !72
  %388 = bitcast i32 %384 to float, !dbg !72
  %389 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #5, !dbg !73
  %390 = extractvalue { i32, i32, i32, i32 } %389, 0, !dbg !73
  %391 = extractvalue { i32, i32, i32, i32 } %389, 1, !dbg !73
  %392 = extractvalue { i32, i32, i32, i32 } %389, 2, !dbg !73
  %393 = extractvalue { i32, i32, i32, i32 } %389, 3, !dbg !73
  %394 = bitcast i32 %390 to float, !dbg !73
  %395 = bitcast i32 %391 to float, !dbg !73
  %396 = bitcast i32 %392 to float, !dbg !73
  %397 = bitcast i32 %393 to float, !dbg !73
  %398 = getelementptr float, ptr addrspace(1) %5, i64 %42, !dbg !74
  %399 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %398, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26) #5, !dbg !75
  %400 = extractvalue { i32, i32, i32, i32 } %399, 0, !dbg !75
  %401 = extractvalue { i32, i32, i32, i32 } %399, 1, !dbg !75
  %402 = extractvalue { i32, i32, i32, i32 } %399, 2, !dbg !75
  %403 = extractvalue { i32, i32, i32, i32 } %399, 3, !dbg !75
  %404 = bitcast i32 %400 to float, !dbg !75
  %405 = bitcast i32 %401 to float, !dbg !75
  %406 = bitcast i32 %402 to float, !dbg !75
  %407 = bitcast i32 %403 to float, !dbg !75
  %408 = getelementptr float, ptr addrspace(1) %6, i64 %42, !dbg !76
  %409 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %408, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26) #5, !dbg !77
  %410 = extractvalue { i32, i32, i32, i32 } %409, 0, !dbg !77
  %411 = extractvalue { i32, i32, i32, i32 } %409, 1, !dbg !77
  %412 = extractvalue { i32, i32, i32, i32 } %409, 2, !dbg !77
  %413 = extractvalue { i32, i32, i32, i32 } %409, 3, !dbg !77
  %414 = bitcast i32 %410 to float, !dbg !77
  %415 = bitcast i32 %411 to float, !dbg !77
  %416 = bitcast i32 %412 to float, !dbg !77
  %417 = bitcast i32 %413 to float, !dbg !77
  %418 = fadd float %385, %394, !dbg !78
  %419 = fadd float %386, %395, !dbg !78
  %420 = fadd float %387, %396, !dbg !78
  %421 = fadd float %388, %397, !dbg !78
  %422 = fsub float %418, %356, !dbg !79
  %423 = fsub float %419, %356, !dbg !79
  %424 = fsub float %420, %356, !dbg !79
  %425 = fsub float %421, %356, !dbg !79
  %426 = fmul float %.0.i14, %422, !dbg !80
  %427 = fmul float %.0.i14, %423, !dbg !80
  %428 = fmul float %.0.i14, %424, !dbg !80
  %429 = fmul float %.0.i14, %425, !dbg !80
  %430 = fmul float %426, %404, !dbg !81
  %431 = fmul float %427, %405, !dbg !81
  %432 = fmul float %428, %406, !dbg !81
  %433 = fmul float %429, %407, !dbg !81
  %434 = fadd float %430, %414, !dbg !82
  %435 = fadd float %431, %415, !dbg !82
  %436 = fadd float %432, %416, !dbg !82
  %437 = fadd float %433, %417, !dbg !82
  %438 = getelementptr float, ptr addrspace(1) %9, i64 %128, !dbg !83
  %439 = bitcast float %434 to i32, !dbg !84
  %440 = bitcast float %435 to i32, !dbg !84
  %441 = bitcast float %436 to i32, !dbg !84
  %442 = bitcast float %437 to i32, !dbg !84
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %439, i32 %440, i32 %441, i32 %442, ptr addrspace(1) %438, i1 %31) #5, !dbg !84
  ret void, !dbg !85
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cu4lf52tjilpns5v26o6pj24w37gxw2m7zkwrvpjaim2yrhgjew6.py", directory: "inductor_cache/u4")
!4 = !{ptr @triton_red_fused_add_cat_native_layer_norm_6, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_cat_native_layer_norm_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_cat_native_layer_norm_6", linkageName: "triton_red_fused_add_cat_native_layer_norm_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 34, column: 25, scope: !7)
!16 = !DILocation(line: 36, column: 44, scope: !7)
!17 = !DILocation(line: 36, column: 40, scope: !7)
!18 = !DILocation(line: 36, column: 35, scope: !7)
!19 = !DILocation(line: 36, column: 57, scope: !7)
!20 = !DILocation(line: 36, column: 49, scope: !7)
!21 = !DILocation(line: 41, column: 22, scope: !7)
!22 = !DILocation(line: 42, column: 34, scope: !7)
!23 = !DILocation(line: 42, column: 82, scope: !7)
!24 = !DILocation(line: 42, column: 89, scope: !7)
!25 = !DILocation(line: 42, column: 74, scope: !7)
!26 = !DILocation(line: 43, column: 23, scope: !7)
!27 = !DILocation(line: 46, column: 37, scope: !7)
!28 = !DILocation(line: 46, column: 48, scope: !7)
!29 = !DILocation(line: 46, column: 69, scope: !7)
!30 = !DILocation(line: 46, column: 42, scope: !7)
!31 = !DILocation(line: 46, column: 55, scope: !7)
!32 = !DILocation(line: 46, column: 34, scope: !7)
!33 = !DILocation(line: 46, column: 84, scope: !7)
!34 = !DILocation(line: 46, column: 91, scope: !7)
!35 = !DILocation(line: 46, column: 76, scope: !7)
!36 = !DILocation(line: 47, column: 35, scope: !7)
!37 = !DILocation(line: 47, column: 75, scope: !7)
!38 = !DILocation(line: 48, column: 23, scope: !7)
!39 = !DILocation(line: 51, column: 37, scope: !7)
!40 = !DILocation(line: 52, column: 24, scope: !7)
!41 = !DILocation(line: 57, column: 62, scope: !7)
!42 = !DILocation(line: 59, column: 66, scope: !7)
!43 = !DILocation(line: 60, column: 38, scope: !7)
!44 = !DILocation(line: 60, column: 34, scope: !7)
!45 = !DILocation(line: 60, column: 29, scope: !7)
!46 = !DILocation(line: 60, column: 50, scope: !7)
!47 = !DILocation(line: 204, column: 46, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 62, column: 44, scope: !7)
!51 = !DILocation(line: 192, column: 21, scope: !52, inlinedAt: !50)
!52 = distinct !DILexicalBlockFile(scope: !48, file: !49, discriminator: 0)
!53 = !DILocation(line: 193, column: 28, scope: !52, inlinedAt: !50)
!54 = !DILocation(line: 194, column: 39, scope: !52, inlinedAt: !50)
!55 = !DILocation(line: 194, column: 60, scope: !52, inlinedAt: !50)
!56 = !DILocation(line: 194, column: 49, scope: !52, inlinedAt: !50)
!57 = !DILocation(line: 196, column: 25, scope: !52, inlinedAt: !50)
!58 = !DILocation(line: 196, column: 17, scope: !52, inlinedAt: !50)
!59 = !DILocation(line: 197, column: 30, scope: !52, inlinedAt: !50)
!60 = !DILocation(line: 197, column: 38, scope: !52, inlinedAt: !50)
!61 = !DILocation(line: 197, column: 49, scope: !52, inlinedAt: !50)
!62 = !DILocation(line: 197, column: 22, scope: !52, inlinedAt: !50)
!63 = !DILocation(line: 197, column: 15, scope: !52, inlinedAt: !50)
!64 = !DILocation(line: 67, column: 25, scope: !7)
!65 = !DILocation(line: 67, column: 37, scope: !7)
!66 = !DILocation(line: 69, column: 20, scope: !7)
!67 = !DILocation(line: 71, column: 20, scope: !7)
!68 = !DILocation(line: 72, column: 28, scope: !7)
!69 = !DILocation(line: 73, column: 4, scope: !7)
!70 = !DILocation(line: 74, column: 28, scope: !7)
!71 = !DILocation(line: 74, column: 40, scope: !7)
!72 = !DILocation(line: 79, column: 50, scope: !7)
!73 = !DILocation(line: 80, column: 49, scope: !7)
!74 = !DILocation(line: 81, column: 35, scope: !7)
!75 = !DILocation(line: 81, column: 40, scope: !7)
!76 = !DILocation(line: 82, column: 35, scope: !7)
!77 = !DILocation(line: 82, column: 40, scope: !7)
!78 = !DILocation(line: 83, column: 24, scope: !7)
!79 = !DILocation(line: 84, column: 24, scope: !7)
!80 = !DILocation(line: 85, column: 24, scope: !7)
!81 = !DILocation(line: 86, column: 24, scope: !7)
!82 = !DILocation(line: 87, column: 24, scope: !7)
!83 = !DILocation(line: 88, column: 29, scope: !7)
!84 = !DILocation(line: 88, column: 50, scope: !7)
!85 = !DILocation(line: 75, column: 4, scope: !7)
