; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_mean_pow_sqrt_sub_19(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 252, !dbg !12
  %10 = and i32 %7, 64, !dbg !12
  %11 = shl i32 %7, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = icmp slt i32 %13, 256, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %15 = sdiv i32 %.frozen, 64, !dbg !15
  %16 = mul i32 %15, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = add nsw i32 %.decomposed, %10, !dbg !17
  %18 = shl i32 %15, 7, !dbg !18
  %19 = add i32 %17, %18, !dbg !19
  %20 = sext i32 %19 to i64, !dbg !20
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !20
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #5, !dbg !21
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !21
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !21
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !21
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !21
  %27 = lshr i32 %7, 6, !dbg !22
  %28 = and i32 %27, 1, !dbg !22
  %29 = shl nuw nsw i32 %9, 1, !dbg !22
  %30 = or disjoint i32 %29, %28, !dbg !22
  %31 = getelementptr float, ptr addrspace(3) @global_smem, i32 %30, !dbg !22
  %32 = select i1 %14, i32 %23, i32 0, !dbg !26
  %33 = insertelement <1 x i32> poison, i32 %32, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %31, <1 x i32> %33, i1 true) #5, !dbg !22
  %34 = or disjoint i32 %29, 2, !dbg !22
  %35 = or disjoint i32 %34, %28, !dbg !22
  %36 = getelementptr float, ptr addrspace(3) @global_smem, i32 %35, !dbg !22
  %37 = select i1 %14, i32 %24, i32 0, !dbg !26
  %38 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %36, <1 x i32> %38, i1 true) #5, !dbg !22
  %39 = or disjoint i32 %29, 4, !dbg !22
  %40 = or disjoint i32 %39, %28, !dbg !22
  %41 = getelementptr float, ptr addrspace(3) @global_smem, i32 %40, !dbg !22
  %42 = select i1 %14, i32 %25, i32 0, !dbg !26
  %43 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %41, <1 x i32> %43, i1 true) #5, !dbg !22
  %44 = or disjoint i32 %29, 6, !dbg !22
  %45 = or disjoint i32 %44, %28, !dbg !22
  %46 = getelementptr float, ptr addrspace(3) @global_smem, i32 %45, !dbg !22
  %47 = select i1 %14, i32 %26, i32 0, !dbg !26
  %48 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %48, i1 true) #5, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %49 = icmp slt i32 %7, 512, !dbg !22
  %50 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !22
  %51 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %50, i1 %49) #5, !dbg !22
  %52 = bitcast i32 %51 to float, !dbg !22
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 1, i32 31), !dbg !22
  %54 = bitcast i32 %53 to float, !dbg !22
  %55 = fadd float %52, %54, !dbg !27
  %56 = and i32 %7, 1, !dbg !22
  %57 = icmp eq i32 %56, 0, !dbg !22
  %58 = and i1 %49, %57, !dbg !22
  %59 = bitcast float %55 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %59, i1 %58) #5, !dbg !22
  %60 = getelementptr i8, ptr addrspace(3) %50, i32 512, !dbg !22
  %61 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %60, i1 %49) #5, !dbg !22
  %62 = bitcast i32 %61 to float, !dbg !22
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 1, i32 31), !dbg !22
  %64 = bitcast i32 %63 to float, !dbg !22
  %65 = fadd float %62, %64, !dbg !27
  %66 = bitcast float %65 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %66, i1 %58) #5, !dbg !22
  %67 = getelementptr i8, ptr addrspace(3) %50, i32 1024, !dbg !22
  %68 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %67, i1 %49) #5, !dbg !22
  %69 = bitcast i32 %68 to float, !dbg !22
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 1, i32 31), !dbg !22
  %71 = bitcast i32 %70 to float, !dbg !22
  %72 = fadd float %69, %71, !dbg !27
  %73 = bitcast float %72 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %73, i1 %58) #5, !dbg !22
  %74 = getelementptr i8, ptr addrspace(3) %50, i32 1536, !dbg !22
  %75 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %74, i1 %49) #5, !dbg !22
  %76 = bitcast i32 %75 to float, !dbg !22
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 1, i32 31), !dbg !22
  %78 = bitcast i32 %77 to float, !dbg !22
  %79 = fadd float %76, %78, !dbg !27
  %80 = bitcast float %79 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %80, i1 %58) #5, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %81 = getelementptr float, ptr addrspace(3) @global_smem, i32 %29, !dbg !22
  %82 = load i32, ptr addrspace(3) %81, align 16, !dbg !22
  %83 = getelementptr float, ptr addrspace(3) @global_smem, i32 %34, !dbg !22
  %84 = load i32, ptr addrspace(3) %83, align 8, !dbg !22
  %85 = getelementptr float, ptr addrspace(3) @global_smem, i32 %39, !dbg !22
  %86 = load i32, ptr addrspace(3) %85, align 16, !dbg !22
  %87 = getelementptr float, ptr addrspace(3) @global_smem, i32 %44, !dbg !22
  %88 = load i32, ptr addrspace(3) %87, align 8, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %89 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !29
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %89, i32 %82, i32 %84, i32 %86, i32 %88, i1 true) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %90 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !29
  %91 = load float, ptr addrspace(3) %90, align 8, !dbg !29
  %92 = getelementptr inbounds i8, ptr addrspace(3) %90, i32 4, !dbg !29
  %93 = load float, ptr addrspace(3) %92, align 4, !dbg !29
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %91, float 1.920000e+02) #5, !dbg !30
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float 1.920000e+02) #5, !dbg !30
  %96 = fadd float %94, 0x3EB0C6F7A0000000, !dbg !31
  %97 = fadd float %95, 0x3EB0C6F7A0000000, !dbg !31
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %.not.i = icmp eq i32 %98, 0, !dbg !29
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %.not1.i = icmp eq i32 %99, 0, !dbg !29
  br i1 %.not.i, label %105, label %100, !dbg !29

100:                                              ; preds = %4
  br i1 %.not1.i, label %103, label %101, !dbg !29

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %96) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %96) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

105:                                              ; preds = %4
  br i1 %.not1.i, label %108, label %106, !dbg !29

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %96) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %96) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %101, %103, %106, %108
  %.0.i = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !29
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %.not.i2 = icmp eq i32 %110, 0, !dbg !29
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %.not1.i5 = icmp eq i32 %111, 0, !dbg !29
  br i1 %.not.i2, label %117, label %112, !dbg !29

112:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %115, label %113, !dbg !29

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %97) #5, !dbg !29
  br label %__nv_sqrtf.exit6, !dbg !29

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %97) #5, !dbg !29
  br label %__nv_sqrtf.exit6, !dbg !29

117:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %120, label %118, !dbg !29

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.f(float %97) #5, !dbg !29
  br label %__nv_sqrtf.exit6, !dbg !29

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.f(float %97) #5, !dbg !29
  br label %__nv_sqrtf.exit6, !dbg !29

__nv_sqrtf.exit6:                                 ; preds = %113, %115, %118, %120
  %.0.i4 = phi float [ %114, %113 ], [ %116, %115 ], [ %119, %118 ], [ %121, %120 ], !dbg !29
  %122 = or disjoint i32 %6, %12, !dbg !13
  %123 = icmp slt i32 %122, 256, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %124 = sext i32 %122 to i64, !dbg !33
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !33
  %126 = bitcast float %.0.i to i32, !dbg !34
  %127 = bitcast float %.0.i4 to i32, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %126, i32 %127, ptr addrspace(1) %125, i1 %123) #5, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjuwbkomysphcu54shc4s4f4p3emaxz5dv77f5blbfgwfaazxonb.py", directory: "inductor_cache/ju")
!4 = !{ptr @triton_per_fused_add_mean_pow_sqrt_sub_19, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mean_pow_sqrt_sub_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mean_pow_sqrt_sub_19", linkageName: "triton_per_fused_add_mean_pow_sqrt_sub_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 33, column: 47, scope: !7)
!19 = !DILocation(line: 33, column: 43, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 52, scope: !7)
!22 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = !DILocation(line: 36, column: 24, scope: !7)
!26 = !DILocation(line: 35, column: 33, scope: !7)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !25)
!28 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!29 = !DILocation(line: 41, column: 26, scope: !7)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 40, column: 18, scope: !7)
!32 = !DILocation(line: 42, column: 4, scope: !7)
!33 = !DILocation(line: 43, column: 28, scope: !7)
!34 = !DILocation(line: 43, column: 39, scope: !7)
!35 = !DILocation(line: 43, column: 4, scope: !7)
