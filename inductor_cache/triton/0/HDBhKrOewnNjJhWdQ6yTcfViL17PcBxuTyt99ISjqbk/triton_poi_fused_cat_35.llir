; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_35(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %.frozen = freeze i32 %14, !dbg !14
  %16 = sdiv i32 %.frozen, 1024, !dbg !14
  %.frozen44 = freeze i32 %15, !dbg !14
  %17 = sdiv i32 %.frozen44, 1024, !dbg !14
  %18 = srem i32 %16, 256, !dbg !15
  %19 = srem i32 %17, 256, !dbg !15
  %20 = mul i32 %16, 1024, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %21 = mul i32 %17, 1024, !dbg !16
  %.decomposed45 = sub i32 %.frozen44, %21, !dbg !16
  %.frozen46 = freeze i32 %14, !dbg !17
  %22 = sdiv i32 %.frozen46, 262144, !dbg !17
  %.frozen47 = freeze i32 %15, !dbg !17
  %23 = sdiv i32 %.frozen47, 262144, !dbg !17
  %24 = icmp slt i32 %18, 128, !dbg !18
  %25 = icmp slt i32 %19, 128, !dbg !18
  %26 = mul i32 %22, 262144, !dbg !19
  %srem.decomposed = sub i32 %.frozen46, %26, !dbg !19
  %27 = mul i32 %23, 262144, !dbg !19
  %srem1.decomposed = sub i32 %.frozen47, %27, !dbg !19
  %28 = shl nsw i32 %22, 17, !dbg !20
  %29 = shl nsw i32 %23, 17, !dbg !20
  %30 = add nsw i32 %28, %srem.decomposed, !dbg !21
  %31 = add nsw i32 %29, %srem1.decomposed, !dbg !21
  %32 = sext i32 %30 to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !22
  %34 = sext i32 %31 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !22
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #3, !dbg !23
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #3, !dbg !23
  %38 = icmp sgt i32 %18, 127, !dbg !24
  %39 = icmp sgt i32 %19, 127, !dbg !24
  %40 = add nsw i32 %18, -128, !dbg !25
  %41 = add nsw i32 %19, -128, !dbg !25
  %42 = shl nsw i32 %40, 10, !dbg !26
  %43 = shl nsw i32 %41, 10, !dbg !26
  %44 = add nsw i32 %28, %.decomposed, !dbg !27
  %45 = add nsw i32 %44, %42, !dbg !28
  %46 = add nsw i32 %29, %.decomposed45, !dbg !27
  %47 = add nsw i32 %46, %43, !dbg !28
  %48 = sext i32 %45 to i64, !dbg !29
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !29
  %50 = sext i32 %47 to i64, !dbg !29
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !29
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #3, !dbg !30
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !30
  %54 = sext i32 %40 to i64, !dbg !31
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !31
  %56 = sext i32 %41 to i64, !dbg !31
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !31
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %38, i32 0, i1 %38) #3, !dbg !32
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %38, i32 0, i1 %38) #3, !dbg !32
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %38, i32 0, i1 %38) #3, !dbg !32
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %38, i32 0, i1 %38) #3, !dbg !32
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %39, i32 0, i1 %39) #3, !dbg !32
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %39, i32 0, i1 %39) #3, !dbg !32
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %39, i32 0, i1 %39) #3, !dbg !32
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %39, i32 0, i1 %39) #3, !dbg !32
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !33
  %67 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !33
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %38, i32 0, i1 %38) #3, !dbg !34
  %69 = bitcast i32 %68 to float, !dbg !34
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %38, i32 0, i1 %38) #3, !dbg !34
  %71 = bitcast i32 %70 to float, !dbg !34
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %38, i32 0, i1 %38) #3, !dbg !34
  %73 = bitcast i32 %72 to float, !dbg !34
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %38, i32 0, i1 %38) #3, !dbg !34
  %75 = bitcast i32 %74 to float, !dbg !34
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %39, i32 0, i1 %39) #3, !dbg !34
  %77 = bitcast i32 %76 to float, !dbg !34
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %39, i32 0, i1 %39) #3, !dbg !34
  %79 = bitcast i32 %78 to float, !dbg !34
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %39, i32 0, i1 %39) #3, !dbg !34
  %81 = bitcast i32 %80 to float, !dbg !34
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %39, i32 0, i1 %39) #3, !dbg !34
  %83 = bitcast i32 %82 to float, !dbg !34
  %84 = fadd float %69, 0x3EE4F8B580000000, !dbg !35
  %85 = fadd float %71, 0x3EE4F8B580000000, !dbg !35
  %86 = fadd float %73, 0x3EE4F8B580000000, !dbg !35
  %87 = fadd float %75, 0x3EE4F8B580000000, !dbg !35
  %88 = fadd float %77, 0x3EE4F8B580000000, !dbg !35
  %89 = fadd float %79, 0x3EE4F8B580000000, !dbg !35
  %90 = fadd float %81, 0x3EE4F8B580000000, !dbg !35
  %91 = fadd float %83, 0x3EE4F8B580000000, !dbg !35
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %92, 0, !dbg !36
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %93, 0, !dbg !36
  br i1 %.not.i, label %99, label %94, !dbg !36

94:                                               ; preds = %8
  br i1 %.not1.i, label %97, label %95, !dbg !36

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

99:                                               ; preds = %8
  br i1 %.not1.i, label %102, label %100, !dbg !36

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %95, %97, %100, %102
  %.0.i = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !36
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i2 = icmp eq i32 %104, 0, !dbg !36
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i5 = icmp eq i32 %105, 0, !dbg !36
  br i1 %.not.i2, label %111, label %106, !dbg !36

106:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %109, label %107, !dbg !36

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #3, !dbg !36
  br label %__nv_sqrtf.exit6, !dbg !36

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #3, !dbg !36
  br label %__nv_sqrtf.exit6, !dbg !36

111:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %114, label %112, !dbg !36

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #3, !dbg !36
  br label %__nv_sqrtf.exit6, !dbg !36

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #3, !dbg !36
  br label %__nv_sqrtf.exit6, !dbg !36

__nv_sqrtf.exit6:                                 ; preds = %107, %109, %112, %114
  %.0.i4 = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !36
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i7 = icmp eq i32 %116, 0, !dbg !36
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i10 = icmp eq i32 %117, 0, !dbg !36
  br i1 %.not.i7, label %123, label %118, !dbg !36

118:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %121, label %119, !dbg !36

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #3, !dbg !36
  br label %__nv_sqrtf.exit11, !dbg !36

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #3, !dbg !36
  br label %__nv_sqrtf.exit11, !dbg !36

123:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %126, label %124, !dbg !36

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #3, !dbg !36
  br label %__nv_sqrtf.exit11, !dbg !36

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #3, !dbg !36
  br label %__nv_sqrtf.exit11, !dbg !36

__nv_sqrtf.exit11:                                ; preds = %119, %121, %124, %126
  %.0.i9 = phi float [ %120, %119 ], [ %122, %121 ], [ %125, %124 ], [ %127, %126 ], !dbg !36
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i12 = icmp eq i32 %128, 0, !dbg !36
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i15 = icmp eq i32 %129, 0, !dbg !36
  br i1 %.not.i12, label %135, label %130, !dbg !36

130:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %133, label %131, !dbg !36

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #3, !dbg !36
  br label %__nv_sqrtf.exit16, !dbg !36

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #3, !dbg !36
  br label %__nv_sqrtf.exit16, !dbg !36

135:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %138, label %136, !dbg !36

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #3, !dbg !36
  br label %__nv_sqrtf.exit16, !dbg !36

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #3, !dbg !36
  br label %__nv_sqrtf.exit16, !dbg !36

__nv_sqrtf.exit16:                                ; preds = %131, %133, %136, %138
  %.0.i14 = phi float [ %132, %131 ], [ %134, %133 ], [ %137, %136 ], [ %139, %138 ], !dbg !36
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i17 = icmp eq i32 %140, 0, !dbg !36
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i20 = icmp eq i32 %141, 0, !dbg !36
  br i1 %.not.i17, label %147, label %142, !dbg !36

142:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %145, label %143, !dbg !36

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !36
  br label %__nv_sqrtf.exit21, !dbg !36

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !36
  br label %__nv_sqrtf.exit21, !dbg !36

147:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %150, label %148, !dbg !36

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !36
  br label %__nv_sqrtf.exit21, !dbg !36

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !36
  br label %__nv_sqrtf.exit21, !dbg !36

__nv_sqrtf.exit21:                                ; preds = %143, %145, %148, %150
  %.0.i19 = phi float [ %144, %143 ], [ %146, %145 ], [ %149, %148 ], [ %151, %150 ], !dbg !36
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i22 = icmp eq i32 %152, 0, !dbg !36
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i25 = icmp eq i32 %153, 0, !dbg !36
  br i1 %.not.i22, label %159, label %154, !dbg !36

154:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %157, label %155, !dbg !36

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %89) #3, !dbg !36
  br label %__nv_sqrtf.exit26, !dbg !36

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %89) #3, !dbg !36
  br label %__nv_sqrtf.exit26, !dbg !36

159:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %162, label %160, !dbg !36

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.f(float %89) #3, !dbg !36
  br label %__nv_sqrtf.exit26, !dbg !36

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.f(float %89) #3, !dbg !36
  br label %__nv_sqrtf.exit26, !dbg !36

__nv_sqrtf.exit26:                                ; preds = %155, %157, %160, %162
  %.0.i24 = phi float [ %156, %155 ], [ %158, %157 ], [ %161, %160 ], [ %163, %162 ], !dbg !36
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i27 = icmp eq i32 %164, 0, !dbg !36
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i30 = icmp eq i32 %165, 0, !dbg !36
  br i1 %.not.i27, label %171, label %166, !dbg !36

166:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %169, label %167, !dbg !36

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #3, !dbg !36
  br label %__nv_sqrtf.exit31, !dbg !36

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #3, !dbg !36
  br label %__nv_sqrtf.exit31, !dbg !36

171:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %174, label %172, !dbg !36

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #3, !dbg !36
  br label %__nv_sqrtf.exit31, !dbg !36

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #3, !dbg !36
  br label %__nv_sqrtf.exit31, !dbg !36

__nv_sqrtf.exit31:                                ; preds = %167, %169, %172, %174
  %.0.i29 = phi float [ %168, %167 ], [ %170, %169 ], [ %173, %172 ], [ %175, %174 ], !dbg !36
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i32 = icmp eq i32 %176, 0, !dbg !36
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i35 = icmp eq i32 %177, 0, !dbg !36
  br i1 %.not.i32, label %183, label %178, !dbg !36

178:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %181, label %179, !dbg !36

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !36
  br label %__nv_sqrtf.exit36, !dbg !36

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !36
  br label %__nv_sqrtf.exit36, !dbg !36

183:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %186, label %184, !dbg !36

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !36
  br label %__nv_sqrtf.exit36, !dbg !36

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !36
  br label %__nv_sqrtf.exit36, !dbg !36

__nv_sqrtf.exit36:                                ; preds = %179, %181, %184, %186
  %.0.i34 = phi float [ %180, %179 ], [ %182, %181 ], [ %185, %184 ], [ %187, %186 ], !dbg !36
  %188 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !30
  %189 = insertelement <8 x i32> poison, i32 %65, i64 0, !dbg !32
  %190 = insertelement <8 x i32> %189, i32 %64, i64 1, !dbg !32
  %191 = insertelement <8 x i32> %190, i32 %63, i64 2, !dbg !32
  %192 = insertelement <8 x i32> %191, i32 %62, i64 3, !dbg !32
  %193 = insertelement <8 x i32> %192, i32 %61, i64 4, !dbg !32
  %194 = insertelement <8 x i32> %193, i32 %60, i64 5, !dbg !32
  %195 = insertelement <8 x i32> %194, i32 %59, i64 6, !dbg !32
  %196 = insertelement <8 x i32> %195, i32 %58, i64 7, !dbg !32
  %197 = bitcast <8 x i32> %196 to <8 x float>, !dbg !32
  %198 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !30
  %199 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !30
  %200 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !30
  %201 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !30
  %202 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !30
  %203 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !30
  %204 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !30
  %205 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !23
  %206 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !23
  %207 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !23
  %208 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !23
  %209 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %210 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %211 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %212 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !37
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i9) #3, !dbg !37
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #3, !dbg !37
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i19) #3, !dbg !37
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i24) #3, !dbg !37
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i29) #3, !dbg !37
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i34) #3, !dbg !37
  %221 = getelementptr float, ptr addrspace(1) %4, i64 %54, !dbg !38
  %222 = getelementptr float, ptr addrspace(1) %4, i64 %56, !dbg !38
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %221, i1 %38, i32 0, i1 %38) #3, !dbg !39
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %221, i1 %38, i32 0, i1 %38) #3, !dbg !39
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %221, i1 %38, i32 0, i1 %38) #3, !dbg !39
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %221, i1 %38, i32 0, i1 %38) #3, !dbg !39
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %222, i1 %39, i32 0, i1 %39) #3, !dbg !39
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %222, i1 %39, i32 0, i1 %39) #3, !dbg !39
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %222, i1 %39, i32 0, i1 %39) #3, !dbg !39
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %222, i1 %39, i32 0, i1 %39) #3, !dbg !39
  %231 = getelementptr float, ptr addrspace(1) %5, i64 %54, !dbg !40
  %232 = getelementptr float, ptr addrspace(1) %5, i64 %56, !dbg !40
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %231, i1 %38, i32 0, i1 %38) #3, !dbg !41
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %231, i1 %38, i32 0, i1 %38) #3, !dbg !41
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %231, i1 %38, i32 0, i1 %38) #3, !dbg !41
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %231, i1 %38, i32 0, i1 %38) #3, !dbg !41
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %232, i1 %39, i32 0, i1 %39) #3, !dbg !41
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %232, i1 %39, i32 0, i1 %39) #3, !dbg !41
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %232, i1 %39, i32 0, i1 %39) #3, !dbg !41
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %232, i1 %39, i32 0, i1 %39) #3, !dbg !41
  %241 = insertelement <8 x i32> poison, i32 %188, i64 0, !dbg !30
  %242 = insertelement <8 x i32> %241, i32 %198, i64 1, !dbg !30
  %243 = insertelement <8 x i32> %242, i32 %199, i64 2, !dbg !30
  %244 = insertelement <8 x i32> %243, i32 %200, i64 3, !dbg !30
  %245 = insertelement <8 x i32> %244, i32 %201, i64 4, !dbg !30
  %246 = insertelement <8 x i32> %245, i32 %202, i64 5, !dbg !30
  %247 = insertelement <8 x i32> %246, i32 %203, i64 6, !dbg !30
  %248 = insertelement <8 x i32> %247, i32 %204, i64 7, !dbg !30
  %249 = bitcast <8 x i32> %248 to <8 x float>, !dbg !30
  %250 = fsub <8 x float> %249, %197, !dbg !42
  %251 = insertelement <8 x float> poison, float %220, i64 0, !dbg !43
  %252 = insertelement <8 x float> %251, float %219, i64 1, !dbg !43
  %253 = insertelement <8 x float> %252, float %218, i64 2, !dbg !43
  %254 = insertelement <8 x float> %253, float %217, i64 3, !dbg !43
  %255 = insertelement <8 x float> %254, float %216, i64 4, !dbg !43
  %256 = insertelement <8 x float> %255, float %215, i64 5, !dbg !43
  %257 = insertelement <8 x float> %256, float %214, i64 6, !dbg !43
  %258 = insertelement <8 x float> %257, float %213, i64 7, !dbg !43
  %259 = fmul <8 x float> %250, %258, !dbg !43
  %260 = insertelement <8 x i32> poison, i32 %230, i64 0, !dbg !39
  %261 = insertelement <8 x i32> %260, i32 %229, i64 1, !dbg !39
  %262 = insertelement <8 x i32> %261, i32 %228, i64 2, !dbg !39
  %263 = insertelement <8 x i32> %262, i32 %227, i64 3, !dbg !39
  %264 = insertelement <8 x i32> %263, i32 %226, i64 4, !dbg !39
  %265 = insertelement <8 x i32> %264, i32 %225, i64 5, !dbg !39
  %266 = insertelement <8 x i32> %265, i32 %224, i64 6, !dbg !39
  %267 = insertelement <8 x i32> %266, i32 %223, i64 7, !dbg !39
  %268 = bitcast <8 x i32> %267 to <8 x float>, !dbg !39
  %269 = fmul <8 x float> %259, %268, !dbg !44
  %270 = insertelement <8 x i32> poison, i32 %240, i64 0, !dbg !41
  %271 = insertelement <8 x i32> %270, i32 %239, i64 1, !dbg !41
  %272 = insertelement <8 x i32> %271, i32 %238, i64 2, !dbg !41
  %273 = insertelement <8 x i32> %272, i32 %237, i64 3, !dbg !41
  %274 = insertelement <8 x i32> %273, i32 %236, i64 4, !dbg !41
  %275 = insertelement <8 x i32> %274, i32 %235, i64 5, !dbg !41
  %276 = insertelement <8 x i32> %275, i32 %234, i64 6, !dbg !41
  %277 = insertelement <8 x i32> %276, i32 %233, i64 7, !dbg !41
  %278 = bitcast <8 x i32> %277 to <8 x float>, !dbg !41
  %279 = fadd <8 x float> %269, %278, !dbg !45
  %280 = fcmp olt <8 x float> %279, zeroinitializer, !dbg !46
  %281 = extractelement <8 x i1> %280, i64 7, !dbg !50
  %282 = extractelement <8 x i1> %280, i64 6, !dbg !50
  %283 = extractelement <8 x i1> %280, i64 5, !dbg !50
  %284 = extractelement <8 x i1> %280, i64 4, !dbg !50
  %285 = extractelement <8 x i1> %280, i64 3, !dbg !50
  %286 = extractelement <8 x i1> %280, i64 2, !dbg !50
  %287 = extractelement <8 x i1> %280, i64 1, !dbg !50
  %288 = extractelement <8 x i1> %280, i64 0, !dbg !50
  %289 = sext i32 %14 to i64, !dbg !51
  %290 = getelementptr float, ptr addrspace(1) %6, i64 %289, !dbg !51
  %291 = sext i32 %15 to i64, !dbg !51
  %292 = getelementptr float, ptr addrspace(1) %6, i64 %291, !dbg !51
  %bc = bitcast <8 x float> %279 to <8 x i32>, !dbg !52
  %293 = extractelement <8 x i32> %bc, i64 7, !dbg !52
  %294 = select i1 %281, i32 0, i32 %293, !dbg !50
  %295 = select i1 %24, i32 %212, i32 %294, !dbg !53
  %bc37 = bitcast <8 x float> %279 to <8 x i32>, !dbg !52
  %296 = extractelement <8 x i32> %bc37, i64 6, !dbg !52
  %297 = select i1 %282, i32 0, i32 %296, !dbg !50
  %298 = select i1 %24, i32 %211, i32 %297, !dbg !53
  %bc38 = bitcast <8 x float> %279 to <8 x i32>, !dbg !52
  %299 = extractelement <8 x i32> %bc38, i64 5, !dbg !52
  %300 = select i1 %283, i32 0, i32 %299, !dbg !50
  %301 = select i1 %24, i32 %210, i32 %300, !dbg !53
  %bc39 = bitcast <8 x float> %279 to <8 x i32>, !dbg !52
  %302 = extractelement <8 x i32> %bc39, i64 4, !dbg !52
  %303 = select i1 %284, i32 0, i32 %302, !dbg !50
  %304 = select i1 %24, i32 %209, i32 %303, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %295, i32 %298, i32 %301, i32 %304, ptr addrspace(1) %290, i1 true) #3, !dbg !52
  %bc40 = bitcast <8 x float> %279 to <8 x i32>, !dbg !52
  %305 = extractelement <8 x i32> %bc40, i64 3, !dbg !52
  %306 = select i1 %285, i32 0, i32 %305, !dbg !50
  %307 = select i1 %25, i32 %208, i32 %306, !dbg !53
  %bc41 = bitcast <8 x float> %279 to <8 x i32>, !dbg !52
  %308 = extractelement <8 x i32> %bc41, i64 2, !dbg !52
  %309 = select i1 %286, i32 0, i32 %308, !dbg !50
  %310 = select i1 %25, i32 %207, i32 %309, !dbg !53
  %bc42 = bitcast <8 x float> %279 to <8 x i32>, !dbg !52
  %311 = extractelement <8 x i32> %bc42, i64 1, !dbg !52
  %312 = select i1 %287, i32 0, i32 %311, !dbg !50
  %313 = select i1 %25, i32 %206, i32 %312, !dbg !53
  %bc43 = bitcast <8 x float> %279 to <8 x i32>, !dbg !52
  %314 = extractelement <8 x i32> %bc43, i64 0, !dbg !52
  %315 = select i1 %288, i32 0, i32 %314, !dbg !50
  %316 = select i1 %25, i32 %205, i32 %315, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %307, i32 %310, i32 %313, i32 %316, ptr addrspace(1) %292, i1 true) #3, !dbg !52
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr4lwjohc6nop6tkmnrgtumbaqcagvkrhcwcdwxubff4tllnmfkd.py", directory: "inductor_cache/r4")
!4 = !{ptr @triton_poi_fused_cat_35, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_35, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_35", linkageName: "triton_poi_fused_cat_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 54, scope: !7)
!21 = !DILocation(line: 33, column: 47, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 59, scope: !7)
!24 = !DILocation(line: 34, column: 19, scope: !7)
!25 = !DILocation(line: 37, column: 50, scope: !7)
!26 = !DILocation(line: 37, column: 41, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 56, scope: !7)
!29 = !DILocation(line: 37, column: 30, scope: !7)
!30 = !DILocation(line: 37, column: 68, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 45, scope: !7)
!33 = !DILocation(line: 40, column: 31, scope: !7)
!34 = !DILocation(line: 40, column: 45, scope: !7)
!35 = !DILocation(line: 42, column: 20, scope: !7)
!36 = !DILocation(line: 43, column: 27, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 49, column: 31, scope: !7)
!39 = !DILocation(line: 49, column: 45, scope: !7)
!40 = !DILocation(line: 51, column: 31, scope: !7)
!41 = !DILocation(line: 51, column: 45, scope: !7)
!42 = !DILocation(line: 39, column: 19, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 50, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 20, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 54, column: 42, scope: !7)
!50 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 58, column: 25, scope: !7)
!52 = !DILocation(line: 58, column: 37, scope: !7)
!53 = !DILocation(line: 57, column: 33, scope: !7)
!54 = !DILocation(line: 58, column: 4, scope: !7)
