; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_copy_mul_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 254, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 256, !dbg !14
  %14 = srem i32 %12, 4, !dbg !15
  %15 = sext i32 %12 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %4, i64 %15, !dbg !16
  %17 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %16, i1 %13) #1, !dbg !17
  %18 = icmp slt i32 %14, 2, !dbg !18
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !19
  %20 = and i1 %13, %18, !dbg !20
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %19, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #1, !dbg !21
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !21
  %23 = extractvalue { i32, i32 } %21, 1, !dbg !21
  %24 = sext i32 %14 to i64, !dbg !22
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !22
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %25, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #1, !dbg !23
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !23
  %28 = extractvalue { i32, i32 } %26, 1, !dbg !23
  %29 = add i32 %12, 2, !dbg !24
  %30 = sext i32 %29 to i64, !dbg !25
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !25
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %31, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #1, !dbg !26
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !26
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !27
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #1, !dbg !28
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !28
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !28
  %39 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !21
  %40 = insertelement <2 x i32> %39, i32 %33, i64 1, !dbg !21
  %41 = bitcast <2 x i32> %40 to <2 x float>, !dbg !21
  %42 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !23
  %43 = insertelement <2 x i32> %42, i32 %37, i64 1, !dbg !23
  %44 = bitcast <2 x i32> %43 to <2 x float>, !dbg !23
  %45 = fmul <2 x float> %41, %44, !dbg !29
  %46 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !21
  %47 = insertelement <2 x i32> %46, i32 %34, i64 1, !dbg !21
  %48 = bitcast <2 x i32> %47 to <2 x float>, !dbg !21
  %49 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !23
  %50 = insertelement <2 x i32> %49, i32 %38, i64 1, !dbg !23
  %51 = bitcast <2 x i32> %50 to <2 x float>, !dbg !23
  %52 = fmul <2 x float> %48, %51, !dbg !29
  %shift = shufflevector <2 x float> %45, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %53 = fsub <2 x float> %45, %shift, !dbg !30
  %54 = extractelement <2 x float> %53, i64 0, !dbg !30
  %shift1 = shufflevector <2 x float> %52, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %55 = fsub <2 x float> %52, %shift1, !dbg !30
  %56 = extractelement <2 x float> %55, i64 0, !dbg !30
  %57 = icmp sgt i32 %14, 1, !dbg !31
  %58 = add i32 %12, -2, !dbg !32
  %59 = sext i32 %58 to i64, !dbg !33
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !33
  %61 = and i1 %13, %57, !dbg !34
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 %61, i32 0, i1 %61, i32 0, i1 %61) #1, !dbg !35
  %63 = extractvalue { i32, i32 } %62, 0, !dbg !35
  %64 = extractvalue { i32, i32 } %62, 1, !dbg !35
  %65 = add nsw i32 %14, -2, !dbg !36
  %66 = sext i32 %65 to i64, !dbg !37
  %67 = getelementptr float, ptr addrspace(1) %3, i64 %66, !dbg !37
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %67, i1 %61, i32 0, i1 %61, i32 0, i1 %61) #1, !dbg !38
  %69 = extractvalue { i32, i32 } %68, 0, !dbg !38
  %70 = extractvalue { i32, i32 } %68, 1, !dbg !38
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %19, i1 %61, i32 0, i1 %61, i32 0, i1 %61) #1, !dbg !39
  %72 = extractvalue { i32, i32 } %71, 0, !dbg !39
  %73 = extractvalue { i32, i32 } %71, 1, !dbg !39
  %74 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !40
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %74, i1 %61, i32 0, i1 %61, i32 0, i1 %61) #1, !dbg !41
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !41
  %77 = extractvalue { i32, i32 } %75, 1, !dbg !41
  %78 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !35
  %79 = insertelement <2 x i32> %78, i32 %72, i64 1, !dbg !35
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !35
  %81 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !38
  %82 = insertelement <2 x i32> %81, i32 %76, i64 1, !dbg !38
  %83 = bitcast <2 x i32> %82 to <2 x float>, !dbg !38
  %84 = fmul <2 x float> %80, %83, !dbg !42
  %85 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !35
  %86 = insertelement <2 x i32> %85, i32 %73, i64 1, !dbg !35
  %87 = bitcast <2 x i32> %86 to <2 x float>, !dbg !35
  %88 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !38
  %89 = insertelement <2 x i32> %88, i32 %77, i64 1, !dbg !38
  %90 = bitcast <2 x i32> %89 to <2 x float>, !dbg !38
  %91 = fmul <2 x float> %87, %90, !dbg !42
  %shift2 = shufflevector <2 x float> %84, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !43
  %92 = fadd <2 x float> %84, %shift2, !dbg !43
  %93 = extractelement <2 x float> %92, i64 0, !dbg !43
  %shift3 = shufflevector <2 x float> %91, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !43
  %94 = fadd <2 x float> %91, %shift3, !dbg !43
  %95 = extractelement <2 x float> %94, i64 0, !dbg !43
  %96 = select i1 %57, float %93, float %54, !dbg !44
  %97 = select i1 %57, float %95, float %56, !dbg !44
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !45
  %99 = bitcast float %96 to i32, !dbg !46
  %100 = bitcast float %97 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %99, i32 %100, ptr addrspace(1) %98, i1 %13) #1, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clugbei4rtvtwlpgn6j52cmjzgqdydeq3hk4zqg44oltpyb5obfq.py", directory: "inductor_cache/lu")
!4 = !{ptr @triton_poi_fused_add_copy_mul_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_copy_mul_sub_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_copy_mul_sub_0", linkageName: "triton_poi_fused_add_copy_mul_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 31, scope: !7)
!17 = !DILocation(line: 26, column: 36, scope: !7)
!18 = !DILocation(line: 29, column: 18, scope: !7)
!19 = !DILocation(line: 30, column: 30, scope: !7)
!20 = !DILocation(line: 30, column: 42, scope: !7)
!21 = !DILocation(line: 30, column: 35, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 33, column: 34, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 39, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 32, column: 18, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 40, column: 20, scope: !7)
!32 = !DILocation(line: 41, column: 38, scope: !7)
!33 = !DILocation(line: 41, column: 31, scope: !7)
!34 = !DILocation(line: 41, column: 51, scope: !7)
!35 = !DILocation(line: 41, column: 43, scope: !7)
!36 = !DILocation(line: 42, column: 38, scope: !7)
!37 = !DILocation(line: 42, column: 31, scope: !7)
!38 = !DILocation(line: 42, column: 43, scope: !7)
!39 = !DILocation(line: 44, column: 36, scope: !7)
!40 = !DILocation(line: 45, column: 31, scope: !7)
!41 = !DILocation(line: 45, column: 43, scope: !7)
!42 = !DILocation(line: 43, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 0, scope: !7)
!45 = !DILocation(line: 51, column: 28, scope: !7)
!46 = !DILocation(line: 51, column: 40, scope: !7)
!47 = !DILocation(line: 51, column: 4, scope: !7)
