#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":19:0)
#loc1 = loc(unknown)
#loc16 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":36:24)
#loc24 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":43:26)
#loc45 = loc(callsite(#loc1 at #loc16))
#loc48 = loc(callsite(#loc1 at #loc24))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__weight_norm_interface_clamp_min_div_linalg_vector_norm_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":19:0), %arg6: i32 loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":19:0), %arg7: i32 loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<12> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked> loc(#loc1)
    %c12_i32 = arith.constant 12 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<9.99999996E-13> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<12> : tensor<1x16xi32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c4_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc4)
    %6 = arith.cmpi slt, %4, %cst : tensor<1x16xi32, #blocked> loc(#loc5)
    %7 = arith.cmpi slt, %5, %cst_3 : tensor<1x16xi32, #blocked1> loc(#loc5)
    %8 = arith.muli %0, %c12_i32 : i32 loc(#loc6)
    %9 = tt.splat %8 : i32 -> tensor<1x16xi32, #blocked> loc(#loc7)
    %10 = tt.splat %8 : i32 -> tensor<1x16xi32, #blocked1> loc(#loc7)
    %11 = arith.addi %4, %9 : tensor<1x16xi32, #blocked> loc(#loc7)
    %12 = arith.addi %5, %10 : tensor<1x16xi32, #blocked1> loc(#loc7)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc8)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %15 = tt.addptr %13, %11 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc8)
    %16 = tt.addptr %14, %12 : tensor<1x16x!tt.ptr<f32>, #blocked1>, tensor<1x16xi32, #blocked1> loc(#loc8)
    %17 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked> loc(#loc9)
    %18 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked1> loc(#loc9)
    %19 = arith.andi %6, %17 : tensor<1x16xi1, #blocked> loc(#loc9)
    %20 = arith.andi %7, %18 : tensor<1x16xi1, #blocked1> loc(#loc9)
    %21 = tt.load %15, %19, %cst_0 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc10)
    %22 = tt.load %16, %20, %cst_2 : tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %23 = tt.addptr %arg3, %0 : !tt.ptr<f32>, i32 loc(#loc11)
    %24 = tt.splat %23 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc12)
    %25 = tt.splat %23 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc12)
    %26 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc12)
    %27 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc12)
    %28 = tt.load %24, %26 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc12)
    %29 = tt.load %25, %27 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc12)
    %30 = arith.mulf %21, %21 : tensor<1x16xf32, #blocked> loc(#loc13)
    %31 = arith.mulf %22, %22 : tensor<1x16xf32, #blocked1> loc(#loc13)
    %32 = arith.select %19, %30, %cst_0 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc14)
    %33 = arith.select %20, %31, %cst_2 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc14)
    %34 = "tt.reduce"(%32) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc16)), %arg9: f32 loc(callsite(#loc1 at #loc16))):
      %70 = arith.addf %arg8, %arg9 : f32 loc(#loc53)
      tt.reduce.return %70 : f32 loc(#loc44)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc44)
    %35 = "tt.reduce"(%33) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc16)), %arg9: f32 loc(callsite(#loc1 at #loc16))):
      %70 = arith.addf %arg8, %arg9 : f32 loc(#loc53)
      tt.reduce.return %70 : f32 loc(#loc44)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc44)
    %36 = tt.expand_dims %34 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc18)
    %37 = tt.expand_dims %35 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc18)
    %38 = tt.extern_elementwise %36 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc19)
    %39 = tt.extern_elementwise %37 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc19)
    %40 = arith.divf %28, %38 : tensor<1x1xf32, #blocked> loc(#loc20)
    %41 = arith.divf %29, %39 : tensor<1x1xf32, #blocked1> loc(#loc20)
    %42 = tt.broadcast %40 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc21)
    %43 = tt.broadcast %41 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc21)
    %44 = arith.mulf %21, %42 : tensor<1x16xf32, #blocked> loc(#loc21)
    %45 = arith.mulf %22, %43 : tensor<1x16xf32, #blocked1> loc(#loc21)
    %46 = arith.mulf %44, %44 : tensor<1x16xf32, #blocked> loc(#loc22)
    %47 = arith.mulf %45, %45 : tensor<1x16xf32, #blocked1> loc(#loc22)
    %48 = arith.select %19, %46, %cst_0 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc23)
    %49 = arith.select %20, %47, %cst_2 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc23)
    %50 = "tt.reduce"(%48) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc24)), %arg9: f32 loc(callsite(#loc1 at #loc24))):
      %70 = arith.addf %arg8, %arg9 : f32 loc(#loc54)
      tt.reduce.return %70 : f32 loc(#loc47)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc47)
    %51 = "tt.reduce"(%49) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc24)), %arg9: f32 loc(callsite(#loc1 at #loc24))):
      %70 = arith.addf %arg8, %arg9 : f32 loc(#loc54)
      tt.reduce.return %70 : f32 loc(#loc47)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc47)
    %52 = tt.expand_dims %50 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc25)
    %53 = tt.expand_dims %51 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc25)
    %54 = tt.extern_elementwise %52 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc26)
    %55 = tt.extern_elementwise %53 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc26)
    %56 = arith.cmpf ogt, %54, %cst_1 : tensor<1x1xf32, #blocked> loc(#loc49)
    %57 = arith.cmpf une, %54, %54 : tensor<1x1xf32, #blocked> loc(#loc50)
    %58 = arith.ori %56, %57 : tensor<1x1xi1, #blocked> loc(#loc51)
    %59 = arith.select %58, %54, %cst_1 : tensor<1x1xi1, #blocked>, tensor<1x1xf32, #blocked> loc(#loc52)
    %60 = tt.broadcast %59 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc32)
    %61 = arith.divf %44, %60 : tensor<1x16xf32, #blocked> loc(#loc32)
    gpu.barrier loc(#loc33)
    %62 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc34)
    %63 = tt.splat %62 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc35)
    tt.store %63, %39, %27 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc35)
    %64 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc36)
    %65 = tt.addptr %64, %11 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc36)
    tt.store %65, %44, %19 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc37)
    gpu.barrier loc(#loc38)
    %66 = tt.addptr %arg1, %0 : !tt.ptr<f32>, i32 loc(#loc39)
    %67 = tt.splat %66 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc40)
    tt.store %67, %55, %27 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc40)
    %68 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc41)
    %69 = tt.addptr %68, %11 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc41)
    tt.store %69, %61, %19 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc42)
    tt.return loc(#loc43)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":23:28)
#loc3 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":25:21)
#loc4 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":26:34)
#loc5 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":28:21)
#loc6 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":31:38)
#loc7 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":31:35)
#loc8 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":31:30)
#loc9 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":31:51)
#loc10 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":31:43)
#loc11 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":32:30)
#loc12 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":32:35)
#loc13 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":33:18)
#loc14 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":35:41)
#loc15 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc18 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":36:27)
#loc19 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":37:26)
#loc20 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":38:18)
#loc21 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":39:18)
#loc22 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":40:19)
#loc23 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":42:43)
#loc25 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":43:29)
#loc26 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":44:27)
#loc27 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc28 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":46:42)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc32 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":47:19)
#loc33 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":48:4)
#loc34 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":49:28)
#loc35 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":49:39)
#loc36 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":50:25)
#loc37 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":50:44)
#loc38 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":51:4)
#loc39 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":52:28)
#loc40 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":52:40)
#loc41 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":53:25)
#loc42 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":53:45)
#loc43 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":53:4)
#loc44 = loc(callsite(#loc15 at #loc16))
#loc46 = loc(callsite(#loc17 at #loc15))
#loc47 = loc(callsite(#loc15 at #loc24))
#loc49 = loc(callsite(#loc27 at #loc28))
#loc50 = loc(callsite(#loc29 at #loc28))
#loc51 = loc(callsite(#loc30 at #loc28))
#loc52 = loc(callsite(#loc31 at #loc28))
#loc53 = loc(callsite(#loc46 at #loc16))
#loc54 = loc(callsite(#loc46 at #loc24))
