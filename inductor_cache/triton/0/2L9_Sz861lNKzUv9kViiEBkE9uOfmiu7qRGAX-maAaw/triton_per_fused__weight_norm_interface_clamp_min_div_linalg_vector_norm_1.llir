; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__weight_norm_interface_clamp_min_div_linalg_vector_norm_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = icmp slt i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = icmp samesign ult i32 %12, 12, !dbg !13
  %14 = mul i32 %9, 12, !dbg !14
  %15 = add i32 %14, %12, !dbg !15
  %16 = sext i32 %15 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !16
  %18 = and i1 %13, %10, !dbg !17
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %18, i32 0, i1 %18) #5, !dbg !18
  %20 = bitcast i32 %19 to float, !dbg !18
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %18, i32 0, i1 %18) #5, !dbg !18
  %22 = bitcast i32 %21 to float, !dbg !18
  %23 = sext i32 %9 to i64, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %10) #5, !dbg !20
  %26 = bitcast i32 %25 to float, !dbg !20
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %10) #5, !dbg !20
  %28 = bitcast i32 %27 to float, !dbg !20
  %29 = fmul float %20, %20, !dbg !21
  %30 = fmul float %22, %22, !dbg !21
  %31 = select i1 %18, float %29, float 0.000000e+00, !dbg !22
  %32 = select i1 %18, float %30, float 0.000000e+00, !dbg !22
  %33 = bitcast float %31 to i32, !dbg !23
  %34 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %33, i32 8, i32 31), !dbg !23
  %35 = bitcast i32 %34 to float, !dbg !23
  %36 = fadd float %31, %35, !dbg !27
  %37 = bitcast float %36 to i32, !dbg !23
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 4, i32 31), !dbg !23
  %39 = bitcast i32 %38 to float, !dbg !23
  %40 = fadd float %36, %39, !dbg !27
  %41 = bitcast float %40 to i32, !dbg !23
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 2, i32 31), !dbg !23
  %43 = bitcast i32 %42 to float, !dbg !23
  %44 = fadd float %40, %43, !dbg !27
  %45 = bitcast float %44 to i32, !dbg !23
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 1, i32 31), !dbg !23
  %47 = bitcast i32 %46 to float, !dbg !23
  %48 = fadd float %44, %47, !dbg !27
  %49 = bitcast float %32 to i32, !dbg !23
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 8, i32 31), !dbg !23
  %51 = bitcast i32 %50 to float, !dbg !23
  %52 = fadd float %32, %51, !dbg !27
  %53 = bitcast float %52 to i32, !dbg !23
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 4, i32 31), !dbg !23
  %55 = bitcast i32 %54 to float, !dbg !23
  %56 = fadd float %52, %55, !dbg !27
  %57 = bitcast float %56 to i32, !dbg !23
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 2, i32 31), !dbg !23
  %59 = bitcast i32 %58 to float, !dbg !23
  %60 = fadd float %56, %59, !dbg !27
  %61 = bitcast float %60 to i32, !dbg !23
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 1, i32 31), !dbg !23
  %63 = bitcast i32 %62 to float, !dbg !23
  %64 = fadd float %60, %63, !dbg !27
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %.not.i = icmp eq i32 %65, 0, !dbg !29
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %.not1.i = icmp eq i32 %66, 0, !dbg !29
  br i1 %.not.i, label %72, label %67, !dbg !29

67:                                               ; preds = %8
  br i1 %.not1.i, label %70, label %68, !dbg !29

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

72:                                               ; preds = %8
  br i1 %.not1.i, label %75, label %73, !dbg !29

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %68, %70, %73, %75
  %.0.i = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !29
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %.not.i1 = icmp eq i32 %77, 0, !dbg !29
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %.not1.i4 = icmp eq i32 %78, 0, !dbg !29
  br i1 %.not.i1, label %84, label %79, !dbg !29

79:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %82, label %80, !dbg !29

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #5, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #5, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

84:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %87, label %85, !dbg !29

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #5, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #5, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

__nv_sqrtf.exit5:                                 ; preds = %80, %82, %85, %87
  %.0.i3 = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !29
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %26, float %.0.i) #5, !dbg !30
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %28, float %.0.i3) #5, !dbg !30
  %91 = fmul float %89, %20, !dbg !31
  %92 = fmul float %90, %22, !dbg !31
  %93 = fmul float %91, %91, !dbg !32
  %94 = fmul float %92, %92, !dbg !32
  %95 = select i1 %18, float %93, float 0.000000e+00, !dbg !33
  %96 = select i1 %18, float %94, float 0.000000e+00, !dbg !33
  %97 = bitcast float %95 to i32, !dbg !34
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 8, i32 31), !dbg !34
  %99 = bitcast i32 %98 to float, !dbg !34
  %100 = fadd float %95, %99, !dbg !36
  %101 = bitcast float %100 to i32, !dbg !34
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 4, i32 31), !dbg !34
  %103 = bitcast i32 %102 to float, !dbg !34
  %104 = fadd float %100, %103, !dbg !36
  %105 = bitcast float %104 to i32, !dbg !34
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 2, i32 31), !dbg !34
  %107 = bitcast i32 %106 to float, !dbg !34
  %108 = fadd float %104, %107, !dbg !36
  %109 = bitcast float %108 to i32, !dbg !34
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 1, i32 31), !dbg !34
  %111 = bitcast i32 %110 to float, !dbg !34
  %112 = fadd float %108, %111, !dbg !36
  %113 = bitcast float %96 to i32, !dbg !34
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 8, i32 31), !dbg !34
  %115 = bitcast i32 %114 to float, !dbg !34
  %116 = fadd float %96, %115, !dbg !36
  %117 = bitcast float %116 to i32, !dbg !34
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 4, i32 31), !dbg !34
  %119 = bitcast i32 %118 to float, !dbg !34
  %120 = fadd float %116, %119, !dbg !36
  %121 = bitcast float %120 to i32, !dbg !34
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 2, i32 31), !dbg !34
  %123 = bitcast i32 %122 to float, !dbg !34
  %124 = fadd float %120, %123, !dbg !36
  %125 = bitcast float %124 to i32, !dbg !34
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 1, i32 31), !dbg !34
  %127 = bitcast i32 %126 to float, !dbg !34
  %128 = fadd float %124, %127, !dbg !36
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i6 = icmp eq i32 %129, 0, !dbg !37
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !37
  %.not1.i9 = icmp eq i32 %130, 0, !dbg !37
  br i1 %.not.i6, label %136, label %131, !dbg !37

131:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %134, label %132, !dbg !37

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %112) #5, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %112) #5, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

136:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %139, label %137, !dbg !37

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.f(float %112) #5, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.f(float %112) #5, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

__nv_sqrtf.exit10:                                ; preds = %132, %134, %137, %139
  %.0.i8 = phi float [ %133, %132 ], [ %135, %134 ], [ %138, %137 ], [ %140, %139 ], !dbg !37
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i11 = icmp eq i32 %141, 0, !dbg !37
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !37
  %.not1.i14 = icmp eq i32 %142, 0, !dbg !37
  br i1 %.not.i11, label %148, label %143, !dbg !37

143:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %146, label %144, !dbg !37

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #5, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #5, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

148:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %151, label %149, !dbg !37

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #5, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #5, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

__nv_sqrtf.exit15:                                ; preds = %144, %146, %149, %151
  %.0.i13 = phi float [ %145, %144 ], [ %147, %146 ], [ %150, %149 ], [ %152, %151 ], !dbg !37
  %153 = fcmp ogt float %.0.i8, 0x3D71979980000000, !dbg !38
  %154 = fcmp uno float %.0.i8, 0.000000e+00, !dbg !42
  %155 = or i1 %153, %154, !dbg !43
  %156 = select i1 %155, float %.0.i8, float 0x3D71979980000000, !dbg !44
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %91, float %156) #5, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !47
  %urem = and i32 %11, 63, !dbg !48
  %159 = icmp eq i32 %urem, 0, !dbg !48
  %160 = bitcast float %.0.i3 to i32, !dbg !48
  %161 = and i1 %159, %10, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %160, ptr addrspace(1) %158, i1 %161) #5, !dbg !48
  %162 = getelementptr float, ptr addrspace(1) %4, i64 %16, !dbg !49
  %163 = and i32 %11, 48, !dbg !50
  %164 = icmp eq i32 %163, 0, !dbg !50
  %165 = bitcast float %91 to i32, !dbg !50
  %166 = and i1 %164, %18, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %165, ptr addrspace(1) %162, i1 %166) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %167 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !52
  %168 = bitcast float %.0.i13 to i32, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %168, ptr addrspace(1) %167, i1 %161) #5, !dbg !53
  %169 = getelementptr float, ptr addrspace(1) %5, i64 %16, !dbg !54
  %170 = bitcast float %157 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %170, ptr addrspace(1) %169, i1 %166) #5, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py", directory: "inductor_cache/76")
!4 = !{ptr @triton_per_fused__weight_norm_interface_clamp_min_div_linalg_vector_norm_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__weight_norm_interface_clamp_min_div_linalg_vector_norm_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__weight_norm_interface_clamp_min_div_linalg_vector_norm_1", linkageName: "triton_per_fused__weight_norm_interface_clamp_min_div_linalg_vector_norm_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 28, column: 21, scope: !7)
!14 = !DILocation(line: 31, column: 38, scope: !7)
!15 = !DILocation(line: 31, column: 35, scope: !7)
!16 = !DILocation(line: 31, column: 30, scope: !7)
!17 = !DILocation(line: 31, column: 51, scope: !7)
!18 = !DILocation(line: 31, column: 43, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 18, scope: !7)
!22 = !DILocation(line: 35, column: 41, scope: !7)
!23 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = !DILocation(line: 36, column: 24, scope: !7)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !26)
!28 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!29 = !DILocation(line: 37, column: 26, scope: !7)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 19, scope: !7)
!33 = !DILocation(line: 42, column: 43, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !35)
!35 = !DILocation(line: 43, column: 26, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !35)
!37 = !DILocation(line: 44, column: 27, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 46, column: 42, scope: !7)
!42 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !41)
!44 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!45 = !DILocation(line: 47, column: 19, scope: !7)
!46 = !DILocation(line: 48, column: 4, scope: !7)
!47 = !DILocation(line: 49, column: 28, scope: !7)
!48 = !DILocation(line: 49, column: 39, scope: !7)
!49 = !DILocation(line: 50, column: 25, scope: !7)
!50 = !DILocation(line: 50, column: 44, scope: !7)
!51 = !DILocation(line: 51, column: 4, scope: !7)
!52 = !DILocation(line: 52, column: 28, scope: !7)
!53 = !DILocation(line: 52, column: 40, scope: !7)
!54 = !DILocation(line: 53, column: 25, scope: !7)
!55 = !DILocation(line: 53, column: 45, scope: !7)
!56 = !DILocation(line: 53, column: 4, scope: !7)
