#loc = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":19:0)
#loc1 = loc(unknown)
#loc17 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":36:24)
#loc25 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":43:26)
#loc46 = loc(callsite(#loc1 at #loc17))
#loc49 = loc(callsite(#loc1 at #loc25))
module {
  tt.func public @triton_per_fused__weight_norm_interface_clamp_min_div_linalg_vector_norm_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":19:0), %arg6: i32 loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":19:0), %arg7: i32 loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":19:0)) attributes {noinline = false} {
    %c12_i32 = arith.constant 12 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %cst = arith.constant dense<9.99999996E-13> : tensor<1x1xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x16xf32> loc(#loc1)
    %cst_1 = arith.constant dense<12> : tensor<1x16xi32> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c4_i32 : i32 loc(#loc3)
    %2 = tt.splat %1 : i1 -> tensor<1x1xi1> loc(#loc3)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc4)
    %4 = tt.expand_dims %3 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_1 : tensor<1x16xi32> loc(#loc6)
    %6 = arith.muli %0, %c12_i32 : i32 loc(#loc7)
    %7 = tt.splat %6 : i32 -> tensor<1x16xi32> loc(#loc8)
    %8 = arith.addi %4, %7 : tensor<1x16xi32> loc(#loc8)
    %9 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>> loc(#loc9)
    %10 = tt.addptr %9, %8 : tensor<1x16x!tt.ptr<f32>>, tensor<1x16xi32> loc(#loc9)
    %11 = tt.splat %1 : i1 -> tensor<1x16xi1> loc(#loc10)
    %12 = arith.andi %5, %11 : tensor<1x16xi1> loc(#loc10)
    %13 = tt.load %10, %12, %cst_0 : tensor<1x16x!tt.ptr<f32>> loc(#loc11)
    %14 = tt.addptr %arg3, %0 : !tt.ptr<f32>, i32 loc(#loc12)
    %15 = tt.splat %14 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc12)
    %16 = tt.load %15, %2 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>> loc(#loc13)
    %17 = arith.mulf %13, %13 : tensor<1x16xf32> loc(#loc14)
    %18 = arith.select %12, %17, %cst_0 : tensor<1x16xi1>, tensor<1x16xf32> loc(#loc15)
    %19 = "tt.reduce"(%18) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc17)), %arg9: f32 loc(callsite(#loc1 at #loc17))):
      %44 = arith.addf %arg8, %arg9 : f32 loc(#loc54)
      tt.reduce.return %44 : f32 loc(#loc45)
    }) : (tensor<1x16xf32>) -> tensor<1xf32> loc(#loc45)
    %20 = tt.expand_dims %19 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc19)
    %21 = tt.extern_elementwise %20 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32> loc(#loc20)
    %22 = arith.divf %16, %21 : tensor<1x1xf32> loc(#loc21)
    %23 = tt.broadcast %22 : tensor<1x1xf32> -> tensor<1x16xf32> loc(#loc22)
    %24 = arith.mulf %13, %23 : tensor<1x16xf32> loc(#loc22)
    %25 = arith.mulf %24, %24 : tensor<1x16xf32> loc(#loc23)
    %26 = arith.select %12, %25, %cst_0 : tensor<1x16xi1>, tensor<1x16xf32> loc(#loc24)
    %27 = "tt.reduce"(%26) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc25)), %arg9: f32 loc(callsite(#loc1 at #loc25))):
      %44 = arith.addf %arg8, %arg9 : f32 loc(#loc55)
      tt.reduce.return %44 : f32 loc(#loc48)
    }) : (tensor<1x16xf32>) -> tensor<1xf32> loc(#loc48)
    %28 = tt.expand_dims %27 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc26)
    %29 = tt.extern_elementwise %28 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32> loc(#loc27)
    %30 = arith.cmpf ogt, %29, %cst : tensor<1x1xf32> loc(#loc50)
    %31 = arith.cmpf une, %29, %29 : tensor<1x1xf32> loc(#loc51)
    %32 = arith.ori %30, %31 : tensor<1x1xi1> loc(#loc52)
    %33 = arith.select %32, %29, %cst : tensor<1x1xi1>, tensor<1x1xf32> loc(#loc53)
    %34 = tt.broadcast %33 : tensor<1x1xf32> -> tensor<1x16xf32> loc(#loc33)
    %35 = arith.divf %24, %34 : tensor<1x16xf32> loc(#loc33)
    gpu.barrier loc(#loc34)
    %36 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc35)
    %37 = tt.splat %36 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc35)
    tt.store %37, %21, %2 : tensor<1x1x!tt.ptr<f32>> loc(#loc36)
    %38 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>> loc(#loc37)
    %39 = tt.addptr %38, %8 : tensor<1x16x!tt.ptr<f32>>, tensor<1x16xi32> loc(#loc37)
    tt.store %39, %24, %12 : tensor<1x16x!tt.ptr<f32>> loc(#loc38)
    gpu.barrier loc(#loc39)
    %40 = tt.addptr %arg1, %0 : !tt.ptr<f32>, i32 loc(#loc40)
    %41 = tt.splat %40 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc40)
    tt.store %41, %29, %2 : tensor<1x1x!tt.ptr<f32>> loc(#loc41)
    %42 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>> loc(#loc42)
    %43 = tt.addptr %42, %8 : tensor<1x16x!tt.ptr<f32>>, tensor<1x16xi32> loc(#loc42)
    tt.store %43, %35, %12 : tensor<1x16x!tt.ptr<f32>> loc(#loc43)
    tt.return loc(#loc44)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":23:28)
#loc3 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":25:21)
#loc4 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":26:26)
#loc5 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":26:34)
#loc6 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":28:21)
#loc7 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":31:38)
#loc8 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":31:35)
#loc9 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":31:30)
#loc10 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":31:51)
#loc11 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":31:43)
#loc12 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":32:30)
#loc13 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":32:35)
#loc14 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":33:18)
#loc15 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":35:41)
#loc16 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc19 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":36:27)
#loc20 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":37:26)
#loc21 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":38:18)
#loc22 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":39:18)
#loc23 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":40:19)
#loc24 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":42:43)
#loc26 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":43:29)
#loc27 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":44:27)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc29 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":46:42)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc33 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":47:19)
#loc34 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":48:4)
#loc35 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":49:28)
#loc36 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":49:39)
#loc37 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":50:25)
#loc38 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":50:44)
#loc39 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":51:4)
#loc40 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":52:28)
#loc41 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":52:40)
#loc42 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":53:25)
#loc43 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":53:45)
#loc44 = loc("inductor_cache/76/c76icyf67se64znft7tlcw2hgedmk26uvkh5wbs5zm7rt4ztmqgr.py":53:4)
#loc45 = loc(callsite(#loc16 at #loc17))
#loc47 = loc(callsite(#loc18 at #loc16))
#loc48 = loc(callsite(#loc16 at #loc25))
#loc50 = loc(callsite(#loc28 at #loc29))
#loc51 = loc(callsite(#loc30 at #loc29))
#loc52 = loc(callsite(#loc31 at #loc29))
#loc53 = loc(callsite(#loc32 at #loc29))
#loc54 = loc(callsite(#loc47 at #loc17))
#loc55 = loc(callsite(#loc47 at #loc25))
