; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_mean_relu_26(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 124, !dbg !12
  %10 = lshr i32 %7, 5, !dbg !12
  %11 = and i32 %7, 127, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = icmp slt i32 %12, 1536, !dbg !14
  %15 = icmp slt i32 %13, 1536, !dbg !14
  %16 = and i32 %10, 7, !dbg !15
  %.frozen = freeze i32 %12, !dbg !16
  %17 = sdiv i32 %.frozen, 384, !dbg !16
  %18 = mul i32 %17, 384, !dbg !17
  %.decomposed = sub i32 %.frozen, %18, !dbg !17
  %19 = mul nuw nsw i32 %16, 384, !dbg !18
  %20 = add nsw i32 %.decomposed, %19, !dbg !19
  %21 = mul i32 %17, 3072, !dbg !20
  %22 = add i32 %20, %21, !dbg !21
  %23 = sext i32 %22 to i64, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !22
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !23
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !23
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !23
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !23
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !23
  %30 = shl nuw nsw i32 %9, 3, !dbg !24
  %31 = or disjoint i32 %30, %16, !dbg !24
  %32 = zext nneg i32 %31 to i64, !dbg !24
  %33 = getelementptr float, ptr addrspace(3) @global_smem, i64 %32, !dbg !24
  %34 = select i1 %14, i32 %26, i32 0, !dbg !28
  %35 = insertelement <1 x i32> poison, i32 %34, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %33, <1 x i32> %35, i1 true) #3, !dbg !24
  %36 = or disjoint i32 %30, 8, !dbg !24
  %37 = or disjoint i32 %36, %16, !dbg !24
  %38 = zext nneg i32 %37 to i64, !dbg !24
  %39 = getelementptr float, ptr addrspace(3) @global_smem, i64 %38, !dbg !24
  %40 = select i1 %14, i32 %27, i32 0, !dbg !28
  %41 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %39, <1 x i32> %41, i1 true) #3, !dbg !24
  %42 = or disjoint i32 %30, 16, !dbg !24
  %43 = or disjoint i32 %42, %16, !dbg !24
  %44 = zext nneg i32 %43 to i64, !dbg !24
  %45 = getelementptr float, ptr addrspace(3) @global_smem, i64 %44, !dbg !24
  %46 = select i1 %14, i32 %28, i32 0, !dbg !28
  %47 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %47, i1 true) #3, !dbg !24
  %48 = or disjoint i32 %30, 24, !dbg !24
  %49 = or disjoint i32 %48, %16, !dbg !24
  %50 = zext nneg i32 %49 to i64, !dbg !24
  %51 = getelementptr float, ptr addrspace(3) @global_smem, i64 %50, !dbg !24
  %52 = select i1 %14, i32 %29, i32 0, !dbg !28
  %53 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %53, i1 true) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %54 = icmp slt i32 %7, 1024, !dbg !24
  %55 = sext i32 %7 to i64, !dbg !24
  %56 = getelementptr float, ptr addrspace(3) @global_smem, i64 %55, !dbg !24
  %57 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %56, i1 %54) #3, !dbg !24
  %58 = bitcast i32 %57 to float, !dbg !24
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 4, i32 31), !dbg !24
  %60 = bitcast i32 %59 to float, !dbg !24
  %61 = fadd float %58, %60, !dbg !29
  %62 = bitcast float %61 to i32, !dbg !24
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 2, i32 31), !dbg !24
  %64 = bitcast i32 %63 to float, !dbg !24
  %65 = fadd float %61, %64, !dbg !29
  %66 = bitcast float %65 to i32, !dbg !24
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 1, i32 31), !dbg !24
  %68 = bitcast i32 %67 to float, !dbg !24
  %69 = fadd float %65, %68, !dbg !29
  %70 = and i32 %7, 7, !dbg !24
  %71 = icmp eq i32 %70, 0, !dbg !24
  %72 = and i1 %54, %71, !dbg !24
  %73 = bitcast float %69 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %73, i1 %72) #3, !dbg !24
  %74 = add i32 %7, 256, !dbg !24
  %75 = sext i32 %74 to i64, !dbg !24
  %76 = getelementptr float, ptr addrspace(3) @global_smem, i64 %75, !dbg !24
  %77 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %76, i1 %54) #3, !dbg !24
  %78 = bitcast i32 %77 to float, !dbg !24
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 4, i32 31), !dbg !24
  %80 = bitcast i32 %79 to float, !dbg !24
  %81 = fadd float %78, %80, !dbg !29
  %82 = bitcast float %81 to i32, !dbg !24
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 2, i32 31), !dbg !24
  %84 = bitcast i32 %83 to float, !dbg !24
  %85 = fadd float %81, %84, !dbg !29
  %86 = bitcast float %85 to i32, !dbg !24
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 1, i32 31), !dbg !24
  %88 = bitcast i32 %87 to float, !dbg !24
  %89 = fadd float %85, %88, !dbg !29
  %90 = bitcast float %89 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %90, i1 %72) #3, !dbg !24
  %91 = add i32 %7, 512, !dbg !24
  %92 = sext i32 %91 to i64, !dbg !24
  %93 = getelementptr float, ptr addrspace(3) @global_smem, i64 %92, !dbg !24
  %94 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %93, i1 %54) #3, !dbg !24
  %95 = bitcast i32 %94 to float, !dbg !24
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 4, i32 31), !dbg !24
  %97 = bitcast i32 %96 to float, !dbg !24
  %98 = fadd float %95, %97, !dbg !29
  %99 = bitcast float %98 to i32, !dbg !24
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 2, i32 31), !dbg !24
  %101 = bitcast i32 %100 to float, !dbg !24
  %102 = fadd float %98, %101, !dbg !29
  %103 = bitcast float %102 to i32, !dbg !24
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 1, i32 31), !dbg !24
  %105 = bitcast i32 %104 to float, !dbg !24
  %106 = fadd float %102, %105, !dbg !29
  %107 = bitcast float %106 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %107, i1 %72) #3, !dbg !24
  %108 = add i32 %7, 768, !dbg !24
  %109 = sext i32 %108 to i64, !dbg !24
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i64 %109, !dbg !24
  %111 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %110, i1 %54) #3, !dbg !24
  %112 = bitcast i32 %111 to float, !dbg !24
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 4, i32 31), !dbg !24
  %114 = bitcast i32 %113 to float, !dbg !24
  %115 = fadd float %112, %114, !dbg !29
  %116 = bitcast float %115 to i32, !dbg !24
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 2, i32 31), !dbg !24
  %118 = bitcast i32 %117 to float, !dbg !24
  %119 = fadd float %115, %118, !dbg !29
  %120 = bitcast float %119 to i32, !dbg !24
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 1, i32 31), !dbg !24
  %122 = bitcast i32 %121 to float, !dbg !24
  %123 = fadd float %119, %122, !dbg !29
  %124 = bitcast float %123 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %124, i1 %72) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %125 = zext nneg i32 %30 to i64, !dbg !24
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i64 %125, !dbg !24
  %127 = load i32, ptr addrspace(3) %126, align 16, !dbg !24
  %128 = zext nneg i32 %36 to i64, !dbg !24
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i64 %128, !dbg !24
  %130 = load i32, ptr addrspace(3) %129, align 16, !dbg !24
  %131 = zext nneg i32 %42 to i64, !dbg !24
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i64 %131, !dbg !24
  %133 = load i32, ptr addrspace(3) %132, align 16, !dbg !24
  %134 = zext nneg i32 %48 to i64, !dbg !24
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i64 %134, !dbg !24
  %136 = load i32, ptr addrspace(3) %135, align 16, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %137 = zext nneg i32 %9 to i64, !dbg !31
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %137, !dbg !31
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %138, i32 %127, i32 %130, i32 %133, i32 %136, i1 true) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %139 = zext nneg i32 %11 to i64, !dbg !31
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %139, !dbg !31
  %141 = load float, ptr addrspace(3) %140, align 4, !dbg !31
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float 1.024000e+03) #3, !dbg !35
  %143 = fcmp olt float %142, 0.000000e+00, !dbg !36
  %144 = select i1 %143, float 0.000000e+00, float %142, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %145 = sext i32 %13 to i64, !dbg !38
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !38
  %147 = and i32 %7, 128, !dbg !39
  %148 = icmp eq i32 %147, 0, !dbg !39
  %149 = bitcast float %144 to i32, !dbg !39
  %150 = and i1 %148, %15, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %149, ptr addrspace(1) %146, i1 %150) #3, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw7rws4beixuukodqitfwfml6tpwa7b6lz4mslsie5jfv5dhlimi.py", directory: "inductor_cache/w7")
!4 = !{ptr @triton_per_fused_add_mean_relu_26, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mean_relu_26, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mean_relu_26", linkageName: "triton_per_fused_add_mean_relu_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 39, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 49, scope: !7)
!21 = !DILocation(line: 33, column: 44, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 54, scope: !7)
!24 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = !DILocation(line: 36, column: 24, scope: !7)
!28 = !DILocation(line: 35, column: 33, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !27)
!30 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!31 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 40, column: 40, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !34)
!37 = !DILocation(line: 41, column: 4, scope: !7)
!38 = !DILocation(line: 42, column: 28, scope: !7)
!39 = !DILocation(line: 42, column: 39, scope: !7)
!40 = !DILocation(line: 42, column: 4, scope: !7)
