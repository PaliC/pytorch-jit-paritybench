; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_mul_pow_rsqrt_sum_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = icmp slt i32 %7, 16, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = lshr i32 %9, 5, !dbg !12
  %12 = and i32 %9, 63, !dbg !12
  %13 = icmp samesign ult i32 %12, 36, !dbg !13
  %.frozen = freeze i32 %7, !dbg !14
  %14 = sdiv i32 %.frozen, 4, !dbg !14
  %15 = mul i32 %14, 4, !dbg !15
  %.decomposed = sub i32 %.frozen, %15, !dbg !15
  %.lhs.trunc = trunc nuw nsw i32 %12 to i8, !dbg !16
  %16 = udiv i8 %.lhs.trunc, 9, !dbg !16
  %.zext = zext nneg i8 %16 to i32, !dbg !16
  %17 = mul nsw i32 %.decomposed, 36, !dbg !17
  %18 = add nsw i32 %17, %12, !dbg !18
  %19 = sext i32 %18 to i64, !dbg !19
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !19
  %21 = and i1 %13, %8, !dbg !20
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %21, i32 0, i1 %21) #5, !dbg !21
  %23 = bitcast i32 %22 to float, !dbg !21
  %24 = shl nsw i32 %14, 2, !dbg !22
  %25 = add i32 %24, %.zext, !dbg !23
  %26 = sext i32 %25 to i64, !dbg !24
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !24
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %21, i32 0, i1 %21) #5, !dbg !25
  %29 = bitcast i32 %28 to float, !dbg !25
  %30 = fadd float %29, 1.000000e+00, !dbg !26
  %31 = fmul float %30, %23, !dbg !27
  %32 = fmul float %31, %31, !dbg !28
  %33 = select i1 %21, float %32, float 0.000000e+00, !dbg !29
  %34 = bitcast float %33 to i32, !dbg !30
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 16, i32 31), !dbg !30
  %36 = bitcast i32 %35 to float, !dbg !30
  %37 = fadd float %33, %36, !dbg !34
  %38 = bitcast float %37 to i32, !dbg !30
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 8, i32 31), !dbg !30
  %40 = bitcast i32 %39 to float, !dbg !30
  %41 = fadd float %37, %40, !dbg !34
  %42 = bitcast float %41 to i32, !dbg !30
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 4, i32 31), !dbg !30
  %44 = bitcast i32 %43 to float, !dbg !30
  %45 = fadd float %41, %44, !dbg !34
  %46 = bitcast float %45 to i32, !dbg !30
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 2, i32 31), !dbg !30
  %48 = bitcast i32 %47 to float, !dbg !30
  %49 = fadd float %45, %48, !dbg !34
  %50 = bitcast float %49 to i32, !dbg !30
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 1, i32 31), !dbg !30
  %52 = bitcast i32 %51 to float, !dbg !30
  %53 = fadd float %49, %52, !dbg !34
  %54 = icmp eq i32 %10, 0, !dbg !30
  %55 = and i32 %11, 1, !dbg !30
  %56 = zext nneg i32 %55 to i64, !dbg !30
  %57 = getelementptr float, ptr addrspace(3) @global_smem, i64 %56, !dbg !30
  %58 = bitcast float %53 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %58, i1 %54) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %59 = icmp slt i32 %9, 2, !dbg !30
  %60 = sext i32 %9 to i64, !dbg !30
  %61 = getelementptr float, ptr addrspace(3) @global_smem, i64 %60, !dbg !30
  %62 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %61, i1 %59) #5, !dbg !30
  %63 = bitcast i32 %62 to float, !dbg !30
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 1, i32 31), !dbg !30
  %65 = bitcast i32 %64 to float, !dbg !30
  %66 = fadd float %63, %65, !dbg !34
  %67 = and i32 %9, 1, !dbg !30
  %68 = icmp eq i32 %67, 0, !dbg !30
  %69 = and i1 %59, %68, !dbg !30
  %70 = bitcast float %66 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %70, i1 %69) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %71 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !30
  %72 = fadd float %71, 0x3E45798EE0000000, !dbg !36
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i = icmp eq i32 %73, 0, !dbg !37
  br i1 %.not.i, label %76, label %74, !dbg !37

74:                                               ; preds = %6
  %75 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %72), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

76:                                               ; preds = %6
  %77 = tail call float @llvm.nvvm.rsqrt.approx.f(float %72), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

__nv_rsqrtf.exit:                                 ; preds = %74, %76
  %.0.i = phi float [ %75, %74 ], [ %77, %76 ], !dbg !37
  %78 = fmul float %31, %.0.i, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %79 = sext i32 %7 to i64, !dbg !40
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !40
  %81 = icmp eq i32 %12, 0, !dbg !41
  %82 = bitcast float %.0.i to i32, !dbg !41
  %83 = and i1 %81, %8, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %82, ptr addrspace(1) %80, i1 %83) #5, !dbg !41
  %84 = mul i32 %7, 36, !dbg !42
  %85 = add i32 %84, %12, !dbg !43
  %86 = sext i32 %85 to i64, !dbg !44
  %87 = getelementptr float, ptr addrspace(1) %3, i64 %86, !dbg !44
  %88 = bitcast float %78 to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %88, ptr addrspace(1) %87, i1 %21) #5, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbwhwaaen7lwhx5zrscrvmibovxa4pbg2hmyb4ci7lqseddb52vd.py", directory: "inductor_cache/bw")
!4 = !{ptr @triton_per_fused_add_mul_pow_rsqrt_sum_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mul_pow_rsqrt_sum_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mul_pow_rsqrt_sum_1", linkageName: "triton_per_fused_add_mul_pow_rsqrt_sum_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 28, column: 21, scope: !7)
!14 = !DILocation(line: 32, column: 19, scope: !7)
!15 = !DILocation(line: 30, column: 19, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 34, column: 38, scope: !7)
!18 = !DILocation(line: 34, column: 35, scope: !7)
!19 = !DILocation(line: 34, column: 30, scope: !7)
!20 = !DILocation(line: 34, column: 51, scope: !7)
!21 = !DILocation(line: 34, column: 43, scope: !7)
!22 = !DILocation(line: 35, column: 37, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 42, scope: !7)
!26 = !DILocation(line: 37, column: 18, scope: !7)
!27 = !DILocation(line: 38, column: 18, scope: !7)
!28 = !DILocation(line: 39, column: 18, scope: !7)
!29 = !DILocation(line: 41, column: 41, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!33 = !DILocation(line: 42, column: 24, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !33)
!35 = distinct !DILexicalBlockFile(scope: !31, file: !32, discriminator: 0)
!36 = !DILocation(line: 44, column: 19, scope: !7)
!37 = !DILocation(line: 45, column: 28, scope: !7)
!38 = !DILocation(line: 46, column: 19, scope: !7)
!39 = !DILocation(line: 47, column: 4, scope: !7)
!40 = !DILocation(line: 48, column: 28, scope: !7)
!41 = !DILocation(line: 48, column: 40, scope: !7)
!42 = !DILocation(line: 49, column: 33, scope: !7)
!43 = !DILocation(line: 49, column: 30, scope: !7)
!44 = !DILocation(line: 49, column: 25, scope: !7)
!45 = !DILocation(line: 49, column: 45, scope: !7)
!46 = !DILocation(line: 49, column: 4, scope: !7)
