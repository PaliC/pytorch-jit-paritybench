; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_37(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 512, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %15 = sdiv i32 %.frozen, 16, !dbg !14
  %16 = mul i32 %15, 16, !dbg !15
  %.decomposed = sub i32 %.frozen, %16, !dbg !15
  %17 = sdiv i32 %14, 16, !dbg !14
  %18 = srem i32 %15, 16, !dbg !16
  %19 = srem i32 %17, 16, !dbg !16
  %20 = sdiv i32 %13, 256, !dbg !17
  %21 = sdiv i32 %14, 256, !dbg !17
  %22 = srem i32 %20, 128, !dbg !18
  %23 = srem i32 %21, 128, !dbg !18
  %.lhs.trunc = trunc nsw i32 %18 to i8, !dbg !19
  %24 = sdiv i8 %.lhs.trunc, 2, !dbg !19
  %.sext = sext i8 %24 to i32, !dbg !19
  %.lhs.trunc36 = trunc nsw i32 %19 to i8, !dbg !19
  %.lhs.trunc36.frozen = freeze i8 %.lhs.trunc36, !dbg !19
  %25 = sdiv i8 %.lhs.trunc36.frozen, 2, !dbg !19
  %.sext37 = sext i8 %25 to i32, !dbg !19
  %26 = shl nsw i32 %.sext, 4, !dbg !20
  %27 = shl nsw i32 %.sext37, 4, !dbg !20
  %28 = mul i8 %24, 2, !dbg !21
  %.decomposed49 = sub i8 %.lhs.trunc, %28, !dbg !21
  %.sext39 = sext i8 %.decomposed49 to i32, !dbg !21
  %29 = mul i8 %25, 2, !dbg !21
  %.decomposed50 = sub i8 %.lhs.trunc36.frozen, %29, !dbg !21
  %.sext41 = sext i8 %.decomposed50 to i32, !dbg !21
  %30 = shl nsw i32 %.sext39, 7, !dbg !22
  %31 = shl nsw i32 %.sext41, 7, !dbg !22
  %32 = shl nsw i32 %20, 8, !dbg !23
  %33 = shl nsw i32 %21, 8, !dbg !23
  %34 = add i32 %32, %.decomposed, !dbg !24
  %35 = add i32 %34, %26, !dbg !25
  %36 = add i32 %35, %30, !dbg !26
  %37 = add i32 %33, %.decomposed, !dbg !24
  %38 = add i32 %37, %27, !dbg !25
  %39 = add i32 %38, %31, !dbg !26
  %40 = sext i32 %36 to i64, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !27
  %42 = sext i32 %39 to i64, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !27
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !28
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !28
  %46 = sext i32 %22 to i64, !dbg !29
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !29
  %48 = sext i32 %23 to i64, !dbg !29
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !29
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !30
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !30
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !30
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !30
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !30
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !30
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !30
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !30
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !31
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !31
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !32
  %61 = bitcast i32 %60 to float, !dbg !32
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !32
  %63 = bitcast i32 %62 to float, !dbg !32
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !32
  %65 = bitcast i32 %64 to float, !dbg !32
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !32
  %67 = bitcast i32 %66 to float, !dbg !32
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !32
  %69 = bitcast i32 %68 to float, !dbg !32
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !32
  %71 = bitcast i32 %70 to float, !dbg !32
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !32
  %73 = bitcast i32 %72 to float, !dbg !32
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !32
  %75 = bitcast i32 %74 to float, !dbg !32
  %76 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !33
  %77 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !33
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !34
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !34
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !34
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !34
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !34
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !34
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !34
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !34
  %86 = getelementptr float, ptr addrspace(1) %4, i64 %46, !dbg !35
  %87 = getelementptr float, ptr addrspace(1) %4, i64 %48, !dbg !35
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !36
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !36
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !36
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !36
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !36
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !36
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !36
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !36
  %96 = fadd float %61, 0x3EE4F8B580000000, !dbg !37
  %97 = fadd float %63, 0x3EE4F8B580000000, !dbg !37
  %98 = fadd float %65, 0x3EE4F8B580000000, !dbg !37
  %99 = fadd float %67, 0x3EE4F8B580000000, !dbg !37
  %100 = fadd float %69, 0x3EE4F8B580000000, !dbg !37
  %101 = fadd float %71, 0x3EE4F8B580000000, !dbg !37
  %102 = fadd float %73, 0x3EE4F8B580000000, !dbg !37
  %103 = fadd float %75, 0x3EE4F8B580000000, !dbg !37
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i = icmp eq i32 %104, 0, !dbg !38
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i = icmp eq i32 %105, 0, !dbg !38
  br i1 %.not.i, label %111, label %106, !dbg !38

106:                                              ; preds = %7
  br i1 %.not1.i, label %109, label %107, !dbg !38

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %96) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %96) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

111:                                              ; preds = %7
  br i1 %.not1.i, label %114, label %112, !dbg !38

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %96) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %96) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %107, %109, %112, %114
  %.0.i = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !38
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i1 = icmp eq i32 %116, 0, !dbg !38
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i4 = icmp eq i32 %117, 0, !dbg !38
  br i1 %.not.i1, label %123, label %118, !dbg !38

118:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %121, label %119, !dbg !38

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %97) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %97) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

123:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %126, label %124, !dbg !38

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.f(float %97) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.f(float %97) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

__nv_sqrtf.exit5:                                 ; preds = %119, %121, %124, %126
  %.0.i3 = phi float [ %120, %119 ], [ %122, %121 ], [ %125, %124 ], [ %127, %126 ], !dbg !38
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i6 = icmp eq i32 %128, 0, !dbg !38
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i9 = icmp eq i32 %129, 0, !dbg !38
  br i1 %.not.i6, label %135, label %130, !dbg !38

130:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %133, label %131, !dbg !38

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %98) #3, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %98) #3, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

135:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %138, label %136, !dbg !38

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.f(float %98) #3, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.f(float %98) #3, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

__nv_sqrtf.exit10:                                ; preds = %131, %133, %136, %138
  %.0.i8 = phi float [ %132, %131 ], [ %134, %133 ], [ %137, %136 ], [ %139, %138 ], !dbg !38
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i11 = icmp eq i32 %140, 0, !dbg !38
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i14 = icmp eq i32 %141, 0, !dbg !38
  br i1 %.not.i11, label %147, label %142, !dbg !38

142:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %145, label %143, !dbg !38

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #3, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #3, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

147:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %150, label %148, !dbg !38

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #3, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #3, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

__nv_sqrtf.exit15:                                ; preds = %143, %145, %148, %150
  %.0.i13 = phi float [ %144, %143 ], [ %146, %145 ], [ %149, %148 ], [ %151, %150 ], !dbg !38
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i16 = icmp eq i32 %152, 0, !dbg !38
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i19 = icmp eq i32 %153, 0, !dbg !38
  br i1 %.not.i16, label %159, label %154, !dbg !38

154:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %157, label %155, !dbg !38

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #3, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #3, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

159:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %162, label %160, !dbg !38

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #3, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #3, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

__nv_sqrtf.exit20:                                ; preds = %155, %157, %160, %162
  %.0.i18 = phi float [ %156, %155 ], [ %158, %157 ], [ %161, %160 ], [ %163, %162 ], !dbg !38
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i21 = icmp eq i32 %164, 0, !dbg !38
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i24 = icmp eq i32 %165, 0, !dbg !38
  br i1 %.not.i21, label %171, label %166, !dbg !38

166:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %169, label %167, !dbg !38

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %101) #3, !dbg !38
  br label %__nv_sqrtf.exit25, !dbg !38

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %101) #3, !dbg !38
  br label %__nv_sqrtf.exit25, !dbg !38

171:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %174, label %172, !dbg !38

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.f(float %101) #3, !dbg !38
  br label %__nv_sqrtf.exit25, !dbg !38

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.f(float %101) #3, !dbg !38
  br label %__nv_sqrtf.exit25, !dbg !38

__nv_sqrtf.exit25:                                ; preds = %167, %169, %172, %174
  %.0.i23 = phi float [ %168, %167 ], [ %170, %169 ], [ %173, %172 ], [ %175, %174 ], !dbg !38
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i26 = icmp eq i32 %176, 0, !dbg !38
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i29 = icmp eq i32 %177, 0, !dbg !38
  br i1 %.not.i26, label %183, label %178, !dbg !38

178:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %181, label %179, !dbg !38

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %102) #3, !dbg !38
  br label %__nv_sqrtf.exit30, !dbg !38

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %102) #3, !dbg !38
  br label %__nv_sqrtf.exit30, !dbg !38

183:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %186, label %184, !dbg !38

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.f(float %102) #3, !dbg !38
  br label %__nv_sqrtf.exit30, !dbg !38

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.f(float %102) #3, !dbg !38
  br label %__nv_sqrtf.exit30, !dbg !38

__nv_sqrtf.exit30:                                ; preds = %179, %181, %184, %186
  %.0.i28 = phi float [ %180, %179 ], [ %182, %181 ], [ %185, %184 ], [ %187, %186 ], !dbg !38
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i31 = icmp eq i32 %188, 0, !dbg !38
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i34 = icmp eq i32 %189, 0, !dbg !38
  br i1 %.not.i31, label %195, label %190, !dbg !38

190:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %193, label %191, !dbg !38

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %103) #3, !dbg !38
  br label %__nv_sqrtf.exit35, !dbg !38

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %103) #3, !dbg !38
  br label %__nv_sqrtf.exit35, !dbg !38

195:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %198, label %196, !dbg !38

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.f(float %103) #3, !dbg !38
  br label %__nv_sqrtf.exit35, !dbg !38

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.f(float %103) #3, !dbg !38
  br label %__nv_sqrtf.exit35, !dbg !38

__nv_sqrtf.exit35:                                ; preds = %191, %193, %196, %198
  %.0.i33 = phi float [ %192, %191 ], [ %194, %193 ], [ %197, %196 ], [ %199, %198 ], !dbg !38
  %200 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !28
  %201 = insertelement <8 x i32> poison, i32 %57, i64 0, !dbg !30
  %202 = insertelement <8 x i32> %201, i32 %56, i64 1, !dbg !30
  %203 = insertelement <8 x i32> %202, i32 %55, i64 2, !dbg !30
  %204 = insertelement <8 x i32> %203, i32 %54, i64 3, !dbg !30
  %205 = insertelement <8 x i32> %204, i32 %53, i64 4, !dbg !30
  %206 = insertelement <8 x i32> %205, i32 %52, i64 5, !dbg !30
  %207 = insertelement <8 x i32> %206, i32 %51, i64 6, !dbg !30
  %208 = insertelement <8 x i32> %207, i32 %50, i64 7, !dbg !30
  %209 = bitcast <8 x i32> %208 to <8 x float>, !dbg !30
  %210 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !28
  %211 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !28
  %212 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !28
  %213 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !28
  %214 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !28
  %215 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !28
  %216 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !28
  %217 = insertelement <8 x i32> poison, i32 %95, i64 0, !dbg !36
  %218 = insertelement <8 x i32> %217, i32 %94, i64 1, !dbg !36
  %219 = insertelement <8 x i32> %218, i32 %93, i64 2, !dbg !36
  %220 = insertelement <8 x i32> %219, i32 %92, i64 3, !dbg !36
  %221 = insertelement <8 x i32> %220, i32 %91, i64 4, !dbg !36
  %222 = insertelement <8 x i32> %221, i32 %90, i64 5, !dbg !36
  %223 = insertelement <8 x i32> %222, i32 %89, i64 6, !dbg !36
  %224 = insertelement <8 x i32> %223, i32 %88, i64 7, !dbg !36
  %225 = bitcast <8 x i32> %224 to <8 x float>, !dbg !36
  %226 = insertelement <8 x i32> poison, i32 %85, i64 0, !dbg !34
  %227 = insertelement <8 x i32> %226, i32 %84, i64 1, !dbg !34
  %228 = insertelement <8 x i32> %227, i32 %83, i64 2, !dbg !34
  %229 = insertelement <8 x i32> %228, i32 %82, i64 3, !dbg !34
  %230 = insertelement <8 x i32> %229, i32 %81, i64 4, !dbg !34
  %231 = insertelement <8 x i32> %230, i32 %80, i64 5, !dbg !34
  %232 = insertelement <8 x i32> %231, i32 %79, i64 6, !dbg !34
  %233 = insertelement <8 x i32> %232, i32 %78, i64 7, !dbg !34
  %234 = bitcast <8 x i32> %233 to <8 x float>, !dbg !34
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !39
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !39
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !39
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !39
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !39
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !39
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !39
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !39
  %243 = insertelement <8 x i32> poison, i32 %200, i64 0, !dbg !28
  %244 = insertelement <8 x i32> %243, i32 %210, i64 1, !dbg !28
  %245 = insertelement <8 x i32> %244, i32 %211, i64 2, !dbg !28
  %246 = insertelement <8 x i32> %245, i32 %212, i64 3, !dbg !28
  %247 = insertelement <8 x i32> %246, i32 %213, i64 4, !dbg !28
  %248 = insertelement <8 x i32> %247, i32 %214, i64 5, !dbg !28
  %249 = insertelement <8 x i32> %248, i32 %215, i64 6, !dbg !28
  %250 = insertelement <8 x i32> %249, i32 %216, i64 7, !dbg !28
  %251 = bitcast <8 x i32> %250 to <8 x float>, !dbg !28
  %252 = fsub <8 x float> %251, %209, !dbg !40
  %253 = insertelement <8 x float> poison, float %242, i64 0, !dbg !41
  %254 = insertelement <8 x float> %253, float %241, i64 1, !dbg !41
  %255 = insertelement <8 x float> %254, float %240, i64 2, !dbg !41
  %256 = insertelement <8 x float> %255, float %239, i64 3, !dbg !41
  %257 = insertelement <8 x float> %256, float %238, i64 4, !dbg !41
  %258 = insertelement <8 x float> %257, float %237, i64 5, !dbg !41
  %259 = insertelement <8 x float> %258, float %236, i64 6, !dbg !41
  %260 = insertelement <8 x float> %259, float %235, i64 7, !dbg !41
  %261 = fmul <8 x float> %252, %260, !dbg !41
  %262 = fmul <8 x float> %261, %234, !dbg !42
  %263 = fadd <8 x float> %262, %225, !dbg !43
  %264 = fcmp olt <8 x float> %263, zeroinitializer, !dbg !44
  %265 = extractelement <8 x i1> %264, i64 7, !dbg !48
  %266 = extractelement <8 x i1> %264, i64 6, !dbg !48
  %267 = extractelement <8 x i1> %264, i64 5, !dbg !48
  %268 = extractelement <8 x i1> %264, i64 4, !dbg !48
  %269 = extractelement <8 x i1> %264, i64 3, !dbg !48
  %270 = extractelement <8 x i1> %264, i64 2, !dbg !48
  %271 = extractelement <8 x i1> %264, i64 1, !dbg !48
  %272 = extractelement <8 x i1> %264, i64 0, !dbg !48
  %273 = sext i32 %13 to i64, !dbg !49
  %274 = getelementptr float, ptr addrspace(1) %5, i64 %273, !dbg !49
  %275 = sext i32 %14 to i64, !dbg !49
  %276 = getelementptr float, ptr addrspace(1) %5, i64 %275, !dbg !49
  %bc = bitcast <8 x float> %263 to <8 x i32>, !dbg !50
  %277 = extractelement <8 x i32> %bc, i64 7, !dbg !50
  %278 = select i1 %265, i32 0, i32 %277, !dbg !48
  %bc42 = bitcast <8 x float> %263 to <8 x i32>, !dbg !50
  %279 = extractelement <8 x i32> %bc42, i64 6, !dbg !50
  %280 = select i1 %266, i32 0, i32 %279, !dbg !48
  %bc43 = bitcast <8 x float> %263 to <8 x i32>, !dbg !50
  %281 = extractelement <8 x i32> %bc43, i64 5, !dbg !50
  %282 = select i1 %267, i32 0, i32 %281, !dbg !48
  %bc44 = bitcast <8 x float> %263 to <8 x i32>, !dbg !50
  %283 = extractelement <8 x i32> %bc44, i64 4, !dbg !50
  %284 = select i1 %268, i32 0, i32 %283, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %278, i32 %280, i32 %282, i32 %284, ptr addrspace(1) %274, i1 true) #3, !dbg !50
  %bc45 = bitcast <8 x float> %263 to <8 x i32>, !dbg !50
  %285 = extractelement <8 x i32> %bc45, i64 3, !dbg !50
  %286 = select i1 %269, i32 0, i32 %285, !dbg !48
  %bc46 = bitcast <8 x float> %263 to <8 x i32>, !dbg !50
  %287 = extractelement <8 x i32> %bc46, i64 2, !dbg !50
  %288 = select i1 %270, i32 0, i32 %287, !dbg !48
  %bc47 = bitcast <8 x float> %263 to <8 x i32>, !dbg !50
  %289 = extractelement <8 x i32> %bc47, i64 1, !dbg !50
  %290 = select i1 %271, i32 0, i32 %289, !dbg !48
  %bc48 = bitcast <8 x float> %263 to <8 x i32>, !dbg !50
  %291 = extractelement <8 x i32> %bc48, i64 0, !dbg !50
  %292 = select i1 %272, i32 0, i32 %291, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %286, i32 %288, i32 %290, i32 %292, ptr addrspace(1) %276, i1 true) #3, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cz463s3cmaqafb4x522wvhbjjf44ik2jk323tjfy55in7qmor3lr.py", directory: "inductor_cache/z4")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_37, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_37, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_37", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_37", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 28, scope: !7)
!19 = !DILocation(line: 29, column: 45, scope: !7)
!20 = !DILocation(line: 29, column: 39, scope: !7)
!21 = !DILocation(line: 29, column: 61, scope: !7)
!22 = !DILocation(line: 29, column: 56, scope: !7)
!23 = !DILocation(line: 29, column: 71, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 29, column: 50, scope: !7)
!26 = !DILocation(line: 29, column: 67, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 76, scope: !7)
!29 = !DILocation(line: 30, column: 30, scope: !7)
!30 = !DILocation(line: 30, column: 35, scope: !7)
!31 = !DILocation(line: 31, column: 30, scope: !7)
!32 = !DILocation(line: 31, column: 35, scope: !7)
!33 = !DILocation(line: 32, column: 31, scope: !7)
!34 = !DILocation(line: 32, column: 36, scope: !7)
!35 = !DILocation(line: 33, column: 31, scope: !7)
!36 = !DILocation(line: 33, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 26, scope: !7)
!39 = !DILocation(line: 39, column: 18, scope: !7)
!40 = !DILocation(line: 34, column: 18, scope: !7)
!41 = !DILocation(line: 42, column: 19, scope: !7)
!42 = !DILocation(line: 43, column: 20, scope: !7)
!43 = !DILocation(line: 44, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 46, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 47, column: 25, scope: !7)
!50 = !DILocation(line: 47, column: 37, scope: !7)
!51 = !DILocation(line: 47, column: 4, scope: !7)
