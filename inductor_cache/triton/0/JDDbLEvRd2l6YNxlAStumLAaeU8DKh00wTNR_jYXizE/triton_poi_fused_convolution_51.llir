; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_51(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 12, !dbg !12
  %.lobit1 = lshr i32 %9, 6, !dbg !12
  %12 = and i32 %.lobit1, 3, !dbg !12
  %13 = or disjoint i32 %8, %11, !dbg !13
  %14 = or disjoint i32 %8, %12, !dbg !13
  %15 = or disjoint i32 %14, 4, !dbg !13
  %16 = or disjoint i32 %14, 8, !dbg !13
  %17 = or disjoint i32 %14, 12, !dbg !13
  %18 = icmp slt i32 %13, 16, !dbg !14
  %19 = icmp slt i32 %14, 16, !dbg !14
  %20 = icmp slt i32 %15, 16, !dbg !14
  %21 = icmp slt i32 %16, 16, !dbg !14
  %22 = icmp slt i32 %17, 16, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %24 = shl i32 %23, 8, !dbg !16
  %25 = lshr i32 %9, 2, !dbg !17
  %26 = and i32 %25, 63, !dbg !17
  %27 = and i32 %10, 252, !dbg !17
  %28 = or disjoint i32 %24, %26, !dbg !18
  %29 = or disjoint i32 %28, 64, !dbg !18
  %30 = or disjoint i32 %28, 128, !dbg !18
  %31 = or disjoint i32 %28, 192, !dbg !18
  %32 = or disjoint i32 %24, %27, !dbg !18
  %33 = icmp slt i32 %28, 256, !dbg !19
  %34 = icmp slt i32 %29, 256, !dbg !19
  %35 = icmp slt i32 %30, 256, !dbg !19
  %36 = icmp slt i32 %31, 256, !dbg !19
  %37 = icmp slt i32 %32, 256, !dbg !19
  %38 = shl i32 %28, 2, !dbg !20
  %39 = shl i32 %29, 2, !dbg !20
  %40 = shl i32 %30, 2, !dbg !20
  %41 = shl i32 %31, 2, !dbg !20
  %42 = shl i32 %13, 8, !dbg !21
  %43 = add i32 %38, %42, !dbg !22
  %44 = add i32 %42, %39, !dbg !22
  %45 = add i32 %42, %40, !dbg !22
  %46 = add i32 %42, %41, !dbg !22
  %47 = sext i32 %43 to i64, !dbg !23
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !23
  %49 = sext i32 %44 to i64, !dbg !23
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !23
  %51 = sext i32 %45 to i64, !dbg !23
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !23
  %53 = sext i32 %46 to i64, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !23
  %55 = and i1 %18, %33, !dbg !24
  %56 = and i1 %34, %18, !dbg !24
  %57 = and i1 %35, %18, !dbg !24
  %58 = and i1 %36, %18, !dbg !24
  %59 = and i1 %19, %37, !dbg !24
  %60 = and i1 %20, %37, !dbg !24
  %61 = and i1 %21, %37, !dbg !24
  %62 = and i1 %22, %37, !dbg !24
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %55) #2, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !25
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !25
  %68 = bitcast i32 %64 to float, !dbg !25
  %69 = bitcast i32 %65 to float, !dbg !25
  %70 = bitcast i32 %66 to float, !dbg !25
  %71 = bitcast i32 %67 to float, !dbg !25
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %56) #2, !dbg !25
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !25
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !25
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !25
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !25
  %77 = bitcast i32 %73 to float, !dbg !25
  %78 = bitcast i32 %74 to float, !dbg !25
  %79 = bitcast i32 %75 to float, !dbg !25
  %80 = bitcast i32 %76 to float, !dbg !25
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %57) #2, !dbg !25
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !25
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !25
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !25
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !25
  %86 = bitcast i32 %82 to float, !dbg !25
  %87 = bitcast i32 %83 to float, !dbg !25
  %88 = bitcast i32 %84 to float, !dbg !25
  %89 = bitcast i32 %85 to float, !dbg !25
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %58) #2, !dbg !25
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !25
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !25
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !25
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !25
  %95 = bitcast i32 %91 to float, !dbg !25
  %96 = bitcast i32 %92 to float, !dbg !25
  %97 = bitcast i32 %93 to float, !dbg !25
  %98 = bitcast i32 %94 to float, !dbg !25
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1, i1 %18) #2, !dbg !26
  %100 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !26
  %101 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !26
  %102 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !26
  %103 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !26
  %104 = bitcast i32 %100 to float, !dbg !26
  %105 = bitcast i32 %101 to float, !dbg !26
  %106 = bitcast i32 %102 to float, !dbg !26
  %107 = bitcast i32 %103 to float, !dbg !26
  %108 = fadd float %68, %104, !dbg !27
  %109 = fadd float %69, %105, !dbg !27
  %110 = fadd float %70, %106, !dbg !27
  %111 = fadd float %71, %107, !dbg !27
  %112 = fadd float %77, %104, !dbg !27
  %113 = fadd float %78, %105, !dbg !27
  %114 = fadd float %79, %106, !dbg !27
  %115 = fadd float %80, %107, !dbg !27
  %116 = fadd float %86, %104, !dbg !27
  %117 = fadd float %87, %105, !dbg !27
  %118 = fadd float %88, %106, !dbg !27
  %119 = fadd float %89, %107, !dbg !27
  %120 = fadd float %95, %104, !dbg !27
  %121 = fadd float %96, %105, !dbg !27
  %122 = fadd float %97, %106, !dbg !27
  %123 = fadd float %98, %107, !dbg !27
  %124 = shl i32 %14, 8, !dbg !28
  %125 = shl i32 %15, 8, !dbg !28
  %126 = shl i32 %16, 8, !dbg !28
  %127 = shl i32 %17, 8, !dbg !28
  %128 = add i32 %32, %124, !dbg !29
  %129 = add i32 %32, %125, !dbg !29
  %130 = add i32 %32, %126, !dbg !29
  %131 = add i32 %32, %127, !dbg !29
  %132 = sext i32 %128 to i64, !dbg !30
  %133 = getelementptr float, ptr addrspace(1) %2, i64 %132, !dbg !30
  %134 = sext i32 %129 to i64, !dbg !30
  %135 = getelementptr float, ptr addrspace(1) %2, i64 %134, !dbg !30
  %136 = sext i32 %130 to i64, !dbg !30
  %137 = getelementptr float, ptr addrspace(1) %2, i64 %136, !dbg !30
  %138 = sext i32 %131 to i64, !dbg !30
  %139 = getelementptr float, ptr addrspace(1) %2, i64 %138, !dbg !30
  %140 = shl i32 %9, 10, !dbg !31
  %141 = and i32 %140, 3072, !dbg !31
  %142 = or disjoint i32 %141, %26, !dbg !31
  %143 = and i32 %10, 1020, !dbg !31
  %144 = lshr exact i32 %141, 6, !dbg !31
  %145 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %144, !dbg !31
  %146 = getelementptr float, ptr addrspace(3) %145, i32 %142, !dbg !31
  %147 = bitcast float %108 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #2, !dbg !31
  %148 = or disjoint i32 %142, 256, !dbg !31
  %149 = lshr i32 %148, 8, !dbg !31
  %150 = getelementptr float, ptr addrspace(3) @global_smem, i32 %149, !dbg !31
  %151 = getelementptr float, ptr addrspace(3) %150, i32 %148, !dbg !31
  %152 = bitcast float %109 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 true) #2, !dbg !31
  %153 = or disjoint i32 %142, 512, !dbg !31
  %154 = lshr i32 %153, 8, !dbg !31
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i32 %154, !dbg !31
  %156 = getelementptr float, ptr addrspace(3) %155, i32 %153, !dbg !31
  %157 = bitcast float %110 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %157, i1 true) #2, !dbg !31
  %158 = or disjoint i32 %142, 768, !dbg !31
  %159 = lshr i32 %158, 8, !dbg !31
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i32 %159, !dbg !31
  %161 = getelementptr float, ptr addrspace(3) %160, i32 %158, !dbg !31
  %162 = bitcast float %111 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %162, i1 true) #2, !dbg !31
  %163 = or disjoint i32 %142, 64, !dbg !31
  %164 = getelementptr float, ptr addrspace(3) %145, i32 %163, !dbg !31
  %165 = bitcast float %112 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %165, i1 true) #2, !dbg !31
  %166 = or disjoint i32 %142, 320, !dbg !31
  %167 = lshr i32 %166, 8, !dbg !31
  %168 = getelementptr float, ptr addrspace(3) @global_smem, i32 %167, !dbg !31
  %169 = getelementptr float, ptr addrspace(3) %168, i32 %166, !dbg !31
  %170 = bitcast float %113 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %170, i1 true) #2, !dbg !31
  %171 = or disjoint i32 %142, 576, !dbg !31
  %172 = lshr i32 %171, 8, !dbg !31
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i32 %172, !dbg !31
  %174 = getelementptr float, ptr addrspace(3) %173, i32 %171, !dbg !31
  %175 = bitcast float %114 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 true) #2, !dbg !31
  %176 = or disjoint i32 %142, 832, !dbg !31
  %177 = lshr i32 %176, 8, !dbg !31
  %178 = getelementptr float, ptr addrspace(3) @global_smem, i32 %177, !dbg !31
  %179 = getelementptr float, ptr addrspace(3) %178, i32 %176, !dbg !31
  %180 = bitcast float %115 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #2, !dbg !31
  %181 = or disjoint i32 %142, 128, !dbg !31
  %182 = getelementptr float, ptr addrspace(3) %145, i32 %181, !dbg !31
  %183 = bitcast float %116 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %183, i1 true) #2, !dbg !31
  %184 = or disjoint i32 %142, 384, !dbg !31
  %185 = lshr i32 %184, 8, !dbg !31
  %186 = getelementptr float, ptr addrspace(3) @global_smem, i32 %185, !dbg !31
  %187 = getelementptr float, ptr addrspace(3) %186, i32 %184, !dbg !31
  %188 = bitcast float %117 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %188, i1 true) #2, !dbg !31
  %189 = or disjoint i32 %142, 640, !dbg !31
  %190 = lshr i32 %189, 8, !dbg !31
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i32 %190, !dbg !31
  %192 = getelementptr float, ptr addrspace(3) %191, i32 %189, !dbg !31
  %193 = bitcast float %118 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %193, i1 true) #2, !dbg !31
  %194 = or disjoint i32 %142, 896, !dbg !31
  %195 = lshr i32 %194, 8, !dbg !31
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i32 %195, !dbg !31
  %197 = getelementptr float, ptr addrspace(3) %196, i32 %194, !dbg !31
  %198 = bitcast float %119 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 true) #2, !dbg !31
  %199 = or disjoint i32 %142, 192, !dbg !31
  %200 = getelementptr float, ptr addrspace(3) %145, i32 %199, !dbg !31
  %201 = bitcast float %120 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %201, i1 true) #2, !dbg !31
  %202 = or disjoint i32 %142, 448, !dbg !31
  %203 = lshr i32 %202, 8, !dbg !31
  %204 = getelementptr float, ptr addrspace(3) @global_smem, i32 %203, !dbg !31
  %205 = getelementptr float, ptr addrspace(3) %204, i32 %202, !dbg !31
  %206 = bitcast float %121 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %206, i1 true) #2, !dbg !31
  %207 = or disjoint i32 %142, 704, !dbg !31
  %208 = lshr i32 %207, 8, !dbg !31
  %209 = getelementptr float, ptr addrspace(3) @global_smem, i32 %208, !dbg !31
  %210 = getelementptr float, ptr addrspace(3) %209, i32 %207, !dbg !31
  %211 = bitcast float %122 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %211, i1 true) #2, !dbg !31
  %212 = or disjoint i32 %142, 960, !dbg !31
  %213 = lshr i32 %212, 8, !dbg !31
  %214 = getelementptr float, ptr addrspace(3) @global_smem, i32 %213, !dbg !31
  %215 = getelementptr float, ptr addrspace(3) %214, i32 %212, !dbg !31
  %216 = bitcast float %123 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %216, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %217 = lshr i32 %143, 8, !dbg !31
  %218 = or disjoint i32 %217, %143, !dbg !31
  %219 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %218, !dbg !31
  %220 = load i32, ptr addrspace(3) %219, align 4, !dbg !31
  %221 = or disjoint i32 %143, 1, !dbg !31
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %217, !dbg !31
  %223 = getelementptr inbounds float, ptr addrspace(3) %222, i32 %221, !dbg !31
  %224 = load i32, ptr addrspace(3) %223, align 4, !dbg !31
  %225 = or disjoint i32 %143, 2, !dbg !31
  %226 = getelementptr inbounds float, ptr addrspace(3) %222, i32 %225, !dbg !31
  %227 = load i32, ptr addrspace(3) %226, align 4, !dbg !31
  %228 = or disjoint i32 %143, 3, !dbg !31
  %229 = getelementptr inbounds float, ptr addrspace(3) %222, i32 %228, !dbg !31
  %230 = load i32, ptr addrspace(3) %229, align 4, !dbg !31
  %231 = or disjoint i32 %143, 1024, !dbg !31
  %232 = lshr i32 %231, 8, !dbg !31
  %233 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %232, !dbg !31
  %234 = getelementptr inbounds float, ptr addrspace(3) %233, i32 %231, !dbg !31
  %235 = load i32, ptr addrspace(3) %234, align 4, !dbg !31
  %236 = or disjoint i32 %143, 1025, !dbg !31
  %237 = lshr i32 %236, 8, !dbg !31
  %238 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %237, !dbg !31
  %239 = getelementptr inbounds float, ptr addrspace(3) %238, i32 %236, !dbg !31
  %240 = load i32, ptr addrspace(3) %239, align 4, !dbg !31
  %241 = or disjoint i32 %143, 1026, !dbg !31
  %242 = lshr i32 %241, 8, !dbg !31
  %243 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %242, !dbg !31
  %244 = getelementptr inbounds float, ptr addrspace(3) %243, i32 %241, !dbg !31
  %245 = load i32, ptr addrspace(3) %244, align 4, !dbg !31
  %246 = or disjoint i32 %143, 1027, !dbg !31
  %247 = lshr i32 %246, 8, !dbg !31
  %248 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %247, !dbg !31
  %249 = getelementptr inbounds float, ptr addrspace(3) %248, i32 %246, !dbg !31
  %250 = load i32, ptr addrspace(3) %249, align 4, !dbg !31
  %251 = or disjoint i32 %143, 2048, !dbg !31
  %252 = lshr i32 %251, 8, !dbg !31
  %253 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %252, !dbg !31
  %254 = getelementptr inbounds float, ptr addrspace(3) %253, i32 %251, !dbg !31
  %255 = load i32, ptr addrspace(3) %254, align 4, !dbg !31
  %256 = or disjoint i32 %143, 2049, !dbg !31
  %257 = lshr i32 %256, 8, !dbg !31
  %258 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %257, !dbg !31
  %259 = getelementptr inbounds float, ptr addrspace(3) %258, i32 %256, !dbg !31
  %260 = load i32, ptr addrspace(3) %259, align 4, !dbg !31
  %261 = or disjoint i32 %143, 2050, !dbg !31
  %262 = lshr i32 %261, 8, !dbg !31
  %263 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %262, !dbg !31
  %264 = getelementptr inbounds float, ptr addrspace(3) %263, i32 %261, !dbg !31
  %265 = load i32, ptr addrspace(3) %264, align 4, !dbg !31
  %266 = or disjoint i32 %143, 2051, !dbg !31
  %267 = lshr i32 %266, 8, !dbg !31
  %268 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %267, !dbg !31
  %269 = getelementptr inbounds float, ptr addrspace(3) %268, i32 %266, !dbg !31
  %270 = load i32, ptr addrspace(3) %269, align 4, !dbg !31
  %271 = or disjoint i32 %143, 3072, !dbg !31
  %272 = lshr i32 %271, 8, !dbg !31
  %273 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %272, !dbg !31
  %274 = getelementptr inbounds float, ptr addrspace(3) %273, i32 %271, !dbg !31
  %275 = load i32, ptr addrspace(3) %274, align 4, !dbg !31
  %276 = or disjoint i32 %143, 3073, !dbg !31
  %277 = lshr i32 %276, 8, !dbg !31
  %278 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %277, !dbg !31
  %279 = getelementptr inbounds float, ptr addrspace(3) %278, i32 %276, !dbg !31
  %280 = load i32, ptr addrspace(3) %279, align 4, !dbg !31
  %281 = or disjoint i32 %143, 3074, !dbg !31
  %282 = lshr i32 %281, 8, !dbg !31
  %283 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %282, !dbg !31
  %284 = getelementptr inbounds float, ptr addrspace(3) %283, i32 %281, !dbg !31
  %285 = load i32, ptr addrspace(3) %284, align 4, !dbg !31
  %286 = or disjoint i32 %143, 3075, !dbg !31
  %287 = lshr i32 %286, 8, !dbg !31
  %288 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %287, !dbg !31
  %289 = getelementptr inbounds float, ptr addrspace(3) %288, i32 %286, !dbg !31
  %290 = load i32, ptr addrspace(3) %289, align 4, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %220, i32 %224, i32 %227, i32 %230, ptr addrspace(1) %133, i1 %59) #2, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %235, i32 %240, i32 %245, i32 %250, ptr addrspace(1) %135, i1 %60) #2, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %255, i32 %260, i32 %265, i32 %270, ptr addrspace(1) %137, i1 %61) #2, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %275, i32 %280, i32 %285, i32 %290, ptr addrspace(1) %139, i1 %62) #2, !dbg !31
  %291 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !32
  %292 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !32
  %293 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !32
  %294 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !32
  %295 = bitcast float %108 to i32, !dbg !33
  %296 = bitcast float %109 to i32, !dbg !33
  %297 = bitcast float %110 to i32, !dbg !33
  %298 = bitcast float %111 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %295, i32 %296, i32 %297, i32 %298, ptr addrspace(1) %291, i1 %55) #2, !dbg !33
  %299 = bitcast float %112 to i32, !dbg !33
  %300 = bitcast float %113 to i32, !dbg !33
  %301 = bitcast float %114 to i32, !dbg !33
  %302 = bitcast float %115 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %299, i32 %300, i32 %301, i32 %302, ptr addrspace(1) %292, i1 %56) #2, !dbg !33
  %303 = bitcast float %116 to i32, !dbg !33
  %304 = bitcast float %117 to i32, !dbg !33
  %305 = bitcast float %118 to i32, !dbg !33
  %306 = bitcast float %119 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %303, i32 %304, i32 %305, i32 %306, ptr addrspace(1) %293, i1 %57) #2, !dbg !33
  %307 = bitcast float %120 to i32, !dbg !33
  %308 = bitcast float %121 to i32, !dbg !33
  %309 = bitcast float %122 to i32, !dbg !33
  %310 = bitcast float %123 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %307, i32 %308, i32 %309, i32 %310, ptr addrspace(1) %294, i1 %58) #2, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "col7deejnx7fu5vgmco6dew7jx4hjuectlsjqvzm2673yt4jjsmz.py", directory: "inductor_cache/ol")
!4 = !{ptr @triton_poi_fused_convolution_51, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_51, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_51", linkageName: "triton_poi_fused_convolution_51", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 37, scope: !7)
!21 = !DILocation(line: 32, column: 47, scope: !7)
!22 = !DILocation(line: 32, column: 42, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 60, scope: !7)
!25 = !DILocation(line: 32, column: 52, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 35, column: 34, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 25, scope: !7)
!31 = !DILocation(line: 35, column: 45, scope: !7)
!32 = !DILocation(line: 36, column: 25, scope: !7)
!33 = !DILocation(line: 36, column: 53, scope: !7)
!34 = !DILocation(line: 36, column: 4, scope: !7)
