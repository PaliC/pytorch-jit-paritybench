; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_floor_mul_rsub_sub_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 254, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 1, !dbg !13
  %19 = sdiv i32 %17, 4, !dbg !14
  %20 = srem i32 %18, 4, !dbg !15
  %21 = sdiv i32 %17, 16, !dbg !16
  %22 = add nsw i32 %21, 768, !dbg !17
  %23 = sext i32 %22 to i64, !dbg !18
  %24 = sitofp i32 %20 to float, !dbg !19
  %25 = fadd float %24, 5.000000e-01, !dbg !20
  %26 = fmul float %25, 0x400B512BC0000000, !dbg !21
  %27 = fadd float %26, -5.000000e-01, !dbg !22
  %28 = tail call float @llvm.nvvm.floor.ftz.f(float %27), !dbg !23
  %29 = tail call float @llvm.nvvm.floor.f(float %27), !dbg !23
  %30 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !15
  %31 = insertelement <2 x i32> %30, i32 %19, i64 1, !dbg !15
  %32 = srem <2 x i32> %31, splat (i32 4), !dbg !15
  %33 = extractelement <2 x i32> %32, i64 1, !dbg !24
  %34 = sext i32 %33 to i64, !dbg !24
  %35 = getelementptr i64, ptr addrspace(1) %1, i64 %34, !dbg !24
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #2, !dbg !25
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #2, !dbg !25
  %38 = extractelement <2 x i32> %32, i64 0, !dbg !26
  %39 = sext i32 %38 to i64, !dbg !26
  %40 = getelementptr i64, ptr addrspace(1) %2, i64 %39, !dbg !26
  %41 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %40, i1 true) #2, !dbg !27
  %42 = extractvalue { i64, i64 } %41, 0, !dbg !27
  %43 = extractvalue { i64, i64 } %41, 1, !dbg !27
  %44 = getelementptr i64, ptr addrspace(1) %4, i64 %39, !dbg !28
  %45 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %44, i1 true) #2, !dbg !29
  %46 = extractvalue { i64, i64 } %45, 0, !dbg !29
  %47 = extractvalue { i64, i64 } %45, 1, !dbg !29
  %48 = getelementptr i64, ptr addrspace(1) %5, i64 %39, !dbg !30
  %49 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %48, i1 true) #2, !dbg !31
  %50 = extractvalue { i64, i64 } %49, 0, !dbg !31
  %51 = extractvalue { i64, i64 } %49, 1, !dbg !31
  %52 = getelementptr i64, ptr addrspace(1) %6, i64 %39, !dbg !32
  %53 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %52, i1 true) #2, !dbg !33
  %54 = extractvalue { i64, i64 } %53, 0, !dbg !33
  %55 = extractvalue { i64, i64 } %53, 1, !dbg !33
  %56 = getelementptr i64, ptr addrspace(1) %7, i64 %34, !dbg !34
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 true) #2, !dbg !35
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 true) #2, !dbg !35
  %59 = getelementptr i64, ptr addrspace(1) %8, i64 %34, !dbg !36
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %59, i1 true) #2, !dbg !37
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %59, i1 true) #2, !dbg !37
  %62 = getelementptr i64, ptr addrspace(1) %9, i64 %34, !dbg !38
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 true) #2, !dbg !39
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 true) #2, !dbg !39
  %65 = add i64 %36, 14, !dbg !40
  %66 = icmp slt i64 %36, 0, !dbg !41
  %67 = select i1 %66, i64 %65, i64 %36, !dbg !42
  %68 = add i64 %42, 14, !dbg !43
  %69 = add i64 %43, 14, !dbg !43
  %70 = icmp slt i64 %42, 0, !dbg !44
  %71 = icmp slt i64 %43, 0, !dbg !44
  %72 = select i1 %70, i64 %68, i64 %42, !dbg !45
  %73 = select i1 %71, i64 %69, i64 %43, !dbg !45
  %74 = mul i64 %67, 10752, !dbg !46
  %.idx = mul i64 %72, 3072, !dbg !47
  %75 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx, !dbg !47
  %76 = getelementptr float, ptr addrspace(1) %75, i64 %23, !dbg !47
  %77 = getelementptr float, ptr addrspace(1) %76, i64 %74, !dbg !47
  %.idx10 = mul i64 %73, 3072, !dbg !47
  %78 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx10, !dbg !47
  %79 = getelementptr float, ptr addrspace(1) %78, i64 %23, !dbg !47
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %74, !dbg !47
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #2, !dbg !48
  %82 = bitcast i32 %81 to float, !dbg !48
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #2, !dbg !48
  %84 = bitcast i32 %83 to float, !dbg !48
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !23
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !23
  %87 = add i64 %46, 14, !dbg !49
  %88 = add i64 %47, 14, !dbg !49
  %89 = icmp slt i64 %46, 0, !dbg !50
  %90 = icmp slt i64 %47, 0, !dbg !50
  %91 = select i1 %89, i64 %87, i64 %46, !dbg !51
  %92 = select i1 %90, i64 %88, i64 %47, !dbg !51
  %.idx11 = mul i64 %91, 3072, !dbg !52
  %93 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx11, !dbg !52
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %23, !dbg !52
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %74, !dbg !52
  %.idx12 = mul i64 %92, 3072, !dbg !52
  %96 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx12, !dbg !52
  %97 = getelementptr float, ptr addrspace(1) %96, i64 %23, !dbg !52
  %98 = getelementptr float, ptr addrspace(1) %97, i64 %74, !dbg !52
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #2, !dbg !53
  %100 = bitcast i32 %99 to float, !dbg !53
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #2, !dbg !53
  %102 = bitcast i32 %101 to float, !dbg !53
  %103 = add i64 %50, 14, !dbg !54
  %104 = add i64 %51, 14, !dbg !54
  %105 = icmp slt i64 %50, 0, !dbg !55
  %106 = icmp slt i64 %51, 0, !dbg !55
  %107 = select i1 %105, i64 %103, i64 %50, !dbg !56
  %108 = select i1 %106, i64 %104, i64 %51, !dbg !56
  %.idx13 = mul i64 %107, 3072, !dbg !57
  %109 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx13, !dbg !57
  %110 = getelementptr float, ptr addrspace(1) %109, i64 %23, !dbg !57
  %111 = getelementptr float, ptr addrspace(1) %110, i64 %74, !dbg !57
  %.idx14 = mul i64 %108, 3072, !dbg !57
  %112 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx14, !dbg !57
  %113 = getelementptr float, ptr addrspace(1) %112, i64 %23, !dbg !57
  %114 = getelementptr float, ptr addrspace(1) %113, i64 %74, !dbg !57
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #2, !dbg !58
  %116 = bitcast i32 %115 to float, !dbg !58
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #2, !dbg !58
  %118 = bitcast i32 %117 to float, !dbg !58
  %119 = add i64 %54, 14, !dbg !59
  %120 = add i64 %55, 14, !dbg !59
  %121 = icmp slt i64 %54, 0, !dbg !60
  %122 = icmp slt i64 %55, 0, !dbg !60
  %123 = select i1 %121, i64 %119, i64 %54, !dbg !61
  %124 = select i1 %122, i64 %120, i64 %55, !dbg !61
  %.idx15 = mul i64 %123, 3072, !dbg !62
  %125 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx15, !dbg !62
  %126 = getelementptr float, ptr addrspace(1) %125, i64 %23, !dbg !62
  %127 = getelementptr float, ptr addrspace(1) %126, i64 %74, !dbg !62
  %.idx16 = mul i64 %124, 3072, !dbg !62
  %128 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx16, !dbg !62
  %129 = getelementptr float, ptr addrspace(1) %128, i64 %23, !dbg !62
  %130 = getelementptr float, ptr addrspace(1) %129, i64 %74, !dbg !62
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #2, !dbg !63
  %132 = bitcast i32 %131 to float, !dbg !63
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #2, !dbg !63
  %134 = bitcast i32 %133 to float, !dbg !63
  %135 = add i64 %57, 14, !dbg !64
  %136 = icmp slt i64 %57, 0, !dbg !65
  %137 = select i1 %136, i64 %135, i64 %57, !dbg !66
  %138 = mul i64 %137, 10752, !dbg !67
  %139 = getelementptr float, ptr addrspace(1) %76, i64 %138, !dbg !68
  %140 = getelementptr float, ptr addrspace(1) %79, i64 %138, !dbg !68
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 true) #2, !dbg !69
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 true) #2, !dbg !69
  %143 = getelementptr float, ptr addrspace(1) %94, i64 %138, !dbg !70
  %144 = getelementptr float, ptr addrspace(1) %97, i64 %138, !dbg !70
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 true) #2, !dbg !71
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #2, !dbg !71
  %147 = getelementptr float, ptr addrspace(1) %110, i64 %138, !dbg !72
  %148 = getelementptr float, ptr addrspace(1) %113, i64 %138, !dbg !72
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 true) #2, !dbg !73
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #2, !dbg !73
  %151 = getelementptr float, ptr addrspace(1) %126, i64 %138, !dbg !74
  %152 = getelementptr float, ptr addrspace(1) %129, i64 %138, !dbg !74
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 true) #2, !dbg !75
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #2, !dbg !75
  %155 = add i64 %60, 14, !dbg !76
  %156 = icmp slt i64 %60, 0, !dbg !77
  %157 = select i1 %156, i64 %155, i64 %60, !dbg !78
  %158 = mul i64 %157, 10752, !dbg !79
  %159 = getelementptr float, ptr addrspace(1) %76, i64 %158, !dbg !80
  %160 = getelementptr float, ptr addrspace(1) %79, i64 %158, !dbg !80
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %159, i1 true) #2, !dbg !81
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 true) #2, !dbg !81
  %163 = getelementptr float, ptr addrspace(1) %94, i64 %158, !dbg !82
  %164 = getelementptr float, ptr addrspace(1) %97, i64 %158, !dbg !82
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 true) #2, !dbg !83
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 true) #2, !dbg !83
  %167 = getelementptr float, ptr addrspace(1) %110, i64 %158, !dbg !84
  %168 = getelementptr float, ptr addrspace(1) %113, i64 %158, !dbg !84
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 true) #2, !dbg !85
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 true) #2, !dbg !85
  %171 = getelementptr float, ptr addrspace(1) %126, i64 %158, !dbg !86
  %172 = getelementptr float, ptr addrspace(1) %129, i64 %158, !dbg !86
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 true) #2, !dbg !87
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 true) #2, !dbg !87
  %175 = add i64 %63, 14, !dbg !88
  %176 = icmp slt i64 %63, 0, !dbg !89
  %177 = select i1 %176, i64 %175, i64 %63, !dbg !90
  %178 = mul i64 %177, 10752, !dbg !91
  %179 = getelementptr float, ptr addrspace(1) %76, i64 %178, !dbg !92
  %180 = getelementptr float, ptr addrspace(1) %79, i64 %178, !dbg !92
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 true) #2, !dbg !93
  %182 = bitcast i32 %181 to float, !dbg !93
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 true) #2, !dbg !93
  %184 = bitcast i32 %183 to float, !dbg !93
  %185 = getelementptr float, ptr addrspace(1) %94, i64 %178, !dbg !94
  %186 = getelementptr float, ptr addrspace(1) %97, i64 %178, !dbg !94
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 true) #2, !dbg !95
  %188 = bitcast i32 %187 to float, !dbg !95
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 true) #2, !dbg !95
  %190 = bitcast i32 %189 to float, !dbg !95
  %191 = getelementptr float, ptr addrspace(1) %110, i64 %178, !dbg !96
  %192 = getelementptr float, ptr addrspace(1) %113, i64 %178, !dbg !96
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 true) #2, !dbg !97
  %194 = bitcast i32 %193 to float, !dbg !97
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %192, i1 true) #2, !dbg !97
  %196 = bitcast i32 %195 to float, !dbg !97
  %197 = getelementptr float, ptr addrspace(1) %126, i64 %178, !dbg !98
  %198 = getelementptr float, ptr addrspace(1) %129, i64 %178, !dbg !98
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %197, i1 true) #2, !dbg !99
  %200 = bitcast i32 %199 to float, !dbg !99
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %198, i1 true) #2, !dbg !99
  %202 = bitcast i32 %201 to float, !dbg !99
  %203 = sitofp <2 x i32> %32 to <2 x float>, !dbg !19
  %204 = fadd <2 x float> %203, splat (float 5.000000e-01), !dbg !20
  %205 = fmul <2 x float> %204, splat (float 0x400B512BC0000000), !dbg !21
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !100
  %207 = insertelement <2 x i32> poison, i32 %85, i64 0, !dbg !23
  %208 = insertelement <2 x i32> %207, i32 %206, i64 1, !dbg !23
  %209 = icmp eq <2 x i32> %208, zeroinitializer, !dbg !23
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !100
  %211 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !23
  %212 = insertelement <2 x i32> %211, i32 %210, i64 1, !dbg !23
  %213 = icmp eq <2 x i32> %212, zeroinitializer, !dbg !23
  %214 = fadd <2 x float> %205, splat (float -5.000000e-01), !dbg !22
  %215 = extractelement <2 x float> %214, i64 0, !dbg !23
  %216 = tail call float @llvm.nvvm.floor.ftz.f(float %215), !dbg !23
  %217 = tail call float @llvm.nvvm.floor.f(float %215), !dbg !23
  %218 = extractelement <2 x float> %214, i64 1, !dbg !100
  %219 = tail call float @llvm.nvvm.floor.ftz.f(float %218), !dbg !100
  %220 = tail call float @llvm.nvvm.floor.f(float %218), !dbg !100
  %221 = insertelement <2 x float> poison, float %217, i64 0, !dbg !23
  %222 = insertelement <2 x float> %221, float %220, i64 1, !dbg !23
  %223 = insertelement <2 x float> poison, float %216, i64 0, !dbg !23
  %224 = insertelement <2 x float> %223, float %219, i64 1, !dbg !23
  %225 = select <2 x i1> %209, <2 x float> %222, <2 x float> %224, !dbg !23
  %226 = fsub <2 x float> %214, %225, !dbg !101
  %227 = fcmp ole <2 x float> %226, zeroinitializer, !dbg !102
  %228 = select <2 x i1> %227, <2 x float> zeroinitializer, <2 x float> %226, !dbg !102
  %229 = fcmp olt <2 x float> %228, splat (float 1.000000e+00), !dbg !106
  %230 = fcmp uno <2 x float> %228, zeroinitializer, !dbg !108
  %231 = or <2 x i1> %229, %230, !dbg !109
  %232 = select <2 x i1> %231, <2 x float> %228, <2 x float> splat (float 1.000000e+00), !dbg !110
  %233 = extractelement <2 x float> %232, i64 0, !dbg !110
  %234 = fadd float %233, 1.000000e+00, !dbg !111
  %235 = fmul float %234, 7.500000e-01, !dbg !112
  %236 = fsub float 3.750000e+00, %235, !dbg !113
  %237 = fmul float %234, %236, !dbg !114
  %238 = fadd float %237, -6.000000e+00, !dbg !115
  %239 = fmul float %233, 1.250000e+00, !dbg !116
  %240 = fadd float %239, -2.250000e+00, !dbg !117
  %241 = fmul float %233, %240, !dbg !118
  %242 = fsub float 1.000000e+00, %233, !dbg !119
  %243 = fmul float %242, 1.250000e+00, !dbg !120
  %244 = fadd float %243, -2.250000e+00, !dbg !121
  %245 = fmul float %242, %244, !dbg !122
  %246 = fmul float %242, %245, !dbg !123
  %247 = fadd float %246, 1.000000e+00, !dbg !124
  %248 = fmul float %247, %116, !dbg !125
  %249 = fsub <2 x float> <float 2.000000e+00, float poison>, %232, !dbg !126
  %250 = fadd <2 x float> %232, <float poison, float 1.000000e+00>, !dbg !126
  %251 = shufflevector <2 x float> %249, <2 x float> %250, <2 x i32> <i32 0, i32 3>, !dbg !126
  %252 = fsub float 2.000000e+00, %233, !dbg !126
  %253 = fmul float %252, 7.500000e-01, !dbg !127
  %254 = fsub float 3.750000e+00, %253, !dbg !128
  %255 = fmul float %247, %194, !dbg !129
  %256 = insertelement <2 x float> <float poison, float 7.500000e-01>, float %254, i64 0, !dbg !130
  %257 = fmul <2 x float> %251, %256, !dbg !130
  %258 = fadd <2 x float> %257, <float -6.000000e+00, float poison>, !dbg !131
  %259 = fsub <2 x float> <float poison, float 3.750000e+00>, %257, !dbg !131
  %260 = shufflevector <2 x float> %258, <2 x float> %259, <2 x i32> <i32 0, i32 3>, !dbg !131
  %261 = fmul <2 x float> %251, %260, !dbg !132
  %262 = fadd <2 x float> %261, <float 3.000000e+00, float -6.000000e+00>, !dbg !133
  %263 = extractelement <2 x float> %262, i64 0, !dbg !134
  %264 = fmul float %263, %200, !dbg !134
  %265 = insertelement <2 x float> %251, float %132, i64 0, !dbg !135
  %266 = fmul <2 x float> %262, %265, !dbg !135
  %267 = extractelement <2 x float> %232, i64 1, !dbg !136
  %268 = fsub float 1.000000e+00, %267, !dbg !137
  %269 = insertelement <2 x float> poison, float %234, i64 0, !dbg !138
  %270 = shufflevector <2 x float> %269, <2 x float> %232, <2 x i32> <i32 0, i32 2>, !dbg !138
  %271 = insertelement <2 x float> poison, float %238, i64 0, !dbg !138
  %272 = insertelement <2 x float> %271, float %241, i64 1, !dbg !138
  %273 = fmul <2 x float> %270, %272, !dbg !138
  %274 = fadd <2 x float> %273, <float 3.000000e+00, float 1.000000e+00>, !dbg !139
  %275 = extractelement <2 x float> %274, i64 0, !dbg !140
  %276 = fmul float %275, %82, !dbg !140
  %277 = extractelement <2 x float> %274, i64 1, !dbg !141
  %278 = fmul float %277, %100, !dbg !142
  %279 = fadd float %278, %276, !dbg !143
  %280 = fadd float %248, %279, !dbg !144
  %281 = insertelement <2 x float> <float poison, float 3.000000e+00>, float %280, i64 0, !dbg !145
  %282 = fadd <2 x float> %266, %281, !dbg !145
  %283 = insertelement <2 x i32> poison, i32 %161, i64 0, !dbg !81
  %284 = insertelement <2 x i32> %283, i32 %145, i64 1, !dbg !81
  %285 = bitcast <2 x i32> %284 to <2 x float>, !dbg !81
  %286 = fmul <2 x float> %274, %285, !dbg !146
  %287 = insertelement <2 x i32> poison, i32 %165, i64 0, !dbg !83
  %288 = insertelement <2 x i32> %287, i32 %141, i64 1, !dbg !83
  %289 = bitcast <2 x i32> %288 to <2 x float>, !dbg !83
  %290 = shufflevector <2 x float> %274, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !147
  %291 = fmul <2 x float> %290, %289, !dbg !147
  %292 = fadd <2 x float> %286, %291, !dbg !148
  %293 = insertelement <2 x i32> poison, i32 %169, i64 0, !dbg !85
  %294 = insertelement <2 x i32> %293, i32 %149, i64 1, !dbg !85
  %295 = bitcast <2 x i32> %294 to <2 x float>, !dbg !85
  %296 = insertelement <2 x float> poison, float %247, i64 0, !dbg !149
  %297 = shufflevector <2 x float> %296, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !149
  %298 = fmul <2 x float> %297, %295, !dbg !149
  %299 = fadd <2 x float> %292, %298, !dbg !150
  %300 = insertelement <2 x i32> poison, i32 %173, i64 0, !dbg !87
  %301 = insertelement <2 x i32> %300, i32 %153, i64 1, !dbg !87
  %302 = bitcast <2 x i32> %301 to <2 x float>, !dbg !87
  %303 = shufflevector <2 x float> %262, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !151
  %304 = fmul <2 x float> %303, %302, !dbg !151
  %305 = fadd <2 x float> %299, %304, !dbg !152
  %306 = fmul float %275, %182, !dbg !153
  %307 = fmul float %277, %188, !dbg !141
  %308 = fadd float %306, %307, !dbg !154
  %309 = fadd float %308, %255, !dbg !155
  %310 = fadd float %309, %264, !dbg !156
  %shift = shufflevector <2 x float> %282, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !157
  %311 = fmul <2 x float> %282, %shift, !dbg !157
  %312 = insertelement <2 x float> %232, float %268, i64 0, !dbg !158
  %313 = fmul <2 x float> %312, splat (float 1.250000e+00), !dbg !158
  %314 = fadd <2 x float> %313, splat (float -2.250000e+00), !dbg !159
  %315 = fmul <2 x float> %312, %314, !dbg !160
  %316 = fmul <2 x float> %312, %315, !dbg !161
  %317 = fadd <2 x float> %316, splat (float 1.000000e+00), !dbg !162
  %318 = fmul <2 x float> %305, %317, !dbg !163
  %shift17 = shufflevector <2 x float> %318, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !164
  %319 = fadd <2 x float> %shift17, %311, !dbg !164
  %320 = insertelement <2 x float> poison, float %29, i64 0, !dbg !23
  %321 = insertelement <2 x float> %320, float %220, i64 1, !dbg !23
  %322 = insertelement <2 x float> poison, float %28, i64 0, !dbg !23
  %323 = insertelement <2 x float> %322, float %219, i64 1, !dbg !23
  %324 = select <2 x i1> %213, <2 x float> %321, <2 x float> %323, !dbg !23
  %325 = insertelement <2 x float> %214, float %27, i64 0, !dbg !101
  %326 = fsub <2 x float> %325, %324, !dbg !101
  %327 = fcmp ole <2 x float> %326, zeroinitializer, !dbg !102
  %328 = select <2 x i1> %327, <2 x float> zeroinitializer, <2 x float> %326, !dbg !102
  %329 = fcmp olt <2 x float> %328, splat (float 1.000000e+00), !dbg !106
  %330 = fcmp uno <2 x float> %328, zeroinitializer, !dbg !108
  %331 = or <2 x i1> %329, %330, !dbg !109
  %332 = select <2 x i1> %331, <2 x float> %328, <2 x float> splat (float 1.000000e+00), !dbg !110
  %333 = extractelement <2 x float> %332, i64 0, !dbg !110
  %334 = fadd float %333, 1.000000e+00, !dbg !111
  %335 = fmul float %334, 7.500000e-01, !dbg !112
  %336 = fsub float 3.750000e+00, %335, !dbg !113
  %337 = fmul float %334, %336, !dbg !114
  %338 = fadd float %337, -6.000000e+00, !dbg !115
  %339 = fmul float %333, 1.250000e+00, !dbg !116
  %340 = fadd float %339, -2.250000e+00, !dbg !117
  %341 = fmul float %333, %340, !dbg !118
  %342 = fsub float 1.000000e+00, %333, !dbg !119
  %343 = fmul float %342, 1.250000e+00, !dbg !120
  %344 = fadd float %343, -2.250000e+00, !dbg !121
  %345 = fmul float %342, %344, !dbg !122
  %346 = fmul float %342, %345, !dbg !123
  %347 = fadd float %346, 1.000000e+00, !dbg !124
  %348 = fmul float %347, %118, !dbg !125
  %349 = fsub <2 x float> <float 2.000000e+00, float poison>, %332, !dbg !126
  %350 = fadd <2 x float> %332, <float poison, float 1.000000e+00>, !dbg !126
  %351 = shufflevector <2 x float> %349, <2 x float> %350, <2 x i32> <i32 0, i32 3>, !dbg !126
  %352 = fsub float 2.000000e+00, %333, !dbg !126
  %353 = fmul float %352, 7.500000e-01, !dbg !127
  %354 = fsub float 3.750000e+00, %353, !dbg !128
  %355 = fmul float %347, %196, !dbg !129
  %356 = insertelement <2 x float> <float poison, float 7.500000e-01>, float %354, i64 0, !dbg !130
  %357 = fmul <2 x float> %351, %356, !dbg !130
  %358 = fadd <2 x float> %357, <float -6.000000e+00, float poison>, !dbg !131
  %359 = fsub <2 x float> <float poison, float 3.750000e+00>, %357, !dbg !131
  %360 = shufflevector <2 x float> %358, <2 x float> %359, <2 x i32> <i32 0, i32 3>, !dbg !131
  %361 = fmul <2 x float> %351, %360, !dbg !132
  %362 = fadd <2 x float> %361, <float 3.000000e+00, float -6.000000e+00>, !dbg !133
  %363 = extractelement <2 x float> %362, i64 0, !dbg !134
  %364 = fmul float %363, %202, !dbg !134
  %365 = insertelement <2 x float> %351, float %134, i64 0, !dbg !135
  %366 = fmul <2 x float> %362, %365, !dbg !135
  %367 = extractelement <2 x float> %332, i64 1, !dbg !136
  %368 = fsub float 1.000000e+00, %367, !dbg !137
  %369 = insertelement <2 x float> poison, float %334, i64 0, !dbg !138
  %370 = shufflevector <2 x float> %369, <2 x float> %332, <2 x i32> <i32 0, i32 2>, !dbg !138
  %371 = insertelement <2 x float> poison, float %338, i64 0, !dbg !138
  %372 = insertelement <2 x float> %371, float %341, i64 1, !dbg !138
  %373 = fmul <2 x float> %370, %372, !dbg !138
  %374 = fadd <2 x float> %373, <float 3.000000e+00, float 1.000000e+00>, !dbg !139
  %375 = extractelement <2 x float> %374, i64 0, !dbg !140
  %376 = fmul float %375, %84, !dbg !140
  %377 = extractelement <2 x float> %374, i64 1, !dbg !141
  %378 = fmul float %377, %102, !dbg !142
  %379 = fadd float %378, %376, !dbg !143
  %380 = fadd float %348, %379, !dbg !144
  %381 = insertelement <2 x float> <float poison, float 3.000000e+00>, float %380, i64 0, !dbg !145
  %382 = fadd <2 x float> %366, %381, !dbg !145
  %383 = insertelement <2 x i32> poison, i32 %162, i64 0, !dbg !81
  %384 = insertelement <2 x i32> %383, i32 %146, i64 1, !dbg !81
  %385 = bitcast <2 x i32> %384 to <2 x float>, !dbg !81
  %386 = fmul <2 x float> %374, %385, !dbg !146
  %387 = insertelement <2 x i32> poison, i32 %166, i64 0, !dbg !83
  %388 = insertelement <2 x i32> %387, i32 %142, i64 1, !dbg !83
  %389 = bitcast <2 x i32> %388 to <2 x float>, !dbg !83
  %390 = shufflevector <2 x float> %374, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !147
  %391 = fmul <2 x float> %390, %389, !dbg !147
  %392 = fadd <2 x float> %386, %391, !dbg !148
  %393 = insertelement <2 x i32> poison, i32 %170, i64 0, !dbg !85
  %394 = insertelement <2 x i32> %393, i32 %150, i64 1, !dbg !85
  %395 = bitcast <2 x i32> %394 to <2 x float>, !dbg !85
  %396 = insertelement <2 x float> poison, float %347, i64 0, !dbg !149
  %397 = shufflevector <2 x float> %396, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !149
  %398 = fmul <2 x float> %397, %395, !dbg !149
  %399 = fadd <2 x float> %392, %398, !dbg !150
  %400 = insertelement <2 x i32> poison, i32 %174, i64 0, !dbg !87
  %401 = insertelement <2 x i32> %400, i32 %154, i64 1, !dbg !87
  %402 = bitcast <2 x i32> %401 to <2 x float>, !dbg !87
  %403 = shufflevector <2 x float> %362, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !151
  %404 = fmul <2 x float> %403, %402, !dbg !151
  %405 = fadd <2 x float> %399, %404, !dbg !152
  %406 = fmul float %375, %184, !dbg !153
  %407 = fmul float %377, %190, !dbg !141
  %408 = fadd float %406, %407, !dbg !154
  %409 = fadd float %408, %355, !dbg !155
  %410 = fadd float %409, %364, !dbg !156
  %shift18 = shufflevector <2 x float> %382, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !157
  %411 = fmul <2 x float> %382, %shift18, !dbg !157
  %412 = insertelement <2 x float> %332, float %368, i64 0, !dbg !158
  %413 = fmul <2 x float> %412, splat (float 1.250000e+00), !dbg !158
  %414 = fadd <2 x float> %413, splat (float -2.250000e+00), !dbg !159
  %415 = fmul <2 x float> %412, %414, !dbg !160
  %416 = fmul <2 x float> %412, %415, !dbg !161
  %417 = fadd <2 x float> %416, splat (float 1.000000e+00), !dbg !162
  %418 = fmul <2 x float> %405, %417, !dbg !163
  %shift19 = shufflevector <2 x float> %418, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !164
  %419 = fadd <2 x float> %shift19, %411, !dbg !164
  %420 = fadd <2 x float> %318, %319, !dbg !165
  %421 = extractelement <2 x float> %420, i64 0, !dbg !165
  %422 = fadd <2 x float> %418, %419, !dbg !165
  %423 = extractelement <2 x float> %422, i64 0, !dbg !165
  %424 = fsub float 2.000000e+00, %267, !dbg !136
  %425 = fsub float 2.000000e+00, %367, !dbg !136
  %426 = fmul float %424, 7.500000e-01, !dbg !166
  %427 = fmul float %425, 7.500000e-01, !dbg !166
  %428 = fsub float 3.750000e+00, %426, !dbg !167
  %429 = fsub float 3.750000e+00, %427, !dbg !167
  %430 = fmul float %424, %428, !dbg !168
  %431 = fmul float %425, %429, !dbg !168
  %432 = fadd float %430, -6.000000e+00, !dbg !169
  %433 = fadd float %431, -6.000000e+00, !dbg !169
  %434 = fmul float %424, %432, !dbg !170
  %435 = fmul float %425, %433, !dbg !170
  %436 = fadd float %434, 3.000000e+00, !dbg !171
  %437 = fadd float %435, 3.000000e+00, !dbg !171
  %438 = fmul float %310, %436, !dbg !172
  %439 = fmul float %410, %437, !dbg !172
  %440 = fadd float %438, %421, !dbg !173
  %441 = fadd float %439, %423, !dbg !173
  %442 = sext i32 %17 to i64, !dbg !174
  %443 = getelementptr float, ptr addrspace(1) %0, i64 %442, !dbg !174
  %444 = bitcast float %440 to i32, !dbg !175
  %445 = bitcast float %441 to i32, !dbg !175
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %444, i32 %445, ptr addrspace(1) %443, i1 true) #2, !dbg !175
  ret void, !dbg !176
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "colbytc3gfhqkbojcnlx4xgbielcxhvaswagaoryvq7l2yq52rgk.py", directory: "inductor_cache/ol")
!4 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_floor_mul_rsub_sub_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_floor_mul_rsub_sub_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_floor_mul_rsub_sub_4", linkageName: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_floor_mul_rsub_sub_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 43, column: 36, scope: !7)
!18 = !DILocation(line: 43, column: 41, scope: !7)
!19 = !DILocation(line: 45, column: 21, scope: !7)
!20 = !DILocation(line: 47, column: 20, scope: !7)
!21 = !DILocation(line: 49, column: 20, scope: !7)
!22 = !DILocation(line: 50, column: 20, scope: !7)
!23 = !DILocation(line: 51, column: 28, scope: !7)
!24 = !DILocation(line: 28, column: 30, scope: !7)
!25 = !DILocation(line: 28, column: 35, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 35, scope: !7)
!28 = !DILocation(line: 30, column: 31, scope: !7)
!29 = !DILocation(line: 30, column: 36, scope: !7)
!30 = !DILocation(line: 31, column: 31, scope: !7)
!31 = !DILocation(line: 31, column: 36, scope: !7)
!32 = !DILocation(line: 32, column: 31, scope: !7)
!33 = !DILocation(line: 32, column: 36, scope: !7)
!34 = !DILocation(line: 33, column: 31, scope: !7)
!35 = !DILocation(line: 33, column: 36, scope: !7)
!36 = !DILocation(line: 34, column: 31, scope: !7)
!37 = !DILocation(line: 34, column: 36, scope: !7)
!38 = !DILocation(line: 35, column: 32, scope: !7)
!39 = !DILocation(line: 35, column: 37, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 38, column: 18, scope: !7)
!42 = !DILocation(line: 39, column: 32, scope: !7)
!43 = !DILocation(line: 40, column: 18, scope: !7)
!44 = !DILocation(line: 41, column: 18, scope: !7)
!45 = !DILocation(line: 42, column: 32, scope: !7)
!46 = !DILocation(line: 43, column: 58, scope: !7)
!47 = !DILocation(line: 43, column: 30, scope: !7)
!48 = !DILocation(line: 43, column: 65, scope: !7)
!49 = !DILocation(line: 69, column: 20, scope: !7)
!50 = !DILocation(line: 70, column: 20, scope: !7)
!51 = !DILocation(line: 71, column: 35, scope: !7)
!52 = !DILocation(line: 72, column: 31, scope: !7)
!53 = !DILocation(line: 72, column: 67, scope: !7)
!54 = !DILocation(line: 82, column: 20, scope: !7)
!55 = !DILocation(line: 83, column: 20, scope: !7)
!56 = !DILocation(line: 84, column: 35, scope: !7)
!57 = !DILocation(line: 85, column: 31, scope: !7)
!58 = !DILocation(line: 85, column: 67, scope: !7)
!59 = !DILocation(line: 94, column: 20, scope: !7)
!60 = !DILocation(line: 95, column: 20, scope: !7)
!61 = !DILocation(line: 96, column: 35, scope: !7)
!62 = !DILocation(line: 97, column: 31, scope: !7)
!63 = !DILocation(line: 97, column: 67, scope: !7)
!64 = !DILocation(line: 108, column: 20, scope: !7)
!65 = !DILocation(line: 109, column: 20, scope: !7)
!66 = !DILocation(line: 110, column: 35, scope: !7)
!67 = !DILocation(line: 111, column: 59, scope: !7)
!68 = !DILocation(line: 111, column: 31, scope: !7)
!69 = !DILocation(line: 111, column: 67, scope: !7)
!70 = !DILocation(line: 113, column: 31, scope: !7)
!71 = !DILocation(line: 113, column: 68, scope: !7)
!72 = !DILocation(line: 116, column: 31, scope: !7)
!73 = !DILocation(line: 116, column: 68, scope: !7)
!74 = !DILocation(line: 119, column: 31, scope: !7)
!75 = !DILocation(line: 119, column: 68, scope: !7)
!76 = !DILocation(line: 122, column: 20, scope: !7)
!77 = !DILocation(line: 123, column: 20, scope: !7)
!78 = !DILocation(line: 124, column: 35, scope: !7)
!79 = !DILocation(line: 125, column: 59, scope: !7)
!80 = !DILocation(line: 125, column: 31, scope: !7)
!81 = !DILocation(line: 125, column: 67, scope: !7)
!82 = !DILocation(line: 127, column: 31, scope: !7)
!83 = !DILocation(line: 127, column: 68, scope: !7)
!84 = !DILocation(line: 130, column: 32, scope: !7)
!85 = !DILocation(line: 130, column: 69, scope: !7)
!86 = !DILocation(line: 133, column: 32, scope: !7)
!87 = !DILocation(line: 133, column: 69, scope: !7)
!88 = !DILocation(line: 136, column: 22, scope: !7)
!89 = !DILocation(line: 137, column: 22, scope: !7)
!90 = !DILocation(line: 138, column: 38, scope: !7)
!91 = !DILocation(line: 139, column: 60, scope: !7)
!92 = !DILocation(line: 139, column: 32, scope: !7)
!93 = !DILocation(line: 139, column: 69, scope: !7)
!94 = !DILocation(line: 141, column: 32, scope: !7)
!95 = !DILocation(line: 141, column: 70, scope: !7)
!96 = !DILocation(line: 144, column: 32, scope: !7)
!97 = !DILocation(line: 144, column: 70, scope: !7)
!98 = !DILocation(line: 147, column: 32, scope: !7)
!99 = !DILocation(line: 147, column: 70, scope: !7)
!100 = !DILocation(line: 155, column: 29, scope: !7)
!101 = !DILocation(line: 52, column: 20, scope: !7)
!102 = !DILocation(line: 121, column: 29, scope: !103, inlinedAt: !105)
!103 = distinct !DILexicalBlockFile(scope: !7, file: !104, discriminator: 0)
!104 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!105 = !DILocation(line: 54, column: 42, scope: !7)
!106 = !DILocation(line: 110, column: 15, scope: !103, inlinedAt: !107)
!107 = !DILocation(line: 56, column: 42, scope: !7)
!108 = !DILocation(line: 112, column: 21, scope: !103, inlinedAt: !107)
!109 = !DILocation(line: 112, column: 16, scope: !103, inlinedAt: !107)
!110 = !DILocation(line: 113, column: 29, scope: !103, inlinedAt: !107)
!111 = !DILocation(line: 57, column: 20, scope: !7)
!112 = !DILocation(line: 59, column: 20, scope: !7)
!113 = !DILocation(line: 61, column: 20, scope: !7)
!114 = !DILocation(line: 62, column: 20, scope: !7)
!115 = !DILocation(line: 64, column: 20, scope: !7)
!116 = !DILocation(line: 74, column: 20, scope: !7)
!117 = !DILocation(line: 76, column: 20, scope: !7)
!118 = !DILocation(line: 77, column: 20, scope: !7)
!119 = !DILocation(line: 86, column: 20, scope: !7)
!120 = !DILocation(line: 87, column: 20, scope: !7)
!121 = !DILocation(line: 88, column: 20, scope: !7)
!122 = !DILocation(line: 89, column: 20, scope: !7)
!123 = !DILocation(line: 90, column: 20, scope: !7)
!124 = !DILocation(line: 91, column: 20, scope: !7)
!125 = !DILocation(line: 92, column: 20, scope: !7)
!126 = !DILocation(line: 99, column: 20, scope: !7)
!127 = !DILocation(line: 100, column: 20, scope: !7)
!128 = !DILocation(line: 101, column: 20, scope: !7)
!129 = !DILocation(line: 145, column: 22, scope: !7)
!130 = !DILocation(line: 102, column: 20, scope: !7)
!131 = !DILocation(line: 103, column: 20, scope: !7)
!132 = !DILocation(line: 104, column: 20, scope: !7)
!133 = !DILocation(line: 105, column: 20, scope: !7)
!134 = !DILocation(line: 148, column: 22, scope: !7)
!135 = !DILocation(line: 106, column: 20, scope: !7)
!136 = !DILocation(line: 182, column: 21, scope: !7)
!137 = !DILocation(line: 174, column: 21, scope: !7)
!138 = !DILocation(line: 65, column: 20, scope: !7)
!139 = !DILocation(line: 67, column: 20, scope: !7)
!140 = !DILocation(line: 68, column: 19, scope: !7)
!141 = !DILocation(line: 142, column: 22, scope: !7)
!142 = !DILocation(line: 80, column: 20, scope: !7)
!143 = !DILocation(line: 81, column: 20, scope: !7)
!144 = !DILocation(line: 93, column: 20, scope: !7)
!145 = !DILocation(line: 107, column: 20, scope: !7)
!146 = !DILocation(line: 126, column: 20, scope: !7)
!147 = !DILocation(line: 128, column: 20, scope: !7)
!148 = !DILocation(line: 129, column: 21, scope: !7)
!149 = !DILocation(line: 131, column: 22, scope: !7)
!150 = !DILocation(line: 132, column: 22, scope: !7)
!151 = !DILocation(line: 134, column: 22, scope: !7)
!152 = !DILocation(line: 135, column: 22, scope: !7)
!153 = !DILocation(line: 140, column: 22, scope: !7)
!154 = !DILocation(line: 143, column: 22, scope: !7)
!155 = !DILocation(line: 146, column: 22, scope: !7)
!156 = !DILocation(line: 149, column: 22, scope: !7)
!157 = !DILocation(line: 166, column: 21, scope: !7)
!158 = !DILocation(line: 175, column: 22, scope: !7)
!159 = !DILocation(line: 176, column: 22, scope: !7)
!160 = !DILocation(line: 177, column: 22, scope: !7)
!161 = !DILocation(line: 178, column: 22, scope: !7)
!162 = !DILocation(line: 179, column: 22, scope: !7)
!163 = !DILocation(line: 180, column: 22, scope: !7)
!164 = !DILocation(line: 173, column: 22, scope: !7)
!165 = !DILocation(line: 181, column: 22, scope: !7)
!166 = !DILocation(line: 183, column: 22, scope: !7)
!167 = !DILocation(line: 184, column: 22, scope: !7)
!168 = !DILocation(line: 185, column: 22, scope: !7)
!169 = !DILocation(line: 186, column: 22, scope: !7)
!170 = !DILocation(line: 187, column: 22, scope: !7)
!171 = !DILocation(line: 188, column: 22, scope: !7)
!172 = !DILocation(line: 189, column: 22, scope: !7)
!173 = !DILocation(line: 190, column: 22, scope: !7)
!174 = !DILocation(line: 191, column: 28, scope: !7)
!175 = !DILocation(line: 191, column: 41, scope: !7)
!176 = !DILocation(line: 191, column: 4, scope: !7)
