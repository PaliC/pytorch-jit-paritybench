; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 1, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 6, !dbg !12
  %.lobit = and i32 %13, 1, !dbg !12
  %14 = or disjoint i32 %11, %.lobit, !dbg !13
  %15 = icmp slt i32 %14, 196, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %17 = shl i32 %16, 7, !dbg !16
  %18 = shl i32 %12, 1, !dbg !17
  %19 = and i32 %18, 126, !dbg !17
  %20 = and i32 %12, 127, !dbg !17
  %21 = or disjoint i32 %17, %19, !dbg !18
  %22 = or disjoint i32 %17, %20, !dbg !18
  %23 = icmp slt i32 %21, 96, !dbg !19
  %24 = icmp slt i32 %22, 96, !dbg !19
  %25 = mul i32 %14, 96, !dbg !20
  %26 = add i32 %21, %25, !dbg !21
  %27 = sext i32 %26 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = and i1 %15, %23, !dbg !23
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 %29) #4, !dbg !24
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !24
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !24
  %33 = and i32 %18, 254, !dbg !24
  %34 = lshr i32 %33, 7, !dbg !24
  %35 = or disjoint i32 %34, %33, !dbg !24
  %36 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %35, !dbg !24
  %37 = insertelement <1 x i32> poison, i32 %31, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %36, <1 x i32> %37, i1 true) #4, !dbg !24
  %38 = or disjoint i32 %33, 1, !dbg !24
  %39 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %34, !dbg !24
  %40 = getelementptr inbounds float, ptr addrspace(3) %39, i32 %38, !dbg !24
  %41 = insertelement <1 x i32> poison, i32 %32, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %40, <1 x i32> %41, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %42 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %20, !dbg !24
  %43 = load float, ptr addrspace(3) %42, align 4, !dbg !24
  %44 = getelementptr inbounds i8, ptr addrspace(3) %42, i32 516, !dbg !24
  %45 = load float, ptr addrspace(3) %44, align 4, !dbg !24
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !25
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %29) #4, !dbg !26
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !26
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %50 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %36, <1 x i32> %50, i1 true) #4, !dbg !26
  %51 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %40, <1 x i32> %51, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %52 = load float, ptr addrspace(3) %42, align 4, !dbg !26
  %53 = load float, ptr addrspace(3) %44, align 4, !dbg !26
  %54 = sext i32 %22 to i64, !dbg !27
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !27
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %24) #4, !dbg !28
  %57 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !29
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %24) #4, !dbg !30
  %59 = bitcast i32 %58 to float, !dbg !30
  %60 = getelementptr float, ptr addrspace(1) %4, i64 %54, !dbg !31
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %24) #4, !dbg !32
  %62 = getelementptr float, ptr addrspace(1) %5, i64 %54, !dbg !33
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %24) #4, !dbg !34
  %64 = fadd float %59, 0x3EE4F8B580000000, !dbg !35
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %65, 0, !dbg !36
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %66, 0, !dbg !36
  br i1 %.not.i, label %72, label %67, !dbg !36

67:                                               ; preds = %9
  br i1 %.not1.i, label %70, label %68, !dbg !36

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

72:                                               ; preds = %9
  br i1 %.not1.i, label %75, label %73, !dbg !36

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %68, %70, %73, %75
  %.0.i = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !36
  %77 = bitcast i32 %56 to float, !dbg !28
  %78 = fsub float %53, %77, !dbg !37
  %79 = fsub float %52, %77, !dbg !37
  %80 = bitcast i32 %63 to float, !dbg !34
  %81 = bitcast i32 %61 to float, !dbg !32
  %82 = or disjoint i32 %11, 1, !dbg !13
  %83 = icmp slt i32 %82, 196, !dbg !14
  %84 = and i1 %83, %24, !dbg !23
  %85 = icmp slt i32 %11, 196, !dbg !14
  %86 = and i1 %85, %24, !dbg !23
  %.frozen = freeze i32 %82, !dbg !38
  %87 = sdiv i32 %.frozen, 49, !dbg !38
  %.frozen1 = freeze i32 %11, !dbg !38
  %88 = sdiv i32 %.frozen1, 49, !dbg !38
  %89 = mul i32 %87, 49, !dbg !39
  %.decomposed = sub i32 %.frozen, %89, !dbg !39
  %90 = mul i32 %88, 49, !dbg !39
  %.decomposed2 = sub i32 %.frozen1, %90, !dbg !39
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !40
  %92 = fmul float %79, %91, !dbg !41
  %93 = fmul float %78, %91, !dbg !41
  %94 = fmul float %92, %81, !dbg !42
  %95 = fmul float %93, %81, !dbg !42
  %96 = fadd float %94, %80, !dbg !43
  %97 = fadd float %95, %80, !dbg !43
  %98 = fadd float %43, %96, !dbg !44
  %99 = fadd float %45, %97, !dbg !44
  %100 = mul i32 %22, 49, !dbg !45
  %101 = add i32 %100, %.decomposed, !dbg !46
  %102 = mul i32 %88, 4704, !dbg !47
  %103 = mul i32 %87, 4704, !dbg !47
  %104 = add i32 %102, %.decomposed2, !dbg !46
  %105 = add i32 %104, %100, !dbg !48
  %106 = add i32 %101, %103, !dbg !48
  %107 = sext i32 %105 to i64, !dbg !49
  %108 = getelementptr float, ptr addrspace(1) %6, i64 %107, !dbg !49
  %109 = sext i32 %106 to i64, !dbg !49
  %110 = getelementptr float, ptr addrspace(1) %6, i64 %109, !dbg !49
  %111 = bitcast float %98 to i32, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %111, ptr addrspace(1) %108, i1 %86) #4, !dbg !50
  %112 = bitcast float %99 to i32, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %112, ptr addrspace(1) %110, i1 %84) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxklqyirgid5ft55pdgi4crp6bulxvd5ibodz4yeudvxfeadxgav.py", directory: "inductor_cache/xk")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_21, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_21, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_21", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 38, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 51, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 43, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 35, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 37, column: 31, scope: !7)
!34 = !DILocation(line: 37, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 41, column: 26, scope: !7)
!37 = !DILocation(line: 38, column: 18, scope: !7)
!38 = !DILocation(line: 31, column: 19, scope: !7)
!39 = !DILocation(line: 30, column: 19, scope: !7)
!40 = !DILocation(line: 43, column: 18, scope: !7)
!41 = !DILocation(line: 46, column: 19, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 49, column: 19, scope: !7)
!45 = !DILocation(line: 50, column: 33, scope: !7)
!46 = !DILocation(line: 50, column: 30, scope: !7)
!47 = !DILocation(line: 50, column: 43, scope: !7)
!48 = !DILocation(line: 50, column: 38, scope: !7)
!49 = !DILocation(line: 50, column: 25, scope: !7)
!50 = !DILocation(line: 50, column: 55, scope: !7)
!51 = !DILocation(line: 50, column: 4, scope: !7)
