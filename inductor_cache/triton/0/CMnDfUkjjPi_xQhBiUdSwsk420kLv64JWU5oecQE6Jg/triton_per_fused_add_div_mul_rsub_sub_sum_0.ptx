//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_per_fused_add_div_mul_rsub_sub_sum_0 // -- Begin function triton_per_fused_add_div_mul_rsub_sub_sum_0
.extern .shared .align 16 .b8 global_smem[];
                                        // @triton_per_fused_add_div_mul_rsub_sub_sum_0
.visible .entry triton_per_fused_add_div_mul_rsub_sub_sum_0(
	.param .u64 .ptr .global .align 1 triton_per_fused_add_div_mul_rsub_sub_sum_0_param_0,
	.param .u64 .ptr .global .align 1 triton_per_fused_add_div_mul_rsub_sub_sum_0_param_1,
	.param .u64 .ptr .global .align 1 triton_per_fused_add_div_mul_rsub_sub_sum_0_param_2,
	.param .u32 triton_per_fused_add_div_mul_rsub_sub_sum_0_param_3
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<48>;
	.reg .b32 	%r<226>;
	.reg .f32 	%f<202>;
	.reg .b64 	%rd<13>;
	.loc	1 19 0                          // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:19:0
$L__func_begin0:
	.loc	1 19 0                          // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:19:0

// %bb.0:
	ld.param.u64 	%rd9, [triton_per_fused_add_div_mul_rsub_sub_sum_0_param_0];
	ld.param.u64 	%rd10, [triton_per_fused_add_div_mul_rsub_sub_sum_0_param_1];
$L__tmp0:
	.loc	1 26 34                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:26:34
	mov.u32 	%r94, %tid.x;
	and.b32  	%r95, %r94, 31;
	ld.param.u64 	%rd11, [triton_per_fused_add_div_mul_rsub_sub_sum_0_param_2];
	and.b32  	%r96, %r94, 63;
	.loc	1 30 30                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:30:30
	mul.wide.u32 	%rd12, %r96, 4;
	add.s64 	%rd1, %rd10, %rd12;
	mov.pred 	%p1, -1;
	.loc	1 30 35                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:30:35
	// begin inline asm
	mov.u32 %r1, 0x0;
	@%p1 ld.global.b32 { %r1 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	%f1, %r1;
	.loc	1 31 30                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:31:30
	add.s64 	%rd2, %rd11, %rd12;
	.loc	1 31 35                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:31:35
	// begin inline asm
	mov.u32 %r2, 0x0;
	@%p1 ld.global.b32 { %r2 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	%f2, %r2;
	.loc	1 32 31                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:32:31
	add.s64 	%rd3, %rd1, 256;
	.loc	1 32 41                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:32:41
	// begin inline asm
	mov.u32 %r3, 0x0;
	@%p1 ld.global.b32 { %r3 }, [ %rd3 + 0 ];
	// end inline asm
	mov.b32 	%f3, %r3;
	.loc	1 33 31                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:33:31
	add.s64 	%rd4, %rd2, 256;
	.loc	1 33 41                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:33:41
	// begin inline asm
	mov.u32 %r4, 0x0;
	@%p1 ld.global.b32 { %r4 }, [ %rd4 + 0 ];
	// end inline asm
	mov.b32 	%f4, %r4;
	.loc	1 34 31                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:34:31
	add.s64 	%rd5, %rd1, 512;
	.loc	1 34 42                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:34:42
	// begin inline asm
	mov.u32 %r5, 0x0;
	@%p1 ld.global.b32 { %r5 }, [ %rd5 + 0 ];
	// end inline asm
	mov.b32 	%f5, %r5;
	.loc	1 35 31                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:35:31
	add.s64 	%rd6, %rd2, 512;
	.loc	1 35 42                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:35:42
	// begin inline asm
	mov.u32 %r6, 0x0;
	@%p1 ld.global.b32 { %r6 }, [ %rd6 + 0 ];
	// end inline asm
	mov.b32 	%f6, %r6;
	.loc	1 36 31                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:36:31
	add.s64 	%rd7, %rd1, 768;
	.loc	1 36 42                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:36:42
	// begin inline asm
	mov.u32 %r7, 0x0;
	@%p1 ld.global.b32 { %r7 }, [ %rd7 + 0 ];
	// end inline asm
	mov.b32 	%f7, %r7;
	.loc	1 37 31                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:37:31
	add.s64 	%rd8, %rd2, 768;
	.loc	1 37 42                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:37:42
	// begin inline asm
	mov.u32 %r8, 0x0;
	@%p1 ld.global.b32 { %r8 }, [ %rd8 + 0 ];
	// end inline asm
	mov.b32 	%f8, %r8;
$L__tmp1:
	.loc	2 267 36                        // standard.py:267:36
	shfl.sync.bfly.b32	%r97, %r1, 16, 31, -1;
	mov.b32 	%f9, %r97;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f10, %f1, %f9;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r98, %f10;
	shfl.sync.bfly.b32	%r99, %r98, 8, 31, -1;
	mov.b32 	%f11, %r99;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f12, %f10, %f11;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r100, %f12;
	shfl.sync.bfly.b32	%r101, %r100, 4, 31, -1;
	mov.b32 	%f13, %r101;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f14, %f12, %f13;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r102, %f14;
	shfl.sync.bfly.b32	%r103, %r102, 2, 31, -1;
	mov.b32 	%f15, %r103;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f16, %f14, %f15;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r104, %f16;
	shfl.sync.bfly.b32	%r105, %r104, 1, 31, -1;
	mov.b32 	%f17, %r105;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f18, %f16, %f17;
	.loc	2 267 36                        // standard.py:267:36
	setp.eq.s32 	%p9, %r95, 0;
	shr.u32 	%r106, %r94, 3;
	and.b32  	%r107, %r106, 4;
	mov.u32 	%r108, global_smem;
	add.s32 	%r9, %r108, %r107;
	mov.b32 	%r10, %f18;
	// begin inline asm
	@%p9 st.shared.b32 [ %r9 + 0 ], %r10;
	// end inline asm
	bar.sync 	0;
	setp.lt.s32 	%p10, %r94, 2;
	shl.b32 	%r109, %r94, 2;
	add.s32 	%r12, %r108, %r109;
	// begin inline asm
	@%p10 ld.shared.b32 %r11, [ %r12 + 0 ];
	// end inline asm
	mov.b32 	%f19, %r11;
	shfl.sync.bfly.b32	%r110, %r11, 1, 31, -1;
	mov.b32 	%f20, %r110;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f21, %f19, %f20;
	.loc	2 267 36                        // standard.py:267:36
	and.b32  	%r111, %r94, 1;
	setp.eq.b32 	%p46, %r111, 1;
	not.pred 	%p47, %p46;
	and.pred  	%p11, %p10, %p47;
	mov.b32 	%r14, %f21;
	// begin inline asm
	@%p11 st.shared.b32 [ %r12 + 0 ], %r14;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f22, [global_smem];
$L__tmp2:
	.loc	2 267 36                        // standard.py:267:36
	bar.sync 	0;
	shfl.sync.bfly.b32	%r112, %r2, 16, 31, -1;
	mov.b32 	%f23, %r112;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f24, %f2, %f23;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r113, %f24;
	shfl.sync.bfly.b32	%r114, %r113, 8, 31, -1;
	mov.b32 	%f25, %r114;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f26, %f24, %f25;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r115, %f26;
	shfl.sync.bfly.b32	%r116, %r115, 4, 31, -1;
	mov.b32 	%f27, %r116;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f28, %f26, %f27;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r117, %f28;
	shfl.sync.bfly.b32	%r118, %r117, 2, 31, -1;
	mov.b32 	%f29, %r118;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f30, %f28, %f29;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r119, %f30;
	shfl.sync.bfly.b32	%r120, %r119, 1, 31, -1;
	mov.b32 	%f31, %r120;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f32, %f30, %f31;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r16, %f32;
	// begin inline asm
	@%p9 st.shared.b32 [ %r9 + 0 ], %r16;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p10 ld.shared.b32 %r17, [ %r12 + 0 ];
	// end inline asm
	mov.b32 	%f33, %r17;
	shfl.sync.bfly.b32	%r121, %r17, 1, 31, -1;
	mov.b32 	%f34, %r121;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f35, %f33, %f34;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r20, %f35;
	// begin inline asm
	@%p11 st.shared.b32 [ %r12 + 0 ], %r20;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f36, [global_smem];
$L__tmp3:
	.loc	1 42 18                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:42:18
	mul.f32 	%f37, %f1, %f2;
$L__tmp4:
	.loc	2 267 36                        // standard.py:267:36
	bar.sync 	0;
	mov.b32 	%r122, %f37;
	shfl.sync.bfly.b32	%r123, %r122, 16, 31, -1;
	mov.b32 	%f38, %r123;
	.loc	2 256 15                        // standard.py:256:15
	fma.rn.f32 	%f39, %f1, %f2, %f38;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r124, %f39;
	shfl.sync.bfly.b32	%r125, %r124, 8, 31, -1;
	mov.b32 	%f40, %r125;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f41, %f39, %f40;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r126, %f41;
	shfl.sync.bfly.b32	%r127, %r126, 4, 31, -1;
	mov.b32 	%f42, %r127;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f43, %f41, %f42;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r128, %f43;
	shfl.sync.bfly.b32	%r129, %r128, 2, 31, -1;
	mov.b32 	%f44, %r129;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f45, %f43, %f44;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r130, %f45;
	shfl.sync.bfly.b32	%r131, %r130, 1, 31, -1;
	mov.b32 	%f46, %r131;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f47, %f45, %f46;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r22, %f47;
	// begin inline asm
	@%p9 st.shared.b32 [ %r9 + 0 ], %r22;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p10 ld.shared.b32 %r23, [ %r12 + 0 ];
	// end inline asm
	mov.b32 	%f48, %r23;
	shfl.sync.bfly.b32	%r132, %r23, 1, 31, -1;
	mov.b32 	%f49, %r132;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f50, %f48, %f49;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r26, %f50;
	// begin inline asm
	@%p11 st.shared.b32 [ %r12 + 0 ], %r26;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f51, [global_smem];
$L__tmp5:
	.loc	2 267 36                        // standard.py:267:36
	bar.sync 	0;
	shfl.sync.bfly.b32	%r133, %r3, 16, 31, -1;
	mov.b32 	%f52, %r133;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f53, %f3, %f52;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r134, %f53;
	shfl.sync.bfly.b32	%r135, %r134, 8, 31, -1;
	mov.b32 	%f54, %r135;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f55, %f53, %f54;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r136, %f55;
	shfl.sync.bfly.b32	%r137, %r136, 4, 31, -1;
	mov.b32 	%f56, %r137;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f57, %f55, %f56;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r138, %f57;
	shfl.sync.bfly.b32	%r139, %r138, 2, 31, -1;
	mov.b32 	%f58, %r139;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f59, %f57, %f58;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r140, %f59;
	shfl.sync.bfly.b32	%r141, %r140, 1, 31, -1;
	mov.b32 	%f60, %r141;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f61, %f59, %f60;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r28, %f61;
	// begin inline asm
	@%p9 st.shared.b32 [ %r9 + 0 ], %r28;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p10 ld.shared.b32 %r29, [ %r12 + 0 ];
	// end inline asm
	mov.b32 	%f62, %r29;
	shfl.sync.bfly.b32	%r142, %r29, 1, 31, -1;
	mov.b32 	%f63, %r142;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f64, %f62, %f63;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r32, %f64;
	// begin inline asm
	@%p11 st.shared.b32 [ %r12 + 0 ], %r32;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f65, [global_smem];
$L__tmp6:
	.loc	2 267 36                        // standard.py:267:36
	bar.sync 	0;
	shfl.sync.bfly.b32	%r143, %r4, 16, 31, -1;
	mov.b32 	%f66, %r143;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f67, %f4, %f66;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r144, %f67;
	shfl.sync.bfly.b32	%r145, %r144, 8, 31, -1;
	mov.b32 	%f68, %r145;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f69, %f67, %f68;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r146, %f69;
	shfl.sync.bfly.b32	%r147, %r146, 4, 31, -1;
	mov.b32 	%f70, %r147;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f71, %f69, %f70;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r148, %f71;
	shfl.sync.bfly.b32	%r149, %r148, 2, 31, -1;
	mov.b32 	%f72, %r149;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f73, %f71, %f72;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r150, %f73;
	shfl.sync.bfly.b32	%r151, %r150, 1, 31, -1;
	mov.b32 	%f74, %r151;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f75, %f73, %f74;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r34, %f75;
	// begin inline asm
	@%p9 st.shared.b32 [ %r9 + 0 ], %r34;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p10 ld.shared.b32 %r35, [ %r12 + 0 ];
	// end inline asm
	mov.b32 	%f76, %r35;
	shfl.sync.bfly.b32	%r152, %r35, 1, 31, -1;
	mov.b32 	%f77, %r152;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f78, %f76, %f77;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r38, %f78;
	// begin inline asm
	@%p11 st.shared.b32 [ %r12 + 0 ], %r38;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f79, [global_smem];
$L__tmp7:
	.loc	1 49 20                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:49:20
	mul.f32 	%f80, %f3, %f4;
$L__tmp8:
	.loc	2 267 36                        // standard.py:267:36
	bar.sync 	0;
	mov.b32 	%r153, %f80;
	shfl.sync.bfly.b32	%r154, %r153, 16, 31, -1;
	mov.b32 	%f81, %r154;
	.loc	2 256 15                        // standard.py:256:15
	fma.rn.f32 	%f82, %f3, %f4, %f81;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r155, %f82;
	shfl.sync.bfly.b32	%r156, %r155, 8, 31, -1;
	mov.b32 	%f83, %r156;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f84, %f82, %f83;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r157, %f84;
	shfl.sync.bfly.b32	%r158, %r157, 4, 31, -1;
	mov.b32 	%f85, %r158;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f86, %f84, %f85;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r159, %f86;
	shfl.sync.bfly.b32	%r160, %r159, 2, 31, -1;
	mov.b32 	%f87, %r160;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f88, %f86, %f87;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r161, %f88;
	shfl.sync.bfly.b32	%r162, %r161, 1, 31, -1;
	mov.b32 	%f89, %r162;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f90, %f88, %f89;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r40, %f90;
	// begin inline asm
	@%p9 st.shared.b32 [ %r9 + 0 ], %r40;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p10 ld.shared.b32 %r41, [ %r12 + 0 ];
	// end inline asm
	mov.b32 	%f91, %r41;
	shfl.sync.bfly.b32	%r163, %r41, 1, 31, -1;
	mov.b32 	%f92, %r163;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f93, %f91, %f92;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r44, %f93;
	// begin inline asm
	@%p11 st.shared.b32 [ %r12 + 0 ], %r44;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f94, [global_smem];
$L__tmp9:
	.loc	2 267 36                        // standard.py:267:36
	bar.sync 	0;
	shfl.sync.bfly.b32	%r164, %r5, 16, 31, -1;
	mov.b32 	%f95, %r164;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f96, %f5, %f95;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r165, %f96;
	shfl.sync.bfly.b32	%r166, %r165, 8, 31, -1;
	mov.b32 	%f97, %r166;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f98, %f96, %f97;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r167, %f98;
	shfl.sync.bfly.b32	%r168, %r167, 4, 31, -1;
	mov.b32 	%f99, %r168;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f100, %f98, %f99;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r169, %f100;
	shfl.sync.bfly.b32	%r170, %r169, 2, 31, -1;
	mov.b32 	%f101, %r170;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f102, %f100, %f101;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r171, %f102;
	shfl.sync.bfly.b32	%r172, %r171, 1, 31, -1;
	mov.b32 	%f103, %r172;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f104, %f102, %f103;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r46, %f104;
	// begin inline asm
	@%p9 st.shared.b32 [ %r9 + 0 ], %r46;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p10 ld.shared.b32 %r47, [ %r12 + 0 ];
	// end inline asm
	mov.b32 	%f105, %r47;
	shfl.sync.bfly.b32	%r173, %r47, 1, 31, -1;
	mov.b32 	%f106, %r173;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f107, %f105, %f106;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r50, %f107;
	// begin inline asm
	@%p11 st.shared.b32 [ %r12 + 0 ], %r50;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f108, [global_smem];
$L__tmp10:
	.loc	2 267 36                        // standard.py:267:36
	bar.sync 	0;
	shfl.sync.bfly.b32	%r174, %r6, 16, 31, -1;
	mov.b32 	%f109, %r174;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f110, %f6, %f109;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r175, %f110;
	shfl.sync.bfly.b32	%r176, %r175, 8, 31, -1;
	mov.b32 	%f111, %r176;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f112, %f110, %f111;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r177, %f112;
	shfl.sync.bfly.b32	%r178, %r177, 4, 31, -1;
	mov.b32 	%f113, %r178;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f114, %f112, %f113;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r179, %f114;
	shfl.sync.bfly.b32	%r180, %r179, 2, 31, -1;
	mov.b32 	%f115, %r180;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f116, %f114, %f115;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r181, %f116;
	shfl.sync.bfly.b32	%r182, %r181, 1, 31, -1;
	mov.b32 	%f117, %r182;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f118, %f116, %f117;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r52, %f118;
	// begin inline asm
	@%p9 st.shared.b32 [ %r9 + 0 ], %r52;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p10 ld.shared.b32 %r53, [ %r12 + 0 ];
	// end inline asm
	mov.b32 	%f119, %r53;
	shfl.sync.bfly.b32	%r183, %r53, 1, 31, -1;
	mov.b32 	%f120, %r183;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f121, %f119, %f120;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r56, %f121;
	// begin inline asm
	@%p11 st.shared.b32 [ %r12 + 0 ], %r56;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f122, [global_smem];
$L__tmp11:
	.loc	1 56 20                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:56:20
	mul.f32 	%f123, %f5, %f6;
$L__tmp12:
	.loc	2 267 36                        // standard.py:267:36
	bar.sync 	0;
	mov.b32 	%r184, %f123;
	shfl.sync.bfly.b32	%r185, %r184, 16, 31, -1;
	mov.b32 	%f124, %r185;
	.loc	2 256 15                        // standard.py:256:15
	fma.rn.f32 	%f125, %f5, %f6, %f124;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r186, %f125;
	shfl.sync.bfly.b32	%r187, %r186, 8, 31, -1;
	mov.b32 	%f126, %r187;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f127, %f125, %f126;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r188, %f127;
	shfl.sync.bfly.b32	%r189, %r188, 4, 31, -1;
	mov.b32 	%f128, %r189;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f129, %f127, %f128;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r190, %f129;
	shfl.sync.bfly.b32	%r191, %r190, 2, 31, -1;
	mov.b32 	%f130, %r191;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f131, %f129, %f130;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r192, %f131;
	shfl.sync.bfly.b32	%r193, %r192, 1, 31, -1;
	mov.b32 	%f132, %r193;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f133, %f131, %f132;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r58, %f133;
	// begin inline asm
	@%p9 st.shared.b32 [ %r9 + 0 ], %r58;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p10 ld.shared.b32 %r59, [ %r12 + 0 ];
	// end inline asm
	mov.b32 	%f134, %r59;
	shfl.sync.bfly.b32	%r194, %r59, 1, 31, -1;
	mov.b32 	%f135, %r194;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f136, %f134, %f135;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r62, %f136;
	// begin inline asm
	@%p11 st.shared.b32 [ %r12 + 0 ], %r62;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f137, [global_smem];
$L__tmp13:
	.loc	2 267 36                        // standard.py:267:36
	bar.sync 	0;
	shfl.sync.bfly.b32	%r195, %r7, 16, 31, -1;
	mov.b32 	%f138, %r195;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f139, %f7, %f138;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r196, %f139;
	shfl.sync.bfly.b32	%r197, %r196, 8, 31, -1;
	mov.b32 	%f140, %r197;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f141, %f139, %f140;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r198, %f141;
	shfl.sync.bfly.b32	%r199, %r198, 4, 31, -1;
	mov.b32 	%f142, %r199;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f143, %f141, %f142;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r200, %f143;
	shfl.sync.bfly.b32	%r201, %r200, 2, 31, -1;
	mov.b32 	%f144, %r201;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f145, %f143, %f144;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r202, %f145;
	shfl.sync.bfly.b32	%r203, %r202, 1, 31, -1;
	mov.b32 	%f146, %r203;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f147, %f145, %f146;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r64, %f147;
	// begin inline asm
	@%p9 st.shared.b32 [ %r9 + 0 ], %r64;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p10 ld.shared.b32 %r65, [ %r12 + 0 ];
	// end inline asm
	mov.b32 	%f148, %r65;
	shfl.sync.bfly.b32	%r204, %r65, 1, 31, -1;
	mov.b32 	%f149, %r204;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f150, %f148, %f149;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r68, %f150;
	// begin inline asm
	@%p11 st.shared.b32 [ %r12 + 0 ], %r68;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f151, [global_smem];
$L__tmp14:
	.loc	2 267 36                        // standard.py:267:36
	bar.sync 	0;
	shfl.sync.bfly.b32	%r205, %r8, 16, 31, -1;
	mov.b32 	%f152, %r205;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f153, %f8, %f152;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r206, %f153;
	shfl.sync.bfly.b32	%r207, %r206, 8, 31, -1;
	mov.b32 	%f154, %r207;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f155, %f153, %f154;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r208, %f155;
	shfl.sync.bfly.b32	%r209, %r208, 4, 31, -1;
	mov.b32 	%f156, %r209;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f157, %f155, %f156;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r210, %f157;
	shfl.sync.bfly.b32	%r211, %r210, 2, 31, -1;
	mov.b32 	%f158, %r211;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f159, %f157, %f158;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r212, %f159;
	shfl.sync.bfly.b32	%r213, %r212, 1, 31, -1;
	mov.b32 	%f160, %r213;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f161, %f159, %f160;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r70, %f161;
	// begin inline asm
	@%p9 st.shared.b32 [ %r9 + 0 ], %r70;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p10 ld.shared.b32 %r71, [ %r12 + 0 ];
	// end inline asm
	mov.b32 	%f162, %r71;
	shfl.sync.bfly.b32	%r214, %r71, 1, 31, -1;
	mov.b32 	%f163, %r214;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f164, %f162, %f163;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r74, %f164;
	// begin inline asm
	@%p11 st.shared.b32 [ %r12 + 0 ], %r74;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f165, [global_smem];
$L__tmp15:
	.loc	1 63 20                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:63:20
	mul.f32 	%f166, %f7, %f8;
$L__tmp16:
	.loc	2 267 36                        // standard.py:267:36
	bar.sync 	0;
	mov.b32 	%r215, %f166;
	shfl.sync.bfly.b32	%r216, %r215, 16, 31, -1;
	mov.b32 	%f167, %r216;
	.loc	2 256 15                        // standard.py:256:15
	fma.rn.f32 	%f168, %f7, %f8, %f167;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r217, %f168;
	shfl.sync.bfly.b32	%r218, %r217, 8, 31, -1;
	mov.b32 	%f169, %r218;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f170, %f168, %f169;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r219, %f170;
	shfl.sync.bfly.b32	%r220, %r219, 4, 31, -1;
	mov.b32 	%f171, %r220;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f172, %f170, %f171;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r221, %f172;
	shfl.sync.bfly.b32	%r222, %r221, 2, 31, -1;
	mov.b32 	%f173, %r222;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f174, %f172, %f173;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r223, %f174;
	shfl.sync.bfly.b32	%r224, %r223, 1, 31, -1;
	mov.b32 	%f175, %r224;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f176, %f174, %f175;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r76, %f176;
	// begin inline asm
	@%p9 st.shared.b32 [ %r9 + 0 ], %r76;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p10 ld.shared.b32 %r77, [ %r12 + 0 ];
	// end inline asm
	mov.b32 	%f177, %r77;
	shfl.sync.bfly.b32	%r225, %r77, 1, 31, -1;
	mov.b32 	%f178, %r225;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f179, %f177, %f178;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r80, %f179;
	// begin inline asm
	@%p11 st.shared.b32 [ %r12 + 0 ], %r80;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f180, [global_smem];
$L__tmp17:
	.loc	1 66 19                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:66:19
	add.f32 	%f181, %f22, %f36;
	.loc	1 67 20                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:67:20
	sub.f32 	%f182, %f181, %f51;
	.loc	1 68 20                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:68:20
	mov.b32 	%r83, %f182;
	mov.b32 	%r82, %f51;
	// begin inline asm
	div.full.f32 %r81, %r82, %r83;
	// end inline asm
	mov.b32 	%f183, %r81;
	mov.f32 	%f184, 0f3F800000;
	.loc	1 70 20                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:70:20
	sub.f32 	%f185, %f184, %f183;
	.loc	1 73 20                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:73:20
	add.f32 	%f186, %f65, %f79;
	.loc	1 74 20                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:74:20
	sub.f32 	%f187, %f186, %f94;
	.loc	1 75 20                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:75:20
	mov.b32 	%r86, %f187;
	mov.b32 	%r85, %f94;
	// begin inline asm
	div.full.f32 %r84, %r85, %r86;
	// end inline asm
	mov.b32 	%f188, %r84;
	.loc	1 76 20                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:76:20
	sub.f32 	%f189, %f184, %f188;
	.loc	1 77 20                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:77:20
	add.f32 	%f190, %f185, %f189;
	.loc	1 78 20                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:78:20
	add.f32 	%f191, %f108, %f122;
	.loc	1 79 20                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:79:20
	sub.f32 	%f192, %f191, %f137;
	.loc	1 80 20                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:80:20
	mov.b32 	%r89, %f192;
	mov.b32 	%r88, %f137;
	// begin inline asm
	div.full.f32 %r87, %r88, %r89;
	// end inline asm
	mov.b32 	%f193, %r87;
	.loc	1 81 20                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:81:20
	sub.f32 	%f194, %f184, %f193;
	.loc	1 82 20                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:82:20
	add.f32 	%f195, %f190, %f194;
	.loc	1 83 20                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:83:20
	add.f32 	%f196, %f151, %f165;
	.loc	1 84 20                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:84:20
	sub.f32 	%f197, %f196, %f180;
	.loc	1 85 20                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:85:20
	mov.b32 	%r92, %f197;
	mov.b32 	%r91, %f180;
	// begin inline asm
	div.full.f32 %r90, %r91, %r92;
	// end inline asm
	mov.b32 	%f198, %r90;
	.loc	1 86 20                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:86:20
	sub.f32 	%f199, %f184, %f198;
	.loc	1 87 20                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:87:20
	add.f32 	%f200, %f195, %f199;
	.loc	1 89 20                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:89:20
	mul.f32 	%f201, %f200, 0f3E800000;
	.loc	1 90 4                          // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:90:4
	bar.sync 	0;
	.loc	1 91 71                         // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:91:71
	setp.eq.s32 	%p45, %r96, 0;
	mov.b32 	%r93, %f201;
	// begin inline asm
	@%p45 st.global.b32 [ %rd9 + 0 ], { %r93 };
	// end inline asm
	.loc	1 91 4                          // ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py:91:4
	ret;
$L__tmp18:
$L__func_end0:
                                        // -- End function
}
	.file	1 "inductor_cache/e4/ce4rtmm56tvlajdzwtkfvnbmrqdvfx42uemq7pdrz5hp45kc52da.py"
	.file	2 "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 452                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x1bd DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 101
.b8 52
.b8 114
.b8 116
.b8 109
.b8 109
.b8 53
.b8 54
.b8 116
.b8 118
.b8 108
.b8 97
.b8 106
.b8 100
.b8 122
.b8 119
.b8 116
.b8 107
.b8 102
.b8 118
.b8 110
.b8 98
.b8 109
.b8 114
.b8 113
.b8 100
.b8 118
.b8 102
.b8 120
.b8 52
.b8 50
.b8 117
.b8 101
.b8 109
.b8 113
.b8 55
.b8 112
.b8 100
.b8 114
.b8 122
.b8 53
.b8 104
.b8 112
.b8 52
.b8 53
.b8 107
.b8 99
.b8 53
.b8 50
.b8 100
.b8 97
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 105                                 // DW_AT_comp_dir
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 101
.b8 52
.b8 0
.b8 2                                   // Abbrev [2] 0x63:0x2e DW_TAG_subprogram
.b8 116                                 // DW_AT_name
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 112
.b8 101
.b8 114
.b8 95
.b8 102
.b8 117
.b8 115
.b8 101
.b8 100
.b8 95
.b8 97
.b8 100
.b8 100
.b8 95
.b8 100
.b8 105
.b8 118
.b8 95
.b8 109
.b8 117
.b8 108
.b8 95
.b8 114
.b8 115
.b8 117
.b8 98
.b8 95
.b8 115
.b8 117
.b8 98
.b8 95
.b8 115
.b8 117
.b8 109
.b8 95
.b8 48
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x91:0x136 DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 99                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0xa6:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 39                                  // DW_AT_call_line
.b8 24                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0xbe:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp2                           // DW_AT_low_pc
.b64 $L__tmp3                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 41                                  // DW_AT_call_line
.b8 24                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0xd6:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp4                           // DW_AT_low_pc
.b64 $L__tmp5                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 44                                  // DW_AT_call_line
.b8 25                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0xee:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp5                           // DW_AT_low_pc
.b64 $L__tmp6                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 46                                  // DW_AT_call_line
.b8 26                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x106:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp6                           // DW_AT_low_pc
.b64 $L__tmp7                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 48                                  // DW_AT_call_line
.b8 26                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x11e:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp8                           // DW_AT_low_pc
.b64 $L__tmp9                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 51                                  // DW_AT_call_line
.b8 26                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x136:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp9                           // DW_AT_low_pc
.b64 $L__tmp10                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 53                                  // DW_AT_call_line
.b8 26                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x14e:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp10                          // DW_AT_low_pc
.b64 $L__tmp11                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 55                                  // DW_AT_call_line
.b8 26                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x166:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp12                          // DW_AT_low_pc
.b64 $L__tmp13                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 58                                  // DW_AT_call_line
.b8 26                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x17e:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp13                          // DW_AT_low_pc
.b64 $L__tmp14                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 60                                  // DW_AT_call_line
.b8 26                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x196:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp14                          // DW_AT_low_pc
.b64 $L__tmp15                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 62                                  // DW_AT_call_line
.b8 26                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x1ae:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp16                          // DW_AT_low_pc
.b64 $L__tmp17                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 65                                  // DW_AT_call_line
.b8 26                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
