; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__weight_norm_interface_convolution_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 7, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 1, !dbg !12
  %12 = shl i32 %10, 1, !dbg !12
  %13 = and i32 %12, 126, !dbg !12
  %14 = and i32 %10, 127, !dbg !12
  %15 = lshr i32 %10, 1, !dbg !12
  %16 = and i32 %15, 63, !dbg !12
  %17 = or disjoint i32 %16, 64, !dbg !12
  %18 = or disjoint i32 %9, %13, !dbg !13
  %19 = or disjoint i32 %9, %14, !dbg !13
  %20 = or disjoint i32 %9, %16, !dbg !13
  %21 = or disjoint i32 %9, %17, !dbg !13
  %22 = icmp slt i32 %18, 96, !dbg !14
  %23 = icmp slt i32 %19, 96, !dbg !14
  %24 = icmp slt i32 %20, 96, !dbg !14
  %25 = icmp slt i32 %21, 96, !dbg !14
  %26 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %27 = shl i32 %26, 1, !dbg !16
  %28 = lshr i32 %10, 6, !dbg !17
  %.lobit = and i32 %28, 1, !dbg !17
  %29 = or disjoint i32 %27, %.lobit, !dbg !18
  %30 = or disjoint i32 %27, %11, !dbg !18
  %31 = icmp slt i32 %29, 25, !dbg !19
  %32 = icmp slt i32 %30, 25, !dbg !19
  %.frozen = freeze i32 %18, !dbg !20
  %33 = sdiv i32 %.frozen, 6, !dbg !20
  %34 = mul i32 %33, 6, !dbg !21
  %.decomposed = sub i32 %.frozen, %34, !dbg !21
  %35 = sdiv i32 %19, 6, !dbg !20
  %36 = mul i32 %29, 6, !dbg !22
  %37 = add i32 %36, %.decomposed, !dbg !23
  %38 = mul i32 %33, 150, !dbg !24
  %39 = add i32 %37, %38, !dbg !25
  %40 = sext i32 %39 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !26
  %42 = and i1 %22, %31, !dbg !27
  %43 = and i1 %24, %32, !dbg !27
  %44 = and i1 %25, %32, !dbg !27
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %42) #2, !dbg !28
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !28
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !28
  %48 = bitcast i32 %46 to float, !dbg !28
  %49 = bitcast i32 %47 to float, !dbg !28
  %50 = shl i32 %10, 2, !dbg !28
  %51 = and i32 %50, 252, !dbg !28
  %52 = or disjoint i32 %51, %.lobit, !dbg !28
  %53 = lshr exact i32 %51, 1, !dbg !28
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %53, !dbg !28
  %55 = getelementptr inbounds float, ptr addrspace(3) %54, i32 %52, !dbg !28
  %56 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %56, i1 true) #2, !dbg !28
  %57 = or disjoint i32 %52, 2, !dbg !28
  %58 = lshr i32 %57, 1, !dbg !28
  %59 = getelementptr float, ptr addrspace(3) @global_smem, i32 %58, !dbg !28
  %60 = getelementptr float, ptr addrspace(3) %59, i32 %57, !dbg !28
  %61 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %61, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %62 = lshr i32 %14, 1, !dbg !28
  %63 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %62, !dbg !28
  %64 = getelementptr inbounds float, ptr addrspace(3) %63, i32 %14, !dbg !28
  %65 = load float, ptr addrspace(3) %64, align 4, !dbg !28
  %66 = or disjoint i32 %14, 128, !dbg !28
  %67 = lshr i32 %66, 1, !dbg !28
  %68 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %67, !dbg !28
  %69 = getelementptr inbounds float, ptr addrspace(3) %68, i32 %66, !dbg !28
  %70 = load float, ptr addrspace(3) %69, align 4, !dbg !28
  %71 = sext i32 %35 to i64, !dbg !29
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !29
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %23) #2, !dbg !30
  %74 = bitcast i32 %73 to float, !dbg !30
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %71, !dbg !31
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %23) #2, !dbg !32
  %77 = bitcast i32 %76 to float, !dbg !32
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float %77) #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %.idx = shl nuw nsw i32 %14, 3, !dbg !34
  %79 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !34
  %80 = bitcast float %78 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %.idx3 = shl nuw nsw i32 %16, 3, !dbg !34
  %81 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !34
  %82 = load float, ptr addrspace(3) %81, align 8, !dbg !34
  %.idx4 = shl nuw nsw i32 %17, 3, !dbg !34
  %83 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !34
  %84 = load float, ptr addrspace(3) %83, align 8, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %85 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %80, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %86 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !34
  %87 = load float, ptr addrspace(3) %86, align 8, !dbg !34
  %88 = getelementptr inbounds i8, ptr addrspace(3) %86, i32 4, !dbg !34
  %89 = load float, ptr addrspace(3) %88, align 4, !dbg !34
  %90 = fmul float %65, %82, !dbg !34
  %91 = fmul float %70, %84, !dbg !34
  %92 = fmul float %87, %48, !dbg !34
  %93 = fmul float %89, %49, !dbg !34
  %94 = mul i32 %20, 25, !dbg !35
  %95 = mul i32 %21, 25, !dbg !35
  %96 = add i32 %30, %94, !dbg !36
  %97 = add i32 %30, %95, !dbg !36
  %98 = sext i32 %96 to i64, !dbg !37
  %99 = getelementptr float, ptr addrspace(1) %3, i64 %98, !dbg !37
  %100 = sext i32 %97 to i64, !dbg !37
  %101 = getelementptr float, ptr addrspace(1) %3, i64 %100, !dbg !37
  %102 = bitcast float %90 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %102, ptr addrspace(1) %99, i1 %43) #2, !dbg !38
  %103 = bitcast float %91 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %103, ptr addrspace(1) %101, i1 %44) #2, !dbg !38
  %104 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !39
  %105 = bitcast float %92 to i32, !dbg !40
  %106 = bitcast float %93 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %105, i32 %106, ptr addrspace(1) %104, i1 %42) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb5v2a2rybe6rgv4bmwkxzy6w64c5mz3pmkyajhdhuphrbccbl4x.py", directory: "inductor_cache/b5")
!4 = !{ptr @triton_poi_fused__weight_norm_interface_convolution_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__weight_norm_interface_convolution_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__weight_norm_interface_convolution_6", linkageName: "triton_poi_fused__weight_norm_interface_convolution_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 46, scope: !7)
!25 = !DILocation(line: 32, column: 42, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 59, scope: !7)
!28 = !DILocation(line: 32, column: 51, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 18, scope: !7)
!34 = !DILocation(line: 36, column: 18, scope: !7)
!35 = !DILocation(line: 37, column: 33, scope: !7)
!36 = !DILocation(line: 37, column: 30, scope: !7)
!37 = !DILocation(line: 37, column: 25, scope: !7)
!38 = !DILocation(line: 37, column: 44, scope: !7)
!39 = !DILocation(line: 38, column: 25, scope: !7)
!40 = !DILocation(line: 38, column: 52, scope: !7)
!41 = !DILocation(line: 38, column: 4, scope: !7)
