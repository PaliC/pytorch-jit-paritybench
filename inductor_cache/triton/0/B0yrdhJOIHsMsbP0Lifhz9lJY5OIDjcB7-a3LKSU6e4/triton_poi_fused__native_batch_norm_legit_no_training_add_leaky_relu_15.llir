; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 5, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = or disjoint i32 %14, 8, !dbg !12
  %16 = or disjoint i32 %14, 16, !dbg !12
  %17 = or disjoint i32 %14, 24, !dbg !12
  %18 = shl i32 %12, 2, !dbg !12
  %19 = or disjoint i32 %11, %14, !dbg !13
  %20 = or disjoint i32 %11, %15, !dbg !13
  %21 = or disjoint i32 %11, %16, !dbg !13
  %22 = or disjoint i32 %11, %17, !dbg !13
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %24 = shl i32 %23, 7, !dbg !15
  %25 = and i32 %18, 124, !dbg !16
  %26 = or disjoint i32 %24, %25, !dbg !17
  %27 = icmp slt i32 %26, 128, !dbg !18
  %28 = shl i32 %19, 7, !dbg !19
  %29 = shl i32 %20, 7, !dbg !19
  %30 = shl i32 %21, 7, !dbg !19
  %31 = shl i32 %22, 7, !dbg !19
  %32 = add i32 %26, %28, !dbg !20
  %33 = add i32 %26, %29, !dbg !20
  %34 = add i32 %26, %30, !dbg !20
  %35 = add i32 %26, %31, !dbg !20
  %36 = sext i32 %32 to i64, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !21
  %38 = sext i32 %33 to i64, !dbg !21
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !21
  %40 = sext i32 %34 to i64, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !21
  %42 = sext i32 %35 to i64, !dbg !21
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !21
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %27) #4, !dbg !22
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %27) #4, !dbg !22
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %27) #4, !dbg !22
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %27) #4, !dbg !22
  %48 = sext i32 %26 to i64, !dbg !23
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !23
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %27) #4, !dbg !24
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !25
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %27) #4, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !26
  %57 = bitcast i32 %53 to float, !dbg !26
  %58 = bitcast i32 %54 to float, !dbg !26
  %59 = bitcast i32 %55 to float, !dbg !26
  %60 = bitcast i32 %56 to float, !dbg !26
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !27
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %27) #4, !dbg !28
  %63 = getelementptr float, ptr addrspace(1) %4, i64 %48, !dbg !29
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %27) #4, !dbg !30
  %65 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !31
  %66 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !31
  %67 = getelementptr float, ptr addrspace(1) %5, i64 %40, !dbg !31
  %68 = getelementptr float, ptr addrspace(1) %5, i64 %42, !dbg !31
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %27) #4, !dbg !32
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %27) #4, !dbg !32
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %27) #4, !dbg !32
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 %27) #4, !dbg !32
  %73 = fadd float %57, 0x3EE4F8B580000000, !dbg !33
  %74 = fadd float %58, 0x3EE4F8B580000000, !dbg !33
  %75 = fadd float %59, 0x3EE4F8B580000000, !dbg !33
  %76 = fadd float %60, 0x3EE4F8B580000000, !dbg !33
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %77, 0, !dbg !34
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i = icmp eq i32 %78, 0, !dbg !34
  br i1 %.not.i, label %84, label %79, !dbg !34

79:                                               ; preds = %9
  br i1 %.not1.i, label %82, label %80, !dbg !34

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

84:                                               ; preds = %9
  br i1 %.not1.i, label %87, label %85, !dbg !34

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %80, %82, %85, %87
  %.0.i = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !34
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i34 = icmp eq i32 %89, 0, !dbg !34
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i37 = icmp eq i32 %90, 0, !dbg !34
  br i1 %.not.i34, label %96, label %91, !dbg !34

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i37, label %94, label %92, !dbg !34

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !34
  br label %__nv_sqrtf.exit38, !dbg !34

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !34
  br label %__nv_sqrtf.exit38, !dbg !34

96:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i37, label %99, label %97, !dbg !34

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !34
  br label %__nv_sqrtf.exit38, !dbg !34

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !34
  br label %__nv_sqrtf.exit38, !dbg !34

__nv_sqrtf.exit38:                                ; preds = %92, %94, %97, %99
  %.0.i36 = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !34
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i39 = icmp eq i32 %101, 0, !dbg !34
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i42 = icmp eq i32 %102, 0, !dbg !34
  br i1 %.not.i39, label %108, label %103, !dbg !34

103:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %106, label %104, !dbg !34

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #4, !dbg !34
  br label %__nv_sqrtf.exit43, !dbg !34

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #4, !dbg !34
  br label %__nv_sqrtf.exit43, !dbg !34

108:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %111, label %109, !dbg !34

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #4, !dbg !34
  br label %__nv_sqrtf.exit43, !dbg !34

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #4, !dbg !34
  br label %__nv_sqrtf.exit43, !dbg !34

__nv_sqrtf.exit43:                                ; preds = %104, %106, %109, %111
  %.0.i41 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !34
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i44 = icmp eq i32 %113, 0, !dbg !34
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i47 = icmp eq i32 %114, 0, !dbg !34
  br i1 %.not.i44, label %120, label %115, !dbg !34

115:                                              ; preds = %__nv_sqrtf.exit43
  br i1 %.not1.i47, label %118, label %116, !dbg !34

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #4, !dbg !34
  br label %__nv_sqrtf.exit48, !dbg !34

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #4, !dbg !34
  br label %__nv_sqrtf.exit48, !dbg !34

120:                                              ; preds = %__nv_sqrtf.exit43
  br i1 %.not1.i47, label %123, label %121, !dbg !34

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #4, !dbg !34
  br label %__nv_sqrtf.exit48, !dbg !34

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #4, !dbg !34
  br label %__nv_sqrtf.exit48, !dbg !34

__nv_sqrtf.exit48:                                ; preds = %116, %118, %121, %123
  %.0.i46 = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !34
  %125 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !22
  %126 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !24
  %127 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !22
  %128 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !24
  %129 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !22
  %130 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !24
  %131 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !22
  %132 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !24
  %133 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !22
  %134 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !22
  %135 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !22
  %136 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !22
  %137 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !22
  %138 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !22
  %139 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !22
  %140 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !22
  %141 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !22
  %142 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !22
  %143 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !22
  %144 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !22
  %145 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !32
  %146 = bitcast i32 %145 to float, !dbg !32
  %147 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !32
  %148 = bitcast i32 %147 to float, !dbg !32
  %149 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !32
  %150 = bitcast i32 %149 to float, !dbg !32
  %151 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !32
  %152 = bitcast i32 %151 to float, !dbg !32
  %153 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !32
  %154 = bitcast i32 %153 to float, !dbg !32
  %155 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !32
  %156 = bitcast i32 %155 to float, !dbg !32
  %157 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !32
  %158 = bitcast i32 %157 to float, !dbg !32
  %159 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !32
  %160 = bitcast i32 %159 to float, !dbg !32
  %161 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !32
  %162 = bitcast i32 %161 to float, !dbg !32
  %163 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !32
  %164 = bitcast i32 %163 to float, !dbg !32
  %165 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !32
  %166 = bitcast i32 %165 to float, !dbg !32
  %167 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !32
  %168 = bitcast i32 %167 to float, !dbg !32
  %169 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !32
  %170 = bitcast i32 %169 to float, !dbg !32
  %171 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !32
  %172 = bitcast i32 %171 to float, !dbg !32
  %173 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !32
  %174 = bitcast i32 %173 to float, !dbg !32
  %175 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !32
  %176 = bitcast i32 %175 to float, !dbg !32
  %177 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !30
  %178 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !30
  %179 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !30
  %180 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !30
  %181 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !28
  %182 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !28
  %183 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !28
  %184 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !28
  %185 = and i32 %18, 28, !dbg !12
  %186 = or disjoint i32 %11, %185, !dbg !13
  %.frozen = freeze i32 %186, !dbg !35
  %187 = sdiv i32 %.frozen, 256, !dbg !35
  %188 = mul i32 %187, 256, !dbg !36
  %.decomposed = sub i32 %.frozen, %188, !dbg !36
  %189 = lshr i32 %12, 3, !dbg !16
  %190 = and i32 %189, 31, !dbg !16
  %191 = or disjoint i32 %190, %24, !dbg !17
  %192 = or disjoint i32 %191, 96, !dbg !17
  %193 = icmp slt i32 %192, 128, !dbg !18
  %194 = or disjoint i32 %191, 64, !dbg !17
  %195 = icmp slt i32 %194, 128, !dbg !18
  %196 = or disjoint i32 %191, 32, !dbg !17
  %197 = icmp slt i32 %196, 128, !dbg !18
  %198 = icmp slt i32 %191, 128, !dbg !18
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i36) #4, !dbg !37
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i41) #4, !dbg !37
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i46) #4, !dbg !37
  %203 = insertelement <4 x i32> poison, i32 %126, i64 0, !dbg !24
  %204 = insertelement <4 x i32> %203, i32 %128, i64 1, !dbg !24
  %205 = insertelement <4 x i32> %204, i32 %130, i64 2, !dbg !24
  %206 = insertelement <4 x i32> %205, i32 %132, i64 3, !dbg !24
  %207 = bitcast <4 x i32> %206 to <4 x float>, !dbg !24
  %208 = shufflevector <4 x float> %207, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !24
  %209 = insertelement <16 x i32> poison, i32 %125, i64 0, !dbg !22
  %210 = insertelement <16 x i32> %209, i32 %127, i64 1, !dbg !22
  %211 = insertelement <16 x i32> %210, i32 %129, i64 2, !dbg !22
  %212 = insertelement <16 x i32> %211, i32 %131, i64 3, !dbg !22
  %213 = insertelement <16 x i32> %212, i32 %133, i64 4, !dbg !22
  %214 = insertelement <16 x i32> %213, i32 %134, i64 5, !dbg !22
  %215 = insertelement <16 x i32> %214, i32 %135, i64 6, !dbg !22
  %216 = insertelement <16 x i32> %215, i32 %136, i64 7, !dbg !22
  %217 = insertelement <16 x i32> %216, i32 %137, i64 8, !dbg !22
  %218 = insertelement <16 x i32> %217, i32 %138, i64 9, !dbg !22
  %219 = insertelement <16 x i32> %218, i32 %139, i64 10, !dbg !22
  %220 = insertelement <16 x i32> %219, i32 %140, i64 11, !dbg !22
  %221 = insertelement <16 x i32> %220, i32 %141, i64 12, !dbg !22
  %222 = insertelement <16 x i32> %221, i32 %142, i64 13, !dbg !22
  %223 = insertelement <16 x i32> %222, i32 %143, i64 14, !dbg !22
  %224 = insertelement <16 x i32> %223, i32 %144, i64 15, !dbg !22
  %225 = bitcast <16 x i32> %224 to <16 x float>, !dbg !22
  %226 = fsub <16 x float> %225, %208, !dbg !38
  %227 = insertelement <4 x i32> poison, i32 %177, i64 0, !dbg !30
  %228 = insertelement <4 x i32> %227, i32 %178, i64 1, !dbg !30
  %229 = insertelement <4 x i32> %228, i32 %179, i64 2, !dbg !30
  %230 = insertelement <4 x i32> %229, i32 %180, i64 3, !dbg !30
  %231 = bitcast <4 x i32> %230 to <4 x float>, !dbg !30
  %232 = shufflevector <4 x float> %231, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !30
  %233 = insertelement <4 x i32> poison, i32 %181, i64 0, !dbg !28
  %234 = insertelement <4 x i32> %233, i32 %182, i64 1, !dbg !28
  %235 = insertelement <4 x i32> %234, i32 %183, i64 2, !dbg !28
  %236 = insertelement <4 x i32> %235, i32 %184, i64 3, !dbg !28
  %237 = bitcast <4 x i32> %236 to <4 x float>, !dbg !28
  %238 = shufflevector <4 x float> %237, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !28
  %239 = insertelement <16 x float> poison, float %202, i64 0, !dbg !39
  %240 = insertelement <16 x float> %239, float %201, i64 1, !dbg !39
  %241 = insertelement <16 x float> %240, float %200, i64 2, !dbg !39
  %242 = insertelement <16 x float> %241, float %199, i64 3, !dbg !39
  %243 = shufflevector <16 x float> %242, <16 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !39
  %244 = fmul <16 x float> %226, %243, !dbg !39
  %245 = fmul <16 x float> %244, %238, !dbg !40
  %246 = fadd <16 x float> %245, %232, !dbg !41
  %247 = fcmp ogt <16 x float> %246, zeroinitializer, !dbg !42
  %248 = extractelement <16 x float> %246, i64 15, !dbg !43
  %249 = fmul float %248, 0x3FB99999A0000000, !dbg !44
  %250 = extractelement <16 x float> %246, i64 14, !dbg !43
  %251 = fmul float %250, 0x3FB99999A0000000, !dbg !44
  %252 = extractelement <16 x float> %246, i64 13, !dbg !43
  %253 = fmul float %252, 0x3FB99999A0000000, !dbg !44
  %254 = extractelement <16 x float> %246, i64 12, !dbg !43
  %255 = fmul float %254, 0x3FB99999A0000000, !dbg !44
  %256 = extractelement <16 x float> %246, i64 11, !dbg !43
  %257 = fmul float %256, 0x3FB99999A0000000, !dbg !44
  %258 = extractelement <16 x float> %246, i64 10, !dbg !43
  %259 = fmul float %258, 0x3FB99999A0000000, !dbg !44
  %260 = extractelement <16 x float> %246, i64 9, !dbg !43
  %261 = fmul float %260, 0x3FB99999A0000000, !dbg !44
  %262 = extractelement <16 x float> %246, i64 8, !dbg !43
  %263 = fmul float %262, 0x3FB99999A0000000, !dbg !44
  %264 = extractelement <16 x float> %246, i64 7, !dbg !43
  %265 = fmul float %264, 0x3FB99999A0000000, !dbg !44
  %266 = extractelement <16 x float> %246, i64 6, !dbg !43
  %267 = fmul float %266, 0x3FB99999A0000000, !dbg !44
  %268 = extractelement <16 x float> %246, i64 5, !dbg !43
  %269 = fmul float %268, 0x3FB99999A0000000, !dbg !44
  %270 = extractelement <16 x float> %246, i64 4, !dbg !43
  %271 = fmul float %270, 0x3FB99999A0000000, !dbg !44
  %272 = extractelement <16 x float> %246, i64 3, !dbg !43
  %273 = fmul float %272, 0x3FB99999A0000000, !dbg !44
  %274 = extractelement <16 x float> %246, i64 2, !dbg !43
  %275 = fmul float %274, 0x3FB99999A0000000, !dbg !44
  %276 = extractelement <16 x float> %246, i64 1, !dbg !43
  %277 = fmul float %276, 0x3FB99999A0000000, !dbg !44
  %278 = extractelement <16 x float> %246, i64 0, !dbg !43
  %279 = fmul float %278, 0x3FB99999A0000000, !dbg !44
  %280 = extractelement <16 x i1> %247, i64 15, !dbg !43
  %281 = select i1 %280, float %248, float %249, !dbg !43
  %282 = extractelement <16 x i1> %247, i64 14, !dbg !43
  %283 = select i1 %282, float %250, float %251, !dbg !43
  %284 = extractelement <16 x i1> %247, i64 13, !dbg !43
  %285 = select i1 %284, float %252, float %253, !dbg !43
  %286 = extractelement <16 x i1> %247, i64 12, !dbg !43
  %287 = select i1 %286, float %254, float %255, !dbg !43
  %288 = extractelement <16 x i1> %247, i64 11, !dbg !43
  %289 = select i1 %288, float %256, float %257, !dbg !43
  %290 = extractelement <16 x i1> %247, i64 10, !dbg !43
  %291 = select i1 %290, float %258, float %259, !dbg !43
  %292 = extractelement <16 x i1> %247, i64 9, !dbg !43
  %293 = select i1 %292, float %260, float %261, !dbg !43
  %294 = extractelement <16 x i1> %247, i64 8, !dbg !43
  %295 = select i1 %294, float %262, float %263, !dbg !43
  %296 = extractelement <16 x i1> %247, i64 7, !dbg !43
  %297 = select i1 %296, float %264, float %265, !dbg !43
  %298 = extractelement <16 x i1> %247, i64 6, !dbg !43
  %299 = select i1 %298, float %266, float %267, !dbg !43
  %300 = extractelement <16 x i1> %247, i64 5, !dbg !43
  %301 = select i1 %300, float %268, float %269, !dbg !43
  %302 = extractelement <16 x i1> %247, i64 4, !dbg !43
  %303 = select i1 %302, float %270, float %271, !dbg !43
  %304 = extractelement <16 x i1> %247, i64 3, !dbg !43
  %305 = select i1 %304, float %272, float %273, !dbg !43
  %306 = extractelement <16 x i1> %247, i64 2, !dbg !43
  %307 = select i1 %306, float %274, float %275, !dbg !43
  %308 = extractelement <16 x i1> %247, i64 1, !dbg !43
  %309 = select i1 %308, float %276, float %277, !dbg !43
  %310 = extractelement <16 x i1> %247, i64 0, !dbg !43
  %311 = select i1 %310, float %278, float %279, !dbg !43
  %312 = fadd float %281, %176, !dbg !45
  %313 = fadd float %283, %174, !dbg !45
  %314 = fadd float %285, %172, !dbg !45
  %315 = fadd float %287, %170, !dbg !45
  %316 = fadd float %289, %168, !dbg !45
  %317 = fadd float %291, %166, !dbg !45
  %318 = fadd float %293, %164, !dbg !45
  %319 = fadd float %295, %162, !dbg !45
  %320 = fadd float %297, %160, !dbg !45
  %321 = fadd float %299, %158, !dbg !45
  %322 = fadd float %301, %156, !dbg !45
  %323 = fadd float %303, %154, !dbg !45
  %324 = fadd float %305, %152, !dbg !45
  %325 = fadd float %307, %150, !dbg !45
  %326 = fadd float %309, %148, !dbg !45
  %327 = fadd float %311, %146, !dbg !45
  %328 = shl i32 %191, 8, !dbg !46
  %329 = shl i32 %196, 8, !dbg !46
  %330 = shl i32 %194, 8, !dbg !46
  %331 = shl i32 %192, 8, !dbg !46
  %332 = shl i32 %187, 15, !dbg !47
  %333 = add i32 %332, %.decomposed, !dbg !48
  %334 = add i32 %333, %328, !dbg !49
  %335 = add i32 %333, %329, !dbg !49
  %336 = add i32 %333, %330, !dbg !49
  %337 = add i32 %333, %331, !dbg !49
  %338 = sext i32 %334 to i64, !dbg !50
  %339 = getelementptr float, ptr addrspace(1) %6, i64 %338, !dbg !50
  %340 = sext i32 %335 to i64, !dbg !50
  %341 = getelementptr float, ptr addrspace(1) %6, i64 %340, !dbg !50
  %342 = sext i32 %336 to i64, !dbg !50
  %343 = getelementptr float, ptr addrspace(1) %6, i64 %342, !dbg !50
  %344 = sext i32 %337 to i64, !dbg !50
  %345 = getelementptr float, ptr addrspace(1) %6, i64 %344, !dbg !50
  %346 = shl i32 %12, 7, !dbg !51
  %347 = and i32 %346, 3968, !dbg !51
  %348 = or disjoint i32 %347, %14, !dbg !51
  %349 = and i32 %18, 1020, !dbg !51
  %350 = lshr exact i32 %347, 1, !dbg !51
  %351 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %350, !dbg !51
  %352 = getelementptr float, ptr addrspace(3) %351, i32 %348, !dbg !51
  %353 = bitcast float %312 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %352, <1 x i32> %353, i1 true) #4, !dbg !51
  %354 = or disjoint i32 %348, 32, !dbg !51
  %355 = lshr i32 %354, 3, !dbg !51
  %356 = getelementptr float, ptr addrspace(3) @global_smem, i32 %355, !dbg !51
  %357 = getelementptr float, ptr addrspace(3) %356, i32 %354, !dbg !51
  %358 = bitcast float %313 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %357, <1 x i32> %358, i1 true) #4, !dbg !51
  %359 = or disjoint i32 %348, 64, !dbg !51
  %360 = lshr i32 %359, 3, !dbg !51
  %361 = getelementptr float, ptr addrspace(3) @global_smem, i32 %360, !dbg !51
  %362 = getelementptr float, ptr addrspace(3) %361, i32 %359, !dbg !51
  %363 = bitcast float %314 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %362, <1 x i32> %363, i1 true) #4, !dbg !51
  %364 = or disjoint i32 %348, 96, !dbg !51
  %365 = lshr i32 %364, 3, !dbg !51
  %366 = getelementptr float, ptr addrspace(3) @global_smem, i32 %365, !dbg !51
  %367 = getelementptr float, ptr addrspace(3) %366, i32 %364, !dbg !51
  %368 = bitcast float %315 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %367, <1 x i32> %368, i1 true) #4, !dbg !51
  %369 = or disjoint i32 %348, 8, !dbg !51
  %370 = getelementptr float, ptr addrspace(3) %351, i32 %369, !dbg !51
  %371 = bitcast float %316 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %370, <1 x i32> %371, i1 true) #4, !dbg !51
  %372 = or disjoint i32 %348, 40, !dbg !51
  %373 = lshr i32 %372, 3, !dbg !51
  %374 = and i32 %373, 500, !dbg !51
  %375 = getelementptr float, ptr addrspace(3) @global_smem, i32 %374, !dbg !51
  %376 = getelementptr float, ptr addrspace(3) %375, i32 %372, !dbg !51
  %377 = bitcast float %317 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %376, <1 x i32> %377, i1 true) #4, !dbg !51
  %378 = or disjoint i32 %348, 72, !dbg !51
  %379 = lshr i32 %378, 3, !dbg !51
  %380 = and i32 %379, 504, !dbg !51
  %381 = getelementptr float, ptr addrspace(3) @global_smem, i32 %380, !dbg !51
  %382 = getelementptr float, ptr addrspace(3) %381, i32 %378, !dbg !51
  %383 = bitcast float %318 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %382, <1 x i32> %383, i1 true) #4, !dbg !51
  %384 = or disjoint i32 %348, 104, !dbg !51
  %385 = lshr i32 %384, 3, !dbg !51
  %386 = and i32 %385, 508, !dbg !51
  %387 = getelementptr float, ptr addrspace(3) @global_smem, i32 %386, !dbg !51
  %388 = getelementptr float, ptr addrspace(3) %387, i32 %384, !dbg !51
  %389 = bitcast float %319 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %388, <1 x i32> %389, i1 true) #4, !dbg !51
  %390 = or disjoint i32 %348, 16, !dbg !51
  %391 = getelementptr float, ptr addrspace(3) %351, i32 %390, !dbg !51
  %392 = bitcast float %320 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %391, <1 x i32> %392, i1 true) #4, !dbg !51
  %393 = or disjoint i32 %348, 48, !dbg !51
  %394 = lshr i32 %393, 3, !dbg !51
  %395 = and i32 %394, 500, !dbg !51
  %396 = getelementptr float, ptr addrspace(3) @global_smem, i32 %395, !dbg !51
  %397 = getelementptr float, ptr addrspace(3) %396, i32 %393, !dbg !51
  %398 = bitcast float %321 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %397, <1 x i32> %398, i1 true) #4, !dbg !51
  %399 = or disjoint i32 %348, 80, !dbg !51
  %400 = lshr i32 %399, 3, !dbg !51
  %401 = and i32 %400, 504, !dbg !51
  %402 = getelementptr float, ptr addrspace(3) @global_smem, i32 %401, !dbg !51
  %403 = getelementptr float, ptr addrspace(3) %402, i32 %399, !dbg !51
  %404 = bitcast float %322 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %403, <1 x i32> %404, i1 true) #4, !dbg !51
  %405 = or disjoint i32 %348, 112, !dbg !51
  %406 = lshr i32 %405, 3, !dbg !51
  %407 = and i32 %406, 508, !dbg !51
  %408 = getelementptr float, ptr addrspace(3) @global_smem, i32 %407, !dbg !51
  %409 = getelementptr float, ptr addrspace(3) %408, i32 %405, !dbg !51
  %410 = bitcast float %323 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %409, <1 x i32> %410, i1 true) #4, !dbg !51
  %411 = or disjoint i32 %348, 24, !dbg !51
  %412 = getelementptr float, ptr addrspace(3) %351, i32 %411, !dbg !51
  %413 = bitcast float %324 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %412, <1 x i32> %413, i1 true) #4, !dbg !51
  %414 = or disjoint i32 %348, 56, !dbg !51
  %415 = lshr i32 %414, 3, !dbg !51
  %416 = and i32 %415, 500, !dbg !51
  %417 = getelementptr float, ptr addrspace(3) @global_smem, i32 %416, !dbg !51
  %418 = getelementptr float, ptr addrspace(3) %417, i32 %414, !dbg !51
  %419 = bitcast float %325 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %418, <1 x i32> %419, i1 true) #4, !dbg !51
  %420 = or disjoint i32 %348, 88, !dbg !51
  %421 = lshr i32 %420, 3, !dbg !51
  %422 = and i32 %421, 504, !dbg !51
  %423 = getelementptr float, ptr addrspace(3) @global_smem, i32 %422, !dbg !51
  %424 = getelementptr float, ptr addrspace(3) %423, i32 %420, !dbg !51
  %425 = bitcast float %326 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %424, <1 x i32> %425, i1 true) #4, !dbg !51
  %426 = or disjoint i32 %348, 120, !dbg !51
  %427 = lshr i32 %426, 3, !dbg !51
  %428 = and i32 %427, 508, !dbg !51
  %429 = getelementptr float, ptr addrspace(3) @global_smem, i32 %428, !dbg !51
  %430 = getelementptr float, ptr addrspace(3) %429, i32 %426, !dbg !51
  %431 = bitcast float %327 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %430, <1 x i32> %431, i1 true) #4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %432 = lshr i32 %18, 3, !dbg !51
  %433 = and i32 %432, 124, !dbg !51
  %434 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %433, !dbg !51
  %435 = getelementptr inbounds float, ptr addrspace(3) %434, i32 %349, !dbg !51
  %436 = or disjoint i32 %349, 1024, !dbg !51
  %437 = lshr i32 %436, 3, !dbg !51
  %438 = and i32 %437, 252, !dbg !51
  %439 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %438, !dbg !51
  %440 = getelementptr inbounds float, ptr addrspace(3) %439, i32 %436, !dbg !51
  %441 = load <4 x i32>, ptr addrspace(3) %440, align 16, !dbg !51
  %442 = or disjoint i32 %349, 2048, !dbg !51
  %443 = lshr i32 %442, 3, !dbg !51
  %444 = and i32 %443, 380, !dbg !51
  %445 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %444, !dbg !51
  %446 = getelementptr inbounds float, ptr addrspace(3) %445, i32 %442, !dbg !51
  %447 = load <4 x i32>, ptr addrspace(3) %446, align 16, !dbg !51
  %448 = or disjoint i32 %349, 3072, !dbg !51
  %449 = lshr i32 %448, 3, !dbg !51
  %450 = and i32 %449, 508, !dbg !51
  %451 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %450, !dbg !51
  %452 = getelementptr inbounds float, ptr addrspace(3) %451, i32 %448, !dbg !51
  %453 = load <4 x i32>, ptr addrspace(3) %452, align 16, !dbg !51
  %.extract = load i32, ptr addrspace(3) %435, align 16, !dbg !51
  %454 = getelementptr inbounds i8, ptr addrspace(3) %435, i32 4, !dbg !51
  %.extract19 = load i32, ptr addrspace(3) %454, align 4, !dbg !51
  %455 = getelementptr inbounds i8, ptr addrspace(3) %435, i32 8, !dbg !51
  %.extract20 = load i32, ptr addrspace(3) %455, align 8, !dbg !51
  %456 = getelementptr inbounds i8, ptr addrspace(3) %435, i32 12, !dbg !51
  %.extract21 = load i32, ptr addrspace(3) %456, align 4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %339, i1 %198) #4, !dbg !51
  %.extract22 = extractelement <4 x i32> %441, i64 0, !dbg !51
  %.extract23 = extractelement <4 x i32> %441, i64 1, !dbg !51
  %.extract24 = extractelement <4 x i32> %441, i64 2, !dbg !51
  %.extract25 = extractelement <4 x i32> %441, i64 3, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %341, i1 %197) #4, !dbg !51
  %.extract26 = extractelement <4 x i32> %447, i64 0, !dbg !51
  %.extract27 = extractelement <4 x i32> %447, i64 1, !dbg !51
  %.extract28 = extractelement <4 x i32> %447, i64 2, !dbg !51
  %.extract29 = extractelement <4 x i32> %447, i64 3, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %343, i1 %195) #4, !dbg !51
  %.extract30 = extractelement <4 x i32> %453, i64 0, !dbg !51
  %.extract31 = extractelement <4 x i32> %453, i64 1, !dbg !51
  %.extract32 = extractelement <4 x i32> %453, i64 2, !dbg !51
  %.extract33 = extractelement <4 x i32> %453, i64 3, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %345, i1 %193) #4, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctx5it4zwm4i5kce7vrj22bnocsvfsfdgxw3jnbdd4rma2j3yynu.py", directory: "inductor_cache/tx")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_15, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_15", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 31, scope: !7)
!28 = !DILocation(line: 35, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 31, scope: !7)
!30 = !DILocation(line: 36, column: 36, scope: !7)
!31 = !DILocation(line: 37, column: 31, scope: !7)
!32 = !DILocation(line: 37, column: 45, scope: !7)
!33 = !DILocation(line: 40, column: 18, scope: !7)
!34 = !DILocation(line: 41, column: 26, scope: !7)
!35 = !DILocation(line: 31, column: 19, scope: !7)
!36 = !DILocation(line: 30, column: 19, scope: !7)
!37 = !DILocation(line: 43, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 18, scope: !7)
!39 = !DILocation(line: 46, column: 19, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 35, scope: !7)
!44 = !DILocation(line: 52, column: 20, scope: !7)
!45 = !DILocation(line: 54, column: 20, scope: !7)
!46 = !DILocation(line: 55, column: 34, scope: !7)
!47 = !DILocation(line: 55, column: 45, scope: !7)
!48 = !DILocation(line: 55, column: 30, scope: !7)
!49 = !DILocation(line: 55, column: 39, scope: !7)
!50 = !DILocation(line: 55, column: 25, scope: !7)
!51 = !DILocation(line: 55, column: 57, scope: !7)
!52 = !DILocation(line: 55, column: 4, scope: !7)
