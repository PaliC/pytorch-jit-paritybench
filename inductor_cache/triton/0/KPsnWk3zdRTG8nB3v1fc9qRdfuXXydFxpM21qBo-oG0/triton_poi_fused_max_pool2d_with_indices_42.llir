; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_42(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 12, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %13, 16, !dbg !14
  %16 = icmp slt i32 %14, 16, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %18 = shl i32 %17, 6, !dbg !16
  %19 = shl i32 %8, 3, !dbg !17
  %20 = and i32 %19, 56, !dbg !17
  %21 = lshr i32 %8, 2, !dbg !17
  %22 = and i32 %21, 31, !dbg !17
  %23 = or disjoint i32 %18, %20, !dbg !18
  %24 = or disjoint i32 %23, 4, !dbg !18
  %25 = or disjoint i32 %18, %22, !dbg !18
  %26 = or disjoint i32 %25, 32, !dbg !18
  %27 = icmp slt i32 %23, 768, !dbg !19
  %28 = icmp slt i32 %25, 768, !dbg !19
  %29 = icmp slt i32 %26, 768, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %30 = sdiv i32 %.frozen, 2, !dbg !20
  %31 = mul i32 %30, 2, !dbg !21
  %.decomposed = sub i32 %.frozen, %31, !dbg !21
  %32 = srem i32 %30, 2, !dbg !22
  %33 = sdiv i32 %13, 4, !dbg !23
  %34 = ashr exact i32 %14, 2, !dbg !23
  %35 = mul nsw i32 %.decomposed, 1536, !dbg !24
  %36 = mul nsw i32 %32, 9216, !dbg !25
  %37 = mul i32 %33, 27648, !dbg !26
  %38 = add i32 %37, %35, !dbg !27
  %39 = add i32 %38, %23, !dbg !28
  %40 = add i32 %39, %36, !dbg !29
  %41 = add i32 %38, %24, !dbg !28
  %42 = add i32 %41, %36, !dbg !29
  %43 = sext i32 %40 to i64, !dbg !30
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !30
  %45 = sext i32 %42 to i64, !dbg !30
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !30
  %47 = and i1 %15, %27, !dbg !31
  %48 = and i1 %16, %28, !dbg !31
  %49 = and i1 %29, %16, !dbg !31
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %47) #2, !dbg !32
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !32
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !32
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !32
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !32
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %47) #2, !dbg !32
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !32
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !32
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !32
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !32
  %60 = add i32 %38, 768, !dbg !33
  %61 = add i32 %60, %23, !dbg !34
  %62 = add i32 %61, %36, !dbg !35
  %63 = add i32 %60, %24, !dbg !34
  %64 = add i32 %63, %36, !dbg !35
  %65 = sext i32 %62 to i64, !dbg !36
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !36
  %67 = sext i32 %64 to i64, !dbg !36
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !36
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %47) #2, !dbg !37
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !37
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !37
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !37
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !37
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 %47) #2, !dbg !37
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !37
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !37
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !37
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !37
  %79 = add i32 %38, 1536, !dbg !38
  %80 = add i32 %79, %23, !dbg !39
  %81 = add i32 %80, %36, !dbg !40
  %82 = add i32 %79, %24, !dbg !39
  %83 = add i32 %82, %36, !dbg !40
  %84 = sext i32 %81 to i64, !dbg !41
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !41
  %86 = sext i32 %83 to i64, !dbg !41
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !41
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %85, i1 %47) #2, !dbg !42
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !42
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !42
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !42
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !42
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %87, i1 %47) #2, !dbg !42
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !42
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !42
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !42
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !42
  %98 = add i32 %38, 4608, !dbg !43
  %99 = add i32 %98, %23, !dbg !44
  %100 = add i32 %99, %36, !dbg !45
  %101 = add i32 %98, %24, !dbg !44
  %102 = add i32 %101, %36, !dbg !45
  %103 = sext i32 %100 to i64, !dbg !46
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !46
  %105 = sext i32 %102 to i64, !dbg !46
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !46
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 %47) #2, !dbg !47
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !47
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !47
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !47
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !47
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %47) #2, !dbg !47
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !47
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !47
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !47
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !47
  %117 = add i32 %38, 5376, !dbg !48
  %118 = add i32 %117, %23, !dbg !49
  %119 = add i32 %118, %36, !dbg !50
  %120 = add i32 %117, %24, !dbg !49
  %121 = add i32 %120, %36, !dbg !50
  %122 = sext i32 %119 to i64, !dbg !51
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !51
  %124 = sext i32 %121 to i64, !dbg !51
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !51
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %123, i1 %47) #2, !dbg !52
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !52
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !52
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !52
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !52
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %125, i1 %47) #2, !dbg !52
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !52
  %133 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !52
  %134 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !52
  %135 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !52
  %136 = add i32 %38, 6144, !dbg !53
  %137 = add i32 %136, %23, !dbg !54
  %138 = add i32 %137, %36, !dbg !55
  %139 = add i32 %136, %24, !dbg !54
  %140 = add i32 %139, %36, !dbg !55
  %141 = sext i32 %138 to i64, !dbg !56
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !56
  %143 = sext i32 %140 to i64, !dbg !56
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !56
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %142, i1 %47) #2, !dbg !57
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !57
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !57
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !57
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !57
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %144, i1 %47) #2, !dbg !57
  %151 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !57
  %152 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !57
  %153 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !57
  %154 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !57
  %155 = add i32 %38, 9216, !dbg !58
  %156 = add i32 %155, %23, !dbg !59
  %157 = add i32 %156, %36, !dbg !60
  %158 = add i32 %155, %24, !dbg !59
  %159 = add i32 %158, %36, !dbg !60
  %160 = sext i32 %157 to i64, !dbg !61
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !61
  %162 = sext i32 %159 to i64, !dbg !61
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !61
  %164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %161, i1 %47) #2, !dbg !62
  %165 = extractvalue { i32, i32, i32, i32 } %164, 0, !dbg !62
  %166 = extractvalue { i32, i32, i32, i32 } %164, 1, !dbg !62
  %167 = extractvalue { i32, i32, i32, i32 } %164, 2, !dbg !62
  %168 = extractvalue { i32, i32, i32, i32 } %164, 3, !dbg !62
  %169 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %163, i1 %47) #2, !dbg !62
  %170 = extractvalue { i32, i32, i32, i32 } %169, 0, !dbg !62
  %171 = extractvalue { i32, i32, i32, i32 } %169, 1, !dbg !62
  %172 = extractvalue { i32, i32, i32, i32 } %169, 2, !dbg !62
  %173 = extractvalue { i32, i32, i32, i32 } %169, 3, !dbg !62
  %174 = add i32 %38, 9984, !dbg !63
  %175 = add i32 %174, %23, !dbg !64
  %176 = add i32 %175, %36, !dbg !65
  %177 = add i32 %174, %24, !dbg !64
  %178 = add i32 %177, %36, !dbg !65
  %179 = sext i32 %176 to i64, !dbg !66
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !66
  %181 = sext i32 %178 to i64, !dbg !66
  %182 = getelementptr float, ptr addrspace(1) %0, i64 %181, !dbg !66
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %180, i1 %47) #2, !dbg !67
  %184 = extractvalue { i32, i32, i32, i32 } %183, 0, !dbg !67
  %185 = extractvalue { i32, i32, i32, i32 } %183, 1, !dbg !67
  %186 = extractvalue { i32, i32, i32, i32 } %183, 2, !dbg !67
  %187 = extractvalue { i32, i32, i32, i32 } %183, 3, !dbg !67
  %188 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %182, i1 %47) #2, !dbg !67
  %189 = extractvalue { i32, i32, i32, i32 } %188, 0, !dbg !67
  %190 = extractvalue { i32, i32, i32, i32 } %188, 1, !dbg !67
  %191 = extractvalue { i32, i32, i32, i32 } %188, 2, !dbg !67
  %192 = extractvalue { i32, i32, i32, i32 } %188, 3, !dbg !67
  %193 = add i32 %38, 10752, !dbg !68
  %194 = add i32 %193, %23, !dbg !69
  %195 = add i32 %194, %36, !dbg !70
  %196 = add i32 %193, %24, !dbg !69
  %197 = add i32 %196, %36, !dbg !70
  %198 = sext i32 %195 to i64, !dbg !71
  %199 = getelementptr float, ptr addrspace(1) %0, i64 %198, !dbg !71
  %200 = sext i32 %197 to i64, !dbg !71
  %201 = getelementptr float, ptr addrspace(1) %0, i64 %200, !dbg !71
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %199, i1 %47) #2, !dbg !72
  %203 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !72
  %204 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !72
  %205 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !72
  %206 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !72
  %207 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %201, i1 %47) #2, !dbg !72
  %208 = extractvalue { i32, i32, i32, i32 } %207, 0, !dbg !72
  %209 = extractvalue { i32, i32, i32, i32 } %207, 1, !dbg !72
  %210 = extractvalue { i32, i32, i32, i32 } %207, 2, !dbg !72
  %211 = extractvalue { i32, i32, i32, i32 } %207, 3, !dbg !72
  %212 = insertelement <4 x i32> poison, i32 %51, i64 0, !dbg !32
  %213 = insertelement <4 x i32> %212, i32 %52, i64 1, !dbg !32
  %214 = insertelement <4 x i32> %213, i32 %53, i64 2, !dbg !32
  %215 = insertelement <4 x i32> %214, i32 %54, i64 3, !dbg !32
  %216 = bitcast <4 x i32> %215 to <4 x float>, !dbg !32
  %217 = insertelement <4 x i32> poison, i32 %70, i64 0, !dbg !37
  %218 = insertelement <4 x i32> %217, i32 %71, i64 1, !dbg !37
  %219 = insertelement <4 x i32> %218, i32 %72, i64 2, !dbg !37
  %220 = insertelement <4 x i32> %219, i32 %73, i64 3, !dbg !37
  %221 = bitcast <4 x i32> %220 to <4 x float>, !dbg !37
  %222 = insertelement <4 x i32> poison, i32 %89, i64 0, !dbg !42
  %223 = insertelement <4 x i32> %222, i32 %90, i64 1, !dbg !42
  %224 = insertelement <4 x i32> %223, i32 %91, i64 2, !dbg !42
  %225 = insertelement <4 x i32> %224, i32 %92, i64 3, !dbg !42
  %226 = bitcast <4 x i32> %225 to <4 x float>, !dbg !42
  %227 = insertelement <4 x i32> poison, i32 %108, i64 0, !dbg !47
  %228 = insertelement <4 x i32> %227, i32 %109, i64 1, !dbg !47
  %229 = insertelement <4 x i32> %228, i32 %110, i64 2, !dbg !47
  %230 = insertelement <4 x i32> %229, i32 %111, i64 3, !dbg !47
  %231 = bitcast <4 x i32> %230 to <4 x float>, !dbg !47
  %232 = insertelement <4 x i32> poison, i32 %127, i64 0, !dbg !52
  %233 = insertelement <4 x i32> %232, i32 %128, i64 1, !dbg !52
  %234 = insertelement <4 x i32> %233, i32 %129, i64 2, !dbg !52
  %235 = insertelement <4 x i32> %234, i32 %130, i64 3, !dbg !52
  %236 = bitcast <4 x i32> %235 to <4 x float>, !dbg !52
  %237 = insertelement <4 x i32> poison, i32 %146, i64 0, !dbg !57
  %238 = insertelement <4 x i32> %237, i32 %147, i64 1, !dbg !57
  %239 = insertelement <4 x i32> %238, i32 %148, i64 2, !dbg !57
  %240 = insertelement <4 x i32> %239, i32 %149, i64 3, !dbg !57
  %241 = bitcast <4 x i32> %240 to <4 x float>, !dbg !57
  %242 = insertelement <4 x i32> poison, i32 %165, i64 0, !dbg !62
  %243 = insertelement <4 x i32> %242, i32 %166, i64 1, !dbg !62
  %244 = insertelement <4 x i32> %243, i32 %167, i64 2, !dbg !62
  %245 = insertelement <4 x i32> %244, i32 %168, i64 3, !dbg !62
  %246 = bitcast <4 x i32> %245 to <4 x float>, !dbg !62
  %247 = insertelement <4 x i32> poison, i32 %184, i64 0, !dbg !67
  %248 = insertelement <4 x i32> %247, i32 %185, i64 1, !dbg !67
  %249 = insertelement <4 x i32> %248, i32 %186, i64 2, !dbg !67
  %250 = insertelement <4 x i32> %249, i32 %187, i64 3, !dbg !67
  %251 = bitcast <4 x i32> %250 to <4 x float>, !dbg !67
  %252 = insertelement <4 x i32> poison, i32 %203, i64 0, !dbg !72
  %253 = insertelement <4 x i32> %252, i32 %204, i64 1, !dbg !72
  %254 = insertelement <4 x i32> %253, i32 %205, i64 2, !dbg !72
  %255 = insertelement <4 x i32> %254, i32 %206, i64 3, !dbg !72
  %256 = bitcast <4 x i32> %255 to <4 x float>, !dbg !72
  %257 = fcmp ogt <4 x float> %221, %216, !dbg !73
  %258 = fcmp uno <4 x float> %221, zeroinitializer, !dbg !77
  %259 = or <4 x i1> %257, %258, !dbg !78
  %.v = select <4 x i1> %259, <4 x i32> %220, <4 x i32> %215, !dbg !79
  %260 = bitcast <4 x i32> %.v to <4 x float>, !dbg !79
  %261 = fcmp olt <4 x float> %260, %226, !dbg !80
  %262 = fcmp uno <4 x float> %226, zeroinitializer, !dbg !82
  %263 = or <4 x i1> %262, %261, !dbg !83
  %.v18 = select <4 x i1> %263, <4 x i32> %225, <4 x i32> %.v, !dbg !84
  %264 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !84
  %265 = fcmp olt <4 x float> %264, %231, !dbg !85
  %266 = fcmp uno <4 x float> %231, zeroinitializer, !dbg !87
  %267 = or <4 x i1> %266, %265, !dbg !88
  %.v19 = select <4 x i1> %267, <4 x i32> %230, <4 x i32> %.v18, !dbg !89
  %268 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !89
  %269 = fcmp olt <4 x float> %268, %236, !dbg !90
  %270 = fcmp uno <4 x float> %236, zeroinitializer, !dbg !92
  %271 = or <4 x i1> %270, %269, !dbg !93
  %.v20 = select <4 x i1> %271, <4 x i32> %235, <4 x i32> %.v19, !dbg !94
  %272 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !94
  %273 = fcmp olt <4 x float> %272, %241, !dbg !95
  %274 = fcmp uno <4 x float> %241, zeroinitializer, !dbg !97
  %275 = or <4 x i1> %274, %273, !dbg !98
  %.v21 = select <4 x i1> %275, <4 x i32> %240, <4 x i32> %.v20, !dbg !99
  %276 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !99
  %277 = fcmp olt <4 x float> %276, %246, !dbg !100
  %278 = fcmp uno <4 x float> %246, zeroinitializer, !dbg !102
  %279 = or <4 x i1> %278, %277, !dbg !103
  %.v22 = select <4 x i1> %279, <4 x i32> %245, <4 x i32> %.v21, !dbg !104
  %280 = bitcast <4 x i32> %.v22 to <4 x float>, !dbg !104
  %281 = fcmp olt <4 x float> %280, %251, !dbg !105
  %282 = fcmp uno <4 x float> %251, zeroinitializer, !dbg !107
  %283 = or <4 x i1> %282, %281, !dbg !108
  %.v23 = select <4 x i1> %283, <4 x i32> %250, <4 x i32> %.v22, !dbg !109
  %284 = bitcast <4 x i32> %.v23 to <4 x float>, !dbg !109
  %285 = fcmp olt <4 x float> %284, %256, !dbg !110
  %286 = extractelement <4 x i1> %285, i64 0, !dbg !112
  %287 = extractelement <4 x i1> %285, i64 1, !dbg !112
  %288 = extractelement <4 x i1> %285, i64 2, !dbg !112
  %289 = extractelement <4 x i1> %285, i64 3, !dbg !112
  %290 = zext <4 x i1> %257 to <4 x i8>, !dbg !113
  %291 = select <4 x i1> %261, <4 x i8> splat (i8 2), <4 x i8> %290, !dbg !114
  %292 = select <4 x i1> %265, <4 x i8> splat (i8 3), <4 x i8> %291, !dbg !115
  %293 = select <4 x i1> %269, <4 x i8> splat (i8 4), <4 x i8> %292, !dbg !116
  %294 = select <4 x i1> %273, <4 x i8> splat (i8 5), <4 x i8> %293, !dbg !117
  %295 = select <4 x i1> %277, <4 x i8> splat (i8 6), <4 x i8> %294, !dbg !118
  %296 = select <4 x i1> %281, <4 x i8> splat (i8 7), <4 x i8> %295, !dbg !119
  %297 = select <4 x i1> %285, <4 x i8> splat (i8 8), <4 x i8> %296, !dbg !120
  %298 = insertelement <4 x i32> poison, i32 %56, i64 0, !dbg !32
  %299 = insertelement <4 x i32> %298, i32 %57, i64 1, !dbg !32
  %300 = insertelement <4 x i32> %299, i32 %58, i64 2, !dbg !32
  %301 = insertelement <4 x i32> %300, i32 %59, i64 3, !dbg !32
  %302 = bitcast <4 x i32> %301 to <4 x float>, !dbg !32
  %303 = insertelement <4 x i32> poison, i32 %75, i64 0, !dbg !37
  %304 = insertelement <4 x i32> %303, i32 %76, i64 1, !dbg !37
  %305 = insertelement <4 x i32> %304, i32 %77, i64 2, !dbg !37
  %306 = insertelement <4 x i32> %305, i32 %78, i64 3, !dbg !37
  %307 = bitcast <4 x i32> %306 to <4 x float>, !dbg !37
  %308 = insertelement <4 x i32> poison, i32 %94, i64 0, !dbg !42
  %309 = insertelement <4 x i32> %308, i32 %95, i64 1, !dbg !42
  %310 = insertelement <4 x i32> %309, i32 %96, i64 2, !dbg !42
  %311 = insertelement <4 x i32> %310, i32 %97, i64 3, !dbg !42
  %312 = bitcast <4 x i32> %311 to <4 x float>, !dbg !42
  %313 = insertelement <4 x i32> poison, i32 %113, i64 0, !dbg !47
  %314 = insertelement <4 x i32> %313, i32 %114, i64 1, !dbg !47
  %315 = insertelement <4 x i32> %314, i32 %115, i64 2, !dbg !47
  %316 = insertelement <4 x i32> %315, i32 %116, i64 3, !dbg !47
  %317 = bitcast <4 x i32> %316 to <4 x float>, !dbg !47
  %318 = insertelement <4 x i32> poison, i32 %132, i64 0, !dbg !52
  %319 = insertelement <4 x i32> %318, i32 %133, i64 1, !dbg !52
  %320 = insertelement <4 x i32> %319, i32 %134, i64 2, !dbg !52
  %321 = insertelement <4 x i32> %320, i32 %135, i64 3, !dbg !52
  %322 = bitcast <4 x i32> %321 to <4 x float>, !dbg !52
  %323 = insertelement <4 x i32> poison, i32 %151, i64 0, !dbg !57
  %324 = insertelement <4 x i32> %323, i32 %152, i64 1, !dbg !57
  %325 = insertelement <4 x i32> %324, i32 %153, i64 2, !dbg !57
  %326 = insertelement <4 x i32> %325, i32 %154, i64 3, !dbg !57
  %327 = bitcast <4 x i32> %326 to <4 x float>, !dbg !57
  %328 = insertelement <4 x i32> poison, i32 %170, i64 0, !dbg !62
  %329 = insertelement <4 x i32> %328, i32 %171, i64 1, !dbg !62
  %330 = insertelement <4 x i32> %329, i32 %172, i64 2, !dbg !62
  %331 = insertelement <4 x i32> %330, i32 %173, i64 3, !dbg !62
  %332 = bitcast <4 x i32> %331 to <4 x float>, !dbg !62
  %333 = insertelement <4 x i32> poison, i32 %189, i64 0, !dbg !67
  %334 = insertelement <4 x i32> %333, i32 %190, i64 1, !dbg !67
  %335 = insertelement <4 x i32> %334, i32 %191, i64 2, !dbg !67
  %336 = insertelement <4 x i32> %335, i32 %192, i64 3, !dbg !67
  %337 = bitcast <4 x i32> %336 to <4 x float>, !dbg !67
  %338 = insertelement <4 x i32> poison, i32 %208, i64 0, !dbg !72
  %339 = insertelement <4 x i32> %338, i32 %209, i64 1, !dbg !72
  %340 = insertelement <4 x i32> %339, i32 %210, i64 2, !dbg !72
  %341 = insertelement <4 x i32> %340, i32 %211, i64 3, !dbg !72
  %342 = bitcast <4 x i32> %341 to <4 x float>, !dbg !72
  %343 = fcmp ogt <4 x float> %307, %302, !dbg !73
  %344 = fcmp uno <4 x float> %307, zeroinitializer, !dbg !77
  %345 = or <4 x i1> %343, %344, !dbg !78
  %.v24 = select <4 x i1> %345, <4 x i32> %306, <4 x i32> %301, !dbg !79
  %346 = bitcast <4 x i32> %.v24 to <4 x float>, !dbg !79
  %347 = fcmp olt <4 x float> %346, %312, !dbg !80
  %348 = fcmp uno <4 x float> %312, zeroinitializer, !dbg !82
  %349 = or <4 x i1> %348, %347, !dbg !83
  %.v25 = select <4 x i1> %349, <4 x i32> %311, <4 x i32> %.v24, !dbg !84
  %350 = bitcast <4 x i32> %.v25 to <4 x float>, !dbg !84
  %351 = fcmp olt <4 x float> %350, %317, !dbg !85
  %352 = fcmp uno <4 x float> %317, zeroinitializer, !dbg !87
  %353 = or <4 x i1> %352, %351, !dbg !88
  %.v26 = select <4 x i1> %353, <4 x i32> %316, <4 x i32> %.v25, !dbg !89
  %354 = bitcast <4 x i32> %.v26 to <4 x float>, !dbg !89
  %355 = fcmp olt <4 x float> %354, %322, !dbg !90
  %356 = fcmp uno <4 x float> %322, zeroinitializer, !dbg !92
  %357 = or <4 x i1> %356, %355, !dbg !93
  %.v27 = select <4 x i1> %357, <4 x i32> %321, <4 x i32> %.v26, !dbg !94
  %358 = bitcast <4 x i32> %.v27 to <4 x float>, !dbg !94
  %359 = fcmp olt <4 x float> %358, %327, !dbg !95
  %360 = fcmp uno <4 x float> %327, zeroinitializer, !dbg !97
  %361 = or <4 x i1> %360, %359, !dbg !98
  %.v28 = select <4 x i1> %361, <4 x i32> %326, <4 x i32> %.v27, !dbg !99
  %362 = bitcast <4 x i32> %.v28 to <4 x float>, !dbg !99
  %363 = fcmp olt <4 x float> %362, %332, !dbg !100
  %364 = fcmp uno <4 x float> %332, zeroinitializer, !dbg !102
  %365 = or <4 x i1> %364, %363, !dbg !103
  %.v29 = select <4 x i1> %365, <4 x i32> %331, <4 x i32> %.v28, !dbg !104
  %366 = bitcast <4 x i32> %.v29 to <4 x float>, !dbg !104
  %367 = fcmp olt <4 x float> %366, %337, !dbg !105
  %368 = fcmp uno <4 x float> %337, zeroinitializer, !dbg !107
  %369 = or <4 x i1> %368, %367, !dbg !108
  %.v30 = select <4 x i1> %369, <4 x i32> %336, <4 x i32> %.v29, !dbg !109
  %370 = bitcast <4 x i32> %.v30 to <4 x float>, !dbg !109
  %371 = fcmp olt <4 x float> %370, %342, !dbg !110
  %372 = shufflevector <4 x float> %342, <4 x float> %256, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !121
  %373 = fcmp uno <8 x float> %372, zeroinitializer, !dbg !121
  %374 = extractelement <8 x i1> %373, i64 7, !dbg !112
  %375 = or i1 %374, %286, !dbg !112
  %376 = extractelement <8 x i1> %373, i64 6, !dbg !112
  %377 = or i1 %376, %287, !dbg !112
  %378 = extractelement <8 x i1> %373, i64 5, !dbg !112
  %379 = or i1 %378, %288, !dbg !112
  %380 = extractelement <8 x i1> %373, i64 4, !dbg !112
  %381 = or i1 %380, %289, !dbg !112
  %382 = extractelement <4 x i1> %371, i64 0, !dbg !112
  %383 = extractelement <8 x i1> %373, i64 3, !dbg !112
  %384 = or i1 %383, %382, !dbg !112
  %385 = extractelement <4 x i1> %371, i64 1, !dbg !112
  %386 = extractelement <8 x i1> %373, i64 2, !dbg !112
  %387 = or i1 %386, %385, !dbg !112
  %388 = extractelement <4 x i1> %371, i64 2, !dbg !112
  %389 = extractelement <8 x i1> %373, i64 1, !dbg !112
  %390 = or i1 %389, %388, !dbg !112
  %391 = extractelement <4 x i1> %371, i64 3, !dbg !112
  %392 = extractelement <8 x i1> %373, i64 0, !dbg !112
  %393 = or i1 %392, %391, !dbg !112
  %394 = zext <4 x i1> %343 to <4 x i8>, !dbg !113
  %395 = select <4 x i1> %347, <4 x i8> splat (i8 2), <4 x i8> %394, !dbg !114
  %396 = select <4 x i1> %351, <4 x i8> splat (i8 3), <4 x i8> %395, !dbg !115
  %397 = select <4 x i1> %355, <4 x i8> splat (i8 4), <4 x i8> %396, !dbg !116
  %398 = select <4 x i1> %359, <4 x i8> splat (i8 5), <4 x i8> %397, !dbg !117
  %399 = select <4 x i1> %363, <4 x i8> splat (i8 6), <4 x i8> %398, !dbg !118
  %400 = select <4 x i1> %367, <4 x i8> splat (i8 7), <4 x i8> %399, !dbg !119
  %401 = select <4 x i1> %371, <4 x i8> splat (i8 8), <4 x i8> %400, !dbg !120
  %402 = shl i32 %25, 2, !dbg !122
  %403 = shl i32 %26, 2, !dbg !122
  %404 = mul i32 %34, 5120, !dbg !123
  %405 = add i32 %402, %404, !dbg !124
  %406 = add i32 %404, %403, !dbg !124
  %407 = sext i32 %405 to i64, !dbg !125
  %408 = getelementptr float, ptr addrspace(1) %1, i64 %407, !dbg !125
  %409 = sext i32 %406 to i64, !dbg !125
  %410 = getelementptr float, ptr addrspace(1) %1, i64 %409, !dbg !125
  %411 = shl i32 %8, 7, !dbg !126
  %412 = and i32 %411, 896, !dbg !126
  %413 = or disjoint i32 %412, %10, !dbg !126
  %414 = and i32 %11, 508, !dbg !126
  %415 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %412, !dbg !126
  %416 = getelementptr float, ptr addrspace(3) %415, i32 %413, !dbg !126
  %417 = extractelement <4 x i32> %.v23, i64 0, !dbg !126
  %418 = select i1 %375, i32 %203, i32 %417, !dbg !127
  %419 = insertelement <1 x i32> poison, i32 %418, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %416, <1 x i32> %419, i1 true) #2, !dbg !126
  %420 = or disjoint i32 %413, 16, !dbg !126
  %421 = lshr i32 %420, 2, !dbg !126
  %422 = and i32 %421, 228, !dbg !126
  %423 = getelementptr float, ptr addrspace(3) @global_smem, i32 %422, !dbg !126
  %424 = getelementptr float, ptr addrspace(3) %423, i32 %420, !dbg !126
  %425 = extractelement <4 x i32> %.v23, i64 1, !dbg !126
  %426 = select i1 %377, i32 %204, i32 %425, !dbg !127
  %427 = insertelement <1 x i32> poison, i32 %426, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %424, <1 x i32> %427, i1 true) #2, !dbg !126
  %428 = or disjoint i32 %413, 32, !dbg !126
  %429 = lshr i32 %428, 2, !dbg !126
  %430 = and i32 %429, 232, !dbg !126
  %431 = getelementptr float, ptr addrspace(3) @global_smem, i32 %430, !dbg !126
  %432 = getelementptr float, ptr addrspace(3) %431, i32 %428, !dbg !126
  %433 = extractelement <4 x i32> %.v23, i64 2, !dbg !126
  %434 = select i1 %379, i32 %205, i32 %433, !dbg !127
  %435 = insertelement <1 x i32> poison, i32 %434, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %432, <1 x i32> %435, i1 true) #2, !dbg !126
  %436 = or disjoint i32 %413, 48, !dbg !126
  %437 = lshr i32 %436, 2, !dbg !126
  %438 = and i32 %437, 236, !dbg !126
  %439 = getelementptr float, ptr addrspace(3) @global_smem, i32 %438, !dbg !126
  %440 = getelementptr float, ptr addrspace(3) %439, i32 %436, !dbg !126
  %441 = extractelement <4 x i32> %.v23, i64 3, !dbg !126
  %442 = select i1 %381, i32 %206, i32 %441, !dbg !127
  %443 = insertelement <1 x i32> poison, i32 %442, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %440, <1 x i32> %443, i1 true) #2, !dbg !126
  %444 = or disjoint i32 %413, 64, !dbg !126
  %445 = lshr i32 %444, 2, !dbg !126
  %446 = and i32 %445, 240, !dbg !126
  %447 = getelementptr float, ptr addrspace(3) @global_smem, i32 %446, !dbg !126
  %448 = getelementptr float, ptr addrspace(3) %447, i32 %444, !dbg !126
  %449 = extractelement <4 x i32> %.v30, i64 0, !dbg !126
  %450 = select i1 %384, i32 %208, i32 %449, !dbg !127
  %451 = insertelement <1 x i32> poison, i32 %450, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %448, <1 x i32> %451, i1 true) #2, !dbg !126
  %452 = or disjoint i32 %413, 80, !dbg !126
  %453 = lshr i32 %452, 2, !dbg !126
  %454 = and i32 %453, 244, !dbg !126
  %455 = getelementptr float, ptr addrspace(3) @global_smem, i32 %454, !dbg !126
  %456 = getelementptr float, ptr addrspace(3) %455, i32 %452, !dbg !126
  %457 = extractelement <4 x i32> %.v30, i64 1, !dbg !126
  %458 = select i1 %387, i32 %209, i32 %457, !dbg !127
  %459 = insertelement <1 x i32> poison, i32 %458, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %456, <1 x i32> %459, i1 true) #2, !dbg !126
  %460 = or disjoint i32 %413, 96, !dbg !126
  %461 = lshr i32 %460, 2, !dbg !126
  %462 = and i32 %461, 248, !dbg !126
  %463 = getelementptr float, ptr addrspace(3) @global_smem, i32 %462, !dbg !126
  %464 = getelementptr float, ptr addrspace(3) %463, i32 %460, !dbg !126
  %465 = extractelement <4 x i32> %.v30, i64 2, !dbg !126
  %466 = select i1 %390, i32 %210, i32 %465, !dbg !127
  %467 = insertelement <1 x i32> poison, i32 %466, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %464, <1 x i32> %467, i1 true) #2, !dbg !126
  %468 = or disjoint i32 %413, 112, !dbg !126
  %469 = lshr i32 %468, 2, !dbg !126
  %470 = and i32 %469, 252, !dbg !126
  %471 = getelementptr float, ptr addrspace(3) @global_smem, i32 %470, !dbg !126
  %472 = getelementptr float, ptr addrspace(3) %471, i32 %468, !dbg !126
  %473 = extractelement <4 x i32> %.v30, i64 3, !dbg !126
  %474 = select i1 %393, i32 %211, i32 %473, !dbg !127
  %475 = insertelement <1 x i32> poison, i32 %474, i64 0, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %472, <1 x i32> %475, i1 true) #2, !dbg !126
  tail call void @llvm.nvvm.barrier0(), !dbg !126
  %476 = and i32 %8, 124, !dbg !126
  %477 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %476, !dbg !126
  %478 = getelementptr inbounds float, ptr addrspace(3) %477, i32 %414, !dbg !126
  %479 = or disjoint i32 %414, 512, !dbg !126
  %480 = lshr exact i32 %479, 2, !dbg !126
  %481 = and i32 %480, 252, !dbg !126
  %482 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %481, !dbg !126
  %483 = getelementptr inbounds float, ptr addrspace(3) %482, i32 %479, !dbg !126
  %484 = load <4 x i32>, ptr addrspace(3) %483, align 16, !dbg !126
  %.extract = load i32, ptr addrspace(3) %478, align 16, !dbg !126
  %485 = getelementptr inbounds i8, ptr addrspace(3) %478, i32 4, !dbg !126
  %.extract11 = load i32, ptr addrspace(3) %485, align 4, !dbg !126
  %486 = getelementptr inbounds i8, ptr addrspace(3) %478, i32 8, !dbg !126
  %.extract12 = load i32, ptr addrspace(3) %486, align 8, !dbg !126
  %487 = getelementptr inbounds i8, ptr addrspace(3) %478, i32 12, !dbg !126
  %.extract13 = load i32, ptr addrspace(3) %487, align 4, !dbg !126
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %408, i1 %48) #2, !dbg !126
  %.extract14 = extractelement <4 x i32> %484, i64 0, !dbg !126
  %.extract15 = extractelement <4 x i32> %484, i64 1, !dbg !126
  %.extract16 = extractelement <4 x i32> %484, i64 2, !dbg !126
  %.extract17 = extractelement <4 x i32> %484, i64 3, !dbg !126
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract14, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %410, i1 %49) #2, !dbg !126
  %488 = mul i32 %13, 768, !dbg !128
  %489 = add i32 %23, %488, !dbg !129
  %490 = sext i32 %489 to i64, !dbg !130
  %491 = getelementptr i8, ptr addrspace(1) %2, i64 %490, !dbg !130
  %492 = bitcast <4 x i8> %297 to i32, !dbg !131
  %493 = bitcast <4 x i8> %401 to i32, !dbg !131
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %492, i32 %493, ptr addrspace(1) %491, i1 %47) #2, !dbg !131
  ret void, !dbg !132
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwnd6u37dv6kl6n7ugdargbrkq4q7kmkvwvee6mbmwrlwmhopcjb.py", directory: "inductor_cache/wn")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_42, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_42, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_42", linkageName: "triton_poi_fused_max_pool2d_with_indices_42", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 21, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 26, scope: !7)
!23 = !DILocation(line: 31, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 40, scope: !7)
!25 = !DILocation(line: 34, column: 50, scope: !7)
!26 = !DILocation(line: 34, column: 61, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 45, scope: !7)
!29 = !DILocation(line: 34, column: 55, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 74, scope: !7)
!32 = !DILocation(line: 34, column: 66, scope: !7)
!33 = !DILocation(line: 35, column: 41, scope: !7)
!34 = !DILocation(line: 35, column: 51, scope: !7)
!35 = !DILocation(line: 35, column: 61, scope: !7)
!36 = !DILocation(line: 35, column: 30, scope: !7)
!37 = !DILocation(line: 35, column: 72, scope: !7)
!38 = !DILocation(line: 36, column: 42, scope: !7)
!39 = !DILocation(line: 36, column: 52, scope: !7)
!40 = !DILocation(line: 36, column: 62, scope: !7)
!41 = !DILocation(line: 36, column: 30, scope: !7)
!42 = !DILocation(line: 36, column: 73, scope: !7)
!43 = !DILocation(line: 37, column: 42, scope: !7)
!44 = !DILocation(line: 37, column: 52, scope: !7)
!45 = !DILocation(line: 37, column: 62, scope: !7)
!46 = !DILocation(line: 37, column: 30, scope: !7)
!47 = !DILocation(line: 37, column: 73, scope: !7)
!48 = !DILocation(line: 38, column: 42, scope: !7)
!49 = !DILocation(line: 38, column: 52, scope: !7)
!50 = !DILocation(line: 38, column: 62, scope: !7)
!51 = !DILocation(line: 38, column: 30, scope: !7)
!52 = !DILocation(line: 38, column: 73, scope: !7)
!53 = !DILocation(line: 39, column: 42, scope: !7)
!54 = !DILocation(line: 39, column: 52, scope: !7)
!55 = !DILocation(line: 39, column: 62, scope: !7)
!56 = !DILocation(line: 39, column: 30, scope: !7)
!57 = !DILocation(line: 39, column: 73, scope: !7)
!58 = !DILocation(line: 40, column: 43, scope: !7)
!59 = !DILocation(line: 40, column: 53, scope: !7)
!60 = !DILocation(line: 40, column: 63, scope: !7)
!61 = !DILocation(line: 40, column: 31, scope: !7)
!62 = !DILocation(line: 40, column: 74, scope: !7)
!63 = !DILocation(line: 41, column: 43, scope: !7)
!64 = !DILocation(line: 41, column: 53, scope: !7)
!65 = !DILocation(line: 41, column: 63, scope: !7)
!66 = !DILocation(line: 41, column: 31, scope: !7)
!67 = !DILocation(line: 41, column: 74, scope: !7)
!68 = !DILocation(line: 42, column: 44, scope: !7)
!69 = !DILocation(line: 42, column: 54, scope: !7)
!70 = !DILocation(line: 42, column: 64, scope: !7)
!71 = !DILocation(line: 42, column: 31, scope: !7)
!72 = !DILocation(line: 42, column: 75, scope: !7)
!73 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !76)
!74 = distinct !DILexicalBlockFile(scope: !7, file: !75, discriminator: 0)
!75 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!76 = !DILocation(line: 43, column: 40, scope: !7)
!77 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !76)
!78 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !76)
!79 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !76)
!80 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !81)
!81 = !DILocation(line: 44, column: 40, scope: !7)
!82 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !81)
!83 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !81)
!84 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !81)
!85 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !86)
!86 = !DILocation(line: 45, column: 40, scope: !7)
!87 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !86)
!88 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !86)
!89 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !86)
!90 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !91)
!91 = !DILocation(line: 46, column: 40, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !91)
!95 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !96)
!96 = !DILocation(line: 47, column: 41, scope: !7)
!97 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !96)
!98 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !96)
!99 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !96)
!100 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !101)
!101 = !DILocation(line: 48, column: 42, scope: !7)
!102 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !101)
!103 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !101)
!104 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !101)
!105 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !106)
!106 = !DILocation(line: 49, column: 42, scope: !7)
!107 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !106)
!108 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !106)
!109 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !106)
!110 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !111)
!111 = !DILocation(line: 50, column: 42, scope: !7)
!112 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !111)
!113 = !DILocation(line: 54, column: 35, scope: !7)
!114 = !DILocation(line: 57, column: 35, scope: !7)
!115 = !DILocation(line: 60, column: 35, scope: !7)
!116 = !DILocation(line: 63, column: 35, scope: !7)
!117 = !DILocation(line: 66, column: 35, scope: !7)
!118 = !DILocation(line: 69, column: 35, scope: !7)
!119 = !DILocation(line: 72, column: 35, scope: !7)
!120 = !DILocation(line: 75, column: 35, scope: !7)
!121 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !111)
!122 = !DILocation(line: 76, column: 32, scope: !7)
!123 = !DILocation(line: 76, column: 42, scope: !7)
!124 = !DILocation(line: 76, column: 37, scope: !7)
!125 = !DILocation(line: 76, column: 25, scope: !7)
!126 = !DILocation(line: 76, column: 54, scope: !7)
!127 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !111)
!128 = !DILocation(line: 77, column: 34, scope: !7)
!129 = !DILocation(line: 77, column: 30, scope: !7)
!130 = !DILocation(line: 77, column: 25, scope: !7)
!131 = !DILocation(line: 77, column: 46, scope: !7)
!132 = !DILocation(line: 77, column: 4, scope: !7)
