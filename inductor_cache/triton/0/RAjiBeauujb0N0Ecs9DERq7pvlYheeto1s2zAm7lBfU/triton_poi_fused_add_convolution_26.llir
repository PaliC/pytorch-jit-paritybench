; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_convolution_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = sdiv i32 %15, 4096, !dbg !14
  %17 = srem i32 %16, 4, !dbg !15
  %18 = sext i32 %15 to i64, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !16
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #1, !dbg !17
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !17
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !17
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !17
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !17
  %25 = sext i32 %17 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !18
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !19
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !19
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !20
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !21
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !21
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !21
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !21
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !23
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !23
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !23
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !23
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %18, !dbg !24
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !25
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !26
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !27
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !27
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !27
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !27
  %53 = getelementptr float, ptr addrspace(1) %6, i64 %18, !dbg !28
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !29
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !29
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !29
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !29
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !29
  %59 = getelementptr float, ptr addrspace(1) %7, i64 %25, !dbg !30
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !31
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !31
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !31
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !31
  %64 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !17
  %65 = insertelement <2 x i32> %64, i32 %33, i64 1, !dbg !17
  %66 = bitcast <2 x i32> %65 to <2 x float>, !dbg !17
  %67 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !19
  %68 = insertelement <2 x i32> %67, i32 %38, i64 1, !dbg !19
  %69 = bitcast <2 x i32> %68 to <2 x float>, !dbg !19
  %70 = fadd <2 x float> %66, %69, !dbg !32
  %71 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !17
  %72 = insertelement <2 x i32> %71, i32 %34, i64 1, !dbg !17
  %73 = bitcast <2 x i32> %72 to <2 x float>, !dbg !17
  %74 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !19
  %75 = insertelement <2 x i32> %74, i32 %39, i64 1, !dbg !19
  %76 = bitcast <2 x i32> %75 to <2 x float>, !dbg !19
  %77 = fadd <2 x float> %73, %76, !dbg !32
  %78 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !17
  %79 = insertelement <2 x i32> %78, i32 %35, i64 1, !dbg !17
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !17
  %81 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !19
  %82 = insertelement <2 x i32> %81, i32 %40, i64 1, !dbg !19
  %83 = bitcast <2 x i32> %82 to <2 x float>, !dbg !19
  %84 = fadd <2 x float> %80, %83, !dbg !32
  %85 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !17
  %86 = insertelement <2 x i32> %85, i32 %36, i64 1, !dbg !17
  %87 = bitcast <2 x i32> %86 to <2 x float>, !dbg !17
  %88 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !19
  %89 = insertelement <2 x i32> %88, i32 %41, i64 1, !dbg !19
  %90 = bitcast <2 x i32> %89 to <2 x float>, !dbg !19
  %91 = fadd <2 x float> %87, %90, !dbg !32
  %shift = shufflevector <2 x float> %70, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %92 = fadd <2 x float> %70, %shift, !dbg !33
  %shift1 = shufflevector <2 x float> %77, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %93 = fadd <2 x float> %77, %shift1, !dbg !33
  %shift2 = shufflevector <2 x float> %84, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %94 = fadd <2 x float> %84, %shift2, !dbg !33
  %shift3 = shufflevector <2 x float> %91, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %95 = fadd <2 x float> %91, %shift3, !dbg !33
  %96 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !25
  %97 = insertelement <2 x i32> %96, i32 %55, i64 1, !dbg !25
  %98 = bitcast <2 x i32> %97 to <2 x float>, !dbg !25
  %99 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !27
  %100 = insertelement <2 x i32> %99, i32 %60, i64 1, !dbg !27
  %101 = bitcast <2 x i32> %100 to <2 x float>, !dbg !27
  %102 = fadd <2 x float> %98, %101, !dbg !34
  %103 = fadd <2 x float> %92, %102, !dbg !35
  %104 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !25
  %105 = insertelement <2 x i32> %104, i32 %56, i64 1, !dbg !25
  %106 = bitcast <2 x i32> %105 to <2 x float>, !dbg !25
  %107 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !27
  %108 = insertelement <2 x i32> %107, i32 %61, i64 1, !dbg !27
  %109 = bitcast <2 x i32> %108 to <2 x float>, !dbg !27
  %110 = fadd <2 x float> %106, %109, !dbg !34
  %111 = fadd <2 x float> %93, %110, !dbg !35
  %112 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !25
  %113 = insertelement <2 x i32> %112, i32 %57, i64 1, !dbg !25
  %114 = bitcast <2 x i32> %113 to <2 x float>, !dbg !25
  %115 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !27
  %116 = insertelement <2 x i32> %115, i32 %62, i64 1, !dbg !27
  %117 = bitcast <2 x i32> %116 to <2 x float>, !dbg !27
  %118 = fadd <2 x float> %114, %117, !dbg !34
  %119 = fadd <2 x float> %94, %118, !dbg !35
  %120 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !25
  %121 = insertelement <2 x i32> %120, i32 %58, i64 1, !dbg !25
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !25
  %123 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !27
  %124 = insertelement <2 x i32> %123, i32 %63, i64 1, !dbg !27
  %125 = bitcast <2 x i32> %124 to <2 x float>, !dbg !27
  %126 = fadd <2 x float> %122, %125, !dbg !34
  %127 = fadd <2 x float> %95, %126, !dbg !35
  %shift4 = shufflevector <2 x float> %102, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !36
  %128 = fadd <2 x float> %103, %shift4, !dbg !36
  %shift5 = shufflevector <2 x float> %110, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !36
  %129 = fadd <2 x float> %111, %shift5, !dbg !36
  %shift6 = shufflevector <2 x float> %118, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !36
  %130 = fadd <2 x float> %119, %shift6, !dbg !36
  %shift7 = shufflevector <2 x float> %126, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !36
  %131 = fadd <2 x float> %127, %shift7, !dbg !36
  %bc = bitcast <2 x float> %128 to <2 x i32>, !dbg !37
  %132 = extractelement <2 x i32> %bc, i64 0, !dbg !37
  %bc8 = bitcast <2 x float> %129 to <2 x i32>, !dbg !37
  %133 = extractelement <2 x i32> %bc8, i64 0, !dbg !37
  %bc9 = bitcast <2 x float> %130 to <2 x i32>, !dbg !37
  %134 = extractelement <2 x i32> %bc9, i64 0, !dbg !37
  %bc10 = bitcast <2 x float> %131 to <2 x i32>, !dbg !37
  %135 = extractelement <2 x i32> %bc10, i64 0, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %132, i32 %133, i32 %134, i32 %135, ptr addrspace(1) %19, i1 true) #1, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7y7dv5zxijajxgvdmesg3gtkneidldoyektfieoig7jajnexm46.py", directory: "inductor_cache/7y")
!4 = !{ptr @triton_poi_fused_add_convolution_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_26", linkageName: "triton_poi_fused_add_convolution_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 35, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 18, scope: !7)
!33 = !DILocation(line: 36, column: 18, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 38, column: 19, scope: !7)
!36 = !DILocation(line: 40, column: 20, scope: !7)
!37 = !DILocation(line: 43, column: 40, scope: !7)
!38 = !DILocation(line: 43, column: 4, scope: !7)
