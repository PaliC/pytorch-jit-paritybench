; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_convolution_mul_sub_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !13
  %13 = shufflevector <2 x i32> %12, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !13
  %14 = or disjoint <2 x i32> %13, <i32 3, i32 2>, !dbg !13
  %15 = or disjoint i32 %10, 512, !dbg !13
  %16 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !14
  %17 = insertelement <2 x i32> %16, i32 %10, i64 1, !dbg !14
  %18 = sdiv <2 x i32> %17, splat (i32 256), !dbg !14
  %19 = srem i32 %10, 256, !dbg !15
  %20 = srem i32 %11, 256, !dbg !15
  %21 = shufflevector <2 x i32> %18, <2 x i32> %14, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !16
  %22 = srem <4 x i32> %21, splat (i32 256), !dbg !16
  %23 = sdiv i32 %10, 65536, !dbg !17
  %24 = sdiv i32 %15, 65536, !dbg !17
  %.lhs.trunc = trunc nsw i32 %23 to i16, !dbg !18
  %25 = srem i16 %.lhs.trunc, 3, !dbg !18
  %.lhs.trunc2 = trunc nsw i32 %24 to i16, !dbg !18
  %26 = srem i16 %.lhs.trunc2, 3, !dbg !18
  %27 = sext i32 %10 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !19
  %29 = sext i32 %15 to i64, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !19
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #2, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !20
  %36 = bitcast i32 %32 to float, !dbg !20
  %37 = bitcast i32 %33 to float, !dbg !20
  %38 = bitcast i32 %34 to float, !dbg !20
  %39 = bitcast i32 %35 to float, !dbg !20
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #2, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !20
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !20
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !20
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !20
  %45 = bitcast i32 %41 to float, !dbg !20
  %46 = bitcast i32 %42 to float, !dbg !20
  %47 = bitcast i32 %43 to float, !dbg !20
  %48 = bitcast i32 %44 to float, !dbg !20
  %49 = sext i16 %25 to i64, !dbg !21
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !21
  %51 = sext i16 %26 to i64, !dbg !21
  %52 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !21
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #2, !dbg !22
  %54 = bitcast i32 %53 to float, !dbg !22
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #2, !dbg !22
  %56 = bitcast i32 %55 to float, !dbg !22
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #2, !dbg !22
  %58 = bitcast i32 %57 to float, !dbg !22
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #2, !dbg !22
  %60 = bitcast i32 %59 to float, !dbg !22
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #2, !dbg !22
  %62 = bitcast i32 %61 to float, !dbg !22
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #2, !dbg !22
  %64 = bitcast i32 %63 to float, !dbg !22
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #2, !dbg !22
  %66 = bitcast i32 %65 to float, !dbg !22
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #2, !dbg !22
  %68 = bitcast i32 %67 to float, !dbg !22
  %69 = sitofp i32 %19 to float, !dbg !23
  %70 = sitofp i32 %20 to float, !dbg !23
  %71 = sitofp <4 x i32> %22 to <4 x float>, !dbg !24
  %72 = fadd float %69, 5.000000e-01, !dbg !25
  %73 = fadd float %70, 5.000000e-01, !dbg !25
  %74 = fadd <4 x float> %71, splat (float 5.000000e-01), !dbg !26
  %75 = fmul float %72, 2.500000e-01, !dbg !27
  %76 = fmul float %73, 2.500000e-01, !dbg !27
  %77 = fmul <4 x float> %74, splat (float 2.500000e-01), !dbg !28
  %78 = fadd float %75, -5.000000e-01, !dbg !29
  %79 = fadd float %76, -5.000000e-01, !dbg !29
  %80 = fadd <4 x float> %77, splat (float -5.000000e-01), !dbg !30
  %81 = fcmp ogt float %78, 0.000000e+00, !dbg !31
  %82 = fcmp ogt float %79, 0.000000e+00, !dbg !31
  %83 = fcmp ogt <4 x float> %80, zeroinitializer, !dbg !35
  %84 = select i1 %81, float %78, float 0.000000e+00, !dbg !37
  %85 = select i1 %82, float %79, float 0.000000e+00, !dbg !37
  %86 = select <4 x i1> %83, <4 x float> %80, <4 x float> zeroinitializer, !dbg !38
  %87 = fptosi float %84 to i32, !dbg !39
  %88 = fptosi float %85 to i32, !dbg !39
  %89 = fptosi <4 x float> %86 to <4 x i32>, !dbg !40
  %90 = extractelement <4 x i32> %89, i64 1, !dbg !41
  %91 = shl i32 %90, 6, !dbg !43
  %92 = extractelement <4 x i32> %89, i64 0, !dbg !41
  %93 = shl i32 %92, 6, !dbg !43
  %94 = shl nsw i32 %23, 12, !dbg !44
  %95 = shl nsw i32 %24, 12, !dbg !44
  %96 = add i32 %91, %94, !dbg !45
  %97 = add i32 %96, %87, !dbg !46
  %98 = add i32 %96, %88, !dbg !46
  %99 = extractelement <4 x i32> %89, i64 3, !dbg !46
  %100 = add i32 %96, %99, !dbg !46
  %101 = extractelement <4 x i32> %89, i64 2, !dbg !46
  %102 = add i32 %96, %101, !dbg !46
  %103 = add i32 %93, %95, !dbg !45
  %104 = add i32 %103, %87, !dbg !46
  %105 = add i32 %103, %88, !dbg !46
  %106 = add i32 %103, %99, !dbg !46
  %107 = add i32 %103, %101, !dbg !46
  %108 = sext i32 %97 to i64, !dbg !47
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !47
  %110 = sext i32 %98 to i64, !dbg !47
  %111 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !47
  %112 = sext i32 %100 to i64, !dbg !47
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %112, !dbg !47
  %114 = sext i32 %102 to i64, !dbg !47
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !47
  %116 = sext i32 %104 to i64, !dbg !47
  %117 = getelementptr float, ptr addrspace(1) %1, i64 %116, !dbg !47
  %118 = sext i32 %105 to i64, !dbg !47
  %119 = getelementptr float, ptr addrspace(1) %1, i64 %118, !dbg !47
  %120 = sext i32 %106 to i64, !dbg !47
  %121 = getelementptr float, ptr addrspace(1) %1, i64 %120, !dbg !47
  %122 = sext i32 %107 to i64, !dbg !47
  %123 = getelementptr float, ptr addrspace(1) %1, i64 %122, !dbg !47
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 true) #2, !dbg !48
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #2, !dbg !48
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #2, !dbg !48
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 true) #2, !dbg !48
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #2, !dbg !48
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #2, !dbg !48
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 true) #2, !dbg !48
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #2, !dbg !48
  %132 = sext i32 %87 to i64, !dbg !49
  %133 = sext i32 %88 to i64, !dbg !49
  %134 = sext i32 %99 to i64, !dbg !49
  %135 = sext i32 %101 to i64, !dbg !49
  %136 = tail call i64 @llvm.smin.i64(i64 %132, i64 62), !dbg !50
  %137 = tail call i64 @llvm.smin.i64(i64 %133, i64 62), !dbg !50
  %138 = tail call i64 @llvm.smin.i64(i64 %134, i64 62), !dbg !50
  %139 = tail call i64 @llvm.smin.i64(i64 %135, i64 62), !dbg !50
  %140 = sext i32 %91 to i64, !dbg !52
  %141 = sext i32 %93 to i64, !dbg !52
  %142 = sext i32 %94 to i64, !dbg !53
  %143 = sext i32 %95 to i64, !dbg !53
  %144 = getelementptr float, ptr addrspace(1) %1, i64 %136, !dbg !54
  %145 = getelementptr i8, ptr addrspace(1) %144, i64 4, !dbg !54
  %146 = getelementptr float, ptr addrspace(1) %145, i64 %140, !dbg !54
  %147 = getelementptr float, ptr addrspace(1) %146, i64 %142, !dbg !54
  %148 = getelementptr float, ptr addrspace(1) %1, i64 %137, !dbg !54
  %149 = getelementptr i8, ptr addrspace(1) %148, i64 4, !dbg !54
  %150 = getelementptr float, ptr addrspace(1) %149, i64 %140, !dbg !54
  %151 = getelementptr float, ptr addrspace(1) %150, i64 %142, !dbg !54
  %152 = getelementptr float, ptr addrspace(1) %1, i64 %138, !dbg !54
  %153 = getelementptr i8, ptr addrspace(1) %152, i64 4, !dbg !54
  %154 = getelementptr float, ptr addrspace(1) %153, i64 %140, !dbg !54
  %155 = getelementptr float, ptr addrspace(1) %154, i64 %142, !dbg !54
  %156 = getelementptr float, ptr addrspace(1) %1, i64 %139, !dbg !54
  %157 = getelementptr i8, ptr addrspace(1) %156, i64 4, !dbg !54
  %158 = getelementptr float, ptr addrspace(1) %157, i64 %140, !dbg !54
  %159 = getelementptr float, ptr addrspace(1) %158, i64 %142, !dbg !54
  %160 = getelementptr float, ptr addrspace(1) %145, i64 %141, !dbg !54
  %161 = getelementptr float, ptr addrspace(1) %160, i64 %143, !dbg !54
  %162 = getelementptr float, ptr addrspace(1) %149, i64 %141, !dbg !54
  %163 = getelementptr float, ptr addrspace(1) %162, i64 %143, !dbg !54
  %164 = getelementptr float, ptr addrspace(1) %153, i64 %141, !dbg !54
  %165 = getelementptr float, ptr addrspace(1) %164, i64 %143, !dbg !54
  %166 = getelementptr float, ptr addrspace(1) %157, i64 %141, !dbg !54
  %167 = getelementptr float, ptr addrspace(1) %166, i64 %143, !dbg !54
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 true) #2, !dbg !55
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 true) #2, !dbg !55
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 true) #2, !dbg !55
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %159, i1 true) #2, !dbg !55
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 true) #2, !dbg !55
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 true) #2, !dbg !55
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 true) #2, !dbg !55
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 true) #2, !dbg !55
  %176 = sitofp i32 %87 to float, !dbg !56
  %177 = sitofp i32 %88 to float, !dbg !56
  %178 = fsub float %84, %176, !dbg !57
  %179 = fsub float %85, %177, !dbg !57
  %180 = fcmp ogt float %178, 0.000000e+00, !dbg !58
  %181 = fcmp ogt float %179, 0.000000e+00, !dbg !58
  %182 = select i1 %180, float %178, float 0.000000e+00, !dbg !60
  %183 = select i1 %181, float %179, float 0.000000e+00, !dbg !60
  %184 = fcmp olt float %182, 1.000000e+00, !dbg !61
  %185 = fcmp olt float %183, 1.000000e+00, !dbg !61
  %186 = select i1 %184, float %182, float 1.000000e+00, !dbg !63
  %187 = select i1 %185, float %183, float 1.000000e+00, !dbg !63
  %188 = sitofp <4 x i32> %89 to <4 x float>, !dbg !64
  %189 = fsub <4 x float> %86, %188, !dbg !65
  %190 = fcmp ogt <4 x float> %189, zeroinitializer, !dbg !66
  %191 = select <4 x i1> %190, <4 x float> %189, <4 x float> zeroinitializer, !dbg !68
  %192 = fcmp olt <4 x float> %191, splat (float 1.000000e+00), !dbg !69
  %193 = extractelement <4 x i1> %192, i64 3, !dbg !63
  %194 = extractelement <4 x float> %191, i64 3, !dbg !63
  %195 = select i1 %193, float %194, float 1.000000e+00, !dbg !63
  %196 = extractelement <4 x i1> %192, i64 2, !dbg !63
  %197 = extractelement <4 x float> %191, i64 2, !dbg !63
  %198 = select i1 %196, float %197, float 1.000000e+00, !dbg !63
  %199 = tail call i32 @llvm.smin.i32(i32 %90, i32 62), !dbg !41
  %narrow = add nsw i32 %199, 1, !dbg !41
  %200 = sext i32 %narrow to i64, !dbg !41
  %201 = tail call i32 @llvm.smin.i32(i32 %92, i32 62), !dbg !41
  %narrow1 = add nsw i32 %201, 1, !dbg !41
  %202 = sext i32 %narrow1 to i64, !dbg !41
  %203 = shl nsw i64 %200, 6, !dbg !71
  %204 = shl nsw i64 %202, 6, !dbg !71
  %205 = getelementptr float, ptr addrspace(1) %145, i64 %203, !dbg !72
  %206 = getelementptr float, ptr addrspace(1) %205, i64 %142, !dbg !72
  %207 = getelementptr float, ptr addrspace(1) %149, i64 %203, !dbg !72
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %142, !dbg !72
  %209 = getelementptr float, ptr addrspace(1) %153, i64 %203, !dbg !72
  %210 = getelementptr float, ptr addrspace(1) %209, i64 %142, !dbg !72
  %211 = getelementptr float, ptr addrspace(1) %157, i64 %203, !dbg !72
  %212 = getelementptr float, ptr addrspace(1) %211, i64 %142, !dbg !72
  %213 = getelementptr float, ptr addrspace(1) %145, i64 %204, !dbg !72
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %143, !dbg !72
  %215 = getelementptr float, ptr addrspace(1) %149, i64 %204, !dbg !72
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %143, !dbg !72
  %217 = getelementptr float, ptr addrspace(1) %153, i64 %204, !dbg !72
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %143, !dbg !72
  %219 = getelementptr float, ptr addrspace(1) %157, i64 %204, !dbg !72
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %143, !dbg !72
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 true) #2, !dbg !73
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 true) #2, !dbg !73
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %210, i1 true) #2, !dbg !73
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %212, i1 true) #2, !dbg !73
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %214, i1 true) #2, !dbg !73
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %216, i1 true) #2, !dbg !73
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %218, i1 true) #2, !dbg !73
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %220, i1 true) #2, !dbg !73
  %229 = getelementptr float, ptr addrspace(1) %1, i64 %203, !dbg !74
  %230 = getelementptr float, ptr addrspace(1) %229, i64 %132, !dbg !74
  %231 = getelementptr float, ptr addrspace(1) %230, i64 %142, !dbg !74
  %232 = getelementptr float, ptr addrspace(1) %229, i64 %133, !dbg !74
  %233 = getelementptr float, ptr addrspace(1) %232, i64 %142, !dbg !74
  %234 = getelementptr float, ptr addrspace(1) %229, i64 %134, !dbg !74
  %235 = getelementptr float, ptr addrspace(1) %234, i64 %142, !dbg !74
  %236 = getelementptr float, ptr addrspace(1) %229, i64 %135, !dbg !74
  %237 = getelementptr float, ptr addrspace(1) %236, i64 %142, !dbg !74
  %238 = getelementptr float, ptr addrspace(1) %1, i64 %204, !dbg !74
  %239 = getelementptr float, ptr addrspace(1) %238, i64 %132, !dbg !74
  %240 = getelementptr float, ptr addrspace(1) %239, i64 %143, !dbg !74
  %241 = getelementptr float, ptr addrspace(1) %238, i64 %133, !dbg !74
  %242 = getelementptr float, ptr addrspace(1) %241, i64 %143, !dbg !74
  %243 = getelementptr float, ptr addrspace(1) %238, i64 %134, !dbg !74
  %244 = getelementptr float, ptr addrspace(1) %243, i64 %143, !dbg !74
  %245 = getelementptr float, ptr addrspace(1) %238, i64 %135, !dbg !74
  %246 = getelementptr float, ptr addrspace(1) %245, i64 %143, !dbg !74
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %231, i1 true) #2, !dbg !75
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %233, i1 true) #2, !dbg !75
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %235, i1 true) #2, !dbg !75
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %237, i1 true) #2, !dbg !75
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #2, !dbg !75
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 true) #2, !dbg !75
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 true) #2, !dbg !75
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %246, i1 true) #2, !dbg !75
  %255 = insertelement <2 x i32> poison, i32 %221, i64 0, !dbg !73
  %256 = insertelement <2 x i32> %255, i32 %168, i64 1, !dbg !73
  %257 = bitcast <2 x i32> %256 to <2 x float>, !dbg !73
  %258 = insertelement <2 x i32> poison, i32 %247, i64 0, !dbg !75
  %259 = insertelement <2 x i32> %258, i32 %124, i64 1, !dbg !75
  %260 = bitcast <2 x i32> %259 to <2 x float>, !dbg !75
  %261 = fsub <2 x float> %257, %260, !dbg !76
  %262 = insertelement <2 x float> poison, float %186, i64 0, !dbg !77
  %263 = shufflevector <2 x float> %262, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !77
  %264 = fmul <2 x float> %263, %261, !dbg !77
  %265 = fadd <2 x float> %264, %260, !dbg !78
  %266 = insertelement <2 x i32> poison, i32 %222, i64 0, !dbg !73
  %267 = insertelement <2 x i32> %266, i32 %169, i64 1, !dbg !73
  %268 = bitcast <2 x i32> %267 to <2 x float>, !dbg !73
  %269 = insertelement <2 x i32> poison, i32 %248, i64 0, !dbg !75
  %270 = insertelement <2 x i32> %269, i32 %125, i64 1, !dbg !75
  %271 = bitcast <2 x i32> %270 to <2 x float>, !dbg !75
  %272 = fsub <2 x float> %268, %271, !dbg !76
  %273 = insertelement <2 x float> poison, float %187, i64 0, !dbg !77
  %274 = shufflevector <2 x float> %273, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !77
  %275 = fmul <2 x float> %274, %272, !dbg !77
  %276 = fadd <2 x float> %275, %271, !dbg !78
  %277 = insertelement <2 x i32> poison, i32 %223, i64 0, !dbg !73
  %278 = insertelement <2 x i32> %277, i32 %170, i64 1, !dbg !73
  %279 = bitcast <2 x i32> %278 to <2 x float>, !dbg !73
  %280 = insertelement <2 x i32> poison, i32 %249, i64 0, !dbg !75
  %281 = insertelement <2 x i32> %280, i32 %126, i64 1, !dbg !75
  %282 = bitcast <2 x i32> %281 to <2 x float>, !dbg !75
  %283 = fsub <2 x float> %279, %282, !dbg !76
  %284 = insertelement <2 x float> poison, float %195, i64 0, !dbg !77
  %285 = shufflevector <2 x float> %284, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !77
  %286 = fmul <2 x float> %285, %283, !dbg !77
  %287 = fadd <2 x float> %286, %282, !dbg !78
  %288 = insertelement <2 x i32> poison, i32 %224, i64 0, !dbg !73
  %289 = insertelement <2 x i32> %288, i32 %171, i64 1, !dbg !73
  %290 = bitcast <2 x i32> %289 to <2 x float>, !dbg !73
  %291 = insertelement <2 x i32> poison, i32 %250, i64 0, !dbg !75
  %292 = insertelement <2 x i32> %291, i32 %127, i64 1, !dbg !75
  %293 = bitcast <2 x i32> %292 to <2 x float>, !dbg !75
  %294 = fsub <2 x float> %290, %293, !dbg !76
  %295 = insertelement <2 x float> poison, float %198, i64 0, !dbg !77
  %296 = shufflevector <2 x float> %295, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !77
  %297 = fmul <2 x float> %296, %294, !dbg !77
  %298 = fadd <2 x float> %297, %293, !dbg !78
  %299 = insertelement <2 x i32> poison, i32 %225, i64 0, !dbg !73
  %300 = insertelement <2 x i32> %299, i32 %172, i64 1, !dbg !73
  %301 = bitcast <2 x i32> %300 to <2 x float>, !dbg !73
  %302 = insertelement <2 x i32> poison, i32 %251, i64 0, !dbg !75
  %303 = insertelement <2 x i32> %302, i32 %128, i64 1, !dbg !75
  %304 = bitcast <2 x i32> %303 to <2 x float>, !dbg !75
  %305 = fsub <2 x float> %301, %304, !dbg !76
  %306 = fmul <2 x float> %263, %305, !dbg !77
  %307 = fadd <2 x float> %306, %304, !dbg !78
  %308 = insertelement <2 x i32> poison, i32 %226, i64 0, !dbg !73
  %309 = insertelement <2 x i32> %308, i32 %173, i64 1, !dbg !73
  %310 = bitcast <2 x i32> %309 to <2 x float>, !dbg !73
  %311 = insertelement <2 x i32> poison, i32 %252, i64 0, !dbg !75
  %312 = insertelement <2 x i32> %311, i32 %129, i64 1, !dbg !75
  %313 = bitcast <2 x i32> %312 to <2 x float>, !dbg !75
  %314 = fsub <2 x float> %310, %313, !dbg !76
  %315 = fmul <2 x float> %274, %314, !dbg !77
  %316 = fadd <2 x float> %315, %313, !dbg !78
  %317 = insertelement <2 x i32> poison, i32 %227, i64 0, !dbg !73
  %318 = insertelement <2 x i32> %317, i32 %174, i64 1, !dbg !73
  %319 = bitcast <2 x i32> %318 to <2 x float>, !dbg !73
  %320 = insertelement <2 x i32> poison, i32 %253, i64 0, !dbg !75
  %321 = insertelement <2 x i32> %320, i32 %130, i64 1, !dbg !75
  %322 = bitcast <2 x i32> %321 to <2 x float>, !dbg !75
  %323 = fsub <2 x float> %319, %322, !dbg !76
  %324 = fmul <2 x float> %285, %323, !dbg !77
  %325 = fadd <2 x float> %324, %322, !dbg !78
  %326 = insertelement <2 x i32> poison, i32 %228, i64 0, !dbg !73
  %327 = insertelement <2 x i32> %326, i32 %175, i64 1, !dbg !73
  %328 = bitcast <2 x i32> %327 to <2 x float>, !dbg !73
  %329 = insertelement <2 x i32> poison, i32 %254, i64 0, !dbg !75
  %330 = insertelement <2 x i32> %329, i32 %131, i64 1, !dbg !75
  %331 = bitcast <2 x i32> %330 to <2 x float>, !dbg !75
  %332 = fsub <2 x float> %328, %331, !dbg !76
  %333 = fmul <2 x float> %296, %332, !dbg !77
  %334 = fadd <2 x float> %333, %331, !dbg !78
  %335 = extractelement <2 x float> %265, i64 0, !dbg !79
  %336 = extractelement <2 x float> %265, i64 1, !dbg !80
  %337 = fsub float %335, %336, !dbg !79
  %338 = extractelement <2 x float> %276, i64 0, !dbg !79
  %339 = extractelement <2 x float> %276, i64 1, !dbg !80
  %340 = fsub float %338, %339, !dbg !79
  %341 = extractelement <2 x float> %287, i64 0, !dbg !79
  %342 = extractelement <2 x float> %287, i64 1, !dbg !80
  %343 = fsub float %341, %342, !dbg !79
  %344 = extractelement <2 x float> %298, i64 0, !dbg !79
  %345 = extractelement <2 x float> %298, i64 1, !dbg !80
  %346 = fsub float %344, %345, !dbg !79
  %347 = extractelement <2 x float> %307, i64 0, !dbg !79
  %348 = extractelement <2 x float> %307, i64 1, !dbg !80
  %349 = fsub float %347, %348, !dbg !79
  %350 = extractelement <2 x float> %316, i64 0, !dbg !79
  %351 = extractelement <2 x float> %316, i64 1, !dbg !80
  %352 = fsub float %350, %351, !dbg !79
  %353 = extractelement <2 x float> %325, i64 0, !dbg !79
  %354 = extractelement <2 x float> %325, i64 1, !dbg !80
  %355 = fsub float %353, %354, !dbg !79
  %356 = extractelement <2 x float> %334, i64 0, !dbg !79
  %357 = extractelement <2 x float> %334, i64 1, !dbg !80
  %358 = fsub float %356, %357, !dbg !79
  %359 = extractelement <4 x i1> %192, i64 1, !dbg !81
  %360 = extractelement <4 x float> %191, i64 1, !dbg !81
  %361 = select i1 %359, float %360, float 1.000000e+00, !dbg !81
  %362 = extractelement <4 x i1> %192, i64 0, !dbg !81
  %363 = extractelement <4 x float> %191, i64 0, !dbg !81
  %364 = select i1 %362, float %363, float 1.000000e+00, !dbg !81
  %365 = fmul float %361, %337, !dbg !82
  %366 = fmul float %361, %340, !dbg !82
  %367 = fmul float %361, %343, !dbg !82
  %368 = fmul float %361, %346, !dbg !82
  %369 = fmul float %364, %349, !dbg !82
  %370 = fmul float %364, %352, !dbg !82
  %371 = fmul float %364, %355, !dbg !82
  %372 = fmul float %364, %358, !dbg !82
  %373 = fadd float %36, %54, !dbg !83
  %374 = fadd float %37, %56, !dbg !83
  %375 = fadd float %38, %58, !dbg !83
  %376 = fadd float %39, %60, !dbg !83
  %377 = fadd float %45, %62, !dbg !83
  %378 = fadd float %46, %64, !dbg !83
  %379 = fadd float %47, %66, !dbg !83
  %380 = fadd float %48, %68, !dbg !83
  %381 = fadd float %336, %365, !dbg !80
  %382 = fadd float %339, %366, !dbg !80
  %383 = fadd float %342, %367, !dbg !80
  %384 = fadd float %345, %368, !dbg !80
  %385 = fadd float %348, %369, !dbg !80
  %386 = fadd float %351, %370, !dbg !80
  %387 = fadd float %354, %371, !dbg !80
  %388 = fadd float %357, %372, !dbg !80
  %389 = fadd float %373, %381, !dbg !84
  %390 = fadd float %374, %382, !dbg !84
  %391 = fadd float %375, %383, !dbg !84
  %392 = fadd float %376, %384, !dbg !84
  %393 = fadd float %377, %385, !dbg !84
  %394 = fadd float %378, %386, !dbg !84
  %395 = fadd float %379, %387, !dbg !84
  %396 = fadd float %380, %388, !dbg !84
  %397 = bitcast float %389 to i32, !dbg !85
  %398 = bitcast float %390 to i32, !dbg !85
  %399 = bitcast float %391 to i32, !dbg !85
  %400 = bitcast float %392 to i32, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %397, i32 %398, i32 %399, i32 %400, ptr addrspace(1) %28, i1 true) #2, !dbg !85
  %401 = bitcast float %393 to i32, !dbg !85
  %402 = bitcast float %394 to i32, !dbg !85
  %403 = bitcast float %395 to i32, !dbg !85
  %404 = bitcast float %396 to i32, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %401, i32 %402, i32 %403, i32 %404, ptr addrspace(1) %30, i1 true) #2, !dbg !85
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cczba3vlwuzzlwflvlgjmikobtul2yo43rm2aicfuzrsb5yp3j5r.py", directory: "inductor_cache/cz")
!4 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_convolution_mul_sub_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_convolution_mul_sub_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_convolution_mul_sub_6", linkageName: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_convolution_mul_sub_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 29, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 40, scope: !7)
!21 = !DILocation(line: 30, column: 31, scope: !7)
!22 = !DILocation(line: 30, column: 36, scope: !7)
!23 = !DILocation(line: 42, column: 21, scope: !7)
!24 = !DILocation(line: 32, column: 19, scope: !7)
!25 = !DILocation(line: 43, column: 20, scope: !7)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 44, column: 20, scope: !7)
!28 = !DILocation(line: 36, column: 18, scope: !7)
!29 = !DILocation(line: 45, column: 20, scope: !7)
!30 = !DILocation(line: 37, column: 18, scope: !7)
!31 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 46, column: 42, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !36)
!36 = !DILocation(line: 39, column: 40, scope: !7)
!37 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!38 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !36)
!39 = !DILocation(line: 47, column: 21, scope: !7)
!40 = !DILocation(line: 40, column: 19, scope: !7)
!41 = !DILocation(line: 113, column: 29, scope: !32, inlinedAt: !42)
!42 = !DILocation(line: 63, column: 42, scope: !7)
!43 = !DILocation(line: 48, column: 42, scope: !7)
!44 = !DILocation(line: 48, column: 54, scope: !7)
!45 = !DILocation(line: 48, column: 39, scope: !7)
!46 = !DILocation(line: 48, column: 49, scope: !7)
!47 = !DILocation(line: 48, column: 31, scope: !7)
!48 = !DILocation(line: 48, column: 59, scope: !7)
!49 = !DILocation(line: 50, column: 20, scope: !7)
!50 = !DILocation(line: 113, column: 29, scope: !32, inlinedAt: !51)
!51 = !DILocation(line: 52, column: 42, scope: !7)
!52 = !DILocation(line: 53, column: 39, scope: !7)
!53 = !DILocation(line: 53, column: 49, scope: !7)
!54 = !DILocation(line: 53, column: 31, scope: !7)
!55 = !DILocation(line: 53, column: 59, scope: !7)
!56 = !DILocation(line: 55, column: 21, scope: !7)
!57 = !DILocation(line: 56, column: 20, scope: !7)
!58 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !59)
!59 = !DILocation(line: 57, column: 42, scope: !7)
!60 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !59)
!61 = !DILocation(line: 110, column: 15, scope: !32, inlinedAt: !62)
!62 = !DILocation(line: 59, column: 42, scope: !7)
!63 = !DILocation(line: 113, column: 29, scope: !32, inlinedAt: !62)
!64 = !DILocation(line: 70, column: 20, scope: !7)
!65 = !DILocation(line: 71, column: 19, scope: !7)
!66 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !67)
!67 = !DILocation(line: 72, column: 42, scope: !7)
!68 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !67)
!69 = !DILocation(line: 110, column: 15, scope: !32, inlinedAt: !70)
!70 = !DILocation(line: 73, column: 42, scope: !7)
!71 = !DILocation(line: 64, column: 42, scope: !7)
!72 = !DILocation(line: 64, column: 31, scope: !7)
!73 = !DILocation(line: 64, column: 60, scope: !7)
!74 = !DILocation(line: 65, column: 31, scope: !7)
!75 = !DILocation(line: 65, column: 60, scope: !7)
!76 = !DILocation(line: 66, column: 20, scope: !7)
!77 = !DILocation(line: 67, column: 20, scope: !7)
!78 = !DILocation(line: 68, column: 20, scope: !7)
!79 = !DILocation(line: 69, column: 20, scope: !7)
!80 = !DILocation(line: 76, column: 20, scope: !7)
!81 = !DILocation(line: 113, column: 29, scope: !32, inlinedAt: !70)
!82 = !DILocation(line: 74, column: 20, scope: !7)
!83 = !DILocation(line: 75, column: 20, scope: !7)
!84 = !DILocation(line: 77, column: 20, scope: !7)
!85 = !DILocation(line: 78, column: 40, scope: !7)
!86 = !DILocation(line: 78, column: 4, scope: !7)
