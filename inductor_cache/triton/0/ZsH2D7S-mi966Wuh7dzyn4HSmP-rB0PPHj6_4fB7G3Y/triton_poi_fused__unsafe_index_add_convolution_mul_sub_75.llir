; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_75(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 512, !dbg !13
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %20 = icmp slt i32 %19, 64, !dbg !15
  %.frozen = freeze i32 %19, !dbg !16
  %21 = sdiv i32 %.frozen, 8, !dbg !16
  %22 = mul i32 %21, 8, !dbg !17
  %.decomposed = sub i32 %.frozen, %22, !dbg !17
  %.frozen2 = freeze i32 %17, !dbg !18
  %23 = sdiv i32 %.frozen2, 512, !dbg !18
  %24 = mul i32 %23, 512, !dbg !19
  %.decomposed3 = sub i32 %.frozen2, %24, !dbg !19
  %25 = sdiv i32 %18, 512, !dbg !18
  %26 = sext i32 %21 to i64, !dbg !20
  %27 = getelementptr i64, ptr addrspace(1) %1, i64 %26, !dbg !20
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %20) #2, !dbg !21
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %20) #2, !dbg !21
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %20) #2, !dbg !21
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %20) #2, !dbg !21
  %32 = sext i32 %.decomposed to i64, !dbg !22
  %33 = getelementptr i64, ptr addrspace(1) %2, i64 %32, !dbg !22
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 %20) #2, !dbg !23
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 %20) #2, !dbg !23
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 %20) #2, !dbg !23
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 %20) #2, !dbg !23
  %38 = getelementptr i64, ptr addrspace(1) %4, i64 %32, !dbg !24
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %20) #2, !dbg !25
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %20) #2, !dbg !25
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %20) #2, !dbg !25
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %20) #2, !dbg !25
  %43 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !26
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %20) #2, !dbg !27
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %20) #2, !dbg !27
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %20) #2, !dbg !27
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %20) #2, !dbg !27
  %48 = getelementptr i64, ptr addrspace(1) %6, i64 %26, !dbg !28
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 %20) #2, !dbg !29
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 %20) #2, !dbg !29
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 %20) #2, !dbg !29
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 %20) #2, !dbg !29
  %53 = getelementptr float, ptr addrspace(1) %7, i64 %26, !dbg !30
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %20) #2, !dbg !31
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %20) #2, !dbg !31
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %20) #2, !dbg !31
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %20) #2, !dbg !31
  %58 = bitcast i32 %57 to float, !dbg !31
  %59 = shl i32 %19, 9, !dbg !32
  %60 = add i32 %.decomposed3, %59, !dbg !33
  %61 = shl i32 %23, 15, !dbg !34
  %62 = shl i32 %25, 15, !dbg !34
  %63 = add i32 %60, %61, !dbg !35
  %64 = add i32 %62, %.decomposed3, !dbg !33
  %65 = add i32 %64, %59, !dbg !35
  %66 = sext i32 %63 to i64, !dbg !36
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !36
  %68 = sext i32 %65 to i64, !dbg !36
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !36
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %20) #2, !dbg !37
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !37
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !37
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !37
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !37
  %75 = bitcast i32 %71 to float, !dbg !37
  %76 = bitcast i32 %72 to float, !dbg !37
  %77 = bitcast i32 %73 to float, !dbg !37
  %78 = bitcast i32 %74 to float, !dbg !37
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %20) #2, !dbg !37
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !37
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !37
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !37
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !37
  %84 = bitcast i32 %80 to float, !dbg !37
  %85 = bitcast i32 %81 to float, !dbg !37
  %86 = bitcast i32 %82 to float, !dbg !37
  %87 = bitcast i32 %83 to float, !dbg !37
  %88 = sext i32 %.decomposed3 to i64, !dbg !38
  %89 = getelementptr float, ptr addrspace(1) %8, i64 %88, !dbg !38
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %89, i1 true) #2, !dbg !39
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !39
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !39
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !39
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !39
  %95 = bitcast i32 %91 to float, !dbg !39
  %96 = bitcast i32 %92 to float, !dbg !39
  %97 = bitcast i32 %93 to float, !dbg !39
  %98 = bitcast i32 %94 to float, !dbg !39
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %89, i1 true) #2, !dbg !39
  %100 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !39
  %101 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !39
  %102 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !39
  %103 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !39
  %104 = bitcast i32 %100 to float, !dbg !39
  %105 = bitcast i32 %101 to float, !dbg !39
  %106 = bitcast i32 %102 to float, !dbg !39
  %107 = bitcast i32 %103 to float, !dbg !39
  %108 = lshr i64 %31, 61, !dbg !40
  %109 = and i64 %108, 4, !dbg !40
  %110 = add i64 %109, %31, !dbg !40
  %111 = lshr i64 %37, 61, !dbg !41
  %112 = and i64 %111, 4, !dbg !41
  %113 = add i64 %112, %37, !dbg !41
  %114 = shl i64 %110, 11, !dbg !42
  %115 = shl i32 %23, 13, !dbg !43
  %116 = shl i32 %25, 13, !dbg !43
  %117 = sext i32 %115 to i64, !dbg !44
  %118 = sext i32 %116 to i64, !dbg !44
  %.idx = shl i64 %113, 11, !dbg !45
  %119 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx, !dbg !45
  %120 = getelementptr float, ptr addrspace(1) %119, i64 %88, !dbg !45
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %114, !dbg !45
  %122 = getelementptr float, ptr addrspace(1) %121, i64 %117, !dbg !45
  %123 = getelementptr float, ptr addrspace(1) %121, i64 %118, !dbg !45
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %122, i1 %20) #2, !dbg !46
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !46
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !46
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !46
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !46
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %123, i1 %20) #2, !dbg !46
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !46
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !46
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !46
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !46
  %134 = lshr i64 %42, 61, !dbg !47
  %135 = and i64 %134, 4, !dbg !47
  %136 = add i64 %135, %42, !dbg !47
  %.idx1 = shl i64 %136, 11, !dbg !48
  %137 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx1, !dbg !48
  %138 = getelementptr float, ptr addrspace(1) %137, i64 %88, !dbg !48
  %139 = getelementptr float, ptr addrspace(1) %138, i64 %114, !dbg !48
  %140 = getelementptr float, ptr addrspace(1) %139, i64 %117, !dbg !48
  %141 = getelementptr float, ptr addrspace(1) %139, i64 %118, !dbg !48
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %140, i1 %20) #2, !dbg !49
  %143 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !49
  %144 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !49
  %145 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !49
  %146 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !49
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %141, i1 %20) #2, !dbg !49
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !49
  %149 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !49
  %150 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !49
  %151 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !49
  %152 = lshr i64 %52, 61, !dbg !50
  %153 = and i64 %152, 4, !dbg !50
  %154 = add i64 %153, %52, !dbg !50
  %155 = shl i64 %154, 11, !dbg !51
  %156 = getelementptr float, ptr addrspace(1) %120, i64 %155, !dbg !52
  %157 = getelementptr float, ptr addrspace(1) %156, i64 %117, !dbg !52
  %158 = getelementptr float, ptr addrspace(1) %156, i64 %118, !dbg !52
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %157, i1 %20) #2, !dbg !53
  %160 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !53
  %161 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !53
  %162 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !53
  %163 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !53
  %164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %158, i1 %20) #2, !dbg !53
  %165 = extractvalue { i32, i32, i32, i32 } %164, 0, !dbg !53
  %166 = extractvalue { i32, i32, i32, i32 } %164, 1, !dbg !53
  %167 = extractvalue { i32, i32, i32, i32 } %164, 2, !dbg !53
  %168 = extractvalue { i32, i32, i32, i32 } %164, 3, !dbg !53
  %169 = getelementptr float, ptr addrspace(1) %138, i64 %155, !dbg !54
  %170 = getelementptr float, ptr addrspace(1) %169, i64 %117, !dbg !54
  %171 = getelementptr float, ptr addrspace(1) %169, i64 %118, !dbg !54
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %170, i1 %20) #2, !dbg !55
  %173 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !55
  %174 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !55
  %175 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !55
  %176 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !55
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %171, i1 %20) #2, !dbg !55
  %178 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !55
  %179 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !55
  %180 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !55
  %181 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !55
  %182 = insertelement <2 x i32> poison, i32 %160, i64 0, !dbg !53
  %183 = insertelement <2 x i32> %182, i32 %125, i64 1, !dbg !53
  %184 = bitcast <2 x i32> %183 to <2 x float>, !dbg !53
  %185 = insertelement <2 x i32> poison, i32 %173, i64 0, !dbg !55
  %186 = insertelement <2 x i32> %185, i32 %143, i64 1, !dbg !55
  %187 = bitcast <2 x i32> %186 to <2 x float>, !dbg !55
  %188 = fsub <2 x float> %187, %184, !dbg !56
  %189 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !57
  %190 = bitcast <2 x i32> %189 to <2 x float>, !dbg !57
  %191 = shufflevector <2 x float> %190, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !57
  %192 = fmul <2 x float> %188, %191, !dbg !57
  %193 = fadd <2 x float> %192, %184, !dbg !58
  %194 = insertelement <2 x i32> poison, i32 %161, i64 0, !dbg !53
  %195 = insertelement <2 x i32> %194, i32 %126, i64 1, !dbg !53
  %196 = bitcast <2 x i32> %195 to <2 x float>, !dbg !53
  %197 = insertelement <2 x i32> poison, i32 %174, i64 0, !dbg !55
  %198 = insertelement <2 x i32> %197, i32 %144, i64 1, !dbg !55
  %199 = bitcast <2 x i32> %198 to <2 x float>, !dbg !55
  %200 = fsub <2 x float> %199, %196, !dbg !56
  %201 = fmul <2 x float> %200, %191, !dbg !57
  %202 = fadd <2 x float> %201, %196, !dbg !58
  %203 = insertelement <2 x i32> poison, i32 %162, i64 0, !dbg !53
  %204 = insertelement <2 x i32> %203, i32 %127, i64 1, !dbg !53
  %205 = bitcast <2 x i32> %204 to <2 x float>, !dbg !53
  %206 = insertelement <2 x i32> poison, i32 %175, i64 0, !dbg !55
  %207 = insertelement <2 x i32> %206, i32 %145, i64 1, !dbg !55
  %208 = bitcast <2 x i32> %207 to <2 x float>, !dbg !55
  %209 = fsub <2 x float> %208, %205, !dbg !56
  %210 = fmul <2 x float> %209, %191, !dbg !57
  %211 = fadd <2 x float> %210, %205, !dbg !58
  %212 = insertelement <2 x i32> poison, i32 %163, i64 0, !dbg !53
  %213 = insertelement <2 x i32> %212, i32 %128, i64 1, !dbg !53
  %214 = bitcast <2 x i32> %213 to <2 x float>, !dbg !53
  %215 = insertelement <2 x i32> poison, i32 %176, i64 0, !dbg !55
  %216 = insertelement <2 x i32> %215, i32 %146, i64 1, !dbg !55
  %217 = bitcast <2 x i32> %216 to <2 x float>, !dbg !55
  %218 = fsub <2 x float> %217, %214, !dbg !56
  %219 = fmul <2 x float> %218, %191, !dbg !57
  %220 = fadd <2 x float> %219, %214, !dbg !58
  %221 = insertelement <2 x i32> poison, i32 %165, i64 0, !dbg !53
  %222 = insertelement <2 x i32> %221, i32 %130, i64 1, !dbg !53
  %223 = bitcast <2 x i32> %222 to <2 x float>, !dbg !53
  %224 = insertelement <2 x i32> poison, i32 %178, i64 0, !dbg !55
  %225 = insertelement <2 x i32> %224, i32 %148, i64 1, !dbg !55
  %226 = bitcast <2 x i32> %225 to <2 x float>, !dbg !55
  %227 = fsub <2 x float> %226, %223, !dbg !56
  %228 = fmul <2 x float> %227, %191, !dbg !57
  %229 = fadd <2 x float> %228, %223, !dbg !58
  %230 = insertelement <2 x i32> poison, i32 %166, i64 0, !dbg !53
  %231 = insertelement <2 x i32> %230, i32 %131, i64 1, !dbg !53
  %232 = bitcast <2 x i32> %231 to <2 x float>, !dbg !53
  %233 = insertelement <2 x i32> poison, i32 %179, i64 0, !dbg !55
  %234 = insertelement <2 x i32> %233, i32 %149, i64 1, !dbg !55
  %235 = bitcast <2 x i32> %234 to <2 x float>, !dbg !55
  %236 = fsub <2 x float> %235, %232, !dbg !56
  %237 = fmul <2 x float> %236, %191, !dbg !57
  %238 = fadd <2 x float> %237, %232, !dbg !58
  %239 = insertelement <2 x i32> poison, i32 %167, i64 0, !dbg !53
  %240 = insertelement <2 x i32> %239, i32 %132, i64 1, !dbg !53
  %241 = bitcast <2 x i32> %240 to <2 x float>, !dbg !53
  %242 = insertelement <2 x i32> poison, i32 %180, i64 0, !dbg !55
  %243 = insertelement <2 x i32> %242, i32 %150, i64 1, !dbg !55
  %244 = bitcast <2 x i32> %243 to <2 x float>, !dbg !55
  %245 = fsub <2 x float> %244, %241, !dbg !56
  %246 = fmul <2 x float> %245, %191, !dbg !57
  %247 = fadd <2 x float> %246, %241, !dbg !58
  %248 = insertelement <2 x i32> poison, i32 %168, i64 0, !dbg !53
  %249 = insertelement <2 x i32> %248, i32 %133, i64 1, !dbg !53
  %250 = bitcast <2 x i32> %249 to <2 x float>, !dbg !53
  %251 = insertelement <2 x i32> poison, i32 %181, i64 0, !dbg !55
  %252 = insertelement <2 x i32> %251, i32 %151, i64 1, !dbg !55
  %253 = bitcast <2 x i32> %252 to <2 x float>, !dbg !55
  %254 = fsub <2 x float> %253, %250, !dbg !56
  %255 = fmul <2 x float> %254, %191, !dbg !57
  %256 = fadd <2 x float> %255, %250, !dbg !58
  %257 = extractelement <2 x float> %193, i64 0, !dbg !59
  %258 = extractelement <2 x float> %193, i64 1, !dbg !60
  %259 = fsub float %257, %258, !dbg !59
  %260 = extractelement <2 x float> %202, i64 0, !dbg !59
  %261 = extractelement <2 x float> %202, i64 1, !dbg !60
  %262 = fsub float %260, %261, !dbg !59
  %263 = extractelement <2 x float> %211, i64 0, !dbg !59
  %264 = extractelement <2 x float> %211, i64 1, !dbg !60
  %265 = fsub float %263, %264, !dbg !59
  %266 = extractelement <2 x float> %220, i64 0, !dbg !59
  %267 = extractelement <2 x float> %220, i64 1, !dbg !60
  %268 = fsub float %266, %267, !dbg !59
  %269 = extractelement <2 x float> %229, i64 0, !dbg !59
  %270 = extractelement <2 x float> %229, i64 1, !dbg !60
  %271 = fsub float %269, %270, !dbg !59
  %272 = extractelement <2 x float> %238, i64 0, !dbg !59
  %273 = extractelement <2 x float> %238, i64 1, !dbg !60
  %274 = fsub float %272, %273, !dbg !59
  %275 = extractelement <2 x float> %247, i64 0, !dbg !59
  %276 = extractelement <2 x float> %247, i64 1, !dbg !60
  %277 = fsub float %275, %276, !dbg !59
  %278 = extractelement <2 x float> %256, i64 0, !dbg !59
  %279 = extractelement <2 x float> %256, i64 1, !dbg !60
  %280 = fsub float %278, %279, !dbg !59
  %281 = fmul float %259, %58, !dbg !61
  %282 = fmul float %262, %58, !dbg !61
  %283 = fmul float %265, %58, !dbg !61
  %284 = fmul float %268, %58, !dbg !61
  %285 = fmul float %271, %58, !dbg !61
  %286 = fmul float %274, %58, !dbg !61
  %287 = fmul float %277, %58, !dbg !61
  %288 = fmul float %280, %58, !dbg !61
  %289 = fadd float %258, %281, !dbg !60
  %290 = fadd float %261, %282, !dbg !60
  %291 = fadd float %264, %283, !dbg !60
  %292 = fadd float %267, %284, !dbg !60
  %293 = fadd float %270, %285, !dbg !60
  %294 = fadd float %273, %286, !dbg !60
  %295 = fadd float %276, %287, !dbg !60
  %296 = fadd float %279, %288, !dbg !60
  %297 = fadd float %75, %95, !dbg !62
  %298 = fadd float %76, %96, !dbg !62
  %299 = fadd float %77, %97, !dbg !62
  %300 = fadd float %78, %98, !dbg !62
  %301 = fadd float %84, %104, !dbg !62
  %302 = fadd float %85, %105, !dbg !62
  %303 = fadd float %86, %106, !dbg !62
  %304 = fadd float %87, %107, !dbg !62
  %305 = fadd float %297, %289, !dbg !63
  %306 = fadd float %298, %290, !dbg !63
  %307 = fadd float %299, %291, !dbg !63
  %308 = fadd float %300, %292, !dbg !63
  %309 = fadd float %301, %293, !dbg !63
  %310 = fadd float %302, %294, !dbg !63
  %311 = fadd float %303, %295, !dbg !63
  %312 = fadd float %304, %296, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %313 = bitcast float %305 to i32, !dbg !65
  %314 = bitcast float %306 to i32, !dbg !65
  %315 = bitcast float %307 to i32, !dbg !65
  %316 = bitcast float %308 to i32, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %313, i32 %314, i32 %315, i32 %316, ptr addrspace(1) %67, i1 %20) #2, !dbg !65
  %317 = bitcast float %309 to i32, !dbg !65
  %318 = bitcast float %310 to i32, !dbg !65
  %319 = bitcast float %311 to i32, !dbg !65
  %320 = bitcast float %312 to i32, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %317, i32 %318, i32 %319, i32 %320, ptr addrspace(1) %69, i1 %20) #2, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyyiayghr7lpy7trr2mh3ndo5lc5awkgo6uazcdkjxyh4te7dgxv.py", directory: "inductor_cache/yy")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_75, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_75, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_75", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_75", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 28, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 35, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 36, column: 36, scope: !7)
!26 = !DILocation(line: 37, column: 31, scope: !7)
!27 = !DILocation(line: 37, column: 36, scope: !7)
!28 = !DILocation(line: 38, column: 31, scope: !7)
!29 = !DILocation(line: 38, column: 36, scope: !7)
!30 = !DILocation(line: 39, column: 31, scope: !7)
!31 = !DILocation(line: 39, column: 36, scope: !7)
!32 = !DILocation(line: 40, column: 44, scope: !7)
!33 = !DILocation(line: 40, column: 40, scope: !7)
!34 = !DILocation(line: 40, column: 55, scope: !7)
!35 = !DILocation(line: 40, column: 49, scope: !7)
!36 = !DILocation(line: 40, column: 35, scope: !7)
!37 = !DILocation(line: 40, column: 60, scope: !7)
!38 = !DILocation(line: 41, column: 31, scope: !7)
!39 = !DILocation(line: 41, column: 36, scope: !7)
!40 = !DILocation(line: 45, column: 32, scope: !7)
!41 = !DILocation(line: 48, column: 32, scope: !7)
!42 = !DILocation(line: 49, column: 51, scope: !7)
!43 = !DILocation(line: 49, column: 63, scope: !7)
!44 = !DILocation(line: 49, column: 58, scope: !7)
!45 = !DILocation(line: 49, column: 30, scope: !7)
!46 = !DILocation(line: 49, column: 68, scope: !7)
!47 = !DILocation(line: 52, column: 35, scope: !7)
!48 = !DILocation(line: 53, column: 31, scope: !7)
!49 = !DILocation(line: 53, column: 70, scope: !7)
!50 = !DILocation(line: 59, column: 35, scope: !7)
!51 = !DILocation(line: 60, column: 52, scope: !7)
!52 = !DILocation(line: 60, column: 31, scope: !7)
!53 = !DILocation(line: 60, column: 70, scope: !7)
!54 = !DILocation(line: 61, column: 31, scope: !7)
!55 = !DILocation(line: 61, column: 71, scope: !7)
!56 = !DILocation(line: 62, column: 20, scope: !7)
!57 = !DILocation(line: 63, column: 20, scope: !7)
!58 = !DILocation(line: 64, column: 20, scope: !7)
!59 = !DILocation(line: 65, column: 20, scope: !7)
!60 = !DILocation(line: 67, column: 20, scope: !7)
!61 = !DILocation(line: 66, column: 20, scope: !7)
!62 = !DILocation(line: 68, column: 20, scope: !7)
!63 = !DILocation(line: 69, column: 20, scope: !7)
!64 = !DILocation(line: 70, column: 4, scope: !7)
!65 = !DILocation(line: 71, column: 60, scope: !7)
!66 = !DILocation(line: 71, column: 4, scope: !7)
