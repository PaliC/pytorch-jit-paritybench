; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %10 = icmp slt i32 %9, 1536, !dbg !11
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %12 = shl i32 %11, 10, !dbg !13
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %14 = and i32 %13, 127, !dbg !14
  %15 = or disjoint i32 %12, %14, !dbg !15
  %16 = or disjoint i32 %15, 128, !dbg !15
  %17 = or disjoint i32 %15, 256, !dbg !15
  %18 = or disjoint i32 %15, 384, !dbg !15
  %19 = or disjoint i32 %15, 512, !dbg !15
  %20 = or disjoint i32 %15, 640, !dbg !15
  %21 = or disjoint i32 %15, 768, !dbg !15
  %22 = or disjoint i32 %15, 896, !dbg !15
  %23 = icmp slt i32 %15, 961, !dbg !16
  %24 = icmp slt i32 %16, 961, !dbg !16
  %25 = icmp slt i32 %17, 961, !dbg !16
  %26 = icmp slt i32 %18, 961, !dbg !16
  %27 = icmp slt i32 %19, 961, !dbg !16
  %28 = icmp slt i32 %20, 961, !dbg !16
  %29 = icmp slt i32 %21, 961, !dbg !16
  %30 = icmp slt i32 %22, 961, !dbg !16
  %.frozen = freeze i32 %9, !dbg !17
  %31 = sdiv i32 %.frozen, 384, !dbg !17
  %32 = mul i32 %31, 384, !dbg !18
  %.decomposed = sub i32 %.frozen, %32, !dbg !18
  %33 = mul i32 %15, 384, !dbg !19
  %34 = mul i32 %16, 384, !dbg !19
  %35 = mul i32 %17, 384, !dbg !19
  %36 = mul i32 %18, 384, !dbg !19
  %37 = mul i32 %19, 384, !dbg !19
  %38 = mul i32 %20, 384, !dbg !19
  %39 = mul i32 %21, 384, !dbg !19
  %40 = mul i32 %22, 384, !dbg !19
  %41 = mul i32 %31, 369024, !dbg !20
  %42 = add i32 %41, %.decomposed, !dbg !21
  %43 = add i32 %42, %33, !dbg !22
  %44 = add i32 %42, %34, !dbg !22
  %45 = add i32 %42, %35, !dbg !22
  %46 = add i32 %42, %36, !dbg !22
  %47 = add i32 %42, %37, !dbg !22
  %48 = add i32 %42, %38, !dbg !22
  %49 = add i32 %42, %39, !dbg !22
  %50 = add i32 %42, %40, !dbg !22
  %51 = sext i32 %43 to i64, !dbg !23
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !23
  %53 = sext i32 %44 to i64, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !23
  %55 = sext i32 %45 to i64, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !23
  %57 = sext i32 %46 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !23
  %59 = sext i32 %47 to i64, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !23
  %61 = sext i32 %48 to i64, !dbg !23
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !23
  %63 = sext i32 %49 to i64, !dbg !23
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !23
  %65 = sext i32 %50 to i64, !dbg !23
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !23
  %67 = and i1 %10, %23, !dbg !24
  %68 = and i1 %24, %10, !dbg !24
  %69 = and i1 %25, %10, !dbg !24
  %70 = and i1 %26, %10, !dbg !24
  %71 = and i1 %27, %10, !dbg !24
  %72 = and i1 %28, %10, !dbg !24
  %73 = and i1 %29, %10, !dbg !24
  %74 = and i1 %30, %10, !dbg !24
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %67) #3, !dbg !25
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %68) #3, !dbg !25
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %69) #3, !dbg !25
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %70) #3, !dbg !25
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %71) #3, !dbg !25
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %72) #3, !dbg !25
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %73) #3, !dbg !25
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %74) #3, !dbg !25
  %83 = sext i32 %.decomposed to i64, !dbg !26
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !26
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %10) #3, !dbg !27
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !28
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %10) #3, !dbg !29
  %88 = bitcast i32 %87 to float, !dbg !29
  %89 = getelementptr float, ptr addrspace(1) %3, i64 %83, !dbg !30
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %10) #3, !dbg !31
  %91 = getelementptr float, ptr addrspace(1) %4, i64 %83, !dbg !32
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %10) #3, !dbg !33
  %93 = fadd float %88, 0x3EE4F8B580000000, !dbg !34
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i = icmp eq i32 %94, 0, !dbg !35
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i = icmp eq i32 %95, 0, !dbg !35
  br i1 %.not.i, label %101, label %96, !dbg !35

96:                                               ; preds = %8
  br i1 %.not1.i, label %99, label %97, !dbg !35

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

101:                                              ; preds = %8
  br i1 %.not1.i, label %104, label %102, !dbg !35

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %97, %99, %102, %104
  %.0.i = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !35
  %106 = insertelement <8 x i32> poison, i32 %82, i64 0, !dbg !25
  %107 = insertelement <8 x i32> %106, i32 %81, i64 1, !dbg !25
  %108 = insertelement <8 x i32> %107, i32 %80, i64 2, !dbg !25
  %109 = insertelement <8 x i32> %108, i32 %79, i64 3, !dbg !25
  %110 = insertelement <8 x i32> %109, i32 %78, i64 4, !dbg !25
  %111 = insertelement <8 x i32> %110, i32 %77, i64 5, !dbg !25
  %112 = insertelement <8 x i32> %111, i32 %76, i64 6, !dbg !25
  %113 = insertelement <8 x i32> %112, i32 %75, i64 7, !dbg !25
  %114 = bitcast <8 x i32> %113 to <8 x float>, !dbg !25
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !36
  %116 = insertelement <8 x i32> poison, i32 %85, i64 0, !dbg !37
  %117 = bitcast <8 x i32> %116 to <8 x float>, !dbg !37
  %118 = shufflevector <8 x float> %117, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !37
  %119 = fsub <8 x float> %114, %118, !dbg !37
  %120 = insertelement <8 x float> poison, float %115, i64 0, !dbg !38
  %121 = shufflevector <8 x float> %120, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !38
  %122 = fmul <8 x float> %119, %121, !dbg !38
  %123 = insertelement <8 x i32> poison, i32 %90, i64 0, !dbg !39
  %124 = bitcast <8 x i32> %123 to <8 x float>, !dbg !39
  %125 = shufflevector <8 x float> %124, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !39
  %126 = fmul <8 x float> %122, %125, !dbg !39
  %127 = insertelement <8 x i32> poison, i32 %92, i64 0, !dbg !40
  %128 = bitcast <8 x i32> %127 to <8 x float>, !dbg !40
  %129 = shufflevector <8 x float> %128, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !40
  %130 = fadd <8 x float> %126, %129, !dbg !40
  %131 = fcmp olt <8 x float> %130, zeroinitializer, !dbg !41
  %132 = extractelement <8 x i1> %131, i64 7, !dbg !45
  %133 = extractelement <8 x i1> %131, i64 6, !dbg !45
  %134 = extractelement <8 x i1> %131, i64 5, !dbg !45
  %135 = extractelement <8 x i1> %131, i64 4, !dbg !45
  %136 = extractelement <8 x i1> %131, i64 3, !dbg !45
  %137 = extractelement <8 x i1> %131, i64 2, !dbg !45
  %138 = extractelement <8 x i1> %131, i64 1, !dbg !45
  %139 = extractelement <8 x i1> %131, i64 0, !dbg !45
  %140 = mul nsw i32 %.decomposed, 961, !dbg !46
  %141 = mul i32 %31, 1045568, !dbg !47
  %142 = add i32 %141, %140, !dbg !48
  %143 = add i32 %142, %15, !dbg !49
  %144 = add i32 %142, %16, !dbg !49
  %145 = add i32 %142, %17, !dbg !49
  %146 = add i32 %142, %18, !dbg !49
  %147 = add i32 %142, %19, !dbg !49
  %148 = add i32 %142, %20, !dbg !49
  %149 = add i32 %142, %21, !dbg !49
  %150 = add i32 %142, %22, !dbg !49
  %151 = sext i32 %143 to i64, !dbg !50
  %152 = getelementptr float, ptr addrspace(1) %5, i64 %151, !dbg !50
  %153 = sext i32 %144 to i64, !dbg !50
  %154 = getelementptr float, ptr addrspace(1) %5, i64 %153, !dbg !50
  %155 = sext i32 %145 to i64, !dbg !50
  %156 = getelementptr float, ptr addrspace(1) %5, i64 %155, !dbg !50
  %157 = sext i32 %146 to i64, !dbg !50
  %158 = getelementptr float, ptr addrspace(1) %5, i64 %157, !dbg !50
  %159 = sext i32 %147 to i64, !dbg !50
  %160 = getelementptr float, ptr addrspace(1) %5, i64 %159, !dbg !50
  %161 = sext i32 %148 to i64, !dbg !50
  %162 = getelementptr float, ptr addrspace(1) %5, i64 %161, !dbg !50
  %163 = sext i32 %149 to i64, !dbg !50
  %164 = getelementptr float, ptr addrspace(1) %5, i64 %163, !dbg !50
  %165 = sext i32 %150 to i64, !dbg !50
  %166 = getelementptr float, ptr addrspace(1) %5, i64 %165, !dbg !50
  %bc = bitcast <8 x float> %130 to <8 x i32>, !dbg !51
  %167 = extractelement <8 x i32> %bc, i64 7, !dbg !51
  %168 = select i1 %132, i32 0, i32 %167, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %168, ptr addrspace(1) %152, i1 %67) #3, !dbg !51
  %bc1 = bitcast <8 x float> %130 to <8 x i32>, !dbg !51
  %169 = extractelement <8 x i32> %bc1, i64 6, !dbg !51
  %170 = select i1 %133, i32 0, i32 %169, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %170, ptr addrspace(1) %154, i1 %68) #3, !dbg !51
  %bc2 = bitcast <8 x float> %130 to <8 x i32>, !dbg !51
  %171 = extractelement <8 x i32> %bc2, i64 5, !dbg !51
  %172 = select i1 %134, i32 0, i32 %171, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %172, ptr addrspace(1) %156, i1 %69) #3, !dbg !51
  %bc3 = bitcast <8 x float> %130 to <8 x i32>, !dbg !51
  %173 = extractelement <8 x i32> %bc3, i64 4, !dbg !51
  %174 = select i1 %135, i32 0, i32 %173, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %174, ptr addrspace(1) %158, i1 %70) #3, !dbg !51
  %bc4 = bitcast <8 x float> %130 to <8 x i32>, !dbg !51
  %175 = extractelement <8 x i32> %bc4, i64 3, !dbg !51
  %176 = select i1 %136, i32 0, i32 %175, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %176, ptr addrspace(1) %160, i1 %71) #3, !dbg !51
  %bc5 = bitcast <8 x float> %130 to <8 x i32>, !dbg !51
  %177 = extractelement <8 x i32> %bc5, i64 2, !dbg !51
  %178 = select i1 %137, i32 0, i32 %177, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %178, ptr addrspace(1) %162, i1 %72) #3, !dbg !51
  %bc6 = bitcast <8 x float> %130 to <8 x i32>, !dbg !51
  %179 = extractelement <8 x i32> %bc6, i64 1, !dbg !51
  %180 = select i1 %138, i32 0, i32 %179, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %180, ptr addrspace(1) %164, i1 %73) #3, !dbg !51
  %bc7 = bitcast <8 x float> %130 to <8 x i32>, !dbg !51
  %181 = extractelement <8 x i32> %bc7, i64 0, !dbg !51
  %182 = select i1 %139, i32 0, i32 %181, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %182, ptr addrspace(1) %166, i1 %74) #3, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "casbgvafbhgdzel4jcvgl3nmdblwbgqjgsduj7xp6hgdqzxcnuiz.py", directory: "inductor_cache/as")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 39, scope: !7)
!20 = !DILocation(line: 31, column: 51, scope: !7)
!21 = !DILocation(line: 31, column: 35, scope: !7)
!22 = !DILocation(line: 31, column: 44, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 64, scope: !7)
!25 = !DILocation(line: 31, column: 56, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 39, column: 26, scope: !7)
!36 = !DILocation(line: 41, column: 18, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 44, column: 19, scope: !7)
!39 = !DILocation(line: 45, column: 20, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 48, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 49, column: 34, scope: !7)
!47 = !DILocation(line: 49, column: 47, scope: !7)
!48 = !DILocation(line: 49, column: 30, scope: !7)
!49 = !DILocation(line: 49, column: 39, scope: !7)
!50 = !DILocation(line: 49, column: 25, scope: !7)
!51 = !DILocation(line: 49, column: 59, scope: !7)
!52 = !DILocation(line: 49, column: 4, scope: !7)
