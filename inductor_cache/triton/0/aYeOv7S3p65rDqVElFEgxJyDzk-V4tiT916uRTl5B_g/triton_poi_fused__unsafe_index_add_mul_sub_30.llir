; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_30(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 2, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %15 = sdiv i32 %.frozen, 8, !dbg !14
  %16 = srem i32 %15, 8, !dbg !15
  %17 = mul i32 %15, 8, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = srem i32 %14, 8, !dbg !16
  %19 = sdiv i32 %13, 64, !dbg !17
  %20 = srem i32 %19, 256, !dbg !18
  %21 = sdiv i32 %13, 16384, !dbg !19
  %22 = sext i32 %16 to i64, !dbg !20
  %23 = getelementptr i64, ptr addrspace(1) %0, i64 %22, !dbg !20
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !21
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !21
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !21
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !21
  %28 = sext i32 %.decomposed to i64, !dbg !22
  %29 = getelementptr i64, ptr addrspace(1) %1, i64 %28, !dbg !22
  %30 = sext i32 %18 to i64, !dbg !22
  %31 = getelementptr i64, ptr addrspace(1) %1, i64 %30, !dbg !22
  %32 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !23
  %33 = extractvalue { i64, i64 } %32, 0, !dbg !23
  %34 = extractvalue { i64, i64 } %32, 1, !dbg !23
  %35 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !23
  %36 = extractvalue { i64, i64 } %35, 0, !dbg !23
  %37 = extractvalue { i64, i64 } %35, 1, !dbg !23
  %38 = getelementptr i64, ptr addrspace(1) %3, i64 %28, !dbg !24
  %39 = getelementptr i64, ptr addrspace(1) %3, i64 %30, !dbg !24
  %40 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !25
  %41 = extractvalue { i64, i64 } %40, 0, !dbg !25
  %42 = extractvalue { i64, i64 } %40, 1, !dbg !25
  %43 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !25
  %44 = extractvalue { i64, i64 } %43, 0, !dbg !25
  %45 = extractvalue { i64, i64 } %43, 1, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !26
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !27
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !27
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !27
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !27
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !27
  %52 = bitcast i32 %48 to float, !dbg !27
  %53 = bitcast i32 %49 to float, !dbg !27
  %54 = bitcast i32 %50 to float, !dbg !27
  %55 = bitcast i32 %51 to float, !dbg !27
  %56 = lshr i64 %24, 60, !dbg !28
  %57 = and i64 %56, 8, !dbg !28
  %58 = add i64 %57, %24, !dbg !28
  %59 = lshr i64 %33, 60, !dbg !29
  %60 = and i64 %59, 8, !dbg !29
  %61 = add i64 %60, %33, !dbg !29
  %62 = lshr i64 %34, 60, !dbg !29
  %63 = and i64 %62, 8, !dbg !29
  %64 = add i64 %63, %34, !dbg !29
  %65 = lshr i64 %36, 60, !dbg !29
  %66 = and i64 %65, 8, !dbg !29
  %67 = add i64 %66, %36, !dbg !29
  %68 = lshr i64 %37, 60, !dbg !29
  %69 = and i64 %68, 8, !dbg !29
  %70 = add i64 %69, %37, !dbg !29
  %71 = sext i32 %20 to i64, !dbg !30
  %72 = shl i64 %58, 11, !dbg !31
  %73 = shl nsw i32 %21, 14, !dbg !32
  %74 = sext i32 %73 to i64, !dbg !33
  %.idx = shl i64 %61, 10, !dbg !34
  %75 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx, !dbg !34
  %76 = getelementptr float, ptr addrspace(1) %75, i64 %71, !dbg !34
  %77 = getelementptr float, ptr addrspace(1) %76, i64 %72, !dbg !34
  %78 = getelementptr float, ptr addrspace(1) %77, i64 %74, !dbg !34
  %.idx1 = shl i64 %64, 10, !dbg !34
  %79 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx1, !dbg !34
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %71, !dbg !34
  %81 = getelementptr float, ptr addrspace(1) %80, i64 %72, !dbg !34
  %82 = getelementptr float, ptr addrspace(1) %81, i64 %74, !dbg !34
  %.idx2 = shl i64 %67, 10, !dbg !34
  %83 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx2, !dbg !34
  %84 = getelementptr float, ptr addrspace(1) %83, i64 %71, !dbg !34
  %85 = getelementptr float, ptr addrspace(1) %84, i64 %72, !dbg !34
  %86 = getelementptr float, ptr addrspace(1) %85, i64 %74, !dbg !34
  %.idx3 = shl i64 %70, 10, !dbg !34
  %87 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx3, !dbg !34
  %88 = getelementptr float, ptr addrspace(1) %87, i64 %71, !dbg !34
  %89 = getelementptr float, ptr addrspace(1) %88, i64 %72, !dbg !34
  %90 = getelementptr float, ptr addrspace(1) %89, i64 %74, !dbg !34
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #1, !dbg !35
  %92 = bitcast i32 %91 to float, !dbg !35
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !35
  %94 = bitcast i32 %93 to float, !dbg !35
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !35
  %96 = bitcast i32 %95 to float, !dbg !35
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #1, !dbg !35
  %98 = bitcast i32 %97 to float, !dbg !35
  %99 = lshr i64 %41, 60, !dbg !36
  %100 = and i64 %99, 8, !dbg !36
  %101 = add i64 %100, %41, !dbg !36
  %102 = lshr i64 %42, 60, !dbg !36
  %103 = and i64 %102, 8, !dbg !36
  %104 = add i64 %103, %42, !dbg !36
  %105 = lshr i64 %44, 60, !dbg !36
  %106 = and i64 %105, 8, !dbg !36
  %107 = add i64 %106, %44, !dbg !36
  %108 = lshr i64 %45, 60, !dbg !36
  %109 = and i64 %108, 8, !dbg !36
  %110 = add i64 %109, %45, !dbg !36
  %.idx4 = shl i64 %101, 10, !dbg !37
  %111 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx4, !dbg !37
  %112 = getelementptr float, ptr addrspace(1) %111, i64 %71, !dbg !37
  %113 = getelementptr float, ptr addrspace(1) %112, i64 %72, !dbg !37
  %114 = getelementptr float, ptr addrspace(1) %113, i64 %74, !dbg !37
  %.idx5 = shl i64 %104, 10, !dbg !37
  %115 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx5, !dbg !37
  %116 = getelementptr float, ptr addrspace(1) %115, i64 %71, !dbg !37
  %117 = getelementptr float, ptr addrspace(1) %116, i64 %72, !dbg !37
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %74, !dbg !37
  %.idx6 = shl i64 %107, 10, !dbg !37
  %119 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx6, !dbg !37
  %120 = getelementptr float, ptr addrspace(1) %119, i64 %71, !dbg !37
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %72, !dbg !37
  %122 = getelementptr float, ptr addrspace(1) %121, i64 %74, !dbg !37
  %.idx7 = shl i64 %110, 10, !dbg !37
  %123 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx7, !dbg !37
  %124 = getelementptr float, ptr addrspace(1) %123, i64 %71, !dbg !37
  %125 = getelementptr float, ptr addrspace(1) %124, i64 %72, !dbg !37
  %126 = getelementptr float, ptr addrspace(1) %125, i64 %74, !dbg !37
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #1, !dbg !38
  %128 = bitcast i32 %127 to float, !dbg !38
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #1, !dbg !38
  %130 = bitcast i32 %129 to float, !dbg !38
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #1, !dbg !38
  %132 = bitcast i32 %131 to float, !dbg !38
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 true) #1, !dbg !38
  %134 = bitcast i32 %133 to float, !dbg !38
  %135 = fsub float %128, %92, !dbg !39
  %136 = fsub float %130, %94, !dbg !39
  %137 = fsub float %132, %96, !dbg !39
  %138 = fsub float %134, %98, !dbg !39
  %139 = fmul float %135, %52, !dbg !40
  %140 = fmul float %136, %53, !dbg !40
  %141 = fmul float %137, %54, !dbg !40
  %142 = fmul float %138, %55, !dbg !40
  %143 = fadd float %139, %92, !dbg !41
  %144 = fadd float %140, %94, !dbg !41
  %145 = fadd float %141, %96, !dbg !41
  %146 = fadd float %142, %98, !dbg !41
  %147 = sext i32 %13 to i64, !dbg !42
  %148 = getelementptr float, ptr addrspace(1) %5, i64 %147, !dbg !42
  %149 = bitcast float %143 to i32, !dbg !43
  %150 = bitcast float %144 to i32, !dbg !43
  %151 = bitcast float %145 to i32, !dbg !43
  %152 = bitcast float %146 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %149, i32 %150, i32 %151, i32 %152, ptr addrspace(1) %148, i1 true) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb3yqnl462wbdhszr6yi6mci7rah3pbovq3d5y5w4wwksze7l6pi.py", directory: "inductor_cache/b3")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_30, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_30, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_30", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 27, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 36, column: 32, scope: !7)
!29 = !DILocation(line: 39, column: 32, scope: !7)
!30 = !DILocation(line: 40, column: 35, scope: !7)
!31 = !DILocation(line: 40, column: 51, scope: !7)
!32 = !DILocation(line: 40, column: 64, scope: !7)
!33 = !DILocation(line: 40, column: 58, scope: !7)
!34 = !DILocation(line: 40, column: 30, scope: !7)
!35 = !DILocation(line: 40, column: 69, scope: !7)
!36 = !DILocation(line: 43, column: 35, scope: !7)
!37 = !DILocation(line: 44, column: 31, scope: !7)
!38 = !DILocation(line: 44, column: 71, scope: !7)
!39 = !DILocation(line: 45, column: 20, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 19, scope: !7)
!42 = !DILocation(line: 48, column: 25, scope: !7)
!43 = !DILocation(line: 48, column: 37, scope: !7)
!44 = !DILocation(line: 48, column: 4, scope: !7)
