; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_convolution_native_group_norm_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = icmp slt i32 %9, 64, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 2044, !dbg !12
  %14 = and i32 %11, 511, !dbg !12
  %15 = or disjoint i32 %14, 512, !dbg !12
  %16 = or disjoint i32 %14, 1024, !dbg !12
  %17 = or disjoint i32 %14, 1536, !dbg !12
  %18 = srem i32 %9, 16, !dbg !13
  %19 = shl i32 %9, 13, !dbg !14
  %20 = shl nsw i32 %18, 4, !dbg !15
  %21 = or disjoint i32 %19, %13
  %22 = shl nuw nsw i32 %13, 1
  %23 = zext nneg i32 %22 to i64
  %24 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %23
  %25 = or disjoint i32 %22, 2
  %26 = zext nneg i32 %25 to i64
  %27 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %26
  %28 = or disjoint i32 %22, 4
  %29 = zext nneg i32 %28 to i64
  %30 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %29
  %31 = or disjoint i32 %22, 6
  %32 = zext nneg i32 %31 to i64
  %33 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %32
  %34 = shl nuw nsw i32 %14, 1
  %35 = zext nneg i32 %34 to i64
  %36 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %35
  %37 = shl nuw nsw i32 %15, 1
  %38 = zext nneg i32 %37 to i64
  %39 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %38
  %40 = shl nuw nsw i32 %16, 1
  %41 = zext nneg i32 %40 to i64
  %42 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %41
  %43 = shl nuw nsw i32 %17, 1
  %44 = zext nneg i32 %43 to i64
  %45 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %44
  %46 = zext nneg i32 %14 to i64
  %47 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %46
  %48 = zext nneg i32 %15 to i64
  %49 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %48
  %50 = zext nneg i32 %16 to i64
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %50
  %52 = zext nneg i32 %17 to i64
  %53 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %52
  %54 = zext nneg i32 %13 to i64
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %54
  %56 = sext i32 %21 to i64, !dbg !16
  %57 = sext i32 %20 to i64, !dbg !16
  %58 = getelementptr inbounds i8, ptr addrspace(3) %55, i64 4
  %59 = getelementptr inbounds i8, ptr addrspace(3) %55, i64 8
  %60 = getelementptr inbounds i8, ptr addrspace(3) %55, i64 12
  br label %61, !dbg !16

61:                                               ; preds = %8, %._crit_edge
  %indvars.iv = phi i64 [ 0, %8 ], [ %indvars.iv.next, %._crit_edge ]
  %62 = phi float [ 0.000000e+00, %8 ], [ %178, %._crit_edge ]
  %63 = phi float [ 0.000000e+00, %8 ], [ %179, %._crit_edge ]
  %64 = phi float [ 0.000000e+00, %8 ], [ %180, %._crit_edge ]
  %65 = phi float [ 0.000000e+00, %8 ], [ %181, %._crit_edge ]
  %66 = phi float [ 0.000000e+00, %8 ], [ %174, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %8 ], [ %175, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %8 ], [ %176, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %8 ], [ %177, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %8 ], [ %170, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %8 ], [ %171, %._crit_edge ]
  %72 = phi float [ 0.000000e+00, %8 ], [ %172, %._crit_edge ]
  %73 = phi float [ 0.000000e+00, %8 ], [ %173, %._crit_edge ]
  %74 = lshr exact i64 %indvars.iv, 9, !dbg !17
  %75 = add nuw nsw i64 %indvars.iv, %56, !dbg !18
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !19
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %76, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #3, !dbg !20
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !20
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !20
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !20
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %82 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %24, <1 x i32> %82, i1 true) #3, !dbg !20
  %83 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %27, <1 x i32> %83, i1 true) #3, !dbg !20
  %84 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %30, <1 x i32> %84, i1 true) #3, !dbg !20
  %85 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %33, <1 x i32> %85, i1 true) #3, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %86 = load float, ptr addrspace(3) %36, align 8, !dbg !20
  %87 = load float, ptr addrspace(3) %39, align 8, !dbg !20
  %88 = load float, ptr addrspace(3) %42, align 8, !dbg !20
  %89 = load float, ptr addrspace(3) %45, align 8, !dbg !20
  %90 = add nuw nsw i64 %74, %57, !dbg !21
  %91 = or disjoint i64 %90, 1, !dbg !21
  %92 = or disjoint i64 %90, 2, !dbg !21
  %93 = or disjoint i64 %90, 3, !dbg !21
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !22
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !22
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !22
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !22
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %10, i32 0, i1 %10) #3, !dbg !23
  %99 = bitcast i32 %98 to float, !dbg !23
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %10, i32 0, i1 %10) #3, !dbg !23
  %101 = bitcast i32 %100 to float, !dbg !23
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %10, i32 0, i1 %10) #3, !dbg !23
  %103 = bitcast i32 %102 to float, !dbg !23
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %10, i32 0, i1 %10) #3, !dbg !23
  %105 = bitcast i32 %104 to float, !dbg !23
  %106 = getelementptr float, ptr addrspace(1) %2, i64 %75, !dbg !24
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %106, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #3, !dbg !25
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !25
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !25
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !25
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !25
  %112 = bitcast i32 %108 to float, !dbg !25
  %113 = bitcast i32 %109 to float, !dbg !25
  %114 = bitcast i32 %110 to float, !dbg !25
  %115 = bitcast i32 %111 to float, !dbg !25
  %116 = fadd float %86, %99, !dbg !26
  %117 = fadd float %87, %101, !dbg !26
  %118 = fadd float %88, %103, !dbg !26
  %119 = fadd float %89, %105, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %120 = bitcast float %116 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %120, i1 true) #3, !dbg !26
  %121 = bitcast float %117 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %121, i1 true) #3, !dbg !26
  %122 = bitcast float %118 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %122, i1 true) #3, !dbg !26
  %123 = bitcast float %119 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %123, i1 true) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %124 = load float, ptr addrspace(3) %55, align 16, !dbg !26
  %125 = load float, ptr addrspace(3) %58, align 4, !dbg !26
  %126 = load float, ptr addrspace(3) %59, align 8, !dbg !26
  %127 = load float, ptr addrspace(3) %60, align 4, !dbg !26
  %128 = fadd float %124, %112, !dbg !27
  %129 = fadd float %125, %113, !dbg !27
  %130 = fadd float %126, %114, !dbg !27
  %131 = fadd float %127, %115, !dbg !27
  %132 = icmp eq i64 %indvars.iv, 0, !dbg !28
  br i1 %132, label %._crit_edge, label %133, !dbg !29

133:                                              ; preds = %61
  %134 = fsub float %128, %70, !dbg !33
  %135 = fsub float %129, %71, !dbg !33
  %136 = fsub float %130, %72, !dbg !33
  %137 = fsub float %131, %73, !dbg !33
  %138 = fadd float %62, 1.000000e+00, !dbg !34
  %139 = fadd float %63, 1.000000e+00, !dbg !34
  %140 = fadd float %64, 1.000000e+00, !dbg !34
  %141 = fadd float %65, 1.000000e+00, !dbg !34
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %134, float %138) #3, !dbg !35
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float %139) #3, !dbg !35
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float %140) #3, !dbg !35
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %137, float %141) #3, !dbg !35
  %146 = fadd float %70, %142, !dbg !36
  %147 = fadd float %71, %143, !dbg !36
  %148 = fadd float %72, %144, !dbg !36
  %149 = fadd float %73, %145, !dbg !36
  %150 = fsub float %128, %146, !dbg !37
  %151 = fsub float %129, %147, !dbg !37
  %152 = fsub float %130, %148, !dbg !37
  %153 = fsub float %131, %149, !dbg !37
  %154 = fmul float %134, %150, !dbg !38
  %155 = fmul float %135, %151, !dbg !38
  %156 = fmul float %136, %152, !dbg !38
  %157 = fmul float %137, %153, !dbg !38
  %158 = fadd float %66, %154, !dbg !39
  %159 = fadd float %67, %155, !dbg !39
  %160 = fadd float %68, %156, !dbg !39
  %161 = fadd float %69, %157, !dbg !39
  br label %._crit_edge, !dbg !29

._crit_edge:                                      ; preds = %61, %133
  %162 = phi float [ %158, %133 ], [ 0.000000e+00, %61 ], !dbg !32
  %163 = phi float [ %159, %133 ], [ 0.000000e+00, %61 ], !dbg !32
  %164 = phi float [ %160, %133 ], [ 0.000000e+00, %61 ], !dbg !32
  %165 = phi float [ %161, %133 ], [ 0.000000e+00, %61 ], !dbg !32
  %.pn10 = phi float [ %146, %133 ], [ %128, %61 ]
  %.pn8 = phi float [ %147, %133 ], [ %129, %61 ]
  %.pn6 = phi float [ %148, %133 ], [ %130, %61 ]
  %.pn4 = phi float [ %149, %133 ], [ %131, %61 ]
  %166 = phi float [ %138, %133 ], [ 1.000000e+00, %61 ], !dbg !32
  %167 = phi float [ %139, %133 ], [ 1.000000e+00, %61 ], !dbg !32
  %168 = phi float [ %140, %133 ], [ 1.000000e+00, %61 ], !dbg !32
  %169 = phi float [ %141, %133 ], [ 1.000000e+00, %61 ], !dbg !32
  %170 = select i1 %10, float %.pn10, float %70, !dbg !40
  %171 = select i1 %10, float %.pn8, float %71, !dbg !40
  %172 = select i1 %10, float %.pn6, float %72, !dbg !40
  %173 = select i1 %10, float %.pn4, float %73, !dbg !40
  %174 = select i1 %10, float %162, float %66, !dbg !41
  %175 = select i1 %10, float %163, float %67, !dbg !41
  %176 = select i1 %10, float %164, float %68, !dbg !41
  %177 = select i1 %10, float %165, float %69, !dbg !41
  %178 = select i1 %10, float %166, float %62, !dbg !42
  %179 = select i1 %10, float %167, float %63, !dbg !42
  %180 = select i1 %10, float %168, float %64, !dbg !42
  %181 = select i1 %10, float %169, float %65, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %120, i1 true) #3, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %121, i1 true) #3, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %122, i1 true) #3, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %123, i1 true) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %.extract = load i32, ptr addrspace(3) %55, align 16, !dbg !43
  %.extract15 = load i32, ptr addrspace(3) %58, align 4, !dbg !43
  %.extract16 = load i32, ptr addrspace(3) %59, align 8, !dbg !43
  %.extract17 = load i32, ptr addrspace(3) %60, align 4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %76, i1 %10) #3, !dbg !43
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2048, !dbg !16
  %182 = icmp samesign ult i64 %indvars.iv, 6144, !dbg !16
  br i1 %182, label %61, label %183, !dbg !16

183:                                              ; preds = %._crit_edge
  %184 = lshr i32 %11, 5, !dbg !12
  %185 = and i32 %11, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %186 = fsub float %171, %170, !dbg !46
  %187 = fadd float %178, %179, !dbg !48
  %188 = fcmp oeq float %187, 0.000000e+00, !dbg !49
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %179, float %187) #3, !dbg !50
  %190 = select i1 %188, float 0.000000e+00, float %189, !dbg !51
  %191 = fmul float %186, %190, !dbg !52
  %192 = fadd float %170, %191, !dbg !53
  %193 = fadd float %174, %175, !dbg !54
  %194 = fmul float %186, %186, !dbg !55
  %195 = fmul float %194, %178, !dbg !56
  %196 = fmul float %195, %190, !dbg !57
  %197 = fadd float %193, %196, !dbg !58
  %198 = fsub float %172, %192, !dbg !46
  %199 = fadd float %180, %187, !dbg !48
  %200 = fcmp oeq float %199, 0.000000e+00, !dbg !49
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %180, float %199) #3, !dbg !50
  %202 = select i1 %200, float 0.000000e+00, float %201, !dbg !51
  %203 = fmul float %202, %198, !dbg !52
  %204 = fadd float %192, %203, !dbg !53
  %205 = fadd float %176, %197, !dbg !54
  %206 = fmul float %198, %198, !dbg !55
  %207 = fmul float %187, %206, !dbg !56
  %208 = fmul float %202, %207, !dbg !57
  %209 = fadd float %205, %208, !dbg !58
  %210 = fsub float %173, %204, !dbg !46
  %211 = fadd float %181, %199, !dbg !48
  %212 = fcmp oeq float %211, 0.000000e+00, !dbg !49
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %181, float %211) #3, !dbg !50
  %214 = select i1 %212, float 0.000000e+00, float %213, !dbg !51
  %215 = fmul float %214, %210, !dbg !52
  %216 = fadd float %204, %215, !dbg !53
  %217 = fadd float %177, %209, !dbg !54
  %218 = fmul float %210, %210, !dbg !55
  %219 = fmul float %199, %218, !dbg !56
  %220 = fmul float %214, %219, !dbg !57
  %221 = fadd float %217, %220, !dbg !58
  %222 = bitcast float %216 to i32, !dbg !44
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 16, i32 31), !dbg !44
  %224 = bitcast i32 %223 to float, !dbg !44
  %225 = bitcast float %221 to i32, !dbg !44
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 16, i32 31), !dbg !44
  %227 = bitcast i32 %226 to float, !dbg !44
  %228 = bitcast float %211 to i32, !dbg !44
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 16, i32 31), !dbg !44
  %230 = bitcast i32 %229 to float, !dbg !44
  %231 = fsub float %224, %216, !dbg !46
  %232 = fadd float %211, %230, !dbg !48
  %233 = fcmp oeq float %232, 0.000000e+00, !dbg !49
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %230, float %232) #3, !dbg !50
  %235 = select i1 %233, float 0.000000e+00, float %234, !dbg !51
  %236 = fmul float %235, %231, !dbg !52
  %237 = fadd float %216, %236, !dbg !53
  %238 = fadd float %221, %227, !dbg !54
  %239 = fmul float %231, %231, !dbg !55
  %240 = fmul float %211, %239, !dbg !56
  %241 = fmul float %235, %240, !dbg !57
  %242 = fadd float %238, %241, !dbg !58
  %243 = bitcast float %237 to i32, !dbg !44
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 8, i32 31), !dbg !44
  %245 = bitcast i32 %244 to float, !dbg !44
  %246 = bitcast float %242 to i32, !dbg !44
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 8, i32 31), !dbg !44
  %248 = bitcast i32 %247 to float, !dbg !44
  %249 = bitcast float %232 to i32, !dbg !44
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 8, i32 31), !dbg !44
  %251 = bitcast i32 %250 to float, !dbg !44
  %252 = fsub float %245, %237, !dbg !46
  %253 = fadd float %232, %251, !dbg !48
  %254 = fcmp oeq float %253, 0.000000e+00, !dbg !49
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %251, float %253) #3, !dbg !50
  %256 = select i1 %254, float 0.000000e+00, float %255, !dbg !51
  %257 = fmul float %252, %256, !dbg !52
  %258 = fadd float %237, %257, !dbg !53
  %259 = fadd float %242, %248, !dbg !54
  %260 = fmul float %252, %252, !dbg !55
  %261 = fmul float %232, %260, !dbg !56
  %262 = fmul float %256, %261, !dbg !57
  %263 = fadd float %259, %262, !dbg !58
  %264 = bitcast float %258 to i32, !dbg !44
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 4, i32 31), !dbg !44
  %266 = bitcast i32 %265 to float, !dbg !44
  %267 = bitcast float %263 to i32, !dbg !44
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 4, i32 31), !dbg !44
  %269 = bitcast i32 %268 to float, !dbg !44
  %270 = bitcast float %253 to i32, !dbg !44
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 4, i32 31), !dbg !44
  %272 = bitcast i32 %271 to float, !dbg !44
  %273 = fsub float %266, %258, !dbg !46
  %274 = fadd float %253, %272, !dbg !48
  %275 = fcmp oeq float %274, 0.000000e+00, !dbg !49
  %276 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %272, float %274) #3, !dbg !50
  %277 = select i1 %275, float 0.000000e+00, float %276, !dbg !51
  %278 = fmul float %273, %277, !dbg !52
  %279 = fadd float %258, %278, !dbg !53
  %280 = fadd float %263, %269, !dbg !54
  %281 = fmul float %273, %273, !dbg !55
  %282 = fmul float %253, %281, !dbg !56
  %283 = fmul float %277, %282, !dbg !57
  %284 = fadd float %280, %283, !dbg !58
  %285 = bitcast float %279 to i32, !dbg !44
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 2, i32 31), !dbg !44
  %287 = bitcast i32 %286 to float, !dbg !44
  %288 = bitcast float %284 to i32, !dbg !44
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 2, i32 31), !dbg !44
  %290 = bitcast i32 %289 to float, !dbg !44
  %291 = bitcast float %274 to i32, !dbg !44
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 2, i32 31), !dbg !44
  %293 = bitcast i32 %292 to float, !dbg !44
  %294 = fsub float %287, %279, !dbg !46
  %295 = fadd float %274, %293, !dbg !48
  %296 = fcmp oeq float %295, 0.000000e+00, !dbg !49
  %297 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %293, float %295) #3, !dbg !50
  %298 = select i1 %296, float 0.000000e+00, float %297, !dbg !51
  %299 = fmul float %294, %298, !dbg !52
  %300 = fadd float %279, %299, !dbg !53
  %301 = fadd float %284, %290, !dbg !54
  %302 = fmul float %294, %294, !dbg !55
  %303 = fmul float %274, %302, !dbg !56
  %304 = fmul float %298, %303, !dbg !57
  %305 = fadd float %301, %304, !dbg !58
  %306 = bitcast float %300 to i32, !dbg !44
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 1, i32 31), !dbg !44
  %308 = bitcast i32 %307 to float, !dbg !44
  %309 = bitcast float %305 to i32, !dbg !44
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 1, i32 31), !dbg !44
  %311 = bitcast i32 %310 to float, !dbg !44
  %312 = bitcast float %295 to i32, !dbg !44
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 1, i32 31), !dbg !44
  %314 = bitcast i32 %313 to float, !dbg !44
  %315 = fsub float %308, %300, !dbg !46
  %316 = fadd float %295, %314, !dbg !48
  %317 = fcmp oeq float %316, 0.000000e+00, !dbg !49
  %318 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %314, float %316) #3, !dbg !50
  %319 = select i1 %317, float 0.000000e+00, float %318, !dbg !51
  %320 = fmul float %315, %319, !dbg !52
  %321 = fadd float %300, %320, !dbg !53
  %322 = fadd float %305, %311, !dbg !54
  %323 = fmul float %315, %315, !dbg !55
  %324 = fmul float %295, %323, !dbg !56
  %325 = fmul float %319, %324, !dbg !57
  %326 = fadd float %322, %325, !dbg !58
  %327 = icmp eq i32 %185, 0, !dbg !44
  %328 = and i32 %184, 15, !dbg !44
  %329 = zext nneg i32 %328 to i64, !dbg !44
  %330 = getelementptr float, ptr addrspace(3) @global_smem, i64 %329, !dbg !44
  %331 = bitcast float %321 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %330, <1 x i32> %331, i1 %327) #3, !dbg !44
  %332 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %329, !dbg !44
  %333 = bitcast float %326 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %332, <1 x i32> %333, i1 %327) #3, !dbg !44
  %334 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %329, !dbg !44
  %335 = bitcast float %316 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, <1 x i32> %335, i1 %327) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %336 = icmp slt i32 %11, 16, !dbg !44
  %337 = sext i32 %11 to i64, !dbg !44
  %338 = getelementptr float, ptr addrspace(3) @global_smem, i64 %337, !dbg !44
  %339 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %338, i1 %336) #3, !dbg !44
  %340 = bitcast i32 %339 to float, !dbg !44
  %341 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %337, !dbg !44
  %342 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %341, i1 %336) #3, !dbg !44
  %343 = bitcast i32 %342 to float, !dbg !44
  %344 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %337, !dbg !44
  %345 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %344, i1 %336) #3, !dbg !44
  %346 = bitcast i32 %345 to float, !dbg !44
  %347 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 8, i32 31), !dbg !44
  %348 = bitcast i32 %347 to float, !dbg !44
  %349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 8, i32 31), !dbg !44
  %350 = bitcast i32 %349 to float, !dbg !44
  %351 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 8, i32 31), !dbg !44
  %352 = bitcast i32 %351 to float, !dbg !44
  %353 = fsub float %348, %340, !dbg !46
  %354 = fadd float %346, %352, !dbg !48
  %355 = fcmp oeq float %354, 0.000000e+00, !dbg !49
  %356 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float %354) #3, !dbg !50
  %357 = select i1 %355, float 0.000000e+00, float %356, !dbg !51
  %358 = fmul float %353, %357, !dbg !52
  %359 = fadd float %358, %340, !dbg !53
  %360 = fadd float %343, %350, !dbg !54
  %361 = fmul float %353, %353, !dbg !55
  %362 = fmul float %361, %346, !dbg !56
  %363 = fmul float %362, %357, !dbg !57
  %364 = fadd float %360, %363, !dbg !58
  %365 = bitcast float %359 to i32, !dbg !44
  %366 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %365, i32 4, i32 31), !dbg !44
  %367 = bitcast i32 %366 to float, !dbg !44
  %368 = bitcast float %364 to i32, !dbg !44
  %369 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %368, i32 4, i32 31), !dbg !44
  %370 = bitcast i32 %369 to float, !dbg !44
  %371 = bitcast float %354 to i32, !dbg !44
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 4, i32 31), !dbg !44
  %373 = bitcast i32 %372 to float, !dbg !44
  %374 = fsub float %367, %359, !dbg !46
  %375 = fadd float %354, %373, !dbg !48
  %376 = fcmp oeq float %375, 0.000000e+00, !dbg !49
  %377 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %373, float %375) #3, !dbg !50
  %378 = select i1 %376, float 0.000000e+00, float %377, !dbg !51
  %379 = fmul float %374, %378, !dbg !52
  %380 = fadd float %359, %379, !dbg !53
  %381 = fadd float %364, %370, !dbg !54
  %382 = fmul float %374, %374, !dbg !55
  %383 = fmul float %354, %382, !dbg !56
  %384 = fmul float %378, %383, !dbg !57
  %385 = fadd float %381, %384, !dbg !58
  %386 = bitcast float %380 to i32, !dbg !44
  %387 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %386, i32 2, i32 31), !dbg !44
  %388 = bitcast i32 %387 to float, !dbg !44
  %389 = bitcast float %385 to i32, !dbg !44
  %390 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %389, i32 2, i32 31), !dbg !44
  %391 = bitcast i32 %390 to float, !dbg !44
  %392 = bitcast float %375 to i32, !dbg !44
  %393 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %392, i32 2, i32 31), !dbg !44
  %394 = bitcast i32 %393 to float, !dbg !44
  %395 = fsub float %388, %380, !dbg !46
  %396 = fadd float %375, %394, !dbg !48
  %397 = fcmp oeq float %396, 0.000000e+00, !dbg !49
  %398 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %394, float %396) #3, !dbg !50
  %399 = select i1 %397, float 0.000000e+00, float %398, !dbg !51
  %400 = fmul float %395, %399, !dbg !52
  %401 = fadd float %380, %400, !dbg !53
  %402 = fadd float %385, %391, !dbg !54
  %403 = fmul float %395, %395, !dbg !55
  %404 = fmul float %375, %403, !dbg !56
  %405 = fmul float %399, %404, !dbg !57
  %406 = fadd float %402, %405, !dbg !58
  %407 = bitcast float %401 to i32, !dbg !44
  %408 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %407, i32 1, i32 31), !dbg !44
  %409 = bitcast i32 %408 to float, !dbg !44
  %410 = bitcast float %406 to i32, !dbg !44
  %411 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %410, i32 1, i32 31), !dbg !44
  %412 = bitcast i32 %411 to float, !dbg !44
  %413 = bitcast float %396 to i32, !dbg !44
  %414 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %413, i32 1, i32 31), !dbg !44
  %415 = bitcast i32 %414 to float, !dbg !44
  %416 = fsub float %409, %401, !dbg !46
  %417 = fadd float %396, %415, !dbg !48
  %418 = fcmp oeq float %417, 0.000000e+00, !dbg !49
  %419 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %415, float %417) #3, !dbg !50
  %420 = select i1 %418, float 0.000000e+00, float %419, !dbg !51
  %421 = fmul float %416, %420, !dbg !52
  %422 = fadd float %401, %421, !dbg !53
  %423 = fadd float %406, %412, !dbg !54
  %424 = fmul float %416, %416, !dbg !55
  %425 = fmul float %396, %424, !dbg !56
  %426 = fmul float %420, %425, !dbg !57
  %427 = fadd float %423, %426, !dbg !58
  %428 = and i32 %11, 15, !dbg !44
  %429 = icmp eq i32 %428, 0, !dbg !44
  %430 = and i1 %336, %429, !dbg !44
  %431 = bitcast float %422 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %338, <1 x i32> %431, i1 %430) #3, !dbg !44
  %432 = bitcast float %427 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %341, <1 x i32> %432, i1 %430) #3, !dbg !44
  %433 = bitcast float %417 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %344, <1 x i32> %433, i1 %430) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %434 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !44
  %435 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !44
  %436 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), align 16, !dbg !44
  %437 = sext i32 %9 to i64, !dbg !59
  %438 = getelementptr float, ptr addrspace(1) %3, i64 %437, !dbg !59
  %439 = icmp eq i32 %14, 0, !dbg !60
  %440 = and i1 %439, %10, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %434, ptr addrspace(1) %438, i1 %440) #3, !dbg !60
  %441 = getelementptr float, ptr addrspace(1) %4, i64 %437, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %435, ptr addrspace(1) %441, i1 %440) #3, !dbg !62
  %442 = getelementptr float, ptr addrspace(1) %5, i64 %437, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %436, ptr addrspace(1) %442, i1 %440) #3, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5xukqd23znpiu55th3pfk6qhwnjfhuqn3b4pdwdzme2jvyatsm3.py", directory: "inductor_cache/5x")
!4 = !{ptr @triton_red_fused_convolution_native_group_norm_23, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_group_norm_23, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_group_norm_23", linkageName: "triton_red_fused_convolution_native_group_norm_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 36, column: 48, scope: !7)
!15 = !DILocation(line: 37, column: 42, scope: !7)
!16 = !DILocation(line: 31, column: 36, scope: !7)
!17 = !DILocation(line: 35, column: 23, scope: !7)
!18 = !DILocation(line: 36, column: 43, scope: !7)
!19 = !DILocation(line: 36, column: 38, scope: !7)
!20 = !DILocation(line: 36, column: 53, scope: !7)
!21 = !DILocation(line: 37, column: 39, scope: !7)
!22 = !DILocation(line: 37, column: 34, scope: !7)
!23 = !DILocation(line: 37, column: 47, scope: !7)
!24 = !DILocation(line: 38, column: 34, scope: !7)
!25 = !DILocation(line: 38, column: 49, scope: !7)
!26 = !DILocation(line: 39, column: 22, scope: !7)
!27 = !DILocation(line: 40, column: 22, scope: !7)
!28 = !DILocation(line: 43, column: 62, scope: !7)
!29 = !DILocation(line: 178, column: 7, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 43, column: 51, scope: !7)
!33 = !DILocation(line: 183, column: 24, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 184, column: 30, scope: !30, inlinedAt: !32)
!35 = !DILocation(line: 185, column: 34, scope: !30, inlinedAt: !32)
!36 = !DILocation(line: 185, column: 26, scope: !30, inlinedAt: !32)
!37 = !DILocation(line: 186, column: 39, scope: !30, inlinedAt: !32)
!38 = !DILocation(line: 186, column: 31, scope: !30, inlinedAt: !32)
!39 = !DILocation(line: 186, column: 22, scope: !30, inlinedAt: !32)
!40 = !DILocation(line: 45, column: 60, scope: !7)
!41 = !DILocation(line: 46, column: 56, scope: !7)
!42 = !DILocation(line: 47, column: 64, scope: !7)
!43 = !DILocation(line: 48, column: 53, scope: !7)
!44 = !DILocation(line: 204, column: 46, scope: !30, inlinedAt: !45)
!45 = !DILocation(line: 50, column: 41, scope: !7)
!46 = !DILocation(line: 192, column: 21, scope: !47, inlinedAt: !45)
!47 = distinct !DILexicalBlockFile(scope: !30, file: !31, discriminator: 0)
!48 = !DILocation(line: 193, column: 28, scope: !47, inlinedAt: !45)
!49 = !DILocation(line: 194, column: 39, scope: !47, inlinedAt: !45)
!50 = !DILocation(line: 194, column: 60, scope: !47, inlinedAt: !45)
!51 = !DILocation(line: 194, column: 49, scope: !47, inlinedAt: !45)
!52 = !DILocation(line: 196, column: 25, scope: !47, inlinedAt: !45)
!53 = !DILocation(line: 196, column: 17, scope: !47, inlinedAt: !45)
!54 = !DILocation(line: 197, column: 15, scope: !47, inlinedAt: !45)
!55 = !DILocation(line: 197, column: 30, scope: !47, inlinedAt: !45)
!56 = !DILocation(line: 197, column: 38, scope: !47, inlinedAt: !45)
!57 = !DILocation(line: 197, column: 49, scope: !47, inlinedAt: !45)
!58 = !DILocation(line: 197, column: 22, scope: !47, inlinedAt: !45)
!59 = !DILocation(line: 55, column: 25, scope: !7)
!60 = !DILocation(line: 55, column: 36, scope: !7)
!61 = !DILocation(line: 56, column: 25, scope: !7)
!62 = !DILocation(line: 56, column: 36, scope: !7)
!63 = !DILocation(line: 57, column: 25, scope: !7)
!64 = !DILocation(line: 57, column: 36, scope: !7)
!65 = !DILocation(line: 57, column: 4, scope: !7)
