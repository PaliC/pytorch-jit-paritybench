; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 1, !dbg !13
  %18 = or disjoint i32 %16, 2, !dbg !13
  %19 = or disjoint i32 %16, 3, !dbg !13
  %20 = or disjoint i32 %16, 512, !dbg !13
  %21 = or disjoint i32 %16, 513, !dbg !13
  %22 = or disjoint i32 %16, 514, !dbg !13
  %23 = or disjoint i32 %16, 515, !dbg !13
  %24 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !14
  %25 = insertelement <2 x i32> %24, i32 %16, i64 1, !dbg !14
  %26 = sdiv <2 x i32> %25, splat (i32 4096), !dbg !14
  %27 = srem <2 x i32> %26, splat (i32 128), !dbg !15
  %28 = srem i32 %16, 4096, !dbg !16
  %29 = srem i32 %17, 4096, !dbg !16
  %30 = srem i32 %18, 4096, !dbg !16
  %31 = srem i32 %19, 4096, !dbg !16
  %32 = srem i32 %20, 4096, !dbg !16
  %33 = srem i32 %21, 4096, !dbg !16
  %34 = srem i32 %22, 4096, !dbg !16
  %35 = srem i32 %23, 4096, !dbg !16
  %36 = sdiv i32 %16, 524288, !dbg !17
  %37 = sdiv i32 %20, 524288, !dbg !17
  %38 = extractelement <2 x i32> %27, i64 1, !dbg !18
  %39 = icmp slt i32 %38, 32, !dbg !19
  %40 = extractelement <2 x i32> %27, i64 0, !dbg !18
  %41 = icmp slt i32 %40, 32, !dbg !19
  %42 = shl nsw i32 %28, 5, !dbg !20
  %43 = shl nsw i32 %29, 5, !dbg !20
  %44 = shl nsw i32 %30, 5, !dbg !20
  %45 = shl nsw i32 %31, 5, !dbg !20
  %46 = shl nsw i32 %32, 5, !dbg !20
  %47 = shl nsw i32 %33, 5, !dbg !20
  %48 = shl nsw i32 %34, 5, !dbg !20
  %49 = shl nsw i32 %35, 5, !dbg !20
  %50 = shl nsw i32 %36, 17, !dbg !21
  %51 = shl nsw i32 %37, 17, !dbg !21
  %52 = add nsw i32 %42, %50, !dbg !22
  %53 = add nsw i32 %50, %43, !dbg !22
  %54 = add nsw i32 %50, %44, !dbg !22
  %55 = add nsw i32 %50, %45, !dbg !22
  %56 = add nsw i32 %46, %51, !dbg !22
  %57 = add nsw i32 %47, %51, !dbg !22
  %58 = add nsw i32 %48, %51, !dbg !22
  %59 = add nsw i32 %49, %51, !dbg !22
  %60 = add nsw i32 %52, %38, !dbg !23
  %61 = add nsw i32 %53, %38, !dbg !23
  %62 = add nsw i32 %54, %38, !dbg !23
  %63 = add nsw i32 %55, %38, !dbg !23
  %64 = add nsw i32 %56, %40, !dbg !23
  %65 = add nsw i32 %57, %40, !dbg !23
  %66 = add nsw i32 %58, %40, !dbg !23
  %67 = add nsw i32 %59, %40, !dbg !23
  %68 = sext i32 %60 to i64, !dbg !24
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !24
  %70 = sext i32 %61 to i64, !dbg !24
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !24
  %72 = sext i32 %62 to i64, !dbg !24
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !24
  %74 = sext i32 %63 to i64, !dbg !24
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !24
  %76 = sext i32 %64 to i64, !dbg !24
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !24
  %78 = sext i32 %65 to i64, !dbg !24
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !24
  %80 = sext i32 %66 to i64, !dbg !24
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !24
  %82 = sext i32 %67 to i64, !dbg !24
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !24
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %39, i32 0, i1 %39) #1, !dbg !25
  %85 = bitcast i32 %84 to float, !dbg !25
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %39, i32 0, i1 %39) #1, !dbg !25
  %87 = bitcast i32 %86 to float, !dbg !25
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %39, i32 0, i1 %39) #1, !dbg !25
  %89 = bitcast i32 %88 to float, !dbg !25
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %39, i32 0, i1 %39) #1, !dbg !25
  %91 = bitcast i32 %90 to float, !dbg !25
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %41, i32 0, i1 %41) #1, !dbg !25
  %93 = bitcast i32 %92 to float, !dbg !25
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %41, i32 0, i1 %41) #1, !dbg !25
  %95 = bitcast i32 %94 to float, !dbg !25
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %41, i32 0, i1 %41) #1, !dbg !25
  %97 = bitcast i32 %96 to float, !dbg !25
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %41, i32 0, i1 %41) #1, !dbg !25
  %99 = bitcast i32 %98 to float, !dbg !25
  %100 = sext i32 %38 to i64, !dbg !26
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !26
  %102 = sext i32 %40 to i64, !dbg !26
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !26
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %39, i32 0, i1 %39) #1, !dbg !27
  %105 = bitcast i32 %104 to float, !dbg !27
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %39, i32 0, i1 %39) #1, !dbg !27
  %107 = bitcast i32 %106 to float, !dbg !27
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %39, i32 0, i1 %39) #1, !dbg !27
  %109 = bitcast i32 %108 to float, !dbg !27
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %39, i32 0, i1 %39) #1, !dbg !27
  %111 = bitcast i32 %110 to float, !dbg !27
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %41, i32 0, i1 %41) #1, !dbg !27
  %113 = bitcast i32 %112 to float, !dbg !27
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %41, i32 0, i1 %41) #1, !dbg !27
  %115 = bitcast i32 %114 to float, !dbg !27
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %41, i32 0, i1 %41) #1, !dbg !27
  %117 = bitcast i32 %116 to float, !dbg !27
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %41, i32 0, i1 %41) #1, !dbg !27
  %119 = bitcast i32 %118 to float, !dbg !27
  %120 = fadd float %85, %105, !dbg !28
  %121 = fadd float %87, %107, !dbg !28
  %122 = fadd float %89, %109, !dbg !28
  %123 = fadd float %91, %111, !dbg !28
  %124 = fadd float %93, %113, !dbg !28
  %125 = fadd float %95, %115, !dbg !28
  %126 = fadd float %97, %117, !dbg !28
  %127 = fadd float %99, %119, !dbg !28
  %128 = and <2 x i32> %27, splat (i32 -32), !dbg !29
  %129 = shufflevector <2 x i32> %128, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !29
  %130 = add nsw i32 %38, -32, !dbg !30
  %131 = add nsw i32 %40, -32, !dbg !30
  %132 = add nsw i32 %52, %130, !dbg !31
  %133 = add nsw i32 %53, %130, !dbg !31
  %134 = add nsw i32 %54, %130, !dbg !31
  %135 = add nsw i32 %55, %130, !dbg !31
  %136 = add nsw i32 %56, %131, !dbg !31
  %137 = add nsw i32 %57, %131, !dbg !31
  %138 = add nsw i32 %58, %131, !dbg !31
  %139 = add nsw i32 %59, %131, !dbg !31
  %140 = sext i32 %132 to i64, !dbg !32
  %141 = getelementptr float, ptr addrspace(1) %2, i64 %140, !dbg !32
  %142 = sext i32 %133 to i64, !dbg !32
  %143 = getelementptr float, ptr addrspace(1) %2, i64 %142, !dbg !32
  %144 = sext i32 %134 to i64, !dbg !32
  %145 = getelementptr float, ptr addrspace(1) %2, i64 %144, !dbg !32
  %146 = sext i32 %135 to i64, !dbg !32
  %147 = getelementptr float, ptr addrspace(1) %2, i64 %146, !dbg !32
  %148 = sext i32 %136 to i64, !dbg !32
  %149 = getelementptr float, ptr addrspace(1) %2, i64 %148, !dbg !32
  %150 = sext i32 %137 to i64, !dbg !32
  %151 = getelementptr float, ptr addrspace(1) %2, i64 %150, !dbg !32
  %152 = sext i32 %138 to i64, !dbg !32
  %153 = getelementptr float, ptr addrspace(1) %2, i64 %152, !dbg !32
  %154 = sext i32 %139 to i64, !dbg !32
  %155 = getelementptr float, ptr addrspace(1) %2, i64 %154, !dbg !32
  %156 = icmp eq <4 x i32> %129, <i32 64, i32 64, i32 32, i32 32>, !dbg !33
  %157 = extractelement <4 x i1> %156, i64 3, !dbg !34
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %157, i32 0, i1 %157) #1, !dbg !35
  %159 = bitcast i32 %158 to float, !dbg !35
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %157, i32 0, i1 %157) #1, !dbg !35
  %161 = bitcast i32 %160 to float, !dbg !35
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %157, i32 0, i1 %157) #1, !dbg !35
  %163 = bitcast i32 %162 to float, !dbg !35
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %147, i1 %157, i32 0, i1 %157) #1, !dbg !35
  %165 = bitcast i32 %164 to float, !dbg !35
  %166 = extractelement <4 x i1> %156, i64 2, !dbg !34
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %166, i32 0, i1 %166) #1, !dbg !35
  %168 = bitcast i32 %167 to float, !dbg !35
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %151, i1 %166, i32 0, i1 %166) #1, !dbg !35
  %170 = bitcast i32 %169 to float, !dbg !35
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %166, i32 0, i1 %166) #1, !dbg !35
  %172 = bitcast i32 %171 to float, !dbg !35
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %166, i32 0, i1 %166) #1, !dbg !35
  %174 = bitcast i32 %173 to float, !dbg !35
  %175 = sext i32 %130 to i64, !dbg !36
  %176 = getelementptr float, ptr addrspace(1) %3, i64 %175, !dbg !36
  %177 = sext i32 %131 to i64, !dbg !36
  %178 = getelementptr float, ptr addrspace(1) %3, i64 %177, !dbg !36
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %176, i1 %157, i32 0, i1 %157) #1, !dbg !37
  %180 = bitcast i32 %179 to float, !dbg !37
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %176, i1 %157, i32 0, i1 %157) #1, !dbg !37
  %182 = bitcast i32 %181 to float, !dbg !37
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %176, i1 %157, i32 0, i1 %157) #1, !dbg !37
  %184 = bitcast i32 %183 to float, !dbg !37
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %176, i1 %157, i32 0, i1 %157) #1, !dbg !37
  %186 = bitcast i32 %185 to float, !dbg !37
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %178, i1 %166, i32 0, i1 %166) #1, !dbg !37
  %188 = bitcast i32 %187 to float, !dbg !37
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %178, i1 %166, i32 0, i1 %166) #1, !dbg !37
  %190 = bitcast i32 %189 to float, !dbg !37
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %178, i1 %166, i32 0, i1 %166) #1, !dbg !37
  %192 = bitcast i32 %191 to float, !dbg !37
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %178, i1 %166, i32 0, i1 %166) #1, !dbg !37
  %194 = bitcast i32 %193 to float, !dbg !37
  %195 = fadd float %159, %180, !dbg !38
  %196 = fadd float %161, %182, !dbg !38
  %197 = fadd float %163, %184, !dbg !38
  %198 = fadd float %165, %186, !dbg !38
  %199 = fadd float %168, %188, !dbg !38
  %200 = fadd float %170, %190, !dbg !38
  %201 = fadd float %172, %192, !dbg !38
  %202 = fadd float %174, %194, !dbg !38
  %203 = add nsw i32 %38, -64, !dbg !39
  %204 = add nsw i32 %40, -64, !dbg !39
  %205 = add nsw i32 %52, %203, !dbg !40
  %206 = add nsw i32 %53, %203, !dbg !40
  %207 = add nsw i32 %54, %203, !dbg !40
  %208 = add nsw i32 %55, %203, !dbg !40
  %209 = add nsw i32 %56, %204, !dbg !40
  %210 = add nsw i32 %57, %204, !dbg !40
  %211 = add nsw i32 %58, %204, !dbg !40
  %212 = add nsw i32 %59, %204, !dbg !40
  %213 = sext i32 %205 to i64, !dbg !41
  %214 = getelementptr float, ptr addrspace(1) %4, i64 %213, !dbg !41
  %215 = sext i32 %206 to i64, !dbg !41
  %216 = getelementptr float, ptr addrspace(1) %4, i64 %215, !dbg !41
  %217 = sext i32 %207 to i64, !dbg !41
  %218 = getelementptr float, ptr addrspace(1) %4, i64 %217, !dbg !41
  %219 = sext i32 %208 to i64, !dbg !41
  %220 = getelementptr float, ptr addrspace(1) %4, i64 %219, !dbg !41
  %221 = sext i32 %209 to i64, !dbg !41
  %222 = getelementptr float, ptr addrspace(1) %4, i64 %221, !dbg !41
  %223 = sext i32 %210 to i64, !dbg !41
  %224 = getelementptr float, ptr addrspace(1) %4, i64 %223, !dbg !41
  %225 = sext i32 %211 to i64, !dbg !41
  %226 = getelementptr float, ptr addrspace(1) %4, i64 %225, !dbg !41
  %227 = sext i32 %212 to i64, !dbg !41
  %228 = getelementptr float, ptr addrspace(1) %4, i64 %227, !dbg !41
  %229 = extractelement <4 x i1> %156, i64 1, !dbg !34
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %214, i1 %229, i32 0, i1 %229) #1, !dbg !42
  %231 = bitcast i32 %230 to float, !dbg !42
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %216, i1 %229, i32 0, i1 %229) #1, !dbg !42
  %233 = bitcast i32 %232 to float, !dbg !42
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %218, i1 %229, i32 0, i1 %229) #1, !dbg !42
  %235 = bitcast i32 %234 to float, !dbg !42
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %220, i1 %229, i32 0, i1 %229) #1, !dbg !42
  %237 = bitcast i32 %236 to float, !dbg !42
  %238 = extractelement <4 x i1> %156, i64 0, !dbg !34
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %222, i1 %238, i32 0, i1 %238) #1, !dbg !42
  %240 = bitcast i32 %239 to float, !dbg !42
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 %238, i32 0, i1 %238) #1, !dbg !42
  %242 = bitcast i32 %241 to float, !dbg !42
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %226, i1 %238, i32 0, i1 %238) #1, !dbg !42
  %244 = bitcast i32 %243 to float, !dbg !42
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %228, i1 %238, i32 0, i1 %238) #1, !dbg !42
  %246 = bitcast i32 %245 to float, !dbg !42
  %247 = sext i32 %203 to i64, !dbg !43
  %248 = getelementptr float, ptr addrspace(1) %5, i64 %247, !dbg !43
  %249 = sext i32 %204 to i64, !dbg !43
  %250 = getelementptr float, ptr addrspace(1) %5, i64 %249, !dbg !43
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %248, i1 %229, i32 0, i1 %229) #1, !dbg !44
  %252 = bitcast i32 %251 to float, !dbg !44
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %248, i1 %229, i32 0, i1 %229) #1, !dbg !44
  %254 = bitcast i32 %253 to float, !dbg !44
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %248, i1 %229, i32 0, i1 %229) #1, !dbg !44
  %256 = bitcast i32 %255 to float, !dbg !44
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %248, i1 %229, i32 0, i1 %229) #1, !dbg !44
  %258 = bitcast i32 %257 to float, !dbg !44
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %250, i1 %238, i32 0, i1 %238) #1, !dbg !44
  %260 = bitcast i32 %259 to float, !dbg !44
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %250, i1 %238, i32 0, i1 %238) #1, !dbg !44
  %262 = bitcast i32 %261 to float, !dbg !44
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %250, i1 %238, i32 0, i1 %238) #1, !dbg !44
  %264 = bitcast i32 %263 to float, !dbg !44
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %250, i1 %238, i32 0, i1 %238) #1, !dbg !44
  %266 = bitcast i32 %265 to float, !dbg !44
  %267 = fadd float %231, %252, !dbg !45
  %268 = fadd float %233, %254, !dbg !45
  %269 = fadd float %235, %256, !dbg !45
  %270 = fadd float %237, %258, !dbg !45
  %271 = fadd float %240, %260, !dbg !45
  %272 = fadd float %242, %262, !dbg !45
  %273 = fadd float %244, %264, !dbg !45
  %274 = fadd float %246, %266, !dbg !45
  %275 = icmp sgt i32 %38, 95, !dbg !18
  %276 = icmp sgt i32 %40, 95, !dbg !18
  %277 = add nsw i32 %38, -96, !dbg !46
  %278 = add nsw i32 %40, -96, !dbg !46
  %279 = add nsw i32 %52, %277, !dbg !47
  %280 = add nsw i32 %53, %277, !dbg !47
  %281 = add nsw i32 %54, %277, !dbg !47
  %282 = add nsw i32 %55, %277, !dbg !47
  %283 = add nsw i32 %56, %278, !dbg !47
  %284 = add nsw i32 %57, %278, !dbg !47
  %285 = add nsw i32 %58, %278, !dbg !47
  %286 = add nsw i32 %59, %278, !dbg !47
  %287 = sext i32 %279 to i64, !dbg !48
  %288 = getelementptr float, ptr addrspace(1) %6, i64 %287, !dbg !48
  %289 = sext i32 %280 to i64, !dbg !48
  %290 = getelementptr float, ptr addrspace(1) %6, i64 %289, !dbg !48
  %291 = sext i32 %281 to i64, !dbg !48
  %292 = getelementptr float, ptr addrspace(1) %6, i64 %291, !dbg !48
  %293 = sext i32 %282 to i64, !dbg !48
  %294 = getelementptr float, ptr addrspace(1) %6, i64 %293, !dbg !48
  %295 = sext i32 %283 to i64, !dbg !48
  %296 = getelementptr float, ptr addrspace(1) %6, i64 %295, !dbg !48
  %297 = sext i32 %284 to i64, !dbg !48
  %298 = getelementptr float, ptr addrspace(1) %6, i64 %297, !dbg !48
  %299 = sext i32 %285 to i64, !dbg !48
  %300 = getelementptr float, ptr addrspace(1) %6, i64 %299, !dbg !48
  %301 = sext i32 %286 to i64, !dbg !48
  %302 = getelementptr float, ptr addrspace(1) %6, i64 %301, !dbg !48
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %288, i1 %275, i32 0, i1 %275) #1, !dbg !49
  %304 = bitcast i32 %303 to float, !dbg !49
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %290, i1 %275, i32 0, i1 %275) #1, !dbg !49
  %306 = bitcast i32 %305 to float, !dbg !49
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %292, i1 %275, i32 0, i1 %275) #1, !dbg !49
  %308 = bitcast i32 %307 to float, !dbg !49
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %294, i1 %275, i32 0, i1 %275) #1, !dbg !49
  %310 = bitcast i32 %309 to float, !dbg !49
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %296, i1 %276, i32 0, i1 %276) #1, !dbg !49
  %312 = bitcast i32 %311 to float, !dbg !49
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %298, i1 %276, i32 0, i1 %276) #1, !dbg !49
  %314 = bitcast i32 %313 to float, !dbg !49
  %315 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %300, i1 %276, i32 0, i1 %276) #1, !dbg !49
  %316 = bitcast i32 %315 to float, !dbg !49
  %317 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %302, i1 %276, i32 0, i1 %276) #1, !dbg !49
  %318 = bitcast i32 %317 to float, !dbg !49
  %319 = sext i32 %277 to i64, !dbg !50
  %320 = getelementptr float, ptr addrspace(1) %7, i64 %319, !dbg !50
  %321 = sext i32 %278 to i64, !dbg !50
  %322 = getelementptr float, ptr addrspace(1) %7, i64 %321, !dbg !50
  %323 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %320, i1 %275, i32 0, i1 %275) #1, !dbg !51
  %324 = bitcast i32 %323 to float, !dbg !51
  %325 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %320, i1 %275, i32 0, i1 %275) #1, !dbg !51
  %326 = bitcast i32 %325 to float, !dbg !51
  %327 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %320, i1 %275, i32 0, i1 %275) #1, !dbg !51
  %328 = bitcast i32 %327 to float, !dbg !51
  %329 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %320, i1 %275, i32 0, i1 %275) #1, !dbg !51
  %330 = bitcast i32 %329 to float, !dbg !51
  %331 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %322, i1 %276, i32 0, i1 %276) #1, !dbg !51
  %332 = bitcast i32 %331 to float, !dbg !51
  %333 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %322, i1 %276, i32 0, i1 %276) #1, !dbg !51
  %334 = bitcast i32 %333 to float, !dbg !51
  %335 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %322, i1 %276, i32 0, i1 %276) #1, !dbg !51
  %336 = bitcast i32 %335 to float, !dbg !51
  %337 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %322, i1 %276, i32 0, i1 %276) #1, !dbg !51
  %338 = bitcast i32 %337 to float, !dbg !51
  %339 = fadd float %304, %324, !dbg !52
  %340 = fadd float %306, %326, !dbg !52
  %341 = fadd float %308, %328, !dbg !52
  %342 = fadd float %310, %330, !dbg !52
  %343 = fadd float %312, %332, !dbg !52
  %344 = fadd float %314, %334, !dbg !52
  %345 = fadd float %316, %336, !dbg !52
  %346 = fadd float %318, %338, !dbg !52
  %347 = select i1 %275, float %339, float 0.000000e+00, !dbg !53
  %348 = select i1 %275, float %340, float 0.000000e+00, !dbg !53
  %349 = select i1 %275, float %341, float 0.000000e+00, !dbg !53
  %350 = select i1 %275, float %342, float 0.000000e+00, !dbg !53
  %351 = select i1 %276, float %343, float 0.000000e+00, !dbg !53
  %352 = select i1 %276, float %344, float 0.000000e+00, !dbg !53
  %353 = select i1 %276, float %345, float 0.000000e+00, !dbg !53
  %354 = select i1 %276, float %346, float 0.000000e+00, !dbg !53
  %355 = select i1 %229, float %267, float %347, !dbg !34
  %356 = select i1 %229, float %268, float %348, !dbg !34
  %357 = select i1 %229, float %269, float %349, !dbg !34
  %358 = select i1 %229, float %270, float %350, !dbg !34
  %359 = select i1 %238, float %271, float %351, !dbg !34
  %360 = select i1 %238, float %272, float %352, !dbg !34
  %361 = select i1 %238, float %273, float %353, !dbg !34
  %362 = select i1 %238, float %274, float %354, !dbg !34
  %363 = select i1 %157, float %195, float %355, !dbg !34
  %364 = select i1 %157, float %196, float %356, !dbg !34
  %365 = select i1 %157, float %197, float %357, !dbg !34
  %366 = select i1 %157, float %198, float %358, !dbg !34
  %367 = select i1 %166, float %199, float %359, !dbg !34
  %368 = select i1 %166, float %200, float %360, !dbg !34
  %369 = select i1 %166, float %201, float %361, !dbg !34
  %370 = select i1 %166, float %202, float %362, !dbg !34
  %371 = select i1 %39, float %120, float %363, !dbg !34
  %372 = select i1 %39, float %121, float %364, !dbg !34
  %373 = select i1 %39, float %122, float %365, !dbg !34
  %374 = select i1 %39, float %123, float %366, !dbg !34
  %375 = select i1 %41, float %124, float %367, !dbg !34
  %376 = select i1 %41, float %125, float %368, !dbg !34
  %377 = select i1 %41, float %126, float %369, !dbg !34
  %378 = select i1 %41, float %127, float %370, !dbg !34
  %379 = sext i32 %16 to i64, !dbg !54
  %380 = getelementptr float, ptr addrspace(1) %8, i64 %379, !dbg !54
  %381 = sext i32 %20 to i64, !dbg !54
  %382 = getelementptr float, ptr addrspace(1) %8, i64 %381, !dbg !54
  %383 = bitcast float %371 to i32, !dbg !55
  %384 = bitcast float %372 to i32, !dbg !55
  %385 = bitcast float %373 to i32, !dbg !55
  %386 = bitcast float %374 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %383, i32 %384, i32 %385, i32 %386, ptr addrspace(1) %380, i1 true) #1, !dbg !55
  %387 = bitcast float %375 to i32, !dbg !55
  %388 = bitcast float %376 to i32, !dbg !55
  %389 = bitcast float %377 to i32, !dbg !55
  %390 = bitcast float %378 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %387, i32 %388, i32 %389, i32 %390, ptr addrspace(1) %382, i1 true) #1, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cueikcedk7dy3ek4nqlv5kfkmcwbvzcft4qgo7vswuy44zno62j7.py", directory: "inductor_cache/ue")
!4 = !{ptr @triton_poi_fused_cat_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_6", linkageName: "triton_poi_fused_cat_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 56, column: 20, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 33, scope: !7)
!21 = !DILocation(line: 33, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 38, scope: !7)
!23 = !DILocation(line: 33, column: 51, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 57, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 41, column: 20, scope: !7)
!30 = !DILocation(line: 42, column: 60, scope: !7)
!31 = !DILocation(line: 42, column: 52, scope: !7)
!32 = !DILocation(line: 42, column: 31, scope: !7)
!33 = !DILocation(line: 50, column: 20, scope: !7)
!34 = !DILocation(line: 0, scope: !7)
!35 = !DILocation(line: 42, column: 66, scope: !7)
!36 = !DILocation(line: 43, column: 31, scope: !7)
!37 = !DILocation(line: 43, column: 44, scope: !7)
!38 = !DILocation(line: 44, column: 20, scope: !7)
!39 = !DILocation(line: 51, column: 60, scope: !7)
!40 = !DILocation(line: 51, column: 52, scope: !7)
!41 = !DILocation(line: 51, column: 31, scope: !7)
!42 = !DILocation(line: 51, column: 66, scope: !7)
!43 = !DILocation(line: 52, column: 31, scope: !7)
!44 = !DILocation(line: 52, column: 44, scope: !7)
!45 = !DILocation(line: 53, column: 20, scope: !7)
!46 = !DILocation(line: 59, column: 60, scope: !7)
!47 = !DILocation(line: 59, column: 52, scope: !7)
!48 = !DILocation(line: 59, column: 31, scope: !7)
!49 = !DILocation(line: 59, column: 66, scope: !7)
!50 = !DILocation(line: 60, column: 31, scope: !7)
!51 = !DILocation(line: 60, column: 44, scope: !7)
!52 = !DILocation(line: 61, column: 20, scope: !7)
!53 = !DILocation(line: 63, column: 35, scope: !7)
!54 = !DILocation(line: 67, column: 25, scope: !7)
!55 = !DILocation(line: 67, column: 37, scope: !7)
!56 = !DILocation(line: 67, column: 4, scope: !7)
