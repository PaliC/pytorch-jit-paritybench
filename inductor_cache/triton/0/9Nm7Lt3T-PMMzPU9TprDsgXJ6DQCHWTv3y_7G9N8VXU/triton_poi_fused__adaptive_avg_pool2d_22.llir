; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__adaptive_avg_pool2d_22(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %.frozen = freeze i32 %9, !dbg !14
  %13 = sdiv i32 %.frozen, 6, !dbg !14
  %14 = mul i32 %13, 6, !dbg !15
  %.decomposed = sub i32 %.frozen, %14, !dbg !15
  %15 = srem i32 %10, 6, !dbg !15
  %.frozen22 = freeze i32 %11, !dbg !14
  %16 = sdiv i32 %.frozen22, 6, !dbg !14
  %17 = mul i32 %16, 6, !dbg !15
  %.decomposed23 = sub i32 %.frozen22, %17, !dbg !15
  %18 = srem i32 %12, 6, !dbg !15
  %19 = srem i32 %13, 2048, !dbg !16
  %20 = srem i32 %16, 2048, !dbg !16
  %21 = sdiv i32 %9, 12288, !dbg !17
  %.tr = trunc nsw i32 %.decomposed to i8, !dbg !18
  %.lhs.trunc = shl nsw i8 %.tr, 1, !dbg !18
  %.tr15 = trunc nsw i32 %15 to i8, !dbg !18
  %.lhs.trunc1 = shl nsw i8 %.tr15, 1, !dbg !18
  %.tr16 = trunc nsw i32 %.decomposed23 to i8, !dbg !18
  %.lhs.trunc3 = shl nsw i8 %.tr16, 1, !dbg !18
  %.tr17 = trunc nsw i32 %18 to i8, !dbg !18
  %.lhs.trunc5 = shl nsw i8 %.tr17, 1, !dbg !18
  %22 = shl nsw i8 %.tr, 2, !dbg !19
  %.lhs.trunc7 = add nsw i8 %22, 9, !dbg !19
  %23 = insertelement <2 x i8> poison, i8 %.lhs.trunc, i64 0, !dbg !18
  %24 = insertelement <2 x i8> %23, i8 %.lhs.trunc7, i64 1, !dbg !18
  %25 = sdiv <2 x i8> %24, <i8 3, i8 6>, !dbg !18
  %26 = extractelement <2 x i8> %25, i64 0, !dbg !20
  %.sext = sext i8 %26 to i32, !dbg !18
  %27 = extractelement <2 x i8> %25, i64 1, !dbg !20
  %.sext8 = sext i8 %27 to i32, !dbg !19
  %28 = shl nsw i8 %.tr15, 2, !dbg !19
  %.lhs.trunc9 = add nsw i8 %28, 9, !dbg !19
  %29 = insertelement <2 x i8> poison, i8 %.lhs.trunc1, i64 0, !dbg !18
  %30 = insertelement <2 x i8> %29, i8 %.lhs.trunc9, i64 1, !dbg !18
  %31 = sdiv <2 x i8> %30, <i8 3, i8 6>, !dbg !18
  %32 = extractelement <2 x i8> %31, i64 0, !dbg !20
  %.sext2 = sext i8 %32 to i32, !dbg !18
  %33 = extractelement <2 x i8> %31, i64 1, !dbg !20
  %.sext10 = sext i8 %33 to i32, !dbg !19
  %34 = shl nsw i8 %.tr16, 2, !dbg !19
  %.lhs.trunc11 = add nsw i8 %34, 9, !dbg !19
  %35 = insertelement <2 x i8> poison, i8 %.lhs.trunc3, i64 0, !dbg !18
  %36 = insertelement <2 x i8> %35, i8 %.lhs.trunc11, i64 1, !dbg !18
  %37 = sdiv <2 x i8> %36, <i8 3, i8 6>, !dbg !18
  %38 = extractelement <2 x i8> %37, i64 0, !dbg !20
  %.sext4 = sext i8 %38 to i32, !dbg !18
  %39 = extractelement <2 x i8> %37, i64 1, !dbg !20
  %.sext12 = sext i8 %39 to i32, !dbg !19
  %40 = shl nsw i8 %.tr17, 2, !dbg !19
  %.lhs.trunc13 = add nsw i8 %40, 9, !dbg !19
  %41 = insertelement <2 x i8> poison, i8 %.lhs.trunc5, i64 0, !dbg !18
  %42 = insertelement <2 x i8> %41, i8 %.lhs.trunc13, i64 1, !dbg !18
  %43 = sdiv <2 x i8> %42, <i8 3, i8 6>, !dbg !18
  %44 = extractelement <2 x i8> %43, i64 0, !dbg !20
  %.sext6 = sext i8 %44 to i32, !dbg !18
  %45 = extractelement <2 x i8> %43, i64 1, !dbg !20
  %.sext14 = sext i8 %45 to i32, !dbg !19
  %46 = icmp slt i8 %26, %27, !dbg !20
  %47 = icmp slt i8 %32, %33, !dbg !20
  %48 = icmp slt i8 %38, %39, !dbg !20
  %49 = icmp slt i8 %44, %45, !dbg !20
  %50 = shl nsw i32 %.sext, 13, !dbg !21
  %51 = shl nsw i32 %.sext2, 13, !dbg !21
  %52 = shl nsw i32 %.sext4, 13, !dbg !21
  %53 = shl nsw i32 %.sext6, 13, !dbg !21
  %54 = shl i32 %21, 15, !dbg !22
  %55 = add i32 %50, %54, !dbg !23
  %56 = add i32 %55, %19, !dbg !24
  %57 = add i32 %54, %51, !dbg !23
  %58 = add i32 %57, %19, !dbg !24
  %59 = add i32 %54, %52, !dbg !23
  %60 = add i32 %59, %20, !dbg !24
  %61 = add i32 %54, %53, !dbg !23
  %62 = add i32 %61, %20, !dbg !24
  %63 = sext i32 %56 to i64, !dbg !25
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !25
  %65 = sext i32 %58 to i64, !dbg !25
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !25
  %67 = sext i32 %60 to i64, !dbg !25
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !25
  %69 = sext i32 %62 to i64, !dbg !25
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %46, i32 0, i1 %46) #1, !dbg !26
  %72 = bitcast i32 %71 to float, !dbg !26
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %47, i32 0, i1 %47) #1, !dbg !26
  %74 = bitcast i32 %73 to float, !dbg !26
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %48, i32 0, i1 %48) #1, !dbg !26
  %76 = bitcast i32 %75 to float, !dbg !26
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %49, i32 0, i1 %49) #1, !dbg !26
  %78 = bitcast i32 %77 to float, !dbg !26
  %79 = add nsw i32 %19, 2048, !dbg !27
  %80 = add nsw i32 %20, 2048, !dbg !27
  %81 = add i32 %55, %79, !dbg !28
  %82 = add i32 %57, %79, !dbg !28
  %83 = add i32 %59, %80, !dbg !28
  %84 = add i32 %61, %80, !dbg !28
  %85 = sext i32 %81 to i64, !dbg !29
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !29
  %87 = sext i32 %82 to i64, !dbg !29
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !29
  %89 = sext i32 %83 to i64, !dbg !29
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !29
  %91 = sext i32 %84 to i64, !dbg !29
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !29
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %46, i32 0, i1 %46) #1, !dbg !30
  %94 = bitcast i32 %93 to float, !dbg !30
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %47, i32 0, i1 %47) #1, !dbg !30
  %96 = bitcast i32 %95 to float, !dbg !30
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %48, i32 0, i1 %48) #1, !dbg !30
  %98 = bitcast i32 %97 to float, !dbg !30
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %49, i32 0, i1 %49) #1, !dbg !30
  %100 = bitcast i32 %99 to float, !dbg !30
  %101 = fadd float %72, %94, !dbg !31
  %102 = fadd float %74, %96, !dbg !31
  %103 = fadd float %76, %98, !dbg !31
  %104 = fadd float %78, %100, !dbg !31
  %105 = add nsw i32 %19, 4096, !dbg !32
  %106 = add nsw i32 %20, 4096, !dbg !32
  %107 = add i32 %55, %105, !dbg !33
  %108 = add i32 %57, %105, !dbg !33
  %109 = add i32 %59, %106, !dbg !33
  %110 = add i32 %61, %106, !dbg !33
  %111 = sext i32 %107 to i64, !dbg !34
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !34
  %113 = sext i32 %108 to i64, !dbg !34
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !34
  %115 = sext i32 %109 to i64, !dbg !34
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !34
  %117 = sext i32 %110 to i64, !dbg !34
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !34
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %46, i32 0, i1 %46) #1, !dbg !35
  %120 = bitcast i32 %119 to float, !dbg !35
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %47, i32 0, i1 %47) #1, !dbg !35
  %122 = bitcast i32 %121 to float, !dbg !35
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %48, i32 0, i1 %48) #1, !dbg !35
  %124 = bitcast i32 %123 to float, !dbg !35
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %49, i32 0, i1 %49) #1, !dbg !35
  %126 = bitcast i32 %125 to float, !dbg !35
  %127 = fadd float %101, %120, !dbg !36
  %128 = fadd float %102, %122, !dbg !36
  %129 = fadd float %103, %124, !dbg !36
  %130 = fadd float %104, %126, !dbg !36
  %131 = add nsw i32 %19, 6144, !dbg !37
  %132 = add nsw i32 %20, 6144, !dbg !37
  %133 = add i32 %55, %131, !dbg !38
  %134 = add i32 %57, %131, !dbg !38
  %135 = add i32 %59, %132, !dbg !38
  %136 = add i32 %61, %132, !dbg !38
  %137 = sext i32 %133 to i64, !dbg !39
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !39
  %139 = sext i32 %134 to i64, !dbg !39
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !39
  %141 = sext i32 %135 to i64, !dbg !39
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !39
  %143 = sext i32 %136 to i64, !dbg !39
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !39
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %46, i32 0, i1 %46) #1, !dbg !40
  %146 = bitcast i32 %145 to float, !dbg !40
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %47, i32 0, i1 %47) #1, !dbg !40
  %148 = bitcast i32 %147 to float, !dbg !40
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %48, i32 0, i1 %48) #1, !dbg !40
  %150 = bitcast i32 %149 to float, !dbg !40
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 %49, i32 0, i1 %49) #1, !dbg !40
  %152 = bitcast i32 %151 to float, !dbg !40
  %153 = fadd float %127, %146, !dbg !41
  %154 = fadd float %128, %148, !dbg !41
  %155 = fadd float %129, %150, !dbg !41
  %156 = fadd float %130, %152, !dbg !41
  %157 = add nsw i32 %.sext, 1, !dbg !42
  %158 = add nsw i32 %.sext2, 1, !dbg !42
  %159 = add nsw i32 %.sext4, 1, !dbg !42
  %160 = add nsw i32 %.sext6, 1, !dbg !42
  %161 = icmp slt i32 %157, %.sext8, !dbg !43
  %162 = icmp slt i32 %158, %.sext10, !dbg !43
  %163 = icmp slt i32 %159, %.sext12, !dbg !43
  %164 = icmp slt i32 %160, %.sext14, !dbg !43
  %165 = add nsw i32 %19, 8192, !dbg !44
  %166 = add nsw i32 %20, 8192, !dbg !44
  %167 = add i32 %55, %165, !dbg !45
  %168 = add i32 %57, %165, !dbg !45
  %169 = add i32 %59, %166, !dbg !45
  %170 = add i32 %61, %166, !dbg !45
  %171 = sext i32 %167 to i64, !dbg !46
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !46
  %173 = sext i32 %168 to i64, !dbg !46
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !46
  %175 = sext i32 %169 to i64, !dbg !46
  %176 = getelementptr float, ptr addrspace(1) %0, i64 %175, !dbg !46
  %177 = sext i32 %170 to i64, !dbg !46
  %178 = getelementptr float, ptr addrspace(1) %0, i64 %177, !dbg !46
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %172, i1 %161, i32 0, i1 %161) #1, !dbg !47
  %180 = bitcast i32 %179 to float, !dbg !47
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %174, i1 %162, i32 0, i1 %162) #1, !dbg !47
  %182 = bitcast i32 %181 to float, !dbg !47
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %176, i1 %163, i32 0, i1 %163) #1, !dbg !47
  %184 = bitcast i32 %183 to float, !dbg !47
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %178, i1 %164, i32 0, i1 %164) #1, !dbg !47
  %186 = bitcast i32 %185 to float, !dbg !47
  %187 = fadd float %153, %180, !dbg !48
  %188 = fadd float %154, %182, !dbg !48
  %189 = fadd float %155, %184, !dbg !48
  %190 = fadd float %156, %186, !dbg !48
  %191 = add nsw i32 %19, 10240, !dbg !49
  %192 = add nsw i32 %20, 10240, !dbg !49
  %193 = add i32 %55, %191, !dbg !50
  %194 = add i32 %57, %191, !dbg !50
  %195 = add i32 %59, %192, !dbg !50
  %196 = add i32 %61, %192, !dbg !50
  %197 = sext i32 %193 to i64, !dbg !51
  %198 = getelementptr float, ptr addrspace(1) %0, i64 %197, !dbg !51
  %199 = sext i32 %194 to i64, !dbg !51
  %200 = getelementptr float, ptr addrspace(1) %0, i64 %199, !dbg !51
  %201 = sext i32 %195 to i64, !dbg !51
  %202 = getelementptr float, ptr addrspace(1) %0, i64 %201, !dbg !51
  %203 = sext i32 %196 to i64, !dbg !51
  %204 = getelementptr float, ptr addrspace(1) %0, i64 %203, !dbg !51
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %198, i1 %161, i32 0, i1 %161) #1, !dbg !52
  %206 = bitcast i32 %205 to float, !dbg !52
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %200, i1 %162, i32 0, i1 %162) #1, !dbg !52
  %208 = bitcast i32 %207 to float, !dbg !52
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %202, i1 %163, i32 0, i1 %163) #1, !dbg !52
  %210 = bitcast i32 %209 to float, !dbg !52
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %204, i1 %164, i32 0, i1 %164) #1, !dbg !52
  %212 = bitcast i32 %211 to float, !dbg !52
  %213 = fadd float %187, %206, !dbg !53
  %214 = fadd float %188, %208, !dbg !53
  %215 = fadd float %189, %210, !dbg !53
  %216 = fadd float %190, %212, !dbg !53
  %217 = add nsw i32 %19, 12288, !dbg !54
  %218 = add nsw i32 %20, 12288, !dbg !54
  %219 = add i32 %55, %217, !dbg !55
  %220 = add i32 %57, %217, !dbg !55
  %221 = add i32 %59, %218, !dbg !55
  %222 = add i32 %61, %218, !dbg !55
  %223 = sext i32 %219 to i64, !dbg !56
  %224 = getelementptr float, ptr addrspace(1) %0, i64 %223, !dbg !56
  %225 = sext i32 %220 to i64, !dbg !56
  %226 = getelementptr float, ptr addrspace(1) %0, i64 %225, !dbg !56
  %227 = sext i32 %221 to i64, !dbg !56
  %228 = getelementptr float, ptr addrspace(1) %0, i64 %227, !dbg !56
  %229 = sext i32 %222 to i64, !dbg !56
  %230 = getelementptr float, ptr addrspace(1) %0, i64 %229, !dbg !56
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 %161, i32 0, i1 %161) #1, !dbg !57
  %232 = bitcast i32 %231 to float, !dbg !57
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %226, i1 %162, i32 0, i1 %162) #1, !dbg !57
  %234 = bitcast i32 %233 to float, !dbg !57
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %228, i1 %163, i32 0, i1 %163) #1, !dbg !57
  %236 = bitcast i32 %235 to float, !dbg !57
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %230, i1 %164, i32 0, i1 %164) #1, !dbg !57
  %238 = bitcast i32 %237 to float, !dbg !57
  %239 = fadd float %213, %232, !dbg !58
  %240 = fadd float %214, %234, !dbg !58
  %241 = fadd float %215, %236, !dbg !58
  %242 = fadd float %216, %238, !dbg !58
  %243 = add nsw i32 %19, 14336, !dbg !59
  %244 = add nsw i32 %20, 14336, !dbg !59
  %245 = add i32 %55, %243, !dbg !60
  %246 = add i32 %57, %243, !dbg !60
  %247 = add i32 %59, %244, !dbg !60
  %248 = add i32 %61, %244, !dbg !60
  %249 = sext i32 %245 to i64, !dbg !61
  %250 = getelementptr float, ptr addrspace(1) %0, i64 %249, !dbg !61
  %251 = sext i32 %246 to i64, !dbg !61
  %252 = getelementptr float, ptr addrspace(1) %0, i64 %251, !dbg !61
  %253 = sext i32 %247 to i64, !dbg !61
  %254 = getelementptr float, ptr addrspace(1) %0, i64 %253, !dbg !61
  %255 = sext i32 %248 to i64, !dbg !61
  %256 = getelementptr float, ptr addrspace(1) %0, i64 %255, !dbg !61
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %250, i1 %161, i32 0, i1 %161) #1, !dbg !62
  %258 = bitcast i32 %257 to float, !dbg !62
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %252, i1 %162, i32 0, i1 %162) #1, !dbg !62
  %260 = bitcast i32 %259 to float, !dbg !62
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %254, i1 %163, i32 0, i1 %163) #1, !dbg !62
  %262 = bitcast i32 %261 to float, !dbg !62
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %256, i1 %164, i32 0, i1 %164) #1, !dbg !62
  %264 = bitcast i32 %263 to float, !dbg !62
  %265 = fadd float %239, %258, !dbg !63
  %266 = fadd float %240, %260, !dbg !63
  %267 = fadd float %241, %262, !dbg !63
  %268 = fadd float %242, %264, !dbg !63
  %269 = select i1 %46, float 4.000000e+00, float 0.000000e+00, !dbg !64
  %270 = select i1 %47, float 4.000000e+00, float 0.000000e+00, !dbg !64
  %271 = select i1 %48, float 4.000000e+00, float 0.000000e+00, !dbg !64
  %272 = select i1 %49, float 4.000000e+00, float 0.000000e+00, !dbg !64
  %273 = select i1 %161, float 1.000000e+00, float 0.000000e+00, !dbg !65
  %274 = select i1 %162, float 1.000000e+00, float 0.000000e+00, !dbg !65
  %275 = select i1 %163, float 1.000000e+00, float 0.000000e+00, !dbg !65
  %276 = select i1 %164, float 1.000000e+00, float 0.000000e+00, !dbg !65
  %277 = fadd float %269, %273, !dbg !66
  %278 = fadd float %270, %274, !dbg !66
  %279 = fadd float %271, %275, !dbg !66
  %280 = fadd float %272, %276, !dbg !66
  %281 = fadd float %273, %277, !dbg !67
  %282 = fadd float %274, %278, !dbg !67
  %283 = fadd float %275, %279, !dbg !67
  %284 = fadd float %276, %280, !dbg !67
  %285 = fadd float %273, %281, !dbg !68
  %286 = fadd float %274, %282, !dbg !68
  %287 = fadd float %275, %283, !dbg !68
  %288 = fadd float %276, %284, !dbg !68
  %289 = fadd float %273, %285, !dbg !69
  %290 = fadd float %274, %286, !dbg !69
  %291 = fadd float %275, %287, !dbg !69
  %292 = fadd float %276, %288, !dbg !69
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %265, float %289) #1, !dbg !70
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %266, float %290) #1, !dbg !70
  %295 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %267, float %291) #1, !dbg !70
  %296 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %268, float %292) #1, !dbg !70
  %297 = sext i32 %9 to i64, !dbg !71
  %298 = getelementptr float, ptr addrspace(1) %1, i64 %297, !dbg !71
  %299 = bitcast float %293 to i32, !dbg !72
  %300 = bitcast float %294 to i32, !dbg !72
  %301 = bitcast float %295 to i32, !dbg !72
  %302 = bitcast float %296 to i32, !dbg !72
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %299, i32 %300, i32 %301, i32 %302, ptr addrspace(1) %298, i1 true) #1, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2jon3uwbhx322r2ak32t3reoczprbhq27e6n57jgo7tod6zmh2z.py", directory: "inductor_cache/2j")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_22, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_22", linkageName: "triton_poi_fused__adaptive_avg_pool2d_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 26, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 21, scope: !7)
!19 = !DILocation(line: 29, column: 25, scope: !7)
!20 = !DILocation(line: 30, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 41, scope: !7)
!22 = !DILocation(line: 35, column: 62, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 56, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 67, scope: !7)
!27 = !DILocation(line: 39, column: 38, scope: !7)
!28 = !DILocation(line: 39, column: 64, scope: !7)
!29 = !DILocation(line: 39, column: 31, scope: !7)
!30 = !DILocation(line: 39, column: 75, scope: !7)
!31 = !DILocation(line: 40, column: 20, scope: !7)
!32 = !DILocation(line: 44, column: 38, scope: !7)
!33 = !DILocation(line: 44, column: 64, scope: !7)
!34 = !DILocation(line: 44, column: 31, scope: !7)
!35 = !DILocation(line: 44, column: 75, scope: !7)
!36 = !DILocation(line: 45, column: 20, scope: !7)
!37 = !DILocation(line: 49, column: 38, scope: !7)
!38 = !DILocation(line: 49, column: 64, scope: !7)
!39 = !DILocation(line: 49, column: 31, scope: !7)
!40 = !DILocation(line: 49, column: 75, scope: !7)
!41 = !DILocation(line: 50, column: 20, scope: !7)
!42 = !DILocation(line: 51, column: 17, scope: !7)
!43 = !DILocation(line: 52, column: 20, scope: !7)
!44 = !DILocation(line: 54, column: 38, scope: !7)
!45 = !DILocation(line: 54, column: 64, scope: !7)
!46 = !DILocation(line: 54, column: 31, scope: !7)
!47 = !DILocation(line: 54, column: 75, scope: !7)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 57, column: 39, scope: !7)
!50 = !DILocation(line: 57, column: 65, scope: !7)
!51 = !DILocation(line: 57, column: 31, scope: !7)
!52 = !DILocation(line: 57, column: 76, scope: !7)
!53 = !DILocation(line: 58, column: 20, scope: !7)
!54 = !DILocation(line: 60, column: 39, scope: !7)
!55 = !DILocation(line: 60, column: 65, scope: !7)
!56 = !DILocation(line: 60, column: 31, scope: !7)
!57 = !DILocation(line: 60, column: 76, scope: !7)
!58 = !DILocation(line: 61, column: 20, scope: !7)
!59 = !DILocation(line: 63, column: 39, scope: !7)
!60 = !DILocation(line: 63, column: 65, scope: !7)
!61 = !DILocation(line: 63, column: 31, scope: !7)
!62 = !DILocation(line: 63, column: 76, scope: !7)
!63 = !DILocation(line: 64, column: 20, scope: !7)
!64 = !DILocation(line: 79, column: 20, scope: !7)
!65 = !DILocation(line: 82, column: 35, scope: !7)
!66 = !DILocation(line: 83, column: 20, scope: !7)
!67 = !DILocation(line: 87, column: 20, scope: !7)
!68 = !DILocation(line: 91, column: 20, scope: !7)
!69 = !DILocation(line: 95, column: 20, scope: !7)
!70 = !DILocation(line: 96, column: 20, scope: !7)
!71 = !DILocation(line: 97, column: 25, scope: !7)
!72 = !DILocation(line: 97, column: 37, scope: !7)
!73 = !DILocation(line: 97, column: 4, scope: !7)
