; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_convolution_mean_relu_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 7, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 124, !dbg !12
  %11 = lshr i32 %8, 5, !dbg !12
  %12 = and i32 %8, 127, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %13, 4000, !dbg !14
  %16 = icmp slt i32 %14, 4000, !dbg !14
  %17 = and i32 %11, 7, !dbg !15
  %18 = icmp eq i32 %17, 0, !dbg !16
  %.frozen = freeze i32 %13, !dbg !17
  %19 = sdiv i32 %.frozen, 1000, !dbg !17
  %20 = mul i32 %19, 1000, !dbg !18
  %.decomposed = sub i32 %.frozen, %20, !dbg !18
  %21 = mul nuw nsw i32 %17, 1000, !dbg !19
  %22 = add nsw i32 %.decomposed, %21, !dbg !20
  %23 = mul i32 %19, 9000, !dbg !21
  %24 = add i32 %22, %23, !dbg !22
  %25 = add nsw i32 %22, 8000, !dbg !20
  %26 = add i32 %25, %23, !dbg !22
  %27 = sext i32 %24 to i64, !dbg !23
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !23
  %29 = sext i32 %26 to i64, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !23
  %31 = and i1 %18, %15, !dbg !24
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !25
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !25
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !25
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !25
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !25
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #3, !dbg !25
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !25
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !25
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !25
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !25
  %42 = sext i32 %.decomposed to i64, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !26
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %15) #3, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !27
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !27
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !27
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !27
  %49 = insertelement <8 x i32> poison, i32 %41, i64 0, !dbg !25
  %50 = insertelement <8 x i32> %49, i32 %40, i64 1, !dbg !25
  %51 = insertelement <8 x i32> %50, i32 %39, i64 2, !dbg !25
  %52 = insertelement <8 x i32> %51, i32 %38, i64 3, !dbg !25
  %53 = insertelement <8 x i32> %52, i32 %36, i64 4, !dbg !25
  %54 = insertelement <8 x i32> %53, i32 %35, i64 5, !dbg !25
  %55 = insertelement <8 x i32> %54, i32 %34, i64 6, !dbg !25
  %56 = insertelement <8 x i32> %55, i32 %33, i64 7, !dbg !25
  %57 = bitcast <8 x i32> %56 to <8 x float>, !dbg !25
  %58 = insertelement <4 x i32> poison, i32 %48, i64 0, !dbg !27
  %59 = insertelement <4 x i32> %58, i32 %47, i64 1, !dbg !27
  %60 = insertelement <4 x i32> %59, i32 %46, i64 2, !dbg !27
  %61 = insertelement <4 x i32> %60, i32 %45, i64 3, !dbg !27
  %62 = bitcast <4 x i32> %61 to <4 x float>, !dbg !27
  %63 = shufflevector <4 x float> %62, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !27
  %64 = fadd <8 x float> %63, %57, !dbg !28
  %65 = fcmp olt <8 x float> %64, zeroinitializer, !dbg !29
  %66 = extractelement <8 x i1> %65, i64 7, !dbg !33
  %67 = extractelement <8 x float> %64, i64 7, !dbg !33
  %68 = select i1 %66, float 0.000000e+00, float %67, !dbg !33
  %69 = extractelement <8 x i1> %65, i64 6, !dbg !33
  %70 = extractelement <8 x float> %64, i64 6, !dbg !33
  %71 = select i1 %69, float 0.000000e+00, float %70, !dbg !33
  %72 = extractelement <8 x i1> %65, i64 5, !dbg !33
  %73 = extractelement <8 x float> %64, i64 5, !dbg !33
  %74 = select i1 %72, float 0.000000e+00, float %73, !dbg !33
  %75 = extractelement <8 x i1> %65, i64 4, !dbg !33
  %76 = extractelement <8 x float> %64, i64 4, !dbg !33
  %77 = select i1 %75, float 0.000000e+00, float %76, !dbg !33
  %78 = extractelement <8 x i1> %65, i64 3, !dbg !33
  %79 = extractelement <8 x float> %64, i64 3, !dbg !33
  %80 = select i1 %78, float 0.000000e+00, float %79, !dbg !33
  %81 = extractelement <8 x i1> %65, i64 2, !dbg !33
  %82 = extractelement <8 x float> %64, i64 2, !dbg !33
  %83 = select i1 %81, float 0.000000e+00, float %82, !dbg !33
  %84 = extractelement <8 x i1> %65, i64 1, !dbg !33
  %85 = extractelement <8 x float> %64, i64 1, !dbg !33
  %86 = select i1 %84, float 0.000000e+00, float %85, !dbg !33
  %87 = extractelement <8 x i1> %65, i64 0, !dbg !33
  %88 = extractelement <8 x float> %64, i64 0, !dbg !33
  %89 = select i1 %87, float 0.000000e+00, float %88, !dbg !33
  %90 = select i1 %15, float %68, float 0.000000e+00, !dbg !34
  %91 = select i1 %15, float %71, float 0.000000e+00, !dbg !34
  %92 = select i1 %15, float %74, float 0.000000e+00, !dbg !34
  %93 = select i1 %15, float %77, float 0.000000e+00, !dbg !34
  %94 = select i1 %31, float %80, float 0.000000e+00, !dbg !34
  %95 = select i1 %31, float %83, float 0.000000e+00, !dbg !34
  %96 = select i1 %31, float %86, float 0.000000e+00, !dbg !34
  %97 = select i1 %31, float %89, float 0.000000e+00, !dbg !34
  %98 = fadd float %90, %94, !dbg !35
  %99 = fadd float %91, %95, !dbg !35
  %100 = fadd float %92, %96, !dbg !35
  %101 = fadd float %93, %97, !dbg !35
  %102 = shl nuw nsw i32 %10, 3, !dbg !40
  %103 = or disjoint i32 %102, %17, !dbg !40
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i32 %103, !dbg !40
  %105 = bitcast float %98 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #3, !dbg !40
  %106 = or disjoint i32 %102, 8, !dbg !40
  %107 = or disjoint i32 %106, %17, !dbg !40
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %107, !dbg !40
  %109 = bitcast float %99 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #3, !dbg !40
  %110 = or disjoint i32 %102, 16, !dbg !40
  %111 = or disjoint i32 %110, %17, !dbg !40
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i32 %111, !dbg !40
  %113 = bitcast float %100 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #3, !dbg !40
  %114 = or disjoint i32 %102, 24, !dbg !40
  %115 = or disjoint i32 %114, %17, !dbg !40
  %116 = getelementptr float, ptr addrspace(3) @global_smem, i32 %115, !dbg !40
  %117 = bitcast float %101 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 true) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %118 = icmp slt i32 %8, 1024, !dbg !40
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !40
  %120 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %119, i1 %118) #3, !dbg !40
  %121 = bitcast i32 %120 to float, !dbg !40
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 4, i32 31), !dbg !40
  %123 = bitcast i32 %122 to float, !dbg !40
  %124 = fadd float %121, %123, !dbg !35
  %125 = bitcast float %124 to i32, !dbg !40
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 2, i32 31), !dbg !40
  %127 = bitcast i32 %126 to float, !dbg !40
  %128 = fadd float %124, %127, !dbg !35
  %129 = bitcast float %128 to i32, !dbg !40
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 1, i32 31), !dbg !40
  %131 = bitcast i32 %130 to float, !dbg !40
  %132 = fadd float %128, %131, !dbg !35
  %133 = and i32 %8, 7, !dbg !40
  %134 = icmp eq i32 %133, 0, !dbg !40
  %135 = and i1 %118, %134, !dbg !40
  %136 = bitcast float %132 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %136, i1 %135) #3, !dbg !40
  %137 = getelementptr i8, ptr addrspace(3) %119, i32 1024, !dbg !40
  %138 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %137, i1 %118) #3, !dbg !40
  %139 = bitcast i32 %138 to float, !dbg !40
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 4, i32 31), !dbg !40
  %141 = bitcast i32 %140 to float, !dbg !40
  %142 = fadd float %139, %141, !dbg !35
  %143 = bitcast float %142 to i32, !dbg !40
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 2, i32 31), !dbg !40
  %145 = bitcast i32 %144 to float, !dbg !40
  %146 = fadd float %142, %145, !dbg !35
  %147 = bitcast float %146 to i32, !dbg !40
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 1, i32 31), !dbg !40
  %149 = bitcast i32 %148 to float, !dbg !40
  %150 = fadd float %146, %149, !dbg !35
  %151 = bitcast float %150 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %151, i1 %135) #3, !dbg !40
  %152 = getelementptr i8, ptr addrspace(3) %119, i32 2048, !dbg !40
  %153 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %152, i1 %118) #3, !dbg !40
  %154 = bitcast i32 %153 to float, !dbg !40
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 4, i32 31), !dbg !40
  %156 = bitcast i32 %155 to float, !dbg !40
  %157 = fadd float %154, %156, !dbg !35
  %158 = bitcast float %157 to i32, !dbg !40
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 2, i32 31), !dbg !40
  %160 = bitcast i32 %159 to float, !dbg !40
  %161 = fadd float %157, %160, !dbg !35
  %162 = bitcast float %161 to i32, !dbg !40
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 1, i32 31), !dbg !40
  %164 = bitcast i32 %163 to float, !dbg !40
  %165 = fadd float %161, %164, !dbg !35
  %166 = bitcast float %165 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %166, i1 %135) #3, !dbg !40
  %167 = getelementptr i8, ptr addrspace(3) %119, i32 3072, !dbg !40
  %168 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %167, i1 %118) #3, !dbg !40
  %169 = bitcast i32 %168 to float, !dbg !40
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 4, i32 31), !dbg !40
  %171 = bitcast i32 %170 to float, !dbg !40
  %172 = fadd float %169, %171, !dbg !35
  %173 = bitcast float %172 to i32, !dbg !40
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 2, i32 31), !dbg !40
  %175 = bitcast i32 %174 to float, !dbg !40
  %176 = fadd float %172, %175, !dbg !35
  %177 = bitcast float %176 to i32, !dbg !40
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 1, i32 31), !dbg !40
  %179 = bitcast i32 %178 to float, !dbg !40
  %180 = fadd float %176, %179, !dbg !35
  %181 = bitcast float %180 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %181, i1 %135) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %182 = getelementptr float, ptr addrspace(3) @global_smem, i32 %102, !dbg !40
  %183 = load i32, ptr addrspace(3) %182, align 16, !dbg !40
  %184 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !40
  %185 = load i32, ptr addrspace(3) %184, align 16, !dbg !40
  %186 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !40
  %187 = load i32, ptr addrspace(3) %186, align 16, !dbg !40
  %188 = getelementptr float, ptr addrspace(3) @global_smem, i32 %114, !dbg !40
  %189 = load i32, ptr addrspace(3) %188, align 16, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %190 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !41
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %190, i32 %183, i32 %185, i32 %187, i32 %189, i1 true) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %191 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !41
  %192 = load float, ptr addrspace(3) %191, align 4, !dbg !41
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %192, float 9.000000e+00) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %194 = sext i32 %14 to i64, !dbg !43
  %195 = getelementptr float, ptr addrspace(1) %0, i64 %194, !dbg !43
  %196 = and i32 %8, 128, !dbg !44
  %197 = icmp eq i32 %196, 0, !dbg !44
  %198 = bitcast float %193 to i32, !dbg !44
  %199 = and i1 %197, %16, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %198, ptr addrspace(1) %195, i1 %199) #3, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py", directory: "inductor_cache/2y")
!4 = !{ptr @triton_per_fused_convolution_mean_relu_28, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_mean_relu_28, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_mean_relu_28", linkageName: "triton_per_fused_convolution_mean_relu_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 40, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 50, scope: !7)
!22 = !DILocation(line: 33, column: 45, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 63, scope: !7)
!25 = !DILocation(line: 33, column: 55, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 37, column: 40, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 39, column: 41, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !39)
!36 = distinct !DILexicalBlockFile(scope: !38, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!38 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!39 = !DILocation(line: 40, column: 24, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !38, inlinedAt: !39)
!41 = !DILocation(line: 42, column: 19, scope: !7)
!42 = !DILocation(line: 43, column: 4, scope: !7)
!43 = !DILocation(line: 44, column: 28, scope: !7)
!44 = !DILocation(line: 44, column: 40, scope: !7)
!45 = !DILocation(line: 44, column: 4, scope: !7)
