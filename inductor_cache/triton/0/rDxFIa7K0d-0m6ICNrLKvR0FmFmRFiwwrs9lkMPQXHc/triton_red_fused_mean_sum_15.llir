; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_mean_sum_15(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 60, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 2048, !dbg !14
  %12 = lshr i32 %7, 4, !dbg !15
  %13 = and i32 %12, 7, !dbg !15
  %.frozen = freeze i32 %10, !dbg !16
  %14 = sdiv i32 %.frozen, 256, !dbg !16
  %15 = mul i32 %14, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %15, !dbg !17
  %16 = shl i32 %14, 15, !dbg !18
  %17 = add i32 %16, %.decomposed
  %18 = add i32 %17, 262144
  %19 = insertelement <4 x i1> poison, i1 %11, i64 0, !dbg !19
  %20 = shufflevector <4 x i1> %19, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !19
  br label %21, !dbg !20

21:                                               ; preds = %4, %21
  %indvars.iv = phi i64 [ 0, %4 ], [ %indvars.iv.next, %21 ]
  %22 = phi <4 x float> [ zeroinitializer, %4 ], [ %53, %21 ]
  %23 = trunc i64 %indvars.iv to i32, !dbg !21
  %.tr = or disjoint i32 %13, %23, !dbg !21
  %24 = shl i32 %.tr, 8, !dbg !21
  %25 = add i32 %17, %24, !dbg !21
  %26 = sext i32 %25 to i64, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !22
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #3, !dbg !23
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !23
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !23
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !23
  %33 = add i32 %18, %24, !dbg !24
  %34 = sext i32 %33 to i64, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !25
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #3, !dbg !26
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !26
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !26
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !26
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !26
  %41 = insertelement <4 x i32> poison, i32 %29, i64 0, !dbg !23
  %42 = insertelement <4 x i32> %41, i32 %30, i64 1, !dbg !23
  %43 = insertelement <4 x i32> %42, i32 %31, i64 2, !dbg !23
  %44 = insertelement <4 x i32> %43, i32 %32, i64 3, !dbg !23
  %45 = bitcast <4 x i32> %44 to <4 x float>, !dbg !23
  %46 = insertelement <4 x i32> poison, i32 %37, i64 0, !dbg !26
  %47 = insertelement <4 x i32> %46, i32 %38, i64 1, !dbg !26
  %48 = insertelement <4 x i32> %47, i32 %39, i64 2, !dbg !26
  %49 = insertelement <4 x i32> %48, i32 %40, i64 3, !dbg !26
  %50 = bitcast <4 x i32> %49 to <4 x float>, !dbg !26
  %51 = fadd <4 x float> %45, %50, !dbg !27
  %52 = fadd <4 x float> %22, %51, !dbg !28
  %53 = select <4 x i1> %20, <4 x float> %52, <4 x float> %22, !dbg !19
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !20
  %54 = icmp samesign ult i64 %indvars.iv, 120, !dbg !20
  br i1 %54, label %21, label %55, !dbg !20

55:                                               ; preds = %21
  %56 = lshr i32 %7, 5, !dbg !12
  %57 = and i32 %7, 63, !dbg !12
  %58 = or disjoint i32 %6, %57, !dbg !13
  %59 = icmp slt i32 %58, 2048, !dbg !14
  %60 = and i32 %7, 16, !dbg !12
  %61 = extractelement <4 x float> %53, i64 0, !dbg !29
  %62 = bitcast float %61 to i32, !dbg !29
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 16, i32 31), !dbg !29
  %64 = bitcast i32 %63 to float, !dbg !29
  %65 = fadd float %61, %64, !dbg !33
  %66 = extractelement <4 x float> %53, i64 1, !dbg !29
  %67 = bitcast float %66 to i32, !dbg !29
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 16, i32 31), !dbg !29
  %69 = bitcast i32 %68 to float, !dbg !29
  %70 = fadd float %66, %69, !dbg !33
  %71 = extractelement <4 x float> %53, i64 2, !dbg !29
  %72 = bitcast float %71 to i32, !dbg !29
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 16, i32 31), !dbg !29
  %74 = bitcast i32 %73 to float, !dbg !29
  %75 = fadd float %71, %74, !dbg !33
  %76 = extractelement <4 x float> %53, i64 3, !dbg !29
  %77 = bitcast float %76 to i32, !dbg !29
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 16, i32 31), !dbg !29
  %79 = bitcast i32 %78 to float, !dbg !29
  %80 = fadd float %76, %79, !dbg !33
  %81 = icmp eq i32 %60, 0, !dbg !29
  %82 = and i32 %56, 3, !dbg !29
  %83 = shl nuw nsw i32 %9, 2, !dbg !29
  %84 = or disjoint i32 %83, %82, !dbg !29
  %85 = zext nneg i32 %84 to i64, !dbg !29
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i64 %85, !dbg !29
  %87 = bitcast float %65 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 %81) #3, !dbg !29
  %88 = or disjoint i32 %83, 4, !dbg !29
  %89 = or disjoint i32 %88, %82, !dbg !29
  %90 = zext nneg i32 %89 to i64, !dbg !29
  %91 = getelementptr float, ptr addrspace(3) @global_smem, i64 %90, !dbg !29
  %92 = bitcast float %70 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 %81) #3, !dbg !29
  %93 = or disjoint i32 %83, 8, !dbg !29
  %94 = or disjoint i32 %93, %82, !dbg !29
  %95 = zext nneg i32 %94 to i64, !dbg !29
  %96 = getelementptr float, ptr addrspace(3) @global_smem, i64 %95, !dbg !29
  %97 = bitcast float %75 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 %81) #3, !dbg !29
  %98 = or disjoint i32 %83, 12, !dbg !29
  %99 = or disjoint i32 %98, %82, !dbg !29
  %100 = zext nneg i32 %99 to i64, !dbg !29
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i64 %100, !dbg !29
  %102 = bitcast float %80 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 %81) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %103 = icmp slt i32 %7, 256, !dbg !29
  %104 = sext i32 %7 to i64, !dbg !29
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i64 %104, !dbg !29
  %106 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %105, i1 %103) #3, !dbg !29
  %107 = bitcast i32 %106 to float, !dbg !29
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 2, i32 31), !dbg !29
  %109 = bitcast i32 %108 to float, !dbg !29
  %110 = fadd float %107, %109, !dbg !33
  %111 = bitcast float %110 to i32, !dbg !29
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 1, i32 31), !dbg !29
  %113 = bitcast i32 %112 to float, !dbg !29
  %114 = fadd float %110, %113, !dbg !33
  %115 = and i32 %7, 3, !dbg !29
  %116 = icmp eq i32 %115, 0, !dbg !29
  %117 = and i1 %103, %116, !dbg !29
  %118 = bitcast float %114 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %118, i1 %117) #3, !dbg !29
  %119 = add i32 %7, 128, !dbg !29
  %120 = sext i32 %119 to i64, !dbg !29
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i64 %120, !dbg !29
  %122 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %121, i1 %103) #3, !dbg !29
  %123 = bitcast i32 %122 to float, !dbg !29
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 2, i32 31), !dbg !29
  %125 = bitcast i32 %124 to float, !dbg !29
  %126 = fadd float %123, %125, !dbg !33
  %127 = bitcast float %126 to i32, !dbg !29
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 1, i32 31), !dbg !29
  %129 = bitcast i32 %128 to float, !dbg !29
  %130 = fadd float %126, %129, !dbg !33
  %131 = bitcast float %130 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %131, i1 %117) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %132 = zext nneg i32 %83 to i64, !dbg !29
  %133 = getelementptr float, ptr addrspace(3) @global_smem, i64 %132, !dbg !29
  %134 = load i32, ptr addrspace(3) %133, align 16, !dbg !29
  %135 = zext nneg i32 %88 to i64, !dbg !29
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i64 %135, !dbg !29
  %137 = load i32, ptr addrspace(3) %136, align 16, !dbg !29
  %138 = zext nneg i32 %93 to i64, !dbg !29
  %139 = getelementptr float, ptr addrspace(3) @global_smem, i64 %138, !dbg !29
  %140 = load i32, ptr addrspace(3) %139, align 16, !dbg !29
  %141 = zext nneg i32 %98 to i64, !dbg !29
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i64 %141, !dbg !29
  %143 = load i32, ptr addrspace(3) %142, align 16, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %144 = zext nneg i32 %9 to i64, !dbg !35
  %145 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %144, !dbg !35
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %145, i32 %134, i32 %137, i32 %140, i32 %143, i1 true) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %146 = zext nneg i32 %57 to i64, !dbg !35
  %147 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %146, !dbg !35
  %148 = load i32, ptr addrspace(3) %147, align 4, !dbg !35
  %149 = sext i32 %58 to i64, !dbg !36
  %150 = getelementptr float, ptr addrspace(1) %1, i64 %149, !dbg !36
  %151 = and i32 %7, 64, !dbg !37
  %152 = icmp eq i32 %151, 0, !dbg !37
  %153 = and i1 %152, %59, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %148, ptr addrspace(1) %150, i1 %153) #3, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnxcljeatq4vkqxiffx5njtd2fxn57mg5j6rk6dwpsof57di52zg.py", directory: "inductor_cache/nx")
!4 = !{ptr @triton_red_fused_mean_sum_15, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_mean_sum_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_mean_sum_15", linkageName: "triton_red_fused_mean_sum_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 34, column: 54, scope: !7)
!19 = !DILocation(line: 39, column: 46, scope: !7)
!20 = !DILocation(line: 30, column: 36, scope: !7)
!21 = !DILocation(line: 34, column: 48, scope: !7)
!22 = !DILocation(line: 34, column: 34, scope: !7)
!23 = !DILocation(line: 34, column: 59, scope: !7)
!24 = !DILocation(line: 35, column: 57, scope: !7)
!25 = !DILocation(line: 35, column: 34, scope: !7)
!26 = !DILocation(line: 35, column: 68, scope: !7)
!27 = !DILocation(line: 36, column: 22, scope: !7)
!28 = !DILocation(line: 38, column: 23, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = !DILocation(line: 40, column: 25, scope: !7)
!33 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !32)
!34 = distinct !DILexicalBlockFile(scope: !30, file: !31, discriminator: 0)
!35 = !DILocation(line: 40, column: 28, scope: !7)
!36 = !DILocation(line: 41, column: 25, scope: !7)
!37 = !DILocation(line: 41, column: 36, scope: !7)
!38 = !DILocation(line: 41, column: 4, scope: !7)
