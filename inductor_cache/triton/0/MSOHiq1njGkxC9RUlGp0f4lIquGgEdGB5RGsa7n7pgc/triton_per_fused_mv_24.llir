; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mv_24(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 4, !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = or disjoint i32 %9, 16, !dbg !12
  %11 = or disjoint i32 %9, 32, !dbg !12
  %12 = or disjoint i32 %9, 48, !dbg !12
  %13 = or disjoint i32 %9, 64, !dbg !12
  %14 = or disjoint i32 %9, 80, !dbg !12
  %15 = or disjoint i32 %9, 96, !dbg !12
  %16 = or disjoint i32 %9, 112, !dbg !12
  %17 = and i32 %7, 127, !dbg !12
  %18 = or disjoint i32 %6, %9, !dbg !13
  %19 = or disjoint i32 %6, %10, !dbg !13
  %20 = or disjoint i32 %6, %11, !dbg !13
  %21 = or disjoint i32 %6, %12, !dbg !13
  %22 = or disjoint i32 %6, %13, !dbg !13
  %23 = or disjoint i32 %6, %14, !dbg !13
  %24 = or disjoint i32 %6, %15, !dbg !13
  %25 = or disjoint i32 %6, %16, !dbg !13
  %26 = or disjoint i32 %6, %17, !dbg !13
  %27 = icmp slt i32 %18, 512, !dbg !14
  %28 = icmp slt i32 %19, 512, !dbg !14
  %29 = icmp slt i32 %20, 512, !dbg !14
  %30 = icmp slt i32 %21, 512, !dbg !14
  %31 = icmp slt i32 %22, 512, !dbg !14
  %32 = icmp slt i32 %23, 512, !dbg !14
  %33 = icmp slt i32 %24, 512, !dbg !14
  %34 = icmp slt i32 %25, 512, !dbg !14
  %35 = icmp slt i32 %26, 512, !dbg !14
  %36 = shl i32 %7, 1, !dbg !15
  %37 = and i32 %36, 30, !dbg !15
  %38 = icmp samesign ult i32 %37, 18, !dbg !16
  %39 = mul i32 %18, 18, !dbg !17
  %40 = mul i32 %19, 18, !dbg !17
  %41 = mul i32 %20, 18, !dbg !17
  %42 = mul i32 %21, 18, !dbg !17
  %43 = mul i32 %22, 18, !dbg !17
  %44 = mul i32 %23, 18, !dbg !17
  %45 = mul i32 %24, 18, !dbg !17
  %46 = mul i32 %25, 18, !dbg !17
  %47 = add i32 %39, %37, !dbg !18
  %48 = add i32 %40, %37, !dbg !18
  %49 = add i32 %41, %37, !dbg !18
  %50 = add i32 %42, %37, !dbg !18
  %51 = add i32 %43, %37, !dbg !18
  %52 = add i32 %44, %37, !dbg !18
  %53 = add i32 %45, %37, !dbg !18
  %54 = add i32 %46, %37, !dbg !18
  %55 = sext i32 %47 to i64, !dbg !19
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !19
  %57 = sext i32 %48 to i64, !dbg !19
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !19
  %59 = sext i32 %49 to i64, !dbg !19
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !19
  %61 = sext i32 %50 to i64, !dbg !19
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !19
  %63 = sext i32 %51 to i64, !dbg !19
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !19
  %65 = sext i32 %52 to i64, !dbg !19
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !19
  %67 = sext i32 %53 to i64, !dbg !19
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !19
  %69 = sext i32 %54 to i64, !dbg !19
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !19
  %71 = and i1 %38, %27, !dbg !20
  %72 = and i1 %38, %28, !dbg !20
  %73 = and i1 %38, %29, !dbg !20
  %74 = and i1 %38, %30, !dbg !20
  %75 = and i1 %38, %31, !dbg !20
  %76 = and i1 %38, %32, !dbg !20
  %77 = and i1 %38, %33, !dbg !20
  %78 = and i1 %38, %34, !dbg !20
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %56, i1 %71, i32 0, i1 %71, i32 0, i1 %71) #3, !dbg !21
  %80 = extractvalue { i32, i32 } %79, 0, !dbg !21
  %81 = extractvalue { i32, i32 } %79, 1, !dbg !21
  %82 = bitcast i32 %80 to float, !dbg !21
  %83 = bitcast i32 %81 to float, !dbg !21
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %58, i1 %72, i32 0, i1 %72, i32 0, i1 %72) #3, !dbg !21
  %85 = extractvalue { i32, i32 } %84, 0, !dbg !21
  %86 = extractvalue { i32, i32 } %84, 1, !dbg !21
  %87 = bitcast i32 %85 to float, !dbg !21
  %88 = bitcast i32 %86 to float, !dbg !21
  %89 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 %73, i32 0, i1 %73, i32 0, i1 %73) #3, !dbg !21
  %90 = extractvalue { i32, i32 } %89, 0, !dbg !21
  %91 = extractvalue { i32, i32 } %89, 1, !dbg !21
  %92 = bitcast i32 %90 to float, !dbg !21
  %93 = bitcast i32 %91 to float, !dbg !21
  %94 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %62, i1 %74, i32 0, i1 %74, i32 0, i1 %74) #3, !dbg !21
  %95 = extractvalue { i32, i32 } %94, 0, !dbg !21
  %96 = extractvalue { i32, i32 } %94, 1, !dbg !21
  %97 = bitcast i32 %95 to float, !dbg !21
  %98 = bitcast i32 %96 to float, !dbg !21
  %99 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %64, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #3, !dbg !21
  %100 = extractvalue { i32, i32 } %99, 0, !dbg !21
  %101 = extractvalue { i32, i32 } %99, 1, !dbg !21
  %102 = bitcast i32 %100 to float, !dbg !21
  %103 = bitcast i32 %101 to float, !dbg !21
  %104 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %66, i1 %76, i32 0, i1 %76, i32 0, i1 %76) #3, !dbg !21
  %105 = extractvalue { i32, i32 } %104, 0, !dbg !21
  %106 = extractvalue { i32, i32 } %104, 1, !dbg !21
  %107 = bitcast i32 %105 to float, !dbg !21
  %108 = bitcast i32 %106 to float, !dbg !21
  %109 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %68, i1 %77, i32 0, i1 %77, i32 0, i1 %77) #3, !dbg !21
  %110 = extractvalue { i32, i32 } %109, 0, !dbg !21
  %111 = extractvalue { i32, i32 } %109, 1, !dbg !21
  %112 = bitcast i32 %110 to float, !dbg !21
  %113 = bitcast i32 %111 to float, !dbg !21
  %114 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %70, i1 %78, i32 0, i1 %78, i32 0, i1 %78) #3, !dbg !21
  %115 = extractvalue { i32, i32 } %114, 0, !dbg !21
  %116 = extractvalue { i32, i32 } %114, 1, !dbg !21
  %117 = bitcast i32 %115 to float, !dbg !21
  %118 = bitcast i32 %116 to float, !dbg !21
  %119 = fadd float %82, %83, !dbg !22
  %120 = select i1 %71, float %119, float 0.000000e+00, !dbg !22
  %121 = fadd float %87, %88, !dbg !22
  %122 = select i1 %72, float %121, float 0.000000e+00, !dbg !22
  %123 = fadd float %92, %93, !dbg !22
  %124 = select i1 %73, float %123, float 0.000000e+00, !dbg !22
  %125 = fadd float %97, %98, !dbg !22
  %126 = select i1 %74, float %125, float 0.000000e+00, !dbg !22
  %127 = fadd float %102, %103, !dbg !22
  %128 = select i1 %75, float %127, float 0.000000e+00, !dbg !22
  %129 = fadd float %107, %108, !dbg !22
  %130 = select i1 %76, float %129, float 0.000000e+00, !dbg !22
  %131 = fadd float %112, %113, !dbg !22
  %132 = select i1 %77, float %131, float 0.000000e+00, !dbg !22
  %133 = fadd float %117, %118, !dbg !22
  %134 = select i1 %78, float %133, float 0.000000e+00, !dbg !22
  %135 = bitcast float %120 to i32, !dbg !27
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 8, i32 31), !dbg !27
  %137 = bitcast i32 %136 to float, !dbg !27
  %138 = fadd float %120, %137, !dbg !22
  %139 = bitcast float %138 to i32, !dbg !27
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 4, i32 31), !dbg !27
  %141 = bitcast i32 %140 to float, !dbg !27
  %142 = fadd float %138, %141, !dbg !22
  %143 = bitcast float %142 to i32, !dbg !27
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 2, i32 31), !dbg !27
  %145 = bitcast i32 %144 to float, !dbg !27
  %146 = fadd float %142, %145, !dbg !22
  %147 = bitcast float %146 to i32, !dbg !27
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 1, i32 31), !dbg !27
  %149 = bitcast i32 %148 to float, !dbg !27
  %150 = fadd float %146, %149, !dbg !22
  %151 = bitcast float %122 to i32, !dbg !27
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 8, i32 31), !dbg !27
  %153 = bitcast i32 %152 to float, !dbg !27
  %154 = fadd float %122, %153, !dbg !22
  %155 = bitcast float %154 to i32, !dbg !27
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 4, i32 31), !dbg !27
  %157 = bitcast i32 %156 to float, !dbg !27
  %158 = fadd float %154, %157, !dbg !22
  %159 = bitcast float %158 to i32, !dbg !27
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 2, i32 31), !dbg !27
  %161 = bitcast i32 %160 to float, !dbg !27
  %162 = fadd float %158, %161, !dbg !22
  %163 = bitcast float %162 to i32, !dbg !27
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 1, i32 31), !dbg !27
  %165 = bitcast i32 %164 to float, !dbg !27
  %166 = fadd float %162, %165, !dbg !22
  %167 = bitcast float %124 to i32, !dbg !27
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 8, i32 31), !dbg !27
  %169 = bitcast i32 %168 to float, !dbg !27
  %170 = fadd float %124, %169, !dbg !22
  %171 = bitcast float %170 to i32, !dbg !27
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 4, i32 31), !dbg !27
  %173 = bitcast i32 %172 to float, !dbg !27
  %174 = fadd float %170, %173, !dbg !22
  %175 = bitcast float %174 to i32, !dbg !27
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 2, i32 31), !dbg !27
  %177 = bitcast i32 %176 to float, !dbg !27
  %178 = fadd float %174, %177, !dbg !22
  %179 = bitcast float %178 to i32, !dbg !27
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 1, i32 31), !dbg !27
  %181 = bitcast i32 %180 to float, !dbg !27
  %182 = fadd float %178, %181, !dbg !22
  %183 = bitcast float %126 to i32, !dbg !27
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 8, i32 31), !dbg !27
  %185 = bitcast i32 %184 to float, !dbg !27
  %186 = fadd float %126, %185, !dbg !22
  %187 = bitcast float %186 to i32, !dbg !27
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 4, i32 31), !dbg !27
  %189 = bitcast i32 %188 to float, !dbg !27
  %190 = fadd float %186, %189, !dbg !22
  %191 = bitcast float %190 to i32, !dbg !27
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 2, i32 31), !dbg !27
  %193 = bitcast i32 %192 to float, !dbg !27
  %194 = fadd float %190, %193, !dbg !22
  %195 = bitcast float %194 to i32, !dbg !27
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 1, i32 31), !dbg !27
  %197 = bitcast i32 %196 to float, !dbg !27
  %198 = fadd float %194, %197, !dbg !22
  %199 = bitcast float %128 to i32, !dbg !27
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 8, i32 31), !dbg !27
  %201 = bitcast i32 %200 to float, !dbg !27
  %202 = fadd float %128, %201, !dbg !22
  %203 = bitcast float %202 to i32, !dbg !27
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 4, i32 31), !dbg !27
  %205 = bitcast i32 %204 to float, !dbg !27
  %206 = fadd float %202, %205, !dbg !22
  %207 = bitcast float %206 to i32, !dbg !27
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 2, i32 31), !dbg !27
  %209 = bitcast i32 %208 to float, !dbg !27
  %210 = fadd float %206, %209, !dbg !22
  %211 = bitcast float %210 to i32, !dbg !27
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 1, i32 31), !dbg !27
  %213 = bitcast i32 %212 to float, !dbg !27
  %214 = fadd float %210, %213, !dbg !22
  %215 = bitcast float %130 to i32, !dbg !27
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 8, i32 31), !dbg !27
  %217 = bitcast i32 %216 to float, !dbg !27
  %218 = fadd float %130, %217, !dbg !22
  %219 = bitcast float %218 to i32, !dbg !27
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 4, i32 31), !dbg !27
  %221 = bitcast i32 %220 to float, !dbg !27
  %222 = fadd float %218, %221, !dbg !22
  %223 = bitcast float %222 to i32, !dbg !27
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 2, i32 31), !dbg !27
  %225 = bitcast i32 %224 to float, !dbg !27
  %226 = fadd float %222, %225, !dbg !22
  %227 = bitcast float %226 to i32, !dbg !27
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 1, i32 31), !dbg !27
  %229 = bitcast i32 %228 to float, !dbg !27
  %230 = fadd float %226, %229, !dbg !22
  %231 = bitcast float %132 to i32, !dbg !27
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 8, i32 31), !dbg !27
  %233 = bitcast i32 %232 to float, !dbg !27
  %234 = fadd float %132, %233, !dbg !22
  %235 = bitcast float %234 to i32, !dbg !27
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 4, i32 31), !dbg !27
  %237 = bitcast i32 %236 to float, !dbg !27
  %238 = fadd float %234, %237, !dbg !22
  %239 = bitcast float %238 to i32, !dbg !27
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 2, i32 31), !dbg !27
  %241 = bitcast i32 %240 to float, !dbg !27
  %242 = fadd float %238, %241, !dbg !22
  %243 = bitcast float %242 to i32, !dbg !27
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 1, i32 31), !dbg !27
  %245 = bitcast i32 %244 to float, !dbg !27
  %246 = fadd float %242, %245, !dbg !22
  %247 = bitcast float %134 to i32, !dbg !27
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 8, i32 31), !dbg !27
  %249 = bitcast i32 %248 to float, !dbg !27
  %250 = fadd float %134, %249, !dbg !22
  %251 = bitcast float %250 to i32, !dbg !27
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 4, i32 31), !dbg !27
  %253 = bitcast i32 %252 to float, !dbg !27
  %254 = fadd float %250, %253, !dbg !22
  %255 = bitcast float %254 to i32, !dbg !27
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 2, i32 31), !dbg !27
  %257 = bitcast i32 %256 to float, !dbg !27
  %258 = fadd float %254, %257, !dbg !22
  %259 = bitcast float %258 to i32, !dbg !27
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 1, i32 31), !dbg !27
  %261 = bitcast i32 %260 to float, !dbg !27
  %262 = fadd float %258, %261, !dbg !22
  %263 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !28
  %264 = bitcast float %150 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #3, !dbg !28
  %265 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !28
  %266 = bitcast float %166 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %266, i1 true) #3, !dbg !28
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !28
  %268 = bitcast float %182 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %268, i1 true) #3, !dbg !28
  %269 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !28
  %270 = bitcast float %198 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %270, i1 true) #3, !dbg !28
  %271 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !28
  %272 = bitcast float %214 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #3, !dbg !28
  %273 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !28
  %274 = bitcast float %230 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #3, !dbg !28
  %275 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !28
  %276 = bitcast float %246 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %276, i1 true) #3, !dbg !28
  %277 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !28
  %278 = bitcast float %262 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %277, <1 x i32> %278, i1 true) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %279 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !28
  %280 = load i32, ptr addrspace(3) %279, align 4, !dbg !28
  %281 = sext i32 %26 to i64, !dbg !29
  %282 = getelementptr float, ptr addrspace(1) %1, i64 %281, !dbg !29
  %283 = and i32 %7, 128, !dbg !30
  %284 = icmp eq i32 %283, 0, !dbg !30
  %285 = and i1 %284, %35, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %280, ptr addrspace(1) %282, i1 %285) #3, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvvgxulgtk3oumnutjpwqhnslrn3oxlpdvwzisfy6vo4yml5yp7c.py", directory: "inductor_cache/vv")
!4 = !{ptr @triton_per_fused_mv_24, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mv_24, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mv_24", linkageName: "triton_per_fused_mv_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 38, scope: !7)
!18 = !DILocation(line: 31, column: 35, scope: !7)
!19 = !DILocation(line: 31, column: 30, scope: !7)
!20 = !DILocation(line: 31, column: 51, scope: !7)
!21 = !DILocation(line: 31, column: 43, scope: !7)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !26)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!26 = !DILocation(line: 34, column: 24, scope: !7)
!27 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !26)
!28 = !DILocation(line: 34, column: 27, scope: !7)
!29 = !DILocation(line: 35, column: 25, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 4, scope: !7)
