; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_5(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 512, !dbg !13
  %11 = add i32 %9, -16640, !dbg !14
  %12 = add i32 %9, -16128, !dbg !14
  %13 = sext i32 %11 to i64, !dbg !15
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !15
  %15 = sext i32 %12 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = add i32 %9, -16384, !dbg !16
  %18 = add i32 %9, -15872, !dbg !16
  %19 = sext i32 %17 to i64, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !17
  %21 = sext i32 %18 to i64, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !17
  %23 = add i32 %9, -15616, !dbg !18
  %24 = sext i32 %23 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = add i32 %9, -256, !dbg !20
  %27 = sext i32 %26 to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !21
  %29 = sext i32 %10 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !21
  %31 = getelementptr i8, ptr addrspace(1) %30, i64 -1024, !dbg !21
  %32 = sext i32 %9 to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !22
  %34 = add i32 %9, 768, !dbg !23
  %35 = getelementptr i8, ptr addrspace(1) %33, i64 1024, !dbg !24
  %36 = sext i32 %34 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !24
  %38 = add i32 %9, 16128, !dbg !25
  %39 = add i32 %9, 16640, !dbg !25
  %40 = sext i32 %38 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !26
  %42 = sext i32 %39 to i64, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !26
  %44 = add i32 %9, 16384, !dbg !27
  %45 = add i32 %9, 16896, !dbg !27
  %46 = sext i32 %44 to i64, !dbg !28
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !28
  %48 = sext i32 %45 to i64, !dbg !28
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !28
  %50 = add i32 %9, 17152, !dbg !29
  %51 = sext i32 %50 to i64, !dbg !30
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !30
  %53 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !31
  %54 = shufflevector <2 x i32> %53, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !31
  %55 = sdiv <2 x i32> %54, <i32 256, i32 16384>, !dbg !31
  %56 = srem <2 x i32> %55, splat (i32 64), !dbg !32
  %57 = extractelement <2 x i32> %56, i64 1, !dbg !33
  %58 = icmp sgt i32 %57, 0, !dbg !34
  %59 = extractelement <2 x i32> %56, i64 0, !dbg !33
  %60 = icmp sgt i32 %59, 0, !dbg !35
  %61 = and i1 %58, %60, !dbg !36
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %14, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61) #1, !dbg !37
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !37
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !37
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !37
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !37
  %67 = bitcast i32 %63 to float, !dbg !37
  %68 = bitcast i32 %64 to float, !dbg !37
  %69 = bitcast i32 %65 to float, !dbg !37
  %70 = bitcast i32 %66 to float, !dbg !37
  %71 = icmp sgt i32 %59, -1, !dbg !38
  %72 = and i1 %58, %71, !dbg !39
  %73 = add nsw i32 %59, 1, !dbg !40
  %74 = icmp ult i32 %73, 64, !dbg !40
  %75 = and i1 %58, %74, !dbg !41
  %76 = icmp sgt i32 %57, -1, !dbg !42
  %77 = and i1 %76, %60, !dbg !43
  %78 = or i32 %57, %59, !dbg !44
  %79 = icmp sgt i32 %78, -1, !dbg !44
  %80 = and i1 %76, %74, !dbg !45
  %81 = add nsw i32 %57, 1, !dbg !46
  %82 = icmp ult i32 %81, 64, !dbg !46
  %83 = and i1 %60, %82, !dbg !47
  %84 = and i1 %71, %82, !dbg !48
  %85 = or i32 %81, %73, !dbg !49
  %86 = icmp ult i32 %85, 64, !dbg !49
  %87 = mul nsw i32 %59, %57, !dbg !50
  %88 = add nsw <2 x i32> %56, splat (i32 2), !dbg !51
  %89 = icmp sgt <2 x i32> %56, splat (i32 62), !dbg !52
  %90 = select <2 x i1> %89, <2 x i32> splat (i32 65), <2 x i32> zeroinitializer, !dbg !53
  %91 = icmp slt <2 x i32> %56, splat (i32 63), !dbg !54
  %92 = select <2 x i1> %91, <2 x i32> %88, <2 x i32> zeroinitializer, !dbg !55
  %93 = add nsw <2 x i32> %90, %92, !dbg !56
  %94 = extractelement <2 x i32> %93, i64 0, !dbg !57
  %95 = extractelement <2 x i32> %93, i64 1, !dbg !58
  %96 = mul nsw i32 %94, %95, !dbg !59
  %97 = shufflevector <2 x i32> %56, <2 x i32> poison, <2 x i32> <i32 1, i32 0>, !dbg !58
  %98 = mul nsw <2 x i32> %93, %97, !dbg !58
  %99 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !31
  %100 = shufflevector <2 x i32> %99, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !31
  %101 = sdiv <2 x i32> %100, <i32 256, i32 16384>, !dbg !31
  %102 = srem <2 x i32> %101, splat (i32 64), !dbg !32
  %103 = extractelement <2 x i32> %102, i64 1, !dbg !33
  %104 = icmp sgt i32 %103, 0, !dbg !34
  %105 = extractelement <2 x i32> %102, i64 0, !dbg !33
  %106 = icmp sgt i32 %105, 0, !dbg !35
  %107 = and i1 %104, %106, !dbg !36
  %108 = icmp sgt i32 %105, -1, !dbg !38
  %109 = and i1 %104, %108, !dbg !39
  %110 = add nsw i32 %105, 1, !dbg !40
  %111 = icmp ult i32 %110, 64, !dbg !40
  %112 = and i1 %104, %111, !dbg !41
  %113 = icmp sgt i32 %103, -1, !dbg !42
  %114 = and i1 %113, %106, !dbg !43
  %115 = or i32 %103, %105, !dbg !44
  %116 = icmp sgt i32 %115, -1, !dbg !44
  %117 = and i1 %113, %111, !dbg !45
  %118 = add nsw i32 %103, 1, !dbg !46
  %119 = icmp ult i32 %118, 64, !dbg !46
  %120 = and i1 %106, %119, !dbg !47
  %121 = and i1 %108, %119, !dbg !48
  %122 = or i32 %118, %110, !dbg !49
  %123 = icmp ult i32 %122, 64, !dbg !49
  %124 = mul nsw i32 %105, %103, !dbg !50
  %125 = add nsw <2 x i32> %102, splat (i32 2), !dbg !51
  %126 = icmp sgt <2 x i32> %102, splat (i32 62), !dbg !52
  %127 = select <2 x i1> %126, <2 x i32> splat (i32 65), <2 x i32> zeroinitializer, !dbg !53
  %128 = icmp slt <2 x i32> %102, splat (i32 63), !dbg !54
  %129 = select <2 x i1> %128, <2 x i32> %125, <2 x i32> zeroinitializer, !dbg !55
  %130 = add nsw <2 x i32> %127, %129, !dbg !56
  %131 = extractelement <2 x i32> %130, i64 0, !dbg !57
  %132 = extractelement <2 x i32> %130, i64 1, !dbg !58
  %133 = mul nsw i32 %131, %132, !dbg !59
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 %107, i32 0, i1 %107, i32 0, i1 %107, i32 0, i1 %107, i32 0, i1 %107) #1, !dbg !37
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !37
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !37
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !37
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !37
  %139 = bitcast i32 %135 to float, !dbg !37
  %140 = bitcast i32 %136 to float, !dbg !37
  %141 = bitcast i32 %137 to float, !dbg !37
  %142 = bitcast i32 %138 to float, !dbg !37
  %143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 %72, i32 0, i1 %72, i32 0, i1 %72, i32 0, i1 %72, i32 0, i1 %72) #1, !dbg !60
  %144 = extractvalue { i32, i32, i32, i32 } %143, 0, !dbg !60
  %145 = extractvalue { i32, i32, i32, i32 } %143, 1, !dbg !60
  %146 = extractvalue { i32, i32, i32, i32 } %143, 2, !dbg !60
  %147 = extractvalue { i32, i32, i32, i32 } %143, 3, !dbg !60
  %148 = bitcast i32 %144 to float, !dbg !60
  %149 = bitcast i32 %145 to float, !dbg !60
  %150 = bitcast i32 %146 to float, !dbg !60
  %151 = bitcast i32 %147 to float, !dbg !60
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %109, i32 0, i1 %109, i32 0, i1 %109, i32 0, i1 %109, i32 0, i1 %109) #1, !dbg !60
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !60
  %154 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !60
  %155 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !60
  %156 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !60
  %157 = bitcast i32 %153 to float, !dbg !60
  %158 = bitcast i32 %154 to float, !dbg !60
  %159 = bitcast i32 %155 to float, !dbg !60
  %160 = bitcast i32 %156 to float, !dbg !60
  %161 = fadd float %67, %148, !dbg !61
  %162 = fadd float %68, %149, !dbg !61
  %163 = fadd float %69, %150, !dbg !61
  %164 = fadd float %70, %151, !dbg !61
  %165 = fadd float %139, %157, !dbg !61
  %166 = fadd float %140, %158, !dbg !61
  %167 = fadd float %141, %159, !dbg !61
  %168 = fadd float %142, %160, !dbg !61
  %169 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #1, !dbg !62
  %170 = extractvalue { i32, i32, i32, i32 } %169, 0, !dbg !62
  %171 = extractvalue { i32, i32, i32, i32 } %169, 1, !dbg !62
  %172 = extractvalue { i32, i32, i32, i32 } %169, 2, !dbg !62
  %173 = extractvalue { i32, i32, i32, i32 } %169, 3, !dbg !62
  %174 = bitcast i32 %170 to float, !dbg !62
  %175 = bitcast i32 %171 to float, !dbg !62
  %176 = bitcast i32 %172 to float, !dbg !62
  %177 = bitcast i32 %173 to float, !dbg !62
  %178 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112) #1, !dbg !62
  %179 = extractvalue { i32, i32, i32, i32 } %178, 0, !dbg !62
  %180 = extractvalue { i32, i32, i32, i32 } %178, 1, !dbg !62
  %181 = extractvalue { i32, i32, i32, i32 } %178, 2, !dbg !62
  %182 = extractvalue { i32, i32, i32, i32 } %178, 3, !dbg !62
  %183 = bitcast i32 %179 to float, !dbg !62
  %184 = bitcast i32 %180 to float, !dbg !62
  %185 = bitcast i32 %181 to float, !dbg !62
  %186 = bitcast i32 %182 to float, !dbg !62
  %187 = fadd float %161, %174, !dbg !63
  %188 = fadd float %162, %175, !dbg !63
  %189 = fadd float %163, %176, !dbg !63
  %190 = fadd float %164, %177, !dbg !63
  %191 = fadd float %165, %183, !dbg !63
  %192 = fadd float %166, %184, !dbg !63
  %193 = fadd float %167, %185, !dbg !63
  %194 = fadd float %168, %186, !dbg !63
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %77, i32 0, i1 %77, i32 0, i1 %77, i32 0, i1 %77, i32 0, i1 %77) #1, !dbg !64
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !64
  %197 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !64
  %198 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !64
  %199 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !64
  %200 = bitcast i32 %196 to float, !dbg !64
  %201 = bitcast i32 %197 to float, !dbg !64
  %202 = bitcast i32 %198 to float, !dbg !64
  %203 = bitcast i32 %199 to float, !dbg !64
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %114, i32 0, i1 %114, i32 0, i1 %114, i32 0, i1 %114, i32 0, i1 %114) #1, !dbg !64
  %205 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !64
  %206 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !64
  %207 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !64
  %208 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !64
  %209 = bitcast i32 %205 to float, !dbg !64
  %210 = bitcast i32 %206 to float, !dbg !64
  %211 = bitcast i32 %207 to float, !dbg !64
  %212 = bitcast i32 %208 to float, !dbg !64
  %213 = fadd float %187, %200, !dbg !65
  %214 = fadd float %188, %201, !dbg !65
  %215 = fadd float %189, %202, !dbg !65
  %216 = fadd float %190, %203, !dbg !65
  %217 = fadd float %191, %209, !dbg !65
  %218 = fadd float %192, %210, !dbg !65
  %219 = fadd float %193, %211, !dbg !65
  %220 = fadd float %194, %212, !dbg !65
  %221 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %79, i32 0, i1 %79, i32 0, i1 %79, i32 0, i1 %79, i32 0, i1 %79) #1, !dbg !66
  %222 = extractvalue { i32, i32, i32, i32 } %221, 0, !dbg !66
  %223 = extractvalue { i32, i32, i32, i32 } %221, 1, !dbg !66
  %224 = extractvalue { i32, i32, i32, i32 } %221, 2, !dbg !66
  %225 = extractvalue { i32, i32, i32, i32 } %221, 3, !dbg !66
  %226 = bitcast i32 %222 to float, !dbg !66
  %227 = bitcast i32 %223 to float, !dbg !66
  %228 = bitcast i32 %224 to float, !dbg !66
  %229 = bitcast i32 %225 to float, !dbg !66
  %230 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %116, i32 0, i1 %116, i32 0, i1 %116, i32 0, i1 %116, i32 0, i1 %116) #1, !dbg !66
  %231 = extractvalue { i32, i32, i32, i32 } %230, 0, !dbg !66
  %232 = extractvalue { i32, i32, i32, i32 } %230, 1, !dbg !66
  %233 = extractvalue { i32, i32, i32, i32 } %230, 2, !dbg !66
  %234 = extractvalue { i32, i32, i32, i32 } %230, 3, !dbg !66
  %235 = bitcast i32 %231 to float, !dbg !66
  %236 = bitcast i32 %232 to float, !dbg !66
  %237 = bitcast i32 %233 to float, !dbg !66
  %238 = bitcast i32 %234 to float, !dbg !66
  %239 = fadd float %213, %226, !dbg !67
  %240 = fadd float %214, %227, !dbg !67
  %241 = fadd float %215, %228, !dbg !67
  %242 = fadd float %216, %229, !dbg !67
  %243 = fadd float %217, %235, !dbg !67
  %244 = fadd float %218, %236, !dbg !67
  %245 = fadd float %219, %237, !dbg !67
  %246 = fadd float %220, %238, !dbg !67
  %247 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %80, i32 0, i1 %80, i32 0, i1 %80, i32 0, i1 %80, i32 0, i1 %80) #1, !dbg !68
  %248 = extractvalue { i32, i32, i32, i32 } %247, 0, !dbg !68
  %249 = extractvalue { i32, i32, i32, i32 } %247, 1, !dbg !68
  %250 = extractvalue { i32, i32, i32, i32 } %247, 2, !dbg !68
  %251 = extractvalue { i32, i32, i32, i32 } %247, 3, !dbg !68
  %252 = bitcast i32 %248 to float, !dbg !68
  %253 = bitcast i32 %249 to float, !dbg !68
  %254 = bitcast i32 %250 to float, !dbg !68
  %255 = bitcast i32 %251 to float, !dbg !68
  %256 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %117, i32 0, i1 %117, i32 0, i1 %117, i32 0, i1 %117, i32 0, i1 %117) #1, !dbg !68
  %257 = extractvalue { i32, i32, i32, i32 } %256, 0, !dbg !68
  %258 = extractvalue { i32, i32, i32, i32 } %256, 1, !dbg !68
  %259 = extractvalue { i32, i32, i32, i32 } %256, 2, !dbg !68
  %260 = extractvalue { i32, i32, i32, i32 } %256, 3, !dbg !68
  %261 = bitcast i32 %257 to float, !dbg !68
  %262 = bitcast i32 %258 to float, !dbg !68
  %263 = bitcast i32 %259 to float, !dbg !68
  %264 = bitcast i32 %260 to float, !dbg !68
  %265 = fadd float %239, %252, !dbg !69
  %266 = fadd float %240, %253, !dbg !69
  %267 = fadd float %241, %254, !dbg !69
  %268 = fadd float %242, %255, !dbg !69
  %269 = fadd float %243, %261, !dbg !69
  %270 = fadd float %244, %262, !dbg !69
  %271 = fadd float %245, %263, !dbg !69
  %272 = fadd float %246, %264, !dbg !69
  %273 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %83, i32 0, i1 %83, i32 0, i1 %83, i32 0, i1 %83, i32 0, i1 %83) #1, !dbg !70
  %274 = extractvalue { i32, i32, i32, i32 } %273, 0, !dbg !70
  %275 = extractvalue { i32, i32, i32, i32 } %273, 1, !dbg !70
  %276 = extractvalue { i32, i32, i32, i32 } %273, 2, !dbg !70
  %277 = extractvalue { i32, i32, i32, i32 } %273, 3, !dbg !70
  %278 = bitcast i32 %274 to float, !dbg !70
  %279 = bitcast i32 %275 to float, !dbg !70
  %280 = bitcast i32 %276 to float, !dbg !70
  %281 = bitcast i32 %277 to float, !dbg !70
  %282 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #1, !dbg !70
  %283 = extractvalue { i32, i32, i32, i32 } %282, 0, !dbg !70
  %284 = extractvalue { i32, i32, i32, i32 } %282, 1, !dbg !70
  %285 = extractvalue { i32, i32, i32, i32 } %282, 2, !dbg !70
  %286 = extractvalue { i32, i32, i32, i32 } %282, 3, !dbg !70
  %287 = bitcast i32 %283 to float, !dbg !70
  %288 = bitcast i32 %284 to float, !dbg !70
  %289 = bitcast i32 %285 to float, !dbg !70
  %290 = bitcast i32 %286 to float, !dbg !70
  %291 = fadd float %265, %278, !dbg !71
  %292 = fadd float %266, %279, !dbg !71
  %293 = fadd float %267, %280, !dbg !71
  %294 = fadd float %268, %281, !dbg !71
  %295 = fadd float %269, %287, !dbg !71
  %296 = fadd float %270, %288, !dbg !71
  %297 = fadd float %271, %289, !dbg !71
  %298 = fadd float %272, %290, !dbg !71
  %299 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %47, i1 %84, i32 0, i1 %84, i32 0, i1 %84, i32 0, i1 %84, i32 0, i1 %84) #1, !dbg !72
  %300 = extractvalue { i32, i32, i32, i32 } %299, 0, !dbg !72
  %301 = extractvalue { i32, i32, i32, i32 } %299, 1, !dbg !72
  %302 = extractvalue { i32, i32, i32, i32 } %299, 2, !dbg !72
  %303 = extractvalue { i32, i32, i32, i32 } %299, 3, !dbg !72
  %304 = bitcast i32 %300 to float, !dbg !72
  %305 = bitcast i32 %301 to float, !dbg !72
  %306 = bitcast i32 %302 to float, !dbg !72
  %307 = bitcast i32 %303 to float, !dbg !72
  %308 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 %121, i32 0, i1 %121, i32 0, i1 %121, i32 0, i1 %121, i32 0, i1 %121) #1, !dbg !72
  %309 = extractvalue { i32, i32, i32, i32 } %308, 0, !dbg !72
  %310 = extractvalue { i32, i32, i32, i32 } %308, 1, !dbg !72
  %311 = extractvalue { i32, i32, i32, i32 } %308, 2, !dbg !72
  %312 = extractvalue { i32, i32, i32, i32 } %308, 3, !dbg !72
  %313 = bitcast i32 %309 to float, !dbg !72
  %314 = bitcast i32 %310 to float, !dbg !72
  %315 = bitcast i32 %311 to float, !dbg !72
  %316 = bitcast i32 %312 to float, !dbg !72
  %317 = fadd float %291, %304, !dbg !73
  %318 = fadd float %292, %305, !dbg !73
  %319 = fadd float %293, %306, !dbg !73
  %320 = fadd float %294, %307, !dbg !73
  %321 = fadd float %295, %313, !dbg !73
  %322 = fadd float %296, %314, !dbg !73
  %323 = fadd float %297, %315, !dbg !73
  %324 = fadd float %298, %316, !dbg !73
  %325 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86) #1, !dbg !74
  %326 = extractvalue { i32, i32, i32, i32 } %325, 0, !dbg !74
  %327 = extractvalue { i32, i32, i32, i32 } %325, 1, !dbg !74
  %328 = extractvalue { i32, i32, i32, i32 } %325, 2, !dbg !74
  %329 = extractvalue { i32, i32, i32, i32 } %325, 3, !dbg !74
  %330 = bitcast i32 %326 to float, !dbg !74
  %331 = bitcast i32 %327 to float, !dbg !74
  %332 = bitcast i32 %328 to float, !dbg !74
  %333 = bitcast i32 %329 to float, !dbg !74
  %334 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %123, i32 0, i1 %123, i32 0, i1 %123, i32 0, i1 %123, i32 0, i1 %123) #1, !dbg !74
  %335 = extractvalue { i32, i32, i32, i32 } %334, 0, !dbg !74
  %336 = extractvalue { i32, i32, i32, i32 } %334, 1, !dbg !74
  %337 = extractvalue { i32, i32, i32, i32 } %334, 2, !dbg !74
  %338 = extractvalue { i32, i32, i32, i32 } %334, 3, !dbg !74
  %339 = bitcast i32 %335 to float, !dbg !74
  %340 = bitcast i32 %336 to float, !dbg !74
  %341 = bitcast i32 %337 to float, !dbg !74
  %342 = bitcast i32 %338 to float, !dbg !74
  %343 = fadd float %317, %330, !dbg !75
  %344 = fadd float %318, %331, !dbg !75
  %345 = fadd float %319, %332, !dbg !75
  %346 = fadd float %320, %333, !dbg !75
  %347 = fadd float %321, %339, !dbg !75
  %348 = fadd float %322, %340, !dbg !75
  %349 = fadd float %323, %341, !dbg !75
  %350 = fadd float %324, %342, !dbg !75
  %351 = shufflevector <2 x i32> %102, <2 x i32> poison, <2 x i32> <i32 1, i32 0>, !dbg !58
  %352 = mul nsw <2 x i32> %130, %351, !dbg !58
  %shift = shufflevector <2 x i32> %98, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>
  %353 = add nsw <2 x i32> %shift, %98
  %reass.add = extractelement <2 x i32> %353, i64 0
  %354 = add nsw i32 %57, %59, !dbg !33
  %reass.sub15 = sub nsw i32 %87, %354, !dbg !33
  %355 = add nsw i32 %reass.sub15, 1, !dbg !33
  %356 = add nsw i32 %355, %94, !dbg !57
  %357 = add nsw i32 %356, %95, !dbg !58
  %358 = add nsw i32 %357, %96, !dbg !76
  %359 = sub nsw i32 %358, %reass.add, !dbg !77
  %shift16 = shufflevector <2 x i32> %352, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>
  %360 = add nsw <2 x i32> %shift16, %352
  %reass.add13 = extractelement <2 x i32> %360, i64 0
  %361 = add nsw i32 %103, %105, !dbg !33
  %reass.sub = sub nsw i32 %124, %361, !dbg !33
  %362 = add nsw i32 %reass.sub, 1, !dbg !33
  %363 = add nsw i32 %362, %131, !dbg !57
  %364 = add nsw i32 %363, %132, !dbg !58
  %365 = add nsw i32 %364, %133, !dbg !76
  %366 = sub nsw i32 %365, %reass.add13, !dbg !77
  %367 = sitofp i32 %359 to float, !dbg !78
  %368 = sitofp i32 %366 to float, !dbg !78
  %369 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %343, float %367) #1, !dbg !78
  %370 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %344, float %367) #1, !dbg !78
  %371 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %345, float %367) #1, !dbg !78
  %372 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %346, float %367) #1, !dbg !78
  %373 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %347, float %368) #1, !dbg !78
  %374 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %348, float %368) #1, !dbg !78
  %375 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %349, float %368) #1, !dbg !78
  %376 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %350, float %368) #1, !dbg !78
  %377 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !79
  %378 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !79
  %379 = bitcast float %369 to i32, !dbg !80
  %380 = bitcast float %370 to i32, !dbg !80
  %381 = bitcast float %371 to i32, !dbg !80
  %382 = bitcast float %372 to i32, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %379, i32 %380, i32 %381, i32 %382, ptr addrspace(1) %377, i1 true) #1, !dbg !80
  %383 = bitcast float %373 to i32, !dbg !80
  %384 = bitcast float %374 to i32, !dbg !80
  %385 = bitcast float %375 to i32, !dbg !80
  %386 = bitcast float %376 to i32, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %383, i32 %384, i32 %385, i32 %386, ptr addrspace(1) %378, i1 true) #1, !dbg !80
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdghrnvcrvavatvn5epy7ll6xtdg6x4pqflc7duvknojoeev57km.py", directory: "inductor_cache/dg")
!4 = !{ptr @triton_poi_fused_avg_pool2d_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_5", linkageName: "triton_poi_fused_avg_pool2d_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 38, column: 42, scope: !7)
!15 = !DILocation(line: 38, column: 31, scope: !7)
!16 = !DILocation(line: 44, column: 42, scope: !7)
!17 = !DILocation(line: 44, column: 31, scope: !7)
!18 = !DILocation(line: 51, column: 42, scope: !7)
!19 = !DILocation(line: 51, column: 31, scope: !7)
!20 = !DILocation(line: 58, column: 40, scope: !7)
!21 = !DILocation(line: 58, column: 31, scope: !7)
!22 = !DILocation(line: 61, column: 31, scope: !7)
!23 = !DILocation(line: 64, column: 37, scope: !7)
!24 = !DILocation(line: 64, column: 31, scope: !7)
!25 = !DILocation(line: 71, column: 39, scope: !7)
!26 = !DILocation(line: 71, column: 31, scope: !7)
!27 = !DILocation(line: 74, column: 39, scope: !7)
!28 = !DILocation(line: 74, column: 31, scope: !7)
!29 = !DILocation(line: 77, column: 39, scope: !7)
!30 = !DILocation(line: 77, column: 31, scope: !7)
!31 = !DILocation(line: 24, column: 21, scope: !7)
!32 = !DILocation(line: 24, column: 30, scope: !7)
!33 = !DILocation(line: 79, column: 40, scope: !7)
!34 = !DILocation(line: 29, column: 19, scope: !7)
!35 = !DILocation(line: 34, column: 19, scope: !7)
!36 = !DILocation(line: 37, column: 19, scope: !7)
!37 = !DILocation(line: 38, column: 47, scope: !7)
!38 = !DILocation(line: 40, column: 21, scope: !7)
!39 = !DILocation(line: 43, column: 19, scope: !7)
!40 = !DILocation(line: 49, column: 20, scope: !7)
!41 = !DILocation(line: 50, column: 19, scope: !7)
!42 = !DILocation(line: 54, column: 21, scope: !7)
!43 = !DILocation(line: 57, column: 20, scope: !7)
!44 = !DILocation(line: 60, column: 20, scope: !7)
!45 = !DILocation(line: 63, column: 20, scope: !7)
!46 = !DILocation(line: 69, column: 20, scope: !7)
!47 = !DILocation(line: 70, column: 20, scope: !7)
!48 = !DILocation(line: 73, column: 20, scope: !7)
!49 = !DILocation(line: 76, column: 20, scope: !7)
!50 = !DILocation(line: 79, column: 43, scope: !7)
!51 = !DILocation(line: 79, column: 129, scope: !7)
!52 = !DILocation(line: 79, column: 125, scope: !7)
!53 = !DILocation(line: 79, column: 116, scope: !7)
!54 = !DILocation(line: 79, column: 160, scope: !7)
!55 = !DILocation(line: 79, column: 148, scope: !7)
!56 = !DILocation(line: 79, column: 136, scope: !7)
!57 = !DILocation(line: 79, column: 48, scope: !7)
!58 = !DILocation(line: 79, column: 240, scope: !7)
!59 = !DILocation(line: 79, column: 108, scope: !7)
!60 = !DILocation(line: 44, column: 47, scope: !7)
!61 = !DILocation(line: 45, column: 20, scope: !7)
!62 = !DILocation(line: 51, column: 47, scope: !7)
!63 = !DILocation(line: 52, column: 20, scope: !7)
!64 = !DILocation(line: 58, column: 45, scope: !7)
!65 = !DILocation(line: 59, column: 20, scope: !7)
!66 = !DILocation(line: 61, column: 36, scope: !7)
!67 = !DILocation(line: 62, column: 20, scope: !7)
!68 = !DILocation(line: 64, column: 42, scope: !7)
!69 = !DILocation(line: 65, column: 20, scope: !7)
!70 = !DILocation(line: 71, column: 44, scope: !7)
!71 = !DILocation(line: 72, column: 20, scope: !7)
!72 = !DILocation(line: 74, column: 44, scope: !7)
!73 = !DILocation(line: 75, column: 20, scope: !7)
!74 = !DILocation(line: 77, column: 44, scope: !7)
!75 = !DILocation(line: 78, column: 20, scope: !7)
!76 = !DILocation(line: 79, column: 311, scope: !7)
!77 = !DILocation(line: 79, column: 372, scope: !7)
!78 = !DILocation(line: 80, column: 20, scope: !7)
!79 = !DILocation(line: 81, column: 25, scope: !7)
!80 = !DILocation(line: 81, column: 37, scope: !7)
!81 = !DILocation(line: 81, column: 4, scope: !7)
