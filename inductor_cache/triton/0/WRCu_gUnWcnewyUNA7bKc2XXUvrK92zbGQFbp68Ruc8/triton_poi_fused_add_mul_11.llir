; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_mul_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 3, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit11 = lshr i32 %11, 5, !dbg !12
  %12 = and i32 %.lobit11, 3, !dbg !12
  %13 = or disjoint i32 %12, 4, !dbg !12
  %14 = and i32 %11, 1, !dbg !12
  %15 = shl nuw nsw i32 %14, 2, !dbg !12
  %16 = or disjoint i32 %10, %12, !dbg !13
  %17 = or disjoint i32 %10, %13, !dbg !13
  %18 = or disjoint i32 %10, %15, !dbg !13
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %20 = shl i32 %19, 7, !dbg !15
  %21 = shl i32 %11, 2, !dbg !16
  %22 = and i32 %21, 124, !dbg !16
  %23 = lshr i32 %11, 1, !dbg !16
  %24 = and i32 %23, 15, !dbg !16
  %25 = lshr i32 %11, 1, !dbg !16
  %26 = and i32 %25, 16, !dbg !16
  %27 = lshr i32 %11, 1, !dbg !16
  %28 = and i32 %27, 32, !dbg !16
  %29 = or disjoint i32 %26, %24, !dbg !16
  %30 = or disjoint i32 %29, %28, !dbg !16
  %31 = or disjoint i32 %20, %22, !dbg !17
  %32 = or disjoint i32 %20, %30, !dbg !17
  %33 = or disjoint i32 %32, 64, !dbg !17
  %34 = icmp slt i32 %31, 128, !dbg !18
  %35 = icmp slt i32 %32, 128, !dbg !18
  %36 = icmp slt i32 %33, 128, !dbg !18
  %.frozen = freeze i32 %18, !dbg !19
  %37 = sdiv i32 %.frozen, 256, !dbg !19
  %38 = mul i32 %37, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %38, !dbg !20
  %39 = sdiv i32 %18, 16, !dbg !21
  %40 = srem i32 %39, 16, !dbg !22
  %41 = shl i32 %16, 7, !dbg !23
  %42 = shl i32 %17, 7, !dbg !23
  %43 = add i32 %31, %41, !dbg !24
  %44 = add i32 %31, %42, !dbg !24
  %45 = sext i32 %43 to i64, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !25
  %47 = sext i32 %44 to i64, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !25
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %34) #2, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !26
  %54 = bitcast i32 %50 to float, !dbg !26
  %55 = bitcast i32 %51 to float, !dbg !26
  %56 = bitcast i32 %52 to float, !dbg !26
  %57 = bitcast i32 %53 to float, !dbg !26
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %34) #2, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !26
  %63 = bitcast i32 %59 to float, !dbg !26
  %64 = bitcast i32 %60 to float, !dbg !26
  %65 = bitcast i32 %61 to float, !dbg !26
  %66 = bitcast i32 %62 to float, !dbg !26
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !27
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !27
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %34) #2, !dbg !28
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !28
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !28
  %74 = bitcast i32 %70 to float, !dbg !28
  %75 = bitcast i32 %71 to float, !dbg !28
  %76 = bitcast i32 %72 to float, !dbg !28
  %77 = bitcast i32 %73 to float, !dbg !28
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 %34) #2, !dbg !28
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !28
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !28
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !28
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !28
  %83 = bitcast i32 %79 to float, !dbg !28
  %84 = bitcast i32 %80 to float, !dbg !28
  %85 = bitcast i32 %81 to float, !dbg !28
  %86 = bitcast i32 %82 to float, !dbg !28
  %87 = shl i32 %32, 8, !dbg !29
  %88 = shl i32 %33, 8, !dbg !29
  %89 = shl i32 %37, 15, !dbg !30
  %90 = add i32 %89, %.decomposed, !dbg !31
  %91 = add i32 %90, %87, !dbg !32
  %92 = add i32 %90, %88, !dbg !32
  %93 = sext i32 %91 to i64, !dbg !33
  %94 = getelementptr float, ptr addrspace(1) %2, i64 %93, !dbg !33
  %95 = sext i32 %92 to i64, !dbg !33
  %96 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !33
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 %35) #2, !dbg !34
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !34
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !34
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !34
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !34
  %102 = bitcast i32 %98 to float, !dbg !34
  %103 = bitcast i32 %99 to float, !dbg !34
  %104 = bitcast i32 %100 to float, !dbg !34
  %105 = bitcast i32 %101 to float, !dbg !34
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 %36) #2, !dbg !34
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !34
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !34
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !34
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !34
  %111 = bitcast i32 %107 to float, !dbg !34
  %112 = bitcast i32 %108 to float, !dbg !34
  %113 = bitcast i32 %109 to float, !dbg !34
  %114 = bitcast i32 %110 to float, !dbg !34
  %115 = getelementptr float, ptr addrspace(1) %3, i64 %93, !dbg !35
  %116 = getelementptr float, ptr addrspace(1) %3, i64 %95, !dbg !35
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %115, i1 %35) #2, !dbg !36
  %118 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !36
  %119 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !36
  %120 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !36
  %121 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !36
  %122 = bitcast i32 %118 to float, !dbg !36
  %123 = bitcast i32 %119 to float, !dbg !36
  %124 = bitcast i32 %120 to float, !dbg !36
  %125 = bitcast i32 %121 to float, !dbg !36
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %116, i1 %36) #2, !dbg !36
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !36
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !36
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !36
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !36
  %131 = bitcast i32 %127 to float, !dbg !36
  %132 = bitcast i32 %128 to float, !dbg !36
  %133 = bitcast i32 %129 to float, !dbg !36
  %134 = bitcast i32 %130 to float, !dbg !36
  %135 = sext i32 %40 to i64, !dbg !37
  %136 = getelementptr float, ptr addrspace(1) %4, i64 %135, !dbg !37
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 true) #2, !dbg !38
  %138 = bitcast i32 %137 to float, !dbg !38
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 true) #2, !dbg !38
  %140 = bitcast i32 %139 to float, !dbg !38
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 true) #2, !dbg !38
  %142 = bitcast i32 %141 to float, !dbg !38
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 true) #2, !dbg !38
  %144 = bitcast i32 %143 to float, !dbg !38
  %145 = fmul float %54, %74, !dbg !39
  %146 = fmul float %55, %75, !dbg !39
  %147 = fmul float %56, %76, !dbg !39
  %148 = fmul float %57, %77, !dbg !39
  %149 = fmul float %63, %83, !dbg !39
  %150 = fmul float %64, %84, !dbg !39
  %151 = fmul float %65, %85, !dbg !39
  %152 = fmul float %66, %86, !dbg !39
  %153 = shl i32 %11, 5, !dbg !39
  %154 = and i32 %153, 992, !dbg !39
  %155 = or disjoint i32 %12, %154, !dbg !39
  %156 = and i32 %21, 508, !dbg !39
  %157 = lshr exact i32 %154, 1, !dbg !39
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %157, !dbg !39
  %159 = getelementptr inbounds float, ptr addrspace(3) %158, i32 %155, !dbg !39
  %160 = bitcast float %145 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #2, !dbg !39
  %161 = or disjoint i32 %155, 8, !dbg !39
  %162 = lshr i32 %161, 1, !dbg !39
  %163 = and i32 %162, 500, !dbg !39
  %164 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %163, !dbg !39
  %165 = getelementptr inbounds float, ptr addrspace(3) %164, i32 %161, !dbg !39
  %166 = bitcast float %146 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %166, i1 true) #2, !dbg !39
  %167 = or disjoint i32 %155, 16, !dbg !39
  %168 = lshr i32 %167, 1, !dbg !39
  %169 = and i32 %168, 504, !dbg !39
  %170 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %169, !dbg !39
  %171 = getelementptr inbounds float, ptr addrspace(3) %170, i32 %167, !dbg !39
  %172 = bitcast float %147 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %171, <1 x i32> %172, i1 true) #2, !dbg !39
  %173 = or disjoint i32 %155, 24, !dbg !39
  %174 = lshr i32 %173, 1, !dbg !39
  %175 = and i32 %174, 508, !dbg !39
  %176 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %175, !dbg !39
  %177 = getelementptr inbounds float, ptr addrspace(3) %176, i32 %173, !dbg !39
  %178 = bitcast float %148 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %178, i1 true) #2, !dbg !39
  %179 = or disjoint i32 %155, 4, !dbg !39
  %180 = getelementptr inbounds float, ptr addrspace(3) %158, i32 %179, !dbg !39
  %181 = bitcast float %149 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %181, i1 true) #2, !dbg !39
  %182 = or disjoint i32 %155, 12, !dbg !39
  %183 = lshr i32 %182, 1, !dbg !39
  %184 = and i32 %183, 500, !dbg !39
  %185 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %184, !dbg !39
  %186 = getelementptr inbounds float, ptr addrspace(3) %185, i32 %182, !dbg !39
  %187 = bitcast float %150 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %187, i1 true) #2, !dbg !39
  %188 = or disjoint i32 %155, 20, !dbg !39
  %189 = lshr i32 %188, 1, !dbg !39
  %190 = and i32 %189, 504, !dbg !39
  %191 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %190, !dbg !39
  %192 = getelementptr inbounds float, ptr addrspace(3) %191, i32 %188, !dbg !39
  %193 = bitcast float %151 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %193, i1 true) #2, !dbg !39
  %194 = or disjoint i32 %155, 28, !dbg !39
  %195 = lshr i32 %194, 1, !dbg !39
  %196 = and i32 %195, 508, !dbg !39
  %197 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %196, !dbg !39
  %198 = getelementptr inbounds float, ptr addrspace(3) %197, i32 %194, !dbg !39
  %199 = bitcast float %152 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %199, i1 true) #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %200 = lshr exact i32 %21, 1, !dbg !39
  %201 = and i32 %200, 252, !dbg !39
  %202 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %201, !dbg !39
  %203 = getelementptr inbounds float, ptr addrspace(3) %202, i32 %156, !dbg !39
  %204 = load float, ptr addrspace(3) %203, align 16, !dbg !39
  %205 = getelementptr inbounds i8, ptr addrspace(3) %203, i32 4, !dbg !39
  %206 = load float, ptr addrspace(3) %205, align 4, !dbg !39
  %207 = getelementptr inbounds i8, ptr addrspace(3) %203, i32 8, !dbg !39
  %208 = load float, ptr addrspace(3) %207, align 8, !dbg !39
  %209 = getelementptr inbounds i8, ptr addrspace(3) %203, i32 12, !dbg !39
  %210 = load float, ptr addrspace(3) %209, align 4, !dbg !39
  %211 = or disjoint i32 %156, 512, !dbg !39
  %212 = lshr exact i32 %211, 1, !dbg !39
  %213 = and i32 %212, 508, !dbg !39
  %214 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %213, !dbg !39
  %215 = getelementptr inbounds float, ptr addrspace(3) %214, i32 %211, !dbg !39
  %216 = load float, ptr addrspace(3) %215, align 16, !dbg !39
  %217 = getelementptr inbounds i8, ptr addrspace(3) %215, i32 4, !dbg !39
  %218 = load float, ptr addrspace(3) %217, align 4, !dbg !39
  %219 = getelementptr inbounds i8, ptr addrspace(3) %215, i32 8, !dbg !39
  %220 = load float, ptr addrspace(3) %219, align 8, !dbg !39
  %221 = getelementptr inbounds i8, ptr addrspace(3) %215, i32 12, !dbg !39
  %222 = load float, ptr addrspace(3) %221, align 4, !dbg !39
  %223 = fmul float %122, %138, !dbg !40
  %224 = fmul float %123, %140, !dbg !40
  %225 = fmul float %124, %142, !dbg !40
  %226 = fmul float %125, %144, !dbg !40
  %227 = fmul float %131, %138, !dbg !40
  %228 = fmul float %132, %140, !dbg !40
  %229 = fmul float %133, %142, !dbg !40
  %230 = fmul float %134, %144, !dbg !40
  %231 = fadd float %223, %102, !dbg !41
  %232 = fadd float %224, %103, !dbg !41
  %233 = fadd float %225, %104, !dbg !41
  %234 = fadd float %226, %105, !dbg !41
  %235 = fadd float %227, %111, !dbg !41
  %236 = fadd float %228, %112, !dbg !41
  %237 = fadd float %229, %113, !dbg !41
  %238 = fadd float %230, %114, !dbg !41
  %239 = fadd float %231, %204, !dbg !42
  %240 = fadd float %232, %206, !dbg !42
  %241 = fadd float %233, %208, !dbg !42
  %242 = fadd float %234, %210, !dbg !42
  %243 = fadd float %235, %216, !dbg !42
  %244 = fadd float %236, %218, !dbg !42
  %245 = fadd float %237, %220, !dbg !42
  %246 = fadd float %238, %222, !dbg !42
  %247 = getelementptr float, ptr addrspace(1) %5, i64 %45, !dbg !43
  %248 = getelementptr float, ptr addrspace(1) %5, i64 %47, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %249 = shl nuw nsw i32 %14, 9, !dbg !44
  %250 = or disjoint i32 %249, %24, !dbg !44
  %251 = or disjoint i32 %250, %26, !dbg !44
  %252 = or disjoint i32 %251, %28, !dbg !44
  %.idx = shl nuw nsw i32 %14, 4, !dbg !44
  %253 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !44
  %254 = getelementptr float, ptr addrspace(3) %253, i32 %252, !dbg !44
  %255 = bitcast float %239 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %255, i1 true) #2, !dbg !44
  %256 = or disjoint i32 %252, 128, !dbg !44
  %257 = lshr i32 %256, 7, !dbg !44
  %258 = getelementptr float, ptr addrspace(3) @global_smem, i32 %257, !dbg !44
  %259 = getelementptr float, ptr addrspace(3) %258, i32 %256, !dbg !44
  %260 = bitcast float %240 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %260, i1 true) #2, !dbg !44
  %261 = or disjoint i32 %252, 256, !dbg !44
  %262 = lshr i32 %261, 7, !dbg !44
  %263 = getelementptr float, ptr addrspace(3) @global_smem, i32 %262, !dbg !44
  %264 = getelementptr float, ptr addrspace(3) %263, i32 %261, !dbg !44
  %265 = bitcast float %241 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %265, i1 true) #2, !dbg !44
  %266 = or disjoint i32 %252, 384, !dbg !44
  %267 = lshr i32 %266, 7, !dbg !44
  %268 = getelementptr float, ptr addrspace(3) @global_smem, i32 %267, !dbg !44
  %269 = getelementptr float, ptr addrspace(3) %268, i32 %266, !dbg !44
  %270 = bitcast float %242 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %270, i1 true) #2, !dbg !44
  %271 = or disjoint i32 %252, 64, !dbg !44
  %272 = getelementptr float, ptr addrspace(3) %253, i32 %271, !dbg !44
  %273 = bitcast float %243 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %272, <1 x i32> %273, i1 true) #2, !dbg !44
  %274 = or disjoint i32 %252, 192, !dbg !44
  %275 = lshr i32 %274, 7, !dbg !44
  %276 = getelementptr float, ptr addrspace(3) @global_smem, i32 %275, !dbg !44
  %277 = getelementptr float, ptr addrspace(3) %276, i32 %274, !dbg !44
  %278 = bitcast float %244 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %277, <1 x i32> %278, i1 true) #2, !dbg !44
  %279 = or disjoint i32 %252, 320, !dbg !44
  %280 = lshr i32 %279, 7, !dbg !44
  %281 = getelementptr float, ptr addrspace(3) @global_smem, i32 %280, !dbg !44
  %282 = getelementptr float, ptr addrspace(3) %281, i32 %279, !dbg !44
  %283 = bitcast float %245 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %283, i1 true) #2, !dbg !44
  %284 = or disjoint i32 %252, 448, !dbg !44
  %285 = lshr i32 %284, 7, !dbg !44
  %286 = getelementptr float, ptr addrspace(3) @global_smem, i32 %285, !dbg !44
  %287 = getelementptr float, ptr addrspace(3) %286, i32 %284, !dbg !44
  %288 = bitcast float %246 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, <1 x i32> %288, i1 true) #2, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %289 = lshr i32 %156, 7, !dbg !44
  %290 = or disjoint i32 %289, %156, !dbg !44
  %291 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %290, !dbg !44
  %292 = load i32, ptr addrspace(3) %291, align 4, !dbg !44
  %293 = or disjoint i32 %156, 1, !dbg !44
  %294 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %289, !dbg !44
  %295 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %293, !dbg !44
  %296 = load i32, ptr addrspace(3) %295, align 4, !dbg !44
  %297 = or disjoint i32 %156, 2, !dbg !44
  %298 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %297, !dbg !44
  %299 = load i32, ptr addrspace(3) %298, align 4, !dbg !44
  %300 = or disjoint i32 %156, 3, !dbg !44
  %301 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %300, !dbg !44
  %302 = load i32, ptr addrspace(3) %301, align 4, !dbg !44
  %303 = lshr i32 %211, 7, !dbg !44
  %304 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %303, !dbg !44
  %305 = getelementptr inbounds float, ptr addrspace(3) %304, i32 %211, !dbg !44
  %306 = load i32, ptr addrspace(3) %305, align 4, !dbg !44
  %307 = or disjoint i32 %156, 513, !dbg !44
  %308 = lshr i32 %307, 7, !dbg !44
  %309 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %308, !dbg !44
  %310 = getelementptr inbounds float, ptr addrspace(3) %309, i32 %307, !dbg !44
  %311 = load i32, ptr addrspace(3) %310, align 4, !dbg !44
  %312 = or disjoint i32 %156, 514, !dbg !44
  %313 = lshr i32 %312, 7, !dbg !44
  %314 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %313, !dbg !44
  %315 = getelementptr inbounds float, ptr addrspace(3) %314, i32 %312, !dbg !44
  %316 = load i32, ptr addrspace(3) %315, align 4, !dbg !44
  %317 = or disjoint i32 %156, 515, !dbg !44
  %318 = lshr i32 %317, 7, !dbg !44
  %319 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %318, !dbg !44
  %320 = getelementptr inbounds float, ptr addrspace(3) %319, i32 %317, !dbg !44
  %321 = load i32, ptr addrspace(3) %320, align 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %292, i32 %296, i32 %299, i32 %302, ptr addrspace(1) %247, i1 %34) #2, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %306, i32 %311, i32 %316, i32 %321, ptr addrspace(1) %248, i1 %34) #2, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjp3nejrw3berdc4jtalvvuvyiounrucgcf5gdphvissk4u26rjo.py", directory: "inductor_cache/jp")
!4 = !{ptr @triton_poi_fused_add_mul_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_11", linkageName: "triton_poi_fused_add_mul_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 21, scope: !7)
!22 = !DILocation(line: 32, column: 27, scope: !7)
!23 = !DILocation(line: 33, column: 39, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 44, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 44, scope: !7)
!29 = !DILocation(line: 35, column: 39, scope: !7)
!30 = !DILocation(line: 35, column: 50, scope: !7)
!31 = !DILocation(line: 35, column: 35, scope: !7)
!32 = !DILocation(line: 35, column: 44, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 55, scope: !7)
!35 = !DILocation(line: 36, column: 30, scope: !7)
!36 = !DILocation(line: 36, column: 55, scope: !7)
!37 = !DILocation(line: 37, column: 30, scope: !7)
!38 = !DILocation(line: 37, column: 35, scope: !7)
!39 = !DILocation(line: 38, column: 18, scope: !7)
!40 = !DILocation(line: 39, column: 18, scope: !7)
!41 = !DILocation(line: 40, column: 18, scope: !7)
!42 = !DILocation(line: 41, column: 18, scope: !7)
!43 = !DILocation(line: 42, column: 25, scope: !7)
!44 = !DILocation(line: 42, column: 45, scope: !7)
!45 = !DILocation(line: 42, column: 4, scope: !7)
