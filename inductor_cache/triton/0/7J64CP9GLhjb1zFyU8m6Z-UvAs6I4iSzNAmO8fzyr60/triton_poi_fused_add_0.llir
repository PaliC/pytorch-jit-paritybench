; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 512, !dbg !13
  %11 = sext i32 %9 to i64, !dbg !14
  %12 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !14
  %13 = sext i32 %10 to i64, !dbg !14
  %14 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !14
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %12, i1 true) #1, !dbg !15
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0, !dbg !15
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1, !dbg !15
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3, !dbg !15
  %20 = bitcast i32 %16 to float, !dbg !15
  %21 = bitcast i32 %17 to float, !dbg !15
  %22 = bitcast i32 %18 to float, !dbg !15
  %23 = bitcast i32 %19 to float, !dbg !15
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %14, i1 true) #1, !dbg !15
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !15
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !15
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !15
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !15
  %29 = bitcast i32 %25 to float, !dbg !15
  %30 = bitcast i32 %26 to float, !dbg !15
  %31 = bitcast i32 %27 to float, !dbg !15
  %32 = bitcast i32 %28 to float, !dbg !15
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %11, !dbg !16
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !16
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !17
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !17
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !17
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !17
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !17
  %40 = bitcast i32 %36 to float, !dbg !17
  %41 = bitcast i32 %37 to float, !dbg !17
  %42 = bitcast i32 %38 to float, !dbg !17
  %43 = bitcast i32 %39 to float, !dbg !17
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !17
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !17
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !17
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !17
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !17
  %49 = bitcast i32 %45 to float, !dbg !17
  %50 = bitcast i32 %46 to float, !dbg !17
  %51 = bitcast i32 %47 to float, !dbg !17
  %52 = bitcast i32 %48 to float, !dbg !17
  %53 = fadd float %20, %40, !dbg !18
  %54 = fadd float %21, %41, !dbg !18
  %55 = fadd float %22, %42, !dbg !18
  %56 = fadd float %23, %43, !dbg !18
  %57 = fadd float %29, %49, !dbg !18
  %58 = fadd float %30, %50, !dbg !18
  %59 = fadd float %31, %51, !dbg !18
  %60 = fadd float %32, %52, !dbg !18
  %61 = bitcast float %53 to i32, !dbg !19
  %62 = bitcast float %54 to i32, !dbg !19
  %63 = bitcast float %55 to i32, !dbg !19
  %64 = bitcast float %56 to i32, !dbg !19
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %61, i32 %62, i32 %63, i32 %64, ptr addrspace(1) %33, i1 true) #1, !dbg !19
  %65 = bitcast float %57 to i32, !dbg !19
  %66 = bitcast float %58 to i32, !dbg !19
  %67 = bitcast float %59 to i32, !dbg !19
  %68 = bitcast float %60 to i32, !dbg !19
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %65, i32 %66, i32 %67, i32 %68, ptr addrspace(1) %34, i1 true) #1, !dbg !19
  ret void, !dbg !20
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbol6kmkhdzwkntbee3wxnrbpetxgorlwntotzwbfw7hwycwiuyd.py", directory: "inductor_cache/bo")
!4 = !{ptr @triton_poi_fused_add_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_0", linkageName: "triton_poi_fused_add_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 30, scope: !7)
!15 = !DILocation(line: 25, column: 35, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 18, scope: !7)
!19 = !DILocation(line: 28, column: 39, scope: !7)
!20 = !DILocation(line: 28, column: 4, scope: !7)
