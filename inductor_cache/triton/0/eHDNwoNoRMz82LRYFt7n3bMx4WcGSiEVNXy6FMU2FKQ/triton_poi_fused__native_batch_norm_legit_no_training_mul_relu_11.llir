; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 8, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 1, !dbg !12
  %18 = and i32 %17, 254, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = sdiv i32 %19, 256, !dbg !14
  %21 = srem i32 %20, 64, !dbg !15
  %22 = sext i32 %19 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !16
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !17
  %25 = sext i32 %20 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !18
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !19
  %28 = bitcast i32 %27 to float, !dbg !19
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !19
  %30 = bitcast i32 %29 to float, !dbg !19
  %31 = sext i32 %21 to i64, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !20
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !21
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !23
  %37 = bitcast i32 %36 to float, !dbg !23
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !23
  %39 = bitcast i32 %38 to float, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !24
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !25
  %43 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !26
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !27
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !27
  %46 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !28
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !29
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !29
  %49 = getelementptr float, ptr addrspace(1) %7, i64 %31, !dbg !30
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !31
  %51 = bitcast i32 %50 to float, !dbg !31
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !31
  %53 = bitcast i32 %52 to float, !dbg !31
  %54 = getelementptr float, ptr addrspace(1) %8, i64 %31, !dbg !32
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !33
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !33
  %57 = getelementptr float, ptr addrspace(1) %9, i64 %31, !dbg !34
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !35
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !35
  %60 = fsub float 0.000000e+00, %28, !dbg !36
  %61 = fsub float 0.000000e+00, %30, !dbg !36
  %62 = fmul float %60, 0x3FF7154760000000, !dbg !40
  %63 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %62) #3, !dbg !40
  %64 = fmul float %61, 0x3FF7154760000000, !dbg !40
  %65 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %64) #3, !dbg !40
  %66 = fadd float %63, 1.000000e+00, !dbg !41
  %67 = fadd float %65, 1.000000e+00, !dbg !41
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %66) #3, !dbg !42
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %67) #3, !dbg !42
  %70 = fadd float %37, 0x3EE4F8B580000000, !dbg !43
  %71 = fadd float %39, 0x3EE4F8B580000000, !dbg !43
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i = icmp eq i32 %72, 0, !dbg !44
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i = icmp eq i32 %73, 0, !dbg !44
  br i1 %.not.i, label %79, label %74, !dbg !44

74:                                               ; preds = %13
  br i1 %.not1.i, label %77, label %75, !dbg !44

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

79:                                               ; preds = %13
  br i1 %.not1.i, label %82, label %80, !dbg !44

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

__nv_sqrtf.exit:                                  ; preds = %75, %77, %80, %82
  %.0.i = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !44
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i1 = icmp eq i32 %84, 0, !dbg !44
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i4 = icmp eq i32 %85, 0, !dbg !44
  br i1 %.not.i1, label %91, label %86, !dbg !44

86:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %89, label %87, !dbg !44

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %94, label %92, !dbg !44

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

__nv_sqrtf.exit5:                                 ; preds = %87, %89, %92, %94
  %.0.i3 = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !44
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !45
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !45
  %98 = fadd float %51, 0x3EE4F8B580000000, !dbg !46
  %99 = fadd float %53, 0x3EE4F8B580000000, !dbg !46
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i6 = icmp eq i32 %100, 0, !dbg !47
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i9 = icmp eq i32 %101, 0, !dbg !47
  br i1 %.not.i6, label %107, label %102, !dbg !47

102:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %105, label %103, !dbg !47

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %98) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %98) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

107:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %110, label %108, !dbg !47

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %98) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %98) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

__nv_sqrtf.exit10:                                ; preds = %103, %105, %108, %110
  %.0.i8 = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !47
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i11 = icmp eq i32 %112, 0, !dbg !47
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i14 = icmp eq i32 %113, 0, !dbg !47
  br i1 %.not.i11, label %119, label %114, !dbg !47

114:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %117, label %115, !dbg !47

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

119:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %122, label %120, !dbg !47

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

__nv_sqrtf.exit15:                                ; preds = %115, %117, %120, %122
  %.0.i13 = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !47
  %124 = extractvalue { i32, i32 } %24, 1, !dbg !17
  %125 = insertelement <4 x i32> poison, i32 %48, i64 0, !dbg !29
  %126 = insertelement <4 x i32> %125, i32 %47, i64 1, !dbg !29
  %127 = insertelement <4 x i32> %126, i32 %33, i64 2, !dbg !29
  %128 = insertelement <4 x i32> %127, i32 %34, i64 3, !dbg !29
  %129 = bitcast <4 x i32> %128 to <4 x float>, !dbg !29
  %130 = extractvalue { i32, i32 } %24, 0, !dbg !17
  %131 = insertelement <4 x i32> poison, i32 %56, i64 0, !dbg !33
  %132 = insertelement <4 x i32> %131, i32 %55, i64 1, !dbg !33
  %133 = insertelement <4 x i32> %132, i32 %41, i64 2, !dbg !33
  %134 = insertelement <4 x i32> %133, i32 %42, i64 3, !dbg !33
  %135 = bitcast <4 x i32> %134 to <4 x float>, !dbg !33
  %136 = insertelement <4 x i32> poison, i32 %59, i64 0, !dbg !35
  %137 = insertelement <4 x i32> %136, i32 %58, i64 1, !dbg !35
  %138 = insertelement <4 x i32> %137, i32 %44, i64 2, !dbg !35
  %139 = insertelement <4 x i32> %138, i32 %45, i64 3, !dbg !35
  %140 = bitcast <4 x i32> %139 to <4 x float>, !dbg !35
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !48
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !48
  %143 = insertelement <2 x i32> poison, i32 %124, i64 0, !dbg !17
  %144 = insertelement <2 x i32> %143, i32 %130, i64 1, !dbg !17
  %145 = bitcast <2 x i32> %144 to <2 x float>, !dbg !17
  %146 = insertelement <2 x float> poison, float %69, i64 0, !dbg !49
  %147 = insertelement <2 x float> %146, float %68, i64 1, !dbg !49
  %148 = fmul <2 x float> %147, %145, !dbg !49
  %149 = shufflevector <2 x float> %148, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 0>, !dbg !49
  %150 = fsub <4 x float> %149, %129, !dbg !50
  %151 = insertelement <4 x float> poison, float %142, i64 0, !dbg !51
  %152 = insertelement <4 x float> %151, float %141, i64 1, !dbg !51
  %153 = insertelement <4 x float> %152, float %96, i64 2, !dbg !51
  %154 = insertelement <4 x float> %153, float %97, i64 3, !dbg !51
  %155 = fmul <4 x float> %150, %154, !dbg !51
  %156 = fmul <4 x float> %155, %135, !dbg !52
  %157 = fadd <4 x float> %156, %140, !dbg !53
  %158 = fcmp olt <4 x float> %157, zeroinitializer, !dbg !54
  %159 = extractelement <4 x i1> %158, i64 3, !dbg !58
  %160 = extractelement <4 x i1> %158, i64 2, !dbg !58
  %161 = extractelement <4 x i1> %158, i64 1, !dbg !60
  %162 = extractelement <4 x i1> %158, i64 0, !dbg !60
  %bc = bitcast <2 x float> %148 to <2 x i32>, !dbg !61
  %163 = extractelement <2 x i32> %bc, i64 1, !dbg !61
  %bc16 = bitcast <2 x float> %148 to <2 x i32>, !dbg !61
  %164 = extractelement <2 x i32> %bc16, i64 0, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %163, i32 %164, ptr addrspace(1) %23, i1 true) #3, !dbg !61
  %165 = getelementptr float, ptr addrspace(1) %10, i64 %22, !dbg !62
  %bc17 = bitcast <4 x float> %157 to <4 x i32>, !dbg !63
  %166 = extractelement <4 x i32> %bc17, i64 2, !dbg !63
  %167 = select i1 %160, i32 0, i32 %166, !dbg !58
  %bc18 = bitcast <4 x float> %157 to <4 x i32>, !dbg !63
  %168 = extractelement <4 x i32> %bc18, i64 3, !dbg !63
  %169 = select i1 %159, i32 0, i32 %168, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %167, i32 %169, ptr addrspace(1) %165, i1 true) #3, !dbg !63
  %170 = getelementptr float, ptr addrspace(1) %11, i64 %22, !dbg !64
  %bc19 = bitcast <4 x float> %157 to <4 x i32>, !dbg !65
  %171 = extractelement <4 x i32> %bc19, i64 1, !dbg !65
  %172 = select i1 %161, i32 0, i32 %171, !dbg !60
  %bc20 = bitcast <4 x float> %157 to <4 x i32>, !dbg !65
  %173 = extractelement <4 x i32> %bc20, i64 0, !dbg !65
  %174 = select i1 %162, i32 0, i32 %173, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %172, i32 %174, ptr addrspace(1) %170, i1 true) #3, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpnc6f3drtd5h7ah6qgtt7qnuqinesq6vnipzyjov2ktqn45xlv5.py", directory: "inductor_cache/pn")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 34, scope: !7)
!17 = !DILocation(line: 27, column: 39, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 47, column: 30, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!39 = !DILocation(line: 37, column: 22, scope: !7)
!40 = !DILocation(line: 47, column: 29, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 47, column: 20, scope: !37, inlinedAt: !39)
!42 = !DILocation(line: 47, column: 16, scope: !37, inlinedAt: !39)
!43 = !DILocation(line: 41, column: 18, scope: !7)
!44 = !DILocation(line: 42, column: 26, scope: !7)
!45 = !DILocation(line: 44, column: 20, scope: !7)
!46 = !DILocation(line: 53, column: 20, scope: !7)
!47 = !DILocation(line: 54, column: 27, scope: !7)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 38, column: 18, scope: !7)
!50 = !DILocation(line: 52, column: 19, scope: !7)
!51 = !DILocation(line: 57, column: 20, scope: !7)
!52 = !DILocation(line: 58, column: 20, scope: !7)
!53 = !DILocation(line: 59, column: 20, scope: !7)
!54 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !57)
!55 = distinct !DILexicalBlockFile(scope: !7, file: !56, discriminator: 0)
!56 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!57 = !DILocation(line: 60, column: 42, scope: !7)
!58 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !59)
!59 = !DILocation(line: 51, column: 42, scope: !7)
!60 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !57)
!61 = !DILocation(line: 61, column: 39, scope: !7)
!62 = !DILocation(line: 62, column: 25, scope: !7)
!63 = !DILocation(line: 62, column: 37, scope: !7)
!64 = !DILocation(line: 63, column: 25, scope: !7)
!65 = !DILocation(line: 63, column: 37, scope: !7)
!66 = !DILocation(line: 63, column: 4, scope: !7)
