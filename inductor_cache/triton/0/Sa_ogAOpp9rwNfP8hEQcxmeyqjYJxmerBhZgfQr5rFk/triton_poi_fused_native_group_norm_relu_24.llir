; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_native_group_norm_relu_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 512, !dbg !13
  %15 = sdiv i32 %13, 4096, !dbg !14
  %16 = sdiv i32 %14, 4096, !dbg !14
  %17 = srem i32 %15, 256, !dbg !15
  %18 = srem i32 %16, 256, !dbg !15
  %.frozen = freeze i32 %13, !dbg !16
  %19 = sdiv i32 %.frozen, 1048576, !dbg !16
  %.frozen8 = freeze i32 %14, !dbg !16
  %20 = sdiv i32 %.frozen8, 1048576, !dbg !16
  %21 = mul i32 %19, 1048576, !dbg !17
  %.decomposed = sub i32 %.frozen, %21, !dbg !17
  %22 = mul i32 %20, 1048576, !dbg !17
  %.decomposed9 = sub i32 %.frozen8, %22, !dbg !17
  %23 = sext i32 %13 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !18
  %25 = sext i32 %14 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !18
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !19
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !19
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !19
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !19
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !19
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !19
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !19
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !19
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !19
  %37 = sdiv i32 %13, 131072, !dbg !20
  %38 = sdiv i32 %14, 131072, !dbg !20
  %39 = sext i32 %37 to i64, !dbg !21
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !21
  %41 = sext i32 %38 to i64, !dbg !21
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !21
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !22
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !22
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !22
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !22
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !22
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !22
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !22
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !22
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !23
  %52 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !23
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !24
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !24
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !24
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !24
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !24
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !24
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !24
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !24
  %61 = sext i32 %17 to i64, !dbg !25
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !25
  %63 = sext i32 %18 to i64, !dbg !25
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %63, !dbg !25
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !26
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !26
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !26
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !26
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !26
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !26
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !26
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !26
  %73 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !27
  %74 = getelementptr float, ptr addrspace(1) %4, i64 %63, !dbg !27
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !28
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !28
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !28
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !28
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !28
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !28
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !28
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !28
  %83 = insertelement <8 x i32> poison, i32 %36, i64 0, !dbg !19
  %84 = insertelement <8 x i32> %83, i32 %35, i64 1, !dbg !19
  %85 = insertelement <8 x i32> %84, i32 %34, i64 2, !dbg !19
  %86 = insertelement <8 x i32> %85, i32 %33, i64 3, !dbg !19
  %87 = insertelement <8 x i32> %86, i32 %31, i64 4, !dbg !19
  %88 = insertelement <8 x i32> %87, i32 %30, i64 5, !dbg !19
  %89 = insertelement <8 x i32> %88, i32 %29, i64 6, !dbg !19
  %90 = insertelement <8 x i32> %89, i32 %28, i64 7, !dbg !19
  %91 = bitcast <8 x i32> %90 to <8 x float>, !dbg !19
  %92 = insertelement <8 x i32> poison, i32 %50, i64 0, !dbg !22
  %93 = insertelement <8 x i32> %92, i32 %49, i64 1, !dbg !22
  %94 = insertelement <8 x i32> %93, i32 %48, i64 2, !dbg !22
  %95 = insertelement <8 x i32> %94, i32 %47, i64 3, !dbg !22
  %96 = insertelement <8 x i32> %95, i32 %46, i64 4, !dbg !22
  %97 = insertelement <8 x i32> %96, i32 %45, i64 5, !dbg !22
  %98 = insertelement <8 x i32> %97, i32 %44, i64 6, !dbg !22
  %99 = insertelement <8 x i32> %98, i32 %43, i64 7, !dbg !22
  %100 = bitcast <8 x i32> %99 to <8 x float>, !dbg !22
  %101 = insertelement <8 x i32> poison, i32 %60, i64 0, !dbg !24
  %102 = insertelement <8 x i32> %101, i32 %59, i64 1, !dbg !24
  %103 = insertelement <8 x i32> %102, i32 %58, i64 2, !dbg !24
  %104 = insertelement <8 x i32> %103, i32 %57, i64 3, !dbg !24
  %105 = insertelement <8 x i32> %104, i32 %56, i64 4, !dbg !24
  %106 = insertelement <8 x i32> %105, i32 %55, i64 5, !dbg !24
  %107 = insertelement <8 x i32> %106, i32 %54, i64 6, !dbg !24
  %108 = insertelement <8 x i32> %107, i32 %53, i64 7, !dbg !24
  %109 = bitcast <8 x i32> %108 to <8 x float>, !dbg !24
  %110 = insertelement <8 x i32> poison, i32 %72, i64 0, !dbg !26
  %111 = insertelement <8 x i32> %110, i32 %71, i64 1, !dbg !26
  %112 = insertelement <8 x i32> %111, i32 %70, i64 2, !dbg !26
  %113 = insertelement <8 x i32> %112, i32 %69, i64 3, !dbg !26
  %114 = insertelement <8 x i32> %113, i32 %68, i64 4, !dbg !26
  %115 = insertelement <8 x i32> %114, i32 %67, i64 5, !dbg !26
  %116 = insertelement <8 x i32> %115, i32 %66, i64 6, !dbg !26
  %117 = insertelement <8 x i32> %116, i32 %65, i64 7, !dbg !26
  %118 = bitcast <8 x i32> %117 to <8 x float>, !dbg !26
  %119 = insertelement <8 x i32> poison, i32 %82, i64 0, !dbg !28
  %120 = insertelement <8 x i32> %119, i32 %81, i64 1, !dbg !28
  %121 = insertelement <8 x i32> %120, i32 %80, i64 2, !dbg !28
  %122 = insertelement <8 x i32> %121, i32 %79, i64 3, !dbg !28
  %123 = insertelement <8 x i32> %122, i32 %78, i64 4, !dbg !28
  %124 = insertelement <8 x i32> %123, i32 %77, i64 5, !dbg !28
  %125 = insertelement <8 x i32> %124, i32 %76, i64 6, !dbg !28
  %126 = insertelement <8 x i32> %125, i32 %75, i64 7, !dbg !28
  %127 = bitcast <8 x i32> %126 to <8 x float>, !dbg !28
  %128 = fsub <8 x float> %91, %100, !dbg !29
  %129 = fmul <8 x float> %128, %109, !dbg !30
  %130 = fmul <8 x float> %129, %118, !dbg !31
  %131 = fadd <8 x float> %130, %127, !dbg !32
  %132 = fcmp olt <8 x float> %131, zeroinitializer, !dbg !33
  %133 = extractelement <8 x i1> %132, i64 7, !dbg !37
  %134 = extractelement <8 x i1> %132, i64 6, !dbg !37
  %135 = extractelement <8 x i1> %132, i64 5, !dbg !37
  %136 = extractelement <8 x i1> %132, i64 4, !dbg !37
  %137 = extractelement <8 x i1> %132, i64 3, !dbg !37
  %138 = extractelement <8 x i1> %132, i64 2, !dbg !37
  %139 = extractelement <8 x i1> %132, i64 1, !dbg !37
  %140 = extractelement <8 x i1> %132, i64 0, !dbg !37
  %141 = shl i32 %19, 21, !dbg !38
  %142 = shl i32 %20, 21, !dbg !38
  %143 = add i32 %141, %.decomposed, !dbg !39
  %144 = add i32 %142, %.decomposed9, !dbg !39
  %145 = sext i32 %143 to i64, !dbg !40
  %146 = getelementptr float, ptr addrspace(1) %5, i64 %145, !dbg !40
  %147 = sext i32 %144 to i64, !dbg !40
  %148 = getelementptr float, ptr addrspace(1) %5, i64 %147, !dbg !40
  %bc = bitcast <8 x float> %131 to <8 x i32>, !dbg !41
  %149 = extractelement <8 x i32> %bc, i64 7, !dbg !41
  %150 = select i1 %133, i32 0, i32 %149, !dbg !37
  %bc1 = bitcast <8 x float> %131 to <8 x i32>, !dbg !41
  %151 = extractelement <8 x i32> %bc1, i64 6, !dbg !41
  %152 = select i1 %134, i32 0, i32 %151, !dbg !37
  %bc2 = bitcast <8 x float> %131 to <8 x i32>, !dbg !41
  %153 = extractelement <8 x i32> %bc2, i64 5, !dbg !41
  %154 = select i1 %135, i32 0, i32 %153, !dbg !37
  %bc3 = bitcast <8 x float> %131 to <8 x i32>, !dbg !41
  %155 = extractelement <8 x i32> %bc3, i64 4, !dbg !41
  %156 = select i1 %136, i32 0, i32 %155, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %150, i32 %152, i32 %154, i32 %156, ptr addrspace(1) %146, i1 true) #1, !dbg !41
  %bc4 = bitcast <8 x float> %131 to <8 x i32>, !dbg !41
  %157 = extractelement <8 x i32> %bc4, i64 3, !dbg !41
  %158 = select i1 %137, i32 0, i32 %157, !dbg !37
  %bc5 = bitcast <8 x float> %131 to <8 x i32>, !dbg !41
  %159 = extractelement <8 x i32> %bc5, i64 2, !dbg !41
  %160 = select i1 %138, i32 0, i32 %159, !dbg !37
  %bc6 = bitcast <8 x float> %131 to <8 x i32>, !dbg !41
  %161 = extractelement <8 x i32> %bc6, i64 1, !dbg !41
  %162 = select i1 %139, i32 0, i32 %161, !dbg !37
  %bc7 = bitcast <8 x float> %131 to <8 x i32>, !dbg !41
  %163 = extractelement <8 x i32> %bc7, i64 0, !dbg !41
  %164 = select i1 %140, i32 0, i32 %163, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %158, i32 %160, i32 %162, i32 %164, ptr addrspace(1) %148, i1 true) #1, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clsh2rpdn4icw4xidldoffqn6jpf3332hspvhiuo63jfv4vr5xwh.py", directory: "inductor_cache/ls")
!4 = !{ptr @triton_poi_fused_native_group_norm_relu_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_native_group_norm_relu_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_native_group_norm_relu_24", linkageName: "triton_poi_fused_native_group_norm_relu_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 29, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 30, scope: !7)
!19 = !DILocation(line: 29, column: 35, scope: !7)
!20 = !DILocation(line: 30, column: 36, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 41, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 41, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 37, column: 18, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 39, column: 41, scope: !7)
!37 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 40, column: 38, scope: !7)
!39 = !DILocation(line: 40, column: 30, scope: !7)
!40 = !DILocation(line: 40, column: 25, scope: !7)
!41 = !DILocation(line: 40, column: 50, scope: !7)
!42 = !DILocation(line: 40, column: 4, scope: !7)
