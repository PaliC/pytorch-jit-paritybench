; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_reflection_pad2d_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 1, !dbg !13
  %14 = or disjoint i32 %12, 2, !dbg !13
  %15 = or disjoint i32 %12, 3, !dbg !13
  %16 = or disjoint i32 %12, 512, !dbg !13
  %17 = or disjoint i32 %12, 513, !dbg !13
  %18 = or disjoint i32 %12, 514, !dbg !13
  %19 = or disjoint i32 %12, 515, !dbg !13
  %.frozen = freeze i32 %12, !dbg !14
  %20 = sdiv i32 %.frozen, 18, !dbg !14
  %21 = mul i32 %20, 18, !dbg !15
  %.decomposed = sub i32 %.frozen, %21, !dbg !15
  %22 = srem i32 %13, 18, !dbg !15
  %.frozen36 = freeze i32 %14, !dbg !14
  %23 = sdiv i32 %.frozen36, 18, !dbg !14
  %24 = mul i32 %23, 18, !dbg !15
  %.decomposed37 = sub i32 %.frozen36, %24, !dbg !15
  %25 = srem i32 %15, 18, !dbg !15
  %.frozen38 = freeze i32 %16, !dbg !14
  %26 = sdiv i32 %.frozen38, 18, !dbg !14
  %27 = mul i32 %26, 18, !dbg !15
  %.decomposed39 = sub i32 %.frozen38, %27, !dbg !15
  %28 = srem i32 %17, 18, !dbg !15
  %.frozen40 = freeze i32 %18, !dbg !14
  %29 = sdiv i32 %.frozen40, 18, !dbg !14
  %30 = mul i32 %29, 18, !dbg !15
  %.decomposed41 = sub i32 %.frozen40, %30, !dbg !15
  %31 = srem i32 %19, 18, !dbg !15
  %32 = srem i32 %20, 18, !dbg !16
  %33 = srem i32 %23, 18, !dbg !16
  %34 = srem i32 %26, 18, !dbg !16
  %35 = srem i32 %29, 18, !dbg !16
  %36 = sdiv i32 %12, 324, !dbg !17
  %37 = sdiv i32 %16, 324, !dbg !17
  %38 = add nsw i32 %.decomposed, -1, !dbg !18
  %39 = add nsw i32 %22, -1, !dbg !18
  %40 = add nsw i32 %.decomposed37, -1, !dbg !18
  %41 = add nsw i32 %25, -1, !dbg !18
  %42 = add nsw i32 %.decomposed39, -1, !dbg !18
  %43 = add nsw i32 %28, -1, !dbg !18
  %44 = add nsw i32 %.decomposed41, -1, !dbg !18
  %45 = add nsw i32 %31, -1, !dbg !18
  %46 = tail call i32 @llvm.abs.i32(i32 %38, i1 true), !dbg !19
  %47 = tail call i32 @llvm.abs.i32(i32 %39, i1 true), !dbg !19
  %48 = tail call i32 @llvm.abs.i32(i32 %40, i1 true), !dbg !19
  %49 = tail call i32 @llvm.abs.i32(i32 %41, i1 true), !dbg !19
  %50 = tail call i32 @llvm.abs.i32(i32 %42, i1 true), !dbg !19
  %51 = tail call i32 @llvm.abs.i32(i32 %43, i1 true), !dbg !19
  %52 = tail call i32 @llvm.abs.i32(i32 %44, i1 true), !dbg !19
  %53 = tail call i32 @llvm.abs.i32(i32 %45, i1 true), !dbg !19
  %54 = add nsw i32 %46, -15, !dbg !20
  %55 = add nsw i32 %47, -15, !dbg !20
  %56 = add nsw i32 %48, -15, !dbg !20
  %57 = add nsw i32 %49, -15, !dbg !20
  %58 = add nsw i32 %50, -15, !dbg !20
  %59 = add nsw i32 %51, -15, !dbg !20
  %60 = add nsw i32 %52, -15, !dbg !20
  %61 = add nsw i32 %53, -15, !dbg !20
  %62 = tail call i32 @llvm.abs.i32(i32 %54, i1 true), !dbg !21
  %63 = tail call i32 @llvm.abs.i32(i32 %55, i1 true), !dbg !21
  %64 = tail call i32 @llvm.abs.i32(i32 %56, i1 true), !dbg !21
  %65 = tail call i32 @llvm.abs.i32(i32 %57, i1 true), !dbg !21
  %66 = tail call i32 @llvm.abs.i32(i32 %58, i1 true), !dbg !21
  %67 = tail call i32 @llvm.abs.i32(i32 %59, i1 true), !dbg !21
  %68 = tail call i32 @llvm.abs.i32(i32 %60, i1 true), !dbg !21
  %69 = tail call i32 @llvm.abs.i32(i32 %61, i1 true), !dbg !21
  %70 = add nsw i32 %32, -1, !dbg !22
  %71 = add nsw i32 %33, -1, !dbg !22
  %72 = add nsw i32 %34, -1, !dbg !22
  %73 = add nsw i32 %35, -1, !dbg !22
  %74 = tail call i32 @llvm.abs.i32(i32 %70, i1 true), !dbg !23
  %75 = tail call i32 @llvm.abs.i32(i32 %71, i1 true), !dbg !23
  %76 = tail call i32 @llvm.abs.i32(i32 %72, i1 true), !dbg !23
  %77 = tail call i32 @llvm.abs.i32(i32 %73, i1 true), !dbg !23
  %78 = add nsw i32 %74, -15, !dbg !24
  %79 = add nsw i32 %75, -15, !dbg !24
  %80 = add nsw i32 %76, -15, !dbg !24
  %81 = add nsw i32 %77, -15, !dbg !24
  %82 = tail call i32 @llvm.abs.i32(i32 %78, i1 true), !dbg !25
  %83 = tail call i32 @llvm.abs.i32(i32 %79, i1 true), !dbg !25
  %84 = tail call i32 @llvm.abs.i32(i32 %80, i1 true), !dbg !25
  %85 = tail call i32 @llvm.abs.i32(i32 %81, i1 true), !dbg !25
  %86 = mul nsw i32 %82, -16, !dbg !26
  %87 = mul nsw i32 %83, -16, !dbg !26
  %88 = mul nsw i32 %84, -16, !dbg !26
  %89 = mul nsw i32 %85, -16, !dbg !26
  %90 = shl nsw i32 %36, 8, !dbg !27
  %91 = shl nsw i32 %37, 8, !dbg !27
  %reass.sub = or disjoint i32 %90, 255, !dbg !28
  %92 = sub nuw i32 %reass.sub, %62, !dbg !28
  %93 = add i32 %92, %86, !dbg !29
  %94 = sub nuw i32 %reass.sub, %63, !dbg !28
  %95 = add i32 %94, %86, !dbg !29
  %96 = sub nuw i32 %reass.sub, %64, !dbg !28
  %97 = add i32 %96, %87, !dbg !29
  %98 = sub nuw i32 %reass.sub, %65, !dbg !28
  %99 = add i32 %98, %87, !dbg !29
  %reass.sub4 = or disjoint i32 %91, 255, !dbg !28
  %100 = sub nuw i32 %reass.sub4, %66, !dbg !28
  %101 = add i32 %100, %88, !dbg !29
  %102 = sub nuw i32 %reass.sub4, %67, !dbg !28
  %103 = add i32 %102, %88, !dbg !29
  %104 = sub nuw i32 %reass.sub4, %68, !dbg !28
  %105 = add i32 %104, %89, !dbg !29
  %106 = sub nuw i32 %reass.sub4, %69, !dbg !28
  %107 = add i32 %106, %89, !dbg !29
  %108 = sext i32 %93 to i64, !dbg !30
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !30
  %110 = sext i32 %95 to i64, !dbg !30
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !30
  %112 = sext i32 %97 to i64, !dbg !30
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !30
  %114 = sext i32 %99 to i64, !dbg !30
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !30
  %116 = sext i32 %101 to i64, !dbg !30
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !30
  %118 = sext i32 %103 to i64, !dbg !30
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !30
  %120 = sext i32 %105 to i64, !dbg !30
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !30
  %122 = sext i32 %107 to i64, !dbg !30
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !30
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 true) #3, !dbg !31
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #3, !dbg !31
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #3, !dbg !31
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 true) #3, !dbg !31
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #3, !dbg !31
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #3, !dbg !31
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 true) #3, !dbg !31
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #3, !dbg !31
  %132 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !32
  %133 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !32
  %134 = getelementptr float, ptr addrspace(1) %1, i64 %112, !dbg !32
  %135 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !32
  %136 = getelementptr float, ptr addrspace(1) %1, i64 %116, !dbg !32
  %137 = getelementptr float, ptr addrspace(1) %1, i64 %118, !dbg !32
  %138 = getelementptr float, ptr addrspace(1) %1, i64 %120, !dbg !32
  %139 = getelementptr float, ptr addrspace(1) %1, i64 %122, !dbg !32
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #3, !dbg !33
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 true) #3, !dbg !33
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #3, !dbg !33
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 true) #3, !dbg !33
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 true) #3, !dbg !33
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 true) #3, !dbg !33
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 true) #3, !dbg !33
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 true) #3, !dbg !33
  %148 = sext i32 %36 to i64, !dbg !34
  %149 = getelementptr float, ptr addrspace(1) %2, i64 %148, !dbg !34
  %150 = sext i32 %37 to i64, !dbg !34
  %151 = getelementptr float, ptr addrspace(1) %2, i64 %150, !dbg !34
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 true) #3, !dbg !35
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 true) #3, !dbg !35
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 true) #3, !dbg !35
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 true) #3, !dbg !35
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 true) #3, !dbg !35
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 true) #3, !dbg !35
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 true) #3, !dbg !35
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 true) #3, !dbg !35
  %160 = getelementptr float, ptr addrspace(1) %3, i64 %148, !dbg !36
  %161 = getelementptr float, ptr addrspace(1) %3, i64 %150, !dbg !36
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 true) #3, !dbg !37
  %163 = bitcast i32 %162 to float, !dbg !37
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 true) #3, !dbg !37
  %165 = bitcast i32 %164 to float, !dbg !37
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 true) #3, !dbg !37
  %167 = bitcast i32 %166 to float, !dbg !37
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 true) #3, !dbg !37
  %169 = bitcast i32 %168 to float, !dbg !37
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 true) #3, !dbg !37
  %171 = bitcast i32 %170 to float, !dbg !37
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 true) #3, !dbg !37
  %173 = bitcast i32 %172 to float, !dbg !37
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 true) #3, !dbg !37
  %175 = bitcast i32 %174 to float, !dbg !37
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 true) #3, !dbg !37
  %177 = bitcast i32 %176 to float, !dbg !37
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %163, float 2.560000e+02) #3, !dbg !38
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float 2.560000e+02) #3, !dbg !38
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %167, float 2.560000e+02) #3, !dbg !38
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %169, float 2.560000e+02) #3, !dbg !38
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %171, float 2.560000e+02) #3, !dbg !38
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %173, float 2.560000e+02) #3, !dbg !38
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float 2.560000e+02) #3, !dbg !38
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %177, float 2.560000e+02) #3, !dbg !38
  %186 = fadd float %178, 0x3EE4F8B580000000, !dbg !39
  %187 = fadd float %179, 0x3EE4F8B580000000, !dbg !39
  %188 = fadd float %180, 0x3EE4F8B580000000, !dbg !39
  %189 = fadd float %181, 0x3EE4F8B580000000, !dbg !39
  %190 = fadd float %182, 0x3EE4F8B580000000, !dbg !39
  %191 = fadd float %183, 0x3EE4F8B580000000, !dbg !39
  %192 = fadd float %184, 0x3EE4F8B580000000, !dbg !39
  %193 = fadd float %185, 0x3EE4F8B580000000, !dbg !39
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i = icmp eq i32 %194, 0, !dbg !40
  br i1 %.not.i, label %197, label %195, !dbg !40

195:                                              ; preds = %6
  %196 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %186), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

197:                                              ; preds = %6
  %198 = tail call float @llvm.nvvm.rsqrt.approx.f(float %186), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %195, %197
  %.0.i = phi float [ %196, %195 ], [ %198, %197 ], !dbg !40
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i8 = icmp eq i32 %199, 0, !dbg !40
  br i1 %.not.i8, label %202, label %200, !dbg !40

200:                                              ; preds = %__nv_rsqrtf.exit
  %201 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %187), !dbg !40
  br label %__nv_rsqrtf.exit10, !dbg !40

202:                                              ; preds = %__nv_rsqrtf.exit
  %203 = tail call float @llvm.nvvm.rsqrt.approx.f(float %187), !dbg !40
  br label %__nv_rsqrtf.exit10, !dbg !40

__nv_rsqrtf.exit10:                               ; preds = %200, %202
  %.0.i9 = phi float [ %201, %200 ], [ %203, %202 ], !dbg !40
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i11 = icmp eq i32 %204, 0, !dbg !40
  br i1 %.not.i11, label %207, label %205, !dbg !40

205:                                              ; preds = %__nv_rsqrtf.exit10
  %206 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %188), !dbg !40
  br label %__nv_rsqrtf.exit13, !dbg !40

207:                                              ; preds = %__nv_rsqrtf.exit10
  %208 = tail call float @llvm.nvvm.rsqrt.approx.f(float %188), !dbg !40
  br label %__nv_rsqrtf.exit13, !dbg !40

__nv_rsqrtf.exit13:                               ; preds = %205, %207
  %.0.i12 = phi float [ %206, %205 ], [ %208, %207 ], !dbg !40
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i14 = icmp eq i32 %209, 0, !dbg !40
  br i1 %.not.i14, label %212, label %210, !dbg !40

210:                                              ; preds = %__nv_rsqrtf.exit13
  %211 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %189), !dbg !40
  br label %__nv_rsqrtf.exit16, !dbg !40

212:                                              ; preds = %__nv_rsqrtf.exit13
  %213 = tail call float @llvm.nvvm.rsqrt.approx.f(float %189), !dbg !40
  br label %__nv_rsqrtf.exit16, !dbg !40

__nv_rsqrtf.exit16:                               ; preds = %210, %212
  %.0.i15 = phi float [ %211, %210 ], [ %213, %212 ], !dbg !40
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i17 = icmp eq i32 %214, 0, !dbg !40
  br i1 %.not.i17, label %217, label %215, !dbg !40

215:                                              ; preds = %__nv_rsqrtf.exit16
  %216 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %190), !dbg !40
  br label %__nv_rsqrtf.exit19, !dbg !40

217:                                              ; preds = %__nv_rsqrtf.exit16
  %218 = tail call float @llvm.nvvm.rsqrt.approx.f(float %190), !dbg !40
  br label %__nv_rsqrtf.exit19, !dbg !40

__nv_rsqrtf.exit19:                               ; preds = %215, %217
  %.0.i18 = phi float [ %216, %215 ], [ %218, %217 ], !dbg !40
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i20 = icmp eq i32 %219, 0, !dbg !40
  br i1 %.not.i20, label %222, label %220, !dbg !40

220:                                              ; preds = %__nv_rsqrtf.exit19
  %221 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %191), !dbg !40
  br label %__nv_rsqrtf.exit22, !dbg !40

222:                                              ; preds = %__nv_rsqrtf.exit19
  %223 = tail call float @llvm.nvvm.rsqrt.approx.f(float %191), !dbg !40
  br label %__nv_rsqrtf.exit22, !dbg !40

__nv_rsqrtf.exit22:                               ; preds = %220, %222
  %.0.i21 = phi float [ %221, %220 ], [ %223, %222 ], !dbg !40
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i23 = icmp eq i32 %224, 0, !dbg !40
  br i1 %.not.i23, label %227, label %225, !dbg !40

225:                                              ; preds = %__nv_rsqrtf.exit22
  %226 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %192), !dbg !40
  br label %__nv_rsqrtf.exit25, !dbg !40

227:                                              ; preds = %__nv_rsqrtf.exit22
  %228 = tail call float @llvm.nvvm.rsqrt.approx.f(float %192), !dbg !40
  br label %__nv_rsqrtf.exit25, !dbg !40

__nv_rsqrtf.exit25:                               ; preds = %225, %227
  %.0.i24 = phi float [ %226, %225 ], [ %228, %227 ], !dbg !40
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i26 = icmp eq i32 %229, 0, !dbg !40
  br i1 %.not.i26, label %232, label %230, !dbg !40

230:                                              ; preds = %__nv_rsqrtf.exit25
  %231 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %193), !dbg !40
  br label %__nv_rsqrtf.exit28, !dbg !40

232:                                              ; preds = %__nv_rsqrtf.exit25
  %233 = tail call float @llvm.nvvm.rsqrt.approx.f(float %193), !dbg !40
  br label %__nv_rsqrtf.exit28, !dbg !40

__nv_rsqrtf.exit28:                               ; preds = %230, %232
  %.0.i27 = phi float [ %231, %230 ], [ %233, %232 ], !dbg !40
  %234 = bitcast i32 %147 to float, !dbg !33
  %235 = bitcast i32 %159 to float, !dbg !35
  %236 = fsub float %234, %235, !dbg !41
  %237 = bitcast i32 %146 to float, !dbg !33
  %238 = bitcast i32 %158 to float, !dbg !35
  %239 = fsub float %237, %238, !dbg !41
  %240 = bitcast i32 %145 to float, !dbg !33
  %241 = bitcast i32 %157 to float, !dbg !35
  %242 = fsub float %240, %241, !dbg !41
  %243 = bitcast i32 %144 to float, !dbg !33
  %244 = bitcast i32 %156 to float, !dbg !35
  %245 = fsub float %243, %244, !dbg !41
  %246 = bitcast i32 %143 to float, !dbg !33
  %247 = bitcast i32 %155 to float, !dbg !35
  %248 = fsub float %246, %247, !dbg !41
  %249 = bitcast i32 %142 to float, !dbg !33
  %250 = bitcast i32 %154 to float, !dbg !35
  %251 = fsub float %249, %250, !dbg !41
  %252 = bitcast i32 %141 to float, !dbg !33
  %253 = bitcast i32 %153 to float, !dbg !35
  %254 = fsub float %252, %253, !dbg !41
  %255 = bitcast i32 %140 to float, !dbg !33
  %256 = bitcast i32 %152 to float, !dbg !35
  %257 = fsub float %255, %256, !dbg !41
  %258 = bitcast i32 %131 to float, !dbg !31
  %259 = bitcast i32 %130 to float, !dbg !31
  %260 = bitcast i32 %129 to float, !dbg !31
  %261 = bitcast i32 %128 to float, !dbg !31
  %262 = bitcast i32 %127 to float, !dbg !31
  %263 = bitcast i32 %126 to float, !dbg !31
  %264 = bitcast i32 %125 to float, !dbg !31
  %265 = bitcast i32 %124 to float, !dbg !31
  %266 = fmul float %257, %.0.i, !dbg !42
  %267 = fmul float %254, %.0.i9, !dbg !42
  %268 = fmul float %251, %.0.i12, !dbg !42
  %269 = fmul float %248, %.0.i15, !dbg !42
  %270 = fmul float %245, %.0.i18, !dbg !42
  %271 = fmul float %242, %.0.i21, !dbg !42
  %272 = fmul float %239, %.0.i24, !dbg !42
  %273 = fmul float %236, %.0.i27, !dbg !42
  %274 = fadd float %266, %265, !dbg !43
  %275 = fadd float %267, %264, !dbg !43
  %276 = fadd float %268, %263, !dbg !43
  %277 = fadd float %269, %262, !dbg !43
  %278 = fadd float %270, %261, !dbg !43
  %279 = fadd float %271, %260, !dbg !43
  %280 = fadd float %272, %259, !dbg !43
  %281 = fadd float %273, %258, !dbg !43
  %282 = sext i32 %12 to i64, !dbg !44
  %283 = getelementptr float, ptr addrspace(1) %4, i64 %282, !dbg !44
  %284 = sext i32 %16 to i64, !dbg !44
  %285 = getelementptr float, ptr addrspace(1) %4, i64 %284, !dbg !44
  %286 = bitcast float %274 to i32, !dbg !45
  %287 = bitcast float %275 to i32, !dbg !45
  %288 = bitcast float %276 to i32, !dbg !45
  %289 = bitcast float %277 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %286, i32 %287, i32 %288, i32 %289, ptr addrspace(1) %283, i1 true) #3, !dbg !45
  %290 = bitcast float %278 to i32, !dbg !45
  %291 = bitcast float %279 to i32, !dbg !45
  %292 = bitcast float %280 to i32, !dbg !45
  %293 = bitcast float %281 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %290, i32 %291, i32 %292, i32 %293, ptr addrspace(1) %285, i1 true) #3, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "catlqwmnzk5wvcidml3imnhvrukux6oum27qvjxsglcqdbadijuw.py", directory: "inductor_cache/at")
!4 = !{ptr @triton_poi_fused_add_reflection_pad2d_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_reflection_pad2d_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_reflection_pad2d_11", linkageName: "triton_poi_fused_add_reflection_pad2d_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 81, scope: !7)
!19 = !DILocation(line: 28, column: 74, scope: !7)
!20 = !DILocation(line: 28, column: 62, scope: !7)
!21 = !DILocation(line: 28, column: 54, scope: !7)
!22 = !DILocation(line: 28, column: 135, scope: !7)
!23 = !DILocation(line: 28, column: 128, scope: !7)
!24 = !DILocation(line: 28, column: 116, scope: !7)
!25 = !DILocation(line: 28, column: 108, scope: !7)
!26 = !DILocation(line: 28, column: 96, scope: !7)
!27 = !DILocation(line: 28, column: 147, scope: !7)
!28 = !DILocation(line: 28, column: 90, scope: !7)
!29 = !DILocation(line: 28, column: 143, scope: !7)
!30 = !DILocation(line: 28, column: 30, scope: !7)
!31 = !DILocation(line: 28, column: 152, scope: !7)
!32 = !DILocation(line: 29, column: 30, scope: !7)
!33 = !DILocation(line: 29, column: 152, scope: !7)
!34 = !DILocation(line: 30, column: 30, scope: !7)
!35 = !DILocation(line: 30, column: 35, scope: !7)
!36 = !DILocation(line: 31, column: 30, scope: !7)
!37 = !DILocation(line: 31, column: 35, scope: !7)
!38 = !DILocation(line: 34, column: 18, scope: !7)
!39 = !DILocation(line: 36, column: 18, scope: !7)
!40 = !DILocation(line: 37, column: 27, scope: !7)
!41 = !DILocation(line: 32, column: 18, scope: !7)
!42 = !DILocation(line: 38, column: 19, scope: !7)
!43 = !DILocation(line: 39, column: 19, scope: !7)
!44 = !DILocation(line: 40, column: 25, scope: !7)
!45 = !DILocation(line: 40, column: 37, scope: !7)
!46 = !DILocation(line: 40, column: 4, scope: !7)
