; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_leaky_relu_mul_sub_31(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 2, !dbg !13
  %17 = or disjoint i32 %15, 512, !dbg !13
  %.frozen = freeze i32 %15, !dbg !14
  %18 = sdiv i32 %.frozen, 16, !dbg !14
  %19 = sdiv i32 %17, 16, !dbg !14
  %20 = srem i32 %18, 16, !dbg !15
  %21 = srem i32 %19, 16, !dbg !15
  %22 = mul i32 %18, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %22, !dbg !16
  %23 = srem i32 %16, 16, !dbg !16
  %24 = sdiv i32 %15, 256, !dbg !17
  %25 = sdiv i32 %17, 256, !dbg !17
  %26 = sext i32 %20 to i64, !dbg !18
  %27 = getelementptr i64, ptr addrspace(1) %1, i64 %26, !dbg !18
  %28 = sext i32 %21 to i64, !dbg !18
  %29 = getelementptr i64, ptr addrspace(1) %1, i64 %28, !dbg !18
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !19
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !19
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !19
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !19
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !19
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !19
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !19
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !19
  %38 = sext i32 %.decomposed to i64, !dbg !20
  %39 = getelementptr i64, ptr addrspace(1) %2, i64 %38, !dbg !20
  %40 = sext i32 %23 to i64, !dbg !20
  %41 = getelementptr i64, ptr addrspace(1) %2, i64 %40, !dbg !20
  %42 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !21
  %43 = extractvalue { i64, i64 } %42, 0, !dbg !21
  %44 = extractvalue { i64, i64 } %42, 1, !dbg !21
  %45 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !21
  %46 = extractvalue { i64, i64 } %45, 0, !dbg !21
  %47 = extractvalue { i64, i64 } %45, 1, !dbg !21
  %48 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !21
  %49 = extractvalue { i64, i64 } %48, 0, !dbg !21
  %50 = extractvalue { i64, i64 } %48, 1, !dbg !21
  %51 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !21
  %52 = extractvalue { i64, i64 } %51, 0, !dbg !21
  %53 = extractvalue { i64, i64 } %51, 1, !dbg !21
  %54 = getelementptr i64, ptr addrspace(1) %4, i64 %38, !dbg !22
  %55 = getelementptr i64, ptr addrspace(1) %4, i64 %40, !dbg !22
  %56 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !23
  %57 = extractvalue { i64, i64 } %56, 0, !dbg !23
  %58 = extractvalue { i64, i64 } %56, 1, !dbg !23
  %59 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !23
  %60 = extractvalue { i64, i64 } %59, 0, !dbg !23
  %61 = extractvalue { i64, i64 } %59, 1, !dbg !23
  %62 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !23
  %63 = extractvalue { i64, i64 } %62, 0, !dbg !23
  %64 = extractvalue { i64, i64 } %62, 1, !dbg !23
  %65 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !23
  %66 = extractvalue { i64, i64 } %65, 0, !dbg !23
  %67 = extractvalue { i64, i64 } %65, 1, !dbg !23
  %68 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !24
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 true) #1, !dbg !25
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !25
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !25
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !25
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !25
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 true) #1, !dbg !25
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !25
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !25
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !25
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !25
  %79 = getelementptr i64, ptr addrspace(1) %6, i64 %26, !dbg !26
  %80 = getelementptr i64, ptr addrspace(1) %6, i64 %28, !dbg !26
  %81 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %79, i1 true) #1, !dbg !27
  %82 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %79, i1 true) #1, !dbg !27
  %83 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %79, i1 true) #1, !dbg !27
  %84 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %79, i1 true) #1, !dbg !27
  %85 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %80, i1 true) #1, !dbg !27
  %86 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %80, i1 true) #1, !dbg !27
  %87 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %80, i1 true) #1, !dbg !27
  %88 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %80, i1 true) #1, !dbg !27
  %89 = getelementptr float, ptr addrspace(1) %7, i64 %26, !dbg !28
  %90 = getelementptr float, ptr addrspace(1) %7, i64 %28, !dbg !28
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #1, !dbg !29
  %92 = bitcast i32 %91 to float, !dbg !29
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #1, !dbg !29
  %94 = bitcast i32 %93 to float, !dbg !29
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #1, !dbg !29
  %96 = bitcast i32 %95 to float, !dbg !29
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #1, !dbg !29
  %98 = bitcast i32 %97 to float, !dbg !29
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #1, !dbg !29
  %100 = bitcast i32 %99 to float, !dbg !29
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #1, !dbg !29
  %102 = bitcast i32 %101 to float, !dbg !29
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #1, !dbg !29
  %104 = bitcast i32 %103 to float, !dbg !29
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #1, !dbg !29
  %106 = bitcast i32 %105 to float, !dbg !29
  %107 = lshr i64 %30, 60, !dbg !30
  %108 = and i64 %107, 8, !dbg !30
  %109 = add i64 %108, %30, !dbg !30
  %110 = lshr i64 %34, 60, !dbg !30
  %111 = and i64 %110, 8, !dbg !30
  %112 = add i64 %111, %34, !dbg !30
  %113 = lshr i64 %43, 60, !dbg !31
  %114 = and i64 %113, 8, !dbg !31
  %115 = lshr i64 %44, 60, !dbg !31
  %116 = and i64 %115, 8, !dbg !31
  %117 = lshr i64 %46, 60, !dbg !31
  %118 = and i64 %117, 8, !dbg !31
  %119 = lshr i64 %47, 60, !dbg !31
  %120 = and i64 %119, 8, !dbg !31
  %121 = lshr i64 %49, 60, !dbg !31
  %122 = and i64 %121, 8, !dbg !31
  %123 = lshr i64 %50, 60, !dbg !31
  %124 = and i64 %123, 8, !dbg !31
  %125 = lshr i64 %52, 60, !dbg !31
  %126 = and i64 %125, 8, !dbg !31
  %127 = lshr i64 %53, 60, !dbg !31
  %128 = and i64 %127, 8, !dbg !31
  %129 = shl i64 %109, 3, !dbg !32
  %130 = shl i64 %112, 3, !dbg !32
  %131 = shl nsw i32 %24, 6, !dbg !33
  %132 = shl nsw i32 %25, 6, !dbg !33
  %133 = sext i32 %131 to i64, !dbg !34
  %134 = sext i32 %132 to i64, !dbg !34
  %135 = getelementptr float, ptr addrspace(1) %3, i64 %43, !dbg !35
  %136 = getelementptr float, ptr addrspace(1) %135, i64 %114, !dbg !35
  %137 = getelementptr float, ptr addrspace(1) %136, i64 %129, !dbg !35
  %138 = getelementptr float, ptr addrspace(1) %137, i64 %133, !dbg !35
  %139 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !35
  %140 = getelementptr float, ptr addrspace(1) %139, i64 %116, !dbg !35
  %141 = getelementptr float, ptr addrspace(1) %140, i64 %129, !dbg !35
  %142 = getelementptr float, ptr addrspace(1) %141, i64 %133, !dbg !35
  %143 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !35
  %144 = getelementptr float, ptr addrspace(1) %143, i64 %118, !dbg !35
  %145 = getelementptr float, ptr addrspace(1) %144, i64 %129, !dbg !35
  %146 = getelementptr float, ptr addrspace(1) %145, i64 %133, !dbg !35
  %147 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !35
  %148 = getelementptr float, ptr addrspace(1) %147, i64 %120, !dbg !35
  %149 = getelementptr float, ptr addrspace(1) %148, i64 %129, !dbg !35
  %150 = getelementptr float, ptr addrspace(1) %149, i64 %133, !dbg !35
  %151 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !35
  %152 = getelementptr float, ptr addrspace(1) %151, i64 %122, !dbg !35
  %153 = getelementptr float, ptr addrspace(1) %152, i64 %130, !dbg !35
  %154 = getelementptr float, ptr addrspace(1) %153, i64 %134, !dbg !35
  %155 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !35
  %156 = getelementptr float, ptr addrspace(1) %155, i64 %124, !dbg !35
  %157 = getelementptr float, ptr addrspace(1) %156, i64 %130, !dbg !35
  %158 = getelementptr float, ptr addrspace(1) %157, i64 %134, !dbg !35
  %159 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !35
  %160 = getelementptr float, ptr addrspace(1) %159, i64 %126, !dbg !35
  %161 = getelementptr float, ptr addrspace(1) %160, i64 %130, !dbg !35
  %162 = getelementptr float, ptr addrspace(1) %161, i64 %134, !dbg !35
  %163 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !35
  %164 = getelementptr float, ptr addrspace(1) %163, i64 %128, !dbg !35
  %165 = getelementptr float, ptr addrspace(1) %164, i64 %130, !dbg !35
  %166 = getelementptr float, ptr addrspace(1) %165, i64 %134, !dbg !35
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 true) #1, !dbg !36
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 true) #1, !dbg !36
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #1, !dbg !36
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 true) #1, !dbg !36
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 true) #1, !dbg !36
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 true) #1, !dbg !36
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 true) #1, !dbg !36
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 true) #1, !dbg !36
  %175 = lshr i64 %57, 60, !dbg !37
  %176 = and i64 %175, 8, !dbg !37
  %177 = lshr i64 %58, 60, !dbg !37
  %178 = and i64 %177, 8, !dbg !37
  %179 = lshr i64 %60, 60, !dbg !37
  %180 = and i64 %179, 8, !dbg !37
  %181 = lshr i64 %61, 60, !dbg !37
  %182 = and i64 %181, 8, !dbg !37
  %183 = lshr i64 %63, 60, !dbg !37
  %184 = and i64 %183, 8, !dbg !37
  %185 = lshr i64 %64, 60, !dbg !37
  %186 = and i64 %185, 8, !dbg !37
  %187 = lshr i64 %66, 60, !dbg !37
  %188 = and i64 %187, 8, !dbg !37
  %189 = lshr i64 %67, 60, !dbg !37
  %190 = and i64 %189, 8, !dbg !37
  %191 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !38
  %192 = getelementptr float, ptr addrspace(1) %191, i64 %176, !dbg !38
  %193 = getelementptr float, ptr addrspace(1) %192, i64 %129, !dbg !38
  %194 = getelementptr float, ptr addrspace(1) %193, i64 %133, !dbg !38
  %195 = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !38
  %196 = getelementptr float, ptr addrspace(1) %195, i64 %178, !dbg !38
  %197 = getelementptr float, ptr addrspace(1) %196, i64 %129, !dbg !38
  %198 = getelementptr float, ptr addrspace(1) %197, i64 %133, !dbg !38
  %199 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !38
  %200 = getelementptr float, ptr addrspace(1) %199, i64 %180, !dbg !38
  %201 = getelementptr float, ptr addrspace(1) %200, i64 %129, !dbg !38
  %202 = getelementptr float, ptr addrspace(1) %201, i64 %133, !dbg !38
  %203 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !38
  %204 = getelementptr float, ptr addrspace(1) %203, i64 %182, !dbg !38
  %205 = getelementptr float, ptr addrspace(1) %204, i64 %129, !dbg !38
  %206 = getelementptr float, ptr addrspace(1) %205, i64 %133, !dbg !38
  %207 = getelementptr float, ptr addrspace(1) %3, i64 %63, !dbg !38
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %184, !dbg !38
  %209 = getelementptr float, ptr addrspace(1) %208, i64 %130, !dbg !38
  %210 = getelementptr float, ptr addrspace(1) %209, i64 %134, !dbg !38
  %211 = getelementptr float, ptr addrspace(1) %3, i64 %64, !dbg !38
  %212 = getelementptr float, ptr addrspace(1) %211, i64 %186, !dbg !38
  %213 = getelementptr float, ptr addrspace(1) %212, i64 %130, !dbg !38
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %134, !dbg !38
  %215 = getelementptr float, ptr addrspace(1) %3, i64 %66, !dbg !38
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %188, !dbg !38
  %217 = getelementptr float, ptr addrspace(1) %216, i64 %130, !dbg !38
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %134, !dbg !38
  %219 = getelementptr float, ptr addrspace(1) %3, i64 %67, !dbg !38
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %190, !dbg !38
  %221 = getelementptr float, ptr addrspace(1) %220, i64 %130, !dbg !38
  %222 = getelementptr float, ptr addrspace(1) %221, i64 %134, !dbg !38
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %194, i1 true) #1, !dbg !39
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %198, i1 true) #1, !dbg !39
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %202, i1 true) #1, !dbg !39
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 true) #1, !dbg !39
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %210, i1 true) #1, !dbg !39
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %214, i1 true) #1, !dbg !39
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %218, i1 true) #1, !dbg !39
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %222, i1 true) #1, !dbg !39
  %231 = lshr i64 %81, 60, !dbg !40
  %232 = and i64 %231, 8, !dbg !40
  %233 = add i64 %232, %81, !dbg !40
  %234 = lshr i64 %85, 60, !dbg !40
  %235 = and i64 %234, 8, !dbg !40
  %236 = add i64 %235, %85, !dbg !40
  %237 = shl i64 %233, 3, !dbg !41
  %238 = shl i64 %236, 3, !dbg !41
  %239 = getelementptr float, ptr addrspace(1) %136, i64 %237, !dbg !42
  %240 = getelementptr float, ptr addrspace(1) %239, i64 %133, !dbg !42
  %241 = getelementptr float, ptr addrspace(1) %140, i64 %237, !dbg !42
  %242 = getelementptr float, ptr addrspace(1) %241, i64 %133, !dbg !42
  %243 = getelementptr float, ptr addrspace(1) %144, i64 %237, !dbg !42
  %244 = getelementptr float, ptr addrspace(1) %243, i64 %133, !dbg !42
  %245 = getelementptr float, ptr addrspace(1) %148, i64 %237, !dbg !42
  %246 = getelementptr float, ptr addrspace(1) %245, i64 %133, !dbg !42
  %247 = getelementptr float, ptr addrspace(1) %152, i64 %238, !dbg !42
  %248 = getelementptr float, ptr addrspace(1) %247, i64 %134, !dbg !42
  %249 = getelementptr float, ptr addrspace(1) %156, i64 %238, !dbg !42
  %250 = getelementptr float, ptr addrspace(1) %249, i64 %134, !dbg !42
  %251 = getelementptr float, ptr addrspace(1) %160, i64 %238, !dbg !42
  %252 = getelementptr float, ptr addrspace(1) %251, i64 %134, !dbg !42
  %253 = getelementptr float, ptr addrspace(1) %164, i64 %238, !dbg !42
  %254 = getelementptr float, ptr addrspace(1) %253, i64 %134, !dbg !42
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #1, !dbg !43
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 true) #1, !dbg !43
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 true) #1, !dbg !43
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %246, i1 true) #1, !dbg !43
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %248, i1 true) #1, !dbg !43
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %250, i1 true) #1, !dbg !43
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %252, i1 true) #1, !dbg !43
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 true) #1, !dbg !43
  %263 = getelementptr float, ptr addrspace(1) %192, i64 %237, !dbg !44
  %264 = getelementptr float, ptr addrspace(1) %263, i64 %133, !dbg !44
  %265 = getelementptr float, ptr addrspace(1) %196, i64 %237, !dbg !44
  %266 = getelementptr float, ptr addrspace(1) %265, i64 %133, !dbg !44
  %267 = getelementptr float, ptr addrspace(1) %200, i64 %237, !dbg !44
  %268 = getelementptr float, ptr addrspace(1) %267, i64 %133, !dbg !44
  %269 = getelementptr float, ptr addrspace(1) %204, i64 %237, !dbg !44
  %270 = getelementptr float, ptr addrspace(1) %269, i64 %133, !dbg !44
  %271 = getelementptr float, ptr addrspace(1) %208, i64 %238, !dbg !44
  %272 = getelementptr float, ptr addrspace(1) %271, i64 %134, !dbg !44
  %273 = getelementptr float, ptr addrspace(1) %212, i64 %238, !dbg !44
  %274 = getelementptr float, ptr addrspace(1) %273, i64 %134, !dbg !44
  %275 = getelementptr float, ptr addrspace(1) %216, i64 %238, !dbg !44
  %276 = getelementptr float, ptr addrspace(1) %275, i64 %134, !dbg !44
  %277 = getelementptr float, ptr addrspace(1) %220, i64 %238, !dbg !44
  %278 = getelementptr float, ptr addrspace(1) %277, i64 %134, !dbg !44
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %264, i1 true) #1, !dbg !45
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %266, i1 true) #1, !dbg !45
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %268, i1 true) #1, !dbg !45
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %270, i1 true) #1, !dbg !45
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %272, i1 true) #1, !dbg !45
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %274, i1 true) #1, !dbg !45
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %276, i1 true) #1, !dbg !45
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %278, i1 true) #1, !dbg !45
  %287 = insertelement <2 x i32> poison, i32 %255, i64 0, !dbg !43
  %288 = insertelement <2 x i32> %287, i32 %167, i64 1, !dbg !43
  %289 = bitcast <2 x i32> %288 to <2 x float>, !dbg !43
  %290 = fcmp ogt <2 x float> %289, zeroinitializer, !dbg !46
  %291 = fmul <2 x float> %289, splat (float 0x3FC99999A0000000), !dbg !47
  %292 = select <2 x i1> %290, <2 x float> %289, <2 x float> %291, !dbg !48
  %293 = insertelement <2 x i32> poison, i32 %279, i64 0, !dbg !45
  %294 = insertelement <2 x i32> %293, i32 %223, i64 1, !dbg !45
  %295 = bitcast <2 x i32> %294 to <2 x float>, !dbg !45
  %296 = fcmp ogt <2 x float> %295, zeroinitializer, !dbg !49
  %297 = fmul <2 x float> %295, splat (float 0x3FC99999A0000000), !dbg !50
  %298 = select <2 x i1> %296, <2 x float> %295, <2 x float> %297, !dbg !51
  %299 = fsub <2 x float> %298, %292, !dbg !52
  %300 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !53
  %301 = bitcast <2 x i32> %300 to <2 x float>, !dbg !53
  %302 = shufflevector <2 x float> %301, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %303 = fmul <2 x float> %299, %302, !dbg !53
  %304 = fadd <2 x float> %292, %303, !dbg !54
  %305 = insertelement <2 x i32> poison, i32 %256, i64 0, !dbg !43
  %306 = insertelement <2 x i32> %305, i32 %168, i64 1, !dbg !43
  %307 = bitcast <2 x i32> %306 to <2 x float>, !dbg !43
  %308 = fcmp ogt <2 x float> %307, zeroinitializer, !dbg !46
  %309 = fmul <2 x float> %307, splat (float 0x3FC99999A0000000), !dbg !47
  %310 = select <2 x i1> %308, <2 x float> %307, <2 x float> %309, !dbg !48
  %311 = insertelement <2 x i32> poison, i32 %280, i64 0, !dbg !45
  %312 = insertelement <2 x i32> %311, i32 %224, i64 1, !dbg !45
  %313 = bitcast <2 x i32> %312 to <2 x float>, !dbg !45
  %314 = fcmp ogt <2 x float> %313, zeroinitializer, !dbg !49
  %315 = fmul <2 x float> %313, splat (float 0x3FC99999A0000000), !dbg !50
  %316 = select <2 x i1> %314, <2 x float> %313, <2 x float> %315, !dbg !51
  %317 = fsub <2 x float> %316, %310, !dbg !52
  %318 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !53
  %319 = bitcast <2 x i32> %318 to <2 x float>, !dbg !53
  %320 = shufflevector <2 x float> %319, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %321 = fmul <2 x float> %317, %320, !dbg !53
  %322 = fadd <2 x float> %310, %321, !dbg !54
  %323 = insertelement <2 x i32> poison, i32 %257, i64 0, !dbg !43
  %324 = insertelement <2 x i32> %323, i32 %169, i64 1, !dbg !43
  %325 = bitcast <2 x i32> %324 to <2 x float>, !dbg !43
  %326 = fcmp ogt <2 x float> %325, zeroinitializer, !dbg !46
  %327 = fmul <2 x float> %325, splat (float 0x3FC99999A0000000), !dbg !47
  %328 = select <2 x i1> %326, <2 x float> %325, <2 x float> %327, !dbg !48
  %329 = insertelement <2 x i32> poison, i32 %281, i64 0, !dbg !45
  %330 = insertelement <2 x i32> %329, i32 %225, i64 1, !dbg !45
  %331 = bitcast <2 x i32> %330 to <2 x float>, !dbg !45
  %332 = fcmp ogt <2 x float> %331, zeroinitializer, !dbg !49
  %333 = fmul <2 x float> %331, splat (float 0x3FC99999A0000000), !dbg !50
  %334 = select <2 x i1> %332, <2 x float> %331, <2 x float> %333, !dbg !51
  %335 = fsub <2 x float> %334, %328, !dbg !52
  %336 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !53
  %337 = bitcast <2 x i32> %336 to <2 x float>, !dbg !53
  %338 = shufflevector <2 x float> %337, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %339 = fmul <2 x float> %335, %338, !dbg !53
  %340 = fadd <2 x float> %328, %339, !dbg !54
  %341 = insertelement <2 x i32> poison, i32 %258, i64 0, !dbg !43
  %342 = insertelement <2 x i32> %341, i32 %170, i64 1, !dbg !43
  %343 = bitcast <2 x i32> %342 to <2 x float>, !dbg !43
  %344 = fcmp ogt <2 x float> %343, zeroinitializer, !dbg !46
  %345 = fmul <2 x float> %343, splat (float 0x3FC99999A0000000), !dbg !47
  %346 = select <2 x i1> %344, <2 x float> %343, <2 x float> %345, !dbg !48
  %347 = insertelement <2 x i32> poison, i32 %282, i64 0, !dbg !45
  %348 = insertelement <2 x i32> %347, i32 %226, i64 1, !dbg !45
  %349 = bitcast <2 x i32> %348 to <2 x float>, !dbg !45
  %350 = fcmp ogt <2 x float> %349, zeroinitializer, !dbg !49
  %351 = fmul <2 x float> %349, splat (float 0x3FC99999A0000000), !dbg !50
  %352 = select <2 x i1> %350, <2 x float> %349, <2 x float> %351, !dbg !51
  %353 = fsub <2 x float> %352, %346, !dbg !52
  %354 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !53
  %355 = bitcast <2 x i32> %354 to <2 x float>, !dbg !53
  %356 = shufflevector <2 x float> %355, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %357 = fmul <2 x float> %353, %356, !dbg !53
  %358 = fadd <2 x float> %346, %357, !dbg !54
  %359 = insertelement <2 x i32> poison, i32 %259, i64 0, !dbg !43
  %360 = insertelement <2 x i32> %359, i32 %171, i64 1, !dbg !43
  %361 = bitcast <2 x i32> %360 to <2 x float>, !dbg !43
  %362 = fcmp ogt <2 x float> %361, zeroinitializer, !dbg !46
  %363 = fmul <2 x float> %361, splat (float 0x3FC99999A0000000), !dbg !47
  %364 = select <2 x i1> %362, <2 x float> %361, <2 x float> %363, !dbg !48
  %365 = insertelement <2 x i32> poison, i32 %283, i64 0, !dbg !45
  %366 = insertelement <2 x i32> %365, i32 %227, i64 1, !dbg !45
  %367 = bitcast <2 x i32> %366 to <2 x float>, !dbg !45
  %368 = fcmp ogt <2 x float> %367, zeroinitializer, !dbg !49
  %369 = fmul <2 x float> %367, splat (float 0x3FC99999A0000000), !dbg !50
  %370 = select <2 x i1> %368, <2 x float> %367, <2 x float> %369, !dbg !51
  %371 = fsub <2 x float> %370, %364, !dbg !52
  %372 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !53
  %373 = bitcast <2 x i32> %372 to <2 x float>, !dbg !53
  %374 = shufflevector <2 x float> %373, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %375 = fmul <2 x float> %371, %374, !dbg !53
  %376 = fadd <2 x float> %364, %375, !dbg !54
  %377 = insertelement <2 x i32> poison, i32 %260, i64 0, !dbg !43
  %378 = insertelement <2 x i32> %377, i32 %172, i64 1, !dbg !43
  %379 = bitcast <2 x i32> %378 to <2 x float>, !dbg !43
  %380 = fcmp ogt <2 x float> %379, zeroinitializer, !dbg !46
  %381 = fmul <2 x float> %379, splat (float 0x3FC99999A0000000), !dbg !47
  %382 = select <2 x i1> %380, <2 x float> %379, <2 x float> %381, !dbg !48
  %383 = insertelement <2 x i32> poison, i32 %284, i64 0, !dbg !45
  %384 = insertelement <2 x i32> %383, i32 %228, i64 1, !dbg !45
  %385 = bitcast <2 x i32> %384 to <2 x float>, !dbg !45
  %386 = fcmp ogt <2 x float> %385, zeroinitializer, !dbg !49
  %387 = fmul <2 x float> %385, splat (float 0x3FC99999A0000000), !dbg !50
  %388 = select <2 x i1> %386, <2 x float> %385, <2 x float> %387, !dbg !51
  %389 = fsub <2 x float> %388, %382, !dbg !52
  %390 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !53
  %391 = bitcast <2 x i32> %390 to <2 x float>, !dbg !53
  %392 = shufflevector <2 x float> %391, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %393 = fmul <2 x float> %389, %392, !dbg !53
  %394 = fadd <2 x float> %382, %393, !dbg !54
  %395 = insertelement <2 x i32> poison, i32 %261, i64 0, !dbg !43
  %396 = insertelement <2 x i32> %395, i32 %173, i64 1, !dbg !43
  %397 = bitcast <2 x i32> %396 to <2 x float>, !dbg !43
  %398 = fcmp ogt <2 x float> %397, zeroinitializer, !dbg !46
  %399 = fmul <2 x float> %397, splat (float 0x3FC99999A0000000), !dbg !47
  %400 = select <2 x i1> %398, <2 x float> %397, <2 x float> %399, !dbg !48
  %401 = insertelement <2 x i32> poison, i32 %285, i64 0, !dbg !45
  %402 = insertelement <2 x i32> %401, i32 %229, i64 1, !dbg !45
  %403 = bitcast <2 x i32> %402 to <2 x float>, !dbg !45
  %404 = fcmp ogt <2 x float> %403, zeroinitializer, !dbg !49
  %405 = fmul <2 x float> %403, splat (float 0x3FC99999A0000000), !dbg !50
  %406 = select <2 x i1> %404, <2 x float> %403, <2 x float> %405, !dbg !51
  %407 = fsub <2 x float> %406, %400, !dbg !52
  %408 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !53
  %409 = bitcast <2 x i32> %408 to <2 x float>, !dbg !53
  %410 = shufflevector <2 x float> %409, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %411 = fmul <2 x float> %407, %410, !dbg !53
  %412 = fadd <2 x float> %400, %411, !dbg !54
  %413 = insertelement <2 x i32> poison, i32 %262, i64 0, !dbg !43
  %414 = insertelement <2 x i32> %413, i32 %174, i64 1, !dbg !43
  %415 = bitcast <2 x i32> %414 to <2 x float>, !dbg !43
  %416 = fcmp ogt <2 x float> %415, zeroinitializer, !dbg !46
  %417 = fmul <2 x float> %415, splat (float 0x3FC99999A0000000), !dbg !47
  %418 = select <2 x i1> %416, <2 x float> %415, <2 x float> %417, !dbg !48
  %419 = insertelement <2 x i32> poison, i32 %286, i64 0, !dbg !45
  %420 = insertelement <2 x i32> %419, i32 %230, i64 1, !dbg !45
  %421 = bitcast <2 x i32> %420 to <2 x float>, !dbg !45
  %422 = fcmp ogt <2 x float> %421, zeroinitializer, !dbg !49
  %423 = fmul <2 x float> %421, splat (float 0x3FC99999A0000000), !dbg !50
  %424 = select <2 x i1> %422, <2 x float> %421, <2 x float> %423, !dbg !51
  %425 = fsub <2 x float> %424, %418, !dbg !52
  %426 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !53
  %427 = bitcast <2 x i32> %426 to <2 x float>, !dbg !53
  %428 = shufflevector <2 x float> %427, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %429 = fmul <2 x float> %425, %428, !dbg !53
  %430 = fadd <2 x float> %418, %429, !dbg !54
  %431 = extractelement <2 x float> %304, i64 0, !dbg !55
  %432 = extractelement <2 x float> %304, i64 1, !dbg !56
  %433 = fsub float %431, %432, !dbg !55
  %434 = extractelement <2 x float> %322, i64 0, !dbg !55
  %435 = extractelement <2 x float> %322, i64 1, !dbg !56
  %436 = fsub float %434, %435, !dbg !55
  %437 = extractelement <2 x float> %340, i64 0, !dbg !55
  %438 = extractelement <2 x float> %340, i64 1, !dbg !56
  %439 = fsub float %437, %438, !dbg !55
  %440 = extractelement <2 x float> %358, i64 0, !dbg !55
  %441 = extractelement <2 x float> %358, i64 1, !dbg !56
  %442 = fsub float %440, %441, !dbg !55
  %443 = extractelement <2 x float> %376, i64 0, !dbg !55
  %444 = extractelement <2 x float> %376, i64 1, !dbg !56
  %445 = fsub float %443, %444, !dbg !55
  %446 = extractelement <2 x float> %394, i64 0, !dbg !55
  %447 = extractelement <2 x float> %394, i64 1, !dbg !56
  %448 = fsub float %446, %447, !dbg !55
  %449 = extractelement <2 x float> %412, i64 0, !dbg !55
  %450 = extractelement <2 x float> %412, i64 1, !dbg !56
  %451 = fsub float %449, %450, !dbg !55
  %452 = extractelement <2 x float> %430, i64 0, !dbg !55
  %453 = extractelement <2 x float> %430, i64 1, !dbg !56
  %454 = fsub float %452, %453, !dbg !55
  %455 = fmul float %433, %92, !dbg !57
  %456 = fmul float %436, %94, !dbg !57
  %457 = fmul float %439, %96, !dbg !57
  %458 = fmul float %442, %98, !dbg !57
  %459 = fmul float %445, %100, !dbg !57
  %460 = fmul float %448, %102, !dbg !57
  %461 = fmul float %451, %104, !dbg !57
  %462 = fmul float %454, %106, !dbg !57
  %463 = fadd float %432, %455, !dbg !56
  %464 = fadd float %435, %456, !dbg !56
  %465 = fadd float %438, %457, !dbg !56
  %466 = fadd float %441, %458, !dbg !56
  %467 = fadd float %444, %459, !dbg !56
  %468 = fadd float %447, %460, !dbg !56
  %469 = fadd float %450, %461, !dbg !56
  %470 = fadd float %453, %462, !dbg !56
  %471 = sext i32 %15 to i64, !dbg !58
  %472 = getelementptr float, ptr addrspace(1) %0, i64 %471, !dbg !58
  %473 = sext i32 %17 to i64, !dbg !58
  %474 = getelementptr float, ptr addrspace(1) %0, i64 %473, !dbg !58
  %475 = bitcast float %463 to i32, !dbg !59
  %476 = bitcast float %464 to i32, !dbg !59
  %477 = bitcast float %465 to i32, !dbg !59
  %478 = bitcast float %466 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %475, i32 %476, i32 %477, i32 %478, ptr addrspace(1) %472, i1 true) #1, !dbg !59
  %479 = bitcast float %467 to i32, !dbg !59
  %480 = bitcast float %468 to i32, !dbg !59
  %481 = bitcast float %469 to i32, !dbg !59
  %482 = bitcast float %470 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %479, i32 %480, i32 %481, i32 %482, ptr addrspace(1) %474, i1 true) #1, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3vynycebdnqjqb5flyajcsgrydy624josldx72cu6f3bie4rie6.py", directory: "inductor_cache/3v")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_leaky_relu_mul_sub_31, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_leaky_relu_mul_sub_31, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_leaky_relu_mul_sub_31", linkageName: "triton_poi_fused__unsafe_index_add_leaky_relu_mul_sub_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 37, column: 32, scope: !7)
!31 = !DILocation(line: 40, column: 32, scope: !7)
!32 = !DILocation(line: 41, column: 39, scope: !7)
!33 = !DILocation(line: 41, column: 49, scope: !7)
!34 = !DILocation(line: 41, column: 46, scope: !7)
!35 = !DILocation(line: 41, column: 30, scope: !7)
!36 = !DILocation(line: 41, column: 54, scope: !7)
!37 = !DILocation(line: 49, column: 35, scope: !7)
!38 = !DILocation(line: 50, column: 31, scope: !7)
!39 = !DILocation(line: 50, column: 56, scope: !7)
!40 = !DILocation(line: 59, column: 35, scope: !7)
!41 = !DILocation(line: 60, column: 40, scope: !7)
!42 = !DILocation(line: 60, column: 31, scope: !7)
!43 = !DILocation(line: 60, column: 56, scope: !7)
!44 = !DILocation(line: 64, column: 31, scope: !7)
!45 = !DILocation(line: 64, column: 57, scope: !7)
!46 = !DILocation(line: 61, column: 20, scope: !7)
!47 = !DILocation(line: 62, column: 20, scope: !7)
!48 = !DILocation(line: 63, column: 35, scope: !7)
!49 = !DILocation(line: 65, column: 20, scope: !7)
!50 = !DILocation(line: 66, column: 20, scope: !7)
!51 = !DILocation(line: 67, column: 35, scope: !7)
!52 = !DILocation(line: 68, column: 20, scope: !7)
!53 = !DILocation(line: 69, column: 20, scope: !7)
!54 = !DILocation(line: 70, column: 20, scope: !7)
!55 = !DILocation(line: 71, column: 20, scope: !7)
!56 = !DILocation(line: 73, column: 20, scope: !7)
!57 = !DILocation(line: 72, column: 20, scope: !7)
!58 = !DILocation(line: 74, column: 28, scope: !7)
!59 = !DILocation(line: 74, column: 40, scope: !7)
!60 = !DILocation(line: 74, column: 4, scope: !7)
