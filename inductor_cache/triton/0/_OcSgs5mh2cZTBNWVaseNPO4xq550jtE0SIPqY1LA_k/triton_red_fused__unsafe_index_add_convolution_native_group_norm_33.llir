; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__unsafe_index_add_convolution_native_group_norm_33(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = icmp slt i32 %11, 512, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 511, !dbg !12
  %15 = or disjoint i32 %14, 512, !dbg !12
  %16 = or disjoint i32 %14, 1024, !dbg !12
  %17 = or disjoint i32 %14, 1536, !dbg !12
  %18 = shl i32 %13, 2, !dbg !12
  %19 = and i32 %18, 2044, !dbg !12
  %20 = or disjoint i32 %19, 2, !dbg !12
  %.frozen = freeze i32 %11, !dbg !13
  %21 = sdiv i32 %.frozen, 4, !dbg !13
  %22 = mul i32 %21, 4, !dbg !14
  %.decomposed = sub i32 %.frozen, %22, !dbg !14
  %23 = srem i32 %21, 32, !dbg !15
  %24 = sext i32 %23 to i64, !dbg !16
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !16
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %12) #3, !dbg !17
  %27 = bitcast i32 %26 to float, !dbg !17
  %28 = shl nsw i32 %.decomposed, 4, !dbg !18
  %29 = shl i32 %11, 16, !dbg !19
  %30 = shl i32 %21, 15, !dbg !20
  %31 = sext i32 %30 to i64, !dbg !21
  %32 = and i32 %18, 60
  %33 = and i32 %20, 62
  %34 = zext nneg i32 %32 to i64
  %35 = getelementptr i64, ptr addrspace(1) %0, i64 %34
  %36 = zext nneg i32 %33 to i64
  %37 = getelementptr i64, ptr addrspace(1) %0, i64 %36
  %38 = or disjoint i32 %29, %19
  %39 = shl nuw nsw i32 %19, 1
  %40 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %39
  %41 = or disjoint i32 %39, 2
  %42 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %41
  %43 = shl nuw nsw i32 %20, 1
  %44 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %43
  %45 = or disjoint i32 %39, 6
  %46 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %45
  %47 = shl nuw nsw i32 %14, 1
  %48 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %47
  %49 = shl nuw nsw i32 %15, 1
  %50 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %49
  %51 = shl nuw nsw i32 %16, 1
  %52 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %51
  %53 = shl nuw nsw i32 %17, 1
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %53
  %55 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %14
  %56 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %15
  %57 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %16
  %58 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %17
  %59 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %19
  %60 = getelementptr inbounds i8, ptr addrspace(3) %59, i32 16
  %61 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %39
  %62 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %41
  %63 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %43
  %64 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %45
  %65 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %47
  %66 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %49
  %67 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %51
  %68 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %53
  %69 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14
  %70 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15
  %71 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16
  %72 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17
  %73 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19
  %74 = sext i32 %38 to i64, !dbg !22
  %75 = getelementptr inbounds i8, ptr addrspace(3) %59, i32 8
  %76 = getelementptr inbounds i8, ptr addrspace(3) %59, i32 24
  %77 = getelementptr inbounds i8, ptr addrspace(3) %73, i32 4
  %78 = getelementptr inbounds i8, ptr addrspace(3) %73, i32 8
  %79 = getelementptr inbounds i8, ptr addrspace(3) %73, i32 12
  br label %80, !dbg !22

80:                                               ; preds = %10, %._crit_edge
  %indvars.iv = phi i64 [ 0, %10 ], [ %indvars.iv.next, %._crit_edge ]
  %81 = phi float [ 0.000000e+00, %10 ], [ %305, %._crit_edge ]
  %82 = phi float [ 0.000000e+00, %10 ], [ %306, %._crit_edge ]
  %83 = phi float [ 0.000000e+00, %10 ], [ %307, %._crit_edge ]
  %84 = phi float [ 0.000000e+00, %10 ], [ %308, %._crit_edge ]
  %85 = phi float [ 0.000000e+00, %10 ], [ %301, %._crit_edge ]
  %86 = phi float [ 0.000000e+00, %10 ], [ %302, %._crit_edge ]
  %87 = phi float [ 0.000000e+00, %10 ], [ %303, %._crit_edge ]
  %88 = phi float [ 0.000000e+00, %10 ], [ %304, %._crit_edge ]
  %89 = phi float [ 0.000000e+00, %10 ], [ %297, %._crit_edge ]
  %90 = phi float [ 0.000000e+00, %10 ], [ %298, %._crit_edge ]
  %91 = phi float [ 0.000000e+00, %10 ], [ %299, %._crit_edge ]
  %92 = phi float [ 0.000000e+00, %10 ], [ %300, %._crit_edge ]
  %93 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !23
  %94 = lshr i32 %93, 12, !dbg !23
  %95 = trunc i64 %indvars.iv to i32, !dbg !24
  %96 = or disjoint i32 %14, %95, !dbg !24
  %97 = lshr i32 %96, 6, !dbg !24
  %98 = and i32 %97, 39, !dbg !24
  %99 = trunc i64 %indvars.iv to i32, !dbg !24
  %100 = or disjoint i32 %15, %99, !dbg !24
  %101 = lshr i32 %100, 6, !dbg !24
  %102 = and i32 %101, 47, !dbg !24
  %103 = trunc i64 %indvars.iv to i32, !dbg !24
  %104 = or disjoint i32 %16, %103, !dbg !24
  %105 = lshr i32 %104, 6, !dbg !24
  %106 = and i32 %105, 55, !dbg !24
  %107 = trunc i64 %indvars.iv to i32, !dbg !24
  %108 = or disjoint i32 %17, %107, !dbg !24
  %109 = lshr i32 %108, 6, !dbg !24
  %110 = and i32 %109, 63, !dbg !24
  %111 = add nuw nsw i32 %94, %28, !dbg !25
  %112 = sext i32 %111 to i64, !dbg !26
  %113 = getelementptr i64, ptr addrspace(1) %0, i64 %112, !dbg !26
  %114 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %113, i1 %12, i1 %12) #3, !dbg !27
  %115 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %113, i1 %12, i1 %12) #3, !dbg !27
  %116 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %113, i1 %12, i1 %12) #3, !dbg !27
  %117 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %113, i1 %12, i1 %12) #3, !dbg !27
  %118 = zext nneg i32 %98 to i64, !dbg !28
  %119 = getelementptr i64, ptr addrspace(1) %0, i64 %118, !dbg !28
  %120 = zext nneg i32 %102 to i64, !dbg !28
  %121 = getelementptr i64, ptr addrspace(1) %0, i64 %120, !dbg !28
  %122 = zext nneg i32 %106 to i64, !dbg !28
  %123 = getelementptr i64, ptr addrspace(1) %0, i64 %122, !dbg !28
  %124 = zext nneg i32 %110 to i64, !dbg !28
  %125 = getelementptr i64, ptr addrspace(1) %0, i64 %124, !dbg !28
  %126 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %119, i1 true) #3, !dbg !29
  %127 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %121, i1 true) #3, !dbg !29
  %128 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %123, i1 true) #3, !dbg !29
  %129 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %125, i1 true) #3, !dbg !29
  %130 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !30
  %131 = extractvalue { i64, i64 } %130, 0, !dbg !30
  %132 = extractvalue { i64, i64 } %130, 1, !dbg !30
  %133 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !30
  %134 = extractvalue { i64, i64 } %133, 0, !dbg !30
  %135 = extractvalue { i64, i64 } %133, 1, !dbg !30
  %136 = add nuw nsw i64 %indvars.iv, %74, !dbg !31
  %137 = getelementptr float, ptr addrspace(1) %3, i64 %136, !dbg !32
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %137, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #3, !dbg !33
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !33
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !33
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !33
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %143 = insertelement <1 x i32> poison, i32 %139, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %40, <1 x i32> %143, i1 true) #3, !dbg !33
  %144 = insertelement <1 x i32> poison, i32 %140, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, <1 x i32> %144, i1 true) #3, !dbg !33
  %145 = insertelement <1 x i32> poison, i32 %141, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %44, <1 x i32> %145, i1 true) #3, !dbg !33
  %146 = insertelement <1 x i32> poison, i32 %142, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %146, i1 true) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %147 = load float, ptr addrspace(3) %48, align 8, !dbg !33
  %148 = load float, ptr addrspace(3) %50, align 8, !dbg !33
  %149 = load float, ptr addrspace(3) %52, align 8, !dbg !33
  %150 = load float, ptr addrspace(3) %54, align 8, !dbg !33
  %151 = lshr i64 %114, 58, !dbg !34
  %152 = and i64 %151, 32, !dbg !34
  %153 = add i64 %152, %114, !dbg !34
  %154 = lshr i64 %115, 58, !dbg !34
  %155 = and i64 %154, 32, !dbg !34
  %156 = add i64 %155, %115, !dbg !34
  %157 = lshr i64 %116, 58, !dbg !34
  %158 = and i64 %157, 32, !dbg !34
  %159 = add i64 %158, %116, !dbg !34
  %160 = lshr i64 %117, 58, !dbg !34
  %161 = and i64 %160, 32, !dbg !34
  %162 = add i64 %161, %117, !dbg !34
  %163 = lshr i64 %126, 58, !dbg !35
  %164 = and i64 %163, 32, !dbg !35
  %165 = add i64 %164, %126, !dbg !35
  %166 = lshr i64 %127, 58, !dbg !35
  %167 = and i64 %166, 32, !dbg !35
  %168 = add i64 %167, %127, !dbg !35
  %169 = lshr i64 %128, 58, !dbg !35
  %170 = and i64 %169, 32, !dbg !35
  %171 = add i64 %170, %128, !dbg !35
  %172 = lshr i64 %129, 58, !dbg !35
  %173 = and i64 %172, 32, !dbg !35
  %174 = add i64 %173, %129, !dbg !35
  %175 = lshr i64 %131, 58, !dbg !36
  %176 = and i64 %175, 32, !dbg !36
  %177 = lshr i64 %132, 58, !dbg !36
  %178 = and i64 %177, 32, !dbg !36
  %179 = lshr i64 %134, 58, !dbg !36
  %180 = and i64 %179, 32, !dbg !36
  %181 = lshr i64 %135, 58, !dbg !36
  %182 = and i64 %181, 32, !dbg !36
  %183 = shl i64 %165, 5, !dbg !37
  %184 = shl i64 %168, 5, !dbg !37
  %185 = shl i64 %171, 5, !dbg !37
  %186 = shl i64 %174, 5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %187 = insertelement <1 x i64> poison, i64 %183, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %55, <1 x i64> %187, i1 true) #3, !dbg !37
  %188 = insertelement <1 x i64> poison, i64 %184, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %56, <1 x i64> %188, i1 true) #3, !dbg !37
  %189 = insertelement <1 x i64> poison, i64 %185, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %57, <1 x i64> %189, i1 true) #3, !dbg !37
  %190 = insertelement <1 x i64> poison, i64 %186, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %58, <1 x i64> %190, i1 true) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %191 = load i64, ptr addrspace(3) %59, align 16, !dbg !37
  %192 = load i64, ptr addrspace(3) %75, align 8, !dbg !37
  %193 = load i64, ptr addrspace(3) %60, align 16, !dbg !37
  %194 = load i64, ptr addrspace(3) %76, align 8, !dbg !37
  %195 = shl i64 %153, 10, !dbg !38
  %196 = shl i64 %156, 10, !dbg !38
  %197 = shl i64 %159, 10, !dbg !38
  %198 = shl i64 %162, 10, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %199 = insertelement <1 x i64> poison, i64 %195, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %55, <1 x i64> %199, i1 true) #3, !dbg !38
  %200 = insertelement <1 x i64> poison, i64 %196, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %56, <1 x i64> %200, i1 true) #3, !dbg !38
  %201 = insertelement <1 x i64> poison, i64 %197, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %57, <1 x i64> %201, i1 true) #3, !dbg !38
  %202 = insertelement <1 x i64> poison, i64 %198, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %58, <1 x i64> %202, i1 true) #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %203 = load i64, ptr addrspace(3) %59, align 16, !dbg !38
  %204 = load i64, ptr addrspace(3) %75, align 8, !dbg !38
  %205 = load i64, ptr addrspace(3) %60, align 16, !dbg !38
  %206 = load i64, ptr addrspace(3) %76, align 8, !dbg !38
  %207 = getelementptr float, ptr addrspace(1) %1, i64 %131, !dbg !39
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %176, !dbg !39
  %209 = getelementptr float, ptr addrspace(1) %208, i64 %191, !dbg !39
  %210 = getelementptr float, ptr addrspace(1) %209, i64 %203, !dbg !39
  %211 = getelementptr float, ptr addrspace(1) %210, i64 %31, !dbg !39
  %212 = getelementptr float, ptr addrspace(1) %1, i64 %132, !dbg !39
  %213 = getelementptr float, ptr addrspace(1) %212, i64 %178, !dbg !39
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %192, !dbg !39
  %215 = getelementptr float, ptr addrspace(1) %214, i64 %204, !dbg !39
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %31, !dbg !39
  %217 = getelementptr float, ptr addrspace(1) %1, i64 %134, !dbg !39
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %180, !dbg !39
  %219 = getelementptr float, ptr addrspace(1) %218, i64 %193, !dbg !39
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %205, !dbg !39
  %221 = getelementptr float, ptr addrspace(1) %220, i64 %31, !dbg !39
  %222 = getelementptr float, ptr addrspace(1) %1, i64 %135, !dbg !39
  %223 = getelementptr float, ptr addrspace(1) %222, i64 %182, !dbg !39
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %194, !dbg !39
  %225 = getelementptr float, ptr addrspace(1) %224, i64 %206, !dbg !39
  %226 = getelementptr float, ptr addrspace(1) %225, i64 %31, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %227 = ptrtoint ptr addrspace(1) %211 to i64, !dbg !40
  %228 = ptrtoint ptr addrspace(1) %216 to i64, !dbg !40
  %229 = ptrtoint ptr addrspace(1) %221 to i64, !dbg !40
  %230 = ptrtoint ptr addrspace(1) %226 to i64, !dbg !40
  %231 = insertelement <1 x i64> poison, i64 %227, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %61, <1 x i64> %231, i1 true) #3, !dbg !40
  %232 = insertelement <1 x i64> poison, i64 %228, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %62, <1 x i64> %232, i1 true) #3, !dbg !40
  %233 = insertelement <1 x i64> poison, i64 %229, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %63, <1 x i64> %233, i1 true) #3, !dbg !40
  %234 = insertelement <1 x i64> poison, i64 %230, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %64, <1 x i64> %234, i1 true) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %235 = load i64, ptr addrspace(3) %65, align 16, !dbg !40
  %236 = load i64, ptr addrspace(3) %66, align 16, !dbg !40
  %237 = load i64, ptr addrspace(3) %67, align 16, !dbg !40
  %238 = load i64, ptr addrspace(3) %68, align 16, !dbg !40
  %239 = inttoptr i64 %235 to ptr addrspace(1), !dbg !40
  %240 = inttoptr i64 %236 to ptr addrspace(1), !dbg !40
  %241 = inttoptr i64 %237 to ptr addrspace(1), !dbg !40
  %242 = inttoptr i64 %238 to ptr addrspace(1), !dbg !40
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %239, i1 %12) #3, !dbg !40
  %244 = bitcast i32 %243 to float, !dbg !40
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 %12) #3, !dbg !40
  %246 = bitcast i32 %245 to float, !dbg !40
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %241, i1 %12) #3, !dbg !40
  %248 = bitcast i32 %247 to float, !dbg !40
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 %12) #3, !dbg !40
  %250 = bitcast i32 %249 to float, !dbg !40
  %251 = fadd float %27, %244, !dbg !41
  %252 = fadd float %27, %246, !dbg !41
  %253 = fadd float %27, %248, !dbg !41
  %254 = fadd float %27, %250, !dbg !41
  %255 = fadd float %147, %251, !dbg !42
  %256 = fadd float %148, %252, !dbg !42
  %257 = fadd float %149, %253, !dbg !42
  %258 = fadd float %150, %254, !dbg !42
  %259 = icmp eq i64 %indvars.iv, 0, !dbg !43
  br i1 %259, label %._crit_edge, label %260, !dbg !44

260:                                              ; preds = %80
  %261 = fsub float %255, %89, !dbg !48
  %262 = fsub float %256, %90, !dbg !48
  %263 = fsub float %257, %91, !dbg !48
  %264 = fsub float %258, %92, !dbg !48
  %265 = fadd float %81, 1.000000e+00, !dbg !49
  %266 = fadd float %82, 1.000000e+00, !dbg !49
  %267 = fadd float %83, 1.000000e+00, !dbg !49
  %268 = fadd float %84, 1.000000e+00, !dbg !49
  %269 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %261, float %265) #3, !dbg !50
  %270 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %262, float %266) #3, !dbg !50
  %271 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %263, float %267) #3, !dbg !50
  %272 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %264, float %268) #3, !dbg !50
  %273 = fadd float %89, %269, !dbg !51
  %274 = fadd float %90, %270, !dbg !51
  %275 = fadd float %91, %271, !dbg !51
  %276 = fadd float %92, %272, !dbg !51
  %277 = fsub float %255, %273, !dbg !52
  %278 = fsub float %256, %274, !dbg !52
  %279 = fsub float %257, %275, !dbg !52
  %280 = fsub float %258, %276, !dbg !52
  %281 = fmul float %261, %277, !dbg !53
  %282 = fmul float %262, %278, !dbg !53
  %283 = fmul float %263, %279, !dbg !53
  %284 = fmul float %264, %280, !dbg !53
  %285 = fadd float %85, %281, !dbg !54
  %286 = fadd float %86, %282, !dbg !54
  %287 = fadd float %87, %283, !dbg !54
  %288 = fadd float %88, %284, !dbg !54
  br label %._crit_edge, !dbg !44

._crit_edge:                                      ; preds = %80, %260
  %289 = phi float [ %285, %260 ], [ 0.000000e+00, %80 ], !dbg !47
  %290 = phi float [ %286, %260 ], [ 0.000000e+00, %80 ], !dbg !47
  %291 = phi float [ %287, %260 ], [ 0.000000e+00, %80 ], !dbg !47
  %292 = phi float [ %288, %260 ], [ 0.000000e+00, %80 ], !dbg !47
  %.pn7 = phi float [ %273, %260 ], [ %255, %80 ]
  %.pn5 = phi float [ %274, %260 ], [ %256, %80 ]
  %.pn3 = phi float [ %275, %260 ], [ %257, %80 ]
  %.pn1 = phi float [ %276, %260 ], [ %258, %80 ]
  %293 = phi float [ %265, %260 ], [ 1.000000e+00, %80 ], !dbg !47
  %294 = phi float [ %266, %260 ], [ 1.000000e+00, %80 ], !dbg !47
  %295 = phi float [ %267, %260 ], [ 1.000000e+00, %80 ], !dbg !47
  %296 = phi float [ %268, %260 ], [ 1.000000e+00, %80 ], !dbg !47
  %297 = select i1 %12, float %.pn7, float %89, !dbg !55
  %298 = select i1 %12, float %.pn5, float %90, !dbg !55
  %299 = select i1 %12, float %.pn3, float %91, !dbg !55
  %300 = select i1 %12, float %.pn1, float %92, !dbg !55
  %301 = select i1 %12, float %289, float %85, !dbg !56
  %302 = select i1 %12, float %290, float %86, !dbg !56
  %303 = select i1 %12, float %291, float %87, !dbg !56
  %304 = select i1 %12, float %292, float %88, !dbg !56
  %305 = select i1 %12, float %293, float %81, !dbg !57
  %306 = select i1 %12, float %294, float %82, !dbg !57
  %307 = select i1 %12, float %295, float %83, !dbg !57
  %308 = select i1 %12, float %296, float %84, !dbg !57
  %309 = getelementptr float, ptr addrspace(1) %4, i64 %136, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %310 = bitcast float %255 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %310, i1 true) #3, !dbg !59
  %311 = bitcast float %256 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %311, i1 true) #3, !dbg !59
  %312 = bitcast float %257 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %312, i1 true) #3, !dbg !59
  %313 = bitcast float %258 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %313, i1 true) #3, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %.extract = load i32, ptr addrspace(3) %73, align 16, !dbg !59
  %.extract11 = load i32, ptr addrspace(3) %77, align 4, !dbg !59
  %.extract12 = load i32, ptr addrspace(3) %78, align 8, !dbg !59
  %.extract13 = load i32, ptr addrspace(3) %79, align 4, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %309, i1 %12) #3, !dbg !59
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2048, !dbg !22
  %314 = icmp samesign ult i64 %indvars.iv, 63488, !dbg !22
  br i1 %314, label %80, label %315, !dbg !22

315:                                              ; preds = %._crit_edge
  %316 = lshr i32 %13, 5, !dbg !12
  %317 = and i32 %13, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %318 = fsub float %298, %297, !dbg !62
  %319 = fadd float %305, %306, !dbg !64
  %320 = fcmp oeq float %319, 0.000000e+00, !dbg !65
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %306, float %319) #3, !dbg !66
  %322 = select i1 %320, float 0.000000e+00, float %321, !dbg !67
  %323 = fmul float %318, %322, !dbg !68
  %324 = fadd float %297, %323, !dbg !69
  %325 = fadd float %301, %302, !dbg !70
  %326 = fmul float %318, %318, !dbg !71
  %327 = fmul float %326, %305, !dbg !72
  %328 = fmul float %327, %322, !dbg !73
  %329 = fadd float %325, %328, !dbg !74
  %330 = fsub float %299, %324, !dbg !62
  %331 = fadd float %307, %319, !dbg !64
  %332 = fcmp oeq float %331, 0.000000e+00, !dbg !65
  %333 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float %331) #3, !dbg !66
  %334 = select i1 %332, float 0.000000e+00, float %333, !dbg !67
  %335 = fmul float %334, %330, !dbg !68
  %336 = fadd float %324, %335, !dbg !69
  %337 = fadd float %303, %329, !dbg !70
  %338 = fmul float %330, %330, !dbg !71
  %339 = fmul float %319, %338, !dbg !72
  %340 = fmul float %334, %339, !dbg !73
  %341 = fadd float %337, %340, !dbg !74
  %342 = fsub float %300, %336, !dbg !62
  %343 = fadd float %308, %331, !dbg !64
  %344 = fcmp oeq float %343, 0.000000e+00, !dbg !65
  %345 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %308, float %343) #3, !dbg !66
  %346 = select i1 %344, float 0.000000e+00, float %345, !dbg !67
  %347 = fmul float %346, %342, !dbg !68
  %348 = fadd float %336, %347, !dbg !69
  %349 = fadd float %304, %341, !dbg !70
  %350 = fmul float %342, %342, !dbg !71
  %351 = fmul float %331, %350, !dbg !72
  %352 = fmul float %346, %351, !dbg !73
  %353 = fadd float %349, %352, !dbg !74
  %354 = bitcast float %348 to i32, !dbg !60
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %354, i32 16, i32 31), !dbg !60
  %356 = bitcast i32 %355 to float, !dbg !60
  %357 = bitcast float %353 to i32, !dbg !60
  %358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %357, i32 16, i32 31), !dbg !60
  %359 = bitcast i32 %358 to float, !dbg !60
  %360 = bitcast float %343 to i32, !dbg !60
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 16, i32 31), !dbg !60
  %362 = bitcast i32 %361 to float, !dbg !60
  %363 = fsub float %356, %348, !dbg !62
  %364 = fadd float %343, %362, !dbg !64
  %365 = fcmp oeq float %364, 0.000000e+00, !dbg !65
  %366 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %362, float %364) #3, !dbg !66
  %367 = select i1 %365, float 0.000000e+00, float %366, !dbg !67
  %368 = fmul float %367, %363, !dbg !68
  %369 = fadd float %348, %368, !dbg !69
  %370 = fadd float %353, %359, !dbg !70
  %371 = fmul float %363, %363, !dbg !71
  %372 = fmul float %343, %371, !dbg !72
  %373 = fmul float %367, %372, !dbg !73
  %374 = fadd float %370, %373, !dbg !74
  %375 = bitcast float %369 to i32, !dbg !60
  %376 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %375, i32 8, i32 31), !dbg !60
  %377 = bitcast i32 %376 to float, !dbg !60
  %378 = bitcast float %374 to i32, !dbg !60
  %379 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %378, i32 8, i32 31), !dbg !60
  %380 = bitcast i32 %379 to float, !dbg !60
  %381 = bitcast float %364 to i32, !dbg !60
  %382 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %381, i32 8, i32 31), !dbg !60
  %383 = bitcast i32 %382 to float, !dbg !60
  %384 = fsub float %377, %369, !dbg !62
  %385 = fadd float %364, %383, !dbg !64
  %386 = fcmp oeq float %385, 0.000000e+00, !dbg !65
  %387 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %383, float %385) #3, !dbg !66
  %388 = select i1 %386, float 0.000000e+00, float %387, !dbg !67
  %389 = fmul float %384, %388, !dbg !68
  %390 = fadd float %369, %389, !dbg !69
  %391 = fadd float %374, %380, !dbg !70
  %392 = fmul float %384, %384, !dbg !71
  %393 = fmul float %364, %392, !dbg !72
  %394 = fmul float %388, %393, !dbg !73
  %395 = fadd float %391, %394, !dbg !74
  %396 = bitcast float %390 to i32, !dbg !60
  %397 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %396, i32 4, i32 31), !dbg !60
  %398 = bitcast i32 %397 to float, !dbg !60
  %399 = bitcast float %395 to i32, !dbg !60
  %400 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %399, i32 4, i32 31), !dbg !60
  %401 = bitcast i32 %400 to float, !dbg !60
  %402 = bitcast float %385 to i32, !dbg !60
  %403 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %402, i32 4, i32 31), !dbg !60
  %404 = bitcast i32 %403 to float, !dbg !60
  %405 = fsub float %398, %390, !dbg !62
  %406 = fadd float %385, %404, !dbg !64
  %407 = fcmp oeq float %406, 0.000000e+00, !dbg !65
  %408 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %404, float %406) #3, !dbg !66
  %409 = select i1 %407, float 0.000000e+00, float %408, !dbg !67
  %410 = fmul float %405, %409, !dbg !68
  %411 = fadd float %390, %410, !dbg !69
  %412 = fadd float %395, %401, !dbg !70
  %413 = fmul float %405, %405, !dbg !71
  %414 = fmul float %385, %413, !dbg !72
  %415 = fmul float %409, %414, !dbg !73
  %416 = fadd float %412, %415, !dbg !74
  %417 = bitcast float %411 to i32, !dbg !60
  %418 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %417, i32 2, i32 31), !dbg !60
  %419 = bitcast i32 %418 to float, !dbg !60
  %420 = bitcast float %416 to i32, !dbg !60
  %421 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %420, i32 2, i32 31), !dbg !60
  %422 = bitcast i32 %421 to float, !dbg !60
  %423 = bitcast float %406 to i32, !dbg !60
  %424 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %423, i32 2, i32 31), !dbg !60
  %425 = bitcast i32 %424 to float, !dbg !60
  %426 = fsub float %419, %411, !dbg !62
  %427 = fadd float %406, %425, !dbg !64
  %428 = fcmp oeq float %427, 0.000000e+00, !dbg !65
  %429 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %425, float %427) #3, !dbg !66
  %430 = select i1 %428, float 0.000000e+00, float %429, !dbg !67
  %431 = fmul float %426, %430, !dbg !68
  %432 = fadd float %411, %431, !dbg !69
  %433 = fadd float %416, %422, !dbg !70
  %434 = fmul float %426, %426, !dbg !71
  %435 = fmul float %406, %434, !dbg !72
  %436 = fmul float %430, %435, !dbg !73
  %437 = fadd float %433, %436, !dbg !74
  %438 = bitcast float %432 to i32, !dbg !60
  %439 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %438, i32 1, i32 31), !dbg !60
  %440 = bitcast i32 %439 to float, !dbg !60
  %441 = bitcast float %437 to i32, !dbg !60
  %442 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %441, i32 1, i32 31), !dbg !60
  %443 = bitcast i32 %442 to float, !dbg !60
  %444 = bitcast float %427 to i32, !dbg !60
  %445 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %444, i32 1, i32 31), !dbg !60
  %446 = bitcast i32 %445 to float, !dbg !60
  %447 = fsub float %440, %432, !dbg !62
  %448 = fadd float %427, %446, !dbg !64
  %449 = fcmp oeq float %448, 0.000000e+00, !dbg !65
  %450 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %446, float %448) #3, !dbg !66
  %451 = select i1 %449, float 0.000000e+00, float %450, !dbg !67
  %452 = fmul float %447, %451, !dbg !68
  %453 = fadd float %432, %452, !dbg !69
  %454 = fadd float %437, %443, !dbg !70
  %455 = fmul float %447, %447, !dbg !71
  %456 = fmul float %427, %455, !dbg !72
  %457 = fmul float %451, %456, !dbg !73
  %458 = fadd float %454, %457, !dbg !74
  %459 = icmp eq i32 %317, 0, !dbg !60
  %460 = and i32 %316, 15, !dbg !60
  %461 = getelementptr float, ptr addrspace(3) @global_smem, i32 %460, !dbg !60
  %462 = bitcast float %453 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %461, <1 x i32> %462, i1 %459) #3, !dbg !60
  %463 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %460, !dbg !60
  %464 = bitcast float %458 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %463, <1 x i32> %464, i1 %459) #3, !dbg !60
  %465 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %460, !dbg !60
  %466 = bitcast float %448 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %465, <1 x i32> %466, i1 %459) #3, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %467 = icmp slt i32 %13, 16, !dbg !60
  %468 = getelementptr float, ptr addrspace(3) @global_smem, i32 %13, !dbg !60
  %469 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %468, i1 %467) #3, !dbg !60
  %470 = bitcast i32 %469 to float, !dbg !60
  %471 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %13, !dbg !60
  %472 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %471, i1 %467) #3, !dbg !60
  %473 = bitcast i32 %472 to float, !dbg !60
  %474 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %13, !dbg !60
  %475 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %474, i1 %467) #3, !dbg !60
  %476 = bitcast i32 %475 to float, !dbg !60
  %477 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %469, i32 8, i32 31), !dbg !60
  %478 = bitcast i32 %477 to float, !dbg !60
  %479 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %472, i32 8, i32 31), !dbg !60
  %480 = bitcast i32 %479 to float, !dbg !60
  %481 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %475, i32 8, i32 31), !dbg !60
  %482 = bitcast i32 %481 to float, !dbg !60
  %483 = fsub float %478, %470, !dbg !62
  %484 = fadd float %476, %482, !dbg !64
  %485 = fcmp oeq float %484, 0.000000e+00, !dbg !65
  %486 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %482, float %484) #3, !dbg !66
  %487 = select i1 %485, float 0.000000e+00, float %486, !dbg !67
  %488 = fmul float %483, %487, !dbg !68
  %489 = fadd float %488, %470, !dbg !69
  %490 = fadd float %473, %480, !dbg !70
  %491 = fmul float %483, %483, !dbg !71
  %492 = fmul float %491, %476, !dbg !72
  %493 = fmul float %492, %487, !dbg !73
  %494 = fadd float %490, %493, !dbg !74
  %495 = bitcast float %489 to i32, !dbg !60
  %496 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %495, i32 4, i32 31), !dbg !60
  %497 = bitcast i32 %496 to float, !dbg !60
  %498 = bitcast float %494 to i32, !dbg !60
  %499 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %498, i32 4, i32 31), !dbg !60
  %500 = bitcast i32 %499 to float, !dbg !60
  %501 = bitcast float %484 to i32, !dbg !60
  %502 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %501, i32 4, i32 31), !dbg !60
  %503 = bitcast i32 %502 to float, !dbg !60
  %504 = fsub float %497, %489, !dbg !62
  %505 = fadd float %484, %503, !dbg !64
  %506 = fcmp oeq float %505, 0.000000e+00, !dbg !65
  %507 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %503, float %505) #3, !dbg !66
  %508 = select i1 %506, float 0.000000e+00, float %507, !dbg !67
  %509 = fmul float %504, %508, !dbg !68
  %510 = fadd float %489, %509, !dbg !69
  %511 = fadd float %494, %500, !dbg !70
  %512 = fmul float %504, %504, !dbg !71
  %513 = fmul float %484, %512, !dbg !72
  %514 = fmul float %508, %513, !dbg !73
  %515 = fadd float %511, %514, !dbg !74
  %516 = bitcast float %510 to i32, !dbg !60
  %517 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %516, i32 2, i32 31), !dbg !60
  %518 = bitcast i32 %517 to float, !dbg !60
  %519 = bitcast float %515 to i32, !dbg !60
  %520 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %519, i32 2, i32 31), !dbg !60
  %521 = bitcast i32 %520 to float, !dbg !60
  %522 = bitcast float %505 to i32, !dbg !60
  %523 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %522, i32 2, i32 31), !dbg !60
  %524 = bitcast i32 %523 to float, !dbg !60
  %525 = fsub float %518, %510, !dbg !62
  %526 = fadd float %505, %524, !dbg !64
  %527 = fcmp oeq float %526, 0.000000e+00, !dbg !65
  %528 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %524, float %526) #3, !dbg !66
  %529 = select i1 %527, float 0.000000e+00, float %528, !dbg !67
  %530 = fmul float %525, %529, !dbg !68
  %531 = fadd float %510, %530, !dbg !69
  %532 = fadd float %515, %521, !dbg !70
  %533 = fmul float %525, %525, !dbg !71
  %534 = fmul float %505, %533, !dbg !72
  %535 = fmul float %529, %534, !dbg !73
  %536 = fadd float %532, %535, !dbg !74
  %537 = bitcast float %531 to i32, !dbg !60
  %538 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %537, i32 1, i32 31), !dbg !60
  %539 = bitcast i32 %538 to float, !dbg !60
  %540 = bitcast float %536 to i32, !dbg !60
  %541 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %540, i32 1, i32 31), !dbg !60
  %542 = bitcast i32 %541 to float, !dbg !60
  %543 = bitcast float %526 to i32, !dbg !60
  %544 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %543, i32 1, i32 31), !dbg !60
  %545 = bitcast i32 %544 to float, !dbg !60
  %546 = fsub float %539, %531, !dbg !62
  %547 = fadd float %526, %545, !dbg !64
  %548 = fcmp oeq float %547, 0.000000e+00, !dbg !65
  %549 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %545, float %547) #3, !dbg !66
  %550 = select i1 %548, float 0.000000e+00, float %549, !dbg !67
  %551 = fmul float %546, %550, !dbg !68
  %552 = fadd float %531, %551, !dbg !69
  %553 = fadd float %536, %542, !dbg !70
  %554 = fmul float %546, %546, !dbg !71
  %555 = fmul float %526, %554, !dbg !72
  %556 = fmul float %550, %555, !dbg !73
  %557 = fadd float %553, %556, !dbg !74
  %558 = and i32 %13, 15, !dbg !60
  %559 = icmp eq i32 %558, 0, !dbg !60
  %560 = and i1 %467, %559, !dbg !60
  %561 = bitcast float %552 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %468, <1 x i32> %561, i1 %560) #3, !dbg !60
  %562 = bitcast float %557 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %471, <1 x i32> %562, i1 %560) #3, !dbg !60
  %563 = bitcast float %547 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %474, <1 x i32> %563, i1 %560) #3, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %564 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !60
  %565 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !60
  %566 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !60
  %567 = sext i32 %11 to i64, !dbg !75
  %568 = getelementptr float, ptr addrspace(1) %5, i64 %567, !dbg !75
  %569 = icmp eq i32 %14, 0, !dbg !76
  %570 = and i1 %569, %12, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %564, ptr addrspace(1) %568, i1 %570) #3, !dbg !76
  %571 = getelementptr float, ptr addrspace(1) %6, i64 %567, !dbg !77
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %565, ptr addrspace(1) %571, i1 %570) #3, !dbg !78
  %572 = getelementptr float, ptr addrspace(1) %7, i64 %567, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %566, ptr addrspace(1) %572, i1 %570) #3, !dbg !80
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvufye4t4qgcnv7awu2oaqubrgkts4trqohebzwjbrqt5mgtqpsa.py", directory: "inductor_cache/vu")
!4 = !{ptr @triton_red_fused__unsafe_index_add_convolution_native_group_norm_33, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__unsafe_index_add_convolution_native_group_norm_33, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__unsafe_index_add_convolution_native_group_norm_33", linkageName: "triton_red_fused__unsafe_index_add_convolution_native_group_norm_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 28, column: 26, scope: !7)
!16 = !DILocation(line: 29, column: 31, scope: !7)
!17 = !DILocation(line: 29, column: 36, scope: !7)
!18 = !DILocation(line: 41, column: 42, scope: !7)
!19 = !DILocation(line: 44, column: 46, scope: !7)
!20 = !DILocation(line: 55, column: 71, scope: !7)
!21 = !DILocation(line: 55, column: 65, scope: !7)
!22 = !DILocation(line: 34, column: 36, scope: !7)
!23 = !DILocation(line: 37, column: 23, scope: !7)
!24 = !DILocation(line: 38, column: 31, scope: !7)
!25 = !DILocation(line: 41, column: 39, scope: !7)
!26 = !DILocation(line: 41, column: 34, scope: !7)
!27 = !DILocation(line: 41, column: 47, scope: !7)
!28 = !DILocation(line: 42, column: 34, scope: !7)
!29 = !DILocation(line: 42, column: 39, scope: !7)
!30 = !DILocation(line: 43, column: 39, scope: !7)
!31 = !DILocation(line: 44, column: 40, scope: !7)
!32 = !DILocation(line: 44, column: 35, scope: !7)
!33 = !DILocation(line: 44, column: 51, scope: !7)
!34 = !DILocation(line: 48, column: 36, scope: !7)
!35 = !DILocation(line: 51, column: 36, scope: !7)
!36 = !DILocation(line: 54, column: 39, scope: !7)
!37 = !DILocation(line: 55, column: 46, scope: !7)
!38 = !DILocation(line: 55, column: 58, scope: !7)
!39 = !DILocation(line: 55, column: 35, scope: !7)
!40 = !DILocation(line: 55, column: 76, scope: !7)
!41 = !DILocation(line: 56, column: 24, scope: !7)
!42 = !DILocation(line: 57, column: 24, scope: !7)
!43 = !DILocation(line: 60, column: 66, scope: !7)
!44 = !DILocation(line: 178, column: 7, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 60, column: 55, scope: !7)
!48 = !DILocation(line: 183, column: 24, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 184, column: 30, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 185, column: 34, scope: !45, inlinedAt: !47)
!51 = !DILocation(line: 185, column: 26, scope: !45, inlinedAt: !47)
!52 = !DILocation(line: 186, column: 39, scope: !45, inlinedAt: !47)
!53 = !DILocation(line: 186, column: 31, scope: !45, inlinedAt: !47)
!54 = !DILocation(line: 186, column: 22, scope: !45, inlinedAt: !47)
!55 = !DILocation(line: 62, column: 54, scope: !7)
!56 = !DILocation(line: 63, column: 50, scope: !7)
!57 = !DILocation(line: 64, column: 58, scope: !7)
!58 = !DILocation(line: 65, column: 29, scope: !7)
!59 = !DILocation(line: 65, column: 52, scope: !7)
!60 = !DILocation(line: 204, column: 46, scope: !45, inlinedAt: !61)
!61 = !DILocation(line: 67, column: 44, scope: !7)
!62 = !DILocation(line: 192, column: 21, scope: !63, inlinedAt: !61)
!63 = distinct !DILexicalBlockFile(scope: !45, file: !46, discriminator: 0)
!64 = !DILocation(line: 193, column: 28, scope: !63, inlinedAt: !61)
!65 = !DILocation(line: 194, column: 39, scope: !63, inlinedAt: !61)
!66 = !DILocation(line: 194, column: 60, scope: !63, inlinedAt: !61)
!67 = !DILocation(line: 194, column: 49, scope: !63, inlinedAt: !61)
!68 = !DILocation(line: 196, column: 25, scope: !63, inlinedAt: !61)
!69 = !DILocation(line: 196, column: 17, scope: !63, inlinedAt: !61)
!70 = !DILocation(line: 197, column: 15, scope: !63, inlinedAt: !61)
!71 = !DILocation(line: 197, column: 30, scope: !63, inlinedAt: !61)
!72 = !DILocation(line: 197, column: 38, scope: !63, inlinedAt: !61)
!73 = !DILocation(line: 197, column: 49, scope: !63, inlinedAt: !61)
!74 = !DILocation(line: 197, column: 22, scope: !63, inlinedAt: !61)
!75 = !DILocation(line: 72, column: 25, scope: !7)
!76 = !DILocation(line: 72, column: 37, scope: !7)
!77 = !DILocation(line: 73, column: 25, scope: !7)
!78 = !DILocation(line: 73, column: 37, scope: !7)
!79 = !DILocation(line: 74, column: 25, scope: !7)
!80 = !DILocation(line: 74, column: 37, scope: !7)
!81 = !DILocation(line: 74, column: 4, scope: !7)
