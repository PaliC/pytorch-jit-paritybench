; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_4(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 5, !dbg !12
  %9 = and i32 %8, 3, !dbg !12
  %10 = or disjoint i32 %9, 4, !dbg !12
  %11 = or disjoint i32 %9, 8, !dbg !12
  %12 = or disjoint i32 %9, 12, !dbg !12
  %13 = or disjoint i32 %9, 16, !dbg !12
  %14 = or disjoint i32 %9, 20, !dbg !12
  %15 = or disjoint i32 %9, 24, !dbg !12
  %16 = or disjoint i32 %9, 28, !dbg !12
  %17 = shl i32 %7, 2, !dbg !12
  %18 = and i32 %17, 28, !dbg !12
  %19 = or disjoint i32 %6, %9, !dbg !13
  %20 = or disjoint i32 %6, %10, !dbg !13
  %21 = or disjoint i32 %6, %11, !dbg !13
  %22 = or disjoint i32 %6, %12, !dbg !13
  %23 = or disjoint i32 %6, %13, !dbg !13
  %24 = or disjoint i32 %6, %14, !dbg !13
  %25 = or disjoint i32 %6, %15, !dbg !13
  %26 = or disjoint i32 %6, %16, !dbg !13
  %27 = or disjoint i32 %6, %18, !dbg !13
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %29 = shl i32 %28, 5, !dbg !15
  %30 = and i32 %7, 31, !dbg !16
  %31 = lshr i32 %7, 3, !dbg !16
  %32 = and i32 %31, 15, !dbg !16
  %33 = or disjoint i32 %29, %30, !dbg !17
  %34 = or disjoint i32 %29, %32, !dbg !17
  %35 = or disjoint i32 %34, 16, !dbg !17
  %36 = icmp slt i32 %33, 25, !dbg !18
  %37 = icmp slt i32 %34, 25, !dbg !18
  %38 = icmp slt i32 %35, 25, !dbg !18
  %.frozen = freeze i32 %27, !dbg !19
  %39 = sdiv i32 %.frozen, 64, !dbg !19
  %40 = mul i32 %39, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %40, !dbg !20
  %41 = mul i32 %19, 25, !dbg !21
  %42 = mul i32 %20, 25, !dbg !21
  %43 = mul i32 %21, 25, !dbg !21
  %44 = mul i32 %22, 25, !dbg !21
  %45 = mul i32 %23, 25, !dbg !21
  %46 = mul i32 %24, 25, !dbg !21
  %47 = mul i32 %25, 25, !dbg !21
  %48 = mul i32 %26, 25, !dbg !21
  %49 = add i32 %33, %41, !dbg !22
  %50 = add i32 %33, %42, !dbg !22
  %51 = add i32 %33, %43, !dbg !22
  %52 = add i32 %33, %44, !dbg !22
  %53 = add i32 %33, %45, !dbg !22
  %54 = add i32 %33, %46, !dbg !22
  %55 = add i32 %33, %47, !dbg !22
  %56 = add i32 %33, %48, !dbg !22
  %57 = sext i32 %49 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !23
  %59 = sext i32 %50 to i64, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !23
  %61 = sext i32 %51 to i64, !dbg !23
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !23
  %63 = sext i32 %52 to i64, !dbg !23
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !23
  %65 = sext i32 %53 to i64, !dbg !23
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !23
  %67 = sext i32 %54 to i64, !dbg !23
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !23
  %69 = sext i32 %55 to i64, !dbg !23
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !23
  %71 = sext i32 %56 to i64, !dbg !23
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !23
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %36) #2, !dbg !24
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %36) #2, !dbg !24
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %36) #2, !dbg !24
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %36) #2, !dbg !24
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %36) #2, !dbg !24
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %36) #2, !dbg !24
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %36) #2, !dbg !24
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %36) #2, !dbg !24
  %81 = shl i32 %34, 6, !dbg !25
  %82 = shl i32 %35, 6, !dbg !25
  %83 = mul i32 %39, 1600, !dbg !26
  %84 = add i32 %83, %.decomposed, !dbg !27
  %85 = add i32 %84, %81, !dbg !28
  %86 = add i32 %84, %82, !dbg !28
  %87 = sext i32 %85 to i64, !dbg !29
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !29
  %89 = sext i32 %86 to i64, !dbg !29
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !29
  %91 = shl i32 %7, 5, !dbg !30
  %92 = and i32 %91, 992, !dbg !30
  %93 = or disjoint i32 %92, %9, !dbg !30
  %94 = and i32 %17, 508, !dbg !30
  %95 = lshr exact i32 %92, 3, !dbg !30
  %96 = add nuw nsw i32 %95, %93, !dbg !30
  %97 = zext nneg i32 %96 to i64, !dbg !30
  %98 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %97, !dbg !30
  %99 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #2, !dbg !30
  %100 = or disjoint i32 %93, 4, !dbg !30
  %101 = add nuw nsw i32 %100, %95, !dbg !30
  %102 = zext nneg i32 %101 to i64, !dbg !30
  %103 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %102, !dbg !30
  %104 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 true) #2, !dbg !30
  %105 = or disjoint i32 %93, 8, !dbg !30
  %106 = add nuw nsw i32 %105, %95, !dbg !30
  %107 = zext nneg i32 %106 to i64, !dbg !30
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %107, !dbg !30
  %109 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !30
  %110 = or disjoint i32 %93, 12, !dbg !30
  %111 = add nuw nsw i32 %110, %95, !dbg !30
  %112 = zext nneg i32 %111 to i64, !dbg !30
  %113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %112, !dbg !30
  %114 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #2, !dbg !30
  %115 = or disjoint i32 %93, 16, !dbg !30
  %116 = add nuw nsw i32 %115, %95, !dbg !30
  %117 = zext nneg i32 %116 to i64, !dbg !30
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %117, !dbg !30
  %119 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #2, !dbg !30
  %120 = or disjoint i32 %93, 20, !dbg !30
  %121 = add nuw nsw i32 %120, %95, !dbg !30
  %122 = zext nneg i32 %121 to i64, !dbg !30
  %123 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %122, !dbg !30
  %124 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #2, !dbg !30
  %125 = or disjoint i32 %93, 24, !dbg !30
  %126 = add nuw nsw i32 %125, %95, !dbg !30
  %127 = zext nneg i32 %126 to i64, !dbg !30
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %127, !dbg !30
  %129 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #2, !dbg !30
  %130 = or disjoint i32 %93, 28, !dbg !30
  %131 = add nuw nsw i32 %130, %95, !dbg !30
  %132 = zext nneg i32 %131 to i64, !dbg !30
  %133 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %132, !dbg !30
  %134 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %135 = lshr i32 %17, 3, !dbg !30
  %136 = and i32 %135, 60, !dbg !30
  %137 = add nuw nsw i32 %136, %94, !dbg !30
  %138 = zext nneg i32 %137 to i64, !dbg !30
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %138, !dbg !30
  %140 = or disjoint i32 %94, 512, !dbg !30
  %141 = lshr i32 %140, 3, !dbg !30
  %142 = and i32 %141, 124, !dbg !30
  %143 = add nuw nsw i32 %142, %140, !dbg !30
  %144 = zext nneg i32 %143 to i64, !dbg !30
  %145 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %144, !dbg !30
  %146 = load <4 x i32>, ptr addrspace(3) %145, align 16, !dbg !30
  %.extract = load i32, ptr addrspace(3) %139, align 16, !dbg !30
  %147 = getelementptr inbounds i8, ptr addrspace(3) %139, i64 4, !dbg !30
  %.extract12 = load i32, ptr addrspace(3) %147, align 4, !dbg !30
  %148 = getelementptr inbounds i8, ptr addrspace(3) %139, i64 8, !dbg !30
  %.extract13 = load i32, ptr addrspace(3) %148, align 8, !dbg !30
  %149 = getelementptr inbounds i8, ptr addrspace(3) %139, i64 12, !dbg !30
  %.extract14 = load i32, ptr addrspace(3) %149, align 4, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %88, i1 %37) #2, !dbg !30
  %.extract15 = extractelement <4 x i32> %146, i64 0, !dbg !30
  %.extract16 = extractelement <4 x i32> %146, i64 1, !dbg !30
  %.extract17 = extractelement <4 x i32> %146, i64 2, !dbg !30
  %.extract18 = extractelement <4 x i32> %146, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %90, i1 %38) #2, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cagwe54eqyf6xb5zqkhlqwxpp2qc72hnuufwgjfoby7wky6tchah.py", directory: "inductor_cache/ag")
!4 = !{ptr @triton_poi_fused_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_4", linkageName: "triton_poi_fused_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 33, column: 33, scope: !7)
!26 = !DILocation(line: 33, column: 43, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 38, scope: !7)
!29 = !DILocation(line: 33, column: 25, scope: !7)
!30 = !DILocation(line: 33, column: 54, scope: !7)
!31 = !DILocation(line: 33, column: 4, scope: !7)
