; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_constant_pad_nd_relu_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 1, !dbg !13
  %16 = icmp slt i32 %14, 576, !dbg !14
  %.frozen = freeze i32 %14, !dbg !15
  %17 = sdiv i32 %.frozen, 6, !dbg !15
  %18 = mul i32 %17, 6, !dbg !16
  %.decomposed = sub i32 %.frozen, %18, !dbg !16
  %19 = sdiv i32 %14, 36, !dbg !17
  %20 = srem i32 %19, 4, !dbg !18
  %21 = add nsw i32 %.decomposed, -1, !dbg !19
  %22 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !20
  %23 = insertelement <2 x i32> %22, i32 %15, i64 1, !dbg !20
  %24 = srem <2 x i32> %23, splat (i32 6), !dbg !20
  %25 = add nsw <2 x i32> %24, splat (i32 -1), !dbg !21
  %26 = extractelement <2 x i32> %25, i64 0, !dbg !19
  %27 = or i32 %26, %21, !dbg !19
  %28 = icmp ult i32 %27, 4, !dbg !19
  %29 = extractelement <2 x i32> %25, i64 1, !dbg !19
  %30 = or i32 %26, %29, !dbg !19
  %31 = icmp ult i32 %30, 4, !dbg !19
  %32 = extractelement <2 x i32> %24, i64 0, !dbg !22
  %33 = shl nsw i32 %32, 2, !dbg !22
  %34 = shl nsw i32 %19, 4, !dbg !23
  %35 = add nsw i32 %34, -5, !dbg !24
  %36 = add nsw i32 %35, %.decomposed, !dbg !25
  %37 = add nsw i32 %36, %33, !dbg !26
  %38 = extractelement <2 x i32> %24, i64 1, !dbg !25
  %39 = add nsw i32 %35, %38, !dbg !25
  %40 = add nsw i32 %39, %33, !dbg !26
  %41 = sext i32 %37 to i64, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !27
  %43 = sext i32 %40 to i64, !dbg !27
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !27
  %45 = and i1 %16, %28, !dbg !28
  %46 = and i1 %16, %31, !dbg !28
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %45, i32 0, i1 %45) #3, !dbg !29
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %46, i32 0, i1 %46) #3, !dbg !29
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !30
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !30
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %45, i32 0, i1 %45) #3, !dbg !31
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %46, i32 0, i1 %46) #3, !dbg !31
  %53 = sext i32 %20 to i64, !dbg !32
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !32
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %45, i32 0, i1 %45) #3, !dbg !33
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %46, i32 0, i1 %46) #3, !dbg !33
  %57 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !34
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %45, i32 0, i1 %45) #3, !dbg !35
  %59 = bitcast i32 %58 to float, !dbg !35
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %46, i32 0, i1 %46) #3, !dbg !35
  %61 = bitcast i32 %60 to float, !dbg !35
  %62 = fadd float %59, 0x3EE4F8B580000000, !dbg !36
  %63 = fadd float %61, 0x3EE4F8B580000000, !dbg !36
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i = icmp eq i32 %64, 0, !dbg !37
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i = icmp eq i32 %65, 0, !dbg !37
  br i1 %.not.i, label %71, label %66, !dbg !37

66:                                               ; preds = %8
  br i1 %.not1.i, label %69, label %67, !dbg !37

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

71:                                               ; preds = %8
  br i1 %.not1.i, label %74, label %72, !dbg !37

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %67, %69, %72, %74
  %.0.i = phi float [ %68, %67 ], [ %70, %69 ], [ %73, %72 ], [ %75, %74 ], !dbg !37
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i1 = icmp eq i32 %76, 0, !dbg !37
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i4 = icmp eq i32 %77, 0, !dbg !37
  br i1 %.not.i1, label %83, label %78, !dbg !37

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %81, label %79, !dbg !37

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %86, label %84, !dbg !37

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

__nv_sqrtf.exit5:                                 ; preds = %79, %81, %84, %86
  %.0.i3 = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !37
  %88 = bitcast i32 %48 to float, !dbg !29
  %89 = bitcast i32 %52 to float, !dbg !31
  %90 = fadd float %88, %89, !dbg !38
  %91 = bitcast i32 %56 to float, !dbg !33
  %92 = fsub float %90, %91, !dbg !39
  %93 = bitcast i32 %47 to float, !dbg !29
  %94 = bitcast i32 %51 to float, !dbg !31
  %95 = fadd float %93, %94, !dbg !38
  %96 = bitcast i32 %55 to float, !dbg !33
  %97 = fsub float %95, %96, !dbg !39
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !40
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !40
  %100 = fmul float %97, %98, !dbg !41
  %101 = fmul float %92, %99, !dbg !41
  %102 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !42
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %45, i32 0, i1 %45) #3, !dbg !43
  %104 = bitcast i32 %103 to float, !dbg !43
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %46, i32 0, i1 %46) #3, !dbg !43
  %106 = bitcast i32 %105 to float, !dbg !43
  %107 = fmul float %100, %104, !dbg !44
  %108 = fmul float %101, %106, !dbg !44
  %109 = getelementptr float, ptr addrspace(1) %5, i64 %53, !dbg !45
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %45, i32 0, i1 %45) #3, !dbg !46
  %111 = bitcast i32 %110 to float, !dbg !46
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %46, i32 0, i1 %46) #3, !dbg !46
  %113 = bitcast i32 %112 to float, !dbg !46
  %114 = fadd float %107, %111, !dbg !47
  %115 = fadd float %108, %113, !dbg !47
  %116 = fcmp olt float %114, 0.000000e+00, !dbg !48
  %117 = fcmp olt float %115, 0.000000e+00, !dbg !48
  %118 = select i1 %116, float 0.000000e+00, float %114, !dbg !52
  %119 = select i1 %117, float 0.000000e+00, float %115, !dbg !52
  %120 = sext i32 %14 to i64, !dbg !53
  %121 = getelementptr float, ptr addrspace(1) %6, i64 %120, !dbg !53
  %122 = bitcast float %118 to i32, !dbg !54
  %123 = select i1 %28, i32 %122, i32 0, !dbg !55
  %124 = bitcast float %119 to i32, !dbg !54
  %125 = select i1 %31, i32 %124, i32 0, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %123, i32 %125, ptr addrspace(1) %121, i1 %16) #3, !dbg !54
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clpjpsnyuv4kegvvecmotwias7trz3gh63kkwln6b3tn2t7erdfs.py", directory: "inductor_cache/lp")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_constant_pad_nd_relu_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_constant_pad_nd_relu_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_constant_pad_nd_relu_2", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_constant_pad_nd_relu_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 27, scope: !7)
!19 = !DILocation(line: 39, column: 19, scope: !7)
!20 = !DILocation(line: 24, column: 26, scope: !7)
!21 = !DILocation(line: 37, column: 18, scope: !7)
!22 = !DILocation(line: 40, column: 45, scope: !7)
!23 = !DILocation(line: 40, column: 53, scope: !7)
!24 = !DILocation(line: 40, column: 38, scope: !7)
!25 = !DILocation(line: 40, column: 43, scope: !7)
!26 = !DILocation(line: 40, column: 50, scope: !7)
!27 = !DILocation(line: 40, column: 31, scope: !7)
!28 = !DILocation(line: 40, column: 66, scope: !7)
!29 = !DILocation(line: 40, column: 58, scope: !7)
!30 = !DILocation(line: 41, column: 31, scope: !7)
!31 = !DILocation(line: 41, column: 58, scope: !7)
!32 = !DILocation(line: 43, column: 31, scope: !7)
!33 = !DILocation(line: 43, column: 36, scope: !7)
!34 = !DILocation(line: 45, column: 31, scope: !7)
!35 = !DILocation(line: 45, column: 36, scope: !7)
!36 = !DILocation(line: 47, column: 20, scope: !7)
!37 = !DILocation(line: 48, column: 27, scope: !7)
!38 = !DILocation(line: 42, column: 20, scope: !7)
!39 = !DILocation(line: 44, column: 20, scope: !7)
!40 = !DILocation(line: 50, column: 20, scope: !7)
!41 = !DILocation(line: 53, column: 20, scope: !7)
!42 = !DILocation(line: 54, column: 31, scope: !7)
!43 = !DILocation(line: 54, column: 36, scope: !7)
!44 = !DILocation(line: 55, column: 20, scope: !7)
!45 = !DILocation(line: 56, column: 31, scope: !7)
!46 = !DILocation(line: 56, column: 36, scope: !7)
!47 = !DILocation(line: 57, column: 20, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 59, column: 42, scope: !7)
!52 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 62, column: 25, scope: !7)
!54 = !DILocation(line: 62, column: 37, scope: !7)
!55 = !DILocation(line: 61, column: 35, scope: !7)
!56 = !DILocation(line: 62, column: 4, scope: !7)
