; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 60, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 256, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %17 = shl i32 %16, 6, !dbg !16
  %18 = lshr i32 %11, 4, !dbg !17
  %19 = and i32 %18, 15, !dbg !17
  %20 = or disjoint i32 %17, %19, !dbg !18
  %21 = or disjoint i32 %20, 16, !dbg !18
  %22 = or disjoint i32 %20, 32, !dbg !18
  %23 = or disjoint i32 %20, 48, !dbg !18
  %24 = icmp slt i32 %20, 289, !dbg !19
  %25 = icmp slt i32 %21, 289, !dbg !19
  %26 = icmp slt i32 %22, 289, !dbg !19
  %27 = icmp slt i32 %23, 289, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %28 = sdiv i32 %.frozen, 64, !dbg !20
  %29 = mul i32 %28, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %29, !dbg !21
  %30 = shl i32 %20, 6, !dbg !22
  %31 = shl i32 %21, 6, !dbg !22
  %32 = shl i32 %22, 6, !dbg !22
  %33 = shl i32 %23, 6, !dbg !22
  %34 = mul i32 %28, 18496, !dbg !23
  %35 = add i32 %34, %.decomposed, !dbg !24
  %36 = add i32 %35, %30, !dbg !25
  %37 = add i32 %35, %31, !dbg !25
  %38 = add i32 %35, %32, !dbg !25
  %39 = add i32 %35, %33, !dbg !25
  %40 = sext i32 %36 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !26
  %42 = sext i32 %37 to i64, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !26
  %44 = sext i32 %38 to i64, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !26
  %46 = sext i32 %39 to i64, !dbg !26
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !26
  %48 = and i1 %15, %24, !dbg !27
  %49 = and i1 %25, %15, !dbg !27
  %50 = and i1 %26, %15, !dbg !27
  %51 = and i1 %27, %15, !dbg !27
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %48) #4, !dbg !28
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %49) #4, !dbg !28
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %50) #4, !dbg !28
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %51) #4, !dbg !28
  %56 = sext i32 %.decomposed to i64, !dbg !29
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !29
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %15) #4, !dbg !30
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !31
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %15) #4, !dbg !32
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !32
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !32
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !32
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !32
  %65 = bitcast i32 %61 to float, !dbg !32
  %66 = bitcast i32 %62 to float, !dbg !32
  %67 = bitcast i32 %63 to float, !dbg !32
  %68 = bitcast i32 %64 to float, !dbg !32
  %69 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !33
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %15) #4, !dbg !34
  %71 = getelementptr float, ptr addrspace(1) %4, i64 %56, !dbg !35
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %15) #4, !dbg !36
  %73 = fadd float %65, 0x3EE4F8B580000000, !dbg !37
  %74 = fadd float %66, 0x3EE4F8B580000000, !dbg !37
  %75 = fadd float %67, 0x3EE4F8B580000000, !dbg !37
  %76 = fadd float %68, 0x3EE4F8B580000000, !dbg !37
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %77, 0, !dbg !38
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %78, 0, !dbg !38
  br i1 %.not.i, label %84, label %79, !dbg !38

79:                                               ; preds = %8
  br i1 %.not1.i, label %82, label %80, !dbg !38

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

84:                                               ; preds = %8
  br i1 %.not1.i, label %87, label %85, !dbg !38

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %80, %82, %85, %87
  %.0.i = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !38
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i4 = icmp eq i32 %89, 0, !dbg !38
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i7 = icmp eq i32 %90, 0, !dbg !38
  br i1 %.not.i4, label %96, label %91, !dbg !38

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %94, label %92, !dbg !38

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !38
  br label %__nv_sqrtf.exit8, !dbg !38

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !38
  br label %__nv_sqrtf.exit8, !dbg !38

96:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %99, label %97, !dbg !38

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !38
  br label %__nv_sqrtf.exit8, !dbg !38

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !38
  br label %__nv_sqrtf.exit8, !dbg !38

__nv_sqrtf.exit8:                                 ; preds = %92, %94, %97, %99
  %.0.i6 = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !38
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i9 = icmp eq i32 %101, 0, !dbg !38
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i12 = icmp eq i32 %102, 0, !dbg !38
  br i1 %.not.i9, label %108, label %103, !dbg !38

103:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %106, label %104, !dbg !38

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #4, !dbg !38
  br label %__nv_sqrtf.exit13, !dbg !38

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #4, !dbg !38
  br label %__nv_sqrtf.exit13, !dbg !38

108:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %111, label %109, !dbg !38

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #4, !dbg !38
  br label %__nv_sqrtf.exit13, !dbg !38

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #4, !dbg !38
  br label %__nv_sqrtf.exit13, !dbg !38

__nv_sqrtf.exit13:                                ; preds = %104, %106, %109, %111
  %.0.i11 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !38
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i14 = icmp eq i32 %113, 0, !dbg !38
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i17 = icmp eq i32 %114, 0, !dbg !38
  br i1 %.not.i14, label %120, label %115, !dbg !38

115:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %118, label %116, !dbg !38

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #4, !dbg !38
  br label %__nv_sqrtf.exit18, !dbg !38

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #4, !dbg !38
  br label %__nv_sqrtf.exit18, !dbg !38

120:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %123, label %121, !dbg !38

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #4, !dbg !38
  br label %__nv_sqrtf.exit18, !dbg !38

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #4, !dbg !38
  br label %__nv_sqrtf.exit18, !dbg !38

__nv_sqrtf.exit18:                                ; preds = %116, %118, %121, %123
  %.0.i16 = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !38
  %125 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !28
  %126 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !30
  %127 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !28
  %128 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !30
  %129 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !28
  %130 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !30
  %131 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !28
  %132 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !30
  %133 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !28
  %134 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !28
  %135 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !28
  %136 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !28
  %137 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !28
  %138 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !28
  %139 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !28
  %140 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !28
  %141 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !28
  %142 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !28
  %143 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !28
  %144 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !28
  %145 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !36
  %146 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !36
  %147 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !36
  %148 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !36
  %149 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !34
  %150 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !34
  %151 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !34
  %152 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !34
  %153 = and i32 %11, 63, !dbg !17
  %154 = or disjoint i32 %17, %153, !dbg !18
  %155 = icmp slt i32 %154, 289, !dbg !19
  %.lobit1 = lshr i32 %11, 6, !dbg !12
  %156 = and i32 %.lobit1, 3, !dbg !12
  %157 = or disjoint i32 %156, %10, !dbg !13
  %158 = or disjoint i32 %157, 60, !dbg !13
  %159 = icmp slt i32 %158, 256, !dbg !14
  %160 = and i1 %159, %155, !dbg !27
  %161 = or disjoint i32 %157, 56, !dbg !13
  %162 = icmp slt i32 %161, 256, !dbg !14
  %163 = and i1 %162, %155, !dbg !27
  %164 = or disjoint i32 %157, 52, !dbg !13
  %165 = icmp slt i32 %164, 256, !dbg !14
  %166 = and i1 %165, %155, !dbg !27
  %167 = or disjoint i32 %157, 48, !dbg !13
  %168 = icmp slt i32 %167, 256, !dbg !14
  %169 = and i1 %168, %155, !dbg !27
  %170 = or disjoint i32 %157, 44, !dbg !13
  %171 = icmp slt i32 %170, 256, !dbg !14
  %172 = and i1 %171, %155, !dbg !27
  %173 = or disjoint i32 %157, 40, !dbg !13
  %174 = icmp slt i32 %173, 256, !dbg !14
  %175 = and i1 %174, %155, !dbg !27
  %176 = or disjoint i32 %157, 36, !dbg !13
  %177 = icmp slt i32 %176, 256, !dbg !14
  %178 = and i1 %177, %155, !dbg !27
  %179 = or disjoint i32 %157, 32, !dbg !13
  %180 = icmp slt i32 %179, 256, !dbg !14
  %181 = and i1 %180, %155, !dbg !27
  %182 = or disjoint i32 %157, 28, !dbg !13
  %183 = icmp slt i32 %182, 256, !dbg !14
  %184 = and i1 %183, %155, !dbg !27
  %185 = or disjoint i32 %157, 24, !dbg !13
  %186 = icmp slt i32 %185, 256, !dbg !14
  %187 = and i1 %186, %155, !dbg !27
  %188 = or disjoint i32 %157, 20, !dbg !13
  %189 = icmp slt i32 %188, 256, !dbg !14
  %190 = and i1 %189, %155, !dbg !27
  %191 = or disjoint i32 %157, 16, !dbg !13
  %192 = icmp slt i32 %191, 256, !dbg !14
  %193 = and i1 %192, %155, !dbg !27
  %194 = or disjoint i32 %157, 12, !dbg !13
  %195 = icmp slt i32 %194, 256, !dbg !14
  %196 = and i1 %195, %155, !dbg !27
  %197 = or disjoint i32 %157, 8, !dbg !13
  %198 = icmp slt i32 %197, 256, !dbg !14
  %199 = and i1 %198, %155, !dbg !27
  %200 = or disjoint i32 %157, 4, !dbg !13
  %201 = icmp slt i32 %200, 256, !dbg !14
  %202 = and i1 %201, %155, !dbg !27
  %203 = icmp slt i32 %157, 256, !dbg !14
  %204 = and i1 %203, %155, !dbg !27
  %.frozen19 = freeze i32 %158, !dbg !20
  %205 = sdiv i32 %.frozen19, 64, !dbg !20
  %.frozen21 = freeze i32 %161, !dbg !20
  %206 = sdiv i32 %.frozen21, 64, !dbg !20
  %.frozen23 = freeze i32 %164, !dbg !20
  %207 = sdiv i32 %.frozen23, 64, !dbg !20
  %.frozen25 = freeze i32 %167, !dbg !20
  %208 = sdiv i32 %.frozen25, 64, !dbg !20
  %.frozen27 = freeze i32 %170, !dbg !20
  %209 = sdiv i32 %.frozen27, 64, !dbg !20
  %.frozen29 = freeze i32 %173, !dbg !20
  %210 = sdiv i32 %.frozen29, 64, !dbg !20
  %.frozen31 = freeze i32 %176, !dbg !20
  %211 = sdiv i32 %.frozen31, 64, !dbg !20
  %.frozen33 = freeze i32 %179, !dbg !20
  %212 = sdiv i32 %.frozen33, 64, !dbg !20
  %.frozen35 = freeze i32 %182, !dbg !20
  %213 = sdiv i32 %.frozen35, 64, !dbg !20
  %.frozen37 = freeze i32 %185, !dbg !20
  %214 = sdiv i32 %.frozen37, 64, !dbg !20
  %.frozen39 = freeze i32 %188, !dbg !20
  %215 = sdiv i32 %.frozen39, 64, !dbg !20
  %.frozen41 = freeze i32 %191, !dbg !20
  %216 = sdiv i32 %.frozen41, 64, !dbg !20
  %.frozen43 = freeze i32 %194, !dbg !20
  %217 = sdiv i32 %.frozen43, 64, !dbg !20
  %.frozen45 = freeze i32 %197, !dbg !20
  %218 = sdiv i32 %.frozen45, 64, !dbg !20
  %.frozen47 = freeze i32 %200, !dbg !20
  %219 = sdiv i32 %.frozen47, 64, !dbg !20
  %.frozen49 = freeze i32 %157, !dbg !20
  %220 = sdiv i32 %.frozen49, 64, !dbg !20
  %221 = mul i32 %205, 64, !dbg !21
  %.decomposed20 = sub i32 %.frozen19, %221, !dbg !21
  %222 = mul i32 %206, 64, !dbg !21
  %.decomposed22 = sub i32 %.frozen21, %222, !dbg !21
  %223 = mul i32 %207, 64, !dbg !21
  %.decomposed24 = sub i32 %.frozen23, %223, !dbg !21
  %224 = mul i32 %208, 64, !dbg !21
  %.decomposed26 = sub i32 %.frozen25, %224, !dbg !21
  %225 = mul i32 %209, 64, !dbg !21
  %.decomposed28 = sub i32 %.frozen27, %225, !dbg !21
  %226 = mul i32 %210, 64, !dbg !21
  %.decomposed30 = sub i32 %.frozen29, %226, !dbg !21
  %227 = mul i32 %211, 64, !dbg !21
  %.decomposed32 = sub i32 %.frozen31, %227, !dbg !21
  %228 = mul i32 %212, 64, !dbg !21
  %.decomposed34 = sub i32 %.frozen33, %228, !dbg !21
  %229 = mul i32 %213, 64, !dbg !21
  %.decomposed36 = sub i32 %.frozen35, %229, !dbg !21
  %230 = mul i32 %214, 64, !dbg !21
  %.decomposed38 = sub i32 %.frozen37, %230, !dbg !21
  %231 = mul i32 %215, 64, !dbg !21
  %.decomposed40 = sub i32 %.frozen39, %231, !dbg !21
  %232 = mul i32 %216, 64, !dbg !21
  %.decomposed42 = sub i32 %.frozen41, %232, !dbg !21
  %233 = mul i32 %217, 64, !dbg !21
  %.decomposed44 = sub i32 %.frozen43, %233, !dbg !21
  %234 = mul i32 %218, 64, !dbg !21
  %.decomposed46 = sub i32 %.frozen45, %234, !dbg !21
  %235 = mul i32 %219, 64, !dbg !21
  %.decomposed48 = sub i32 %.frozen47, %235, !dbg !21
  %236 = mul i32 %220, 64, !dbg !21
  %.decomposed50 = sub i32 %.frozen49, %236, !dbg !21
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #4, !dbg !39
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #4, !dbg !39
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #4, !dbg !39
  %241 = insertelement <4 x i32> poison, i32 %126, i64 0, !dbg !30
  %242 = insertelement <4 x i32> %241, i32 %128, i64 1, !dbg !30
  %243 = insertelement <4 x i32> %242, i32 %130, i64 2, !dbg !30
  %244 = insertelement <4 x i32> %243, i32 %132, i64 3, !dbg !30
  %245 = bitcast <4 x i32> %244 to <4 x float>, !dbg !30
  %246 = shufflevector <4 x float> %245, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !30
  %247 = insertelement <16 x i32> poison, i32 %125, i64 0, !dbg !28
  %248 = insertelement <16 x i32> %247, i32 %127, i64 1, !dbg !28
  %249 = insertelement <16 x i32> %248, i32 %129, i64 2, !dbg !28
  %250 = insertelement <16 x i32> %249, i32 %131, i64 3, !dbg !28
  %251 = insertelement <16 x i32> %250, i32 %133, i64 4, !dbg !28
  %252 = insertelement <16 x i32> %251, i32 %134, i64 5, !dbg !28
  %253 = insertelement <16 x i32> %252, i32 %135, i64 6, !dbg !28
  %254 = insertelement <16 x i32> %253, i32 %136, i64 7, !dbg !28
  %255 = insertelement <16 x i32> %254, i32 %137, i64 8, !dbg !28
  %256 = insertelement <16 x i32> %255, i32 %138, i64 9, !dbg !28
  %257 = insertelement <16 x i32> %256, i32 %139, i64 10, !dbg !28
  %258 = insertelement <16 x i32> %257, i32 %140, i64 11, !dbg !28
  %259 = insertelement <16 x i32> %258, i32 %141, i64 12, !dbg !28
  %260 = insertelement <16 x i32> %259, i32 %142, i64 13, !dbg !28
  %261 = insertelement <16 x i32> %260, i32 %143, i64 14, !dbg !28
  %262 = insertelement <16 x i32> %261, i32 %144, i64 15, !dbg !28
  %263 = bitcast <16 x i32> %262 to <16 x float>, !dbg !28
  %264 = fsub <16 x float> %263, %246, !dbg !40
  %265 = insertelement <4 x i32> poison, i32 %145, i64 0, !dbg !36
  %266 = insertelement <4 x i32> %265, i32 %146, i64 1, !dbg !36
  %267 = insertelement <4 x i32> %266, i32 %147, i64 2, !dbg !36
  %268 = insertelement <4 x i32> %267, i32 %148, i64 3, !dbg !36
  %269 = bitcast <4 x i32> %268 to <4 x float>, !dbg !36
  %270 = shufflevector <4 x float> %269, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !36
  %271 = insertelement <4 x i32> poison, i32 %149, i64 0, !dbg !34
  %272 = insertelement <4 x i32> %271, i32 %150, i64 1, !dbg !34
  %273 = insertelement <4 x i32> %272, i32 %151, i64 2, !dbg !34
  %274 = insertelement <4 x i32> %273, i32 %152, i64 3, !dbg !34
  %275 = bitcast <4 x i32> %274 to <4 x float>, !dbg !34
  %276 = shufflevector <4 x float> %275, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %277 = insertelement <16 x float> poison, float %240, i64 0, !dbg !41
  %278 = insertelement <16 x float> %277, float %239, i64 1, !dbg !41
  %279 = insertelement <16 x float> %278, float %238, i64 2, !dbg !41
  %280 = insertelement <16 x float> %279, float %237, i64 3, !dbg !41
  %281 = shufflevector <16 x float> %280, <16 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !41
  %282 = fmul <16 x float> %264, %281, !dbg !41
  %283 = fmul <16 x float> %282, %276, !dbg !42
  %284 = fadd <16 x float> %283, %270, !dbg !43
  %285 = fcmp olt <16 x float> %284, zeroinitializer, !dbg !44
  %286 = extractelement <16 x i1> %285, i64 15, !dbg !48
  %287 = extractelement <16 x float> %284, i64 15, !dbg !48
  %288 = select i1 %286, float 0.000000e+00, float %287, !dbg !48
  %289 = extractelement <16 x i1> %285, i64 14, !dbg !48
  %290 = extractelement <16 x float> %284, i64 14, !dbg !48
  %291 = select i1 %289, float 0.000000e+00, float %290, !dbg !48
  %292 = extractelement <16 x i1> %285, i64 13, !dbg !48
  %293 = extractelement <16 x float> %284, i64 13, !dbg !48
  %294 = select i1 %292, float 0.000000e+00, float %293, !dbg !48
  %295 = extractelement <16 x i1> %285, i64 12, !dbg !48
  %296 = extractelement <16 x float> %284, i64 12, !dbg !48
  %297 = select i1 %295, float 0.000000e+00, float %296, !dbg !48
  %298 = extractelement <16 x i1> %285, i64 11, !dbg !48
  %299 = extractelement <16 x float> %284, i64 11, !dbg !48
  %300 = select i1 %298, float 0.000000e+00, float %299, !dbg !48
  %301 = extractelement <16 x i1> %285, i64 10, !dbg !48
  %302 = extractelement <16 x float> %284, i64 10, !dbg !48
  %303 = select i1 %301, float 0.000000e+00, float %302, !dbg !48
  %304 = extractelement <16 x i1> %285, i64 9, !dbg !48
  %305 = extractelement <16 x float> %284, i64 9, !dbg !48
  %306 = select i1 %304, float 0.000000e+00, float %305, !dbg !48
  %307 = extractelement <16 x i1> %285, i64 8, !dbg !48
  %308 = extractelement <16 x float> %284, i64 8, !dbg !48
  %309 = select i1 %307, float 0.000000e+00, float %308, !dbg !48
  %310 = extractelement <16 x i1> %285, i64 7, !dbg !48
  %311 = extractelement <16 x float> %284, i64 7, !dbg !48
  %312 = select i1 %310, float 0.000000e+00, float %311, !dbg !48
  %313 = extractelement <16 x i1> %285, i64 6, !dbg !48
  %314 = extractelement <16 x float> %284, i64 6, !dbg !48
  %315 = select i1 %313, float 0.000000e+00, float %314, !dbg !48
  %316 = extractelement <16 x i1> %285, i64 5, !dbg !48
  %317 = extractelement <16 x float> %284, i64 5, !dbg !48
  %318 = select i1 %316, float 0.000000e+00, float %317, !dbg !48
  %319 = extractelement <16 x i1> %285, i64 4, !dbg !48
  %320 = extractelement <16 x float> %284, i64 4, !dbg !48
  %321 = select i1 %319, float 0.000000e+00, float %320, !dbg !48
  %322 = extractelement <16 x i1> %285, i64 3, !dbg !48
  %323 = extractelement <16 x float> %284, i64 3, !dbg !48
  %324 = select i1 %322, float 0.000000e+00, float %323, !dbg !48
  %325 = extractelement <16 x i1> %285, i64 2, !dbg !48
  %326 = extractelement <16 x float> %284, i64 2, !dbg !48
  %327 = select i1 %325, float 0.000000e+00, float %326, !dbg !48
  %328 = extractelement <16 x i1> %285, i64 1, !dbg !48
  %329 = extractelement <16 x float> %284, i64 1, !dbg !48
  %330 = select i1 %328, float 0.000000e+00, float %329, !dbg !48
  %331 = extractelement <16 x i1> %285, i64 0, !dbg !48
  %332 = extractelement <16 x float> %284, i64 0, !dbg !48
  %333 = select i1 %331, float 0.000000e+00, float %332, !dbg !48
  %334 = mul nsw i32 %.decomposed50, 289, !dbg !49
  %335 = mul nsw i32 %.decomposed48, 289, !dbg !49
  %336 = mul nsw i32 %.decomposed46, 289, !dbg !49
  %337 = mul nsw i32 %.decomposed44, 289, !dbg !49
  %338 = mul nsw i32 %.decomposed42, 289, !dbg !49
  %339 = mul nsw i32 %.decomposed40, 289, !dbg !49
  %340 = mul nsw i32 %.decomposed38, 289, !dbg !49
  %341 = mul nsw i32 %.decomposed36, 289, !dbg !49
  %342 = mul nsw i32 %.decomposed34, 289, !dbg !49
  %343 = mul nsw i32 %.decomposed32, 289, !dbg !49
  %344 = mul nsw i32 %.decomposed30, 289, !dbg !49
  %345 = mul nsw i32 %.decomposed28, 289, !dbg !49
  %346 = mul nsw i32 %.decomposed26, 289, !dbg !49
  %347 = mul nsw i32 %.decomposed24, 289, !dbg !49
  %348 = mul nsw i32 %.decomposed22, 289, !dbg !49
  %349 = mul nsw i32 %.decomposed20, 289, !dbg !49
  %350 = add i32 %334, %154, !dbg !50
  %351 = add i32 %335, %154, !dbg !50
  %352 = add i32 %336, %154, !dbg !50
  %353 = add i32 %337, %154, !dbg !50
  %354 = add i32 %338, %154, !dbg !50
  %355 = add i32 %339, %154, !dbg !50
  %356 = add i32 %340, %154, !dbg !50
  %357 = add i32 %341, %154, !dbg !50
  %358 = add i32 %342, %154, !dbg !50
  %359 = add i32 %343, %154, !dbg !50
  %360 = add i32 %344, %154, !dbg !50
  %361 = add i32 %345, %154, !dbg !50
  %362 = add i32 %346, %154, !dbg !50
  %363 = add i32 %347, %154, !dbg !50
  %364 = add i32 %348, %154, !dbg !50
  %365 = add i32 %349, %154, !dbg !50
  %366 = mul i32 %220, 110976, !dbg !51
  %367 = mul i32 %219, 110976, !dbg !51
  %368 = mul i32 %218, 110976, !dbg !51
  %369 = mul i32 %217, 110976, !dbg !51
  %370 = mul i32 %216, 110976, !dbg !51
  %371 = mul i32 %215, 110976, !dbg !51
  %372 = mul i32 %214, 110976, !dbg !51
  %373 = mul i32 %213, 110976, !dbg !51
  %374 = mul i32 %212, 110976, !dbg !51
  %375 = mul i32 %211, 110976, !dbg !51
  %376 = mul i32 %210, 110976, !dbg !51
  %377 = mul i32 %209, 110976, !dbg !51
  %378 = mul i32 %208, 110976, !dbg !51
  %379 = mul i32 %207, 110976, !dbg !51
  %380 = mul i32 %206, 110976, !dbg !51
  %381 = mul i32 %205, 110976, !dbg !51
  %382 = add i32 %350, %366, !dbg !52
  %383 = add i32 %351, %367, !dbg !52
  %384 = add i32 %352, %368, !dbg !52
  %385 = add i32 %353, %369, !dbg !52
  %386 = add i32 %354, %370, !dbg !52
  %387 = add i32 %355, %371, !dbg !52
  %388 = add i32 %356, %372, !dbg !52
  %389 = add i32 %357, %373, !dbg !52
  %390 = add i32 %358, %374, !dbg !52
  %391 = add i32 %359, %375, !dbg !52
  %392 = add i32 %360, %376, !dbg !52
  %393 = add i32 %361, %377, !dbg !52
  %394 = add i32 %362, %378, !dbg !52
  %395 = add i32 %363, %379, !dbg !52
  %396 = add i32 %364, %380, !dbg !52
  %397 = add i32 %365, %381, !dbg !52
  %398 = sext i32 %382 to i64, !dbg !53
  %399 = getelementptr float, ptr addrspace(1) %5, i64 %398, !dbg !53
  %400 = sext i32 %383 to i64, !dbg !53
  %401 = getelementptr float, ptr addrspace(1) %5, i64 %400, !dbg !53
  %402 = sext i32 %384 to i64, !dbg !53
  %403 = getelementptr float, ptr addrspace(1) %5, i64 %402, !dbg !53
  %404 = sext i32 %385 to i64, !dbg !53
  %405 = getelementptr float, ptr addrspace(1) %5, i64 %404, !dbg !53
  %406 = sext i32 %386 to i64, !dbg !53
  %407 = getelementptr float, ptr addrspace(1) %5, i64 %406, !dbg !53
  %408 = sext i32 %387 to i64, !dbg !53
  %409 = getelementptr float, ptr addrspace(1) %5, i64 %408, !dbg !53
  %410 = sext i32 %388 to i64, !dbg !53
  %411 = getelementptr float, ptr addrspace(1) %5, i64 %410, !dbg !53
  %412 = sext i32 %389 to i64, !dbg !53
  %413 = getelementptr float, ptr addrspace(1) %5, i64 %412, !dbg !53
  %414 = sext i32 %390 to i64, !dbg !53
  %415 = getelementptr float, ptr addrspace(1) %5, i64 %414, !dbg !53
  %416 = sext i32 %391 to i64, !dbg !53
  %417 = getelementptr float, ptr addrspace(1) %5, i64 %416, !dbg !53
  %418 = sext i32 %392 to i64, !dbg !53
  %419 = getelementptr float, ptr addrspace(1) %5, i64 %418, !dbg !53
  %420 = sext i32 %393 to i64, !dbg !53
  %421 = getelementptr float, ptr addrspace(1) %5, i64 %420, !dbg !53
  %422 = sext i32 %394 to i64, !dbg !53
  %423 = getelementptr float, ptr addrspace(1) %5, i64 %422, !dbg !53
  %424 = sext i32 %395 to i64, !dbg !53
  %425 = getelementptr float, ptr addrspace(1) %5, i64 %424, !dbg !53
  %426 = sext i32 %396 to i64, !dbg !53
  %427 = getelementptr float, ptr addrspace(1) %5, i64 %426, !dbg !53
  %428 = sext i32 %397 to i64, !dbg !53
  %429 = getelementptr float, ptr addrspace(1) %5, i64 %428, !dbg !53
  %430 = shl i32 %11, 8, !dbg !54
  %431 = and i32 %430, 3840, !dbg !54
  %432 = or disjoint i32 %431, %19, !dbg !54
  %433 = and i32 %11, 255, !dbg !54
  %434 = lshr exact i32 %431, 4, !dbg !54
  %435 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %434, !dbg !54
  %436 = getelementptr float, ptr addrspace(3) %435, i32 %432, !dbg !54
  %437 = bitcast float %288 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %436, <1 x i32> %437, i1 true) #4, !dbg !54
  %438 = or disjoint i32 %432, 64, !dbg !54
  %439 = lshr i32 %438, 6, !dbg !54
  %440 = getelementptr float, ptr addrspace(3) @global_smem, i32 %439, !dbg !54
  %441 = getelementptr float, ptr addrspace(3) %440, i32 %438, !dbg !54
  %442 = bitcast float %291 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %441, <1 x i32> %442, i1 true) #4, !dbg !54
  %443 = or disjoint i32 %432, 128, !dbg !54
  %444 = lshr i32 %443, 6, !dbg !54
  %445 = getelementptr float, ptr addrspace(3) @global_smem, i32 %444, !dbg !54
  %446 = getelementptr float, ptr addrspace(3) %445, i32 %443, !dbg !54
  %447 = bitcast float %294 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %446, <1 x i32> %447, i1 true) #4, !dbg !54
  %448 = or disjoint i32 %432, 192, !dbg !54
  %449 = lshr i32 %448, 6, !dbg !54
  %450 = getelementptr float, ptr addrspace(3) @global_smem, i32 %449, !dbg !54
  %451 = getelementptr float, ptr addrspace(3) %450, i32 %448, !dbg !54
  %452 = bitcast float %297 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %451, <1 x i32> %452, i1 true) #4, !dbg !54
  %453 = or disjoint i32 %432, 16, !dbg !54
  %454 = getelementptr float, ptr addrspace(3) %435, i32 %453, !dbg !54
  %455 = bitcast float %300 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %454, <1 x i32> %455, i1 true) #4, !dbg !54
  %456 = or disjoint i32 %432, 80, !dbg !54
  %457 = lshr i32 %456, 6, !dbg !54
  %458 = getelementptr float, ptr addrspace(3) @global_smem, i32 %457, !dbg !54
  %459 = getelementptr float, ptr addrspace(3) %458, i32 %456, !dbg !54
  %460 = bitcast float %303 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %459, <1 x i32> %460, i1 true) #4, !dbg !54
  %461 = or disjoint i32 %432, 144, !dbg !54
  %462 = lshr i32 %461, 6, !dbg !54
  %463 = getelementptr float, ptr addrspace(3) @global_smem, i32 %462, !dbg !54
  %464 = getelementptr float, ptr addrspace(3) %463, i32 %461, !dbg !54
  %465 = bitcast float %306 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %464, <1 x i32> %465, i1 true) #4, !dbg !54
  %466 = or disjoint i32 %432, 208, !dbg !54
  %467 = lshr i32 %466, 6, !dbg !54
  %468 = getelementptr float, ptr addrspace(3) @global_smem, i32 %467, !dbg !54
  %469 = getelementptr float, ptr addrspace(3) %468, i32 %466, !dbg !54
  %470 = bitcast float %309 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %469, <1 x i32> %470, i1 true) #4, !dbg !54
  %471 = or disjoint i32 %432, 32, !dbg !54
  %472 = getelementptr float, ptr addrspace(3) %435, i32 %471, !dbg !54
  %473 = bitcast float %312 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %472, <1 x i32> %473, i1 true) #4, !dbg !54
  %474 = or disjoint i32 %432, 96, !dbg !54
  %475 = lshr i32 %474, 6, !dbg !54
  %476 = getelementptr float, ptr addrspace(3) @global_smem, i32 %475, !dbg !54
  %477 = getelementptr float, ptr addrspace(3) %476, i32 %474, !dbg !54
  %478 = bitcast float %315 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %477, <1 x i32> %478, i1 true) #4, !dbg !54
  %479 = or disjoint i32 %432, 160, !dbg !54
  %480 = lshr i32 %479, 6, !dbg !54
  %481 = getelementptr float, ptr addrspace(3) @global_smem, i32 %480, !dbg !54
  %482 = getelementptr float, ptr addrspace(3) %481, i32 %479, !dbg !54
  %483 = bitcast float %318 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %482, <1 x i32> %483, i1 true) #4, !dbg !54
  %484 = or disjoint i32 %432, 224, !dbg !54
  %485 = lshr i32 %484, 6, !dbg !54
  %486 = getelementptr float, ptr addrspace(3) @global_smem, i32 %485, !dbg !54
  %487 = getelementptr float, ptr addrspace(3) %486, i32 %484, !dbg !54
  %488 = bitcast float %321 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %487, <1 x i32> %488, i1 true) #4, !dbg !54
  %489 = or disjoint i32 %432, 48, !dbg !54
  %490 = getelementptr float, ptr addrspace(3) %435, i32 %489, !dbg !54
  %491 = bitcast float %324 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %490, <1 x i32> %491, i1 true) #4, !dbg !54
  %492 = or disjoint i32 %432, 112, !dbg !54
  %493 = lshr i32 %492, 6, !dbg !54
  %494 = getelementptr float, ptr addrspace(3) @global_smem, i32 %493, !dbg !54
  %495 = getelementptr float, ptr addrspace(3) %494, i32 %492, !dbg !54
  %496 = bitcast float %327 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %495, <1 x i32> %496, i1 true) #4, !dbg !54
  %497 = or disjoint i32 %432, 176, !dbg !54
  %498 = lshr i32 %497, 6, !dbg !54
  %499 = getelementptr float, ptr addrspace(3) @global_smem, i32 %498, !dbg !54
  %500 = getelementptr float, ptr addrspace(3) %499, i32 %497, !dbg !54
  %501 = bitcast float %330 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %500, <1 x i32> %501, i1 true) #4, !dbg !54
  %502 = or disjoint i32 %432, 240, !dbg !54
  %503 = lshr i32 %502, 6, !dbg !54
  %504 = getelementptr float, ptr addrspace(3) @global_smem, i32 %503, !dbg !54
  %505 = getelementptr float, ptr addrspace(3) %504, i32 %502, !dbg !54
  %506 = bitcast float %333 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %505, <1 x i32> %506, i1 true) #4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %507 = lshr i32 %433, 6, !dbg !54
  %508 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %507, !dbg !54
  %509 = getelementptr inbounds float, ptr addrspace(3) %508, i32 %433, !dbg !54
  %510 = load i32, ptr addrspace(3) %509, align 4, !dbg !54
  %511 = or disjoint i32 %433, 256, !dbg !54
  %512 = lshr i32 %511, 6, !dbg !54
  %513 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %512, !dbg !54
  %514 = getelementptr inbounds float, ptr addrspace(3) %513, i32 %511, !dbg !54
  %515 = load i32, ptr addrspace(3) %514, align 4, !dbg !54
  %516 = or disjoint i32 %433, 512, !dbg !54
  %517 = lshr i32 %516, 6, !dbg !54
  %518 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %517, !dbg !54
  %519 = getelementptr inbounds float, ptr addrspace(3) %518, i32 %516, !dbg !54
  %520 = load i32, ptr addrspace(3) %519, align 4, !dbg !54
  %521 = or disjoint i32 %433, 768, !dbg !54
  %522 = lshr i32 %521, 6, !dbg !54
  %523 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %522, !dbg !54
  %524 = getelementptr inbounds float, ptr addrspace(3) %523, i32 %521, !dbg !54
  %525 = load i32, ptr addrspace(3) %524, align 4, !dbg !54
  %526 = or disjoint i32 %433, 1024, !dbg !54
  %527 = lshr i32 %526, 6, !dbg !54
  %528 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %527, !dbg !54
  %529 = getelementptr inbounds float, ptr addrspace(3) %528, i32 %526, !dbg !54
  %530 = load i32, ptr addrspace(3) %529, align 4, !dbg !54
  %531 = or disjoint i32 %433, 1280, !dbg !54
  %532 = lshr i32 %531, 6, !dbg !54
  %533 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %532, !dbg !54
  %534 = getelementptr inbounds float, ptr addrspace(3) %533, i32 %531, !dbg !54
  %535 = load i32, ptr addrspace(3) %534, align 4, !dbg !54
  %536 = or disjoint i32 %433, 1536, !dbg !54
  %537 = lshr i32 %536, 6, !dbg !54
  %538 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %537, !dbg !54
  %539 = getelementptr inbounds float, ptr addrspace(3) %538, i32 %536, !dbg !54
  %540 = load i32, ptr addrspace(3) %539, align 4, !dbg !54
  %541 = or disjoint i32 %433, 1792, !dbg !54
  %542 = lshr i32 %541, 6, !dbg !54
  %543 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %542, !dbg !54
  %544 = getelementptr inbounds float, ptr addrspace(3) %543, i32 %541, !dbg !54
  %545 = load i32, ptr addrspace(3) %544, align 4, !dbg !54
  %546 = or disjoint i32 %433, 2048, !dbg !54
  %547 = lshr i32 %546, 6, !dbg !54
  %548 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %547, !dbg !54
  %549 = getelementptr inbounds float, ptr addrspace(3) %548, i32 %546, !dbg !54
  %550 = load i32, ptr addrspace(3) %549, align 4, !dbg !54
  %551 = or disjoint i32 %433, 2304, !dbg !54
  %552 = lshr i32 %551, 6, !dbg !54
  %553 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %552, !dbg !54
  %554 = getelementptr inbounds float, ptr addrspace(3) %553, i32 %551, !dbg !54
  %555 = load i32, ptr addrspace(3) %554, align 4, !dbg !54
  %556 = or disjoint i32 %433, 2560, !dbg !54
  %557 = lshr i32 %556, 6, !dbg !54
  %558 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %557, !dbg !54
  %559 = getelementptr inbounds float, ptr addrspace(3) %558, i32 %556, !dbg !54
  %560 = load i32, ptr addrspace(3) %559, align 4, !dbg !54
  %561 = or disjoint i32 %433, 2816, !dbg !54
  %562 = lshr i32 %561, 6, !dbg !54
  %563 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %562, !dbg !54
  %564 = getelementptr inbounds float, ptr addrspace(3) %563, i32 %561, !dbg !54
  %565 = load i32, ptr addrspace(3) %564, align 4, !dbg !54
  %566 = or disjoint i32 %433, 3072, !dbg !54
  %567 = lshr i32 %566, 6, !dbg !54
  %568 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %567, !dbg !54
  %569 = getelementptr inbounds float, ptr addrspace(3) %568, i32 %566, !dbg !54
  %570 = load i32, ptr addrspace(3) %569, align 4, !dbg !54
  %571 = or disjoint i32 %433, 3328, !dbg !54
  %572 = lshr i32 %571, 6, !dbg !54
  %573 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %572, !dbg !54
  %574 = getelementptr inbounds float, ptr addrspace(3) %573, i32 %571, !dbg !54
  %575 = load i32, ptr addrspace(3) %574, align 4, !dbg !54
  %576 = or disjoint i32 %433, 3584, !dbg !54
  %577 = lshr i32 %576, 6, !dbg !54
  %578 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %577, !dbg !54
  %579 = getelementptr inbounds float, ptr addrspace(3) %578, i32 %576, !dbg !54
  %580 = load i32, ptr addrspace(3) %579, align 4, !dbg !54
  %581 = or disjoint i32 %433, 3840, !dbg !54
  %582 = lshr i32 %581, 6, !dbg !54
  %583 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %582, !dbg !54
  %584 = getelementptr inbounds float, ptr addrspace(3) %583, i32 %581, !dbg !54
  %585 = load i32, ptr addrspace(3) %584, align 4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %510, ptr addrspace(1) %399, i1 %204) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %515, ptr addrspace(1) %401, i1 %202) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %520, ptr addrspace(1) %403, i1 %199) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %525, ptr addrspace(1) %405, i1 %196) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %530, ptr addrspace(1) %407, i1 %193) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %535, ptr addrspace(1) %409, i1 %190) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %540, ptr addrspace(1) %411, i1 %187) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %545, ptr addrspace(1) %413, i1 %184) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %550, ptr addrspace(1) %415, i1 %181) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %555, ptr addrspace(1) %417, i1 %178) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %560, ptr addrspace(1) %419, i1 %175) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %565, ptr addrspace(1) %421, i1 %172) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %570, ptr addrspace(1) %423, i1 %169) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %575, ptr addrspace(1) %425, i1 %166) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %580, ptr addrspace(1) %427, i1 %163) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %585, ptr addrspace(1) %429, i1 %160) #4, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyvvxjqypy5rye6lgizmzepubvl2ov5mocgdwc3su7vr7r42stux.py", directory: "inductor_cache/yv")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 38, scope: !7)
!23 = !DILocation(line: 31, column: 49, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 43, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 62, scope: !7)
!28 = !DILocation(line: 31, column: 54, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 35, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 18, scope: !7)
!38 = !DILocation(line: 39, column: 26, scope: !7)
!39 = !DILocation(line: 41, column: 18, scope: !7)
!40 = !DILocation(line: 36, column: 18, scope: !7)
!41 = !DILocation(line: 44, column: 19, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 46, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 48, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 49, column: 34, scope: !7)
!50 = !DILocation(line: 49, column: 30, scope: !7)
!51 = !DILocation(line: 49, column: 46, scope: !7)
!52 = !DILocation(line: 49, column: 39, scope: !7)
!53 = !DILocation(line: 49, column: 25, scope: !7)
!54 = !DILocation(line: 49, column: 58, scope: !7)
!55 = !DILocation(line: 49, column: 4, scope: !7)
