; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_relu_threshold_backward_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 8, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 1, !dbg !12
  %18 = and i32 %17, 254, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = icmp slt i32 %19, 512, !dbg !14
  %.frozen = freeze i32 %19, !dbg !15
  %21 = sdiv i32 %.frozen, 16, !dbg !15
  %22 = srem i32 %21, 8, !dbg !16
  %23 = mul i32 %21, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %23, !dbg !17
  %.frozen17 = freeze i32 %19, !dbg !18
  %24 = sdiv i32 %.frozen17, 128, !dbg !18
  %25 = icmp slt i32 %22, 4, !dbg !19
  %26 = mul i32 %24, 128, !dbg !20
  %srem.decomposed = sub i32 %.frozen17, %26, !dbg !20
  %27 = shl nsw i32 %24, 6, !dbg !21
  %28 = add nsw i32 %27, %srem.decomposed, !dbg !22
  %29 = sext i32 %28 to i64, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !23
  %31 = and i1 %20, %25, !dbg !24
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %30, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #3, !dbg !25
  %33 = sext i32 %22 to i64, !dbg !26
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !26
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %31, i32 0, i1 %31) #3, !dbg !27
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %31, i32 0, i1 %31) #3, !dbg !27
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !28
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %31, i32 0, i1 %31) #3, !dbg !29
  %39 = bitcast i32 %38 to float, !dbg !29
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %31, i32 0, i1 %31) #3, !dbg !29
  %41 = bitcast i32 %40 to float, !dbg !29
  %42 = fadd float %39, 0x3EE4F8B580000000, !dbg !30
  %43 = fadd float %41, 0x3EE4F8B580000000, !dbg !30
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %44, 0, !dbg !31
  %45 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i = icmp eq i32 %45, 0, !dbg !31
  br i1 %.not.i, label %51, label %46, !dbg !31

46:                                               ; preds = %13
  br i1 %.not1.i, label %49, label %47, !dbg !31

47:                                               ; preds = %46
  %48 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

49:                                               ; preds = %46
  %50 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

51:                                               ; preds = %13
  br i1 %.not1.i, label %54, label %52, !dbg !31

52:                                               ; preds = %51
  %53 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

54:                                               ; preds = %51
  %55 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %47, %49, %52, %54
  %.0.i = phi float [ %48, %47 ], [ %50, %49 ], [ %53, %52 ], [ %55, %54 ], !dbg !31
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i1 = icmp eq i32 %56, 0, !dbg !31
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i4 = icmp eq i32 %57, 0, !dbg !31
  br i1 %.not.i1, label %63, label %58, !dbg !31

58:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %61, label %59, !dbg !31

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %43) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %43) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

63:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %66, label %64, !dbg !31

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.f(float %43) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.f(float %43) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

__nv_sqrtf.exit5:                                 ; preds = %59, %61, %64, %66
  %.0.i3 = phi float [ %60, %59 ], [ %62, %61 ], [ %65, %64 ], [ %67, %66 ], !dbg !31
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !32
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !32
  %70 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !33
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %31, i32 0, i1 %31) #3, !dbg !34
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %31, i32 0, i1 %31) #3, !dbg !34
  %73 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !35
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %31, i32 0, i1 %31) #3, !dbg !36
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %31, i32 0, i1 %31) #3, !dbg !36
  %76 = icmp sgt i32 %22, 3, !dbg !37
  %77 = add nsw i32 %22, -4, !dbg !38
  %78 = shl nsw i32 %77, 4, !dbg !39
  %79 = add nsw i32 %27, %.decomposed, !dbg !40
  %80 = add nsw i32 %79, %78, !dbg !41
  %81 = sext i32 %80 to i64, !dbg !42
  %82 = getelementptr float, ptr addrspace(1) %6, i64 %81, !dbg !42
  %83 = and i1 %20, %76, !dbg !43
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %82, i1 %83, i32 0, i1 %83, i32 0, i1 %83) #3, !dbg !44
  %85 = sext i32 %77 to i64, !dbg !45
  %86 = getelementptr float, ptr addrspace(1) %7, i64 %85, !dbg !45
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %83, i32 0, i1 %83) #3, !dbg !46
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %83, i32 0, i1 %83) #3, !dbg !46
  %89 = getelementptr float, ptr addrspace(1) %8, i64 %85, !dbg !47
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %83, i32 0, i1 %83) #3, !dbg !48
  %91 = bitcast i32 %90 to float, !dbg !48
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %83, i32 0, i1 %83) #3, !dbg !48
  %93 = bitcast i32 %92 to float, !dbg !48
  %94 = fadd float %91, 0x3EE4F8B580000000, !dbg !49
  %95 = fadd float %93, 0x3EE4F8B580000000, !dbg !49
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i6 = icmp eq i32 %96, 0, !dbg !50
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i9 = icmp eq i32 %97, 0, !dbg !50
  br i1 %.not.i6, label %103, label %98, !dbg !50

98:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %101, label %99, !dbg !50

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #3, !dbg !50
  br label %__nv_sqrtf.exit10, !dbg !50

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #3, !dbg !50
  br label %__nv_sqrtf.exit10, !dbg !50

103:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %106, label %104, !dbg !50

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #3, !dbg !50
  br label %__nv_sqrtf.exit10, !dbg !50

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #3, !dbg !50
  br label %__nv_sqrtf.exit10, !dbg !50

__nv_sqrtf.exit10:                                ; preds = %99, %101, %104, %106
  %.0.i8 = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !50
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i11 = icmp eq i32 %108, 0, !dbg !50
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i14 = icmp eq i32 %109, 0, !dbg !50
  br i1 %.not.i11, label %115, label %110, !dbg !50

110:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %113, label %111, !dbg !50

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #3, !dbg !50
  br label %__nv_sqrtf.exit15, !dbg !50

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #3, !dbg !50
  br label %__nv_sqrtf.exit15, !dbg !50

115:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %118, label %116, !dbg !50

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #3, !dbg !50
  br label %__nv_sqrtf.exit15, !dbg !50

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #3, !dbg !50
  br label %__nv_sqrtf.exit15, !dbg !50

__nv_sqrtf.exit15:                                ; preds = %111, %113, %116, %118
  %.0.i13 = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !50
  %120 = extractvalue { i32, i32 } %84, 1, !dbg !44
  %121 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !46
  %122 = insertelement <2 x i32> %121, i32 %88, i64 1, !dbg !46
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !46
  %124 = extractvalue { i32, i32 } %84, 0, !dbg !44
  %125 = extractvalue { i32, i32 } %32, 1, !dbg !25
  %126 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !27
  %127 = insertelement <2 x i32> %126, i32 %36, i64 1, !dbg !27
  %128 = bitcast <2 x i32> %127 to <2 x float>, !dbg !27
  %129 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !34
  %130 = insertelement <2 x i32> %129, i32 %72, i64 1, !dbg !34
  %131 = bitcast <2 x i32> %130 to <2 x float>, !dbg !34
  %132 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !36
  %133 = insertelement <2 x i32> %132, i32 %75, i64 1, !dbg !36
  %134 = bitcast <2 x i32> %133 to <2 x float>, !dbg !36
  %135 = extractvalue { i32, i32 } %32, 0, !dbg !25
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !51
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !51
  %138 = getelementptr float, ptr addrspace(1) %9, i64 %85, !dbg !52
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %83, i32 0, i1 %83) #3, !dbg !53
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %83, i32 0, i1 %83) #3, !dbg !53
  %141 = getelementptr float, ptr addrspace(1) %10, i64 %85, !dbg !54
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %83, i32 0, i1 %83) #3, !dbg !55
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %83, i32 0, i1 %83) #3, !dbg !55
  %144 = sext i32 %19 to i64, !dbg !56
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %144, !dbg !56
  %146 = getelementptr i1, ptr addrspace(1) %11, i64 %144, !dbg !57
  %147 = insertelement <2 x i32> poison, i32 %124, i64 0, !dbg !44
  %148 = insertelement <2 x i32> %147, i32 %120, i64 1, !dbg !44
  %149 = bitcast <2 x i32> %148 to <2 x float>, !dbg !44
  %150 = fsub <2 x float> %149, %123, !dbg !58
  %151 = insertelement <2 x i32> poison, i32 %135, i64 0, !dbg !25
  %152 = insertelement <2 x i32> %151, i32 %125, i64 1, !dbg !25
  %153 = bitcast <2 x i32> %152 to <2 x float>, !dbg !25
  %154 = fsub <2 x float> %153, %128, !dbg !59
  %155 = insertelement <2 x float> poison, float %68, i64 0, !dbg !60
  %156 = insertelement <2 x float> %155, float %69, i64 1, !dbg !60
  %157 = fmul <2 x float> %154, %156, !dbg !60
  %158 = fmul <2 x float> %157, %131, !dbg !61
  %159 = fadd <2 x float> %158, %134, !dbg !62
  %160 = insertelement <2 x float> poison, float %136, i64 0, !dbg !63
  %161 = insertelement <2 x float> %160, float %137, i64 1, !dbg !63
  %162 = fmul <2 x float> %150, %161, !dbg !63
  %163 = insertelement <2 x i32> poison, i32 %139, i64 0, !dbg !53
  %164 = insertelement <2 x i32> %163, i32 %140, i64 1, !dbg !53
  %165 = bitcast <2 x i32> %164 to <2 x float>, !dbg !53
  %166 = fmul <2 x float> %162, %165, !dbg !64
  %167 = insertelement <2 x i32> poison, i32 %142, i64 0, !dbg !55
  %168 = insertelement <2 x i32> %167, i32 %143, i64 1, !dbg !55
  %169 = bitcast <2 x i32> %168 to <2 x float>, !dbg !55
  %170 = fadd <2 x float> %166, %169, !dbg !65
  %171 = insertelement <2 x i1> poison, i1 %25, i64 0, !dbg !66
  %172 = shufflevector <2 x i1> %171, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !66
  %173 = select <2 x i1> %172, <2 x float> %159, <2 x float> %170, !dbg !66
  %174 = fcmp olt <2 x float> %173, zeroinitializer, !dbg !67
  %175 = select <2 x i1> %174, <2 x float> zeroinitializer, <2 x float> %173, !dbg !71
  %176 = fcmp ole <2 x float> %175, zeroinitializer, !dbg !72
  %bc = bitcast <2 x float> %175 to <2 x i32>, !dbg !73
  %177 = extractelement <2 x i32> %bc, i64 0, !dbg !73
  %bc16 = bitcast <2 x float> %175 to <2 x i32>, !dbg !73
  %178 = extractelement <2 x i32> %bc16, i64 1, !dbg !73
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %177, i32 %178, ptr addrspace(1) %145, i1 %20) #3, !dbg !73
  %179 = zext <2 x i1> %176 to <2 x i8>, !dbg !74
  %180 = bitcast <2 x i8> %179 to i16, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %180, ptr addrspace(1) %146, i1 %20) #3, !dbg !74
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctlfrh443hkssvx5vv7nynqk2wtfuwetxmw22qepsw7nx5wnbo7o.py", directory: "inductor_cache/tl")
!4 = !{ptr @triton_poi_fused_cat_relu_threshold_backward_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_relu_threshold_backward_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_relu_threshold_backward_2", linkageName: "triton_poi_fused_cat_relu_threshold_backward_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 48, scope: !7)
!22 = !DILocation(line: 33, column: 45, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 60, scope: !7)
!25 = !DILocation(line: 33, column: 53, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 36, column: 30, scope: !7)
!29 = !DILocation(line: 36, column: 35, scope: !7)
!30 = !DILocation(line: 38, column: 19, scope: !7)
!31 = !DILocation(line: 39, column: 27, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 45, column: 31, scope: !7)
!34 = !DILocation(line: 45, column: 36, scope: !7)
!35 = !DILocation(line: 47, column: 31, scope: !7)
!36 = !DILocation(line: 47, column: 36, scope: !7)
!37 = !DILocation(line: 51, column: 20, scope: !7)
!38 = !DILocation(line: 54, column: 47, scope: !7)
!39 = !DILocation(line: 54, column: 40, scope: !7)
!40 = !DILocation(line: 54, column: 36, scope: !7)
!41 = !DILocation(line: 54, column: 53, scope: !7)
!42 = !DILocation(line: 54, column: 31, scope: !7)
!43 = !DILocation(line: 54, column: 69, scope: !7)
!44 = !DILocation(line: 54, column: 61, scope: !7)
!45 = !DILocation(line: 55, column: 31, scope: !7)
!46 = !DILocation(line: 55, column: 43, scope: !7)
!47 = !DILocation(line: 57, column: 31, scope: !7)
!48 = !DILocation(line: 57, column: 43, scope: !7)
!49 = !DILocation(line: 59, column: 20, scope: !7)
!50 = !DILocation(line: 60, column: 27, scope: !7)
!51 = !DILocation(line: 62, column: 20, scope: !7)
!52 = !DILocation(line: 66, column: 31, scope: !7)
!53 = !DILocation(line: 66, column: 43, scope: !7)
!54 = !DILocation(line: 68, column: 31, scope: !7)
!55 = !DILocation(line: 68, column: 43, scope: !7)
!56 = !DILocation(line: 77, column: 28, scope: !7)
!57 = !DILocation(line: 78, column: 25, scope: !7)
!58 = !DILocation(line: 56, column: 20, scope: !7)
!59 = !DILocation(line: 35, column: 18, scope: !7)
!60 = !DILocation(line: 44, column: 19, scope: !7)
!61 = !DILocation(line: 46, column: 20, scope: !7)
!62 = !DILocation(line: 48, column: 20, scope: !7)
!63 = !DILocation(line: 65, column: 20, scope: !7)
!64 = !DILocation(line: 67, column: 20, scope: !7)
!65 = !DILocation(line: 69, column: 20, scope: !7)
!66 = !DILocation(line: 0, scope: !7)
!67 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !70)
!68 = distinct !DILexicalBlockFile(scope: !7, file: !69, discriminator: 0)
!69 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!70 = !DILocation(line: 74, column: 42, scope: !7)
!71 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !70)
!72 = !DILocation(line: 76, column: 21, scope: !7)
!73 = !DILocation(line: 77, column: 40, scope: !7)
!74 = !DILocation(line: 78, column: 37, scope: !7)
!75 = !DILocation(line: 78, column: 4, scope: !7)
