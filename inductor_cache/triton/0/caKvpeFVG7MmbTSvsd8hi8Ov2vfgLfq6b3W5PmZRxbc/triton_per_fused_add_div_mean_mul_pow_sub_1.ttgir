#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#loc = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":19:0)
#loc1 = loc(unknown)
#loc31 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":57:59)
#loc41 = loc(callsite(#loc1 at #loc31))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_div_mean_mul_pow_sub_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant 2.560000e+02 : f32 loc(#loc1)
    %cst_0 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_1 = arith.constant dense<8.99999984E-4> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<9.99999974E-5> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<2.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc2)
    %1 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc3)
    %2 = tt.addptr %1, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc3)
    %3 = tt.load %2 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc4)
    %4 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc5)
    %5 = tt.addptr %4, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc5)
    %6 = tt.load %5 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc6)
    %7 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc7)
    %9 = tt.load %8 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc9)
    %12 = tt.load %11 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc11)
    %15 = tt.load %14 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc12)
    %16 = arith.mulf %3, %6 : tensor<256xf32, #blocked> loc(#loc13)
    %17 = arith.mulf %16, %cst_3 : tensor<256xf32, #blocked> loc(#loc14)
    %18 = arith.addf %17, %cst_2 : tensor<256xf32, #blocked> loc(#loc15)
    %19 = arith.subf %9, %16 : tensor<256xf32, #blocked> loc(#loc16)
    %20 = arith.mulf %19, %cst_3 : tensor<256xf32, #blocked> loc(#loc17)
    %21 = arith.addf %20, %cst_1 : tensor<256xf32, #blocked> loc(#loc18)
    %22 = arith.mulf %18, %21 : tensor<256xf32, #blocked> loc(#loc19)
    %23 = arith.mulf %3, %3 : tensor<256xf32, #blocked> loc(#loc20)
    %24 = arith.mulf %6, %6 : tensor<256xf32, #blocked> loc(#loc21)
    %25 = arith.addf %23, %24 : tensor<256xf32, #blocked> loc(#loc22)
    %26 = arith.addf %25, %cst_2 : tensor<256xf32, #blocked> loc(#loc23)
    %27 = arith.subf %12, %23 : tensor<256xf32, #blocked> loc(#loc24)
    %28 = arith.subf %15, %24 : tensor<256xf32, #blocked> loc(#loc25)
    %29 = arith.addf %27, %28 : tensor<256xf32, #blocked> loc(#loc26)
    %30 = arith.addf %29, %cst_1 : tensor<256xf32, #blocked> loc(#loc27)
    %31 = arith.mulf %26, %30 : tensor<256xf32, #blocked> loc(#loc28)
    %32 = arith.divf %22, %31 : tensor<256xf32, #blocked> loc(#loc29)
    %33 = "tt.reduce"(%32) <{axis = 0 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc31)), %arg8: f32 loc(callsite(#loc1 at #loc31))):
      %39 = arith.addf %arg7, %arg8 : f32 loc(#loc44)
      tt.reduce.return %39 : f32 loc(#loc40)
    }) : (tensor<256xf32, #blocked>) -> f32 loc(#loc40)
    %34 = arith.addf %33, %cst_0 : f32 loc(#loc43)
    %35 = arith.divf %34, %cst : f32 loc(#loc35)
    %36 = tt.splat %35 : f32 -> tensor<1xf32, #blocked1> loc(#loc35)
    gpu.barrier loc(#loc36)
    %37 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc37)
    %38 = tt.splat %37 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc37)
    tt.store %38, %36 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc38)
    tt.return loc(#loc39)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":27:26)
#loc3 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":31:30)
#loc4 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":31:35)
#loc5 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":32:30)
#loc6 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":32:35)
#loc7 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":33:30)
#loc8 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":33:35)
#loc9 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":34:31)
#loc10 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":34:36)
#loc11 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":35:31)
#loc12 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":35:36)
#loc13 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":36:18)
#loc14 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":38:18)
#loc15 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":40:18)
#loc16 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":41:18)
#loc17 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":42:18)
#loc18 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":44:19)
#loc19 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":45:19)
#loc20 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":46:19)
#loc21 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":47:19)
#loc22 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":48:20)
#loc23 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":49:20)
#loc24 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":50:20)
#loc25 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":51:20)
#loc26 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":52:20)
#loc27 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":53:20)
#loc28 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":54:20)
#loc29 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":55:20)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc34 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":57:45)
#loc35 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":59:20)
#loc36 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":60:4)
#loc37 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":61:28)
#loc38 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":61:63)
#loc39 = loc("inductor_cache/tm/ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py":61:4)
#loc40 = loc(callsite(#loc30 at #loc31))
#loc42 = loc(callsite(#loc32 at #loc30))
#loc43 = loc(callsite(#loc33 at #loc34))
#loc44 = loc(callsite(#loc42 at #loc31))
