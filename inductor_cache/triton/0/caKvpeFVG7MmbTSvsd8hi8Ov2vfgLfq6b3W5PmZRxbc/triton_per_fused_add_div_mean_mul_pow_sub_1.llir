; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_div_mean_mul_pow_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %9 = and i32 %8, 31, !dbg !10
  %10 = lshr i32 %8, 5, !dbg !10
  %11 = shl i32 %8, 2, !dbg !10
  %12 = and i32 %11, 252, !dbg !10
  %13 = zext nneg i32 %12 to i64, !dbg !11
  %14 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !11
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %14, i1 true) #3, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0, !dbg !12
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1, !dbg !12
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2, !dbg !12
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3, !dbg !12
  %20 = bitcast i32 %16 to float, !dbg !12
  %21 = bitcast i32 %17 to float, !dbg !12
  %22 = bitcast i32 %18 to float, !dbg !12
  %23 = bitcast i32 %19 to float, !dbg !12
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %13, !dbg !13
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !14
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !14
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !14
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !14
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !14
  %30 = bitcast i32 %26 to float, !dbg !14
  %31 = bitcast i32 %27 to float, !dbg !14
  %32 = bitcast i32 %28 to float, !dbg !14
  %33 = bitcast i32 %29 to float, !dbg !14
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %13, !dbg !15
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !16
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !16
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !16
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !16
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !16
  %40 = bitcast i32 %36 to float, !dbg !16
  %41 = bitcast i32 %37 to float, !dbg !16
  %42 = bitcast i32 %38 to float, !dbg !16
  %43 = bitcast i32 %39 to float, !dbg !16
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %13, !dbg !17
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !18
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !18
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !18
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !18
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !18
  %50 = bitcast i32 %46 to float, !dbg !18
  %51 = bitcast i32 %47 to float, !dbg !18
  %52 = bitcast i32 %48 to float, !dbg !18
  %53 = bitcast i32 %49 to float, !dbg !18
  %54 = getelementptr float, ptr addrspace(1) %5, i64 %13, !dbg !19
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !20
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !20
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !20
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !20
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !20
  %60 = bitcast i32 %56 to float, !dbg !20
  %61 = bitcast i32 %57 to float, !dbg !20
  %62 = bitcast i32 %58 to float, !dbg !20
  %63 = bitcast i32 %59 to float, !dbg !20
  %64 = fmul float %20, %30, !dbg !21
  %65 = fmul float %21, %31, !dbg !21
  %66 = fmul float %22, %32, !dbg !21
  %67 = fmul float %23, %33, !dbg !21
  %68 = fmul float %64, 2.000000e+00, !dbg !22
  %69 = fmul float %65, 2.000000e+00, !dbg !22
  %70 = fmul float %66, 2.000000e+00, !dbg !22
  %71 = fmul float %67, 2.000000e+00, !dbg !22
  %72 = fadd float %68, 0x3F1A36E2E0000000, !dbg !23
  %73 = fadd float %69, 0x3F1A36E2E0000000, !dbg !23
  %74 = fadd float %70, 0x3F1A36E2E0000000, !dbg !23
  %75 = fadd float %71, 0x3F1A36E2E0000000, !dbg !23
  %76 = fsub float %40, %64, !dbg !24
  %77 = fsub float %41, %65, !dbg !24
  %78 = fsub float %42, %66, !dbg !24
  %79 = fsub float %43, %67, !dbg !24
  %80 = fmul float %76, 2.000000e+00, !dbg !25
  %81 = fmul float %77, 2.000000e+00, !dbg !25
  %82 = fmul float %78, 2.000000e+00, !dbg !25
  %83 = fmul float %79, 2.000000e+00, !dbg !25
  %84 = fadd float %80, 0x3F4D7DBF40000000, !dbg !26
  %85 = fadd float %81, 0x3F4D7DBF40000000, !dbg !26
  %86 = fadd float %82, 0x3F4D7DBF40000000, !dbg !26
  %87 = fadd float %83, 0x3F4D7DBF40000000, !dbg !26
  %88 = fmul float %72, %84, !dbg !27
  %89 = fmul float %73, %85, !dbg !27
  %90 = fmul float %74, %86, !dbg !27
  %91 = fmul float %75, %87, !dbg !27
  %92 = fmul float %20, %20, !dbg !28
  %93 = fmul float %21, %21, !dbg !28
  %94 = fmul float %22, %22, !dbg !28
  %95 = fmul float %23, %23, !dbg !28
  %96 = fmul float %30, %30, !dbg !29
  %97 = fmul float %31, %31, !dbg !29
  %98 = fmul float %32, %32, !dbg !29
  %99 = fmul float %33, %33, !dbg !29
  %100 = fadd float %92, %96, !dbg !30
  %101 = fadd float %93, %97, !dbg !30
  %102 = fadd float %94, %98, !dbg !30
  %103 = fadd float %95, %99, !dbg !30
  %104 = fadd float %100, 0x3F1A36E2E0000000, !dbg !31
  %105 = fadd float %101, 0x3F1A36E2E0000000, !dbg !31
  %106 = fadd float %102, 0x3F1A36E2E0000000, !dbg !31
  %107 = fadd float %103, 0x3F1A36E2E0000000, !dbg !31
  %108 = fsub float %50, %92, !dbg !32
  %109 = fsub float %51, %93, !dbg !32
  %110 = fsub float %52, %94, !dbg !32
  %111 = fsub float %53, %95, !dbg !32
  %112 = fsub float %60, %96, !dbg !33
  %113 = fsub float %61, %97, !dbg !33
  %114 = fsub float %62, %98, !dbg !33
  %115 = fsub float %63, %99, !dbg !33
  %116 = fadd float %108, %112, !dbg !34
  %117 = fadd float %109, %113, !dbg !34
  %118 = fadd float %110, %114, !dbg !34
  %119 = fadd float %111, %115, !dbg !34
  %120 = fadd float %116, 0x3F4D7DBF40000000, !dbg !35
  %121 = fadd float %117, 0x3F4D7DBF40000000, !dbg !35
  %122 = fadd float %118, 0x3F4D7DBF40000000, !dbg !35
  %123 = fadd float %119, 0x3F4D7DBF40000000, !dbg !35
  %124 = fmul float %104, %120, !dbg !36
  %125 = fmul float %105, %121, !dbg !36
  %126 = fmul float %106, %122, !dbg !36
  %127 = fmul float %107, %123, !dbg !36
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float %124) #3, !dbg !37
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float %125) #3, !dbg !37
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float %126) #3, !dbg !37
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %91, float %127) #3, !dbg !37
  %132 = fadd float %128, %129, !dbg !38
  %133 = fadd float %132, %130, !dbg !38
  %134 = fadd float %133, %131, !dbg !38
  %135 = bitcast float %134 to i32, !dbg !43
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 16, i32 31), !dbg !43
  %137 = bitcast i32 %136 to float, !dbg !43
  %138 = fadd float %134, %137, !dbg !38
  %139 = bitcast float %138 to i32, !dbg !43
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 8, i32 31), !dbg !43
  %141 = bitcast i32 %140 to float, !dbg !43
  %142 = fadd float %138, %141, !dbg !38
  %143 = bitcast float %142 to i32, !dbg !43
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 4, i32 31), !dbg !43
  %145 = bitcast i32 %144 to float, !dbg !43
  %146 = fadd float %142, %145, !dbg !38
  %147 = bitcast float %146 to i32, !dbg !43
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 2, i32 31), !dbg !43
  %149 = bitcast i32 %148 to float, !dbg !43
  %150 = fadd float %146, %149, !dbg !38
  %151 = bitcast float %150 to i32, !dbg !43
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 1, i32 31), !dbg !43
  %153 = bitcast i32 %152 to float, !dbg !43
  %154 = fadd float %150, %153, !dbg !38
  %155 = icmp eq i32 %9, 0, !dbg !43
  %156 = and i32 %10, 1, !dbg !43
  %157 = getelementptr float, ptr addrspace(3) @global_smem, i32 %156, !dbg !43
  %158 = bitcast float %154 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %158, i1 %155) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %159 = icmp slt i32 %8, 2, !dbg !43
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !43
  %161 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %160, i1 %159) #3, !dbg !43
  %162 = bitcast i32 %161 to float, !dbg !43
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 1, i32 31), !dbg !43
  %164 = bitcast i32 %163 to float, !dbg !43
  %165 = fadd float %162, %164, !dbg !38
  %166 = and i32 %8, 1, !dbg !43
  %167 = icmp eq i32 %166, 0, !dbg !43
  %168 = and i1 %159, %167, !dbg !43
  %169 = bitcast float %165 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %169, i1 %168) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %170 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !43
  %171 = fadd float %170, 0.000000e+00, !dbg !44
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %171, float 2.560000e+02) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %urem = and i32 %8, 63, !dbg !50
  %173 = icmp eq i32 %urem, 0, !dbg !50
  %174 = bitcast float %172 to i32, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %174, ptr addrspace(1) %0, i1 %173) #3, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctmaprbis5w5wypjqj4dsjodv6snu43auxfmkthlhiupvee4tw45.py", directory: "inductor_cache/tm")
!4 = !{ptr @triton_per_fused_add_div_mean_mul_pow_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_mean_mul_pow_sub_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_mean_mul_pow_sub_1", linkageName: "triton_per_fused_add_div_mean_mul_pow_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 30, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 33, column: 30, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 34, column: 31, scope: !7)
!18 = !DILocation(line: 34, column: 36, scope: !7)
!19 = !DILocation(line: 35, column: 31, scope: !7)
!20 = !DILocation(line: 35, column: 36, scope: !7)
!21 = !DILocation(line: 36, column: 18, scope: !7)
!22 = !DILocation(line: 38, column: 18, scope: !7)
!23 = !DILocation(line: 40, column: 18, scope: !7)
!24 = !DILocation(line: 41, column: 18, scope: !7)
!25 = !DILocation(line: 42, column: 18, scope: !7)
!26 = !DILocation(line: 44, column: 19, scope: !7)
!27 = !DILocation(line: 45, column: 19, scope: !7)
!28 = !DILocation(line: 46, column: 19, scope: !7)
!29 = !DILocation(line: 47, column: 19, scope: !7)
!30 = !DILocation(line: 48, column: 20, scope: !7)
!31 = !DILocation(line: 49, column: 20, scope: !7)
!32 = !DILocation(line: 50, column: 20, scope: !7)
!33 = !DILocation(line: 51, column: 20, scope: !7)
!34 = !DILocation(line: 52, column: 20, scope: !7)
!35 = !DILocation(line: 53, column: 20, scope: !7)
!36 = !DILocation(line: 54, column: 20, scope: !7)
!37 = !DILocation(line: 55, column: 20, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !42)
!39 = distinct !DILexicalBlockFile(scope: !41, file: !40, discriminator: 0)
!40 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!41 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!42 = !DILocation(line: 57, column: 59, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !41, inlinedAt: !42)
!44 = !DILocation(line: 73, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 57, column: 45, scope: !7)
!48 = !DILocation(line: 59, column: 20, scope: !7)
!49 = !DILocation(line: 60, column: 4, scope: !7)
!50 = !DILocation(line: 61, column: 63, scope: !7)
!51 = !DILocation(line: 61, column: 4, scope: !7)
