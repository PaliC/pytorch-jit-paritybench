; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %17 = sdiv i32 %.frozen, 64, !dbg !14
  %18 = mul i32 %17, 64, !dbg !15
  %.decomposed = sub i32 %.frozen, %18, !dbg !15
  %19 = srem i32 %17, 16, !dbg !16
  %20 = sdiv i32 %16, 1024, !dbg !17
  %21 = sext i32 %.decomposed to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !18
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !20
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !21
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !21
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !21
  %28 = bitcast i32 %26 to float, !dbg !21
  %29 = bitcast i32 %27 to float, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !22
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !24
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !25
  %34 = icmp slt i32 %.decomposed, 48, !dbg !26
  %35 = mul nsw i32 %17, 48, !dbg !27
  %36 = add nsw i32 %35, %.decomposed, !dbg !28
  %37 = sext i32 %36 to i64, !dbg !29
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !29
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %38, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #3, !dbg !30
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !31
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %40, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #3, !dbg !32
  %42 = icmp sgt i32 %.decomposed, 47, !dbg !33
  %43 = shl nsw i32 %19, 5, !dbg !34
  %44 = shl nsw i32 %20, 10, !dbg !35
  %45 = add nsw i32 %.decomposed, -48, !dbg !36
  %46 = add i32 %45, %44, !dbg !37
  %47 = add i32 %46, %43, !dbg !38
  %48 = sext i32 %47 to i64, !dbg !39
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !39
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %49, i1 %42, i32 0, i1 %42, i32 0, i1 %42) #3, !dbg !40
  %51 = add i32 %46, 16, !dbg !41
  %52 = add i32 %51, %43, !dbg !42
  %53 = sext i32 %52 to i64, !dbg !43
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !43
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %54, i1 %42, i32 0, i1 %42, i32 0, i1 %42) #3, !dbg !44
  %56 = add i32 %46, 512, !dbg !45
  %57 = add i32 %56, %43, !dbg !46
  %58 = sext i32 %57 to i64, !dbg !47
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !47
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %59, i1 %42, i32 0, i1 %42, i32 0, i1 %42) #3, !dbg !48
  %61 = add i32 %46, 528, !dbg !49
  %62 = add i32 %61, %43, !dbg !50
  %63 = sext i32 %62 to i64, !dbg !51
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !51
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %64, i1 %42, i32 0, i1 %42, i32 0, i1 %42) #3, !dbg !52
  %66 = fadd float %28, 0x3F50624DE0000000, !dbg !53
  %67 = fadd float %29, 0x3F50624DE0000000, !dbg !53
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i = icmp eq i32 %68, 0, !dbg !54
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i = icmp eq i32 %69, 0, !dbg !54
  br i1 %.not.i, label %75, label %70, !dbg !54

70:                                               ; preds = %10
  br i1 %.not1.i, label %73, label %71, !dbg !54

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

75:                                               ; preds = %10
  br i1 %.not1.i, label %78, label %76, !dbg !54

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

__nv_sqrtf.exit:                                  ; preds = %71, %73, %76, %78
  %.0.i = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !54
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i1 = icmp eq i32 %80, 0, !dbg !54
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i4 = icmp eq i32 %81, 0, !dbg !54
  br i1 %.not.i1, label %87, label %82, !dbg !54

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %85, label %83, !dbg !54

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %90, label %88, !dbg !54

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

__nv_sqrtf.exit5:                                 ; preds = %83, %85, %88, %90
  %.0.i3 = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !54
  %92 = extractvalue { i32, i32 } %39, 1, !dbg !30
  %93 = bitcast i32 %92 to float, !dbg !30
  %94 = extractvalue { i32, i32 } %41, 1, !dbg !32
  %95 = bitcast i32 %94 to float, !dbg !32
  %96 = fadd float %93, %95, !dbg !55
  %97 = extractvalue { i32, i32 } %55, 1, !dbg !44
  %98 = bitcast i32 %97 to float, !dbg !44
  %99 = extractvalue { i32, i32 } %50, 1, !dbg !40
  %100 = bitcast i32 %99 to float, !dbg !40
  %101 = fcmp ogt float %98, %100, !dbg !56
  %102 = fcmp uno float %98, 0.000000e+00, !dbg !60
  %103 = or i1 %101, %102, !dbg !61
  %104 = select i1 %103, float %98, float %100, !dbg !62
  %105 = extractvalue { i32, i32 } %60, 1, !dbg !48
  %106 = bitcast i32 %105 to float, !dbg !48
  %107 = fcmp olt float %104, %106, !dbg !63
  %108 = fcmp uno float %106, 0.000000e+00, !dbg !65
  %109 = or i1 %108, %107, !dbg !66
  %110 = select i1 %109, float %106, float %104, !dbg !67
  %111 = extractvalue { i32, i32 } %65, 1, !dbg !52
  %112 = bitcast i32 %111 to float, !dbg !52
  %113 = fcmp olt float %110, %112, !dbg !68
  %114 = fcmp uno float %112, 0.000000e+00, !dbg !70
  %115 = or i1 %114, %113, !dbg !71
  %116 = select i1 %115, float %112, float %110, !dbg !72
  %117 = select i1 %34, float %96, float %116, !dbg !73
  %118 = extractvalue { i32, i32 } %23, 1, !dbg !19
  %119 = bitcast i32 %118 to float, !dbg !19
  %120 = fsub float %117, %119, !dbg !74
  %121 = extractvalue { i32, i32 } %39, 0, !dbg !30
  %122 = bitcast i32 %121 to float, !dbg !30
  %123 = extractvalue { i32, i32 } %41, 0, !dbg !32
  %124 = bitcast i32 %123 to float, !dbg !32
  %125 = fadd float %122, %124, !dbg !55
  %126 = extractvalue { i32, i32 } %55, 0, !dbg !44
  %127 = bitcast i32 %126 to float, !dbg !44
  %128 = extractvalue { i32, i32 } %50, 0, !dbg !40
  %129 = bitcast i32 %128 to float, !dbg !40
  %130 = fcmp ogt float %127, %129, !dbg !56
  %131 = fcmp uno float %127, 0.000000e+00, !dbg !60
  %132 = or i1 %130, %131, !dbg !61
  %133 = select i1 %132, float %127, float %129, !dbg !62
  %134 = extractvalue { i32, i32 } %60, 0, !dbg !48
  %135 = bitcast i32 %134 to float, !dbg !48
  %136 = fcmp olt float %133, %135, !dbg !63
  %137 = fcmp uno float %135, 0.000000e+00, !dbg !65
  %138 = or i1 %137, %136, !dbg !66
  %139 = select i1 %138, float %135, float %133, !dbg !67
  %140 = extractvalue { i32, i32 } %65, 0, !dbg !52
  %141 = bitcast i32 %140 to float, !dbg !52
  %142 = fcmp olt float %139, %141, !dbg !68
  %143 = fcmp uno float %141, 0.000000e+00, !dbg !70
  %144 = or i1 %143, %142, !dbg !71
  %145 = select i1 %144, float %141, float %139, !dbg !72
  %146 = select i1 %34, float %125, float %145, !dbg !73
  %147 = extractvalue { i32, i32 } %23, 0, !dbg !19
  %148 = bitcast i32 %147 to float, !dbg !19
  %149 = fsub float %146, %148, !dbg !74
  %150 = extractvalue { i32, i32 } %33, 1, !dbg !25
  %151 = bitcast i32 %150 to float, !dbg !25
  %152 = extractvalue { i32, i32 } %33, 0, !dbg !25
  %153 = bitcast i32 %152 to float, !dbg !25
  %154 = extractvalue { i32, i32 } %31, 1, !dbg !23
  %155 = bitcast i32 %154 to float, !dbg !23
  %156 = extractvalue { i32, i32 } %31, 0, !dbg !23
  %157 = bitcast i32 %156 to float, !dbg !23
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !75
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !75
  %160 = fmul float %149, %158, !dbg !76
  %161 = fmul float %120, %159, !dbg !76
  %162 = fmul float %160, %157, !dbg !77
  %163 = fmul float %161, %155, !dbg !77
  %164 = fadd float %162, %153, !dbg !78
  %165 = fadd float %163, %151, !dbg !78
  %166 = fcmp olt float %164, 0.000000e+00, !dbg !79
  %167 = fcmp olt float %165, 0.000000e+00, !dbg !79
  %168 = select i1 %166, float 0.000000e+00, float %164, !dbg !81
  %169 = select i1 %167, float 0.000000e+00, float %165, !dbg !81
  %170 = sext i32 %16 to i64, !dbg !82
  %171 = getelementptr float, ptr addrspace(1) %7, i64 %170, !dbg !82
  %172 = bitcast float %146 to i32, !dbg !83
  %173 = bitcast float %117 to i32, !dbg !83
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %172, i32 %173, ptr addrspace(1) %171, i1 true) #3, !dbg !83
  %174 = getelementptr float, ptr addrspace(1) %8, i64 %170, !dbg !84
  %175 = bitcast float %168 to i32, !dbg !85
  %176 = bitcast float %169 to i32, !dbg !85
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %175, i32 %176, ptr addrspace(1) %174, i1 true) #3, !dbg !85
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cplxognptz45qd2pkyv454e2xzwyo6egnmgckeurj2qqjly7rgc5.py", directory: "inductor_cache/pl")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 27, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 31, scope: !7)
!19 = !DILocation(line: 29, column: 36, scope: !7)
!20 = !DILocation(line: 30, column: 31, scope: !7)
!21 = !DILocation(line: 30, column: 36, scope: !7)
!22 = !DILocation(line: 31, column: 31, scope: !7)
!23 = !DILocation(line: 31, column: 36, scope: !7)
!24 = !DILocation(line: 32, column: 31, scope: !7)
!25 = !DILocation(line: 32, column: 36, scope: !7)
!26 = !DILocation(line: 37, column: 18, scope: !7)
!27 = !DILocation(line: 38, column: 33, scope: !7)
!28 = !DILocation(line: 38, column: 39, scope: !7)
!29 = !DILocation(line: 38, column: 30, scope: !7)
!30 = !DILocation(line: 38, column: 45, scope: !7)
!31 = !DILocation(line: 39, column: 30, scope: !7)
!32 = !DILocation(line: 39, column: 35, scope: !7)
!33 = !DILocation(line: 43, column: 20, scope: !7)
!34 = !DILocation(line: 46, column: 34, scope: !7)
!35 = !DILocation(line: 46, column: 44, scope: !7)
!36 = !DILocation(line: 46, column: 58, scope: !7)
!37 = !DILocation(line: 46, column: 39, scope: !7)
!38 = !DILocation(line: 46, column: 50, scope: !7)
!39 = !DILocation(line: 46, column: 31, scope: !7)
!40 = !DILocation(line: 46, column: 64, scope: !7)
!41 = !DILocation(line: 47, column: 44, scope: !7)
!42 = !DILocation(line: 47, column: 55, scope: !7)
!43 = !DILocation(line: 47, column: 31, scope: !7)
!44 = !DILocation(line: 47, column: 69, scope: !7)
!45 = !DILocation(line: 49, column: 45, scope: !7)
!46 = !DILocation(line: 49, column: 56, scope: !7)
!47 = !DILocation(line: 49, column: 31, scope: !7)
!48 = !DILocation(line: 49, column: 70, scope: !7)
!49 = !DILocation(line: 51, column: 45, scope: !7)
!50 = !DILocation(line: 51, column: 56, scope: !7)
!51 = !DILocation(line: 51, column: 31, scope: !7)
!52 = !DILocation(line: 51, column: 70, scope: !7)
!53 = !DILocation(line: 58, column: 20, scope: !7)
!54 = !DILocation(line: 59, column: 27, scope: !7)
!55 = !DILocation(line: 40, column: 18, scope: !7)
!56 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !59)
!57 = distinct !DILexicalBlockFile(scope: !7, file: !58, discriminator: 0)
!58 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!59 = !DILocation(line: 48, column: 42, scope: !7)
!60 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !59)
!61 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !59)
!62 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !59)
!63 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !64)
!64 = !DILocation(line: 50, column: 42, scope: !7)
!65 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !64)
!66 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !64)
!67 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !64)
!68 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !69)
!69 = !DILocation(line: 52, column: 42, scope: !7)
!70 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !69)
!71 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !69)
!72 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !69)
!73 = !DILocation(line: 0, scope: !7)
!74 = !DILocation(line: 56, column: 20, scope: !7)
!75 = !DILocation(line: 61, column: 20, scope: !7)
!76 = !DILocation(line: 64, column: 20, scope: !7)
!77 = !DILocation(line: 65, column: 20, scope: !7)
!78 = !DILocation(line: 66, column: 20, scope: !7)
!79 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !80)
!80 = !DILocation(line: 68, column: 42, scope: !7)
!81 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !80)
!82 = !DILocation(line: 69, column: 25, scope: !7)
!83 = !DILocation(line: 69, column: 37, scope: !7)
!84 = !DILocation(line: 70, column: 25, scope: !7)
!85 = !DILocation(line: 70, column: 37, scope: !7)
!86 = !DILocation(line: 70, column: 4, scope: !7)
