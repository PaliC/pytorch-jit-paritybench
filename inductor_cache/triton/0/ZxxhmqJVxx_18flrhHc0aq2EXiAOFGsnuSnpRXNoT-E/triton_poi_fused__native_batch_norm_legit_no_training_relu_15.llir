; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = lshr i32 %11, 3, !dbg !12
  %15 = and i32 %14, 15, !dbg !12
  %16 = or disjoint i32 %15, 16, !dbg !12
  %17 = or disjoint i32 %10, %13, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %19 = shl i32 %18, 5, !dbg !15
  %20 = or disjoint i32 %19, %15, !dbg !16
  %21 = or disjoint i32 %19, %16, !dbg !16
  %22 = icmp slt i32 %20, 1024, !dbg !17
  %23 = icmp slt i32 %21, 1024, !dbg !17
  %.frozen = freeze i32 %17, !dbg !18
  %24 = sdiv i32 %.frozen, 512, !dbg !18
  %25 = mul i32 %24, 512, !dbg !19
  %.decomposed = sub i32 %.frozen, %25, !dbg !19
  %26 = shl i32 %20, 9, !dbg !20
  %27 = shl i32 %21, 9, !dbg !20
  %28 = shl i32 %24, 19, !dbg !21
  %29 = add i32 %28, %.decomposed, !dbg !22
  %30 = add i32 %29, %26, !dbg !23
  %31 = add i32 %29, %27, !dbg !23
  %32 = sext i32 %30 to i64, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !24
  %34 = sext i32 %31 to i64, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !24
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %22) #4, !dbg !25
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %23) #4, !dbg !25
  %38 = sext i32 %.decomposed to i64, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !26
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !28
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #4, !dbg !29
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !29
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !29
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !29
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !29
  %47 = bitcast i32 %43 to float, !dbg !29
  %48 = bitcast i32 %44 to float, !dbg !29
  %49 = bitcast i32 %45 to float, !dbg !29
  %50 = bitcast i32 %46 to float, !dbg !29
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !30
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #4, !dbg !31
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !32
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #4, !dbg !33
  %55 = fadd float %47, 0x3EE4F8B580000000, !dbg !34
  %56 = fadd float %48, 0x3EE4F8B580000000, !dbg !34
  %57 = fadd float %49, 0x3EE4F8B580000000, !dbg !34
  %58 = fadd float %50, 0x3EE4F8B580000000, !dbg !34
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %59, 0, !dbg !35
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %60, 0, !dbg !35
  br i1 %.not.i, label %66, label %61, !dbg !35

61:                                               ; preds = %8
  br i1 %.not1.i, label %64, label %62, !dbg !35

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

66:                                               ; preds = %8
  br i1 %.not1.i, label %69, label %67, !dbg !35

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %62, %64, %67, %69
  %.0.i = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !35
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i1 = icmp eq i32 %71, 0, !dbg !35
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i4 = icmp eq i32 %72, 0, !dbg !35
  br i1 %.not.i1, label %78, label %73, !dbg !35

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %76, label %74, !dbg !35

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %81, label %79, !dbg !35

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %74, %76, %79, %81
  %.0.i3 = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !35
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i6 = icmp eq i32 %83, 0, !dbg !35
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i9 = icmp eq i32 %84, 0, !dbg !35
  br i1 %.not.i6, label %90, label %85, !dbg !35

85:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %88, label %86, !dbg !35

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

90:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %93, label %91, !dbg !35

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

__nv_sqrtf.exit10:                                ; preds = %86, %88, %91, %93
  %.0.i8 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !35
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i11 = icmp eq i32 %95, 0, !dbg !35
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i14 = icmp eq i32 %96, 0, !dbg !35
  br i1 %.not.i11, label %102, label %97, !dbg !35

97:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %100, label %98, !dbg !35

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

102:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %105, label %103, !dbg !35

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

__nv_sqrtf.exit15:                                ; preds = %98, %100, %103, %105
  %.0.i13 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !35
  %107 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !25
  %108 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !27
  %109 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !25
  %110 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !27
  %111 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !25
  %112 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !27
  %113 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !25
  %114 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !27
  %115 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !25
  %116 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !25
  %117 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !25
  %118 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !25
  %119 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !33
  %120 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !33
  %121 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !33
  %122 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !33
  %123 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !31
  %124 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !31
  %125 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !31
  %126 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !31
  %127 = or disjoint i32 %19, %13, !dbg !16
  %128 = icmp slt i32 %127, 1024, !dbg !17
  %129 = or disjoint i32 %10, %16, !dbg !13
  %130 = or disjoint i32 %10, %15, !dbg !13
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !36
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !36
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !36
  %135 = insertelement <4 x i32> poison, i32 %108, i64 0, !dbg !27
  %136 = insertelement <4 x i32> %135, i32 %110, i64 1, !dbg !27
  %137 = insertelement <4 x i32> %136, i32 %112, i64 2, !dbg !27
  %138 = insertelement <4 x i32> %137, i32 %114, i64 3, !dbg !27
  %139 = bitcast <4 x i32> %138 to <4 x float>, !dbg !27
  %140 = shufflevector <4 x float> %139, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !27
  %141 = insertelement <8 x i32> poison, i32 %107, i64 0, !dbg !25
  %142 = insertelement <8 x i32> %141, i32 %109, i64 1, !dbg !25
  %143 = insertelement <8 x i32> %142, i32 %111, i64 2, !dbg !25
  %144 = insertelement <8 x i32> %143, i32 %113, i64 3, !dbg !25
  %145 = insertelement <8 x i32> %144, i32 %115, i64 4, !dbg !25
  %146 = insertelement <8 x i32> %145, i32 %116, i64 5, !dbg !25
  %147 = insertelement <8 x i32> %146, i32 %117, i64 6, !dbg !25
  %148 = insertelement <8 x i32> %147, i32 %118, i64 7, !dbg !25
  %149 = bitcast <8 x i32> %148 to <8 x float>, !dbg !25
  %150 = fsub <8 x float> %149, %140, !dbg !37
  %151 = insertelement <4 x i32> poison, i32 %119, i64 0, !dbg !33
  %152 = insertelement <4 x i32> %151, i32 %120, i64 1, !dbg !33
  %153 = insertelement <4 x i32> %152, i32 %121, i64 2, !dbg !33
  %154 = insertelement <4 x i32> %153, i32 %122, i64 3, !dbg !33
  %155 = bitcast <4 x i32> %154 to <4 x float>, !dbg !33
  %156 = shufflevector <4 x float> %155, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !33
  %157 = insertelement <4 x i32> poison, i32 %123, i64 0, !dbg !31
  %158 = insertelement <4 x i32> %157, i32 %124, i64 1, !dbg !31
  %159 = insertelement <4 x i32> %158, i32 %125, i64 2, !dbg !31
  %160 = insertelement <4 x i32> %159, i32 %126, i64 3, !dbg !31
  %161 = bitcast <4 x i32> %160 to <4 x float>, !dbg !31
  %162 = shufflevector <4 x float> %161, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !31
  %163 = insertelement <8 x float> poison, float %134, i64 0, !dbg !38
  %164 = insertelement <8 x float> %163, float %133, i64 1, !dbg !38
  %165 = insertelement <8 x float> %164, float %132, i64 2, !dbg !38
  %166 = insertelement <8 x float> %165, float %131, i64 3, !dbg !38
  %167 = shufflevector <8 x float> %166, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !38
  %168 = fmul <8 x float> %150, %167, !dbg !38
  %169 = fmul <8 x float> %168, %162, !dbg !39
  %170 = fadd <8 x float> %169, %156, !dbg !40
  %171 = fcmp olt <8 x float> %170, zeroinitializer, !dbg !41
  %172 = extractelement <8 x i1> %171, i64 7, !dbg !45
  %173 = extractelement <8 x float> %170, i64 7, !dbg !45
  %174 = select i1 %172, float 0.000000e+00, float %173, !dbg !45
  %175 = extractelement <8 x i1> %171, i64 6, !dbg !45
  %176 = extractelement <8 x float> %170, i64 6, !dbg !45
  %177 = select i1 %175, float 0.000000e+00, float %176, !dbg !45
  %178 = extractelement <8 x i1> %171, i64 5, !dbg !45
  %179 = extractelement <8 x float> %170, i64 5, !dbg !45
  %180 = select i1 %178, float 0.000000e+00, float %179, !dbg !45
  %181 = extractelement <8 x i1> %171, i64 4, !dbg !45
  %182 = extractelement <8 x float> %170, i64 4, !dbg !45
  %183 = select i1 %181, float 0.000000e+00, float %182, !dbg !45
  %184 = extractelement <8 x i1> %171, i64 3, !dbg !45
  %185 = extractelement <8 x float> %170, i64 3, !dbg !45
  %186 = select i1 %184, float 0.000000e+00, float %185, !dbg !45
  %187 = extractelement <8 x i1> %171, i64 2, !dbg !45
  %188 = extractelement <8 x float> %170, i64 2, !dbg !45
  %189 = select i1 %187, float 0.000000e+00, float %188, !dbg !45
  %190 = extractelement <8 x i1> %171, i64 1, !dbg !45
  %191 = extractelement <8 x float> %170, i64 1, !dbg !45
  %192 = select i1 %190, float 0.000000e+00, float %191, !dbg !45
  %193 = extractelement <8 x i1> %171, i64 0, !dbg !45
  %194 = extractelement <8 x float> %170, i64 0, !dbg !45
  %195 = select i1 %193, float 0.000000e+00, float %194, !dbg !45
  %196 = shl i32 %130, 10, !dbg !46
  %197 = shl i32 %129, 10, !dbg !46
  %198 = add i32 %127, %196, !dbg !47
  %199 = add i32 %127, %197, !dbg !47
  %200 = sext i32 %198 to i64, !dbg !48
  %201 = getelementptr float, ptr addrspace(1) %5, i64 %200, !dbg !48
  %202 = sext i32 %199 to i64, !dbg !48
  %203 = getelementptr float, ptr addrspace(1) %5, i64 %202, !dbg !48
  %204 = shl i32 %11, 7, !dbg !49
  %205 = and i32 %204, 896, !dbg !49
  %206 = or disjoint i32 %205, %15, !dbg !49
  %207 = and i32 %12, 508, !dbg !49
  %208 = lshr exact i32 %205, 5, !dbg !49
  %209 = add nuw nsw i32 %208, %206, !dbg !49
  %210 = zext nneg i32 %209 to i64, !dbg !49
  %211 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %210, !dbg !49
  %212 = bitcast float %174 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %212, i1 true) #4, !dbg !49
  %213 = or disjoint i32 %206, 32, !dbg !49
  %214 = lshr i32 %213, 5, !dbg !49
  %215 = add nuw nsw i32 %214, %213, !dbg !49
  %216 = zext nneg i32 %215 to i64, !dbg !49
  %217 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %216, !dbg !49
  %218 = bitcast float %177 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %218, i1 true) #4, !dbg !49
  %219 = or disjoint i32 %206, 64, !dbg !49
  %220 = lshr i32 %219, 5, !dbg !49
  %221 = add nuw nsw i32 %220, %219, !dbg !49
  %222 = zext nneg i32 %221 to i64, !dbg !49
  %223 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %222, !dbg !49
  %224 = bitcast float %180 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 true) #4, !dbg !49
  %225 = or disjoint i32 %206, 96, !dbg !49
  %226 = lshr i32 %225, 5, !dbg !49
  %227 = add nuw nsw i32 %226, %225, !dbg !49
  %228 = zext nneg i32 %227 to i64, !dbg !49
  %229 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %228, !dbg !49
  %230 = bitcast float %183 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %230, i1 true) #4, !dbg !49
  %231 = or disjoint i32 %206, 16, !dbg !49
  %232 = add nuw nsw i32 %231, %208, !dbg !49
  %233 = zext nneg i32 %232 to i64, !dbg !49
  %234 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %233, !dbg !49
  %235 = bitcast float %186 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %235, i1 true) #4, !dbg !49
  %236 = or disjoint i32 %206, 48, !dbg !49
  %237 = lshr i32 %236, 5, !dbg !49
  %238 = add nuw nsw i32 %237, %236, !dbg !49
  %239 = zext nneg i32 %238 to i64, !dbg !49
  %240 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %239, !dbg !49
  %241 = bitcast float %189 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 true) #4, !dbg !49
  %242 = or disjoint i32 %206, 80, !dbg !49
  %243 = lshr i32 %242, 5, !dbg !49
  %244 = add nuw nsw i32 %243, %242, !dbg !49
  %245 = zext nneg i32 %244 to i64, !dbg !49
  %246 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %245, !dbg !49
  %247 = bitcast float %192 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %247, i1 true) #4, !dbg !49
  %248 = or disjoint i32 %206, 112, !dbg !49
  %249 = lshr i32 %248, 5, !dbg !49
  %250 = add nuw nsw i32 %249, %248, !dbg !49
  %251 = zext nneg i32 %250 to i64, !dbg !49
  %252 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %251, !dbg !49
  %253 = bitcast float %195 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %253, i1 true) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %254 = lshr i32 %207, 5, !dbg !49
  %255 = add nuw nsw i32 %254, %207, !dbg !49
  %256 = zext nneg i32 %255 to i64, !dbg !49
  %257 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %256, !dbg !49
  %258 = load i32, ptr addrspace(3) %257, align 4, !dbg !49
  %259 = or disjoint i32 %207, 1, !dbg !49
  %260 = add nuw nsw i32 %259, %254, !dbg !49
  %261 = zext nneg i32 %260 to i64, !dbg !49
  %262 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %261, !dbg !49
  %263 = load i32, ptr addrspace(3) %262, align 4, !dbg !49
  %264 = or disjoint i32 %207, 2, !dbg !49
  %265 = add nuw nsw i32 %264, %254, !dbg !49
  %266 = zext nneg i32 %265 to i64, !dbg !49
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %266, !dbg !49
  %268 = load i32, ptr addrspace(3) %267, align 4, !dbg !49
  %269 = or disjoint i32 %207, 3, !dbg !49
  %270 = add nuw nsw i32 %269, %254, !dbg !49
  %271 = zext nneg i32 %270 to i64, !dbg !49
  %272 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %271, !dbg !49
  %273 = load i32, ptr addrspace(3) %272, align 4, !dbg !49
  %274 = or disjoint i32 %207, 512, !dbg !49
  %275 = lshr i32 %274, 5, !dbg !49
  %276 = add nuw nsw i32 %275, %274, !dbg !49
  %277 = zext nneg i32 %276 to i64, !dbg !49
  %278 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %277, !dbg !49
  %279 = load i32, ptr addrspace(3) %278, align 4, !dbg !49
  %280 = or disjoint i32 %207, 513, !dbg !49
  %281 = lshr i32 %280, 5, !dbg !49
  %282 = add nuw nsw i32 %281, %280, !dbg !49
  %283 = zext nneg i32 %282 to i64, !dbg !49
  %284 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %283, !dbg !49
  %285 = load i32, ptr addrspace(3) %284, align 4, !dbg !49
  %286 = or disjoint i32 %207, 514, !dbg !49
  %287 = lshr i32 %286, 5, !dbg !49
  %288 = add nuw nsw i32 %287, %286, !dbg !49
  %289 = zext nneg i32 %288 to i64, !dbg !49
  %290 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %289, !dbg !49
  %291 = load i32, ptr addrspace(3) %290, align 4, !dbg !49
  %292 = or disjoint i32 %207, 515, !dbg !49
  %293 = lshr i32 %292, 5, !dbg !49
  %294 = add nuw nsw i32 %293, %292, !dbg !49
  %295 = zext nneg i32 %294 to i64, !dbg !49
  %296 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %295, !dbg !49
  %297 = load i32, ptr addrspace(3) %296, align 4, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %258, i32 %263, i32 %268, i32 %273, ptr addrspace(1) %201, i1 %128) #4, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %279, i32 %285, i32 %291, i32 %297, ptr addrspace(1) %203, i1 %128) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckixy7tnkcwubgowkmsas3drjmv3h4v4fxpz7gdbrjgx2ajqr53g.py", directory: "inductor_cache/ki")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_15", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 51, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 56, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 26, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 49, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 50, column: 35, scope: !7)
!47 = !DILocation(line: 50, column: 30, scope: !7)
!48 = !DILocation(line: 50, column: 25, scope: !7)
!49 = !DILocation(line: 50, column: 47, scope: !7)
!50 = !DILocation(line: 50, column: 4, scope: !7)
