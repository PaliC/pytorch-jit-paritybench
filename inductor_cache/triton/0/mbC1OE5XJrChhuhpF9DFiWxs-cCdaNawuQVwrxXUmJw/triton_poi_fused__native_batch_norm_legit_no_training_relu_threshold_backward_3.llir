; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = or disjoint i32 %11, 4, !dbg !12
  %13 = or disjoint i32 %11, 8, !dbg !12
  %14 = or disjoint i32 %11, 12, !dbg !12
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !13
  %16 = shl i32 %15, 8, !dbg !14
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !15
  %18 = and i32 %17, 255, !dbg !15
  %19 = or disjoint i32 %16, %18, !dbg !16
  %20 = icmp slt i32 %19, 3025, !dbg !17
  %.frozen = freeze i32 %11, !dbg !18
  %21 = sdiv i32 %.frozen, 256, !dbg !18
  %22 = mul i32 %21, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %22, !dbg !19
  %23 = srem i32 %12, 256, !dbg !19
  %24 = srem i32 %13, 256, !dbg !19
  %25 = srem i32 %14, 256, !dbg !19
  %26 = shl i32 %19, 8, !dbg !20
  %27 = mul i32 %21, 774400, !dbg !21
  %28 = add i32 %26, %27, !dbg !22
  %29 = add i32 %28, %.decomposed, !dbg !23
  %30 = add i32 %28, %23, !dbg !23
  %31 = add i32 %28, %24, !dbg !23
  %32 = add i32 %28, %25, !dbg !23
  %33 = sext i32 %29 to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !24
  %35 = sext i32 %30 to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !24
  %37 = sext i32 %31 to i64, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !24
  %39 = sext i32 %32 to i64, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !24
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %20) #3, !dbg !25
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %20) #3, !dbg !25
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %20) #3, !dbg !25
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %20) #3, !dbg !25
  %45 = sext i32 %.decomposed to i64, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !26
  %47 = sext i32 %23 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !26
  %49 = sext i32 %24 to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !26
  %51 = sext i32 %25 to i64, !dbg !26
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !26
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !27
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !27
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !27
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !27
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !28
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !28
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !28
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !28
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !29
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !29
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !29
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !29
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !29
  %66 = bitcast i32 %62 to float, !dbg !29
  %67 = bitcast i32 %63 to float, !dbg !29
  %68 = bitcast i32 %64 to float, !dbg !29
  %69 = bitcast i32 %65 to float, !dbg !29
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !29
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !29
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !29
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !29
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !29
  %75 = bitcast i32 %71 to float, !dbg !29
  %76 = bitcast i32 %72 to float, !dbg !29
  %77 = bitcast i32 %73 to float, !dbg !29
  %78 = bitcast i32 %74 to float, !dbg !29
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !29
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !29
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !29
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !29
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !29
  %84 = bitcast i32 %80 to float, !dbg !29
  %85 = bitcast i32 %81 to float, !dbg !29
  %86 = bitcast i32 %82 to float, !dbg !29
  %87 = bitcast i32 %83 to float, !dbg !29
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !29
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !29
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !29
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !29
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !29
  %93 = bitcast i32 %89 to float, !dbg !29
  %94 = bitcast i32 %90 to float, !dbg !29
  %95 = bitcast i32 %91 to float, !dbg !29
  %96 = bitcast i32 %92 to float, !dbg !29
  %97 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !30
  %98 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !30
  %99 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !30
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !30
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %97, i1 true) #3, !dbg !31
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %98, i1 true) #3, !dbg !31
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %99, i1 true) #3, !dbg !31
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 true) #3, !dbg !31
  %105 = getelementptr float, ptr addrspace(1) %4, i64 %45, !dbg !32
  %106 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !32
  %107 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !32
  %108 = getelementptr float, ptr addrspace(1) %4, i64 %51, !dbg !32
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 true) #3, !dbg !33
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 true) #3, !dbg !33
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %107, i1 true) #3, !dbg !33
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 true) #3, !dbg !33
  %113 = fadd float %66, 0x3EE4F8B580000000, !dbg !34
  %114 = fadd float %67, 0x3EE4F8B580000000, !dbg !34
  %115 = fadd float %68, 0x3EE4F8B580000000, !dbg !34
  %116 = fadd float %69, 0x3EE4F8B580000000, !dbg !34
  %117 = fadd float %75, 0x3EE4F8B580000000, !dbg !34
  %118 = fadd float %76, 0x3EE4F8B580000000, !dbg !34
  %119 = fadd float %77, 0x3EE4F8B580000000, !dbg !34
  %120 = fadd float %78, 0x3EE4F8B580000000, !dbg !34
  %121 = fadd float %84, 0x3EE4F8B580000000, !dbg !34
  %122 = fadd float %85, 0x3EE4F8B580000000, !dbg !34
  %123 = fadd float %86, 0x3EE4F8B580000000, !dbg !34
  %124 = fadd float %87, 0x3EE4F8B580000000, !dbg !34
  %125 = fadd float %93, 0x3EE4F8B580000000, !dbg !34
  %126 = fadd float %94, 0x3EE4F8B580000000, !dbg !34
  %127 = fadd float %95, 0x3EE4F8B580000000, !dbg !34
  %128 = fadd float %96, 0x3EE4F8B580000000, !dbg !34
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i = icmp eq i32 %129, 0, !dbg !35
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i = icmp eq i32 %130, 0, !dbg !35
  br i1 %.not.i, label %136, label %131, !dbg !35

131:                                              ; preds = %9
  br i1 %.not1.i, label %134, label %132, !dbg !35

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %113) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %113) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

136:                                              ; preds = %9
  br i1 %.not1.i, label %139, label %137, !dbg !35

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.f(float %113) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.f(float %113) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %132, %134, %137, %139
  %.0.i = phi float [ %133, %132 ], [ %135, %134 ], [ %138, %137 ], [ %140, %139 ], !dbg !35
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i1 = icmp eq i32 %141, 0, !dbg !35
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i4 = icmp eq i32 %142, 0, !dbg !35
  br i1 %.not.i1, label %148, label %143, !dbg !35

143:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %146, label %144, !dbg !35

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %114) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %114) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

148:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %151, label %149, !dbg !35

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.f(float %114) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.f(float %114) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %144, %146, %149, %151
  %.0.i3 = phi float [ %145, %144 ], [ %147, %146 ], [ %150, %149 ], [ %152, %151 ], !dbg !35
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i6 = icmp eq i32 %153, 0, !dbg !35
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i9 = icmp eq i32 %154, 0, !dbg !35
  br i1 %.not.i6, label %160, label %155, !dbg !35

155:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %158, label %156, !dbg !35

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %115) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %115) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

160:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %163, label %161, !dbg !35

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.f(float %115) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.f(float %115) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

__nv_sqrtf.exit10:                                ; preds = %156, %158, %161, %163
  %.0.i8 = phi float [ %157, %156 ], [ %159, %158 ], [ %162, %161 ], [ %164, %163 ], !dbg !35
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i11 = icmp eq i32 %165, 0, !dbg !35
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i14 = icmp eq i32 %166, 0, !dbg !35
  br i1 %.not.i11, label %172, label %167, !dbg !35

167:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %170, label %168, !dbg !35

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %116) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %116) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

172:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %175, label %173, !dbg !35

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.f(float %116) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.f(float %116) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

__nv_sqrtf.exit15:                                ; preds = %168, %170, %173, %175
  %.0.i13 = phi float [ %169, %168 ], [ %171, %170 ], [ %174, %173 ], [ %176, %175 ], !dbg !35
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i16 = icmp eq i32 %177, 0, !dbg !35
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i19 = icmp eq i32 %178, 0, !dbg !35
  br i1 %.not.i16, label %184, label %179, !dbg !35

179:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %182, label %180, !dbg !35

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %117) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %117) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

184:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %187, label %185, !dbg !35

185:                                              ; preds = %184
  %186 = tail call float @llvm.nvvm.sqrt.rn.f(float %117) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

187:                                              ; preds = %184
  %188 = tail call float @llvm.nvvm.sqrt.approx.f(float %117) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

__nv_sqrtf.exit20:                                ; preds = %180, %182, %185, %187
  %.0.i18 = phi float [ %181, %180 ], [ %183, %182 ], [ %186, %185 ], [ %188, %187 ], !dbg !35
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i21 = icmp eq i32 %189, 0, !dbg !35
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i24 = icmp eq i32 %190, 0, !dbg !35
  br i1 %.not.i21, label %196, label %191, !dbg !35

191:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %194, label %192, !dbg !35

192:                                              ; preds = %191
  %193 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %118) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

194:                                              ; preds = %191
  %195 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %118) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

196:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %199, label %197, !dbg !35

197:                                              ; preds = %196
  %198 = tail call float @llvm.nvvm.sqrt.rn.f(float %118) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

199:                                              ; preds = %196
  %200 = tail call float @llvm.nvvm.sqrt.approx.f(float %118) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

__nv_sqrtf.exit25:                                ; preds = %192, %194, %197, %199
  %.0.i23 = phi float [ %193, %192 ], [ %195, %194 ], [ %198, %197 ], [ %200, %199 ], !dbg !35
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i26 = icmp eq i32 %201, 0, !dbg !35
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i29 = icmp eq i32 %202, 0, !dbg !35
  br i1 %.not.i26, label %208, label %203, !dbg !35

203:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %206, label %204, !dbg !35

204:                                              ; preds = %203
  %205 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %119) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

206:                                              ; preds = %203
  %207 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %119) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

208:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %211, label %209, !dbg !35

209:                                              ; preds = %208
  %210 = tail call float @llvm.nvvm.sqrt.rn.f(float %119) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

211:                                              ; preds = %208
  %212 = tail call float @llvm.nvvm.sqrt.approx.f(float %119) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

__nv_sqrtf.exit30:                                ; preds = %204, %206, %209, %211
  %.0.i28 = phi float [ %205, %204 ], [ %207, %206 ], [ %210, %209 ], [ %212, %211 ], !dbg !35
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i31 = icmp eq i32 %213, 0, !dbg !35
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i34 = icmp eq i32 %214, 0, !dbg !35
  br i1 %.not.i31, label %220, label %215, !dbg !35

215:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %218, label %216, !dbg !35

216:                                              ; preds = %215
  %217 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

218:                                              ; preds = %215
  %219 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

220:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %223, label %221, !dbg !35

221:                                              ; preds = %220
  %222 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

223:                                              ; preds = %220
  %224 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

__nv_sqrtf.exit35:                                ; preds = %216, %218, %221, %223
  %.0.i33 = phi float [ %217, %216 ], [ %219, %218 ], [ %222, %221 ], [ %224, %223 ], !dbg !35
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i36 = icmp eq i32 %225, 0, !dbg !35
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i39 = icmp eq i32 %226, 0, !dbg !35
  br i1 %.not.i36, label %232, label %227, !dbg !35

227:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %230, label %228, !dbg !35

228:                                              ; preds = %227
  %229 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %121) #3, !dbg !35
  br label %__nv_sqrtf.exit40, !dbg !35

230:                                              ; preds = %227
  %231 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %121) #3, !dbg !35
  br label %__nv_sqrtf.exit40, !dbg !35

232:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %235, label %233, !dbg !35

233:                                              ; preds = %232
  %234 = tail call float @llvm.nvvm.sqrt.rn.f(float %121) #3, !dbg !35
  br label %__nv_sqrtf.exit40, !dbg !35

235:                                              ; preds = %232
  %236 = tail call float @llvm.nvvm.sqrt.approx.f(float %121) #3, !dbg !35
  br label %__nv_sqrtf.exit40, !dbg !35

__nv_sqrtf.exit40:                                ; preds = %228, %230, %233, %235
  %.0.i38 = phi float [ %229, %228 ], [ %231, %230 ], [ %234, %233 ], [ %236, %235 ], !dbg !35
  %237 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i41 = icmp eq i32 %237, 0, !dbg !35
  %238 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i44 = icmp eq i32 %238, 0, !dbg !35
  br i1 %.not.i41, label %244, label %239, !dbg !35

239:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %242, label %240, !dbg !35

240:                                              ; preds = %239
  %241 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #3, !dbg !35
  br label %__nv_sqrtf.exit45, !dbg !35

242:                                              ; preds = %239
  %243 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #3, !dbg !35
  br label %__nv_sqrtf.exit45, !dbg !35

244:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %247, label %245, !dbg !35

245:                                              ; preds = %244
  %246 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #3, !dbg !35
  br label %__nv_sqrtf.exit45, !dbg !35

247:                                              ; preds = %244
  %248 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #3, !dbg !35
  br label %__nv_sqrtf.exit45, !dbg !35

__nv_sqrtf.exit45:                                ; preds = %240, %242, %245, %247
  %.0.i43 = phi float [ %241, %240 ], [ %243, %242 ], [ %246, %245 ], [ %248, %247 ], !dbg !35
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i46 = icmp eq i32 %249, 0, !dbg !35
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i49 = icmp eq i32 %250, 0, !dbg !35
  br i1 %.not.i46, label %256, label %251, !dbg !35

251:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %254, label %252, !dbg !35

252:                                              ; preds = %251
  %253 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #3, !dbg !35
  br label %__nv_sqrtf.exit50, !dbg !35

254:                                              ; preds = %251
  %255 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #3, !dbg !35
  br label %__nv_sqrtf.exit50, !dbg !35

256:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %259, label %257, !dbg !35

257:                                              ; preds = %256
  %258 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #3, !dbg !35
  br label %__nv_sqrtf.exit50, !dbg !35

259:                                              ; preds = %256
  %260 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #3, !dbg !35
  br label %__nv_sqrtf.exit50, !dbg !35

__nv_sqrtf.exit50:                                ; preds = %252, %254, %257, %259
  %.0.i48 = phi float [ %253, %252 ], [ %255, %254 ], [ %258, %257 ], [ %260, %259 ], !dbg !35
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i51 = icmp eq i32 %261, 0, !dbg !35
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i54 = icmp eq i32 %262, 0, !dbg !35
  br i1 %.not.i51, label %268, label %263, !dbg !35

263:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %266, label %264, !dbg !35

264:                                              ; preds = %263
  %265 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #3, !dbg !35
  br label %__nv_sqrtf.exit55, !dbg !35

266:                                              ; preds = %263
  %267 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #3, !dbg !35
  br label %__nv_sqrtf.exit55, !dbg !35

268:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %271, label %269, !dbg !35

269:                                              ; preds = %268
  %270 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #3, !dbg !35
  br label %__nv_sqrtf.exit55, !dbg !35

271:                                              ; preds = %268
  %272 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #3, !dbg !35
  br label %__nv_sqrtf.exit55, !dbg !35

__nv_sqrtf.exit55:                                ; preds = %264, %266, %269, %271
  %.0.i53 = phi float [ %265, %264 ], [ %267, %266 ], [ %270, %269 ], [ %272, %271 ], !dbg !35
  %273 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i56 = icmp eq i32 %273, 0, !dbg !35
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i59 = icmp eq i32 %274, 0, !dbg !35
  br i1 %.not.i56, label %280, label %275, !dbg !35

275:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %278, label %276, !dbg !35

276:                                              ; preds = %275
  %277 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #3, !dbg !35
  br label %__nv_sqrtf.exit60, !dbg !35

278:                                              ; preds = %275
  %279 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #3, !dbg !35
  br label %__nv_sqrtf.exit60, !dbg !35

280:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %283, label %281, !dbg !35

281:                                              ; preds = %280
  %282 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #3, !dbg !35
  br label %__nv_sqrtf.exit60, !dbg !35

283:                                              ; preds = %280
  %284 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #3, !dbg !35
  br label %__nv_sqrtf.exit60, !dbg !35

__nv_sqrtf.exit60:                                ; preds = %276, %278, %281, %283
  %.0.i58 = phi float [ %277, %276 ], [ %279, %278 ], [ %282, %281 ], [ %284, %283 ], !dbg !35
  %285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i61 = icmp eq i32 %285, 0, !dbg !35
  %286 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i64 = icmp eq i32 %286, 0, !dbg !35
  br i1 %.not.i61, label %292, label %287, !dbg !35

287:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %290, label %288, !dbg !35

288:                                              ; preds = %287
  %289 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #3, !dbg !35
  br label %__nv_sqrtf.exit65, !dbg !35

290:                                              ; preds = %287
  %291 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #3, !dbg !35
  br label %__nv_sqrtf.exit65, !dbg !35

292:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %295, label %293, !dbg !35

293:                                              ; preds = %292
  %294 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #3, !dbg !35
  br label %__nv_sqrtf.exit65, !dbg !35

295:                                              ; preds = %292
  %296 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #3, !dbg !35
  br label %__nv_sqrtf.exit65, !dbg !35

__nv_sqrtf.exit65:                                ; preds = %288, %290, %293, %295
  %.0.i63 = phi float [ %289, %288 ], [ %291, %290 ], [ %294, %293 ], [ %296, %295 ], !dbg !35
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i66 = icmp eq i32 %297, 0, !dbg !35
  %298 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i69 = icmp eq i32 %298, 0, !dbg !35
  br i1 %.not.i66, label %304, label %299, !dbg !35

299:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %302, label %300, !dbg !35

300:                                              ; preds = %299
  %301 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #3, !dbg !35
  br label %__nv_sqrtf.exit70, !dbg !35

302:                                              ; preds = %299
  %303 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #3, !dbg !35
  br label %__nv_sqrtf.exit70, !dbg !35

304:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %307, label %305, !dbg !35

305:                                              ; preds = %304
  %306 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #3, !dbg !35
  br label %__nv_sqrtf.exit70, !dbg !35

307:                                              ; preds = %304
  %308 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #3, !dbg !35
  br label %__nv_sqrtf.exit70, !dbg !35

__nv_sqrtf.exit70:                                ; preds = %300, %302, %305, %307
  %.0.i68 = phi float [ %301, %300 ], [ %303, %302 ], [ %306, %305 ], [ %308, %307 ], !dbg !35
  %309 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i71 = icmp eq i32 %309, 0, !dbg !35
  %310 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i74 = icmp eq i32 %310, 0, !dbg !35
  br i1 %.not.i71, label %316, label %311, !dbg !35

311:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %314, label %312, !dbg !35

312:                                              ; preds = %311
  %313 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #3, !dbg !35
  br label %__nv_sqrtf.exit75, !dbg !35

314:                                              ; preds = %311
  %315 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #3, !dbg !35
  br label %__nv_sqrtf.exit75, !dbg !35

316:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %319, label %317, !dbg !35

317:                                              ; preds = %316
  %318 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #3, !dbg !35
  br label %__nv_sqrtf.exit75, !dbg !35

319:                                              ; preds = %316
  %320 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #3, !dbg !35
  br label %__nv_sqrtf.exit75, !dbg !35

__nv_sqrtf.exit75:                                ; preds = %312, %314, %317, %319
  %.0.i73 = phi float [ %313, %312 ], [ %315, %314 ], [ %318, %317 ], [ %320, %319 ], !dbg !35
  %321 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !25
  %322 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !27
  %323 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !25
  %324 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !27
  %325 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !25
  %326 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !27
  %327 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !25
  %328 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !27
  %329 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !25
  %330 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !27
  %331 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !25
  %332 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !27
  %333 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !25
  %334 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !27
  %335 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !25
  %336 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !27
  %337 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !25
  %338 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !27
  %339 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !25
  %340 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !27
  %341 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !25
  %342 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !27
  %343 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !25
  %344 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !27
  %345 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !25
  %346 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !27
  %347 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !25
  %348 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !27
  %349 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !25
  %350 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !27
  %351 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !25
  %352 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !27
  %353 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !33
  %354 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !33
  %355 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !33
  %356 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !33
  %357 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !33
  %358 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !33
  %359 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !33
  %360 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !33
  %361 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !33
  %362 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !33
  %363 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !33
  %364 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !33
  %365 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !33
  %366 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !33
  %367 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !33
  %368 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !33
  %369 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !31
  %370 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !31
  %371 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !31
  %372 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !31
  %373 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !31
  %374 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !31
  %375 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !31
  %376 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !31
  %377 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !31
  %378 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !31
  %379 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !31
  %380 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !31
  %381 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !31
  %382 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !31
  %383 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !31
  %384 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !31
  %385 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !36
  %386 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !36
  %387 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !36
  %388 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !36
  %389 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !36
  %390 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !36
  %391 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !36
  %392 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !36
  %393 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !36
  %394 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !36
  %395 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !36
  %396 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !36
  %397 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !36
  %398 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !36
  %399 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !36
  %400 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !36
  %401 = mul i32 %10, 48400, !dbg !37
  %402 = add i32 %401, 3025, !dbg !37
  %403 = add i32 %401, 6050, !dbg !37
  %404 = add i32 %401, 9075, !dbg !37
  %405 = mul i32 %12, 3025, !dbg !37
  %406 = add i32 %401, 15125, !dbg !37
  %407 = add i32 %401, 18150, !dbg !37
  %408 = add i32 %401, 21175, !dbg !37
  %409 = mul i32 %13, 3025, !dbg !37
  %410 = add i32 %401, 27225, !dbg !37
  %411 = add i32 %401, 30250, !dbg !37
  %412 = add i32 %401, 33275, !dbg !37
  %413 = mul i32 %14, 3025, !dbg !37
  %414 = add i32 %401, 39325, !dbg !37
  %415 = add i32 %401, 42350, !dbg !37
  %416 = add i32 %401, 45375, !dbg !37
  %417 = add i32 %19, %401, !dbg !38
  %418 = add i32 %402, %19, !dbg !38
  %419 = add i32 %403, %19, !dbg !38
  %420 = add i32 %404, %19, !dbg !38
  %421 = add i32 %19, %405, !dbg !38
  %422 = add i32 %406, %19, !dbg !38
  %423 = add i32 %407, %19, !dbg !38
  %424 = add i32 %408, %19, !dbg !38
  %425 = add i32 %19, %409, !dbg !38
  %426 = add i32 %410, %19, !dbg !38
  %427 = add i32 %411, %19, !dbg !38
  %428 = add i32 %412, %19, !dbg !38
  %429 = add i32 %19, %413, !dbg !38
  %430 = add i32 %414, %19, !dbg !38
  %431 = add i32 %415, %19, !dbg !38
  %432 = add i32 %416, %19, !dbg !38
  %433 = sext i32 %417 to i64, !dbg !39
  %434 = getelementptr float, ptr addrspace(1) %5, i64 %433, !dbg !39
  %435 = sext i32 %418 to i64, !dbg !39
  %436 = getelementptr float, ptr addrspace(1) %5, i64 %435, !dbg !39
  %437 = sext i32 %419 to i64, !dbg !39
  %438 = getelementptr float, ptr addrspace(1) %5, i64 %437, !dbg !39
  %439 = sext i32 %420 to i64, !dbg !39
  %440 = getelementptr float, ptr addrspace(1) %5, i64 %439, !dbg !39
  %441 = sext i32 %421 to i64, !dbg !39
  %442 = getelementptr float, ptr addrspace(1) %5, i64 %441, !dbg !39
  %443 = sext i32 %422 to i64, !dbg !39
  %444 = getelementptr float, ptr addrspace(1) %5, i64 %443, !dbg !39
  %445 = sext i32 %423 to i64, !dbg !39
  %446 = getelementptr float, ptr addrspace(1) %5, i64 %445, !dbg !39
  %447 = sext i32 %424 to i64, !dbg !39
  %448 = getelementptr float, ptr addrspace(1) %5, i64 %447, !dbg !39
  %449 = sext i32 %425 to i64, !dbg !39
  %450 = getelementptr float, ptr addrspace(1) %5, i64 %449, !dbg !39
  %451 = sext i32 %426 to i64, !dbg !39
  %452 = getelementptr float, ptr addrspace(1) %5, i64 %451, !dbg !39
  %453 = sext i32 %427 to i64, !dbg !39
  %454 = getelementptr float, ptr addrspace(1) %5, i64 %453, !dbg !39
  %455 = sext i32 %428 to i64, !dbg !39
  %456 = getelementptr float, ptr addrspace(1) %5, i64 %455, !dbg !39
  %457 = sext i32 %429 to i64, !dbg !39
  %458 = getelementptr float, ptr addrspace(1) %5, i64 %457, !dbg !39
  %459 = sext i32 %430 to i64, !dbg !39
  %460 = getelementptr float, ptr addrspace(1) %5, i64 %459, !dbg !39
  %461 = sext i32 %431 to i64, !dbg !39
  %462 = getelementptr float, ptr addrspace(1) %5, i64 %461, !dbg !39
  %463 = sext i32 %432 to i64, !dbg !39
  %464 = getelementptr float, ptr addrspace(1) %5, i64 %463, !dbg !39
  %465 = getelementptr i1, ptr addrspace(1) %6, i64 %33, !dbg !40
  %466 = insertelement <4 x i32> poison, i32 %351, i64 0, !dbg !25
  %467 = insertelement <4 x i32> %466, i32 %349, i64 1, !dbg !25
  %468 = insertelement <4 x i32> %467, i32 %347, i64 2, !dbg !25
  %469 = insertelement <4 x i32> %468, i32 %345, i64 3, !dbg !25
  %470 = bitcast <4 x i32> %469 to <4 x float>, !dbg !25
  %471 = insertelement <4 x i32> poison, i32 %352, i64 0, !dbg !27
  %472 = insertelement <4 x i32> %471, i32 %350, i64 1, !dbg !27
  %473 = insertelement <4 x i32> %472, i32 %348, i64 2, !dbg !27
  %474 = insertelement <4 x i32> %473, i32 %346, i64 3, !dbg !27
  %475 = bitcast <4 x i32> %474 to <4 x float>, !dbg !27
  %476 = fsub <4 x float> %470, %475, !dbg !41
  %477 = insertelement <4 x i32> poison, i32 %368, i64 0, !dbg !33
  %478 = insertelement <4 x i32> %477, i32 %367, i64 1, !dbg !33
  %479 = insertelement <4 x i32> %478, i32 %366, i64 2, !dbg !33
  %480 = insertelement <4 x i32> %479, i32 %365, i64 3, !dbg !33
  %481 = bitcast <4 x i32> %480 to <4 x float>, !dbg !33
  %482 = insertelement <4 x i32> poison, i32 %384, i64 0, !dbg !31
  %483 = insertelement <4 x i32> %482, i32 %383, i64 1, !dbg !31
  %484 = insertelement <4 x i32> %483, i32 %382, i64 2, !dbg !31
  %485 = insertelement <4 x i32> %484, i32 %381, i64 3, !dbg !31
  %486 = bitcast <4 x i32> %485 to <4 x float>, !dbg !31
  %487 = insertelement <4 x float> poison, float %385, i64 0, !dbg !42
  %488 = insertelement <4 x float> %487, float %386, i64 1, !dbg !42
  %489 = insertelement <4 x float> %488, float %387, i64 2, !dbg !42
  %490 = insertelement <4 x float> %489, float %388, i64 3, !dbg !42
  %491 = fmul <4 x float> %476, %490, !dbg !42
  %492 = fmul <4 x float> %491, %486, !dbg !43
  %493 = fadd <4 x float> %492, %481, !dbg !44
  %494 = fcmp olt <4 x float> %493, zeroinitializer, !dbg !45
  %495 = select <4 x i1> %494, <4 x float> zeroinitializer, <4 x float> %493, !dbg !49
  %496 = fcmp ole <4 x float> %495, zeroinitializer, !dbg !50
  %bc = bitcast <4 x float> %495 to <4 x i32>, !dbg !51
  %497 = extractelement <4 x i32> %bc, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %497, ptr addrspace(1) %434, i1 %20) #3, !dbg !51
  %bc76 = bitcast <4 x float> %495 to <4 x i32>, !dbg !51
  %498 = extractelement <4 x i32> %bc76, i64 1, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %498, ptr addrspace(1) %436, i1 %20) #3, !dbg !51
  %bc77 = bitcast <4 x float> %495 to <4 x i32>, !dbg !51
  %499 = extractelement <4 x i32> %bc77, i64 2, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %499, ptr addrspace(1) %438, i1 %20) #3, !dbg !51
  %bc78 = bitcast <4 x float> %495 to <4 x i32>, !dbg !51
  %500 = extractelement <4 x i32> %bc78, i64 3, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %500, ptr addrspace(1) %440, i1 %20) #3, !dbg !51
  %501 = insertelement <4 x i32> poison, i32 %343, i64 0, !dbg !25
  %502 = insertelement <4 x i32> %501, i32 %341, i64 1, !dbg !25
  %503 = insertelement <4 x i32> %502, i32 %339, i64 2, !dbg !25
  %504 = insertelement <4 x i32> %503, i32 %337, i64 3, !dbg !25
  %505 = bitcast <4 x i32> %504 to <4 x float>, !dbg !25
  %506 = insertelement <4 x i32> poison, i32 %344, i64 0, !dbg !27
  %507 = insertelement <4 x i32> %506, i32 %342, i64 1, !dbg !27
  %508 = insertelement <4 x i32> %507, i32 %340, i64 2, !dbg !27
  %509 = insertelement <4 x i32> %508, i32 %338, i64 3, !dbg !27
  %510 = bitcast <4 x i32> %509 to <4 x float>, !dbg !27
  %511 = fsub <4 x float> %505, %510, !dbg !41
  %512 = insertelement <4 x i32> poison, i32 %364, i64 0, !dbg !33
  %513 = insertelement <4 x i32> %512, i32 %363, i64 1, !dbg !33
  %514 = insertelement <4 x i32> %513, i32 %362, i64 2, !dbg !33
  %515 = insertelement <4 x i32> %514, i32 %361, i64 3, !dbg !33
  %516 = bitcast <4 x i32> %515 to <4 x float>, !dbg !33
  %517 = insertelement <4 x i32> poison, i32 %380, i64 0, !dbg !31
  %518 = insertelement <4 x i32> %517, i32 %379, i64 1, !dbg !31
  %519 = insertelement <4 x i32> %518, i32 %378, i64 2, !dbg !31
  %520 = insertelement <4 x i32> %519, i32 %377, i64 3, !dbg !31
  %521 = bitcast <4 x i32> %520 to <4 x float>, !dbg !31
  %522 = insertelement <4 x float> poison, float %389, i64 0, !dbg !42
  %523 = insertelement <4 x float> %522, float %390, i64 1, !dbg !42
  %524 = insertelement <4 x float> %523, float %391, i64 2, !dbg !42
  %525 = insertelement <4 x float> %524, float %392, i64 3, !dbg !42
  %526 = fmul <4 x float> %511, %525, !dbg !42
  %527 = fmul <4 x float> %526, %521, !dbg !43
  %528 = fadd <4 x float> %527, %516, !dbg !44
  %529 = fcmp olt <4 x float> %528, zeroinitializer, !dbg !45
  %530 = select <4 x i1> %529, <4 x float> zeroinitializer, <4 x float> %528, !dbg !49
  %531 = fcmp ole <4 x float> %530, zeroinitializer, !dbg !50
  %bc79 = bitcast <4 x float> %530 to <4 x i32>, !dbg !51
  %532 = extractelement <4 x i32> %bc79, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %532, ptr addrspace(1) %442, i1 %20) #3, !dbg !51
  %bc80 = bitcast <4 x float> %530 to <4 x i32>, !dbg !51
  %533 = extractelement <4 x i32> %bc80, i64 1, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %533, ptr addrspace(1) %444, i1 %20) #3, !dbg !51
  %bc81 = bitcast <4 x float> %530 to <4 x i32>, !dbg !51
  %534 = extractelement <4 x i32> %bc81, i64 2, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %534, ptr addrspace(1) %446, i1 %20) #3, !dbg !51
  %bc82 = bitcast <4 x float> %530 to <4 x i32>, !dbg !51
  %535 = extractelement <4 x i32> %bc82, i64 3, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %535, ptr addrspace(1) %448, i1 %20) #3, !dbg !51
  %536 = insertelement <4 x i32> poison, i32 %335, i64 0, !dbg !25
  %537 = insertelement <4 x i32> %536, i32 %333, i64 1, !dbg !25
  %538 = insertelement <4 x i32> %537, i32 %331, i64 2, !dbg !25
  %539 = insertelement <4 x i32> %538, i32 %329, i64 3, !dbg !25
  %540 = bitcast <4 x i32> %539 to <4 x float>, !dbg !25
  %541 = insertelement <4 x i32> poison, i32 %336, i64 0, !dbg !27
  %542 = insertelement <4 x i32> %541, i32 %334, i64 1, !dbg !27
  %543 = insertelement <4 x i32> %542, i32 %332, i64 2, !dbg !27
  %544 = insertelement <4 x i32> %543, i32 %330, i64 3, !dbg !27
  %545 = bitcast <4 x i32> %544 to <4 x float>, !dbg !27
  %546 = fsub <4 x float> %540, %545, !dbg !41
  %547 = insertelement <4 x i32> poison, i32 %360, i64 0, !dbg !33
  %548 = insertelement <4 x i32> %547, i32 %359, i64 1, !dbg !33
  %549 = insertelement <4 x i32> %548, i32 %358, i64 2, !dbg !33
  %550 = insertelement <4 x i32> %549, i32 %357, i64 3, !dbg !33
  %551 = bitcast <4 x i32> %550 to <4 x float>, !dbg !33
  %552 = insertelement <4 x i32> poison, i32 %376, i64 0, !dbg !31
  %553 = insertelement <4 x i32> %552, i32 %375, i64 1, !dbg !31
  %554 = insertelement <4 x i32> %553, i32 %374, i64 2, !dbg !31
  %555 = insertelement <4 x i32> %554, i32 %373, i64 3, !dbg !31
  %556 = bitcast <4 x i32> %555 to <4 x float>, !dbg !31
  %557 = insertelement <4 x float> poison, float %393, i64 0, !dbg !42
  %558 = insertelement <4 x float> %557, float %394, i64 1, !dbg !42
  %559 = insertelement <4 x float> %558, float %395, i64 2, !dbg !42
  %560 = insertelement <4 x float> %559, float %396, i64 3, !dbg !42
  %561 = fmul <4 x float> %546, %560, !dbg !42
  %562 = fmul <4 x float> %561, %556, !dbg !43
  %563 = fadd <4 x float> %562, %551, !dbg !44
  %564 = fcmp olt <4 x float> %563, zeroinitializer, !dbg !45
  %565 = select <4 x i1> %564, <4 x float> zeroinitializer, <4 x float> %563, !dbg !49
  %566 = fcmp ole <4 x float> %565, zeroinitializer, !dbg !50
  %bc83 = bitcast <4 x float> %565 to <4 x i32>, !dbg !51
  %567 = extractelement <4 x i32> %bc83, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %567, ptr addrspace(1) %450, i1 %20) #3, !dbg !51
  %bc84 = bitcast <4 x float> %565 to <4 x i32>, !dbg !51
  %568 = extractelement <4 x i32> %bc84, i64 1, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %568, ptr addrspace(1) %452, i1 %20) #3, !dbg !51
  %bc85 = bitcast <4 x float> %565 to <4 x i32>, !dbg !51
  %569 = extractelement <4 x i32> %bc85, i64 2, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %569, ptr addrspace(1) %454, i1 %20) #3, !dbg !51
  %bc86 = bitcast <4 x float> %565 to <4 x i32>, !dbg !51
  %570 = extractelement <4 x i32> %bc86, i64 3, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %570, ptr addrspace(1) %456, i1 %20) #3, !dbg !51
  %571 = insertelement <4 x i32> poison, i32 %327, i64 0, !dbg !25
  %572 = insertelement <4 x i32> %571, i32 %325, i64 1, !dbg !25
  %573 = insertelement <4 x i32> %572, i32 %323, i64 2, !dbg !25
  %574 = insertelement <4 x i32> %573, i32 %321, i64 3, !dbg !25
  %575 = bitcast <4 x i32> %574 to <4 x float>, !dbg !25
  %576 = insertelement <4 x i32> poison, i32 %328, i64 0, !dbg !27
  %577 = insertelement <4 x i32> %576, i32 %326, i64 1, !dbg !27
  %578 = insertelement <4 x i32> %577, i32 %324, i64 2, !dbg !27
  %579 = insertelement <4 x i32> %578, i32 %322, i64 3, !dbg !27
  %580 = bitcast <4 x i32> %579 to <4 x float>, !dbg !27
  %581 = fsub <4 x float> %575, %580, !dbg !41
  %582 = insertelement <4 x i32> poison, i32 %356, i64 0, !dbg !33
  %583 = insertelement <4 x i32> %582, i32 %355, i64 1, !dbg !33
  %584 = insertelement <4 x i32> %583, i32 %354, i64 2, !dbg !33
  %585 = insertelement <4 x i32> %584, i32 %353, i64 3, !dbg !33
  %586 = bitcast <4 x i32> %585 to <4 x float>, !dbg !33
  %587 = insertelement <4 x i32> poison, i32 %372, i64 0, !dbg !31
  %588 = insertelement <4 x i32> %587, i32 %371, i64 1, !dbg !31
  %589 = insertelement <4 x i32> %588, i32 %370, i64 2, !dbg !31
  %590 = insertelement <4 x i32> %589, i32 %369, i64 3, !dbg !31
  %591 = bitcast <4 x i32> %590 to <4 x float>, !dbg !31
  %592 = insertelement <4 x float> poison, float %397, i64 0, !dbg !42
  %593 = insertelement <4 x float> %592, float %398, i64 1, !dbg !42
  %594 = insertelement <4 x float> %593, float %399, i64 2, !dbg !42
  %595 = insertelement <4 x float> %594, float %400, i64 3, !dbg !42
  %596 = fmul <4 x float> %581, %595, !dbg !42
  %597 = fmul <4 x float> %596, %591, !dbg !43
  %598 = fadd <4 x float> %597, %586, !dbg !44
  %599 = fcmp olt <4 x float> %598, zeroinitializer, !dbg !45
  %600 = select <4 x i1> %599, <4 x float> zeroinitializer, <4 x float> %598, !dbg !49
  %601 = fcmp ole <4 x float> %600, zeroinitializer, !dbg !50
  %bc87 = bitcast <4 x float> %600 to <4 x i32>, !dbg !51
  %602 = extractelement <4 x i32> %bc87, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %602, ptr addrspace(1) %458, i1 %20) #3, !dbg !51
  %bc88 = bitcast <4 x float> %600 to <4 x i32>, !dbg !51
  %603 = extractelement <4 x i32> %bc88, i64 1, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %603, ptr addrspace(1) %460, i1 %20) #3, !dbg !51
  %bc89 = bitcast <4 x float> %600 to <4 x i32>, !dbg !51
  %604 = extractelement <4 x i32> %bc89, i64 2, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %604, ptr addrspace(1) %462, i1 %20) #3, !dbg !51
  %bc90 = bitcast <4 x float> %600 to <4 x i32>, !dbg !51
  %605 = extractelement <4 x i32> %bc90, i64 3, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %605, ptr addrspace(1) %464, i1 %20) #3, !dbg !51
  %606 = zext <4 x i1> %496 to <4 x i8>, !dbg !52
  %607 = bitcast <4 x i8> %606 to i32, !dbg !52
  %608 = zext <4 x i1> %531 to <4 x i8>, !dbg !52
  %609 = bitcast <4 x i8> %608 to i32, !dbg !52
  %610 = zext <4 x i1> %566 to <4 x i8>, !dbg !52
  %611 = bitcast <4 x i8> %610 to i32, !dbg !52
  %612 = zext <4 x i1> %601 to <4 x i8>, !dbg !52
  %613 = bitcast <4 x i8> %612 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %607, i32 %609, i32 %611, i32 %613, ptr addrspace(1) %465, i1 %20) #3, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctgyndgx2oxtqauequb6vbjg3rtwujsdmnqo4osqwlva3gtctnz6.py", directory: "inductor_cache/tg")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_3, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_3", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 23, scope: !7)
!13 = !DILocation(line: 25, column: 28, scope: !7)
!14 = !DILocation(line: 25, column: 33, scope: !7)
!15 = !DILocation(line: 26, column: 44, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 51, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 56, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 26, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 52, column: 35, scope: !7)
!38 = !DILocation(line: 52, column: 30, scope: !7)
!39 = !DILocation(line: 52, column: 25, scope: !7)
!40 = !DILocation(line: 53, column: 25, scope: !7)
!41 = !DILocation(line: 37, column: 18, scope: !7)
!42 = !DILocation(line: 45, column: 19, scope: !7)
!43 = !DILocation(line: 46, column: 20, scope: !7)
!44 = !DILocation(line: 47, column: 20, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 49, column: 42, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 51, column: 21, scope: !7)
!51 = !DILocation(line: 52, column: 47, scope: !7)
!52 = !DILocation(line: 53, column: 58, scope: !7)
!53 = !DILocation(line: 53, column: 4, scope: !7)
