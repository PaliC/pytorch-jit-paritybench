; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_sigmoid_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %19 = shl i32 %18, 8, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = shl i32 %20, 1, !dbg !12
  %22 = and i32 %21, 254, !dbg !12
  %23 = or disjoint i32 %19, %22, !dbg !13
  %24 = icmp slt i32 %23, 256, !dbg !14
  %25 = sdiv i32 %23, 16, !dbg !15
  %26 = srem i32 %25, 4, !dbg !16
  %27 = sext i32 %23 to i64, !dbg !17
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !17
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 %24) #3, !dbg !18
  %30 = sext i32 %26 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %24) #3, !dbg !20
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %24) #3, !dbg !20
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %24) #3, !dbg !22
  %36 = bitcast i32 %35 to float, !dbg !22
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %24) #3, !dbg !22
  %38 = bitcast i32 %37 to float, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !23
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %24) #3, !dbg !24
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %24) #3, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !25
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %24) #3, !dbg !26
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %24) #3, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %6, i64 %27, !dbg !27
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %24) #3, !dbg !28
  %47 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !29
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %24) #3, !dbg !30
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %24) #3, !dbg !30
  %50 = getelementptr float, ptr addrspace(1) %8, i64 %30, !dbg !31
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %24) #3, !dbg !32
  %52 = bitcast i32 %51 to float, !dbg !32
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %24) #3, !dbg !32
  %54 = bitcast i32 %53 to float, !dbg !32
  %55 = getelementptr float, ptr addrspace(1) %9, i64 %30, !dbg !33
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %24) #3, !dbg !34
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %24) #3, !dbg !34
  %58 = getelementptr float, ptr addrspace(1) %10, i64 %30, !dbg !35
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %24) #3, !dbg !36
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %24) #3, !dbg !36
  %61 = getelementptr float, ptr addrspace(1) %11, i64 %27, !dbg !37
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 %24) #3, !dbg !38
  %63 = getelementptr float, ptr addrspace(1) %12, i64 %30, !dbg !39
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %24) #3, !dbg !40
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %24) #3, !dbg !40
  %66 = getelementptr float, ptr addrspace(1) %13, i64 %30, !dbg !41
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %24) #3, !dbg !42
  %68 = bitcast i32 %67 to float, !dbg !42
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %24) #3, !dbg !42
  %70 = bitcast i32 %69 to float, !dbg !42
  %71 = getelementptr float, ptr addrspace(1) %14, i64 %30, !dbg !43
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %24) #3, !dbg !44
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %24) #3, !dbg !44
  %74 = getelementptr float, ptr addrspace(1) %15, i64 %30, !dbg !45
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %24) #3, !dbg !46
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %24) #3, !dbg !46
  %77 = fadd float %36, 0x3F50624DE0000000, !dbg !47
  %78 = fadd float %38, 0x3F50624DE0000000, !dbg !47
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i = icmp eq i32 %79, 0, !dbg !48
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i = icmp eq i32 %80, 0, !dbg !48
  br i1 %.not.i, label %86, label %81, !dbg !48

81:                                               ; preds = %17
  br i1 %.not1.i, label %84, label %82, !dbg !48

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

86:                                               ; preds = %17
  br i1 %.not1.i, label %89, label %87, !dbg !48

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

__nv_sqrtf.exit:                                  ; preds = %82, %84, %87, %89
  %.0.i = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !48
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i1 = icmp eq i32 %91, 0, !dbg !48
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i4 = icmp eq i32 %92, 0, !dbg !48
  br i1 %.not.i1, label %98, label %93, !dbg !48

93:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %96, label %94, !dbg !48

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

98:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %101, label %99, !dbg !48

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

__nv_sqrtf.exit5:                                 ; preds = %94, %96, %99, %101
  %.0.i3 = phi float [ %95, %94 ], [ %97, %96 ], [ %100, %99 ], [ %102, %101 ], !dbg !48
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !49
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !49
  %105 = fadd float %52, 0x3F50624DE0000000, !dbg !50
  %106 = fadd float %54, 0x3F50624DE0000000, !dbg !50
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !51
  %.not.i6 = icmp eq i32 %107, 0, !dbg !51
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !51
  %.not1.i9 = icmp eq i32 %108, 0, !dbg !51
  br i1 %.not.i6, label %114, label %109, !dbg !51

109:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %112, label %110, !dbg !51

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %105) #3, !dbg !51
  br label %__nv_sqrtf.exit10, !dbg !51

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %105) #3, !dbg !51
  br label %__nv_sqrtf.exit10, !dbg !51

114:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %117, label %115, !dbg !51

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.f(float %105) #3, !dbg !51
  br label %__nv_sqrtf.exit10, !dbg !51

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.f(float %105) #3, !dbg !51
  br label %__nv_sqrtf.exit10, !dbg !51

__nv_sqrtf.exit10:                                ; preds = %110, %112, %115, %117
  %.0.i8 = phi float [ %111, %110 ], [ %113, %112 ], [ %116, %115 ], [ %118, %117 ], !dbg !51
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !51
  %.not.i11 = icmp eq i32 %119, 0, !dbg !51
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !51
  %.not1.i14 = icmp eq i32 %120, 0, !dbg !51
  br i1 %.not.i11, label %126, label %121, !dbg !51

121:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %124, label %122, !dbg !51

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %106) #3, !dbg !51
  br label %__nv_sqrtf.exit15, !dbg !51

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %106) #3, !dbg !51
  br label %__nv_sqrtf.exit15, !dbg !51

126:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %129, label %127, !dbg !51

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.f(float %106) #3, !dbg !51
  br label %__nv_sqrtf.exit15, !dbg !51

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.f(float %106) #3, !dbg !51
  br label %__nv_sqrtf.exit15, !dbg !51

__nv_sqrtf.exit15:                                ; preds = %122, %124, %127, %129
  %.0.i13 = phi float [ %123, %122 ], [ %125, %124 ], [ %128, %127 ], [ %130, %129 ], !dbg !51
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !52
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !52
  %133 = fadd float %68, 0x3F50624DE0000000, !dbg !53
  %134 = fadd float %70, 0x3F50624DE0000000, !dbg !53
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i16 = icmp eq i32 %135, 0, !dbg !54
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i19 = icmp eq i32 %136, 0, !dbg !54
  br i1 %.not.i16, label %142, label %137, !dbg !54

137:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %140, label %138, !dbg !54

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %133) #3, !dbg !54
  br label %__nv_sqrtf.exit20, !dbg !54

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %133) #3, !dbg !54
  br label %__nv_sqrtf.exit20, !dbg !54

142:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %145, label %143, !dbg !54

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.f(float %133) #3, !dbg !54
  br label %__nv_sqrtf.exit20, !dbg !54

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.f(float %133) #3, !dbg !54
  br label %__nv_sqrtf.exit20, !dbg !54

__nv_sqrtf.exit20:                                ; preds = %138, %140, %143, %145
  %.0.i18 = phi float [ %139, %138 ], [ %141, %140 ], [ %144, %143 ], [ %146, %145 ], !dbg !54
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i21 = icmp eq i32 %147, 0, !dbg !54
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i24 = icmp eq i32 %148, 0, !dbg !54
  br i1 %.not.i21, label %154, label %149, !dbg !54

149:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %152, label %150, !dbg !54

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %134) #3, !dbg !54
  br label %__nv_sqrtf.exit25, !dbg !54

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %134) #3, !dbg !54
  br label %__nv_sqrtf.exit25, !dbg !54

154:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %157, label %155, !dbg !54

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.f(float %134) #3, !dbg !54
  br label %__nv_sqrtf.exit25, !dbg !54

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.f(float %134) #3, !dbg !54
  br label %__nv_sqrtf.exit25, !dbg !54

__nv_sqrtf.exit25:                                ; preds = %150, %152, %155, %157
  %.0.i23 = phi float [ %151, %150 ], [ %153, %152 ], [ %156, %155 ], [ %158, %157 ], !dbg !54
  %159 = extractvalue { i32, i32 } %62, 1, !dbg !38
  %160 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !20
  %161 = insertelement <2 x i32> %160, i32 %65, i64 1, !dbg !20
  %162 = bitcast <2 x i32> %161 to <2 x float>, !dbg !20
  %163 = extractvalue { i32, i32 } %62, 0, !dbg !38
  %164 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !20
  %165 = insertelement <2 x i32> %164, i32 %64, i64 1, !dbg !20
  %166 = bitcast <2 x i32> %165 to <2 x float>, !dbg !20
  %167 = extractvalue { i32, i32 } %29, 1, !dbg !18
  %168 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !24
  %169 = insertelement <2 x i32> %168, i32 %73, i64 1, !dbg !24
  %170 = bitcast <2 x i32> %169 to <2 x float>, !dbg !24
  %171 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !26
  %172 = insertelement <2 x i32> %171, i32 %76, i64 1, !dbg !26
  %173 = bitcast <2 x i32> %172 to <2 x float>, !dbg !26
  %174 = extractvalue { i32, i32 } %46, 1, !dbg !28
  %175 = bitcast i32 %174 to float, !dbg !28
  %176 = bitcast i32 %49 to float, !dbg !30
  %177 = fsub float %175, %176, !dbg !55
  %178 = fmul float %177, %132, !dbg !56
  %179 = bitcast i32 %57 to float, !dbg !34
  %180 = fmul float %178, %179, !dbg !57
  %181 = bitcast i32 %60 to float, !dbg !36
  %182 = fadd float %180, %181, !dbg !58
  %183 = extractvalue { i32, i32 } %29, 0, !dbg !18
  %184 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !24
  %185 = insertelement <2 x i32> %184, i32 %72, i64 1, !dbg !24
  %186 = bitcast <2 x i32> %185 to <2 x float>, !dbg !24
  %187 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !26
  %188 = insertelement <2 x i32> %187, i32 %75, i64 1, !dbg !26
  %189 = bitcast <2 x i32> %188 to <2 x float>, !dbg !26
  %190 = extractvalue { i32, i32 } %46, 0, !dbg !28
  %191 = bitcast i32 %190 to float, !dbg !28
  %192 = bitcast i32 %48 to float, !dbg !30
  %193 = fsub float %191, %192, !dbg !55
  %194 = fmul float %193, %131, !dbg !56
  %195 = bitcast i32 %56 to float, !dbg !34
  %196 = fmul float %194, %195, !dbg !57
  %197 = bitcast i32 %59 to float, !dbg !36
  %198 = fadd float %196, %197, !dbg !58
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !59
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !59
  %201 = insertelement <2 x i32> poison, i32 %183, i64 0, !dbg !18
  %202 = insertelement <2 x i32> %201, i32 %163, i64 1, !dbg !18
  %203 = bitcast <2 x i32> %202 to <2 x float>, !dbg !18
  %204 = fsub <2 x float> %203, %166, !dbg !60
  %205 = insertelement <2 x float> poison, float %103, i64 0, !dbg !61
  %206 = insertelement <2 x float> %205, float %199, i64 1, !dbg !61
  %207 = fmul <2 x float> %204, %206, !dbg !61
  %208 = fmul <2 x float> %207, %186, !dbg !62
  %209 = fadd <2 x float> %208, %189, !dbg !63
  %210 = extractelement <2 x float> %209, i64 0, !dbg !64
  %211 = fadd float %210, %198, !dbg !64
  %212 = insertelement <2 x i32> poison, i32 %167, i64 0, !dbg !18
  %213 = insertelement <2 x i32> %212, i32 %159, i64 1, !dbg !18
  %214 = bitcast <2 x i32> %213 to <2 x float>, !dbg !18
  %215 = fsub <2 x float> %214, %162, !dbg !60
  %216 = insertelement <2 x float> poison, float %104, i64 0, !dbg !61
  %217 = insertelement <2 x float> %216, float %200, i64 1, !dbg !61
  %218 = fmul <2 x float> %215, %217, !dbg !61
  %219 = fmul <2 x float> %218, %170, !dbg !62
  %220 = fadd <2 x float> %219, %173, !dbg !63
  %221 = extractelement <2 x float> %220, i64 0, !dbg !64
  %222 = fadd float %221, %182, !dbg !64
  %223 = extractelement <2 x float> %209, i64 1, !dbg !65
  %224 = fadd float %211, %223, !dbg !65
  %225 = extractelement <2 x float> %220, i64 1, !dbg !65
  %226 = fadd float %222, %225, !dbg !65
  %227 = fsub float 0.000000e+00, %224, !dbg !66
  %228 = fsub float 0.000000e+00, %226, !dbg !66
  %229 = fmul float %227, 0x3FF7154760000000, !dbg !70
  %230 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %229) #3, !dbg !70
  %231 = fmul float %228, 0x3FF7154760000000, !dbg !70
  %232 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %231) #3, !dbg !70
  %233 = fadd float %230, 1.000000e+00, !dbg !71
  %234 = fadd float %232, 1.000000e+00, !dbg !71
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %233) #3, !dbg !72
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %234) #3, !dbg !72
  %237 = fmul float %224, %235, !dbg !73
  %238 = fmul float %226, %236, !dbg !73
  %239 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !74
  %240 = bitcast float %237 to i32, !dbg !75
  %241 = bitcast float %238 to i32, !dbg !75
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %240, i32 %241, ptr addrspace(1) %239, i1 %24) #3, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqccsjzgntdtsdr35rk62gddl5ftl33rvlblko2jbjgdgp3ndqnu.py", directory: "inductor_cache/qc")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_sigmoid_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_sigmoid_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_sigmoid_0", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_sigmoid_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 31, scope: !7)
!24 = !DILocation(line: 29, column: 36, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 33, column: 31, scope: !7)
!32 = !DILocation(line: 33, column: 36, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 32, scope: !7)
!38 = !DILocation(line: 36, column: 37, scope: !7)
!39 = !DILocation(line: 37, column: 32, scope: !7)
!40 = !DILocation(line: 37, column: 37, scope: !7)
!41 = !DILocation(line: 38, column: 32, scope: !7)
!42 = !DILocation(line: 38, column: 37, scope: !7)
!43 = !DILocation(line: 39, column: 32, scope: !7)
!44 = !DILocation(line: 39, column: 37, scope: !7)
!45 = !DILocation(line: 40, column: 32, scope: !7)
!46 = !DILocation(line: 40, column: 37, scope: !7)
!47 = !DILocation(line: 43, column: 18, scope: !7)
!48 = !DILocation(line: 44, column: 26, scope: !7)
!49 = !DILocation(line: 46, column: 18, scope: !7)
!50 = !DILocation(line: 53, column: 20, scope: !7)
!51 = !DILocation(line: 54, column: 27, scope: !7)
!52 = !DILocation(line: 55, column: 19, scope: !7)
!53 = !DILocation(line: 62, column: 20, scope: !7)
!54 = !DILocation(line: 63, column: 27, scope: !7)
!55 = !DILocation(line: 52, column: 20, scope: !7)
!56 = !DILocation(line: 57, column: 20, scope: !7)
!57 = !DILocation(line: 58, column: 20, scope: !7)
!58 = !DILocation(line: 59, column: 20, scope: !7)
!59 = !DILocation(line: 64, column: 19, scope: !7)
!60 = !DILocation(line: 41, column: 18, scope: !7)
!61 = !DILocation(line: 49, column: 19, scope: !7)
!62 = !DILocation(line: 50, column: 20, scope: !7)
!63 = !DILocation(line: 51, column: 20, scope: !7)
!64 = !DILocation(line: 60, column: 20, scope: !7)
!65 = !DILocation(line: 69, column: 20, scope: !7)
!66 = !DILocation(line: 47, column: 30, scope: !67, inlinedAt: !69)
!67 = distinct !DILexicalBlockFile(scope: !7, file: !68, discriminator: 0)
!68 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!69 = !DILocation(line: 70, column: 23, scope: !7)
!70 = !DILocation(line: 47, column: 29, scope: !67, inlinedAt: !69)
!71 = !DILocation(line: 47, column: 20, scope: !67, inlinedAt: !69)
!72 = !DILocation(line: 47, column: 16, scope: !67, inlinedAt: !69)
!73 = !DILocation(line: 71, column: 20, scope: !7)
!74 = !DILocation(line: 72, column: 28, scope: !7)
!75 = !DILocation(line: 72, column: 40, scope: !7)
!76 = !DILocation(line: 72, column: 4, scope: !7)
