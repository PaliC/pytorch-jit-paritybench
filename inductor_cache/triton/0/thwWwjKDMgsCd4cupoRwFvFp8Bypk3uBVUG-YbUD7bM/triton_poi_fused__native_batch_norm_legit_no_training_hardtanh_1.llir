; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = or disjoint i32 %13, 512, !dbg !13
  %18 = or disjoint i32 %13, 513, !dbg !13
  %19 = or disjoint i32 %13, 514, !dbg !13
  %20 = or disjoint i32 %13, 515, !dbg !13
  %21 = srem i32 %13, 9, !dbg !14
  %22 = srem i32 %14, 9, !dbg !14
  %23 = srem i32 %15, 9, !dbg !14
  %24 = srem i32 %16, 9, !dbg !14
  %25 = srem i32 %17, 9, !dbg !14
  %26 = srem i32 %18, 9, !dbg !14
  %27 = srem i32 %19, 9, !dbg !14
  %28 = srem i32 %20, 9, !dbg !14
  %29 = sext i32 %13 to i64, !dbg !15
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !15
  %31 = sext i32 %17 to i64, !dbg !15
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !15
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !16
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !16
  %35 = sext i32 %21 to i64, !dbg !17
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !17
  %37 = sext i32 %22 to i64, !dbg !17
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !17
  %39 = sext i32 %23 to i64, !dbg !17
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !17
  %41 = sext i32 %24 to i64, !dbg !17
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !17
  %43 = sext i32 %25 to i64, !dbg !17
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !17
  %45 = sext i32 %26 to i64, !dbg !17
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !17
  %47 = sext i32 %27 to i64, !dbg !17
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !17
  %49 = sext i32 %28 to i64, !dbg !17
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !17
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !18
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !18
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !18
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !18
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !18
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !18
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !18
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !18
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !19
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !19
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !19
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !19
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !19
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !19
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !19
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !19
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !20
  %68 = bitcast i32 %67 to float, !dbg !20
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !20
  %70 = bitcast i32 %69 to float, !dbg !20
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !20
  %72 = bitcast i32 %71 to float, !dbg !20
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !20
  %74 = bitcast i32 %73 to float, !dbg !20
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !20
  %76 = bitcast i32 %75 to float, !dbg !20
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !20
  %78 = bitcast i32 %77 to float, !dbg !20
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !20
  %80 = bitcast i32 %79 to float, !dbg !20
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !20
  %82 = bitcast i32 %81 to float, !dbg !20
  %83 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !21
  %84 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !21
  %85 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !21
  %86 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !21
  %87 = getelementptr float, ptr addrspace(1) %3, i64 %43, !dbg !21
  %88 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !21
  %89 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !21
  %90 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !21
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !22
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !22
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !22
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !22
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !22
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !22
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !22
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !22
  %99 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !23
  %100 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !23
  %101 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !23
  %102 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !23
  %103 = getelementptr float, ptr addrspace(1) %4, i64 %43, !dbg !23
  %104 = getelementptr float, ptr addrspace(1) %4, i64 %45, !dbg !23
  %105 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !23
  %106 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !23
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #3, !dbg !24
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 true) #3, !dbg !24
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #3, !dbg !24
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #3, !dbg !24
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #3, !dbg !24
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #3, !dbg !24
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #3, !dbg !24
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #3, !dbg !24
  %115 = fadd float %68, 0x3EE4F8B580000000, !dbg !25
  %116 = fadd float %70, 0x3EE4F8B580000000, !dbg !25
  %117 = fadd float %72, 0x3EE4F8B580000000, !dbg !25
  %118 = fadd float %74, 0x3EE4F8B580000000, !dbg !25
  %119 = fadd float %76, 0x3EE4F8B580000000, !dbg !25
  %120 = fadd float %78, 0x3EE4F8B580000000, !dbg !25
  %121 = fadd float %80, 0x3EE4F8B580000000, !dbg !25
  %122 = fadd float %82, 0x3EE4F8B580000000, !dbg !25
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i = icmp eq i32 %123, 0, !dbg !26
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i = icmp eq i32 %124, 0, !dbg !26
  br i1 %.not.i, label %130, label %125, !dbg !26

125:                                              ; preds = %7
  br i1 %.not1.i, label %128, label %126, !dbg !26

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %115) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %115) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

130:                                              ; preds = %7
  br i1 %.not1.i, label %133, label %131, !dbg !26

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.f(float %115) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.f(float %115) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

__nv_sqrtf.exit:                                  ; preds = %126, %128, %131, %133
  %.0.i = phi float [ %127, %126 ], [ %129, %128 ], [ %132, %131 ], [ %134, %133 ], !dbg !26
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i8 = icmp eq i32 %135, 0, !dbg !26
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i11 = icmp eq i32 %136, 0, !dbg !26
  br i1 %.not.i8, label %142, label %137, !dbg !26

137:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %140, label %138, !dbg !26

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %116) #3, !dbg !26
  br label %__nv_sqrtf.exit12, !dbg !26

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %116) #3, !dbg !26
  br label %__nv_sqrtf.exit12, !dbg !26

142:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %145, label %143, !dbg !26

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.f(float %116) #3, !dbg !26
  br label %__nv_sqrtf.exit12, !dbg !26

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.f(float %116) #3, !dbg !26
  br label %__nv_sqrtf.exit12, !dbg !26

__nv_sqrtf.exit12:                                ; preds = %138, %140, %143, %145
  %.0.i10 = phi float [ %139, %138 ], [ %141, %140 ], [ %144, %143 ], [ %146, %145 ], !dbg !26
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i13 = icmp eq i32 %147, 0, !dbg !26
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i16 = icmp eq i32 %148, 0, !dbg !26
  br i1 %.not.i13, label %154, label %149, !dbg !26

149:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %152, label %150, !dbg !26

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %117) #3, !dbg !26
  br label %__nv_sqrtf.exit17, !dbg !26

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %117) #3, !dbg !26
  br label %__nv_sqrtf.exit17, !dbg !26

154:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %157, label %155, !dbg !26

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.f(float %117) #3, !dbg !26
  br label %__nv_sqrtf.exit17, !dbg !26

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.f(float %117) #3, !dbg !26
  br label %__nv_sqrtf.exit17, !dbg !26

__nv_sqrtf.exit17:                                ; preds = %150, %152, %155, %157
  %.0.i15 = phi float [ %151, %150 ], [ %153, %152 ], [ %156, %155 ], [ %158, %157 ], !dbg !26
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i18 = icmp eq i32 %159, 0, !dbg !26
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i21 = icmp eq i32 %160, 0, !dbg !26
  br i1 %.not.i18, label %166, label %161, !dbg !26

161:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %164, label %162, !dbg !26

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %118) #3, !dbg !26
  br label %__nv_sqrtf.exit22, !dbg !26

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %118) #3, !dbg !26
  br label %__nv_sqrtf.exit22, !dbg !26

166:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %169, label %167, !dbg !26

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.f(float %118) #3, !dbg !26
  br label %__nv_sqrtf.exit22, !dbg !26

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.f(float %118) #3, !dbg !26
  br label %__nv_sqrtf.exit22, !dbg !26

__nv_sqrtf.exit22:                                ; preds = %162, %164, %167, %169
  %.0.i20 = phi float [ %163, %162 ], [ %165, %164 ], [ %168, %167 ], [ %170, %169 ], !dbg !26
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i23 = icmp eq i32 %171, 0, !dbg !26
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i26 = icmp eq i32 %172, 0, !dbg !26
  br i1 %.not.i23, label %178, label %173, !dbg !26

173:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %176, label %174, !dbg !26

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %119) #3, !dbg !26
  br label %__nv_sqrtf.exit27, !dbg !26

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %119) #3, !dbg !26
  br label %__nv_sqrtf.exit27, !dbg !26

178:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %181, label %179, !dbg !26

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.f(float %119) #3, !dbg !26
  br label %__nv_sqrtf.exit27, !dbg !26

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.f(float %119) #3, !dbg !26
  br label %__nv_sqrtf.exit27, !dbg !26

__nv_sqrtf.exit27:                                ; preds = %174, %176, %179, %181
  %.0.i25 = phi float [ %175, %174 ], [ %177, %176 ], [ %180, %179 ], [ %182, %181 ], !dbg !26
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i28 = icmp eq i32 %183, 0, !dbg !26
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i31 = icmp eq i32 %184, 0, !dbg !26
  br i1 %.not.i28, label %190, label %185, !dbg !26

185:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %188, label %186, !dbg !26

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #3, !dbg !26
  br label %__nv_sqrtf.exit32, !dbg !26

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #3, !dbg !26
  br label %__nv_sqrtf.exit32, !dbg !26

190:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %193, label %191, !dbg !26

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #3, !dbg !26
  br label %__nv_sqrtf.exit32, !dbg !26

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #3, !dbg !26
  br label %__nv_sqrtf.exit32, !dbg !26

__nv_sqrtf.exit32:                                ; preds = %186, %188, %191, %193
  %.0.i30 = phi float [ %187, %186 ], [ %189, %188 ], [ %192, %191 ], [ %194, %193 ], !dbg !26
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i33 = icmp eq i32 %195, 0, !dbg !26
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i36 = icmp eq i32 %196, 0, !dbg !26
  br i1 %.not.i33, label %202, label %197, !dbg !26

197:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %200, label %198, !dbg !26

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %121) #3, !dbg !26
  br label %__nv_sqrtf.exit37, !dbg !26

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %121) #3, !dbg !26
  br label %__nv_sqrtf.exit37, !dbg !26

202:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %205, label %203, !dbg !26

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.f(float %121) #3, !dbg !26
  br label %__nv_sqrtf.exit37, !dbg !26

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.f(float %121) #3, !dbg !26
  br label %__nv_sqrtf.exit37, !dbg !26

__nv_sqrtf.exit37:                                ; preds = %198, %200, %203, %205
  %.0.i35 = phi float [ %199, %198 ], [ %201, %200 ], [ %204, %203 ], [ %206, %205 ], !dbg !26
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i38 = icmp eq i32 %207, 0, !dbg !26
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i41 = icmp eq i32 %208, 0, !dbg !26
  br i1 %.not.i38, label %214, label %209, !dbg !26

209:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %212, label %210, !dbg !26

210:                                              ; preds = %209
  %211 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #3, !dbg !26
  br label %__nv_sqrtf.exit42, !dbg !26

212:                                              ; preds = %209
  %213 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #3, !dbg !26
  br label %__nv_sqrtf.exit42, !dbg !26

214:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %217, label %215, !dbg !26

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #3, !dbg !26
  br label %__nv_sqrtf.exit42, !dbg !26

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #3, !dbg !26
  br label %__nv_sqrtf.exit42, !dbg !26

__nv_sqrtf.exit42:                                ; preds = %210, %212, %215, %217
  %.0.i40 = phi float [ %211, %210 ], [ %213, %212 ], [ %216, %215 ], [ %218, %217 ], !dbg !26
  %219 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !16
  %220 = insertelement <8 x i32> poison, i32 %58, i64 0, !dbg !18
  %221 = insertelement <8 x i32> %220, i32 %57, i64 1, !dbg !18
  %222 = insertelement <8 x i32> %221, i32 %56, i64 2, !dbg !18
  %223 = insertelement <8 x i32> %222, i32 %55, i64 3, !dbg !18
  %224 = insertelement <8 x i32> %223, i32 %54, i64 4, !dbg !18
  %225 = insertelement <8 x i32> %224, i32 %53, i64 5, !dbg !18
  %226 = insertelement <8 x i32> %225, i32 %52, i64 6, !dbg !18
  %227 = insertelement <8 x i32> %226, i32 %51, i64 7, !dbg !18
  %228 = bitcast <8 x i32> %227 to <8 x float>, !dbg !18
  %229 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !16
  %230 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !16
  %231 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !16
  %232 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !16
  %233 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !16
  %234 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !16
  %235 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !16
  %236 = insertelement <8 x i32> poison, i32 %114, i64 0, !dbg !24
  %237 = insertelement <8 x i32> %236, i32 %113, i64 1, !dbg !24
  %238 = insertelement <8 x i32> %237, i32 %112, i64 2, !dbg !24
  %239 = insertelement <8 x i32> %238, i32 %111, i64 3, !dbg !24
  %240 = insertelement <8 x i32> %239, i32 %110, i64 4, !dbg !24
  %241 = insertelement <8 x i32> %240, i32 %109, i64 5, !dbg !24
  %242 = insertelement <8 x i32> %241, i32 %108, i64 6, !dbg !24
  %243 = insertelement <8 x i32> %242, i32 %107, i64 7, !dbg !24
  %244 = bitcast <8 x i32> %243 to <8 x float>, !dbg !24
  %245 = insertelement <8 x i32> poison, i32 %98, i64 0, !dbg !22
  %246 = insertelement <8 x i32> %245, i32 %97, i64 1, !dbg !22
  %247 = insertelement <8 x i32> %246, i32 %96, i64 2, !dbg !22
  %248 = insertelement <8 x i32> %247, i32 %95, i64 3, !dbg !22
  %249 = insertelement <8 x i32> %248, i32 %94, i64 4, !dbg !22
  %250 = insertelement <8 x i32> %249, i32 %93, i64 5, !dbg !22
  %251 = insertelement <8 x i32> %250, i32 %92, i64 6, !dbg !22
  %252 = insertelement <8 x i32> %251, i32 %91, i64 7, !dbg !22
  %253 = bitcast <8 x i32> %252 to <8 x float>, !dbg !22
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !27
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #3, !dbg !27
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #3, !dbg !27
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #3, !dbg !27
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #3, !dbg !27
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #3, !dbg !27
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #3, !dbg !27
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #3, !dbg !27
  %262 = insertelement <8 x i32> poison, i32 %219, i64 0, !dbg !16
  %263 = insertelement <8 x i32> %262, i32 %229, i64 1, !dbg !16
  %264 = insertelement <8 x i32> %263, i32 %230, i64 2, !dbg !16
  %265 = insertelement <8 x i32> %264, i32 %231, i64 3, !dbg !16
  %266 = insertelement <8 x i32> %265, i32 %232, i64 4, !dbg !16
  %267 = insertelement <8 x i32> %266, i32 %233, i64 5, !dbg !16
  %268 = insertelement <8 x i32> %267, i32 %234, i64 6, !dbg !16
  %269 = insertelement <8 x i32> %268, i32 %235, i64 7, !dbg !16
  %270 = bitcast <8 x i32> %269 to <8 x float>, !dbg !16
  %271 = fsub <8 x float> %270, %228, !dbg !28
  %272 = insertelement <8 x float> poison, float %261, i64 0, !dbg !29
  %273 = insertelement <8 x float> %272, float %260, i64 1, !dbg !29
  %274 = insertelement <8 x float> %273, float %259, i64 2, !dbg !29
  %275 = insertelement <8 x float> %274, float %258, i64 3, !dbg !29
  %276 = insertelement <8 x float> %275, float %257, i64 4, !dbg !29
  %277 = insertelement <8 x float> %276, float %256, i64 5, !dbg !29
  %278 = insertelement <8 x float> %277, float %255, i64 6, !dbg !29
  %279 = insertelement <8 x float> %278, float %254, i64 7, !dbg !29
  %280 = fmul <8 x float> %271, %279, !dbg !29
  %281 = fmul <8 x float> %280, %253, !dbg !30
  %282 = fadd <8 x float> %281, %244, !dbg !31
  %283 = fcmp ole <8 x float> %282, zeroinitializer, !dbg !32
  %284 = select <8 x i1> %283, <8 x float> zeroinitializer, <8 x float> %282, !dbg !32
  %285 = fcmp olt <8 x float> %284, splat (float 6.000000e+00), !dbg !36
  %286 = extractelement <8 x float> %284, i64 7, !dbg !38
  %287 = fcmp uno float %286, 0.000000e+00, !dbg !39
  %288 = extractelement <8 x float> %284, i64 6, !dbg !38
  %289 = fcmp uno float %288, 0.000000e+00, !dbg !39
  %290 = extractelement <8 x float> %284, i64 5, !dbg !38
  %291 = fcmp uno float %290, 0.000000e+00, !dbg !39
  %292 = extractelement <8 x float> %284, i64 4, !dbg !38
  %293 = fcmp uno float %292, 0.000000e+00, !dbg !39
  %294 = extractelement <8 x float> %284, i64 3, !dbg !38
  %295 = fcmp uno float %294, 0.000000e+00, !dbg !39
  %296 = extractelement <8 x float> %284, i64 2, !dbg !38
  %297 = fcmp uno float %296, 0.000000e+00, !dbg !39
  %298 = extractelement <8 x float> %284, i64 1, !dbg !38
  %299 = fcmp uno float %298, 0.000000e+00, !dbg !39
  %300 = extractelement <8 x float> %284, i64 0, !dbg !38
  %301 = fcmp uno float %300, 0.000000e+00, !dbg !39
  %302 = extractelement <8 x i1> %285, i64 7, !dbg !40
  %303 = or i1 %302, %287, !dbg !40
  %304 = extractelement <8 x i1> %285, i64 6, !dbg !40
  %305 = or i1 %304, %289, !dbg !40
  %306 = extractelement <8 x i1> %285, i64 5, !dbg !40
  %307 = or i1 %306, %291, !dbg !40
  %308 = extractelement <8 x i1> %285, i64 4, !dbg !40
  %309 = or i1 %308, %293, !dbg !40
  %310 = extractelement <8 x i1> %285, i64 3, !dbg !40
  %311 = or i1 %310, %295, !dbg !40
  %312 = extractelement <8 x i1> %285, i64 2, !dbg !40
  %313 = or i1 %312, %297, !dbg !40
  %314 = extractelement <8 x i1> %285, i64 1, !dbg !40
  %315 = or i1 %314, %299, !dbg !40
  %316 = extractelement <8 x i1> %285, i64 0, !dbg !40
  %317 = or i1 %316, %301, !dbg !40
  %318 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !41
  %319 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !41
  %320 = bitcast float %286 to i32, !dbg !38
  %321 = select i1 %303, i32 %320, i32 1086324736, !dbg !42
  %322 = bitcast float %288 to i32, !dbg !38
  %323 = select i1 %305, i32 %322, i32 1086324736, !dbg !42
  %324 = bitcast float %290 to i32, !dbg !38
  %325 = select i1 %307, i32 %324, i32 1086324736, !dbg !42
  %326 = bitcast float %292 to i32, !dbg !38
  %327 = select i1 %309, i32 %326, i32 1086324736, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %321, i32 %323, i32 %325, i32 %327, ptr addrspace(1) %318, i1 true) #3, !dbg !38
  %328 = bitcast float %294 to i32, !dbg !38
  %329 = select i1 %311, i32 %328, i32 1086324736, !dbg !42
  %330 = bitcast float %296 to i32, !dbg !38
  %331 = select i1 %313, i32 %330, i32 1086324736, !dbg !42
  %332 = bitcast float %298 to i32, !dbg !38
  %333 = select i1 %315, i32 %332, i32 1086324736, !dbg !42
  %334 = bitcast float %300 to i32, !dbg !38
  %335 = select i1 %317, i32 %334, i32 1086324736, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %329, i32 %331, i32 %333, i32 %335, ptr addrspace(1) %319, i1 true) #3, !dbg !38
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cijlylagsvsu4ieo66zbykkgrnewu4gu2lfiygll4p2egwpuj5mh.py", directory: "inductor_cache/ij")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_1", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 33, column: 18, scope: !7)
!26 = !DILocation(line: 34, column: 26, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 31, column: 18, scope: !7)
!29 = !DILocation(line: 39, column: 19, scope: !7)
!30 = !DILocation(line: 40, column: 20, scope: !7)
!31 = !DILocation(line: 41, column: 20, scope: !7)
!32 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 43, column: 42, scope: !7)
!36 = !DILocation(line: 110, column: 15, scope: !33, inlinedAt: !37)
!37 = !DILocation(line: 45, column: 42, scope: !7)
!38 = !DILocation(line: 46, column: 37, scope: !7)
!39 = !DILocation(line: 112, column: 21, scope: !33, inlinedAt: !37)
!40 = !DILocation(line: 112, column: 16, scope: !33, inlinedAt: !37)
!41 = !DILocation(line: 46, column: 25, scope: !7)
!42 = !DILocation(line: 113, column: 29, scope: !33, inlinedAt: !37)
!43 = !DILocation(line: 46, column: 4, scope: !7)
