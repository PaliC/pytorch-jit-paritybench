; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_clamp_convolution_ge_le_logical_and_tanh_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 254, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = sdiv i32 %12, 4096, !dbg !14
  %14 = srem i32 %13, 3, !dbg !15
  %15 = sext i32 %12 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #4, !dbg !17
  %18 = extractvalue { i32, i32 } %17, 0, !dbg !17
  %19 = extractvalue { i32, i32 } %17, 1, !dbg !17
  %20 = bitcast i32 %18 to float, !dbg !17
  %21 = bitcast i32 %19 to float, !dbg !17
  %22 = sext i32 %14 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !18
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #4, !dbg !19
  %25 = bitcast i32 %24 to float, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #4, !dbg !19
  %27 = bitcast i32 %26 to float, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !20
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #4, !dbg !21
  %30 = fadd float %20, %25, !dbg !22
  %31 = fadd float %21, %27, !dbg !22
  %32 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not.i = icmp eq i32 %32, 0, !dbg !23
  %33 = tail call float @llvm.nvvm.fabs.ftz.f(float %30) #4, !dbg !23
  %34 = tail call float @llvm.nvvm.fabs.f(float %30) #4, !dbg !23
  %.01.i = select i1 %.not.i, float %34, float %33, !dbg !23
  %35 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !23
  br i1 %35, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !23

__internal_fmad.exit1.i:                          ; preds = %6
  %36 = fmul float %.01.i, 0x4007154760000000, !dbg !23
  %37 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %36) #4, !dbg !23
  %38 = fadd float %37, 1.000000e+00, !dbg !23
  %39 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %38) #5, !dbg !23, !srcloc !24
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not6.i = icmp eq i32 %40, 0, !dbg !23
  %41 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %39, float -2.000000e+00, float 1.000000e+00) #4, !dbg !23
  %42 = tail call float @llvm.nvvm.fma.rn.f(float %39, float -2.000000e+00, float 1.000000e+00) #4, !dbg !23
  %.03.i = select i1 %.not6.i, float %42, float %41, !dbg !23
  %43 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !23
  %s.0.i = select i1 %43, float 1.000000e+00, float %.03.i, !dbg !23
  %44 = bitcast float %s.0.i to i32, !dbg !23
  %45 = bitcast float %30 to i32, !dbg !23
  %46 = and i32 %45, -2147483648, !dbg !23
  %47 = or i32 %46, %44, !dbg !23
  %48 = bitcast i32 %47 to float, !dbg !23
  br label %__nv_tanhf.exit, !dbg !23

__internal_fmad.exit3.i:                          ; preds = %6
  %49 = fmul float %30, %30, !dbg !23
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not1.i = icmp eq i32 %50, 0, !dbg !23
  %51 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %49, float 0xBFAAC795C0000000) #4, !dbg !23
  %52 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %49, float 0xBFAAC795C0000000) #4, !dbg !23
  %.06.i = select i1 %.not1.i, float %52, float %51, !dbg !23
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not2.i = icmp eq i32 %53, 0, !dbg !23
  %54 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %49, float 0x3FC10B2820000000) #4, !dbg !23
  %55 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %49, float 0x3FC10B2820000000) #4, !dbg !23
  %.05.i = select i1 %.not2.i, float %55, float %54, !dbg !23
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not3.i = icmp eq i32 %56, 0, !dbg !23
  %57 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %49, float 0xBFD5553DA0000000) #4, !dbg !23
  %58 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %49, float 0xBFD5553DA0000000) #4, !dbg !23
  %.0.i = select i1 %.not3.i, float %58, float %57, !dbg !23
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not4.i = icmp eq i32 %59, 0, !dbg !23
  %60 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %49, float 0.000000e+00) #4, !dbg !23
  %61 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %49, float 0.000000e+00) #4, !dbg !23
  %.04.i = select i1 %.not4.i, float %61, float %60, !dbg !23
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not5.i = icmp eq i32 %62, 0, !dbg !23
  %63 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %30, float %30) #4, !dbg !23
  %64 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %30, float %30) #4, !dbg !23
  %.02.i = select i1 %.not5.i, float %64, float %63, !dbg !23
  br label %__nv_tanhf.exit, !dbg !23

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %48, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !23
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not.i1 = icmp eq i32 %65, 0, !dbg !23
  %66 = tail call float @llvm.nvvm.fabs.ftz.f(float %31) #4, !dbg !23
  %67 = tail call float @llvm.nvvm.fabs.f(float %31) #4, !dbg !23
  %.01.i2 = select i1 %.not.i1, float %67, float %66, !dbg !23
  %68 = fcmp ult float %.01.i2, 0x3FE3333340000000, !dbg !23
  br i1 %68, label %__internal_fmad.exit3.i8, label %__internal_fmad.exit1.i3, !dbg !23

__internal_fmad.exit1.i3:                         ; preds = %__nv_tanhf.exit
  %69 = fmul float %.01.i2, 0x4007154760000000, !dbg !23
  %70 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %69) #4, !dbg !23
  %71 = fadd float %70, 1.000000e+00, !dbg !23
  %72 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %71) #5, !dbg !23, !srcloc !24
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not6.i4 = icmp eq i32 %73, 0, !dbg !23
  %74 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %72, float -2.000000e+00, float 1.000000e+00) #4, !dbg !23
  %75 = tail call float @llvm.nvvm.fma.rn.f(float %72, float -2.000000e+00, float 1.000000e+00) #4, !dbg !23
  %.03.i5 = select i1 %.not6.i4, float %75, float %74, !dbg !23
  %76 = fcmp oge float %.01.i2, 0x4022059680000000, !dbg !23
  %s.0.i6 = select i1 %76, float 1.000000e+00, float %.03.i5, !dbg !23
  %77 = bitcast float %s.0.i6 to i32, !dbg !23
  %78 = bitcast float %31 to i32, !dbg !23
  %79 = and i32 %78, -2147483648, !dbg !23
  %80 = or i32 %79, %77, !dbg !23
  %81 = bitcast i32 %80 to float, !dbg !23
  br label %__nv_tanhf.exit19, !dbg !23

__internal_fmad.exit3.i8:                         ; preds = %__nv_tanhf.exit
  %82 = fmul float %31, %31, !dbg !23
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not1.i9 = icmp eq i32 %83, 0, !dbg !23
  %84 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %82, float 0xBFAAC795C0000000) #4, !dbg !23
  %85 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %82, float 0xBFAAC795C0000000) #4, !dbg !23
  %.06.i10 = select i1 %.not1.i9, float %85, float %84, !dbg !23
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not2.i11 = icmp eq i32 %86, 0, !dbg !23
  %87 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i10, float %82, float 0x3FC10B2820000000) #4, !dbg !23
  %88 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i10, float %82, float 0x3FC10B2820000000) #4, !dbg !23
  %.05.i12 = select i1 %.not2.i11, float %88, float %87, !dbg !23
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not3.i13 = icmp eq i32 %89, 0, !dbg !23
  %90 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i12, float %82, float 0xBFD5553DA0000000) #4, !dbg !23
  %91 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i12, float %82, float 0xBFD5553DA0000000) #4, !dbg !23
  %.0.i14 = select i1 %.not3.i13, float %91, float %90, !dbg !23
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not4.i15 = icmp eq i32 %92, 0, !dbg !23
  %93 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i14, float %82, float 0.000000e+00) #4, !dbg !23
  %94 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i14, float %82, float 0.000000e+00) #4, !dbg !23
  %.04.i16 = select i1 %.not4.i15, float %94, float %93, !dbg !23
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !23
  %.not5.i17 = icmp eq i32 %95, 0, !dbg !23
  %96 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i16, float %31, float %31) #4, !dbg !23
  %97 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i16, float %31, float %31) #4, !dbg !23
  %.02.i18 = select i1 %.not5.i17, float %97, float %96, !dbg !23
  %.pre = bitcast float %31 to i32, !dbg !25
  br label %__nv_tanhf.exit19, !dbg !23

__nv_tanhf.exit19:                                ; preds = %__internal_fmad.exit1.i3, %__internal_fmad.exit3.i8
  %.pre-phi = phi i32 [ %78, %__internal_fmad.exit1.i3 ], [ %.pre, %__internal_fmad.exit3.i8 ], !dbg !25
  %s.1.i7 = phi float [ %81, %__internal_fmad.exit1.i3 ], [ %.02.i18, %__internal_fmad.exit3.i8 ], !dbg !23
  %98 = extractvalue { i32, i32 } %29, 1, !dbg !21
  %99 = extractvalue { i32, i32 } %29, 0, !dbg !21
  %100 = bitcast float %30 to i32, !dbg !25
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %100, i32 %.pre-phi, ptr addrspace(1) %16, i1 true) #4, !dbg !25
  %101 = getelementptr float, ptr addrspace(1) %3, i64 %15, !dbg !26
  %102 = getelementptr i1, ptr addrspace(1) %4, i64 %15, !dbg !27
  %103 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !21
  %104 = insertelement <2 x i32> %103, i32 %98, i64 1, !dbg !21
  %105 = bitcast <2 x i32> %104 to <2 x float>, !dbg !21
  %106 = insertelement <2 x float> poison, float %s.1.i, i64 0, !dbg !28
  %107 = insertelement <2 x float> %106, float %s.1.i7, i64 1, !dbg !28
  %108 = fadd <2 x float> %107, %105, !dbg !28
  %109 = extractelement <2 x float> %108, i64 0, !dbg !29
  %110 = fcmp ogt float %109, -1.000000e+00, !dbg !33
  %111 = extractelement <2 x float> %108, i64 1, !dbg !29
  %112 = fcmp ogt float %111, -1.000000e+00, !dbg !33
  %113 = fcmp uno float %109, 0.000000e+00, !dbg !34
  %114 = fcmp uno float %111, 0.000000e+00, !dbg !34
  %115 = or i1 %110, %113, !dbg !35
  %116 = or i1 %112, %114, !dbg !35
  %117 = select i1 %115, float %109, float -1.000000e+00, !dbg !29
  %118 = select i1 %116, float %111, float -1.000000e+00, !dbg !29
  %119 = fcmp olt float %117, 1.000000e+00, !dbg !36
  %120 = fcmp olt float %118, 1.000000e+00, !dbg !36
  %121 = fcmp uno float %117, 0.000000e+00, !dbg !38
  %122 = fcmp uno float %118, 0.000000e+00, !dbg !38
  %123 = or i1 %119, %121, !dbg !39
  %124 = or i1 %120, %122, !dbg !39
  %125 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %108), !dbg !40
  %126 = fcmp ole <2 x float> %125, splat (float 1.000000e+00), !dbg !40
  %127 = bitcast float %117 to i32, !dbg !41
  %128 = select i1 %123, i32 %127, i32 1065353216, !dbg !42
  %129 = bitcast float %118 to i32, !dbg !41
  %130 = select i1 %124, i32 %129, i32 1065353216, !dbg !42
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %128, i32 %130, ptr addrspace(1) %101, i1 true) #4, !dbg !41
  %131 = zext <2 x i1> %126 to <2 x i8>, !dbg !43
  %132 = bitcast <2 x i8> %131 to i16, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %132, ptr addrspace(1) %102, i1 true) #4, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }
attributes #5 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxmi2ibvgitkhypvp2i7gposuyj6r53r6f5erprqhcuqytgjk3uu.py", directory: "inductor_cache/xm")
!4 = !{ptr @triton_poi_fused_add_clamp_convolution_ge_le_logical_and_tanh_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_clamp_convolution_ge_le_logical_and_tanh_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_clamp_convolution_ge_le_logical_and_tanh_8", linkageName: "triton_poi_fused_add_clamp_convolution_ge_le_logical_and_tanh_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 18, scope: !7)
!23 = !DILocation(line: 30, column: 26, scope: !7)
!24 = !{i32 21046}
!25 = !DILocation(line: 39, column: 39, scope: !7)
!26 = !DILocation(line: 40, column: 25, scope: !7)
!27 = !DILocation(line: 41, column: 25, scope: !7)
!28 = !DILocation(line: 31, column: 18, scope: !7)
!29 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 33, column: 40, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 120, column: 21, scope: !30, inlinedAt: !32)
!35 = !DILocation(line: 120, column: 16, scope: !30, inlinedAt: !32)
!36 = !DILocation(line: 110, column: 15, scope: !30, inlinedAt: !37)
!37 = !DILocation(line: 35, column: 40, scope: !7)
!38 = !DILocation(line: 112, column: 21, scope: !30, inlinedAt: !37)
!39 = !DILocation(line: 112, column: 16, scope: !30, inlinedAt: !37)
!40 = !DILocation(line: 38, column: 20, scope: !7)
!41 = !DILocation(line: 40, column: 36, scope: !7)
!42 = !DILocation(line: 113, column: 29, scope: !30, inlinedAt: !37)
!43 = !DILocation(line: 41, column: 37, scope: !7)
!44 = !DILocation(line: 41, column: 4, scope: !7)
