; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused__softmax_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 2, !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 256, !dbg !14
  %12 = shl i32 %7, 2, !dbg !15
  %13 = and i32 %12, 12, !dbg !15
  %14 = shl i32 %10, 4, !dbg !16
  %15 = or disjoint i32 %14, %13, !dbg !17
  %16 = sext i32 %15 to i64, !dbg !18
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !18
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %17, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #2, !dbg !19
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !19
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !19
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !19
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !19
  %23 = bitcast i32 %19 to float, !dbg !19
  %24 = bitcast i32 %20 to float, !dbg !19
  %25 = bitcast i32 %21 to float, !dbg !19
  %26 = bitcast i32 %22 to float, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #2, !dbg !20
  %28 = bitcast i32 %27 to float, !dbg !20
  %29 = fcmp oge float %28, 0.000000e+00, !dbg !21
  %30 = select i1 %29, float 1.000000e+00, float -1.000000e+00, !dbg !22
  %31 = fmul float %30, %23, !dbg !23
  %32 = fmul float %30, %24, !dbg !23
  %33 = fmul float %30, %25, !dbg !23
  %34 = fmul float %30, %26, !dbg !23
  %35 = select i1 %11, float %31, float 0xFFF0000000000000, !dbg !24
  %36 = select i1 %11, float %32, float 0xFFF0000000000000, !dbg !24
  %37 = select i1 %11, float %33, float 0xFFF0000000000000, !dbg !24
  %38 = select i1 %11, float %34, float 0xFFF0000000000000, !dbg !24
  %39 = fcmp ogt float %35, %36, !dbg !25
  %40 = fcmp uno float %35, 0.000000e+00, !dbg !30
  %41 = or i1 %39, %40, !dbg !31
  %42 = select i1 %41, float %35, float %36, !dbg !32
  %43 = fcmp ogt float %42, %37, !dbg !25
  %44 = fcmp uno float %42, 0.000000e+00, !dbg !30
  %45 = or i1 %43, %44, !dbg !31
  %46 = select i1 %45, float %42, float %37, !dbg !32
  %47 = fcmp ogt float %46, %38, !dbg !25
  %48 = fcmp uno float %46, 0.000000e+00, !dbg !30
  %49 = or i1 %47, %48, !dbg !31
  %50 = select i1 %49, float %46, float %38, !dbg !32
  %51 = bitcast float %50 to i32, !dbg !33
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 2, i32 31), !dbg !33
  %53 = bitcast i32 %52 to float, !dbg !33
  %54 = fcmp ogt float %50, %53, !dbg !25
  %55 = fcmp uno float %50, 0.000000e+00, !dbg !30
  %56 = or i1 %54, %55, !dbg !31
  %57 = select i1 %56, float %50, float %53, !dbg !32
  %58 = bitcast float %57 to i32, !dbg !33
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 1, i32 31), !dbg !33
  %60 = bitcast i32 %59 to float, !dbg !33
  %61 = fcmp ogt float %57, %60, !dbg !25
  %62 = fcmp uno float %57, 0.000000e+00, !dbg !30
  %63 = or i1 %61, %62, !dbg !31
  %64 = select i1 %63, float %57, float %60, !dbg !32
  %65 = fsub float %31, %64, !dbg !34
  %66 = fsub float %32, %64, !dbg !34
  %67 = fsub float %33, %64, !dbg !34
  %68 = fsub float %34, %64, !dbg !34
  %69 = fmul float %30, %28, !dbg !35
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float %69) #2, !dbg !36
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %66, float %69) #2, !dbg !36
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %67, float %69) #2, !dbg !36
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %68, float %69) #2, !dbg !36
  %74 = fmul float %70, 0x3FF7154760000000, !dbg !37
  %75 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %74) #2, !dbg !37
  %76 = fmul float %71, 0x3FF7154760000000, !dbg !37
  %77 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %76) #2, !dbg !37
  %78 = fmul float %72, 0x3FF7154760000000, !dbg !37
  %79 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %78) #2, !dbg !37
  %80 = fmul float %73, 0x3FF7154760000000, !dbg !37
  %81 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %80) #2, !dbg !37
  %82 = fadd float %75, %77, !dbg !38
  %83 = fadd float %82, %79, !dbg !38
  %84 = fadd float %83, %81, !dbg !38
  %85 = select i1 %11, float %84, float 0.000000e+00, !dbg !38
  %86 = bitcast float %85 to i32, !dbg !43
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 2, i32 31), !dbg !43
  %88 = bitcast i32 %87 to float, !dbg !43
  %89 = fadd float %85, %88, !dbg !38
  %90 = bitcast float %89 to i32, !dbg !43
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 1, i32 31), !dbg !43
  %92 = bitcast i32 %91 to float, !dbg !43
  %93 = fadd float %89, %92, !dbg !38
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float %93) #2, !dbg !44
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %77, float %93) #2, !dbg !44
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float %93) #2, !dbg !44
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %81, float %93) #2, !dbg !44
  %98 = bitcast float %94 to i32, !dbg !45
  %99 = bitcast float %95 to i32, !dbg !45
  %100 = bitcast float %96 to i32, !dbg !45
  %101 = bitcast float %97 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %98, i32 %99, i32 %100, i32 %101, ptr addrspace(1) %17, i1 %11) #2, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c36th37g4qtvxricdofulydbooxq3b5mj6ifc7gpqiayjp34xk2v.py", directory: "inductor_cache/36")
!4 = !{ptr @triton_per_fused__softmax_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__softmax_1", linkageName: "triton_per_fused__softmax_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 42, scope: !7)
!17 = !DILocation(line: 31, column: 39, scope: !7)
!18 = !DILocation(line: 31, column: 34, scope: !7)
!19 = !DILocation(line: 31, column: 47, scope: !7)
!20 = !DILocation(line: 32, column: 19, scope: !7)
!21 = !DILocation(line: 35, column: 19, scope: !7)
!22 = !DILocation(line: 38, column: 32, scope: !7)
!23 = !DILocation(line: 39, column: 18, scope: !7)
!24 = !DILocation(line: 41, column: 34, scope: !7)
!25 = !DILocation(line: 118, column: 15, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!29 = !DILocation(line: 42, column: 39, scope: !7)
!30 = !DILocation(line: 120, column: 21, scope: !26, inlinedAt: !29)
!31 = !DILocation(line: 120, column: 16, scope: !26, inlinedAt: !29)
!32 = !DILocation(line: 121, column: 29, scope: !26, inlinedAt: !29)
!33 = !DILocation(line: 131, column: 29, scope: !28, inlinedAt: !29)
!34 = !DILocation(line: 43, column: 19, scope: !7)
!35 = !DILocation(line: 44, column: 19, scope: !7)
!36 = !DILocation(line: 45, column: 20, scope: !7)
!37 = !DILocation(line: 46, column: 24, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !42)
!39 = distinct !DILexicalBlockFile(scope: !41, file: !40, discriminator: 0)
!40 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!41 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!42 = !DILocation(line: 49, column: 26, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !41, inlinedAt: !42)
!44 = !DILocation(line: 50, column: 20, scope: !7)
!45 = !DILocation(line: 51, column: 48, scope: !7)
!46 = !DILocation(line: 51, column: 4, scope: !7)
