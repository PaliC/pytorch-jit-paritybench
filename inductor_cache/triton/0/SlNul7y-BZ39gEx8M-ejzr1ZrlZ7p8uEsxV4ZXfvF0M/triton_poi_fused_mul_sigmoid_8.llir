; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_mul_sigmoid_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %10, 16, !dbg !12
  %12 = or disjoint i32 %10, 32, !dbg !12
  %13 = or disjoint i32 %10, 48, !dbg !12
  %14 = shl i32 %8, 2, !dbg !12
  %15 = and i32 %14, 60, !dbg !12
  %16 = or disjoint i32 %7, %10, !dbg !13
  %17 = or disjoint i32 %7, %11, !dbg !13
  %18 = or disjoint i32 %7, %12, !dbg !13
  %19 = or disjoint i32 %7, %13, !dbg !13
  %20 = or disjoint i32 %7, %15, !dbg !13
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %22 = shl i32 %21, 6, !dbg !15
  %23 = or disjoint i32 %22, %15, !dbg !16
  %24 = or disjoint i32 %22, %10, !dbg !16
  %25 = or disjoint i32 %22, %11, !dbg !16
  %26 = or disjoint i32 %22, %12, !dbg !16
  %27 = or disjoint i32 %22, %13, !dbg !16
  %28 = sdiv i32 %16, 512, !dbg !17
  %29 = sdiv i32 %17, 512, !dbg !17
  %30 = sdiv i32 %18, 512, !dbg !17
  %31 = sdiv i32 %19, 512, !dbg !17
  %.frozen = freeze i32 %20, !dbg !17
  %32 = sdiv i32 %.frozen, 512, !dbg !17
  %33 = mul i32 %32, 512, !dbg !18
  %.decomposed = sub i32 %.frozen, %33, !dbg !18
  %34 = shl i32 %28, 12, !dbg !19
  %35 = shl i32 %29, 12, !dbg !19
  %36 = shl i32 %30, 12, !dbg !19
  %37 = shl i32 %31, 12, !dbg !19
  %38 = add i32 %34, %23, !dbg !20
  %39 = add i32 %35, %23, !dbg !20
  %40 = add i32 %36, %23, !dbg !20
  %41 = add i32 %37, %23, !dbg !20
  %42 = sext i32 %38 to i64, !dbg !21
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !21
  %44 = sext i32 %39 to i64, !dbg !21
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !21
  %46 = sext i32 %40 to i64, !dbg !21
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !21
  %48 = sext i32 %41 to i64, !dbg !21
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !21
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #2, !dbg !22
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !22
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !22
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !22
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !22
  %55 = bitcast i32 %51 to float, !dbg !22
  %56 = bitcast i32 %52 to float, !dbg !22
  %57 = bitcast i32 %53 to float, !dbg !22
  %58 = bitcast i32 %54 to float, !dbg !22
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #2, !dbg !22
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !22
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !22
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !22
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !22
  %64 = bitcast i32 %60 to float, !dbg !22
  %65 = bitcast i32 %61 to float, !dbg !22
  %66 = bitcast i32 %62 to float, !dbg !22
  %67 = bitcast i32 %63 to float, !dbg !22
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #2, !dbg !22
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !22
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !22
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !22
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !22
  %73 = bitcast i32 %69 to float, !dbg !22
  %74 = bitcast i32 %70 to float, !dbg !22
  %75 = bitcast i32 %71 to float, !dbg !22
  %76 = bitcast i32 %72 to float, !dbg !22
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #2, !dbg !22
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !22
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !22
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !22
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !22
  %82 = bitcast i32 %78 to float, !dbg !22
  %83 = bitcast i32 %79 to float, !dbg !22
  %84 = bitcast i32 %80 to float, !dbg !22
  %85 = bitcast i32 %81 to float, !dbg !22
  %86 = shl i32 %24, 9, !dbg !23
  %87 = shl i32 %25, 9, !dbg !23
  %88 = shl i32 %26, 9, !dbg !23
  %89 = shl i32 %27, 9, !dbg !23
  %90 = shl i32 %32, 21, !dbg !24
  %91 = add i32 %90, %.decomposed, !dbg !25
  %92 = add i32 %91, %86, !dbg !26
  %93 = add i32 %91, %87, !dbg !26
  %94 = add i32 %91, %88, !dbg !26
  %95 = add i32 %91, %89, !dbg !26
  %96 = sext i32 %92 to i64, !dbg !27
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !27
  %98 = sext i32 %93 to i64, !dbg !27
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !27
  %100 = sext i32 %94 to i64, !dbg !27
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !27
  %102 = sext i32 %95 to i64, !dbg !27
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !27
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %97, i1 true) #2, !dbg !28
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !28
  %106 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !28
  %107 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !28
  %108 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !28
  %109 = bitcast i32 %105 to float, !dbg !28
  %110 = bitcast i32 %106 to float, !dbg !28
  %111 = bitcast i32 %107 to float, !dbg !28
  %112 = bitcast i32 %108 to float, !dbg !28
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %99, i1 true) #2, !dbg !28
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !28
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !28
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !28
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !28
  %118 = bitcast i32 %114 to float, !dbg !28
  %119 = bitcast i32 %115 to float, !dbg !28
  %120 = bitcast i32 %116 to float, !dbg !28
  %121 = bitcast i32 %117 to float, !dbg !28
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 true) #2, !dbg !28
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !28
  %124 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !28
  %125 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !28
  %126 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !28
  %127 = bitcast i32 %123 to float, !dbg !28
  %128 = bitcast i32 %124 to float, !dbg !28
  %129 = bitcast i32 %125 to float, !dbg !28
  %130 = bitcast i32 %126 to float, !dbg !28
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %103, i1 true) #2, !dbg !28
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !28
  %133 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !28
  %134 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !28
  %135 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !28
  %136 = bitcast i32 %132 to float, !dbg !28
  %137 = bitcast i32 %133 to float, !dbg !28
  %138 = bitcast i32 %134 to float, !dbg !28
  %139 = bitcast i32 %135 to float, !dbg !28
  %140 = fsub float 0.000000e+00, %55, !dbg !29
  %141 = fsub float 0.000000e+00, %56, !dbg !29
  %142 = fsub float 0.000000e+00, %57, !dbg !29
  %143 = fsub float 0.000000e+00, %58, !dbg !29
  %144 = fsub float 0.000000e+00, %64, !dbg !29
  %145 = fsub float 0.000000e+00, %65, !dbg !29
  %146 = fsub float 0.000000e+00, %66, !dbg !29
  %147 = fsub float 0.000000e+00, %67, !dbg !29
  %148 = fsub float 0.000000e+00, %73, !dbg !29
  %149 = fsub float 0.000000e+00, %74, !dbg !29
  %150 = fsub float 0.000000e+00, %75, !dbg !29
  %151 = fsub float 0.000000e+00, %76, !dbg !29
  %152 = fsub float 0.000000e+00, %82, !dbg !29
  %153 = fsub float 0.000000e+00, %83, !dbg !29
  %154 = fsub float 0.000000e+00, %84, !dbg !29
  %155 = fsub float 0.000000e+00, %85, !dbg !29
  %156 = fmul float %140, 0x3FF7154760000000, !dbg !33
  %157 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %156) #2, !dbg !33
  %158 = fmul float %141, 0x3FF7154760000000, !dbg !33
  %159 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %158) #2, !dbg !33
  %160 = fmul float %142, 0x3FF7154760000000, !dbg !33
  %161 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %160) #2, !dbg !33
  %162 = fmul float %143, 0x3FF7154760000000, !dbg !33
  %163 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %162) #2, !dbg !33
  %164 = fmul float %144, 0x3FF7154760000000, !dbg !33
  %165 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %164) #2, !dbg !33
  %166 = fmul float %145, 0x3FF7154760000000, !dbg !33
  %167 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %166) #2, !dbg !33
  %168 = fmul float %146, 0x3FF7154760000000, !dbg !33
  %169 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %168) #2, !dbg !33
  %170 = fmul float %147, 0x3FF7154760000000, !dbg !33
  %171 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %170) #2, !dbg !33
  %172 = fmul float %148, 0x3FF7154760000000, !dbg !33
  %173 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %172) #2, !dbg !33
  %174 = fmul float %149, 0x3FF7154760000000, !dbg !33
  %175 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %174) #2, !dbg !33
  %176 = fmul float %150, 0x3FF7154760000000, !dbg !33
  %177 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %176) #2, !dbg !33
  %178 = fmul float %151, 0x3FF7154760000000, !dbg !33
  %179 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %178) #2, !dbg !33
  %180 = fmul float %152, 0x3FF7154760000000, !dbg !33
  %181 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %180) #2, !dbg !33
  %182 = fmul float %153, 0x3FF7154760000000, !dbg !33
  %183 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %182) #2, !dbg !33
  %184 = fmul float %154, 0x3FF7154760000000, !dbg !33
  %185 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %184) #2, !dbg !33
  %186 = fmul float %155, 0x3FF7154760000000, !dbg !33
  %187 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %186) #2, !dbg !33
  %188 = fadd float %157, 1.000000e+00, !dbg !34
  %189 = fadd float %159, 1.000000e+00, !dbg !34
  %190 = fadd float %161, 1.000000e+00, !dbg !34
  %191 = fadd float %163, 1.000000e+00, !dbg !34
  %192 = fadd float %165, 1.000000e+00, !dbg !34
  %193 = fadd float %167, 1.000000e+00, !dbg !34
  %194 = fadd float %169, 1.000000e+00, !dbg !34
  %195 = fadd float %171, 1.000000e+00, !dbg !34
  %196 = fadd float %173, 1.000000e+00, !dbg !34
  %197 = fadd float %175, 1.000000e+00, !dbg !34
  %198 = fadd float %177, 1.000000e+00, !dbg !34
  %199 = fadd float %179, 1.000000e+00, !dbg !34
  %200 = fadd float %181, 1.000000e+00, !dbg !34
  %201 = fadd float %183, 1.000000e+00, !dbg !34
  %202 = fadd float %185, 1.000000e+00, !dbg !34
  %203 = fadd float %187, 1.000000e+00, !dbg !34
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %188) #2, !dbg !35
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %189) #2, !dbg !35
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %190) #2, !dbg !35
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %191) #2, !dbg !35
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %192) #2, !dbg !35
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %193) #2, !dbg !35
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %194) #2, !dbg !35
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %195) #2, !dbg !35
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %196) #2, !dbg !35
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %197) #2, !dbg !35
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %198) #2, !dbg !35
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %199) #2, !dbg !35
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %200) #2, !dbg !35
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %201) #2, !dbg !35
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %202) #2, !dbg !35
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %203) #2, !dbg !35
  %220 = shl i32 %8, 8, !dbg !35
  %221 = and i32 %220, 3840, !dbg !35
  %222 = or disjoint i32 %221, %10, !dbg !35
  %223 = and i32 %14, 1020, !dbg !35
  %224 = lshr exact i32 %221, 2, !dbg !35
  %225 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %224, !dbg !35
  %226 = getelementptr float, ptr addrspace(3) %225, i32 %222, !dbg !35
  %227 = bitcast float %204 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %227, i1 true) #2, !dbg !35
  %228 = or disjoint i32 %222, 64, !dbg !35
  %229 = lshr i32 %228, 6, !dbg !35
  %.idx = shl nuw nsw i32 %229, 4, !dbg !35
  %230 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !35
  %231 = getelementptr float, ptr addrspace(3) %230, i32 %228, !dbg !35
  %232 = bitcast float %205 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %232, i1 true) #2, !dbg !35
  %233 = or disjoint i32 %222, 128, !dbg !35
  %234 = lshr i32 %233, 6, !dbg !35
  %.idx1 = shl nuw nsw i32 %234, 4, !dbg !35
  %235 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !35
  %236 = getelementptr float, ptr addrspace(3) %235, i32 %233, !dbg !35
  %237 = bitcast float %206 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %237, i1 true) #2, !dbg !35
  %238 = or disjoint i32 %222, 192, !dbg !35
  %239 = lshr i32 %238, 6, !dbg !35
  %.idx2 = shl nuw nsw i32 %239, 4, !dbg !35
  %240 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !35
  %241 = getelementptr float, ptr addrspace(3) %240, i32 %238, !dbg !35
  %242 = bitcast float %207 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %242, i1 true) #2, !dbg !35
  %243 = or disjoint i32 %222, 16, !dbg !35
  %244 = getelementptr float, ptr addrspace(3) %225, i32 %243, !dbg !35
  %245 = bitcast float %208 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %245, i1 true) #2, !dbg !35
  %246 = or disjoint i32 %222, 80, !dbg !35
  %247 = lshr i32 %246, 6, !dbg !35
  %.idx3 = shl nuw nsw i32 %247, 4, !dbg !35
  %248 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !35
  %249 = getelementptr float, ptr addrspace(3) %248, i32 %246, !dbg !35
  %250 = bitcast float %209 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, <1 x i32> %250, i1 true) #2, !dbg !35
  %251 = or disjoint i32 %222, 144, !dbg !35
  %252 = lshr i32 %251, 6, !dbg !35
  %.idx4 = shl nuw nsw i32 %252, 4, !dbg !35
  %253 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !35
  %254 = getelementptr float, ptr addrspace(3) %253, i32 %251, !dbg !35
  %255 = bitcast float %210 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %255, i1 true) #2, !dbg !35
  %256 = or disjoint i32 %222, 208, !dbg !35
  %257 = lshr i32 %256, 6, !dbg !35
  %.idx5 = shl nuw nsw i32 %257, 4, !dbg !35
  %258 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !35
  %259 = getelementptr float, ptr addrspace(3) %258, i32 %256, !dbg !35
  %260 = bitcast float %211 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %260, i1 true) #2, !dbg !35
  %261 = or disjoint i32 %222, 32, !dbg !35
  %262 = getelementptr float, ptr addrspace(3) %225, i32 %261, !dbg !35
  %263 = bitcast float %212 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %263, i1 true) #2, !dbg !35
  %264 = or disjoint i32 %222, 96, !dbg !35
  %265 = lshr i32 %264, 6, !dbg !35
  %.idx6 = shl nuw nsw i32 %265, 4, !dbg !35
  %266 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !35
  %267 = getelementptr float, ptr addrspace(3) %266, i32 %264, !dbg !35
  %268 = bitcast float %213 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %268, i1 true) #2, !dbg !35
  %269 = or disjoint i32 %222, 160, !dbg !35
  %270 = lshr i32 %269, 6, !dbg !35
  %.idx7 = shl nuw nsw i32 %270, 4, !dbg !35
  %271 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !35
  %272 = getelementptr float, ptr addrspace(3) %271, i32 %269, !dbg !35
  %273 = bitcast float %214 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %272, <1 x i32> %273, i1 true) #2, !dbg !35
  %274 = or disjoint i32 %222, 224, !dbg !35
  %275 = lshr i32 %274, 6, !dbg !35
  %.idx8 = shl nuw nsw i32 %275, 4, !dbg !35
  %276 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx8, !dbg !35
  %277 = getelementptr float, ptr addrspace(3) %276, i32 %274, !dbg !35
  %278 = bitcast float %215 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %277, <1 x i32> %278, i1 true) #2, !dbg !35
  %279 = or disjoint i32 %222, 48, !dbg !35
  %280 = getelementptr float, ptr addrspace(3) %225, i32 %279, !dbg !35
  %281 = bitcast float %216 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %281, i1 true) #2, !dbg !35
  %282 = or disjoint i32 %222, 112, !dbg !35
  %283 = lshr i32 %282, 6, !dbg !35
  %.idx9 = shl nuw nsw i32 %283, 4, !dbg !35
  %284 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx9, !dbg !35
  %285 = getelementptr float, ptr addrspace(3) %284, i32 %282, !dbg !35
  %286 = bitcast float %217 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %286, i1 true) #2, !dbg !35
  %287 = or disjoint i32 %222, 176, !dbg !35
  %288 = lshr i32 %287, 6, !dbg !35
  %.idx10 = shl nuw nsw i32 %288, 4, !dbg !35
  %289 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx10, !dbg !35
  %290 = getelementptr float, ptr addrspace(3) %289, i32 %287, !dbg !35
  %291 = bitcast float %218 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %291, i1 true) #2, !dbg !35
  %292 = or disjoint i32 %222, 240, !dbg !35
  %293 = lshr i32 %292, 6, !dbg !35
  %.idx11 = shl nuw nsw i32 %293, 4, !dbg !35
  %294 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx11, !dbg !35
  %295 = getelementptr float, ptr addrspace(3) %294, i32 %292, !dbg !35
  %296 = bitcast float %219 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %295, <1 x i32> %296, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %297 = lshr i32 %223, 6, !dbg !35
  %298 = and i32 %8, 255, !dbg !35
  %299 = add nuw nsw i32 %297, %298, !dbg !35
  %.idx12 = shl nuw nsw i32 %299, 4, !dbg !35
  %300 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx12, !dbg !35
  %301 = load float, ptr addrspace(3) %300, align 16, !dbg !35
  %302 = getelementptr inbounds i8, ptr addrspace(3) %300, i32 4, !dbg !35
  %303 = load float, ptr addrspace(3) %302, align 4, !dbg !35
  %304 = getelementptr inbounds i8, ptr addrspace(3) %300, i32 8, !dbg !35
  %305 = load float, ptr addrspace(3) %304, align 8, !dbg !35
  %306 = getelementptr inbounds i8, ptr addrspace(3) %300, i32 12, !dbg !35
  %307 = load float, ptr addrspace(3) %306, align 4, !dbg !35
  %308 = or disjoint i32 %223, 1024, !dbg !35
  %309 = lshr i32 %308, 6, !dbg !35
  %.idx16 = shl nuw nsw i32 %309, 4, !dbg !35
  %310 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx16, !dbg !35
  %311 = getelementptr inbounds float, ptr addrspace(3) %310, i32 %308, !dbg !35
  %312 = load float, ptr addrspace(3) %311, align 16, !dbg !35
  %313 = getelementptr inbounds i8, ptr addrspace(3) %311, i32 4, !dbg !35
  %314 = load float, ptr addrspace(3) %313, align 4, !dbg !35
  %315 = getelementptr inbounds i8, ptr addrspace(3) %311, i32 8, !dbg !35
  %316 = load float, ptr addrspace(3) %315, align 8, !dbg !35
  %317 = getelementptr inbounds i8, ptr addrspace(3) %311, i32 12, !dbg !35
  %318 = load float, ptr addrspace(3) %317, align 4, !dbg !35
  %319 = or disjoint i32 %223, 2048, !dbg !35
  %320 = lshr i32 %319, 6, !dbg !35
  %.idx21 = shl nuw nsw i32 %320, 4, !dbg !35
  %321 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx21, !dbg !35
  %322 = getelementptr inbounds float, ptr addrspace(3) %321, i32 %319, !dbg !35
  %323 = load float, ptr addrspace(3) %322, align 16, !dbg !35
  %324 = getelementptr inbounds i8, ptr addrspace(3) %322, i32 4, !dbg !35
  %325 = load float, ptr addrspace(3) %324, align 4, !dbg !35
  %326 = getelementptr inbounds i8, ptr addrspace(3) %322, i32 8, !dbg !35
  %327 = load float, ptr addrspace(3) %326, align 8, !dbg !35
  %328 = getelementptr inbounds i8, ptr addrspace(3) %322, i32 12, !dbg !35
  %329 = load float, ptr addrspace(3) %328, align 4, !dbg !35
  %330 = or disjoint i32 %223, 3072, !dbg !35
  %331 = lshr i32 %330, 6, !dbg !35
  %.idx26 = shl nuw nsw i32 %331, 4, !dbg !35
  %332 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx26, !dbg !35
  %333 = getelementptr inbounds float, ptr addrspace(3) %332, i32 %330, !dbg !35
  %334 = load float, ptr addrspace(3) %333, align 16, !dbg !35
  %335 = getelementptr inbounds i8, ptr addrspace(3) %333, i32 4, !dbg !35
  %336 = load float, ptr addrspace(3) %335, align 4, !dbg !35
  %337 = getelementptr inbounds i8, ptr addrspace(3) %333, i32 8, !dbg !35
  %338 = load float, ptr addrspace(3) %337, align 8, !dbg !35
  %339 = getelementptr inbounds i8, ptr addrspace(3) %333, i32 12, !dbg !35
  %340 = load float, ptr addrspace(3) %339, align 4, !dbg !35
  %341 = fmul float %301, %109, !dbg !36
  %342 = fmul float %303, %110, !dbg !36
  %343 = fmul float %305, %111, !dbg !36
  %344 = fmul float %307, %112, !dbg !36
  %345 = fmul float %312, %118, !dbg !36
  %346 = fmul float %314, %119, !dbg !36
  %347 = fmul float %316, %120, !dbg !36
  %348 = fmul float %318, %121, !dbg !36
  %349 = fmul float %323, %127, !dbg !36
  %350 = fmul float %325, %128, !dbg !36
  %351 = fmul float %327, %129, !dbg !36
  %352 = fmul float %329, %130, !dbg !36
  %353 = fmul float %334, %136, !dbg !36
  %354 = fmul float %336, %137, !dbg !36
  %355 = fmul float %338, %138, !dbg !36
  %356 = fmul float %340, %139, !dbg !36
  %357 = shl i32 %16, 12, !dbg !37
  %358 = shl i32 %17, 12, !dbg !37
  %359 = shl i32 %18, 12, !dbg !37
  %360 = shl i32 %19, 12, !dbg !37
  %361 = add i32 %23, %357, !dbg !38
  %362 = add i32 %23, %358, !dbg !38
  %363 = add i32 %23, %359, !dbg !38
  %364 = add i32 %23, %360, !dbg !38
  %365 = sext i32 %361 to i64, !dbg !39
  %366 = getelementptr float, ptr addrspace(1) %2, i64 %365, !dbg !39
  %367 = sext i32 %362 to i64, !dbg !39
  %368 = getelementptr float, ptr addrspace(1) %2, i64 %367, !dbg !39
  %369 = sext i32 %363 to i64, !dbg !39
  %370 = getelementptr float, ptr addrspace(1) %2, i64 %369, !dbg !39
  %371 = sext i32 %364 to i64, !dbg !39
  %372 = getelementptr float, ptr addrspace(1) %2, i64 %371, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %373 = lshr exact i32 %221, 4, !dbg !40
  %374 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %373, !dbg !40
  %375 = getelementptr float, ptr addrspace(3) %374, i32 %222, !dbg !40
  %376 = bitcast float %341 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %375, <1 x i32> %376, i1 true) #2, !dbg !40
  %377 = getelementptr float, ptr addrspace(3) @global_smem, i32 %229, !dbg !40
  %378 = getelementptr float, ptr addrspace(3) %377, i32 %228, !dbg !40
  %379 = bitcast float %342 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %378, <1 x i32> %379, i1 true) #2, !dbg !40
  %380 = getelementptr float, ptr addrspace(3) @global_smem, i32 %234, !dbg !40
  %381 = getelementptr float, ptr addrspace(3) %380, i32 %233, !dbg !40
  %382 = bitcast float %343 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, <1 x i32> %382, i1 true) #2, !dbg !40
  %383 = getelementptr float, ptr addrspace(3) @global_smem, i32 %239, !dbg !40
  %384 = getelementptr float, ptr addrspace(3) %383, i32 %238, !dbg !40
  %385 = bitcast float %344 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %385, i1 true) #2, !dbg !40
  %386 = getelementptr float, ptr addrspace(3) %374, i32 %243, !dbg !40
  %387 = bitcast float %345 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %387, i1 true) #2, !dbg !40
  %388 = getelementptr float, ptr addrspace(3) @global_smem, i32 %247, !dbg !40
  %389 = getelementptr float, ptr addrspace(3) %388, i32 %246, !dbg !40
  %390 = bitcast float %346 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %390, i1 true) #2, !dbg !40
  %391 = getelementptr float, ptr addrspace(3) @global_smem, i32 %252, !dbg !40
  %392 = getelementptr float, ptr addrspace(3) %391, i32 %251, !dbg !40
  %393 = bitcast float %347 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %393, i1 true) #2, !dbg !40
  %394 = getelementptr float, ptr addrspace(3) @global_smem, i32 %257, !dbg !40
  %395 = getelementptr float, ptr addrspace(3) %394, i32 %256, !dbg !40
  %396 = bitcast float %348 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %395, <1 x i32> %396, i1 true) #2, !dbg !40
  %397 = getelementptr float, ptr addrspace(3) %374, i32 %261, !dbg !40
  %398 = bitcast float %349 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %397, <1 x i32> %398, i1 true) #2, !dbg !40
  %399 = getelementptr float, ptr addrspace(3) @global_smem, i32 %265, !dbg !40
  %400 = getelementptr float, ptr addrspace(3) %399, i32 %264, !dbg !40
  %401 = bitcast float %350 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %400, <1 x i32> %401, i1 true) #2, !dbg !40
  %402 = getelementptr float, ptr addrspace(3) @global_smem, i32 %270, !dbg !40
  %403 = getelementptr float, ptr addrspace(3) %402, i32 %269, !dbg !40
  %404 = bitcast float %351 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %403, <1 x i32> %404, i1 true) #2, !dbg !40
  %405 = getelementptr float, ptr addrspace(3) @global_smem, i32 %275, !dbg !40
  %406 = getelementptr float, ptr addrspace(3) %405, i32 %274, !dbg !40
  %407 = bitcast float %352 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %406, <1 x i32> %407, i1 true) #2, !dbg !40
  %408 = getelementptr float, ptr addrspace(3) %374, i32 %279, !dbg !40
  %409 = bitcast float %353 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %408, <1 x i32> %409, i1 true) #2, !dbg !40
  %410 = getelementptr float, ptr addrspace(3) @global_smem, i32 %283, !dbg !40
  %411 = getelementptr float, ptr addrspace(3) %410, i32 %282, !dbg !40
  %412 = bitcast float %354 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %412, i1 true) #2, !dbg !40
  %413 = getelementptr float, ptr addrspace(3) @global_smem, i32 %288, !dbg !40
  %414 = getelementptr float, ptr addrspace(3) %413, i32 %287, !dbg !40
  %415 = bitcast float %355 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %414, <1 x i32> %415, i1 true) #2, !dbg !40
  %416 = getelementptr float, ptr addrspace(3) @global_smem, i32 %293, !dbg !40
  %417 = getelementptr float, ptr addrspace(3) %416, i32 %292, !dbg !40
  %418 = bitcast float %356 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %417, <1 x i32> %418, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %419 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %297, !dbg !40
  %420 = getelementptr inbounds float, ptr addrspace(3) %419, i32 %223, !dbg !40
  %421 = load i32, ptr addrspace(3) %420, align 4, !dbg !40
  %422 = or disjoint i32 %223, 1, !dbg !40
  %423 = getelementptr inbounds float, ptr addrspace(3) %419, i32 %422, !dbg !40
  %424 = load i32, ptr addrspace(3) %423, align 4, !dbg !40
  %425 = or disjoint i32 %223, 2, !dbg !40
  %426 = getelementptr inbounds float, ptr addrspace(3) %419, i32 %425, !dbg !40
  %427 = load i32, ptr addrspace(3) %426, align 4, !dbg !40
  %428 = or disjoint i32 %223, 3, !dbg !40
  %429 = getelementptr inbounds float, ptr addrspace(3) %419, i32 %428, !dbg !40
  %430 = load i32, ptr addrspace(3) %429, align 4, !dbg !40
  %431 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %309, !dbg !40
  %432 = getelementptr inbounds float, ptr addrspace(3) %431, i32 %308, !dbg !40
  %433 = load i32, ptr addrspace(3) %432, align 4, !dbg !40
  %434 = or disjoint i32 %223, 1025, !dbg !40
  %435 = lshr i32 %434, 6, !dbg !40
  %436 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %435, !dbg !40
  %437 = getelementptr inbounds float, ptr addrspace(3) %436, i32 %434, !dbg !40
  %438 = load i32, ptr addrspace(3) %437, align 4, !dbg !40
  %439 = or disjoint i32 %223, 1026, !dbg !40
  %440 = lshr i32 %439, 6, !dbg !40
  %441 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %440, !dbg !40
  %442 = getelementptr inbounds float, ptr addrspace(3) %441, i32 %439, !dbg !40
  %443 = load i32, ptr addrspace(3) %442, align 4, !dbg !40
  %444 = or disjoint i32 %223, 1027, !dbg !40
  %445 = lshr i32 %444, 6, !dbg !40
  %446 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %445, !dbg !40
  %447 = getelementptr inbounds float, ptr addrspace(3) %446, i32 %444, !dbg !40
  %448 = load i32, ptr addrspace(3) %447, align 4, !dbg !40
  %449 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %320, !dbg !40
  %450 = getelementptr inbounds float, ptr addrspace(3) %449, i32 %319, !dbg !40
  %451 = load i32, ptr addrspace(3) %450, align 4, !dbg !40
  %452 = or disjoint i32 %223, 2049, !dbg !40
  %453 = lshr i32 %452, 6, !dbg !40
  %454 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %453, !dbg !40
  %455 = getelementptr inbounds float, ptr addrspace(3) %454, i32 %452, !dbg !40
  %456 = load i32, ptr addrspace(3) %455, align 4, !dbg !40
  %457 = or disjoint i32 %223, 2050, !dbg !40
  %458 = lshr i32 %457, 6, !dbg !40
  %459 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %458, !dbg !40
  %460 = getelementptr inbounds float, ptr addrspace(3) %459, i32 %457, !dbg !40
  %461 = load i32, ptr addrspace(3) %460, align 4, !dbg !40
  %462 = or disjoint i32 %223, 2051, !dbg !40
  %463 = lshr i32 %462, 6, !dbg !40
  %464 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %463, !dbg !40
  %465 = getelementptr inbounds float, ptr addrspace(3) %464, i32 %462, !dbg !40
  %466 = load i32, ptr addrspace(3) %465, align 4, !dbg !40
  %467 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %331, !dbg !40
  %468 = getelementptr inbounds float, ptr addrspace(3) %467, i32 %330, !dbg !40
  %469 = load i32, ptr addrspace(3) %468, align 4, !dbg !40
  %470 = or disjoint i32 %223, 3073, !dbg !40
  %471 = lshr i32 %470, 6, !dbg !40
  %472 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %471, !dbg !40
  %473 = getelementptr inbounds float, ptr addrspace(3) %472, i32 %470, !dbg !40
  %474 = load i32, ptr addrspace(3) %473, align 4, !dbg !40
  %475 = or disjoint i32 %223, 3074, !dbg !40
  %476 = lshr i32 %475, 6, !dbg !40
  %477 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %476, !dbg !40
  %478 = getelementptr inbounds float, ptr addrspace(3) %477, i32 %475, !dbg !40
  %479 = load i32, ptr addrspace(3) %478, align 4, !dbg !40
  %480 = or disjoint i32 %223, 3075, !dbg !40
  %481 = lshr i32 %480, 6, !dbg !40
  %482 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %481, !dbg !40
  %483 = getelementptr inbounds float, ptr addrspace(3) %482, i32 %480, !dbg !40
  %484 = load i32, ptr addrspace(3) %483, align 4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %421, i32 %424, i32 %427, i32 %430, ptr addrspace(1) %366, i1 true) #2, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %433, i32 %438, i32 %443, i32 %448, ptr addrspace(1) %368, i1 true) #2, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %451, i32 %456, i32 %461, i32 %466, ptr addrspace(1) %370, i1 true) #2, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %469, i32 %474, i32 %479, i32 %484, ptr addrspace(1) %372, i1 true) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cavo4uldffbq7654bxkz3jjrcn2tlfizqozp5mp5pbbzy4y2gn4a.py", directory: "inductor_cache/av")
!4 = !{ptr @triton_poi_fused_mul_sigmoid_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_sigmoid_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_sigmoid_8", linkageName: "triton_poi_fused_mul_sigmoid_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 45, scope: !7)
!23 = !DILocation(line: 33, column: 39, scope: !7)
!24 = !DILocation(line: 33, column: 52, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 33, column: 44, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 57, scope: !7)
!29 = !DILocation(line: 47, column: 30, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = !DILocation(line: 34, column: 22, scope: !7)
!33 = !DILocation(line: 47, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 47, column: 20, scope: !30, inlinedAt: !32)
!35 = !DILocation(line: 47, column: 16, scope: !30, inlinedAt: !32)
!36 = !DILocation(line: 35, column: 18, scope: !7)
!37 = !DILocation(line: 36, column: 35, scope: !7)
!38 = !DILocation(line: 36, column: 30, scope: !7)
!39 = !DILocation(line: 36, column: 25, scope: !7)
!40 = !DILocation(line: 36, column: 46, scope: !7)
!41 = !DILocation(line: 36, column: 4, scope: !7)
