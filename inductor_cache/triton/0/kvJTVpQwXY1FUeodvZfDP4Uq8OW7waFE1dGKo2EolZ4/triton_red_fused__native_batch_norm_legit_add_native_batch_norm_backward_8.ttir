#loc = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":19:0)
#loc1 = loc(unknown)
#loc30 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":43:41)
#loc82 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":84:44)
#loc123 = loc(callsite(#loc1 at #loc30))
#loc146 = loc(callsite(#loc1 at #loc82))
module {
  tt.func public @triton_red_fused__native_batch_norm_legit_add_native_batch_norm_backward_8(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":19:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":19:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":19:0)) attributes {noinline = false} {
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32> loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32> loc(#loc1)
    %cst_2 = arith.constant dense<4.096000e+03> : tensor<1x1xf32> loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32> loc(#loc1)
    %cst_4 = arith.constant dense<4096> : tensor<1x2048xi32> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.splat %1 : i1 -> tensor<1x1xi1> loc(#loc3)
    %3 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32> loc(#loc4)
    %4 = tt.expand_dims %3 {axis = 0 : i32} : tensor<2048xi32> -> tensor<1x2048xi32> loc(#loc5)
    %5 = arith.muli %0, %c4096_i32 : i32 loc(#loc6)
    %6 = tt.splat %5 : i32 -> tensor<1x2048xi32> loc(#loc7)
    %7 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>> loc(#loc8)
    %8 = tt.splat %1 : i1 -> tensor<1x2048xi1> loc(#loc9)
    %9:3 = scf.for %arg12 = %c0_i32 to %c4096_i32 step %c2048_i32 iter_args(%arg13 = %cst_3, %arg14 = %cst_3, %arg15 = %cst_3) -> (tensor<1x2048xf32>, tensor<1x2048xf32>, tensor<1x2048xf32>)  : i32 {
      %62 = tt.splat %arg12 : i32 -> tensor<1x2048xi32> loc(#loc11)
      %63 = arith.addi %62, %4 : tensor<1x2048xi32> loc(#loc11)
      %64 = arith.cmpi slt, %63, %cst_4 : tensor<1x2048xi32> loc(#loc12)
      %65 = arith.addi %63, %6 : tensor<1x2048xi32> loc(#loc7)
      %66 = tt.addptr %7, %65 : tensor<1x2048x!tt.ptr<f32>>, tensor<1x2048xi32> loc(#loc8)
      %67 = arith.andi %64, %8 : tensor<1x2048xi1> loc(#loc9)
      %68 = tt.load %66, %67, %cst_3 evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<f32>> loc(#loc13)
      %69 = arith.cmpi eq, %arg12, %c0_i32 : i32 loc(#loc14)
      %70:3 = scf.if %69 -> (tensor<1x2048xf32>, tensor<1x2048xf32>, tensor<1x2048xf32>) {
        scf.yield %cst_3, %68, %cst_0 : tensor<1x2048xf32>, tensor<1x2048xf32>, tensor<1x2048xf32> loc(#loc114)
      } else {
        %74 = arith.subf %68, %arg13 : tensor<1x2048xf32> loc(#loc115)
        %75 = arith.addf %arg15, %cst_0 : tensor<1x2048xf32> loc(#loc116)
        %76 = arith.divf %74, %75 : tensor<1x2048xf32> loc(#loc117)
        %77 = arith.addf %arg13, %76 : tensor<1x2048xf32> loc(#loc118)
        %78 = arith.subf %68, %77 : tensor<1x2048xf32> loc(#loc119)
        %79 = arith.mulf %74, %78 : tensor<1x2048xf32> loc(#loc120)
        %80 = arith.addf %arg14, %79 : tensor<1x2048xf32> loc(#loc121)
        scf.yield %80, %77, %75 : tensor<1x2048xf32>, tensor<1x2048xf32>, tensor<1x2048xf32> loc(#loc121)
      } loc(#loc113)
      %71 = arith.select %67, %70#1, %arg13 : tensor<1x2048xi1>, tensor<1x2048xf32> loc(#loc25)
      %72 = arith.select %67, %70#0, %arg14 : tensor<1x2048xi1>, tensor<1x2048xf32> loc(#loc26)
      %73 = arith.select %67, %70#2, %arg15 : tensor<1x2048xi1>, tensor<1x2048xf32> loc(#loc27)
      scf.yield %71, %72, %73 : tensor<1x2048xf32>, tensor<1x2048xf32>, tensor<1x2048xf32> loc(#loc28)
    } loc(#loc10)
    %10:3 = "tt.reduce"(%9#0, %9#1, %9#2) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32 loc(callsite(#loc1 at #loc30)), %arg13: f32 loc(callsite(#loc1 at #loc30)), %arg14: f32 loc(callsite(#loc1 at #loc30)), %arg15: f32 loc(callsite(#loc1 at #loc30)), %arg16: f32 loc(callsite(#loc1 at #loc30)), %arg17: f32 loc(callsite(#loc1 at #loc30))):
      %62 = arith.subf %arg15, %arg12 : f32 loc(#loc147)
      %63 = arith.addf %arg14, %arg17 : f32 loc(#loc148)
      %64 = arith.cmpf oeq, %63, %cst : f32 loc(#loc149)
      %65 = arith.divf %arg17, %63 : f32 loc(#loc150)
      %66 = arith.select %64, %cst, %65 : f32 loc(#loc151)
      %67 = arith.mulf %62, %66 : f32 loc(#loc152)
      %68 = arith.addf %arg12, %67 : f32 loc(#loc153)
      %69 = arith.addf %arg13, %arg16 : f32 loc(#loc154)
      %70 = arith.mulf %62, %62 : f32 loc(#loc155)
      %71 = arith.mulf %70, %arg14 : f32 loc(#loc156)
      %72 = arith.mulf %71, %66 : f32 loc(#loc157)
      %73 = arith.addf %69, %72 : f32 loc(#loc158)
      tt.reduce.return %68, %73, %63 : f32, f32, f32 loc(#loc122)
    }) : (tensor<1x2048xf32>, tensor<1x2048xf32>, tensor<1x2048xf32>) -> (tensor<1xf32>, tensor<1xf32>, tensor<1xf32>) loc(#loc122)
    %11 = tt.expand_dims %10#0 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc43)
    %12 = tt.expand_dims %10#1 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc44)
    %13 = tt.addptr %arg5, %0 : !tt.ptr<f32>, i32 loc(#loc45)
    %14 = tt.splat %13 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc45)
    tt.store %14, %11, %2 : tensor<1x1x!tt.ptr<f32>> loc(#loc46)
    %15 = tt.addptr %arg3, %0 : !tt.ptr<f32>, i32 loc(#loc47)
    %16 = tt.splat %15 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc47)
    %17 = tt.load %16, %2 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>> loc(#loc48)
    %18 = tt.addptr %arg4, %0 : !tt.ptr<f32>, i32 loc(#loc49)
    %19 = tt.splat %18 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc49)
    %20 = tt.load %19, %2 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>> loc(#loc50)
    %21 = arith.muli %0, %c4096_i32 : i32 loc(#loc51)
    %22 = tt.splat %21 : i32 -> tensor<1x2048xi32> loc(#loc52)
    %23 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>> loc(#loc53)
    %24 = tt.splat %1 : i1 -> tensor<1x2048xi1> loc(#loc54)
    %25 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>> loc(#loc55)
    %26 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>> loc(#loc56)
    %27 = tt.broadcast %17 : tensor<1x1xf32> -> tensor<1x2048xf32> loc(#loc57)
    %28 = arith.divf %20, %cst_2 : tensor<1x1xf32> loc(#loc58)
    %29 = arith.addf %28, %cst_1 : tensor<1x1xf32> loc(#loc59)
    %30 = tt.extern_elementwise %29 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32> loc(#loc60)
    %31 = tt.broadcast %30 : tensor<1x1xf32> -> tensor<1x2048xf32> loc(#loc61)
    %32 = tt.broadcast %11 : tensor<1x1xf32> -> tensor<1x2048xf32> loc(#loc62)
    %33 = arith.divf %12, %cst_2 : tensor<1x1xf32> loc(#loc63)
    %34 = arith.addf %33, %cst_1 : tensor<1x1xf32> loc(#loc64)
    %35 = tt.extern_elementwise %34 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32> loc(#loc65)
    %36 = tt.broadcast %35 : tensor<1x1xf32> -> tensor<1x2048xf32> loc(#loc66)
    %37:3 = scf.for %arg12 = %c0_i32 to %c4096_i32 step %c2048_i32 iter_args(%arg13 = %cst_3, %arg14 = %cst_3, %arg15 = %cst_3) -> (tensor<1x2048xf32>, tensor<1x2048xf32>, tensor<1x2048xf32>)  : i32 {
      %62 = tt.splat %arg12 : i32 -> tensor<1x2048xi32> loc(#loc68)
      %63 = arith.addi %62, %4 : tensor<1x2048xi32> loc(#loc68)
      %64 = arith.cmpi slt, %63, %cst_4 : tensor<1x2048xi32> loc(#loc69)
      %65 = arith.addi %63, %22 : tensor<1x2048xi32> loc(#loc52)
      %66 = tt.addptr %23, %65 : tensor<1x2048x!tt.ptr<f32>>, tensor<1x2048xi32> loc(#loc53)
      %67 = arith.andi %64, %24 : tensor<1x2048xi1> loc(#loc54)
      %68 = tt.load %66, %67, %cst_3 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>> loc(#loc70)
      %69 = tt.addptr %25, %65 : tensor<1x2048x!tt.ptr<f32>>, tensor<1x2048xi32> loc(#loc55)
      %70 = tt.load %69, %67, %cst_3 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>> loc(#loc71)
      %71 = tt.addptr %26, %65 : tensor<1x2048x!tt.ptr<f32>>, tensor<1x2048xi32> loc(#loc56)
      %72 = tt.load %71, %67, %cst_3 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>> loc(#loc72)
      %73 = arith.subf %70, %27 : tensor<1x2048xf32> loc(#loc57)
      %74 = arith.mulf %73, %31 : tensor<1x2048xf32> loc(#loc61)
      %75 = arith.addf %68, %74 : tensor<1x2048xf32> loc(#loc73)
      %76 = arith.subf %72, %32 : tensor<1x2048xf32> loc(#loc62)
      %77 = arith.mulf %76, %36 : tensor<1x2048xf32> loc(#loc66)
      %78 = arith.addf %75, %77 : tensor<1x2048xf32> loc(#loc74)
      %79 = arith.cmpi eq, %arg12, %c0_i32 : i32 loc(#loc75)
      %80:3 = scf.if %79 -> (tensor<1x2048xf32>, tensor<1x2048xf32>, tensor<1x2048xf32>) {
        scf.yield %cst_3, %78, %cst_0 : tensor<1x2048xf32>, tensor<1x2048xf32>, tensor<1x2048xf32> loc(#loc137)
      } else {
        %84 = arith.subf %78, %arg13 : tensor<1x2048xf32> loc(#loc138)
        %85 = arith.addf %arg15, %cst_0 : tensor<1x2048xf32> loc(#loc139)
        %86 = arith.divf %84, %85 : tensor<1x2048xf32> loc(#loc140)
        %87 = arith.addf %arg13, %86 : tensor<1x2048xf32> loc(#loc141)
        %88 = arith.subf %78, %87 : tensor<1x2048xf32> loc(#loc142)
        %89 = arith.mulf %84, %88 : tensor<1x2048xf32> loc(#loc143)
        %90 = arith.addf %arg14, %89 : tensor<1x2048xf32> loc(#loc144)
        scf.yield %90, %87, %85 : tensor<1x2048xf32>, tensor<1x2048xf32>, tensor<1x2048xf32> loc(#loc144)
      } loc(#loc136)
      %81 = arith.select %67, %80#1, %arg13 : tensor<1x2048xi1>, tensor<1x2048xf32> loc(#loc77)
      %82 = arith.select %67, %80#0, %arg14 : tensor<1x2048xi1>, tensor<1x2048xf32> loc(#loc78)
      %83 = arith.select %67, %80#2, %arg15 : tensor<1x2048xi1>, tensor<1x2048xf32> loc(#loc79)
      tt.store %66, %78, %67 : tensor<1x2048x!tt.ptr<f32>> loc(#loc80)
      scf.yield %81, %82, %83 : tensor<1x2048xf32>, tensor<1x2048xf32>, tensor<1x2048xf32> loc(#loc81)
    } loc(#loc67)
    %38:3 = "tt.reduce"(%37#0, %37#1, %37#2) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32 loc(callsite(#loc1 at #loc82)), %arg13: f32 loc(callsite(#loc1 at #loc82)), %arg14: f32 loc(callsite(#loc1 at #loc82)), %arg15: f32 loc(callsite(#loc1 at #loc82)), %arg16: f32 loc(callsite(#loc1 at #loc82)), %arg17: f32 loc(callsite(#loc1 at #loc82))):
      %62 = arith.subf %arg15, %arg12 : f32 loc(#loc159)
      %63 = arith.addf %arg14, %arg17 : f32 loc(#loc160)
      %64 = arith.cmpf oeq, %63, %cst : f32 loc(#loc161)
      %65 = arith.divf %arg17, %63 : f32 loc(#loc162)
      %66 = arith.select %64, %cst, %65 : f32 loc(#loc163)
      %67 = arith.mulf %62, %66 : f32 loc(#loc164)
      %68 = arith.addf %arg12, %67 : f32 loc(#loc165)
      %69 = arith.addf %arg13, %arg16 : f32 loc(#loc166)
      %70 = arith.mulf %62, %62 : f32 loc(#loc167)
      %71 = arith.mulf %70, %arg14 : f32 loc(#loc168)
      %72 = arith.mulf %71, %66 : f32 loc(#loc169)
      %73 = arith.addf %69, %72 : f32 loc(#loc170)
      tt.reduce.return %68, %73, %63 : f32, f32, f32 loc(#loc145)
    }) : (tensor<1x2048xf32>, tensor<1x2048xf32>, tensor<1x2048xf32>) -> (tensor<1xf32>, tensor<1xf32>, tensor<1xf32>) loc(#loc145)
    %39 = tt.expand_dims %38#0 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc83)
    %40 = tt.expand_dims %38#1 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc84)
    %41 = arith.muli %0, %c4096_i32 : i32 loc(#loc85)
    %42 = tt.splat %41 : i32 -> tensor<1x2048xi32> loc(#loc86)
    %43 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>> loc(#loc87)
    %44 = tt.splat %1 : i1 -> tensor<1x2048xi1> loc(#loc88)
    %45 = tt.broadcast %39 : tensor<1x1xf32> -> tensor<1x2048xf32> loc(#loc89)
    %46 = arith.divf %40, %cst_2 : tensor<1x1xf32> loc(#loc90)
    %47 = arith.addf %46, %cst_1 : tensor<1x1xf32> loc(#loc91)
    %48 = tt.extern_elementwise %47 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32> loc(#loc92)
    %49 = tt.broadcast %48 : tensor<1x1xf32> -> tensor<1x2048xf32> loc(#loc93)
    %50 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>> loc(#loc94)
    %51 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>> loc(#loc95)
    scf.for %arg12 = %c0_i32 to %c4096_i32 step %c2048_i32  : i32 {
      %62 = tt.splat %arg12 : i32 -> tensor<1x2048xi32> loc(#loc97)
      %63 = arith.addi %62, %4 : tensor<1x2048xi32> loc(#loc97)
      %64 = arith.cmpi slt, %63, %cst_4 : tensor<1x2048xi32> loc(#loc98)
      %65 = arith.addi %63, %42 : tensor<1x2048xi32> loc(#loc86)
      %66 = tt.addptr %43, %65 : tensor<1x2048x!tt.ptr<f32>>, tensor<1x2048xi32> loc(#loc87)
      %67 = arith.andi %64, %44 : tensor<1x2048xi1> loc(#loc88)
      %68 = tt.load %66, %67, %cst_3 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>> loc(#loc99)
      %69 = arith.subf %68, %45 : tensor<1x2048xf32> loc(#loc89)
      %70 = arith.mulf %69, %49 : tensor<1x2048xf32> loc(#loc93)
      %71 = tt.addptr %50, %65 : tensor<1x2048x!tt.ptr<f32>>, tensor<1x2048xi32> loc(#loc94)
      tt.store %71, %70, %67 : tensor<1x2048x!tt.ptr<f32>> loc(#loc100)
      %72 = tt.addptr %51, %65 : tensor<1x2048x!tt.ptr<f32>>, tensor<1x2048xi32> loc(#loc95)
      tt.store %72, %69, %67 : tensor<1x2048x!tt.ptr<f32>> loc(#loc101)
    } loc(#loc96)
    %52 = arith.divf %12, %cst_2 : tensor<1x1xf32> loc(#loc102)
    %53 = arith.addf %52, %cst_1 : tensor<1x1xf32> loc(#loc103)
    %54 = tt.extern_elementwise %53 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32> loc(#loc104)
    %55 = arith.divf %40, %cst_2 : tensor<1x1xf32> loc(#loc105)
    %56 = arith.addf %55, %cst_1 : tensor<1x1xf32> loc(#loc106)
    %57 = tt.extern_elementwise %56 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32> loc(#loc107)
    %58 = tt.addptr %arg8, %0 : !tt.ptr<f32>, i32 loc(#loc108)
    %59 = tt.splat %58 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc108)
    tt.store %59, %54, %2 : tensor<1x1x!tt.ptr<f32>> loc(#loc109)
    %60 = tt.addptr %arg9, %0 : !tt.ptr<f32>, i32 loc(#loc110)
    %61 = tt.splat %60 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc110)
    tt.store %61, %57, %2 : tensor<1x1x!tt.ptr<f32>> loc(#loc111)
    tt.return loc(#loc112)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":22:28)
#loc3 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":24:21)
#loc4 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":25:25)
#loc5 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":25:33)
#loc6 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":34:44)
#loc7 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":34:39)
#loc8 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":34:34)
#loc9 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":34:57)
#loc10 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":30:36)
#loc11 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":31:27)
#loc12 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":32:25)
#loc13 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":34:49)
#loc14 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":37:62)
#loc15 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":178:7)
#loc16 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":37:51)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":181:31)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":183:24)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":184:30)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:34)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:26)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:39)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:31)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:22)
#loc25 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":39:60)
#loc26 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":40:56)
#loc27 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":41:64)
#loc28 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":41:8)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":204:46)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":192:21)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":193:28)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:39)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:60)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:49)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:25)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:17)
#loc38 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:15)
#loc39 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:30)
#loc40 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:38)
#loc41 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:49)
#loc42 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:22)
#loc43 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":45:20)
#loc44 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":46:20)
#loc45 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":48:25)
#loc46 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":48:36)
#loc47 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":49:30)
#loc48 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":49:35)
#loc49 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":50:30)
#loc50 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":50:35)
#loc51 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":58:48)
#loc52 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":58:43)
#loc53 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":58:38)
#loc54 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":58:61)
#loc55 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":59:34)
#loc56 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":60:35)
#loc57 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":61:22)
#loc58 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":63:23)
#loc59 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":65:24)
#loc60 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":66:32)
#loc61 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":67:23)
#loc62 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":69:24)
#loc63 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":70:23)
#loc64 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":71:24)
#loc65 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":72:32)
#loc66 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":73:24)
#loc67 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":54:36)
#loc68 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":55:27)
#loc69 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":56:25)
#loc70 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":58:53)
#loc71 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":59:49)
#loc72 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":60:50)
#loc73 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":68:23)
#loc74 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":74:24)
#loc75 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":77:66)
#loc76 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":77:55)
#loc77 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":79:62)
#loc78 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":80:58)
#loc79 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":81:66)
#loc80 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":82:54)
#loc81 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":82:8)
#loc83 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":86:22)
#loc84 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":87:22)
#loc85 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":93:49)
#loc86 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":93:44)
#loc87 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":93:39)
#loc88 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":93:62)
#loc89 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":94:24)
#loc90 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":96:24)
#loc91 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":98:24)
#loc92 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":99:32)
#loc93 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":100:24)
#loc94 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":101:29)
#loc95 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":102:29)
#loc96 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":89:36)
#loc97 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":90:27)
#loc98 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":91:25)
#loc99 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":93:54)
#loc100 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":101:51)
#loc101 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":102:51)
#loc102 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":104:19)
#loc103 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":106:20)
#loc104 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":107:28)
#loc105 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":108:20)
#loc106 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":109:20)
#loc107 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":110:28)
#loc108 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":111:25)
#loc109 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":111:37)
#loc110 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":112:25)
#loc111 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":112:37)
#loc112 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":112:4)
#loc113 = loc(callsite(#loc15 at #loc16))
#loc114 = loc(callsite(#loc17 at #loc16))
#loc115 = loc(callsite(#loc18 at #loc16))
#loc116 = loc(callsite(#loc19 at #loc16))
#loc117 = loc(callsite(#loc20 at #loc16))
#loc118 = loc(callsite(#loc21 at #loc16))
#loc119 = loc(callsite(#loc22 at #loc16))
#loc120 = loc(callsite(#loc23 at #loc16))
#loc121 = loc(callsite(#loc24 at #loc16))
#loc122 = loc(callsite(#loc29 at #loc30))
#loc124 = loc(callsite(#loc31 at #loc29))
#loc125 = loc(callsite(#loc32 at #loc29))
#loc126 = loc(callsite(#loc33 at #loc29))
#loc127 = loc(callsite(#loc34 at #loc29))
#loc128 = loc(callsite(#loc35 at #loc29))
#loc129 = loc(callsite(#loc36 at #loc29))
#loc130 = loc(callsite(#loc37 at #loc29))
#loc131 = loc(callsite(#loc38 at #loc29))
#loc132 = loc(callsite(#loc39 at #loc29))
#loc133 = loc(callsite(#loc40 at #loc29))
#loc134 = loc(callsite(#loc41 at #loc29))
#loc135 = loc(callsite(#loc42 at #loc29))
#loc136 = loc(callsite(#loc15 at #loc76))
#loc137 = loc(callsite(#loc17 at #loc76))
#loc138 = loc(callsite(#loc18 at #loc76))
#loc139 = loc(callsite(#loc19 at #loc76))
#loc140 = loc(callsite(#loc20 at #loc76))
#loc141 = loc(callsite(#loc21 at #loc76))
#loc142 = loc(callsite(#loc22 at #loc76))
#loc143 = loc(callsite(#loc23 at #loc76))
#loc144 = loc(callsite(#loc24 at #loc76))
#loc145 = loc(callsite(#loc29 at #loc82))
#loc147 = loc(callsite(#loc124 at #loc30))
#loc148 = loc(callsite(#loc125 at #loc30))
#loc149 = loc(callsite(#loc126 at #loc30))
#loc150 = loc(callsite(#loc127 at #loc30))
#loc151 = loc(callsite(#loc128 at #loc30))
#loc152 = loc(callsite(#loc129 at #loc30))
#loc153 = loc(callsite(#loc130 at #loc30))
#loc154 = loc(callsite(#loc131 at #loc30))
#loc155 = loc(callsite(#loc132 at #loc30))
#loc156 = loc(callsite(#loc133 at #loc30))
#loc157 = loc(callsite(#loc134 at #loc30))
#loc158 = loc(callsite(#loc135 at #loc30))
#loc159 = loc(callsite(#loc124 at #loc82))
#loc160 = loc(callsite(#loc125 at #loc82))
#loc161 = loc(callsite(#loc126 at #loc82))
#loc162 = loc(callsite(#loc127 at #loc82))
#loc163 = loc(callsite(#loc128 at #loc82))
#loc164 = loc(callsite(#loc129 at #loc82))
#loc165 = loc(callsite(#loc130 at #loc82))
#loc166 = loc(callsite(#loc131 at #loc82))
#loc167 = loc(callsite(#loc132 at #loc82))
#loc168 = loc(callsite(#loc133 at #loc82))
#loc169 = loc(callsite(#loc134 at #loc82))
#loc170 = loc(callsite(#loc135 at #loc82))
