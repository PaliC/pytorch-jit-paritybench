; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused__native_batch_norm_legit_add_native_batch_norm_backward_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
__nv_rsqrtf.exit:
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %13 = icmp slt i32 %12, 256, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = and i32 %14, 31, !dbg !12
  %16 = shl i32 %14, 2, !dbg !12
  %17 = and i32 %16, 2044, !dbg !12
  %18 = shl i32 %12, 12, !dbg !13
  %19 = or disjoint i32 %18, %17
  %20 = sext i32 %19 to i64, !dbg !14
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !14
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !15
  %24 = bitcast i32 %23 to float, !dbg !15
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !15
  %26 = bitcast i32 %25 to float, !dbg !15
  %27 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !15
  %28 = bitcast i32 %27 to float, !dbg !15
  %29 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !15
  %30 = bitcast i32 %29 to float, !dbg !15
  %31 = select i1 %13, float %30, float 0.000000e+00, !dbg !16
  %32 = select i1 %13, float %28, float 0.000000e+00, !dbg !16
  %33 = select i1 %13, float %26, float 0.000000e+00, !dbg !16
  %34 = select i1 %13, float %24, float 0.000000e+00, !dbg !16
  %35 = or disjoint i32 %19, 2048, !dbg !17
  %36 = sext i32 %35 to i64, !dbg !14
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !14
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !15
  %39 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !15
  %40 = bitcast i32 %39 to float, !dbg !15
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !15
  %42 = bitcast i32 %41 to float, !dbg !15
  %43 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !15
  %44 = bitcast i32 %43 to float, !dbg !15
  %45 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !15
  %46 = bitcast i32 %45 to float, !dbg !15
  %47 = fsub float %46, %31, !dbg !18
  %48 = fsub float %44, %32, !dbg !18
  %49 = fsub float %42, %33, !dbg !18
  %50 = fsub float %40, %34, !dbg !18
  %51 = select i1 %13, float 2.000000e+00, float 1.000000e+00, !dbg !22
  %52 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %47, float %51) #5, !dbg !23
  %53 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %48, float %51) #5, !dbg !23
  %54 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %49, float %51) #5, !dbg !23
  %55 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %50, float %51) #5, !dbg !23
  %56 = fadd float %31, %52, !dbg !24
  %57 = fsub float %46, %56, !dbg !25
  %58 = fmul float %47, %57, !dbg !26
  %59 = fadd float %58, 0.000000e+00, !dbg !27
  %60 = fadd float %32, %53, !dbg !24
  %61 = fsub float %44, %60, !dbg !25
  %62 = fmul float %48, %61, !dbg !26
  %63 = fadd float %62, 0.000000e+00, !dbg !27
  %64 = fadd float %33, %54, !dbg !24
  %65 = fsub float %42, %64, !dbg !25
  %66 = fmul float %49, %65, !dbg !26
  %67 = fadd float %66, 0.000000e+00, !dbg !27
  %68 = fadd float %34, %55, !dbg !24
  %69 = fsub float %40, %68, !dbg !25
  %70 = fmul float %50, %69, !dbg !26
  %71 = fadd float %70, 0.000000e+00, !dbg !27
  %72 = select i1 %13, float %56, float 0.000000e+00, !dbg !16
  %73 = select i1 %13, float %60, float 0.000000e+00, !dbg !16
  %74 = select i1 %13, float %64, float 0.000000e+00, !dbg !16
  %75 = select i1 %13, float %68, float 0.000000e+00, !dbg !16
  %76 = select i1 %13, float %67, float 0.000000e+00, !dbg !28
  %77 = select i1 %13, float %71, float 0.000000e+00, !dbg !28
  %78 = select i1 %13, float 2.000000e+00, float 0.000000e+00, !dbg !22
  %79 = select i1 %13, float 2.000000e+00, float 0.000000e+00, !dbg !22
  %80 = select i1 %13, float 2.000000e+00, float 0.000000e+00, !dbg !22
  %81 = select i1 %13, float 2.000000e+00, float 0.000000e+00, !dbg !22
  %82 = lshr i32 %14, 5, !dbg !12
  %83 = fsub float %73, %72, !dbg !29
  %84 = select i1 %13, float 4.000000e+00, float 0.000000e+00, !dbg !32
  %85 = fcmp oeq float %84, 0.000000e+00, !dbg !33
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float %84) #5, !dbg !34
  %87 = select i1 %85, float 0.000000e+00, float %86, !dbg !35
  %88 = fmul float %83, %87, !dbg !36
  %89 = fadd float %72, %88, !dbg !37
  %90 = fadd float %59, %63, !dbg !38
  %91 = select i1 %13, float %90, float 0.000000e+00, !dbg !38
  %92 = fmul float %83, %83, !dbg !39
  %93 = fmul float %92, %78, !dbg !40
  %94 = fmul float %93, %87, !dbg !41
  %95 = fadd float %91, %94, !dbg !42
  %96 = fsub float %74, %89, !dbg !29
  %97 = select i1 %13, float 6.000000e+00, float 0.000000e+00, !dbg !32
  %98 = fcmp oeq float %97, 0.000000e+00, !dbg !33
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float %97) #5, !dbg !34
  %100 = select i1 %98, float 0.000000e+00, float %99, !dbg !35
  %101 = fmul float %100, %96, !dbg !36
  %102 = fadd float %89, %101, !dbg !37
  %103 = fadd float %76, %95, !dbg !38
  %104 = fmul float %96, %96, !dbg !39
  %105 = fmul float %84, %104, !dbg !40
  %106 = fmul float %100, %105, !dbg !41
  %107 = fadd float %103, %106, !dbg !42
  %108 = fsub float %75, %102, !dbg !29
  %109 = select i1 %13, float 8.000000e+00, float 0.000000e+00, !dbg !32
  %110 = fcmp oeq float %109, 0.000000e+00, !dbg !33
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %81, float %109) #5, !dbg !34
  %112 = select i1 %110, float 0.000000e+00, float %111, !dbg !35
  %113 = fmul float %112, %108, !dbg !36
  %114 = fadd float %102, %113, !dbg !37
  %115 = fadd float %77, %107, !dbg !38
  %116 = fmul float %108, %108, !dbg !39
  %117 = fmul float %97, %116, !dbg !40
  %118 = fmul float %112, %117, !dbg !41
  %119 = fadd float %115, %118, !dbg !42
  %120 = bitcast float %114 to i32, !dbg !43
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 16, i32 31), !dbg !43
  %122 = bitcast i32 %121 to float, !dbg !43
  %123 = bitcast float %119 to i32, !dbg !43
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 16, i32 31), !dbg !43
  %125 = bitcast i32 %124 to float, !dbg !43
  %126 = bitcast float %109 to i32, !dbg !43
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 16, i32 31), !dbg !43
  %128 = bitcast i32 %127 to float, !dbg !43
  %129 = fsub float %122, %114, !dbg !29
  %130 = fadd float %109, %128, !dbg !32
  %131 = fcmp oeq float %130, 0.000000e+00, !dbg !33
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %128, float %130) #5, !dbg !34
  %133 = select i1 %131, float 0.000000e+00, float %132, !dbg !35
  %134 = fmul float %133, %129, !dbg !36
  %135 = fadd float %114, %134, !dbg !37
  %136 = fadd float %119, %125, !dbg !38
  %137 = fmul float %129, %129, !dbg !39
  %138 = fmul float %109, %137, !dbg !40
  %139 = fmul float %133, %138, !dbg !41
  %140 = fadd float %136, %139, !dbg !42
  %141 = bitcast float %135 to i32, !dbg !43
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 8, i32 31), !dbg !43
  %143 = bitcast i32 %142 to float, !dbg !43
  %144 = bitcast float %140 to i32, !dbg !43
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 8, i32 31), !dbg !43
  %146 = bitcast i32 %145 to float, !dbg !43
  %147 = bitcast float %130 to i32, !dbg !43
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 8, i32 31), !dbg !43
  %149 = bitcast i32 %148 to float, !dbg !43
  %150 = fsub float %143, %135, !dbg !29
  %151 = fadd float %130, %149, !dbg !32
  %152 = fcmp oeq float %151, 0.000000e+00, !dbg !33
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float %151) #5, !dbg !34
  %154 = select i1 %152, float 0.000000e+00, float %153, !dbg !35
  %155 = fmul float %150, %154, !dbg !36
  %156 = fadd float %135, %155, !dbg !37
  %157 = fadd float %140, %146, !dbg !38
  %158 = fmul float %150, %150, !dbg !39
  %159 = fmul float %130, %158, !dbg !40
  %160 = fmul float %154, %159, !dbg !41
  %161 = fadd float %157, %160, !dbg !42
  %162 = bitcast float %156 to i32, !dbg !43
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 4, i32 31), !dbg !43
  %164 = bitcast i32 %163 to float, !dbg !43
  %165 = bitcast float %161 to i32, !dbg !43
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 4, i32 31), !dbg !43
  %167 = bitcast i32 %166 to float, !dbg !43
  %168 = bitcast float %151 to i32, !dbg !43
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 4, i32 31), !dbg !43
  %170 = bitcast i32 %169 to float, !dbg !43
  %171 = fsub float %164, %156, !dbg !29
  %172 = fadd float %151, %170, !dbg !32
  %173 = fcmp oeq float %172, 0.000000e+00, !dbg !33
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %170, float %172) #5, !dbg !34
  %175 = select i1 %173, float 0.000000e+00, float %174, !dbg !35
  %176 = fmul float %171, %175, !dbg !36
  %177 = fadd float %156, %176, !dbg !37
  %178 = fadd float %161, %167, !dbg !38
  %179 = fmul float %171, %171, !dbg !39
  %180 = fmul float %151, %179, !dbg !40
  %181 = fmul float %175, %180, !dbg !41
  %182 = fadd float %178, %181, !dbg !42
  %183 = bitcast float %177 to i32, !dbg !43
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 2, i32 31), !dbg !43
  %185 = bitcast i32 %184 to float, !dbg !43
  %186 = bitcast float %182 to i32, !dbg !43
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 2, i32 31), !dbg !43
  %188 = bitcast i32 %187 to float, !dbg !43
  %189 = bitcast float %172 to i32, !dbg !43
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 2, i32 31), !dbg !43
  %191 = bitcast i32 %190 to float, !dbg !43
  %192 = fsub float %185, %177, !dbg !29
  %193 = fadd float %172, %191, !dbg !32
  %194 = fcmp oeq float %193, 0.000000e+00, !dbg !33
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %191, float %193) #5, !dbg !34
  %196 = select i1 %194, float 0.000000e+00, float %195, !dbg !35
  %197 = fmul float %192, %196, !dbg !36
  %198 = fadd float %177, %197, !dbg !37
  %199 = fadd float %182, %188, !dbg !38
  %200 = fmul float %192, %192, !dbg !39
  %201 = fmul float %172, %200, !dbg !40
  %202 = fmul float %196, %201, !dbg !41
  %203 = fadd float %199, %202, !dbg !42
  %204 = bitcast float %198 to i32, !dbg !43
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 1, i32 31), !dbg !43
  %206 = bitcast i32 %205 to float, !dbg !43
  %207 = bitcast float %203 to i32, !dbg !43
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 1, i32 31), !dbg !43
  %209 = bitcast i32 %208 to float, !dbg !43
  %210 = bitcast float %193 to i32, !dbg !43
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 1, i32 31), !dbg !43
  %212 = bitcast i32 %211 to float, !dbg !43
  %213 = fsub float %206, %198, !dbg !29
  %214 = fadd float %193, %212, !dbg !32
  %215 = fcmp oeq float %214, 0.000000e+00, !dbg !33
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %212, float %214) #5, !dbg !34
  %217 = select i1 %215, float 0.000000e+00, float %216, !dbg !35
  %218 = fmul float %213, %217, !dbg !36
  %219 = fadd float %198, %218, !dbg !37
  %220 = fadd float %203, %209, !dbg !38
  %221 = fmul float %213, %213, !dbg !39
  %222 = fmul float %193, %221, !dbg !40
  %223 = fmul float %217, %222, !dbg !41
  %224 = fadd float %220, %223, !dbg !42
  %225 = icmp eq i32 %15, 0, !dbg !43
  %226 = and i32 %82, 15, !dbg !43
  %227 = zext nneg i32 %226 to i64, !dbg !43
  %228 = getelementptr float, ptr addrspace(3) @global_smem, i64 %227, !dbg !43
  %229 = bitcast float %219 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 %225) #5, !dbg !43
  %230 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %227, !dbg !43
  %231 = bitcast float %224 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 %225) #5, !dbg !43
  %232 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %227, !dbg !43
  %233 = bitcast float %214 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %233, i1 %225) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %234 = icmp slt i32 %14, 16, !dbg !43
  %235 = sext i32 %14 to i64, !dbg !43
  %236 = getelementptr float, ptr addrspace(3) @global_smem, i64 %235, !dbg !43
  %237 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %236, i1 %234) #5, !dbg !43
  %238 = bitcast i32 %237 to float, !dbg !43
  %239 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %235, !dbg !43
  %240 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %239, i1 %234) #5, !dbg !43
  %241 = bitcast i32 %240 to float, !dbg !43
  %242 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %235, !dbg !43
  %243 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %242, i1 %234) #5, !dbg !43
  %244 = bitcast i32 %243 to float, !dbg !43
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 8, i32 31), !dbg !43
  %246 = bitcast i32 %245 to float, !dbg !43
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 8, i32 31), !dbg !43
  %248 = bitcast i32 %247 to float, !dbg !43
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 8, i32 31), !dbg !43
  %250 = bitcast i32 %249 to float, !dbg !43
  %251 = fsub float %246, %238, !dbg !29
  %252 = fadd float %244, %250, !dbg !32
  %253 = fcmp oeq float %252, 0.000000e+00, !dbg !33
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %250, float %252) #5, !dbg !34
  %255 = select i1 %253, float 0.000000e+00, float %254, !dbg !35
  %256 = fmul float %251, %255, !dbg !36
  %257 = fadd float %256, %238, !dbg !37
  %258 = fadd float %241, %248, !dbg !38
  %259 = fmul float %251, %251, !dbg !39
  %260 = fmul float %259, %244, !dbg !40
  %261 = fmul float %260, %255, !dbg !41
  %262 = fadd float %258, %261, !dbg !42
  %263 = bitcast float %257 to i32, !dbg !43
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 4, i32 31), !dbg !43
  %265 = bitcast i32 %264 to float, !dbg !43
  %266 = bitcast float %262 to i32, !dbg !43
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 4, i32 31), !dbg !43
  %268 = bitcast i32 %267 to float, !dbg !43
  %269 = bitcast float %252 to i32, !dbg !43
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 4, i32 31), !dbg !43
  %271 = bitcast i32 %270 to float, !dbg !43
  %272 = fsub float %265, %257, !dbg !29
  %273 = fadd float %252, %271, !dbg !32
  %274 = fcmp oeq float %273, 0.000000e+00, !dbg !33
  %275 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %271, float %273) #5, !dbg !34
  %276 = select i1 %274, float 0.000000e+00, float %275, !dbg !35
  %277 = fmul float %272, %276, !dbg !36
  %278 = fadd float %257, %277, !dbg !37
  %279 = fadd float %262, %268, !dbg !38
  %280 = fmul float %272, %272, !dbg !39
  %281 = fmul float %252, %280, !dbg !40
  %282 = fmul float %276, %281, !dbg !41
  %283 = fadd float %279, %282, !dbg !42
  %284 = bitcast float %278 to i32, !dbg !43
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 2, i32 31), !dbg !43
  %286 = bitcast i32 %285 to float, !dbg !43
  %287 = bitcast float %283 to i32, !dbg !43
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 2, i32 31), !dbg !43
  %289 = bitcast i32 %288 to float, !dbg !43
  %290 = bitcast float %273 to i32, !dbg !43
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 2, i32 31), !dbg !43
  %292 = bitcast i32 %291 to float, !dbg !43
  %293 = fsub float %286, %278, !dbg !29
  %294 = fadd float %273, %292, !dbg !32
  %295 = fcmp oeq float %294, 0.000000e+00, !dbg !33
  %296 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %292, float %294) #5, !dbg !34
  %297 = select i1 %295, float 0.000000e+00, float %296, !dbg !35
  %298 = fmul float %293, %297, !dbg !36
  %299 = fadd float %278, %298, !dbg !37
  %300 = fadd float %283, %289, !dbg !38
  %301 = fmul float %293, %293, !dbg !39
  %302 = fmul float %273, %301, !dbg !40
  %303 = fmul float %297, %302, !dbg !41
  %304 = fadd float %300, %303, !dbg !42
  %305 = bitcast float %299 to i32, !dbg !43
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 1, i32 31), !dbg !43
  %307 = bitcast i32 %306 to float, !dbg !43
  %308 = bitcast float %304 to i32, !dbg !43
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 1, i32 31), !dbg !43
  %310 = bitcast i32 %309 to float, !dbg !43
  %311 = bitcast float %294 to i32, !dbg !43
  %312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 1, i32 31), !dbg !43
  %313 = bitcast i32 %312 to float, !dbg !43
  %314 = fsub float %307, %299, !dbg !29
  %315 = fadd float %294, %313, !dbg !32
  %316 = fcmp oeq float %315, 0.000000e+00, !dbg !33
  %317 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %313, float %315) #5, !dbg !34
  %318 = select i1 %316, float 0.000000e+00, float %317, !dbg !35
  %319 = fmul float %314, %318, !dbg !36
  %320 = fadd float %299, %319, !dbg !37
  %321 = fadd float %304, %310, !dbg !38
  %322 = fmul float %314, %314, !dbg !39
  %323 = fmul float %294, %322, !dbg !40
  %324 = fmul float %318, %323, !dbg !41
  %325 = fadd float %321, %324, !dbg !42
  %326 = and i32 %14, 15, !dbg !43
  %327 = icmp eq i32 %326, 0, !dbg !43
  %328 = and i1 %234, %327, !dbg !43
  %329 = bitcast float %320 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %329, i1 %328) #5, !dbg !43
  %330 = bitcast float %325 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %330, i1 %328) #5, !dbg !43
  %331 = bitcast float %315 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %242, <1 x i32> %331, i1 %328) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %332 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !43
  %333 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !43
  %334 = sext i32 %12 to i64, !dbg !44
  %335 = getelementptr float, ptr addrspace(1) %5, i64 %334, !dbg !44
  %urem = and i32 %14, 511, !dbg !45
  %336 = icmp eq i32 %urem, 0, !dbg !45
  %337 = bitcast float %332 to i32, !dbg !45
  %338 = and i1 %336, %13, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %337, ptr addrspace(1) %335, i1 %338) #5, !dbg !45
  %339 = getelementptr float, ptr addrspace(1) %3, i64 %334, !dbg !46
  %340 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %339, i1 %13) #5, !dbg !47
  %341 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %339, i1 %13) #5, !dbg !47
  %342 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %339, i1 %13) #5, !dbg !47
  %343 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %339, i1 %13) #5, !dbg !47
  %344 = getelementptr float, ptr addrspace(1) %4, i64 %334, !dbg !48
  %345 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %344, i1 %13) #5, !dbg !49
  %346 = bitcast i32 %345 to float, !dbg !49
  %347 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %344, i1 %13) #5, !dbg !49
  %348 = bitcast i32 %347 to float, !dbg !49
  %349 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %344, i1 %13) #5, !dbg !49
  %350 = bitcast i32 %349 to float, !dbg !49
  %351 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %344, i1 %13) #5, !dbg !49
  %352 = bitcast i32 %351 to float, !dbg !49
  %353 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %346, float 4.096000e+03) #5, !dbg !50
  %354 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %348, float 4.096000e+03) #5, !dbg !50
  %355 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %350, float 4.096000e+03) #5, !dbg !50
  %356 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float 4.096000e+03) #5, !dbg !50
  %357 = fadd float %356, 0x3EE4F8B580000000, !dbg !51
  %358 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %359 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %360 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %361 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %.not.i23 = icmp eq i32 %361, 0, !dbg !52
  br i1 %.not.i23, label %364, label %362, !dbg !52

362:                                              ; preds = %__nv_rsqrtf.exit
  %363 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %357), !dbg !52
  br label %__nv_rsqrtf.exit25, !dbg !52

364:                                              ; preds = %__nv_rsqrtf.exit
  %365 = tail call float @llvm.nvvm.rsqrt.approx.f(float %357), !dbg !52
  br label %__nv_rsqrtf.exit25, !dbg !52

__nv_rsqrtf.exit25:                               ; preds = %362, %364
  %.0.i24 = phi float [ %363, %362 ], [ %365, %364 ], !dbg !52
  %366 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %333, float 4.096000e+03) #5, !dbg !53
  %367 = fadd float %366, 0x3EE4F8B580000000, !dbg !54
  %368 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %369 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %370 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %371 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %.not.i35 = icmp eq i32 %371, 0, !dbg !55
  br i1 %.not.i35, label %374, label %372, !dbg !55

372:                                              ; preds = %__nv_rsqrtf.exit25
  %373 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %367), !dbg !55
  br label %__nv_rsqrtf.exit37, !dbg !55

374:                                              ; preds = %__nv_rsqrtf.exit25
  %375 = tail call float @llvm.nvvm.rsqrt.approx.f(float %367), !dbg !55
  br label %__nv_rsqrtf.exit37, !dbg !55

__nv_rsqrtf.exit37:                               ; preds = %372, %374
  %.0.i36 = phi float [ %373, %372 ], [ %375, %374 ], !dbg !55
  %376 = insertelement <4 x float> poison, float %.0.i24, i64 0, !dbg !56
  %377 = shufflevector <4 x float> %376, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !56
  %378 = insertelement <4 x i32> poison, i32 %343, i64 0, !dbg !57
  %379 = bitcast <4 x i32> %378 to <4 x float>, !dbg !57
  %380 = shufflevector <4 x float> %379, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !57
  %381 = insertelement <4 x float> poison, float %.0.i36, i64 0, !dbg !58
  %382 = shufflevector <4 x float> %381, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !58
  %383 = insertelement <4 x float> poison, float %332, i64 0, !dbg !59
  %384 = shufflevector <4 x float> %383, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !59
  %385 = insertelement <4 x i1> poison, i1 %13, i64 0, !dbg !60
  %386 = shufflevector <4 x i1> %385, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !60
  %387 = sext i32 %19 to i64, !dbg !61
  %388 = getelementptr float, ptr addrspace(1) %0, i64 %387, !dbg !61
  %389 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %388, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !62
  %390 = extractvalue { i32, i32, i32, i32 } %389, 0, !dbg !62
  %391 = extractvalue { i32, i32, i32, i32 } %389, 1, !dbg !62
  %392 = extractvalue { i32, i32, i32, i32 } %389, 2, !dbg !62
  %393 = extractvalue { i32, i32, i32, i32 } %389, 3, !dbg !62
  %394 = getelementptr float, ptr addrspace(1) %2, i64 %387, !dbg !63
  %395 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %394, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !64
  %396 = extractvalue { i32, i32, i32, i32 } %395, 0, !dbg !64
  %397 = extractvalue { i32, i32, i32, i32 } %395, 1, !dbg !64
  %398 = extractvalue { i32, i32, i32, i32 } %395, 2, !dbg !64
  %399 = extractvalue { i32, i32, i32, i32 } %395, 3, !dbg !64
  %400 = getelementptr float, ptr addrspace(1) %1, i64 %387, !dbg !65
  %401 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %400, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !66
  %402 = extractvalue { i32, i32, i32, i32 } %401, 0, !dbg !66
  %403 = extractvalue { i32, i32, i32, i32 } %401, 1, !dbg !66
  %404 = extractvalue { i32, i32, i32, i32 } %401, 2, !dbg !66
  %405 = extractvalue { i32, i32, i32, i32 } %401, 3, !dbg !66
  %406 = insertelement <4 x i32> poison, i32 %390, i64 0, !dbg !62
  %407 = insertelement <4 x i32> %406, i32 %391, i64 1, !dbg !62
  %408 = insertelement <4 x i32> %407, i32 %392, i64 2, !dbg !62
  %409 = insertelement <4 x i32> %408, i32 %393, i64 3, !dbg !62
  %410 = bitcast <4 x i32> %409 to <4 x float>, !dbg !62
  %411 = insertelement <4 x i32> poison, i32 %396, i64 0, !dbg !64
  %412 = insertelement <4 x i32> %411, i32 %397, i64 1, !dbg !64
  %413 = insertelement <4 x i32> %412, i32 %398, i64 2, !dbg !64
  %414 = insertelement <4 x i32> %413, i32 %399, i64 3, !dbg !64
  %415 = bitcast <4 x i32> %414 to <4 x float>, !dbg !64
  %416 = insertelement <4 x i32> poison, i32 %402, i64 0, !dbg !66
  %417 = insertelement <4 x i32> %416, i32 %403, i64 1, !dbg !66
  %418 = insertelement <4 x i32> %417, i32 %404, i64 2, !dbg !66
  %419 = insertelement <4 x i32> %418, i32 %405, i64 3, !dbg !66
  %420 = bitcast <4 x i32> %419 to <4 x float>, !dbg !66
  %421 = fsub <4 x float> %415, %380, !dbg !57
  %422 = fmul <4 x float> %377, %421, !dbg !56
  %423 = fadd <4 x float> %422, %410, !dbg !67
  %424 = fsub <4 x float> %420, %384, !dbg !59
  %425 = fmul <4 x float> %382, %424, !dbg !58
  %426 = fadd <4 x float> %423, %425, !dbg !68
  %bc = bitcast <4 x float> %426 to <4 x i32>, !dbg !69
  %427 = extractelement <4 x i32> %bc, i64 0, !dbg !69
  %bc128 = bitcast <4 x float> %426 to <4 x i32>, !dbg !69
  %428 = extractelement <4 x i32> %bc128, i64 1, !dbg !69
  %bc129 = bitcast <4 x float> %426 to <4 x i32>, !dbg !69
  %429 = extractelement <4 x i32> %bc129, i64 2, !dbg !69
  %bc130 = bitcast <4 x float> %426 to <4 x i32>, !dbg !69
  %430 = extractelement <4 x i32> %bc130, i64 3, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %427, i32 %428, i32 %429, i32 %430, ptr addrspace(1) %388, i1 %13) #5, !dbg !69
  %431 = or disjoint i32 %19, 2048, !dbg !70
  %432 = sext i32 %431 to i64, !dbg !61
  %433 = getelementptr float, ptr addrspace(1) %0, i64 %432, !dbg !61
  %434 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %433, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !62
  %435 = extractvalue { i32, i32, i32, i32 } %434, 0, !dbg !62
  %436 = extractvalue { i32, i32, i32, i32 } %434, 1, !dbg !62
  %437 = extractvalue { i32, i32, i32, i32 } %434, 2, !dbg !62
  %438 = extractvalue { i32, i32, i32, i32 } %434, 3, !dbg !62
  %439 = getelementptr float, ptr addrspace(1) %2, i64 %432, !dbg !63
  %440 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %439, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !64
  %441 = extractvalue { i32, i32, i32, i32 } %440, 0, !dbg !64
  %442 = extractvalue { i32, i32, i32, i32 } %440, 1, !dbg !64
  %443 = extractvalue { i32, i32, i32, i32 } %440, 2, !dbg !64
  %444 = extractvalue { i32, i32, i32, i32 } %440, 3, !dbg !64
  %445 = getelementptr float, ptr addrspace(1) %1, i64 %432, !dbg !65
  %446 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %445, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !66
  %447 = extractvalue { i32, i32, i32, i32 } %446, 0, !dbg !66
  %448 = extractvalue { i32, i32, i32, i32 } %446, 1, !dbg !66
  %449 = extractvalue { i32, i32, i32, i32 } %446, 2, !dbg !66
  %450 = extractvalue { i32, i32, i32, i32 } %446, 3, !dbg !66
  %451 = insertelement <4 x i32> poison, i32 %435, i64 0, !dbg !62
  %452 = insertelement <4 x i32> %451, i32 %436, i64 1, !dbg !62
  %453 = insertelement <4 x i32> %452, i32 %437, i64 2, !dbg !62
  %454 = insertelement <4 x i32> %453, i32 %438, i64 3, !dbg !62
  %455 = bitcast <4 x i32> %454 to <4 x float>, !dbg !62
  %456 = insertelement <4 x i32> poison, i32 %441, i64 0, !dbg !64
  %457 = insertelement <4 x i32> %456, i32 %442, i64 1, !dbg !64
  %458 = insertelement <4 x i32> %457, i32 %443, i64 2, !dbg !64
  %459 = insertelement <4 x i32> %458, i32 %444, i64 3, !dbg !64
  %460 = bitcast <4 x i32> %459 to <4 x float>, !dbg !64
  %461 = insertelement <4 x i32> poison, i32 %447, i64 0, !dbg !66
  %462 = insertelement <4 x i32> %461, i32 %448, i64 1, !dbg !66
  %463 = insertelement <4 x i32> %462, i32 %449, i64 2, !dbg !66
  %464 = insertelement <4 x i32> %463, i32 %450, i64 3, !dbg !66
  %465 = bitcast <4 x i32> %464 to <4 x float>, !dbg !66
  %466 = fsub <4 x float> %460, %380, !dbg !57
  %467 = fmul <4 x float> %377, %466, !dbg !56
  %468 = fadd <4 x float> %467, %455, !dbg !67
  %469 = fsub <4 x float> %465, %384, !dbg !59
  %470 = fmul <4 x float> %382, %469, !dbg !58
  %471 = fadd <4 x float> %468, %470, !dbg !68
  %472 = select <4 x i1> %386, <4 x float> %426, <4 x float> zeroinitializer, !dbg !60
  %473 = fsub <4 x float> %471, %472, !dbg !71
  %474 = extractelement <4 x float> %473, i64 0, !dbg !71
  %475 = fsub <4 x float> %471, %472, !dbg !71
  %476 = extractelement <4 x float> %475, i64 1, !dbg !71
  %477 = fsub <4 x float> %471, %472, !dbg !71
  %478 = extractelement <4 x float> %477, i64 2, !dbg !71
  %479 = fsub <4 x float> %471, %472, !dbg !71
  %480 = extractelement <4 x float> %479, i64 3, !dbg !71
  %481 = select i1 %13, float 2.000000e+00, float 1.000000e+00, !dbg !73
  %482 = select i1 %13, float 2.000000e+00, float 1.000000e+00, !dbg !73
  %483 = select i1 %13, float 2.000000e+00, float 1.000000e+00, !dbg !73
  %484 = select i1 %13, float 2.000000e+00, float 1.000000e+00, !dbg !73
  %485 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %474, float %481) #5, !dbg !74
  %486 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %476, float %482) #5, !dbg !74
  %487 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %478, float %483) #5, !dbg !74
  %488 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %480, float %484) #5, !dbg !74
  %489 = insertelement <4 x float> poison, float %485, i64 0, !dbg !75
  %490 = insertelement <4 x float> %489, float %486, i64 1, !dbg !75
  %491 = insertelement <4 x float> %490, float %487, i64 2, !dbg !75
  %492 = insertelement <4 x float> %491, float %488, i64 3, !dbg !75
  %493 = fadd <4 x float> %472, %492, !dbg !75
  %494 = fsub <4 x float> %471, %493, !dbg !76
  %495 = fsub <4 x float> %471, %493, !dbg !76
  %496 = fsub <4 x float> %471, %493, !dbg !76
  %497 = fsub <4 x float> %471, %493, !dbg !76
  %498 = fmul <4 x float> %473, %494, !dbg !77
  %499 = extractelement <4 x float> %498, i64 0, !dbg !77
  %500 = fmul <4 x float> %475, %495, !dbg !77
  %501 = extractelement <4 x float> %500, i64 1, !dbg !77
  %502 = fmul <4 x float> %477, %496, !dbg !77
  %503 = extractelement <4 x float> %502, i64 2, !dbg !77
  %504 = fmul <4 x float> %479, %497, !dbg !77
  %505 = extractelement <4 x float> %504, i64 3, !dbg !77
  %506 = fadd float %499, 0.000000e+00, !dbg !78
  %507 = fadd float %501, 0.000000e+00, !dbg !78
  %508 = fadd float %503, 0.000000e+00, !dbg !78
  %509 = fadd float %505, 0.000000e+00, !dbg !78
  %510 = select <4 x i1> %386, <4 x float> %493, <4 x float> zeroinitializer, !dbg !60
  %511 = select i1 %13, float %508, float 0.000000e+00, !dbg !79
  %512 = select i1 %13, float %509, float 0.000000e+00, !dbg !79
  %513 = select i1 %13, float %481, float 0.000000e+00, !dbg !73
  %514 = select i1 %13, float %482, float 0.000000e+00, !dbg !73
  %515 = select i1 %13, float %483, float 0.000000e+00, !dbg !73
  %516 = select i1 %13, float %484, float 0.000000e+00, !dbg !73
  %bc.1 = bitcast <4 x float> %471 to <4 x i32>, !dbg !69
  %517 = extractelement <4 x i32> %bc.1, i64 0, !dbg !69
  %bc128.1 = bitcast <4 x float> %471 to <4 x i32>, !dbg !69
  %518 = extractelement <4 x i32> %bc128.1, i64 1, !dbg !69
  %bc129.1 = bitcast <4 x float> %471 to <4 x i32>, !dbg !69
  %519 = extractelement <4 x i32> %bc129.1, i64 2, !dbg !69
  %bc130.1 = bitcast <4 x float> %471 to <4 x i32>, !dbg !69
  %520 = extractelement <4 x i32> %bc130.1, i64 3, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %517, i32 %518, i32 %519, i32 %520, ptr addrspace(1) %433, i1 %13) #5, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %521 = extractelement <4 x float> %510, i64 0, !dbg !82
  %522 = extractelement <4 x float> %510, i64 1, !dbg !82
  %523 = fsub float %522, %521, !dbg !82
  %524 = fadd float %513, %514, !dbg !83
  %525 = fcmp oeq float %524, 0.000000e+00, !dbg !84
  %526 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %514, float %524) #5, !dbg !85
  %527 = select i1 %525, float 0.000000e+00, float %526, !dbg !86
  %528 = fmul float %523, %527, !dbg !87
  %529 = fadd float %521, %528, !dbg !88
  %530 = fadd float %506, %507, !dbg !89
  %531 = select i1 %13, float %530, float 0.000000e+00, !dbg !89
  %532 = fmul float %523, %523, !dbg !90
  %533 = fmul float %532, %513, !dbg !91
  %534 = fmul float %533, %527, !dbg !92
  %535 = fadd float %531, %534, !dbg !93
  %536 = extractelement <4 x float> %510, i64 2, !dbg !82
  %537 = fsub float %536, %529, !dbg !82
  %538 = fadd float %515, %524, !dbg !83
  %539 = fcmp oeq float %538, 0.000000e+00, !dbg !84
  %540 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %515, float %538) #5, !dbg !85
  %541 = select i1 %539, float 0.000000e+00, float %540, !dbg !86
  %542 = fmul float %541, %537, !dbg !87
  %543 = fadd float %529, %542, !dbg !88
  %544 = fadd float %511, %535, !dbg !89
  %545 = fmul float %537, %537, !dbg !90
  %546 = fmul float %524, %545, !dbg !91
  %547 = fmul float %541, %546, !dbg !92
  %548 = fadd float %544, %547, !dbg !93
  %549 = extractelement <4 x float> %510, i64 3, !dbg !82
  %550 = fsub float %549, %543, !dbg !82
  %551 = fadd float %516, %538, !dbg !83
  %552 = fcmp oeq float %551, 0.000000e+00, !dbg !84
  %553 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %516, float %551) #5, !dbg !85
  %554 = select i1 %552, float 0.000000e+00, float %553, !dbg !86
  %555 = fmul float %554, %550, !dbg !87
  %556 = fadd float %543, %555, !dbg !88
  %557 = fadd float %512, %548, !dbg !89
  %558 = fmul float %550, %550, !dbg !90
  %559 = fmul float %538, %558, !dbg !91
  %560 = fmul float %554, %559, !dbg !92
  %561 = fadd float %557, %560, !dbg !93
  %562 = bitcast float %556 to i32, !dbg !80
  %563 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %562, i32 16, i32 31), !dbg !80
  %564 = bitcast i32 %563 to float, !dbg !80
  %565 = bitcast float %561 to i32, !dbg !80
  %566 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %565, i32 16, i32 31), !dbg !80
  %567 = bitcast i32 %566 to float, !dbg !80
  %568 = bitcast float %551 to i32, !dbg !80
  %569 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %568, i32 16, i32 31), !dbg !80
  %570 = bitcast i32 %569 to float, !dbg !80
  %571 = fsub float %564, %556, !dbg !82
  %572 = fadd float %551, %570, !dbg !83
  %573 = fcmp oeq float %572, 0.000000e+00, !dbg !84
  %574 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %570, float %572) #5, !dbg !85
  %575 = select i1 %573, float 0.000000e+00, float %574, !dbg !86
  %576 = fmul float %575, %571, !dbg !87
  %577 = fadd float %556, %576, !dbg !88
  %578 = fadd float %561, %567, !dbg !89
  %579 = fmul float %571, %571, !dbg !90
  %580 = fmul float %551, %579, !dbg !91
  %581 = fmul float %575, %580, !dbg !92
  %582 = fadd float %578, %581, !dbg !93
  %583 = bitcast float %577 to i32, !dbg !80
  %584 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %583, i32 8, i32 31), !dbg !80
  %585 = bitcast i32 %584 to float, !dbg !80
  %586 = bitcast float %582 to i32, !dbg !80
  %587 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %586, i32 8, i32 31), !dbg !80
  %588 = bitcast i32 %587 to float, !dbg !80
  %589 = bitcast float %572 to i32, !dbg !80
  %590 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %589, i32 8, i32 31), !dbg !80
  %591 = bitcast i32 %590 to float, !dbg !80
  %592 = fsub float %585, %577, !dbg !82
  %593 = fadd float %572, %591, !dbg !83
  %594 = fcmp oeq float %593, 0.000000e+00, !dbg !84
  %595 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %591, float %593) #5, !dbg !85
  %596 = select i1 %594, float 0.000000e+00, float %595, !dbg !86
  %597 = fmul float %592, %596, !dbg !87
  %598 = fadd float %577, %597, !dbg !88
  %599 = fadd float %582, %588, !dbg !89
  %600 = fmul float %592, %592, !dbg !90
  %601 = fmul float %572, %600, !dbg !91
  %602 = fmul float %596, %601, !dbg !92
  %603 = fadd float %599, %602, !dbg !93
  %604 = bitcast float %598 to i32, !dbg !80
  %605 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %604, i32 4, i32 31), !dbg !80
  %606 = bitcast i32 %605 to float, !dbg !80
  %607 = bitcast float %603 to i32, !dbg !80
  %608 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %607, i32 4, i32 31), !dbg !80
  %609 = bitcast i32 %608 to float, !dbg !80
  %610 = bitcast float %593 to i32, !dbg !80
  %611 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %610, i32 4, i32 31), !dbg !80
  %612 = bitcast i32 %611 to float, !dbg !80
  %613 = fsub float %606, %598, !dbg !82
  %614 = fadd float %593, %612, !dbg !83
  %615 = fcmp oeq float %614, 0.000000e+00, !dbg !84
  %616 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %612, float %614) #5, !dbg !85
  %617 = select i1 %615, float 0.000000e+00, float %616, !dbg !86
  %618 = fmul float %613, %617, !dbg !87
  %619 = fadd float %598, %618, !dbg !88
  %620 = fadd float %603, %609, !dbg !89
  %621 = fmul float %613, %613, !dbg !90
  %622 = fmul float %593, %621, !dbg !91
  %623 = fmul float %617, %622, !dbg !92
  %624 = fadd float %620, %623, !dbg !93
  %625 = bitcast float %619 to i32, !dbg !80
  %626 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %625, i32 2, i32 31), !dbg !80
  %627 = bitcast i32 %626 to float, !dbg !80
  %628 = bitcast float %624 to i32, !dbg !80
  %629 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %628, i32 2, i32 31), !dbg !80
  %630 = bitcast i32 %629 to float, !dbg !80
  %631 = bitcast float %614 to i32, !dbg !80
  %632 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %631, i32 2, i32 31), !dbg !80
  %633 = bitcast i32 %632 to float, !dbg !80
  %634 = fsub float %627, %619, !dbg !82
  %635 = fadd float %614, %633, !dbg !83
  %636 = fcmp oeq float %635, 0.000000e+00, !dbg !84
  %637 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %633, float %635) #5, !dbg !85
  %638 = select i1 %636, float 0.000000e+00, float %637, !dbg !86
  %639 = fmul float %634, %638, !dbg !87
  %640 = fadd float %619, %639, !dbg !88
  %641 = fadd float %624, %630, !dbg !89
  %642 = fmul float %634, %634, !dbg !90
  %643 = fmul float %614, %642, !dbg !91
  %644 = fmul float %638, %643, !dbg !92
  %645 = fadd float %641, %644, !dbg !93
  %646 = bitcast float %640 to i32, !dbg !80
  %647 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %646, i32 1, i32 31), !dbg !80
  %648 = bitcast i32 %647 to float, !dbg !80
  %649 = bitcast float %645 to i32, !dbg !80
  %650 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %649, i32 1, i32 31), !dbg !80
  %651 = bitcast i32 %650 to float, !dbg !80
  %652 = bitcast float %635 to i32, !dbg !80
  %653 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %652, i32 1, i32 31), !dbg !80
  %654 = bitcast i32 %653 to float, !dbg !80
  %655 = fsub float %648, %640, !dbg !82
  %656 = fadd float %635, %654, !dbg !83
  %657 = fcmp oeq float %656, 0.000000e+00, !dbg !84
  %658 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %654, float %656) #5, !dbg !85
  %659 = select i1 %657, float 0.000000e+00, float %658, !dbg !86
  %660 = fmul float %655, %659, !dbg !87
  %661 = fadd float %640, %660, !dbg !88
  %662 = fadd float %645, %651, !dbg !89
  %663 = fmul float %655, %655, !dbg !90
  %664 = fmul float %635, %663, !dbg !91
  %665 = fmul float %659, %664, !dbg !92
  %666 = fadd float %662, %665, !dbg !93
  %667 = bitcast float %661 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %667, i1 %225) #5, !dbg !80
  %668 = bitcast float %666 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %668, i1 %225) #5, !dbg !80
  %669 = bitcast float %656 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %669, i1 %225) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %670 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %236, i1 %234) #5, !dbg !80
  %671 = bitcast i32 %670 to float, !dbg !80
  %672 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %239, i1 %234) #5, !dbg !80
  %673 = bitcast i32 %672 to float, !dbg !80
  %674 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %242, i1 %234) #5, !dbg !80
  %675 = bitcast i32 %674 to float, !dbg !80
  %676 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %670, i32 8, i32 31), !dbg !80
  %677 = bitcast i32 %676 to float, !dbg !80
  %678 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %672, i32 8, i32 31), !dbg !80
  %679 = bitcast i32 %678 to float, !dbg !80
  %680 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %674, i32 8, i32 31), !dbg !80
  %681 = bitcast i32 %680 to float, !dbg !80
  %682 = fsub float %677, %671, !dbg !82
  %683 = fadd float %675, %681, !dbg !83
  %684 = fcmp oeq float %683, 0.000000e+00, !dbg !84
  %685 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %681, float %683) #5, !dbg !85
  %686 = select i1 %684, float 0.000000e+00, float %685, !dbg !86
  %687 = fmul float %682, %686, !dbg !87
  %688 = fadd float %687, %671, !dbg !88
  %689 = fadd float %673, %679, !dbg !89
  %690 = fmul float %682, %682, !dbg !90
  %691 = fmul float %690, %675, !dbg !91
  %692 = fmul float %691, %686, !dbg !92
  %693 = fadd float %689, %692, !dbg !93
  %694 = bitcast float %688 to i32, !dbg !80
  %695 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %694, i32 4, i32 31), !dbg !80
  %696 = bitcast i32 %695 to float, !dbg !80
  %697 = bitcast float %693 to i32, !dbg !80
  %698 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %697, i32 4, i32 31), !dbg !80
  %699 = bitcast i32 %698 to float, !dbg !80
  %700 = bitcast float %683 to i32, !dbg !80
  %701 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %700, i32 4, i32 31), !dbg !80
  %702 = bitcast i32 %701 to float, !dbg !80
  %703 = fsub float %696, %688, !dbg !82
  %704 = fadd float %683, %702, !dbg !83
  %705 = fcmp oeq float %704, 0.000000e+00, !dbg !84
  %706 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %702, float %704) #5, !dbg !85
  %707 = select i1 %705, float 0.000000e+00, float %706, !dbg !86
  %708 = fmul float %703, %707, !dbg !87
  %709 = fadd float %688, %708, !dbg !88
  %710 = fadd float %693, %699, !dbg !89
  %711 = fmul float %703, %703, !dbg !90
  %712 = fmul float %683, %711, !dbg !91
  %713 = fmul float %707, %712, !dbg !92
  %714 = fadd float %710, %713, !dbg !93
  %715 = bitcast float %709 to i32, !dbg !80
  %716 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %715, i32 2, i32 31), !dbg !80
  %717 = bitcast i32 %716 to float, !dbg !80
  %718 = bitcast float %714 to i32, !dbg !80
  %719 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %718, i32 2, i32 31), !dbg !80
  %720 = bitcast i32 %719 to float, !dbg !80
  %721 = bitcast float %704 to i32, !dbg !80
  %722 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %721, i32 2, i32 31), !dbg !80
  %723 = bitcast i32 %722 to float, !dbg !80
  %724 = fsub float %717, %709, !dbg !82
  %725 = fadd float %704, %723, !dbg !83
  %726 = fcmp oeq float %725, 0.000000e+00, !dbg !84
  %727 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %723, float %725) #5, !dbg !85
  %728 = select i1 %726, float 0.000000e+00, float %727, !dbg !86
  %729 = fmul float %724, %728, !dbg !87
  %730 = fadd float %709, %729, !dbg !88
  %731 = fadd float %714, %720, !dbg !89
  %732 = fmul float %724, %724, !dbg !90
  %733 = fmul float %704, %732, !dbg !91
  %734 = fmul float %728, %733, !dbg !92
  %735 = fadd float %731, %734, !dbg !93
  %736 = bitcast float %730 to i32, !dbg !80
  %737 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %736, i32 1, i32 31), !dbg !80
  %738 = bitcast i32 %737 to float, !dbg !80
  %739 = bitcast float %735 to i32, !dbg !80
  %740 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %739, i32 1, i32 31), !dbg !80
  %741 = bitcast i32 %740 to float, !dbg !80
  %742 = bitcast float %725 to i32, !dbg !80
  %743 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %742, i32 1, i32 31), !dbg !80
  %744 = bitcast i32 %743 to float, !dbg !80
  %745 = fsub float %738, %730, !dbg !82
  %746 = fadd float %725, %744, !dbg !83
  %747 = fcmp oeq float %746, 0.000000e+00, !dbg !84
  %748 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %744, float %746) #5, !dbg !85
  %749 = select i1 %747, float 0.000000e+00, float %748, !dbg !86
  %750 = fmul float %745, %749, !dbg !87
  %751 = fadd float %730, %750, !dbg !88
  %752 = fadd float %735, %741, !dbg !89
  %753 = fmul float %745, %745, !dbg !90
  %754 = fmul float %725, %753, !dbg !91
  %755 = fmul float %749, %754, !dbg !92
  %756 = fadd float %752, %755, !dbg !93
  %757 = bitcast float %751 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %757, i1 %328) #5, !dbg !80
  %758 = bitcast float %756 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %758, i1 %328) #5, !dbg !80
  %759 = bitcast float %746 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %242, <1 x i32> %759, i1 %328) #5, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %760 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !80
  %761 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !80
  %762 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %761, float 4.096000e+03) #5, !dbg !94
  %763 = fadd float %762, 0x3EE4F8B580000000, !dbg !95
  %764 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !96
  %765 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !96
  %766 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !96
  %767 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !96
  %.not.i47 = icmp eq i32 %767, 0, !dbg !96
  br i1 %.not.i47, label %770, label %768, !dbg !96

768:                                              ; preds = %__nv_rsqrtf.exit37
  %769 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %763), !dbg !96
  br label %__nv_rsqrtf.exit49, !dbg !96

770:                                              ; preds = %__nv_rsqrtf.exit37
  %771 = tail call float @llvm.nvvm.rsqrt.approx.f(float %763), !dbg !96
  br label %__nv_rsqrtf.exit49, !dbg !96

__nv_rsqrtf.exit49:                               ; preds = %768, %770
  %.0.i48 = phi float [ %769, %768 ], [ %771, %770 ], !dbg !96
  %772 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !97
  %773 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %772, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !98
  %774 = extractvalue { i32, i32, i32, i32 } %773, 0, !dbg !98
  %775 = extractvalue { i32, i32, i32, i32 } %773, 1, !dbg !98
  %776 = extractvalue { i32, i32, i32, i32 } %773, 2, !dbg !98
  %777 = extractvalue { i32, i32, i32, i32 } %773, 3, !dbg !98
  %778 = bitcast i32 %774 to float, !dbg !98
  %779 = bitcast i32 %775 to float, !dbg !98
  %780 = bitcast i32 %776 to float, !dbg !98
  %781 = bitcast i32 %777 to float, !dbg !98
  %782 = fsub float %778, %760, !dbg !99
  %783 = fsub float %779, %760, !dbg !99
  %784 = fsub float %780, %760, !dbg !99
  %785 = fsub float %781, %760, !dbg !99
  %786 = fmul float %.0.i48, %782, !dbg !100
  %787 = fmul float %.0.i48, %783, !dbg !100
  %788 = fmul float %.0.i48, %784, !dbg !100
  %789 = fmul float %.0.i48, %785, !dbg !100
  %790 = getelementptr float, ptr addrspace(1) %6, i64 %20, !dbg !101
  %791 = bitcast float %786 to i32, !dbg !102
  %792 = bitcast float %787 to i32, !dbg !102
  %793 = bitcast float %788 to i32, !dbg !102
  %794 = bitcast float %789 to i32, !dbg !102
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %791, i32 %792, i32 %793, i32 %794, ptr addrspace(1) %790, i1 %13) #5, !dbg !102
  %795 = getelementptr float, ptr addrspace(1) %7, i64 %20, !dbg !103
  %796 = bitcast float %782 to i32, !dbg !104
  %797 = bitcast float %783 to i32, !dbg !104
  %798 = bitcast float %784 to i32, !dbg !104
  %799 = bitcast float %785 to i32, !dbg !104
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %796, i32 %797, i32 %798, i32 %799, ptr addrspace(1) %795, i1 %13) #5, !dbg !104
  %800 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !97
  %801 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %800, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !98
  %802 = extractvalue { i32, i32, i32, i32 } %801, 0, !dbg !98
  %803 = extractvalue { i32, i32, i32, i32 } %801, 1, !dbg !98
  %804 = extractvalue { i32, i32, i32, i32 } %801, 2, !dbg !98
  %805 = extractvalue { i32, i32, i32, i32 } %801, 3, !dbg !98
  %806 = bitcast i32 %802 to float, !dbg !98
  %807 = bitcast i32 %803 to float, !dbg !98
  %808 = bitcast i32 %804 to float, !dbg !98
  %809 = bitcast i32 %805 to float, !dbg !98
  %810 = fsub float %806, %760, !dbg !99
  %811 = fsub float %807, %760, !dbg !99
  %812 = fsub float %808, %760, !dbg !99
  %813 = fsub float %809, %760, !dbg !99
  %814 = fmul float %.0.i48, %810, !dbg !100
  %815 = fmul float %.0.i48, %811, !dbg !100
  %816 = fmul float %.0.i48, %812, !dbg !100
  %817 = fmul float %.0.i48, %813, !dbg !100
  %818 = getelementptr float, ptr addrspace(1) %6, i64 %36, !dbg !101
  %819 = bitcast float %814 to i32, !dbg !102
  %820 = bitcast float %815 to i32, !dbg !102
  %821 = bitcast float %816 to i32, !dbg !102
  %822 = bitcast float %817 to i32, !dbg !102
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %819, i32 %820, i32 %821, i32 %822, ptr addrspace(1) %818, i1 %13) #5, !dbg !102
  %823 = getelementptr float, ptr addrspace(1) %7, i64 %36, !dbg !103
  %824 = bitcast float %810 to i32, !dbg !104
  %825 = bitcast float %811 to i32, !dbg !104
  %826 = bitcast float %812 to i32, !dbg !104
  %827 = bitcast float %813 to i32, !dbg !104
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %824, i32 %825, i32 %826, i32 %827, ptr addrspace(1) %823, i1 %13) #5, !dbg !104
  %828 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !105
  %.not.i50 = icmp eq i32 %828, 0, !dbg !105
  br i1 %.not.i50, label %831, label %829, !dbg !105

829:                                              ; preds = %__nv_rsqrtf.exit49
  %830 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %367), !dbg !105
  br label %__nv_rsqrtf.exit52, !dbg !105

831:                                              ; preds = %__nv_rsqrtf.exit49
  %832 = tail call float @llvm.nvvm.rsqrt.approx.f(float %367), !dbg !105
  br label %__nv_rsqrtf.exit52, !dbg !105

__nv_rsqrtf.exit52:                               ; preds = %829, %831
  %.0.i51 = phi float [ %830, %829 ], [ %832, %831 ], !dbg !105
  %833 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !106
  %.not.i53 = icmp eq i32 %833, 0, !dbg !106
  br i1 %.not.i53, label %836, label %834, !dbg !106

834:                                              ; preds = %__nv_rsqrtf.exit52
  %835 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %763), !dbg !106
  br label %__nv_rsqrtf.exit55, !dbg !106

836:                                              ; preds = %__nv_rsqrtf.exit52
  %837 = tail call float @llvm.nvvm.rsqrt.approx.f(float %763), !dbg !106
  br label %__nv_rsqrtf.exit55, !dbg !106

__nv_rsqrtf.exit55:                               ; preds = %834, %836
  %.0.i54 = phi float [ %835, %834 ], [ %837, %836 ], !dbg !106
  %838 = getelementptr float, ptr addrspace(1) %8, i64 %334, !dbg !107
  %839 = bitcast float %.0.i51 to i32, !dbg !108
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %839, ptr addrspace(1) %838, i1 %338) #5, !dbg !108
  %840 = getelementptr float, ptr addrspace(1) %9, i64 %334, !dbg !109
  %841 = bitcast float %.0.i54 to i32, !dbg !110
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %841, ptr addrspace(1) %840, i1 %338) #5, !dbg !110
  ret void, !dbg !111
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py", directory: "inductor_cache/g3")
!4 = !{ptr @triton_red_fused__native_batch_norm_legit_add_native_batch_norm_backward_8, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__native_batch_norm_legit_add_native_batch_norm_backward_8, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__native_batch_norm_legit_add_native_batch_norm_backward_8", linkageName: "triton_red_fused__native_batch_norm_legit_add_native_batch_norm_backward_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 34, column: 44, scope: !7)
!14 = !DILocation(line: 34, column: 34, scope: !7)
!15 = !DILocation(line: 34, column: 49, scope: !7)
!16 = !DILocation(line: 39, column: 60, scope: !7)
!17 = !DILocation(line: 34, column: 39, scope: !7)
!18 = !DILocation(line: 183, column: 24, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!20 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!21 = !DILocation(line: 37, column: 51, scope: !7)
!22 = !DILocation(line: 41, column: 64, scope: !7)
!23 = !DILocation(line: 185, column: 34, scope: !19, inlinedAt: !21)
!24 = !DILocation(line: 185, column: 26, scope: !19, inlinedAt: !21)
!25 = !DILocation(line: 186, column: 39, scope: !19, inlinedAt: !21)
!26 = !DILocation(line: 186, column: 31, scope: !19, inlinedAt: !21)
!27 = !DILocation(line: 186, column: 22, scope: !19, inlinedAt: !21)
!28 = !DILocation(line: 40, column: 56, scope: !7)
!29 = !DILocation(line: 192, column: 21, scope: !30, inlinedAt: !31)
!30 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!31 = !DILocation(line: 43, column: 41, scope: !7)
!32 = !DILocation(line: 193, column: 28, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 194, column: 39, scope: !30, inlinedAt: !31)
!34 = !DILocation(line: 194, column: 60, scope: !30, inlinedAt: !31)
!35 = !DILocation(line: 194, column: 49, scope: !30, inlinedAt: !31)
!36 = !DILocation(line: 196, column: 25, scope: !30, inlinedAt: !31)
!37 = !DILocation(line: 196, column: 17, scope: !30, inlinedAt: !31)
!38 = !DILocation(line: 197, column: 15, scope: !30, inlinedAt: !31)
!39 = !DILocation(line: 197, column: 30, scope: !30, inlinedAt: !31)
!40 = !DILocation(line: 197, column: 38, scope: !30, inlinedAt: !31)
!41 = !DILocation(line: 197, column: 49, scope: !30, inlinedAt: !31)
!42 = !DILocation(line: 197, column: 22, scope: !30, inlinedAt: !31)
!43 = !DILocation(line: 204, column: 46, scope: !19, inlinedAt: !31)
!44 = !DILocation(line: 48, column: 25, scope: !7)
!45 = !DILocation(line: 48, column: 36, scope: !7)
!46 = !DILocation(line: 49, column: 30, scope: !7)
!47 = !DILocation(line: 49, column: 35, scope: !7)
!48 = !DILocation(line: 50, column: 30, scope: !7)
!49 = !DILocation(line: 50, column: 35, scope: !7)
!50 = !DILocation(line: 63, column: 23, scope: !7)
!51 = !DILocation(line: 65, column: 24, scope: !7)
!52 = !DILocation(line: 66, column: 32, scope: !7)
!53 = !DILocation(line: 70, column: 23, scope: !7)
!54 = !DILocation(line: 71, column: 24, scope: !7)
!55 = !DILocation(line: 72, column: 32, scope: !7)
!56 = !DILocation(line: 67, column: 23, scope: !7)
!57 = !DILocation(line: 61, column: 22, scope: !7)
!58 = !DILocation(line: 73, column: 24, scope: !7)
!59 = !DILocation(line: 69, column: 24, scope: !7)
!60 = !DILocation(line: 79, column: 62, scope: !7)
!61 = !DILocation(line: 58, column: 38, scope: !7)
!62 = !DILocation(line: 58, column: 53, scope: !7)
!63 = !DILocation(line: 59, column: 34, scope: !7)
!64 = !DILocation(line: 59, column: 49, scope: !7)
!65 = !DILocation(line: 60, column: 35, scope: !7)
!66 = !DILocation(line: 60, column: 50, scope: !7)
!67 = !DILocation(line: 68, column: 23, scope: !7)
!68 = !DILocation(line: 74, column: 24, scope: !7)
!69 = !DILocation(line: 82, column: 54, scope: !7)
!70 = !DILocation(line: 58, column: 43, scope: !7)
!71 = !DILocation(line: 183, column: 24, scope: !19, inlinedAt: !72)
!72 = !DILocation(line: 77, column: 55, scope: !7)
!73 = !DILocation(line: 81, column: 66, scope: !7)
!74 = !DILocation(line: 185, column: 34, scope: !19, inlinedAt: !72)
!75 = !DILocation(line: 185, column: 26, scope: !19, inlinedAt: !72)
!76 = !DILocation(line: 186, column: 39, scope: !19, inlinedAt: !72)
!77 = !DILocation(line: 186, column: 31, scope: !19, inlinedAt: !72)
!78 = !DILocation(line: 186, column: 22, scope: !19, inlinedAt: !72)
!79 = !DILocation(line: 80, column: 58, scope: !7)
!80 = !DILocation(line: 204, column: 46, scope: !19, inlinedAt: !81)
!81 = !DILocation(line: 84, column: 44, scope: !7)
!82 = !DILocation(line: 192, column: 21, scope: !30, inlinedAt: !81)
!83 = !DILocation(line: 193, column: 28, scope: !30, inlinedAt: !81)
!84 = !DILocation(line: 194, column: 39, scope: !30, inlinedAt: !81)
!85 = !DILocation(line: 194, column: 60, scope: !30, inlinedAt: !81)
!86 = !DILocation(line: 194, column: 49, scope: !30, inlinedAt: !81)
!87 = !DILocation(line: 196, column: 25, scope: !30, inlinedAt: !81)
!88 = !DILocation(line: 196, column: 17, scope: !30, inlinedAt: !81)
!89 = !DILocation(line: 197, column: 15, scope: !30, inlinedAt: !81)
!90 = !DILocation(line: 197, column: 30, scope: !30, inlinedAt: !81)
!91 = !DILocation(line: 197, column: 38, scope: !30, inlinedAt: !81)
!92 = !DILocation(line: 197, column: 49, scope: !30, inlinedAt: !81)
!93 = !DILocation(line: 197, column: 22, scope: !30, inlinedAt: !81)
!94 = !DILocation(line: 96, column: 24, scope: !7)
!95 = !DILocation(line: 98, column: 24, scope: !7)
!96 = !DILocation(line: 99, column: 32, scope: !7)
!97 = !DILocation(line: 93, column: 39, scope: !7)
!98 = !DILocation(line: 93, column: 54, scope: !7)
!99 = !DILocation(line: 94, column: 24, scope: !7)
!100 = !DILocation(line: 100, column: 24, scope: !7)
!101 = !DILocation(line: 101, column: 29, scope: !7)
!102 = !DILocation(line: 101, column: 51, scope: !7)
!103 = !DILocation(line: 102, column: 29, scope: !7)
!104 = !DILocation(line: 102, column: 51, scope: !7)
!105 = !DILocation(line: 107, column: 28, scope: !7)
!106 = !DILocation(line: 110, column: 28, scope: !7)
!107 = !DILocation(line: 111, column: 25, scope: !7)
!108 = !DILocation(line: 111, column: 37, scope: !7)
!109 = !DILocation(line: 112, column: 25, scope: !7)
!110 = !DILocation(line: 112, column: 37, scope: !7)
!111 = !DILocation(line: 112, column: 4, scope: !7)
