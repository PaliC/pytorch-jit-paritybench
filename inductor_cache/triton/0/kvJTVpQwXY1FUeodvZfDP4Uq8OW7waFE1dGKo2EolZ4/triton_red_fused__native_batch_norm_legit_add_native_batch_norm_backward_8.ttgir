#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [0, 1]}>
#loc = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":19:0)
#loc1 = loc(unknown)
#loc29 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":43:41)
#loc81 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":84:44)
#loc120 = loc(callsite(#loc1 at #loc29))
#loc143 = loc(callsite(#loc1 at #loc81))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__native_batch_norm_legit_add_native_batch_norm_backward_8(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":19:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":19:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<4.096000e+03> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<4096> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_3 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %cst_4 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<4.096000e+03> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2048xi32, #blocked> loc(#loc4)
    %4 = arith.muli %0, %c4096_i32 : i32 loc(#loc5)
    %5 = tt.splat %4 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc6)
    %6 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc7)
    %7 = tt.splat %1 : i1 -> tensor<1x2048xi1, #blocked> loc(#loc8)
    %8:3 = scf.for %arg12 = %c0_i32 to %c4096_i32 step %c2048_i32 iter_args(%arg13 = %cst_0, %arg14 = %cst_0, %arg15 = %cst_0) -> (tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>)  : i32 {
      %61 = tt.splat %arg12 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc10)
      %62 = arith.addi %61, %3 : tensor<1x2048xi32, #blocked> loc(#loc10)
      %63 = arith.cmpi slt, %62, %cst_2 : tensor<1x2048xi32, #blocked> loc(#loc11)
      %64 = arith.addi %62, %5 : tensor<1x2048xi32, #blocked> loc(#loc6)
      %65 = tt.addptr %6, %64 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc7)
      %66 = arith.andi %63, %7 : tensor<1x2048xi1, #blocked> loc(#loc8)
      %67 = tt.load %65, %66, %cst_0 evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc12)
      %68 = arith.cmpi eq, %arg12, %c0_i32 : i32 loc(#loc13)
      %69:3 = scf.if %68 -> (tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>) {
        scf.yield %cst_0, %67, %cst_1 : tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc111)
      } else {
        %73 = arith.subf %67, %arg13 : tensor<1x2048xf32, #blocked> loc(#loc112)
        %74 = arith.addf %arg15, %cst_1 : tensor<1x2048xf32, #blocked> loc(#loc113)
        %75 = arith.divf %73, %74 : tensor<1x2048xf32, #blocked> loc(#loc114)
        %76 = arith.addf %arg13, %75 : tensor<1x2048xf32, #blocked> loc(#loc115)
        %77 = arith.subf %67, %76 : tensor<1x2048xf32, #blocked> loc(#loc116)
        %78 = arith.mulf %73, %77 : tensor<1x2048xf32, #blocked> loc(#loc117)
        %79 = arith.addf %arg14, %78 : tensor<1x2048xf32, #blocked> loc(#loc118)
        scf.yield %79, %76, %74 : tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc118)
      } loc(#loc110)
      %70 = arith.select %66, %69#1, %arg13 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc24)
      %71 = arith.select %66, %69#0, %arg14 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc25)
      %72 = arith.select %66, %69#2, %arg15 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc26)
      scf.yield %70, %71, %72 : tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc27)
    } loc(#loc9)
    %9:3 = "tt.reduce"(%8#0, %8#1, %8#2) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32 loc(callsite(#loc1 at #loc29)), %arg13: f32 loc(callsite(#loc1 at #loc29)), %arg14: f32 loc(callsite(#loc1 at #loc29)), %arg15: f32 loc(callsite(#loc1 at #loc29)), %arg16: f32 loc(callsite(#loc1 at #loc29)), %arg17: f32 loc(callsite(#loc1 at #loc29))):
      %61 = arith.subf %arg15, %arg12 : f32 loc(#loc144)
      %62 = arith.addf %arg14, %arg17 : f32 loc(#loc145)
      %63 = arith.cmpf oeq, %62, %cst_3 : f32 loc(#loc146)
      %64 = arith.divf %arg17, %62 : f32 loc(#loc147)
      %65 = arith.select %63, %cst_3, %64 : f32 loc(#loc148)
      %66 = arith.mulf %61, %65 : f32 loc(#loc149)
      %67 = arith.addf %arg12, %66 : f32 loc(#loc150)
      %68 = arith.addf %arg13, %arg16 : f32 loc(#loc151)
      %69 = arith.mulf %61, %61 : f32 loc(#loc152)
      %70 = arith.mulf %69, %arg14 : f32 loc(#loc153)
      %71 = arith.mulf %70, %65 : f32 loc(#loc154)
      %72 = arith.addf %68, %71 : f32 loc(#loc155)
      tt.reduce.return %67, %72, %62 : f32, f32, f32 loc(#loc119)
    }) : (tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>) -> (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) loc(#loc119)
    %10 = triton_gpu.convert_layout %9#0 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc42)
    %11 = tt.expand_dims %10 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc42)
    %12 = tt.expand_dims %9#0 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc42)
    %13 = triton_gpu.convert_layout %9#1 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc43)
    %14 = tt.expand_dims %13 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc44)
    %15 = tt.expand_dims %9#1 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc44)
    %16 = tt.addptr %arg5, %0 : !tt.ptr<f32>, i32 loc(#loc45)
    %17 = tt.splat %16 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc46)
    %18 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc46)
    tt.store %17, %11, %18 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc46)
    %19 = tt.addptr %arg3, %0 : !tt.ptr<f32>, i32 loc(#loc47)
    %20 = tt.splat %19 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc48)
    %21 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc48)
    %22 = tt.load %20, %21 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc48)
    %23 = tt.addptr %arg4, %0 : !tt.ptr<f32>, i32 loc(#loc49)
    %24 = tt.splat %23 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc50)
    %25 = tt.load %24, %21 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc50)
    %26 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc51)
    %27 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc52)
    %28 = tt.broadcast %22 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc53)
    %29 = arith.divf %25, %cst : tensor<1x1xf32, #blocked> loc(#loc54)
    %30 = arith.addf %29, %cst_4 : tensor<1x1xf32, #blocked> loc(#loc55)
    %31 = tt.extern_elementwise %30 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc56)
    %32 = tt.broadcast %31 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc57)
    %33 = tt.broadcast %12 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc58)
    %34 = arith.divf %15, %cst : tensor<1x1xf32, #blocked> loc(#loc59)
    %35 = arith.addf %34, %cst_4 : tensor<1x1xf32, #blocked> loc(#loc60)
    %36 = tt.extern_elementwise %35 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc61)
    %37 = tt.broadcast %36 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc62)
    %38:3 = scf.for %arg12 = %c0_i32 to %c4096_i32 step %c2048_i32 iter_args(%arg13 = %cst_0, %arg14 = %cst_0, %arg15 = %cst_0) -> (tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>)  : i32 {
      %61 = tt.splat %arg12 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc64)
      %62 = arith.addi %61, %3 : tensor<1x2048xi32, #blocked> loc(#loc64)
      %63 = arith.cmpi slt, %62, %cst_2 : tensor<1x2048xi32, #blocked> loc(#loc65)
      %64 = arith.addi %62, %5 : tensor<1x2048xi32, #blocked> loc(#loc66)
      %65 = tt.addptr %26, %64 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc51)
      %66 = arith.andi %63, %7 : tensor<1x2048xi1, #blocked> loc(#loc67)
      %67 = tt.load %65, %66, %cst_0 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc68)
      %68 = tt.addptr %27, %64 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc52)
      %69 = tt.load %68, %66, %cst_0 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc69)
      %70 = tt.addptr %6, %64 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc70)
      %71 = tt.load %70, %66, %cst_0 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc71)
      %72 = arith.subf %69, %28 : tensor<1x2048xf32, #blocked> loc(#loc53)
      %73 = arith.mulf %72, %32 : tensor<1x2048xf32, #blocked> loc(#loc57)
      %74 = arith.addf %67, %73 : tensor<1x2048xf32, #blocked> loc(#loc72)
      %75 = arith.subf %71, %33 : tensor<1x2048xf32, #blocked> loc(#loc58)
      %76 = arith.mulf %75, %37 : tensor<1x2048xf32, #blocked> loc(#loc62)
      %77 = arith.addf %74, %76 : tensor<1x2048xf32, #blocked> loc(#loc73)
      %78 = arith.cmpi eq, %arg12, %c0_i32 : i32 loc(#loc74)
      %79:3 = scf.if %78 -> (tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>) {
        scf.yield %cst_0, %77, %cst_1 : tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc134)
      } else {
        %83 = arith.subf %77, %arg13 : tensor<1x2048xf32, #blocked> loc(#loc135)
        %84 = arith.addf %arg15, %cst_1 : tensor<1x2048xf32, #blocked> loc(#loc136)
        %85 = arith.divf %83, %84 : tensor<1x2048xf32, #blocked> loc(#loc137)
        %86 = arith.addf %arg13, %85 : tensor<1x2048xf32, #blocked> loc(#loc138)
        %87 = arith.subf %77, %86 : tensor<1x2048xf32, #blocked> loc(#loc139)
        %88 = arith.mulf %83, %87 : tensor<1x2048xf32, #blocked> loc(#loc140)
        %89 = arith.addf %arg14, %88 : tensor<1x2048xf32, #blocked> loc(#loc141)
        scf.yield %89, %86, %84 : tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc141)
      } loc(#loc133)
      %80 = arith.select %66, %79#1, %arg13 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc76)
      %81 = arith.select %66, %79#0, %arg14 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc77)
      %82 = arith.select %66, %79#2, %arg15 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc78)
      tt.store %65, %77, %66 : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc79)
      scf.yield %80, %81, %82 : tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc80)
    } loc(#loc63)
    %39:3 = "tt.reduce"(%38#0, %38#1, %38#2) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32 loc(callsite(#loc1 at #loc81)), %arg13: f32 loc(callsite(#loc1 at #loc81)), %arg14: f32 loc(callsite(#loc1 at #loc81)), %arg15: f32 loc(callsite(#loc1 at #loc81)), %arg16: f32 loc(callsite(#loc1 at #loc81)), %arg17: f32 loc(callsite(#loc1 at #loc81))):
      %61 = arith.subf %arg15, %arg12 : f32 loc(#loc156)
      %62 = arith.addf %arg14, %arg17 : f32 loc(#loc157)
      %63 = arith.cmpf oeq, %62, %cst_3 : f32 loc(#loc158)
      %64 = arith.divf %arg17, %62 : f32 loc(#loc159)
      %65 = arith.select %63, %cst_3, %64 : f32 loc(#loc160)
      %66 = arith.mulf %61, %65 : f32 loc(#loc161)
      %67 = arith.addf %arg12, %66 : f32 loc(#loc162)
      %68 = arith.addf %arg13, %arg16 : f32 loc(#loc163)
      %69 = arith.mulf %61, %61 : f32 loc(#loc164)
      %70 = arith.mulf %69, %arg14 : f32 loc(#loc165)
      %71 = arith.mulf %70, %65 : f32 loc(#loc166)
      %72 = arith.addf %68, %71 : f32 loc(#loc167)
      tt.reduce.return %67, %72, %62 : f32, f32, f32 loc(#loc142)
    }) : (tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>) -> (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) loc(#loc142)
    %40 = tt.expand_dims %39#0 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc82)
    %41 = triton_gpu.convert_layout %39#1 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc83)
    %42 = tt.expand_dims %41 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc84)
    %43 = tt.expand_dims %39#1 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc84)
    %44 = tt.broadcast %40 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc85)
    %45 = arith.divf %43, %cst : tensor<1x1xf32, #blocked> loc(#loc86)
    %46 = arith.addf %45, %cst_4 : tensor<1x1xf32, #blocked> loc(#loc87)
    %47 = tt.extern_elementwise %46 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc88)
    %48 = tt.broadcast %47 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc89)
    %49 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc90)
    %50 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc91)
    scf.for %arg12 = %c0_i32 to %c4096_i32 step %c2048_i32  : i32 {
      %61 = tt.splat %arg12 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc93)
      %62 = arith.addi %61, %3 : tensor<1x2048xi32, #blocked> loc(#loc93)
      %63 = arith.cmpi slt, %62, %cst_2 : tensor<1x2048xi32, #blocked> loc(#loc94)
      %64 = arith.addi %62, %5 : tensor<1x2048xi32, #blocked> loc(#loc95)
      %65 = tt.addptr %26, %64 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc96)
      %66 = arith.andi %63, %7 : tensor<1x2048xi1, #blocked> loc(#loc97)
      %67 = tt.load %65, %66, %cst_0 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc98)
      %68 = arith.subf %67, %44 : tensor<1x2048xf32, #blocked> loc(#loc85)
      %69 = arith.mulf %68, %48 : tensor<1x2048xf32, #blocked> loc(#loc89)
      %70 = tt.addptr %49, %64 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc90)
      tt.store %70, %69, %66 : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc99)
      %71 = tt.addptr %50, %64 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc91)
      tt.store %71, %68, %66 : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc100)
    } loc(#loc92)
    %51 = arith.divf %14, %cst_6 : tensor<1x1xf32, #blocked1> loc(#loc101)
    %52 = arith.addf %51, %cst_5 : tensor<1x1xf32, #blocked1> loc(#loc102)
    %53 = tt.extern_elementwise %52 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc43)
    %54 = arith.divf %42, %cst_6 : tensor<1x1xf32, #blocked1> loc(#loc103)
    %55 = arith.addf %54, %cst_5 : tensor<1x1xf32, #blocked1> loc(#loc104)
    %56 = tt.extern_elementwise %55 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc83)
    %57 = tt.addptr %arg8, %0 : !tt.ptr<f32>, i32 loc(#loc105)
    %58 = tt.splat %57 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc106)
    tt.store %58, %53, %18 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc106)
    %59 = tt.addptr %arg9, %0 : !tt.ptr<f32>, i32 loc(#loc107)
    %60 = tt.splat %59 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc108)
    tt.store %60, %56, %18 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc108)
    tt.return loc(#loc109)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":22:28)
#loc3 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":24:21)
#loc4 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":25:33)
#loc5 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":34:44)
#loc6 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":34:39)
#loc7 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":34:34)
#loc8 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":34:57)
#loc9 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":30:36)
#loc10 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":31:27)
#loc11 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":32:25)
#loc12 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":34:49)
#loc13 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":37:62)
#loc14 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":178:7)
#loc15 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":37:51)
#loc16 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":181:31)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":183:24)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":184:30)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:34)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:26)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:39)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:31)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:22)
#loc24 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":39:60)
#loc25 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":40:56)
#loc26 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":41:64)
#loc27 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":41:8)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":204:46)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":192:21)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":193:28)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:39)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:60)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:49)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:25)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:17)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:15)
#loc38 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:30)
#loc39 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:38)
#loc40 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:49)
#loc41 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:22)
#loc42 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":45:20)
#loc43 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":107:28)
#loc44 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":46:20)
#loc45 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":48:25)
#loc46 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":48:36)
#loc47 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":49:30)
#loc48 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":49:35)
#loc49 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":50:30)
#loc50 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":50:35)
#loc51 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":58:38)
#loc52 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":59:34)
#loc53 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":61:22)
#loc54 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":63:23)
#loc55 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":65:24)
#loc56 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":66:32)
#loc57 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":67:23)
#loc58 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":69:24)
#loc59 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":70:23)
#loc60 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":71:24)
#loc61 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":72:32)
#loc62 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":73:24)
#loc63 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":54:36)
#loc64 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":55:27)
#loc65 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":56:25)
#loc66 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":58:43)
#loc67 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":58:61)
#loc68 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":58:53)
#loc69 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":59:49)
#loc70 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":60:35)
#loc71 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":60:50)
#loc72 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":68:23)
#loc73 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":74:24)
#loc74 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":77:66)
#loc75 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":77:55)
#loc76 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":79:62)
#loc77 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":80:58)
#loc78 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":81:66)
#loc79 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":82:54)
#loc80 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":82:8)
#loc82 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":86:22)
#loc83 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":110:28)
#loc84 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":87:22)
#loc85 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":94:24)
#loc86 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":96:24)
#loc87 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":98:24)
#loc88 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":99:32)
#loc89 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":100:24)
#loc90 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":101:29)
#loc91 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":102:29)
#loc92 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":89:36)
#loc93 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":90:27)
#loc94 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":91:25)
#loc95 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":93:44)
#loc96 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":93:39)
#loc97 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":93:62)
#loc98 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":93:54)
#loc99 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":101:51)
#loc100 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":102:51)
#loc101 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":104:19)
#loc102 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":106:20)
#loc103 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":108:20)
#loc104 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":109:20)
#loc105 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":111:25)
#loc106 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":111:37)
#loc107 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":112:25)
#loc108 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":112:37)
#loc109 = loc("inductor_cache/g3/cg3qhf5b2ucqdz3uakwh5fawqva3lss53vxcfhmogmbse27dc3rr.py":112:4)
#loc110 = loc(callsite(#loc14 at #loc15))
#loc111 = loc(callsite(#loc16 at #loc15))
#loc112 = loc(callsite(#loc17 at #loc15))
#loc113 = loc(callsite(#loc18 at #loc15))
#loc114 = loc(callsite(#loc19 at #loc15))
#loc115 = loc(callsite(#loc20 at #loc15))
#loc116 = loc(callsite(#loc21 at #loc15))
#loc117 = loc(callsite(#loc22 at #loc15))
#loc118 = loc(callsite(#loc23 at #loc15))
#loc119 = loc(callsite(#loc28 at #loc29))
#loc121 = loc(callsite(#loc30 at #loc28))
#loc122 = loc(callsite(#loc31 at #loc28))
#loc123 = loc(callsite(#loc32 at #loc28))
#loc124 = loc(callsite(#loc33 at #loc28))
#loc125 = loc(callsite(#loc34 at #loc28))
#loc126 = loc(callsite(#loc35 at #loc28))
#loc127 = loc(callsite(#loc36 at #loc28))
#loc128 = loc(callsite(#loc37 at #loc28))
#loc129 = loc(callsite(#loc38 at #loc28))
#loc130 = loc(callsite(#loc39 at #loc28))
#loc131 = loc(callsite(#loc40 at #loc28))
#loc132 = loc(callsite(#loc41 at #loc28))
#loc133 = loc(callsite(#loc14 at #loc75))
#loc134 = loc(callsite(#loc16 at #loc75))
#loc135 = loc(callsite(#loc17 at #loc75))
#loc136 = loc(callsite(#loc18 at #loc75))
#loc137 = loc(callsite(#loc19 at #loc75))
#loc138 = loc(callsite(#loc20 at #loc75))
#loc139 = loc(callsite(#loc21 at #loc75))
#loc140 = loc(callsite(#loc22 at #loc75))
#loc141 = loc(callsite(#loc23 at #loc75))
#loc142 = loc(callsite(#loc28 at #loc81))
#loc144 = loc(callsite(#loc121 at #loc29))
#loc145 = loc(callsite(#loc122 at #loc29))
#loc146 = loc(callsite(#loc123 at #loc29))
#loc147 = loc(callsite(#loc124 at #loc29))
#loc148 = loc(callsite(#loc125 at #loc29))
#loc149 = loc(callsite(#loc126 at #loc29))
#loc150 = loc(callsite(#loc127 at #loc29))
#loc151 = loc(callsite(#loc128 at #loc29))
#loc152 = loc(callsite(#loc129 at #loc29))
#loc153 = loc(callsite(#loc130 at #loc29))
#loc154 = loc(callsite(#loc131 at #loc29))
#loc155 = loc(callsite(#loc132 at #loc29))
#loc156 = loc(callsite(#loc121 at #loc81))
#loc157 = loc(callsite(#loc122 at #loc81))
#loc158 = loc(callsite(#loc123 at #loc81))
#loc159 = loc(callsite(#loc124 at #loc81))
#loc160 = loc(callsite(#loc125 at #loc81))
#loc161 = loc(callsite(#loc126 at #loc81))
#loc162 = loc(callsite(#loc127 at #loc81))
#loc163 = loc(callsite(#loc128 at #loc81))
#loc164 = loc(callsite(#loc129 at #loc81))
#loc165 = loc(callsite(#loc130 at #loc81))
#loc166 = loc(callsite(#loc131 at #loc81))
#loc167 = loc(callsite(#loc132 at #loc81))
