; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_gelu_linalg_vector_norm_2(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %6 = shl i32 %5, 3, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 31, !dbg !12
  %9 = shl i32 %7, 1, !dbg !12
  %10 = and i32 %9, 6, !dbg !12
  %11 = and i32 %7, 7, !dbg !12
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = icmp slt i32 %12, 64, !dbg !14
  %14 = lshr i32 %7, 5, !dbg !15
  %.frozen = freeze i32 %12, !dbg !16
  %15 = sdiv i32 %.frozen, 16, !dbg !16
  %16 = mul i32 %15, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %16, !dbg !17
  %17 = shl i32 %7, 2, !dbg !18
  %18 = and i32 %17, 240, !dbg !18
  %19 = add nsw i32 %.decomposed, %18, !dbg !19
  %20 = shl i32 %15, 8, !dbg !20
  %21 = add i32 %19, %20, !dbg !21
  %22 = sext i32 %21 to i64, !dbg !22
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !22
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %23, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !23
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !23
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !23
  %27 = bitcast i32 %25 to float, !dbg !23
  %28 = bitcast i32 %26 to float, !dbg !23
  %29 = fmul float %27, 5.000000e-01, !dbg !24
  %30 = fmul float %28, 5.000000e-01, !dbg !24
  %31 = fmul float %27, 0x3FE6A09E60000000, !dbg !25
  %32 = fmul float %28, 0x3FE6A09E60000000, !dbg !25
  %33 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %.not.i1 = icmp eq i32 %33, 0, !dbg !26
  %34 = tail call float @llvm.nvvm.fabs.ftz.f(float %31) #5, !dbg !26
  %35 = tail call float @llvm.nvvm.fabs.f(float %31) #5, !dbg !26
  %.0.i2 = select i1 %.not.i1, float %35, float %34, !dbg !26
  %36 = fcmp oge float %.0.i2, 0x3FF00C1FC0000000, !dbg !26
  br i1 %36, label %__nv_fabsf.exit1.i, label %38, !dbg !26

__nv_fabsf.exit1.i:                               ; preds = %4
  %37 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %.not1.i4 = icmp eq i32 %37, 0, !dbg !26
  %.01.i = select i1 %.not1.i4, float %35, float %34, !dbg !26
  br label %__internal_fmad.exit.i, !dbg !26

38:                                               ; preds = %4
  %39 = fmul float %31, %31, !dbg !26
  br label %__internal_fmad.exit.i, !dbg !26

__internal_fmad.exit.i:                           ; preds = %38, %__nv_fabsf.exit1.i
  %40 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i ], [ 0x3FC06EBA60000000, %38 ], !dbg !26
  %41 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i ], [ 0xBFD8127580000000, %38 ], !dbg !26
  %42 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i ], [ 0x3FBCE315E0000000, %38 ], !dbg !26
  %43 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i ], [ 0xBF9B837CE0000000, %38 ], !dbg !26
  %44 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i ], [ 0x3F755ABD40000000, %38 ], !dbg !26
  %45 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i ], [ 0xBF4AE9A400000000, %38 ], !dbg !26
  %46 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i ], [ 0x3F163D2D40000000, %38 ], !dbg !26
  %47 = phi float [ %.01.i, %__nv_fabsf.exit1.i ], [ %39, %38 ], !dbg !26
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %.not2.i3 = icmp eq i32 %48, 0, !dbg !26
  %49 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %46, float %47, float %45) #5, !dbg !26
  %50 = tail call float @llvm.nvvm.fma.rn.f(float %46, float %47, float %45) #5, !dbg !26
  %.02.i = select i1 %.not2.i3, float %50, float %49, !dbg !26
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %.not3.i = icmp eq i32 %51, 0, !dbg !26
  %52 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float %47, float %44) #5, !dbg !26
  %53 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float %47, float %44) #5, !dbg !26
  %.03.i = select i1 %.not3.i, float %53, float %52, !dbg !26
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %.not4.i = icmp eq i32 %54, 0, !dbg !26
  %55 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i, float %47, float %43) #5, !dbg !26
  %56 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i, float %47, float %43) #5, !dbg !26
  %.04.i = select i1 %.not4.i, float %56, float %55, !dbg !26
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %.not5.i = icmp eq i32 %57, 0, !dbg !26
  %58 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %47, float %42) #5, !dbg !26
  %59 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %47, float %42) #5, !dbg !26
  %.05.i = select i1 %.not5.i, float %59, float %58, !dbg !26
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %.not6.i = icmp eq i32 %60, 0, !dbg !26
  %61 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %47, float %41) #5, !dbg !26
  %62 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %47, float %41) #5, !dbg !26
  %.06.i = select i1 %.not6.i, float %62, float %61, !dbg !26
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %.not7.i = icmp eq i32 %63, 0, !dbg !26
  %64 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %47, float %40) #5, !dbg !26
  %65 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %47, float %40) #5, !dbg !26
  %.07.i = select i1 %.not7.i, float %65, float %64, !dbg !26
  %66 = fneg float %47, !dbg !26
  %67 = select i1 %36, float %66, float %31, !dbg !26
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %.not8.i = icmp eq i32 %68, 0, !dbg !26
  %69 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %67, float %67) #5, !dbg !26
  %70 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %67, float %67) #5, !dbg !26
  %.08.i = select i1 %.not8.i, float %70, float %69, !dbg !26
  br i1 %36, label %71, label %__nv_erff.exit, !dbg !26

71:                                               ; preds = %__internal_fmad.exit.i
  %72 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i) #5, !dbg !26
  %73 = fsub float 1.000000e+00, %72, !dbg !26
  %74 = bitcast float %73 to i32, !dbg !26
  %75 = bitcast float %31 to i32, !dbg !26
  %76 = and i32 %75, -2147483648, !dbg !26
  %77 = or i32 %76, %74, !dbg !26
  %78 = bitcast i32 %77 to float, !dbg !26
  br label %__nv_erff.exit, !dbg !26

__nv_erff.exit:                                   ; preds = %__internal_fmad.exit.i, %71
  %r.0.i = phi float [ %78, %71 ], [ %.08.i, %__internal_fmad.exit.i ], !dbg !26
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %.not.i5 = icmp eq i32 %79, 0, !dbg !26
  %80 = tail call float @llvm.nvvm.fabs.ftz.f(float %32) #5, !dbg !26
  %81 = tail call float @llvm.nvvm.fabs.f(float %32) #5, !dbg !26
  %.0.i6 = select i1 %.not.i5, float %81, float %80, !dbg !26
  %82 = fcmp oge float %.0.i6, 0x3FF00C1FC0000000, !dbg !26
  br i1 %82, label %__nv_fabsf.exit1.i23, label %84, !dbg !26

__nv_fabsf.exit1.i23:                             ; preds = %__nv_erff.exit
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %.not1.i24 = icmp eq i32 %83, 0, !dbg !26
  %.01.i25 = select i1 %.not1.i24, float %81, float %80, !dbg !26
  br label %__internal_fmad.exit.i7, !dbg !26

84:                                               ; preds = %__nv_erff.exit
  %85 = fmul float %32, %32, !dbg !26
  br label %__internal_fmad.exit.i7, !dbg !26

__internal_fmad.exit.i7:                          ; preds = %84, %__nv_fabsf.exit1.i23
  %86 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i23 ], [ 0x3FC06EBA60000000, %84 ], !dbg !26
  %87 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i23 ], [ 0xBFD8127580000000, %84 ], !dbg !26
  %88 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i23 ], [ 0x3FBCE315E0000000, %84 ], !dbg !26
  %89 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i23 ], [ 0xBF9B837CE0000000, %84 ], !dbg !26
  %90 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i23 ], [ 0x3F755ABD40000000, %84 ], !dbg !26
  %91 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i23 ], [ 0xBF4AE9A400000000, %84 ], !dbg !26
  %92 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i23 ], [ 0x3F163D2D40000000, %84 ], !dbg !26
  %93 = phi float [ %.01.i25, %__nv_fabsf.exit1.i23 ], [ %85, %84 ], !dbg !26
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %.not2.i8 = icmp eq i32 %94, 0, !dbg !26
  %95 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %92, float %93, float %91) #5, !dbg !26
  %96 = tail call float @llvm.nvvm.fma.rn.f(float %92, float %93, float %91) #5, !dbg !26
  %.02.i9 = select i1 %.not2.i8, float %96, float %95, !dbg !26
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %.not3.i10 = icmp eq i32 %97, 0, !dbg !26
  %98 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i9, float %93, float %90) #5, !dbg !26
  %99 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i9, float %93, float %90) #5, !dbg !26
  %.03.i11 = select i1 %.not3.i10, float %99, float %98, !dbg !26
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %.not4.i12 = icmp eq i32 %100, 0, !dbg !26
  %101 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i11, float %93, float %89) #5, !dbg !26
  %102 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i11, float %93, float %89) #5, !dbg !26
  %.04.i13 = select i1 %.not4.i12, float %102, float %101, !dbg !26
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %.not5.i14 = icmp eq i32 %103, 0, !dbg !26
  %104 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i13, float %93, float %88) #5, !dbg !26
  %105 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i13, float %93, float %88) #5, !dbg !26
  %.05.i15 = select i1 %.not5.i14, float %105, float %104, !dbg !26
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %.not6.i16 = icmp eq i32 %106, 0, !dbg !26
  %107 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i15, float %93, float %87) #5, !dbg !26
  %108 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i15, float %93, float %87) #5, !dbg !26
  %.06.i17 = select i1 %.not6.i16, float %108, float %107, !dbg !26
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %.not7.i18 = icmp eq i32 %109, 0, !dbg !26
  %110 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i17, float %93, float %86) #5, !dbg !26
  %111 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i17, float %93, float %86) #5, !dbg !26
  %.07.i19 = select i1 %.not7.i18, float %111, float %110, !dbg !26
  %112 = fneg float %93, !dbg !26
  %113 = select i1 %82, float %112, float %32, !dbg !26
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %.not8.i20 = icmp eq i32 %114, 0, !dbg !26
  %115 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i19, float %113, float %113) #5, !dbg !26
  %116 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i19, float %113, float %113) #5, !dbg !26
  %.08.i21 = select i1 %.not8.i20, float %116, float %115, !dbg !26
  br i1 %82, label %117, label %__nv_erff.exit26, !dbg !26

117:                                              ; preds = %__internal_fmad.exit.i7
  %118 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i21) #5, !dbg !26
  %119 = fsub float 1.000000e+00, %118, !dbg !26
  %120 = bitcast float %119 to i32, !dbg !26
  %121 = bitcast float %32 to i32, !dbg !26
  %122 = and i32 %121, -2147483648, !dbg !26
  %123 = or i32 %122, %120, !dbg !26
  %124 = bitcast i32 %123 to float, !dbg !26
  br label %__nv_erff.exit26, !dbg !26

__nv_erff.exit26:                                 ; preds = %__internal_fmad.exit.i7, %117
  %r.0.i22 = phi float [ %124, %117 ], [ %.08.i21, %__internal_fmad.exit.i7 ], !dbg !26
  %125 = fadd float %r.0.i, 1.000000e+00, !dbg !27
  %126 = fadd float %r.0.i22, 1.000000e+00, !dbg !27
  %127 = fmul float %29, %125, !dbg !28
  %128 = fmul float %30, %126, !dbg !28
  %129 = fmul float %127, %127, !dbg !29
  %130 = fmul float %128, %128, !dbg !29
  %131 = select i1 %13, float %129, float 0.000000e+00, !dbg !30
  %132 = select i1 %13, float %130, float 0.000000e+00, !dbg !30
  %133 = bitcast float %131 to i32, !dbg !31
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 16, i32 31), !dbg !31
  %135 = bitcast i32 %134 to float, !dbg !31
  %136 = fadd float %131, %135, !dbg !35
  %137 = bitcast float %136 to i32, !dbg !31
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 8, i32 31), !dbg !31
  %139 = bitcast i32 %138 to float, !dbg !31
  %140 = fadd float %136, %139, !dbg !35
  %141 = bitcast float %140 to i32, !dbg !31
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 4, i32 31), !dbg !31
  %143 = bitcast i32 %142 to float, !dbg !31
  %144 = fadd float %140, %143, !dbg !35
  %145 = bitcast float %132 to i32, !dbg !31
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 16, i32 31), !dbg !31
  %147 = bitcast i32 %146 to float, !dbg !31
  %148 = fadd float %132, %147, !dbg !35
  %149 = bitcast float %148 to i32, !dbg !31
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 8, i32 31), !dbg !31
  %151 = bitcast i32 %150 to float, !dbg !31
  %152 = fadd float %148, %151, !dbg !35
  %153 = bitcast float %152 to i32, !dbg !31
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 4, i32 31), !dbg !31
  %155 = bitcast i32 %154 to float, !dbg !31
  %156 = fadd float %152, %155, !dbg !35
  %157 = icmp samesign ult i32 %8, 4, !dbg !31
  %158 = and i32 %14, 1, !dbg !31
  %159 = shl nuw nsw i32 %10, 1, !dbg !31
  %160 = or disjoint i32 %159, %158, !dbg !31
  %161 = getelementptr float, ptr addrspace(3) @global_smem, i32 %160, !dbg !31
  %162 = bitcast float %144 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %162, i1 %157) #5, !dbg !31
  %163 = or disjoint i32 %159, 2, !dbg !31
  %164 = or disjoint i32 %163, %158, !dbg !31
  %165 = getelementptr float, ptr addrspace(3) @global_smem, i32 %164, !dbg !31
  %166 = bitcast float %156 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %166, i1 %157) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %167 = icmp slt i32 %7, 16, !dbg !31
  %168 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !31
  %169 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %168, i1 %167) #5, !dbg !31
  %170 = bitcast i32 %169 to float, !dbg !31
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 1, i32 31), !dbg !31
  %172 = bitcast i32 %171 to float, !dbg !31
  %173 = fadd float %170, %172, !dbg !35
  %174 = and i32 %7, 1, !dbg !31
  %175 = icmp eq i32 %174, 0, !dbg !31
  %176 = and i1 %167, %175, !dbg !31
  %177 = bitcast float %173 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, <1 x i32> %177, i1 %176) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %178 = getelementptr float, ptr addrspace(3) @global_smem, i32 %159, !dbg !31
  %179 = load i32, ptr addrspace(3) %178, align 16, !dbg !31
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i32 %163, !dbg !31
  %181 = load i32, ptr addrspace(3) %180, align 8, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %182 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !37
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %182, i32 %179, i32 %181, i1 true) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %183 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !37
  %184 = load float, ptr addrspace(3) %183, align 4, !dbg !37
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i = icmp eq i32 %185, 0, !dbg !37
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !37
  %.not1.i = icmp eq i32 %186, 0, !dbg !37
  br i1 %.not.i, label %192, label %187, !dbg !37

187:                                              ; preds = %__nv_erff.exit26
  br i1 %.not1.i, label %190, label %188, !dbg !37

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %184) #5, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %184) #5, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

192:                                              ; preds = %__nv_erff.exit26
  br i1 %.not1.i, label %195, label %193, !dbg !37

193:                                              ; preds = %192
  %194 = tail call float @llvm.nvvm.sqrt.rn.f(float %184) #5, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

195:                                              ; preds = %192
  %196 = tail call float @llvm.nvvm.sqrt.approx.f(float %184) #5, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %188, %190, %193, %195
  %.0.i = phi float [ %189, %188 ], [ %191, %190 ], [ %194, %193 ], [ %196, %195 ], !dbg !37
  %197 = or disjoint i32 %6, %11, !dbg !13
  %198 = icmp slt i32 %197, 64, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %199 = sext i32 %197 to i64, !dbg !39
  %200 = getelementptr float, ptr addrspace(1) %0, i64 %199, !dbg !39
  %201 = lshr i32 %8, 3, !dbg !40
  %202 = shl nuw nsw i32 %158, 2, !dbg !40
  %203 = or disjoint i32 %202, %201, !dbg !40
  %204 = icmp eq i32 %203, 0, !dbg !40
  %205 = bitcast float %.0.i to i32, !dbg !40
  %206 = and i1 %204, %198, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %205, ptr addrspace(1) %200, i1 %206) #5, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmk7rwlkwy2ukinbkuo76hxzppq4vh7hi3zrg5hv2wo5ozgal4eu.py", directory: "inductor_cache/mk")
!4 = !{ptr @triton_per_fused_gelu_linalg_vector_norm_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_gelu_linalg_vector_norm_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_gelu_linalg_vector_norm_2", linkageName: "triton_per_fused_gelu_linalg_vector_norm_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 38, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 47, scope: !7)
!21 = !DILocation(line: 33, column: 43, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 52, scope: !7)
!24 = !DILocation(line: 35, column: 18, scope: !7)
!25 = !DILocation(line: 37, column: 18, scope: !7)
!26 = !DILocation(line: 38, column: 25, scope: !7)
!27 = !DILocation(line: 40, column: 18, scope: !7)
!28 = !DILocation(line: 41, column: 18, scope: !7)
!29 = !DILocation(line: 42, column: 18, scope: !7)
!30 = !DILocation(line: 44, column: 35, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = !DILocation(line: 45, column: 26, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!37 = !DILocation(line: 46, column: 27, scope: !7)
!38 = !DILocation(line: 47, column: 4, scope: !7)
!39 = !DILocation(line: 48, column: 28, scope: !7)
!40 = !DILocation(line: 48, column: 40, scope: !7)
!41 = !DILocation(line: 48, column: 4, scope: !7)
