; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_63(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 10, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 2, !dbg !12
  %19 = and i32 %18, 508, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = or disjoint i32 %20, 512, !dbg !13
  %22 = icmp slt i32 %20, 227328, !dbg !14
  %23 = icmp slt i32 %21, 227328, !dbg !14
  %24 = srem i32 %20, 256, !dbg !15
  %.frozen = freeze i32 %20, !dbg !16
  %25 = sdiv i32 %.frozen, 56832, !dbg !16
  %.frozen91 = freeze i32 %21, !dbg !16
  %26 = sdiv i32 %.frozen91, 56832, !dbg !16
  %27 = mul i32 %25, 56832, !dbg !17
  %srem.decomposed = sub i32 %.frozen, %27, !dbg !17
  %28 = mul i32 %26, 56832, !dbg !17
  %srem1.decomposed = sub i32 %.frozen91, %28, !dbg !17
  %29 = mul nsw i32 %25, 38400, !dbg !18
  %30 = mul nsw i32 %26, 38400, !dbg !18
  %31 = add nsw i32 %29, %srem.decomposed, !dbg !19
  %32 = add nsw i32 %30, %srem1.decomposed, !dbg !19
  %33 = sext i32 %31 to i64, !dbg !20
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !20
  %35 = sext i32 %32 to i64, !dbg !20
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !20
  %37 = mul nsw i32 %25, 3072, !dbg !21
  %38 = mul nsw i32 %26, 3072, !dbg !21
  %39 = add nsw i32 %37, %24, !dbg !22
  %40 = add nsw i32 %39, -38400, !dbg !23
  %41 = add nsw i32 %38, %24, !dbg !22
  %42 = add nsw i32 %41, -38400, !dbg !23
  %43 = add nsw i32 %39, -41472, !dbg !24
  %44 = add nsw i32 %41, -41472, !dbg !24
  %45 = add nsw i32 %39, -44544, !dbg !25
  %46 = add nsw i32 %41, -44544, !dbg !25
  %47 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !26
  %48 = insertelement <2 x i32> %47, i32 %20, i64 1, !dbg !26
  %49 = sdiv <2 x i32> %48, splat (i32 256), !dbg !26
  %50 = srem <2 x i32> %49, splat (i32 222), !dbg !27
  %51 = extractelement <2 x i32> %50, i64 1, !dbg !28
  %52 = sext i32 %51 to i64, !dbg !28
  %53 = getelementptr float, ptr addrspace(1) %7, i64 %52, !dbg !28
  %54 = extractelement <2 x i32> %50, i64 0, !dbg !28
  %55 = sext i32 %54 to i64, !dbg !28
  %56 = getelementptr float, ptr addrspace(1) %7, i64 %55, !dbg !28
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %22) #3, !dbg !29
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %22) #3, !dbg !29
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %22) #3, !dbg !29
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %22) #3, !dbg !29
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %23) #3, !dbg !29
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %23) #3, !dbg !29
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %23) #3, !dbg !29
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %23) #3, !dbg !29
  %65 = getelementptr float, ptr addrspace(1) %8, i64 %52, !dbg !30
  %66 = getelementptr float, ptr addrspace(1) %8, i64 %55, !dbg !30
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %22) #3, !dbg !31
  %68 = bitcast i32 %67 to float, !dbg !31
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %22) #3, !dbg !31
  %70 = bitcast i32 %69 to float, !dbg !31
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %22) #3, !dbg !31
  %72 = bitcast i32 %71 to float, !dbg !31
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %22) #3, !dbg !31
  %74 = bitcast i32 %73 to float, !dbg !31
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %23) #3, !dbg !31
  %76 = bitcast i32 %75 to float, !dbg !31
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %23) #3, !dbg !31
  %78 = bitcast i32 %77 to float, !dbg !31
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %23) #3, !dbg !31
  %80 = bitcast i32 %79 to float, !dbg !31
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %23) #3, !dbg !31
  %82 = bitcast i32 %81 to float, !dbg !31
  %83 = getelementptr float, ptr addrspace(1) %9, i64 %52, !dbg !32
  %84 = getelementptr float, ptr addrspace(1) %9, i64 %55, !dbg !32
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %22) #3, !dbg !33
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %22) #3, !dbg !33
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %22) #3, !dbg !33
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %22) #3, !dbg !33
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %23) #3, !dbg !33
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %23) #3, !dbg !33
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %23) #3, !dbg !33
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %23) #3, !dbg !33
  %93 = getelementptr float, ptr addrspace(1) %10, i64 %52, !dbg !34
  %94 = getelementptr float, ptr addrspace(1) %10, i64 %55, !dbg !34
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %22) #3, !dbg !35
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %22) #3, !dbg !35
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %22) #3, !dbg !35
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %22) #3, !dbg !35
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %23) #3, !dbg !35
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %23) #3, !dbg !35
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %23) #3, !dbg !35
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %23) #3, !dbg !35
  %103 = icmp slt <2 x i32> %50, splat (i32 150), !dbg !36
  %104 = extractelement <2 x i1> %103, i64 1, !dbg !37
  %105 = and i1 %22, %104, !dbg !37
  %106 = extractelement <2 x i1> %103, i64 0, !dbg !37
  %107 = and i1 %23, %106, !dbg !37
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %105, i32 0, i1 %105, i32 0, i1 %105, i32 0, i1 %105, i32 0, i1 %105) #3, !dbg !38
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %107, i32 0, i1 %107, i32 0, i1 %107, i32 0, i1 %107, i32 0, i1 %107) #3, !dbg !38
  %110 = add nsw <2 x i32> %50, splat (i32 -150), !dbg !39
  %111 = icmp ult <2 x i32> %110, splat (i32 12), !dbg !39
  %112 = shl nsw i32 %51, 8, !dbg !22
  %113 = shl nsw i32 %54, 8, !dbg !22
  %114 = add nsw i32 %40, %112, !dbg !40
  %115 = add nsw i32 %42, %113, !dbg !40
  %116 = sext i32 %114 to i64, !dbg !41
  %117 = getelementptr float, ptr addrspace(1) %1, i64 %116, !dbg !41
  %118 = sext i32 %115 to i64, !dbg !41
  %119 = getelementptr float, ptr addrspace(1) %1, i64 %118, !dbg !41
  %120 = extractelement <2 x i1> %111, i64 1, !dbg !42
  %121 = and i1 %22, %120, !dbg !42
  %122 = extractelement <2 x i1> %111, i64 0, !dbg !42
  %123 = and i1 %23, %122, !dbg !42
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %117, i1 %121, i32 0, i1 %121, i32 0, i1 %121, i32 0, i1 %121, i32 0, i1 %121) #3, !dbg !43
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %119, i1 %123, i32 0, i1 %123, i32 0, i1 %123, i32 0, i1 %123, i32 0, i1 %123) #3, !dbg !43
  %126 = add nsw <2 x i32> %50, splat (i32 -162), !dbg !44
  %127 = icmp ult <2 x i32> %126, splat (i32 12), !dbg !44
  %128 = add nsw i32 %43, %112, !dbg !45
  %129 = add nsw i32 %44, %113, !dbg !45
  %130 = sext i32 %128 to i64, !dbg !46
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %130, !dbg !46
  %132 = sext i32 %129 to i64, !dbg !46
  %133 = getelementptr float, ptr addrspace(1) %2, i64 %132, !dbg !46
  %134 = extractelement <2 x i1> %127, i64 1, !dbg !47
  %135 = and i1 %22, %134, !dbg !47
  %136 = extractelement <2 x i1> %127, i64 0, !dbg !47
  %137 = and i1 %23, %136, !dbg !47
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %131, i1 %135, i32 0, i1 %135, i32 0, i1 %135, i32 0, i1 %135, i32 0, i1 %135) #3, !dbg !48
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %133, i1 %137, i32 0, i1 %137, i32 0, i1 %137, i32 0, i1 %137, i32 0, i1 %137) #3, !dbg !48
  %140 = add nsw <2 x i32> %50, splat (i32 -174), !dbg !49
  %141 = icmp ult <2 x i32> %140, splat (i32 12), !dbg !49
  %142 = add nsw i32 %45, %112, !dbg !50
  %143 = add nsw i32 %46, %113, !dbg !50
  %144 = sext i32 %142 to i64, !dbg !51
  %145 = getelementptr float, ptr addrspace(1) %3, i64 %144, !dbg !51
  %146 = sext i32 %143 to i64, !dbg !51
  %147 = getelementptr float, ptr addrspace(1) %3, i64 %146, !dbg !51
  %148 = extractelement <2 x i1> %141, i64 1, !dbg !52
  %149 = and i1 %22, %148, !dbg !52
  %150 = extractelement <2 x i1> %141, i64 0, !dbg !52
  %151 = and i1 %23, %150, !dbg !52
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %145, i1 %149, i32 0, i1 %149, i32 0, i1 %149, i32 0, i1 %149, i32 0, i1 %149) #3, !dbg !53
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %147, i1 %151, i32 0, i1 %151, i32 0, i1 %151, i32 0, i1 %151, i32 0, i1 %151) #3, !dbg !53
  %154 = add nsw <2 x i32> %50, splat (i32 -186), !dbg !54
  %155 = icmp ult <2 x i32> %154, splat (i32 12), !dbg !54
  %156 = add nsw i32 %39, -47616, !dbg !55
  %157 = add nsw i32 %156, %112, !dbg !56
  %158 = add nsw i32 %41, -47616, !dbg !55
  %159 = add nsw i32 %158, %113, !dbg !56
  %160 = sext i32 %157 to i64, !dbg !57
  %161 = getelementptr float, ptr addrspace(1) %4, i64 %160, !dbg !57
  %162 = sext i32 %159 to i64, !dbg !57
  %163 = getelementptr float, ptr addrspace(1) %4, i64 %162, !dbg !57
  %164 = extractelement <2 x i1> %155, i64 1, !dbg !58
  %165 = and i1 %22, %164, !dbg !58
  %166 = extractelement <2 x i1> %155, i64 0, !dbg !58
  %167 = and i1 %23, %166, !dbg !58
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %161, i1 %165, i32 0, i1 %165, i32 0, i1 %165, i32 0, i1 %165, i32 0, i1 %165) #3, !dbg !59
  %169 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %163, i1 %167, i32 0, i1 %167, i32 0, i1 %167, i32 0, i1 %167, i32 0, i1 %167) #3, !dbg !59
  %170 = add nsw i32 %51, -198, !dbg !60
  %171 = icmp ult i32 %170, 12, !dbg !60
  %172 = add nsw i32 %54, -198, !dbg !60
  %173 = icmp ult i32 %172, 12, !dbg !60
  %174 = add nsw i32 %39, -50688, !dbg !61
  %175 = add nsw i32 %174, %112, !dbg !62
  %176 = add nsw i32 %41, -50688, !dbg !61
  %177 = add nsw i32 %176, %113, !dbg !62
  %178 = sext i32 %175 to i64, !dbg !63
  %179 = getelementptr float, ptr addrspace(1) %5, i64 %178, !dbg !63
  %180 = sext i32 %177 to i64, !dbg !63
  %181 = getelementptr float, ptr addrspace(1) %5, i64 %180, !dbg !63
  %182 = and i1 %22, %171, !dbg !64
  %183 = and i1 %23, %173, !dbg !64
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %179, i1 %182, i32 0, i1 %182, i32 0, i1 %182, i32 0, i1 %182, i32 0, i1 %182) #3, !dbg !65
  %185 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %181, i1 %183, i32 0, i1 %183, i32 0, i1 %183, i32 0, i1 %183, i32 0, i1 %183) #3, !dbg !65
  %186 = icmp sgt i32 %51, 209, !dbg !66
  %187 = icmp sgt i32 %54, 209, !dbg !66
  %188 = add nsw i32 %39, -53760, !dbg !67
  %189 = add nsw i32 %188, %112, !dbg !68
  %190 = add nsw i32 %41, -53760, !dbg !67
  %191 = add nsw i32 %190, %113, !dbg !68
  %192 = sext i32 %189 to i64, !dbg !69
  %193 = getelementptr float, ptr addrspace(1) %6, i64 %192, !dbg !69
  %194 = sext i32 %191 to i64, !dbg !69
  %195 = getelementptr float, ptr addrspace(1) %6, i64 %194, !dbg !69
  %196 = and i1 %22, %186, !dbg !70
  %197 = and i1 %23, %187, !dbg !70
  %198 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %193, i1 %196, i32 0, i1 %196, i32 0, i1 %196, i32 0, i1 %196, i32 0, i1 %196) #3, !dbg !71
  %199 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %195, i1 %197, i32 0, i1 %197, i32 0, i1 %197, i32 0, i1 %197, i32 0, i1 %197) #3, !dbg !71
  %200 = fadd float %68, 0x3EE4F8B580000000, !dbg !72
  %201 = fadd float %70, 0x3EE4F8B580000000, !dbg !72
  %202 = fadd float %72, 0x3EE4F8B580000000, !dbg !72
  %203 = fadd float %74, 0x3EE4F8B580000000, !dbg !72
  %204 = fadd float %76, 0x3EE4F8B580000000, !dbg !72
  %205 = fadd float %78, 0x3EE4F8B580000000, !dbg !72
  %206 = fadd float %80, 0x3EE4F8B580000000, !dbg !72
  %207 = fadd float %82, 0x3EE4F8B580000000, !dbg !72
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !73
  %.not.i = icmp eq i32 %208, 0, !dbg !73
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !73
  %.not1.i = icmp eq i32 %209, 0, !dbg !73
  br i1 %.not.i, label %215, label %210, !dbg !73

210:                                              ; preds = %14
  br i1 %.not1.i, label %213, label %211, !dbg !73

211:                                              ; preds = %210
  %212 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %200) #3, !dbg !73
  br label %__nv_sqrtf.exit, !dbg !73

213:                                              ; preds = %210
  %214 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %200) #3, !dbg !73
  br label %__nv_sqrtf.exit, !dbg !73

215:                                              ; preds = %14
  br i1 %.not1.i, label %218, label %216, !dbg !73

216:                                              ; preds = %215
  %217 = tail call float @llvm.nvvm.sqrt.rn.f(float %200) #3, !dbg !73
  br label %__nv_sqrtf.exit, !dbg !73

218:                                              ; preds = %215
  %219 = tail call float @llvm.nvvm.sqrt.approx.f(float %200) #3, !dbg !73
  br label %__nv_sqrtf.exit, !dbg !73

__nv_sqrtf.exit:                                  ; preds = %211, %213, %216, %218
  %.0.i = phi float [ %212, %211 ], [ %214, %213 ], [ %217, %216 ], [ %219, %218 ], !dbg !73
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !73
  %.not.i49 = icmp eq i32 %220, 0, !dbg !73
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !73
  %.not1.i52 = icmp eq i32 %221, 0, !dbg !73
  br i1 %.not.i49, label %227, label %222, !dbg !73

222:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i52, label %225, label %223, !dbg !73

223:                                              ; preds = %222
  %224 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %201) #3, !dbg !73
  br label %__nv_sqrtf.exit53, !dbg !73

225:                                              ; preds = %222
  %226 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %201) #3, !dbg !73
  br label %__nv_sqrtf.exit53, !dbg !73

227:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i52, label %230, label %228, !dbg !73

228:                                              ; preds = %227
  %229 = tail call float @llvm.nvvm.sqrt.rn.f(float %201) #3, !dbg !73
  br label %__nv_sqrtf.exit53, !dbg !73

230:                                              ; preds = %227
  %231 = tail call float @llvm.nvvm.sqrt.approx.f(float %201) #3, !dbg !73
  br label %__nv_sqrtf.exit53, !dbg !73

__nv_sqrtf.exit53:                                ; preds = %223, %225, %228, %230
  %.0.i51 = phi float [ %224, %223 ], [ %226, %225 ], [ %229, %228 ], [ %231, %230 ], !dbg !73
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !73
  %.not.i54 = icmp eq i32 %232, 0, !dbg !73
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !73
  %.not1.i57 = icmp eq i32 %233, 0, !dbg !73
  br i1 %.not.i54, label %239, label %234, !dbg !73

234:                                              ; preds = %__nv_sqrtf.exit53
  br i1 %.not1.i57, label %237, label %235, !dbg !73

235:                                              ; preds = %234
  %236 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %202) #3, !dbg !73
  br label %__nv_sqrtf.exit58, !dbg !73

237:                                              ; preds = %234
  %238 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %202) #3, !dbg !73
  br label %__nv_sqrtf.exit58, !dbg !73

239:                                              ; preds = %__nv_sqrtf.exit53
  br i1 %.not1.i57, label %242, label %240, !dbg !73

240:                                              ; preds = %239
  %241 = tail call float @llvm.nvvm.sqrt.rn.f(float %202) #3, !dbg !73
  br label %__nv_sqrtf.exit58, !dbg !73

242:                                              ; preds = %239
  %243 = tail call float @llvm.nvvm.sqrt.approx.f(float %202) #3, !dbg !73
  br label %__nv_sqrtf.exit58, !dbg !73

__nv_sqrtf.exit58:                                ; preds = %235, %237, %240, %242
  %.0.i56 = phi float [ %236, %235 ], [ %238, %237 ], [ %241, %240 ], [ %243, %242 ], !dbg !73
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !73
  %.not.i59 = icmp eq i32 %244, 0, !dbg !73
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !73
  %.not1.i62 = icmp eq i32 %245, 0, !dbg !73
  br i1 %.not.i59, label %251, label %246, !dbg !73

246:                                              ; preds = %__nv_sqrtf.exit58
  br i1 %.not1.i62, label %249, label %247, !dbg !73

247:                                              ; preds = %246
  %248 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %203) #3, !dbg !73
  br label %__nv_sqrtf.exit63, !dbg !73

249:                                              ; preds = %246
  %250 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %203) #3, !dbg !73
  br label %__nv_sqrtf.exit63, !dbg !73

251:                                              ; preds = %__nv_sqrtf.exit58
  br i1 %.not1.i62, label %254, label %252, !dbg !73

252:                                              ; preds = %251
  %253 = tail call float @llvm.nvvm.sqrt.rn.f(float %203) #3, !dbg !73
  br label %__nv_sqrtf.exit63, !dbg !73

254:                                              ; preds = %251
  %255 = tail call float @llvm.nvvm.sqrt.approx.f(float %203) #3, !dbg !73
  br label %__nv_sqrtf.exit63, !dbg !73

__nv_sqrtf.exit63:                                ; preds = %247, %249, %252, %254
  %.0.i61 = phi float [ %248, %247 ], [ %250, %249 ], [ %253, %252 ], [ %255, %254 ], !dbg !73
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !73
  %.not.i64 = icmp eq i32 %256, 0, !dbg !73
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !73
  %.not1.i67 = icmp eq i32 %257, 0, !dbg !73
  br i1 %.not.i64, label %263, label %258, !dbg !73

258:                                              ; preds = %__nv_sqrtf.exit63
  br i1 %.not1.i67, label %261, label %259, !dbg !73

259:                                              ; preds = %258
  %260 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %204) #3, !dbg !73
  br label %__nv_sqrtf.exit68, !dbg !73

261:                                              ; preds = %258
  %262 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %204) #3, !dbg !73
  br label %__nv_sqrtf.exit68, !dbg !73

263:                                              ; preds = %__nv_sqrtf.exit63
  br i1 %.not1.i67, label %266, label %264, !dbg !73

264:                                              ; preds = %263
  %265 = tail call float @llvm.nvvm.sqrt.rn.f(float %204) #3, !dbg !73
  br label %__nv_sqrtf.exit68, !dbg !73

266:                                              ; preds = %263
  %267 = tail call float @llvm.nvvm.sqrt.approx.f(float %204) #3, !dbg !73
  br label %__nv_sqrtf.exit68, !dbg !73

__nv_sqrtf.exit68:                                ; preds = %259, %261, %264, %266
  %.0.i66 = phi float [ %260, %259 ], [ %262, %261 ], [ %265, %264 ], [ %267, %266 ], !dbg !73
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !73
  %.not.i69 = icmp eq i32 %268, 0, !dbg !73
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !73
  %.not1.i72 = icmp eq i32 %269, 0, !dbg !73
  br i1 %.not.i69, label %275, label %270, !dbg !73

270:                                              ; preds = %__nv_sqrtf.exit68
  br i1 %.not1.i72, label %273, label %271, !dbg !73

271:                                              ; preds = %270
  %272 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %205) #3, !dbg !73
  br label %__nv_sqrtf.exit73, !dbg !73

273:                                              ; preds = %270
  %274 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %205) #3, !dbg !73
  br label %__nv_sqrtf.exit73, !dbg !73

275:                                              ; preds = %__nv_sqrtf.exit68
  br i1 %.not1.i72, label %278, label %276, !dbg !73

276:                                              ; preds = %275
  %277 = tail call float @llvm.nvvm.sqrt.rn.f(float %205) #3, !dbg !73
  br label %__nv_sqrtf.exit73, !dbg !73

278:                                              ; preds = %275
  %279 = tail call float @llvm.nvvm.sqrt.approx.f(float %205) #3, !dbg !73
  br label %__nv_sqrtf.exit73, !dbg !73

__nv_sqrtf.exit73:                                ; preds = %271, %273, %276, %278
  %.0.i71 = phi float [ %272, %271 ], [ %274, %273 ], [ %277, %276 ], [ %279, %278 ], !dbg !73
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !73
  %.not.i74 = icmp eq i32 %280, 0, !dbg !73
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !73
  %.not1.i77 = icmp eq i32 %281, 0, !dbg !73
  br i1 %.not.i74, label %287, label %282, !dbg !73

282:                                              ; preds = %__nv_sqrtf.exit73
  br i1 %.not1.i77, label %285, label %283, !dbg !73

283:                                              ; preds = %282
  %284 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %206) #3, !dbg !73
  br label %__nv_sqrtf.exit78, !dbg !73

285:                                              ; preds = %282
  %286 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %206) #3, !dbg !73
  br label %__nv_sqrtf.exit78, !dbg !73

287:                                              ; preds = %__nv_sqrtf.exit73
  br i1 %.not1.i77, label %290, label %288, !dbg !73

288:                                              ; preds = %287
  %289 = tail call float @llvm.nvvm.sqrt.rn.f(float %206) #3, !dbg !73
  br label %__nv_sqrtf.exit78, !dbg !73

290:                                              ; preds = %287
  %291 = tail call float @llvm.nvvm.sqrt.approx.f(float %206) #3, !dbg !73
  br label %__nv_sqrtf.exit78, !dbg !73

__nv_sqrtf.exit78:                                ; preds = %283, %285, %288, %290
  %.0.i76 = phi float [ %284, %283 ], [ %286, %285 ], [ %289, %288 ], [ %291, %290 ], !dbg !73
  %292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !73
  %.not.i79 = icmp eq i32 %292, 0, !dbg !73
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !73
  %.not1.i82 = icmp eq i32 %293, 0, !dbg !73
  br i1 %.not.i79, label %299, label %294, !dbg !73

294:                                              ; preds = %__nv_sqrtf.exit78
  br i1 %.not1.i82, label %297, label %295, !dbg !73

295:                                              ; preds = %294
  %296 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %207) #3, !dbg !73
  br label %__nv_sqrtf.exit83, !dbg !73

297:                                              ; preds = %294
  %298 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %207) #3, !dbg !73
  br label %__nv_sqrtf.exit83, !dbg !73

299:                                              ; preds = %__nv_sqrtf.exit78
  br i1 %.not1.i82, label %302, label %300, !dbg !73

300:                                              ; preds = %299
  %301 = tail call float @llvm.nvvm.sqrt.rn.f(float %207) #3, !dbg !73
  br label %__nv_sqrtf.exit83, !dbg !73

302:                                              ; preds = %299
  %303 = tail call float @llvm.nvvm.sqrt.approx.f(float %207) #3, !dbg !73
  br label %__nv_sqrtf.exit83, !dbg !73

__nv_sqrtf.exit83:                                ; preds = %295, %297, %300, %302
  %.0.i81 = phi float [ %296, %295 ], [ %298, %297 ], [ %301, %300 ], [ %303, %302 ], !dbg !73
  %304 = shufflevector <2 x i1> %155, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !54
  %305 = shufflevector <2 x i1> %141, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !49
  %306 = shufflevector <2 x i1> %127, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !44
  %307 = shufflevector <2 x i1> %111, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !39
  %308 = shufflevector <2 x i1> %103, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !36
  %309 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !38
  %310 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !43
  %311 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !48
  %312 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !53
  %313 = extractvalue { i32, i32, i32, i32 } %169, 3, !dbg !59
  %314 = extractvalue { i32, i32, i32, i32 } %185, 3, !dbg !65
  %315 = extractvalue { i32, i32, i32, i32 } %199, 3, !dbg !71
  %316 = insertelement <8 x i32> poison, i32 %64, i64 0, !dbg !29
  %317 = insertelement <8 x i32> %316, i32 %63, i64 1, !dbg !29
  %318 = insertelement <8 x i32> %317, i32 %62, i64 2, !dbg !29
  %319 = insertelement <8 x i32> %318, i32 %61, i64 3, !dbg !29
  %320 = insertelement <8 x i32> %319, i32 %60, i64 4, !dbg !29
  %321 = insertelement <8 x i32> %320, i32 %59, i64 5, !dbg !29
  %322 = insertelement <8 x i32> %321, i32 %58, i64 6, !dbg !29
  %323 = insertelement <8 x i32> %322, i32 %57, i64 7, !dbg !29
  %324 = bitcast <8 x i32> %323 to <8 x float>, !dbg !29
  %325 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !38
  %326 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !43
  %327 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !48
  %328 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !53
  %329 = extractvalue { i32, i32, i32, i32 } %169, 2, !dbg !59
  %330 = extractvalue { i32, i32, i32, i32 } %185, 2, !dbg !65
  %331 = extractvalue { i32, i32, i32, i32 } %199, 2, !dbg !71
  %332 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !38
  %333 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !43
  %334 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !48
  %335 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !53
  %336 = extractvalue { i32, i32, i32, i32 } %169, 1, !dbg !59
  %337 = extractvalue { i32, i32, i32, i32 } %185, 1, !dbg !65
  %338 = extractvalue { i32, i32, i32, i32 } %199, 1, !dbg !71
  %339 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !38
  %340 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !43
  %341 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !48
  %342 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !53
  %343 = extractvalue { i32, i32, i32, i32 } %169, 0, !dbg !59
  %344 = extractvalue { i32, i32, i32, i32 } %185, 0, !dbg !65
  %345 = extractvalue { i32, i32, i32, i32 } %199, 0, !dbg !71
  %346 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !38
  %347 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !43
  %348 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !48
  %349 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !53
  %350 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !59
  %351 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !65
  %352 = extractvalue { i32, i32, i32, i32 } %198, 3, !dbg !71
  %353 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !38
  %354 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !43
  %355 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !48
  %356 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !53
  %357 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !59
  %358 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !65
  %359 = extractvalue { i32, i32, i32, i32 } %198, 2, !dbg !71
  %360 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !38
  %361 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !43
  %362 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !48
  %363 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !53
  %364 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !59
  %365 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !65
  %366 = extractvalue { i32, i32, i32, i32 } %198, 1, !dbg !71
  %367 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !38
  %368 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !43
  %369 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !48
  %370 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !53
  %371 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !59
  %372 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !65
  %373 = extractvalue { i32, i32, i32, i32 } %198, 0, !dbg !71
  %374 = insertelement <8 x i32> poison, i32 %102, i64 0, !dbg !35
  %375 = insertelement <8 x i32> %374, i32 %101, i64 1, !dbg !35
  %376 = insertelement <8 x i32> %375, i32 %100, i64 2, !dbg !35
  %377 = insertelement <8 x i32> %376, i32 %99, i64 3, !dbg !35
  %378 = insertelement <8 x i32> %377, i32 %98, i64 4, !dbg !35
  %379 = insertelement <8 x i32> %378, i32 %97, i64 5, !dbg !35
  %380 = insertelement <8 x i32> %379, i32 %96, i64 6, !dbg !35
  %381 = insertelement <8 x i32> %380, i32 %95, i64 7, !dbg !35
  %382 = bitcast <8 x i32> %381 to <8 x float>, !dbg !35
  %383 = insertelement <8 x i32> poison, i32 %92, i64 0, !dbg !33
  %384 = insertelement <8 x i32> %383, i32 %91, i64 1, !dbg !33
  %385 = insertelement <8 x i32> %384, i32 %90, i64 2, !dbg !33
  %386 = insertelement <8 x i32> %385, i32 %89, i64 3, !dbg !33
  %387 = insertelement <8 x i32> %386, i32 %88, i64 4, !dbg !33
  %388 = insertelement <8 x i32> %387, i32 %87, i64 5, !dbg !33
  %389 = insertelement <8 x i32> %388, i32 %86, i64 6, !dbg !33
  %390 = insertelement <8 x i32> %389, i32 %85, i64 7, !dbg !33
  %391 = bitcast <8 x i32> %390 to <8 x float>, !dbg !33
  %392 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !74
  %393 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i51) #3, !dbg !74
  %394 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i56) #3, !dbg !74
  %395 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i61) #3, !dbg !74
  %396 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i66) #3, !dbg !74
  %397 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i71) #3, !dbg !74
  %398 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i76) #3, !dbg !74
  %399 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i81) #3, !dbg !74
  %400 = insertelement <8 x i1> poison, i1 %173, i64 0, !dbg !75
  %401 = insertelement <8 x i1> %400, i1 %171, i64 1, !dbg !75
  %402 = shufflevector <8 x i1> %401, <8 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !75
  %403 = insertelement <8 x i32> poison, i32 %314, i64 0, !dbg !75
  %404 = insertelement <8 x i32> %403, i32 %330, i64 1, !dbg !75
  %405 = insertelement <8 x i32> %404, i32 %337, i64 2, !dbg !75
  %406 = insertelement <8 x i32> %405, i32 %344, i64 3, !dbg !75
  %407 = insertelement <8 x i32> %406, i32 %351, i64 4, !dbg !75
  %408 = insertelement <8 x i32> %407, i32 %358, i64 5, !dbg !75
  %409 = insertelement <8 x i32> %408, i32 %365, i64 6, !dbg !75
  %410 = insertelement <8 x i32> %409, i32 %372, i64 7, !dbg !75
  %411 = insertelement <8 x i32> poison, i32 %315, i64 0, !dbg !75
  %412 = insertelement <8 x i32> %411, i32 %331, i64 1, !dbg !75
  %413 = insertelement <8 x i32> %412, i32 %338, i64 2, !dbg !75
  %414 = insertelement <8 x i32> %413, i32 %345, i64 3, !dbg !75
  %415 = insertelement <8 x i32> %414, i32 %352, i64 4, !dbg !75
  %416 = insertelement <8 x i32> %415, i32 %359, i64 5, !dbg !75
  %417 = insertelement <8 x i32> %416, i32 %366, i64 6, !dbg !75
  %418 = insertelement <8 x i32> %417, i32 %373, i64 7, !dbg !75
  %419 = select <8 x i1> %402, <8 x i32> %410, <8 x i32> %418, !dbg !75
  %420 = insertelement <8 x i32> poison, i32 %313, i64 0, !dbg !76
  %421 = insertelement <8 x i32> %420, i32 %329, i64 1, !dbg !76
  %422 = insertelement <8 x i32> %421, i32 %336, i64 2, !dbg !76
  %423 = insertelement <8 x i32> %422, i32 %343, i64 3, !dbg !76
  %424 = insertelement <8 x i32> %423, i32 %350, i64 4, !dbg !76
  %425 = insertelement <8 x i32> %424, i32 %357, i64 5, !dbg !76
  %426 = insertelement <8 x i32> %425, i32 %364, i64 6, !dbg !76
  %427 = insertelement <8 x i32> %426, i32 %371, i64 7, !dbg !76
  %428 = select <8 x i1> %304, <8 x i32> %427, <8 x i32> %419, !dbg !76
  %429 = insertelement <8 x i32> poison, i32 %312, i64 0, !dbg !77
  %430 = insertelement <8 x i32> %429, i32 %328, i64 1, !dbg !77
  %431 = insertelement <8 x i32> %430, i32 %335, i64 2, !dbg !77
  %432 = insertelement <8 x i32> %431, i32 %342, i64 3, !dbg !77
  %433 = insertelement <8 x i32> %432, i32 %349, i64 4, !dbg !77
  %434 = insertelement <8 x i32> %433, i32 %356, i64 5, !dbg !77
  %435 = insertelement <8 x i32> %434, i32 %363, i64 6, !dbg !77
  %436 = insertelement <8 x i32> %435, i32 %370, i64 7, !dbg !77
  %437 = select <8 x i1> %305, <8 x i32> %436, <8 x i32> %428, !dbg !77
  %438 = insertelement <8 x i32> poison, i32 %311, i64 0, !dbg !78
  %439 = insertelement <8 x i32> %438, i32 %327, i64 1, !dbg !78
  %440 = insertelement <8 x i32> %439, i32 %334, i64 2, !dbg !78
  %441 = insertelement <8 x i32> %440, i32 %341, i64 3, !dbg !78
  %442 = insertelement <8 x i32> %441, i32 %348, i64 4, !dbg !78
  %443 = insertelement <8 x i32> %442, i32 %355, i64 5, !dbg !78
  %444 = insertelement <8 x i32> %443, i32 %362, i64 6, !dbg !78
  %445 = insertelement <8 x i32> %444, i32 %369, i64 7, !dbg !78
  %446 = select <8 x i1> %306, <8 x i32> %445, <8 x i32> %437, !dbg !78
  %447 = insertelement <8 x i32> poison, i32 %310, i64 0, !dbg !79
  %448 = insertelement <8 x i32> %447, i32 %326, i64 1, !dbg !79
  %449 = insertelement <8 x i32> %448, i32 %333, i64 2, !dbg !79
  %450 = insertelement <8 x i32> %449, i32 %340, i64 3, !dbg !79
  %451 = insertelement <8 x i32> %450, i32 %347, i64 4, !dbg !79
  %452 = insertelement <8 x i32> %451, i32 %354, i64 5, !dbg !79
  %453 = insertelement <8 x i32> %452, i32 %361, i64 6, !dbg !79
  %454 = insertelement <8 x i32> %453, i32 %368, i64 7, !dbg !79
  %455 = select <8 x i1> %307, <8 x i32> %454, <8 x i32> %446, !dbg !79
  %456 = insertelement <8 x i32> poison, i32 %309, i64 0, !dbg !80
  %457 = insertelement <8 x i32> %456, i32 %325, i64 1, !dbg !80
  %458 = insertelement <8 x i32> %457, i32 %332, i64 2, !dbg !80
  %459 = insertelement <8 x i32> %458, i32 %339, i64 3, !dbg !80
  %460 = insertelement <8 x i32> %459, i32 %346, i64 4, !dbg !80
  %461 = insertelement <8 x i32> %460, i32 %353, i64 5, !dbg !80
  %462 = insertelement <8 x i32> %461, i32 %360, i64 6, !dbg !80
  %463 = insertelement <8 x i32> %462, i32 %367, i64 7, !dbg !80
  %464 = select <8 x i1> %308, <8 x i32> %463, <8 x i32> %455, !dbg !80
  %465 = bitcast <8 x i32> %464 to <8 x float>, !dbg !80
  %466 = fsub <8 x float> %465, %324, !dbg !81
  %467 = insertelement <8 x float> poison, float %399, i64 0, !dbg !82
  %468 = insertelement <8 x float> %467, float %398, i64 1, !dbg !82
  %469 = insertelement <8 x float> %468, float %397, i64 2, !dbg !82
  %470 = insertelement <8 x float> %469, float %396, i64 3, !dbg !82
  %471 = insertelement <8 x float> %470, float %395, i64 4, !dbg !82
  %472 = insertelement <8 x float> %471, float %394, i64 5, !dbg !82
  %473 = insertelement <8 x float> %472, float %393, i64 6, !dbg !82
  %474 = insertelement <8 x float> %473, float %392, i64 7, !dbg !82
  %475 = fmul <8 x float> %466, %474, !dbg !82
  %476 = fmul <8 x float> %475, %391, !dbg !83
  %477 = fadd <8 x float> %476, %382, !dbg !84
  %478 = fcmp olt <8 x float> %477, zeroinitializer, !dbg !85
  %479 = extractelement <8 x i1> %478, i64 7, !dbg !89
  %480 = extractelement <8 x i1> %478, i64 6, !dbg !89
  %481 = extractelement <8 x i1> %478, i64 5, !dbg !89
  %482 = extractelement <8 x i1> %478, i64 4, !dbg !89
  %483 = extractelement <8 x i1> %478, i64 3, !dbg !89
  %484 = extractelement <8 x i1> %478, i64 2, !dbg !89
  %485 = extractelement <8 x i1> %478, i64 1, !dbg !89
  %486 = extractelement <8 x i1> %478, i64 0, !dbg !89
  %487 = sext i32 %20 to i64, !dbg !90
  %488 = getelementptr float, ptr addrspace(1) %11, i64 %487, !dbg !90
  %489 = sext i32 %21 to i64, !dbg !90
  %490 = getelementptr float, ptr addrspace(1) %11, i64 %489, !dbg !90
  %491 = extractelement <8 x i32> %464, i64 4, !dbg !91
  %492 = extractelement <8 x i32> %464, i64 5, !dbg !91
  %493 = extractelement <8 x i32> %464, i64 6, !dbg !91
  %494 = extractelement <8 x i32> %464, i64 7, !dbg !91
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %494, i32 %493, i32 %492, i32 %491, ptr addrspace(1) %488, i1 %22) #3, !dbg !91
  %495 = extractelement <8 x i32> %464, i64 0, !dbg !91
  %496 = extractelement <8 x i32> %464, i64 1, !dbg !91
  %497 = extractelement <8 x i32> %464, i64 2, !dbg !91
  %498 = extractelement <8 x i32> %464, i64 3, !dbg !91
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %498, i32 %497, i32 %496, i32 %495, ptr addrspace(1) %490, i1 %23) #3, !dbg !91
  %499 = getelementptr float, ptr addrspace(1) %12, i64 %487, !dbg !92
  %500 = getelementptr float, ptr addrspace(1) %12, i64 %489, !dbg !92
  %bc = bitcast <8 x float> %477 to <8 x i32>, !dbg !93
  %501 = extractelement <8 x i32> %bc, i64 7, !dbg !93
  %502 = select i1 %479, i32 0, i32 %501, !dbg !89
  %bc84 = bitcast <8 x float> %477 to <8 x i32>, !dbg !93
  %503 = extractelement <8 x i32> %bc84, i64 6, !dbg !93
  %504 = select i1 %480, i32 0, i32 %503, !dbg !89
  %bc85 = bitcast <8 x float> %477 to <8 x i32>, !dbg !93
  %505 = extractelement <8 x i32> %bc85, i64 5, !dbg !93
  %506 = select i1 %481, i32 0, i32 %505, !dbg !89
  %bc86 = bitcast <8 x float> %477 to <8 x i32>, !dbg !93
  %507 = extractelement <8 x i32> %bc86, i64 4, !dbg !93
  %508 = select i1 %482, i32 0, i32 %507, !dbg !89
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %502, i32 %504, i32 %506, i32 %508, ptr addrspace(1) %499, i1 %22) #3, !dbg !93
  %bc87 = bitcast <8 x float> %477 to <8 x i32>, !dbg !93
  %509 = extractelement <8 x i32> %bc87, i64 3, !dbg !93
  %510 = select i1 %483, i32 0, i32 %509, !dbg !89
  %bc88 = bitcast <8 x float> %477 to <8 x i32>, !dbg !93
  %511 = extractelement <8 x i32> %bc88, i64 2, !dbg !93
  %512 = select i1 %484, i32 0, i32 %511, !dbg !89
  %bc89 = bitcast <8 x float> %477 to <8 x i32>, !dbg !93
  %513 = extractelement <8 x i32> %bc89, i64 1, !dbg !93
  %514 = select i1 %485, i32 0, i32 %513, !dbg !89
  %bc90 = bitcast <8 x float> %477 to <8 x i32>, !dbg !93
  %515 = extractelement <8 x i32> %bc90, i64 0, !dbg !93
  %516 = select i1 %486, i32 0, i32 %515, !dbg !89
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %510, i32 %512, i32 %514, i32 %516, ptr addrspace(1) %500, i1 %23) #3, !dbg !93
  ret void, !dbg !94
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "celpptthg6ez27wc3oycnreqokr5h7eoknnr2k6bh6odpromn3nq.py", directory: "inductor_cache/el")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_63, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_63, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_63", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_63", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 37, column: 35, scope: !7)
!18 = !DILocation(line: 37, column: 52, scope: !7)
!19 = !DILocation(line: 37, column: 46, scope: !7)
!20 = !DILocation(line: 37, column: 30, scope: !7)
!21 = !DILocation(line: 42, column: 61, scope: !7)
!22 = !DILocation(line: 42, column: 41, scope: !7)
!23 = !DILocation(line: 42, column: 36, scope: !7)
!24 = !DILocation(line: 47, column: 36, scope: !7)
!25 = !DILocation(line: 52, column: 36, scope: !7)
!26 = !DILocation(line: 24, column: 21, scope: !7)
!27 = !DILocation(line: 24, column: 28, scope: !7)
!28 = !DILocation(line: 28, column: 31, scope: !7)
!29 = !DILocation(line: 28, column: 36, scope: !7)
!30 = !DILocation(line: 29, column: 31, scope: !7)
!31 = !DILocation(line: 29, column: 36, scope: !7)
!32 = !DILocation(line: 30, column: 31, scope: !7)
!33 = !DILocation(line: 30, column: 36, scope: !7)
!34 = !DILocation(line: 31, column: 32, scope: !7)
!35 = !DILocation(line: 31, column: 37, scope: !7)
!36 = !DILocation(line: 36, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 64, scope: !7)
!38 = !DILocation(line: 37, column: 57, scope: !7)
!39 = !DILocation(line: 41, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 56, scope: !7)
!41 = !DILocation(line: 42, column: 31, scope: !7)
!42 = !DILocation(line: 42, column: 73, scope: !7)
!43 = !DILocation(line: 42, column: 66, scope: !7)
!44 = !DILocation(line: 46, column: 20, scope: !7)
!45 = !DILocation(line: 47, column: 56, scope: !7)
!46 = !DILocation(line: 47, column: 31, scope: !7)
!47 = !DILocation(line: 47, column: 74, scope: !7)
!48 = !DILocation(line: 47, column: 66, scope: !7)
!49 = !DILocation(line: 51, column: 20, scope: !7)
!50 = !DILocation(line: 52, column: 56, scope: !7)
!51 = !DILocation(line: 52, column: 31, scope: !7)
!52 = !DILocation(line: 52, column: 74, scope: !7)
!53 = !DILocation(line: 52, column: 66, scope: !7)
!54 = !DILocation(line: 56, column: 20, scope: !7)
!55 = !DILocation(line: 57, column: 36, scope: !7)
!56 = !DILocation(line: 57, column: 56, scope: !7)
!57 = !DILocation(line: 57, column: 31, scope: !7)
!58 = !DILocation(line: 57, column: 74, scope: !7)
!59 = !DILocation(line: 57, column: 66, scope: !7)
!60 = !DILocation(line: 61, column: 20, scope: !7)
!61 = !DILocation(line: 62, column: 36, scope: !7)
!62 = !DILocation(line: 62, column: 56, scope: !7)
!63 = !DILocation(line: 62, column: 31, scope: !7)
!64 = !DILocation(line: 62, column: 74, scope: !7)
!65 = !DILocation(line: 62, column: 66, scope: !7)
!66 = !DILocation(line: 63, column: 20, scope: !7)
!67 = !DILocation(line: 66, column: 36, scope: !7)
!68 = !DILocation(line: 66, column: 56, scope: !7)
!69 = !DILocation(line: 66, column: 31, scope: !7)
!70 = !DILocation(line: 66, column: 74, scope: !7)
!71 = !DILocation(line: 66, column: 66, scope: !7)
!72 = !DILocation(line: 75, column: 20, scope: !7)
!73 = !DILocation(line: 76, column: 27, scope: !7)
!74 = !DILocation(line: 78, column: 20, scope: !7)
!75 = !DILocation(line: 67, column: 35, scope: !7)
!76 = !DILocation(line: 68, column: 35, scope: !7)
!77 = !DILocation(line: 69, column: 35, scope: !7)
!78 = !DILocation(line: 70, column: 35, scope: !7)
!79 = !DILocation(line: 71, column: 34, scope: !7)
!80 = !DILocation(line: 72, column: 33, scope: !7)
!81 = !DILocation(line: 73, column: 20, scope: !7)
!82 = !DILocation(line: 81, column: 20, scope: !7)
!83 = !DILocation(line: 82, column: 20, scope: !7)
!84 = !DILocation(line: 83, column: 20, scope: !7)
!85 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !88)
!86 = distinct !DILexicalBlockFile(scope: !7, file: !87, discriminator: 0)
!87 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!88 = !DILocation(line: 85, column: 42, scope: !7)
!89 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !88)
!90 = !DILocation(line: 86, column: 25, scope: !7)
!91 = !DILocation(line: 86, column: 37, scope: !7)
!92 = !DILocation(line: 87, column: 25, scope: !7)
!93 = !DILocation(line: 87, column: 37, scope: !7)
!94 = !DILocation(line: 87, column: 4, scope: !7)
