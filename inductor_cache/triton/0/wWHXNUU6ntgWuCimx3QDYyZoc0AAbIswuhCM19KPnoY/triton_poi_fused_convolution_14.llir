; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 2, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 6, !dbg !12
  %.lobit = and i32 %9, 1, !dbg !12
  %10 = or disjoint i32 %7, %.lobit, !dbg !13
  %11 = or disjoint i32 %10, 2, !dbg !13
  %12 = icmp slt i32 %7, 1280, !dbg !14
  %13 = icmp slt i32 %10, 1280, !dbg !14
  %14 = icmp slt i32 %11, 1280, !dbg !14
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %16 = shl i32 %15, 8, !dbg !16
  %17 = and i32 %8, 127, !dbg !17
  %18 = or disjoint i32 %17, 128, !dbg !17
  %19 = shl i32 %8, 2, !dbg !17
  %20 = and i32 %19, 252, !dbg !17
  %21 = or disjoint i32 %16, %17, !dbg !18
  %22 = or disjoint i32 %16, %18, !dbg !18
  %23 = or disjoint i32 %16, %20, !dbg !18
  %24 = icmp slt i32 %21, 176, !dbg !19
  %25 = icmp slt i32 %22, 176, !dbg !19
  %26 = icmp slt i32 %23, 176, !dbg !19
  %.frozen = freeze i32 %7, !dbg !20
  %27 = sdiv i32 %.frozen, 320, !dbg !20
  %28 = mul i32 %27, 320, !dbg !21
  %.decomposed = sub i32 %.frozen, %28, !dbg !21
  %29 = mul i32 %21, 320, !dbg !22
  %30 = mul i32 %22, 320, !dbg !22
  %31 = mul i32 %27, 56320, !dbg !23
  %32 = add i32 %31, %.decomposed, !dbg !24
  %33 = add i32 %32, %29, !dbg !25
  %34 = add i32 %32, %30, !dbg !25
  %35 = sext i32 %33 to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !26
  %37 = sext i32 %34 to i64, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !26
  %39 = and i1 %12, %24, !dbg !27
  %40 = and i1 %12, %25, !dbg !27
  %41 = and i1 %13, %26, !dbg !27
  %42 = and i1 %14, %26, !dbg !27
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %39) #2, !dbg !28
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !28
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !28
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !28
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !28
  %48 = bitcast i32 %44 to float, !dbg !28
  %49 = bitcast i32 %45 to float, !dbg !28
  %50 = bitcast i32 %46 to float, !dbg !28
  %51 = bitcast i32 %47 to float, !dbg !28
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %40) #2, !dbg !28
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !28
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !28
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !28
  %57 = bitcast i32 %53 to float, !dbg !28
  %58 = bitcast i32 %54 to float, !dbg !28
  %59 = bitcast i32 %55 to float, !dbg !28
  %60 = bitcast i32 %56 to float, !dbg !28
  %61 = sext i32 %.decomposed to i64, !dbg !29
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !29
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %12) #2, !dbg !30
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !30
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !30
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !30
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !30
  %68 = bitcast i32 %64 to float, !dbg !30
  %69 = bitcast i32 %65 to float, !dbg !30
  %70 = bitcast i32 %66 to float, !dbg !30
  %71 = bitcast i32 %67 to float, !dbg !30
  %72 = fadd float %48, %68, !dbg !31
  %73 = fadd float %49, %69, !dbg !31
  %74 = fadd float %50, %70, !dbg !31
  %75 = fadd float %51, %71, !dbg !31
  %76 = fadd float %57, %68, !dbg !31
  %77 = fadd float %58, %69, !dbg !31
  %78 = fadd float %59, %70, !dbg !31
  %79 = fadd float %60, %71, !dbg !31
  %80 = mul i32 %10, 176, !dbg !32
  %81 = mul i32 %11, 176, !dbg !32
  %82 = add i32 %23, %80, !dbg !33
  %83 = add i32 %23, %81, !dbg !33
  %84 = sext i32 %82 to i64, !dbg !34
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %84, !dbg !34
  %86 = sext i32 %83 to i64, !dbg !34
  %87 = getelementptr float, ptr addrspace(1) %2, i64 %86, !dbg !34
  %88 = and i32 %19, 508, !dbg !35
  %89 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !35
  %90 = bitcast float %72 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #2, !dbg !35
  %91 = getelementptr inbounds i8, ptr addrspace(3) %89, i32 1028, !dbg !35
  %92 = bitcast float %73 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 true) #2, !dbg !35
  %93 = getelementptr inbounds i8, ptr addrspace(3) %89, i32 2056, !dbg !35
  %94 = bitcast float %74 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #2, !dbg !35
  %95 = getelementptr inbounds i8, ptr addrspace(3) %89, i32 3084, !dbg !35
  %96 = bitcast float %75 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #2, !dbg !35
  %97 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !35
  %98 = bitcast float %76 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #2, !dbg !35
  %99 = getelementptr inbounds i8, ptr addrspace(3) %89, i32 1540, !dbg !35
  %100 = bitcast float %77 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %100, i1 true) #2, !dbg !35
  %101 = getelementptr inbounds i8, ptr addrspace(3) %89, i32 2568, !dbg !35
  %102 = bitcast float %78 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #2, !dbg !35
  %103 = getelementptr inbounds i8, ptr addrspace(3) %89, i32 3596, !dbg !35
  %104 = bitcast float %79 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %105 = lshr i32 %88, 8, !dbg !35
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !35
  %107 = getelementptr float, ptr addrspace(3) %106, i32 %88, !dbg !35
  %108 = load i32, ptr addrspace(3) %107, align 4, !dbg !35
  %109 = or disjoint i32 %88, 1, !dbg !35
  %110 = getelementptr float, ptr addrspace(3) %106, i32 %109, !dbg !35
  %111 = load i32, ptr addrspace(3) %110, align 4, !dbg !35
  %112 = or disjoint i32 %88, 2, !dbg !35
  %113 = getelementptr float, ptr addrspace(3) %106, i32 %112, !dbg !35
  %114 = load i32, ptr addrspace(3) %113, align 4, !dbg !35
  %115 = or disjoint i32 %88, 3, !dbg !35
  %116 = getelementptr float, ptr addrspace(3) %106, i32 %115, !dbg !35
  %117 = load i32, ptr addrspace(3) %116, align 4, !dbg !35
  %118 = or disjoint i32 %88, 512, !dbg !35
  %119 = lshr i32 %118, 8, !dbg !35
  %120 = getelementptr float, ptr addrspace(3) @global_smem, i32 %119, !dbg !35
  %121 = getelementptr float, ptr addrspace(3) %120, i32 %118, !dbg !35
  %122 = load i32, ptr addrspace(3) %121, align 4, !dbg !35
  %123 = or disjoint i32 %88, 513, !dbg !35
  %124 = lshr i32 %123, 8, !dbg !35
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i32 %124, !dbg !35
  %126 = getelementptr float, ptr addrspace(3) %125, i32 %123, !dbg !35
  %127 = load i32, ptr addrspace(3) %126, align 4, !dbg !35
  %128 = or disjoint i32 %88, 514, !dbg !35
  %129 = lshr i32 %128, 8, !dbg !35
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i32 %129, !dbg !35
  %131 = getelementptr float, ptr addrspace(3) %130, i32 %128, !dbg !35
  %132 = load i32, ptr addrspace(3) %131, align 4, !dbg !35
  %133 = or disjoint i32 %88, 515, !dbg !35
  %134 = lshr i32 %133, 8, !dbg !35
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i32 %134, !dbg !35
  %136 = getelementptr float, ptr addrspace(3) %135, i32 %133, !dbg !35
  %137 = load i32, ptr addrspace(3) %136, align 4, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %108, i32 %111, i32 %114, i32 %117, ptr addrspace(1) %85, i1 %41) #2, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %122, i32 %127, i32 %132, i32 %137, ptr addrspace(1) %87, i1 %42) #2, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckdfb3cuegt3p6mmo63qdvflwuhgmrfu37dvu2dzlbf6b2htv7pe.py", directory: "inductor_cache/kd")
!4 = !{ptr @triton_poi_fused_convolution_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_14", linkageName: "triton_poi_fused_convolution_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 50, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 63, scope: !7)
!28 = !DILocation(line: 32, column: 55, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 35, column: 34, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 25, scope: !7)
!35 = !DILocation(line: 35, column: 45, scope: !7)
!36 = !DILocation(line: 35, column: 4, scope: !7)
