; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_44(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 512, !dbg !13
  %14 = sext i32 %12 to i64, !dbg !14
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !14
  %16 = sext i32 %13 to i64, !dbg !14
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !14
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #1, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !15
  %23 = bitcast i32 %19 to float, !dbg !15
  %24 = bitcast i32 %20 to float, !dbg !15
  %25 = bitcast i32 %21 to float, !dbg !15
  %26 = bitcast i32 %22 to float, !dbg !15
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #1, !dbg !15
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !15
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !15
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !15
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !15
  %32 = bitcast i32 %28 to float, !dbg !15
  %33 = bitcast i32 %29 to float, !dbg !15
  %34 = bitcast i32 %30 to float, !dbg !15
  %35 = bitcast i32 %31 to float, !dbg !15
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !16
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !16
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !17
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !17
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !17
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !17
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !17
  %43 = bitcast i32 %39 to float, !dbg !17
  %44 = bitcast i32 %40 to float, !dbg !17
  %45 = bitcast i32 %41 to float, !dbg !17
  %46 = bitcast i32 %42 to float, !dbg !17
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !17
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !17
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !17
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !17
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !17
  %52 = bitcast i32 %48 to float, !dbg !17
  %53 = bitcast i32 %49 to float, !dbg !17
  %54 = bitcast i32 %50 to float, !dbg !17
  %55 = bitcast i32 %51 to float, !dbg !17
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !18
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !18
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !19
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !19
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !19
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !19
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !19
  %63 = bitcast i32 %59 to float, !dbg !19
  %64 = bitcast i32 %60 to float, !dbg !19
  %65 = bitcast i32 %61 to float, !dbg !19
  %66 = bitcast i32 %62 to float, !dbg !19
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !19
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !19
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !19
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !19
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !19
  %72 = bitcast i32 %68 to float, !dbg !19
  %73 = bitcast i32 %69 to float, !dbg !19
  %74 = bitcast i32 %70 to float, !dbg !19
  %75 = bitcast i32 %71 to float, !dbg !19
  %76 = getelementptr float, ptr addrspace(1) %3, i64 %14, !dbg !20
  %77 = getelementptr float, ptr addrspace(1) %3, i64 %16, !dbg !20
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 true) #1, !dbg !21
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !21
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !21
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !21
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !21
  %83 = bitcast i32 %79 to float, !dbg !21
  %84 = bitcast i32 %80 to float, !dbg !21
  %85 = bitcast i32 %81 to float, !dbg !21
  %86 = bitcast i32 %82 to float, !dbg !21
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 true) #1, !dbg !21
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !21
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !21
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !21
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !21
  %92 = bitcast i32 %88 to float, !dbg !21
  %93 = bitcast i32 %89 to float, !dbg !21
  %94 = bitcast i32 %90 to float, !dbg !21
  %95 = bitcast i32 %91 to float, !dbg !21
  %96 = getelementptr float, ptr addrspace(1) %4, i64 %14, !dbg !22
  %97 = getelementptr float, ptr addrspace(1) %4, i64 %16, !dbg !22
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !23
  %99 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !23
  %100 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !23
  %101 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !23
  %102 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !23
  %103 = bitcast i32 %99 to float, !dbg !23
  %104 = bitcast i32 %100 to float, !dbg !23
  %105 = bitcast i32 %101 to float, !dbg !23
  %106 = bitcast i32 %102 to float, !dbg !23
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %97, i1 true) #1, !dbg !23
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !23
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !23
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !23
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !23
  %112 = bitcast i32 %108 to float, !dbg !23
  %113 = bitcast i32 %109 to float, !dbg !23
  %114 = bitcast i32 %110 to float, !dbg !23
  %115 = bitcast i32 %111 to float, !dbg !23
  %116 = fadd float %83, %103, !dbg !24
  %117 = fadd float %84, %104, !dbg !24
  %118 = fadd float %85, %105, !dbg !24
  %119 = fadd float %86, %106, !dbg !24
  %120 = fadd float %92, %112, !dbg !24
  %121 = fadd float %93, %113, !dbg !24
  %122 = fadd float %94, %114, !dbg !24
  %123 = fadd float %95, %115, !dbg !24
  %124 = fadd float %116, %63, !dbg !25
  %125 = fadd float %117, %64, !dbg !25
  %126 = fadd float %118, %65, !dbg !25
  %127 = fadd float %119, %66, !dbg !25
  %128 = fadd float %120, %72, !dbg !25
  %129 = fadd float %121, %73, !dbg !25
  %130 = fadd float %122, %74, !dbg !25
  %131 = fadd float %123, %75, !dbg !25
  %132 = fadd float %124, %43, !dbg !26
  %133 = fadd float %125, %44, !dbg !26
  %134 = fadd float %126, %45, !dbg !26
  %135 = fadd float %127, %46, !dbg !26
  %136 = fadd float %128, %52, !dbg !26
  %137 = fadd float %129, %53, !dbg !26
  %138 = fadd float %130, %54, !dbg !26
  %139 = fadd float %131, %55, !dbg !26
  %140 = fadd float %132, %23, !dbg !27
  %141 = fadd float %133, %24, !dbg !27
  %142 = fadd float %134, %25, !dbg !27
  %143 = fadd float %135, %26, !dbg !27
  %144 = fadd float %136, %32, !dbg !27
  %145 = fadd float %137, %33, !dbg !27
  %146 = fadd float %138, %34, !dbg !27
  %147 = fadd float %139, %35, !dbg !27
  %148 = bitcast float %140 to i32, !dbg !28
  %149 = bitcast float %141 to i32, !dbg !28
  %150 = bitcast float %142 to i32, !dbg !28
  %151 = bitcast float %143 to i32, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %148, i32 %149, i32 %150, i32 %151, ptr addrspace(1) %15, i1 true) #1, !dbg !28
  %152 = bitcast float %144 to i32, !dbg !28
  %153 = bitcast float %145 to i32, !dbg !28
  %154 = bitcast float %146 to i32, !dbg !28
  %155 = bitcast float %147 to i32, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %152, i32 %153, i32 %154, i32 %155, ptr addrspace(1) %17, i1 true) #1, !dbg !28
  ret void, !dbg !29
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czfpdfs55y7yhx26ckjieutbuhkqq3llhmlrupt67xk5eydfh6y6.py", directory: "inductor_cache/zf")
!4 = !{ptr @triton_poi_fused_add_44, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_44, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_44", linkageName: "triton_poi_fused_add_44", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 34, scope: !7)
!15 = !DILocation(line: 25, column: 39, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 18, scope: !7)
!25 = !DILocation(line: 31, column: 18, scope: !7)
!26 = !DILocation(line: 32, column: 18, scope: !7)
!27 = !DILocation(line: 33, column: 18, scope: !7)
!28 = !DILocation(line: 34, column: 39, scope: !7)
!29 = !DILocation(line: 34, column: 4, scope: !7)
