; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__prelu_kernel_convolution_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = or disjoint i32 %11, 2, !dbg !13
  %14 = or disjoint i32 %11, 3, !dbg !13
  %15 = or disjoint i32 %11, 512, !dbg !13
  %16 = or disjoint i32 %11, 513, !dbg !13
  %17 = or disjoint i32 %11, 514, !dbg !13
  %18 = or disjoint i32 %11, 515, !dbg !13
  %19 = icmp slt i32 %11, 93312, !dbg !14
  %20 = icmp slt i32 %15, 93312, !dbg !14
  %21 = sdiv i32 %11, 729, !dbg !15
  %22 = sdiv i32 %12, 729, !dbg !15
  %23 = sdiv i32 %13, 729, !dbg !15
  %24 = sdiv i32 %14, 729, !dbg !15
  %25 = sdiv i32 %15, 729, !dbg !15
  %26 = sdiv i32 %16, 729, !dbg !15
  %27 = sdiv i32 %17, 729, !dbg !15
  %28 = sdiv i32 %18, 729, !dbg !15
  %29 = srem i32 %21, 32, !dbg !16
  %30 = srem i32 %22, 32, !dbg !16
  %31 = srem i32 %23, 32, !dbg !16
  %32 = srem i32 %24, 32, !dbg !16
  %33 = srem i32 %25, 32, !dbg !16
  %34 = srem i32 %26, 32, !dbg !16
  %35 = srem i32 %27, 32, !dbg !16
  %36 = srem i32 %28, 32, !dbg !16
  %37 = sext i32 %11 to i64, !dbg !17
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !17
  %39 = sext i32 %15 to i64, !dbg !17
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !17
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %19) #1, !dbg !18
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !18
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !18
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !18
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !18
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %20) #1, !dbg !18
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !18
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !18
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !18
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !18
  %51 = sext i32 %29 to i64, !dbg !19
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !19
  %53 = sext i32 %30 to i64, !dbg !19
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !19
  %55 = sext i32 %31 to i64, !dbg !19
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !19
  %57 = sext i32 %32 to i64, !dbg !19
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !19
  %59 = sext i32 %33 to i64, !dbg !19
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !19
  %61 = sext i32 %34 to i64, !dbg !19
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !19
  %63 = sext i32 %35 to i64, !dbg !19
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !19
  %65 = sext i32 %36 to i64, !dbg !19
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !19
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %19) #1, !dbg !20
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %19) #1, !dbg !20
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %19) #1, !dbg !20
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %19) #1, !dbg !20
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %20) #1, !dbg !20
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %20) #1, !dbg !20
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %20) #1, !dbg !20
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %20) #1, !dbg !20
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #1, !dbg !21
  %76 = bitcast i32 %75 to float, !dbg !21
  %77 = insertelement <8 x i32> poison, i32 %50, i64 0, !dbg !18
  %78 = insertelement <8 x i32> %77, i32 %49, i64 1, !dbg !18
  %79 = insertelement <8 x i32> %78, i32 %48, i64 2, !dbg !18
  %80 = insertelement <8 x i32> %79, i32 %47, i64 3, !dbg !18
  %81 = insertelement <8 x i32> %80, i32 %45, i64 4, !dbg !18
  %82 = insertelement <8 x i32> %81, i32 %44, i64 5, !dbg !18
  %83 = insertelement <8 x i32> %82, i32 %43, i64 6, !dbg !18
  %84 = insertelement <8 x i32> %83, i32 %42, i64 7, !dbg !18
  %85 = bitcast <8 x i32> %84 to <8 x float>, !dbg !18
  %86 = insertelement <8 x i32> poison, i32 %74, i64 0, !dbg !20
  %87 = insertelement <8 x i32> %86, i32 %73, i64 1, !dbg !20
  %88 = insertelement <8 x i32> %87, i32 %72, i64 2, !dbg !20
  %89 = insertelement <8 x i32> %88, i32 %71, i64 3, !dbg !20
  %90 = insertelement <8 x i32> %89, i32 %70, i64 4, !dbg !20
  %91 = insertelement <8 x i32> %90, i32 %69, i64 5, !dbg !20
  %92 = insertelement <8 x i32> %91, i32 %68, i64 6, !dbg !20
  %93 = insertelement <8 x i32> %92, i32 %67, i64 7, !dbg !20
  %94 = bitcast <8 x i32> %93 to <8 x float>, !dbg !20
  %95 = fadd <8 x float> %85, %94, !dbg !22
  %96 = fcmp ogt <8 x float> %95, zeroinitializer, !dbg !23
  %97 = extractelement <8 x float> %95, i64 7, !dbg !24
  %98 = fmul float %97, %76, !dbg !25
  %99 = extractelement <8 x float> %95, i64 6, !dbg !24
  %100 = fmul float %99, %76, !dbg !25
  %101 = extractelement <8 x float> %95, i64 5, !dbg !24
  %102 = fmul float %101, %76, !dbg !25
  %103 = extractelement <8 x float> %95, i64 4, !dbg !24
  %104 = fmul float %103, %76, !dbg !25
  %105 = extractelement <8 x float> %95, i64 3, !dbg !24
  %106 = fmul float %105, %76, !dbg !25
  %107 = extractelement <8 x float> %95, i64 2, !dbg !24
  %108 = fmul float %107, %76, !dbg !25
  %109 = extractelement <8 x float> %95, i64 1, !dbg !24
  %110 = fmul float %109, %76, !dbg !25
  %111 = extractelement <8 x float> %95, i64 0, !dbg !24
  %112 = fmul float %111, %76, !dbg !25
  %113 = extractelement <8 x i1> %96, i64 7, !dbg !26
  %114 = select i1 %113, float %97, float %98, !dbg !26
  %115 = extractelement <8 x i1> %96, i64 6, !dbg !26
  %116 = select i1 %115, float %99, float %100, !dbg !26
  %117 = extractelement <8 x i1> %96, i64 5, !dbg !26
  %118 = select i1 %117, float %101, float %102, !dbg !26
  %119 = extractelement <8 x i1> %96, i64 4, !dbg !26
  %120 = select i1 %119, float %103, float %104, !dbg !26
  %121 = extractelement <8 x i1> %96, i64 3, !dbg !26
  %122 = select i1 %121, float %105, float %106, !dbg !26
  %123 = extractelement <8 x i1> %96, i64 2, !dbg !26
  %124 = select i1 %123, float %107, float %108, !dbg !26
  %125 = extractelement <8 x i1> %96, i64 1, !dbg !26
  %126 = select i1 %125, float %109, float %110, !dbg !26
  %127 = extractelement <8 x i1> %96, i64 0, !dbg !26
  %128 = select i1 %127, float %111, float %112, !dbg !26
  %129 = bitcast float %97 to i32, !dbg !24
  %130 = bitcast float %99 to i32, !dbg !24
  %131 = bitcast float %101 to i32, !dbg !24
  %132 = bitcast float %103 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %129, i32 %130, i32 %131, i32 %132, ptr addrspace(1) %38, i1 %19) #1, !dbg !24
  %133 = bitcast float %105 to i32, !dbg !24
  %134 = bitcast float %107 to i32, !dbg !24
  %135 = bitcast float %109 to i32, !dbg !24
  %136 = bitcast float %111 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %133, i32 %134, i32 %135, i32 %136, ptr addrspace(1) %40, i1 %20) #1, !dbg !24
  %137 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !27
  %138 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !27
  %139 = bitcast float %114 to i32, !dbg !28
  %140 = bitcast float %116 to i32, !dbg !28
  %141 = bitcast float %118 to i32, !dbg !28
  %142 = bitcast float %120 to i32, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %139, i32 %140, i32 %141, i32 %142, ptr addrspace(1) %137, i1 %19) #1, !dbg !28
  %143 = bitcast float %122 to i32, !dbg !28
  %144 = bitcast float %124 to i32, !dbg !28
  %145 = bitcast float %126 to i32, !dbg !28
  %146 = bitcast float %128 to i32, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %143, i32 %144, i32 %145, i32 %146, ptr addrspace(1) %138, i1 %20) #1, !dbg !28
  ret void, !dbg !29
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "co747cfo3d6mprlkb6gr6doekoaaecwyawflogxzp3z3csk3jp7z.py", directory: "inductor_cache/o7")
!4 = !{ptr @triton_poi_fused__prelu_kernel_convolution_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__prelu_kernel_convolution_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__prelu_kernel_convolution_3", linkageName: "triton_poi_fused__prelu_kernel_convolution_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 34, scope: !7)
!18 = !DILocation(line: 26, column: 39, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 18, scope: !7)
!23 = !DILocation(line: 32, column: 18, scope: !7)
!24 = !DILocation(line: 35, column: 39, scope: !7)
!25 = !DILocation(line: 33, column: 18, scope: !7)
!26 = !DILocation(line: 34, column: 32, scope: !7)
!27 = !DILocation(line: 36, column: 25, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 4, scope: !7)
