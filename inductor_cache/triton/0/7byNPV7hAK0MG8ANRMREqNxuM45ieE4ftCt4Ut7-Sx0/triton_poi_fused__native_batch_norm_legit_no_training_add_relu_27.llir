; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 4, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 12, !dbg !12
  %16 = and i32 %13, 64, !dbg !12
  %.lobit = lshr exact i32 %16, 6, !dbg !12
  %17 = and i32 %13, 128, !dbg !12
  %18 = lshr exact i32 %17, 6, !dbg !12
  %19 = or disjoint i32 %.lobit, %18, !dbg !12
  %20 = or disjoint i32 %12, %15, !dbg !13
  %21 = or disjoint i32 %12, %19, !dbg !13
  %22 = or disjoint i32 %21, 4, !dbg !13
  %23 = or disjoint i32 %21, 8, !dbg !13
  %24 = or disjoint i32 %21, 12, !dbg !13
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %26 = shl i32 %25, 8, !dbg !15
  %27 = lshr i32 %13, 2, !dbg !16
  %28 = and i32 %27, 15, !dbg !16
  %29 = lshr exact i32 %16, 2, !dbg !16
  %30 = or disjoint i32 %28, %29, !dbg !16
  %31 = lshr exact i32 %17, 2, !dbg !16
  %32 = or disjoint i32 %30, %31, !dbg !16
  %33 = or disjoint i32 %32, 64, !dbg !16
  %34 = or disjoint i32 %32, 128, !dbg !16
  %35 = or disjoint i32 %32, 192, !dbg !16
  %36 = and i32 %14, 252, !dbg !16
  %37 = or disjoint i32 %26, %32, !dbg !17
  %38 = or disjoint i32 %26, %33, !dbg !17
  %39 = or disjoint i32 %26, %34, !dbg !17
  %40 = or disjoint i32 %26, %35, !dbg !17
  %41 = or disjoint i32 %26, %36, !dbg !17
  %42 = icmp slt i32 %37, 256, !dbg !18
  %43 = icmp slt i32 %38, 256, !dbg !18
  %44 = icmp slt i32 %39, 256, !dbg !18
  %45 = icmp slt i32 %40, 256, !dbg !18
  %46 = icmp slt i32 %41, 256, !dbg !18
  %.frozen = freeze i32 %20, !dbg !19
  %47 = sdiv i32 %.frozen, 256, !dbg !19
  %48 = mul i32 %47, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %48, !dbg !20
  %.frozen48 = freeze i32 %21, !dbg !19
  %49 = sdiv i32 %.frozen48, 256, !dbg !19
  %50 = mul i32 %49, 256, !dbg !20
  %.decomposed49 = sub i32 %.frozen48, %50, !dbg !20
  %.frozen50 = freeze i32 %22, !dbg !19
  %51 = sdiv i32 %.frozen50, 256, !dbg !19
  %52 = mul i32 %51, 256, !dbg !20
  %.decomposed51 = sub i32 %.frozen50, %52, !dbg !20
  %.frozen52 = freeze i32 %23, !dbg !19
  %53 = sdiv i32 %.frozen52, 256, !dbg !19
  %54 = mul i32 %53, 256, !dbg !20
  %.decomposed53 = sub i32 %.frozen52, %54, !dbg !20
  %.frozen54 = freeze i32 %24, !dbg !19
  %55 = sdiv i32 %.frozen54, 256, !dbg !19
  %56 = mul i32 %55, 256, !dbg !20
  %.decomposed55 = sub i32 %.frozen54, %56, !dbg !20
  %57 = shl i32 %37, 8, !dbg !21
  %58 = shl i32 %38, 8, !dbg !21
  %59 = shl i32 %39, 8, !dbg !21
  %60 = shl i32 %40, 8, !dbg !21
  %61 = shl i32 %47, 16, !dbg !22
  %62 = add i32 %61, %.decomposed, !dbg !23
  %63 = add i32 %62, %57, !dbg !24
  %64 = add i32 %62, %58, !dbg !24
  %65 = add i32 %62, %59, !dbg !24
  %66 = add i32 %62, %60, !dbg !24
  %67 = sext i32 %63 to i64, !dbg !25
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !25
  %69 = sext i32 %64 to i64, !dbg !25
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !25
  %71 = sext i32 %65 to i64, !dbg !25
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !25
  %73 = sext i32 %66 to i64, !dbg !25
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !25
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 %42) #4, !dbg !26
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 %43) #4, !dbg !26
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 %44) #4, !dbg !26
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 %45) #4, !dbg !26
  %79 = sext i32 %.decomposed to i64, !dbg !27
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %79, !dbg !27
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 true) #4, !dbg !28
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %79, !dbg !29
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %82, i1 true) #4, !dbg !30
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !30
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !30
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !30
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !30
  %88 = bitcast i32 %84 to float, !dbg !30
  %89 = bitcast i32 %85 to float, !dbg !30
  %90 = bitcast i32 %86 to float, !dbg !30
  %91 = bitcast i32 %87 to float, !dbg !30
  %92 = getelementptr float, ptr addrspace(1) %3, i64 %79, !dbg !31
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %92, i1 true) #4, !dbg !32
  %94 = getelementptr float, ptr addrspace(1) %4, i64 %79, !dbg !33
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 true) #4, !dbg !34
  %96 = add i32 %41, 196608, !dbg !35
  %97 = shl nsw i32 %.decomposed49, 8, !dbg !36
  %98 = shl nsw i32 %.decomposed51, 8, !dbg !36
  %99 = shl nsw i32 %.decomposed53, 8, !dbg !36
  %100 = shl nsw i32 %.decomposed55, 8, !dbg !36
  %101 = shl i32 %49, 18, !dbg !37
  %102 = shl i32 %51, 18, !dbg !37
  %103 = shl i32 %53, 18, !dbg !37
  %104 = shl i32 %55, 18, !dbg !37
  %105 = add i32 %101, %97, !dbg !38
  %106 = add i32 %105, %96, !dbg !39
  %107 = add i32 %102, %98, !dbg !38
  %108 = add i32 %107, %96, !dbg !39
  %109 = add i32 %103, %99, !dbg !38
  %110 = add i32 %109, %96, !dbg !39
  %111 = add i32 %104, %100, !dbg !38
  %112 = add i32 %111, %96, !dbg !39
  %113 = sext i32 %106 to i64, !dbg !40
  %114 = getelementptr float, ptr addrspace(1) %5, i64 %113, !dbg !40
  %115 = sext i32 %108 to i64, !dbg !40
  %116 = getelementptr float, ptr addrspace(1) %5, i64 %115, !dbg !40
  %117 = sext i32 %110 to i64, !dbg !40
  %118 = getelementptr float, ptr addrspace(1) %5, i64 %117, !dbg !40
  %119 = sext i32 %112 to i64, !dbg !40
  %120 = getelementptr float, ptr addrspace(1) %5, i64 %119, !dbg !40
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %114, i1 %46) #4, !dbg !41
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %116, i1 %46) #4, !dbg !41
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %118, i1 %46) #4, !dbg !41
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %120, i1 %46) #4, !dbg !41
  %125 = fadd float %88, 0x3EE4F8B580000000, !dbg !42
  %126 = fadd float %89, 0x3EE4F8B580000000, !dbg !42
  %127 = fadd float %90, 0x3EE4F8B580000000, !dbg !42
  %128 = fadd float %91, 0x3EE4F8B580000000, !dbg !42
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !43
  %.not.i = icmp eq i32 %129, 0, !dbg !43
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !43
  %.not1.i = icmp eq i32 %130, 0, !dbg !43
  br i1 %.not.i, label %136, label %131, !dbg !43

131:                                              ; preds = %10
  br i1 %.not1.i, label %134, label %132, !dbg !43

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #4, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #4, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

136:                                              ; preds = %10
  br i1 %.not1.i, label %139, label %137, !dbg !43

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #4, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #4, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

__nv_sqrtf.exit:                                  ; preds = %132, %134, %137, %139
  %.0.i = phi float [ %133, %132 ], [ %135, %134 ], [ %138, %137 ], [ %140, %139 ], !dbg !43
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !43
  %.not.i33 = icmp eq i32 %141, 0, !dbg !43
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !43
  %.not1.i36 = icmp eq i32 %142, 0, !dbg !43
  br i1 %.not.i33, label %148, label %143, !dbg !43

143:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i36, label %146, label %144, !dbg !43

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #4, !dbg !43
  br label %__nv_sqrtf.exit37, !dbg !43

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #4, !dbg !43
  br label %__nv_sqrtf.exit37, !dbg !43

148:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i36, label %151, label %149, !dbg !43

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #4, !dbg !43
  br label %__nv_sqrtf.exit37, !dbg !43

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #4, !dbg !43
  br label %__nv_sqrtf.exit37, !dbg !43

__nv_sqrtf.exit37:                                ; preds = %144, %146, %149, %151
  %.0.i35 = phi float [ %145, %144 ], [ %147, %146 ], [ %150, %149 ], [ %152, %151 ], !dbg !43
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !43
  %.not.i38 = icmp eq i32 %153, 0, !dbg !43
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !43
  %.not1.i41 = icmp eq i32 %154, 0, !dbg !43
  br i1 %.not.i38, label %160, label %155, !dbg !43

155:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %158, label %156, !dbg !43

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #4, !dbg !43
  br label %__nv_sqrtf.exit42, !dbg !43

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #4, !dbg !43
  br label %__nv_sqrtf.exit42, !dbg !43

160:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %163, label %161, !dbg !43

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #4, !dbg !43
  br label %__nv_sqrtf.exit42, !dbg !43

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #4, !dbg !43
  br label %__nv_sqrtf.exit42, !dbg !43

__nv_sqrtf.exit42:                                ; preds = %156, %158, %161, %163
  %.0.i40 = phi float [ %157, %156 ], [ %159, %158 ], [ %162, %161 ], [ %164, %163 ], !dbg !43
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !43
  %.not.i43 = icmp eq i32 %165, 0, !dbg !43
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !43
  %.not1.i46 = icmp eq i32 %166, 0, !dbg !43
  br i1 %.not.i43, label %172, label %167, !dbg !43

167:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %170, label %168, !dbg !43

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #4, !dbg !43
  br label %__nv_sqrtf.exit47, !dbg !43

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #4, !dbg !43
  br label %__nv_sqrtf.exit47, !dbg !43

172:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %175, label %173, !dbg !43

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #4, !dbg !43
  br label %__nv_sqrtf.exit47, !dbg !43

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #4, !dbg !43
  br label %__nv_sqrtf.exit47, !dbg !43

__nv_sqrtf.exit47:                                ; preds = %168, %170, %173, %175
  %.0.i45 = phi float [ %169, %168 ], [ %171, %170 ], [ %174, %173 ], [ %176, %175 ], !dbg !43
  %177 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !26
  %178 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !28
  %179 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !26
  %180 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !28
  %181 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !26
  %182 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !28
  %183 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !26
  %184 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !28
  %185 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !26
  %186 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !26
  %187 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !26
  %188 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !26
  %189 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !26
  %190 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !26
  %191 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !26
  %192 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !26
  %193 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !26
  %194 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !26
  %195 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !26
  %196 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !26
  %197 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !41
  %198 = bitcast i32 %197 to float, !dbg !41
  %199 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !41
  %200 = bitcast i32 %199 to float, !dbg !41
  %201 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !41
  %202 = bitcast i32 %201 to float, !dbg !41
  %203 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !41
  %204 = bitcast i32 %203 to float, !dbg !41
  %205 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !41
  %206 = bitcast i32 %205 to float, !dbg !41
  %207 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !41
  %208 = bitcast i32 %207 to float, !dbg !41
  %209 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !41
  %210 = bitcast i32 %209 to float, !dbg !41
  %211 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !41
  %212 = bitcast i32 %211 to float, !dbg !41
  %213 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !41
  %214 = bitcast i32 %213 to float, !dbg !41
  %215 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !41
  %216 = bitcast i32 %215 to float, !dbg !41
  %217 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !41
  %218 = bitcast i32 %217 to float, !dbg !41
  %219 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !41
  %220 = bitcast i32 %219 to float, !dbg !41
  %221 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !41
  %222 = bitcast i32 %221 to float, !dbg !41
  %223 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !41
  %224 = bitcast i32 %223 to float, !dbg !41
  %225 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !41
  %226 = bitcast i32 %225 to float, !dbg !41
  %227 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !41
  %228 = bitcast i32 %227 to float, !dbg !41
  %229 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !34
  %230 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !34
  %231 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !34
  %232 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !34
  %233 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !32
  %234 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !32
  %235 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !32
  %236 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !32
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !44
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #4, !dbg !44
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #4, !dbg !44
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i45) #4, !dbg !44
  %241 = insertelement <4 x i32> poison, i32 %178, i64 0, !dbg !28
  %242 = insertelement <4 x i32> %241, i32 %180, i64 1, !dbg !28
  %243 = insertelement <4 x i32> %242, i32 %182, i64 2, !dbg !28
  %244 = insertelement <4 x i32> %243, i32 %184, i64 3, !dbg !28
  %245 = bitcast <4 x i32> %244 to <4 x float>, !dbg !28
  %246 = shufflevector <4 x float> %245, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !28
  %247 = insertelement <16 x i32> poison, i32 %177, i64 0, !dbg !26
  %248 = insertelement <16 x i32> %247, i32 %179, i64 1, !dbg !26
  %249 = insertelement <16 x i32> %248, i32 %181, i64 2, !dbg !26
  %250 = insertelement <16 x i32> %249, i32 %183, i64 3, !dbg !26
  %251 = insertelement <16 x i32> %250, i32 %185, i64 4, !dbg !26
  %252 = insertelement <16 x i32> %251, i32 %186, i64 5, !dbg !26
  %253 = insertelement <16 x i32> %252, i32 %187, i64 6, !dbg !26
  %254 = insertelement <16 x i32> %253, i32 %188, i64 7, !dbg !26
  %255 = insertelement <16 x i32> %254, i32 %189, i64 8, !dbg !26
  %256 = insertelement <16 x i32> %255, i32 %190, i64 9, !dbg !26
  %257 = insertelement <16 x i32> %256, i32 %191, i64 10, !dbg !26
  %258 = insertelement <16 x i32> %257, i32 %192, i64 11, !dbg !26
  %259 = insertelement <16 x i32> %258, i32 %193, i64 12, !dbg !26
  %260 = insertelement <16 x i32> %259, i32 %194, i64 13, !dbg !26
  %261 = insertelement <16 x i32> %260, i32 %195, i64 14, !dbg !26
  %262 = insertelement <16 x i32> %261, i32 %196, i64 15, !dbg !26
  %263 = bitcast <16 x i32> %262 to <16 x float>, !dbg !26
  %264 = fsub <16 x float> %263, %246, !dbg !45
  %265 = insertelement <4 x i32> poison, i32 %229, i64 0, !dbg !34
  %266 = insertelement <4 x i32> %265, i32 %230, i64 1, !dbg !34
  %267 = insertelement <4 x i32> %266, i32 %231, i64 2, !dbg !34
  %268 = insertelement <4 x i32> %267, i32 %232, i64 3, !dbg !34
  %269 = bitcast <4 x i32> %268 to <4 x float>, !dbg !34
  %270 = shufflevector <4 x float> %269, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %271 = insertelement <4 x i32> poison, i32 %233, i64 0, !dbg !32
  %272 = insertelement <4 x i32> %271, i32 %234, i64 1, !dbg !32
  %273 = insertelement <4 x i32> %272, i32 %235, i64 2, !dbg !32
  %274 = insertelement <4 x i32> %273, i32 %236, i64 3, !dbg !32
  %275 = bitcast <4 x i32> %274 to <4 x float>, !dbg !32
  %276 = shufflevector <4 x float> %275, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !32
  %277 = insertelement <16 x float> poison, float %240, i64 0, !dbg !46
  %278 = insertelement <16 x float> %277, float %239, i64 1, !dbg !46
  %279 = insertelement <16 x float> %278, float %238, i64 2, !dbg !46
  %280 = insertelement <16 x float> %279, float %237, i64 3, !dbg !46
  %281 = shufflevector <16 x float> %280, <16 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !46
  %282 = fmul <16 x float> %264, %281, !dbg !46
  %283 = fmul <16 x float> %282, %276, !dbg !47
  %284 = fadd <16 x float> %283, %270, !dbg !48
  %285 = fcmp olt <16 x float> %284, zeroinitializer, !dbg !49
  %286 = extractelement <16 x i1> %285, i64 15, !dbg !53
  %287 = extractelement <16 x float> %284, i64 15, !dbg !53
  %288 = select i1 %286, float 0.000000e+00, float %287, !dbg !53
  %289 = extractelement <16 x i1> %285, i64 14, !dbg !53
  %290 = extractelement <16 x float> %284, i64 14, !dbg !53
  %291 = select i1 %289, float 0.000000e+00, float %290, !dbg !53
  %292 = extractelement <16 x i1> %285, i64 13, !dbg !53
  %293 = extractelement <16 x float> %284, i64 13, !dbg !53
  %294 = select i1 %292, float 0.000000e+00, float %293, !dbg !53
  %295 = extractelement <16 x i1> %285, i64 12, !dbg !53
  %296 = extractelement <16 x float> %284, i64 12, !dbg !53
  %297 = select i1 %295, float 0.000000e+00, float %296, !dbg !53
  %298 = extractelement <16 x i1> %285, i64 11, !dbg !53
  %299 = extractelement <16 x float> %284, i64 11, !dbg !53
  %300 = select i1 %298, float 0.000000e+00, float %299, !dbg !53
  %301 = extractelement <16 x i1> %285, i64 10, !dbg !53
  %302 = extractelement <16 x float> %284, i64 10, !dbg !53
  %303 = select i1 %301, float 0.000000e+00, float %302, !dbg !53
  %304 = extractelement <16 x i1> %285, i64 9, !dbg !53
  %305 = extractelement <16 x float> %284, i64 9, !dbg !53
  %306 = select i1 %304, float 0.000000e+00, float %305, !dbg !53
  %307 = extractelement <16 x i1> %285, i64 8, !dbg !53
  %308 = extractelement <16 x float> %284, i64 8, !dbg !53
  %309 = select i1 %307, float 0.000000e+00, float %308, !dbg !53
  %310 = extractelement <16 x i1> %285, i64 7, !dbg !53
  %311 = extractelement <16 x float> %284, i64 7, !dbg !53
  %312 = select i1 %310, float 0.000000e+00, float %311, !dbg !53
  %313 = extractelement <16 x i1> %285, i64 6, !dbg !53
  %314 = extractelement <16 x float> %284, i64 6, !dbg !53
  %315 = select i1 %313, float 0.000000e+00, float %314, !dbg !53
  %316 = extractelement <16 x i1> %285, i64 5, !dbg !53
  %317 = extractelement <16 x float> %284, i64 5, !dbg !53
  %318 = select i1 %316, float 0.000000e+00, float %317, !dbg !53
  %319 = extractelement <16 x i1> %285, i64 4, !dbg !53
  %320 = extractelement <16 x float> %284, i64 4, !dbg !53
  %321 = select i1 %319, float 0.000000e+00, float %320, !dbg !53
  %322 = extractelement <16 x i1> %285, i64 3, !dbg !53
  %323 = extractelement <16 x float> %284, i64 3, !dbg !53
  %324 = select i1 %322, float 0.000000e+00, float %323, !dbg !53
  %325 = extractelement <16 x i1> %285, i64 2, !dbg !53
  %326 = extractelement <16 x float> %284, i64 2, !dbg !53
  %327 = select i1 %325, float 0.000000e+00, float %326, !dbg !53
  %328 = extractelement <16 x i1> %285, i64 1, !dbg !53
  %329 = extractelement <16 x float> %284, i64 1, !dbg !53
  %330 = select i1 %328, float 0.000000e+00, float %329, !dbg !53
  %331 = extractelement <16 x i1> %285, i64 0, !dbg !53
  %332 = extractelement <16 x float> %284, i64 0, !dbg !53
  %333 = select i1 %331, float 0.000000e+00, float %332, !dbg !53
  %334 = shl i32 %13, 10, !dbg !53
  %335 = and i32 %334, 3072, !dbg !53
  %336 = and i32 %27, 15, !dbg !53
  %337 = or disjoint i32 %335, %336, !dbg !53
  %338 = or disjoint i32 %29, %337, !dbg !53
  %339 = or disjoint i32 %338, %31, !dbg !53
  %340 = and i32 %14, 1020, !dbg !53
  %341 = lshr exact i32 %335, 6, !dbg !53
  %342 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %341, !dbg !53
  %343 = getelementptr float, ptr addrspace(3) %342, i32 %339, !dbg !53
  %344 = bitcast float %288 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %343, <1 x i32> %344, i1 true) #4, !dbg !53
  %345 = or disjoint i32 %339, 256, !dbg !53
  %346 = lshr i32 %345, 8, !dbg !53
  %347 = getelementptr float, ptr addrspace(3) @global_smem, i32 %346, !dbg !53
  %348 = getelementptr float, ptr addrspace(3) %347, i32 %345, !dbg !53
  %349 = bitcast float %291 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %348, <1 x i32> %349, i1 true) #4, !dbg !53
  %350 = or disjoint i32 %339, 512, !dbg !53
  %351 = lshr i32 %350, 8, !dbg !53
  %352 = getelementptr float, ptr addrspace(3) @global_smem, i32 %351, !dbg !53
  %353 = getelementptr float, ptr addrspace(3) %352, i32 %350, !dbg !53
  %354 = bitcast float %294 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %353, <1 x i32> %354, i1 true) #4, !dbg !53
  %355 = or disjoint i32 %339, 768, !dbg !53
  %356 = lshr i32 %355, 8, !dbg !53
  %357 = getelementptr float, ptr addrspace(3) @global_smem, i32 %356, !dbg !53
  %358 = getelementptr float, ptr addrspace(3) %357, i32 %355, !dbg !53
  %359 = bitcast float %297 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %358, <1 x i32> %359, i1 true) #4, !dbg !53
  %360 = or disjoint i32 %339, 64, !dbg !53
  %361 = getelementptr float, ptr addrspace(3) %342, i32 %360, !dbg !53
  %362 = bitcast float %300 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %361, <1 x i32> %362, i1 true) #4, !dbg !53
  %363 = or disjoint i32 %339, 320, !dbg !53
  %364 = lshr i32 %363, 8, !dbg !53
  %365 = getelementptr float, ptr addrspace(3) @global_smem, i32 %364, !dbg !53
  %366 = getelementptr float, ptr addrspace(3) %365, i32 %363, !dbg !53
  %367 = bitcast float %303 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %366, <1 x i32> %367, i1 true) #4, !dbg !53
  %368 = or disjoint i32 %339, 576, !dbg !53
  %369 = lshr i32 %368, 8, !dbg !53
  %370 = getelementptr float, ptr addrspace(3) @global_smem, i32 %369, !dbg !53
  %371 = getelementptr float, ptr addrspace(3) %370, i32 %368, !dbg !53
  %372 = bitcast float %306 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %371, <1 x i32> %372, i1 true) #4, !dbg !53
  %373 = or disjoint i32 %339, 832, !dbg !53
  %374 = lshr i32 %373, 8, !dbg !53
  %375 = getelementptr float, ptr addrspace(3) @global_smem, i32 %374, !dbg !53
  %376 = getelementptr float, ptr addrspace(3) %375, i32 %373, !dbg !53
  %377 = bitcast float %309 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %376, <1 x i32> %377, i1 true) #4, !dbg !53
  %378 = or disjoint i32 %339, 128, !dbg !53
  %379 = getelementptr float, ptr addrspace(3) %342, i32 %378, !dbg !53
  %380 = bitcast float %312 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %379, <1 x i32> %380, i1 true) #4, !dbg !53
  %381 = or disjoint i32 %339, 384, !dbg !53
  %382 = lshr i32 %381, 8, !dbg !53
  %383 = getelementptr float, ptr addrspace(3) @global_smem, i32 %382, !dbg !53
  %384 = getelementptr float, ptr addrspace(3) %383, i32 %381, !dbg !53
  %385 = bitcast float %315 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %385, i1 true) #4, !dbg !53
  %386 = or disjoint i32 %339, 640, !dbg !53
  %387 = lshr i32 %386, 8, !dbg !53
  %388 = getelementptr float, ptr addrspace(3) @global_smem, i32 %387, !dbg !53
  %389 = getelementptr float, ptr addrspace(3) %388, i32 %386, !dbg !53
  %390 = bitcast float %318 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %390, i1 true) #4, !dbg !53
  %391 = or disjoint i32 %339, 896, !dbg !53
  %392 = lshr i32 %391, 8, !dbg !53
  %393 = getelementptr float, ptr addrspace(3) @global_smem, i32 %392, !dbg !53
  %394 = getelementptr float, ptr addrspace(3) %393, i32 %391, !dbg !53
  %395 = bitcast float %321 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %394, <1 x i32> %395, i1 true) #4, !dbg !53
  %396 = or disjoint i32 %339, 192, !dbg !53
  %397 = getelementptr float, ptr addrspace(3) %342, i32 %396, !dbg !53
  %398 = bitcast float %324 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %397, <1 x i32> %398, i1 true) #4, !dbg !53
  %399 = or disjoint i32 %339, 448, !dbg !53
  %400 = lshr i32 %399, 8, !dbg !53
  %401 = getelementptr float, ptr addrspace(3) @global_smem, i32 %400, !dbg !53
  %402 = getelementptr float, ptr addrspace(3) %401, i32 %399, !dbg !53
  %403 = bitcast float %327 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %402, <1 x i32> %403, i1 true) #4, !dbg !53
  %404 = or disjoint i32 %339, 704, !dbg !53
  %405 = lshr i32 %404, 8, !dbg !53
  %406 = getelementptr float, ptr addrspace(3) @global_smem, i32 %405, !dbg !53
  %407 = getelementptr float, ptr addrspace(3) %406, i32 %404, !dbg !53
  %408 = bitcast float %330 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %407, <1 x i32> %408, i1 true) #4, !dbg !53
  %409 = or disjoint i32 %339, 960, !dbg !53
  %410 = lshr i32 %409, 8, !dbg !53
  %411 = getelementptr float, ptr addrspace(3) @global_smem, i32 %410, !dbg !53
  %412 = getelementptr float, ptr addrspace(3) %411, i32 %409, !dbg !53
  %413 = bitcast float %333 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %412, <1 x i32> %413, i1 true) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %414 = lshr i32 %340, 8, !dbg !53
  %415 = or disjoint i32 %414, %340, !dbg !53
  %416 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %415, !dbg !53
  %417 = load float, ptr addrspace(3) %416, align 4, !dbg !53
  %418 = or disjoint i32 %340, 1, !dbg !53
  %419 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %414, !dbg !53
  %420 = getelementptr inbounds float, ptr addrspace(3) %419, i32 %418, !dbg !53
  %421 = load float, ptr addrspace(3) %420, align 4, !dbg !53
  %422 = or disjoint i32 %340, 2, !dbg !53
  %423 = getelementptr inbounds float, ptr addrspace(3) %419, i32 %422, !dbg !53
  %424 = load float, ptr addrspace(3) %423, align 4, !dbg !53
  %425 = or disjoint i32 %340, 3, !dbg !53
  %426 = getelementptr inbounds float, ptr addrspace(3) %419, i32 %425, !dbg !53
  %427 = load float, ptr addrspace(3) %426, align 4, !dbg !53
  %428 = or disjoint i32 %340, 1024, !dbg !53
  %429 = lshr i32 %428, 8, !dbg !53
  %430 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %429, !dbg !53
  %431 = getelementptr inbounds float, ptr addrspace(3) %430, i32 %428, !dbg !53
  %432 = load float, ptr addrspace(3) %431, align 4, !dbg !53
  %433 = or disjoint i32 %340, 1025, !dbg !53
  %434 = lshr i32 %433, 8, !dbg !53
  %435 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %434, !dbg !53
  %436 = getelementptr inbounds float, ptr addrspace(3) %435, i32 %433, !dbg !53
  %437 = load float, ptr addrspace(3) %436, align 4, !dbg !53
  %438 = or disjoint i32 %340, 1026, !dbg !53
  %439 = lshr i32 %438, 8, !dbg !53
  %440 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %439, !dbg !53
  %441 = getelementptr inbounds float, ptr addrspace(3) %440, i32 %438, !dbg !53
  %442 = load float, ptr addrspace(3) %441, align 4, !dbg !53
  %443 = or disjoint i32 %340, 1027, !dbg !53
  %444 = lshr i32 %443, 8, !dbg !53
  %445 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %444, !dbg !53
  %446 = getelementptr inbounds float, ptr addrspace(3) %445, i32 %443, !dbg !53
  %447 = load float, ptr addrspace(3) %446, align 4, !dbg !53
  %448 = or disjoint i32 %340, 2048, !dbg !53
  %449 = lshr i32 %448, 8, !dbg !53
  %450 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %449, !dbg !53
  %451 = getelementptr inbounds float, ptr addrspace(3) %450, i32 %448, !dbg !53
  %452 = load float, ptr addrspace(3) %451, align 4, !dbg !53
  %453 = or disjoint i32 %340, 2049, !dbg !53
  %454 = lshr i32 %453, 8, !dbg !53
  %455 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %454, !dbg !53
  %456 = getelementptr inbounds float, ptr addrspace(3) %455, i32 %453, !dbg !53
  %457 = load float, ptr addrspace(3) %456, align 4, !dbg !53
  %458 = or disjoint i32 %340, 2050, !dbg !53
  %459 = lshr i32 %458, 8, !dbg !53
  %460 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %459, !dbg !53
  %461 = getelementptr inbounds float, ptr addrspace(3) %460, i32 %458, !dbg !53
  %462 = load float, ptr addrspace(3) %461, align 4, !dbg !53
  %463 = or disjoint i32 %340, 2051, !dbg !53
  %464 = lshr i32 %463, 8, !dbg !53
  %465 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %464, !dbg !53
  %466 = getelementptr inbounds float, ptr addrspace(3) %465, i32 %463, !dbg !53
  %467 = load float, ptr addrspace(3) %466, align 4, !dbg !53
  %468 = or disjoint i32 %340, 3072, !dbg !53
  %469 = lshr i32 %468, 8, !dbg !53
  %470 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %469, !dbg !53
  %471 = getelementptr inbounds float, ptr addrspace(3) %470, i32 %468, !dbg !53
  %472 = load float, ptr addrspace(3) %471, align 4, !dbg !53
  %473 = or disjoint i32 %340, 3073, !dbg !53
  %474 = lshr i32 %473, 8, !dbg !53
  %475 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %474, !dbg !53
  %476 = getelementptr inbounds float, ptr addrspace(3) %475, i32 %473, !dbg !53
  %477 = load float, ptr addrspace(3) %476, align 4, !dbg !53
  %478 = or disjoint i32 %340, 3074, !dbg !53
  %479 = lshr i32 %478, 8, !dbg !53
  %480 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %479, !dbg !53
  %481 = getelementptr inbounds float, ptr addrspace(3) %480, i32 %478, !dbg !53
  %482 = load float, ptr addrspace(3) %481, align 4, !dbg !53
  %483 = or disjoint i32 %340, 3075, !dbg !53
  %484 = lshr i32 %483, 8, !dbg !53
  %485 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %484, !dbg !53
  %486 = getelementptr inbounds float, ptr addrspace(3) %485, i32 %483, !dbg !53
  %487 = load float, ptr addrspace(3) %486, align 4, !dbg !53
  %488 = fadd float %417, %228, !dbg !54
  %489 = fadd float %421, %226, !dbg !54
  %490 = fadd float %424, %224, !dbg !54
  %491 = fadd float %427, %222, !dbg !54
  %492 = fadd float %432, %220, !dbg !54
  %493 = fadd float %437, %218, !dbg !54
  %494 = fadd float %442, %216, !dbg !54
  %495 = fadd float %447, %214, !dbg !54
  %496 = fadd float %452, %212, !dbg !54
  %497 = fadd float %457, %210, !dbg !54
  %498 = fadd float %462, %208, !dbg !54
  %499 = fadd float %467, %206, !dbg !54
  %500 = fadd float %472, %204, !dbg !54
  %501 = fadd float %477, %202, !dbg !54
  %502 = fadd float %482, %200, !dbg !54
  %503 = fadd float %487, %198, !dbg !54
  %504 = add i32 %105, %41, !dbg !55
  %505 = add i32 %107, %41, !dbg !55
  %506 = add i32 %109, %41, !dbg !55
  %507 = add i32 %111, %41, !dbg !55
  %508 = sext i32 %504 to i64, !dbg !56
  %509 = getelementptr float, ptr addrspace(1) %6, i64 %508, !dbg !56
  %510 = sext i32 %505 to i64, !dbg !56
  %511 = getelementptr float, ptr addrspace(1) %6, i64 %510, !dbg !56
  %512 = sext i32 %506 to i64, !dbg !56
  %513 = getelementptr float, ptr addrspace(1) %6, i64 %512, !dbg !56
  %514 = sext i32 %507 to i64, !dbg !56
  %515 = getelementptr float, ptr addrspace(1) %6, i64 %514, !dbg !56
  %516 = bitcast float %417 to i32, !dbg !57
  %517 = bitcast float %421 to i32, !dbg !57
  %518 = bitcast float %424 to i32, !dbg !57
  %519 = bitcast float %427 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %516, i32 %517, i32 %518, i32 %519, ptr addrspace(1) %509, i1 %46) #4, !dbg !57
  %520 = bitcast float %432 to i32, !dbg !57
  %521 = bitcast float %437 to i32, !dbg !57
  %522 = bitcast float %442 to i32, !dbg !57
  %523 = bitcast float %447 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %520, i32 %521, i32 %522, i32 %523, ptr addrspace(1) %511, i1 %46) #4, !dbg !57
  %524 = bitcast float %452 to i32, !dbg !57
  %525 = bitcast float %457 to i32, !dbg !57
  %526 = bitcast float %462 to i32, !dbg !57
  %527 = bitcast float %467 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %524, i32 %525, i32 %526, i32 %527, ptr addrspace(1) %513, i1 %46) #4, !dbg !57
  %528 = bitcast float %472 to i32, !dbg !57
  %529 = bitcast float %477 to i32, !dbg !57
  %530 = bitcast float %482 to i32, !dbg !57
  %531 = bitcast float %487 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %528, i32 %529, i32 %530, i32 %531, ptr addrspace(1) %515, i1 %46) #4, !dbg !57
  %532 = getelementptr float, ptr addrspace(1) %7, i64 %67, !dbg !58
  %533 = getelementptr float, ptr addrspace(1) %7, i64 %69, !dbg !58
  %534 = getelementptr float, ptr addrspace(1) %7, i64 %71, !dbg !58
  %535 = getelementptr float, ptr addrspace(1) %7, i64 %73, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %536 = shl i32 %13, 6, !dbg !59
  %537 = and i32 %536, 4032, !dbg !59
  %538 = or disjoint i32 %537, %.lobit, !dbg !59
  %539 = or disjoint i32 %538, %18, !dbg !59
  %540 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %537, !dbg !59
  %541 = getelementptr float, ptr addrspace(3) %540, i32 %539, !dbg !59
  %542 = bitcast float %488 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %541, <1 x i32> %542, i1 true) #4, !dbg !59
  %543 = or disjoint i32 %539, 16, !dbg !59
  %544 = lshr i32 %543, 2, !dbg !59
  %545 = and i32 %544, 16777212, !dbg !59
  %546 = getelementptr float, ptr addrspace(3) @global_smem, i32 %545, !dbg !59
  %547 = getelementptr float, ptr addrspace(3) %546, i32 %543, !dbg !59
  %548 = bitcast float %489 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %547, <1 x i32> %548, i1 true) #4, !dbg !59
  %549 = or disjoint i32 %539, 32, !dbg !59
  %550 = lshr i32 %549, 2, !dbg !59
  %551 = and i32 %550, 16777212, !dbg !59
  %552 = getelementptr float, ptr addrspace(3) @global_smem, i32 %551, !dbg !59
  %553 = getelementptr float, ptr addrspace(3) %552, i32 %549, !dbg !59
  %554 = bitcast float %490 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %553, <1 x i32> %554, i1 true) #4, !dbg !59
  %555 = or disjoint i32 %539, 48, !dbg !59
  %556 = lshr i32 %555, 2, !dbg !59
  %557 = and i32 %556, 16777212, !dbg !59
  %558 = getelementptr float, ptr addrspace(3) @global_smem, i32 %557, !dbg !59
  %559 = getelementptr float, ptr addrspace(3) %558, i32 %555, !dbg !59
  %560 = bitcast float %491 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %559, <1 x i32> %560, i1 true) #4, !dbg !59
  %561 = or disjoint i32 %539, 4, !dbg !59
  %562 = getelementptr float, ptr addrspace(3) %540, i32 %561, !dbg !59
  %563 = bitcast float %492 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %562, <1 x i32> %563, i1 true) #4, !dbg !59
  %564 = or disjoint i32 %539, 20, !dbg !59
  %565 = lshr i32 %564, 2, !dbg !59
  %566 = and i32 %565, 16777212, !dbg !59
  %567 = getelementptr float, ptr addrspace(3) @global_smem, i32 %566, !dbg !59
  %568 = getelementptr float, ptr addrspace(3) %567, i32 %564, !dbg !59
  %569 = bitcast float %493 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %568, <1 x i32> %569, i1 true) #4, !dbg !59
  %570 = or disjoint i32 %539, 36, !dbg !59
  %571 = lshr i32 %570, 2, !dbg !59
  %572 = and i32 %571, 16777212, !dbg !59
  %573 = getelementptr float, ptr addrspace(3) @global_smem, i32 %572, !dbg !59
  %574 = getelementptr float, ptr addrspace(3) %573, i32 %570, !dbg !59
  %575 = bitcast float %494 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %574, <1 x i32> %575, i1 true) #4, !dbg !59
  %576 = or disjoint i32 %539, 52, !dbg !59
  %577 = lshr i32 %576, 2, !dbg !59
  %578 = and i32 %577, 16777212, !dbg !59
  %579 = getelementptr float, ptr addrspace(3) @global_smem, i32 %578, !dbg !59
  %580 = getelementptr float, ptr addrspace(3) %579, i32 %576, !dbg !59
  %581 = bitcast float %495 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %580, <1 x i32> %581, i1 true) #4, !dbg !59
  %582 = or disjoint i32 %539, 8, !dbg !59
  %583 = getelementptr float, ptr addrspace(3) %540, i32 %582, !dbg !59
  %584 = bitcast float %496 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %583, <1 x i32> %584, i1 true) #4, !dbg !59
  %585 = or disjoint i32 %539, 24, !dbg !59
  %586 = lshr i32 %585, 2, !dbg !59
  %587 = and i32 %586, 16777212, !dbg !59
  %588 = getelementptr float, ptr addrspace(3) @global_smem, i32 %587, !dbg !59
  %589 = getelementptr float, ptr addrspace(3) %588, i32 %585, !dbg !59
  %590 = bitcast float %497 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %589, <1 x i32> %590, i1 true) #4, !dbg !59
  %591 = or disjoint i32 %539, 40, !dbg !59
  %592 = lshr i32 %591, 2, !dbg !59
  %593 = and i32 %592, 16777212, !dbg !59
  %594 = getelementptr float, ptr addrspace(3) @global_smem, i32 %593, !dbg !59
  %595 = getelementptr float, ptr addrspace(3) %594, i32 %591, !dbg !59
  %596 = bitcast float %498 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %595, <1 x i32> %596, i1 true) #4, !dbg !59
  %597 = or disjoint i32 %539, 56, !dbg !59
  %598 = lshr i32 %597, 2, !dbg !59
  %599 = and i32 %598, 16777212, !dbg !59
  %600 = getelementptr float, ptr addrspace(3) @global_smem, i32 %599, !dbg !59
  %601 = getelementptr float, ptr addrspace(3) %600, i32 %597, !dbg !59
  %602 = bitcast float %499 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %601, <1 x i32> %602, i1 true) #4, !dbg !59
  %603 = or disjoint i32 %539, 12, !dbg !59
  %604 = getelementptr float, ptr addrspace(3) %540, i32 %603, !dbg !59
  %605 = bitcast float %500 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %604, <1 x i32> %605, i1 true) #4, !dbg !59
  %606 = or disjoint i32 %539, 28, !dbg !59
  %607 = lshr i32 %606, 2, !dbg !59
  %608 = and i32 %607, 16777212, !dbg !59
  %609 = getelementptr float, ptr addrspace(3) @global_smem, i32 %608, !dbg !59
  %610 = getelementptr float, ptr addrspace(3) %609, i32 %606, !dbg !59
  %611 = bitcast float %501 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %610, <1 x i32> %611, i1 true) #4, !dbg !59
  %612 = or disjoint i32 %539, 44, !dbg !59
  %613 = lshr i32 %612, 2, !dbg !59
  %614 = and i32 %613, 16777212, !dbg !59
  %615 = getelementptr float, ptr addrspace(3) @global_smem, i32 %614, !dbg !59
  %616 = getelementptr float, ptr addrspace(3) %615, i32 %612, !dbg !59
  %617 = bitcast float %502 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %616, <1 x i32> %617, i1 true) #4, !dbg !59
  %618 = or disjoint i32 %539, 60, !dbg !59
  %619 = lshr i32 %618, 2, !dbg !59
  %620 = and i32 %619, 16777212, !dbg !59
  %621 = getelementptr float, ptr addrspace(3) @global_smem, i32 %620, !dbg !59
  %622 = getelementptr float, ptr addrspace(3) %621, i32 %618, !dbg !59
  %623 = bitcast float %503 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %622, <1 x i32> %623, i1 true) #4, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %624 = and i32 %13, 252, !dbg !59
  %625 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %624, !dbg !59
  %626 = getelementptr inbounds float, ptr addrspace(3) %625, i32 %340, !dbg !59
  %627 = lshr exact i32 %428, 2, !dbg !59
  %628 = and i32 %627, 508, !dbg !59
  %629 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %628, !dbg !59
  %630 = getelementptr inbounds float, ptr addrspace(3) %629, i32 %428, !dbg !59
  %631 = load <4 x i32>, ptr addrspace(3) %630, align 16, !dbg !59
  %632 = lshr exact i32 %448, 2, !dbg !59
  %633 = and i32 %632, 764, !dbg !59
  %634 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %633, !dbg !59
  %635 = getelementptr inbounds float, ptr addrspace(3) %634, i32 %448, !dbg !59
  %636 = load <4 x i32>, ptr addrspace(3) %635, align 16, !dbg !59
  %637 = lshr exact i32 %468, 2, !dbg !59
  %638 = and i32 %637, 1020, !dbg !59
  %639 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %638, !dbg !59
  %640 = getelementptr inbounds float, ptr addrspace(3) %639, i32 %468, !dbg !59
  %641 = load <4 x i32>, ptr addrspace(3) %640, align 16, !dbg !59
  %.extract = load i32, ptr addrspace(3) %626, align 16, !dbg !59
  %642 = getelementptr inbounds i8, ptr addrspace(3) %626, i32 4, !dbg !59
  %.extract18 = load i32, ptr addrspace(3) %642, align 4, !dbg !59
  %643 = getelementptr inbounds i8, ptr addrspace(3) %626, i32 8, !dbg !59
  %.extract19 = load i32, ptr addrspace(3) %643, align 8, !dbg !59
  %644 = getelementptr inbounds i8, ptr addrspace(3) %626, i32 12, !dbg !59
  %.extract20 = load i32, ptr addrspace(3) %644, align 4, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %532, i1 %42) #4, !dbg !59
  %.extract21 = extractelement <4 x i32> %631, i64 0, !dbg !59
  %.extract22 = extractelement <4 x i32> %631, i64 1, !dbg !59
  %.extract23 = extractelement <4 x i32> %631, i64 2, !dbg !59
  %.extract24 = extractelement <4 x i32> %631, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %533, i1 %43) #4, !dbg !59
  %.extract25 = extractelement <4 x i32> %636, i64 0, !dbg !59
  %.extract26 = extractelement <4 x i32> %636, i64 1, !dbg !59
  %.extract27 = extractelement <4 x i32> %636, i64 2, !dbg !59
  %.extract28 = extractelement <4 x i32> %636, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %534, i1 %44) #4, !dbg !59
  %.extract29 = extractelement <4 x i32> %641, i64 0, !dbg !59
  %.extract30 = extractelement <4 x i32> %641, i64 1, !dbg !59
  %.extract31 = extractelement <4 x i32> %641, i64 2, !dbg !59
  %.extract32 = extractelement <4 x i32> %641, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %535, i1 %45) #4, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpnzvnfcdvaamml6jfazf7bmqmk7w7vnaqf4a4wshu4c536vyhn6.py", directory: "inductor_cache/pn")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_27, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_27", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 39, scope: !7)
!22 = !DILocation(line: 31, column: 50, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 44, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 55, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 40, scope: !7)
!36 = !DILocation(line: 36, column: 49, scope: !7)
!37 = !DILocation(line: 36, column: 61, scope: !7)
!38 = !DILocation(line: 36, column: 45, scope: !7)
!39 = !DILocation(line: 36, column: 54, scope: !7)
!40 = !DILocation(line: 36, column: 31, scope: !7)
!41 = !DILocation(line: 36, column: 66, scope: !7)
!42 = !DILocation(line: 39, column: 18, scope: !7)
!43 = !DILocation(line: 40, column: 26, scope: !7)
!44 = !DILocation(line: 42, column: 18, scope: !7)
!45 = !DILocation(line: 37, column: 18, scope: !7)
!46 = !DILocation(line: 45, column: 19, scope: !7)
!47 = !DILocation(line: 46, column: 20, scope: !7)
!48 = !DILocation(line: 47, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 49, column: 42, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 50, column: 20, scope: !7)
!55 = !DILocation(line: 51, column: 39, scope: !7)
!56 = !DILocation(line: 51, column: 25, scope: !7)
!57 = !DILocation(line: 51, column: 58, scope: !7)
!58 = !DILocation(line: 52, column: 25, scope: !7)
!59 = !DILocation(line: 52, column: 57, scope: !7)
!60 = !DILocation(line: 52, column: 4, scope: !7)
