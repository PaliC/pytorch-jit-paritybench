; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__to_copy_add_constant_pad_nd_div_mean_mul_pow_sqrt_sub_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = icmp slt i32 %7, 64, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %11 = icmp samesign ult i32 %10, 49, !dbg !13
  %12 = mul i32 %7, 49, !dbg !14
  %13 = add i32 %12, %10, !dbg !15
  %14 = sext i32 %13 to i64, !dbg !16
  %15 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !16
  %16 = and i1 %11, %8, !dbg !17
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %15, i1 %16, i32 0, i1 %16) #5, !dbg !18
  %18 = bitcast i32 %17 to float, !dbg !18
  %19 = sext i32 %7 to i64, !dbg !19
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !19
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 %8) #5, !dbg !20
  %22 = bitcast i32 %21 to float, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !21
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %16, i32 0, i1 %16) #5, !dbg !22
  %25 = bitcast i32 %24 to float, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !23
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %8) #5, !dbg !24
  %28 = bitcast i32 %27 to float, !dbg !24
  %29 = fsub float %18, %22, !dbg !25
  %30 = fmul float %29, %29, !dbg !26
  %31 = fadd float %30, 0x3FE9EB8520000000, !dbg !27
  %32 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %.not.i = icmp eq i32 %32, 0, !dbg !28
  %33 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %.not1.i = icmp eq i32 %33, 0, !dbg !28
  br i1 %.not.i, label %39, label %34, !dbg !28

34:                                               ; preds = %6
  br i1 %.not1.i, label %37, label %35, !dbg !28

35:                                               ; preds = %34
  %36 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %31) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

37:                                               ; preds = %34
  %38 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %31) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

39:                                               ; preds = %6
  br i1 %.not1.i, label %42, label %40, !dbg !28

40:                                               ; preds = %39
  %41 = tail call float @llvm.nvvm.sqrt.rn.f(float %31) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

42:                                               ; preds = %39
  %43 = tail call float @llvm.nvvm.sqrt.approx.f(float %31) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %35, %37, %40, %42
  %.0.i = phi float [ %36, %35 ], [ %38, %37 ], [ %41, %40 ], [ %43, %42 ], !dbg !28
  %44 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %29, float %.0.i) #5, !dbg !29
  %45 = fsub float %25, %28, !dbg !30
  %46 = fmul float %45, %45, !dbg !31
  %47 = fadd float %46, 0x3FE9EB8520000000, !dbg !32
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not.i1 = icmp eq i32 %48, 0, !dbg !33
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !33
  %.not1.i4 = icmp eq i32 %49, 0, !dbg !33
  br i1 %.not.i1, label %55, label %50, !dbg !33

50:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %53, label %51, !dbg !33

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #5, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #5, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

55:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %58, label %56, !dbg !33

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #5, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #5, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

__nv_sqrtf.exit5:                                 ; preds = %51, %53, %56, %58
  %.0.i3 = phi float [ %52, %51 ], [ %54, %53 ], [ %57, %56 ], [ %59, %58 ], !dbg !33
  %60 = sdiv i32 %7, 4, !dbg !34
  %61 = lshr i32 %9, 5, !dbg !12
  %62 = and i32 %9, 31, !dbg !12
  %63 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %45, float %.0.i3) #5, !dbg !35
  %64 = fsub float %44, %63, !dbg !36
  %65 = fmul float %64, %64, !dbg !37
  %66 = fadd float %65, 0x3FB99999A0000000, !dbg !38
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float %66) #5, !dbg !39
  %68 = select i1 %16, float %67, float 0.000000e+00, !dbg !40
  %69 = bitcast float %68 to i32, !dbg !41
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 16, i32 31), !dbg !41
  %71 = bitcast i32 %70 to float, !dbg !41
  %72 = fadd float %68, %71, !dbg !45
  %73 = bitcast float %72 to i32, !dbg !41
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 8, i32 31), !dbg !41
  %75 = bitcast i32 %74 to float, !dbg !41
  %76 = fadd float %72, %75, !dbg !45
  %77 = bitcast float %76 to i32, !dbg !41
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 4, i32 31), !dbg !41
  %79 = bitcast i32 %78 to float, !dbg !41
  %80 = fadd float %76, %79, !dbg !45
  %81 = bitcast float %80 to i32, !dbg !41
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 2, i32 31), !dbg !41
  %83 = bitcast i32 %82 to float, !dbg !41
  %84 = fadd float %80, %83, !dbg !45
  %85 = bitcast float %84 to i32, !dbg !41
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 1, i32 31), !dbg !41
  %87 = bitcast i32 %86 to float, !dbg !41
  %88 = fadd float %84, %87, !dbg !45
  %89 = icmp eq i32 %62, 0, !dbg !41
  %90 = and i32 %61, 1, !dbg !41
  %91 = zext nneg i32 %90 to i64, !dbg !41
  %92 = getelementptr float, ptr addrspace(3) @global_smem, i64 %91, !dbg !41
  %93 = bitcast float %88 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 %89) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %94 = icmp slt i32 %9, 2, !dbg !41
  %95 = sext i32 %9 to i64, !dbg !41
  %96 = getelementptr float, ptr addrspace(3) @global_smem, i64 %95, !dbg !41
  %97 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %96, i1 %94) #5, !dbg !41
  %98 = bitcast i32 %97 to float, !dbg !41
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 1, i32 31), !dbg !41
  %100 = bitcast i32 %99 to float, !dbg !41
  %101 = fadd float %98, %100, !dbg !45
  %102 = and i32 %9, 1, !dbg !41
  %103 = icmp eq i32 %102, 0, !dbg !41
  %104 = and i1 %94, %103, !dbg !41
  %105 = bitcast float %101 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %105, i1 %104) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %106 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !41
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float 4.900000e+01) #5, !dbg !47
  %108 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !48
  %109 = insertelement <2 x i32> %108, i32 %7, i64 1, !dbg !48
  %110 = srem <2 x i32> %109, splat (i32 4), !dbg !48
  %111 = add nsw <2 x i32> %110, splat (i32 -1), !dbg !49
  %shift = shufflevector <2 x i32> %111, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !50
  %112 = or <2 x i32> %111, %shift, !dbg !50
  %113 = extractelement <2 x i32> %112, i64 0, !dbg !50
  %114 = icmp ult i32 %113, 2, !dbg !50
  %115 = select i1 %114, float 1.000000e+00, float 0.000000e+00, !dbg !51
  %116 = fmul float %115, %107, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %117 = icmp eq i32 %10, 0, !dbg !54
  %118 = bitcast float %116 to i32, !dbg !54
  %119 = and i1 %117, %8, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %118, ptr addrspace(1) %20, i1 %119) #5, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwldc62iqaby26q37j7jjhuqosonl5fs72na2tz7sa6to54usdtc.py", directory: "inductor_cache/wl")
!4 = !{ptr @triton_per_fused__to_copy_add_constant_pad_nd_div_mean_mul_pow_sqrt_sub_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__to_copy_add_constant_pad_nd_div_mean_mul_pow_sqrt_sub_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__to_copy_add_constant_pad_nd_div_mean_mul_pow_sqrt_sub_2", linkageName: "triton_per_fused__to_copy_add_constant_pad_nd_div_mean_mul_pow_sqrt_sub_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 28, column: 21, scope: !7)
!14 = !DILocation(line: 33, column: 38, scope: !7)
!15 = !DILocation(line: 33, column: 35, scope: !7)
!16 = !DILocation(line: 33, column: 30, scope: !7)
!17 = !DILocation(line: 33, column: 51, scope: !7)
!18 = !DILocation(line: 33, column: 43, scope: !7)
!19 = !DILocation(line: 34, column: 34, scope: !7)
!20 = !DILocation(line: 34, column: 39, scope: !7)
!21 = !DILocation(line: 35, column: 30, scope: !7)
!22 = !DILocation(line: 35, column: 43, scope: !7)
!23 = !DILocation(line: 36, column: 30, scope: !7)
!24 = !DILocation(line: 36, column: 35, scope: !7)
!25 = !DILocation(line: 37, column: 18, scope: !7)
!26 = !DILocation(line: 38, column: 18, scope: !7)
!27 = !DILocation(line: 40, column: 18, scope: !7)
!28 = !DILocation(line: 41, column: 26, scope: !7)
!29 = !DILocation(line: 42, column: 18, scope: !7)
!30 = !DILocation(line: 43, column: 19, scope: !7)
!31 = !DILocation(line: 44, column: 20, scope: !7)
!32 = !DILocation(line: 45, column: 20, scope: !7)
!33 = !DILocation(line: 46, column: 27, scope: !7)
!34 = !DILocation(line: 31, column: 21, scope: !7)
!35 = !DILocation(line: 47, column: 20, scope: !7)
!36 = !DILocation(line: 48, column: 19, scope: !7)
!37 = !DILocation(line: 49, column: 20, scope: !7)
!38 = !DILocation(line: 51, column: 20, scope: !7)
!39 = !DILocation(line: 52, column: 20, scope: !7)
!40 = !DILocation(line: 54, column: 43, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!44 = !DILocation(line: 55, column: 26, scope: !7)
!45 = !DILocation(line: 256, column: 15, scope: !46, inlinedAt: !44)
!46 = distinct !DILexicalBlockFile(scope: !42, file: !43, discriminator: 0)
!47 = !DILocation(line: 57, column: 20, scope: !7)
!48 = !DILocation(line: 31, column: 26, scope: !7)
!49 = !DILocation(line: 66, column: 20, scope: !7)
!50 = !DILocation(line: 68, column: 20, scope: !7)
!51 = !DILocation(line: 71, column: 35, scope: !7)
!52 = !DILocation(line: 72, column: 20, scope: !7)
!53 = !DILocation(line: 73, column: 4, scope: !7)
!54 = !DILocation(line: 74, column: 40, scope: !7)
!55 = !DILocation(line: 74, column: 4, scope: !7)
