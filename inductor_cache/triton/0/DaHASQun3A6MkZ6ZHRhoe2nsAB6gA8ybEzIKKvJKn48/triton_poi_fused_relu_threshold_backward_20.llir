; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_relu_threshold_backward_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 4, !dbg !12
  %10 = and i32 %9, 48, !dbg !12
  %11 = lshr i32 %8, 4, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %13, 8, !dbg !13
  %16 = or disjoint i32 %13, 12, !dbg !13
  %17 = or disjoint i32 %7, %12, !dbg !13
  %18 = or disjoint i32 %17, 16, !dbg !13
  %19 = or disjoint i32 %17, 32, !dbg !13
  %20 = or disjoint i32 %17, 48, !dbg !13
  %21 = icmp slt i32 %13, 512, !dbg !14
  %22 = icmp slt i32 %17, 512, !dbg !14
  %23 = icmp slt i32 %18, 512, !dbg !14
  %24 = icmp slt i32 %19, 512, !dbg !14
  %25 = icmp slt i32 %20, 512, !dbg !14
  %26 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %27 = shl i32 %26, 6, !dbg !16
  %28 = lshr i32 %8, 2, !dbg !17
  %29 = and i32 %28, 63, !dbg !17
  %30 = shl i32 %8, 2, !dbg !17
  %31 = and i32 %30, 60, !dbg !17
  %32 = or disjoint i32 %27, %29, !dbg !18
  %33 = or disjoint i32 %27, %31, !dbg !18
  %34 = icmp slt i32 %32, 64, !dbg !19
  %35 = icmp slt i32 %33, 64, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %36 = sdiv i32 %.frozen, 128, !dbg !20
  %37 = mul i32 %36, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %37, !dbg !21
  %38 = srem i32 %14, 128, !dbg !21
  %39 = srem i32 %15, 128, !dbg !21
  %40 = srem i32 %16, 128, !dbg !21
  %41 = shl i32 %32, 7, !dbg !22
  %42 = shl i32 %36, 13, !dbg !23
  %43 = add i32 %42, %41, !dbg !24
  %44 = add i32 %43, %.decomposed, !dbg !25
  %45 = add i32 %43, %38, !dbg !25
  %46 = add i32 %43, %39, !dbg !25
  %47 = add i32 %43, %40, !dbg !25
  %48 = sext i32 %44 to i64, !dbg !26
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !26
  %50 = sext i32 %45 to i64, !dbg !26
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !26
  %52 = sext i32 %46 to i64, !dbg !26
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !26
  %54 = sext i32 %47 to i64, !dbg !26
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !26
  %56 = and i1 %21, %34, !dbg !27
  %57 = and i1 %22, %35, !dbg !27
  %58 = and i1 %23, %35, !dbg !27
  %59 = and i1 %24, %35, !dbg !27
  %60 = and i1 %25, %35, !dbg !27
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %56) #2, !dbg !28
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !28
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !28
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %56) #2, !dbg !28
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !28
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !28
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !28
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !28
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %56) #2, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !28
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !28
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %56) #2, !dbg !28
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !28
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !28
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !28
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !28
  %81 = shl i32 %17, 6, !dbg !29
  %82 = shl i32 %18, 6, !dbg !29
  %83 = shl i32 %19, 6, !dbg !29
  %84 = shl i32 %20, 6, !dbg !29
  %85 = add i32 %33, %81, !dbg !30
  %86 = add i32 %33, %82, !dbg !30
  %87 = add i32 %33, %83, !dbg !30
  %88 = add i32 %33, %84, !dbg !30
  %89 = sext i32 %85 to i64, !dbg !31
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !31
  %91 = sext i32 %86 to i64, !dbg !31
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !31
  %93 = sext i32 %87 to i64, !dbg !31
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !31
  %95 = sext i32 %88 to i64, !dbg !31
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !31
  %97 = shl i32 %8, 10, !dbg !32
  %98 = and i32 %97, 3072, !dbg !32
  %99 = or disjoint i32 %98, %29, !dbg !32
  %100 = and i32 %30, 1020, !dbg !32
  %101 = lshr exact i32 %98, 4, !dbg !32
  %102 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %101, !dbg !32
  %103 = getelementptr float, ptr addrspace(3) %102, i32 %99, !dbg !32
  %104 = or disjoint i32 %99, 64, !dbg !32
  %105 = lshr i32 %104, 6, !dbg !32
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !32
  %107 = getelementptr float, ptr addrspace(3) %106, i32 %104, !dbg !32
  %108 = or disjoint i32 %99, 128, !dbg !32
  %109 = lshr i32 %108, 6, !dbg !32
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i32 %109, !dbg !32
  %111 = getelementptr float, ptr addrspace(3) %110, i32 %108, !dbg !32
  %112 = or disjoint i32 %99, 192, !dbg !32
  %113 = lshr i32 %112, 6, !dbg !32
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i32 %113, !dbg !32
  %115 = getelementptr float, ptr addrspace(3) %114, i32 %112, !dbg !32
  %116 = or disjoint i32 %99, 256, !dbg !32
  %117 = lshr i32 %116, 6, !dbg !32
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !32
  %119 = getelementptr float, ptr addrspace(3) %118, i32 %116, !dbg !32
  %120 = or disjoint i32 %99, 320, !dbg !32
  %121 = lshr i32 %120, 6, !dbg !32
  %122 = getelementptr float, ptr addrspace(3) @global_smem, i32 %121, !dbg !32
  %123 = getelementptr float, ptr addrspace(3) %122, i32 %120, !dbg !32
  %124 = or disjoint i32 %99, 384, !dbg !32
  %125 = lshr i32 %124, 6, !dbg !32
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i32 %125, !dbg !32
  %127 = getelementptr float, ptr addrspace(3) %126, i32 %124, !dbg !32
  %128 = or disjoint i32 %99, 448, !dbg !32
  %129 = lshr i32 %128, 6, !dbg !32
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i32 %129, !dbg !32
  %131 = getelementptr float, ptr addrspace(3) %130, i32 %128, !dbg !32
  %132 = or disjoint i32 %99, 512, !dbg !32
  %133 = lshr i32 %132, 6, !dbg !32
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i32 %133, !dbg !32
  %135 = getelementptr float, ptr addrspace(3) %134, i32 %132, !dbg !32
  %136 = or disjoint i32 %99, 576, !dbg !32
  %137 = lshr i32 %136, 6, !dbg !32
  %138 = getelementptr float, ptr addrspace(3) @global_smem, i32 %137, !dbg !32
  %139 = getelementptr float, ptr addrspace(3) %138, i32 %136, !dbg !32
  %140 = or disjoint i32 %99, 640, !dbg !32
  %141 = lshr i32 %140, 6, !dbg !32
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i32 %141, !dbg !32
  %143 = getelementptr float, ptr addrspace(3) %142, i32 %140, !dbg !32
  %144 = or disjoint i32 %99, 704, !dbg !32
  %145 = lshr i32 %144, 6, !dbg !32
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %145, !dbg !32
  %147 = getelementptr float, ptr addrspace(3) %146, i32 %144, !dbg !32
  %148 = or disjoint i32 %99, 768, !dbg !32
  %149 = lshr i32 %148, 6, !dbg !32
  %150 = getelementptr float, ptr addrspace(3) @global_smem, i32 %149, !dbg !32
  %151 = getelementptr float, ptr addrspace(3) %150, i32 %148, !dbg !32
  %152 = or disjoint i32 %99, 832, !dbg !32
  %153 = lshr i32 %152, 6, !dbg !32
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %153, !dbg !32
  %155 = getelementptr float, ptr addrspace(3) %154, i32 %152, !dbg !32
  %156 = or disjoint i32 %99, 896, !dbg !32
  %157 = lshr i32 %156, 6, !dbg !32
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %157, !dbg !32
  %159 = getelementptr float, ptr addrspace(3) %158, i32 %156, !dbg !32
  %160 = or disjoint i32 %99, 960, !dbg !32
  %161 = lshr i32 %160, 6, !dbg !32
  %162 = getelementptr float, ptr addrspace(3) @global_smem, i32 %161, !dbg !32
  %163 = getelementptr float, ptr addrspace(3) %162, i32 %160, !dbg !32
  %164 = lshr i32 %100, 6, !dbg !32
  %165 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %164, !dbg !32
  %166 = getelementptr inbounds float, ptr addrspace(3) %165, i32 %100, !dbg !32
  %167 = or disjoint i32 %100, 1, !dbg !32
  %168 = getelementptr inbounds float, ptr addrspace(3) %165, i32 %167, !dbg !32
  %169 = or disjoint i32 %100, 2, !dbg !32
  %170 = getelementptr inbounds float, ptr addrspace(3) %165, i32 %169, !dbg !32
  %171 = or disjoint i32 %100, 3, !dbg !32
  %172 = getelementptr inbounds float, ptr addrspace(3) %165, i32 %171, !dbg !32
  %173 = or disjoint i32 %100, 1024, !dbg !32
  %174 = lshr i32 %173, 6, !dbg !32
  %175 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %174, !dbg !32
  %176 = getelementptr inbounds float, ptr addrspace(3) %175, i32 %173, !dbg !32
  %177 = or disjoint i32 %100, 1025, !dbg !32
  %178 = lshr i32 %177, 6, !dbg !32
  %179 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %178, !dbg !32
  %180 = getelementptr inbounds float, ptr addrspace(3) %179, i32 %177, !dbg !32
  %181 = or disjoint i32 %100, 1026, !dbg !32
  %182 = lshr i32 %181, 6, !dbg !32
  %183 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %182, !dbg !32
  %184 = getelementptr inbounds float, ptr addrspace(3) %183, i32 %181, !dbg !32
  %185 = or disjoint i32 %100, 1027, !dbg !32
  %186 = lshr i32 %185, 6, !dbg !32
  %187 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %186, !dbg !32
  %188 = getelementptr inbounds float, ptr addrspace(3) %187, i32 %185, !dbg !32
  %189 = or disjoint i32 %100, 2048, !dbg !32
  %190 = lshr i32 %189, 6, !dbg !32
  %191 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %190, !dbg !32
  %192 = getelementptr inbounds float, ptr addrspace(3) %191, i32 %189, !dbg !32
  %193 = or disjoint i32 %100, 2049, !dbg !32
  %194 = lshr i32 %193, 6, !dbg !32
  %195 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %194, !dbg !32
  %196 = getelementptr inbounds float, ptr addrspace(3) %195, i32 %193, !dbg !32
  %197 = or disjoint i32 %100, 2050, !dbg !32
  %198 = lshr i32 %197, 6, !dbg !32
  %199 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %198, !dbg !32
  %200 = getelementptr inbounds float, ptr addrspace(3) %199, i32 %197, !dbg !32
  %201 = or disjoint i32 %100, 2051, !dbg !32
  %202 = lshr i32 %201, 6, !dbg !32
  %203 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %202, !dbg !32
  %204 = getelementptr inbounds float, ptr addrspace(3) %203, i32 %201, !dbg !32
  %205 = or disjoint i32 %100, 3072, !dbg !32
  %206 = lshr i32 %205, 6, !dbg !32
  %207 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %206, !dbg !32
  %208 = getelementptr inbounds float, ptr addrspace(3) %207, i32 %205, !dbg !32
  %209 = or disjoint i32 %100, 3073, !dbg !32
  %210 = lshr i32 %209, 6, !dbg !32
  %211 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %210, !dbg !32
  %212 = getelementptr inbounds float, ptr addrspace(3) %211, i32 %209, !dbg !32
  %213 = or disjoint i32 %100, 3074, !dbg !32
  %214 = lshr i32 %213, 6, !dbg !32
  %215 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %214, !dbg !32
  %216 = getelementptr inbounds float, ptr addrspace(3) %215, i32 %213, !dbg !32
  %217 = or disjoint i32 %100, 3075, !dbg !32
  %218 = lshr i32 %217, 6, !dbg !32
  %219 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %218, !dbg !32
  %220 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %217, !dbg !32
  %221 = getelementptr i1, ptr addrspace(1) %2, i64 %48, !dbg !33
  %222 = insertelement <4 x i32> poison, i32 %62, i64 0, !dbg !28
  %223 = insertelement <4 x i32> %222, i32 %63, i64 1, !dbg !28
  %224 = insertelement <4 x i32> %223, i32 %64, i64 2, !dbg !28
  %225 = insertelement <4 x i32> %224, i32 %65, i64 3, !dbg !28
  %226 = bitcast <4 x i32> %225 to <4 x float>, !dbg !28
  %227 = fcmp olt <4 x float> %226, zeroinitializer, !dbg !34
  %228 = select <4 x i1> %227, <4 x float> zeroinitializer, <4 x float> %226, !dbg !38
  %229 = fcmp ole <4 x float> %228, zeroinitializer, !dbg !39
  %230 = extractelement <4 x float> %228, i64 0, !dbg !32
  %231 = bitcast float %230 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %231, i1 true) #2, !dbg !32
  %232 = extractelement <4 x float> %228, i64 1, !dbg !32
  %233 = bitcast float %232 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %233, i1 true) #2, !dbg !32
  %234 = extractelement <4 x float> %228, i64 2, !dbg !32
  %235 = bitcast float %234 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %235, i1 true) #2, !dbg !32
  %236 = extractelement <4 x float> %228, i64 3, !dbg !32
  %237 = bitcast float %236 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %237, i1 true) #2, !dbg !32
  %238 = insertelement <4 x i32> poison, i32 %67, i64 0, !dbg !28
  %239 = insertelement <4 x i32> %238, i32 %68, i64 1, !dbg !28
  %240 = insertelement <4 x i32> %239, i32 %69, i64 2, !dbg !28
  %241 = insertelement <4 x i32> %240, i32 %70, i64 3, !dbg !28
  %242 = bitcast <4 x i32> %241 to <4 x float>, !dbg !28
  %243 = fcmp olt <4 x float> %242, zeroinitializer, !dbg !34
  %244 = select <4 x i1> %243, <4 x float> zeroinitializer, <4 x float> %242, !dbg !38
  %245 = fcmp ole <4 x float> %244, zeroinitializer, !dbg !39
  %246 = extractelement <4 x float> %244, i64 0, !dbg !32
  %247 = bitcast float %246 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %247, i1 true) #2, !dbg !32
  %248 = extractelement <4 x float> %244, i64 1, !dbg !32
  %249 = bitcast float %248 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %249, i1 true) #2, !dbg !32
  %250 = extractelement <4 x float> %244, i64 2, !dbg !32
  %251 = bitcast float %250 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %251, i1 true) #2, !dbg !32
  %252 = extractelement <4 x float> %244, i64 3, !dbg !32
  %253 = bitcast float %252 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %253, i1 true) #2, !dbg !32
  %254 = insertelement <4 x i32> poison, i32 %72, i64 0, !dbg !28
  %255 = insertelement <4 x i32> %254, i32 %73, i64 1, !dbg !28
  %256 = insertelement <4 x i32> %255, i32 %74, i64 2, !dbg !28
  %257 = insertelement <4 x i32> %256, i32 %75, i64 3, !dbg !28
  %258 = bitcast <4 x i32> %257 to <4 x float>, !dbg !28
  %259 = fcmp olt <4 x float> %258, zeroinitializer, !dbg !34
  %260 = select <4 x i1> %259, <4 x float> zeroinitializer, <4 x float> %258, !dbg !38
  %261 = fcmp ole <4 x float> %260, zeroinitializer, !dbg !39
  %262 = extractelement <4 x float> %260, i64 0, !dbg !32
  %263 = bitcast float %262 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %263, i1 true) #2, !dbg !32
  %264 = extractelement <4 x float> %260, i64 1, !dbg !32
  %265 = bitcast float %264 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %265, i1 true) #2, !dbg !32
  %266 = extractelement <4 x float> %260, i64 2, !dbg !32
  %267 = bitcast float %266 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %267, i1 true) #2, !dbg !32
  %268 = extractelement <4 x float> %260, i64 3, !dbg !32
  %269 = bitcast float %268 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %269, i1 true) #2, !dbg !32
  %270 = insertelement <4 x i32> poison, i32 %77, i64 0, !dbg !28
  %271 = insertelement <4 x i32> %270, i32 %78, i64 1, !dbg !28
  %272 = insertelement <4 x i32> %271, i32 %79, i64 2, !dbg !28
  %273 = insertelement <4 x i32> %272, i32 %80, i64 3, !dbg !28
  %274 = bitcast <4 x i32> %273 to <4 x float>, !dbg !28
  %275 = fcmp olt <4 x float> %274, zeroinitializer, !dbg !34
  %276 = select <4 x i1> %275, <4 x float> zeroinitializer, <4 x float> %274, !dbg !38
  %277 = fcmp ole <4 x float> %276, zeroinitializer, !dbg !39
  %278 = extractelement <4 x float> %276, i64 0, !dbg !32
  %279 = bitcast float %278 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %279, i1 true) #2, !dbg !32
  %280 = extractelement <4 x float> %276, i64 1, !dbg !32
  %281 = bitcast float %280 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %281, i1 true) #2, !dbg !32
  %282 = extractelement <4 x float> %276, i64 2, !dbg !32
  %283 = bitcast float %282 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %283, i1 true) #2, !dbg !32
  %284 = extractelement <4 x float> %276, i64 3, !dbg !32
  %285 = bitcast float %284 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %285, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %286 = load i32, ptr addrspace(3) %166, align 4, !dbg !32
  %287 = load i32, ptr addrspace(3) %168, align 4, !dbg !32
  %288 = load i32, ptr addrspace(3) %170, align 4, !dbg !32
  %289 = load i32, ptr addrspace(3) %172, align 4, !dbg !32
  %290 = load i32, ptr addrspace(3) %176, align 4, !dbg !32
  %291 = load i32, ptr addrspace(3) %180, align 4, !dbg !32
  %292 = load i32, ptr addrspace(3) %184, align 4, !dbg !32
  %293 = load i32, ptr addrspace(3) %188, align 4, !dbg !32
  %294 = load i32, ptr addrspace(3) %192, align 4, !dbg !32
  %295 = load i32, ptr addrspace(3) %196, align 4, !dbg !32
  %296 = load i32, ptr addrspace(3) %200, align 4, !dbg !32
  %297 = load i32, ptr addrspace(3) %204, align 4, !dbg !32
  %298 = load i32, ptr addrspace(3) %208, align 4, !dbg !32
  %299 = load i32, ptr addrspace(3) %212, align 4, !dbg !32
  %300 = load i32, ptr addrspace(3) %216, align 4, !dbg !32
  %301 = load i32, ptr addrspace(3) %220, align 4, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %286, i32 %287, i32 %288, i32 %289, ptr addrspace(1) %90, i1 %57) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %290, i32 %291, i32 %292, i32 %293, ptr addrspace(1) %92, i1 %58) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %294, i32 %295, i32 %296, i32 %297, ptr addrspace(1) %94, i1 %59) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %298, i32 %299, i32 %300, i32 %301, ptr addrspace(1) %96, i1 %60) #2, !dbg !32
  %302 = zext <4 x i1> %229 to <4 x i8>, !dbg !40
  %303 = bitcast <4 x i8> %302 to i32, !dbg !40
  %304 = zext <4 x i1> %245 to <4 x i8>, !dbg !40
  %305 = bitcast <4 x i8> %304 to i32, !dbg !40
  %306 = zext <4 x i1> %261 to <4 x i8>, !dbg !40
  %307 = bitcast <4 x i8> %306 to i32, !dbg !40
  %308 = zext <4 x i1> %277 to <4 x i8>, !dbg !40
  %309 = bitcast <4 x i8> %308 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %303, i32 %305, i32 %307, i32 %309, ptr addrspace(1) %221, i1 %56) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2qxwivbzmyxv7xcq7htkifd6rj52zqeolpyr5modelmltubwspo.py", directory: "inductor_cache/2q")
!4 = !{ptr @triton_poi_fused_relu_threshold_backward_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_relu_threshold_backward_20, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_relu_threshold_backward_20", linkageName: "triton_poi_fused_relu_threshold_backward_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 37, column: 33, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 25, scope: !7)
!32 = !DILocation(line: 37, column: 44, scope: !7)
!33 = !DILocation(line: 38, column: 25, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 34, column: 40, scope: !7)
!38 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 36, column: 19, scope: !7)
!40 = !DILocation(line: 38, column: 55, scope: !7)
!41 = !DILocation(line: 38, column: 4, scope: !7)
