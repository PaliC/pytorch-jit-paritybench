; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 3, !dbg !12
  %14 = and i32 %13, 24, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 4, !dbg !13
  %17 = icmp slt i32 %15, 512, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %19 = shl i32 %18, 5, !dbg !16
  %20 = lshr i32 %12, 2, !dbg !17
  %21 = and i32 %20, 31, !dbg !17
  %22 = or disjoint i32 %19, %21, !dbg !18
  %23 = icmp slt i32 %22, 64, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %24 = sdiv i32 %.frozen, 128, !dbg !20
  %25 = mul i32 %24, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %25, !dbg !21
  %26 = srem i32 %16, 128, !dbg !21
  %27 = shl i32 %22, 7, !dbg !22
  %28 = shl i32 %24, 13, !dbg !23
  %29 = add i32 %28, %27, !dbg !24
  %30 = add i32 %29, %.decomposed, !dbg !25
  %31 = add i32 %29, %26, !dbg !25
  %32 = sext i32 %30 to i64, !dbg !26
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !26
  %34 = sext i32 %31 to i64, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !26
  %36 = and i1 %17, %23, !dbg !27
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %36) #4, !dbg !28
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %36) #4, !dbg !28
  %39 = sext i32 %.decomposed to i64, !dbg !29
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !29
  %41 = sext i32 %26 to i64, !dbg !29
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !29
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %17) #4, !dbg !30
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %17) #4, !dbg !30
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !31
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !31
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %17) #4, !dbg !32
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !32
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !32
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !32
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !32
  %52 = bitcast i32 %48 to float, !dbg !32
  %53 = bitcast i32 %49 to float, !dbg !32
  %54 = bitcast i32 %50 to float, !dbg !32
  %55 = bitcast i32 %51 to float, !dbg !32
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %17) #4, !dbg !32
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !32
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !32
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !32
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !32
  %61 = bitcast i32 %57 to float, !dbg !32
  %62 = bitcast i32 %58 to float, !dbg !32
  %63 = bitcast i32 %59 to float, !dbg !32
  %64 = bitcast i32 %60 to float, !dbg !32
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !33
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !33
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %17) #4, !dbg !34
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %17) #4, !dbg !34
  %69 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !35
  %70 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !35
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %17) #4, !dbg !36
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 %17) #4, !dbg !36
  %73 = fadd float %52, 0x3EE4F8B580000000, !dbg !37
  %74 = fadd float %53, 0x3EE4F8B580000000, !dbg !37
  %75 = fadd float %54, 0x3EE4F8B580000000, !dbg !37
  %76 = fadd float %55, 0x3EE4F8B580000000, !dbg !37
  %77 = fadd float %61, 0x3EE4F8B580000000, !dbg !37
  %78 = fadd float %62, 0x3EE4F8B580000000, !dbg !37
  %79 = fadd float %63, 0x3EE4F8B580000000, !dbg !37
  %80 = fadd float %64, 0x3EE4F8B580000000, !dbg !37
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %81, 0, !dbg !38
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %82, 0, !dbg !38
  br i1 %.not.i, label %88, label %83, !dbg !38

83:                                               ; preds = %9
  br i1 %.not1.i, label %86, label %84, !dbg !38

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

88:                                               ; preds = %9
  br i1 %.not1.i, label %91, label %89, !dbg !38

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %84, %86, %89, %91
  %.0.i = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !38
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i3 = icmp eq i32 %93, 0, !dbg !38
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i6 = icmp eq i32 %94, 0, !dbg !38
  br i1 %.not.i3, label %100, label %95, !dbg !38

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %98, label %96, !dbg !38

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

100:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %103, label %101, !dbg !38

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

__nv_sqrtf.exit7:                                 ; preds = %96, %98, %101, %103
  %.0.i5 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !38
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i8 = icmp eq i32 %105, 0, !dbg !38
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i11 = icmp eq i32 %106, 0, !dbg !38
  br i1 %.not.i8, label %112, label %107, !dbg !38

107:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %110, label %108, !dbg !38

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

112:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %115, label %113, !dbg !38

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

__nv_sqrtf.exit12:                                ; preds = %108, %110, %113, %115
  %.0.i10 = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !38
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i13 = icmp eq i32 %117, 0, !dbg !38
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i16 = icmp eq i32 %118, 0, !dbg !38
  br i1 %.not.i13, label %124, label %119, !dbg !38

119:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %122, label %120, !dbg !38

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

124:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %127, label %125, !dbg !38

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

__nv_sqrtf.exit17:                                ; preds = %120, %122, %125, %127
  %.0.i15 = phi float [ %121, %120 ], [ %123, %122 ], [ %126, %125 ], [ %128, %127 ], !dbg !38
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i18 = icmp eq i32 %129, 0, !dbg !38
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i21 = icmp eq i32 %130, 0, !dbg !38
  br i1 %.not.i18, label %136, label %131, !dbg !38

131:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %134, label %132, !dbg !38

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #4, !dbg !38
  br label %__nv_sqrtf.exit22, !dbg !38

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #4, !dbg !38
  br label %__nv_sqrtf.exit22, !dbg !38

136:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %139, label %137, !dbg !38

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #4, !dbg !38
  br label %__nv_sqrtf.exit22, !dbg !38

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #4, !dbg !38
  br label %__nv_sqrtf.exit22, !dbg !38

__nv_sqrtf.exit22:                                ; preds = %132, %134, %137, %139
  %.0.i20 = phi float [ %133, %132 ], [ %135, %134 ], [ %138, %137 ], [ %140, %139 ], !dbg !38
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i23 = icmp eq i32 %141, 0, !dbg !38
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i26 = icmp eq i32 %142, 0, !dbg !38
  br i1 %.not.i23, label %148, label %143, !dbg !38

143:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %146, label %144, !dbg !38

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #4, !dbg !38
  br label %__nv_sqrtf.exit27, !dbg !38

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #4, !dbg !38
  br label %__nv_sqrtf.exit27, !dbg !38

148:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %151, label %149, !dbg !38

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #4, !dbg !38
  br label %__nv_sqrtf.exit27, !dbg !38

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #4, !dbg !38
  br label %__nv_sqrtf.exit27, !dbg !38

__nv_sqrtf.exit27:                                ; preds = %144, %146, %149, %151
  %.0.i25 = phi float [ %145, %144 ], [ %147, %146 ], [ %150, %149 ], [ %152, %151 ], !dbg !38
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i28 = icmp eq i32 %153, 0, !dbg !38
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i31 = icmp eq i32 %154, 0, !dbg !38
  br i1 %.not.i28, label %160, label %155, !dbg !38

155:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %158, label %156, !dbg !38

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #4, !dbg !38
  br label %__nv_sqrtf.exit32, !dbg !38

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #4, !dbg !38
  br label %__nv_sqrtf.exit32, !dbg !38

160:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %163, label %161, !dbg !38

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #4, !dbg !38
  br label %__nv_sqrtf.exit32, !dbg !38

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #4, !dbg !38
  br label %__nv_sqrtf.exit32, !dbg !38

__nv_sqrtf.exit32:                                ; preds = %156, %158, %161, %163
  %.0.i30 = phi float [ %157, %156 ], [ %159, %158 ], [ %162, %161 ], [ %164, %163 ], !dbg !38
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i33 = icmp eq i32 %165, 0, !dbg !38
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i36 = icmp eq i32 %166, 0, !dbg !38
  br i1 %.not.i33, label %172, label %167, !dbg !38

167:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %170, label %168, !dbg !38

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #4, !dbg !38
  br label %__nv_sqrtf.exit37, !dbg !38

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #4, !dbg !38
  br label %__nv_sqrtf.exit37, !dbg !38

172:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %175, label %173, !dbg !38

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #4, !dbg !38
  br label %__nv_sqrtf.exit37, !dbg !38

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #4, !dbg !38
  br label %__nv_sqrtf.exit37, !dbg !38

__nv_sqrtf.exit37:                                ; preds = %168, %170, %173, %175
  %.0.i35 = phi float [ %169, %168 ], [ %171, %170 ], [ %174, %173 ], [ %176, %175 ], !dbg !38
  %177 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !28
  %178 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !30
  %179 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !28
  %180 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !30
  %181 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !28
  %182 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !30
  %183 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !28
  %184 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !30
  %185 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !28
  %186 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !30
  %187 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !28
  %188 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !30
  %189 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !28
  %190 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !30
  %191 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !28
  %192 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !30
  %193 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !36
  %194 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !36
  %195 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !36
  %196 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !36
  %197 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !36
  %198 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !36
  %199 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !36
  %200 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !36
  %201 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !34
  %202 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !34
  %203 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !34
  %204 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !34
  %205 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !34
  %206 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !34
  %207 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !34
  %208 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !34
  %209 = shl i32 %12, 2, !dbg !17
  %210 = and i32 %209, 28, !dbg !17
  %211 = or disjoint i32 %19, %210, !dbg !18
  %212 = icmp slt i32 %211, 64, !dbg !19
  %213 = lshr i32 %12, 3, !dbg !12
  %214 = and i32 %213, 15, !dbg !12
  %215 = or disjoint i32 %214, %11, !dbg !13
  %216 = or disjoint i32 %215, 16, !dbg !13
  %217 = icmp slt i32 %216, 512, !dbg !14
  %218 = and i1 %217, %212, !dbg !27
  %219 = icmp slt i32 %215, 512, !dbg !14
  %220 = and i1 %219, %212, !dbg !27
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !39
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #4, !dbg !39
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #4, !dbg !39
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #4, !dbg !39
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #4, !dbg !39
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #4, !dbg !39
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #4, !dbg !39
  %229 = shl i32 %215, 6, !dbg !40
  %230 = shl i32 %216, 6, !dbg !40
  %231 = add i32 %211, %229, !dbg !41
  %232 = add i32 %211, %230, !dbg !41
  %233 = sext i32 %231 to i64, !dbg !42
  %234 = getelementptr float, ptr addrspace(1) %5, i64 %233, !dbg !42
  %235 = sext i32 %232 to i64, !dbg !42
  %236 = getelementptr float, ptr addrspace(1) %5, i64 %235, !dbg !42
  %237 = shl i32 %12, 8, !dbg !43
  %238 = and i32 %237, 768, !dbg !43
  %239 = or disjoint i32 %238, %21, !dbg !43
  %240 = and i32 %209, 508, !dbg !43
  %241 = lshr exact i32 %238, 3, !dbg !43
  %242 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %241, !dbg !43
  %243 = getelementptr float, ptr addrspace(3) %242, i32 %239, !dbg !43
  %244 = or disjoint i32 %239, 32, !dbg !43
  %245 = lshr i32 %244, 5, !dbg !43
  %246 = getelementptr float, ptr addrspace(3) @global_smem, i32 %245, !dbg !43
  %247 = getelementptr float, ptr addrspace(3) %246, i32 %244, !dbg !43
  %248 = or disjoint i32 %239, 64, !dbg !43
  %249 = lshr i32 %248, 5, !dbg !43
  %250 = getelementptr float, ptr addrspace(3) @global_smem, i32 %249, !dbg !43
  %251 = getelementptr float, ptr addrspace(3) %250, i32 %248, !dbg !43
  %252 = or disjoint i32 %239, 96, !dbg !43
  %253 = lshr i32 %252, 5, !dbg !43
  %254 = getelementptr float, ptr addrspace(3) @global_smem, i32 %253, !dbg !43
  %255 = getelementptr float, ptr addrspace(3) %254, i32 %252, !dbg !43
  %256 = or disjoint i32 %239, 128, !dbg !43
  %257 = lshr i32 %256, 5, !dbg !43
  %258 = getelementptr float, ptr addrspace(3) @global_smem, i32 %257, !dbg !43
  %259 = getelementptr float, ptr addrspace(3) %258, i32 %256, !dbg !43
  %260 = or disjoint i32 %239, 160, !dbg !43
  %261 = lshr i32 %260, 5, !dbg !43
  %262 = getelementptr float, ptr addrspace(3) @global_smem, i32 %261, !dbg !43
  %263 = getelementptr float, ptr addrspace(3) %262, i32 %260, !dbg !43
  %264 = or disjoint i32 %239, 192, !dbg !43
  %265 = lshr i32 %264, 5, !dbg !43
  %266 = getelementptr float, ptr addrspace(3) @global_smem, i32 %265, !dbg !43
  %267 = getelementptr float, ptr addrspace(3) %266, i32 %264, !dbg !43
  %268 = or disjoint i32 %239, 224, !dbg !43
  %269 = lshr i32 %268, 5, !dbg !43
  %270 = getelementptr float, ptr addrspace(3) @global_smem, i32 %269, !dbg !43
  %271 = getelementptr float, ptr addrspace(3) %270, i32 %268, !dbg !43
  %272 = lshr i32 %240, 5, !dbg !43
  %273 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %272, !dbg !43
  %274 = getelementptr inbounds float, ptr addrspace(3) %273, i32 %240, !dbg !43
  %275 = or disjoint i32 %240, 1, !dbg !43
  %276 = getelementptr inbounds float, ptr addrspace(3) %273, i32 %275, !dbg !43
  %277 = or disjoint i32 %240, 2, !dbg !43
  %278 = getelementptr inbounds float, ptr addrspace(3) %273, i32 %277, !dbg !43
  %279 = or disjoint i32 %240, 3, !dbg !43
  %280 = getelementptr inbounds float, ptr addrspace(3) %273, i32 %279, !dbg !43
  %281 = or disjoint i32 %240, 512, !dbg !43
  %282 = lshr i32 %281, 5, !dbg !43
  %283 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %282, !dbg !43
  %284 = getelementptr inbounds float, ptr addrspace(3) %283, i32 %281, !dbg !43
  %285 = or disjoint i32 %240, 513, !dbg !43
  %286 = lshr i32 %285, 5, !dbg !43
  %287 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %286, !dbg !43
  %288 = getelementptr inbounds float, ptr addrspace(3) %287, i32 %285, !dbg !43
  %289 = or disjoint i32 %240, 514, !dbg !43
  %290 = lshr i32 %289, 5, !dbg !43
  %291 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %290, !dbg !43
  %292 = getelementptr inbounds float, ptr addrspace(3) %291, i32 %289, !dbg !43
  %293 = or disjoint i32 %240, 515, !dbg !43
  %294 = lshr i32 %293, 5, !dbg !43
  %295 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %294, !dbg !43
  %296 = getelementptr inbounds float, ptr addrspace(3) %295, i32 %293, !dbg !43
  %297 = getelementptr i1, ptr addrspace(1) %6, i64 %32, !dbg !44
  %298 = insertelement <4 x i32> poison, i32 %191, i64 0, !dbg !28
  %299 = insertelement <4 x i32> %298, i32 %189, i64 1, !dbg !28
  %300 = insertelement <4 x i32> %299, i32 %187, i64 2, !dbg !28
  %301 = insertelement <4 x i32> %300, i32 %185, i64 3, !dbg !28
  %302 = bitcast <4 x i32> %301 to <4 x float>, !dbg !28
  %303 = insertelement <4 x i32> poison, i32 %192, i64 0, !dbg !30
  %304 = insertelement <4 x i32> %303, i32 %190, i64 1, !dbg !30
  %305 = insertelement <4 x i32> %304, i32 %188, i64 2, !dbg !30
  %306 = insertelement <4 x i32> %305, i32 %186, i64 3, !dbg !30
  %307 = bitcast <4 x i32> %306 to <4 x float>, !dbg !30
  %308 = fsub <4 x float> %302, %307, !dbg !45
  %309 = insertelement <4 x i32> poison, i32 %200, i64 0, !dbg !36
  %310 = insertelement <4 x i32> %309, i32 %199, i64 1, !dbg !36
  %311 = insertelement <4 x i32> %310, i32 %198, i64 2, !dbg !36
  %312 = insertelement <4 x i32> %311, i32 %197, i64 3, !dbg !36
  %313 = bitcast <4 x i32> %312 to <4 x float>, !dbg !36
  %314 = insertelement <4 x i32> poison, i32 %208, i64 0, !dbg !34
  %315 = insertelement <4 x i32> %314, i32 %207, i64 1, !dbg !34
  %316 = insertelement <4 x i32> %315, i32 %206, i64 2, !dbg !34
  %317 = insertelement <4 x i32> %316, i32 %205, i64 3, !dbg !34
  %318 = bitcast <4 x i32> %317 to <4 x float>, !dbg !34
  %319 = insertelement <4 x float> poison, float %221, i64 0, !dbg !46
  %320 = insertelement <4 x float> %319, float %222, i64 1, !dbg !46
  %321 = insertelement <4 x float> %320, float %223, i64 2, !dbg !46
  %322 = insertelement <4 x float> %321, float %224, i64 3, !dbg !46
  %323 = fmul <4 x float> %308, %322, !dbg !46
  %324 = fmul <4 x float> %323, %318, !dbg !47
  %325 = fadd <4 x float> %324, %313, !dbg !48
  %326 = fcmp olt <4 x float> %325, zeroinitializer, !dbg !49
  %327 = select <4 x i1> %326, <4 x float> zeroinitializer, <4 x float> %325, !dbg !53
  %328 = fcmp ole <4 x float> %327, zeroinitializer, !dbg !54
  %329 = extractelement <4 x float> %327, i64 0, !dbg !43
  %330 = bitcast float %329 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %330, i1 true) #4, !dbg !43
  %331 = extractelement <4 x float> %327, i64 1, !dbg !43
  %332 = bitcast float %331 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %332, i1 true) #4, !dbg !43
  %333 = extractelement <4 x float> %327, i64 2, !dbg !43
  %334 = bitcast float %333 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %251, <1 x i32> %334, i1 true) #4, !dbg !43
  %335 = extractelement <4 x float> %327, i64 3, !dbg !43
  %336 = bitcast float %335 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %336, i1 true) #4, !dbg !43
  %337 = insertelement <4 x i32> poison, i32 %183, i64 0, !dbg !28
  %338 = insertelement <4 x i32> %337, i32 %181, i64 1, !dbg !28
  %339 = insertelement <4 x i32> %338, i32 %179, i64 2, !dbg !28
  %340 = insertelement <4 x i32> %339, i32 %177, i64 3, !dbg !28
  %341 = bitcast <4 x i32> %340 to <4 x float>, !dbg !28
  %342 = insertelement <4 x i32> poison, i32 %184, i64 0, !dbg !30
  %343 = insertelement <4 x i32> %342, i32 %182, i64 1, !dbg !30
  %344 = insertelement <4 x i32> %343, i32 %180, i64 2, !dbg !30
  %345 = insertelement <4 x i32> %344, i32 %178, i64 3, !dbg !30
  %346 = bitcast <4 x i32> %345 to <4 x float>, !dbg !30
  %347 = fsub <4 x float> %341, %346, !dbg !45
  %348 = insertelement <4 x i32> poison, i32 %196, i64 0, !dbg !36
  %349 = insertelement <4 x i32> %348, i32 %195, i64 1, !dbg !36
  %350 = insertelement <4 x i32> %349, i32 %194, i64 2, !dbg !36
  %351 = insertelement <4 x i32> %350, i32 %193, i64 3, !dbg !36
  %352 = bitcast <4 x i32> %351 to <4 x float>, !dbg !36
  %353 = insertelement <4 x i32> poison, i32 %204, i64 0, !dbg !34
  %354 = insertelement <4 x i32> %353, i32 %203, i64 1, !dbg !34
  %355 = insertelement <4 x i32> %354, i32 %202, i64 2, !dbg !34
  %356 = insertelement <4 x i32> %355, i32 %201, i64 3, !dbg !34
  %357 = bitcast <4 x i32> %356 to <4 x float>, !dbg !34
  %358 = insertelement <4 x float> poison, float %225, i64 0, !dbg !46
  %359 = insertelement <4 x float> %358, float %226, i64 1, !dbg !46
  %360 = insertelement <4 x float> %359, float %227, i64 2, !dbg !46
  %361 = insertelement <4 x float> %360, float %228, i64 3, !dbg !46
  %362 = fmul <4 x float> %347, %361, !dbg !46
  %363 = fmul <4 x float> %362, %357, !dbg !47
  %364 = fadd <4 x float> %363, %352, !dbg !48
  %365 = fcmp olt <4 x float> %364, zeroinitializer, !dbg !49
  %366 = select <4 x i1> %365, <4 x float> zeroinitializer, <4 x float> %364, !dbg !53
  %367 = fcmp ole <4 x float> %366, zeroinitializer, !dbg !54
  %368 = extractelement <4 x float> %366, i64 0, !dbg !43
  %369 = bitcast float %368 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %369, i1 true) #4, !dbg !43
  %370 = extractelement <4 x float> %366, i64 1, !dbg !43
  %371 = bitcast float %370 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %371, i1 true) #4, !dbg !43
  %372 = extractelement <4 x float> %366, i64 2, !dbg !43
  %373 = bitcast float %372 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %373, i1 true) #4, !dbg !43
  %374 = extractelement <4 x float> %366, i64 3, !dbg !43
  %375 = bitcast float %374 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %375, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %376 = load i32, ptr addrspace(3) %274, align 4, !dbg !43
  %377 = load i32, ptr addrspace(3) %276, align 4, !dbg !43
  %378 = load i32, ptr addrspace(3) %278, align 4, !dbg !43
  %379 = load i32, ptr addrspace(3) %280, align 4, !dbg !43
  %380 = load i32, ptr addrspace(3) %284, align 4, !dbg !43
  %381 = load i32, ptr addrspace(3) %288, align 4, !dbg !43
  %382 = load i32, ptr addrspace(3) %292, align 4, !dbg !43
  %383 = load i32, ptr addrspace(3) %296, align 4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %376, i32 %377, i32 %378, i32 %379, ptr addrspace(1) %234, i1 %220) #4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %380, i32 %381, i32 %382, i32 %383, ptr addrspace(1) %236, i1 %218) #4, !dbg !43
  %384 = zext <4 x i1> %328 to <4 x i8>, !dbg !55
  %385 = bitcast <4 x i8> %384 to i32, !dbg !55
  %386 = zext <4 x i1> %367 to <4 x i8>, !dbg !55
  %387 = bitcast <4 x i8> %386 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %385, i32 %387, ptr addrspace(1) %297, i1 %36) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm5iormxdcs5jszhs2aydlbrwv7kausmedxsoh2yuumioowga4ce.py", directory: "inductor_cache/m5")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 52, column: 33, scope: !7)
!41 = !DILocation(line: 52, column: 30, scope: !7)
!42 = !DILocation(line: 52, column: 25, scope: !7)
!43 = !DILocation(line: 52, column: 45, scope: !7)
!44 = !DILocation(line: 53, column: 25, scope: !7)
!45 = !DILocation(line: 37, column: 18, scope: !7)
!46 = !DILocation(line: 45, column: 19, scope: !7)
!47 = !DILocation(line: 46, column: 20, scope: !7)
!48 = !DILocation(line: 47, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 49, column: 42, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 51, column: 21, scope: !7)
!55 = !DILocation(line: 53, column: 56, scope: !7)
!56 = !DILocation(line: 53, column: 4, scope: !7)
