; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused__softmax_8(ptr addrspace(1) %0, i32 %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %5 = shl i32 %4, 7, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = lshr i32 %6, 2, !dbg !12
  %8 = and i32 %7, 63, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 64, !dbg !13
  %11 = icmp slt i32 %9, 256, !dbg !14
  %12 = icmp slt i32 %10, 256, !dbg !14
  %13 = shl i32 %6, 2, !dbg !15
  %14 = and i32 %13, 12, !dbg !15
  %15 = shl i32 %9, 4, !dbg !16
  %16 = shl i32 %10, 4, !dbg !16
  %17 = or disjoint i32 %15, %14, !dbg !17
  %18 = or disjoint i32 %16, %14, !dbg !17
  %19 = sext i32 %17 to i64, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !18
  %21 = sext i32 %18 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !18
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #2, !dbg !19
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !19
  %28 = bitcast i32 %24 to float, !dbg !19
  %29 = bitcast i32 %25 to float, !dbg !19
  %30 = bitcast i32 %26 to float, !dbg !19
  %31 = bitcast i32 %27 to float, !dbg !19
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #2, !dbg !19
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !19
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !19
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !19
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !19
  %37 = bitcast i32 %33 to float, !dbg !19
  %38 = bitcast i32 %34 to float, !dbg !19
  %39 = bitcast i32 %35 to float, !dbg !19
  %40 = bitcast i32 %36 to float, !dbg !19
  %41 = select i1 %11, float %28, float 0xFFF0000000000000, !dbg !20
  %42 = select i1 %11, float %29, float 0xFFF0000000000000, !dbg !20
  %43 = select i1 %11, float %30, float 0xFFF0000000000000, !dbg !20
  %44 = select i1 %11, float %31, float 0xFFF0000000000000, !dbg !20
  %45 = select i1 %12, float %37, float 0xFFF0000000000000, !dbg !20
  %46 = select i1 %12, float %38, float 0xFFF0000000000000, !dbg !20
  %47 = select i1 %12, float %39, float 0xFFF0000000000000, !dbg !20
  %48 = select i1 %12, float %40, float 0xFFF0000000000000, !dbg !20
  %49 = fcmp ogt float %41, %42, !dbg !21
  %50 = fcmp uno float %41, 0.000000e+00, !dbg !26
  %51 = or i1 %49, %50, !dbg !27
  %52 = select i1 %51, float %41, float %42, !dbg !28
  %53 = fcmp ogt float %52, %43, !dbg !21
  %54 = fcmp uno float %52, 0.000000e+00, !dbg !26
  %55 = or i1 %53, %54, !dbg !27
  %56 = select i1 %55, float %52, float %43, !dbg !28
  %57 = fcmp ogt float %56, %44, !dbg !21
  %58 = fcmp uno float %56, 0.000000e+00, !dbg !26
  %59 = or i1 %57, %58, !dbg !27
  %60 = select i1 %59, float %56, float %44, !dbg !28
  %61 = fcmp ogt float %45, %46, !dbg !21
  %62 = fcmp uno float %45, 0.000000e+00, !dbg !26
  %63 = or i1 %61, %62, !dbg !27
  %64 = select i1 %63, float %45, float %46, !dbg !28
  %65 = fcmp ogt float %64, %47, !dbg !21
  %66 = fcmp uno float %64, 0.000000e+00, !dbg !26
  %67 = or i1 %65, %66, !dbg !27
  %68 = select i1 %67, float %64, float %47, !dbg !28
  %69 = fcmp ogt float %68, %48, !dbg !21
  %70 = fcmp uno float %68, 0.000000e+00, !dbg !26
  %71 = or i1 %69, %70, !dbg !27
  %72 = select i1 %71, float %68, float %48, !dbg !28
  %73 = bitcast float %60 to i32, !dbg !29
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 2, i32 31), !dbg !29
  %75 = bitcast i32 %74 to float, !dbg !29
  %76 = fcmp ogt float %60, %75, !dbg !21
  %77 = fcmp uno float %60, 0.000000e+00, !dbg !26
  %78 = or i1 %76, %77, !dbg !27
  %79 = select i1 %78, float %60, float %75, !dbg !28
  %80 = bitcast float %79 to i32, !dbg !29
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 1, i32 31), !dbg !29
  %82 = bitcast i32 %81 to float, !dbg !29
  %83 = fcmp ogt float %79, %82, !dbg !21
  %84 = fcmp uno float %79, 0.000000e+00, !dbg !26
  %85 = or i1 %83, %84, !dbg !27
  %86 = select i1 %85, float %79, float %82, !dbg !28
  %87 = bitcast float %72 to i32, !dbg !29
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 2, i32 31), !dbg !29
  %89 = bitcast i32 %88 to float, !dbg !29
  %90 = fcmp ogt float %72, %89, !dbg !21
  %91 = fcmp uno float %72, 0.000000e+00, !dbg !26
  %92 = or i1 %90, %91, !dbg !27
  %93 = select i1 %92, float %72, float %89, !dbg !28
  %94 = bitcast float %93 to i32, !dbg !29
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 1, i32 31), !dbg !29
  %96 = bitcast i32 %95 to float, !dbg !29
  %97 = fcmp ogt float %93, %96, !dbg !21
  %98 = fcmp uno float %93, 0.000000e+00, !dbg !26
  %99 = or i1 %97, %98, !dbg !27
  %100 = select i1 %99, float %93, float %96, !dbg !28
  %101 = fsub float %28, %86, !dbg !30
  %102 = fsub float %29, %86, !dbg !30
  %103 = fsub float %30, %86, !dbg !30
  %104 = fsub float %31, %86, !dbg !30
  %105 = fsub float %37, %100, !dbg !30
  %106 = fsub float %38, %100, !dbg !30
  %107 = fsub float %39, %100, !dbg !30
  %108 = fsub float %40, %100, !dbg !30
  %109 = fmul float %101, 0x3FF7154760000000, !dbg !31
  %110 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %109) #2, !dbg !31
  %111 = fmul float %102, 0x3FF7154760000000, !dbg !31
  %112 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %111) #2, !dbg !31
  %113 = fmul float %103, 0x3FF7154760000000, !dbg !31
  %114 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %113) #2, !dbg !31
  %115 = fmul float %104, 0x3FF7154760000000, !dbg !31
  %116 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %115) #2, !dbg !31
  %117 = fmul float %105, 0x3FF7154760000000, !dbg !31
  %118 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %117) #2, !dbg !31
  %119 = fmul float %106, 0x3FF7154760000000, !dbg !31
  %120 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %119) #2, !dbg !31
  %121 = fmul float %107, 0x3FF7154760000000, !dbg !31
  %122 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %121) #2, !dbg !31
  %123 = fmul float %108, 0x3FF7154760000000, !dbg !31
  %124 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %123) #2, !dbg !31
  %125 = fadd float %110, %112, !dbg !32
  %126 = fadd float %125, %114, !dbg !32
  %127 = fadd float %126, %116, !dbg !32
  %128 = select i1 %11, float %127, float 0.000000e+00, !dbg !32
  %129 = fadd float %118, %120, !dbg !32
  %130 = fadd float %129, %122, !dbg !32
  %131 = fadd float %130, %124, !dbg !32
  %132 = select i1 %12, float %131, float 0.000000e+00, !dbg !32
  %133 = bitcast float %128 to i32, !dbg !37
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 2, i32 31), !dbg !37
  %135 = bitcast i32 %134 to float, !dbg !37
  %136 = fadd float %128, %135, !dbg !32
  %137 = bitcast float %136 to i32, !dbg !37
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 1, i32 31), !dbg !37
  %139 = bitcast i32 %138 to float, !dbg !37
  %140 = fadd float %136, %139, !dbg !32
  %141 = bitcast float %132 to i32, !dbg !37
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 2, i32 31), !dbg !37
  %143 = bitcast i32 %142 to float, !dbg !37
  %144 = fadd float %132, %143, !dbg !32
  %145 = bitcast float %144 to i32, !dbg !37
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 1, i32 31), !dbg !37
  %147 = bitcast i32 %146 to float, !dbg !37
  %148 = fadd float %144, %147, !dbg !32
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float %140) #2, !dbg !38
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float %140) #2, !dbg !38
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %114, float %140) #2, !dbg !38
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float %140) #2, !dbg !38
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float %148) #2, !dbg !38
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float %148) #2, !dbg !38
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float %148) #2, !dbg !38
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %124, float %148) #2, !dbg !38
  %157 = bitcast float %149 to i32, !dbg !39
  %158 = bitcast float %150 to i32, !dbg !39
  %159 = bitcast float %151 to i32, !dbg !39
  %160 = bitcast float %152 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %157, i32 %158, i32 %159, i32 %160, ptr addrspace(1) %20, i1 %11) #2, !dbg !39
  %161 = bitcast float %153 to i32, !dbg !39
  %162 = bitcast float %154 to i32, !dbg !39
  %163 = bitcast float %155 to i32, !dbg !39
  %164 = bitcast float %156 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %161, i32 %162, i32 %163, i32 %164, ptr addrspace(1) %22, i1 %12) #2, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7qwwwunlfsnvglp2l65zdcg7yncvtjtzbwnlbz3ctkwqanic7ny.py", directory: "inductor_cache/7q")
!4 = !{ptr @triton_per_fused__softmax_8, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__softmax_8", linkageName: "triton_per_fused__softmax_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 42, scope: !7)
!17 = !DILocation(line: 31, column: 39, scope: !7)
!18 = !DILocation(line: 31, column: 34, scope: !7)
!19 = !DILocation(line: 31, column: 47, scope: !7)
!20 = !DILocation(line: 33, column: 33, scope: !7)
!21 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 34, column: 37, scope: !7)
!26 = !DILocation(line: 120, column: 21, scope: !22, inlinedAt: !25)
!27 = !DILocation(line: 120, column: 16, scope: !22, inlinedAt: !25)
!28 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !25)
!29 = !DILocation(line: 131, column: 29, scope: !24, inlinedAt: !25)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 23, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !36)
!33 = distinct !DILexicalBlockFile(scope: !35, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!35 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!36 = !DILocation(line: 39, column: 25, scope: !7)
!37 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 40, column: 19, scope: !7)
!39 = !DILocation(line: 41, column: 48, scope: !7)
!40 = !DILocation(line: 41, column: 4, scope: !7)
