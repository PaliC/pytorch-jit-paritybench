; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 124, !dbg !12
  %10 = lshr i32 %7, 5, !dbg !12
  %11 = and i32 %7, 127, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %.frozen = freeze i32 %12, !dbg !14
  %14 = sdiv i32 %.frozen, 2048, !dbg !14
  %15 = mul i32 %14, 2048, !dbg !15
  %.decomposed = sub i32 %.frozen, %15, !dbg !15
  %16 = shl i32 %10, 11, !dbg !16
  %17 = and i32 %16, 14336, !dbg !16
  %18 = add nsw i32 %.decomposed, %17, !dbg !17
  %19 = shl i32 %14, 14, !dbg !18
  %20 = add i32 %18, %19, !dbg !19
  %21 = sext i32 %20 to i64, !dbg !20
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !20
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !21
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !21
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !21
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !21
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !21
  %28 = and i32 %10, 7, !dbg !22
  %29 = shl nuw nsw i32 %9, 3, !dbg !22
  %30 = or disjoint i32 %29, %28, !dbg !22
  %31 = zext nneg i32 %30 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(3) @global_smem, i64 %31, !dbg !22
  %33 = insertelement <1 x i32> poison, i32 %24, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %32, <1 x i32> %33, i1 true) #3, !dbg !22
  %34 = or disjoint i32 %29, 8, !dbg !22
  %35 = or disjoint i32 %34, %28, !dbg !22
  %36 = zext nneg i32 %35 to i64, !dbg !22
  %37 = getelementptr float, ptr addrspace(3) @global_smem, i64 %36, !dbg !22
  %38 = insertelement <1 x i32> poison, i32 %25, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %37, <1 x i32> %38, i1 true) #3, !dbg !22
  %39 = or disjoint i32 %29, 16, !dbg !22
  %40 = or disjoint i32 %39, %28, !dbg !22
  %41 = zext nneg i32 %40 to i64, !dbg !22
  %42 = getelementptr float, ptr addrspace(3) @global_smem, i64 %41, !dbg !22
  %43 = insertelement <1 x i32> poison, i32 %26, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, <1 x i32> %43, i1 true) #3, !dbg !22
  %44 = or disjoint i32 %29, 24, !dbg !22
  %45 = or disjoint i32 %44, %28, !dbg !22
  %46 = zext nneg i32 %45 to i64, !dbg !22
  %47 = getelementptr float, ptr addrspace(3) @global_smem, i64 %46, !dbg !22
  %48 = insertelement <1 x i32> poison, i32 %27, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %48, i1 true) #3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %49 = icmp slt i32 %7, 1024, !dbg !22
  %50 = sext i32 %7 to i64, !dbg !22
  %51 = getelementptr float, ptr addrspace(3) @global_smem, i64 %50, !dbg !22
  %52 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %51, i1 %49) #3, !dbg !22
  %53 = bitcast i32 %52 to float, !dbg !22
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 4, i32 31), !dbg !22
  %55 = bitcast i32 %54 to float, !dbg !22
  %56 = fadd float %53, %55, !dbg !26
  %57 = bitcast float %56 to i32, !dbg !22
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 2, i32 31), !dbg !22
  %59 = bitcast i32 %58 to float, !dbg !22
  %60 = fadd float %56, %59, !dbg !26
  %61 = bitcast float %60 to i32, !dbg !22
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 1, i32 31), !dbg !22
  %63 = bitcast i32 %62 to float, !dbg !22
  %64 = fadd float %60, %63, !dbg !26
  %65 = and i32 %7, 7, !dbg !22
  %66 = icmp eq i32 %65, 0, !dbg !22
  %67 = and i1 %49, %66, !dbg !22
  %68 = bitcast float %64 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %68, i1 %67) #3, !dbg !22
  %69 = add i32 %7, 256, !dbg !22
  %70 = sext i32 %69 to i64, !dbg !22
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i64 %70, !dbg !22
  %72 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %71, i1 %49) #3, !dbg !22
  %73 = bitcast i32 %72 to float, !dbg !22
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 4, i32 31), !dbg !22
  %75 = bitcast i32 %74 to float, !dbg !22
  %76 = fadd float %73, %75, !dbg !26
  %77 = bitcast float %76 to i32, !dbg !22
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 2, i32 31), !dbg !22
  %79 = bitcast i32 %78 to float, !dbg !22
  %80 = fadd float %76, %79, !dbg !26
  %81 = bitcast float %80 to i32, !dbg !22
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 1, i32 31), !dbg !22
  %83 = bitcast i32 %82 to float, !dbg !22
  %84 = fadd float %80, %83, !dbg !26
  %85 = bitcast float %84 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %85, i1 %67) #3, !dbg !22
  %86 = add i32 %7, 512, !dbg !22
  %87 = sext i32 %86 to i64, !dbg !22
  %88 = getelementptr float, ptr addrspace(3) @global_smem, i64 %87, !dbg !22
  %89 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %88, i1 %49) #3, !dbg !22
  %90 = bitcast i32 %89 to float, !dbg !22
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 4, i32 31), !dbg !22
  %92 = bitcast i32 %91 to float, !dbg !22
  %93 = fadd float %90, %92, !dbg !26
  %94 = bitcast float %93 to i32, !dbg !22
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 2, i32 31), !dbg !22
  %96 = bitcast i32 %95 to float, !dbg !22
  %97 = fadd float %93, %96, !dbg !26
  %98 = bitcast float %97 to i32, !dbg !22
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 1, i32 31), !dbg !22
  %100 = bitcast i32 %99 to float, !dbg !22
  %101 = fadd float %97, %100, !dbg !26
  %102 = bitcast float %101 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %102, i1 %67) #3, !dbg !22
  %103 = add i32 %7, 768, !dbg !22
  %104 = sext i32 %103 to i64, !dbg !22
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i64 %104, !dbg !22
  %106 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %105, i1 %49) #3, !dbg !22
  %107 = bitcast i32 %106 to float, !dbg !22
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 4, i32 31), !dbg !22
  %109 = bitcast i32 %108 to float, !dbg !22
  %110 = fadd float %107, %109, !dbg !26
  %111 = bitcast float %110 to i32, !dbg !22
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 2, i32 31), !dbg !22
  %113 = bitcast i32 %112 to float, !dbg !22
  %114 = fadd float %110, %113, !dbg !26
  %115 = bitcast float %114 to i32, !dbg !22
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 1, i32 31), !dbg !22
  %117 = bitcast i32 %116 to float, !dbg !22
  %118 = fadd float %114, %117, !dbg !26
  %119 = bitcast float %118 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %119, i1 %67) #3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %120 = zext nneg i32 %29 to i64, !dbg !22
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i64 %120, !dbg !22
  %122 = load i32, ptr addrspace(3) %121, align 16, !dbg !22
  %123 = zext nneg i32 %34 to i64, !dbg !22
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i64 %123, !dbg !22
  %125 = load i32, ptr addrspace(3) %124, align 16, !dbg !22
  %126 = zext nneg i32 %39 to i64, !dbg !22
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i64 %126, !dbg !22
  %128 = load i32, ptr addrspace(3) %127, align 16, !dbg !22
  %129 = zext nneg i32 %44 to i64, !dbg !22
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i64 %129, !dbg !22
  %131 = load i32, ptr addrspace(3) %130, align 16, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %132 = zext nneg i32 %9 to i64, !dbg !28
  %133 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %132, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %133, i32 %122, i32 %125, i32 %128, i32 %131, i1 true) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %134 = zext nneg i32 %11 to i64, !dbg !28
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %134, !dbg !28
  %136 = load float, ptr addrspace(3) %135, align 4, !dbg !28
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float 1.024000e+03) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %138 = sext i32 %13 to i64, !dbg !30
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !30
  %140 = and i32 %7, 128, !dbg !31
  %141 = icmp eq i32 %140, 0, !dbg !31
  %142 = bitcast float %137 to i32, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %142, ptr addrspace(1) %139, i1 %141) #3, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3h6vtuhwnijwrspu5ks4yjaduhgebm4txby5otln62kh5mgu5pe.py", directory: "inductor_cache/3h")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_mean_relu_7", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_mean_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 31, column: 19, scope: !7)
!15 = !DILocation(line: 30, column: 19, scope: !7)
!16 = !DILocation(line: 33, column: 40, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 33, column: 51, scope: !7)
!19 = !DILocation(line: 33, column: 45, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 56, scope: !7)
!22 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = !DILocation(line: 35, column: 24, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !25)
!27 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!28 = !DILocation(line: 37, column: 18, scope: !7)
!29 = !DILocation(line: 38, column: 4, scope: !7)
!30 = !DILocation(line: 39, column: 28, scope: !7)
!31 = !DILocation(line: 39, column: 39, scope: !7)
!32 = !DILocation(line: 39, column: 4, scope: !7)
