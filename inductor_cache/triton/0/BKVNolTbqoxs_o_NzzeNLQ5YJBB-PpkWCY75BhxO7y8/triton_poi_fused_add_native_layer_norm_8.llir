; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_native_layer_norm_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 7, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 127, !dbg !12
  %12 = or disjoint i32 %9, %11, !dbg !13
  %13 = icmp slt i32 %12, 256, !dbg !14
  %14 = sdiv i32 %12, 4, !dbg !15
  %15 = srem i32 %14, 16, !dbg !16
  %16 = sdiv i32 %12, 64, !dbg !17
  %17 = srem i32 %12, 16, !dbg !18
  %18 = shl nsw i32 %15, 2, !dbg !19
  %19 = sext i32 %18 to i64, !dbg !20
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !20
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 %13) #1, !dbg !21
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !22
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %13) #1, !dbg !23
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #1, !dbg !24
  %25 = shl nsw i32 %17, 2, !dbg !25
  %26 = shl nsw i32 %16, 6, !dbg !26
  %27 = add i32 %25, %26, !dbg !27
  %28 = sext i32 %27 to i64, !dbg !28
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !28
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %13) #1, !dbg !29
  %31 = or disjoint i32 %18, 1, !dbg !30
  %32 = sext i32 %31 to i64, !dbg !31
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !31
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %13) #1, !dbg !32
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !33
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %13) #1, !dbg !34
  %37 = getelementptr i8, ptr addrspace(1) %2, i64 4, !dbg !35
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !36
  %39 = or disjoint i32 %25, 1, !dbg !37
  %40 = add i32 %39, %26, !dbg !38
  %41 = sext i32 %40 to i64, !dbg !39
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !39
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %13) #1, !dbg !40
  %44 = or disjoint i32 %18, 2, !dbg !41
  %45 = sext i32 %44 to i64, !dbg !42
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !42
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %13) #1, !dbg !43
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !44
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %13) #1, !dbg !45
  %50 = getelementptr i8, ptr addrspace(1) %2, i64 8, !dbg !46
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !47
  %52 = or disjoint i32 %25, 2, !dbg !48
  %53 = add i32 %52, %26, !dbg !49
  %54 = sext i32 %53 to i64, !dbg !50
  %55 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !50
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %13) #1, !dbg !51
  %57 = or disjoint i32 %18, 3, !dbg !52
  %58 = sext i32 %57 to i64, !dbg !53
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !53
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %13) #1, !dbg !54
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !55
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %13) #1, !dbg !56
  %63 = getelementptr i8, ptr addrspace(1) %2, i64 12, !dbg !57
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !58
  %65 = or disjoint i32 %25, 3, !dbg !59
  %66 = add i32 %65, %26, !dbg !60
  %67 = sext i32 %66 to i64, !dbg !61
  %68 = getelementptr float, ptr addrspace(1) %3, i64 %67, !dbg !61
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %13) #1, !dbg !62
  %70 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !21
  %71 = insertelement <2 x i32> %70, i32 %34, i64 1, !dbg !21
  %72 = bitcast <2 x i32> %71 to <2 x float>, !dbg !21
  %73 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !23
  %74 = insertelement <2 x i32> %73, i32 %36, i64 1, !dbg !23
  %75 = bitcast <2 x i32> %74 to <2 x float>, !dbg !23
  %76 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !24
  %77 = insertelement <2 x i32> %76, i32 %38, i64 1, !dbg !24
  %78 = bitcast <2 x i32> %77 to <2 x float>, !dbg !24
  %79 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !29
  %80 = insertelement <2 x i32> %79, i32 %43, i64 1, !dbg !29
  %81 = bitcast <2 x i32> %80 to <2 x float>, !dbg !29
  %82 = fadd <2 x float> %75, %78, !dbg !63
  %83 = fadd <2 x float> %82, %72, !dbg !64
  %84 = fadd <2 x float> %83, %81, !dbg !65
  %85 = extractelement <2 x float> %84, i64 0, !dbg !66
  %86 = extractelement <2 x float> %84, i64 1, !dbg !67
  %87 = fadd float %85, %86, !dbg !68
  %88 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !43
  %89 = insertelement <2 x i32> %88, i32 %60, i64 1, !dbg !43
  %90 = bitcast <2 x i32> %89 to <2 x float>, !dbg !43
  %91 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !45
  %92 = insertelement <2 x i32> %91, i32 %62, i64 1, !dbg !45
  %93 = bitcast <2 x i32> %92 to <2 x float>, !dbg !45
  %94 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !47
  %95 = insertelement <2 x i32> %94, i32 %64, i64 1, !dbg !47
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !47
  %97 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !51
  %98 = insertelement <2 x i32> %97, i32 %69, i64 1, !dbg !51
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !51
  %100 = fadd <2 x float> %93, %96, !dbg !69
  %101 = fadd <2 x float> %100, %90, !dbg !70
  %102 = fadd <2 x float> %101, %99, !dbg !71
  %103 = extractelement <2 x float> %102, i64 0, !dbg !72
  %104 = fadd float %87, %103, !dbg !73
  %105 = extractelement <2 x float> %102, i64 1, !dbg !74
  %106 = fadd float %104, %105, !dbg !75
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float 4.000000e+00) #1, !dbg !76
  %108 = fsub float %85, %107, !dbg !66
  %109 = fmul float %108, %108, !dbg !77
  %110 = fsub float %86, %107, !dbg !67
  %111 = fmul float %110, %110, !dbg !78
  %112 = fadd float %109, %111, !dbg !79
  %113 = fsub float %103, %107, !dbg !72
  %114 = fmul float %113, %113, !dbg !80
  %115 = fadd float %114, %112, !dbg !81
  %116 = fsub float %105, %107, !dbg !74
  %117 = fmul float %116, %116, !dbg !82
  %118 = fadd float %115, %117, !dbg !83
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float 4.000000e+00) #1, !dbg !84
  %120 = sext i32 %12 to i64, !dbg !85
  %121 = getelementptr float, ptr addrspace(1) %4, i64 %120, !dbg !85
  %122 = bitcast float %107 to i32, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %122, ptr addrspace(1) %121, i1 %13) #1, !dbg !86
  %123 = getelementptr float, ptr addrspace(1) %5, i64 %120, !dbg !87
  %124 = bitcast float %119 to i32, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %124, ptr addrspace(1) %123, i1 %13) #1, !dbg !88
  ret void, !dbg !89
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czxsik7xujqccneazakoxpq5aixquhfkxytci5em6apk3rxtsa7t.py", directory: "inductor_cache/zx")
!4 = !{ptr @triton_poi_fused_add_native_layer_norm_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_layer_norm_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_layer_norm_8", linkageName: "triton_poi_fused_add_native_layer_norm_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 32, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 37, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 37, scope: !7)
!24 = !DILocation(line: 30, column: 19, scope: !7)
!25 = !DILocation(line: 32, column: 32, scope: !7)
!26 = !DILocation(line: 32, column: 40, scope: !7)
!27 = !DILocation(line: 32, column: 37, scope: !7)
!28 = !DILocation(line: 32, column: 30, scope: !7)
!29 = !DILocation(line: 32, column: 45, scope: !7)
!30 = !DILocation(line: 33, column: 34, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 41, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 41, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 20, scope: !7)
!37 = !DILocation(line: 37, column: 35, scope: !7)
!38 = !DILocation(line: 37, column: 42, scope: !7)
!39 = !DILocation(line: 37, column: 31, scope: !7)
!40 = !DILocation(line: 37, column: 50, scope: !7)
!41 = !DILocation(line: 38, column: 35, scope: !7)
!42 = !DILocation(line: 38, column: 31, scope: !7)
!43 = !DILocation(line: 38, column: 42, scope: !7)
!44 = !DILocation(line: 39, column: 31, scope: !7)
!45 = !DILocation(line: 39, column: 42, scope: !7)
!46 = !DILocation(line: 40, column: 31, scope: !7)
!47 = !DILocation(line: 40, column: 20, scope: !7)
!48 = !DILocation(line: 42, column: 35, scope: !7)
!49 = !DILocation(line: 42, column: 42, scope: !7)
!50 = !DILocation(line: 42, column: 31, scope: !7)
!51 = !DILocation(line: 42, column: 50, scope: !7)
!52 = !DILocation(line: 43, column: 35, scope: !7)
!53 = !DILocation(line: 43, column: 31, scope: !7)
!54 = !DILocation(line: 43, column: 42, scope: !7)
!55 = !DILocation(line: 44, column: 31, scope: !7)
!56 = !DILocation(line: 44, column: 42, scope: !7)
!57 = !DILocation(line: 45, column: 31, scope: !7)
!58 = !DILocation(line: 45, column: 20, scope: !7)
!59 = !DILocation(line: 47, column: 35, scope: !7)
!60 = !DILocation(line: 47, column: 42, scope: !7)
!61 = !DILocation(line: 47, column: 31, scope: !7)
!62 = !DILocation(line: 47, column: 50, scope: !7)
!63 = !DILocation(line: 48, column: 18, scope: !7)
!64 = !DILocation(line: 49, column: 18, scope: !7)
!65 = !DILocation(line: 50, column: 18, scope: !7)
!66 = !DILocation(line: 65, column: 19, scope: !7)
!67 = !DILocation(line: 67, column: 20, scope: !7)
!68 = !DILocation(line: 54, column: 19, scope: !7)
!69 = !DILocation(line: 55, column: 20, scope: !7)
!70 = !DILocation(line: 56, column: 20, scope: !7)
!71 = !DILocation(line: 57, column: 20, scope: !7)
!72 = !DILocation(line: 70, column: 20, scope: !7)
!73 = !DILocation(line: 58, column: 20, scope: !7)
!74 = !DILocation(line: 73, column: 20, scope: !7)
!75 = !DILocation(line: 62, column: 20, scope: !7)
!76 = !DILocation(line: 64, column: 20, scope: !7)
!77 = !DILocation(line: 66, column: 20, scope: !7)
!78 = !DILocation(line: 68, column: 20, scope: !7)
!79 = !DILocation(line: 69, column: 20, scope: !7)
!80 = !DILocation(line: 71, column: 20, scope: !7)
!81 = !DILocation(line: 72, column: 20, scope: !7)
!82 = !DILocation(line: 74, column: 20, scope: !7)
!83 = !DILocation(line: 75, column: 20, scope: !7)
!84 = !DILocation(line: 76, column: 20, scope: !7)
!85 = !DILocation(line: 77, column: 25, scope: !7)
!86 = !DILocation(line: 77, column: 37, scope: !7)
!87 = !DILocation(line: 78, column: 25, scope: !7)
!88 = !DILocation(line: 78, column: 37, scope: !7)
!89 = !DILocation(line: 78, column: 4, scope: !7)
