; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_native_group_norm_relu_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = srem i32 %13, 1024, !dbg !14
  %15 = sdiv i32 %13, 16384, !dbg !15
  %16 = sext i32 %13 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !16
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #3, !dbg !17
  %19 = shl nsw i32 %15, 5, !dbg !18
  %.lhs.trunc = trunc nsw i32 %14 to i16, !dbg !19
  %20 = sdiv i16 %.lhs.trunc, 32, !dbg !19
  %.sext = sext i16 %20 to i32, !dbg !19
  %21 = add nsw i32 %19, %.sext, !dbg !20
  %22 = sext i32 %21 to i64, !dbg !21
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !21
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !22
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !22
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !22
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !23
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !24
  %30 = bitcast i32 %29 to float, !dbg !24
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !24
  %32 = bitcast i32 %31 to float, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !24
  %34 = bitcast i32 %33 to float, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !24
  %36 = bitcast i32 %35 to float, !dbg !24
  %37 = sext i32 %14 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !25
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !27
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !28
  %42 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %30, float 5.120000e+02) #3, !dbg !29
  %43 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %32, float 5.120000e+02) #3, !dbg !29
  %44 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %34, float 5.120000e+02) #3, !dbg !29
  %45 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %36, float 5.120000e+02) #3, !dbg !29
  %46 = fadd float %42, 0x3EE4F8B580000000, !dbg !30
  %47 = fadd float %43, 0x3EE4F8B580000000, !dbg !30
  %48 = fadd float %44, 0x3EE4F8B580000000, !dbg !30
  %49 = fadd float %45, 0x3EE4F8B580000000, !dbg !30
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %50, 0, !dbg !31
  br i1 %.not.i, label %53, label %51, !dbg !31

51:                                               ; preds = %7
  %52 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %46), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

53:                                               ; preds = %7
  %54 = tail call float @llvm.nvvm.rsqrt.approx.f(float %46), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

__nv_rsqrtf.exit:                                 ; preds = %51, %53
  %.0.i = phi float [ %52, %51 ], [ %54, %53 ], !dbg !31
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i1 = icmp eq i32 %55, 0, !dbg !31
  br i1 %.not.i1, label %58, label %56, !dbg !31

56:                                               ; preds = %__nv_rsqrtf.exit
  %57 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %47), !dbg !31
  br label %__nv_rsqrtf.exit3, !dbg !31

58:                                               ; preds = %__nv_rsqrtf.exit
  %59 = tail call float @llvm.nvvm.rsqrt.approx.f(float %47), !dbg !31
  br label %__nv_rsqrtf.exit3, !dbg !31

__nv_rsqrtf.exit3:                                ; preds = %56, %58
  %.0.i2 = phi float [ %57, %56 ], [ %59, %58 ], !dbg !31
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i4 = icmp eq i32 %60, 0, !dbg !31
  br i1 %.not.i4, label %63, label %61, !dbg !31

61:                                               ; preds = %__nv_rsqrtf.exit3
  %62 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %48), !dbg !31
  br label %__nv_rsqrtf.exit6, !dbg !31

63:                                               ; preds = %__nv_rsqrtf.exit3
  %64 = tail call float @llvm.nvvm.rsqrt.approx.f(float %48), !dbg !31
  br label %__nv_rsqrtf.exit6, !dbg !31

__nv_rsqrtf.exit6:                                ; preds = %61, %63
  %.0.i5 = phi float [ %62, %61 ], [ %64, %63 ], !dbg !31
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i7 = icmp eq i32 %65, 0, !dbg !31
  br i1 %.not.i7, label %68, label %66, !dbg !31

66:                                               ; preds = %__nv_rsqrtf.exit6
  %67 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %49), !dbg !31
  br label %__nv_rsqrtf.exit9, !dbg !31

68:                                               ; preds = %__nv_rsqrtf.exit6
  %69 = tail call float @llvm.nvvm.rsqrt.approx.f(float %49), !dbg !31
  br label %__nv_rsqrtf.exit9, !dbg !31

__nv_rsqrtf.exit9:                                ; preds = %66, %68
  %.0.i8 = phi float [ %67, %66 ], [ %69, %68 ], !dbg !31
  %70 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !17
  %71 = insertelement <4 x i32> poison, i32 %27, i64 0, !dbg !22
  %72 = insertelement <4 x i32> %71, i32 %26, i64 1, !dbg !22
  %73 = insertelement <4 x i32> %72, i32 %25, i64 2, !dbg !22
  %74 = insertelement <4 x i32> %73, i32 %24, i64 3, !dbg !22
  %75 = bitcast <4 x i32> %74 to <4 x float>, !dbg !22
  %76 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !17
  %77 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !17
  %78 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !17
  %79 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !28
  %80 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !28
  %81 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !28
  %82 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !28
  %83 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !26
  %85 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !26
  %86 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !26
  %87 = insertelement <4 x i32> poison, i32 %70, i64 0, !dbg !17
  %88 = insertelement <4 x i32> %87, i32 %76, i64 1, !dbg !17
  %89 = insertelement <4 x i32> %88, i32 %77, i64 2, !dbg !17
  %90 = insertelement <4 x i32> %89, i32 %78, i64 3, !dbg !17
  %91 = bitcast <4 x i32> %90 to <4 x float>, !dbg !17
  %92 = fsub <4 x float> %91, %75, !dbg !32
  %93 = insertelement <4 x i32> poison, i32 %79, i64 0, !dbg !28
  %94 = insertelement <4 x i32> %93, i32 %80, i64 1, !dbg !28
  %95 = insertelement <4 x i32> %94, i32 %81, i64 2, !dbg !28
  %96 = insertelement <4 x i32> %95, i32 %82, i64 3, !dbg !28
  %97 = bitcast <4 x i32> %96 to <4 x float>, !dbg !28
  %98 = insertelement <4 x i32> poison, i32 %83, i64 0, !dbg !26
  %99 = insertelement <4 x i32> %98, i32 %84, i64 1, !dbg !26
  %100 = insertelement <4 x i32> %99, i32 %85, i64 2, !dbg !26
  %101 = insertelement <4 x i32> %100, i32 %86, i64 3, !dbg !26
  %102 = bitcast <4 x i32> %101 to <4 x float>, !dbg !26
  %103 = insertelement <4 x float> poison, float %.0.i8, i64 0, !dbg !33
  %104 = insertelement <4 x float> %103, float %.0.i5, i64 1, !dbg !33
  %105 = insertelement <4 x float> %104, float %.0.i2, i64 2, !dbg !33
  %106 = insertelement <4 x float> %105, float %.0.i, i64 3, !dbg !33
  %107 = fmul <4 x float> %92, %106, !dbg !33
  %108 = fmul <4 x float> %107, %102, !dbg !34
  %109 = fadd <4 x float> %108, %97, !dbg !35
  %110 = fcmp olt <4 x float> %109, zeroinitializer, !dbg !36
  %111 = extractelement <4 x i1> %110, i64 3, !dbg !40
  %112 = extractelement <4 x i1> %110, i64 2, !dbg !40
  %113 = extractelement <4 x i1> %110, i64 1, !dbg !40
  %114 = extractelement <4 x i1> %110, i64 0, !dbg !40
  %115 = getelementptr float, ptr addrspace(1) %5, i64 %16, !dbg !41
  %bc = bitcast <4 x float> %109 to <4 x i32>, !dbg !42
  %116 = extractelement <4 x i32> %bc, i64 3, !dbg !42
  %117 = select i1 %111, i32 0, i32 %116, !dbg !40
  %bc10 = bitcast <4 x float> %109 to <4 x i32>, !dbg !42
  %118 = extractelement <4 x i32> %bc10, i64 2, !dbg !42
  %119 = select i1 %112, i32 0, i32 %118, !dbg !40
  %bc11 = bitcast <4 x float> %109 to <4 x i32>, !dbg !42
  %120 = extractelement <4 x i32> %bc11, i64 1, !dbg !42
  %121 = select i1 %113, i32 0, i32 %120, !dbg !40
  %bc12 = bitcast <4 x float> %109 to <4 x i32>, !dbg !42
  %122 = extractelement <4 x i32> %bc12, i64 0, !dbg !42
  %123 = select i1 %114, i32 0, i32 %122, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %117, i32 %119, i32 %121, i32 %123, ptr addrspace(1) %115, i1 true) #3, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvn26gyx74jilsgryg4epluwrdvdcg4p2nlbgqz22tuul6jvn2sa.py", directory: "inductor_cache/vn")
!4 = !{ptr @triton_poi_fused_native_group_norm_relu_36, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_native_group_norm_relu_36, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_native_group_norm_relu_36", linkageName: "triton_poi_fused_native_group_norm_relu_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 33, scope: !7)
!19 = !DILocation(line: 28, column: 45, scope: !7)
!20 = !DILocation(line: 28, column: 39, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 51, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 51, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 27, scope: !7)
!32 = !DILocation(line: 32, column: 18, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 39, column: 19, scope: !7)
!35 = !DILocation(line: 40, column: 20, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 42, column: 42, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 43, column: 25, scope: !7)
!42 = !DILocation(line: 43, column: 37, scope: !7)
!43 = !DILocation(line: 43, column: 4, scope: !7)
