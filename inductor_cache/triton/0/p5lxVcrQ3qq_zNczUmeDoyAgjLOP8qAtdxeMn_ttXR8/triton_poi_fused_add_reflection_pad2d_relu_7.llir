; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_reflection_pad2d_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 1, !dbg !13
  %14 = or disjoint i32 %12, 2, !dbg !13
  %15 = or disjoint i32 %12, 3, !dbg !13
  %16 = or disjoint i32 %12, 512, !dbg !13
  %17 = or disjoint i32 %12, 513, !dbg !13
  %18 = or disjoint i32 %12, 514, !dbg !13
  %19 = or disjoint i32 %12, 515, !dbg !13
  %20 = icmp slt i32 %12, 147968, !dbg !14
  %21 = icmp slt i32 %16, 147968, !dbg !14
  %22 = srem i32 %13, 34, !dbg !15
  %23 = srem i32 %15, 34, !dbg !15
  %24 = srem i32 %17, 34, !dbg !15
  %25 = srem i32 %19, 34, !dbg !15
  %26 = sdiv i32 %12, 34, !dbg !16
  %27 = sdiv i32 %14, 34, !dbg !16
  %28 = sdiv i32 %16, 34, !dbg !16
  %29 = sdiv i32 %18, 34, !dbg !16
  %30 = sdiv i32 %12, 1156, !dbg !17
  %31 = sdiv i32 %16, 1156, !dbg !17
  %32 = add nsw i32 %22, -1, !dbg !18
  %33 = add nsw i32 %23, -1, !dbg !18
  %34 = add nsw i32 %24, -1, !dbg !18
  %35 = add nsw i32 %25, -1, !dbg !18
  %36 = tail call i32 @llvm.abs.i32(i32 %32, i1 true), !dbg !19
  %37 = tail call i32 @llvm.abs.i32(i32 %33, i1 true), !dbg !19
  %38 = tail call i32 @llvm.abs.i32(i32 %34, i1 true), !dbg !19
  %39 = tail call i32 @llvm.abs.i32(i32 %35, i1 true), !dbg !19
  %40 = add nsw i32 %36, -31, !dbg !20
  %41 = add nsw i32 %37, -31, !dbg !20
  %42 = add nsw i32 %38, -31, !dbg !20
  %43 = add nsw i32 %39, -31, !dbg !20
  %44 = tail call i32 @llvm.abs.i32(i32 %40, i1 true), !dbg !21
  %45 = tail call i32 @llvm.abs.i32(i32 %41, i1 true), !dbg !21
  %46 = tail call i32 @llvm.abs.i32(i32 %42, i1 true), !dbg !21
  %47 = tail call i32 @llvm.abs.i32(i32 %43, i1 true), !dbg !21
  %48 = shl nsw i32 %30, 10, !dbg !22
  %49 = shl nsw i32 %31, 10, !dbg !22
  %reass.sub = or disjoint i32 %48, 1023, !dbg !23
  %50 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !15
  %51 = insertelement <2 x i32> %50, i32 %26, i64 1, !dbg !15
  %52 = srem <2 x i32> %51, splat (i32 34), !dbg !15
  %53 = add nsw <2 x i32> %52, splat (i32 -1), !dbg !18
  %54 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %53, i1 true), !dbg !19
  %55 = add nsw <2 x i32> %54, splat (i32 -31), !dbg !20
  %56 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %55, i1 true), !dbg !21
  %57 = extractelement <2 x i32> %56, i64 0, !dbg !24
  %58 = sub nuw i32 %reass.sub, %57, !dbg !24
  %59 = extractelement <2 x i32> %56, i64 1, !dbg !24
  %60 = mul nsw i32 %59, -32, !dbg !24
  %61 = add i32 %58, %60, !dbg !24
  %62 = sub nuw i32 %reass.sub, %44, !dbg !23
  %63 = add i32 %62, %60, !dbg !24
  %64 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !15
  %65 = insertelement <2 x i32> %64, i32 %27, i64 1, !dbg !15
  %66 = srem <2 x i32> %65, splat (i32 34), !dbg !15
  %67 = add nsw <2 x i32> %66, splat (i32 -1), !dbg !18
  %68 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %67, i1 true), !dbg !19
  %69 = add nsw <2 x i32> %68, splat (i32 -31), !dbg !20
  %70 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %69, i1 true), !dbg !21
  %71 = extractelement <2 x i32> %70, i64 0, !dbg !24
  %72 = sub nuw i32 %reass.sub, %71, !dbg !24
  %73 = extractelement <2 x i32> %70, i64 1, !dbg !24
  %74 = mul nsw i32 %73, -32, !dbg !24
  %75 = add i32 %72, %74, !dbg !24
  %76 = sub nuw i32 %reass.sub, %45, !dbg !23
  %77 = add i32 %76, %74, !dbg !24
  %reass.sub4 = or disjoint i32 %49, 1023, !dbg !23
  %78 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !15
  %79 = insertelement <2 x i32> %78, i32 %28, i64 1, !dbg !15
  %80 = srem <2 x i32> %79, splat (i32 34), !dbg !15
  %81 = add nsw <2 x i32> %80, splat (i32 -1), !dbg !18
  %82 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %81, i1 true), !dbg !19
  %83 = add nsw <2 x i32> %82, splat (i32 -31), !dbg !20
  %84 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %83, i1 true), !dbg !21
  %85 = extractelement <2 x i32> %84, i64 0, !dbg !24
  %86 = sub nuw i32 %reass.sub4, %85, !dbg !24
  %87 = extractelement <2 x i32> %84, i64 1, !dbg !24
  %88 = mul nsw i32 %87, -32, !dbg !24
  %89 = add i32 %86, %88, !dbg !24
  %90 = sub nuw i32 %reass.sub4, %46, !dbg !23
  %91 = add i32 %90, %88, !dbg !24
  %92 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !15
  %93 = insertelement <2 x i32> %92, i32 %29, i64 1, !dbg !15
  %94 = srem <2 x i32> %93, splat (i32 34), !dbg !15
  %95 = add nsw <2 x i32> %94, splat (i32 -1), !dbg !18
  %96 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %95, i1 true), !dbg !19
  %97 = add nsw <2 x i32> %96, splat (i32 -31), !dbg !20
  %98 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %97, i1 true), !dbg !21
  %99 = extractelement <2 x i32> %98, i64 0, !dbg !24
  %100 = sub nuw i32 %reass.sub4, %99, !dbg !24
  %101 = extractelement <2 x i32> %98, i64 1, !dbg !24
  %102 = mul nsw i32 %101, -32, !dbg !24
  %103 = add i32 %100, %102, !dbg !24
  %104 = sub nuw i32 %reass.sub4, %47, !dbg !23
  %105 = add i32 %104, %102, !dbg !24
  %106 = sext i32 %61 to i64, !dbg !25
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !25
  %108 = sext i32 %63 to i64, !dbg !25
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !25
  %110 = sext i32 %75 to i64, !dbg !25
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !25
  %112 = sext i32 %77 to i64, !dbg !25
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !25
  %114 = sext i32 %89 to i64, !dbg !25
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !25
  %116 = sext i32 %91 to i64, !dbg !25
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !25
  %118 = sext i32 %103 to i64, !dbg !25
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !25
  %120 = sext i32 %105 to i64, !dbg !25
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !25
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %20) #2, !dbg !26
  %123 = bitcast i32 %122 to float, !dbg !26
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %20) #2, !dbg !26
  %125 = bitcast i32 %124 to float, !dbg !26
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %20) #2, !dbg !26
  %127 = bitcast i32 %126 to float, !dbg !26
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %20) #2, !dbg !26
  %129 = bitcast i32 %128 to float, !dbg !26
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %21) #2, !dbg !26
  %131 = bitcast i32 %130 to float, !dbg !26
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %21) #2, !dbg !26
  %133 = bitcast i32 %132 to float, !dbg !26
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %21) #2, !dbg !26
  %135 = bitcast i32 %134 to float, !dbg !26
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %21) #2, !dbg !26
  %137 = bitcast i32 %136 to float, !dbg !26
  %138 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !27
  %139 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !27
  %140 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !27
  %141 = getelementptr float, ptr addrspace(1) %1, i64 %112, !dbg !27
  %142 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !27
  %143 = getelementptr float, ptr addrspace(1) %1, i64 %116, !dbg !27
  %144 = getelementptr float, ptr addrspace(1) %1, i64 %118, !dbg !27
  %145 = getelementptr float, ptr addrspace(1) %1, i64 %120, !dbg !27
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %20) #2, !dbg !28
  %147 = bitcast i32 %146 to float, !dbg !28
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %20) #2, !dbg !28
  %149 = bitcast i32 %148 to float, !dbg !28
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %20) #2, !dbg !28
  %151 = bitcast i32 %150 to float, !dbg !28
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %20) #2, !dbg !28
  %153 = bitcast i32 %152 to float, !dbg !28
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %21) #2, !dbg !28
  %155 = bitcast i32 %154 to float, !dbg !28
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %21) #2, !dbg !28
  %157 = bitcast i32 %156 to float, !dbg !28
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %21) #2, !dbg !28
  %159 = bitcast i32 %158 to float, !dbg !28
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 %21) #2, !dbg !28
  %161 = bitcast i32 %160 to float, !dbg !28
  %162 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !29
  %163 = getelementptr float, ptr addrspace(1) %2, i64 %108, !dbg !29
  %164 = getelementptr float, ptr addrspace(1) %2, i64 %110, !dbg !29
  %165 = getelementptr float, ptr addrspace(1) %2, i64 %112, !dbg !29
  %166 = getelementptr float, ptr addrspace(1) %2, i64 %114, !dbg !29
  %167 = getelementptr float, ptr addrspace(1) %2, i64 %116, !dbg !29
  %168 = getelementptr float, ptr addrspace(1) %2, i64 %118, !dbg !29
  %169 = getelementptr float, ptr addrspace(1) %2, i64 %120, !dbg !29
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %20) #2, !dbg !30
  %171 = bitcast i32 %170 to float, !dbg !30
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %20) #2, !dbg !30
  %173 = bitcast i32 %172 to float, !dbg !30
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %20) #2, !dbg !30
  %175 = bitcast i32 %174 to float, !dbg !30
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %20) #2, !dbg !30
  %177 = bitcast i32 %176 to float, !dbg !30
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %21) #2, !dbg !30
  %179 = bitcast i32 %178 to float, !dbg !30
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 %21) #2, !dbg !30
  %181 = bitcast i32 %180 to float, !dbg !30
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 %21) #2, !dbg !30
  %183 = bitcast i32 %182 to float, !dbg !30
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 %21) #2, !dbg !30
  %185 = bitcast i32 %184 to float, !dbg !30
  %186 = getelementptr float, ptr addrspace(1) %3, i64 %106, !dbg !31
  %187 = getelementptr float, ptr addrspace(1) %3, i64 %108, !dbg !31
  %188 = getelementptr float, ptr addrspace(1) %3, i64 %110, !dbg !31
  %189 = getelementptr float, ptr addrspace(1) %3, i64 %112, !dbg !31
  %190 = getelementptr float, ptr addrspace(1) %3, i64 %114, !dbg !31
  %191 = getelementptr float, ptr addrspace(1) %3, i64 %116, !dbg !31
  %192 = getelementptr float, ptr addrspace(1) %3, i64 %118, !dbg !31
  %193 = getelementptr float, ptr addrspace(1) %3, i64 %120, !dbg !31
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %20) #2, !dbg !32
  %195 = bitcast i32 %194 to float, !dbg !32
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %20) #2, !dbg !32
  %197 = bitcast i32 %196 to float, !dbg !32
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 %20) #2, !dbg !32
  %199 = bitcast i32 %198 to float, !dbg !32
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 %20) #2, !dbg !32
  %201 = bitcast i32 %200 to float, !dbg !32
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %190, i1 %21) #2, !dbg !32
  %203 = bitcast i32 %202 to float, !dbg !32
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 %21) #2, !dbg !32
  %205 = bitcast i32 %204 to float, !dbg !32
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %192, i1 %21) #2, !dbg !32
  %207 = bitcast i32 %206 to float, !dbg !32
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %193, i1 %21) #2, !dbg !32
  %209 = bitcast i32 %208 to float, !dbg !32
  %210 = fcmp olt float %195, 0.000000e+00, !dbg !33
  %211 = fcmp olt float %197, 0.000000e+00, !dbg !33
  %212 = fcmp olt float %199, 0.000000e+00, !dbg !33
  %213 = fcmp olt float %201, 0.000000e+00, !dbg !33
  %214 = fcmp olt float %203, 0.000000e+00, !dbg !33
  %215 = fcmp olt float %205, 0.000000e+00, !dbg !33
  %216 = fcmp olt float %207, 0.000000e+00, !dbg !33
  %217 = fcmp olt float %209, 0.000000e+00, !dbg !33
  %218 = select i1 %210, float 0.000000e+00, float %195, !dbg !37
  %219 = select i1 %211, float 0.000000e+00, float %197, !dbg !37
  %220 = select i1 %212, float 0.000000e+00, float %199, !dbg !37
  %221 = select i1 %213, float 0.000000e+00, float %201, !dbg !37
  %222 = select i1 %214, float 0.000000e+00, float %203, !dbg !37
  %223 = select i1 %215, float 0.000000e+00, float %205, !dbg !37
  %224 = select i1 %216, float 0.000000e+00, float %207, !dbg !37
  %225 = select i1 %217, float 0.000000e+00, float %209, !dbg !37
  %226 = fadd float %218, %171, !dbg !38
  %227 = fadd float %219, %173, !dbg !38
  %228 = fadd float %220, %175, !dbg !38
  %229 = fadd float %221, %177, !dbg !38
  %230 = fadd float %222, %179, !dbg !38
  %231 = fadd float %223, %181, !dbg !38
  %232 = fadd float %224, %183, !dbg !38
  %233 = fadd float %225, %185, !dbg !38
  %234 = fadd float %226, %147, !dbg !39
  %235 = fadd float %227, %149, !dbg !39
  %236 = fadd float %228, %151, !dbg !39
  %237 = fadd float %229, %153, !dbg !39
  %238 = fadd float %230, %155, !dbg !39
  %239 = fadd float %231, %157, !dbg !39
  %240 = fadd float %232, %159, !dbg !39
  %241 = fadd float %233, %161, !dbg !39
  %242 = fadd float %234, %123, !dbg !40
  %243 = fadd float %235, %125, !dbg !40
  %244 = fadd float %236, %127, !dbg !40
  %245 = fadd float %237, %129, !dbg !40
  %246 = fadd float %238, %131, !dbg !40
  %247 = fadd float %239, %133, !dbg !40
  %248 = fadd float %240, %135, !dbg !40
  %249 = fadd float %241, %137, !dbg !40
  %250 = sext i32 %12 to i64, !dbg !41
  %251 = getelementptr float, ptr addrspace(1) %4, i64 %250, !dbg !41
  %252 = sext i32 %16 to i64, !dbg !41
  %253 = getelementptr float, ptr addrspace(1) %4, i64 %252, !dbg !41
  %254 = bitcast float %242 to i32, !dbg !42
  %255 = bitcast float %243 to i32, !dbg !42
  %256 = bitcast float %244 to i32, !dbg !42
  %257 = bitcast float %245 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %254, i32 %255, i32 %256, i32 %257, ptr addrspace(1) %251, i1 %20) #2, !dbg !42
  %258 = bitcast float %246 to i32, !dbg !42
  %259 = bitcast float %247 to i32, !dbg !42
  %260 = bitcast float %248 to i32, !dbg !42
  %261 = bitcast float %249 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %258, i32 %259, i32 %260, i32 %261, ptr addrspace(1) %253, i1 %21) #2, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x i32> @llvm.abs.v2i32(<2 x i32>, i1 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ca47s6ogqnsc56ojzurcuxjtaipcnzszsjjbphxnzfc4esplgzov.py", directory: "inductor_cache/a4")
!4 = !{ptr @triton_poi_fused_add_reflection_pad2d_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_reflection_pad2d_relu_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_reflection_pad2d_relu_7", linkageName: "triton_poi_fused_add_reflection_pad2d_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 82, scope: !7)
!19 = !DILocation(line: 28, column: 75, scope: !7)
!20 = !DILocation(line: 28, column: 63, scope: !7)
!21 = !DILocation(line: 28, column: 55, scope: !7)
!22 = !DILocation(line: 28, column: 149, scope: !7)
!23 = !DILocation(line: 28, column: 91, scope: !7)
!24 = !DILocation(line: 28, column: 144, scope: !7)
!25 = !DILocation(line: 28, column: 30, scope: !7)
!26 = !DILocation(line: 28, column: 154, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 154, scope: !7)
!29 = !DILocation(line: 30, column: 30, scope: !7)
!30 = !DILocation(line: 30, column: 154, scope: !7)
!31 = !DILocation(line: 31, column: 30, scope: !7)
!32 = !DILocation(line: 31, column: 154, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 33, column: 40, scope: !7)
!37 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 34, column: 18, scope: !7)
!39 = !DILocation(line: 35, column: 18, scope: !7)
!40 = !DILocation(line: 36, column: 18, scope: !7)
!41 = !DILocation(line: 37, column: 25, scope: !7)
!42 = !DILocation(line: 37, column: 36, scope: !7)
!43 = !DILocation(line: 37, column: 4, scope: !7)
