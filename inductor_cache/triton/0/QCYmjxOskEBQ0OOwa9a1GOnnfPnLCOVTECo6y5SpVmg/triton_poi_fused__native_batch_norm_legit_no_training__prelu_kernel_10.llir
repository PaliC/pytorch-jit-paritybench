; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 1, !dbg !13
  %16 = or disjoint i32 %14, 2, !dbg !13
  %17 = or disjoint i32 %14, 3, !dbg !13
  %18 = or disjoint i32 %14, 512, !dbg !13
  %19 = or disjoint i32 %14, 513, !dbg !13
  %20 = or disjoint i32 %14, 514, !dbg !13
  %21 = or disjoint i32 %14, 515, !dbg !13
  %22 = srem i32 %14, 35, !dbg !14
  %23 = srem i32 %15, 35, !dbg !14
  %24 = srem i32 %16, 35, !dbg !14
  %25 = srem i32 %17, 35, !dbg !14
  %26 = srem i32 %18, 35, !dbg !14
  %27 = srem i32 %19, 35, !dbg !14
  %28 = srem i32 %20, 35, !dbg !14
  %29 = srem i32 %21, 35, !dbg !14
  %30 = sext i32 %14 to i64, !dbg !15
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !15
  %32 = sext i32 %18 to i64, !dbg !15
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !15
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !16
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !16
  %36 = sext i32 %22 to i64, !dbg !17
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !17
  %38 = sext i32 %23 to i64, !dbg !17
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !17
  %40 = sext i32 %24 to i64, !dbg !17
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !17
  %42 = sext i32 %25 to i64, !dbg !17
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !17
  %44 = sext i32 %26 to i64, !dbg !17
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !17
  %46 = sext i32 %27 to i64, !dbg !17
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !17
  %48 = sext i32 %28 to i64, !dbg !17
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !17
  %50 = sext i32 %29 to i64, !dbg !17
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !17
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !18
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !18
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !18
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !18
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !18
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !18
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !18
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !18
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !19
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !19
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !19
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !19
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !19
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !19
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !19
  %67 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !19
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !20
  %69 = bitcast i32 %68 to float, !dbg !20
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !20
  %71 = bitcast i32 %70 to float, !dbg !20
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !20
  %73 = bitcast i32 %72 to float, !dbg !20
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !20
  %75 = bitcast i32 %74 to float, !dbg !20
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !20
  %77 = bitcast i32 %76 to float, !dbg !20
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !20
  %79 = bitcast i32 %78 to float, !dbg !20
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !20
  %81 = bitcast i32 %80 to float, !dbg !20
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !20
  %83 = bitcast i32 %82 to float, !dbg !20
  %84 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !21
  %85 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !21
  %86 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !21
  %87 = getelementptr float, ptr addrspace(1) %4, i64 %42, !dbg !21
  %88 = getelementptr float, ptr addrspace(1) %4, i64 %44, !dbg !21
  %89 = getelementptr float, ptr addrspace(1) %4, i64 %46, !dbg !21
  %90 = getelementptr float, ptr addrspace(1) %4, i64 %48, !dbg !21
  %91 = getelementptr float, ptr addrspace(1) %4, i64 %50, !dbg !21
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !22
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !22
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !22
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !22
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !22
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !22
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !22
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !22
  %100 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !23
  %101 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !23
  %102 = getelementptr float, ptr addrspace(1) %5, i64 %40, !dbg !23
  %103 = getelementptr float, ptr addrspace(1) %5, i64 %42, !dbg !23
  %104 = getelementptr float, ptr addrspace(1) %5, i64 %44, !dbg !23
  %105 = getelementptr float, ptr addrspace(1) %5, i64 %46, !dbg !23
  %106 = getelementptr float, ptr addrspace(1) %5, i64 %48, !dbg !23
  %107 = getelementptr float, ptr addrspace(1) %5, i64 %50, !dbg !23
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 true) #3, !dbg !24
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #3, !dbg !24
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #3, !dbg !24
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #3, !dbg !24
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #3, !dbg !24
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #3, !dbg !24
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #3, !dbg !24
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #3, !dbg !24
  %116 = getelementptr float, ptr addrspace(1) %6, i64 %36, !dbg !25
  %117 = getelementptr float, ptr addrspace(1) %6, i64 %38, !dbg !25
  %118 = getelementptr float, ptr addrspace(1) %6, i64 %40, !dbg !25
  %119 = getelementptr float, ptr addrspace(1) %6, i64 %42, !dbg !25
  %120 = getelementptr float, ptr addrspace(1) %6, i64 %44, !dbg !25
  %121 = getelementptr float, ptr addrspace(1) %6, i64 %46, !dbg !25
  %122 = getelementptr float, ptr addrspace(1) %6, i64 %48, !dbg !25
  %123 = getelementptr float, ptr addrspace(1) %6, i64 %50, !dbg !25
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 true) #3, !dbg !26
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #3, !dbg !26
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #3, !dbg !26
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #3, !dbg !26
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 true) #3, !dbg !26
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 true) #3, !dbg !26
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #3, !dbg !26
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #3, !dbg !26
  %132 = fadd float %69, 0x3EE4F8B580000000, !dbg !27
  %133 = fadd float %71, 0x3EE4F8B580000000, !dbg !27
  %134 = fadd float %73, 0x3EE4F8B580000000, !dbg !27
  %135 = fadd float %75, 0x3EE4F8B580000000, !dbg !27
  %136 = fadd float %77, 0x3EE4F8B580000000, !dbg !27
  %137 = fadd float %79, 0x3EE4F8B580000000, !dbg !27
  %138 = fadd float %81, 0x3EE4F8B580000000, !dbg !27
  %139 = fadd float %83, 0x3EE4F8B580000000, !dbg !27
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %140, 0, !dbg !28
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %141, 0, !dbg !28
  br i1 %.not.i, label %147, label %142, !dbg !28

142:                                              ; preds = %8
  br i1 %.not1.i, label %145, label %143, !dbg !28

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %132) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %132) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

147:                                              ; preds = %8
  br i1 %.not1.i, label %150, label %148, !dbg !28

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.f(float %132) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.f(float %132) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %143, %145, %148, %150
  %.0.i = phi float [ %144, %143 ], [ %146, %145 ], [ %149, %148 ], [ %151, %150 ], !dbg !28
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i1 = icmp eq i32 %152, 0, !dbg !28
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i4 = icmp eq i32 %153, 0, !dbg !28
  br i1 %.not.i1, label %159, label %154, !dbg !28

154:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %157, label %155, !dbg !28

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %133) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %133) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

159:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %162, label %160, !dbg !28

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.f(float %133) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.f(float %133) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %155, %157, %160, %162
  %.0.i3 = phi float [ %156, %155 ], [ %158, %157 ], [ %161, %160 ], [ %163, %162 ], !dbg !28
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i6 = icmp eq i32 %164, 0, !dbg !28
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i9 = icmp eq i32 %165, 0, !dbg !28
  br i1 %.not.i6, label %171, label %166, !dbg !28

166:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %169, label %167, !dbg !28

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %134) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %134) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

171:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %174, label %172, !dbg !28

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.f(float %134) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.f(float %134) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

__nv_sqrtf.exit10:                                ; preds = %167, %169, %172, %174
  %.0.i8 = phi float [ %168, %167 ], [ %170, %169 ], [ %173, %172 ], [ %175, %174 ], !dbg !28
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i11 = icmp eq i32 %176, 0, !dbg !28
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i14 = icmp eq i32 %177, 0, !dbg !28
  br i1 %.not.i11, label %183, label %178, !dbg !28

178:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %181, label %179, !dbg !28

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %135) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %135) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

183:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %186, label %184, !dbg !28

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.f(float %135) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.f(float %135) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

__nv_sqrtf.exit15:                                ; preds = %179, %181, %184, %186
  %.0.i13 = phi float [ %180, %179 ], [ %182, %181 ], [ %185, %184 ], [ %187, %186 ], !dbg !28
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i16 = icmp eq i32 %188, 0, !dbg !28
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i19 = icmp eq i32 %189, 0, !dbg !28
  br i1 %.not.i16, label %195, label %190, !dbg !28

190:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %193, label %191, !dbg !28

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %136) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %136) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

195:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %198, label %196, !dbg !28

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.f(float %136) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.f(float %136) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

__nv_sqrtf.exit20:                                ; preds = %191, %193, %196, %198
  %.0.i18 = phi float [ %192, %191 ], [ %194, %193 ], [ %197, %196 ], [ %199, %198 ], !dbg !28
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i21 = icmp eq i32 %200, 0, !dbg !28
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i24 = icmp eq i32 %201, 0, !dbg !28
  br i1 %.not.i21, label %207, label %202, !dbg !28

202:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %205, label %203, !dbg !28

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %137) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %137) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

207:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %210, label %208, !dbg !28

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.f(float %137) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.f(float %137) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

__nv_sqrtf.exit25:                                ; preds = %203, %205, %208, %210
  %.0.i23 = phi float [ %204, %203 ], [ %206, %205 ], [ %209, %208 ], [ %211, %210 ], !dbg !28
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i26 = icmp eq i32 %212, 0, !dbg !28
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i29 = icmp eq i32 %213, 0, !dbg !28
  br i1 %.not.i26, label %219, label %214, !dbg !28

214:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %217, label %215, !dbg !28

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %138) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %138) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

219:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %222, label %220, !dbg !28

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.f(float %138) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.f(float %138) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

__nv_sqrtf.exit30:                                ; preds = %215, %217, %220, %222
  %.0.i28 = phi float [ %216, %215 ], [ %218, %217 ], [ %221, %220 ], [ %223, %222 ], !dbg !28
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i31 = icmp eq i32 %224, 0, !dbg !28
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i34 = icmp eq i32 %225, 0, !dbg !28
  br i1 %.not.i31, label %231, label %226, !dbg !28

226:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %229, label %227, !dbg !28

227:                                              ; preds = %226
  %228 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %139) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

229:                                              ; preds = %226
  %230 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %139) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

231:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %234, label %232, !dbg !28

232:                                              ; preds = %231
  %233 = tail call float @llvm.nvvm.sqrt.rn.f(float %139) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

234:                                              ; preds = %231
  %235 = tail call float @llvm.nvvm.sqrt.approx.f(float %139) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

__nv_sqrtf.exit35:                                ; preds = %227, %229, %232, %234
  %.0.i33 = phi float [ %228, %227 ], [ %230, %229 ], [ %233, %232 ], [ %235, %234 ], !dbg !28
  %236 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !16
  %237 = insertelement <8 x i32> poison, i32 %59, i64 0, !dbg !18
  %238 = insertelement <8 x i32> %237, i32 %58, i64 1, !dbg !18
  %239 = insertelement <8 x i32> %238, i32 %57, i64 2, !dbg !18
  %240 = insertelement <8 x i32> %239, i32 %56, i64 3, !dbg !18
  %241 = insertelement <8 x i32> %240, i32 %55, i64 4, !dbg !18
  %242 = insertelement <8 x i32> %241, i32 %54, i64 5, !dbg !18
  %243 = insertelement <8 x i32> %242, i32 %53, i64 6, !dbg !18
  %244 = insertelement <8 x i32> %243, i32 %52, i64 7, !dbg !18
  %245 = bitcast <8 x i32> %244 to <8 x float>, !dbg !18
  %246 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !16
  %247 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !16
  %248 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !16
  %249 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !16
  %250 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !16
  %251 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !16
  %252 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !16
  %253 = bitcast i32 %131 to float, !dbg !26
  %254 = bitcast i32 %130 to float, !dbg !26
  %255 = bitcast i32 %129 to float, !dbg !26
  %256 = bitcast i32 %128 to float, !dbg !26
  %257 = bitcast i32 %127 to float, !dbg !26
  %258 = bitcast i32 %126 to float, !dbg !26
  %259 = bitcast i32 %125 to float, !dbg !26
  %260 = bitcast i32 %124 to float, !dbg !26
  %261 = insertelement <8 x i32> poison, i32 %115, i64 0, !dbg !24
  %262 = insertelement <8 x i32> %261, i32 %114, i64 1, !dbg !24
  %263 = insertelement <8 x i32> %262, i32 %113, i64 2, !dbg !24
  %264 = insertelement <8 x i32> %263, i32 %112, i64 3, !dbg !24
  %265 = insertelement <8 x i32> %264, i32 %111, i64 4, !dbg !24
  %266 = insertelement <8 x i32> %265, i32 %110, i64 5, !dbg !24
  %267 = insertelement <8 x i32> %266, i32 %109, i64 6, !dbg !24
  %268 = insertelement <8 x i32> %267, i32 %108, i64 7, !dbg !24
  %269 = bitcast <8 x i32> %268 to <8 x float>, !dbg !24
  %270 = insertelement <8 x i32> poison, i32 %99, i64 0, !dbg !22
  %271 = insertelement <8 x i32> %270, i32 %98, i64 1, !dbg !22
  %272 = insertelement <8 x i32> %271, i32 %97, i64 2, !dbg !22
  %273 = insertelement <8 x i32> %272, i32 %96, i64 3, !dbg !22
  %274 = insertelement <8 x i32> %273, i32 %95, i64 4, !dbg !22
  %275 = insertelement <8 x i32> %274, i32 %94, i64 5, !dbg !22
  %276 = insertelement <8 x i32> %275, i32 %93, i64 6, !dbg !22
  %277 = insertelement <8 x i32> %276, i32 %92, i64 7, !dbg !22
  %278 = bitcast <8 x i32> %277 to <8 x float>, !dbg !22
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !29
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !29
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !29
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !29
  %283 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !29
  %284 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !29
  %285 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !29
  %286 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !29
  %287 = insertelement <8 x i32> poison, i32 %236, i64 0, !dbg !16
  %288 = insertelement <8 x i32> %287, i32 %246, i64 1, !dbg !16
  %289 = insertelement <8 x i32> %288, i32 %247, i64 2, !dbg !16
  %290 = insertelement <8 x i32> %289, i32 %248, i64 3, !dbg !16
  %291 = insertelement <8 x i32> %290, i32 %249, i64 4, !dbg !16
  %292 = insertelement <8 x i32> %291, i32 %250, i64 5, !dbg !16
  %293 = insertelement <8 x i32> %292, i32 %251, i64 6, !dbg !16
  %294 = insertelement <8 x i32> %293, i32 %252, i64 7, !dbg !16
  %295 = bitcast <8 x i32> %294 to <8 x float>, !dbg !16
  %296 = fsub <8 x float> %295, %245, !dbg !30
  %297 = insertelement <8 x float> poison, float %286, i64 0, !dbg !31
  %298 = insertelement <8 x float> %297, float %285, i64 1, !dbg !31
  %299 = insertelement <8 x float> %298, float %284, i64 2, !dbg !31
  %300 = insertelement <8 x float> %299, float %283, i64 3, !dbg !31
  %301 = insertelement <8 x float> %300, float %282, i64 4, !dbg !31
  %302 = insertelement <8 x float> %301, float %281, i64 5, !dbg !31
  %303 = insertelement <8 x float> %302, float %280, i64 6, !dbg !31
  %304 = insertelement <8 x float> %303, float %279, i64 7, !dbg !31
  %305 = fmul <8 x float> %296, %304, !dbg !31
  %306 = fmul <8 x float> %305, %278, !dbg !32
  %307 = fadd <8 x float> %306, %269, !dbg !33
  %308 = fcmp ogt <8 x float> %307, zeroinitializer, !dbg !34
  %309 = extractelement <8 x float> %307, i64 7, !dbg !35
  %310 = fmul float %309, %260, !dbg !36
  %311 = extractelement <8 x float> %307, i64 6, !dbg !35
  %312 = fmul float %311, %259, !dbg !36
  %313 = extractelement <8 x float> %307, i64 5, !dbg !35
  %314 = fmul float %313, %258, !dbg !36
  %315 = extractelement <8 x float> %307, i64 4, !dbg !35
  %316 = fmul float %315, %257, !dbg !36
  %317 = extractelement <8 x float> %307, i64 3, !dbg !35
  %318 = fmul float %317, %256, !dbg !36
  %319 = extractelement <8 x float> %307, i64 2, !dbg !35
  %320 = fmul float %319, %255, !dbg !36
  %321 = extractelement <8 x float> %307, i64 1, !dbg !35
  %322 = fmul float %321, %254, !dbg !36
  %323 = extractelement <8 x float> %307, i64 0, !dbg !35
  %324 = fmul float %323, %253, !dbg !36
  %325 = extractelement <8 x i1> %308, i64 7, !dbg !35
  %326 = select i1 %325, float %309, float %310, !dbg !35
  %327 = extractelement <8 x i1> %308, i64 6, !dbg !35
  %328 = select i1 %327, float %311, float %312, !dbg !35
  %329 = extractelement <8 x i1> %308, i64 5, !dbg !35
  %330 = select i1 %329, float %313, float %314, !dbg !35
  %331 = extractelement <8 x i1> %308, i64 4, !dbg !35
  %332 = select i1 %331, float %315, float %316, !dbg !35
  %333 = extractelement <8 x i1> %308, i64 3, !dbg !35
  %334 = select i1 %333, float %317, float %318, !dbg !35
  %335 = extractelement <8 x i1> %308, i64 2, !dbg !35
  %336 = select i1 %335, float %319, float %320, !dbg !35
  %337 = extractelement <8 x i1> %308, i64 1, !dbg !35
  %338 = select i1 %337, float %321, float %322, !dbg !35
  %339 = extractelement <8 x i1> %308, i64 0, !dbg !35
  %340 = select i1 %339, float %323, float %324, !dbg !35
  %341 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !37
  %342 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !37
  %343 = bitcast float %326 to i32, !dbg !38
  %344 = bitcast float %328 to i32, !dbg !38
  %345 = bitcast float %330 to i32, !dbg !38
  %346 = bitcast float %332 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %343, i32 %344, i32 %345, i32 %346, ptr addrspace(1) %341, i1 true) #3, !dbg !38
  %347 = bitcast float %334 to i32, !dbg !38
  %348 = bitcast float %336 to i32, !dbg !38
  %349 = bitcast float %338 to i32, !dbg !38
  %350 = bitcast float %340 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %347, i32 %348, i32 %349, i32 %350, ptr addrspace(1) %342, i1 true) #3, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7dbmqkpmxoxvwb53wuyob7uoxtljay7kxocv3bmxwtdyfx5mlez.py", directory: "inductor_cache/7d")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 35, column: 26, scope: !7)
!29 = !DILocation(line: 37, column: 18, scope: !7)
!30 = !DILocation(line: 32, column: 18, scope: !7)
!31 = !DILocation(line: 40, column: 19, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 42, column: 20, scope: !7)
!34 = !DILocation(line: 44, column: 20, scope: !7)
!35 = !DILocation(line: 46, column: 35, scope: !7)
!36 = !DILocation(line: 45, column: 20, scope: !7)
!37 = !DILocation(line: 47, column: 28, scope: !7)
!38 = !DILocation(line: 47, column: 40, scope: !7)
!39 = !DILocation(line: 47, column: 4, scope: !7)
