; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 3, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 5, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = and i32 %12, 7, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = icmp slt i32 %16, 144, !dbg !14
  %18 = shl i32 %12, 2, !dbg !15
  %19 = and i32 %18, 124, !dbg !15
  %20 = shl i32 %16, 7, !dbg !16
  %21 = or disjoint i32 %20, %19, !dbg !17
  %22 = sext i32 %21 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !18
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !19
  %29 = bitcast i32 %25 to float, !dbg !19
  %30 = bitcast i32 %26 to float, !dbg !19
  %31 = bitcast i32 %27 to float, !dbg !19
  %32 = bitcast i32 %28 to float, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !20
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !21
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !21
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !21
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !21
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !21
  %39 = bitcast i32 %35 to float, !dbg !21
  %40 = bitcast i32 %36 to float, !dbg !21
  %41 = bitcast i32 %37 to float, !dbg !21
  %42 = bitcast i32 %38 to float, !dbg !21
  %43 = zext nneg i32 %19 to i64, !dbg !22
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !22
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #5, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !23
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !23
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !23
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !23
  %50 = bitcast i32 %46 to float, !dbg !23
  %51 = bitcast i32 %47 to float, !dbg !23
  %52 = bitcast i32 %48 to float, !dbg !23
  %53 = bitcast i32 %49 to float, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %43, !dbg !24
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #5, !dbg !25
  %56 = getelementptr float, ptr addrspace(1) %4, i64 %43, !dbg !26
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #5, !dbg !27
  %58 = fadd float %39, %50, !dbg !28
  %59 = fadd float %40, %51, !dbg !28
  %60 = fadd float %41, %52, !dbg !28
  %61 = fadd float %42, %53, !dbg !28
  %62 = fadd float %58, %29, !dbg !29
  %63 = fadd float %59, %30, !dbg !29
  %64 = fadd float %60, %31, !dbg !29
  %65 = fadd float %61, %32, !dbg !29
  %66 = fadd float %62, %63, !dbg !30
  %67 = fadd float %64, %66, !dbg !30
  %68 = fadd float %65, %67, !dbg !30
  %69 = select i1 %17, float %68, float 0.000000e+00, !dbg !30
  %70 = bitcast float %69 to i32, !dbg !35
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 16, i32 31), !dbg !35
  %72 = bitcast i32 %71 to float, !dbg !35
  %73 = fadd float %69, %72, !dbg !30
  %74 = bitcast float %73 to i32, !dbg !35
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 8, i32 31), !dbg !35
  %76 = bitcast i32 %75 to float, !dbg !35
  %77 = fadd float %73, %76, !dbg !30
  %78 = bitcast float %77 to i32, !dbg !35
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 4, i32 31), !dbg !35
  %80 = bitcast i32 %79 to float, !dbg !35
  %81 = fadd float %77, %80, !dbg !30
  %82 = bitcast float %81 to i32, !dbg !35
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 2, i32 31), !dbg !35
  %84 = bitcast i32 %83 to float, !dbg !35
  %85 = fadd float %81, %84, !dbg !30
  %86 = bitcast float %85 to i32, !dbg !35
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 1, i32 31), !dbg !35
  %88 = bitcast i32 %87 to float, !dbg !35
  %89 = fadd float %85, %88, !dbg !30
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float 1.280000e+02) #5, !dbg !36
  %91 = fsub float %62, %90, !dbg !37
  %92 = fsub float %63, %90, !dbg !37
  %93 = fsub float %64, %90, !dbg !37
  %94 = fsub float %65, %90, !dbg !37
  %95 = fmul float %91, %91, !dbg !38
  %96 = fmul float %92, %92, !dbg !38
  %97 = fmul float %93, %93, !dbg !38
  %98 = fmul float %94, %94, !dbg !38
  %99 = fadd float %95, %96, !dbg !39
  %100 = fadd float %97, %99, !dbg !39
  %101 = fadd float %98, %100, !dbg !39
  %102 = select i1 %17, float %101, float 0.000000e+00, !dbg !39
  %103 = bitcast float %102 to i32, !dbg !41
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 16, i32 31), !dbg !41
  %105 = bitcast i32 %104 to float, !dbg !41
  %106 = fadd float %102, %105, !dbg !39
  %107 = bitcast float %106 to i32, !dbg !41
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 8, i32 31), !dbg !41
  %109 = bitcast i32 %108 to float, !dbg !41
  %110 = fadd float %106, %109, !dbg !39
  %111 = bitcast float %110 to i32, !dbg !41
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 4, i32 31), !dbg !41
  %113 = bitcast i32 %112 to float, !dbg !41
  %114 = fadd float %110, %113, !dbg !39
  %115 = bitcast float %114 to i32, !dbg !41
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 2, i32 31), !dbg !41
  %117 = bitcast i32 %116 to float, !dbg !41
  %118 = fadd float %114, %117, !dbg !39
  %119 = bitcast float %118 to i32, !dbg !41
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 1, i32 31), !dbg !41
  %121 = bitcast i32 %120 to float, !dbg !41
  %122 = fadd float %118, %121, !dbg !39
  %123 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !42
  %124 = bitcast float %122 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !42
  %126 = load float, ptr addrspace(3) %125, align 4, !dbg !42
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float 1.280000e+02) #5, !dbg !43
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float 1.280000e+02) #5, !dbg !43
  %129 = fadd float %127, 0x3EE4F8B580000000, !dbg !44
  %130 = fadd float %128, 0x3EE4F8B580000000, !dbg !44
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i = icmp eq i32 %131, 0, !dbg !45
  br i1 %.not.i, label %134, label %132, !dbg !45

132:                                              ; preds = %9
  %133 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %129), !dbg !45
  br label %__nv_rsqrtf.exit, !dbg !45

134:                                              ; preds = %9
  %135 = tail call float @llvm.nvvm.rsqrt.approx.f(float %129), !dbg !45
  br label %__nv_rsqrtf.exit, !dbg !45

__nv_rsqrtf.exit:                                 ; preds = %132, %134
  %.0.i = phi float [ %133, %132 ], [ %135, %134 ], !dbg !45
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i10 = icmp eq i32 %139, 0, !dbg !45
  br i1 %.not.i10, label %142, label %140, !dbg !45

140:                                              ; preds = %__nv_rsqrtf.exit
  %141 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %130), !dbg !45
  br label %__nv_rsqrtf.exit12, !dbg !45

142:                                              ; preds = %__nv_rsqrtf.exit
  %143 = tail call float @llvm.nvvm.rsqrt.approx.f(float %130), !dbg !45
  br label %__nv_rsqrtf.exit12, !dbg !45

__nv_rsqrtf.exit12:                               ; preds = %140, %142
  %.0.i11 = phi float [ %141, %140 ], [ %143, %142 ], !dbg !45
  %144 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !27
  %145 = bitcast i32 %144 to float, !dbg !27
  %146 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !27
  %147 = bitcast i32 %146 to float, !dbg !27
  %148 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !27
  %149 = bitcast i32 %148 to float, !dbg !27
  %150 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !27
  %151 = bitcast i32 %150 to float, !dbg !27
  %152 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !25
  %153 = bitcast i32 %152 to float, !dbg !25
  %154 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !25
  %155 = bitcast i32 %154 to float, !dbg !25
  %156 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !25
  %157 = bitcast i32 %156 to float, !dbg !25
  %158 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !25
  %159 = bitcast i32 %158 to float, !dbg !25
  %160 = or disjoint i32 %11, %15, !dbg !13
  %161 = icmp slt i32 %160, 144, !dbg !14
  %162 = fmul float %91, %.0.i11, !dbg !46
  %163 = fmul float %92, %.0.i11, !dbg !46
  %164 = fmul float %93, %.0.i11, !dbg !46
  %165 = fmul float %94, %.0.i11, !dbg !46
  %166 = fmul float %162, %159, !dbg !47
  %167 = fmul float %163, %157, !dbg !47
  %168 = fmul float %164, %155, !dbg !47
  %169 = fmul float %165, %153, !dbg !47
  %170 = fadd float %166, %151, !dbg !48
  %171 = fadd float %167, %149, !dbg !48
  %172 = fadd float %168, %147, !dbg !48
  %173 = fadd float %169, %145, !dbg !48
  %174 = fmul float %.0.i, 7.812500e-03, !dbg !42
  %175 = bitcast float %162 to i32, !dbg !49
  %176 = bitcast float %163 to i32, !dbg !49
  %177 = bitcast float %164 to i32, !dbg !49
  %178 = bitcast float %165 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %175, i32 %176, i32 %177, i32 %178, ptr addrspace(1) %33, i1 %17) #5, !dbg !49
  %179 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !50
  %180 = bitcast float %170 to i32, !dbg !51
  %181 = bitcast float %171 to i32, !dbg !51
  %182 = bitcast float %172 to i32, !dbg !51
  %183 = bitcast float %173 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %180, i32 %181, i32 %182, i32 %183, ptr addrspace(1) %179, i1 %17) #5, !dbg !51
  %184 = sext i32 %160 to i64, !dbg !52
  %185 = getelementptr float, ptr addrspace(1) %6, i64 %184, !dbg !52
  %186 = and i32 %12, 248, !dbg !53
  %187 = icmp eq i32 %186, 0, !dbg !53
  %188 = bitcast float %174 to i32, !dbg !53
  %189 = and i1 %187, %161, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %188, ptr addrspace(1) %185, i1 %189) #5, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciiccb2fxvswssixbphpjmpxa7k24toswtmiu6drmnguqajjqnoc.py", directory: "inductor_cache/ii")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_10, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_10, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_10", linkageName: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 39, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 44, scope: !7)
!20 = !DILocation(line: 32, column: 34, scope: !7)
!21 = !DILocation(line: 32, column: 48, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 31, scope: !7)
!25 = !DILocation(line: 34, column: 36, scope: !7)
!26 = !DILocation(line: 35, column: 31, scope: !7)
!27 = !DILocation(line: 35, column: 36, scope: !7)
!28 = !DILocation(line: 36, column: 18, scope: !7)
!29 = !DILocation(line: 37, column: 18, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !34)
!31 = distinct !DILexicalBlockFile(scope: !33, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!33 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!34 = !DILocation(line: 42, column: 26, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !33, inlinedAt: !34)
!36 = !DILocation(line: 45, column: 20, scope: !7)
!37 = !DILocation(line: 46, column: 19, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !40)
!40 = !DILocation(line: 50, column: 26, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !33, inlinedAt: !40)
!42 = !DILocation(line: 61, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 20, scope: !7)
!44 = !DILocation(line: 55, column: 20, scope: !7)
!45 = !DILocation(line: 56, column: 28, scope: !7)
!46 = !DILocation(line: 57, column: 20, scope: !7)
!47 = !DILocation(line: 58, column: 20, scope: !7)
!48 = !DILocation(line: 59, column: 20, scope: !7)
!49 = !DILocation(line: 62, column: 49, scope: !7)
!50 = !DILocation(line: 63, column: 25, scope: !7)
!51 = !DILocation(line: 63, column: 46, scope: !7)
!52 = !DILocation(line: 64, column: 25, scope: !7)
!53 = !DILocation(line: 64, column: 37, scope: !7)
!54 = !DILocation(line: 64, column: 4, scope: !7)
