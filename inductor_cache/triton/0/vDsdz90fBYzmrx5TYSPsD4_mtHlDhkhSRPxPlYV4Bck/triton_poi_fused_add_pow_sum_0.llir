; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_pow_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = icmp slt i32 %10, 256, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %13 = sdiv i32 %.frozen, 4, !dbg !15
  %14 = mul i32 %13, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %14, !dbg !16
  %15 = srem i32 %11, 4, !dbg !16
  %16 = shl nsw i32 %.decomposed, 2, !dbg !17
  %17 = shl nsw i32 %15, 2, !dbg !17
  %18 = sext i32 %16 to i64, !dbg !18
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !18
  %20 = sext i32 %17 to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !18
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %12) #1, !dbg !19
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %12) #1, !dbg !19
  %24 = or disjoint i32 %16, 1, !dbg !20
  %25 = or disjoint i32 %17, 1, !dbg !20
  %26 = sext i32 %24 to i64, !dbg !21
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !21
  %28 = sext i32 %25 to i64, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !21
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %12) #1, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %12) #1, !dbg !22
  %32 = or disjoint i32 %16, 2, !dbg !23
  %33 = or disjoint i32 %17, 2, !dbg !23
  %34 = sext i32 %32 to i64, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !24
  %36 = sext i32 %33 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %12) #1, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %12) #1, !dbg !25
  %40 = or disjoint i32 %16, 3, !dbg !26
  %41 = or disjoint i32 %17, 3, !dbg !26
  %42 = sext i32 %40 to i64, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !27
  %44 = sext i32 %41 to i64, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !27
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %12) #1, !dbg !28
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %12) #1, !dbg !28
  %48 = shl nsw i32 %13, 2, !dbg !29
  %49 = sext i32 %48 to i64, !dbg !30
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !30
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %12) #1, !dbg !31
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %12) #1, !dbg !31
  %53 = or disjoint i32 %48, 1, !dbg !32
  %54 = sext i32 %53 to i64, !dbg !33
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !33
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %12) #1, !dbg !34
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %12) #1, !dbg !34
  %58 = or disjoint i32 %48, 2, !dbg !35
  %59 = sext i32 %58 to i64, !dbg !36
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !36
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %12) #1, !dbg !37
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %12) #1, !dbg !37
  %63 = or disjoint i32 %48, 3, !dbg !38
  %64 = sext i32 %63 to i64, !dbg !39
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !39
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %12) #1, !dbg !40
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %12) #1, !dbg !40
  %68 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !19
  %69 = insertelement <2 x i32> %68, i32 %51, i64 1, !dbg !19
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !19
  %71 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !22
  %72 = insertelement <2 x i32> %71, i32 %56, i64 1, !dbg !22
  %73 = bitcast <2 x i32> %72 to <2 x float>, !dbg !22
  %74 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !25
  %75 = insertelement <2 x i32> %74, i32 %61, i64 1, !dbg !25
  %76 = bitcast <2 x i32> %75 to <2 x float>, !dbg !25
  %77 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !28
  %78 = insertelement <2 x i32> %77, i32 %66, i64 1, !dbg !28
  %79 = bitcast <2 x i32> %78 to <2 x float>, !dbg !28
  %80 = fmul <2 x float> %70, %70, !dbg !41
  %81 = fmul <2 x float> %73, %73, !dbg !42
  %82 = fadd <2 x float> %80, %81, !dbg !43
  %83 = fmul <2 x float> %76, %76, !dbg !44
  %84 = fadd <2 x float> %82, %83, !dbg !45
  %85 = fmul <2 x float> %79, %79, !dbg !46
  %86 = fadd <2 x float> %84, %85, !dbg !47
  %87 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !19
  %88 = insertelement <2 x i32> %87, i32 %52, i64 1, !dbg !19
  %89 = bitcast <2 x i32> %88 to <2 x float>, !dbg !19
  %90 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !22
  %91 = insertelement <2 x i32> %90, i32 %57, i64 1, !dbg !22
  %92 = bitcast <2 x i32> %91 to <2 x float>, !dbg !22
  %93 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !25
  %94 = insertelement <2 x i32> %93, i32 %62, i64 1, !dbg !25
  %95 = bitcast <2 x i32> %94 to <2 x float>, !dbg !25
  %96 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !28
  %97 = insertelement <2 x i32> %96, i32 %67, i64 1, !dbg !28
  %98 = bitcast <2 x i32> %97 to <2 x float>, !dbg !28
  %99 = fmul <2 x float> %89, %89, !dbg !41
  %100 = fmul <2 x float> %92, %92, !dbg !42
  %101 = fadd <2 x float> %99, %100, !dbg !43
  %102 = fmul <2 x float> %95, %95, !dbg !44
  %103 = fadd <2 x float> %101, %102, !dbg !45
  %104 = fmul <2 x float> %98, %98, !dbg !46
  %105 = fadd <2 x float> %103, %104, !dbg !47
  %shift = shufflevector <2 x float> %86, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !48
  %106 = fadd <2 x float> %86, %shift, !dbg !48
  %shift1 = shufflevector <2 x float> %105, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !48
  %107 = fadd <2 x float> %105, %shift1, !dbg !48
  %108 = sext i32 %10 to i64, !dbg !49
  %109 = getelementptr float, ptr addrspace(1) %2, i64 %108, !dbg !49
  %bc = bitcast <2 x float> %106 to <2 x i32>, !dbg !50
  %110 = extractelement <2 x i32> %bc, i64 0, !dbg !50
  %bc2 = bitcast <2 x float> %107 to <2 x i32>, !dbg !50
  %111 = extractelement <2 x i32> %bc2, i64 0, !dbg !50
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %110, i32 %111, ptr addrspace(1) %109, i1 %12) #1, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctvo6izvhhsiyko2kututtyt5rdkgpryvlo6zcgmhwbvjgpza6lg.py", directory: "inductor_cache/tv")
!4 = !{ptr @triton_poi_fused_add_pow_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_pow_sum_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_pow_sum_0", linkageName: "triton_poi_fused_add_pow_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 32, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 37, scope: !7)
!20 = !DILocation(line: 28, column: 34, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 41, scope: !7)
!23 = !DILocation(line: 29, column: 34, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 41, scope: !7)
!26 = !DILocation(line: 30, column: 34, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 41, scope: !7)
!29 = !DILocation(line: 31, column: 33, scope: !7)
!30 = !DILocation(line: 31, column: 31, scope: !7)
!31 = !DILocation(line: 31, column: 38, scope: !7)
!32 = !DILocation(line: 32, column: 35, scope: !7)
!33 = !DILocation(line: 32, column: 31, scope: !7)
!34 = !DILocation(line: 32, column: 42, scope: !7)
!35 = !DILocation(line: 33, column: 35, scope: !7)
!36 = !DILocation(line: 33, column: 31, scope: !7)
!37 = !DILocation(line: 33, column: 42, scope: !7)
!38 = !DILocation(line: 34, column: 35, scope: !7)
!39 = !DILocation(line: 34, column: 31, scope: !7)
!40 = !DILocation(line: 34, column: 42, scope: !7)
!41 = !DILocation(line: 35, column: 18, scope: !7)
!42 = !DILocation(line: 36, column: 18, scope: !7)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 38, column: 18, scope: !7)
!45 = !DILocation(line: 39, column: 18, scope: !7)
!46 = !DILocation(line: 40, column: 18, scope: !7)
!47 = !DILocation(line: 41, column: 19, scope: !7)
!48 = !DILocation(line: 49, column: 20, scope: !7)
!49 = !DILocation(line: 50, column: 25, scope: !7)
!50 = !DILocation(line: 50, column: 37, scope: !7)
!51 = !DILocation(line: 50, column: 4, scope: !7)
