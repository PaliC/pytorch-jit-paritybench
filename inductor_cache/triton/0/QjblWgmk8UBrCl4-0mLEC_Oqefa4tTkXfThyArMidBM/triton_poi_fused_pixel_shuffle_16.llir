; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_pixel_shuffle_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 4, !dbg !12
  %14 = and i32 %12, 60, !dbg !12
  %15 = lshr i32 %11, 1, !dbg !12
  %16 = and i32 %15, 63, !dbg !12
  %17 = or disjoint i32 %10, %14, !dbg !13
  %18 = or disjoint i32 %10, %16, !dbg !13
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !14
  %20 = shl i32 %19, 3, !dbg !15
  %21 = lshr i32 %11, 4, !dbg !16
  %22 = and i32 %21, 7, !dbg !16
  %23 = or disjoint i32 %20, %22, !dbg !17
  %24 = or disjoint i32 %20, %13, !dbg !17
  %25 = icmp slt i32 %23, 8, !dbg !18
  %26 = icmp slt i32 %24, 8, !dbg !18
  %27 = srem i32 %17, 8, !dbg !19
  %28 = sdiv i32 %18, 8, !dbg !20
  %29 = srem i32 %28, 8, !dbg !21
  %30 = sdiv i32 %17, 512, !dbg !22
  %31 = sdiv i32 %18, 512, !dbg !22
  %32 = srem i32 %31, 4, !dbg !23
  %33 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !24
  %34 = shufflevector <2 x i32> %33, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !24
  %35 = sdiv <2 x i32> %34, <i32 64, i32 8>, !dbg !24
  %36 = srem <2 x i32> %35, splat (i32 8), !dbg !25
  %37 = insertelement <4 x i32> poison, i32 %23, i64 0, !dbg !26
  %38 = insertelement <4 x i32> %37, i32 %30, i64 1, !dbg !26
  %39 = shufflevector <2 x i32> %36, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !26
  %40 = shufflevector <4 x i32> %38, <4 x i32> %39, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !26
  %41 = shl <4 x i32> %40, <i32 6, i32 12, i32 3, i32 9>, !dbg !26
  %42 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %41), !dbg !27
  %op.rdx = add i32 %42, %27, !dbg !28
  %43 = sext i32 %op.rdx to i64, !dbg !29
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !29
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %25) #5, !dbg !30
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !30
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !30
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !30
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !30
  %50 = shl i32 %11, 5, !dbg !30
  %51 = and i32 %50, 480, !dbg !30
  %52 = or disjoint i32 %51, %22, !dbg !30
  %53 = and i32 %12, 508, !dbg !30
  %54 = lshr exact i32 %51, 1, !dbg !30
  %55 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %54, !dbg !30
  %56 = getelementptr inbounds float, ptr addrspace(3) %55, i32 %52, !dbg !30
  %57 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %57, i1 true) #5, !dbg !30
  %58 = or disjoint i32 %52, 8, !dbg !30
  %59 = lshr i32 %58, 3, !dbg !30
  %60 = getelementptr float, ptr addrspace(3) @global_smem, i32 %59, !dbg !30
  %61 = getelementptr float, ptr addrspace(3) %60, i32 %58, !dbg !30
  %62 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %62, i1 true) #5, !dbg !30
  %63 = or disjoint i32 %52, 16, !dbg !30
  %64 = lshr i32 %63, 3, !dbg !30
  %65 = getelementptr float, ptr addrspace(3) @global_smem, i32 %64, !dbg !30
  %66 = getelementptr float, ptr addrspace(3) %65, i32 %63, !dbg !30
  %67 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 true) #5, !dbg !30
  %68 = or disjoint i32 %52, 24, !dbg !30
  %69 = lshr i32 %68, 3, !dbg !30
  %70 = getelementptr float, ptr addrspace(3) @global_smem, i32 %69, !dbg !30
  %71 = getelementptr float, ptr addrspace(3) %70, i32 %68, !dbg !30
  %72 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 true) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %73 = lshr i32 %53, 3, !dbg !30
  %74 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %73, !dbg !30
  %75 = getelementptr inbounds float, ptr addrspace(3) %74, i32 %53, !dbg !30
  %76 = load <4 x float>, ptr addrspace(3) %75, align 4, !dbg !30
  %77 = shl nsw i32 %29, 3, !dbg !31
  %78 = add i32 %77, %24, !dbg !32
  %79 = shl nsw i32 %32, 6, !dbg !33
  %80 = add i32 %78, %79, !dbg !34
  %81 = sext i32 %80 to i64, !dbg !35
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !35
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %82, i1 %26) #5, !dbg !36
  %84 = getelementptr float, ptr addrspace(1) %2, i64 %81, !dbg !37
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %84, i1 %26) #5, !dbg !38
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !38
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !38
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !38
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !38
  %90 = bitcast i32 %86 to float, !dbg !38
  %91 = bitcast i32 %87 to float, !dbg !38
  %92 = bitcast i32 %88 to float, !dbg !38
  %93 = bitcast i32 %89 to float, !dbg !38
  %94 = getelementptr float, ptr addrspace(1) %3, i64 %81, !dbg !39
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 %26) #5, !dbg !40
  %96 = getelementptr float, ptr addrspace(1) %4, i64 %81, !dbg !41
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 %26) #5, !dbg !42
  %98 = fadd float %90, 0x3EE4F8B580000000, !dbg !43
  %99 = fadd float %91, 0x3EE4F8B580000000, !dbg !43
  %100 = fadd float %92, 0x3EE4F8B580000000, !dbg !43
  %101 = fadd float %93, 0x3EE4F8B580000000, !dbg !43
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i = icmp eq i32 %102, 0, !dbg !44
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !44
  %.not1.i = icmp eq i32 %103, 0, !dbg !44
  br i1 %.not.i, label %109, label %104, !dbg !44

104:                                              ; preds = %8
  br i1 %.not1.i, label %107, label %105, !dbg !44

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %98) #5, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %98) #5, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

109:                                              ; preds = %8
  br i1 %.not1.i, label %112, label %110, !dbg !44

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.f(float %98) #5, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.f(float %98) #5, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

__nv_sqrtf.exit:                                  ; preds = %105, %107, %110, %112
  %.0.i = phi float [ %106, %105 ], [ %108, %107 ], [ %111, %110 ], [ %113, %112 ], !dbg !44
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i3 = icmp eq i32 %114, 0, !dbg !44
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !44
  %.not1.i6 = icmp eq i32 %115, 0, !dbg !44
  br i1 %.not.i3, label %121, label %116, !dbg !44

116:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %119, label %117, !dbg !44

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #5, !dbg !44
  br label %__nv_sqrtf.exit7, !dbg !44

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #5, !dbg !44
  br label %__nv_sqrtf.exit7, !dbg !44

121:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %124, label %122, !dbg !44

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #5, !dbg !44
  br label %__nv_sqrtf.exit7, !dbg !44

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #5, !dbg !44
  br label %__nv_sqrtf.exit7, !dbg !44

__nv_sqrtf.exit7:                                 ; preds = %117, %119, %122, %124
  %.0.i5 = phi float [ %118, %117 ], [ %120, %119 ], [ %123, %122 ], [ %125, %124 ], !dbg !44
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i8 = icmp eq i32 %126, 0, !dbg !44
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !44
  %.not1.i11 = icmp eq i32 %127, 0, !dbg !44
  br i1 %.not.i8, label %133, label %128, !dbg !44

128:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %131, label %129, !dbg !44

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #5, !dbg !44
  br label %__nv_sqrtf.exit12, !dbg !44

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #5, !dbg !44
  br label %__nv_sqrtf.exit12, !dbg !44

133:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %136, label %134, !dbg !44

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #5, !dbg !44
  br label %__nv_sqrtf.exit12, !dbg !44

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #5, !dbg !44
  br label %__nv_sqrtf.exit12, !dbg !44

__nv_sqrtf.exit12:                                ; preds = %129, %131, %134, %136
  %.0.i10 = phi float [ %130, %129 ], [ %132, %131 ], [ %135, %134 ], [ %137, %136 ], !dbg !44
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i13 = icmp eq i32 %138, 0, !dbg !44
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !44
  %.not1.i16 = icmp eq i32 %139, 0, !dbg !44
  br i1 %.not.i13, label %145, label %140, !dbg !44

140:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %143, label %141, !dbg !44

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %101) #5, !dbg !44
  br label %__nv_sqrtf.exit17, !dbg !44

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %101) #5, !dbg !44
  br label %__nv_sqrtf.exit17, !dbg !44

145:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %148, label %146, !dbg !44

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %101) #5, !dbg !44
  br label %__nv_sqrtf.exit17, !dbg !44

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %101) #5, !dbg !44
  br label %__nv_sqrtf.exit17, !dbg !44

__nv_sqrtf.exit17:                                ; preds = %141, %143, %146, %148
  %.0.i15 = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !44
  %150 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !36
  %151 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !36
  %152 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !36
  %153 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !36
  %154 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !42
  %155 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !42
  %156 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !42
  %157 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !42
  %158 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !40
  %159 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !40
  %160 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !40
  %161 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !40
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !45
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #5, !dbg !45
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #5, !dbg !45
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #5, !dbg !45
  %166 = insertelement <4 x i32> poison, i32 %153, i64 0, !dbg !36
  %167 = insertelement <4 x i32> %166, i32 %152, i64 1, !dbg !36
  %168 = insertelement <4 x i32> %167, i32 %151, i64 2, !dbg !36
  %169 = insertelement <4 x i32> %168, i32 %150, i64 3, !dbg !36
  %170 = bitcast <4 x i32> %169 to <4 x float>, !dbg !36
  %171 = fsub <4 x float> %76, %170, !dbg !46
  %172 = insertelement <4 x i32> poison, i32 %157, i64 0, !dbg !42
  %173 = insertelement <4 x i32> %172, i32 %156, i64 1, !dbg !42
  %174 = insertelement <4 x i32> %173, i32 %155, i64 2, !dbg !42
  %175 = insertelement <4 x i32> %174, i32 %154, i64 3, !dbg !42
  %176 = bitcast <4 x i32> %175 to <4 x float>, !dbg !42
  %177 = insertelement <4 x i32> poison, i32 %161, i64 0, !dbg !40
  %178 = insertelement <4 x i32> %177, i32 %160, i64 1, !dbg !40
  %179 = insertelement <4 x i32> %178, i32 %159, i64 2, !dbg !40
  %180 = insertelement <4 x i32> %179, i32 %158, i64 3, !dbg !40
  %181 = bitcast <4 x i32> %180 to <4 x float>, !dbg !40
  %182 = insertelement <4 x float> poison, float %162, i64 0, !dbg !47
  %183 = insertelement <4 x float> %182, float %163, i64 1, !dbg !47
  %184 = insertelement <4 x float> %183, float %164, i64 2, !dbg !47
  %185 = insertelement <4 x float> %184, float %165, i64 3, !dbg !47
  %186 = fmul <4 x float> %171, %185, !dbg !47
  %187 = fmul <4 x float> %186, %181, !dbg !48
  %188 = fadd <4 x float> %187, %176, !dbg !49
  %189 = fcmp olt <4 x float> %188, zeroinitializer, !dbg !50
  %190 = extractelement <4 x i1> %189, i64 0, !dbg !54
  %191 = extractelement <4 x i1> %189, i64 1, !dbg !54
  %192 = extractelement <4 x i1> %189, i64 2, !dbg !54
  %193 = extractelement <4 x i1> %189, i64 3, !dbg !54
  %194 = shl i32 %18, 3, !dbg !55
  %195 = add i32 %24, %194, !dbg !56
  %196 = sext i32 %195 to i64, !dbg !57
  %197 = getelementptr float, ptr addrspace(1) %5, i64 %196, !dbg !57
  %bc = bitcast <4 x float> %188 to <4 x i32>, !dbg !58
  %198 = extractelement <4 x i32> %bc, i64 0, !dbg !58
  %199 = select i1 %190, i32 0, i32 %198, !dbg !54
  %bc18 = bitcast <4 x float> %188 to <4 x i32>, !dbg !58
  %200 = extractelement <4 x i32> %bc18, i64 1, !dbg !58
  %201 = select i1 %191, i32 0, i32 %200, !dbg !54
  %bc19 = bitcast <4 x float> %188 to <4 x i32>, !dbg !58
  %202 = extractelement <4 x i32> %bc19, i64 2, !dbg !58
  %203 = select i1 %192, i32 0, i32 %202, !dbg !54
  %bc20 = bitcast <4 x float> %188 to <4 x i32>, !dbg !58
  %204 = extractelement <4 x i32> %bc20, i64 3, !dbg !58
  %205 = select i1 %193, i32 0, i32 %204, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %199, i32 %201, i32 %203, i32 %205, ptr addrspace(1) %197, i1 %26) #5, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3cdbhjxmsend7ypfcp7e33aht3v6kggiwqjtrzpzqupjxvjtpwi.py", directory: "inductor_cache/3c")
!4 = !{ptr @triton_poi_fused_pixel_shuffle_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_pixel_shuffle_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_pixel_shuffle_16", linkageName: "triton_poi_fused_pixel_shuffle_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 21, scope: !7)
!21 = !DILocation(line: 30, column: 26, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 33, column: 28, scope: !7)
!24 = !DILocation(line: 31, column: 21, scope: !7)
!25 = !DILocation(line: 31, column: 27, scope: !7)
!26 = !DILocation(line: 35, column: 45, scope: !7)
!27 = !DILocation(line: 35, column: 59, scope: !7)
!28 = !DILocation(line: 35, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 69, scope: !7)
!31 = !DILocation(line: 36, column: 37, scope: !7)
!32 = !DILocation(line: 36, column: 35, scope: !7)
!33 = !DILocation(line: 36, column: 45, scope: !7)
!34 = !DILocation(line: 36, column: 42, scope: !7)
!35 = !DILocation(line: 36, column: 30, scope: !7)
!36 = !DILocation(line: 36, column: 50, scope: !7)
!37 = !DILocation(line: 37, column: 30, scope: !7)
!38 = !DILocation(line: 37, column: 50, scope: !7)
!39 = !DILocation(line: 38, column: 31, scope: !7)
!40 = !DILocation(line: 38, column: 51, scope: !7)
!41 = !DILocation(line: 39, column: 31, scope: !7)
!42 = !DILocation(line: 39, column: 51, scope: !7)
!43 = !DILocation(line: 42, column: 18, scope: !7)
!44 = !DILocation(line: 43, column: 26, scope: !7)
!45 = !DILocation(line: 45, column: 18, scope: !7)
!46 = !DILocation(line: 40, column: 18, scope: !7)
!47 = !DILocation(line: 48, column: 19, scope: !7)
!48 = !DILocation(line: 49, column: 20, scope: !7)
!49 = !DILocation(line: 50, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 52, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 53, column: 32, scope: !7)
!56 = !DILocation(line: 53, column: 30, scope: !7)
!57 = !DILocation(line: 53, column: 25, scope: !7)
!58 = !DILocation(line: 53, column: 44, scope: !7)
!59 = !DILocation(line: 53, column: 4, scope: !7)
