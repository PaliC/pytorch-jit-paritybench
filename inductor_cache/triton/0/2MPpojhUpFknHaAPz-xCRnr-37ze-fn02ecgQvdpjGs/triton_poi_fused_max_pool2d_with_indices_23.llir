; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = icmp slt i32 %6, 100, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %9 = shl i32 %8, 10, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = shl i32 %10, 3, !dbg !14
  %12 = and i32 %11, 1016, !dbg !14
  %13 = or disjoint i32 %12, 4, !dbg !14
  %14 = and i32 %10, 127, !dbg !14
  %15 = or disjoint i32 %14, 128, !dbg !14
  %16 = or disjoint i32 %14, 256, !dbg !14
  %17 = or disjoint i32 %14, 384, !dbg !14
  %18 = or disjoint i32 %14, 512, !dbg !14
  %19 = or disjoint i32 %14, 640, !dbg !14
  %20 = or disjoint i32 %14, 768, !dbg !14
  %21 = or disjoint i32 %14, 896, !dbg !14
  %22 = or disjoint i32 %9, %12, !dbg !15
  %23 = or disjoint i32 %9, %13, !dbg !15
  %24 = or disjoint i32 %9, %14, !dbg !15
  %25 = or disjoint i32 %9, %15, !dbg !15
  %26 = or disjoint i32 %9, %16, !dbg !15
  %27 = or disjoint i32 %9, %17, !dbg !15
  %28 = or disjoint i32 %9, %18, !dbg !15
  %29 = or disjoint i32 %9, %19, !dbg !15
  %30 = or disjoint i32 %9, %20, !dbg !15
  %31 = or disjoint i32 %9, %21, !dbg !15
  %32 = icmp slt i32 %22, 1024, !dbg !16
  %33 = icmp slt i32 %24, 1024, !dbg !16
  %34 = icmp slt i32 %25, 1024, !dbg !16
  %35 = icmp slt i32 %26, 1024, !dbg !16
  %36 = icmp slt i32 %27, 1024, !dbg !16
  %37 = icmp slt i32 %28, 1024, !dbg !16
  %38 = icmp slt i32 %29, 1024, !dbg !16
  %39 = icmp slt i32 %30, 1024, !dbg !16
  %40 = icmp slt i32 %31, 1024, !dbg !16
  %41 = sdiv i32 %6, 5, !dbg !17
  %.frozen = freeze i32 %6, !dbg !18
  %42 = sdiv i32 %.frozen, 25, !dbg !18
  %43 = mul i32 %42, 25, !dbg !19
  %.decomposed = sub i32 %.frozen, %43, !dbg !19
  %44 = mul i32 %42, 82944, !dbg !20
  %45 = insertelement <2 x i32> poison, i32 %6, i64 0, !dbg !21
  %46 = insertelement <2 x i32> %45, i32 %41, i64 1, !dbg !21
  %47 = srem <2 x i32> %46, splat (i32 5), !dbg !21
  %48 = extractelement <2 x i32> %47, i64 1, !dbg !22
  %49 = icmp sgt i32 %48, 0, !dbg !23
  %50 = shl nsw <2 x i32> %47, splat (i32 1), !dbg !24
  %51 = extractelement <2 x i32> %47, i64 0, !dbg !22
  %52 = icmp sgt i32 %51, 0, !dbg !25
  %53 = and i1 %52, %49, !dbg !26
  %54 = shl nsw i32 %51, 11, !dbg !27
  %55 = mul nsw i32 %48, 18432, !dbg !28
  %56 = add i32 %44, %54, !dbg !29
  %57 = add i32 %56, -10240, !dbg !30
  %58 = add i32 %57, %22, !dbg !31
  %59 = add i32 %58, %55, !dbg !32
  %60 = add i32 %57, %23, !dbg !31
  %61 = add i32 %60, %55, !dbg !32
  %62 = sext i32 %59 to i64, !dbg !33
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !33
  %64 = sext i32 %61 to i64, !dbg !33
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !33
  %66 = and i1 %53, %32, !dbg !34
  %67 = and i1 %7, %66, !dbg !35
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %63, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67) #2, !dbg !36
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !36
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !36
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !36
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !36
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %65, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67) #2, !dbg !36
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !36
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !36
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !36
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !36
  %78 = icmp sgt <2 x i32> %47, splat (i32 -1), !dbg !37
  %79 = extractelement <2 x i1> %78, i64 0, !dbg !38
  %80 = and i1 %79, %49, !dbg !38
  %81 = add i32 %56, -9216, !dbg !39
  %82 = add i32 %81, %22, !dbg !40
  %83 = add i32 %82, %55, !dbg !41
  %84 = add i32 %81, %23, !dbg !40
  %85 = add i32 %84, %55, !dbg !41
  %86 = sext i32 %83 to i64, !dbg !42
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !42
  %88 = sext i32 %85 to i64, !dbg !42
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !42
  %90 = and i1 %80, %32, !dbg !43
  %91 = and i1 %7, %90, !dbg !44
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %87, i1 %91, i32 -8388608, i1 %91, i32 -8388608, i1 %91, i32 -8388608, i1 %91, i32 -8388608, i1 %91) #2, !dbg !45
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !45
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !45
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !45
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !45
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %89, i1 %91, i32 -8388608, i1 %91, i32 -8388608, i1 %91, i32 -8388608, i1 %91, i32 -8388608, i1 %91) #2, !dbg !45
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !45
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !45
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !45
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !45
  %102 = or disjoint <2 x i32> %50, splat (i32 1), !dbg !46
  %103 = icmp slt <2 x i32> %102, splat (i32 9), !dbg !47
  %104 = and <2 x i1> %78, %103, !dbg !48
  %105 = extractelement <2 x i1> %104, i64 0, !dbg !49
  %106 = and i1 %49, %105, !dbg !50
  %107 = add i32 %56, -8192, !dbg !51
  %108 = add i32 %107, %22, !dbg !52
  %109 = add i32 %108, %55, !dbg !53
  %110 = add i32 %107, %23, !dbg !52
  %111 = add i32 %110, %55, !dbg !53
  %112 = sext i32 %109 to i64, !dbg !54
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !54
  %114 = sext i32 %111 to i64, !dbg !54
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !54
  %116 = and i1 %32, %106, !dbg !55
  %117 = and i1 %7, %116, !dbg !56
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %113, i1 %117, i32 -8388608, i1 %117, i32 -8388608, i1 %117, i32 -8388608, i1 %117, i32 -8388608, i1 %117) #2, !dbg !57
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !57
  %120 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !57
  %121 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !57
  %122 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !57
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %115, i1 %117, i32 -8388608, i1 %117, i32 -8388608, i1 %117, i32 -8388608, i1 %117, i32 -8388608, i1 %117) #2, !dbg !57
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !57
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !57
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !57
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !57
  %128 = extractelement <2 x i1> %78, i64 1, !dbg !58
  %129 = and i1 %52, %128, !dbg !58
  %130 = add i32 %56, -1024, !dbg !59
  %131 = add i32 %130, %22, !dbg !60
  %132 = add i32 %131, %55, !dbg !61
  %133 = add i32 %130, %23, !dbg !60
  %134 = add i32 %133, %55, !dbg !61
  %135 = sext i32 %132 to i64, !dbg !62
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !62
  %137 = sext i32 %134 to i64, !dbg !62
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !62
  %139 = and i1 %129, %32, !dbg !63
  %140 = and i1 %7, %139, !dbg !64
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %136, i1 %140, i32 -8388608, i1 %140, i32 -8388608, i1 %140, i32 -8388608, i1 %140, i32 -8388608, i1 %140) #2, !dbg !65
  %142 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !65
  %143 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !65
  %144 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !65
  %145 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !65
  %146 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %138, i1 %140, i32 -8388608, i1 %140, i32 -8388608, i1 %140, i32 -8388608, i1 %140, i32 -8388608, i1 %140) #2, !dbg !65
  %147 = extractvalue { i32, i32, i32, i32 } %146, 0, !dbg !65
  %148 = extractvalue { i32, i32, i32, i32 } %146, 1, !dbg !65
  %149 = extractvalue { i32, i32, i32, i32 } %146, 2, !dbg !65
  %150 = extractvalue { i32, i32, i32, i32 } %146, 3, !dbg !65
  %151 = or i32 %48, %51, !dbg !22
  %152 = icmp sgt i32 %151, -1, !dbg !22
  %153 = add i32 %56, %22, !dbg !66
  %154 = add i32 %153, %55, !dbg !67
  %155 = add i32 %56, %23, !dbg !66
  %156 = add i32 %155, %55, !dbg !67
  %157 = sext i32 %154 to i64, !dbg !68
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !68
  %159 = sext i32 %156 to i64, !dbg !68
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !68
  %161 = and i1 %152, %32, !dbg !69
  %162 = and i1 %7, %161, !dbg !70
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %158, i1 %162, i32 -8388608, i1 %162, i32 -8388608, i1 %162, i32 -8388608, i1 %162, i32 -8388608, i1 %162) #2, !dbg !71
  %164 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !71
  %165 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !71
  %166 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !71
  %167 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !71
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %160, i1 %162, i32 -8388608, i1 %162, i32 -8388608, i1 %162, i32 -8388608, i1 %162, i32 -8388608, i1 %162) #2, !dbg !71
  %169 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !71
  %170 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !71
  %171 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !71
  %172 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !71
  %173 = and i1 %128, %105, !dbg !72
  %174 = add i32 %56, 1024, !dbg !73
  %175 = add i32 %174, %22, !dbg !74
  %176 = add i32 %175, %55, !dbg !75
  %177 = add i32 %174, %23, !dbg !74
  %178 = add i32 %177, %55, !dbg !75
  %179 = sext i32 %176 to i64, !dbg !76
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !76
  %181 = sext i32 %178 to i64, !dbg !76
  %182 = getelementptr float, ptr addrspace(1) %0, i64 %181, !dbg !76
  %183 = and i1 %32, %173, !dbg !77
  %184 = and i1 %7, %183, !dbg !78
  %185 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %180, i1 %184, i32 -8388608, i1 %184, i32 -8388608, i1 %184, i32 -8388608, i1 %184, i32 -8388608, i1 %184) #2, !dbg !79
  %186 = extractvalue { i32, i32, i32, i32 } %185, 0, !dbg !79
  %187 = extractvalue { i32, i32, i32, i32 } %185, 1, !dbg !79
  %188 = extractvalue { i32, i32, i32, i32 } %185, 2, !dbg !79
  %189 = extractvalue { i32, i32, i32, i32 } %185, 3, !dbg !79
  %190 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %182, i1 %184, i32 -8388608, i1 %184, i32 -8388608, i1 %184, i32 -8388608, i1 %184, i32 -8388608, i1 %184) #2, !dbg !79
  %191 = extractvalue { i32, i32, i32, i32 } %190, 0, !dbg !79
  %192 = extractvalue { i32, i32, i32, i32 } %190, 1, !dbg !79
  %193 = extractvalue { i32, i32, i32, i32 } %190, 2, !dbg !79
  %194 = extractvalue { i32, i32, i32, i32 } %190, 3, !dbg !79
  %195 = extractelement <2 x i1> %104, i64 1, !dbg !49
  %196 = and i1 %52, %195, !dbg !80
  %197 = add i32 %56, 8192, !dbg !81
  %198 = add i32 %197, %22, !dbg !82
  %199 = add i32 %198, %55, !dbg !83
  %200 = add i32 %197, %23, !dbg !82
  %201 = add i32 %200, %55, !dbg !83
  %202 = sext i32 %199 to i64, !dbg !84
  %203 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !84
  %204 = sext i32 %201 to i64, !dbg !84
  %205 = getelementptr float, ptr addrspace(1) %0, i64 %204, !dbg !84
  %206 = and i1 %32, %196, !dbg !85
  %207 = and i1 %7, %206, !dbg !86
  %208 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %203, i1 %207, i32 -8388608, i1 %207, i32 -8388608, i1 %207, i32 -8388608, i1 %207, i32 -8388608, i1 %207) #2, !dbg !87
  %209 = extractvalue { i32, i32, i32, i32 } %208, 0, !dbg !87
  %210 = extractvalue { i32, i32, i32, i32 } %208, 1, !dbg !87
  %211 = extractvalue { i32, i32, i32, i32 } %208, 2, !dbg !87
  %212 = extractvalue { i32, i32, i32, i32 } %208, 3, !dbg !87
  %213 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %205, i1 %207, i32 -8388608, i1 %207, i32 -8388608, i1 %207, i32 -8388608, i1 %207, i32 -8388608, i1 %207) #2, !dbg !87
  %214 = extractvalue { i32, i32, i32, i32 } %213, 0, !dbg !87
  %215 = extractvalue { i32, i32, i32, i32 } %213, 1, !dbg !87
  %216 = extractvalue { i32, i32, i32, i32 } %213, 2, !dbg !87
  %217 = extractvalue { i32, i32, i32, i32 } %213, 3, !dbg !87
  %218 = and i1 %79, %195, !dbg !88
  %219 = add i32 %56, 9216, !dbg !89
  %220 = add i32 %219, %22, !dbg !90
  %221 = add i32 %220, %55, !dbg !91
  %222 = add i32 %219, %23, !dbg !90
  %223 = add i32 %222, %55, !dbg !91
  %224 = sext i32 %221 to i64, !dbg !92
  %225 = getelementptr float, ptr addrspace(1) %0, i64 %224, !dbg !92
  %226 = sext i32 %223 to i64, !dbg !92
  %227 = getelementptr float, ptr addrspace(1) %0, i64 %226, !dbg !92
  %228 = and i1 %32, %218, !dbg !93
  %229 = and i1 %7, %228, !dbg !94
  %230 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %225, i1 %229, i32 -8388608, i1 %229, i32 -8388608, i1 %229, i32 -8388608, i1 %229, i32 -8388608, i1 %229) #2, !dbg !95
  %231 = extractvalue { i32, i32, i32, i32 } %230, 0, !dbg !95
  %232 = extractvalue { i32, i32, i32, i32 } %230, 1, !dbg !95
  %233 = extractvalue { i32, i32, i32, i32 } %230, 2, !dbg !95
  %234 = extractvalue { i32, i32, i32, i32 } %230, 3, !dbg !95
  %235 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %227, i1 %229, i32 -8388608, i1 %229, i32 -8388608, i1 %229, i32 -8388608, i1 %229, i32 -8388608, i1 %229) #2, !dbg !95
  %236 = extractvalue { i32, i32, i32, i32 } %235, 0, !dbg !95
  %237 = extractvalue { i32, i32, i32, i32 } %235, 1, !dbg !95
  %238 = extractvalue { i32, i32, i32, i32 } %235, 2, !dbg !95
  %239 = extractvalue { i32, i32, i32, i32 } %235, 3, !dbg !95
  %240 = and i1 %105, %195, !dbg !49
  %241 = add i32 %56, 10240, !dbg !96
  %242 = add i32 %241, %22, !dbg !97
  %243 = add i32 %242, %55, !dbg !98
  %244 = add i32 %241, %23, !dbg !97
  %245 = add i32 %244, %55, !dbg !98
  %246 = sext i32 %243 to i64, !dbg !99
  %247 = getelementptr float, ptr addrspace(1) %0, i64 %246, !dbg !99
  %248 = sext i32 %245 to i64, !dbg !99
  %249 = getelementptr float, ptr addrspace(1) %0, i64 %248, !dbg !99
  %250 = and i1 %32, %240, !dbg !100
  %251 = and i1 %7, %250, !dbg !101
  %252 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %247, i1 %251, i32 -8388608, i1 %251, i32 -8388608, i1 %251, i32 -8388608, i1 %251, i32 -8388608, i1 %251) #2, !dbg !102
  %253 = extractvalue { i32, i32, i32, i32 } %252, 0, !dbg !102
  %254 = extractvalue { i32, i32, i32, i32 } %252, 1, !dbg !102
  %255 = extractvalue { i32, i32, i32, i32 } %252, 2, !dbg !102
  %256 = extractvalue { i32, i32, i32, i32 } %252, 3, !dbg !102
  %257 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %249, i1 %251, i32 -8388608, i1 %251, i32 -8388608, i1 %251, i32 -8388608, i1 %251, i32 -8388608, i1 %251) #2, !dbg !102
  %258 = extractvalue { i32, i32, i32, i32 } %257, 0, !dbg !102
  %259 = extractvalue { i32, i32, i32, i32 } %257, 1, !dbg !102
  %260 = extractvalue { i32, i32, i32, i32 } %257, 2, !dbg !102
  %261 = extractvalue { i32, i32, i32, i32 } %257, 3, !dbg !102
  %262 = insertelement <4 x i32> poison, i32 %69, i64 0, !dbg !36
  %263 = insertelement <4 x i32> %262, i32 %70, i64 1, !dbg !36
  %264 = insertelement <4 x i32> %263, i32 %71, i64 2, !dbg !36
  %265 = insertelement <4 x i32> %264, i32 %72, i64 3, !dbg !36
  %266 = bitcast <4 x i32> %265 to <4 x float>, !dbg !36
  %267 = insertelement <4 x i32> poison, i32 %93, i64 0, !dbg !45
  %268 = insertelement <4 x i32> %267, i32 %94, i64 1, !dbg !45
  %269 = insertelement <4 x i32> %268, i32 %95, i64 2, !dbg !45
  %270 = insertelement <4 x i32> %269, i32 %96, i64 3, !dbg !45
  %271 = bitcast <4 x i32> %270 to <4 x float>, !dbg !45
  %272 = fcmp ogt <4 x float> %271, %266, !dbg !103
  %273 = fcmp uno <4 x float> %271, zeroinitializer, !dbg !107
  %274 = or <4 x i1> %272, %273, !dbg !108
  %.v = select <4 x i1> %274, <4 x i32> %270, <4 x i32> %265, !dbg !109
  %275 = bitcast <4 x i32> %.v to <4 x float>, !dbg !109
  %276 = insertelement <4 x i32> poison, i32 %119, i64 0, !dbg !57
  %277 = insertelement <4 x i32> %276, i32 %120, i64 1, !dbg !57
  %278 = insertelement <4 x i32> %277, i32 %121, i64 2, !dbg !57
  %279 = insertelement <4 x i32> %278, i32 %122, i64 3, !dbg !57
  %280 = bitcast <4 x i32> %279 to <4 x float>, !dbg !57
  %281 = fcmp olt <4 x float> %275, %280, !dbg !110
  %282 = fcmp uno <4 x float> %280, zeroinitializer, !dbg !112
  %283 = or <4 x i1> %282, %281, !dbg !113
  %.v1 = select <4 x i1> %283, <4 x i32> %279, <4 x i32> %.v, !dbg !114
  %284 = bitcast <4 x i32> %.v1 to <4 x float>, !dbg !114
  %285 = insertelement <4 x i32> poison, i32 %142, i64 0, !dbg !65
  %286 = insertelement <4 x i32> %285, i32 %143, i64 1, !dbg !65
  %287 = insertelement <4 x i32> %286, i32 %144, i64 2, !dbg !65
  %288 = insertelement <4 x i32> %287, i32 %145, i64 3, !dbg !65
  %289 = bitcast <4 x i32> %288 to <4 x float>, !dbg !65
  %290 = fcmp olt <4 x float> %284, %289, !dbg !115
  %291 = fcmp uno <4 x float> %289, zeroinitializer, !dbg !117
  %292 = or <4 x i1> %291, %290, !dbg !118
  %.v2 = select <4 x i1> %292, <4 x i32> %288, <4 x i32> %.v1, !dbg !119
  %293 = bitcast <4 x i32> %.v2 to <4 x float>, !dbg !119
  %294 = insertelement <4 x i32> poison, i32 %164, i64 0, !dbg !71
  %295 = insertelement <4 x i32> %294, i32 %165, i64 1, !dbg !71
  %296 = insertelement <4 x i32> %295, i32 %166, i64 2, !dbg !71
  %297 = insertelement <4 x i32> %296, i32 %167, i64 3, !dbg !71
  %298 = bitcast <4 x i32> %297 to <4 x float>, !dbg !71
  %299 = fcmp olt <4 x float> %293, %298, !dbg !120
  %300 = fcmp uno <4 x float> %298, zeroinitializer, !dbg !122
  %301 = or <4 x i1> %300, %299, !dbg !123
  %.v3 = select <4 x i1> %301, <4 x i32> %297, <4 x i32> %.v2, !dbg !124
  %302 = bitcast <4 x i32> %.v3 to <4 x float>, !dbg !124
  %303 = insertelement <4 x i32> poison, i32 %186, i64 0, !dbg !79
  %304 = insertelement <4 x i32> %303, i32 %187, i64 1, !dbg !79
  %305 = insertelement <4 x i32> %304, i32 %188, i64 2, !dbg !79
  %306 = insertelement <4 x i32> %305, i32 %189, i64 3, !dbg !79
  %307 = bitcast <4 x i32> %306 to <4 x float>, !dbg !79
  %308 = fcmp olt <4 x float> %302, %307, !dbg !125
  %309 = fcmp uno <4 x float> %307, zeroinitializer, !dbg !127
  %310 = or <4 x i1> %309, %308, !dbg !128
  %.v4 = select <4 x i1> %310, <4 x i32> %306, <4 x i32> %.v3, !dbg !129
  %311 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !129
  %312 = insertelement <4 x i32> poison, i32 %209, i64 0, !dbg !87
  %313 = insertelement <4 x i32> %312, i32 %210, i64 1, !dbg !87
  %314 = insertelement <4 x i32> %313, i32 %211, i64 2, !dbg !87
  %315 = insertelement <4 x i32> %314, i32 %212, i64 3, !dbg !87
  %316 = bitcast <4 x i32> %315 to <4 x float>, !dbg !87
  %317 = fcmp olt <4 x float> %311, %316, !dbg !130
  %318 = fcmp uno <4 x float> %316, zeroinitializer, !dbg !132
  %319 = or <4 x i1> %318, %317, !dbg !133
  %.v5 = select <4 x i1> %319, <4 x i32> %315, <4 x i32> %.v4, !dbg !134
  %320 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !134
  %321 = insertelement <4 x i32> poison, i32 %231, i64 0, !dbg !95
  %322 = insertelement <4 x i32> %321, i32 %232, i64 1, !dbg !95
  %323 = insertelement <4 x i32> %322, i32 %233, i64 2, !dbg !95
  %324 = insertelement <4 x i32> %323, i32 %234, i64 3, !dbg !95
  %325 = bitcast <4 x i32> %324 to <4 x float>, !dbg !95
  %326 = fcmp olt <4 x float> %320, %325, !dbg !135
  %327 = fcmp uno <4 x float> %325, zeroinitializer, !dbg !137
  %328 = or <4 x i1> %327, %326, !dbg !138
  %.v6 = select <4 x i1> %328, <4 x i32> %324, <4 x i32> %.v5, !dbg !139
  %329 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !139
  %330 = insertelement <4 x i32> poison, i32 %253, i64 0, !dbg !102
  %331 = insertelement <4 x i32> %330, i32 %254, i64 1, !dbg !102
  %332 = insertelement <4 x i32> %331, i32 %255, i64 2, !dbg !102
  %333 = insertelement <4 x i32> %332, i32 %256, i64 3, !dbg !102
  %334 = bitcast <4 x i32> %333 to <4 x float>, !dbg !102
  %335 = fcmp olt <4 x float> %329, %334, !dbg !140
  %336 = extractelement <4 x i1> %335, i64 0, !dbg !142
  %337 = extractelement <4 x i1> %335, i64 1, !dbg !142
  %338 = extractelement <4 x i1> %335, i64 2, !dbg !142
  %339 = extractelement <4 x i1> %335, i64 3, !dbg !142
  %340 = zext <4 x i1> %272 to <4 x i8>, !dbg !143
  %341 = select <4 x i1> %281, <4 x i8> splat (i8 2), <4 x i8> %340, !dbg !144
  %342 = select <4 x i1> %290, <4 x i8> splat (i8 3), <4 x i8> %341, !dbg !145
  %343 = select <4 x i1> %299, <4 x i8> splat (i8 4), <4 x i8> %342, !dbg !146
  %344 = select <4 x i1> %308, <4 x i8> splat (i8 5), <4 x i8> %343, !dbg !147
  %345 = select <4 x i1> %317, <4 x i8> splat (i8 6), <4 x i8> %344, !dbg !148
  %346 = select <4 x i1> %326, <4 x i8> splat (i8 7), <4 x i8> %345, !dbg !149
  %347 = select <4 x i1> %335, <4 x i8> splat (i8 8), <4 x i8> %346, !dbg !150
  %348 = insertelement <4 x i32> poison, i32 %74, i64 0, !dbg !36
  %349 = insertelement <4 x i32> %348, i32 %75, i64 1, !dbg !36
  %350 = insertelement <4 x i32> %349, i32 %76, i64 2, !dbg !36
  %351 = insertelement <4 x i32> %350, i32 %77, i64 3, !dbg !36
  %352 = bitcast <4 x i32> %351 to <4 x float>, !dbg !36
  %353 = insertelement <4 x i32> poison, i32 %98, i64 0, !dbg !45
  %354 = insertelement <4 x i32> %353, i32 %99, i64 1, !dbg !45
  %355 = insertelement <4 x i32> %354, i32 %100, i64 2, !dbg !45
  %356 = insertelement <4 x i32> %355, i32 %101, i64 3, !dbg !45
  %357 = bitcast <4 x i32> %356 to <4 x float>, !dbg !45
  %358 = fcmp ogt <4 x float> %357, %352, !dbg !103
  %359 = fcmp uno <4 x float> %357, zeroinitializer, !dbg !107
  %360 = or <4 x i1> %358, %359, !dbg !108
  %.v7 = select <4 x i1> %360, <4 x i32> %356, <4 x i32> %351, !dbg !109
  %361 = bitcast <4 x i32> %.v7 to <4 x float>, !dbg !109
  %362 = insertelement <4 x i32> poison, i32 %124, i64 0, !dbg !57
  %363 = insertelement <4 x i32> %362, i32 %125, i64 1, !dbg !57
  %364 = insertelement <4 x i32> %363, i32 %126, i64 2, !dbg !57
  %365 = insertelement <4 x i32> %364, i32 %127, i64 3, !dbg !57
  %366 = bitcast <4 x i32> %365 to <4 x float>, !dbg !57
  %367 = fcmp olt <4 x float> %361, %366, !dbg !110
  %368 = fcmp uno <4 x float> %366, zeroinitializer, !dbg !112
  %369 = or <4 x i1> %368, %367, !dbg !113
  %.v8 = select <4 x i1> %369, <4 x i32> %365, <4 x i32> %.v7, !dbg !114
  %370 = bitcast <4 x i32> %.v8 to <4 x float>, !dbg !114
  %371 = insertelement <4 x i32> poison, i32 %147, i64 0, !dbg !65
  %372 = insertelement <4 x i32> %371, i32 %148, i64 1, !dbg !65
  %373 = insertelement <4 x i32> %372, i32 %149, i64 2, !dbg !65
  %374 = insertelement <4 x i32> %373, i32 %150, i64 3, !dbg !65
  %375 = bitcast <4 x i32> %374 to <4 x float>, !dbg !65
  %376 = fcmp olt <4 x float> %370, %375, !dbg !115
  %377 = fcmp uno <4 x float> %375, zeroinitializer, !dbg !117
  %378 = or <4 x i1> %377, %376, !dbg !118
  %.v9 = select <4 x i1> %378, <4 x i32> %374, <4 x i32> %.v8, !dbg !119
  %379 = bitcast <4 x i32> %.v9 to <4 x float>, !dbg !119
  %380 = insertelement <4 x i32> poison, i32 %169, i64 0, !dbg !71
  %381 = insertelement <4 x i32> %380, i32 %170, i64 1, !dbg !71
  %382 = insertelement <4 x i32> %381, i32 %171, i64 2, !dbg !71
  %383 = insertelement <4 x i32> %382, i32 %172, i64 3, !dbg !71
  %384 = bitcast <4 x i32> %383 to <4 x float>, !dbg !71
  %385 = fcmp olt <4 x float> %379, %384, !dbg !120
  %386 = fcmp uno <4 x float> %384, zeroinitializer, !dbg !122
  %387 = or <4 x i1> %386, %385, !dbg !123
  %.v10 = select <4 x i1> %387, <4 x i32> %383, <4 x i32> %.v9, !dbg !124
  %388 = bitcast <4 x i32> %.v10 to <4 x float>, !dbg !124
  %389 = insertelement <4 x i32> poison, i32 %191, i64 0, !dbg !79
  %390 = insertelement <4 x i32> %389, i32 %192, i64 1, !dbg !79
  %391 = insertelement <4 x i32> %390, i32 %193, i64 2, !dbg !79
  %392 = insertelement <4 x i32> %391, i32 %194, i64 3, !dbg !79
  %393 = bitcast <4 x i32> %392 to <4 x float>, !dbg !79
  %394 = fcmp olt <4 x float> %388, %393, !dbg !125
  %395 = fcmp uno <4 x float> %393, zeroinitializer, !dbg !127
  %396 = or <4 x i1> %395, %394, !dbg !128
  %.v11 = select <4 x i1> %396, <4 x i32> %392, <4 x i32> %.v10, !dbg !129
  %397 = bitcast <4 x i32> %.v11 to <4 x float>, !dbg !129
  %398 = insertelement <4 x i32> poison, i32 %214, i64 0, !dbg !87
  %399 = insertelement <4 x i32> %398, i32 %215, i64 1, !dbg !87
  %400 = insertelement <4 x i32> %399, i32 %216, i64 2, !dbg !87
  %401 = insertelement <4 x i32> %400, i32 %217, i64 3, !dbg !87
  %402 = bitcast <4 x i32> %401 to <4 x float>, !dbg !87
  %403 = fcmp olt <4 x float> %397, %402, !dbg !130
  %404 = fcmp uno <4 x float> %402, zeroinitializer, !dbg !132
  %405 = or <4 x i1> %404, %403, !dbg !133
  %.v12 = select <4 x i1> %405, <4 x i32> %401, <4 x i32> %.v11, !dbg !134
  %406 = bitcast <4 x i32> %.v12 to <4 x float>, !dbg !134
  %407 = insertelement <4 x i32> poison, i32 %236, i64 0, !dbg !95
  %408 = insertelement <4 x i32> %407, i32 %237, i64 1, !dbg !95
  %409 = insertelement <4 x i32> %408, i32 %238, i64 2, !dbg !95
  %410 = insertelement <4 x i32> %409, i32 %239, i64 3, !dbg !95
  %411 = bitcast <4 x i32> %410 to <4 x float>, !dbg !95
  %412 = fcmp olt <4 x float> %406, %411, !dbg !135
  %413 = fcmp uno <4 x float> %411, zeroinitializer, !dbg !137
  %414 = or <4 x i1> %413, %412, !dbg !138
  %.v13 = select <4 x i1> %414, <4 x i32> %410, <4 x i32> %.v12, !dbg !139
  %415 = bitcast <4 x i32> %.v13 to <4 x float>, !dbg !139
  %416 = insertelement <4 x i32> poison, i32 %258, i64 0, !dbg !102
  %417 = insertelement <4 x i32> %416, i32 %259, i64 1, !dbg !102
  %418 = insertelement <4 x i32> %417, i32 %260, i64 2, !dbg !102
  %419 = insertelement <4 x i32> %418, i32 %261, i64 3, !dbg !102
  %420 = bitcast <4 x i32> %419 to <4 x float>, !dbg !102
  %421 = fcmp olt <4 x float> %415, %420, !dbg !140
  %422 = shufflevector <4 x float> %420, <4 x float> %334, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !151
  %423 = fcmp uno <8 x float> %422, zeroinitializer, !dbg !151
  %424 = extractelement <8 x i1> %423, i64 7, !dbg !142
  %425 = or i1 %424, %336, !dbg !142
  %426 = extractelement <8 x i1> %423, i64 6, !dbg !142
  %427 = or i1 %426, %337, !dbg !142
  %428 = extractelement <8 x i1> %423, i64 5, !dbg !142
  %429 = or i1 %428, %338, !dbg !142
  %430 = extractelement <8 x i1> %423, i64 4, !dbg !142
  %431 = or i1 %430, %339, !dbg !142
  %432 = extractelement <4 x i1> %421, i64 0, !dbg !142
  %433 = extractelement <8 x i1> %423, i64 3, !dbg !142
  %434 = or i1 %433, %432, !dbg !142
  %435 = extractelement <4 x i1> %421, i64 1, !dbg !142
  %436 = extractelement <8 x i1> %423, i64 2, !dbg !142
  %437 = or i1 %436, %435, !dbg !142
  %438 = extractelement <4 x i1> %421, i64 2, !dbg !142
  %439 = extractelement <8 x i1> %423, i64 1, !dbg !142
  %440 = or i1 %439, %438, !dbg !142
  %441 = extractelement <4 x i1> %421, i64 3, !dbg !142
  %442 = extractelement <8 x i1> %423, i64 0, !dbg !142
  %443 = or i1 %442, %441, !dbg !142
  %444 = zext <4 x i1> %358 to <4 x i8>, !dbg !143
  %445 = select <4 x i1> %367, <4 x i8> splat (i8 2), <4 x i8> %444, !dbg !144
  %446 = select <4 x i1> %376, <4 x i8> splat (i8 3), <4 x i8> %445, !dbg !145
  %447 = select <4 x i1> %385, <4 x i8> splat (i8 4), <4 x i8> %446, !dbg !146
  %448 = select <4 x i1> %394, <4 x i8> splat (i8 5), <4 x i8> %447, !dbg !147
  %449 = select <4 x i1> %403, <4 x i8> splat (i8 6), <4 x i8> %448, !dbg !148
  %450 = select <4 x i1> %412, <4 x i8> splat (i8 7), <4 x i8> %449, !dbg !149
  %451 = select <4 x i1> %421, <4 x i8> splat (i8 8), <4 x i8> %450, !dbg !150
  %452 = mul i32 %24, 25, !dbg !152
  %453 = mul i32 %25, 25, !dbg !152
  %454 = mul i32 %26, 25, !dbg !152
  %455 = mul i32 %27, 25, !dbg !152
  %456 = mul i32 %28, 25, !dbg !152
  %457 = mul i32 %29, 25, !dbg !152
  %458 = mul i32 %30, 25, !dbg !152
  %459 = mul i32 %31, 25, !dbg !152
  %460 = mul i32 %42, 38400, !dbg !153
  %461 = add i32 %460, %.decomposed, !dbg !154
  %462 = add i32 %461, %452, !dbg !155
  %463 = add i32 %461, %453, !dbg !155
  %464 = add i32 %461, %454, !dbg !155
  %465 = add i32 %461, %455, !dbg !155
  %466 = add i32 %461, %456, !dbg !155
  %467 = add i32 %461, %457, !dbg !155
  %468 = add i32 %461, %458, !dbg !155
  %469 = add i32 %461, %459, !dbg !155
  %470 = sext i32 %462 to i64, !dbg !156
  %471 = getelementptr float, ptr addrspace(1) %1, i64 %470, !dbg !156
  %472 = sext i32 %463 to i64, !dbg !156
  %473 = getelementptr float, ptr addrspace(1) %1, i64 %472, !dbg !156
  %474 = sext i32 %464 to i64, !dbg !156
  %475 = getelementptr float, ptr addrspace(1) %1, i64 %474, !dbg !156
  %476 = sext i32 %465 to i64, !dbg !156
  %477 = getelementptr float, ptr addrspace(1) %1, i64 %476, !dbg !156
  %478 = sext i32 %466 to i64, !dbg !156
  %479 = getelementptr float, ptr addrspace(1) %1, i64 %478, !dbg !156
  %480 = sext i32 %467 to i64, !dbg !156
  %481 = getelementptr float, ptr addrspace(1) %1, i64 %480, !dbg !156
  %482 = sext i32 %468 to i64, !dbg !156
  %483 = getelementptr float, ptr addrspace(1) %1, i64 %482, !dbg !156
  %484 = sext i32 %469 to i64, !dbg !156
  %485 = getelementptr float, ptr addrspace(1) %1, i64 %484, !dbg !156
  %486 = and i1 %7, %33, !dbg !157
  %487 = and i1 %7, %34, !dbg !157
  %488 = and i1 %7, %35, !dbg !157
  %489 = and i1 %7, %36, !dbg !157
  %490 = and i1 %7, %37, !dbg !157
  %491 = and i1 %7, %38, !dbg !157
  %492 = and i1 %7, %39, !dbg !157
  %493 = and i1 %7, %40, !dbg !157
  %494 = and i1 %7, %32, !dbg !157
  %495 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !158
  %496 = extractelement <4 x i32> %.v6, i64 0, !dbg !158
  %497 = select i1 %425, i32 %253, i32 %496, !dbg !159
  %498 = insertelement <1 x i32> poison, i32 %497, i64 0, !dbg !158
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %495, <1 x i32> %498, i1 true) #2, !dbg !158
  %499 = or disjoint i32 %12, 1, !dbg !158
  %500 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %499, !dbg !158
  %501 = extractelement <4 x i32> %.v6, i64 1, !dbg !158
  %502 = select i1 %427, i32 %254, i32 %501, !dbg !159
  %503 = insertelement <1 x i32> poison, i32 %502, i64 0, !dbg !158
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %500, <1 x i32> %503, i1 true) #2, !dbg !158
  %504 = or disjoint i32 %12, 2, !dbg !158
  %505 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %504, !dbg !158
  %506 = extractelement <4 x i32> %.v6, i64 2, !dbg !158
  %507 = select i1 %429, i32 %255, i32 %506, !dbg !159
  %508 = insertelement <1 x i32> poison, i32 %507, i64 0, !dbg !158
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %505, <1 x i32> %508, i1 true) #2, !dbg !158
  %509 = or disjoint i32 %12, 3, !dbg !158
  %510 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %509, !dbg !158
  %511 = extractelement <4 x i32> %.v6, i64 3, !dbg !158
  %512 = select i1 %431, i32 %256, i32 %511, !dbg !159
  %513 = insertelement <1 x i32> poison, i32 %512, i64 0, !dbg !158
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %510, <1 x i32> %513, i1 true) #2, !dbg !158
  %514 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !158
  %515 = extractelement <4 x i32> %.v13, i64 0, !dbg !158
  %516 = select i1 %434, i32 %258, i32 %515, !dbg !159
  %517 = insertelement <1 x i32> poison, i32 %516, i64 0, !dbg !158
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %514, <1 x i32> %517, i1 true) #2, !dbg !158
  %518 = or disjoint i32 %12, 5, !dbg !158
  %519 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %518, !dbg !158
  %520 = extractelement <4 x i32> %.v13, i64 1, !dbg !158
  %521 = select i1 %437, i32 %259, i32 %520, !dbg !159
  %522 = insertelement <1 x i32> poison, i32 %521, i64 0, !dbg !158
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %519, <1 x i32> %522, i1 true) #2, !dbg !158
  %523 = or disjoint i32 %12, 6, !dbg !158
  %524 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %523, !dbg !158
  %525 = extractelement <4 x i32> %.v13, i64 2, !dbg !158
  %526 = select i1 %440, i32 %260, i32 %525, !dbg !159
  %527 = insertelement <1 x i32> poison, i32 %526, i64 0, !dbg !158
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %524, <1 x i32> %527, i1 true) #2, !dbg !158
  %528 = or disjoint i32 %12, 7, !dbg !158
  %529 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %528, !dbg !158
  %530 = extractelement <4 x i32> %.v13, i64 3, !dbg !158
  %531 = select i1 %443, i32 %261, i32 %530, !dbg !159
  %532 = insertelement <1 x i32> poison, i32 %531, i64 0, !dbg !158
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %529, <1 x i32> %532, i1 true) #2, !dbg !158
  tail call void @llvm.nvvm.barrier0(), !dbg !158
  %533 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !158
  %534 = load i32, ptr addrspace(3) %533, align 4, !dbg !158
  %535 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !158
  %536 = load i32, ptr addrspace(3) %535, align 4, !dbg !158
  %537 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !158
  %538 = load i32, ptr addrspace(3) %537, align 4, !dbg !158
  %539 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !158
  %540 = load i32, ptr addrspace(3) %539, align 4, !dbg !158
  %541 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !158
  %542 = load i32, ptr addrspace(3) %541, align 4, !dbg !158
  %543 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !158
  %544 = load i32, ptr addrspace(3) %543, align 4, !dbg !158
  %545 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %20, !dbg !158
  %546 = load i32, ptr addrspace(3) %545, align 4, !dbg !158
  %547 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %21, !dbg !158
  %548 = load i32, ptr addrspace(3) %547, align 4, !dbg !158
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %534, ptr addrspace(1) %471, i1 %486) #2, !dbg !158
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %536, ptr addrspace(1) %473, i1 %487) #2, !dbg !158
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %538, ptr addrspace(1) %475, i1 %488) #2, !dbg !158
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %540, ptr addrspace(1) %477, i1 %489) #2, !dbg !158
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %542, ptr addrspace(1) %479, i1 %490) #2, !dbg !158
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %544, ptr addrspace(1) %481, i1 %491) #2, !dbg !158
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %546, ptr addrspace(1) %483, i1 %492) #2, !dbg !158
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %548, ptr addrspace(1) %485, i1 %493) #2, !dbg !158
  %549 = shl i32 %6, 10, !dbg !160
  %550 = add i32 %22, %549, !dbg !161
  %551 = sext i32 %550 to i64, !dbg !162
  %552 = getelementptr i8, ptr addrspace(1) %2, i64 %551, !dbg !162
  %553 = bitcast <4 x i8> %347 to i32, !dbg !163
  %554 = bitcast <4 x i8> %451 to i32, !dbg !163
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %553, i32 %554, ptr addrspace(1) %552, i1 %494) #2, !dbg !163
  ret void, !dbg !164
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cktktawpzp2exjyp7m5ioszbh7nekfib55m7xbsaaq4lnm3lnoa5.py", directory: "inductor_cache/kt")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_23", linkageName: "triton_poi_fused_max_pool2d_with_indices_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 28, column: 21, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 19, scope: !7)
!20 = !DILocation(line: 45, column: 74, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 67, column: 20, scope: !7)
!23 = !DILocation(line: 36, column: 19, scope: !7)
!24 = !DILocation(line: 40, column: 20, scope: !7)
!25 = !DILocation(line: 41, column: 19, scope: !7)
!26 = !DILocation(line: 44, column: 19, scope: !7)
!27 = !DILocation(line: 45, column: 52, scope: !7)
!28 = !DILocation(line: 45, column: 63, scope: !7)
!29 = !DILocation(line: 45, column: 42, scope: !7)
!30 = !DILocation(line: 45, column: 47, scope: !7)
!31 = !DILocation(line: 45, column: 57, scope: !7)
!32 = !DILocation(line: 45, column: 68, scope: !7)
!33 = !DILocation(line: 45, column: 31, scope: !7)
!34 = !DILocation(line: 45, column: 87, scope: !7)
!35 = !DILocation(line: 45, column: 95, scope: !7)
!36 = !DILocation(line: 45, column: 79, scope: !7)
!37 = !DILocation(line: 47, column: 21, scope: !7)
!38 = !DILocation(line: 50, column: 19, scope: !7)
!39 = !DILocation(line: 51, column: 46, scope: !7)
!40 = !DILocation(line: 51, column: 56, scope: !7)
!41 = !DILocation(line: 51, column: 67, scope: !7)
!42 = !DILocation(line: 51, column: 31, scope: !7)
!43 = !DILocation(line: 51, column: 86, scope: !7)
!44 = !DILocation(line: 51, column: 94, scope: !7)
!45 = !DILocation(line: 51, column: 78, scope: !7)
!46 = !DILocation(line: 53, column: 16, scope: !7)
!47 = !DILocation(line: 55, column: 20, scope: !7)
!48 = !DILocation(line: 56, column: 20, scope: !7)
!49 = !DILocation(line: 83, column: 20, scope: !7)
!50 = !DILocation(line: 57, column: 19, scope: !7)
!51 = !DILocation(line: 58, column: 46, scope: !7)
!52 = !DILocation(line: 58, column: 56, scope: !7)
!53 = !DILocation(line: 58, column: 67, scope: !7)
!54 = !DILocation(line: 58, column: 31, scope: !7)
!55 = !DILocation(line: 58, column: 86, scope: !7)
!56 = !DILocation(line: 58, column: 94, scope: !7)
!57 = !DILocation(line: 58, column: 78, scope: !7)
!58 = !DILocation(line: 64, column: 20, scope: !7)
!59 = !DILocation(line: 65, column: 46, scope: !7)
!60 = !DILocation(line: 65, column: 56, scope: !7)
!61 = !DILocation(line: 65, column: 67, scope: !7)
!62 = !DILocation(line: 65, column: 31, scope: !7)
!63 = !DILocation(line: 65, column: 86, scope: !7)
!64 = !DILocation(line: 65, column: 94, scope: !7)
!65 = !DILocation(line: 65, column: 78, scope: !7)
!66 = !DILocation(line: 68, column: 46, scope: !7)
!67 = !DILocation(line: 68, column: 57, scope: !7)
!68 = !DILocation(line: 68, column: 31, scope: !7)
!69 = !DILocation(line: 68, column: 76, scope: !7)
!70 = !DILocation(line: 68, column: 84, scope: !7)
!71 = !DILocation(line: 68, column: 68, scope: !7)
!72 = !DILocation(line: 70, column: 20, scope: !7)
!73 = !DILocation(line: 71, column: 43, scope: !7)
!74 = !DILocation(line: 71, column: 53, scope: !7)
!75 = !DILocation(line: 71, column: 64, scope: !7)
!76 = !DILocation(line: 71, column: 31, scope: !7)
!77 = !DILocation(line: 71, column: 83, scope: !7)
!78 = !DILocation(line: 71, column: 91, scope: !7)
!79 = !DILocation(line: 71, column: 75, scope: !7)
!80 = !DILocation(line: 77, column: 20, scope: !7)
!81 = !DILocation(line: 78, column: 43, scope: !7)
!82 = !DILocation(line: 78, column: 53, scope: !7)
!83 = !DILocation(line: 78, column: 64, scope: !7)
!84 = !DILocation(line: 78, column: 31, scope: !7)
!85 = !DILocation(line: 78, column: 83, scope: !7)
!86 = !DILocation(line: 78, column: 91, scope: !7)
!87 = !DILocation(line: 78, column: 75, scope: !7)
!88 = !DILocation(line: 80, column: 20, scope: !7)
!89 = !DILocation(line: 81, column: 43, scope: !7)
!90 = !DILocation(line: 81, column: 53, scope: !7)
!91 = !DILocation(line: 81, column: 64, scope: !7)
!92 = !DILocation(line: 81, column: 31, scope: !7)
!93 = !DILocation(line: 81, column: 83, scope: !7)
!94 = !DILocation(line: 81, column: 91, scope: !7)
!95 = !DILocation(line: 81, column: 75, scope: !7)
!96 = !DILocation(line: 84, column: 44, scope: !7)
!97 = !DILocation(line: 84, column: 54, scope: !7)
!98 = !DILocation(line: 84, column: 65, scope: !7)
!99 = !DILocation(line: 84, column: 31, scope: !7)
!100 = !DILocation(line: 84, column: 84, scope: !7)
!101 = !DILocation(line: 84, column: 92, scope: !7)
!102 = !DILocation(line: 84, column: 76, scope: !7)
!103 = !DILocation(line: 118, column: 15, scope: !104, inlinedAt: !106)
!104 = distinct !DILexicalBlockFile(scope: !7, file: !105, discriminator: 0)
!105 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!106 = !DILocation(line: 52, column: 42, scope: !7)
!107 = !DILocation(line: 120, column: 21, scope: !104, inlinedAt: !106)
!108 = !DILocation(line: 120, column: 16, scope: !104, inlinedAt: !106)
!109 = !DILocation(line: 121, column: 29, scope: !104, inlinedAt: !106)
!110 = !DILocation(line: 118, column: 15, scope: !104, inlinedAt: !111)
!111 = !DILocation(line: 59, column: 42, scope: !7)
!112 = !DILocation(line: 120, column: 21, scope: !104, inlinedAt: !111)
!113 = !DILocation(line: 120, column: 16, scope: !104, inlinedAt: !111)
!114 = !DILocation(line: 121, column: 29, scope: !104, inlinedAt: !111)
!115 = !DILocation(line: 118, column: 15, scope: !104, inlinedAt: !116)
!116 = !DILocation(line: 66, column: 42, scope: !7)
!117 = !DILocation(line: 120, column: 21, scope: !104, inlinedAt: !116)
!118 = !DILocation(line: 120, column: 16, scope: !104, inlinedAt: !116)
!119 = !DILocation(line: 121, column: 29, scope: !104, inlinedAt: !116)
!120 = !DILocation(line: 118, column: 15, scope: !104, inlinedAt: !121)
!121 = !DILocation(line: 69, column: 42, scope: !7)
!122 = !DILocation(line: 120, column: 21, scope: !104, inlinedAt: !121)
!123 = !DILocation(line: 120, column: 16, scope: !104, inlinedAt: !121)
!124 = !DILocation(line: 121, column: 29, scope: !104, inlinedAt: !121)
!125 = !DILocation(line: 118, column: 15, scope: !104, inlinedAt: !126)
!126 = !DILocation(line: 72, column: 42, scope: !7)
!127 = !DILocation(line: 120, column: 21, scope: !104, inlinedAt: !126)
!128 = !DILocation(line: 120, column: 16, scope: !104, inlinedAt: !126)
!129 = !DILocation(line: 121, column: 29, scope: !104, inlinedAt: !126)
!130 = !DILocation(line: 118, column: 15, scope: !104, inlinedAt: !131)
!131 = !DILocation(line: 79, column: 42, scope: !7)
!132 = !DILocation(line: 120, column: 21, scope: !104, inlinedAt: !131)
!133 = !DILocation(line: 120, column: 16, scope: !104, inlinedAt: !131)
!134 = !DILocation(line: 121, column: 29, scope: !104, inlinedAt: !131)
!135 = !DILocation(line: 118, column: 15, scope: !104, inlinedAt: !136)
!136 = !DILocation(line: 82, column: 42, scope: !7)
!137 = !DILocation(line: 120, column: 21, scope: !104, inlinedAt: !136)
!138 = !DILocation(line: 120, column: 16, scope: !104, inlinedAt: !136)
!139 = !DILocation(line: 121, column: 29, scope: !104, inlinedAt: !136)
!140 = !DILocation(line: 118, column: 15, scope: !104, inlinedAt: !141)
!141 = !DILocation(line: 85, column: 42, scope: !7)
!142 = !DILocation(line: 120, column: 16, scope: !104, inlinedAt: !141)
!143 = !DILocation(line: 89, column: 35, scope: !7)
!144 = !DILocation(line: 92, column: 35, scope: !7)
!145 = !DILocation(line: 95, column: 35, scope: !7)
!146 = !DILocation(line: 98, column: 35, scope: !7)
!147 = !DILocation(line: 101, column: 35, scope: !7)
!148 = !DILocation(line: 104, column: 35, scope: !7)
!149 = !DILocation(line: 107, column: 35, scope: !7)
!150 = !DILocation(line: 110, column: 35, scope: !7)
!151 = !DILocation(line: 120, column: 21, scope: !104, inlinedAt: !141)
!152 = !DILocation(line: 111, column: 33, scope: !7)
!153 = !DILocation(line: 111, column: 44, scope: !7)
!154 = !DILocation(line: 111, column: 30, scope: !7)
!155 = !DILocation(line: 111, column: 38, scope: !7)
!156 = !DILocation(line: 111, column: 25, scope: !7)
!157 = !DILocation(line: 111, column: 64, scope: !7)
!158 = !DILocation(line: 111, column: 56, scope: !7)
!159 = !DILocation(line: 121, column: 29, scope: !104, inlinedAt: !141)
!160 = !DILocation(line: 112, column: 35, scope: !7)
!161 = !DILocation(line: 112, column: 30, scope: !7)
!162 = !DILocation(line: 112, column: 25, scope: !7)
!163 = !DILocation(line: 112, column: 47, scope: !7)
!164 = !DILocation(line: 112, column: 4, scope: !7)
