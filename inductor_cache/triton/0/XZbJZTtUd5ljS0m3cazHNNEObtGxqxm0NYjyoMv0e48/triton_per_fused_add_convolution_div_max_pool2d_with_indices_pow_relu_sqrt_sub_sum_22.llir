; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_convolution_div_max_pool2d_with_indices_pow_relu_sqrt_sub_sum_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = and i32 %7, 31, !dbg !11
  %9 = lshr i32 %7, 5, !dbg !11
  %10 = shl i32 %7, 2, !dbg !11
  %11 = and i32 %10, 508, !dbg !11
  %12 = shl i32 %6, 9, !dbg !12
  %13 = or disjoint i32 %12, %11, !dbg !13
  %14 = sext i32 %13 to i64, !dbg !14
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !14
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #5, !dbg !15
  %17 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !15
  %18 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !15
  %21 = bitcast i32 %17 to float, !dbg !15
  %22 = bitcast i32 %18 to float, !dbg !15
  %23 = bitcast i32 %19 to float, !dbg !15
  %24 = bitcast i32 %20 to float, !dbg !15
  %25 = zext nneg i32 %11 to i64, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !16
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #5, !dbg !17
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !17
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !17
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !17
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !17
  %32 = bitcast i32 %28 to float, !dbg !17
  %33 = bitcast i32 %29 to float, !dbg !17
  %34 = bitcast i32 %30 to float, !dbg !17
  %35 = bitcast i32 %31 to float, !dbg !17
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !18
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #5, !dbg !19
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !19
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !19
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !19
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !19
  %42 = bitcast i32 %38 to float, !dbg !19
  %43 = bitcast i32 %39 to float, !dbg !19
  %44 = bitcast i32 %40 to float, !dbg !19
  %45 = bitcast i32 %41 to float, !dbg !19
  %46 = fadd float %21, %32, !dbg !20
  %47 = fadd float %22, %33, !dbg !20
  %48 = fadd float %23, %34, !dbg !20
  %49 = fadd float %24, %35, !dbg !20
  %50 = fcmp olt float %46, 0.000000e+00, !dbg !21
  %51 = fcmp olt float %47, 0.000000e+00, !dbg !21
  %52 = fcmp olt float %48, 0.000000e+00, !dbg !21
  %53 = fcmp olt float %49, 0.000000e+00, !dbg !21
  %54 = select i1 %50, float 0.000000e+00, float %46, !dbg !25
  %55 = select i1 %51, float 0.000000e+00, float %47, !dbg !25
  %56 = select i1 %52, float 0.000000e+00, float %48, !dbg !25
  %57 = select i1 %53, float 0.000000e+00, float %49, !dbg !25
  %58 = fmul float %54, %54, !dbg !26
  %59 = fmul float %55, %55, !dbg !26
  %60 = fmul float %56, %56, !dbg !26
  %61 = fmul float %57, %57, !dbg !26
  %62 = fadd float %58, %59, !dbg !27
  %63 = fadd float %60, %62, !dbg !27
  %64 = fadd float %61, %63, !dbg !27
  %65 = bitcast float %64 to i32, !dbg !32
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 16, i32 31), !dbg !32
  %67 = bitcast i32 %66 to float, !dbg !32
  %68 = fadd float %64, %67, !dbg !27
  %69 = bitcast float %68 to i32, !dbg !32
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 8, i32 31), !dbg !32
  %71 = bitcast i32 %70 to float, !dbg !32
  %72 = fadd float %68, %71, !dbg !27
  %73 = bitcast float %72 to i32, !dbg !32
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 4, i32 31), !dbg !32
  %75 = bitcast i32 %74 to float, !dbg !32
  %76 = fadd float %72, %75, !dbg !27
  %77 = bitcast float %76 to i32, !dbg !32
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 2, i32 31), !dbg !32
  %79 = bitcast i32 %78 to float, !dbg !32
  %80 = fadd float %76, %79, !dbg !27
  %81 = bitcast float %80 to i32, !dbg !32
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 1, i32 31), !dbg !32
  %83 = bitcast i32 %82 to float, !dbg !32
  %84 = fadd float %80, %83, !dbg !27
  %85 = icmp eq i32 %8, 0, !dbg !32
  %86 = and i32 %9, 3, !dbg !32
  %87 = getelementptr float, ptr addrspace(3) @global_smem, i32 %86, !dbg !32
  %88 = bitcast float %84 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 %85) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %89 = icmp slt i32 %7, 4, !dbg !32
  %90 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !32
  %91 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %90, i1 %89) #5, !dbg !32
  %92 = bitcast i32 %91 to float, !dbg !32
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 2, i32 31), !dbg !32
  %94 = bitcast i32 %93 to float, !dbg !32
  %95 = fadd float %92, %94, !dbg !27
  %96 = bitcast float %95 to i32, !dbg !32
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 1, i32 31), !dbg !32
  %98 = bitcast i32 %97 to float, !dbg !32
  %99 = fadd float %95, %98, !dbg !27
  %100 = and i32 %7, 3, !dbg !32
  %101 = icmp eq i32 %100, 0, !dbg !32
  %102 = and i1 %89, %101, !dbg !32
  %103 = bitcast float %99 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %103, i1 %102) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %104 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %105 = fadd float %104, 0.000000e+00, !dbg !33
  %106 = fadd float %32, %42, !dbg !35
  %107 = fadd float %33, %43, !dbg !35
  %108 = fadd float %34, %44, !dbg !35
  %109 = fadd float %35, %45, !dbg !35
  %110 = fcmp olt float %106, 0.000000e+00, !dbg !36
  %111 = fcmp olt float %107, 0.000000e+00, !dbg !36
  %112 = fcmp olt float %108, 0.000000e+00, !dbg !36
  %113 = fcmp olt float %109, 0.000000e+00, !dbg !36
  %114 = select i1 %110, float 0.000000e+00, float %106, !dbg !38
  %115 = select i1 %111, float 0.000000e+00, float %107, !dbg !38
  %116 = select i1 %112, float 0.000000e+00, float %108, !dbg !38
  %117 = select i1 %113, float 0.000000e+00, float %109, !dbg !38
  %118 = fmul float %114, %114, !dbg !39
  %119 = fmul float %115, %115, !dbg !39
  %120 = fmul float %116, %116, !dbg !39
  %121 = fmul float %117, %117, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %122 = fadd float %118, %119, !dbg !42
  %123 = fadd float %120, %122, !dbg !42
  %124 = fadd float %121, %123, !dbg !42
  %125 = bitcast float %124 to i32, !dbg !40
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 16, i32 31), !dbg !40
  %127 = bitcast i32 %126 to float, !dbg !40
  %128 = fadd float %124, %127, !dbg !42
  %129 = bitcast float %128 to i32, !dbg !40
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 8, i32 31), !dbg !40
  %131 = bitcast i32 %130 to float, !dbg !40
  %132 = fadd float %128, %131, !dbg !42
  %133 = bitcast float %132 to i32, !dbg !40
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 4, i32 31), !dbg !40
  %135 = bitcast i32 %134 to float, !dbg !40
  %136 = fadd float %132, %135, !dbg !42
  %137 = bitcast float %136 to i32, !dbg !40
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 2, i32 31), !dbg !40
  %139 = bitcast i32 %138 to float, !dbg !40
  %140 = fadd float %136, %139, !dbg !42
  %141 = bitcast float %140 to i32, !dbg !40
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 1, i32 31), !dbg !40
  %143 = bitcast i32 %142 to float, !dbg !40
  %144 = fadd float %140, %143, !dbg !42
  %145 = bitcast float %144 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %145, i1 %85) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %146 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %90, i1 %89) #5, !dbg !40
  %147 = bitcast i32 %146 to float, !dbg !40
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 2, i32 31), !dbg !40
  %149 = bitcast i32 %148 to float, !dbg !40
  %150 = fadd float %147, %149, !dbg !42
  %151 = bitcast float %150 to i32, !dbg !40
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 1, i32 31), !dbg !40
  %153 = bitcast i32 %152 to float, !dbg !40
  %154 = fadd float %150, %153, !dbg !42
  %155 = bitcast float %154 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %155, i1 %102) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %156 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %157 = fadd float %156, 0.000000e+00, !dbg !43
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i = icmp eq i32 %158, 0, !dbg !45
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !45
  %.not1.i = icmp eq i32 %159, 0, !dbg !45
  br i1 %.not.i, label %165, label %160, !dbg !45

160:                                              ; preds = %5
  br i1 %.not1.i, label %163, label %161, !dbg !45

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %105) #5, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %105) #5, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

165:                                              ; preds = %5
  br i1 %.not1.i, label %168, label %166, !dbg !45

166:                                              ; preds = %165
  %167 = tail call float @llvm.nvvm.sqrt.rn.f(float %105) #5, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

168:                                              ; preds = %165
  %169 = tail call float @llvm.nvvm.sqrt.approx.f(float %105) #5, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %161, %163, %166, %168
  %.0.i = phi float [ %162, %161 ], [ %164, %163 ], [ %167, %166 ], [ %169, %168 ], !dbg !45
  %170 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !46
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %54, float %170) #5, !dbg !47
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float %170) #5, !dbg !47
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float %170) #5, !dbg !47
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float %170) #5, !dbg !47
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not.i1 = icmp eq i32 %175, 0, !dbg !48
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !48
  %.not1.i4 = icmp eq i32 %176, 0, !dbg !48
  br i1 %.not.i1, label %182, label %177, !dbg !48

177:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %180, label %178, !dbg !48

178:                                              ; preds = %177
  %179 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %157) #5, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

180:                                              ; preds = %177
  %181 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %157) #5, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

182:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %185, label %183, !dbg !48

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.f(float %157) #5, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.f(float %157) #5, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

__nv_sqrtf.exit5:                                 ; preds = %178, %180, %183, %185
  %.0.i3 = phi float [ %179, %178 ], [ %181, %180 ], [ %184, %183 ], [ %186, %185 ], !dbg !48
  %187 = fadd float %.0.i3, 0x3DDB7CDFE0000000, !dbg !49
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %114, float %187) #5, !dbg !50
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float %187) #5, !dbg !50
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float %187) #5, !dbg !50
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float %187) #5, !dbg !50
  %192 = fsub float %171, %188, !dbg !51
  %193 = fsub float %172, %189, !dbg !51
  %194 = fsub float %173, %190, !dbg !51
  %195 = fsub float %174, %191, !dbg !51
  %196 = fmul float %192, %192, !dbg !52
  %197 = fmul float %193, %193, !dbg !52
  %198 = fmul float %194, %194, !dbg !52
  %199 = fmul float %195, %195, !dbg !52
  %200 = bitcast float %196 to i32, !dbg !53
  %201 = bitcast float %197 to i32, !dbg !53
  %202 = bitcast float %198 to i32, !dbg !53
  %203 = bitcast float %199 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %200, i32 %201, i32 %202, i32 %203, ptr addrspace(1) %15, i1 true) #5, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpvao3y4bwhga2eot2agjxkdl4zy5xt2pmxluo76zlnpmabtknv2.py", directory: "inductor_cache/pv")
!4 = !{ptr @triton_per_fused_add_convolution_div_max_pool2d_with_indices_pow_relu_sqrt_sub_sum_22, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_convolution_div_max_pool2d_with_indices_pow_relu_sqrt_sub_sum_22, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_convolution_div_max_pool2d_with_indices_pow_relu_sqrt_sub_sum_22", linkageName: "triton_per_fused_add_convolution_div_max_pool2d_with_indices_pow_relu_sqrt_sub_sum_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 43, scope: !7)
!13 = !DILocation(line: 32, column: 39, scope: !7)
!14 = !DILocation(line: 32, column: 34, scope: !7)
!15 = !DILocation(line: 32, column: 48, scope: !7)
!16 = !DILocation(line: 33, column: 30, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 34, column: 30, scope: !7)
!19 = !DILocation(line: 34, column: 44, scope: !7)
!20 = !DILocation(line: 35, column: 18, scope: !7)
!21 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!24 = !DILocation(line: 37, column: 40, scope: !7)
!25 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 38, column: 18, scope: !7)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!30 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!31 = !DILocation(line: 40, column: 57, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 73, column: 15, scope: !22, inlinedAt: !34)
!34 = !DILocation(line: 40, column: 44, scope: !7)
!35 = !DILocation(line: 41, column: 19, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !37)
!37 = !DILocation(line: 42, column: 41, scope: !7)
!38 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !37)
!39 = !DILocation(line: 43, column: 20, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !41)
!41 = !DILocation(line: 45, column: 59, scope: !7)
!42 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !41)
!43 = !DILocation(line: 73, column: 15, scope: !22, inlinedAt: !44)
!44 = !DILocation(line: 45, column: 45, scope: !7)
!45 = !DILocation(line: 46, column: 27, scope: !7)
!46 = !DILocation(line: 48, column: 20, scope: !7)
!47 = !DILocation(line: 49, column: 19, scope: !7)
!48 = !DILocation(line: 50, column: 27, scope: !7)
!49 = !DILocation(line: 51, column: 20, scope: !7)
!50 = !DILocation(line: 52, column: 20, scope: !7)
!51 = !DILocation(line: 53, column: 20, scope: !7)
!52 = !DILocation(line: 54, column: 20, scope: !7)
!53 = !DILocation(line: 55, column: 49, scope: !7)
!54 = !DILocation(line: 55, column: 4, scope: !7)
