; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_max_pool2d_with_indices_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 12, !dbg !12
  %13 = and i32 %11, 252, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %14, 64, !dbg !13
  %16 = or disjoint i32 %14, 128, !dbg !13
  %17 = or disjoint i32 %14, 192, !dbg !13
  %18 = or disjoint i32 %7, %13, !dbg !13
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %20 = shl i32 %19, 4, !dbg !15
  %.lobit12 = lshr i32 %8, 6, !dbg !16
  %21 = and i32 %.lobit12, 3, !dbg !16
  %22 = or disjoint i32 %20, %12, !dbg !17
  %23 = or disjoint i32 %22, 1, !dbg !17
  %24 = or disjoint i32 %22, 2, !dbg !17
  %25 = or disjoint i32 %22, 3, !dbg !17
  %26 = or disjoint i32 %20, %21, !dbg !17
  %27 = or disjoint i32 %26, 4, !dbg !17
  %28 = or disjoint i32 %26, 8, !dbg !17
  %29 = or disjoint i32 %26, 12, !dbg !17
  %30 = icmp slt i32 %22, 64, !dbg !18
  %31 = icmp slt i32 %26, 64, !dbg !18
  %32 = icmp slt i32 %27, 64, !dbg !18
  %33 = icmp slt i32 %28, 64, !dbg !18
  %34 = icmp slt i32 %29, 64, !dbg !18
  %.frozen = freeze i32 %22, !dbg !19
  %35 = sdiv i32 %.frozen, 8, !dbg !19
  %36 = mul i32 %35, 8, !dbg !20
  %.decomposed = sub i32 %.frozen, %36, !dbg !20
  %37 = srem i32 %23, 8, !dbg !20
  %38 = srem i32 %24, 8, !dbg !20
  %39 = srem i32 %25, 8, !dbg !20
  %.frozen33 = freeze i32 %18, !dbg !21
  %40 = sdiv i32 %.frozen33, 256, !dbg !21
  %41 = mul i32 %40, 256, !dbg !22
  %.decomposed34 = sub i32 %.frozen33, %41, !dbg !22
  %42 = shl nsw i32 %.decomposed, 1, !dbg !23
  %43 = shl nsw i32 %37, 1, !dbg !23
  %44 = shl nsw i32 %38, 1, !dbg !23
  %45 = shl nsw i32 %39, 1, !dbg !23
  %46 = shl i32 %35, 5, !dbg !24
  %47 = add i32 %42, %46, !dbg !25
  %48 = add i32 %46, %43, !dbg !25
  %49 = add i32 %46, %44, !dbg !25
  %50 = add i32 %46, %45, !dbg !25
  %51 = shl i32 %14, 8, !dbg !26
  %52 = shl i32 %15, 8, !dbg !26
  %53 = shl i32 %16, 8, !dbg !26
  %54 = shl i32 %17, 8, !dbg !26
  %55 = add i32 %47, %51, !dbg !27
  %56 = add i32 %48, %51, !dbg !27
  %57 = add i32 %49, %51, !dbg !27
  %58 = add i32 %50, %51, !dbg !27
  %59 = add i32 %47, %52, !dbg !27
  %60 = add i32 %48, %52, !dbg !27
  %61 = add i32 %49, %52, !dbg !27
  %62 = add i32 %50, %52, !dbg !27
  %63 = add i32 %47, %53, !dbg !27
  %64 = add i32 %48, %53, !dbg !27
  %65 = add i32 %49, %53, !dbg !27
  %66 = add i32 %50, %53, !dbg !27
  %67 = add i32 %47, %54, !dbg !27
  %68 = add i32 %48, %54, !dbg !27
  %69 = add i32 %49, %54, !dbg !27
  %70 = add i32 %50, %54, !dbg !27
  %71 = sext i32 %55 to i64, !dbg !28
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !28
  %73 = sext i32 %56 to i64, !dbg !28
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !28
  %75 = sext i32 %57 to i64, !dbg !28
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !28
  %77 = sext i32 %58 to i64, !dbg !28
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !28
  %79 = sext i32 %59 to i64, !dbg !28
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !28
  %81 = sext i32 %60 to i64, !dbg !28
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !28
  %83 = sext i32 %61 to i64, !dbg !28
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !28
  %85 = sext i32 %62 to i64, !dbg !28
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !28
  %87 = sext i32 %63 to i64, !dbg !28
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !28
  %89 = sext i32 %64 to i64, !dbg !28
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !28
  %91 = sext i32 %65 to i64, !dbg !28
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !28
  %93 = sext i32 %66 to i64, !dbg !28
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !28
  %95 = sext i32 %67 to i64, !dbg !28
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !28
  %97 = sext i32 %68 to i64, !dbg !28
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !28
  %99 = sext i32 %69 to i64, !dbg !28
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !28
  %101 = sext i32 %70 to i64, !dbg !28
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !28
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %30) #2, !dbg !29
  %104 = bitcast i32 %103 to float, !dbg !29
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %30) #2, !dbg !29
  %106 = bitcast i32 %105 to float, !dbg !29
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %30) #2, !dbg !29
  %108 = bitcast i32 %107 to float, !dbg !29
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %30) #2, !dbg !29
  %110 = bitcast i32 %109 to float, !dbg !29
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %30) #2, !dbg !29
  %112 = bitcast i32 %111 to float, !dbg !29
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %30) #2, !dbg !29
  %114 = bitcast i32 %113 to float, !dbg !29
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %30) #2, !dbg !29
  %116 = bitcast i32 %115 to float, !dbg !29
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %30) #2, !dbg !29
  %118 = bitcast i32 %117 to float, !dbg !29
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %30) #2, !dbg !29
  %120 = bitcast i32 %119 to float, !dbg !29
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %30) #2, !dbg !29
  %122 = bitcast i32 %121 to float, !dbg !29
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %30) #2, !dbg !29
  %124 = bitcast i32 %123 to float, !dbg !29
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %30) #2, !dbg !29
  %126 = bitcast i32 %125 to float, !dbg !29
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %30) #2, !dbg !29
  %128 = bitcast i32 %127 to float, !dbg !29
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %30) #2, !dbg !29
  %130 = bitcast i32 %129 to float, !dbg !29
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %30) #2, !dbg !29
  %132 = bitcast i32 %131 to float, !dbg !29
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %30) #2, !dbg !29
  %134 = bitcast i32 %133 to float, !dbg !29
  %135 = or disjoint i32 %42, 1, !dbg !30
  %136 = or disjoint i32 %43, 1, !dbg !30
  %137 = or disjoint i32 %44, 1, !dbg !30
  %138 = or disjoint i32 %45, 1, !dbg !30
  %139 = add i32 %135, %46, !dbg !31
  %140 = add i32 %46, %136, !dbg !31
  %141 = add i32 %46, %137, !dbg !31
  %142 = add i32 %46, %138, !dbg !31
  %143 = add i32 %139, %51, !dbg !32
  %144 = add i32 %140, %51, !dbg !32
  %145 = add i32 %141, %51, !dbg !32
  %146 = add i32 %142, %51, !dbg !32
  %147 = add i32 %139, %52, !dbg !32
  %148 = add i32 %140, %52, !dbg !32
  %149 = add i32 %141, %52, !dbg !32
  %150 = add i32 %142, %52, !dbg !32
  %151 = add i32 %139, %53, !dbg !32
  %152 = add i32 %140, %53, !dbg !32
  %153 = add i32 %141, %53, !dbg !32
  %154 = add i32 %142, %53, !dbg !32
  %155 = add i32 %139, %54, !dbg !32
  %156 = add i32 %140, %54, !dbg !32
  %157 = add i32 %141, %54, !dbg !32
  %158 = add i32 %142, %54, !dbg !32
  %159 = sext i32 %143 to i64, !dbg !33
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !33
  %161 = sext i32 %144 to i64, !dbg !33
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !33
  %163 = sext i32 %145 to i64, !dbg !33
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !33
  %165 = sext i32 %146 to i64, !dbg !33
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !33
  %167 = sext i32 %147 to i64, !dbg !33
  %168 = getelementptr float, ptr addrspace(1) %0, i64 %167, !dbg !33
  %169 = sext i32 %148 to i64, !dbg !33
  %170 = getelementptr float, ptr addrspace(1) %0, i64 %169, !dbg !33
  %171 = sext i32 %149 to i64, !dbg !33
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !33
  %173 = sext i32 %150 to i64, !dbg !33
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !33
  %175 = sext i32 %151 to i64, !dbg !33
  %176 = getelementptr float, ptr addrspace(1) %0, i64 %175, !dbg !33
  %177 = sext i32 %152 to i64, !dbg !33
  %178 = getelementptr float, ptr addrspace(1) %0, i64 %177, !dbg !33
  %179 = sext i32 %153 to i64, !dbg !33
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !33
  %181 = sext i32 %154 to i64, !dbg !33
  %182 = getelementptr float, ptr addrspace(1) %0, i64 %181, !dbg !33
  %183 = sext i32 %155 to i64, !dbg !33
  %184 = getelementptr float, ptr addrspace(1) %0, i64 %183, !dbg !33
  %185 = sext i32 %156 to i64, !dbg !33
  %186 = getelementptr float, ptr addrspace(1) %0, i64 %185, !dbg !33
  %187 = sext i32 %157 to i64, !dbg !33
  %188 = getelementptr float, ptr addrspace(1) %0, i64 %187, !dbg !33
  %189 = sext i32 %158 to i64, !dbg !33
  %190 = getelementptr float, ptr addrspace(1) %0, i64 %189, !dbg !33
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %30) #2, !dbg !34
  %192 = bitcast i32 %191 to float, !dbg !34
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %30) #2, !dbg !34
  %194 = bitcast i32 %193 to float, !dbg !34
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %30) #2, !dbg !34
  %196 = bitcast i32 %195 to float, !dbg !34
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %30) #2, !dbg !34
  %198 = bitcast i32 %197 to float, !dbg !34
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 %30) #2, !dbg !34
  %200 = bitcast i32 %199 to float, !dbg !34
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %30) #2, !dbg !34
  %202 = bitcast i32 %201 to float, !dbg !34
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %30) #2, !dbg !34
  %204 = bitcast i32 %203 to float, !dbg !34
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %30) #2, !dbg !34
  %206 = bitcast i32 %205 to float, !dbg !34
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 %30) #2, !dbg !34
  %208 = bitcast i32 %207 to float, !dbg !34
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 %30) #2, !dbg !34
  %210 = bitcast i32 %209 to float, !dbg !34
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 %30) #2, !dbg !34
  %212 = bitcast i32 %211 to float, !dbg !34
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 %30) #2, !dbg !34
  %214 = bitcast i32 %213 to float, !dbg !34
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 %30) #2, !dbg !34
  %216 = bitcast i32 %215 to float, !dbg !34
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %30) #2, !dbg !34
  %218 = bitcast i32 %217 to float, !dbg !34
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 %30) #2, !dbg !34
  %220 = bitcast i32 %219 to float, !dbg !34
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %190, i1 %30) #2, !dbg !34
  %222 = bitcast i32 %221 to float, !dbg !34
  %223 = or disjoint i32 %46, 16, !dbg !35
  %224 = add i32 %223, %42, !dbg !36
  %225 = add i32 %223, %43, !dbg !36
  %226 = add i32 %223, %44, !dbg !36
  %227 = add i32 %223, %45, !dbg !36
  %228 = add i32 %224, %51, !dbg !37
  %229 = add i32 %51, %225, !dbg !37
  %230 = add i32 %51, %226, !dbg !37
  %231 = add i32 %51, %227, !dbg !37
  %232 = add i32 %224, %52, !dbg !37
  %233 = add i32 %225, %52, !dbg !37
  %234 = add i32 %226, %52, !dbg !37
  %235 = add i32 %227, %52, !dbg !37
  %236 = add i32 %224, %53, !dbg !37
  %237 = add i32 %225, %53, !dbg !37
  %238 = add i32 %226, %53, !dbg !37
  %239 = add i32 %227, %53, !dbg !37
  %240 = add i32 %224, %54, !dbg !37
  %241 = add i32 %225, %54, !dbg !37
  %242 = add i32 %226, %54, !dbg !37
  %243 = add i32 %227, %54, !dbg !37
  %244 = sext i32 %228 to i64, !dbg !38
  %245 = getelementptr float, ptr addrspace(1) %0, i64 %244, !dbg !38
  %246 = sext i32 %229 to i64, !dbg !38
  %247 = getelementptr float, ptr addrspace(1) %0, i64 %246, !dbg !38
  %248 = sext i32 %230 to i64, !dbg !38
  %249 = getelementptr float, ptr addrspace(1) %0, i64 %248, !dbg !38
  %250 = sext i32 %231 to i64, !dbg !38
  %251 = getelementptr float, ptr addrspace(1) %0, i64 %250, !dbg !38
  %252 = sext i32 %232 to i64, !dbg !38
  %253 = getelementptr float, ptr addrspace(1) %0, i64 %252, !dbg !38
  %254 = sext i32 %233 to i64, !dbg !38
  %255 = getelementptr float, ptr addrspace(1) %0, i64 %254, !dbg !38
  %256 = sext i32 %234 to i64, !dbg !38
  %257 = getelementptr float, ptr addrspace(1) %0, i64 %256, !dbg !38
  %258 = sext i32 %235 to i64, !dbg !38
  %259 = getelementptr float, ptr addrspace(1) %0, i64 %258, !dbg !38
  %260 = sext i32 %236 to i64, !dbg !38
  %261 = getelementptr float, ptr addrspace(1) %0, i64 %260, !dbg !38
  %262 = sext i32 %237 to i64, !dbg !38
  %263 = getelementptr float, ptr addrspace(1) %0, i64 %262, !dbg !38
  %264 = sext i32 %238 to i64, !dbg !38
  %265 = getelementptr float, ptr addrspace(1) %0, i64 %264, !dbg !38
  %266 = sext i32 %239 to i64, !dbg !38
  %267 = getelementptr float, ptr addrspace(1) %0, i64 %266, !dbg !38
  %268 = sext i32 %240 to i64, !dbg !38
  %269 = getelementptr float, ptr addrspace(1) %0, i64 %268, !dbg !38
  %270 = sext i32 %241 to i64, !dbg !38
  %271 = getelementptr float, ptr addrspace(1) %0, i64 %270, !dbg !38
  %272 = sext i32 %242 to i64, !dbg !38
  %273 = getelementptr float, ptr addrspace(1) %0, i64 %272, !dbg !38
  %274 = sext i32 %243 to i64, !dbg !38
  %275 = getelementptr float, ptr addrspace(1) %0, i64 %274, !dbg !38
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 %30) #2, !dbg !39
  %277 = bitcast i32 %276 to float, !dbg !39
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %247, i1 %30) #2, !dbg !39
  %279 = bitcast i32 %278 to float, !dbg !39
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %249, i1 %30) #2, !dbg !39
  %281 = bitcast i32 %280 to float, !dbg !39
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %251, i1 %30) #2, !dbg !39
  %283 = bitcast i32 %282 to float, !dbg !39
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %253, i1 %30) #2, !dbg !39
  %285 = bitcast i32 %284 to float, !dbg !39
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %255, i1 %30) #2, !dbg !39
  %287 = bitcast i32 %286 to float, !dbg !39
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %257, i1 %30) #2, !dbg !39
  %289 = bitcast i32 %288 to float, !dbg !39
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %259, i1 %30) #2, !dbg !39
  %291 = bitcast i32 %290 to float, !dbg !39
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %261, i1 %30) #2, !dbg !39
  %293 = bitcast i32 %292 to float, !dbg !39
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %263, i1 %30) #2, !dbg !39
  %295 = bitcast i32 %294 to float, !dbg !39
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %265, i1 %30) #2, !dbg !39
  %297 = bitcast i32 %296 to float, !dbg !39
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %267, i1 %30) #2, !dbg !39
  %299 = bitcast i32 %298 to float, !dbg !39
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %269, i1 %30) #2, !dbg !39
  %301 = bitcast i32 %300 to float, !dbg !39
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %271, i1 %30) #2, !dbg !39
  %303 = bitcast i32 %302 to float, !dbg !39
  %304 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %273, i1 %30) #2, !dbg !39
  %305 = bitcast i32 %304 to float, !dbg !39
  %306 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %275, i1 %30) #2, !dbg !39
  %307 = bitcast i32 %306 to float, !dbg !39
  %308 = or disjoint i32 %46, 17, !dbg !40
  %309 = add i32 %308, %42, !dbg !41
  %310 = add i32 %308, %43, !dbg !41
  %311 = add i32 %308, %44, !dbg !41
  %312 = add i32 %308, %45, !dbg !41
  %313 = add i32 %309, %51, !dbg !42
  %314 = add i32 %51, %310, !dbg !42
  %315 = add i32 %51, %311, !dbg !42
  %316 = add i32 %51, %312, !dbg !42
  %317 = add i32 %309, %52, !dbg !42
  %318 = add i32 %310, %52, !dbg !42
  %319 = add i32 %311, %52, !dbg !42
  %320 = add i32 %312, %52, !dbg !42
  %321 = add i32 %309, %53, !dbg !42
  %322 = add i32 %310, %53, !dbg !42
  %323 = add i32 %311, %53, !dbg !42
  %324 = add i32 %312, %53, !dbg !42
  %325 = add i32 %309, %54, !dbg !42
  %326 = add i32 %310, %54, !dbg !42
  %327 = add i32 %311, %54, !dbg !42
  %328 = add i32 %312, %54, !dbg !42
  %329 = sext i32 %313 to i64, !dbg !43
  %330 = getelementptr float, ptr addrspace(1) %0, i64 %329, !dbg !43
  %331 = sext i32 %314 to i64, !dbg !43
  %332 = getelementptr float, ptr addrspace(1) %0, i64 %331, !dbg !43
  %333 = sext i32 %315 to i64, !dbg !43
  %334 = getelementptr float, ptr addrspace(1) %0, i64 %333, !dbg !43
  %335 = sext i32 %316 to i64, !dbg !43
  %336 = getelementptr float, ptr addrspace(1) %0, i64 %335, !dbg !43
  %337 = sext i32 %317 to i64, !dbg !43
  %338 = getelementptr float, ptr addrspace(1) %0, i64 %337, !dbg !43
  %339 = sext i32 %318 to i64, !dbg !43
  %340 = getelementptr float, ptr addrspace(1) %0, i64 %339, !dbg !43
  %341 = sext i32 %319 to i64, !dbg !43
  %342 = getelementptr float, ptr addrspace(1) %0, i64 %341, !dbg !43
  %343 = sext i32 %320 to i64, !dbg !43
  %344 = getelementptr float, ptr addrspace(1) %0, i64 %343, !dbg !43
  %345 = sext i32 %321 to i64, !dbg !43
  %346 = getelementptr float, ptr addrspace(1) %0, i64 %345, !dbg !43
  %347 = sext i32 %322 to i64, !dbg !43
  %348 = getelementptr float, ptr addrspace(1) %0, i64 %347, !dbg !43
  %349 = sext i32 %323 to i64, !dbg !43
  %350 = getelementptr float, ptr addrspace(1) %0, i64 %349, !dbg !43
  %351 = sext i32 %324 to i64, !dbg !43
  %352 = getelementptr float, ptr addrspace(1) %0, i64 %351, !dbg !43
  %353 = sext i32 %325 to i64, !dbg !43
  %354 = getelementptr float, ptr addrspace(1) %0, i64 %353, !dbg !43
  %355 = sext i32 %326 to i64, !dbg !43
  %356 = getelementptr float, ptr addrspace(1) %0, i64 %355, !dbg !43
  %357 = sext i32 %327 to i64, !dbg !43
  %358 = getelementptr float, ptr addrspace(1) %0, i64 %357, !dbg !43
  %359 = sext i32 %328 to i64, !dbg !43
  %360 = getelementptr float, ptr addrspace(1) %0, i64 %359, !dbg !43
  %361 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %330, i1 %30) #2, !dbg !44
  %362 = bitcast i32 %361 to float, !dbg !44
  %363 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %332, i1 %30) #2, !dbg !44
  %364 = bitcast i32 %363 to float, !dbg !44
  %365 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %334, i1 %30) #2, !dbg !44
  %366 = bitcast i32 %365 to float, !dbg !44
  %367 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %336, i1 %30) #2, !dbg !44
  %368 = bitcast i32 %367 to float, !dbg !44
  %369 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %338, i1 %30) #2, !dbg !44
  %370 = bitcast i32 %369 to float, !dbg !44
  %371 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %340, i1 %30) #2, !dbg !44
  %372 = bitcast i32 %371 to float, !dbg !44
  %373 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %342, i1 %30) #2, !dbg !44
  %374 = bitcast i32 %373 to float, !dbg !44
  %375 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %344, i1 %30) #2, !dbg !44
  %376 = bitcast i32 %375 to float, !dbg !44
  %377 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %346, i1 %30) #2, !dbg !44
  %378 = bitcast i32 %377 to float, !dbg !44
  %379 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %348, i1 %30) #2, !dbg !44
  %380 = bitcast i32 %379 to float, !dbg !44
  %381 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %350, i1 %30) #2, !dbg !44
  %382 = bitcast i32 %381 to float, !dbg !44
  %383 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %352, i1 %30) #2, !dbg !44
  %384 = bitcast i32 %383 to float, !dbg !44
  %385 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %354, i1 %30) #2, !dbg !44
  %386 = bitcast i32 %385 to float, !dbg !44
  %387 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %356, i1 %30) #2, !dbg !44
  %388 = bitcast i32 %387 to float, !dbg !44
  %389 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %358, i1 %30) #2, !dbg !44
  %390 = bitcast i32 %389 to float, !dbg !44
  %391 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %360, i1 %30) #2, !dbg !44
  %392 = bitcast i32 %391 to float, !dbg !44
  %393 = fcmp ogt float %192, %104, !dbg !45
  %394 = fcmp ogt float %194, %106, !dbg !45
  %395 = fcmp ogt float %196, %108, !dbg !45
  %396 = fcmp ogt float %198, %110, !dbg !45
  %397 = fcmp ogt float %200, %112, !dbg !45
  %398 = fcmp ogt float %202, %114, !dbg !45
  %399 = fcmp ogt float %204, %116, !dbg !45
  %400 = fcmp ogt float %206, %118, !dbg !45
  %401 = fcmp ogt float %208, %120, !dbg !45
  %402 = fcmp ogt float %210, %122, !dbg !45
  %403 = fcmp ogt float %212, %124, !dbg !45
  %404 = fcmp ogt float %214, %126, !dbg !45
  %405 = fcmp ogt float %216, %128, !dbg !45
  %406 = fcmp ogt float %218, %130, !dbg !45
  %407 = fcmp ogt float %220, %132, !dbg !45
  %408 = fcmp ogt float %222, %134, !dbg !45
  %409 = fcmp uno float %192, 0.000000e+00, !dbg !49
  %410 = fcmp uno float %194, 0.000000e+00, !dbg !49
  %411 = fcmp uno float %196, 0.000000e+00, !dbg !49
  %412 = fcmp uno float %198, 0.000000e+00, !dbg !49
  %413 = fcmp uno float %200, 0.000000e+00, !dbg !49
  %414 = fcmp uno float %202, 0.000000e+00, !dbg !49
  %415 = fcmp uno float %204, 0.000000e+00, !dbg !49
  %416 = fcmp uno float %206, 0.000000e+00, !dbg !49
  %417 = fcmp uno float %208, 0.000000e+00, !dbg !49
  %418 = fcmp uno float %210, 0.000000e+00, !dbg !49
  %419 = fcmp uno float %212, 0.000000e+00, !dbg !49
  %420 = fcmp uno float %214, 0.000000e+00, !dbg !49
  %421 = fcmp uno float %216, 0.000000e+00, !dbg !49
  %422 = fcmp uno float %218, 0.000000e+00, !dbg !49
  %423 = fcmp uno float %220, 0.000000e+00, !dbg !49
  %424 = fcmp uno float %222, 0.000000e+00, !dbg !49
  %425 = or i1 %393, %409, !dbg !50
  %426 = or i1 %394, %410, !dbg !50
  %427 = or i1 %395, %411, !dbg !50
  %428 = or i1 %396, %412, !dbg !50
  %429 = or i1 %397, %413, !dbg !50
  %430 = or i1 %398, %414, !dbg !50
  %431 = or i1 %399, %415, !dbg !50
  %432 = or i1 %400, %416, !dbg !50
  %433 = or i1 %401, %417, !dbg !50
  %434 = or i1 %402, %418, !dbg !50
  %435 = or i1 %403, %419, !dbg !50
  %436 = or i1 %404, %420, !dbg !50
  %437 = or i1 %405, %421, !dbg !50
  %438 = or i1 %406, %422, !dbg !50
  %439 = or i1 %407, %423, !dbg !50
  %440 = or i1 %408, %424, !dbg !50
  %441 = select i1 %425, float %192, float %104, !dbg !51
  %442 = select i1 %426, float %194, float %106, !dbg !51
  %443 = select i1 %427, float %196, float %108, !dbg !51
  %444 = select i1 %428, float %198, float %110, !dbg !51
  %445 = select i1 %429, float %200, float %112, !dbg !51
  %446 = select i1 %430, float %202, float %114, !dbg !51
  %447 = select i1 %431, float %204, float %116, !dbg !51
  %448 = select i1 %432, float %206, float %118, !dbg !51
  %449 = select i1 %433, float %208, float %120, !dbg !51
  %450 = select i1 %434, float %210, float %122, !dbg !51
  %451 = select i1 %435, float %212, float %124, !dbg !51
  %452 = select i1 %436, float %214, float %126, !dbg !51
  %453 = select i1 %437, float %216, float %128, !dbg !51
  %454 = select i1 %438, float %218, float %130, !dbg !51
  %455 = select i1 %439, float %220, float %132, !dbg !51
  %456 = select i1 %440, float %222, float %134, !dbg !51
  %457 = fcmp olt float %441, %277, !dbg !52
  %458 = fcmp olt float %442, %279, !dbg !52
  %459 = fcmp olt float %443, %281, !dbg !52
  %460 = fcmp olt float %444, %283, !dbg !52
  %461 = fcmp olt float %445, %285, !dbg !52
  %462 = fcmp olt float %446, %287, !dbg !52
  %463 = fcmp olt float %447, %289, !dbg !52
  %464 = fcmp olt float %448, %291, !dbg !52
  %465 = fcmp olt float %449, %293, !dbg !52
  %466 = fcmp olt float %450, %295, !dbg !52
  %467 = fcmp olt float %451, %297, !dbg !52
  %468 = fcmp olt float %452, %299, !dbg !52
  %469 = fcmp olt float %453, %301, !dbg !52
  %470 = fcmp olt float %454, %303, !dbg !52
  %471 = fcmp olt float %455, %305, !dbg !52
  %472 = fcmp olt float %456, %307, !dbg !52
  %473 = fcmp uno float %277, 0.000000e+00, !dbg !54
  %474 = fcmp uno float %279, 0.000000e+00, !dbg !54
  %475 = fcmp uno float %281, 0.000000e+00, !dbg !54
  %476 = fcmp uno float %283, 0.000000e+00, !dbg !54
  %477 = fcmp uno float %285, 0.000000e+00, !dbg !54
  %478 = fcmp uno float %287, 0.000000e+00, !dbg !54
  %479 = fcmp uno float %289, 0.000000e+00, !dbg !54
  %480 = fcmp uno float %291, 0.000000e+00, !dbg !54
  %481 = fcmp uno float %293, 0.000000e+00, !dbg !54
  %482 = fcmp uno float %295, 0.000000e+00, !dbg !54
  %483 = fcmp uno float %297, 0.000000e+00, !dbg !54
  %484 = fcmp uno float %299, 0.000000e+00, !dbg !54
  %485 = fcmp uno float %301, 0.000000e+00, !dbg !54
  %486 = fcmp uno float %303, 0.000000e+00, !dbg !54
  %487 = fcmp uno float %305, 0.000000e+00, !dbg !54
  %488 = fcmp uno float %307, 0.000000e+00, !dbg !54
  %489 = or i1 %457, %473, !dbg !55
  %490 = or i1 %458, %474, !dbg !55
  %491 = or i1 %459, %475, !dbg !55
  %492 = or i1 %460, %476, !dbg !55
  %493 = or i1 %461, %477, !dbg !55
  %494 = or i1 %462, %478, !dbg !55
  %495 = or i1 %463, %479, !dbg !55
  %496 = or i1 %464, %480, !dbg !55
  %497 = or i1 %465, %481, !dbg !55
  %498 = or i1 %466, %482, !dbg !55
  %499 = or i1 %467, %483, !dbg !55
  %500 = or i1 %468, %484, !dbg !55
  %501 = or i1 %469, %485, !dbg !55
  %502 = or i1 %470, %486, !dbg !55
  %503 = or i1 %471, %487, !dbg !55
  %504 = or i1 %472, %488, !dbg !55
  %505 = select i1 %489, float %277, float %441, !dbg !56
  %506 = select i1 %490, float %279, float %442, !dbg !56
  %507 = select i1 %491, float %281, float %443, !dbg !56
  %508 = select i1 %492, float %283, float %444, !dbg !56
  %509 = select i1 %493, float %285, float %445, !dbg !56
  %510 = select i1 %494, float %287, float %446, !dbg !56
  %511 = select i1 %495, float %289, float %447, !dbg !56
  %512 = select i1 %496, float %291, float %448, !dbg !56
  %513 = select i1 %497, float %293, float %449, !dbg !56
  %514 = select i1 %498, float %295, float %450, !dbg !56
  %515 = select i1 %499, float %297, float %451, !dbg !56
  %516 = select i1 %500, float %299, float %452, !dbg !56
  %517 = select i1 %501, float %301, float %453, !dbg !56
  %518 = select i1 %502, float %303, float %454, !dbg !56
  %519 = select i1 %503, float %305, float %455, !dbg !56
  %520 = select i1 %504, float %307, float %456, !dbg !56
  %521 = fcmp olt float %505, %362, !dbg !57
  %522 = fcmp olt float %506, %364, !dbg !57
  %523 = fcmp olt float %507, %366, !dbg !57
  %524 = fcmp olt float %508, %368, !dbg !57
  %525 = fcmp olt float %509, %370, !dbg !57
  %526 = fcmp olt float %510, %372, !dbg !57
  %527 = fcmp olt float %511, %374, !dbg !57
  %528 = fcmp olt float %512, %376, !dbg !57
  %529 = fcmp olt float %513, %378, !dbg !57
  %530 = fcmp olt float %514, %380, !dbg !57
  %531 = fcmp olt float %515, %382, !dbg !57
  %532 = fcmp olt float %516, %384, !dbg !57
  %533 = fcmp olt float %517, %386, !dbg !57
  %534 = fcmp olt float %518, %388, !dbg !57
  %535 = fcmp olt float %519, %390, !dbg !57
  %536 = fcmp olt float %520, %392, !dbg !57
  %537 = fcmp uno float %362, 0.000000e+00, !dbg !59
  %538 = fcmp uno float %364, 0.000000e+00, !dbg !59
  %539 = fcmp uno float %366, 0.000000e+00, !dbg !59
  %540 = fcmp uno float %368, 0.000000e+00, !dbg !59
  %541 = fcmp uno float %370, 0.000000e+00, !dbg !59
  %542 = fcmp uno float %372, 0.000000e+00, !dbg !59
  %543 = fcmp uno float %374, 0.000000e+00, !dbg !59
  %544 = fcmp uno float %376, 0.000000e+00, !dbg !59
  %545 = fcmp uno float %378, 0.000000e+00, !dbg !59
  %546 = fcmp uno float %380, 0.000000e+00, !dbg !59
  %547 = fcmp uno float %382, 0.000000e+00, !dbg !59
  %548 = fcmp uno float %384, 0.000000e+00, !dbg !59
  %549 = fcmp uno float %386, 0.000000e+00, !dbg !59
  %550 = fcmp uno float %388, 0.000000e+00, !dbg !59
  %551 = fcmp uno float %390, 0.000000e+00, !dbg !59
  %552 = fcmp uno float %392, 0.000000e+00, !dbg !59
  %553 = or i1 %521, %537, !dbg !60
  %554 = or i1 %522, %538, !dbg !60
  %555 = or i1 %523, %539, !dbg !60
  %556 = or i1 %524, %540, !dbg !60
  %557 = or i1 %525, %541, !dbg !60
  %558 = or i1 %526, %542, !dbg !60
  %559 = or i1 %527, %543, !dbg !60
  %560 = or i1 %528, %544, !dbg !60
  %561 = or i1 %529, %545, !dbg !60
  %562 = or i1 %530, %546, !dbg !60
  %563 = or i1 %531, %547, !dbg !60
  %564 = or i1 %532, %548, !dbg !60
  %565 = or i1 %533, %549, !dbg !60
  %566 = or i1 %534, %550, !dbg !60
  %567 = or i1 %535, %551, !dbg !60
  %568 = or i1 %536, %552, !dbg !60
  %569 = select i1 %553, float %362, float %505, !dbg !61
  %570 = select i1 %554, float %364, float %506, !dbg !61
  %571 = select i1 %555, float %366, float %507, !dbg !61
  %572 = select i1 %556, float %368, float %508, !dbg !61
  %573 = select i1 %557, float %370, float %509, !dbg !61
  %574 = select i1 %558, float %372, float %510, !dbg !61
  %575 = select i1 %559, float %374, float %511, !dbg !61
  %576 = select i1 %560, float %376, float %512, !dbg !61
  %577 = select i1 %561, float %378, float %513, !dbg !61
  %578 = select i1 %562, float %380, float %514, !dbg !61
  %579 = select i1 %563, float %382, float %515, !dbg !61
  %580 = select i1 %564, float %384, float %516, !dbg !61
  %581 = select i1 %565, float %386, float %517, !dbg !61
  %582 = select i1 %566, float %388, float %518, !dbg !61
  %583 = select i1 %567, float %390, float %519, !dbg !61
  %584 = select i1 %568, float %392, float %520, !dbg !61
  %585 = shl i32 %14, 6, !dbg !62
  %586 = shl i32 %15, 6, !dbg !62
  %587 = shl i32 %16, 6, !dbg !62
  %588 = shl i32 %17, 6, !dbg !62
  %589 = add i32 %22, %585, !dbg !63
  %590 = add i32 %22, %586, !dbg !63
  %591 = add i32 %22, %587, !dbg !63
  %592 = add i32 %22, %588, !dbg !63
  %593 = sext i32 %589 to i64, !dbg !64
  %594 = getelementptr float, ptr addrspace(1) %1, i64 %593, !dbg !64
  %595 = sext i32 %590 to i64, !dbg !64
  %596 = getelementptr float, ptr addrspace(1) %1, i64 %595, !dbg !64
  %597 = sext i32 %591 to i64, !dbg !64
  %598 = getelementptr float, ptr addrspace(1) %1, i64 %597, !dbg !64
  %599 = sext i32 %592 to i64, !dbg !64
  %600 = getelementptr float, ptr addrspace(1) %1, i64 %599, !dbg !64
  %601 = bitcast float %569 to i32, !dbg !65
  %602 = bitcast float %570 to i32, !dbg !65
  %603 = bitcast float %571 to i32, !dbg !65
  %604 = bitcast float %572 to i32, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %601, i32 %602, i32 %603, i32 %604, ptr addrspace(1) %594, i1 %30) #2, !dbg !65
  %605 = bitcast float %573 to i32, !dbg !65
  %606 = bitcast float %574 to i32, !dbg !65
  %607 = bitcast float %575 to i32, !dbg !65
  %608 = bitcast float %576 to i32, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %605, i32 %606, i32 %607, i32 %608, ptr addrspace(1) %596, i1 %30) #2, !dbg !65
  %609 = bitcast float %577 to i32, !dbg !65
  %610 = bitcast float %578 to i32, !dbg !65
  %611 = bitcast float %579 to i32, !dbg !65
  %612 = bitcast float %580 to i32, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %609, i32 %610, i32 %611, i32 %612, ptr addrspace(1) %598, i1 %30) #2, !dbg !65
  %613 = bitcast float %581 to i32, !dbg !65
  %614 = bitcast float %582 to i32, !dbg !65
  %615 = bitcast float %583 to i32, !dbg !65
  %616 = bitcast float %584 to i32, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %613, i32 %614, i32 %615, i32 %616, ptr addrspace(1) %600, i1 %30) #2, !dbg !65
  %617 = shl i32 %26, 8, !dbg !66
  %618 = shl i32 %27, 8, !dbg !66
  %619 = shl i32 %28, 8, !dbg !66
  %620 = shl i32 %29, 8, !dbg !66
  %621 = shl i32 %40, 14, !dbg !67
  %622 = add i32 %621, %.decomposed34, !dbg !68
  %623 = add i32 %622, %617, !dbg !69
  %624 = add i32 %622, %618, !dbg !69
  %625 = add i32 %622, %619, !dbg !69
  %626 = add i32 %622, %620, !dbg !69
  %627 = sext i32 %623 to i64, !dbg !70
  %628 = getelementptr float, ptr addrspace(1) %2, i64 %627, !dbg !70
  %629 = sext i32 %624 to i64, !dbg !70
  %630 = getelementptr float, ptr addrspace(1) %2, i64 %629, !dbg !70
  %631 = sext i32 %625 to i64, !dbg !70
  %632 = getelementptr float, ptr addrspace(1) %2, i64 %631, !dbg !70
  %633 = sext i32 %626 to i64, !dbg !70
  %634 = getelementptr float, ptr addrspace(1) %2, i64 %633, !dbg !70
  %635 = shl i32 %8, 10, !dbg !71
  %636 = and i32 %635, 3072, !dbg !71
  %637 = or disjoint i32 %636, %10, !dbg !71
  %638 = and i32 %11, 1020, !dbg !71
  %639 = lshr exact i32 %636, 4, !dbg !71
  %640 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %639, !dbg !71
  %641 = getelementptr float, ptr addrspace(3) %640, i32 %637, !dbg !71
  %642 = bitcast float %569 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %641, <1 x i32> %642, i1 true) #2, !dbg !71
  %643 = or disjoint i32 %637, 256, !dbg !71
  %644 = lshr i32 %643, 6, !dbg !71
  %645 = getelementptr float, ptr addrspace(3) @global_smem, i32 %644, !dbg !71
  %646 = getelementptr float, ptr addrspace(3) %645, i32 %643, !dbg !71
  %647 = bitcast float %570 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %646, <1 x i32> %647, i1 true) #2, !dbg !71
  %648 = or disjoint i32 %637, 512, !dbg !71
  %649 = lshr i32 %648, 6, !dbg !71
  %650 = getelementptr float, ptr addrspace(3) @global_smem, i32 %649, !dbg !71
  %651 = getelementptr float, ptr addrspace(3) %650, i32 %648, !dbg !71
  %652 = bitcast float %571 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %651, <1 x i32> %652, i1 true) #2, !dbg !71
  %653 = or disjoint i32 %637, 768, !dbg !71
  %654 = lshr i32 %653, 6, !dbg !71
  %655 = getelementptr float, ptr addrspace(3) @global_smem, i32 %654, !dbg !71
  %656 = getelementptr float, ptr addrspace(3) %655, i32 %653, !dbg !71
  %657 = bitcast float %572 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %656, <1 x i32> %657, i1 true) #2, !dbg !71
  %658 = or disjoint i32 %637, 64, !dbg !71
  %659 = getelementptr float, ptr addrspace(3) %640, i32 %658, !dbg !71
  %660 = bitcast float %573 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %659, <1 x i32> %660, i1 true) #2, !dbg !71
  %661 = or disjoint i32 %637, 320, !dbg !71
  %662 = lshr i32 %661, 6, !dbg !71
  %663 = and i32 %662, 52, !dbg !71
  %664 = getelementptr float, ptr addrspace(3) @global_smem, i32 %663, !dbg !71
  %665 = getelementptr float, ptr addrspace(3) %664, i32 %661, !dbg !71
  %666 = bitcast float %574 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %665, <1 x i32> %666, i1 true) #2, !dbg !71
  %667 = or disjoint i32 %637, 576, !dbg !71
  %668 = lshr i32 %667, 6, !dbg !71
  %669 = and i32 %668, 56, !dbg !71
  %670 = getelementptr float, ptr addrspace(3) @global_smem, i32 %669, !dbg !71
  %671 = getelementptr float, ptr addrspace(3) %670, i32 %667, !dbg !71
  %672 = bitcast float %575 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %671, <1 x i32> %672, i1 true) #2, !dbg !71
  %673 = or disjoint i32 %637, 832, !dbg !71
  %674 = lshr i32 %673, 6, !dbg !71
  %675 = and i32 %674, 60, !dbg !71
  %676 = getelementptr float, ptr addrspace(3) @global_smem, i32 %675, !dbg !71
  %677 = getelementptr float, ptr addrspace(3) %676, i32 %673, !dbg !71
  %678 = bitcast float %576 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %677, <1 x i32> %678, i1 true) #2, !dbg !71
  %679 = or disjoint i32 %637, 128, !dbg !71
  %680 = getelementptr float, ptr addrspace(3) %640, i32 %679, !dbg !71
  %681 = bitcast float %577 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %680, <1 x i32> %681, i1 true) #2, !dbg !71
  %682 = or disjoint i32 %637, 384, !dbg !71
  %683 = lshr i32 %682, 6, !dbg !71
  %684 = and i32 %683, 52, !dbg !71
  %685 = getelementptr float, ptr addrspace(3) @global_smem, i32 %684, !dbg !71
  %686 = getelementptr float, ptr addrspace(3) %685, i32 %682, !dbg !71
  %687 = bitcast float %578 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %686, <1 x i32> %687, i1 true) #2, !dbg !71
  %688 = or disjoint i32 %637, 640, !dbg !71
  %689 = lshr i32 %688, 6, !dbg !71
  %690 = and i32 %689, 56, !dbg !71
  %691 = getelementptr float, ptr addrspace(3) @global_smem, i32 %690, !dbg !71
  %692 = getelementptr float, ptr addrspace(3) %691, i32 %688, !dbg !71
  %693 = bitcast float %579 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %692, <1 x i32> %693, i1 true) #2, !dbg !71
  %694 = or disjoint i32 %637, 896, !dbg !71
  %695 = lshr i32 %694, 6, !dbg !71
  %696 = and i32 %695, 60, !dbg !71
  %697 = getelementptr float, ptr addrspace(3) @global_smem, i32 %696, !dbg !71
  %698 = getelementptr float, ptr addrspace(3) %697, i32 %694, !dbg !71
  %699 = bitcast float %580 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %698, <1 x i32> %699, i1 true) #2, !dbg !71
  %700 = or disjoint i32 %637, 192, !dbg !71
  %701 = getelementptr float, ptr addrspace(3) %640, i32 %700, !dbg !71
  %702 = bitcast float %581 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %701, <1 x i32> %702, i1 true) #2, !dbg !71
  %703 = or disjoint i32 %637, 448, !dbg !71
  %704 = lshr i32 %703, 6, !dbg !71
  %705 = and i32 %704, 52, !dbg !71
  %706 = getelementptr float, ptr addrspace(3) @global_smem, i32 %705, !dbg !71
  %707 = getelementptr float, ptr addrspace(3) %706, i32 %703, !dbg !71
  %708 = bitcast float %582 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %707, <1 x i32> %708, i1 true) #2, !dbg !71
  %709 = or disjoint i32 %637, 704, !dbg !71
  %710 = lshr i32 %709, 6, !dbg !71
  %711 = and i32 %710, 56, !dbg !71
  %712 = getelementptr float, ptr addrspace(3) @global_smem, i32 %711, !dbg !71
  %713 = getelementptr float, ptr addrspace(3) %712, i32 %709, !dbg !71
  %714 = bitcast float %583 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %713, <1 x i32> %714, i1 true) #2, !dbg !71
  %715 = or disjoint i32 %637, 960, !dbg !71
  %716 = lshr i32 %715, 6, !dbg !71
  %717 = and i32 %716, 60, !dbg !71
  %718 = getelementptr float, ptr addrspace(3) @global_smem, i32 %717, !dbg !71
  %719 = getelementptr float, ptr addrspace(3) %718, i32 %715, !dbg !71
  %720 = bitcast float %584 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %719, <1 x i32> %720, i1 true) #2, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %721 = lshr i32 %11, 6, !dbg !71
  %722 = and i32 %721, 12, !dbg !71
  %723 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %722, !dbg !71
  %724 = getelementptr inbounds float, ptr addrspace(3) %723, i32 %638, !dbg !71
  %725 = or disjoint i32 %638, 1024, !dbg !71
  %726 = lshr i32 %725, 6, !dbg !71
  %727 = and i32 %726, 28, !dbg !71
  %728 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %727, !dbg !71
  %729 = getelementptr inbounds float, ptr addrspace(3) %728, i32 %725, !dbg !71
  %730 = load <4 x i32>, ptr addrspace(3) %729, align 16, !dbg !71
  %731 = or disjoint i32 %638, 2048, !dbg !71
  %732 = lshr i32 %731, 6, !dbg !71
  %733 = and i32 %732, 44, !dbg !71
  %734 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %733, !dbg !71
  %735 = getelementptr inbounds float, ptr addrspace(3) %734, i32 %731, !dbg !71
  %736 = load <4 x i32>, ptr addrspace(3) %735, align 16, !dbg !71
  %737 = or disjoint i32 %638, 3072, !dbg !71
  %738 = lshr i32 %737, 6, !dbg !71
  %739 = and i32 %738, 60, !dbg !71
  %740 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %739, !dbg !71
  %741 = getelementptr inbounds float, ptr addrspace(3) %740, i32 %737, !dbg !71
  %742 = load <4 x i32>, ptr addrspace(3) %741, align 16, !dbg !71
  %.extract = load i32, ptr addrspace(3) %724, align 16, !dbg !71
  %743 = getelementptr inbounds i8, ptr addrspace(3) %724, i32 4, !dbg !71
  %.extract18 = load i32, ptr addrspace(3) %743, align 4, !dbg !71
  %744 = getelementptr inbounds i8, ptr addrspace(3) %724, i32 8, !dbg !71
  %.extract19 = load i32, ptr addrspace(3) %744, align 8, !dbg !71
  %745 = getelementptr inbounds i8, ptr addrspace(3) %724, i32 12, !dbg !71
  %.extract20 = load i32, ptr addrspace(3) %745, align 4, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %628, i1 %31) #2, !dbg !71
  %.extract21 = extractelement <4 x i32> %730, i64 0, !dbg !71
  %.extract22 = extractelement <4 x i32> %730, i64 1, !dbg !71
  %.extract23 = extractelement <4 x i32> %730, i64 2, !dbg !71
  %.extract24 = extractelement <4 x i32> %730, i64 3, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %630, i1 %32) #2, !dbg !71
  %.extract25 = extractelement <4 x i32> %736, i64 0, !dbg !71
  %.extract26 = extractelement <4 x i32> %736, i64 1, !dbg !71
  %.extract27 = extractelement <4 x i32> %736, i64 2, !dbg !71
  %.extract28 = extractelement <4 x i32> %736, i64 3, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %632, i1 %33) #2, !dbg !71
  %.extract29 = extractelement <4 x i32> %742, i64 0, !dbg !71
  %.extract30 = extractelement <4 x i32> %742, i64 1, !dbg !71
  %.extract31 = extractelement <4 x i32> %742, i64 2, !dbg !71
  %.extract32 = extractelement <4 x i32> %742, i64 3, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %634, i1 %34) #2, !dbg !71
  ret void, !dbg !72
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdywpmszpgbzy5fojfkyxs3z7sijunr2t5zlydoamo26vtyon7wo.py", directory: "inductor_cache/dy")
!4 = !{ptr @triton_poi_fused_convolution_max_pool2d_with_indices_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_max_pool2d_with_indices_15, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_max_pool2d_with_indices_15", linkageName: "triton_poi_fused_convolution_max_pool2d_with_indices_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 32, scope: !7)
!24 = !DILocation(line: 34, column: 40, scope: !7)
!25 = !DILocation(line: 34, column: 37, scope: !7)
!26 = !DILocation(line: 34, column: 49, scope: !7)
!27 = !DILocation(line: 34, column: 45, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 54, scope: !7)
!30 = !DILocation(line: 35, column: 34, scope: !7)
!31 = !DILocation(line: 35, column: 41, scope: !7)
!32 = !DILocation(line: 35, column: 49, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 58, scope: !7)
!35 = !DILocation(line: 36, column: 35, scope: !7)
!36 = !DILocation(line: 36, column: 42, scope: !7)
!37 = !DILocation(line: 36, column: 50, scope: !7)
!38 = !DILocation(line: 36, column: 30, scope: !7)
!39 = !DILocation(line: 36, column: 59, scope: !7)
!40 = !DILocation(line: 37, column: 35, scope: !7)
!41 = !DILocation(line: 37, column: 42, scope: !7)
!42 = !DILocation(line: 37, column: 50, scope: !7)
!43 = !DILocation(line: 37, column: 30, scope: !7)
!44 = !DILocation(line: 37, column: 59, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 38, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !48)
!51 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!52 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !53)
!53 = !DILocation(line: 39, column: 40, scope: !7)
!54 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !53)
!55 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !53)
!56 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !53)
!57 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !58)
!58 = !DILocation(line: 40, column: 40, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !58)
!60 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !58)
!61 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !58)
!62 = !DILocation(line: 41, column: 33, scope: !7)
!63 = !DILocation(line: 41, column: 30, scope: !7)
!64 = !DILocation(line: 41, column: 25, scope: !7)
!65 = !DILocation(line: 41, column: 44, scope: !7)
!66 = !DILocation(line: 42, column: 34, scope: !7)
!67 = !DILocation(line: 42, column: 45, scope: !7)
!68 = !DILocation(line: 42, column: 30, scope: !7)
!69 = !DILocation(line: 42, column: 39, scope: !7)
!70 = !DILocation(line: 42, column: 25, scope: !7)
!71 = !DILocation(line: 42, column: 56, scope: !7)
!72 = !DILocation(line: 42, column: 4, scope: !7)
