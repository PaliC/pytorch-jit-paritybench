; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_reflection_pad2d_relu_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = or disjoint i32 %13, 512, !dbg !13
  %18 = or disjoint i32 %13, 513, !dbg !13
  %19 = or disjoint i32 %13, 514, !dbg !13
  %20 = or disjoint i32 %13, 515, !dbg !13
  %21 = icmp slt i32 %13, 557568, !dbg !14
  %22 = icmp slt i32 %17, 557568, !dbg !14
  %23 = srem i32 %14, 66, !dbg !15
  %24 = srem i32 %16, 66, !dbg !15
  %25 = srem i32 %18, 66, !dbg !15
  %26 = srem i32 %20, 66, !dbg !15
  %27 = sdiv i32 %13, 66, !dbg !16
  %28 = sdiv i32 %15, 66, !dbg !16
  %29 = sdiv i32 %17, 66, !dbg !16
  %30 = sdiv i32 %19, 66, !dbg !16
  %31 = sdiv i32 %13, 4356, !dbg !17
  %32 = sdiv i32 %17, 4356, !dbg !17
  %33 = add nsw i32 %23, -1, !dbg !18
  %34 = add nsw i32 %24, -1, !dbg !18
  %35 = add nsw i32 %25, -1, !dbg !18
  %36 = add nsw i32 %26, -1, !dbg !18
  %37 = tail call i32 @llvm.abs.i32(i32 %33, i1 true), !dbg !19
  %38 = tail call i32 @llvm.abs.i32(i32 %34, i1 true), !dbg !19
  %39 = tail call i32 @llvm.abs.i32(i32 %35, i1 true), !dbg !19
  %40 = tail call i32 @llvm.abs.i32(i32 %36, i1 true), !dbg !19
  %41 = add nsw i32 %37, -63, !dbg !20
  %42 = add nsw i32 %38, -63, !dbg !20
  %43 = add nsw i32 %39, -63, !dbg !20
  %44 = add nsw i32 %40, -63, !dbg !20
  %45 = tail call i32 @llvm.abs.i32(i32 %41, i1 true), !dbg !21
  %46 = tail call i32 @llvm.abs.i32(i32 %42, i1 true), !dbg !21
  %47 = tail call i32 @llvm.abs.i32(i32 %43, i1 true), !dbg !21
  %48 = tail call i32 @llvm.abs.i32(i32 %44, i1 true), !dbg !21
  %49 = shl nsw i32 %31, 12, !dbg !22
  %50 = shl nsw i32 %32, 12, !dbg !22
  %reass.sub = or disjoint i32 %49, 4095, !dbg !23
  %51 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !15
  %52 = insertelement <2 x i32> %51, i32 %27, i64 1, !dbg !15
  %53 = srem <2 x i32> %52, splat (i32 66), !dbg !15
  %54 = add nsw <2 x i32> %53, splat (i32 -1), !dbg !18
  %55 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %54, i1 true), !dbg !19
  %56 = add nsw <2 x i32> %55, splat (i32 -63), !dbg !20
  %57 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %56, i1 true), !dbg !21
  %58 = extractelement <2 x i32> %57, i64 0, !dbg !24
  %59 = sub nuw i32 %reass.sub, %58, !dbg !24
  %60 = extractelement <2 x i32> %57, i64 1, !dbg !24
  %61 = mul nsw i32 %60, -64, !dbg !24
  %62 = add i32 %59, %61, !dbg !24
  %63 = sub nuw i32 %reass.sub, %45, !dbg !23
  %64 = add i32 %63, %61, !dbg !24
  %65 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !15
  %66 = insertelement <2 x i32> %65, i32 %28, i64 1, !dbg !15
  %67 = srem <2 x i32> %66, splat (i32 66), !dbg !15
  %68 = add nsw <2 x i32> %67, splat (i32 -1), !dbg !18
  %69 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %68, i1 true), !dbg !19
  %70 = add nsw <2 x i32> %69, splat (i32 -63), !dbg !20
  %71 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %70, i1 true), !dbg !21
  %72 = extractelement <2 x i32> %71, i64 0, !dbg !24
  %73 = sub nuw i32 %reass.sub, %72, !dbg !24
  %74 = extractelement <2 x i32> %71, i64 1, !dbg !24
  %75 = mul nsw i32 %74, -64, !dbg !24
  %76 = add i32 %73, %75, !dbg !24
  %77 = sub nuw i32 %reass.sub, %46, !dbg !23
  %78 = add i32 %77, %75, !dbg !24
  %reass.sub4 = or disjoint i32 %50, 4095, !dbg !23
  %79 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !15
  %80 = insertelement <2 x i32> %79, i32 %29, i64 1, !dbg !15
  %81 = srem <2 x i32> %80, splat (i32 66), !dbg !15
  %82 = add nsw <2 x i32> %81, splat (i32 -1), !dbg !18
  %83 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %82, i1 true), !dbg !19
  %84 = add nsw <2 x i32> %83, splat (i32 -63), !dbg !20
  %85 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %84, i1 true), !dbg !21
  %86 = extractelement <2 x i32> %85, i64 0, !dbg !24
  %87 = sub nuw i32 %reass.sub4, %86, !dbg !24
  %88 = extractelement <2 x i32> %85, i64 1, !dbg !24
  %89 = mul nsw i32 %88, -64, !dbg !24
  %90 = add i32 %87, %89, !dbg !24
  %91 = sub nuw i32 %reass.sub4, %47, !dbg !23
  %92 = add i32 %91, %89, !dbg !24
  %93 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !15
  %94 = insertelement <2 x i32> %93, i32 %30, i64 1, !dbg !15
  %95 = srem <2 x i32> %94, splat (i32 66), !dbg !15
  %96 = add nsw <2 x i32> %95, splat (i32 -1), !dbg !18
  %97 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %96, i1 true), !dbg !19
  %98 = add nsw <2 x i32> %97, splat (i32 -63), !dbg !20
  %99 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %98, i1 true), !dbg !21
  %100 = extractelement <2 x i32> %99, i64 0, !dbg !24
  %101 = sub nuw i32 %reass.sub4, %100, !dbg !24
  %102 = extractelement <2 x i32> %99, i64 1, !dbg !24
  %103 = mul nsw i32 %102, -64, !dbg !24
  %104 = add i32 %101, %103, !dbg !24
  %105 = sub nuw i32 %reass.sub4, %48, !dbg !23
  %106 = add i32 %105, %103, !dbg !24
  %107 = sext i32 %62 to i64, !dbg !25
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !25
  %109 = sext i32 %64 to i64, !dbg !25
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !25
  %111 = sext i32 %76 to i64, !dbg !25
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !25
  %113 = sext i32 %78 to i64, !dbg !25
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !25
  %115 = sext i32 %90 to i64, !dbg !25
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !25
  %117 = sext i32 %92 to i64, !dbg !25
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !25
  %119 = sext i32 %104 to i64, !dbg !25
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !25
  %121 = sext i32 %106 to i64, !dbg !25
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !25
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %21) #2, !dbg !26
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %21) #2, !dbg !26
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %21) #2, !dbg !26
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %21) #2, !dbg !26
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %22) #2, !dbg !26
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %22) #2, !dbg !26
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %22) #2, !dbg !26
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %22) #2, !dbg !26
  %131 = sext i32 %31 to i64, !dbg !27
  %132 = getelementptr float, ptr addrspace(1) %1, i64 %131, !dbg !27
  %133 = sext i32 %32 to i64, !dbg !27
  %134 = getelementptr float, ptr addrspace(1) %1, i64 %133, !dbg !27
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %21) #2, !dbg !28
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %21) #2, !dbg !28
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %21) #2, !dbg !28
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %21) #2, !dbg !28
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %22) #2, !dbg !28
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %22) #2, !dbg !28
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %22) #2, !dbg !28
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %22) #2, !dbg !28
  %143 = getelementptr float, ptr addrspace(1) %2, i64 %131, !dbg !29
  %144 = getelementptr float, ptr addrspace(1) %2, i64 %133, !dbg !29
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %21) #2, !dbg !30
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %21) #2, !dbg !30
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %21) #2, !dbg !30
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %21) #2, !dbg !30
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %22) #2, !dbg !30
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %22) #2, !dbg !30
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %22) #2, !dbg !30
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %22) #2, !dbg !30
  %153 = getelementptr float, ptr addrspace(1) %3, i64 %131, !dbg !31
  %154 = getelementptr float, ptr addrspace(1) %3, i64 %133, !dbg !31
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %21) #2, !dbg !32
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %21) #2, !dbg !32
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %21) #2, !dbg !32
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %21) #2, !dbg !32
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %22) #2, !dbg !32
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %22) #2, !dbg !32
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %22) #2, !dbg !32
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %22) #2, !dbg !32
  %163 = getelementptr float, ptr addrspace(1) %4, i64 %131, !dbg !33
  %164 = getelementptr float, ptr addrspace(1) %4, i64 %133, !dbg !33
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %21) #2, !dbg !34
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %21) #2, !dbg !34
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %21) #2, !dbg !34
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %21) #2, !dbg !34
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %22) #2, !dbg !34
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %22) #2, !dbg !34
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %22) #2, !dbg !34
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %22) #2, !dbg !34
  %173 = insertelement <8 x i32> poison, i32 %130, i64 0, !dbg !26
  %174 = insertelement <8 x i32> %173, i32 %129, i64 1, !dbg !26
  %175 = insertelement <8 x i32> %174, i32 %128, i64 2, !dbg !26
  %176 = insertelement <8 x i32> %175, i32 %127, i64 3, !dbg !26
  %177 = insertelement <8 x i32> %176, i32 %126, i64 4, !dbg !26
  %178 = insertelement <8 x i32> %177, i32 %125, i64 5, !dbg !26
  %179 = insertelement <8 x i32> %178, i32 %124, i64 6, !dbg !26
  %180 = insertelement <8 x i32> %179, i32 %123, i64 7, !dbg !26
  %181 = bitcast <8 x i32> %180 to <8 x float>, !dbg !26
  %182 = insertelement <8 x i32> poison, i32 %142, i64 0, !dbg !28
  %183 = insertelement <8 x i32> %182, i32 %141, i64 1, !dbg !28
  %184 = insertelement <8 x i32> %183, i32 %140, i64 2, !dbg !28
  %185 = insertelement <8 x i32> %184, i32 %139, i64 3, !dbg !28
  %186 = insertelement <8 x i32> %185, i32 %138, i64 4, !dbg !28
  %187 = insertelement <8 x i32> %186, i32 %137, i64 5, !dbg !28
  %188 = insertelement <8 x i32> %187, i32 %136, i64 6, !dbg !28
  %189 = insertelement <8 x i32> %188, i32 %135, i64 7, !dbg !28
  %190 = bitcast <8 x i32> %189 to <8 x float>, !dbg !28
  %191 = insertelement <8 x i32> poison, i32 %152, i64 0, !dbg !30
  %192 = insertelement <8 x i32> %191, i32 %151, i64 1, !dbg !30
  %193 = insertelement <8 x i32> %192, i32 %150, i64 2, !dbg !30
  %194 = insertelement <8 x i32> %193, i32 %149, i64 3, !dbg !30
  %195 = insertelement <8 x i32> %194, i32 %148, i64 4, !dbg !30
  %196 = insertelement <8 x i32> %195, i32 %147, i64 5, !dbg !30
  %197 = insertelement <8 x i32> %196, i32 %146, i64 6, !dbg !30
  %198 = insertelement <8 x i32> %197, i32 %145, i64 7, !dbg !30
  %199 = bitcast <8 x i32> %198 to <8 x float>, !dbg !30
  %200 = insertelement <8 x i32> poison, i32 %162, i64 0, !dbg !32
  %201 = insertelement <8 x i32> %200, i32 %161, i64 1, !dbg !32
  %202 = insertelement <8 x i32> %201, i32 %160, i64 2, !dbg !32
  %203 = insertelement <8 x i32> %202, i32 %159, i64 3, !dbg !32
  %204 = insertelement <8 x i32> %203, i32 %158, i64 4, !dbg !32
  %205 = insertelement <8 x i32> %204, i32 %157, i64 5, !dbg !32
  %206 = insertelement <8 x i32> %205, i32 %156, i64 6, !dbg !32
  %207 = insertelement <8 x i32> %206, i32 %155, i64 7, !dbg !32
  %208 = bitcast <8 x i32> %207 to <8 x float>, !dbg !32
  %209 = insertelement <8 x i32> poison, i32 %172, i64 0, !dbg !34
  %210 = insertelement <8 x i32> %209, i32 %171, i64 1, !dbg !34
  %211 = insertelement <8 x i32> %210, i32 %170, i64 2, !dbg !34
  %212 = insertelement <8 x i32> %211, i32 %169, i64 3, !dbg !34
  %213 = insertelement <8 x i32> %212, i32 %168, i64 4, !dbg !34
  %214 = insertelement <8 x i32> %213, i32 %167, i64 5, !dbg !34
  %215 = insertelement <8 x i32> %214, i32 %166, i64 6, !dbg !34
  %216 = insertelement <8 x i32> %215, i32 %165, i64 7, !dbg !34
  %217 = bitcast <8 x i32> %216 to <8 x float>, !dbg !34
  %218 = fsub <8 x float> %181, %190, !dbg !35
  %219 = fmul <8 x float> %218, %199, !dbg !36
  %220 = fmul <8 x float> %219, %208, !dbg !37
  %221 = fadd <8 x float> %220, %217, !dbg !38
  %222 = fcmp olt <8 x float> %221, zeroinitializer, !dbg !39
  %223 = extractelement <8 x i1> %222, i64 7, !dbg !43
  %224 = extractelement <8 x i1> %222, i64 6, !dbg !43
  %225 = extractelement <8 x i1> %222, i64 5, !dbg !43
  %226 = extractelement <8 x i1> %222, i64 4, !dbg !43
  %227 = extractelement <8 x i1> %222, i64 3, !dbg !43
  %228 = extractelement <8 x i1> %222, i64 2, !dbg !43
  %229 = extractelement <8 x i1> %222, i64 1, !dbg !43
  %230 = extractelement <8 x i1> %222, i64 0, !dbg !43
  %231 = sext i32 %13 to i64, !dbg !44
  %232 = getelementptr float, ptr addrspace(1) %5, i64 %231, !dbg !44
  %233 = sext i32 %17 to i64, !dbg !44
  %234 = getelementptr float, ptr addrspace(1) %5, i64 %233, !dbg !44
  %bc = bitcast <8 x float> %221 to <8 x i32>, !dbg !45
  %235 = extractelement <8 x i32> %bc, i64 7, !dbg !45
  %236 = select i1 %223, i32 0, i32 %235, !dbg !43
  %bc15 = bitcast <8 x float> %221 to <8 x i32>, !dbg !45
  %237 = extractelement <8 x i32> %bc15, i64 6, !dbg !45
  %238 = select i1 %224, i32 0, i32 %237, !dbg !43
  %bc16 = bitcast <8 x float> %221 to <8 x i32>, !dbg !45
  %239 = extractelement <8 x i32> %bc16, i64 5, !dbg !45
  %240 = select i1 %225, i32 0, i32 %239, !dbg !43
  %bc17 = bitcast <8 x float> %221 to <8 x i32>, !dbg !45
  %241 = extractelement <8 x i32> %bc17, i64 4, !dbg !45
  %242 = select i1 %226, i32 0, i32 %241, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %236, i32 %238, i32 %240, i32 %242, ptr addrspace(1) %232, i1 %21) #2, !dbg !45
  %bc18 = bitcast <8 x float> %221 to <8 x i32>, !dbg !45
  %243 = extractelement <8 x i32> %bc18, i64 3, !dbg !45
  %244 = select i1 %227, i32 0, i32 %243, !dbg !43
  %bc19 = bitcast <8 x float> %221 to <8 x i32>, !dbg !45
  %245 = extractelement <8 x i32> %bc19, i64 2, !dbg !45
  %246 = select i1 %228, i32 0, i32 %245, !dbg !43
  %bc20 = bitcast <8 x float> %221 to <8 x i32>, !dbg !45
  %247 = extractelement <8 x i32> %bc20, i64 1, !dbg !45
  %248 = select i1 %229, i32 0, i32 %247, !dbg !43
  %bc21 = bitcast <8 x float> %221 to <8 x i32>, !dbg !45
  %249 = extractelement <8 x i32> %bc21, i64 0, !dbg !45
  %250 = select i1 %230, i32 0, i32 %249, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %244, i32 %246, i32 %248, i32 %250, ptr addrspace(1) %234, i1 %22) #2, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x i32> @llvm.abs.v2i32(<2 x i32>, i1 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cn4koykwzxk2zxyp2uuxzvvqbprqvo6bshktjowzymj3uq2oiagm.py", directory: "inductor_cache/n4")
!4 = !{ptr @triton_poi_fused_reflection_pad2d_relu_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_reflection_pad2d_relu_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_reflection_pad2d_relu_3", linkageName: "triton_poi_fused_reflection_pad2d_relu_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 82, scope: !7)
!19 = !DILocation(line: 28, column: 75, scope: !7)
!20 = !DILocation(line: 28, column: 63, scope: !7)
!21 = !DILocation(line: 28, column: 55, scope: !7)
!22 = !DILocation(line: 28, column: 149, scope: !7)
!23 = !DILocation(line: 28, column: 91, scope: !7)
!24 = !DILocation(line: 28, column: 144, scope: !7)
!25 = !DILocation(line: 28, column: 30, scope: !7)
!26 = !DILocation(line: 28, column: 154, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 35, scope: !7)
!29 = !DILocation(line: 30, column: 30, scope: !7)
!30 = !DILocation(line: 30, column: 35, scope: !7)
!31 = !DILocation(line: 31, column: 30, scope: !7)
!32 = !DILocation(line: 31, column: 35, scope: !7)
!33 = !DILocation(line: 32, column: 30, scope: !7)
!34 = !DILocation(line: 32, column: 35, scope: !7)
!35 = !DILocation(line: 33, column: 18, scope: !7)
!36 = !DILocation(line: 34, column: 18, scope: !7)
!37 = !DILocation(line: 35, column: 18, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 38, column: 41, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 39, column: 25, scope: !7)
!45 = !DILocation(line: 39, column: 37, scope: !7)
!46 = !DILocation(line: 39, column: 4, scope: !7)
