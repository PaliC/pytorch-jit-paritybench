; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_add_convolution_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = and i32 %9, 31, !dbg !11
  %11 = lshr i32 %9, 5, !dbg !11
  %12 = shl i32 %9, 2, !dbg !11
  %13 = and i32 %12, 252, !dbg !11
  %14 = srem i32 %8, 256, !dbg !12
  %15 = shl i32 %8, 8, !dbg !13
  %16 = or disjoint i32 %15, %13, !dbg !14
  %17 = sext i32 %16 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #5, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !16
  %24 = bitcast i32 %20 to float, !dbg !16
  %25 = bitcast i32 %21 to float, !dbg !16
  %26 = bitcast i32 %22 to float, !dbg !16
  %27 = bitcast i32 %23 to float, !dbg !16
  %28 = sext i32 %14 to i64, !dbg !17
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !17
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !18
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !18
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !18
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !18
  %34 = bitcast i32 %33 to float, !dbg !18
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !19
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !20
  %37 = fadd float %24, %34, !dbg !21
  %38 = fadd float %25, %34, !dbg !21
  %39 = fadd float %26, %34, !dbg !21
  %40 = fadd float %27, %34, !dbg !21
  %41 = fadd float %37, %38, !dbg !22
  %42 = fadd float %39, %41, !dbg !22
  %43 = fadd float %40, %42, !dbg !22
  %44 = bitcast float %43 to i32, !dbg !27
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 16, i32 31), !dbg !27
  %46 = bitcast i32 %45 to float, !dbg !27
  %47 = fadd float %43, %46, !dbg !22
  %48 = bitcast float %47 to i32, !dbg !27
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 8, i32 31), !dbg !27
  %50 = bitcast i32 %49 to float, !dbg !27
  %51 = fadd float %47, %50, !dbg !22
  %52 = bitcast float %51 to i32, !dbg !27
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 4, i32 31), !dbg !27
  %54 = bitcast i32 %53 to float, !dbg !27
  %55 = fadd float %51, %54, !dbg !22
  %56 = bitcast float %55 to i32, !dbg !27
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 2, i32 31), !dbg !27
  %58 = bitcast i32 %57 to float, !dbg !27
  %59 = fadd float %55, %58, !dbg !22
  %60 = bitcast float %59 to i32, !dbg !27
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 1, i32 31), !dbg !27
  %62 = bitcast i32 %61 to float, !dbg !27
  %63 = fadd float %59, %62, !dbg !22
  %64 = icmp eq i32 %10, 0, !dbg !27
  %65 = and i32 %11, 1, !dbg !27
  %66 = zext nneg i32 %65 to i64, !dbg !27
  %67 = getelementptr float, ptr addrspace(3) @global_smem, i64 %66, !dbg !27
  %68 = bitcast float %63 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %68, i1 %64) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %69 = icmp slt i32 %9, 2, !dbg !27
  %70 = sext i32 %9 to i64, !dbg !27
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i64 %70, !dbg !27
  %72 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %71, i1 %69) #5, !dbg !27
  %73 = bitcast i32 %72 to float, !dbg !27
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 1, i32 31), !dbg !27
  %75 = bitcast i32 %74 to float, !dbg !27
  %76 = fadd float %73, %75, !dbg !22
  %77 = and i32 %9, 1, !dbg !27
  %78 = icmp eq i32 %77, 0, !dbg !27
  %79 = and i1 %69, %78, !dbg !27
  %80 = bitcast float %76 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %80, i1 %79) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %81 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !27
  %82 = fadd float %81, 0.000000e+00, !dbg !28
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float 2.560000e+02) #5, !dbg !32
  %84 = fsub float %37, %83, !dbg !33
  %85 = fsub float %38, %83, !dbg !33
  %86 = fsub float %39, %83, !dbg !33
  %87 = fsub float %40, %83, !dbg !33
  %88 = fmul float %84, %84, !dbg !34
  %89 = fmul float %85, %85, !dbg !34
  %90 = fmul float %86, %86, !dbg !34
  %91 = fmul float %87, %87, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %92 = fadd float %88, %89, !dbg !37
  %93 = fadd float %90, %92, !dbg !37
  %94 = fadd float %91, %93, !dbg !37
  %95 = bitcast float %94 to i32, !dbg !35
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 16, i32 31), !dbg !35
  %97 = bitcast i32 %96 to float, !dbg !35
  %98 = fadd float %94, %97, !dbg !37
  %99 = bitcast float %98 to i32, !dbg !35
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 8, i32 31), !dbg !35
  %101 = bitcast i32 %100 to float, !dbg !35
  %102 = fadd float %98, %101, !dbg !37
  %103 = bitcast float %102 to i32, !dbg !35
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 4, i32 31), !dbg !35
  %105 = bitcast i32 %104 to float, !dbg !35
  %106 = fadd float %102, %105, !dbg !37
  %107 = bitcast float %106 to i32, !dbg !35
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 2, i32 31), !dbg !35
  %109 = bitcast i32 %108 to float, !dbg !35
  %110 = fadd float %106, %109, !dbg !37
  %111 = bitcast float %110 to i32, !dbg !35
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 1, i32 31), !dbg !35
  %113 = bitcast i32 %112 to float, !dbg !35
  %114 = fadd float %110, %113, !dbg !37
  %115 = bitcast float %114 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %115, i1 %64) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %116 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %71, i1 %69) #5, !dbg !35
  %117 = bitcast i32 %116 to float, !dbg !35
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 1, i32 31), !dbg !35
  %119 = bitcast i32 %118 to float, !dbg !35
  %120 = fadd float %117, %119, !dbg !37
  %121 = bitcast float %120 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %121, i1 %79) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %122 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !35
  %123 = fadd float %122, 0.000000e+00, !dbg !38
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %123, float 2.560000e+02) #5, !dbg !40
  %125 = fadd float %124, 0x3EE4F8B580000000, !dbg !41
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i = icmp eq i32 %126, 0, !dbg !42
  br i1 %.not.i, label %129, label %127, !dbg !42

127:                                              ; preds = %7
  %128 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %125), !dbg !42
  br label %__nv_rsqrtf.exit, !dbg !42

129:                                              ; preds = %7
  %130 = tail call float @llvm.nvvm.rsqrt.approx.f(float %125), !dbg !42
  br label %__nv_rsqrtf.exit, !dbg !42

__nv_rsqrtf.exit:                                 ; preds = %127, %129
  %.0.i = phi float [ %128, %127 ], [ %130, %129 ], !dbg !42
  %131 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !20
  %132 = bitcast i32 %131 to float, !dbg !20
  %133 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !20
  %134 = bitcast i32 %133 to float, !dbg !20
  %135 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !20
  %136 = bitcast i32 %135 to float, !dbg !20
  %137 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !20
  %138 = bitcast i32 %137 to float, !dbg !20
  %139 = fmul float %84, %.0.i, !dbg !43
  %140 = fmul float %85, %.0.i, !dbg !43
  %141 = fmul float %86, %.0.i, !dbg !43
  %142 = fmul float %87, %.0.i, !dbg !43
  %143 = fadd float %139, %138, !dbg !44
  %144 = fadd float %140, %136, !dbg !44
  %145 = fadd float %141, %134, !dbg !44
  %146 = fadd float %142, %132, !dbg !44
  %147 = bitcast float %37 to i32, !dbg !45
  %148 = bitcast float %38 to i32, !dbg !45
  %149 = bitcast float %39 to i32, !dbg !45
  %150 = bitcast float %40 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %147, i32 %148, i32 %149, i32 %150, ptr addrspace(1) %18, i1 true) #5, !dbg !45
  %151 = bitcast float %143 to i32, !dbg !46
  %152 = bitcast float %144 to i32, !dbg !46
  %153 = bitcast float %145 to i32, !dbg !46
  %154 = bitcast float %146 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %151, i32 %152, i32 %153, i32 %154, ptr addrspace(1) %35, i1 true) #5, !dbg !46
  %155 = sext i32 %8 to i64, !dbg !47
  %156 = getelementptr float, ptr addrspace(1) %4, i64 %155, !dbg !47
  %urem = and i32 %9, 63, !dbg !48
  %157 = icmp eq i32 %urem, 0, !dbg !48
  %158 = bitcast float %.0.i to i32, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %158, ptr addrspace(1) %156, i1 %157) #5, !dbg !48
  %159 = getelementptr float, ptr addrspace(1) %3, i64 %155, !dbg !49
  %160 = bitcast float %83 to i32, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %160, ptr addrspace(1) %159, i1 %157) #5, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxyah6zjvm3n3g6lgzux7l47iaoo6szjbc4lqxsrzo6hsvyn23s3.py", directory: "inductor_cache/xy")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_13, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_13, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_add_convolution_13", linkageName: "triton_per_fused__native_batch_norm_legit_add_convolution_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 19, scope: !7)
!13 = !DILocation(line: 33, column: 43, scope: !7)
!14 = !DILocation(line: 33, column: 39, scope: !7)
!15 = !DILocation(line: 33, column: 34, scope: !7)
!16 = !DILocation(line: 33, column: 48, scope: !7)
!17 = !DILocation(line: 34, column: 30, scope: !7)
!18 = !DILocation(line: 34, column: 35, scope: !7)
!19 = !DILocation(line: 35, column: 35, scope: !7)
!20 = !DILocation(line: 35, column: 49, scope: !7)
!21 = !DILocation(line: 36, column: 18, scope: !7)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !26)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!26 = !DILocation(line: 39, column: 57, scope: !7)
!27 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !26)
!28 = !DILocation(line: 73, column: 15, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 39, column: 44, scope: !7)
!32 = !DILocation(line: 42, column: 19, scope: !7)
!33 = !DILocation(line: 43, column: 19, scope: !7)
!34 = !DILocation(line: 44, column: 20, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !36)
!36 = !DILocation(line: 46, column: 59, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !36)
!38 = !DILocation(line: 73, column: 15, scope: !29, inlinedAt: !39)
!39 = !DILocation(line: 46, column: 45, scope: !7)
!40 = !DILocation(line: 49, column: 20, scope: !7)
!41 = !DILocation(line: 51, column: 20, scope: !7)
!42 = !DILocation(line: 52, column: 28, scope: !7)
!43 = !DILocation(line: 53, column: 20, scope: !7)
!44 = !DILocation(line: 54, column: 20, scope: !7)
!45 = !DILocation(line: 55, column: 48, scope: !7)
!46 = !DILocation(line: 56, column: 49, scope: !7)
!47 = !DILocation(line: 57, column: 25, scope: !7)
!48 = !DILocation(line: 57, column: 37, scope: !7)
!49 = !DILocation(line: 58, column: 25, scope: !7)
!50 = !DILocation(line: 58, column: 37, scope: !7)
!51 = !DILocation(line: 58, column: 4, scope: !7)
