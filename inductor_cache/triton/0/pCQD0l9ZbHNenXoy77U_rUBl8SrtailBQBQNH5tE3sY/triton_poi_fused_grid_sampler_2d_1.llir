; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_7 = internal constant [8 x i8] c"unknown\00"
@assertFile_7 = internal constant [74 x i8] c"inductor_cache/r7/cr73h5yd2infalhxg5wygdomfaoa6o4exozrhass7nuhcf53huik.py\00"
@assertMessage_7 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp95 < 4\00"
@assertFunc_6 = internal constant [8 x i8] c"unknown\00"
@assertFile_6 = internal constant [74 x i8] c"inductor_cache/r7/cr73h5yd2infalhxg5wygdomfaoa6o4exozrhass7nuhcf53huik.py\00"
@assertMessage_6 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp90 < 4\00"
@assertFunc_5 = internal constant [8 x i8] c"unknown\00"
@assertFile_5 = internal constant [74 x i8] c"inductor_cache/r7/cr73h5yd2infalhxg5wygdomfaoa6o4exozrhass7nuhcf53huik.py\00"
@assertMessage_5 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp82 < 4\00"
@assertFunc_4 = internal constant [8 x i8] c"unknown\00"
@assertFile_4 = internal constant [74 x i8] c"inductor_cache/r7/cr73h5yd2infalhxg5wygdomfaoa6o4exozrhass7nuhcf53huik.py\00"
@assertMessage_4 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp77 < 4\00"
@assertFunc_3 = internal constant [8 x i8] c"unknown\00"
@assertFile_3 = internal constant [74 x i8] c"inductor_cache/r7/cr73h5yd2infalhxg5wygdomfaoa6o4exozrhass7nuhcf53huik.py\00"
@assertMessage_3 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp70 < 4\00"
@assertFunc_2 = internal constant [8 x i8] c"unknown\00"
@assertFile_2 = internal constant [74 x i8] c"inductor_cache/r7/cr73h5yd2infalhxg5wygdomfaoa6o4exozrhass7nuhcf53huik.py\00"
@assertMessage_2 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp64 < 4\00"
@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [74 x i8] c"inductor_cache/r7/cr73h5yd2infalhxg5wygdomfaoa6o4exozrhass7nuhcf53huik.py\00"
@assertMessage_1 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp58 < 4\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/r7/cr73h5yd2infalhxg5wygdomfaoa6o4exozrhass7nuhcf53huik.py\00"
@assertMessage_0 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp52 < 4\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_grid_sampler_2d_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !11 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %6 = shl i32 %5, 8, !dbg !13
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %8 = shl i32 %7, 1, !dbg !14
  %9 = and i32 %8, 254, !dbg !14
  %10 = or disjoint i32 %6, %9, !dbg !15
  %11 = or disjoint i32 %10, 1, !dbg !15
  %12 = icmp slt i32 %10, 256, !dbg !16
  %.frozen = freeze i32 %10, !dbg !17
  %13 = sdiv i32 %.frozen, 16, !dbg !17
  %14 = mul i32 %13, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %14, !dbg !18
  %15 = srem i32 %11, 16, !dbg !18
  %16 = sdiv i32 %10, 64, !dbg !19
  %17 = shl nsw i32 %.decomposed, 1, !dbg !20
  %18 = shl nsw i32 %15, 1, !dbg !20
  %19 = shl nsw i32 %16, 5, !dbg !21
  %20 = add nsw i32 %17, %19, !dbg !22
  %21 = add nsw i32 %19, %18, !dbg !22
  %22 = sext i32 %20 to i64, !dbg !23
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !23
  %24 = sext i32 %21 to i64, !dbg !23
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !23
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %12) #4, !dbg !24
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %12) #4, !dbg !24
  %28 = or disjoint i32 %17, 1, !dbg !25
  %29 = or disjoint i32 %18, 1, !dbg !25
  %30 = add nsw i32 %28, %19, !dbg !26
  %31 = add nsw i32 %29, %19, !dbg !26
  %32 = sext i32 %30 to i64, !dbg !27
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !27
  %34 = sext i32 %31 to i64, !dbg !27
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !27
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %12) #4, !dbg !28
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %12) #4, !dbg !28
  %38 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %39 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %41 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !28
  %42 = insertelement <2 x i32> %41, i32 %26, i64 1, !dbg !28
  %43 = bitcast <2 x i32> %42 to <2 x float>, !dbg !28
  %44 = fmul <2 x float> %43, splat (float 2.000000e+00), !dbg !31
  %45 = fadd <2 x float> %44, splat (float 1.500000e+00), !dbg !32
  %46 = fcmp ole <2 x float> %45, zeroinitializer, !dbg !33
  %47 = select <2 x i1> %46, <2 x float> zeroinitializer, <2 x float> %45, !dbg !33
  %48 = fcmp olt <2 x float> %47, splat (float 3.000000e+00), !dbg !37
  %49 = fcmp uno <2 x float> %47, zeroinitializer, !dbg !39
  %50 = or <2 x i1> %48, %49, !dbg !40
  %51 = select <2 x i1> %50, <2 x float> %47, <2 x float> splat (float 3.000000e+00), !dbg !41
  %52 = extractelement <2 x float> %51, i64 1, !dbg !41
  %53 = tail call float @llvm.nvvm.floor.ftz.f(float %52), !dbg !29
  %54 = tail call float @llvm.nvvm.floor.f(float %52), !dbg !29
  %55 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !30
  %56 = insertelement <2 x i32> %55, i32 %38, i64 1, !dbg !30
  %57 = icmp eq <2 x i32> %56, zeroinitializer, !dbg !30
  %58 = extractelement <2 x float> %51, i64 0, !dbg !30
  %59 = tail call float @llvm.nvvm.floor.ftz.f(float %58), !dbg !30
  %60 = tail call float @llvm.nvvm.floor.f(float %58), !dbg !30
  %61 = insertelement <2 x float> poison, float %60, i64 0, !dbg !30
  %62 = insertelement <2 x float> %61, float %54, i64 1, !dbg !30
  %63 = insertelement <2 x float> poison, float %59, i64 0, !dbg !30
  %64 = insertelement <2 x float> %63, float %53, i64 1, !dbg !30
  %65 = select <2 x i1> %57, <2 x float> %62, <2 x float> %64, !dbg !30
  %66 = extractelement <2 x float> %65, i64 1, !dbg !30
  %67 = fcmp oge float %66, 0.000000e+00, !dbg !42
  %68 = fcmp olt float %66, 4.000000e+00, !dbg !43
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %70 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !28
  %71 = insertelement <2 x i32> %70, i32 %27, i64 1, !dbg !28
  %72 = bitcast <2 x i32> %71 to <2 x float>, !dbg !28
  %73 = fmul <2 x float> %72, splat (float 2.000000e+00), !dbg !31
  %74 = fadd <2 x float> %73, splat (float 1.500000e+00), !dbg !32
  %75 = fcmp ole <2 x float> %74, zeroinitializer, !dbg !33
  %76 = select <2 x i1> %75, <2 x float> zeroinitializer, <2 x float> %74, !dbg !33
  %77 = fcmp olt <2 x float> %76, splat (float 3.000000e+00), !dbg !37
  %78 = fcmp uno <2 x float> %76, zeroinitializer, !dbg !39
  %79 = or <2 x i1> %77, %78, !dbg !40
  %80 = select <2 x i1> %79, <2 x float> %76, <2 x float> splat (float 3.000000e+00), !dbg !41
  %81 = extractelement <2 x float> %80, i64 1, !dbg !41
  %82 = tail call float @llvm.nvvm.floor.ftz.f(float %81), !dbg !29
  %83 = tail call float @llvm.nvvm.floor.f(float %81), !dbg !29
  %84 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !30
  %85 = insertelement <2 x i32> %84, i32 %39, i64 1, !dbg !30
  %86 = icmp eq <2 x i32> %85, zeroinitializer, !dbg !30
  %87 = extractelement <2 x float> %80, i64 0, !dbg !30
  %88 = tail call float @llvm.nvvm.floor.ftz.f(float %87), !dbg !30
  %89 = tail call float @llvm.nvvm.floor.f(float %87), !dbg !30
  %90 = insertelement <2 x float> poison, float %89, i64 0, !dbg !30
  %91 = insertelement <2 x float> %90, float %83, i64 1, !dbg !30
  %92 = insertelement <2 x float> poison, float %88, i64 0, !dbg !30
  %93 = insertelement <2 x float> %92, float %82, i64 1, !dbg !30
  %94 = select <2 x i1> %86, <2 x float> %91, <2 x float> %93, !dbg !30
  %95 = extractelement <2 x float> %94, i64 1, !dbg !30
  %96 = fcmp oge float %95, 0.000000e+00, !dbg !42
  %97 = fcmp olt float %95, 4.000000e+00, !dbg !43
  %98 = extractelement <2 x float> %65, i64 0, !dbg !44
  %99 = fcmp oge float %98, 0.000000e+00, !dbg !44
  %100 = extractelement <2 x float> %94, i64 0, !dbg !44
  %101 = fcmp oge float %100, 0.000000e+00, !dbg !44
  %102 = fcmp olt float %98, 4.000000e+00, !dbg !45
  %103 = fcmp olt float %100, 4.000000e+00, !dbg !45
  %104 = and i1 %99, %102, !dbg !46
  %105 = and i1 %101, %103, !dbg !46
  %106 = and i1 %68, %104, !dbg !47
  %107 = and i1 %97, %105, !dbg !47
  %108 = and i1 %67, %106, !dbg !48
  %109 = and i1 %96, %107, !dbg !48
  %110 = fadd float %66, 1.000000e+00, !dbg !49
  %111 = fadd float %95, 1.000000e+00, !dbg !49
  %112 = fadd float %98, 1.000000e+00, !dbg !50
  %113 = fadd float %100, 1.000000e+00, !dbg !50
  %114 = fcmp oge float %110, 0.000000e+00, !dbg !51
  %115 = fcmp oge float %111, 0.000000e+00, !dbg !51
  %116 = fcmp olt float %110, 4.000000e+00, !dbg !52
  %117 = fcmp olt float %111, 4.000000e+00, !dbg !52
  %118 = and i1 %116, %104, !dbg !53
  %119 = and i1 %117, %105, !dbg !53
  %120 = and i1 %114, %118, !dbg !54
  %121 = and i1 %115, %119, !dbg !54
  %122 = fcmp oge float %112, 0.000000e+00, !dbg !55
  %123 = fcmp oge float %113, 0.000000e+00, !dbg !55
  %124 = fcmp olt float %112, 4.000000e+00, !dbg !56
  %125 = fcmp olt float %113, 4.000000e+00, !dbg !56
  %126 = and i1 %122, %124, !dbg !57
  %127 = and i1 %123, %125, !dbg !57
  %128 = and i1 %68, %126, !dbg !58
  %129 = and i1 %97, %127, !dbg !58
  %130 = and i1 %67, %128, !dbg !59
  %131 = and i1 %96, %129, !dbg !59
  %132 = fptosi float %98 to i64, !dbg !60
  %133 = fptosi float %100 to i64, !dbg !60
  %134 = select i1 %108, i64 %132, i64 0, !dbg !61
  %135 = select i1 %109, i64 %133, i64 0, !dbg !61
  %136 = lshr i64 %134, 61, !dbg !62
  %137 = and i64 %136, 4, !dbg !62
  %138 = add i64 %137, %134, !dbg !62
  %139 = lshr i64 %135, 61, !dbg !62
  %140 = and i64 %139, 4, !dbg !62
  %141 = add i64 %140, %135, !dbg !62
  %142 = or i64 %141, %138, !dbg !63
  %.not46 = icmp ugt i64 %142, 3, !dbg !63
  %143 = and i1 %12, %.not46, !dbg !63
  br i1 %143, label %144, label %145, !dbg !63

144:                                              ; preds = %4
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 81, ptr nonnull @assertFunc_0, i64 1), !dbg !63
  unreachable, !dbg !63

145:                                              ; preds = %4
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %146 = fptosi float %66 to i64, !dbg !64
  %147 = fptosi float %95 to i64, !dbg !64
  %148 = select i1 %108, i64 %146, i64 0, !dbg !65
  %149 = select i1 %109, i64 %147, i64 0, !dbg !65
  %150 = lshr i64 %148, 61, !dbg !66
  %151 = and i64 %150, 4, !dbg !66
  %152 = add i64 %151, %148, !dbg !66
  %153 = lshr i64 %149, 61, !dbg !66
  %154 = and i64 %153, 4, !dbg !66
  %155 = add i64 %154, %149, !dbg !66
  %156 = or i64 %155, %152, !dbg !67
  %.not79 = icmp ugt i64 %156, 3, !dbg !67
  %157 = and i1 %12, %.not79, !dbg !67
  br i1 %157, label %158, label %159, !dbg !67

158:                                              ; preds = %145
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 87, ptr nonnull @assertFunc_1, i64 1), !dbg !67
  unreachable, !dbg !67

159:                                              ; preds = %145
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %160 = shl nsw i32 %13, 4, !dbg !68
  %161 = sext i32 %160 to i64, !dbg !69
  %162 = getelementptr float, ptr addrspace(1) %2, i64 %152, !dbg !70
  %.idx = shl i64 %138, 4, !dbg !70
  %163 = getelementptr i8, ptr addrspace(1) %162, i64 %.idx, !dbg !70
  %164 = getelementptr float, ptr addrspace(1) %163, i64 %161, !dbg !70
  %165 = getelementptr float, ptr addrspace(1) %2, i64 %155, !dbg !70
  %.idx10 = shl i64 %141, 4, !dbg !70
  %166 = getelementptr i8, ptr addrspace(1) %165, i64 %.idx10, !dbg !70
  %167 = getelementptr float, ptr addrspace(1) %166, i64 %161, !dbg !70
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %12) #4, !dbg !71
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 %12) #4, !dbg !71
  %170 = select i1 %120, i64 %132, i64 0, !dbg !72
  %171 = select i1 %121, i64 %133, i64 0, !dbg !72
  %172 = lshr i64 %170, 61, !dbg !73
  %173 = and i64 %172, 4, !dbg !73
  %174 = add i64 %173, %170, !dbg !73
  %175 = lshr i64 %171, 61, !dbg !73
  %176 = and i64 %175, 4, !dbg !73
  %177 = add i64 %176, %171, !dbg !73
  %178 = or i64 %177, %174, !dbg !74
  %.not1113 = icmp ugt i64 %178, 3, !dbg !74
  %179 = and i1 %12, %.not1113, !dbg !74
  br i1 %179, label %180, label %181, !dbg !74

180:                                              ; preds = %159
  tail call void @__assertfail(ptr nonnull @assertMessage_2, ptr nonnull @assertFile_2, i32 93, ptr nonnull @assertFunc_2, i64 1), !dbg !74
  unreachable, !dbg !74

181:                                              ; preds = %159
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %182 = fptosi float %110 to i64, !dbg !75
  %183 = fptosi float %111 to i64, !dbg !75
  %184 = select i1 %120, i64 %182, i64 0, !dbg !76
  %185 = select i1 %121, i64 %183, i64 0, !dbg !76
  %186 = lshr i64 %184, 61, !dbg !77
  %187 = and i64 %186, 4, !dbg !77
  %188 = add i64 %187, %184, !dbg !77
  %189 = lshr i64 %185, 61, !dbg !77
  %190 = and i64 %189, 4, !dbg !77
  %191 = add i64 %190, %185, !dbg !77
  %192 = or i64 %191, %188, !dbg !78
  %.not1416 = icmp ugt i64 %192, 3, !dbg !78
  %193 = and i1 %12, %.not1416, !dbg !78
  br i1 %193, label %194, label %195, !dbg !78

194:                                              ; preds = %181
  tail call void @__assertfail(ptr nonnull @assertMessage_3, ptr nonnull @assertFile_3, i32 99, ptr nonnull @assertFunc_3, i64 1), !dbg !78
  unreachable, !dbg !78

195:                                              ; preds = %181
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %196 = getelementptr float, ptr addrspace(1) %2, i64 %188, !dbg !79
  %.idx17 = shl i64 %174, 4, !dbg !79
  %197 = getelementptr i8, ptr addrspace(1) %196, i64 %.idx17, !dbg !79
  %198 = getelementptr float, ptr addrspace(1) %197, i64 %161, !dbg !79
  %199 = getelementptr float, ptr addrspace(1) %2, i64 %191, !dbg !79
  %.idx18 = shl i64 %177, 4, !dbg !79
  %200 = getelementptr i8, ptr addrspace(1) %199, i64 %.idx18, !dbg !79
  %201 = getelementptr float, ptr addrspace(1) %200, i64 %161, !dbg !79
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %198, i1 %12) #4, !dbg !80
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 %12) #4, !dbg !80
  %204 = fptosi float %112 to i64, !dbg !81
  %205 = fptosi float %113 to i64, !dbg !81
  %206 = select i1 %130, i64 %204, i64 0, !dbg !82
  %207 = select i1 %131, i64 %205, i64 0, !dbg !82
  %208 = lshr i64 %206, 61, !dbg !83
  %209 = and i64 %208, 4, !dbg !83
  %210 = add i64 %209, %206, !dbg !83
  %211 = lshr i64 %207, 61, !dbg !83
  %212 = and i64 %211, 4, !dbg !83
  %213 = add i64 %212, %207, !dbg !83
  %214 = or i64 %213, %210, !dbg !84
  %.not1921 = icmp ugt i64 %214, 3, !dbg !84
  %215 = and i1 %12, %.not1921, !dbg !84
  br i1 %215, label %216, label %217, !dbg !84

216:                                              ; preds = %195
  tail call void @__assertfail(ptr nonnull @assertMessage_4, ptr nonnull @assertFile_4, i32 106, ptr nonnull @assertFunc_4, i64 1), !dbg !84
  unreachable, !dbg !84

217:                                              ; preds = %195
  tail call void @llvm.nvvm.barrier0(), !dbg !84
  %218 = select i1 %130, i64 %146, i64 0, !dbg !85
  %219 = select i1 %131, i64 %147, i64 0, !dbg !85
  %220 = lshr i64 %218, 61, !dbg !86
  %221 = and i64 %220, 4, !dbg !86
  %222 = add i64 %221, %218, !dbg !86
  %223 = lshr i64 %219, 61, !dbg !86
  %224 = and i64 %223, 4, !dbg !86
  %225 = add i64 %224, %219, !dbg !86
  %226 = or i64 %225, %222, !dbg !87
  %.not2224 = icmp ugt i64 %226, 3, !dbg !87
  %227 = and i1 %12, %.not2224, !dbg !87
  br i1 %227, label %228, label %229, !dbg !87

228:                                              ; preds = %217
  tail call void @__assertfail(ptr nonnull @assertMessage_5, ptr nonnull @assertFile_5, i32 111, ptr nonnull @assertFunc_5, i64 1), !dbg !87
  unreachable, !dbg !87

229:                                              ; preds = %217
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  %230 = getelementptr float, ptr addrspace(1) %2, i64 %222, !dbg !88
  %.idx25 = shl i64 %210, 4, !dbg !88
  %231 = getelementptr i8, ptr addrspace(1) %230, i64 %.idx25, !dbg !88
  %232 = getelementptr float, ptr addrspace(1) %231, i64 %161, !dbg !88
  %233 = getelementptr float, ptr addrspace(1) %2, i64 %225, !dbg !88
  %.idx26 = shl i64 %213, 4, !dbg !88
  %234 = getelementptr i8, ptr addrspace(1) %233, i64 %.idx26, !dbg !88
  %235 = getelementptr float, ptr addrspace(1) %234, i64 %161, !dbg !88
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 %12) #4, !dbg !89
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %235, i1 %12) #4, !dbg !89
  %238 = and i1 %116, %126, !dbg !90
  %239 = and i1 %117, %127, !dbg !90
  %240 = and i1 %114, %238, !dbg !91
  %241 = and i1 %115, %239, !dbg !91
  %242 = select i1 %240, i64 %204, i64 0, !dbg !92
  %243 = select i1 %241, i64 %205, i64 0, !dbg !92
  %244 = lshr i64 %242, 61, !dbg !93
  %245 = and i64 %244, 4, !dbg !93
  %246 = add i64 %245, %242, !dbg !93
  %247 = lshr i64 %243, 61, !dbg !93
  %248 = and i64 %247, 4, !dbg !93
  %249 = add i64 %248, %243, !dbg !93
  %250 = or i64 %249, %246, !dbg !94
  %.not2729 = icmp ugt i64 %250, 3, !dbg !94
  %251 = and i1 %12, %.not2729, !dbg !94
  br i1 %251, label %252, label %253, !dbg !94

252:                                              ; preds = %229
  tail call void @__assertfail(ptr nonnull @assertMessage_6, ptr nonnull @assertFile_6, i32 119, ptr nonnull @assertFunc_6, i64 1), !dbg !94
  unreachable, !dbg !94

253:                                              ; preds = %229
  tail call void @llvm.nvvm.barrier0(), !dbg !94
  %254 = select i1 %240, i64 %182, i64 0, !dbg !95
  %255 = select i1 %241, i64 %183, i64 0, !dbg !95
  %256 = lshr i64 %254, 61, !dbg !96
  %257 = and i64 %256, 4, !dbg !96
  %258 = add i64 %257, %254, !dbg !96
  %259 = lshr i64 %255, 61, !dbg !96
  %260 = and i64 %259, 4, !dbg !96
  %261 = add i64 %260, %255, !dbg !96
  %262 = or i64 %261, %258, !dbg !97
  %.not3032 = icmp ugt i64 %262, 3, !dbg !97
  %263 = and i1 %12, %.not3032, !dbg !97
  br i1 %263, label %264, label %265, !dbg !97

264:                                              ; preds = %253
  tail call void @__assertfail(ptr nonnull @assertMessage_7, ptr nonnull @assertFile_7, i32 124, ptr nonnull @assertFunc_7, i64 1), !dbg !97
  unreachable, !dbg !97

265:                                              ; preds = %253
  %266 = bitcast i32 %203 to float, !dbg !80
  %267 = bitcast i32 %202 to float, !dbg !80
  %268 = bitcast i32 %169 to float, !dbg !71
  %269 = bitcast i32 %168 to float, !dbg !71
  %270 = fsub float %111, %81, !dbg !98
  %271 = fsub <2 x float> %80, %94, !dbg !99
  %272 = fsub float %110, %52, !dbg !98
  %273 = fsub <2 x float> %51, %65, !dbg !99
  %274 = fsub float %81, %95, !dbg !100
  %275 = fsub float %113, %87, !dbg !101
  %276 = fmul float %274, %275, !dbg !102
  %277 = select i1 %121, float %276, float 0.000000e+00, !dbg !103
  %278 = fsub float %52, %66, !dbg !100
  %279 = fsub float %112, %58, !dbg !101
  %280 = fmul float %278, %279, !dbg !102
  %281 = select i1 %120, float %280, float 0.000000e+00, !dbg !103
  %282 = fmul float %270, %275, !dbg !104
  %283 = select i1 %109, float %282, float 0.000000e+00, !dbg !105
  %284 = fmul float %272, %279, !dbg !104
  %285 = select i1 %108, float %284, float 0.000000e+00, !dbg !105
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %286 = getelementptr float, ptr addrspace(1) %2, i64 %258, !dbg !106
  %.idx33 = shl i64 %246, 4, !dbg !106
  %287 = getelementptr i8, ptr addrspace(1) %286, i64 %.idx33, !dbg !106
  %288 = getelementptr float, ptr addrspace(1) %287, i64 %161, !dbg !106
  %289 = getelementptr float, ptr addrspace(1) %2, i64 %261, !dbg !106
  %.idx34 = shl i64 %249, 4, !dbg !106
  %290 = getelementptr i8, ptr addrspace(1) %289, i64 %.idx34, !dbg !106
  %291 = getelementptr float, ptr addrspace(1) %290, i64 %161, !dbg !106
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %288, i1 %12) #4, !dbg !107
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %291, i1 %12) #4, !dbg !107
  %294 = fmul float %285, %269, !dbg !108
  %295 = fmul float %283, %268, !dbg !108
  %296 = fmul float %281, %267, !dbg !109
  %297 = fmul float %277, %266, !dbg !109
  %298 = fadd float %294, %296, !dbg !110
  %299 = fadd float %295, %297, !dbg !110
  %300 = insertelement <2 x i32> poison, i32 %236, i64 0, !dbg !89
  %301 = insertelement <2 x i32> %300, i32 %292, i64 1, !dbg !89
  %302 = bitcast <2 x i32> %301 to <2 x float>, !dbg !89
  %303 = shufflevector <2 x float> %273, <2 x float> poison, <2 x i32> <i32 poison, i32 0>, !dbg !111
  %304 = insertelement <2 x float> %303, float %272, i64 0, !dbg !111
  %305 = fmul <2 x float> %273, %304, !dbg !111
  %306 = insertelement <2 x i1> poison, i1 %130, i64 0, !dbg !112
  %307 = insertelement <2 x i1> %306, i1 %240, i64 1, !dbg !112
  %308 = select <2 x i1> %307, <2 x float> %305, <2 x float> zeroinitializer, !dbg !112
  %309 = fmul <2 x float> %308, %302, !dbg !113
  %310 = extractelement <2 x float> %309, i64 0, !dbg !114
  %311 = fadd float %298, %310, !dbg !114
  %312 = insertelement <2 x i32> poison, i32 %237, i64 0, !dbg !89
  %313 = insertelement <2 x i32> %312, i32 %293, i64 1, !dbg !89
  %314 = bitcast <2 x i32> %313 to <2 x float>, !dbg !89
  %315 = shufflevector <2 x float> %271, <2 x float> poison, <2 x i32> <i32 poison, i32 0>, !dbg !111
  %316 = insertelement <2 x float> %315, float %270, i64 0, !dbg !111
  %317 = fmul <2 x float> %271, %316, !dbg !111
  %318 = insertelement <2 x i1> poison, i1 %131, i64 0, !dbg !112
  %319 = insertelement <2 x i1> %318, i1 %241, i64 1, !dbg !112
  %320 = select <2 x i1> %319, <2 x float> %317, <2 x float> zeroinitializer, !dbg !112
  %321 = fmul <2 x float> %320, %314, !dbg !113
  %322 = extractelement <2 x float> %321, i64 0, !dbg !114
  %323 = fadd float %299, %322, !dbg !114
  %324 = extractelement <2 x float> %309, i64 1, !dbg !115
  %325 = fadd float %311, %324, !dbg !115
  %326 = extractelement <2 x float> %321, i64 1, !dbg !115
  %327 = fadd float %323, %326, !dbg !115
  %328 = sext i32 %10 to i64, !dbg !116
  %329 = getelementptr float, ptr addrspace(1) %0, i64 %328, !dbg !116
  %330 = bitcast float %325 to i32, !dbg !117
  %331 = bitcast float %327 to i32, !dbg !117
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %330, i32 %331, ptr addrspace(1) %329, i1 %12) #4, !dbg !117
  ret void, !dbg !118
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #1

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr73h5yd2infalhxg5wygdomfaoa6o4exozrhass7nuhcf53huik.py", directory: "inductor_cache/r7")
!4 = !{ptr @triton_poi_fused_grid_sampler_2d_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_grid_sampler_2d_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_grid_sampler_2d_1", linkageName: "triton_poi_fused_grid_sampler_2d_1", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 23, column: 21, scope: !11)
!17 = !DILocation(line: 27, column: 19, scope: !11)
!18 = !DILocation(line: 24, column: 19, scope: !11)
!19 = !DILocation(line: 25, column: 19, scope: !11)
!20 = !DILocation(line: 28, column: 32, scope: !11)
!21 = !DILocation(line: 28, column: 40, scope: !11)
!22 = !DILocation(line: 28, column: 37, scope: !11)
!23 = !DILocation(line: 28, column: 30, scope: !11)
!24 = !DILocation(line: 28, column: 45, scope: !11)
!25 = !DILocation(line: 29, column: 35, scope: !11)
!26 = !DILocation(line: 29, column: 42, scope: !11)
!27 = !DILocation(line: 29, column: 31, scope: !11)
!28 = !DILocation(line: 29, column: 50, scope: !11)
!29 = !DILocation(line: 38, column: 27, scope: !11)
!30 = !DILocation(line: 46, column: 28, scope: !11)
!31 = !DILocation(line: 42, column: 20, scope: !11)
!32 = !DILocation(line: 43, column: 20, scope: !11)
!33 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !11, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 44, column: 42, scope: !11)
!37 = !DILocation(line: 110, column: 15, scope: !34, inlinedAt: !38)
!38 = !DILocation(line: 45, column: 42, scope: !11)
!39 = !DILocation(line: 112, column: 21, scope: !34, inlinedAt: !38)
!40 = !DILocation(line: 112, column: 16, scope: !34, inlinedAt: !38)
!41 = !DILocation(line: 113, column: 29, scope: !34, inlinedAt: !38)
!42 = !DILocation(line: 39, column: 20, scope: !11)
!43 = !DILocation(line: 41, column: 19, scope: !11)
!44 = !DILocation(line: 47, column: 21, scope: !11)
!45 = !DILocation(line: 48, column: 20, scope: !11)
!46 = !DILocation(line: 49, column: 20, scope: !11)
!47 = !DILocation(line: 50, column: 20, scope: !11)
!48 = !DILocation(line: 51, column: 20, scope: !11)
!49 = !DILocation(line: 53, column: 19, scope: !11)
!50 = !DILocation(line: 55, column: 20, scope: !11)
!51 = !DILocation(line: 59, column: 21, scope: !11)
!52 = !DILocation(line: 60, column: 20, scope: !11)
!53 = !DILocation(line: 61, column: 20, scope: !11)
!54 = !DILocation(line: 62, column: 20, scope: !11)
!55 = !DILocation(line: 66, column: 21, scope: !11)
!56 = !DILocation(line: 67, column: 20, scope: !11)
!57 = !DILocation(line: 68, column: 20, scope: !11)
!58 = !DILocation(line: 69, column: 20, scope: !11)
!59 = !DILocation(line: 70, column: 20, scope: !11)
!60 = !DILocation(line: 74, column: 21, scope: !11)
!61 = !DILocation(line: 76, column: 35, scope: !11)
!62 = !DILocation(line: 80, column: 35, scope: !11)
!63 = !DILocation(line: 81, column: 62, scope: !11)
!64 = !DILocation(line: 82, column: 20, scope: !11)
!65 = !DILocation(line: 83, column: 35, scope: !11)
!66 = !DILocation(line: 86, column: 35, scope: !11)
!67 = !DILocation(line: 87, column: 62, scope: !11)
!68 = !DILocation(line: 88, column: 52, scope: !11)
!69 = !DILocation(line: 88, column: 49, scope: !11)
!70 = !DILocation(line: 88, column: 31, scope: !11)
!71 = !DILocation(line: 88, column: 57, scope: !11)
!72 = !DILocation(line: 89, column: 35, scope: !11)
!73 = !DILocation(line: 92, column: 35, scope: !11)
!74 = !DILocation(line: 93, column: 62, scope: !11)
!75 = !DILocation(line: 94, column: 21, scope: !11)
!76 = !DILocation(line: 95, column: 35, scope: !11)
!77 = !DILocation(line: 98, column: 35, scope: !11)
!78 = !DILocation(line: 99, column: 62, scope: !11)
!79 = !DILocation(line: 100, column: 31, scope: !11)
!80 = !DILocation(line: 100, column: 57, scope: !11)
!81 = !DILocation(line: 101, column: 21, scope: !11)
!82 = !DILocation(line: 102, column: 35, scope: !11)
!83 = !DILocation(line: 105, column: 35, scope: !11)
!84 = !DILocation(line: 106, column: 62, scope: !11)
!85 = !DILocation(line: 107, column: 35, scope: !11)
!86 = !DILocation(line: 110, column: 35, scope: !11)
!87 = !DILocation(line: 111, column: 62, scope: !11)
!88 = !DILocation(line: 112, column: 31, scope: !11)
!89 = !DILocation(line: 112, column: 57, scope: !11)
!90 = !DILocation(line: 113, column: 20, scope: !11)
!91 = !DILocation(line: 114, column: 20, scope: !11)
!92 = !DILocation(line: 115, column: 35, scope: !11)
!93 = !DILocation(line: 118, column: 35, scope: !11)
!94 = !DILocation(line: 119, column: 62, scope: !11)
!95 = !DILocation(line: 120, column: 35, scope: !11)
!96 = !DILocation(line: 123, column: 35, scope: !11)
!97 = !DILocation(line: 124, column: 62, scope: !11)
!98 = !DILocation(line: 54, column: 20, scope: !11)
!99 = !DILocation(line: 71, column: 20, scope: !11)
!100 = !DILocation(line: 63, column: 19, scope: !11)
!101 = !DILocation(line: 56, column: 20, scope: !11)
!102 = !DILocation(line: 64, column: 20, scope: !11)
!103 = !DILocation(line: 65, column: 35, scope: !11)
!104 = !DILocation(line: 57, column: 20, scope: !11)
!105 = !DILocation(line: 58, column: 35, scope: !11)
!106 = !DILocation(line: 125, column: 31, scope: !11)
!107 = !DILocation(line: 125, column: 57, scope: !11)
!108 = !DILocation(line: 128, column: 21, scope: !11)
!109 = !DILocation(line: 129, column: 21, scope: !11)
!110 = !DILocation(line: 130, column: 22, scope: !11)
!111 = !DILocation(line: 72, column: 20, scope: !11)
!112 = !DILocation(line: 73, column: 35, scope: !11)
!113 = !DILocation(line: 131, column: 21, scope: !11)
!114 = !DILocation(line: 132, column: 22, scope: !11)
!115 = !DILocation(line: 134, column: 22, scope: !11)
!116 = !DILocation(line: 135, column: 28, scope: !11)
!117 = !DILocation(line: 135, column: 41, scope: !11)
!118 = !DILocation(line: 135, column: 4, scope: !11)
