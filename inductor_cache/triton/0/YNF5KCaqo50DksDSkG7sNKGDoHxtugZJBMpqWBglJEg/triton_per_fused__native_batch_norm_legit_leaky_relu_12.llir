; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_leaky_relu_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 3, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = and i32 %9, 7, !dbg !12
  %13 = or disjoint i32 %8, %11, !dbg !13
  %14 = icmp slt i32 %13, 2048, !dbg !14
  %15 = shl i32 %9, 1, !dbg !15
  %16 = and i32 %15, 14, !dbg !15
  %17 = shl i32 %13, 4, !dbg !16
  %18 = or disjoint i32 %17, %16, !dbg !17
  %19 = sext i32 %18 to i64, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !18
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %20, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #5, !dbg !19
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !19
  %23 = extractvalue { i32, i32 } %21, 1, !dbg !19
  %24 = bitcast i32 %22 to float, !dbg !19
  %25 = bitcast i32 %23 to float, !dbg !19
  %26 = fadd float %24, %25, !dbg !20
  %27 = select i1 %14, float %26, float 0.000000e+00, !dbg !20
  %28 = bitcast float %27 to i32, !dbg !25
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 4, i32 31), !dbg !25
  %30 = bitcast i32 %29 to float, !dbg !25
  %31 = fadd float %27, %30, !dbg !20
  %32 = bitcast float %31 to i32, !dbg !25
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 2, i32 31), !dbg !25
  %34 = bitcast i32 %33 to float, !dbg !25
  %35 = fadd float %31, %34, !dbg !20
  %36 = bitcast float %35 to i32, !dbg !25
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 1, i32 31), !dbg !25
  %38 = bitcast i32 %37 to float, !dbg !25
  %39 = fadd float %35, %38, !dbg !20
  %40 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !26
  %41 = bitcast float %39 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %40, <1 x i32> %41, i1 true) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %42 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !26
  %43 = load float, ptr addrspace(3) %42, align 4, !dbg !26
  %44 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %43, float 1.600000e+01) #5, !dbg !26
  %45 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %39, float 1.600000e+01) #5, !dbg !26
  %46 = fsub float %24, %45, !dbg !27
  %47 = fsub float %25, %45, !dbg !27
  %48 = fmul float %46, %46, !dbg !28
  %49 = fmul float %47, %47, !dbg !28
  %50 = fadd float %48, %49, !dbg !29
  %51 = select i1 %14, float %50, float 0.000000e+00, !dbg !29
  %52 = bitcast float %51 to i32, !dbg !31
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 4, i32 31), !dbg !31
  %54 = bitcast i32 %53 to float, !dbg !31
  %55 = fadd float %51, %54, !dbg !29
  %56 = bitcast float %55 to i32, !dbg !31
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 2, i32 31), !dbg !31
  %58 = bitcast i32 %57 to float, !dbg !31
  %59 = fadd float %55, %58, !dbg !29
  %60 = bitcast float %59 to i32, !dbg !31
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 1, i32 31), !dbg !31
  %62 = bitcast i32 %61 to float, !dbg !31
  %63 = fadd float %59, %62, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %64 = bitcast float %63 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %40, <1 x i32> %64, i1 true) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %65 = load float, ptr addrspace(3) %42, align 4, !dbg !32
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float 1.600000e+01) #5, !dbg !33
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %63, float 1.600000e+01) #5, !dbg !33
  %68 = fadd float %66, 0x3EE4F8B580000000, !dbg !34
  %69 = fadd float %67, 0x3EE4F8B580000000, !dbg !34
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i = icmp eq i32 %70, 0, !dbg !32
  br i1 %.not.i, label %73, label %71, !dbg !32

71:                                               ; preds = %6
  %72 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %68), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

73:                                               ; preds = %6
  %74 = tail call float @llvm.nvvm.rsqrt.approx.f(float %68), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

__nv_rsqrtf.exit:                                 ; preds = %71, %73
  %.0.i = phi float [ %72, %71 ], [ %74, %73 ], !dbg !32
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i4 = icmp eq i32 %76, 0, !dbg !32
  br i1 %.not.i4, label %79, label %77, !dbg !32

77:                                               ; preds = %__nv_rsqrtf.exit
  %78 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %69), !dbg !32
  br label %__nv_rsqrtf.exit6, !dbg !32

79:                                               ; preds = %__nv_rsqrtf.exit
  %80 = tail call float @llvm.nvvm.rsqrt.approx.f(float %69), !dbg !32
  br label %__nv_rsqrtf.exit6, !dbg !32

__nv_rsqrtf.exit6:                                ; preds = %77, %79
  %.0.i5 = phi float [ %78, %77 ], [ %80, %79 ], !dbg !32
  %81 = or disjoint i32 %8, %12, !dbg !13
  %82 = icmp slt i32 %81, 2048, !dbg !14
  %83 = fmul float %46, %.0.i5, !dbg !35
  %84 = fmul float %47, %.0.i5, !dbg !35
  %85 = fcmp ogt float %83, 0.000000e+00, !dbg !36
  %86 = fcmp ogt float %84, 0.000000e+00, !dbg !36
  %87 = fmul float %83, 0x3FC99999A0000000, !dbg !37
  %88 = fmul float %84, 0x3FC99999A0000000, !dbg !37
  %89 = select i1 %85, float %83, float %87, !dbg !38
  %90 = select i1 %86, float %84, float %88, !dbg !38
  %91 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !39
  %92 = bitcast float %89 to i32, !dbg !40
  %93 = bitcast float %90 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %92, i32 %93, ptr addrspace(1) %91, i1 %14) #5, !dbg !40
  %94 = sext i32 %81 to i64, !dbg !41
  %95 = getelementptr float, ptr addrspace(1) %3, i64 %94, !dbg !41
  %96 = and i32 %9, 56, !dbg !42
  %97 = icmp eq i32 %96, 0, !dbg !42
  %98 = bitcast float %.0.i to i32, !dbg !42
  %99 = and i1 %97, %82, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %98, ptr addrspace(1) %95, i1 %99) #5, !dbg !42
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !43
  %101 = bitcast float %44 to i32, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %101, ptr addrspace(1) %100, i1 %99) #5, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwrmqpghs34o3gfmfnxy2aeg55fppbvjlutwiimvbbtq3bxwemgm.py", directory: "inductor_cache/wr")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_leaky_relu_12, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_leaky_relu_12, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_leaky_relu_12", linkageName: "triton_per_fused__native_batch_norm_legit_leaky_relu_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 38, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 43, scope: !7)
!20 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 36, column: 24, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !24)
!26 = !DILocation(line: 39, column: 19, scope: !7)
!27 = !DILocation(line: 40, column: 19, scope: !7)
!28 = !DILocation(line: 41, column: 20, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !30)
!30 = !DILocation(line: 44, column: 26, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !30)
!32 = !DILocation(line: 50, column: 28, scope: !7)
!33 = !DILocation(line: 47, column: 20, scope: !7)
!34 = !DILocation(line: 49, column: 20, scope: !7)
!35 = !DILocation(line: 51, column: 20, scope: !7)
!36 = !DILocation(line: 53, column: 20, scope: !7)
!37 = !DILocation(line: 55, column: 20, scope: !7)
!38 = !DILocation(line: 56, column: 35, scope: !7)
!39 = !DILocation(line: 57, column: 25, scope: !7)
!40 = !DILocation(line: 57, column: 45, scope: !7)
!41 = !DILocation(line: 58, column: 25, scope: !7)
!42 = !DILocation(line: 58, column: 37, scope: !7)
!43 = !DILocation(line: 59, column: 25, scope: !7)
!44 = !DILocation(line: 59, column: 37, scope: !7)
!45 = !DILocation(line: 59, column: 4, scope: !7)
