; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_min_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %5 = and i32 %4, 31, !dbg !10
  %6 = lshr i32 %4, 5, !dbg !10
  %7 = shl i32 %4, 2, !dbg !10
  %8 = and i32 %7, 252, !dbg !10
  %9 = zext nneg i32 %8 to i64, !dbg !11
  %10 = getelementptr float, ptr addrspace(1) %0, i64 %9, !dbg !11
  %11 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %10, i1 true) #3, !dbg !12
  %12 = extractvalue { i32, i32, i32, i32 } %11, 0, !dbg !12
  %13 = extractvalue { i32, i32, i32, i32 } %11, 1, !dbg !12
  %14 = extractvalue { i32, i32, i32, i32 } %11, 2, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %11, 3, !dbg !12
  %16 = bitcast i32 %12 to float, !dbg !12
  %17 = bitcast i32 %13 to float, !dbg !12
  %18 = bitcast i32 %14 to float, !dbg !12
  %19 = bitcast i32 %15 to float, !dbg !12
  %20 = fcmp olt float %16, %17, !dbg !13
  %21 = fcmp uno float %16, 0.000000e+00, !dbg !18
  %22 = or i1 %20, %21, !dbg !19
  %23 = select i1 %22, float %16, float %17, !dbg !20
  %24 = fcmp olt float %23, %18, !dbg !13
  %25 = fcmp uno float %23, 0.000000e+00, !dbg !18
  %26 = or i1 %24, %25, !dbg !19
  %27 = select i1 %26, float %23, float %18, !dbg !20
  %28 = fcmp olt float %27, %19, !dbg !13
  %29 = fcmp uno float %27, 0.000000e+00, !dbg !18
  %30 = or i1 %28, %29, !dbg !19
  %31 = select i1 %30, float %27, float %19, !dbg !20
  %32 = bitcast float %31 to i32, !dbg !21
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 16, i32 31), !dbg !21
  %34 = bitcast i32 %33 to float, !dbg !21
  %35 = fcmp olt float %31, %34, !dbg !13
  %36 = fcmp uno float %31, 0.000000e+00, !dbg !18
  %37 = or i1 %35, %36, !dbg !19
  %38 = select i1 %37, float %31, float %34, !dbg !20
  %39 = bitcast float %38 to i32, !dbg !21
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 8, i32 31), !dbg !21
  %41 = bitcast i32 %40 to float, !dbg !21
  %42 = fcmp olt float %38, %41, !dbg !13
  %43 = fcmp uno float %38, 0.000000e+00, !dbg !18
  %44 = or i1 %42, %43, !dbg !19
  %45 = select i1 %44, float %38, float %41, !dbg !20
  %46 = bitcast float %45 to i32, !dbg !21
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 4, i32 31), !dbg !21
  %48 = bitcast i32 %47 to float, !dbg !21
  %49 = fcmp olt float %45, %48, !dbg !13
  %50 = fcmp uno float %45, 0.000000e+00, !dbg !18
  %51 = or i1 %49, %50, !dbg !19
  %52 = select i1 %51, float %45, float %48, !dbg !20
  %53 = bitcast float %52 to i32, !dbg !21
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 2, i32 31), !dbg !21
  %55 = bitcast i32 %54 to float, !dbg !21
  %56 = fcmp olt float %52, %55, !dbg !13
  %57 = fcmp uno float %52, 0.000000e+00, !dbg !18
  %58 = or i1 %56, %57, !dbg !19
  %59 = select i1 %58, float %52, float %55, !dbg !20
  %60 = bitcast float %59 to i32, !dbg !21
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 1, i32 31), !dbg !21
  %62 = bitcast i32 %61 to float, !dbg !21
  %63 = fcmp olt float %59, %62, !dbg !13
  %64 = fcmp uno float %59, 0.000000e+00, !dbg !18
  %65 = or i1 %63, %64, !dbg !19
  %66 = icmp eq i32 %5, 0, !dbg !21
  %67 = and i32 %6, 1, !dbg !21
  %68 = zext nneg i32 %67 to i64, !dbg !21
  %69 = getelementptr float, ptr addrspace(3) @global_smem, i64 %68, !dbg !21
  %70 = select i1 %65, i32 %60, i32 %61, !dbg !20
  %71 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %71, i1 %66) #3, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %72 = icmp slt i32 %4, 2, !dbg !21
  %73 = sext i32 %4 to i64, !dbg !21
  %74 = getelementptr float, ptr addrspace(3) @global_smem, i64 %73, !dbg !21
  %75 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %74, i1 %72) #3, !dbg !21
  %76 = bitcast i32 %75 to float, !dbg !21
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 1, i32 31), !dbg !21
  %78 = bitcast i32 %77 to float, !dbg !21
  %79 = fcmp olt float %76, %78, !dbg !13
  %80 = fcmp uno float %76, 0.000000e+00, !dbg !18
  %81 = or i1 %80, %79, !dbg !19
  %82 = and i32 %4, 1, !dbg !21
  %83 = icmp eq i32 %82, 0, !dbg !21
  %84 = and i1 %72, %83, !dbg !21
  %85 = select i1 %81, i32 %75, i32 %77, !dbg !20
  %86 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %86, i1 %84) #3, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %87 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !21
  %88 = fadd float %87, 0.000000e+00, !dbg !22
  %urem = and i32 %4, 63, !dbg !24
  %89 = icmp eq i32 %urem, 0, !dbg !24
  %90 = bitcast float %88 to i32, !dbg !24
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %90, ptr addrspace(1) %1, i1 %89) #3, !dbg !24
  ret void, !dbg !25
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccztell24ir7boktgvstp622yiavukr7b2htgloy4i2mepwt7pmj.py", directory: "inductor_cache/cz")
!4 = !{ptr @triton_per_fused_min_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_min_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_min_0", linkageName: "triton_per_fused_min_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 110, column: 15, scope: !14, inlinedAt: !17)
!14 = distinct !DILexicalBlockFile(scope: !16, file: !15, discriminator: 0)
!15 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!16 = distinct !DILexicalBlockFile(scope: !7, file: !15, discriminator: 0)
!17 = !DILocation(line: 33, column: 70, scope: !7)
!18 = !DILocation(line: 112, column: 21, scope: !14, inlinedAt: !17)
!19 = !DILocation(line: 112, column: 16, scope: !14, inlinedAt: !17)
!20 = !DILocation(line: 113, column: 29, scope: !14, inlinedAt: !17)
!21 = !DILocation(line: 126, column: 29, scope: !16, inlinedAt: !17)
!22 = !DILocation(line: 73, column: 15, scope: !16, inlinedAt: !23)
!23 = !DILocation(line: 33, column: 44, scope: !7)
!24 = !DILocation(line: 34, column: 59, scope: !7)
!25 = !DILocation(line: 34, column: 4, scope: !7)
