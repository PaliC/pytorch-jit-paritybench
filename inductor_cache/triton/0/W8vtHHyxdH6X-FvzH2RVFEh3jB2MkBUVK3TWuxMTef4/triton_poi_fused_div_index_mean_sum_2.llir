; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_3 = internal constant [8 x i8] c"unknown\00"
@assertFile_3 = internal constant [74 x i8] c"inductor_cache/hp/chp5k3txe2trrpubqsg3cbbnjncowrw7zydfzf6zhn7sgf446sqt.py\00"
@assertMessage_3 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp50 < 96\00"
@assertFunc_2 = internal constant [8 x i8] c"unknown\00"
@assertFile_2 = internal constant [74 x i8] c"inductor_cache/hp/chp5k3txe2trrpubqsg3cbbnjncowrw7zydfzf6zhn7sgf446sqt.py\00"
@assertMessage_2 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp35 < 96\00"
@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [74 x i8] c"inductor_cache/hp/chp5k3txe2trrpubqsg3cbbnjncowrw7zydfzf6zhn7sgf446sqt.py\00"
@assertMessage_1 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp20 < 96\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/hp/chp5k3txe2trrpubqsg3cbbnjncowrw7zydfzf6zhn7sgf446sqt.py\00"
@assertMessage_0 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp5 < 96\00"

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_div_index_mean_sum_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2) local_unnamed_addr !dbg !11 {
  %4 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %1, i1 true) #3, !dbg !12
  %5 = getelementptr i8, ptr addrspace(1) %1, i64 8, !dbg !13
  %6 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %5, i1 true) #3, !dbg !14
  %7 = getelementptr i8, ptr addrspace(1) %1, i64 16, !dbg !15
  %8 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %7, i1 true) #3, !dbg !16
  %9 = getelementptr i8, ptr addrspace(1) %1, i64 24, !dbg !17
  %10 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %9, i1 true) #3, !dbg !18
  %11 = add i64 %4, 96, !dbg !19
  %12 = icmp slt i64 %4, 0, !dbg !20
  %13 = select i1 %12, i64 %11, i64 %4, !dbg !21
  %14 = icmp ugt i64 %13, 95, !dbg !22
  br i1 %14, label %15, label %16, !dbg !23

15:                                               ; preds = %3
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 36, ptr nonnull @assertFunc_0, i64 1), !dbg !23
  unreachable, !dbg !23

16:                                               ; preds = %3
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %17 = getelementptr float, ptr addrspace(1) %2, i64 %13, !dbg !24
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #3, !dbg !25
  %19 = bitcast i32 %18 to float, !dbg !25
  %20 = getelementptr i8, ptr addrspace(1) %17, i64 384, !dbg !26
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !27
  %22 = bitcast i32 %21 to float, !dbg !27
  %23 = fadd float %19, %22, !dbg !28
  %24 = getelementptr i8, ptr addrspace(1) %17, i64 768, !dbg !29
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !30
  %26 = bitcast i32 %25 to float, !dbg !30
  %27 = fadd float %23, %26, !dbg !31
  %28 = getelementptr i8, ptr addrspace(1) %17, i64 1152, !dbg !32
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !33
  %30 = bitcast i32 %29 to float, !dbg !33
  %31 = fadd float %27, %30, !dbg !34
  %32 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %31, float 4.000000e+00) #3, !dbg !35
  %33 = add i64 %6, 96, !dbg !36
  %34 = icmp slt i64 %6, 0, !dbg !37
  %35 = select i1 %34, i64 %33, i64 %6, !dbg !38
  %36 = icmp ugt i64 %35, 95, !dbg !39
  br i1 %36, label %37, label %38, !dbg !40

37:                                               ; preds = %16
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 49, ptr nonnull @assertFunc_1, i64 1), !dbg !40
  unreachable, !dbg !40

38:                                               ; preds = %16
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %39 = or disjoint i64 %35, 384, !dbg !41
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !42
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !43
  %42 = bitcast i32 %41 to float, !dbg !43
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !44
  %44 = getelementptr i8, ptr addrspace(1) %43, i64 1920, !dbg !44
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !45
  %46 = bitcast i32 %45 to float, !dbg !45
  %47 = fadd float %42, %46, !dbg !46
  %48 = getelementptr i8, ptr addrspace(1) %43, i64 2304, !dbg !47
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !48
  %50 = bitcast i32 %49 to float, !dbg !48
  %51 = fadd float %47, %50, !dbg !49
  %52 = getelementptr i8, ptr addrspace(1) %43, i64 2688, !dbg !50
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !51
  %54 = bitcast i32 %53 to float, !dbg !51
  %55 = fadd float %51, %54, !dbg !52
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float 4.000000e+00) #3, !dbg !53
  %57 = add i64 %8, 96, !dbg !54
  %58 = icmp slt i64 %8, 0, !dbg !55
  %59 = select i1 %58, i64 %57, i64 %8, !dbg !56
  %60 = icmp ugt i64 %59, 95, !dbg !57
  br i1 %60, label %61, label %62, !dbg !58

61:                                               ; preds = %38
  tail call void @__assertfail(ptr nonnull @assertMessage_2, ptr nonnull @assertFile_2, i32 62, ptr nonnull @assertFunc_2, i64 1), !dbg !58
  unreachable, !dbg !58

62:                                               ; preds = %38
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %63 = or disjoint i64 %59, 768, !dbg !59
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !60
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !61
  %66 = bitcast i32 %65 to float, !dbg !61
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !62
  %68 = getelementptr i8, ptr addrspace(1) %67, i64 3456, !dbg !62
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !63
  %70 = bitcast i32 %69 to float, !dbg !63
  %71 = fadd float %66, %70, !dbg !64
  %72 = getelementptr i8, ptr addrspace(1) %67, i64 3840, !dbg !65
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !66
  %74 = bitcast i32 %73 to float, !dbg !66
  %75 = fadd float %71, %74, !dbg !67
  %76 = getelementptr i8, ptr addrspace(1) %67, i64 4224, !dbg !68
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !69
  %78 = bitcast i32 %77 to float, !dbg !69
  %79 = fadd float %75, %78, !dbg !70
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float 4.000000e+00) #3, !dbg !71
  %81 = add i64 %10, 96, !dbg !72
  %82 = icmp slt i64 %10, 0, !dbg !73
  %83 = select i1 %82, i64 %81, i64 %10, !dbg !74
  %84 = icmp ugt i64 %83, 95, !dbg !75
  br i1 %84, label %85, label %86, !dbg !76

85:                                               ; preds = %62
  tail call void @__assertfail(ptr nonnull @assertMessage_3, ptr nonnull @assertFile_3, i32 75, ptr nonnull @assertFunc_3, i64 1), !dbg !76
  unreachable, !dbg !76

86:                                               ; preds = %62
  %87 = fadd float %32, %56, !dbg !77
  %88 = fadd float %87, %80, !dbg !78
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %89 = or disjoint i64 %83, 1152, !dbg !79
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %89, !dbg !80
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !81
  %92 = bitcast i32 %91 to float, !dbg !81
  %93 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !82
  %94 = getelementptr i8, ptr addrspace(1) %93, i64 4992, !dbg !82
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #3, !dbg !83
  %96 = bitcast i32 %95 to float, !dbg !83
  %97 = fadd float %92, %96, !dbg !84
  %98 = getelementptr i8, ptr addrspace(1) %93, i64 5376, !dbg !85
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #3, !dbg !86
  %100 = bitcast i32 %99 to float, !dbg !86
  %101 = fadd float %97, %100, !dbg !87
  %102 = getelementptr i8, ptr addrspace(1) %93, i64 5760, !dbg !88
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #3, !dbg !89
  %104 = bitcast i32 %103 to float, !dbg !89
  %105 = fadd float %101, %104, !dbg !90
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float 4.000000e+00) #3, !dbg !91
  %107 = fadd float %88, %106, !dbg !92
  %108 = fmul float %107, 2.500000e-01, !dbg !93
  %109 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !94
  %110 = and i32 %109, 31, !dbg !94
  %111 = icmp eq i32 %110, 0, !dbg !94
  %112 = bitcast float %108 to i32, !dbg !94
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %112, ptr addrspace(1) %0, i1 %111) #3, !dbg !94
  ret void, !dbg !95
}

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #2

attributes #0 = { noreturn }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chp5k3txe2trrpubqsg3cbbnjncowrw7zydfzf6zhn7sgf446sqt.py", directory: "inductor_cache/hp")
!4 = !{ptr @triton_poi_fused_div_index_mean_sum_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_div_index_mean_sum_2, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_div_index_mean_sum_2", linkageName: "triton_poi_fused_div_index_mean_sum_2", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 24, column: 19, scope: !11)
!13 = !DILocation(line: 26, column: 31, scope: !11)
!14 = !DILocation(line: 26, column: 20, scope: !11)
!15 = !DILocation(line: 28, column: 31, scope: !11)
!16 = !DILocation(line: 28, column: 20, scope: !11)
!17 = !DILocation(line: 30, column: 31, scope: !11)
!18 = !DILocation(line: 30, column: 20, scope: !11)
!19 = !DILocation(line: 33, column: 18, scope: !11)
!20 = !DILocation(line: 34, column: 18, scope: !11)
!21 = !DILocation(line: 35, column: 32, scope: !11)
!22 = !DILocation(line: 36, column: 36, scope: !11)
!23 = !DILocation(line: 36, column: 48, scope: !11)
!24 = !DILocation(line: 37, column: 30, scope: !11)
!25 = !DILocation(line: 37, column: 37, scope: !11)
!26 = !DILocation(line: 38, column: 30, scope: !11)
!27 = !DILocation(line: 38, column: 42, scope: !11)
!28 = !DILocation(line: 39, column: 18, scope: !11)
!29 = !DILocation(line: 40, column: 31, scope: !11)
!30 = !DILocation(line: 40, column: 44, scope: !11)
!31 = !DILocation(line: 41, column: 19, scope: !11)
!32 = !DILocation(line: 42, column: 31, scope: !11)
!33 = !DILocation(line: 42, column: 44, scope: !11)
!34 = !DILocation(line: 43, column: 20, scope: !11)
!35 = !DILocation(line: 45, column: 20, scope: !11)
!36 = !DILocation(line: 46, column: 20, scope: !11)
!37 = !DILocation(line: 47, column: 20, scope: !11)
!38 = !DILocation(line: 48, column: 35, scope: !11)
!39 = !DILocation(line: 49, column: 37, scope: !11)
!40 = !DILocation(line: 49, column: 50, scope: !11)
!41 = !DILocation(line: 50, column: 37, scope: !11)
!42 = !DILocation(line: 50, column: 31, scope: !11)
!43 = !DILocation(line: 50, column: 45, scope: !11)
!44 = !DILocation(line: 51, column: 31, scope: !11)
!45 = !DILocation(line: 51, column: 45, scope: !11)
!46 = !DILocation(line: 52, column: 20, scope: !11)
!47 = !DILocation(line: 53, column: 31, scope: !11)
!48 = !DILocation(line: 53, column: 45, scope: !11)
!49 = !DILocation(line: 54, column: 20, scope: !11)
!50 = !DILocation(line: 55, column: 31, scope: !11)
!51 = !DILocation(line: 55, column: 45, scope: !11)
!52 = !DILocation(line: 56, column: 20, scope: !11)
!53 = !DILocation(line: 57, column: 20, scope: !11)
!54 = !DILocation(line: 59, column: 20, scope: !11)
!55 = !DILocation(line: 60, column: 20, scope: !11)
!56 = !DILocation(line: 61, column: 35, scope: !11)
!57 = !DILocation(line: 62, column: 37, scope: !11)
!58 = !DILocation(line: 62, column: 50, scope: !11)
!59 = !DILocation(line: 63, column: 37, scope: !11)
!60 = !DILocation(line: 63, column: 31, scope: !11)
!61 = !DILocation(line: 63, column: 45, scope: !11)
!62 = !DILocation(line: 64, column: 31, scope: !11)
!63 = !DILocation(line: 64, column: 45, scope: !11)
!64 = !DILocation(line: 65, column: 20, scope: !11)
!65 = !DILocation(line: 66, column: 31, scope: !11)
!66 = !DILocation(line: 66, column: 45, scope: !11)
!67 = !DILocation(line: 67, column: 20, scope: !11)
!68 = !DILocation(line: 68, column: 31, scope: !11)
!69 = !DILocation(line: 68, column: 46, scope: !11)
!70 = !DILocation(line: 69, column: 20, scope: !11)
!71 = !DILocation(line: 70, column: 20, scope: !11)
!72 = !DILocation(line: 72, column: 20, scope: !11)
!73 = !DILocation(line: 73, column: 20, scope: !11)
!74 = !DILocation(line: 74, column: 35, scope: !11)
!75 = !DILocation(line: 75, column: 37, scope: !11)
!76 = !DILocation(line: 75, column: 50, scope: !11)
!77 = !DILocation(line: 58, column: 20, scope: !11)
!78 = !DILocation(line: 71, column: 20, scope: !11)
!79 = !DILocation(line: 76, column: 38, scope: !11)
!80 = !DILocation(line: 76, column: 31, scope: !11)
!81 = !DILocation(line: 76, column: 46, scope: !11)
!82 = !DILocation(line: 77, column: 31, scope: !11)
!83 = !DILocation(line: 77, column: 46, scope: !11)
!84 = !DILocation(line: 78, column: 20, scope: !11)
!85 = !DILocation(line: 79, column: 31, scope: !11)
!86 = !DILocation(line: 79, column: 46, scope: !11)
!87 = !DILocation(line: 80, column: 20, scope: !11)
!88 = !DILocation(line: 81, column: 31, scope: !11)
!89 = !DILocation(line: 81, column: 46, scope: !11)
!90 = !DILocation(line: 82, column: 20, scope: !11)
!91 = !DILocation(line: 83, column: 20, scope: !11)
!92 = !DILocation(line: 84, column: 20, scope: !11)
!93 = !DILocation(line: 86, column: 20, scope: !11)
!94 = !DILocation(line: 87, column: 68, scope: !11)
!95 = !DILocation(line: 87, column: 4, scope: !11)
