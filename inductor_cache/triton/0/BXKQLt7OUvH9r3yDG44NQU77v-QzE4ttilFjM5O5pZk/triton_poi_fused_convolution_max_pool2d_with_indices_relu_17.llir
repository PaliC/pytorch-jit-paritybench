; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_max_pool2d_with_indices_relu_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = and i32 %9, 127, !dbg !12
  %13 = or disjoint i32 %12, 128, !dbg !12
  %14 = or disjoint i32 %12, 256, !dbg !12
  %15 = or disjoint i32 %12, 384, !dbg !12
  %16 = or disjoint i32 %12, 512, !dbg !12
  %17 = or disjoint i32 %12, 640, !dbg !12
  %18 = or disjoint i32 %12, 768, !dbg !12
  %19 = or disjoint i32 %12, 896, !dbg !12
  %20 = or disjoint i32 %8, %11, !dbg !13
  %21 = or disjoint i32 %20, 512, !dbg !13
  %22 = or disjoint i32 %8, %12, !dbg !13
  %23 = or disjoint i32 %8, %13, !dbg !13
  %24 = or disjoint i32 %8, %14, !dbg !13
  %25 = or disjoint i32 %8, %15, !dbg !13
  %26 = or disjoint i32 %8, %16, !dbg !13
  %27 = or disjoint i32 %8, %17, !dbg !13
  %28 = or disjoint i32 %8, %18, !dbg !13
  %29 = or disjoint i32 %8, %19, !dbg !13
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %31 = icmp slt i32 %30, 64, !dbg !15
  %.frozen = freeze i32 %20, !dbg !16
  %32 = sdiv i32 %.frozen, 512, !dbg !16
  %33 = mul i32 %32, 512, !dbg !17
  %.decomposed = sub i32 %.frozen, %33, !dbg !17
  %34 = sdiv i32 %21, 512, !dbg !16
  %35 = shl i32 %30, 9, !dbg !18
  %36 = add i32 %.decomposed, %35, !dbg !19
  %37 = shl i32 %32, 15, !dbg !20
  %38 = shl i32 %34, 15, !dbg !20
  %39 = add i32 %36, %37, !dbg !21
  %40 = add i32 %38, %.decomposed, !dbg !19
  %41 = add i32 %40, %35, !dbg !21
  %42 = sext i32 %39 to i64, !dbg !22
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !22
  %44 = sext i32 %41 to i64, !dbg !22
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !22
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %31) #2, !dbg !23
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !23
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !23
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !23
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !23
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %31) #2, !dbg !23
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !23
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !23
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !23
  %56 = sext i32 %.decomposed to i64, !dbg !24
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !24
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #2, !dbg !25
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !25
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !25
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !25
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !25
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #2, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !25
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !25
  %68 = insertelement <8 x i32> poison, i32 %55, i64 0, !dbg !23
  %69 = insertelement <8 x i32> %68, i32 %54, i64 1, !dbg !23
  %70 = insertelement <8 x i32> %69, i32 %53, i64 2, !dbg !23
  %71 = insertelement <8 x i32> %70, i32 %52, i64 3, !dbg !23
  %72 = insertelement <8 x i32> %71, i32 %50, i64 4, !dbg !23
  %73 = insertelement <8 x i32> %72, i32 %49, i64 5, !dbg !23
  %74 = insertelement <8 x i32> %73, i32 %48, i64 6, !dbg !23
  %75 = insertelement <8 x i32> %74, i32 %47, i64 7, !dbg !23
  %76 = bitcast <8 x i32> %75 to <8 x float>, !dbg !23
  %77 = insertelement <8 x i32> poison, i32 %67, i64 0, !dbg !25
  %78 = insertelement <8 x i32> %77, i32 %66, i64 1, !dbg !25
  %79 = insertelement <8 x i32> %78, i32 %65, i64 2, !dbg !25
  %80 = insertelement <8 x i32> %79, i32 %64, i64 3, !dbg !25
  %81 = insertelement <8 x i32> %80, i32 %62, i64 4, !dbg !25
  %82 = insertelement <8 x i32> %81, i32 %61, i64 5, !dbg !25
  %83 = insertelement <8 x i32> %82, i32 %60, i64 6, !dbg !25
  %84 = insertelement <8 x i32> %83, i32 %59, i64 7, !dbg !25
  %85 = bitcast <8 x i32> %84 to <8 x float>, !dbg !25
  %86 = fadd <8 x float> %76, %85, !dbg !26
  %87 = fcmp olt <8 x float> %86, zeroinitializer, !dbg !27
  %88 = extractelement <8 x i1> %87, i64 7, !dbg !31
  %89 = extractelement <8 x float> %86, i64 7, !dbg !31
  %90 = select i1 %88, float 0.000000e+00, float %89, !dbg !31
  %91 = extractelement <8 x i1> %87, i64 6, !dbg !31
  %92 = extractelement <8 x float> %86, i64 6, !dbg !31
  %93 = select i1 %91, float 0.000000e+00, float %92, !dbg !31
  %94 = extractelement <8 x i1> %87, i64 5, !dbg !31
  %95 = extractelement <8 x float> %86, i64 5, !dbg !31
  %96 = select i1 %94, float 0.000000e+00, float %95, !dbg !31
  %97 = extractelement <8 x i1> %87, i64 4, !dbg !31
  %98 = extractelement <8 x float> %86, i64 4, !dbg !31
  %99 = select i1 %97, float 0.000000e+00, float %98, !dbg !31
  %100 = extractelement <8 x i1> %87, i64 3, !dbg !31
  %101 = extractelement <8 x float> %86, i64 3, !dbg !31
  %102 = select i1 %100, float 0.000000e+00, float %101, !dbg !31
  %103 = extractelement <8 x i1> %87, i64 2, !dbg !31
  %104 = extractelement <8 x float> %86, i64 2, !dbg !31
  %105 = select i1 %103, float 0.000000e+00, float %104, !dbg !31
  %106 = extractelement <8 x i1> %87, i64 1, !dbg !31
  %107 = extractelement <8 x float> %86, i64 1, !dbg !31
  %108 = select i1 %106, float 0.000000e+00, float %107, !dbg !31
  %109 = extractelement <8 x i1> %87, i64 0, !dbg !31
  %110 = extractelement <8 x float> %86, i64 0, !dbg !31
  %111 = select i1 %109, float 0.000000e+00, float %110, !dbg !31
  %112 = shl i32 %22, 6, !dbg !32
  %113 = shl i32 %23, 6, !dbg !32
  %114 = shl i32 %24, 6, !dbg !32
  %115 = shl i32 %25, 6, !dbg !32
  %116 = shl i32 %26, 6, !dbg !32
  %117 = shl i32 %27, 6, !dbg !32
  %118 = shl i32 %28, 6, !dbg !32
  %119 = shl i32 %29, 6, !dbg !32
  %120 = add i32 %112, %30, !dbg !33
  %121 = add i32 %113, %30, !dbg !33
  %122 = add i32 %114, %30, !dbg !33
  %123 = add i32 %115, %30, !dbg !33
  %124 = add i32 %116, %30, !dbg !33
  %125 = add i32 %117, %30, !dbg !33
  %126 = add i32 %118, %30, !dbg !33
  %127 = add i32 %119, %30, !dbg !33
  %128 = sext i32 %120 to i64, !dbg !34
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !34
  %130 = sext i32 %121 to i64, !dbg !34
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %130, !dbg !34
  %132 = sext i32 %122 to i64, !dbg !34
  %133 = getelementptr float, ptr addrspace(1) %2, i64 %132, !dbg !34
  %134 = sext i32 %123 to i64, !dbg !34
  %135 = getelementptr float, ptr addrspace(1) %2, i64 %134, !dbg !34
  %136 = sext i32 %124 to i64, !dbg !34
  %137 = getelementptr float, ptr addrspace(1) %2, i64 %136, !dbg !34
  %138 = sext i32 %125 to i64, !dbg !34
  %139 = getelementptr float, ptr addrspace(1) %2, i64 %138, !dbg !34
  %140 = sext i32 %126 to i64, !dbg !34
  %141 = getelementptr float, ptr addrspace(1) %2, i64 %140, !dbg !34
  %142 = sext i32 %127 to i64, !dbg !34
  %143 = getelementptr float, ptr addrspace(1) %2, i64 %142, !dbg !34
  %.idx = shl nuw nsw i32 %11, 3, !dbg !35
  %144 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !35
  %145 = bitcast float %90 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #2, !dbg !35
  %146 = shl nuw nsw i32 %11, 1, !dbg !35
  %147 = or disjoint i32 %146, 2, !dbg !35
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %147, !dbg !35
  %149 = bitcast float %93 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 true) #2, !dbg !35
  %150 = or disjoint i32 %146, 4, !dbg !35
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %150, !dbg !35
  %152 = bitcast float %96 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 true) #2, !dbg !35
  %153 = or disjoint i32 %146, 6, !dbg !35
  %154 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %153, !dbg !35
  %155 = bitcast float %99 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %.idx1 = shl nuw nsw i32 %12, 3, !dbg !35
  %156 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !35
  %157 = load i32, ptr addrspace(3) %156, align 8, !dbg !35
  %.idx2 = shl nuw nsw i32 %13, 3, !dbg !35
  %158 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !35
  %159 = load i32, ptr addrspace(3) %158, align 8, !dbg !35
  %.idx3 = shl nuw nsw i32 %14, 3, !dbg !35
  %160 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !35
  %161 = load i32, ptr addrspace(3) %160, align 8, !dbg !35
  %.idx4 = shl nuw nsw i32 %15, 3, !dbg !35
  %162 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !35
  %163 = load i32, ptr addrspace(3) %162, align 8, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %164 = bitcast float %102 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %164, i1 true) #2, !dbg !35
  %165 = bitcast float %105 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %165, i1 true) #2, !dbg !35
  %166 = bitcast float %108 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %166, i1 true) #2, !dbg !35
  %167 = bitcast float %111 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %167, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %168 = load i32, ptr addrspace(3) %156, align 8, !dbg !35
  %169 = load i32, ptr addrspace(3) %158, align 8, !dbg !35
  %170 = load i32, ptr addrspace(3) %160, align 8, !dbg !35
  %171 = load i32, ptr addrspace(3) %162, align 8, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %157, ptr addrspace(1) %129, i1 %31) #2, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %159, ptr addrspace(1) %131, i1 %31) #2, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %161, ptr addrspace(1) %133, i1 %31) #2, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %163, ptr addrspace(1) %135, i1 %31) #2, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %168, ptr addrspace(1) %137, i1 %31) #2, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %169, ptr addrspace(1) %139, i1 %31) #2, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %170, ptr addrspace(1) %141, i1 %31) #2, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %171, ptr addrspace(1) %143, i1 %31) #2, !dbg !35
  %172 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !36
  %173 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !36
  %174 = bitcast float %90 to i32, !dbg !37
  %175 = bitcast float %93 to i32, !dbg !37
  %176 = bitcast float %96 to i32, !dbg !37
  %177 = bitcast float %99 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %174, i32 %175, i32 %176, i32 %177, ptr addrspace(1) %172, i1 %31) #2, !dbg !37
  %178 = bitcast float %102 to i32, !dbg !37
  %179 = bitcast float %105 to i32, !dbg !37
  %180 = bitcast float %108 to i32, !dbg !37
  %181 = bitcast float %111 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %178, i32 %179, i32 %180, i32 %181, ptr addrspace(1) %173, i1 %31) #2, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjodkva3uspzu3cyaceftmfxhlescn5mdr6qrfuqwza4mcdpettm.py", directory: "inductor_cache/jo")
!4 = !{ptr @triton_poi_fused_convolution_max_pool2d_with_indices_relu_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_max_pool2d_with_indices_relu_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_max_pool2d_with_indices_relu_17", linkageName: "triton_poi_fused_convolution_max_pool2d_with_indices_relu_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 50, scope: !7)
!21 = !DILocation(line: 32, column: 44, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 55, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 36, column: 40, scope: !7)
!31 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 37, column: 33, scope: !7)
!33 = !DILocation(line: 37, column: 30, scope: !7)
!34 = !DILocation(line: 37, column: 25, scope: !7)
!35 = !DILocation(line: 37, column: 44, scope: !7)
!36 = !DILocation(line: 38, column: 25, scope: !7)
!37 = !DILocation(line: 38, column: 56, scope: !7)
!38 = !DILocation(line: 38, column: 4, scope: !7)
