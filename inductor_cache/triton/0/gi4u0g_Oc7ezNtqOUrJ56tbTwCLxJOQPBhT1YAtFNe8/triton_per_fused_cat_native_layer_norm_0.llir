; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_cat_native_layer_norm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = icmp slt i32 %10, 16, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %.frozen = freeze i32 %10, !dbg !13
  %14 = sdiv i32 %.frozen, 2, !dbg !13
  %15 = mul i32 %14, 2, !dbg !14
  %.decomposed = sub i32 %.frozen, %15, !dbg !14
  %16 = zext nneg i32 %13 to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !15
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #5, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %3, i64 %16, !dbg !17
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 true) #5, !dbg !18
  %21 = icmp samesign ult i32 %13, 4, !dbg !19
  %22 = shl nsw i32 %.decomposed, 3, !dbg !20
  %23 = shl i32 %14, 5, !dbg !21
  %24 = or disjoint i32 %23, %13, !dbg !22
  %25 = add i32 %24, %22, !dbg !23
  %26 = sext i32 %25 to i64, !dbg !24
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !24
  %28 = and i1 %21, %11, !dbg !25
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %28, i32 0, i1 %28) #5, !dbg !26
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %28, i32 0, i1 %28) #5, !dbg !26
  %31 = and i32 %12, 12, !dbg !27
  %32 = icmp eq i32 %31, 4, !dbg !27
  %33 = add nuw nsw i32 %24, 12, !dbg !28
  %34 = add i32 %33, %22, !dbg !29
  %35 = sext i32 %34 to i64, !dbg !30
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !30
  %37 = and i1 %32, %11, !dbg !31
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %37, i32 0, i1 %37) #5, !dbg !32
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %37, i32 0, i1 %37) #5, !dbg !32
  %40 = icmp eq i32 %31, 8, !dbg !33
  %41 = add i32 %24, -4, !dbg !34
  %42 = add i32 %41, %22, !dbg !35
  %43 = sext i32 %42 to i64, !dbg !36
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !36
  %45 = and i1 %40, %11, !dbg !37
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %45, i32 0, i1 %45) #5, !dbg !38
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %45, i32 0, i1 %45) #5, !dbg !38
  %48 = icmp samesign ugt i32 %13, 11, !dbg !39
  %49 = add nuw nsw i32 %24, 8, !dbg !40
  %50 = add i32 %49, %22, !dbg !41
  %51 = sext i32 %50 to i64, !dbg !42
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !42
  %53 = and i1 %48, %11, !dbg !43
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %53, i32 0, i1 %53) #5, !dbg !44
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %53, i32 0, i1 %53) #5, !dbg !44
  %.v = select i1 %40, i32 %46, i32 %54, !dbg !45
  %.v1 = select i1 %40, i32 %47, i32 %55, !dbg !45
  %.v2 = select i1 %32, i32 %38, i32 %.v, !dbg !46
  %.v3 = select i1 %32, i32 %39, i32 %.v1, !dbg !46
  %.v4 = select i1 %21, i32 %29, i32 %.v2, !dbg !47
  %56 = bitcast i32 %.v4 to float, !dbg !47
  %.v5 = select i1 %21, i32 %30, i32 %.v3, !dbg !47
  %57 = bitcast i32 %.v5 to float, !dbg !47
  %58 = select i1 %11, float %56, float 0.000000e+00, !dbg !48
  %59 = select i1 %11, float %57, float 0.000000e+00, !dbg !48
  %60 = bitcast float %58 to i32, !dbg !49
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 8, i32 31), !dbg !49
  %62 = bitcast i32 %61 to float, !dbg !49
  %63 = fadd float %58, %62, !dbg !53
  %64 = bitcast float %63 to i32, !dbg !49
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 4, i32 31), !dbg !49
  %66 = bitcast i32 %65 to float, !dbg !49
  %67 = fadd float %63, %66, !dbg !53
  %68 = bitcast float %67 to i32, !dbg !49
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 2, i32 31), !dbg !49
  %70 = bitcast i32 %69 to float, !dbg !49
  %71 = fadd float %67, %70, !dbg !53
  %72 = bitcast float %71 to i32, !dbg !49
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 1, i32 31), !dbg !49
  %74 = bitcast i32 %73 to float, !dbg !49
  %75 = fadd float %71, %74, !dbg !53
  %76 = bitcast float %59 to i32, !dbg !49
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 8, i32 31), !dbg !49
  %78 = bitcast i32 %77 to float, !dbg !49
  %79 = fadd float %59, %78, !dbg !53
  %80 = bitcast float %79 to i32, !dbg !49
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 4, i32 31), !dbg !49
  %82 = bitcast i32 %81 to float, !dbg !49
  %83 = fadd float %79, %82, !dbg !53
  %84 = bitcast float %83 to i32, !dbg !49
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 2, i32 31), !dbg !49
  %86 = bitcast i32 %85 to float, !dbg !49
  %87 = fadd float %83, %86, !dbg !53
  %88 = bitcast float %87 to i32, !dbg !49
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 1, i32 31), !dbg !49
  %90 = bitcast i32 %89 to float, !dbg !49
  %91 = fadd float %87, %90, !dbg !53
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float 1.600000e+01) #5, !dbg !55
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %91, float 1.600000e+01) #5, !dbg !55
  %94 = fsub float %56, %92, !dbg !56
  %95 = fsub float %57, %93, !dbg !56
  %96 = fmul float %94, %94, !dbg !57
  %97 = fmul float %95, %95, !dbg !57
  %98 = select i1 %11, float %96, float 0.000000e+00, !dbg !58
  %99 = select i1 %11, float %97, float 0.000000e+00, !dbg !58
  %100 = bitcast float %98 to i32, !dbg !59
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 8, i32 31), !dbg !59
  %102 = bitcast i32 %101 to float, !dbg !59
  %103 = fadd float %98, %102, !dbg !61
  %104 = bitcast float %103 to i32, !dbg !59
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 4, i32 31), !dbg !59
  %106 = bitcast i32 %105 to float, !dbg !59
  %107 = fadd float %103, %106, !dbg !61
  %108 = bitcast float %107 to i32, !dbg !59
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 2, i32 31), !dbg !59
  %110 = bitcast i32 %109 to float, !dbg !59
  %111 = fadd float %107, %110, !dbg !61
  %112 = bitcast float %111 to i32, !dbg !59
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 1, i32 31), !dbg !59
  %114 = bitcast i32 %113 to float, !dbg !59
  %115 = fadd float %111, %114, !dbg !61
  %116 = bitcast float %99 to i32, !dbg !59
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 8, i32 31), !dbg !59
  %118 = bitcast i32 %117 to float, !dbg !59
  %119 = fadd float %99, %118, !dbg !61
  %120 = bitcast float %119 to i32, !dbg !59
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 4, i32 31), !dbg !59
  %122 = bitcast i32 %121 to float, !dbg !59
  %123 = fadd float %119, %122, !dbg !61
  %124 = bitcast float %123 to i32, !dbg !59
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 2, i32 31), !dbg !59
  %126 = bitcast i32 %125 to float, !dbg !59
  %127 = fadd float %123, %126, !dbg !61
  %128 = bitcast float %127 to i32, !dbg !59
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 1, i32 31), !dbg !59
  %130 = bitcast i32 %129 to float, !dbg !59
  %131 = fadd float %127, %130, !dbg !61
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float 1.600000e+01) #5, !dbg !62
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float 1.600000e+01) #5, !dbg !62
  %134 = fadd float %132, 0x3EE4F8B580000000, !dbg !63
  %135 = fadd float %133, 0x3EE4F8B580000000, !dbg !63
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %.not.i = icmp eq i32 %136, 0, !dbg !64
  br i1 %.not.i, label %139, label %137, !dbg !64

137:                                              ; preds = %9
  %138 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %134), !dbg !64
  br label %__nv_rsqrtf.exit, !dbg !64

139:                                              ; preds = %9
  %140 = tail call float @llvm.nvvm.rsqrt.approx.f(float %134), !dbg !64
  br label %__nv_rsqrtf.exit, !dbg !64

__nv_rsqrtf.exit:                                 ; preds = %137, %139
  %.0.i = phi float [ %138, %137 ], [ %140, %139 ], !dbg !64
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !64
  %.not.i6 = icmp eq i32 %141, 0, !dbg !64
  br i1 %.not.i6, label %144, label %142, !dbg !64

142:                                              ; preds = %__nv_rsqrtf.exit
  %143 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %135), !dbg !64
  br label %__nv_rsqrtf.exit8, !dbg !64

144:                                              ; preds = %__nv_rsqrtf.exit
  %145 = tail call float @llvm.nvvm.rsqrt.approx.f(float %135), !dbg !64
  br label %__nv_rsqrtf.exit8, !dbg !64

__nv_rsqrtf.exit8:                                ; preds = %142, %144
  %.0.i7 = phi float [ %143, %142 ], [ %145, %144 ], !dbg !64
  %146 = bitcast i32 %20 to float, !dbg !18
  %147 = bitcast i32 %18 to float, !dbg !16
  %148 = fmul float %94, %.0.i, !dbg !65
  %149 = fmul float %148, %147, !dbg !66
  %150 = fadd float %149, %146, !dbg !67
  %151 = shl i32 %10, 4, !dbg !68
  %152 = or disjoint i32 %151, %13, !dbg !69
  %153 = sext i32 %152 to i64, !dbg !70
  %154 = getelementptr float, ptr addrspace(1) %4, i64 %153, !dbg !70
  %155 = and i32 %12, 48, !dbg !71
  %156 = icmp eq i32 %155, 0, !dbg !71
  %157 = and i1 %156, %11, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %.v4, ptr addrspace(1) %154, i1 %157) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %158 = sext i32 %10 to i64, !dbg !73
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !73
  %urem = and i32 %12, 63, !dbg !74
  %160 = icmp eq i32 %urem, 0, !dbg !74
  %161 = bitcast float %.0.i7 to i32, !dbg !74
  %162 = and i1 %160, %11, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %161, ptr addrspace(1) %159, i1 %162) #5, !dbg !74
  %163 = getelementptr float, ptr addrspace(1) %6, i64 %153, !dbg !75
  %164 = bitcast float %150 to i32, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %164, ptr addrspace(1) %163, i1 %157) #5, !dbg !76
  %165 = getelementptr float, ptr addrspace(1) %5, i64 %158, !dbg !77
  %166 = bitcast float %93 to i32, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %166, ptr addrspace(1) %165, i1 %162) #5, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crhhp7vu7wollvoawrjqvqmtgt2m7j7qg6gdwrcc3txhz37duzvd.py", directory: "inductor_cache/rh")
!4 = !{ptr @triton_per_fused_cat_native_layer_norm_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_cat_native_layer_norm_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_cat_native_layer_norm_0", linkageName: "triton_per_fused_cat_native_layer_norm_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 30, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 31, scope: !7)
!16 = !DILocation(line: 33, column: 36, scope: !7)
!17 = !DILocation(line: 34, column: 31, scope: !7)
!18 = !DILocation(line: 34, column: 36, scope: !7)
!19 = !DILocation(line: 39, column: 18, scope: !7)
!20 = !DILocation(line: 40, column: 32, scope: !7)
!21 = !DILocation(line: 40, column: 40, scope: !7)
!22 = !DILocation(line: 40, column: 37, scope: !7)
!23 = !DILocation(line: 40, column: 46, scope: !7)
!24 = !DILocation(line: 40, column: 30, scope: !7)
!25 = !DILocation(line: 40, column: 59, scope: !7)
!26 = !DILocation(line: 40, column: 52, scope: !7)
!27 = !DILocation(line: 44, column: 18, scope: !7)
!28 = !DILocation(line: 45, column: 59, scope: !7)
!29 = !DILocation(line: 45, column: 52, scope: !7)
!30 = !DILocation(line: 45, column: 31, scope: !7)
!31 = !DILocation(line: 45, column: 72, scope: !7)
!32 = !DILocation(line: 45, column: 65, scope: !7)
!33 = !DILocation(line: 49, column: 20, scope: !7)
!34 = !DILocation(line: 50, column: 58, scope: !7)
!35 = !DILocation(line: 50, column: 51, scope: !7)
!36 = !DILocation(line: 50, column: 31, scope: !7)
!37 = !DILocation(line: 50, column: 72, scope: !7)
!38 = !DILocation(line: 50, column: 64, scope: !7)
!39 = !DILocation(line: 51, column: 20, scope: !7)
!40 = !DILocation(line: 54, column: 60, scope: !7)
!41 = !DILocation(line: 54, column: 52, scope: !7)
!42 = !DILocation(line: 54, column: 31, scope: !7)
!43 = !DILocation(line: 54, column: 74, scope: !7)
!44 = !DILocation(line: 54, column: 66, scope: !7)
!45 = !DILocation(line: 55, column: 35, scope: !7)
!46 = !DILocation(line: 56, column: 34, scope: !7)
!47 = !DILocation(line: 57, column: 33, scope: !7)
!48 = !DILocation(line: 61, column: 35, scope: !7)
!49 = !DILocation(line: 267, column: 36, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!52 = !DILocation(line: 62, column: 26, scope: !7)
!53 = !DILocation(line: 256, column: 15, scope: !54, inlinedAt: !52)
!54 = distinct !DILexicalBlockFile(scope: !50, file: !51, discriminator: 0)
!55 = !DILocation(line: 65, column: 20, scope: !7)
!56 = !DILocation(line: 66, column: 20, scope: !7)
!57 = !DILocation(line: 67, column: 20, scope: !7)
!58 = !DILocation(line: 69, column: 35, scope: !7)
!59 = !DILocation(line: 267, column: 36, scope: !50, inlinedAt: !60)
!60 = !DILocation(line: 70, column: 26, scope: !7)
!61 = !DILocation(line: 256, column: 15, scope: !54, inlinedAt: !60)
!62 = !DILocation(line: 72, column: 20, scope: !7)
!63 = !DILocation(line: 74, column: 20, scope: !7)
!64 = !DILocation(line: 75, column: 28, scope: !7)
!65 = !DILocation(line: 77, column: 20, scope: !7)
!66 = !DILocation(line: 78, column: 20, scope: !7)
!67 = !DILocation(line: 79, column: 20, scope: !7)
!68 = !DILocation(line: 80, column: 33, scope: !7)
!69 = !DILocation(line: 80, column: 30, scope: !7)
!70 = !DILocation(line: 80, column: 25, scope: !7)
!71 = !DILocation(line: 80, column: 45, scope: !7)
!72 = !DILocation(line: 81, column: 4, scope: !7)
!73 = !DILocation(line: 82, column: 28, scope: !7)
!74 = !DILocation(line: 82, column: 40, scope: !7)
!75 = !DILocation(line: 83, column: 25, scope: !7)
!76 = !DILocation(line: 83, column: 45, scope: !7)
!77 = !DILocation(line: 84, column: 25, scope: !7)
!78 = !DILocation(line: 84, column: 37, scope: !7)
!79 = !DILocation(line: 84, column: 4, scope: !7)
