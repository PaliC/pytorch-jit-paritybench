; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused__weight_norm_interface_clamp_min_div_linalg_vector_norm_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %9 = and i32 %8, 31, !dbg !10
  %10 = lshr i32 %8, 5, !dbg !10
  %11 = shl i32 %8, 2, !dbg !10
  %12 = and i32 %11, 2044, !dbg !10
  %13 = zext nneg i32 %12 to i64, !dbg !11
  %14 = getelementptr float, ptr addrspace(1) %2, i64 %13, !dbg !11
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %14, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0, !dbg !12
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1, !dbg !12
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2, !dbg !12
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3, !dbg !12
  %20 = bitcast i32 %16 to float, !dbg !12
  %21 = bitcast i32 %17 to float, !dbg !12
  %22 = bitcast i32 %18 to float, !dbg !12
  %23 = bitcast i32 %19 to float, !dbg !12
  %24 = fmul float %20, %20, !dbg !13
  %25 = fmul float %21, %21, !dbg !13
  %26 = fmul float %22, %22, !dbg !13
  %27 = fmul float %23, %23, !dbg !13
  %28 = fadd float %24, %25, !dbg !14
  %29 = fadd float %26, %28, !dbg !14
  %30 = fadd float %27, %29, !dbg !14
  %31 = bitcast float %30 to i32, !dbg !19
  %32 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %31, i32 16, i32 31), !dbg !19
  %33 = bitcast i32 %32 to float, !dbg !19
  %34 = fadd float %30, %33, !dbg !14
  %35 = bitcast float %34 to i32, !dbg !19
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 8, i32 31), !dbg !19
  %37 = bitcast i32 %36 to float, !dbg !19
  %38 = fadd float %34, %37, !dbg !14
  %39 = bitcast float %38 to i32, !dbg !19
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 4, i32 31), !dbg !19
  %41 = bitcast i32 %40 to float, !dbg !19
  %42 = fadd float %38, %41, !dbg !14
  %43 = bitcast float %42 to i32, !dbg !19
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 2, i32 31), !dbg !19
  %45 = bitcast i32 %44 to float, !dbg !19
  %46 = fadd float %42, %45, !dbg !14
  %47 = bitcast float %46 to i32, !dbg !19
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 1, i32 31), !dbg !19
  %49 = bitcast i32 %48 to float, !dbg !19
  %50 = fadd float %46, %49, !dbg !14
  %51 = icmp eq i32 %9, 0, !dbg !19
  %52 = and i32 %10, 15, !dbg !19
  %53 = zext nneg i32 %52 to i64, !dbg !19
  %54 = getelementptr float, ptr addrspace(3) @global_smem, i64 %53, !dbg !19
  %55 = bitcast float %50 to <1 x i32>, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %55, i1 %51) #5, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %56 = icmp slt i32 %8, 16, !dbg !19
  %57 = sext i32 %8 to i64, !dbg !19
  %58 = getelementptr float, ptr addrspace(3) @global_smem, i64 %57, !dbg !19
  %59 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %58, i1 %56) #5, !dbg !19
  %60 = bitcast i32 %59 to float, !dbg !19
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 8, i32 31), !dbg !19
  %62 = bitcast i32 %61 to float, !dbg !19
  %63 = fadd float %60, %62, !dbg !14
  %64 = bitcast float %63 to i32, !dbg !19
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 4, i32 31), !dbg !19
  %66 = bitcast i32 %65 to float, !dbg !19
  %67 = fadd float %63, %66, !dbg !14
  %68 = bitcast float %67 to i32, !dbg !19
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 2, i32 31), !dbg !19
  %70 = bitcast i32 %69 to float, !dbg !19
  %71 = fadd float %67, %70, !dbg !14
  %72 = bitcast float %71 to i32, !dbg !19
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 1, i32 31), !dbg !19
  %74 = bitcast i32 %73 to float, !dbg !19
  %75 = fadd float %71, %74, !dbg !14
  %76 = and i32 %8, 15, !dbg !19
  %77 = icmp eq i32 %76, 0, !dbg !19
  %78 = and i1 %56, %77, !dbg !19
  %79 = bitcast float %75 to <1 x i32>, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %79, i1 %78) #5, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %80 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !19
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !20
  %.not.i = icmp eq i32 %81, 0, !dbg !20
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !20
  %.not1.i = icmp eq i32 %82, 0, !dbg !20
  br i1 %.not.i, label %88, label %83, !dbg !20

83:                                               ; preds = %7
  br i1 %.not1.i, label %86, label %84, !dbg !20

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #5, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #5, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

88:                                               ; preds = %7
  br i1 %.not1.i, label %91, label %89, !dbg !20

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #5, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #5, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

__nv_sqrtf.exit:                                  ; preds = %84, %86, %89, %91
  %.0.i = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !20
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !20
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !20
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !20
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !20
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !20
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !20
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !20
  %.not.i16 = icmp eq i32 %99, 0, !dbg !20
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !20
  %.not1.i19 = icmp eq i32 %100, 0, !dbg !20
  br i1 %.not.i16, label %106, label %101, !dbg !20

101:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %104, label %102, !dbg !20

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #5, !dbg !20
  br label %__nv_sqrtf.exit20, !dbg !20

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #5, !dbg !20
  br label %__nv_sqrtf.exit20, !dbg !20

106:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %109, label %107, !dbg !20

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #5, !dbg !20
  br label %__nv_sqrtf.exit20, !dbg !20

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #5, !dbg !20
  br label %__nv_sqrtf.exit20, !dbg !20

__nv_sqrtf.exit20:                                ; preds = %102, %104, %107, %109
  %.0.i18 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %urem = and i32 %8, 511, !dbg !22
  %111 = icmp eq i32 %urem, 0, !dbg !22
  %112 = bitcast float %.0.i to i32, !dbg !22
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %112, ptr addrspace(1) %0, i1 %111) #5, !dbg !22
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #5, !dbg !23
  %114 = bitcast i32 %113 to float, !dbg !23
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %14, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !24
  %116 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !24
  %117 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !24
  %118 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !24
  %119 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !24
  %120 = bitcast i32 %116 to float, !dbg !24
  %121 = bitcast i32 %117 to float, !dbg !24
  %122 = bitcast i32 %118 to float, !dbg !24
  %123 = bitcast i32 %119 to float, !dbg !24
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %114, float %.0.i18) #5, !dbg !25
  %125 = fmul float %124, %120, !dbg !26
  %126 = fmul float %124, %121, !dbg !26
  %127 = fmul float %124, %122, !dbg !26
  %128 = fmul float %124, %123, !dbg !26
  %129 = fmul float %125, %125, !dbg !27
  %130 = fmul float %126, %126, !dbg !27
  %131 = fmul float %127, %127, !dbg !27
  %132 = fmul float %128, %128, !dbg !27
  %133 = getelementptr float, ptr addrspace(1) %4, i64 %13, !dbg !28
  %134 = bitcast float %125 to i32, !dbg !29
  %135 = bitcast float %126 to i32, !dbg !29
  %136 = bitcast float %127 to i32, !dbg !29
  %137 = bitcast float %128 to i32, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %134, i32 %135, i32 %136, i32 %137, ptr addrspace(1) %133, i1 true) #5, !dbg !29
  %138 = fadd float %129, %130, !dbg !30
  %139 = fadd float %131, %138, !dbg !30
  %140 = fadd float %132, %139, !dbg !30
  %141 = bitcast float %140 to i32, !dbg !32
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 16, i32 31), !dbg !32
  %143 = bitcast i32 %142 to float, !dbg !32
  %144 = fadd float %140, %143, !dbg !30
  %145 = bitcast float %144 to i32, !dbg !32
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 8, i32 31), !dbg !32
  %147 = bitcast i32 %146 to float, !dbg !32
  %148 = fadd float %144, %147, !dbg !30
  %149 = bitcast float %148 to i32, !dbg !32
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 4, i32 31), !dbg !32
  %151 = bitcast i32 %150 to float, !dbg !32
  %152 = fadd float %148, %151, !dbg !30
  %153 = bitcast float %152 to i32, !dbg !32
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 2, i32 31), !dbg !32
  %155 = bitcast i32 %154 to float, !dbg !32
  %156 = fadd float %152, %155, !dbg !30
  %157 = bitcast float %156 to i32, !dbg !32
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 1, i32 31), !dbg !32
  %159 = bitcast i32 %158 to float, !dbg !32
  %160 = fadd float %156, %159, !dbg !30
  %161 = bitcast float %160 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %161, i1 %51) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %162 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %58, i1 %56) #5, !dbg !32
  %163 = bitcast i32 %162 to float, !dbg !32
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 8, i32 31), !dbg !32
  %165 = bitcast i32 %164 to float, !dbg !32
  %166 = fadd float %163, %165, !dbg !30
  %167 = bitcast float %166 to i32, !dbg !32
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 4, i32 31), !dbg !32
  %169 = bitcast i32 %168 to float, !dbg !32
  %170 = fadd float %166, %169, !dbg !30
  %171 = bitcast float %170 to i32, !dbg !32
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 2, i32 31), !dbg !32
  %173 = bitcast i32 %172 to float, !dbg !32
  %174 = fadd float %170, %173, !dbg !30
  %175 = bitcast float %174 to i32, !dbg !32
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 1, i32 31), !dbg !32
  %177 = bitcast i32 %176 to float, !dbg !32
  %178 = fadd float %174, %177, !dbg !30
  %179 = bitcast float %178 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %179, i1 %78) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %180 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not.i21 = icmp eq i32 %181, 0, !dbg !33
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !33
  %.not1.i24 = icmp eq i32 %182, 0, !dbg !33
  br i1 %.not.i21, label %188, label %183, !dbg !33

183:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %186, label %184, !dbg !33

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %180) #5, !dbg !33
  br label %__nv_sqrtf.exit25, !dbg !33

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %180) #5, !dbg !33
  br label %__nv_sqrtf.exit25, !dbg !33

188:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %191, label %189, !dbg !33

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.f(float %180) #5, !dbg !33
  br label %__nv_sqrtf.exit25, !dbg !33

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.f(float %180) #5, !dbg !33
  br label %__nv_sqrtf.exit25, !dbg !33

__nv_sqrtf.exit25:                                ; preds = %184, %186, %189, %191
  %.0.i23 = phi float [ %185, %184 ], [ %187, %186 ], [ %190, %189 ], [ %192, %191 ], !dbg !33
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !33
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !33
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !33
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not.i41 = icmp eq i32 %199, 0, !dbg !33
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !33
  %.not1.i44 = icmp eq i32 %200, 0, !dbg !33
  br i1 %.not.i41, label %206, label %201, !dbg !33

201:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i44, label %204, label %202, !dbg !33

202:                                              ; preds = %201
  %203 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %180) #5, !dbg !33
  br label %__nv_sqrtf.exit45, !dbg !33

204:                                              ; preds = %201
  %205 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %180) #5, !dbg !33
  br label %__nv_sqrtf.exit45, !dbg !33

206:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i44, label %209, label %207, !dbg !33

207:                                              ; preds = %206
  %208 = tail call float @llvm.nvvm.sqrt.rn.f(float %180) #5, !dbg !33
  br label %__nv_sqrtf.exit45, !dbg !33

209:                                              ; preds = %206
  %210 = tail call float @llvm.nvvm.sqrt.approx.f(float %180) #5, !dbg !33
  br label %__nv_sqrtf.exit45, !dbg !33

__nv_sqrtf.exit45:                                ; preds = %202, %204, %207, %209
  %.0.i43 = phi float [ %203, %202 ], [ %205, %204 ], [ %208, %207 ], [ %210, %209 ], !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %211 = bitcast float %.0.i23 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %211, ptr addrspace(1) %1, i1 %111) #5, !dbg !35
  %212 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %133, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !36
  %213 = extractvalue { i32, i32, i32, i32 } %212, 0, !dbg !36
  %214 = extractvalue { i32, i32, i32, i32 } %212, 1, !dbg !36
  %215 = extractvalue { i32, i32, i32, i32 } %212, 2, !dbg !36
  %216 = extractvalue { i32, i32, i32, i32 } %212, 3, !dbg !36
  %217 = bitcast i32 %213 to float, !dbg !36
  %218 = bitcast i32 %214 to float, !dbg !36
  %219 = bitcast i32 %215 to float, !dbg !36
  %220 = bitcast i32 %216 to float, !dbg !36
  %221 = fcmp ogt float %.0.i43, 0x3D71979980000000, !dbg !37
  %222 = fcmp uno float %.0.i43, 0.000000e+00, !dbg !41
  %223 = or i1 %221, %222, !dbg !42
  %224 = select i1 %223, float %.0.i43, float 0x3D71979980000000, !dbg !43
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %217, float %224) #5, !dbg !44
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %218, float %224) #5, !dbg !44
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %219, float %224) #5, !dbg !44
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %220, float %224) #5, !dbg !44
  %229 = getelementptr float, ptr addrspace(1) %5, i64 %13, !dbg !45
  %230 = bitcast float %225 to i32, !dbg !46
  %231 = bitcast float %226 to i32, !dbg !46
  %232 = bitcast float %227 to i32, !dbg !46
  %233 = bitcast float %228 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %230, i32 %231, i32 %232, i32 %233, ptr addrspace(1) %229, i1 true) #5, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py", directory: "inductor_cache/ml")
!4 = !{ptr @triton_red_fused__weight_norm_interface_clamp_min_div_linalg_vector_norm_6, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__weight_norm_interface_clamp_min_div_linalg_vector_norm_6, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__weight_norm_interface_clamp_min_div_linalg_vector_norm_6", linkageName: "triton_red_fused__weight_norm_interface_clamp_min_div_linalg_vector_norm_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 25, column: 33, scope: !7)
!11 = !DILocation(line: 31, column: 34, scope: !7)
!12 = !DILocation(line: 31, column: 39, scope: !7)
!13 = !DILocation(line: 32, column: 22, scope: !7)
!14 = !DILocation(line: 256, column: 15, scope: !15, inlinedAt: !18)
!15 = distinct !DILexicalBlockFile(scope: !17, file: !16, discriminator: 0)
!16 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!17 = distinct !DILexicalBlockFile(scope: !7, file: !16, discriminator: 0)
!18 = !DILocation(line: 36, column: 25, scope: !7)
!19 = !DILocation(line: 267, column: 36, scope: !17, inlinedAt: !18)
!20 = !DILocation(line: 37, column: 26, scope: !7)
!21 = !DILocation(line: 38, column: 4, scope: !7)
!22 = !DILocation(line: 39, column: 70, scope: !7)
!23 = !DILocation(line: 40, column: 19, scope: !7)
!24 = !DILocation(line: 47, column: 39, scope: !7)
!25 = !DILocation(line: 48, column: 22, scope: !7)
!26 = !DILocation(line: 49, column: 23, scope: !7)
!27 = !DILocation(line: 50, column: 24, scope: !7)
!28 = !DILocation(line: 54, column: 29, scope: !7)
!29 = !DILocation(line: 54, column: 76, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !15, inlinedAt: !31)
!31 = !DILocation(line: 55, column: 27, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !17, inlinedAt: !31)
!33 = !DILocation(line: 56, column: 27, scope: !7)
!34 = !DILocation(line: 57, column: 4, scope: !7)
!35 = !DILocation(line: 58, column: 71, scope: !7)
!36 = !DILocation(line: 63, column: 41, scope: !7)
!37 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!39 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!40 = !DILocation(line: 65, column: 46, scope: !7)
!41 = !DILocation(line: 120, column: 21, scope: !38, inlinedAt: !40)
!42 = !DILocation(line: 120, column: 16, scope: !38, inlinedAt: !40)
!43 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !40)
!44 = !DILocation(line: 66, column: 24, scope: !7)
!45 = !DILocation(line: 67, column: 29, scope: !7)
!46 = !DILocation(line: 67, column: 76, scope: !7)
!47 = !DILocation(line: 59, column: 4, scope: !7)
