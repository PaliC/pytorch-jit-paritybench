#loc = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":19:0)
#loc1 = loc(unknown)
#loc11 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":36:25)
#loc28 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":55:27)
#loc45 = loc(callsite(#loc1 at #loc11))
#loc48 = loc(callsite(#loc1 at #loc28))
module {
  tt.func public @triton_red_fused__weight_norm_interface_clamp_min_div_linalg_vector_norm_6(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<9.99999996E-13> : tensor<1x1xf32> loc(#loc1)
    %cst_0 = arith.constant dense<2048> : tensor<1x2048xi32> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32> loc(#loc1)
    %0 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<2048xi32> -> tensor<1x2048xi32> loc(#loc3)
    %2 = arith.cmpi slt, %1, %cst_0 : tensor<1x2048xi32> loc(#loc4)
    %3 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>> loc(#loc5)
    %4 = tt.addptr %3, %1 : tensor<1x2048x!tt.ptr<f32>>, tensor<1x2048xi32> loc(#loc5)
    %5 = tt.load %4, %2, %cst_1 evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<f32>> loc(#loc6)
    %6 = arith.mulf %5, %5 : tensor<1x2048xf32> loc(#loc7)
    %7 = arith.addf %6, %cst_1 : tensor<1x2048xf32> loc(#loc8)
    %8 = arith.select %2, %7, %cst_1 : tensor<1x2048xi1>, tensor<1x2048xf32> loc(#loc9)
    %9 = "tt.reduce"(%8) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc11)), %arg8: f32 loc(callsite(#loc1 at #loc11))):
      %40 = arith.addf %arg7, %arg8 : f32 loc(#loc53)
      tt.reduce.return %40 : f32 loc(#loc44)
    }) : (tensor<1x2048xf32>) -> tensor<1xf32> loc(#loc44)
    %10 = tt.expand_dims %9 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc13)
    %11 = tt.extern_elementwise %10 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32> loc(#loc14)
    gpu.barrier loc(#loc15)
    %12 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc16)
    %13 = tt.splat %12 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc16)
    tt.store %13, %11 : tensor<1x1x!tt.ptr<f32>> loc(#loc17)
    %14 = tt.addptr %arg3, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc18)
    %15 = tt.load %14 : !tt.ptr<f32> loc(#loc19)
    %16 = tt.load %4, %2, %cst_1 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>> loc(#loc20)
    %17 = tt.splat %15 : f32 -> tensor<1x1xf32> loc(#loc21)
    %18 = arith.divf %17, %11 : tensor<1x1xf32> loc(#loc21)
    %19 = tt.broadcast %18 : tensor<1x1xf32> -> tensor<1x2048xf32> loc(#loc21)
    %20 = arith.mulf %16, %19 : tensor<1x2048xf32> loc(#loc22)
    %21 = arith.mulf %20, %20 : tensor<1x2048xf32> loc(#loc23)
    %22 = arith.addf %21, %cst_1 : tensor<1x2048xf32> loc(#loc24)
    %23 = arith.select %2, %22, %cst_1 : tensor<1x2048xi1>, tensor<1x2048xf32> loc(#loc25)
    %24 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>> loc(#loc26)
    %25 = tt.addptr %24, %1 : tensor<1x2048x!tt.ptr<f32>>, tensor<1x2048xi32> loc(#loc26)
    tt.store %25, %20, %2 : tensor<1x2048x!tt.ptr<f32>> loc(#loc27)
    %26 = "tt.reduce"(%23) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc28)), %arg8: f32 loc(callsite(#loc1 at #loc28))):
      %40 = arith.addf %arg7, %arg8 : f32 loc(#loc54)
      tt.reduce.return %40 : f32 loc(#loc47)
    }) : (tensor<1x2048xf32>) -> tensor<1xf32> loc(#loc47)
    %27 = tt.expand_dims %26 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc29)
    %28 = tt.extern_elementwise %27 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32> loc(#loc30)
    gpu.barrier loc(#loc31)
    %29 = tt.addptr %arg1, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc32)
    %30 = tt.splat %29 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc32)
    tt.store %30, %28 : tensor<1x1x!tt.ptr<f32>> loc(#loc33)
    %31 = tt.load %25, %2, %cst_1 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>> loc(#loc34)
    %32 = arith.cmpf ogt, %28, %cst : tensor<1x1xf32> loc(#loc49)
    %33 = arith.cmpf une, %28, %28 : tensor<1x1xf32> loc(#loc50)
    %34 = arith.ori %32, %33 : tensor<1x1xi1> loc(#loc51)
    %35 = arith.select %34, %28, %cst : tensor<1x1xi1>, tensor<1x1xf32> loc(#loc52)
    %36 = tt.broadcast %35 : tensor<1x1xf32> -> tensor<1x2048xf32> loc(#loc40)
    %37 = arith.divf %31, %36 : tensor<1x2048xf32> loc(#loc40)
    %38 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>> loc(#loc41)
    %39 = tt.addptr %38, %1 : tensor<1x2048x!tt.ptr<f32>>, tensor<1x2048xi32> loc(#loc41)
    tt.store %39, %37, %2 : tensor<1x2048x!tt.ptr<f32>> loc(#loc42)
    tt.return loc(#loc43)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":25:25)
#loc3 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":25:33)
#loc4 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":29:25)
#loc5 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":31:34)
#loc6 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":31:39)
#loc7 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":32:22)
#loc8 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":34:23)
#loc9 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":35:38)
#loc10 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc12 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc13 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":36:28)
#loc14 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":37:26)
#loc15 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":38:4)
#loc16 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":39:28)
#loc17 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":39:70)
#loc18 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":40:30)
#loc19 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":40:19)
#loc20 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":47:39)
#loc21 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":48:22)
#loc22 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":49:23)
#loc23 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":50:24)
#loc24 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":52:25)
#loc25 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":53:40)
#loc26 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":54:29)
#loc27 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":54:76)
#loc29 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":55:30)
#loc30 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":56:27)
#loc31 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":57:4)
#loc32 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":58:28)
#loc33 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":58:71)
#loc34 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":63:41)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc36 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":65:46)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc38 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc39 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc40 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":66:24)
#loc41 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":67:29)
#loc42 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":67:76)
#loc43 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":59:4)
#loc44 = loc(callsite(#loc10 at #loc11))
#loc46 = loc(callsite(#loc12 at #loc10))
#loc47 = loc(callsite(#loc10 at #loc28))
#loc49 = loc(callsite(#loc35 at #loc36))
#loc50 = loc(callsite(#loc37 at #loc36))
#loc51 = loc(callsite(#loc38 at #loc36))
#loc52 = loc(callsite(#loc39 at #loc36))
#loc53 = loc(callsite(#loc46 at #loc11))
#loc54 = loc(callsite(#loc46 at #loc28))
