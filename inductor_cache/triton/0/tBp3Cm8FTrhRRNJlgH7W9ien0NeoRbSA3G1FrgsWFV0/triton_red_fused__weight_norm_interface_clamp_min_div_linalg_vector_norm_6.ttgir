#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [0, 1]}>
#loc = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":19:0)
#loc1 = loc(unknown)
#loc10 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":36:25)
#loc27 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":55:27)
#loc44 = loc(callsite(#loc1 at #loc10))
#loc47 = loc(callsite(#loc1 at #loc27))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__weight_norm_interface_clamp_min_div_linalg_vector_norm_6(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<9.99999996E-13> : tensor<1x1xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<2048> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2048xi32, #blocked> loc(#loc2)
    %2 = arith.cmpi slt, %1, %cst_1 : tensor<1x2048xi32, #blocked> loc(#loc3)
    %3 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc4)
    %4 = tt.addptr %3, %1 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc4)
    %5 = tt.load %4, %2, %cst evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc5)
    %6 = arith.mulf %5, %5 : tensor<1x2048xf32, #blocked> loc(#loc6)
    %7 = arith.addf %6, %cst : tensor<1x2048xf32, #blocked> loc(#loc7)
    %8 = arith.select %2, %7, %cst : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc8)
    %9 = "tt.reduce"(%8) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc10)), %arg8: f32 loc(callsite(#loc1 at #loc10))):
      %46 = arith.addf %arg7, %arg8 : f32 loc(#loc52)
      tt.reduce.return %46 : f32 loc(#loc43)
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc43)
    %10 = triton_gpu.convert_layout %9 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc12)
    %11 = tt.expand_dims %10 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc13)
    %12 = tt.expand_dims %9 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc13)
    %13 = tt.extern_elementwise %11 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc12)
    %14 = tt.extern_elementwise %12 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc12)
    gpu.barrier loc(#loc14)
    %15 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc15)
    %16 = tt.splat %15 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc16)
    tt.store %16, %13 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc16)
    %17 = tt.addptr %arg3, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc17)
    %18 = tt.load %17 : !tt.ptr<f32> loc(#loc18)
    %19 = tt.load %4, %2, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc19)
    %20 = tt.splat %18 : f32 -> tensor<1x1xf32, #blocked> loc(#loc20)
    %21 = arith.divf %20, %14 : tensor<1x1xf32, #blocked> loc(#loc20)
    %22 = tt.broadcast %21 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc20)
    %23 = arith.mulf %19, %22 : tensor<1x2048xf32, #blocked> loc(#loc21)
    %24 = arith.mulf %23, %23 : tensor<1x2048xf32, #blocked> loc(#loc22)
    %25 = arith.addf %24, %cst : tensor<1x2048xf32, #blocked> loc(#loc23)
    %26 = arith.select %2, %25, %cst : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc24)
    %27 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc25)
    %28 = tt.addptr %27, %1 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc25)
    tt.store %28, %23, %2 : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc26)
    %29 = "tt.reduce"(%26) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc27)), %arg8: f32 loc(callsite(#loc1 at #loc27))):
      %46 = arith.addf %arg7, %arg8 : f32 loc(#loc53)
      tt.reduce.return %46 : f32 loc(#loc46)
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc46)
    %30 = triton_gpu.convert_layout %29 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc28)
    %31 = tt.expand_dims %30 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc29)
    %32 = tt.expand_dims %29 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc29)
    %33 = tt.extern_elementwise %31 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc28)
    %34 = tt.extern_elementwise %32 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc28)
    gpu.barrier loc(#loc30)
    %35 = tt.addptr %arg1, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc31)
    %36 = tt.splat %35 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc32)
    tt.store %36, %33 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc32)
    %37 = tt.load %28, %2, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc33)
    %38 = arith.cmpf ogt, %34, %cst_0 : tensor<1x1xf32, #blocked> loc(#loc48)
    %39 = arith.cmpf une, %34, %34 : tensor<1x1xf32, #blocked> loc(#loc49)
    %40 = arith.ori %38, %39 : tensor<1x1xi1, #blocked> loc(#loc50)
    %41 = arith.select %40, %34, %cst_0 : tensor<1x1xi1, #blocked>, tensor<1x1xf32, #blocked> loc(#loc51)
    %42 = tt.broadcast %41 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc39)
    %43 = arith.divf %37, %42 : tensor<1x2048xf32, #blocked> loc(#loc39)
    %44 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc40)
    %45 = tt.addptr %44, %1 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc40)
    tt.store %45, %43, %2 : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc41)
    tt.return loc(#loc42)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":25:33)
#loc3 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":29:25)
#loc4 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":31:34)
#loc5 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":31:39)
#loc6 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":32:22)
#loc7 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":34:23)
#loc8 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":35:38)
#loc9 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc11 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc12 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":37:26)
#loc13 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":36:28)
#loc14 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":38:4)
#loc15 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":39:28)
#loc16 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":39:70)
#loc17 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":40:30)
#loc18 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":40:19)
#loc19 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":47:39)
#loc20 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":48:22)
#loc21 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":49:23)
#loc22 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":50:24)
#loc23 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":52:25)
#loc24 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":53:40)
#loc25 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":54:29)
#loc26 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":54:76)
#loc28 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":56:27)
#loc29 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":55:30)
#loc30 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":57:4)
#loc31 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":58:28)
#loc32 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":58:71)
#loc33 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":63:41)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc35 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":65:46)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc38 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc39 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":66:24)
#loc40 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":67:29)
#loc41 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":67:76)
#loc42 = loc("inductor_cache/ml/cmlxmjcrenx52u4p4eugla6z2t6hnz2dl7pk4esue5xcuhcyxzlx.py":59:4)
#loc43 = loc(callsite(#loc9 at #loc10))
#loc45 = loc(callsite(#loc11 at #loc9))
#loc46 = loc(callsite(#loc9 at #loc27))
#loc48 = loc(callsite(#loc34 at #loc35))
#loc49 = loc(callsite(#loc36 at #loc35))
#loc50 = loc(callsite(#loc37 at #loc35))
#loc51 = loc(callsite(#loc38 at #loc35))
#loc52 = loc(callsite(#loc45 at #loc10))
#loc53 = loc(callsite(#loc45 at #loc27))
