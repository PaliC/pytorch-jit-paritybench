; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 60, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %16 = shl i32 %15, 4, !dbg !15
  %17 = lshr i32 %11, 4, !dbg !16
  %18 = and i32 %17, 7, !dbg !16
  %19 = or disjoint i32 %16, %18, !dbg !17
  %20 = or disjoint i32 %19, 8, !dbg !17
  %21 = icmp slt i32 %19, 16, !dbg !18
  %22 = icmp slt i32 %20, 16, !dbg !18
  %.frozen = freeze i32 %14, !dbg !19
  %23 = sdiv i32 %.frozen, 512, !dbg !19
  %24 = mul i32 %23, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %24, !dbg !20
  %25 = shl i32 %19, 9, !dbg !21
  %26 = shl i32 %20, 9, !dbg !21
  %27 = shl i32 %23, 13, !dbg !22
  %28 = add i32 %27, %.decomposed, !dbg !23
  %29 = add i32 %28, %25, !dbg !24
  %30 = add i32 %28, %26, !dbg !24
  %31 = sext i32 %29 to i64, !dbg !25
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !25
  %33 = sext i32 %30 to i64, !dbg !25
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !25
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %21) #4, !dbg !26
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %22) #4, !dbg !26
  %37 = sext i32 %.decomposed to i64, !dbg !27
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !27
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #4, !dbg !28
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !29
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #4, !dbg !30
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !30
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !30
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !30
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !30
  %46 = bitcast i32 %42 to float, !dbg !30
  %47 = bitcast i32 %43 to float, !dbg !30
  %48 = bitcast i32 %44 to float, !dbg !30
  %49 = bitcast i32 %45 to float, !dbg !30
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !31
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #4, !dbg !32
  %52 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !33
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #4, !dbg !34
  %54 = fadd float %46, 0x3EE4F8B580000000, !dbg !35
  %55 = fadd float %47, 0x3EE4F8B580000000, !dbg !35
  %56 = fadd float %48, 0x3EE4F8B580000000, !dbg !35
  %57 = fadd float %49, 0x3EE4F8B580000000, !dbg !35
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %58, 0, !dbg !36
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %59, 0, !dbg !36
  br i1 %.not.i, label %65, label %60, !dbg !36

60:                                               ; preds = %8
  br i1 %.not1.i, label %63, label %61, !dbg !36

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

65:                                               ; preds = %8
  br i1 %.not1.i, label %68, label %66, !dbg !36

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %61, %63, %66, %68
  %.0.i = phi float [ %62, %61 ], [ %64, %63 ], [ %67, %66 ], [ %69, %68 ], !dbg !36
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i3 = icmp eq i32 %70, 0, !dbg !36
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i6 = icmp eq i32 %71, 0, !dbg !36
  br i1 %.not.i3, label %77, label %72, !dbg !36

72:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %75, label %73, !dbg !36

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #4, !dbg !36
  br label %__nv_sqrtf.exit7, !dbg !36

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #4, !dbg !36
  br label %__nv_sqrtf.exit7, !dbg !36

77:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %80, label %78, !dbg !36

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #4, !dbg !36
  br label %__nv_sqrtf.exit7, !dbg !36

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #4, !dbg !36
  br label %__nv_sqrtf.exit7, !dbg !36

__nv_sqrtf.exit7:                                 ; preds = %73, %75, %78, %80
  %.0.i5 = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !36
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i8 = icmp eq i32 %82, 0, !dbg !36
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i11 = icmp eq i32 %83, 0, !dbg !36
  br i1 %.not.i8, label %89, label %84, !dbg !36

84:                                               ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %87, label %85, !dbg !36

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #4, !dbg !36
  br label %__nv_sqrtf.exit12, !dbg !36

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #4, !dbg !36
  br label %__nv_sqrtf.exit12, !dbg !36

89:                                               ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %92, label %90, !dbg !36

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #4, !dbg !36
  br label %__nv_sqrtf.exit12, !dbg !36

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #4, !dbg !36
  br label %__nv_sqrtf.exit12, !dbg !36

__nv_sqrtf.exit12:                                ; preds = %85, %87, %90, %92
  %.0.i10 = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !36
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i13 = icmp eq i32 %94, 0, !dbg !36
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i16 = icmp eq i32 %95, 0, !dbg !36
  br i1 %.not.i13, label %101, label %96, !dbg !36

96:                                               ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %99, label %97, !dbg !36

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #4, !dbg !36
  br label %__nv_sqrtf.exit17, !dbg !36

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #4, !dbg !36
  br label %__nv_sqrtf.exit17, !dbg !36

101:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %104, label %102, !dbg !36

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #4, !dbg !36
  br label %__nv_sqrtf.exit17, !dbg !36

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #4, !dbg !36
  br label %__nv_sqrtf.exit17, !dbg !36

__nv_sqrtf.exit17:                                ; preds = %97, %99, %102, %104
  %.0.i15 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !36
  %106 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !26
  %107 = bitcast i32 %106 to float, !dbg !26
  %108 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !28
  %109 = bitcast i32 %108 to float, !dbg !28
  %110 = fsub float %107, %109, !dbg !37
  %111 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !26
  %112 = bitcast i32 %111 to float, !dbg !26
  %113 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !28
  %114 = bitcast i32 %113 to float, !dbg !28
  %115 = fsub float %112, %114, !dbg !37
  %116 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !26
  %117 = bitcast i32 %116 to float, !dbg !26
  %118 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !28
  %119 = bitcast i32 %118 to float, !dbg !28
  %120 = fsub float %117, %119, !dbg !37
  %121 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !26
  %122 = bitcast i32 %121 to float, !dbg !26
  %123 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !28
  %124 = bitcast i32 %123 to float, !dbg !28
  %125 = fsub float %122, %124, !dbg !37
  %126 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !26
  %127 = bitcast i32 %126 to float, !dbg !26
  %128 = fsub float %127, %109, !dbg !37
  %129 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !26
  %130 = bitcast i32 %129 to float, !dbg !26
  %131 = fsub float %130, %114, !dbg !37
  %132 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !26
  %133 = bitcast i32 %132 to float, !dbg !26
  %134 = fsub float %133, %119, !dbg !37
  %135 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !26
  %136 = bitcast i32 %135 to float, !dbg !26
  %137 = fsub float %136, %124, !dbg !37
  %138 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !34
  %139 = bitcast i32 %138 to float, !dbg !34
  %140 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !34
  %141 = bitcast i32 %140 to float, !dbg !34
  %142 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !34
  %143 = bitcast i32 %142 to float, !dbg !34
  %144 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !34
  %145 = bitcast i32 %144 to float, !dbg !34
  %146 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !32
  %147 = bitcast i32 %146 to float, !dbg !32
  %148 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !32
  %149 = bitcast i32 %148 to float, !dbg !32
  %150 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !32
  %151 = bitcast i32 %150 to float, !dbg !32
  %152 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !32
  %153 = bitcast i32 %152 to float, !dbg !32
  %154 = and i32 %12, 12, !dbg !12
  %155 = or disjoint i32 %16, %154, !dbg !17
  %156 = icmp slt i32 %155, 16, !dbg !18
  %157 = lshr i32 %11, 2, !dbg !12
  %158 = and i32 %157, 31, !dbg !12
  %159 = or disjoint i32 %158, 32, !dbg !12
  %160 = or disjoint i32 %10, %159, !dbg !13
  %161 = or disjoint i32 %10, %158, !dbg !13
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !38
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !38
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #4, !dbg !38
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #4, !dbg !38
  %166 = fmul float %137, %162, !dbg !39
  %167 = fmul float %134, %163, !dbg !39
  %168 = fmul float %131, %164, !dbg !39
  %169 = fmul float %128, %165, !dbg !39
  %170 = fmul float %125, %162, !dbg !39
  %171 = fmul float %120, %163, !dbg !39
  %172 = fmul float %115, %164, !dbg !39
  %173 = fmul float %110, %165, !dbg !39
  %174 = fmul float %166, %153, !dbg !40
  %175 = fmul float %167, %151, !dbg !40
  %176 = fmul float %168, %149, !dbg !40
  %177 = fmul float %169, %147, !dbg !40
  %178 = fmul float %170, %153, !dbg !40
  %179 = fmul float %171, %151, !dbg !40
  %180 = fmul float %172, %149, !dbg !40
  %181 = fmul float %173, %147, !dbg !40
  %182 = fadd float %174, %145, !dbg !41
  %183 = fadd float %175, %143, !dbg !41
  %184 = fadd float %176, %141, !dbg !41
  %185 = fadd float %177, %139, !dbg !41
  %186 = fadd float %178, %145, !dbg !41
  %187 = fadd float %179, %143, !dbg !41
  %188 = fadd float %180, %141, !dbg !41
  %189 = fadd float %181, %139, !dbg !41
  %190 = shl i32 %161, 4, !dbg !42
  %191 = shl i32 %160, 4, !dbg !42
  %192 = add i32 %155, %190, !dbg !43
  %193 = add i32 %155, %191, !dbg !43
  %194 = sext i32 %192 to i64, !dbg !44
  %195 = getelementptr float, ptr addrspace(1) %5, i64 %194, !dbg !44
  %196 = sext i32 %193 to i64, !dbg !44
  %197 = getelementptr float, ptr addrspace(1) %5, i64 %196, !dbg !44
  %198 = shl i32 %11, 6, !dbg !45
  %199 = and i32 %198, 960, !dbg !45
  %200 = or disjoint i32 %199, %18, !dbg !45
  %201 = and i32 %12, 508, !dbg !45
  %202 = lshr exact i32 %199, 4, !dbg !45
  %203 = add nuw nsw i32 %202, %200, !dbg !45
  %204 = zext nneg i32 %203 to i64, !dbg !45
  %205 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %204, !dbg !45
  %206 = bitcast float %182 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %206, i1 true) #4, !dbg !45
  %207 = or disjoint i32 %200, 16, !dbg !45
  %208 = lshr i32 %207, 4, !dbg !45
  %209 = add nuw nsw i32 %208, %207, !dbg !45
  %210 = zext nneg i32 %209 to i64, !dbg !45
  %211 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %210, !dbg !45
  %212 = bitcast float %183 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %212, i1 true) #4, !dbg !45
  %213 = or disjoint i32 %200, 32, !dbg !45
  %214 = lshr i32 %213, 4, !dbg !45
  %215 = add nuw nsw i32 %214, %213, !dbg !45
  %216 = zext nneg i32 %215 to i64, !dbg !45
  %217 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %216, !dbg !45
  %218 = bitcast float %184 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %218, i1 true) #4, !dbg !45
  %219 = or disjoint i32 %200, 48, !dbg !45
  %220 = lshr i32 %219, 4, !dbg !45
  %221 = add nuw nsw i32 %220, %219, !dbg !45
  %222 = zext nneg i32 %221 to i64, !dbg !45
  %223 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %222, !dbg !45
  %224 = bitcast float %185 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 true) #4, !dbg !45
  %225 = or disjoint i32 %200, 8, !dbg !45
  %226 = add nuw nsw i32 %225, %202, !dbg !45
  %227 = zext nneg i32 %226 to i64, !dbg !45
  %228 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %227, !dbg !45
  %229 = bitcast float %186 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 true) #4, !dbg !45
  %230 = or disjoint i32 %200, 24, !dbg !45
  %231 = lshr i32 %230, 4, !dbg !45
  %232 = add nuw nsw i32 %231, %230, !dbg !45
  %233 = zext nneg i32 %232 to i64, !dbg !45
  %234 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %233, !dbg !45
  %235 = bitcast float %187 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %235, i1 true) #4, !dbg !45
  %236 = or disjoint i32 %200, 40, !dbg !45
  %237 = lshr i32 %236, 4, !dbg !45
  %238 = add nuw nsw i32 %237, %236, !dbg !45
  %239 = zext nneg i32 %238 to i64, !dbg !45
  %240 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %239, !dbg !45
  %241 = bitcast float %188 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 true) #4, !dbg !45
  %242 = or disjoint i32 %200, 56, !dbg !45
  %243 = lshr i32 %242, 4, !dbg !45
  %244 = add nuw nsw i32 %243, %242, !dbg !45
  %245 = zext nneg i32 %244 to i64, !dbg !45
  %246 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %245, !dbg !45
  %247 = bitcast float %189 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %247, i1 true) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %248 = lshr i32 %201, 4, !dbg !45
  %249 = add nuw nsw i32 %248, %201, !dbg !45
  %250 = zext nneg i32 %249 to i64, !dbg !45
  %251 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %250, !dbg !45
  %252 = load i32, ptr addrspace(3) %251, align 4, !dbg !45
  %253 = or disjoint i32 %201, 1, !dbg !45
  %254 = add nuw nsw i32 %253, %248, !dbg !45
  %255 = zext nneg i32 %254 to i64, !dbg !45
  %256 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %255, !dbg !45
  %257 = load i32, ptr addrspace(3) %256, align 4, !dbg !45
  %258 = or disjoint i32 %201, 2, !dbg !45
  %259 = add nuw nsw i32 %258, %248, !dbg !45
  %260 = zext nneg i32 %259 to i64, !dbg !45
  %261 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %260, !dbg !45
  %262 = load i32, ptr addrspace(3) %261, align 4, !dbg !45
  %263 = or disjoint i32 %201, 3, !dbg !45
  %264 = add nuw nsw i32 %263, %248, !dbg !45
  %265 = zext nneg i32 %264 to i64, !dbg !45
  %266 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %265, !dbg !45
  %267 = load i32, ptr addrspace(3) %266, align 4, !dbg !45
  %268 = or disjoint i32 %201, 512, !dbg !45
  %269 = lshr i32 %268, 4, !dbg !45
  %270 = add nuw nsw i32 %269, %268, !dbg !45
  %271 = zext nneg i32 %270 to i64, !dbg !45
  %272 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %271, !dbg !45
  %273 = load i32, ptr addrspace(3) %272, align 4, !dbg !45
  %274 = or disjoint i32 %201, 513, !dbg !45
  %275 = lshr i32 %274, 4, !dbg !45
  %276 = add nuw nsw i32 %275, %274, !dbg !45
  %277 = zext nneg i32 %276 to i64, !dbg !45
  %278 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %277, !dbg !45
  %279 = load i32, ptr addrspace(3) %278, align 4, !dbg !45
  %280 = or disjoint i32 %201, 514, !dbg !45
  %281 = lshr i32 %280, 4, !dbg !45
  %282 = add nuw nsw i32 %281, %280, !dbg !45
  %283 = zext nneg i32 %282 to i64, !dbg !45
  %284 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %283, !dbg !45
  %285 = load i32, ptr addrspace(3) %284, align 4, !dbg !45
  %286 = or disjoint i32 %201, 515, !dbg !45
  %287 = lshr i32 %286, 4, !dbg !45
  %288 = add nuw nsw i32 %287, %286, !dbg !45
  %289 = zext nneg i32 %288 to i64, !dbg !45
  %290 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %289, !dbg !45
  %291 = load i32, ptr addrspace(3) %290, align 4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %252, i32 %257, i32 %262, i32 %267, ptr addrspace(1) %195, i1 %156) #4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %273, i32 %279, i32 %285, i32 %291, ptr addrspace(1) %197, i1 %156) #4, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cu3qid3xjkfufvhszlyjqytfjyvrrndajdvztgyy5n33kovryri4.py", directory: "inductor_cache/u3")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_21, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_21, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_21", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 54, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 26, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 42, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 48, column: 33, scope: !7)
!43 = !DILocation(line: 48, column: 30, scope: !7)
!44 = !DILocation(line: 48, column: 25, scope: !7)
!45 = !DILocation(line: 48, column: 45, scope: !7)
!46 = !DILocation(line: 48, column: 4, scope: !7)
